{" Openoffice extract_content":{"type":"method","name":"extract_content","children":[],"call":[" process_zipfile ","Zip ZipFile  open "]}," Openoffice process_zipfile":{"type":"method","name":"process_zipfile","children":[],"call":[" process_zipfile ","path + ","zip dir foreach ","zip dir ","path empty? ","f << ","zip read "," open ","path == ","zip file file? ","zip file ","@tmpdir + + ","@tmpdir + ","@tmpdir + + + ","@file_nr to_s ","File  join ","@file_nr to_s + "]}," Openoffice default_sheet=":{"type":"method","name":"default_sheet=","children":[],"call":["Hash  new "," check_default_sheet "," raise ","sheet kind_of? ! ","sheet kind_of? ","@cells_read []= ","@first_row []= ","@last_row []= ","@first_column []= ","@last_column []= ","Hash  new s_read []= "]}," Openoffice sheets":{"type":"method","name":"sheets","children":[],"call":["return_sheets << ","se attributes [] ","se attributes ","se name == ","se name ","be each_element ","be name == ","be name ","oo_element each_element ","oo_element name == ","oo_element name ","oo_document each_element ","@doc each_element ","sheet [] ","@doc xpath each ","@doc xpath ","sheet attributes [] value ","sheet attributes [] ","sheet attributes ","@doc find each ","@doc find "]}," Openoffice read_cells":{"type":"method","name":"read_cells","children":[],"call":["@cell []= ","tr attributes [] ","tr attributes ","@cell_type [] == ","@cell_type [] ","str text ","str name == ","str name ","tr each_element ","v to_f ","@cell_type []= ","tr name == ","tr name ","te each_element ","te name == ","te name ","te attributes [] ","te attributes ","se each_element ","se attributes [] == ","se attributes [] ","se attributes ","se name == ","se name ","be each_element ","be name == ","be name ","oo_element each_element ","oo_element name == ","oo_element name ","oo_document each_element ","@doc each_element ","skip to_i - ","skip to_i ","oo_document attributes [] ","oo_document attributes ","y + - ","y + ","te attributes [] to_i ","x + ","0 upto ","v == ","vt == ","@formula []= "," raise ","@default_sheet == ","ignore_default_sheet == ","Openoffice  oo_type_2_roo_type ","sheet_found == ","v != "," belegen ","str_v gsub! ","str_v + ","child to_s ","str children each ","str children "," children_to_string ","str children size > ","str children size ","para_count > ","@cells_read []= ","sheet_found ! "," set_cell_values ","sheet == "," sheets include? "," sheets ","@comments_read []= "," read_styles ","@doc xpath each ","@doc xpath ","skip_col to_i - ","skip_col to_i ","cell attributes [] ","cell attributes ","cell attributes [] to_s ","str content ","cell children each ","cell children ","CGI  unescapeHTML ","child content ","@comment [] []= ","annotation text ","@comment [] ","@comment []= ","Hash  new ","annotation name == ","annotation name ","cell [] ","table_element children each ","table_element children ","row + - ","row + ","table_element attributes [] to_s to_i ","table_element attributes [] to_s ","table_element attributes [] ","table_element attributes ","@style_defaults [] << ","@style_defaults [] ","table_element name ","ws children each ","ws children ","ws [] "," validate_sheet! "," attr to_s "," attr "," attr to_s to_i ","@doc find each ","@doc find ","cell each_element ","table_element each_element ","table_element attributes [] to_i ","ws each_element ","ws attributes [] ","ws attributes ","@labels []= ","sheetname [] ","sheetname [] == ","coords split [] ","coords split ","ne attribute to_s split ","ne attribute to_s ","ne attribute ","@cell_ty + - pe [] == ","@cell_ty + - pe [] ","str ne attribute to_s  == ","str ne attribute to_s  ","tr attributes []  to_f ","str text  to_f ","cell attributes [] to_s  to_f ","str content  to_f ","cell []  to_f "," attr to_s  to_f "," attr  to_f ","cell attributes []  to_f ","@cell_ty + - pe []= ","tr ne attribute to_s  == ","tr ne attribute to_s  ","te ne attribute to_s  == ","te ne attribute to_s  ","se ne attribute to_s  == ","se ne attribute to_s  ","be ne attribute to_s  == ","be ne attribute to_s  ","oo_element ne attribute to_s  == ","oo_element ne attribute to_s  ","tr attributes []  to_i - ","tr attributes []  to_i ","y + -  + - ","y + -  + ","tr attributes []  == ","str text  == ","cell attributes [] to_s  == ","str content  == ","cell []  == "," attr to_s  == "," attr  == ","cell attributes []  == ","tr attributes [] t == ","str text t == ","cell attributes [] to_s t == ","str content t == ","cell [] t == "," attr to_s t == "," attr t == ","cell attributes [] t == ","@tr attributes []  []= ","@cell []  []= ","@ attr  []= ","@cell attributes []  []= ","Openoffice  oo_ty + - pe_2_roo_ty + - pe ","tr attributes []  != ","str text  != ","cell attributes [] to_s  != ","str content  != ","cell []  != "," attr to_s  != "," attr  != ","cell attributes []  != ","str_tr attributes []  gsub! ","str_str text  gsub! ","str_cell attributes [] to_s  gsub! ","str_str content  gsub! ","str_cell []  gsub! ","str_ attr to_s  gsub! ","str_ attr  gsub! ","str_cell attributes []  gsub! ","str_v +  gsub! "," children_to_string  gsub! ","CGI  unescapeHTML  gsub! ","str_tr attributes []  + ","str_str text  + ","str_cell attributes [] to_s  + ","str_str content  + ","str_cell []  + ","str_ attr to_s  + ","str_ attr  + ","str_cell attributes []  + ","str_v +  + "," children_to_string  + ","CGI  unescapeHTML  + "," set_cell_tr attributes [] alues "," set_cell_str text alues "," set_cell_cell attributes [] to_s alues "," set_cell_str content alues "," set_cell_cell [] alues "," set_cell_ attr to_s alues "," set_cell_ attr alues "," set_cell_cell attributes [] alues "," read_sty + - les ","tr attributes [] _col to_i - ","cell []  to_i - "," attr  to_i - ","cell attributes []  to_i - ","skip_coords split []  to_i - ","tr attributes [] _col to_i ","cell []  to_i "," attr  to_i ","cell attributes []  to_i ","skip_coords split []  to_i ","annotation ne attribute to_s  == ","annotation ne attribute to_s  ","row + -  + - ","coords split []  + - ","row + -  + ","coords split []  + ","@sty + - le_defaults [] << ","@sty + - le_defaults [] ","table_element ne attribute to_s  "," tr attributes [] alidate_sheet! "," str text alidate_sheet! "," cell attributes [] to_s alidate_sheet! "," str content alidate_sheet! "," cell [] alidate_sheet! ","  attr to_s alidate_sheet! ","  attr alidate_sheet! "," cell attributes [] alidate_sheet! ","sheetname []  [] ","sheetne attribute to_s  [] ","sheetname []  [] == ","sheetne attribute to_s  [] == "]}," Openoffice celltype":{"type":"method","name":"celltype","children":[],"call":["@cell_type [] "," read_cells "," normalize ","@formula [] ","@cell_type [] [] ","@formula [] [] ","@cells_read [] "]}," Openoffice cell":{"type":"method","name":"cell","children":[],"call":["@cell [] "," read_cells ","ABCDEFGHIJKLMNOPQRSTUVWXYZ index + ","ABCDEFGHIJKLMNOPQRSTUVWXYZ index ","col class == ","col class ","col upcase "," raise ","row class == ","row class ","Openoffice  letter_to_number "," normalize ","Date  new ","dd to_i ","mm to_i ","yyyy to_i ","@cell [] split "," celltype == "," celltype ","@cell [] [] ","@cell [] [] split ","@cells_read [] ","@cell [] [] to_s split ","@cell [] [] to_s ","ABCDEFGHIJKLMNOPQRSTUVWXYZ index +  class == ","Openoffice  letter_to_number  class == ","ABCDEFGHIJKLMNOPQRSTUVWXYZ index +  class ","Openoffice  letter_to_number  class ","ABCDEFGHIJKLMNOPQRSTUVWXYZ index +  upcase ","Openoffice  letter_to_number  upcase "]}," Openoffice initialize":{"type":"method","name":"initialize","children":[],"call":["Hash  new ","REXML Document  new ","File  new "," extract_content ","FileUtils  mkdir ","/tmp/oo_ + ","$$ to_s ","File  exists? ","FileUtils  rm_r ","@tmpdir + + ","@tmpdir + ","oo_ + ","DateTime  now < ","Date  new ","DateTime  now ","DateTime  now > ","file close ","File  join ","@file_nr to_s + ","@file_nr to_s "," warn ","filename [] != ","filename [] "," trap ","ENV  [] != ","ENV  [] "," create_openoffice ","File  exists? ! "," sheets first "," sheets "," sheets size == "," sheets size "," unzip ","packed == "," open_from_uri ","filename [] == "," raise ","File  file? ","File  extname != ","File  extname "," file_type_check ","h []= ","Nokogiri  XML ","GenericSpreadsheet  next_tmpdir ","File  open "," class extract_content "," class "," uri? "," make_tmpdir ","XML Parser  io parse ","XML Parser  io ","Dir  glob empty? ","Dir  glob ","oo_ +  + + ","File  join  + + ","GenericSpreadsheet  next_tmpdir  + + ","oo_ +  + ","File  join  + ","GenericSpreadsheet  next_tmpdir  + ","File  new  close ","@File  new _nr to_s + ","@File  new _nr to_s ","File  new name [] != "," unzip  [] != "," open_from_uri  [] != ","File  new name [] "," unzip  [] "," open_from_uri  [] ","File  new name [] == "," unzip  [] == "," open_from_uri  [] == ","File  File  new ? "," File  new _type_check "]}," Openoffice to_s":{"type":"method","name":"to_s","children":[],"call":["@cell inspect "," read_cells ","@cell [] inspect ","@cell [] ","@cells_read [] "]}," Openoffice officeversion":{"type":"method","name":"officeversion","children":[],"call":[" read_cells "," oo_version "]}," Openoffice row":{"type":"method","name":"row","children":[],"call":["result []= ","x - ","y == ","y to_i ","x to_i ","key split ","@cell each_pair "," read_cells ","result [] ","result [] == ","tmp_arr [] ","tmp_arr []= ","@cell [] each_pair ","@cell [] ","@cells_read [] ","result []  []= ","tmp_arr []  []= ","x to_i  - ","y to_i  == ","y to_i  to_i ","x to_i  to_i ","key to_i  split ","result []  [] ","tmp_arr []  [] ","result []  [] == ","tmp_arr []  [] == "]}," Openoffice number_to_letter":{"type":"method","name":"number_to_letter","children":[],"call":["ABCDEFGHIJKLMNOPQRSTUVWXYZ [] ","n - ","n div ","ABCDEFGHIJKLMNOPQRSTUVWXYZ [] + ","num - ","n % ","n > ","n div  - ","n div  div ","n div um - ","n %  - ","n div  % ","n div  > "]}," Openoffice last_column_as_letter":{"type":"method","name":"last_column_as_letter","children":[],"call":[" number_to_letter "," last_column ","Openoffice  number_to_letter "]}," Openoffice first_column_as_letter":{"type":"method","name":"first_column_as_letter","children":[],"call":[" number_to_letter "," first_column ","Openoffice  number_to_letter "]}," Openoffice first_column":{"type":"method","name":"first_column","children":[],"call":["(lvar :result) min ","x to_i ","key split ","@cell each_pair "," read_cells ","result == ","@first_column []= ","@cell [] each_pair ","@cell [] ","@first_column [] ","@cells_read [] ","sheet == ","(lvar :(lvar :result) min ) min ","x to_i  to_i ","(lvar :result) min  == "]}," Openoffice first_row":{"type":"method","name":"first_row","children":[],"call":["(lvar :result) min ","y to_i ","key split ","@cell each_pair "," read_cells ","result == ","@first_row []= ","@cell [] each_pair ","@cell [] ","@first_row [] ","@cells_read [] ","sheet == ","(lvar :(lvar :result) min ) min ","y to_i  to_i ","key to_i  split ","(lvar :result) min  == "]}," Openoffice last_column":{"type":"method","name":"last_column","children":[],"call":["(lvar :result) max ","x to_i ","key split ","@cell each_pair "," read_cells ","result == ","@last_column []= ","@cell [] each_pair ","@cell [] ","@last_column [] ","@cells_read [] ","(lvar :(lvar :result) max ) max ","(lvar :result) max to_i  ","x to_i  to_i ","(lvar :result) max  == "]}," Openoffice last_row":{"type":"method","name":"last_row","children":[],"call":["(lvar :result) max ","y to_i ","key split ","@cell each_pair "," read_cells ","result == ","@last_row []= ","@cell [] each_pair ","@cell [] ","@last_row [] ","@cells_read [] ","(lvar :(lvar :result) max ) max ","y to_i  to_i ","key to_i  split ","(lvar :result) max  == "]}," Openoffice letter_to_number":{"type":"method","name":"letter_to_number","children":[],"call":[]}," Openoffice as_letter":{"type":"method","name":"as_letter","children":[],"call":[" number_to_letter "," last_row "]}," Openoffice last_row_as_letter":{"type":"method","name":"last_row_as_letter","children":[],"call":[" number_to_letter "," last_row "]}," Openoffice first_row_as_letter":{"type":"method","name":"first_row_as_letter","children":[],"call":[" number_to_letter "," first_row "]}," Fixnum as_letter":{"type":"method","name":"as_letter","children":[],"call":["ABCDEFGHIJKLMNOPQRSTUVWXYZ [] "," - "]}," Excel get_firsts_lasts":{"type":"method","name":"get_firsts_lasts","children":[],"call":["(lvar :lr) max ","(lvar :fr) min ","(lvar :lc) max ","i + ","(lvar :fc) min ","cell ! ","row_par each_with_index ","worksheet each ","@workbook worksheet "," sheet_no ","@last_column []= ","@first_column []= ","@last_row []= ","@first_row []= "," empty_row? "," row ","worksheet max_col + ","worksheet max_col ","worksheet min_col + ","worksheet min_col ","worksheet max_row + ","worksheet max_row ","worksheet min_row + ","worksheet min_row "," p ","@filename == ","### max_col:  + ","worksheet max_col to_s ","### min_col:  + ","worksheet min_col to_s ","### max_row:  + ","worksheet max_row to_s ","### min_row:  + ","worksheet min_row to_s ","worksheet methods ","worksheet class "," row == "," get_firsts_lasts_parseexcel ","x > ","x < ","y > ","y < ","cellitem [] != ","cellitem [] ","cellitem [] class == ","cellitem [] class ","cellitem [] class != ","cellitem first ","@cell [] each ","@cell [] "," read_cells ","@cells_read [] ! ","@cells_read [] ","(lvar :(lvar :lr) max ) max ","(lvar :worksheet max_row + ) max ","(lvar :(lvar :fr) min ) min ","(lvar :worksheet min_row + ) min ","(lvar :(lvar :lc) max ) max ","(lvar :worksheet max_col + ) max ","(lvar :(lvar :fc) min ) min ","(lvar :worksheet min_col + ) min ","@workbook worksheet  each ","@workbook @workbook worksheet  ","@workbook worksheet  max_col + ","@workbook worksheet  max_col ","@workbook worksheet  min_col + ","@workbook worksheet  min_col ","@workbook worksheet  max_row + ","@workbook worksheet  max_row ","@workbook worksheet  min_row + ","@workbook worksheet  min_row ","@workbook worksheet  max_col to_s ","@workbook worksheet  min_col to_s ","@workbook worksheet  max_row to_s ","@workbook worksheet  min_row to_s ","@workbook worksheet  methods ","@workbook worksheet  class "]}," Excel last_column_as_letter":{"type":"method","name":"last_column_as_letter","children":[],"call":[" number_to_letter "," last_column ","Openoffice  number_to_letter "]}," Excel first_column_as_letter":{"type":"method","name":"first_column_as_letter","children":[],"call":[" number_to_letter "," first_column ","Openoffice  number_to_letter "]}," Excel last_row":{"type":"method","name":"last_row","children":[],"call":[" get_firsts_lasts ","@last_row [] "]}," Excel first_row":{"type":"method","name":"first_row","children":[],"call":[" get_firsts_lasts ","@first_row [] "]}," Excel last_column":{"type":"method","name":"last_column","children":[],"call":[" get_firsts_lasts ","@last_column [] "]}," Excel first_column":{"type":"method","name":"first_column","children":[],"call":[" get_firsts_lasts ","@first_column [] "]}," Excel row":{"type":"method","name":"row","children":[],"call":["worksheet row ","@workbook worksheet ","result << ","cell to_s ","cell date ","cell to_i ","cell type ","therow each ","rownumber - "," default_sheet_check "," sheet_no ","worksheet row each ","cell to_f ","worksheet worksheet row  ","@workbook worksheet  row ","@workbook @workbook worksheet  ","theworksheet row  each ","worksheet row  each ","worksheet row number - ","worksheet worksheet row  each ","@workbook worksheet  row each "]}," Excel celltype":{"type":"method","name":"celltype","children":[],"call":["cell to_s ","cell to_i ","cell type ","row_par at ","col - ","line == ","worksheet each ","@workbook worksheet "," normalize "," default_sheet_check ","cell type to_sym "," sheet_no ","sheet == ","cell to_s to_f < ","cell to_s to_f ","@cell_type [] [] ","@cell_type [] ","@formula [] [] ","@formula [] "," read_cells ","@cells_read [] "," raise "," puts ","row_par at  to_s ","row_par at  to_i ","row_par at  type ","@workbook worksheet  each ","@workbook @workbook worksheet  ","row_par at  type to_sym ","row_par at  to_s to_f < ","row_par at  to_s to_f ","@row_par at _type [] [] ","@row_par at _type [] "," read_row_par at s ","@row_par at s_read [] "]}," Excel cell":{"type":"method","name":"cell","children":[],"call":["cell to_s ","cell date to_s ","cell date ","cell to_i ","cell type ","row_par at ","col - ","line == ","worksheet each ","@workbook worksheet ","Openoffice  letter_to_number ","col class == ","col class "," raise ","row class == ","row class ","row_par == "," normalize ","cell to_f "," default_sheet_check "," sheet_no ","h * + + ","h * + ","m * ","h * ","secs - ","60 * ","(send\n  (lvar :secs) :/\n  (float 60.0)) floor ","secs / ","3600 * ","(send\n  (lvar :secs) :/\n  (float 3600.0)) floor ","f round ","cell to_s to_f * * * ","cell to_s to_f * * ","cell to_s to_f * ","cell to_s to_f ","cell to_s to_f < ","@cell [] [] ","@cell [] ","Date  new ","dd to_i ","mm to_i ","yyyy to_i ","@cell [] [] split "," celltype == "," celltype "," read_cells ","@cells_read [] "," platform_specific_iconv "," validate_sheet! "," platform_specific_encoding ","row_par at  to_s ","row_par at  date to_s ","row_par at  date ","row_par at  to_i ","row_par at  type ","Openoffice  letter_to_number  - ","@workbook worksheet  each ","works(send\n  (lvar :secs) :/\n  (float 3600.0)) floor eet eac(send\n  (lvar :secs) :/\n  (float 3600.0)) floor  ","@workbook @workbook worksheet  ","@workbook works(send\n  (lvar :secs) :/\n  (float 3600.0)) floor eet ","Openoffice  letter_to_nu(send\n  (lvar :secs) :/\n  (float 60.0)) floor ber ","Openocell to_s to_f * * * cell to_s to_f * * * ice  letter_to_number ","Openoffice  letter_to_number  class == ","Openoffice  letter_to_number  class "," nor(send\n  (lvar :secs) :/\n  (float 60.0)) floor alize ","row_par at  to_f ","cell to_cell to_s to_f * * *  "," default_s(send\n  (lvar :secs) :/\n  (float 3600.0)) floor eet_c(send\n  (lvar :secs) :/\n  (float 3600.0)) floor eck "," decell to_s to_f * * * ault_sheet_check "," s(send\n  (lvar :secs) :/\n  (float 3600.0)) floor eet_no ","(send\n  (lvar :secs) :/\n  (float 3600.0)) floor  * + + ","(send\n  (lvar :secs) :/\n  (float 3600.0)) floor  * + ","(send\n  (lvar :secs) :/\n  (float 60.0)) floor  * ","(send\n  (lvar :secs) :/\n  (float 3600.0)) floor  * ","secs -  - ","f round  - ","(send\n  (lvar :secs - ) :/\n  (float 60.0)) floor ","(send\n  (lvar :f round ) :/\n  (float 60.0)) floor ","(send\n  (lvar :secs) :/\n  (cell to_s to_f * * * loat 60.0)) cell to_s to_f * * * loor ","secs -  / ","f round  / ","(send\n  (lvar :secs - ) :/\n  (float 3600.0)) floor ","(send\n  (lvar :f round ) :/\n  (float 3600.0)) floor ","(send\n  (lvar :secs) :/\n  (cell to_s to_f * * * loat 3600.0)) cell to_s to_f * * * loor ","cell to_s to_f * * *  round ","row_par at  to_s to_f * * * ","cell to_s to_cell to_s to_f * * *  * * * ","row_par at  to_s to_f * * ","cell to_s to_cell to_s to_f * * *  * * ","row_par at  to_s to_f * ","cell to_s to_cell to_s to_f * * *  * ","row_par at  to_s to_f ","cell to_s to_cell to_s to_f * * *  ","row_par at  to_s to_f < ","cell to_s to_cell to_s to_f * * *  < ","@row_par at  [] [] ","@row_par at  [] ","(send\n  (lvar :secs) :/\n  (float 60.0)) floor (send\n  (lvar :secs) :/\n  (float 60.0)) floor  to_i ","@row_par at  [] [] split "," row_par at type == "," row_par at type "," read_row_par at s ","@row_par at s_read [] "," platfor(send\n  (lvar :secs) :/\n  (float 60.0)) floor _specific_iconv "," platcell to_s to_f * * * orm_specicell to_s to_f * * * ic_iconv "," validate_s(send\n  (lvar :secs) :/\n  (float 3600.0)) floor eet! "," platfor(send\n  (lvar :secs) :/\n  (float 60.0)) floor _specific_encoding "," platcell to_s to_f * * * orm_specicell to_s to_f * * * ic_encoding "]}," Excel default_sheet=":{"type":"method","name":"default_sheet=","children":[],"call":["n - "," fail ","ArgumentError  new ","n kind_of? ","DateTime  now < ","Date  new ","DateTime  now "," raise "," sheets include? ! "," sheets include? "," sheets ","@cells_read []= ","@first_row []= ","@last_row []= ","@first_column []= ","@last_column []= "]}," Excel sheets":{"type":"method","name":"sheets","children":[],"call":[" p ","@workbook worksheet ","DateTime  now < ","Date  new ","DateTime  now ","result << ","Iconv  new iconv ","@workbook worksheet name ","Iconv  new ","0 upto ","@workbook sheet_count - ","@workbook sheet_count ","CharGuess  guess "," platform_specific_iconv "," normalize_string ","worksheet name ","@workbook worksheets collect ","@workbook worksheets ","@workbook worksheets each "]}," Excel initialize":{"type":"method","name":"initialize","children":[],"call":["Spreadsheet ParseExcel  parse "," warn ","filename [] != ","filename [] "," sheets first "," sheets "," sheets size == "," sheets size "," p "," unzip ","packed == "," open_from_uri ","filename [] == ","FileUtils  mkdir ","File  exists? ","oo_ + ","$$ to_s ","Hash  new ","FileUtils  rm_r "," raise ","File  file? ","File  extname != ","File  extname "," file_type_check ","Spreadsheet  open "," open_from_stream ","File  join ","ENV  [] ","GenericSpreadsheet  next_tmpdir "," uri? "," make_tmpdir "," download_uri ","options [] ","Hash  === "," unzip  [] != "," open_from_uri  [] != "," open_from_stream  [] != "," download_uri  [] != "," unzip  [] "," open_from_uri  [] "," open_from_stream  [] "," download_uri  [] ","options []  == "," unzip  [] == "," open_from_uri  [] == "," open_from_stream  [] == "," download_uri  [] == "]}," Openoffice normalize":{"type":"method","name":"normalize","children":[],"call":["Openoffice  letter_to_number ","col class == ","col class "," raise ","row class == ","row class ","Openoffice  letter_to_number  class == ","Openoffice  letter_to_number  class "]}," Openoffice empty?":{"type":"method","name":"empty?","children":[],"call":[" cell empty? "," cell "," celltype == "," celltype "," read_cells ","@cells_read [] "]}," Excel empty?":{"type":"method","name":"empty?","children":[],"call":[" cell == "," cell "," celltype == "," celltype ","col > "," last_column ","col < "," first_column ","row > "," last_row ","row < "," first_row "," normalize "]}," Openoffice save":{"type":"method","name":"save","children":[],"call":[]}," Openoffice set":{"type":"method","name":"set","children":[],"call":["@cell []= "," puts "," raise ","Typ fuer  + + ","Typ fuer  + ","value to_s "," set_type ","value class == ","value class "," set_value "," normalize "," read_cells ","Type for  + + ","Type for  + ","@cells_read [] "]}," Openoffice reload":{"type":"method","name":"reload","children":[],"call":["FileUtils  rm_r ","Hash  new ","file close ","REXML Document  new ","File  new ","File  join ","@file_nr to_s + ","@file_nr to_s "," extract_content ","FileUtils  mkdir ","File  exists? ","oo_ + ","$$ to_s "," default_sheet= "," initialize ","File  new  close ","@File  new _nr to_s + ","@File  new _nr to_s "]}," Google last_row":{"type":"method","name":"last_row","children":[],"call":[" read_cells ","@last_row [] ","@gs oben_unten_links_rechts ","@last_column []= ","@first_column []= ","@last_row []= ","@first_row []= "," sheets index + "," sheets index "," sheets "," oben_unten_links_rechts "]}," Google first_row":{"type":"method","name":"first_row","children":[],"call":[" read_cells ","@first_row [] ","@gs oben_unten_links_rechts ","@last_column []= ","@first_column []= ","@last_row []= ","@first_row []= "," sheets index + "," sheets index "," sheets "," oben_unten_links_rechts "]}," Google read_cells":{"type":"method","name":"read_cells","children":[],"call":["Openoffice  letter_to_number upto ","Openoffice  letter_to_number ","1 upto "," p ","fe name ","feed each_element ","element each_element ","element name == ","element name ","@doc each_element ","file close ","REXML Document  new ","File  new ","@cells_read []= ","@formula [] []= ","@formula [] ","@formula []= ","@cell_type [] []= ","@cell_type [] ","@cell [] []= ","@cell [] ","value == "," sprintf ","dd to_i ","mm to_i ","yyyy to_i ","value split ","ty == ","@cell []= ","value to_f "," numeric? ","Google  date? ","numericvalue to_f ","@cell_type []= ","value [] == ","value [] ","item [] ","(send\n  (lvar :doc) :/\n  (str \"gs:cell\")) each ","doc / ","@gs fulldoc "," sheets index + "," sheets index "," sheets ","Google  timestring_to_seconds ","Google  time? ","value_type == "," determine_datatype ","ws [] ","ws input_value ","ws num_cols ","ws num_rows ","@worksheets [] "," raise "," validate_sheet! ","@cells_read [] ","ss to_i ","mi to_i ","hh to_i ","time_part split ","date_part split ","Google  datetime? ","doc find each ","doc find ","XML Parser  string parse ","XML Parser  string ","@gs fulldoc to_s ","$log debug ","ws inspect ","REXML Document  new  each_element ","@@gs fulldoc  each_element ","@XML Parser  string parse  each_element ","File  new  close ","value to_f  == ","numericvalue to_f  == ","item []  == ","Google  timestring_to_seconds  == ","value to_f  split ","numericvalue to_f  split ","item []  split ","Google  timestring_to_seconds  split ","value to_f  to_f ","numericvalue to_f  to_f ","item []  to_f ","Google  timestring_to_seconds  to_f ","numericnumericvalue to_f  to_f ","numericitem []  to_f ","numericGoogle  timestring_to_seconds  to_f ","value to_f  [] == ","numericvalue to_f  [] == ","item []  [] == ","Google  timestring_to_seconds  [] == ","value to_f  [] ","numericvalue to_f  [] ","item []  [] ","Google  timestring_to_seconds  [] ","(send\n  (lvar :@gs fulldoc ) :/\n  (str \"gs:cell\")) each ","(send\n  (lvar :XML Parser  string parse ) :/\n  (str \"gs:cell\")) each ","@gs fulldoc  / ","XML Parser  string parse  / ","@gs full@gs fulldoc  ","@gs fullXML Parser  string parse  ","value to_f _type == ","numericvalue to_f _type == ","item [] _type == ","Google  timestring_to_seconds _type == ","@worksheets []  [] ","ws input_value to_f  ","ws input_numericvalue to_f  ","ws input_item []  ","ws input_Google  timestring_to_seconds  ","@worksheets []  input_value ","ws num_item [] s ","@worksheets []  num_cols ","@worksheets []  num_ro@worksheets []  ","@gs fulldoc  find each ","XML Parser  string parse  find each ","@gs fulldoc  find ","XML Parser  string parse  find ","@gs full@gs fulldoc  to_s ","@gs fullXML Parser  string parse  to_s ","@worksheets []  inspect "]}," Google empty?":{"type":"method","name":"empty?","children":[],"call":[" cell empty? "," cell ","value empty? ","value class == ","value class "," celltype == "," celltype "," cell  empty? "," cell  class == "," cell  class "]}," Google celltype":{"type":"method","name":"celltype","children":[],"call":["@cell_type [] [] ","@cell_type [] ","@formula [] [] ","@formula [] "," normalize "," read_cells ","@cells_read [] ","@formula size > ","@formula size "]}," Google cell":{"type":"method","name":"cell","children":[],"call":["@gs evaluate_cell ","Timeout  timeout "," number_to_letter + ","row to_s "," number_to_letter "," normalize ","@cell [] [] ","@cell [] ","Date  new ","dd to_i ","mm to_i ","yyyy to_i "," raise ","yyyy to_i > ","yyyy to_i < ","mm to_i > ","mm to_i < ","dd to_i > ","dd to_i < ","@cell [] [] split "," celltype == "," celltype "," read_cells ","@cells_read [] "," check_default_sheet ","DateTime  strptime ","Date  strptime "," validate_sheet! ","DateTime  civil ","ss to_i ","mi to_i ","hh to_i ","time_part split ","date_part split ","$log debug ","Date  strptime inspect "]}," Google default_sheet=":{"type":"method","name":"default_sheet=","children":[],"call":["@gs default_sheet= ","@first_row []= ","@last_row []= ","@first_column []= ","@last_column []= "," check_default_sheet "," raise ","sheet kind_of? ! ","sheet kind_of? "]}," Google sheets":{"type":"method","name":"sheets","children":[],"call":["DateTime  now < ","Date  new ","DateTime  now ","@gs sheetlist "]}," Google initialize":{"type":"method","name":"initialize","children":[],"call":["@gs authenticate ","GoogleSpreadSheet  new ","Timeout  timeout ","Hash  new ","GData Spreadsheet  new "," sheets first "," sheets "," sheets size == "," sheets size ","ENV  [] ","session spreadsheet_by_key worksheets ","session spreadsheet_by_key ","@sheetlist << ","sheet title ","session spreadsheet_by_key worksheets each ","GoogleSpreadsheet  login ","h []= "," warn ","password size > ","password size ","user size > ","user size ","@worksheets map "," session spreadsheet_by_key worksheets "," session spreadsheet_by_key "," session ","options [] ","@gs sheetlist ","password empty? ","user empty? ","GoogleSpreadSheet  new  authenticate ","GData Spreadsheet  new  authenticate ","@GData Spreadsheet  new s authenticate ","GooGData Spreadsheet  new leSpreadSheet  new ","GoogleSpreadsheet  login  spreadsheet_by_key worksheets ","GoogleSpreadsheet  login  spreadsheet_by_key ","@gs sheetlist  << ","GoogleSpreadsheet  login  spreadsheet_by_key worksheets each ","GooGData Spreadsheet  new leSpreadsheet  loGData Spreadsheet  new in ","ENV  []  size > ","ENV  []  size ","session spreadsheet_by_key worksheets  map "," session spreadsheet_by_key worksheets  map "," GoogleSpreadsheet  login  spreadsheet_by_key worksheets "," GoogleSpreadsheet  login  spreadsheet_by_key "," GoogleSpreadsheet  login  ","GoogleSpreadSheet  new  sheetlist ","GData Spreadsheet  new  sheetlist ","@GData Spreadsheet  new s sheetlist ","ENV  []  empty? "]}," GoogleSpreadSheet get_http":{"type":"method","name":"get_http","children":[],"call":["Net HTTP  new "]}," GoogleSpreadSheet post":{"type":"method","name":"post","children":[],"call":[" get_http post "," get_http "]}," GoogleSpreadSheet request":{"type":"method","name":"request","children":[],"call":[" get_http get "," get_http "]}," GoogleSpreadSheet add_to_cell":{"type":"method","name":"add_to_cell","children":[],"call":[" set_entry "," entry "]}," GoogleSpreadSheet entry":{"type":"method","name":"entry","children":[],"call":[]}," GoogleSpreadSheet set_entry":{"type":"method","name":"set_entry","children":[],"call":[" post "]}," GoogleSpreadSheet evaluate_cell":{"type":"method","name":"evaluate_cell","children":[],"call":["(send\n  (lvar :doc) :/\n  (str \"content[@type='text']\")) inner_html ","doc / "," Hpricot "," request ","(send\n  (lvar : Hpricot ) :/\n  (str \"content[@type='text']\")) inner_html "," Hpricot  / "]}," GoogleSpreadSheet authenticate":{"type":"method","name":"authenticate","children":[],"call":["response body split last ","response body split ","response body ","Net HTTPS  post_form ","Net HTTPS  post_form  body split last ","Net HTTPS  post_form  body split ","Net HTTPS  post_form  body "]}," GoogleSpreadSheet default_sheet=":{"type":"method","name":"default_sheet=","children":[],"call":[]}," GoogleSpreadSheet initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Net HTTPS initialize":{"type":"method","name":"initialize","children":[],"call":[" use_ssl= "]}," Openoffice formula?":{"type":"method","name":"formula?","children":[],"call":[" formula != "," formula "," normalize "," read_cells ","@cells_read [] "]}," Openoffice formula":{"type":"method","name":"formula","children":[],"call":["@formula [] [] ","oooc: length ","@formula [] ","@formula [] == "," normalize "," read_cells ","@formula [] [] [] ","@formula [] [] == ","@cells_read [] ","str [] ","str index + ","str index ","str include? ","@formula [] []  [] ","@formula [] []  index + ","@formula [] []  index ","@formula [] []  include? "]}," Visitor visit_param":{"type":"method","name":"visit_param","children":[],"call":[" puts "," |--  + ","param column_name "]}," Visitor visit_formula":{"type":"method","name":"visit_formula","children":[],"call":["p accept ","formula params each ","formula params "," puts "," --  + ","formula name "]}," Openoffice set_type":{"type":"method","name":"set_type","children":[],"call":["@cell_type []= ","@cell_type [] []= ","@cell_type [] "]}," Openoffice set_value":{"type":"method","name":"set_value","children":[],"call":["@cell []= ","@cell [] []= ","@cell [] "]}," Openoffice to_yaml":{"type":"method","name":"to_yaml","children":[],"call":["result << "," cell "," celltype ","prefix each "," empty? ","(or\n  (lvar :from_column)\n  (send nil :first_column)) upto "," last_column "," first_column ","(or\n  (lvar :from_row)\n  (send nil :first_row)) upto "," last_row "," first_row ","(or\n  (lvar :from_column)\n  (send nil :first_column\n    (lvar :sheet))) upto ","(or\n  (lvar :from_row)\n  (send nil :first_row\n    (lvar :sheet))) upto "]}," Openoffice formulas":{"type":"method","name":"formulas","children":[],"call":["theformulas << "," formula "," formula? "," first_column upto "," last_column "," first_column "," first_row upto "," last_row "," first_row "," read_cells ","Array  new ","@cells_read [] ","elem [] ","elem [] [] ","@formula [] each collect ","@formula [] each ","@formula [] ","Array  new  << "]}," Openoffice solve":{"type":"method","name":"solve","children":[],"call":["parser parse accept ","parser parse "," puts "," formula [] "," formula ","Visitor  new ","SpreadsheetParser  new ","SpreadsheetParser  new  parse accept ","SpreadsheetParser  new  parse ","  formula []  [] ","  formula []  "]}," Excel default_sheet_check":{"type":"method","name":"default_sheet_check","children":[],"call":[" raise ","@default_sheet == "]}," Openoffice oo_type_2_roo_type":{"type":"method","name":"oo_type_2_roo_type","children":[],"call":[]}," Openoffice create_openoffice":{"type":"method","name":"create_openoffice","children":[],"call":["f close ","f print ","Base64  decode64 ","File  open "," load ","File  open  close ","File  open  print "]}," Excel sheet_no":{"type":"method","name":"sheet_no","children":[],"call":[" raise ","name == ","Iconv  new iconv ","@workbook worksheet name ","@workbook worksheet ","Iconv  new ","0 upto ","@workbook sheet_count - ","@workbook sheet_count ","name - ","name kind_of? "," platform_specific_iconv "," normalize_string ","worksheet name ","@workbook worksheets each ","@workbook worksheets "]}," Openoffice check_default_sheet":{"type":"method","name":"check_default_sheet","children":[],"call":[" raise ","sheet_found ! ","se attributes [] == ","se attributes [] ","se attributes ","se name == ","se name ","be each_element ","be name == ","be name ","oo_element each_element ","oo_element name == ","oo_element name ","oo_document each_element ","@doc each_element ","@default_sheet == "," sheets include? "," sheets "]}," Openoffice oo_version":{"type":"method","name":"oo_version","children":[],"call":["oo_document attributes [] ","oo_document attributes ","@doc each_element ","office attributes [] to_s ","office attributes [] ","office attributes ","@doc xpath each ","@doc xpath "," attr ","@doc find each ","@doc find "]}," Excel unzip":{"type":"method","name":"unzip","children":[],"call":[" process_zipfile ","Zip ZipFile  open "]}," Excel process_zipfile":{"type":"method","name":"process_zipfile","children":[],"call":[" process_zipfile ","path + ","zip dir foreach ","zip dir "," puts ","path empty? ","File  join "," p ","file close ","file write ","zip read ","File  open ","FileUtils  mkdir ","File  exists? ","oo_ + ","$$ to_s ","zip file file? ","zip file "," process_zipFile  open  ","File  open  close ","File  open  write ","zip File  open  File  open ? ","zip File  open  "]}," Excel open_from_uri":{"type":"method","name":"open_from_uri","children":[],"call":["File  join ","File  basename ","f close "," raise ","f write ","net read "," open ","File  open "," require ","File  open  close ","File  open  write "]}," Excel remove_tmp":{"type":"method","name":"remove_tmp","children":[],"call":["FileUtils  rm_r ","File  exists? "]}," Openoffice open_from_uri":{"type":"method","name":"open_from_uri","children":[],"call":["File  join ","File  basename ","f close "," raise ","f write ","net read "," open ","File  open "," require ","File  open  close ","File  open  write "]}," Openoffice unzip":{"type":"method","name":"unzip","children":[],"call":[" process_zipfile_packed ","Zip ZipFile  open "]}," Openoffice process_zipfile_packed":{"type":"method","name":"process_zipfile_packed","children":[],"call":[" process_zipfile_packed ","path + ","zip dir foreach ","zip dir ","path empty? ","File  join ","file close ","file write ","zip read ","File  open ","FileUtils  mkdir ","File  exists? ","oo_ + ","$$ to_s ","zip file file? ","zip file "," process_zipFile  open _packed ","File  open  close ","File  open  write ","zip File  open  File  open ? ","zip File  open  "]}," Openoffice remove_tmp":{"type":"method","name":"remove_tmp","children":[],"call":["FileUtils  rm_r ","File  exists? "]}," Openoffice children_to_string":{"type":"method","name":"children_to_string","children":[],"call":["result + ","child to_s ","  * ","compressed_spaces == ","child attributes [] to_i ","child attributes [] ","child attributes ","child name == ","child name ","child class == ","child class ","children each ","child content ","child attributes [] to_s to_i ","child attributes [] to_s ","child text? ","result +  + ","child attributes [] to_i  == ","child attributes [] to_s to_i  == "]}," Openoffice write_csv_content":{"type":"method","name":"write_csv_content","children":[],"call":["file print ","cells << "," raise ","unhandled celltype  + "," celltype to_s "," celltype ","onecell to_i ","onecell == ","\" + + ","\" + ","onecell gsub! "," empty? "," cell ","col > ","1 upto "," last_column "," first_row upto "," last_row "," first_row "," one_cell_output "," cell  to_i "," cell  == "," cell  gsub! "]}," Openoffice belegen":{"type":"method","name":"belegen","children":[],"call":["@cell []= ","x + ","@cell_type [] == ","@cell_type [] ","tr attributes [] ","tr attributes ","v to_f ","@formula []= ","@cell_type []= ","Openoffice  oo_type_2_roo_type "]}," Openoffice to_csv":{"type":"method","name":"to_csv","children":[],"call":[" write_csv_content ","file close ","File  open ","File  open  close "]}," Openoffice one_cell_output":{"type":"method","name":"one_cell_output","children":[],"call":[" raise ","unhandled celltype  + ","onecelltype to_s ","str << ","\" + + ","\" + ","onecell to_s ","unhandled onecell-class  + ","onecell class to_s ","onecell class ","onecell to_i to_s ","onecell to_i ","onecell == ","onecell class == ","onecell gsub! "]}," Openoffice set_cell_values":{"type":"method","name":"set_cell_values","children":[],"call":["@cell [] []= ","@cell [] ","v to_f ","tr attributes [] ","tr attributes ","@cell_type [] [] ","@cell_type [] ","@cell []= ","@formula [] []= ","@formula [] ","@formula []= ","@cell_type [] []= ","Openoffice  oo_type_2_roo_type ","@cell_type []= ","x + ","hms [] to_i * + + ","hms [] to_i ","hms [] ","hms [] to_i * + ","hms [] to_i * ","v split ","table_cell attributes [] ","table_cell attributes ","DateTime  parse ","table_cell attributes [] to_s ","table_cell attributes [] to_s size != ","XXXX-XX-XX size ","table_cell attributes [] to_s size ","@style [] []= ","@style [] ","@style []= ","formula [] ","prefix length ","formula [] == ","(str \"of:\") each ","Roo Openoffice  oo_type_2_roo_type "," attr to_s "," attr "," attr size != "," attr size ","tr attributes [] size != ","tr attributes [] size ","table_cell attributes [] size != ","table_cell attributes [] size ","@formula []  [] []= ","@formula []  [] ","@formula []  []= ","v split  [] to_i * + + ","v split  [] to_i ","v split  [] ","v split  [] to_i * + ","v split  [] to_i * ","formula []  [] ","formula []  [] == "]}," Openoffice info":{"type":"method","name":"info","children":[],"call":["result << ","sheet != "," sheets last "," sheets ","Openoffice  number_to_letter "," last_column "," first_column "," last_row "," first_row ","Sheet  + + ","Sheet  + ","n to_s "," default_sheet= "," sheets each ","(str \"File: \") + + ","(send\n  (send nil :sheets) :map) to_s [] ","(send\n  (send nil :sheets) :map) to_s ","sheet + "," sheets map ","(str \"File: \") + "," sheets size ","(str \"File: \") + +  << "]}," Openoffice find":{"type":"method","name":"find","children":[],"call":["result << "," row ","tmp []= "," cell ","val == ","column_with each ","1 upto "," row size ","found > "," cell == ","column_with [] ","conditions each "," first_row upto "," last_row "," first_row ","column_with []= "," last_column ","key == ","args [] each ","args [] ","args [] class == ","args [] class ","args [] == ","Array  new ","hval == ","hkey == ","arg each ","arg class == ","arg class ","args each ","Array  new  << "]}," Openoffice column":{"type":"method","name":"column","children":[],"call":["result << "," cell "," first_row upto "," last_row "," first_row "," read_cells ","@cells_read [] ","Openoffice  letter_to_number ","columnnumber class == ","columnnumber class ","Openoffice  letter_to_number  class == ","Openoffice  letter_to_number  class "]}," Excel empty_row?":{"type":"method","name":"empty_row?","children":[],"call":["content ! ","elem != ","row each ","row compact each ","row compact "]}," Excel write_csv_content":{"type":"method","name":"write_csv_content","children":[],"call":["file print "," one_cell_output ","cell date ","cell to_s ","cell to_f ","cell type ","row_par at ","col - ","col > ","1 upto ","row_par length ","worksheet each ","@workbook worksheet "," sheet_no "," one_row_par at _output ","row_par at  date ","row_par at  to_s ","row_par at  to_f ","row_par at  type ","@workbook worksheet  each ","@workbook @workbook worksheet  "]}," Excel formulas":{"type":"method","name":"formulas","children":[],"call":[" raise "," wait_for_version_080 "]}," Excel formula?":{"type":"method","name":"formula?","children":[],"call":[" raise "," wait_for_version_080 "]}," Excel formula":{"type":"method","name":"formula","children":[],"call":[" raise "," wait_for_version_080 "]}," Excel column":{"type":"method","name":"column","children":[],"call":["result << ","cell to_s ","cell date ","cell to_i ","cell type ","row_par at ","columnnumber - ","worksheet each ","@workbook worksheet "," sheet_no "," default_sheet_check ","Openoffice  letter_to_number ","columnnumber class == ","columnnumber class ","cell to_f ","row_par at  to_s ","row_par at  date ","row_par at  to_i ","row_par at  type ","Openoffice  letter_to_number  - ","@workbook worksheet  each ","@workbook @workbook worksheet  ","Openoffice  letter_to_number  class == ","Openoffice  letter_to_number  class ","row_par at  to_f "]}," Google one_cell_output":{"type":"method","name":"one_cell_output","children":[],"call":[" raise ","unhandled celltype  + ","onecelltype to_s ","str << ","\" + + ","\" + ","onecell to_s ","unhandled onecell-class  + ","onecell class to_s ","onecell class ","onecell to_i to_s ","onecell to_i ","onecell == ","onecell class == ","onecell gsub! "]}," Google write_csv_content":{"type":"method","name":"write_csv_content","children":[],"call":["file print "," one_cell_output "," empty? "," celltype "," cell ","col > ","1 upto "," last_column "," first_row upto "," last_row "," first_row "]}," Google to_date":{"type":"method","name":"to_date","children":[],"call":[]}," Google numeric?":{"type":"method","name":"numeric?","children":[],"call":["string =~ "]}," Google check_default_sheet":{"type":"method","name":"check_default_sheet","children":[],"call":[" raise ","sheet_found ! "," sheets index "," sheets ","@default_sheet == "]}," Google find":{"type":"method","name":"find","children":[],"call":["result << "," row ","tmp []= "," cell ","val == ","column_with each ","1 upto "," row size ","found > "," cell == ","column_with [] ","conditions each "," first_row upto "," last_row "," first_row ","column_with []= "," last_column ","key == ","args [] each ","args [] ","args [] class == ","args [] class ","args [] == ","Array  new ","hval == ","hkey == ","arg each ","arg class == ","arg class ","args each ","Array  new  << "]}," Google to_csv":{"type":"method","name":"to_csv","children":[],"call":[" write_csv_content ","file close ","File  open ","File  open  close "]}," Google last_column":{"type":"method","name":"last_column","children":[],"call":["@last_column [] ","@gs oben_unten_links_rechts ","@last_column []= ","@first_column []= ","@last_row []= ","@first_row []= "," sheets index + "," sheets index "," sheets "," oben_unten_links_rechts "]}," Google first_column":{"type":"method","name":"first_column","children":[],"call":["@first_column [] ","@gs oben_unten_links_rechts ","@last_column []= ","@first_column []= ","@last_row []= ","@first_row []= "," sheets index + "," sheets index "," sheets "," oben_unten_links_rechts "]}," Google set_value":{"type":"method","name":"set_value","children":[],"call":["@gs add_to_cell_roo "," raise ","invalid sheet ' + + ","invalid sheet ' + ","sheet to_s "," sheets index + "," sheets index "," sheets ","@cell_type [] []= ","@cell_type [] ","@cell [] []= ","@cell [] "," determine_datatype ","value to_s ","@cells_read [] "," add_to_cell_roo "," normalize "," set "," warn "]}," Google column":{"type":"method","name":"column","children":[],"call":["result << "," cell "," first_row upto "," last_row "," first_row "," read_cells ","@cells_read [] ","GenericSpreadsheet  letter_to_number ","columnnumber class == ","columnnumber class ","GenericSpreadsheet  letter_to_number  class == ","GenericSpreadsheet  letter_to_number  class "]}," Google row":{"type":"method","name":"row","children":[],"call":["result [] ","result [] == ","tmp_arr [] ","tmp_arr []= ","y == ","y to_i ","x to_i ","key split ","@cell [] each_pair ","@cell [] "," read_cells ","@cells_read [] ","result []  [] ","tmp_arr []  [] ","result []  [] == ","tmp_arr []  [] == ","y to_i  == ","y to_i  to_i ","x to_i  to_i ","key to_i  split "]}," Google formulas":{"type":"method","name":"formulas","children":[],"call":["theformulas << "," formula "," formula? "," first_column upto "," last_column "," first_column "," first_row upto "," last_row "," first_row "," read_cells ","@cells_read [] ","Array  new ","Array  new  << "]}," Google formula?":{"type":"method","name":"formula?","children":[],"call":[" formula != "," formula "," normalize "," read_cells ","@cells_read [] "]}," Google formula":{"type":"method","name":"formula","children":[],"call":["@formula [] [] ","@formula [] ","@formula [] [] == "," normalize "," read_cells ","@cells_read [] "]}," Google date?":{"type":"method","name":"date?","children":[],"call":["Date  strptime "]}," GData Spreadsheet fulldoc":{"type":"method","name":"fulldoc","children":[],"call":["cols max ","cols min ","rows max ","rows min ","cols push ","item [] to_i ","item [] ","rows push ","(send\n  (lvar :doc) :/\n  (str \"gs:cell\")) each ","doc / "," Hpricot "," request "," projection "," visibility ","(send\n  (lvar : Hpricot ) :/\n  (str \"gs:cell\")) each "," Hpricot  / "]}," GData Spreadsheet oben_unten_links_rechts":{"type":"method","name":"oben_unten_links_rechts","children":[],"call":["cols max ","cols min ","rows max ","rows min ","cols push ","item [] to_i ","item [] ","rows push ","(send\n  (lvar :doc) :/\n  (str \"gs:cell\")) each ","doc / "," Hpricot "," request "," projection "," visibility ","(send\n  (lvar : Hpricot ) :/\n  (str \"gs:cell\")) each "," Hpricot  / "]}," GData Spreadsheet get_one_sheet":{"type":"method","name":"get_one_sheet","children":[],"call":[" Hpricot "," request "," projection "," visibility "]}," GData Spreadsheet add_to_cell_roo":{"type":"method","name":"add_to_cell_roo","children":[],"call":[" save_entry_roo "," entry_roo "]}," GData Spreadsheet entry_roo":{"type":"method","name":"entry_roo","children":[],"call":[]}," GData Spreadsheet save_entry_roo":{"type":"method","name":"save_entry_roo","children":[],"call":[" post "," projection "," visibility "," raise "," visibility == "]}," GData Spreadsheet sheetlist":{"type":"method","name":"sheetlist","children":[],"call":["result << ","elem inner_html ","(send\n  (lvar :doc) :/\n  (str \"content\")) each ","doc / "," Hpricot "," request "," raise ","(send\n  (lvar :doc) :/\n  (str \"title\")) inner_html ","(send\n  (lvar :doc) :/\n  (str \"h2\")) inner_html ","(send\n  (lvar :doc) :/\n  (str \"h2\")) inner_html =~ ","result size == ","result size "," projection "," visibility ","(send\n  (lvar : Hpricot ) :/\n  (str \"content\")) each "," Hpricot  / ","(send\n  (lvar : Hpricot ) :/\n  (str \"title\")) inner_html ","(send\n  (lvar : Hpricot ) :/\n  (str \"h2\")) inner_html ","(send\n  (lvar : Hpricot ) :/\n  (str \"h2\")) inner_html =~ "]}," GData Spreadsheet evaluate_cell":{"type":"method","name":"evaluate_cell","children":[],"call":["(send\n  (lvar :doc) :/\n  (str \"content\")) inner_html ","doc / "," Hpricot "," request "," raise ","sheet_no class == ","sheet_no class ","sheet_no > "," projection "," visibility ","(send\n  (lvar : Hpricot ) :/\n  (str \"content\")) inner_html "," Hpricot  / "]}," GenericSpreadsheet process_zipfile_packed":{"type":"method","name":"process_zipfile_packed","children":[],"call":[" process_zipfile_packed ","path + ","zip dir foreach ","zip dir ","path empty? ","File  join ","file close ","file write ","zip read ","File  open ","FileUtils  mkdir ","File  exists? ","oo_ + ","$$ to_s ","zip file file? ","zip file "," process_zipFile  open _packed ","File  open  close ","File  open  write ","zip File  open  File  open ? ","zip File  open  "]}," GenericSpreadsheet initialize":{"type":"method","name":"initialize","children":[],"call":[" sheets first "," sheets ","h []= ","Hash  new "]}," GenericSpreadsheet before":{"type":"method","name":"before","children":[],"call":["DateTime  now <= ","DateTime  now "]}," GenericSpreadsheet after":{"type":"method","name":"after","children":[],"call":["DateTime  now > ","DateTime  now "]}," GenericSpreadsheet unzip":{"type":"method","name":"unzip","children":[],"call":[" process_zipfile_packed ","Zip ZipFile  open "]}," GenericSpreadsheet letter_to_number":{"type":"method","name":"letter_to_number","children":[],"call":[]}," GenericSpreadsheet number_to_letter":{"type":"method","name":"number_to_letter","children":[],"call":[]}," GenericSpreadsheet first_column":{"type":"method","name":"first_column","children":[],"call":["@first_column []= ","result == ","(lvar :result) min ","x to_i ","key split ","@cell [] each_pair ","@cell [] ","@first_column [] "," read_cells ","@cells_read [] ","sheet == ","key last to_i ","key last ","(lvar :result) min  == ","(lvar :(lvar :result) min ) min ","x to_i  to_i ","key last to_i  to_i "]}," GenericSpreadsheet first_row":{"type":"method","name":"first_row","children":[],"call":["@first_row []= ","result == ","(lvar :result) min ","y to_i ","key split ","@cell [] each_pair ","@cell [] ","@first_row [] "," read_cells ","@cells_read [] ","sheet == ","key first to_i ","key first ","(lvar :result) min  == ","(lvar :(lvar :result) min ) min ","y to_i  to_i ","key first to_i  to_i ","key to_i  split ","kekey first to_i  split ","key to_i  first to_i ","kekey first to_i  first to_i ","key to_i  first ","kekey first to_i  first "]}," GenericSpreadsheet last_column":{"type":"method","name":"last_column","children":[],"call":["@last_column []= ","result == ","(lvar :result) max ","x to_i ","key split ","@cell [] each_pair ","@cell [] ","@last_column [] "," read_cells ","@cells_read [] ","key last to_i ","key last ","(lvar :result) max  == ","(lvar :(lvar :result) max ) max ","(lvar :result) max to_i  ","(lvar :result) makey last to_i  ","x to_i  to_i ","key last to_i  to_i "]}," GenericSpreadsheet last_row":{"type":"method","name":"last_row","children":[],"call":["@last_row []= ","result == ","(lvar :result) max ","y to_i ","key split ","@cell [] each_pair ","@cell [] ","@last_row [] "," read_cells ","@cells_read [] ","key first to_i ","key first ","(lvar :result) max  == ","(lvar :(lvar :result) max ) max ","y to_i  to_i ","key first to_i  to_i ","key to_i  split ","kekey first to_i  split ","key to_i  first to_i ","kekey first to_i  first to_i ","key to_i  first ","kekey first to_i  first "]}," GenericSpreadsheet open_from_uri":{"type":"method","name":"open_from_uri","children":[],"call":["File  join ","File  basename ","f close "," raise ","f write ","net read "," open ","File  open "," require ","file write ","File  open  close ","File  open  write ","File  open ile write "]}," GenericSpreadsheet last_column_as_letter":{"type":"method","name":"last_column_as_letter","children":[],"call":["GenericSpreadsheet  number_to_letter "," last_column ","Roo GenericSpreadsheet  number_to_letter "]}," GenericSpreadsheet first_column_as_letter":{"type":"method","name":"first_column_as_letter","children":[],"call":["GenericSpreadsheet  number_to_letter "," first_column ","Roo GenericSpreadsheet  number_to_letter "]}," GenericSpreadsheet remove_tmp":{"type":"method","name":"remove_tmp","children":[],"call":["FileUtils  rm_r ","File  exists? "]}," GenericSpreadsheet to_yaml":{"type":"method","name":"to_yaml","children":[],"call":["result << "," cell "," celltype ","prefix each "," empty? ","(or\n  (lvar :from_column)\n  (send nil :first_column\n    (lvar :sheet))) upto "," last_column "," first_column ","(or\n  (lvar :from_row)\n  (send nil :first_row\n    (lvar :sheet))) upto "," last_row "," first_row ","GenericSpreadsheet  integer_to_timestring "," celltype == ","Roo GenericSpreadsheet  integer_to_timestring "]}," GenericSpreadsheet info":{"type":"method","name":"info","children":[],"call":["result << ","sheet != "," sheets last "," sheets ","GenericSpreadsheet  number_to_letter "," last_column "," first_column "," last_row "," first_row ","Sheet  + + ","Sheet  + ","n to_s "," default_sheet= "," sheets each ","(str \"File: \") + + ","(send\n  (send nil :sheets) :map) to_s [] ","(send\n  (send nil :sheets) :map) to_s ","sheet + "," sheets map ","(str \"File: \") + "," sheets size ","(send nil :first_row) ! ","File  basename "," sheets join ","Roo GenericSpreadsheet  number_to_letter ","(str \"File: \") + +  << "]}," GenericSpreadsheet reload":{"type":"method","name":"reload","children":[],"call":[" default_sheet= "," initialize "," class == "," class "," class to_s == "," class to_s "," to "]}," GenericSpreadsheet empty?":{"type":"method","name":"empty?","children":[],"call":["col > "," last_column ","col < "," first_column ","row > "," last_row ","row < "," first_row "," cell empty? "," cell "," celltype == "," celltype "," normalize "," read_cells "," class == "," class ","@cells_read [] ","contents empty? ","contents ! "," cell  empty? "," cell  ! "]}," GenericSpreadsheet normalize":{"type":"method","name":"normalize","children":[],"call":["GenericSpreadsheet  letter_to_number ","col class == ","col class "," raise ","row class == ","row class ","Roo GenericSpreadsheet  letter_to_number ","GenericSpreadsheet  letter_to_number  class == ","Roo GenericSpreadsheet  letter_to_number  class == ","GenericSpreadsheet  letter_to_number  class ","Roo GenericSpreadsheet  letter_to_number  class "]}," Excel platform_specific_iconv":{"type":"method","name":"platform_specific_iconv","children":[],"call":["Iconv  new iconv ","Iconv  new ","RUBY_PLATFORM  downcase "," remove_every_second_null "," every_second_null? "]}," GenericSpreadsheet one_cell_output":{"type":"method","name":"one_cell_output","children":[],"call":[" raise ","unhandled celltype  + ","onecelltype to_s ","str << ","\" + + ","\" + ","onecell to_s ","unhandled onecell-class  + ","onecell class to_s ","onecell class ","onecell to_i to_s ","onecell to_i ","onecell == ","onecell class == ","onecell gsub! ","GenericSpreadsheet  integer_to_timestring ","onecell gsub ","onecell empty? ","onecell gsub celltype to_s ","onecell gsub cell to_s ","unhandled onecell gsub cell-class  + ","onecell gsub cell class to_s ","onecell gsub cell class ","onecell gsub cell to_i to_s ","onecell gsub cell to_i ","onecell gsub cell == ","onecell gsub cell class == ","onecell gsub cell gsub! ","onecell gsub cell gsub ","onecell gsub cell empty? "]}," GenericSpreadsheet write_csv_content":{"type":"method","name":"write_csv_content","children":[],"call":["file print "," one_cell_output "," empty? "," celltype "," cell ","col > ","1 upto "," last_column "," first_row upto "," last_row "," first_row "," cell_to_csv "]}," GenericSpreadsheet to_csv":{"type":"method","name":"to_csv","children":[],"call":[" write_csv_content ","file close ","File  open ","sio read ","sio rewind ","StringIO  new ","File  open  close ","StringIO  new  read ","StringIO  new  rewind "]}," GenericSpreadsheet find":{"type":"method","name":"find","children":[],"call":["result << "," row ","tmp []= "," cell ","val == ","column_with each ","1 upto "," row size ","found > "," cell == ","column_with [] ","conditions each "," first_row upto "," last_row "," first_row ","column_with []= "," last_column ","key == ","args [] each ","args [] ","args [] class == ","args [] class ","args [] == ","Array  new ","hval == ","hkey == ","arg each ","arg class == ","arg class ","args each ","j - ","Hash  [] ","header_for fetch ","1 upto map ","rows map ","conditions all? ","rows select ","header_for invert ","conditions empty? ! ","conditions empty? ","options [] ","j + "," row size times map "," row size times ","args pop ","args last is_a? ","args last ","Array  new  << ","header_for invert  each ","header_for invert  [] ","options []  each ","header_for invert  []= ","Hash  []  fetch "," first_row upto  map ","options []  all? "," first_row upto  select ","Hash  []  invert ","options []  empty? ! ","options []  empty? "]}," Excel remove_every_second_null":{"type":"method","name":"remove_every_second_null","children":[],"call":["str [] ","i * ","0 upto ","str length / - ","str length / ","str length "]}," Excel every_second_null?":{"type":"method","name":"every_second_null?","children":[],"call":["n != ","str [] ","i * + ","i * ","0 upto ","str length / - ","str length / ","str length ","str length < ","str [] != ","str []  != ","str lestr [] gth / - ","str lestr [] gth / ","str lestr [] gth ","str lestr [] gth < "]}," Excel inject_null_characters":{"type":"method","name":"inject_null_characters","children":[],"call":["str [] ","0 upto ","str size - ","str size ","str class != ","str class "]}," spreadsheet":{"type":"method","name":"spreadsheet","children":[],"call":["o << ","@rspreadsheet cell ","@rspreadsheet cell to_s empty? ","@rspreadsheet cell to_s ","x > ","x < ","@rspreadsheet first_column upto ","@rspreadsheet last_column ","@rspreadsheet first_column ","linenumber to_s ","y > ","y < ","@rspreadsheet first_row upto ","@rspreadsheet last_row ","@rspreadsheet first_row ","GenericSpreadsheet  number_to_letter ","c > ","c < ","options [] ","options [] - ","@rspreadsheet default_sheet= ","sheets each ","options [] != ","Roo GenericSpreadsheet  number_to_letter ","Roo Base  number_to_letter ","@rspreadsheet @rspreadsheet first_column  upto ","@rspreadsheet options []  upto ","@rspreadsheet @rspreadsheet last_column  ","@rspreadsheet options []  ","@rspreadsheet @rspreadsheet first_column  ","@rspreadsheet first_row  to_s ","@rspreadsheet @rspreadsheet first_row  upto ","@rspreadsheet @rspreadsheet last_row  ","@rspreadsheet @rspreadsheet first_row  "]}," GenericSpreadsheet check_default_sheet":{"type":"method","name":"check_default_sheet","children":[],"call":[" raise ","sheet_found ! "," sheets index "," sheets ","@default_sheet == "]}," GenericSpreadsheet default_sheet=":{"type":"method","name":"default_sheet=","children":[],"call":["@cells_read []= ","@first_row []= ","@last_row []= ","@first_column []= ","@last_column []= "," check_default_sheet "," raise "," sheets include? ! "," sheets include? "," sheets ","sheet kind_of? "," sheets [] ","sheet - ","sheet <= "," sheets length ","sheet >= ","sheet > "," validate_sheet! "," check_default_ sheets []  ","  sheets [] s include? ! ","  sheets [] s include? ","  sheets [] s "," sheets []  kind_of? ","  sheets [] s [] "," sheets []  - "," sheets []  <= ","  sheets [] s length "," sheets []  >= "," sheets []  > "," validate_ sheets [] ! "]}," Google timestring_to_seconds":{"type":"method","name":"timestring_to_seconds","children":[],"call":["hms [] to_i * + + ","hms [] to_i ","hms [] ","hms [] to_i * + ","hms [] to_i * ","value split ","value split  [] to_i * + + ","value split  [] to_i ","value split  [] ","value split  [] to_i * + ","value split  [] to_i * "]}," Google time?":{"type":"method","name":"time?","children":[],"call":["DateTime  strptime "]}," GenericSpreadsheet integer_to_timestring":{"type":"method","name":"integer_to_timestring","children":[],"call":[]}," GenericSpreadsheet to_xml":{"type":"method","name":"to_xml","children":[],"call":["x cell "," celltype "," cell "," empty? "," first_column upto "," last_column "," first_column "," first_row upto "," last_row "," first_row ","xml sheet "," default_sheet= "," sheets each "," sheets ","xml spreadsheet ","xml instruct! ","Builder XmlMarkup  new ","builder to_xml ","Nokogiri XML Builder  new ","(send\n  (const\n    (const\n      (const nil :Nokogiri) :XML) :Builder) :new) to_xml ","Builder XmlMarkup  new  sheet ","Builder XmlMarkup  new  spreadsheet ","Builder XmlMarkup  new  instruct! ","builder to_Builder XmlMarkup  new  ","(send\n  (const\n    (const\n      (const nil :Nokogiri) :XML) :Builder) :new) to_Builder XmlMarkup  new  "]}," Excelx read_shared_strings":{"type":"method","name":"read_shared_strings","children":[],"call":["@shared_table << ","elem text ","elem name == ","elem name ","si each_element ","si name == ","si name ","sst each_element ","sst name == ","sst name ","doc each_element ","elem content ","shared_table_entry << ","r_elem content ","r_elem name == ","r_elem name ","elem children each ","elem children ","si children each ","si children ","doc xpath each ","doc xpath ","elem each_element ","doc find each ","doc find ","elem content  << "]}," Excelx set_type":{"type":"method","name":"set_type","children":[],"call":["@cell_type [] []= ","@cell_type [] "]}," Excelx set_value":{"type":"method","name":"set_value","children":[],"call":["@cell [] []= ","@cell [] "]}," Excelx extract_content":{"type":"method","name":"extract_content","children":[],"call":[" process_zipfile ","Zip ZipFile  open ","Roo ZipFile  open "]}," Excelx process_zipfile":{"type":"method","name":"process_zipfile","children":[],"call":["@sheet_files []= ","@tmpdir + + + ","@tmpdir + + ","@file_nr to_s ","@tmpdir + ","nr to_i - ","nr to_i ","f << ","zip read "," open ","entry to_s =~ ","entry to_s ","entry to_s end_with? ","zf entries each ","zf entries ","Zip ZipFile  open ","@comments_files []= ","entry to_s downcase =~ ","entry to_s downcase ","entry to_s downcase end_with? ","tmpdir + + ","tmpdir + ","Roo ZipFile  open "," extract_file ","@rels_files []= ","entry_name =~ ","entry_name end_with? ","entry extract ","nr - ","Regexp  last_match [] to_i ","Regexp  last_match [] ","Regexp  last_match ","entry name downcase ","entry name ","entries each "," extract_sheets_in_order "," extract_worksheet_rels "," extract_worksheet_ids ","Zip File  open to_a sort_by ","Zip File  open to_a ","Zip File  open ","@file_Regexp  last_match [] to_i  to_s ","Regexp  last_match [] to_i  to_i - ","Regexp  last_match [] to_i  to_i ","zf Zip File  open to_a sort_by  each ","zf Zip File  open to_a sort_by  ","entry to_s downcase  =~ ","entry to_s downcase  end_with? ","Regexp  last_match [] to_i  - ","Zip File  open to_a sort_by  each "," extract_ extract_worksheet_rels _in_order "," extract_work extract_worksheet_ids  "]}," Excelx check_default_sheet":{"type":"method","name":"check_default_sheet","children":[],"call":[" raise ","sheet_found ! ","@default_sheet == ","sheet attributes [] ","sheet attributes ","el each_element ","el name == ","el name ","workbook each_element ","@workbook_doc each_element "," sheets include? "," sheets "]}," Excelx read_cells":{"type":"method","name":"read_cells","children":[],"call":["@cells_read []= "," raise ","sheet_found ! "," set_cell_values "," split_coordinate ","row attributes [] ","row attributes ","cell text ","cell text to_f ","tmp_type == ","@shared_table [] ","cell text to_i ","f_element_found == ","cell name == ","cell name ","row each_element ","row attributes [] == ","row name == ","row name ","sheetdata each_element ","sheetdata name == ","sheetdata name ","elem each_element ","elem name == ","elem name ","worksheet each_element ","@sheet_doc [] each_element ","@sheet_doc [] "," sheets index "," sheets ","sheet == ","@default_sheet == ","cell text to_f >= "," sheets include? ","GenericSpreadsheet  split_coordinate ","c [] ","cell content ","cell content to_f ","cell content to_i == ","cell content to_i ","format to_s ","(send\n  (send\n    (send\n      (lvar :cell) :content) :to_f) :-\n  (send\n    (send\n      (send\n        (lvar :cell) :content) :to_f) :floor)) abs > ","(send\n  (send\n    (send\n      (lvar :cell) :content) :to_f) :-\n  (send\n    (send\n      (send\n        (lvar :cell) :content) :to_f) :floor)) abs ","cell content to_f - ","cell content to_f floor ","cell content to_f >= ","is content ","is name == ","is name ","cell children each ","cell children ","c children each ","c children "," format2type "," attribute2format ","c [] to_i ","c [] == ","@sheet_doc [] xpath each ","@sheet_doc [] xpath ","Roo GenericSpreadsheet  split_coordinate ","(sym :time) include? "," validate_sheet! ","Format  to_type ","Roo Base  split_coordinate ","@cells_read [] ","(send\n  (send\n    (send\n      (lvar :cell) :text) :to_f) :-\n  (send\n    (send\n      (send\n        (lvar :cell) :text) :to_f) :floor)) abs > ","(send\n  (send\n    (send\n      (lvar :cell) :text) :to_f) :-\n  (send\n    (send\n      (send\n        (lvar :cell) :text) :to_f) :floor)) abs ","cell text to_f - ","cell text to_f floor ","c attributes to_h [] ","c attributes to_h ","c attributes ","c each_element ","c attributes to_h [] == ","c attributes to_h [] to_i ","@sheet_doc [] find each ","@sheet_doc [] find ","sheet_fou sheets index d ! "," set_cell_cell text alues "," set_cell_cell text to_f alues "," set_cell_cell content alues "," set_cell_cell content to_f alues "," split_coordi sheets index ate "," format2type  == ","f_eleme sheets index t_fou sheets index d == ","cell  sheets index ame == ","cell  sheets index ame ","row each_eleme sheets index t ","row  sheets index ame == ","row  sheets index ame ","sheetdata each_eleme sheets index t ","sheetdata  sheets index ame == ","sheetdata  sheets index ame ","elem each_eleme sheets index t ","elem  sheets index ame == ","elem  sheets index ame ","worksheet each_eleme sheets index t ","@sheet_doc [] each_eleme sheets index t "," sheets i sheets index dex "," sheets i sheets index clude? ","Ge sheets index ericSpreadsheet  split_coordi sheets index ate ","cell co sheets index te sheets index t ","cell co sheets index te sheets index t to_f ","cell co sheets index te sheets index t to_i == ","cell co sheets index te sheets index t to_i "," attribute2format  to_s ","(send\n  (send\n    (send\n      (lcell text ar :cell) :content) :to_f) :-\n  (send\n    (send\n      (send\n        (lcell text ar :cell) :content) :to_f) :floor)) abs > ","(send\n  (send\n    (send\n      (lcell text to_f ar :cell) :content) :to_f) :-\n  (send\n    (send\n      (send\n        (lcell text to_f ar :cell) :content) :to_f) :floor)) abs > ","(send\n  (send\n    (send\n      (lcell content ar :cell) :content) :to_f) :-\n  (send\n    (send\n      (send\n        (lcell content ar :cell) :content) :to_f) :floor)) abs > ","(send\n  (send\n    (send\n      (lcell content to_f ar :cell) :content) :to_f) :-\n  (send\n    (send\n      (send\n        (lcell content to_f ar :cell) :content) :to_f) :floor)) abs > ","(se sheets index d\n  (se sheets index d\n    (se sheets index d\n      (lvar :cell) :co sheets index te sheets index t) :to_f) :-\n  (se sheets index d\n    (se sheets index d\n      (se sheets index d\n        (lvar :cell) :co sheets index te sheets index t) :to_f) :floor)) abs > ","(send\n  (send\n    (send\n      (lcell text ar :cell) :content) :to_f) :-\n  (send\n    (send\n      (send\n        (lcell text ar :cell) :content) :to_f) :floor)) abs ","(send\n  (send\n    (send\n      (lcell text to_f ar :cell) :content) :to_f) :-\n  (send\n    (send\n      (send\n        (lcell text to_f ar :cell) :content) :to_f) :floor)) abs ","(send\n  (send\n    (send\n      (lcell content ar :cell) :content) :to_f) :-\n  (send\n    (send\n      (send\n        (lcell content ar :cell) :content) :to_f) :floor)) abs ","(send\n  (send\n    (send\n      (lcell content to_f ar :cell) :content) :to_f) :-\n  (send\n    (send\n      (send\n        (lcell content to_f ar :cell) :content) :to_f) :floor)) abs ","(se sheets index d\n  (se sheets index d\n    (se sheets index d\n      (lvar :cell) :co sheets index te sheets index t) :to_f) :-\n  (se sheets index d\n    (se sheets index d\n      (se sheets index d\n        (lvar :cell) :co sheets index te sheets index t) :to_f) :floor)) abs ","cell co sheets index te sheets index t to_f - ","cell co sheets index te sheets index t to_f floor ","cell co sheets index te sheets index t to_f >= ","is co sheets index te sheets index t ","is  sheets index ame == ","is  sheets index ame ","cell childre sheets index  each ","cell childre sheets index  ","c childre sheets index  each ","c childre sheets index  ","  attribute2format 2type "," attribute2 attribute2format  ","Roo Ge sheets index ericSpreadsheet  split_coordi sheets index ate ","(sym :time) i sheets index clude? "," cell text alidate_sheet! "," cell text to_f alidate_sheet! "," cell content alidate_sheet! "," cell content to_f alidate_sheet! ","Roo Base  split_coordi sheets index ate ","(send\n  (send\n    (send\n      (lcell text ar :cell) :text) :to_f) :-\n  (send\n    (send\n      (send\n        (lcell text ar :cell) :text) :to_f) :floor)) abs > ","(send\n  (send\n    (send\n      (lcell text to_f ar :cell) :text) :to_f) :-\n  (send\n    (send\n      (send\n        (lcell text to_f ar :cell) :text) :to_f) :floor)) abs > ","(send\n  (send\n    (send\n      (lcell content ar :cell) :text) :to_f) :-\n  (send\n    (send\n      (send\n        (lcell content ar :cell) :text) :to_f) :floor)) abs > ","(send\n  (send\n    (send\n      (lcell content to_f ar :cell) :text) :to_f) :-\n  (send\n    (send\n      (send\n        (lcell content to_f ar :cell) :text) :to_f) :floor)) abs > ","(se sheets index d\n  (se sheets index d\n    (se sheets index d\n      (lvar :cell) :text) :to_f) :-\n  (se sheets index d\n    (se sheets index d\n      (se sheets index d\n        (lvar :cell) :text) :to_f) :floor)) abs > ","(send\n  (send\n    (send\n      (lcell text ar :cell) :text) :to_f) :-\n  (send\n    (send\n      (send\n        (lcell text ar :cell) :text) :to_f) :floor)) abs ","(send\n  (send\n    (send\n      (lcell text to_f ar :cell) :text) :to_f) :-\n  (send\n    (send\n      (send\n        (lcell text to_f ar :cell) :text) :to_f) :floor)) abs ","(send\n  (send\n    (send\n      (lcell content ar :cell) :text) :to_f) :-\n  (send\n    (send\n      (send\n        (lcell content ar :cell) :text) :to_f) :floor)) abs ","(send\n  (send\n    (send\n      (lcell content to_f ar :cell) :text) :to_f) :-\n  (send\n    (send\n      (send\n        (lcell content to_f ar :cell) :text) :to_f) :floor)) abs ","(se sheets index d\n  (se sheets index d\n    (se sheets index d\n      (lvar :cell) :text) :to_f) :-\n  (se sheets index d\n    (se sheets index d\n      (se sheets index d\n        (lvar :cell) :text) :to_f) :floor)) abs ","c each_eleme sheets index t ","@sheet_doc [] fi sheets index d each ","@sheet_doc [] fi sheets index d "]}," Excelx split_coordinate":{"type":"method","name":"split_coordinate","children":[],"call":["GenericSpreadsheet  letter_to_number "," split_coord "]}," Excelx split_coord":{"type":"method","name":"split_coord","children":[],"call":[" raise ","number == ","letter == ","number * + ","s [] to_i ","s [] ","number * ","01234567890 include? ","i < ","s length ","ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz include? ","0123456789 include? ","number * +  == ","number * +  * + ","number * +  * "]}," Excelx set_cell_values":{"type":"method","name":"set_cell_values","children":[],"call":["@cell [] []= ","@cell [] ","v to_f * ","24 * * ","24 * ","v to_f ","(send\n  (send\n    (const nil :Date) :new\n    (int 1899)\n    (int 12)\n    (int 30)) :+\n  (send\n    (lvar :v) :to_i)) strftime ","Date  new + ","v to_i ","Date  new ","@cell_type [] [] ","@cell_type [] ","@cell []= ","@formula [] []= ","@formula [] ","@formula []= ","@cell_type [] []= ","@cell_type []= ","x + ","@excelx_type [] []= ","@excelx_type [] ","@excelx_type []= ","@s_attribute [] []= ","@s_attribute [] ","@s_attribute []= ","@excelx_value [] []= ","@excelx_value [] ","@excelx_value []= ","(send\n  (send\n    (const nil :DateTime) :new\n    (int 1899)\n    (int 12)\n    (int 30)) :+\n  (send\n    (lvar :v) :to_f)) strftime ","DateTime  new + ","DateTime  new ","(send\n  (send nil :base_date) :+\n  (send\n    (lvar :v) :to_f)) strftime "," base_date + "," base_date ","(send\n  (send nil :base_date) :+\n  (send\n    (lvar :v) :to_i)) strftime ","Spreadsheet Link  new ","@cell [] [] ","@hyperlink [] [] ","@hyperlink [] "," hyperlink? ","@cell [] [] to_s "]}," Excelx formulas":{"type":"method","name":"formulas","children":[],"call":["theformulas << "," formula "," formula? "," first_column upto "," last_column "," first_column "," first_row upto "," last_row "," first_row "," read_cells ","@cells_read [] ","Array  new ","elem [] ","elem [] [] ","@formula [] each collect ","@formula [] each ","@formula [] ","cell formula ","(send\n  (send\n    (send nil :sheet_for\n      (lvar :sheet)) :cells) :select) map "," sheet_for cells select "," sheet_for cells "," sheet_for ","Array  new  << "]}," Excelx column":{"type":"method","name":"column","children":[],"call":["result << "," cell "," first_row upto "," last_row "," first_row "," read_cells ","@cells_read [] ","GenericSpreadsheet  letter_to_number ","columnnumber class == ","columnnumber class "," sheet_for column "," sheet_for "," Roo Utils  letter_to_number ","column_number is_a? ","GenericSpreadsheet  letter_to_number  class == ","GenericSpreadsheet  letter_to_number  class "," Roo Utils  letter_to_number  is_a? "]}," Excelx row":{"type":"method","name":"row","children":[],"call":["result [] ","result [] == ","tmp_arr [] ","tmp_arr []= ","y == ","y to_i ","x to_i ","key split ","@cell [] each_pair ","@cell [] "," read_cells ","@cells_read [] "," sheet_for row "," sheet_for ","result []  [] ","tmp_arr []  [] ","result []  [] == ","tmp_arr []  [] == ","y to_i  == ","y to_i  to_i ","x to_i  to_i ","key to_i  split "]}," Excelx to_s":{"type":"method","name":"to_s","children":[],"call":["@cell [] inspect ","@cell [] "," read_cells ","@cells_read [] "," sheet_for cells inspect "," sheet_for cells "," sheet_for "]}," Excelx sheets":{"type":"method","name":"sheets","children":[],"call":["return_sheets << ","sheet attributes [] ","sheet attributes ","el each_element ","el name == ","el name ","workbook each_element ","@workbook_doc each_element ","sheet [] ","@workbook_doc xpath each ","@workbook_doc xpath ","@workbook_doc xpath map ","sheet attributes to_h [] ","sheet attributes to_h ","@workbook_doc find each ","@workbook_doc find "]}," Excelx celltype":{"type":"method","name":"celltype","children":[],"call":["@cell_type [] [] ","@cell_type [] ","@formula [] [] ","@formula [] "," normalize "," read_cells ","@cells_read [] "," safe_send "," sheet_for cells [] "," sheet_for cells "," sheet_for "]}," Excelx set":{"type":"method","name":"set","children":[],"call":[" raise ","Type for  + + ","Type for  + ","value to_s "," set_type ","value class == ","value class "," set_value "," normalize "," read_cells ","@cells_read [] "," sheet_for cells []= ","Cell  new ","Cell Coordinate  new "," sheet_for cells "," sheet_for "," cell_type_by_value ","  cell_type_by_value _by_value "]}," Excelx formula?":{"type":"method","name":"formula?","children":[],"call":[" formula != "," formula "," normalize "," read_cells ","@cells_read [] "," formula ! ! "," formula ! "]}," Excelx formula":{"type":"method","name":"formula","children":[],"call":["@formula [] [] ","@formula [] ","@formula [] [] == "," normalize "," read_cells ","@cells_read [] "," safe_send "," sheet_for cells [] "," sheet_for cells "," sheet_for "]}," Excelx cell":{"type":"method","name":"cell","children":[],"call":["@cell [] [] ","@cell [] ","Date  new ","dd to_i ","mm to_i ","yyyy to_i ","@cell [] [] split "," celltype == "," celltype "," normalize "," read_cells ","@cells_read [] ","DateTime  civil ","ss to_i ","mi to_i ","hh to_i ","time_part split ","date_part split "," safe_send "," sheet_for cells [] "," sheet_for cells "," sheet_for "]}," Excelx initialize":{"type":"method","name":"initialize","children":[],"call":["Hash  new "," sheets first "," sheets "," sheets size == "," sheets size ","FileUtils  rm_r ","file close ","@sheet_doc []= ","REXML Document  new ","File  new ","@sheet_files each_with_index "," read_shared_strings ","File  join ","@file_nr to_s + ","@file_nr to_s ","File  exist? "," extract_content "," raise ","File  file? "," warn ","File  extname != ","File  extname "," unzip ","packed == "," open_from_uri ","filename [] == ","filename [] ","FileUtils  mkdir ","File  exists? ","oo_ + ","$$ to_s "," file_type_check ","@comments_doc []= ","Nokogiri  XML ","@comments_files each_with_index "," read_styles ","Array  new ","ENV  [] ","GenericSpreadsheet  next_tmpdir ","File  open ","@comments_files map ","@sheet_files map "," uri? "," make_tmpdir "," load_xml "," download_uri ","options [] ","Hash  === ","@comments_files compact map ","@comments_files compact ","@sheet_files compact map ","@sheet_files compact ","@rels_files map "," load_xmls ","XML Parser  io parse ","XML Parser  io ","h []= ","ExceedsMaxError  new ","cell_count > "," Roo Utils  num_cells_in_range "," sheet_for dimensions "," sheet_for ","options delete ","Hash  [] ","@sheets [] ","@sheets []= ","Sheet  new "," workbook "," shared_strings "," styles ","@comments_files [] ","@sheet_files [] ","@rels_files [] ","@sheet_names map with_index ","@sheet_names map ","(send\n  (send\n    (send nil :workbook) :sheets) :map) compact ","sheet [] ","sheet [] == "," workbook sheets map "," workbook sheets "," process_zipfile "," local_filename ","filename split last ","filename split ","sheet_options []= ","options fetch ","File  new  close "," load_xmls  []= ","@sheet_File  new s each_with_index ","@File  new _nr to_s + ","@File  new _nr to_s ","File  File  new ? ","options []  == ","File  new name [] == "," unzip  [] == "," open_from_uri  [] == "," download_uri  [] == ","File  new name [] "," unzip  [] "," open_from_uri  [] "," download_uri  [] "," File  new _type_check ","Hash  new s_doc []= ","@comments_File  new s each_with_index ","Hash  new s_files each_with_index ","Array  new  each_with_index ","@comments_File  new s map ","Hash  new s_files map ","Array  new  map ","@sheet_File  new s map ","@comments_File  new s compact map ","Hash  new s_files compact map ","Array  new  compact map ","@comments_File  new s compact ","Hash  new s_files compact ","Array  new  compact ","@sheet_File  new s compact map ","@sheet_File  new s compact ","@rels_File  new s map "," Roo Utils  num_cells_in_range  > ","@comments_File  new s [] ","Hash  new s_files [] ","Array  new  [] ","@sheet_File  new s [] ","@rels_File  new s [] ","(send\n  (send\n    (send nil :workbook) :sheets) :map) compact  map with_index ","(send\n  (send\n    (send nil :workbook) :sheets) :map) compact  map "," process_zipFile  new  "," local_File  new name "," local_ unzip  "," local_ open_from_uri  "," local_ download_uri  ","File  new name split last "," unzip  split last "," open_from_uri  split last "," download_uri  split last ","File  new name split "," unzip  split "," open_from_uri  split "," download_uri  split "]}," String end_with?":{"type":"method","name":"end_with?","children":[],"call":[" [] == "," [] ","str length ","str length -@ "]}," GenericSpreadsheet file_type_check":{"type":"method","name":"file_type_check","children":[],"call":[" raise "," warn ","File  extname downcase != ","File  extname downcase ","File  extname ","new_expression [] ","File  basename ","packed == ","filename [] ","qs_begin - ","filename rindex "," uri? ","File  basename  [] ","filename []  [] ","filename rindex  - ","File  basename  rindex ","filename []  rindex "]}," GenericSpreadsheet column":{"type":"method","name":"column","children":[],"call":["result << "," cell "," first_row upto "," last_row "," first_row "," read_cells ","@cells_read [] ","Excel  letter_to_number ","columnnumber class == ","columnnumber class "," first_row upto map ","Roo Excel  letter_to_number ","Excel  letter_to_number  class == ","Roo Excel  letter_to_number  class == ","Excel  letter_to_number  class ","Roo Excel  letter_to_number  class "]}," GenericSpreadsheet row":{"type":"method","name":"row","children":[],"call":["result [] ","result [] == ","tmp_arr [] ","tmp_arr []= ","y == ","y to_i ","x to_i ","key split ","@cell [] each_pair ","@cell [] "," read_cells ","@cells_read [] ","result << "," cell "," first_column upto "," last_column "," first_column "," first_column upto map ","result []  [] ","tmp_arr []  [] ","result []  [] == ","tmp_arr []  [] == ","y to_i  == ","y to_i  to_i ","x to_i  to_i ","key to_i  split ","result []  << ","tmp_arr []  << "]}," Excelx ALTER_ANSATZ_read_cells":{"type":"method","name":"ALTER_ANSATZ_read_cells","children":[],"call":["@cells_read []= "," raise ","sheet_found ! "," set_cell_values "," split_coordinate ","row attributes [] ","row attributes ","cell text ","cell text to_f ","tmp_type == ","@shared_table [] ","cell text to_i ","cell text to_f >= ","f_element_found == ","cell name == ","cell name ","row each_element ","row attributes [] == ","row name == ","row name ","sheetdata each_element ","sheetdata name == ","sheetdata name ","elem each_element ","elem name == ","elem name ","worksheet each_element ","@sheet_doc [] each_element ","@sheet_doc [] "," sheets index "," sheets "," sheets include? ","sheet == ","@default_sheet == ","sheet_fou sheets index d ! "," set_cell_cell text alues "," set_cell_cell text to_f alues "," split_coordi sheets index ate ","f_eleme sheets index t_fou sheets index d == ","cell  sheets index ame == ","cell  sheets index ame ","row each_eleme sheets index t ","row  sheets index ame == ","row  sheets index ame ","sheetdata each_eleme sheets index t ","sheetdata  sheets index ame == ","sheetdata  sheets index ame ","elem each_eleme sheets index t ","elem  sheets index ame == ","elem  sheets index ame ","worksheet each_eleme sheets index t ","@sheet_doc [] each_eleme sheets index t "," sheets i sheets index dex "," sheets i sheets index clude? "]}," Excelx excelx_type":{"type":"method","name":"excelx_type","children":[],"call":[" normalize "," read_cells ","@cells_read [] ","@excelx_type [] [] ","@excelx_type [] "," safe_send "," sheet_for cells [] "," sheet_for cells "," sheet_for "]}," Excel read_cells":{"type":"method","name":"read_cells","children":[],"call":["@cells_read []= "," set_cell_values ","cell type to_sym ","cell type "," sprintf ","v day ","v month ","v year ","cell date ","h * + + ","h * + ","m * ","h * ","secs - ","60 * ","(send\n  (lvar :secs) :/\n  (float 60.0)) floor ","secs / ","3600 * ","(send\n  (lvar :secs) :/\n  (float 3600.0)) floor ","f round ","cell to_s to_f * * * ","cell to_s to_f * * ","cell to_s to_f * ","cell to_s to_f ","cell to_s ","cell to_s to_f < ","cell to_f ","row_par at ","x - ","row_par each ","worksheet each ","@workbook worksheet "," sheet_no "," raise "," sheets include? "," sheets ","sheet == ","@default_sheet == ","font extend ","row format font ","row format ","cell_index + "," read_cell "," read_cell_date_or_time "," date_or_time? ","cell value nil? ","cell value ","cell class == ","cell class ","cell nil? ","row at ","(irange\n  (int 0)\n  (send\n    (lvar :row) :size)) each ","row size ","@cells_read [] "," validate_sheet! ","cell type to_s downcase to_sym ","cell type to_s downcase ","cell type to_s ","cell datetime ","cell datetime msec != ","cell datetime msec ","cell datetime sec != ","cell datetime sec ","cell datetime min != ","cell datetime min ","cell datetime hour != ","cell datetime hour ","@row_par at s_read []= ","@row at s_read []= "," set_cell_ sprintf alues "," set_cell_cell date alues "," set_cell_h * + + alues "," set_cell_cell to_f alues "," set_cell_cell datetime alues "," set_row_par at _values "," set_row at _values ","cell type to_sy(send\n  (lvar :secs) :/\n  (float 60.0)) floor  ","row_par at  type to_sym ","row at  type to_sym ","row_par at  type ","row at  type "," sprintcell to_s to_f * * *  "," sprintf  day ","cell date  day ","h * + +  day ","cell to_f  day ","cell datetime  day "," sprintf  month ","cell date  month ","h * + +  month ","cell to_f  month ","cell datetime  month ","v (send\n  (lvar :secs) :/\n  (float 60.0)) floor onth ","v mont(send\n  (lvar :secs) :/\n  (float 3600.0)) floor  "," sprintf  year ","cell date  year ","h * + +  year ","cell to_f  year ","cell datetime  year ","row_par at  date ","row at  date ","(send\n  (lvar :secs) :/\n  (float 3600.0)) floor  * + + ","(send\n  (lvar :secs) :/\n  (float 3600.0)) floor  * + ","(send\n  (lvar :secs) :/\n  (float 60.0)) floor  * ","(send\n  (lvar :secs) :/\n  (float 3600.0)) floor  * ","secs -  - ","f round  - ","(send\n  (l sprintf ar :secs) :/\n  (float 60.0)) floor ","(send\n  (lcell date ar :secs) :/\n  (float 60.0)) floor ","(send\n  (lh * + + ar :secs) :/\n  (float 60.0)) floor ","(send\n  (lcell to_f ar :secs) :/\n  (float 60.0)) floor ","(send\n  (lcell datetime ar :secs) :/\n  (float 60.0)) floor ","(send\n  (lvar :secs - ) :/\n  (float 60.0)) floor ","(send\n  (lvar :f round ) :/\n  (float 60.0)) floor ","(send\n  (lvar :secs) :/\n  (cell to_s to_f * * * loat 60.0)) cell to_s to_f * * * loor ","secs -  / ","f round  / ","(send\n  (l sprintf ar :secs) :/\n  (float 3600.0)) floor ","(send\n  (lcell date ar :secs) :/\n  (float 3600.0)) floor ","(send\n  (lh * + + ar :secs) :/\n  (float 3600.0)) floor ","(send\n  (lcell to_f ar :secs) :/\n  (float 3600.0)) floor ","(send\n  (lcell datetime ar :secs) :/\n  (float 3600.0)) floor ","(send\n  (lvar :secs - ) :/\n  (float 3600.0)) floor ","(send\n  (lvar :f round ) :/\n  (float 3600.0)) floor ","(send\n  (lvar :secs) :/\n  (cell to_s to_f * * * loat 3600.0)) cell to_s to_f * * * loor ","cell to_s to_f * * *  round ","cell to_s to_cell to_s to_f * * *  * * * ","row_par at  to_s to_f * * * ","row at  to_s to_f * * * ","cell to_s to_cell to_s to_f * * *  * * ","row_par at  to_s to_f * * ","row at  to_s to_f * * ","cell to_s to_cell to_s to_f * * *  * ","row_par at  to_s to_f * ","row at  to_s to_f * ","cell to_s to_cell to_s to_f * * *  ","row_par at  to_s to_f ","row at  to_s to_f ","row_par at  to_s ","row at  to_s ","cell to_s to_cell to_s to_f * * *  < ","row_par at  to_s to_f < ","row at  to_s to_f < ","cell to_cell to_s to_f * * *  ","row_par at  to_f ","row at  to_f ","row_par eac(send\n  (lvar :secs) :/\n  (float 3600.0)) floor  ","works(send\n  (lvar :secs) :/\n  (float 3600.0)) floor eet eac(send\n  (lvar :secs) :/\n  (float 3600.0)) floor  ","@workbook worksheet  each ","@workbook works(send\n  (lvar :secs) :/\n  (float 3600.0)) floor eet ","@workbook @workbook worksheet  "," s(send\n  (lvar :secs) :/\n  (float 3600.0)) floor eet_no "," s(send\n  (lvar :secs) :/\n  (float 3600.0)) floor eets include? "," s(send\n  (lvar :secs) :/\n  (float 3600.0)) floor eets ","s(send\n  (lvar :secs) :/\n  (float 3600.0)) floor eet == ","@default_s(send\n  (lvar :secs) :/\n  (float 3600.0)) floor eet == ","@decell to_s to_f * * * ault_sheet == ","cell to_s to_f * * * ont extend ","row format font  extend ","row for(send\n  (lvar :secs) :/\n  (float 60.0)) floor at font ","row cell to_s to_f * * * ormat cell to_s to_f * * * ont ","row format row format font  ","row for(send\n  (lvar :secs) :/\n  (float 60.0)) floor at ","row cell to_s to_f * * * ormat ","row_par at _index + ","row at _index + "," read_row_par at  "," read_row at  "," read_cell_date_or_ti(send\n  (lvar :secs) :/\n  (float 60.0)) floor e "," read_row_par at _date_or_time "," read_row at _date_or_time "," date_or_ti(send\n  (lvar :secs) :/\n  (float 60.0)) floor e? ","cell  sprintf alue nil? ","cell cell date alue nil? ","cell h * + + alue nil? ","cell cell to_f alue nil? ","cell cell datetime alue nil? ","row_par at  value nil? ","row at  value nil? ","cell  sprintf alue ","cell cell date alue ","cell h * + + alue ","cell cell to_f alue ","cell cell datetime alue ","row_par at  value ","row at  value ","row_par at  class == ","row at  class == ","row_par at  class ","row at  class ","row_par at  nil? ","row at  nil? ","(irange\n  (int 0)\n  (send\n    (l sprintf ar :row) :size)) each ","(irange\n  (int 0)\n  (send\n    (lcell date ar :row) :size)) each ","(irange\n  (int 0)\n  (send\n    (lh * + + ar :row) :size)) each ","(irange\n  (int 0)\n  (send\n    (lcell to_f ar :row) :size)) each ","(irange\n  (int 0)\n  (send\n    (lcell datetime ar :row) :size)) each ","(irange\n  (int 0)\n  (send\n    (lvar :row) :size)) eac(send\n  (lvar :secs) :/\n  (float 3600.0)) floor  ","@row_par at s_read [] ","@row at s_read [] ","  sprintf alidate_sheet! "," cell date alidate_sheet! "," h * + + alidate_sheet! "," cell to_f alidate_sheet! "," cell datetime alidate_sheet! "," validate_s(send\n  (lvar :secs) :/\n  (float 3600.0)) floor eet! ","cell type to_s downcase to_sy(send\n  (lvar :secs) :/\n  (float 60.0)) floor  ","row_par at  type to_s downcase to_sym ","row at  type to_s downcase to_sym ","row_par at  type to_s downcase ","row at  type to_s downcase ","row_par at  type to_s ","row at  type to_s ","cell dateti(send\n  (lvar :secs) :/\n  (float 60.0)) floor e ","row_par at  datetime ","row at  datetime ","cell dateti(send\n  (lvar :secs) :/\n  (float 60.0)) floor e (send\n  (lvar :secs) :/\n  (float 60.0)) floor sec != ","row_par at  datetime msec != ","row at  datetime msec != ","cell dateti(send\n  (lvar :secs) :/\n  (float 60.0)) floor e (send\n  (lvar :secs) :/\n  (float 60.0)) floor sec ","row_par at  datetime msec ","row at  datetime msec ","cell dateti(send\n  (lvar :secs) :/\n  (float 60.0)) floor e sec != ","row_par at  datetime sec != ","row at  datetime sec != ","cell dateti(send\n  (lvar :secs) :/\n  (float 60.0)) floor e sec ","row_par at  datetime sec ","row at  datetime sec ","cell dateti(send\n  (lvar :secs) :/\n  (float 60.0)) floor e (send\n  (lvar :secs) :/\n  (float 60.0)) floor in != ","row_par at  datetime min != ","row at  datetime min != ","cell dateti(send\n  (lvar :secs) :/\n  (float 60.0)) floor e (send\n  (lvar :secs) :/\n  (float 60.0)) floor in ","row_par at  datetime min ","row at  datetime min ","cell dateti(send\n  (lvar :secs) :/\n  (float 60.0)) floor e hour != ","cell datetime (send\n  (lvar :secs) :/\n  (float 3600.0)) floor our != ","row_par at  datetime hour != ","row at  datetime hour != ","cell dateti(send\n  (lvar :secs) :/\n  (float 60.0)) floor e hour ","cell datetime (send\n  (lvar :secs) :/\n  (float 3600.0)) floor our ","row_par at  datetime hour ","row at  datetime hour "]}," Excel set_cell_values":{"type":"method","name":"set_cell_values","children":[],"call":["@cell [] []= ","@cell [] ","v to_f ","@cell_type [] [] ","@cell_type [] ","@cell []= ","@formula [] []= ","@formula [] ","@formula []= ","@cell_type [] []= ","@cell_type []= ","x + ","DateTime  new ","v sec ","v min ","v hour ","v day ","v month ","v year ","@fonts [] []= ","@fonts [] ","@fonts []= ","col + "]}," Roo Spreadsheet open":{"type":"method","name":"open","children":[],"call":["Google  new ","Csv  new ","Openoffice  new ","Excelx  new ","Excel  new ","File  extname "," raise ","Roo Csv  new ","Roo Google  new ","Roo Excel2003XML  new ","Roo Openoffice  new ","Roo Excelx  new ","Roo Excel  new ","file path ","File  === ","File  extname downcase ","Roo CSV  new ","Roo OpenOffice  new ","extension downcase ","options [] ","options []= ","URI  parse path ","URI  parse ","(str \".\") gsub "," filename ","Roo CLASS_FOR_EXTENSION  fetch new ","Roo CLASS_FOR_EXTENSION  fetch "," extension_for ","path path ","path respond_to? ","file path  path ","file path path  ","File  extname  downcase "," extension_for  downcase ","URI  parse path path  "," file path name "," File  extname _for ","  extension_for _for ","path path  path path  ","path path  respond_to? "]}," Roo require_all_libs_relative_to":{"type":"method","name":"require_all_libs_relative_to","children":[],"call":[]}," Roo path":{"type":"method","name":"path","children":[],"call":[]}," Roo libpath":{"type":"method","name":"libpath","children":[],"call":[]}," Roo version":{"type":"method","name":"version","children":[],"call":[]}," Openoffice read_styles":{"type":"method","name":"read_styles","children":[],"call":["@style_definitions []= ","font underline= ","properties attributes [] ","properties attributes ","font italic= ","font bold= ","Openoffice Font  new ","style each ","style attributes [] ","style attributes ","style name == ","style name ","style_elements each ","Roo Openoffice Font  new "," attr ","Openoffice Font  new  underline= ","Roo Openoffice Font  new  underline= ","Openoffice Font  new  italic= ","Roo Openoffice Font  new  italic= ","Openoffice Font  new  bold= ","Roo Openoffice Font  new  bold= "]}," Openoffice read_labels":{"type":"method","name":"read_labels","children":[],"call":["@label []= ","sheetname [] ","sheetname [] == ","coords split [] ","coords split ","ne attribute to_s split ","ne attribute to_s ","ne attribute ","@doc xpath each ","@doc xpath ","Hash  [] ","@doc xpath map "," attr to_s split "," attr to_s "," attr ","sheetname []  [] ","sheetne attribute to_s  [] ","sheet attr to_s  [] ","sheetname []  [] == ","sheetne attribute to_s  [] == ","sheet attr to_s  [] == "]}," Openoffice read_comments":{"type":"method","name":"read_comments","children":[],"call":[" read_cells "]}," Openoffice comments":{"type":"method","name":"comments","children":[],"call":["elem [] ","elem [] [] ","@comment [] each collect ","@comment [] each ","@comment [] "," read_comments ","@comments_read [] "]}," Openoffice comment?":{"type":"method","name":"comment?","children":[],"call":[" comment != "," comment "," normalize "," read_cells ","@cells_read [] "]}," Openoffice comment":{"type":"method","name":"comment","children":[],"call":["@comment [] [] ","@comment [] "," normalize "," read_cells ","@cells_read [] "]}," Openoffice labels":{"type":"method","name":"labels","children":[],"call":["result << ","label [] [] ","label [] ","GenericSpreadsheet  letter_to_number ","label [] [] to_i ","@label each "," read_labels ","Roo GenericSpreadsheet  letter_to_number ","@label map "]}," Openoffice label":{"type":"method","name":"label","children":[],"call":["@label [] [] ","@label [] ","GenericSpreadsheet  letter_to_number ","@label [] [] to_i ","@label has_key? ","@label size > ","@label size "," read_labels ","Roo GenericSpreadsheet  letter_to_number ","@labels [] [] ","@labels [] ","@labels [] [] to_i ","@labels has_key? "," read_cells ","@cells_read [] "]}," Openoffice font":{"type":"method","name":"font","children":[],"call":["@style_definitions [] ","@style_defaults [] [] ","col - ","@style_defaults [] ","@style [] [] ","@style [] "," normalize "," read_cells ","@cells_read [] "]}," Openoffice Font underline?":{"type":"method","name":"underline?","children":[],"call":["@underline != "]}," Openoffice Font italic?":{"type":"method","name":"italic?","children":[],"call":["@italic == "]}," Openoffice Font bold?":{"type":"method","name":"bold?","children":[],"call":["@bold == "]}," Openoffice method_missing":{"type":"method","name":"method_missing","children":[],"call":[" cell "," label ","m to_s ","@label has_key? "," read_labels ","@labels has_key? "]}," Google oben_unten_links_rechts":{"type":"method","name":"oben_unten_links_rechts","children":[],"call":["cols max ","cols min ","rows max ","rows min ","cols << ","ws [] != ","ws [] ","rows << ","ws num_cols ","ws num_rows ","@worksheets [] ","sheet_no - ","ro@worksheets []  max ","ro@worksheets []  min ","@worksheets []  [] != ","@worksheets []  [] ","ro@worksheets []  << ","@worksheets []  num_cols ","@worksheets []  num_ro@worksheets []  "]}," Google entry_roo":{"type":"method","name":"entry_roo","children":[],"call":[]}," Google add_to_cell_roo":{"type":"method","name":"add_to_cell_roo","children":[],"call":["@worksheets [] save ","@worksheets [] ","@worksheets [] []= "]}," Google determine_datatype":{"type":"method","name":"determine_datatype","children":[],"call":[" timestring_to_seconds "," time? ","val to_f "," numeric? "," date? "," datetime? ","numval to_f ","val [] == ","val [] ","val nil? ","$log debug ","ty == "," timestring_to_seconds  to_f ","val to_f  to_f ","numval to_f  to_f ","num timestring_to_seconds  to_f ","numnumval to_f  to_f "," timestring_to_seconds  [] == ","val to_f  [] == ","numval to_f  [] == "," timestring_to_seconds  [] ","val to_f  [] ","numval to_f  [] "," timestring_to_seconds  nil? ","val to_f  nil? ","numval to_f  nil? "]}," Google datetime?":{"type":"method","name":"datetime?","children":[],"call":["DateTime  strptime "]}," GenericSpreadsheet open_from_stream":{"type":"method","name":"open_from_stream","children":[],"call":["File  join ","f close ","f write ","stream [] ","File  open ","file write ","File  open  close ","File  open  write ","File  open ile write "]}," GenericSpreadsheet key_to_string":{"type":"method","name":"key_to_string","children":[],"call":["arr [] "]}," GenericSpreadsheet key_to_num":{"type":"method","name":"key_to_num","children":[],"call":["c to_i ","r to_i ","str split ","c to_i  to_i ","r to_i  to_i ","str to_i  split "]}," GenericSpreadsheet method_missing":{"type":"method","name":"method_missing","children":[],"call":[" cell ","args [] ","args size > ","args size ","2 to_i ","GenericSpreadsheet  letter_to_number ","m =~ ","args first ","args empty? ","Roo GenericSpreadsheet  letter_to_number "," raise "]}," GenericSpreadsheet to_matrix":{"type":"method","name":"to_matrix","children":[],"call":["Matrix  rows ","arr []= ","line << "," cell ","(or\n  (lvar :from_column)\n  (send nil :first_column\n    (lvar :sheet))) upto "," last_column "," first_column ","(or\n  (lvar :from_row)\n  (send nil :first_row\n    (lvar :sheet))) upto "," last_row "," first_row ","(or\n  (lvar :from_column)\n  (send nil :first_column\n    (lvar :sheet))) upto map ","(or\n  (lvar :from_row)\n  (send nil :first_row\n    (lvar :sheet))) upto map ","Matrix  empty "," require "," first_column upto "," first_row upto "]}," GenericSpreadsheet split_coord":{"type":"method","name":"split_coord","children":[],"call":[]}," GenericSpreadsheet split_coordinate":{"type":"method","name":"split_coordinate","children":[],"call":[]}," GenericSpreadsheet next_tmpdir":{"type":"method","name":"next_tmpdir","children":[],"call":[]}," GenericSpreadsheet fremdrechner?":{"type":"method","name":"fremdrechner?","children":[],"call":["eigener ! ","(str \"C:\\\\Users\\\\thopre\") include? ","ENV  [] ","(str \"C:\\Users\\thopre\") include?  ! "]}," Excelx attribute2format":{"type":"method","name":"attribute2format","children":[],"call":["STANDARD_FORMATS  [] ","STANDARD_FORMATS  has_key? ","@cellXfs [] first to_i ","@cellXfs [] first ","@cellXfs [] ","s to_i ","nf [] ","nf first to_s == ","nf first to_s ","nf first ","@numFmts each ","id to_i ","@numFmts [] ","Format STANDARD_FORMATS  [] ","nf first == ","@cellXfs [] first to_i  to_i ","@cellXfs []  to_i "]}," Excelx read_styles":{"type":"method","name":"read_styles","children":[],"call":["@style_definitions << ","fonts [] ","xf [] to_i ","xf [] ","@cellXfs << ","xfs children each ","xfs children ","doc xpath each ","doc xpath ","fonts << ","font underline= ","font italic= ","font bold= ","font_sub_el name ","font_el each_element ","Excelx Font  new ","font_el == ","fonts_el children each ","fonts_el children ","@numFmts << ","numFmt attributes [] ","numFmt attributes ","font_el xpath empty? ! ","font_el xpath empty? ","font_el xpath ","Font  new tap ","Font  new ","doc xpath map ","Hash  [] ","numFmt [] ","e3 attributes [] ","e3 attributes ","e3 name == ","e3 name ","e2 each_element ","e2 name == ","e2 name ","e1 each_element ","e1 name == ","e1 name ","doc each_element ","xf attributes to_h [] to_i ","xf attributes to_h [] ","xf attributes to_h ","xf attributes ","xfs each ","doc find each ","doc find ","font_el name == ","font_el name ","fonts_el each_element ","numFmt attributes to_h [] ","numFmt attributes to_h ","Excelx Font  new s [] ","Excelx Font  new s << ","Excelx Font  new  underline= ","Excelx Font  new  italic= ","Excelx Font  new  bold= ","Excelx Font  new _sub_el name ","Excelx Font  new _el each_element ","Excelx Font  new _el == ","Excelx Font  new s_el children each ","Excelx Font  new s_el children ","Hash  []  << ","Excelx Font  new _el xpath empty? ! ","Excelx Font  new _el xpath empty? ","Excelx Font  new _el xpath ","Excelx Font  new _el name == ","Excelx Font  new _el name ","Excelx Font  new s_el each_element "]}," Excelx read_labels":{"type":"method","name":"read_labels","children":[],"call":["@label []= ","defined_name [] ","coordinates split ","defined_name text split [] ","defined_name text split ","defined_name text ","defined_name text split first ","@workbook_doc xpath each ","@workbook_doc xpath ","Hash  [] ","@workbook_doc xpath map ","defined_name text split []  split "]}," Excelx read_comments":{"type":"method","name":"read_comments","children":[],"call":["@comments_read []= ","@comment [] []= ","@comment [] ","@comment []= ","Hash  new ","r text ","r name == ","r name ","text children each ","text children ","text name == ","text name ","clc children each ","clc children ","clc name == ","clc name ","commentlist children each ","commentlist children ","GenericSpreadsheet  split_coordinate ","commentlist attributes [] to_s ","commentlist attributes [] ","commentlist attributes ","commentlist name == ","commentlist name ","cc children each ","cc children ","cc name == ","cc name ","comment children each ","comment children ","@comments_doc [] xpath each ","@comments_doc [] xpath ","@comments_doc [] "," sheets index "," sheets "," raise "," sheets include? ","sheet == ","@default_sheet == ","text text ","comment xpath each ","comment xpath ","Roo GenericSpreadsheet  split_coordinate ","comment attributes [] to_s ","comment attributes [] ","comment attributes "," validate_sheet! ","Roo Base  split_coordinate ","@r text s_read []= ","@comme sheets index ts_read []= ","@r text  [] []= ","@comme sheets index t [] []= ","@r text  [] ","@comme sheets index t [] ","@r text  []= ","@comme sheets index t []= ","Hash   sheets index ew ","r  sheets index ame == ","r  sheets index ame ","text childre sheets index  each ","text childre sheets index  ","text  sheets index ame == ","text  sheets index ame ","clc childre sheets index  each ","clc childre sheets index  ","clc  sheets index ame == ","clc  sheets index ame ","r text list children each ","comme sheets index tlist childre sheets index  each ","r text list children ","comme sheets index tlist childre sheets index  ","Ge sheets index ericSpreadsheet  split_coordi sheets index ate ","r text list attributes [] to_s ","comme sheets index tlist attributes [] to_s ","r text list attributes [] ","comme sheets index tlist attributes [] ","r text list attributes ","comme sheets index tlist attributes ","r text list name == ","comme sheets index tlist  sheets index ame == ","r text list name ","comme sheets index tlist  sheets index ame ","cc childre sheets index  each ","cc childre sheets index  ","cc  sheets index ame == ","cc  sheets index ame ","r text  children each ","comme sheets index t childre sheets index  each ","r text  children ","comme sheets index t childre sheets index  ","@r text s_doc [] xpath each ","@comme sheets index ts_doc [] xpath each ","@r text s_doc [] xpath ","@comme sheets index ts_doc [] xpath ","@r text s_doc [] ","@comme sheets index ts_doc [] "," sheets i sheets index dex "," sheets i sheets index clude? ","r text  xpath each ","comme sheets index t xpath each ","r text  xpath ","comme sheets index t xpath ","Roo Ge sheets index ericSpreadsheet  split_coordi sheets index ate ","r text  attributes [] to_s ","comme sheets index t attributes [] to_s ","r text  attributes [] ","comme sheets index t attributes [] ","r text  attributes ","comme sheets index t attributes ","Roo Base  split_coordi sheets index ate "]}," Excelx format2type":{"type":"method","name":"format2type","children":[],"call":["FORMATS  [] ","FORMATS  has_key? ","format to_s ","format to_s  to_s "]}," Excelx comments":{"type":"method","name":"comments","children":[],"call":["elem [] ","elem [] [] ","@comment [] each collect ","@comment [] each ","@comment [] "," read_comments ","@comments_read [] "," sheet_for comments map "," sheet_for comments "," sheet_for "]}," Excelx comment?":{"type":"method","name":"comment?","children":[],"call":[" comment != "," comment "," normalize "," read_comments ","@comments_read [] "," comment ! ! "," comment ! "]}," Excelx comment":{"type":"method","name":"comment","children":[],"call":["@comment [] [] ","@comment [] "," normalize "," read_comments ","@comments_read [] "," sheet_for comments [] "," sheet_for comments "," sheet_for "]}," Excelx labels":{"type":"method","name":"labels","children":[],"call":["result << ","label [] [] ","label [] ","GenericSpreadsheet  letter_to_number ","label [] [] to_i ","@label each "," read_labels ","Roo GenericSpreadsheet  letter_to_number ","@label map ","Roo Base  letter_to_number ","label sheet ","label col ","label row "," workbook defined_names map "," workbook defined_names "," workbook "]}," Excelx label":{"type":"method","name":"label","children":[],"call":["@label [] [] ","@label [] ","GenericSpreadsheet  letter_to_number ","@label [] [] to_i ","@label has_key? ","@label size > ","@label size "," read_labels ","Roo GenericSpreadsheet  letter_to_number ","@label has_key? ! ","@label empty? ","Roo Base  letter_to_number ","labels [] sheet ","labels [] ","labels [] col ","labels [] row ","labels key? ! ","labels key? ","labels empty? "," workbook defined_names "," workbook "," read_ workbook defined_names  "," workbook defined_names  [] sheet "," workbook defined_names  [] "," workbook defined_names  [] col "," workbook defined_names  [] row "," workbook defined_names  key? ! "," workbook defined_names  key? "," workbook defined_names  empty? "]}," Excelx excelx_format":{"type":"method","name":"excelx_format","children":[],"call":[" attribute2format to_s "," attribute2format ","@s_attribute [] [] ","@s_attribute [] "," normalize "," read_cells ","@cells_read [] "," sheet_for excelx_format "," sheet_for "," attribute2format to_@s_attribute [] []  ","@@s_attribute [] [] _attribute [] [] ","@@s_attribute [] [] _attribute [] "," read_cell@s_attribute [] []  ","@cell@s_attribute [] [] _read [] "," @s_attribute [] [] heet_for excelx_format "," @s_attribute [] [] heet_for "]}," Excelx excelx_value":{"type":"method","name":"excelx_value","children":[],"call":["@excelx_value [] [] ","@excelx_value [] "," normalize "," read_cells ","@cells_read [] "," safe_send "," sheet_for cells [] "," sheet_for cells "," sheet_for "]}," Excelx font":{"type":"method","name":"font","children":[],"call":["@style_definitions [] ","s_attribute to_i ","@s_attribute [] [] ","@s_attribute [] "," normalize "," read_cells ","@cells_read [] "," styles definitions [] "," styles definitions "," styles "," safe_send "," sheet_for cells [] "," sheet_for cells "," sheet_for ","s_attribute to_i  to_i ","@s_attribute [] []  to_i ","@s_attribute to_i  [] [] ","@@s_attribute [] []  [] [] ","@s_attribute to_i  [] ","@@s_attribute [] []  [] "]}," Excelx Font underline?":{"type":"method","name":"underline?","children":[],"call":["@underline == "]}," Excelx Font italic?":{"type":"method","name":"italic?","children":[],"call":["@italic == "]}," Excelx Font bold?":{"type":"method","name":"bold?","children":[],"call":["@bold == "]}," Excelx method_missing":{"type":"method","name":"method_missing","children":[],"call":[" cell "," label ","m to_s "," read_cells ","@cells_read [] ","@label has_key? "," read_labels "," safe_send "," sheet_for cells [] ","label key "," sheet_for cells "," sheet_for ","label sheet "," workbook defined_names [] ","method to_s "," workbook defined_names "," workbook ","  workbook defined_names []  ","@ workbook defined_names []  has_key? "," read_ workbook defined_names [] s "," workbook defined_names []  key "," workbook defined_names []  sheet "]}," Excel wait_for_version_080":{"type":"method","name":"wait_for_version_080","children":[],"call":[" raise ","EXCEL_NO_FORMULAS  + ","Spreadsheet VERSION  <= ","Formulas are not supported for excel spreadsheets. + "]}," Excel read_cell":{"type":"method","name":"read_cell","children":[],"call":["cell class to_s downcase to_sym ","cell class to_s downcase ","cell class to_s ","cell class ","cell to_s ","cell to_f "," read_cell_content ","row at "," read_cell_content  class to_s downcase to_sym ","row at  class to_s downcase to_sym "," read_cell_content  class to_s downcase ","row at  class to_s downcase "," read_cell_content  class to_s ","row at  class to_s "," read_cell_content  class ","row at  class "," read_cell_content  to_s ","row at  to_s "," read_cell_content  to_f ","row at  to_f "," read_ read_cell_content _content "," read_row at _content "]}," Excel read_cell_date_or_time":{"type":"method","name":"read_cell_date_or_time","children":[],"call":[" sprintf ","value day ","value month ","value year ","row date ","row _date ","row at class == ","row at class ","row at ","datetime sec != ","datetime sec ","datetime min != ","datetime min ","datetime hour != ","datetime hour ","row datetime ","row _datetime ","h * + + ","h * + ","m * ","h * ","secs - ","60 * ","(send\n  (lvar :secs) :/\n  (float 60.0)) floor ","secs / ","3600 * ","(send\n  (lvar :secs) :/\n  (float 3600.0)) floor ","f round ","cell * * * ","cell * * ","cell * ","cell < ","cell to_s to_f ","cell to_s "," read_cell_content ","row send ","row at to_s to_f ","row at to_s "," sprintcell * * *  "," sprintf  day ","row date  day ","row _date  day ","h * + +  day ","row send  day "," sprintf  month ","row date  month ","row _date  month ","h * + +  month ","row send  month ","value (send\n  (lvar :secs) :/\n  (float 60.0)) floor onth ","value mont(send\n  (lvar :secs) :/\n  (float 3600.0)) floor  "," sprintf  year ","row date  year ","row _date  year ","h * + +  year ","row send  year ","row datetime  sec != ","row _datetime  sec != ","row send  sec != ","dateti(send\n  (lvar :secs) :/\n  (float 60.0)) floor e sec != ","row datetime  sec ","row _datetime  sec ","row send  sec ","dateti(send\n  (lvar :secs) :/\n  (float 60.0)) floor e sec ","row datetime  min != ","row _datetime  min != ","row send  min != ","dateti(send\n  (lvar :secs) :/\n  (float 60.0)) floor e (send\n  (lvar :secs) :/\n  (float 60.0)) floor in != ","row datetime  min ","row _datetime  min ","row send  min ","dateti(send\n  (lvar :secs) :/\n  (float 60.0)) floor e (send\n  (lvar :secs) :/\n  (float 60.0)) floor in ","row datetime  hour != ","row _datetime  hour != ","row send  hour != ","dateti(send\n  (lvar :secs) :/\n  (float 60.0)) floor e hour != ","datetime (send\n  (lvar :secs) :/\n  (float 3600.0)) floor our != ","row datetime  hour ","row _datetime  hour ","row send  hour ","dateti(send\n  (lvar :secs) :/\n  (float 60.0)) floor e hour ","datetime (send\n  (lvar :secs) :/\n  (float 3600.0)) floor our ","row row datetime  ","row row _datetime  ","row row send  ","row dateti(send\n  (lvar :secs) :/\n  (float 60.0)) floor e ","row _row datetime  ","row _row _datetime  ","row _row send  ","row _dateti(send\n  (lvar :secs) :/\n  (float 60.0)) floor e ","(send\n  (lvar :secs) :/\n  (float 3600.0)) floor  * + + ","(send\n  (lvar :secs) :/\n  (float 3600.0)) floor  * + ","(send\n  (lvar :secs) :/\n  (float 60.0)) floor  * ","(send\n  (lvar :secs) :/\n  (float 3600.0)) floor  * ","secs -  - ","f round  - ","(send\n  (lvar :secs - ) :/\n  (float 60.0)) floor ","(send\n  (lvar :f round ) :/\n  (float 60.0)) floor ","(send\n  (lvar :secs) :/\n  (cell * * * loat 60.0)) cell * * * loor ","secs -  / ","f round  / ","(send\n  (lvar :secs - ) :/\n  (float 3600.0)) floor ","(send\n  (lvar :f round ) :/\n  (float 3600.0)) floor ","(send\n  (lvar :secs) :/\n  (cell * * * loat 3600.0)) cell * * * loor ","cell * * *  round ","cell to_s to_f  * * * "," read_cell_content  * * * ","row at to_s to_f  * * * ","cell to_s to_f  * * "," read_cell_content  * * ","row at to_s to_f  * * ","cell to_s to_f  * "," read_cell_content  * ","row at to_s to_f  * ","cell to_s to_f  < "," read_cell_content  < ","row at to_s to_f  < ","cell to_s to_cell * * *  ","cell to_s to_f  to_s to_f "," read_cell_content  to_s to_f ","row at to_s to_f  to_s to_f ","cell to_s to_f  to_s "," read_cell_content  to_s ","row at to_s to_f  to_s "," read_cell to_s to_f _content "," read_ read_cell_content _content "," read_row at to_s to_f _content ","row at to_s to_cell * * *  "]}," Excel date_or_time?":{"type":"method","name":"date_or_time?","children":[],"call":[" Float > "," Float "," read_cell_content ","format date_or_time? ","row format ","row at "," read_ read_cell_content _content "," read_row at _content ","row format  date_or_time? ","row row format  "]}," Excel read_cell_content":{"type":"method","name":"read_cell_content","children":[],"call":["cell value ","cell class == ","cell class ","row at ","row [] ","row [] class == ","row [] class ","cell value  value ","row at  value ","row []  value ","cell value  class == ","row at  class == ","row []  class == ","cell value  class ","row at  class ","row []  class "]}," Excel normalize_string":{"type":"method","name":"normalize_string","children":[],"call":[" platform_specific_iconv ","Iconv  new ","CharGuess  guess "," remove_every_second_null "," every_second_null? "," platform_specific_encoding ","encoding encode "," platform_specific_CharGuess  guess  ","CharGuess  guess  encode "]}," Excel empty_column?":{"type":"method","name":"empty_column?","children":[],"call":["content ! ","elem != ","col compact each ","col compact "]}," Excel label":{"type":"method","name":"label","children":[],"call":["@labels [] [] ","@labels [] ","GenericSpreadsheet  letter_to_number ","@labels [] [] to_i ","@labels has_key? "," read_cells ","@cells_read [] "]}," Excel to_s":{"type":"method","name":"to_s","children":[],"call":["@cell [] inspect ","@cell [] "," read_cells ","@cells_read [] "]}," Excel font":{"type":"method","name":"font","children":[],"call":["@fonts [] [] ","@fonts [] "," normalize "," read_cells ","@cells_read [] "]}," ExcelFontExtensions underline?":{"type":"method","name":"underline?","children":[],"call":[" underline != "," underline "]}," ExcelFontExtensions italic?":{"type":"method","name":"italic?","children":[],"call":[" italic "]}," ExcelFontExtensions bold?":{"type":"method","name":"bold?","children":[],"call":[" weight "]}," Spreadsheet Excel Row _datetime":{"type":"method","name":"_datetime","children":[],"call":["DateTime  new ","date day ","date month ","date year ","LEAP_ERROR  > ","hour > ","min > ","sec > ","hour floor ","min floor ","(send\n  (begin\n    (send\n      (lvar :min) :%\n      (int 1))) :*\n  (int 60)) round ","(send\n  (lvar :min) :%\n  (int 1)) * ","min % ","(send\n  (lvar :hour) :%\n  (int 1)) * ","hour % ","(send\n  (lvar :data) :%\n  (int 1)) * ","data % ","base + ","data to_f ","@worksheet date_base ","data is_a? ","base +  day ","base +  month ","base +  year ","hour floor  > ","(send\n  (lvar :data) :%\n  (int 1)) *  > ","min floor  > ","(send\n  (lvar :hour) :%\n  (int 1)) *  > ","(send\n  (begin\n    (send\n      (lvar :min) :%\n      (int 1))) :*\n  (int 60)) round  > ","hour floor  floor ","(send\n  (lvar :data) :%\n  (int 1)) *  floor ","min floor  floor ","(send\n  (lvar :hour) :%\n  (int 1)) *  floor ","(send\n  (begin\n    (send\n      (lvar :min floor ) :%\n      (int 1))) :*\n  (int 60)) round ","(send\n  (begin\n    (send\n      (lvar :(send\n  (lvar :hour) :%\n  (int 1)) * ) :%\n      (int 1))) :*\n  (int 60)) round ","(send\n  (lvar :min floor ) :%\n  (int 1)) * ","(send\n  (lvar :(send\n  (lvar :hour) :%\n  (int 1)) * ) :%\n  (int 1)) * ","min floor  % ","(send\n  (lvar :hour) :%\n  (int 1)) *  % ","(send\n  (lvar :hour floor ) :%\n  (int 1)) * ","(send\n  (lvar :(send\n  (lvar :data) :%\n  (int 1)) * ) :%\n  (int 1)) * ","hour floor  % ","(send\n  (lvar :data) :%\n  (int 1)) *  % ","@worksheet date_base  + ","@worksheet base + _base ","@worksheet date_@worksheet date_base  "]}," Spreadsheet Excel Row _date":{"type":"method","name":"_date","children":[],"call":["LEAP_ERROR  > ","@worksheet date_base ","@worksheet date_base + ","data to_i ","data is_a? ","@worksheet @worksheet date_base + _base ","@worksheet @worksheet date_base + _base + "]}," Csv read_cells":{"type":"method","name":"read_cells","children":[],"call":["@last_column [] ","@last_column [] > ","@first_column [] "," column any? ! "," column any? "," column "," loop ","@first_column [] < ","@last_row [] ","@last_row [] > ","@first_row [] "," row any? ! "," row any? "," row ","@first_row [] < ","@cells_read []= ","i + > ","i + ","@cell_type []= "," celltype_class ","@cell [] ","@cell []= "," cell_postprocessing ","row each_with_index ","CSV  foreach ","@last_column []= ","@first_column []= ","@last_row []= ","@first_row []= ","CSV  parse "," data "]}," Csv celltype_class":{"type":"method","name":"celltype_class","children":[],"call":[" raise ","value inspect ","(pair\n  (const nil :String)\n  (sym :string)) [] ","value class ","TYPE_MAP  [] "]}," Csv cell_postprocessing":{"type":"method","name":"cell_postprocessing","children":[],"call":[]}," Csv celltype":{"type":"method","name":"celltype","children":[],"call":["@cell_type [] "," normalize "," read_cells ","@cells_read [] "]}," Csv cell":{"type":"method","name":"cell","children":[],"call":["@cell [] "," normalize "," read_cells ","@cells_read [] "]}," Csv sheets":{"type":"method","name":"sheets","children":[],"call":[]}," Csv initialize":{"type":"method","name":"initialize","children":[],"call":["Hash  new "]}," Worksheet each":{"type":"method","name":"each","children":[],"call":["blanks < ","Proc  new call "," row ","Proc  new "," row any? ","skip upto "," dimensions [] - "," dimensions [] "," dimensions "]}," Google set_type":{"type":"method","name":"set_type","children":[],"call":["@cell_type [] []= ","@cell_type [] "]}," Google _set_value":{"type":"method","name":"_set_value","children":[],"call":["@cell [] []= ","@cell [] "]}," Google set":{"type":"method","name":"set","children":[],"call":[" set_type "," _set_value "," determine_datatype ","value to_s ","@cells_read [] "," add_to_cell_roo "," normalize "," sheets index + "," sheets index "," sheets "," validate_sheet! "]}," GenericSpreadsheet cell_to_csv":{"type":"method","name":"cell_to_csv","children":[],"call":[" raise "," celltype ","Roo GenericSpreadsheet  integer_to_timestring ","onecell to_s ","onecell class ","onecell to_i to_s ","onecell to_i ","onecell == ","onecell gsub ","onecell empty? "," cell "," empty? "," cell  to_s "," cell  class "," cell  to_i to_s "," cell  to_i "," cell  == "," cell  gsub "," cell  empty? "]}," GenericSpreadsheet validate_sheet!":{"type":"method","name":"validate_sheet!","children":[],"call":[" raise ","sheet inspect "," sheets include? ! "," sheets include? "," sheets "," sheets fetch ","sheet - "]}," GenericSpreadsheet uri?":{"type":"method","name":"uri?","children":[],"call":["filename start_with? "]}," GenericSpreadsheet set_type":{"type":"method","name":"set_type","children":[],"call":["@cell_type [] []= ","@cell_type [] "]}," GenericSpreadsheet set_value":{"type":"method","name":"set_value","children":[],"call":["@cell [] []= ","@cell [] "]}," GenericSpreadsheet header_index":{"type":"method","name":"header_index","children":[],"call":[" row index + "," first_column "," row index "," row "]}," GenericSpreadsheet set_headers":{"type":"method","name":"set_headers","children":[],"call":["Hash  [] ","hash keys zip "," header_index ","@headers map ","hash keys "," row_with ","hash values ","Hash  []  map "," row_with  map "]}," GenericSpreadsheet sanitize_value":{"type":"method","name":"sanitize_value","children":[],"call":["(send\n  (send\n    (send\n      (lvar :v) :strip) :unpack\n    (str \"U*\")) :select) pack ","b < ","v strip unpack select ","v strip unpack ","v strip "]}," GenericSpreadsheet clean_sheet":{"type":"method","name":"clean_sheet","children":[],"call":["@cleaned []= ","@cell [] []= "," sanitize_value ","@cell [] ","String  === ","@cell [] each_pair "," read_cells ","@cells_read [] "]}," GenericSpreadsheet make_tmpdir":{"type":"method","name":"make_tmpdir","children":[],"call":["Dir  mktmpdir ","ENV  [] "]}," GenericSpreadsheet longest_sheet":{"type":"method","name":"longest_sheet","children":[],"call":[" sheet ","(send\n  (send\n    (ivar :@workbook) :worksheets) :inject) name ","o row_count > ","m row_count ","o row_count ","@workbook worksheets inject ","@workbook worksheets "]}," GenericSpreadsheet row_with":{"type":"method","name":"row_with","children":[],"call":[" raise ","line_no > ","headers length == ","query length ","headers length ","(send\n  (lvar :query) :map) compact ","(send\n  (lvar :q) :map) compact [] ","(send\n  (lvar :q) :map) compact ","row grep [] ","row grep ","q map ","query map "," each "," Array ","x split ","query map! ","(send\n  (lvar :query) :map) compact  length == ","(send\n  (lvar :query) :map) compact  length "]}," GenericSpreadsheet parse":{"type":"method","name":"parse","children":[],"call":["ary << "," each "," block_given? "]}," GenericSpreadsheet each":{"type":"method","name":"each","children":[],"call":["Hash  [] "," cell ","headers map ","@header_line upto "," last_row ","(irange\n  (send nil :first_column)\n  (send nil :last_column)) map "," last_column "," first_column "," set_headers ","@headers << ","i + "," row each_with_index "," row "," first_row ","(sym :first_row) include? ","options [] "," row_with "," clean_sheet ","@cleaned [] ","options delete ","1 upto ","options empty? "," row_with  upto "]}," GenericSpreadsheet each_with_pagename":{"type":"method","name":"each_with_pagename","children":[],"call":[" sheet "," sheets each "," sheets "]}," GenericSpreadsheet sheet":{"type":"method","name":"sheet","children":[],"call":[" sheets [] "," sheets ","String  === "]}," GenericSpreadsheet set":{"type":"method","name":"set","children":[],"call":[" set_type "," set_value "," raise "," normalize "," read_cells ","@cells_read [] "]}," Excel2003XML children_to_string":{"type":"method","name":"children_to_string","children":[],"call":["result + ","child content ","  * ","compressed_spaces == ","child [] to_i ","child [] ","child name == ","child name ","child text? ","children each ","result +  + ","child [] to_i  == "]}," Excel2003XML oo_type_2_roo_type":{"type":"method","name":"oo_type_2_roo_type","children":[],"call":[]}," Excel2003XML read_styles":{"type":"method","name":"read_styles","children":[],"call":["@style_definitions [] underline= ","font [] ","@style_definitions [] ","@style_definitions [] italic= ","@style_definitions [] bold= ","style at_xpath ","@style_definitions []= ","Roo Excel2003XML Font  new ","style [] ","@doc xpath each ","@doc xpath ","style at_xpath  [] "]}," Excel2003XML read_cells":{"type":"method","name":"read_cells","children":[],"call":["@cells_read []= "," raise ","sheet_found ! "," set_cell_values ","cell [] ","v =~ ","v to_f ","cell content ","cell [] downcase to_sym ","cell [] downcase ","c xpath each ","c xpath ","column_attributes [] ","c [] ","skip_to_col > ","c [] to_i ","r xpath each ","r xpath ","r [] ","skip_to_row > ","r [] to_i ","ws xpath each ","ws xpath ","column_attributes []= ","(op-asgn\n  (lvasgn :idx) :+\n  (int 1)) to_s ","@doc xpath each ","@doc xpath "," sheets include? "," sheets ","sheet == ","@default_sheet == ","@cells_read [] "," validate_sheet! "," set_cell_cell [] alues "," set_cell_v to_f alues "," set_cell_cell content alues ","cell []  =~ ","v to_f  =~ ","cell content  =~ ","cell []  to_f ","v to_f  to_f ","cell content  to_f ","c [] to_i  > ","r [] to_i  > ","(op-asgn\n  (lcell [] asgn :idx) :+\n  (int 1)) to_s ","(op-asgn\n  (lv to_f asgn :idx) :+\n  (int 1)) to_s ","(op-asgn\n  (lcell content asgn :idx) :+\n  (int 1)) to_s "," cell [] alidate_sheet! "," v to_f alidate_sheet! "," cell content alidate_sheet! "]}," Excel2003XML set_cell_values":{"type":"method","name":"set_cell_values","children":[],"call":["@cell [] []= ","v to_f ","DateTime  parse ","@cell_type [] [] ","@cell_type [] ","@cell [] ","@style [] []= ","@style [] ","@style []= ","@cell []= ","@formula [] []= ","@formula [] ","@formula []= ","@cell_type [] []= ","@cell_type []= ","x + "]}," Excel2003XML oo_version":{"type":"method","name":"oo_version","children":[],"call":["office [] ","@doc find each ","@doc find "]}," Excel2003XML formulas":{"type":"method","name":"formulas","children":[],"call":["theformulas << "," formula "," formula? "," first_column upto "," last_column "," first_column "," first_row upto "," last_row "," first_row "," read_cells ","@cells_read [] ","Array  new ","Array  new  << "]}," Excel2003XML save":{"type":"method","name":"save","children":[],"call":[]}," Excel2003XML to_s":{"type":"method","name":"to_s","children":[],"call":["@cell [] inspect ","@cell [] "," read_cells ","@cells_read [] "]}," Excel2003XML officeversion":{"type":"method","name":"officeversion","children":[],"call":[" oo_version "]}," Excel2003XML sheets":{"type":"method","name":"sheets","children":[],"call":["sheet [] ","@doc xpath map ","@doc xpath "]}," Excel2003XML celltype":{"type":"method","name":"celltype","children":[],"call":["@cell_type [] [] ","@cell_type [] ","@formula [] [] ","@formula [] "," normalize "," read_cells ","@cells_read [] "]}," Excel2003XML font":{"type":"method","name":"font","children":[],"call":["@style_definitions [] ","@style_defaults [] [] ","col - ","@style_defaults [] ","@style [] [] ","@style [] "," normalize "," read_cells ","@cells_read [] "]}," Excel2003XML Font underline?":{"type":"method","name":"underline?","children":[],"call":["@underline != "]}," Excel2003XML Font italic?":{"type":"method","name":"italic?","children":[],"call":["@italic == "]}," Excel2003XML Font bold?":{"type":"method","name":"bold?","children":[],"call":["@bold == "]}," Excel2003XML formula?":{"type":"method","name":"formula?","children":[],"call":[" formula != "," formula "," normalize "," read_cells ","@cells_read [] "]}," Excel2003XML formula":{"type":"method","name":"formula","children":[],"call":["@formula [] [] [] ","oooc: length ","@formula [] [] ","@formula [] ","@formula [] [] == "," normalize "," read_cells ","@cells_read [] "]}," Excel2003XML cell":{"type":"method","name":"cell","children":[],"call":["@cell [] [] ","@cell [] ","Date  new ","dd to_i ","mm to_i ","yyyy to_i ","@cell [] [] split "," celltype == "," celltype "," normalize "," read_cells ","@cells_read [] "]}," Excel2003XML initialize":{"type":"method","name":"initialize","children":[],"call":[" read_styles ","Hash  new ","h []= "," sheets first "," sheets ","Nokogiri  XML "," open "," raise ","File  file? "," file_type_check "," unzip ","packed == "," open_from_uri "," uri? "," make_tmpdir "," load_xml "," download_uri "," warn ","options [] ","Hash  === ","options []  == "]}," Excel ExcelFontExtensions underline?":{"type":"method","name":"underline?","children":[],"call":[" underline != "," underline "]}," Excel ExcelFontExtensions italic?":{"type":"method","name":"italic?","children":[],"call":[" italic "]}," Excel ExcelFontExtensions bold?":{"type":"method","name":"bold?","children":[],"call":[" weight == "," weight "]}," Excel encoding=":{"type":"method","name":"encoding=","children":[],"call":["@workbook encoding= "]}," Openoffice attr":{"type":"method","name":"attr","children":[],"call":["node attributes [] value ","node attributes [] ","node attributes "]}," Excelx Format to_type":{"type":"method","name":"to_type","children":[],"call":["format include? ","EXCEPTIONAL_FORMATS  [] ","format to_s downcase ","format to_s ","format match nil? ! ","format match nil? ","format match ","format to_s downcase  include? ","format to_s downcase  to_s downcase ","format to_s downcase  to_s ","format to_s downcase  match nil? ! ","format to_s downcase  match nil? ","format to_s downcase  match "]}," Excel platform_specific_encoding":{"type":"method","name":"platform_specific_encoding","children":[],"call":[" remove_every_second_null "," every_second_null? ","value encode ","RUBY_PLATFORM  downcase "]}," Csv data":{"type":"method","name":"data","children":[],"call":["f read ","File  open "," filename "," open_from_uri "," uri? "," make_tmpdir "]}," Roo const_missing":{"type":"method","name":"const_missing","children":[],"call":[]}," OpenOffice attr":{"type":"method","name":"attr","children":[],"call":["node attributes [] value ","node attributes [] ","node attributes "]}," OpenOffice children_to_string":{"type":"method","name":"children_to_string","children":[],"call":["result + ","child content ","  * ","compressed_spaces == ","child attributes [] to_s to_i ","child attributes [] to_s ","child attributes [] ","child attributes ","child name == ","child name ","child text? ","children each ","result +  + ","child attributes [] to_s to_i  == "]}," OpenOffice oo_type_2_roo_type":{"type":"method","name":"oo_type_2_roo_type","children":[],"call":[]}," OpenOffice read_styles":{"type":"method","name":"read_styles","children":[],"call":["@style_definitions []= ","font underline= "," attr ","font italic= ","font bold= ","Roo OpenOffice Font  new ","style each ","style name == ","style name ","style_elements each ","@font_style_definitions []= ","Roo Font  new ","Roo OpenOffice Font  new  underline= ","Roo OpenOffice Font  new  italic= ","Roo OpenOffice Font  new  bold= ","@Roo OpenOffice Font  new _style_definitions []= "]}," OpenOffice read_labels":{"type":"method","name":"read_labels","children":[],"call":["Hash  [] ","sheetname [] ","sheetname [] == ","coords split "," attr to_s split "," attr to_s "," attr ","@doc xpath map ","@doc xpath "," doc xpath map "," doc xpath "," doc ","sheetname []  [] ","sheet attr to_s  [] ","sheetname []  [] == ","sheet attr to_s  [] == "]}," OpenOffice read_comments":{"type":"method","name":"read_comments","children":[],"call":[" read_cells "]}," OpenOffice read_cells":{"type":"method","name":"read_cells","children":[],"call":["@comments_read []= ","@cells_read []= "," raise ","sheet_found ! "," read_styles ","@doc xpath each ","@doc xpath "," set_cell_values ","skip_col to_i - ","skip_col to_i ","0 upto ","cell attributes [] ","cell attributes ","v != "," attr to_s "," attr ","str content ","str name == ","str name ","cell children each ","cell children ","CGI  unescapeHTML ","str_v gsub! ","child content ","str children each ","str children "," children_to_string ","str children size > ","str children size ","para_count > ","@comment [] []= ","annotation text ","@comment [] ","@comment []= ","Hash  new ","annotation name == ","annotation name ","table_element children each ","table_element children ","row + - ","row + "," attr to_s to_i ","table_element attributes [] ","table_element attributes ","@style_defaults [] << ","@style_defaults [] ","table_element name ","ws children each ","ws children ","sheet == ","@cells_read [] "," validate_sheet! "," doc xpath each "," doc xpath "," doc "," set_cell_ attr to_s alues "," set_cell_str content alues "," set_cell_ attr alues "," attr  to_i - "," attr  to_i "," attr to_s  != ","str content  != "," attr  != ","str_ attr to_s  gsub! ","str_str content  gsub! ","str_ attr  gsub! ","CGI  unescapeHTML  gsub! ","row + -  + - ","row + -  + ","  attr to_s alidate_sheet! "," str content alidate_sheet! ","  attr alidate_sheet! "]}," OpenOffice set_cell_values":{"type":"method","name":"set_cell_values","children":[],"call":["@cell [] []= ","@cell [] ","hms [] to_i * + + ","hms [] to_i ","hms [] ","hms [] to_i * + ","hms [] to_i * ","v split ","v to_f ","table_cell attributes [] ","table_cell attributes ","@cell_type [] []= ","@cell_type [] ","DateTime  parse "," attr to_s "," attr "," attr size != ","XXXX-XX-XX size "," attr size ","@cell_type [] [] ","@style [] []= ","@style [] ","@style []= ","@cell []= ","@formula [] []= ","@formula [] ","formula [] ","prefix length ","formula [] == ","(str \"of:\") each ","@formula []= ","Roo OpenOffice  oo_type_2_roo_type ","@cell_type []= ","x + ","v split  [] to_i * + + ","v split  [] to_i ","v split  [] ","v split  [] to_i * + ","v split  [] to_i * ","@formula []  [] []= ","@formula []  [] ","formula []  [] ","formula []  [] == ","@formula []  []= "]}," OpenOffice oo_version":{"type":"method","name":"oo_version","children":[],"call":[" attr ","@doc xpath each ","@doc xpath "," doc xpath each "," doc xpath "," doc "]}," OpenOffice comments":{"type":"method","name":"comments","children":[],"call":["elem [] ","elem [] [] ","@comment [] each collect ","@comment [] each ","@comment [] "," read_comments ","@comments_read [] "," default_sheet "]}," OpenOffice comment?":{"type":"method","name":"comment?","children":[],"call":[" comment != "," comment "," normalize "," read_cells "]}," OpenOffice comment":{"type":"method","name":"comment","children":[],"call":["@comment [] [] ","@comment [] "," normalize "," read_cells "," default_sheet "]}," OpenOffice labels":{"type":"method","name":"labels","children":[],"call":["label [] [] ","label [] ","Roo Base  letter_to_number ","label [] [] to_i ","@label map "," read_labels "," Roo Utils  letter_to_number "]}," OpenOffice label":{"type":"method","name":"label","children":[],"call":["@label [] [] ","@label [] ","Roo Base  letter_to_number ","@label [] [] to_i ","@label has_key? ","@label size > ","@label size "," read_labels "," Roo Utils  letter_to_number "]}," OpenOffice to_s":{"type":"method","name":"to_s","children":[],"call":["@cell [] inspect ","@cell [] "," read_cells "," default_sheet "]}," OpenOffice officeversion":{"type":"method","name":"officeversion","children":[],"call":[" oo_version "]}," OpenOffice sheets":{"type":"method","name":"sheets","children":[],"call":["sheet attributes [] value ","sheet attributes [] ","sheet attributes ","@doc xpath map ","@doc xpath ","(send\n  (send\n    (send nil :doc) :xpath\n    (str \"//*[local-name()='table']\")) :map) compact ","@table_display [] "," attr ","@only_visible_sheets ! "," doc xpath map "," doc xpath "," doc "," read_table_styles "," doc xpath each ","@table_display any? "]}," OpenOffice celltype":{"type":"method","name":"celltype","children":[],"call":["@cell_type [] [] ","@cell_type [] ","@formula [] [] ","@formula [] "," normalize "," read_cells "," default_sheet "]}," OpenOffice font":{"type":"method","name":"font","children":[],"call":["@style_definitions [] ","@style_defaults [] [] ","col - ","@style_defaults [] ","@style [] [] ","@style [] "," normalize "," read_cells ","@font_style_definitions [] "," default_sheet "]}," OpenOffice Font underline?":{"type":"method","name":"underline?","children":[],"call":["@underline != "]}," OpenOffice Font italic?":{"type":"method","name":"italic?","children":[],"call":["@italic == "]}," OpenOffice Font bold?":{"type":"method","name":"bold?","children":[],"call":["@bold == "]}," OpenOffice formulas":{"type":"method","name":"formulas","children":[],"call":["elem [] ","elem [] [] ","@formula [] each collect ","@formula [] each ","@formula [] "," read_cells "," default_sheet "]}," OpenOffice formula":{"type":"method","name":"formula","children":[],"call":["@formula [] [] ","@formula [] "," normalize "," read_cells "," default_sheet "]}," OpenOffice cell":{"type":"method","name":"cell","children":[],"call":["@cell [] [] ","@cell [] ","Date  new ","dd to_i ","mm to_i ","yyyy to_i ","@cell [] [] to_s split ","@cell [] [] to_s "," celltype == "," celltype "," normalize "," read_cells "," default_sheet "]}," OpenOffice method_missing":{"type":"method","name":"method_missing","children":[],"call":[" cell "," label ","m to_s ","@label has_key? "," read_labels "]}," OpenOffice initialize":{"type":"method","name":"initialize","children":[],"call":["Hash  new ","h []= "," load_xml ","File  join "," class extract_content "," class "," raise ","File  file? "," unzip ","packed == "," download_uri "," uri? "," make_tmpdir "," file_type_check "," warn ","options [] ","Hash  === "," decrypt_if_necessary ","content_entry extract ","zip_file glob first ","zip_file glob ","Zip File  open "," local_filename ","filename split last ","filename split "," close ","File  basename ","options []  == ","zip_file glob first  extract "," local_ unzip  "," local_ download_uri  "," unzip  split last "," download_uri  split last "," unzip  split "," download_uri  split "]}," OpenOffice process_zipfile":{"type":"method","name":"process_zipfile","children":[],"call":[" process_zipfile ","path + ","zip dir foreach ","zip dir ","path empty? ","f << ","zip read "," open ","File  join ","path == ","zip file file? ","zip file "]}," OpenOffice extract_content":{"type":"method","name":"extract_content","children":[],"call":[" process_zipfile ","Zip ZipFile  open ","Roo ZipFile  open "]}," Google session":{"type":"method","name":"session","children":[],"call":[" warn ","GoogleDrive  login_with_oauth ","GoogleDrive  login "]}," Google reinitialize":{"type":"method","name":"reinitialize","children":[],"call":[" initialize "]}," Excelx read_base_date":{"type":"method","name":"read_base_date","children":[],"call":["Date  new ","workbookPr [] =~ ","workbookPr [] ","@workbook_doc xpath map ","@workbook_doc xpath "]}," Excelx base_date":{"type":"method","name":"base_date","children":[],"call":[" read_base_date "]}," Excel longest_sheet":{"type":"method","name":"longest_sheet","children":[],"call":[" sheet ","(send\n  (send\n    (ivar :@workbook) :worksheets) :inject) name ","o row_count > ","m row_count ","o row_count ","@workbook worksheets inject ","@workbook worksheets "]}," CSV read_cells":{"type":"method","name":"read_cells","children":[],"call":["@last_column [] ","@last_column [] > ","@first_column [] "," column any? ! "," column any? "," column ","@first_column [] < ","@last_row [] ","@last_row [] > ","@first_row [] "," row any? ! "," row any? "," row ","@first_row [] < ","@cells_read []= ","i + > ","i + ","@cell_type []= "," celltype_class ","@cell [] ","@cell []= "," cell_postprocessing ","row each_with_index "," each_row "," csv_options ","@last_column []= ","@first_column []= ","@last_row []= ","@first_row []= ","@cells_read [] "," default_sheet "]}," CSV each_row":{"type":"method","name":"each_row","children":[],"call":["CSV  foreach "," filename "," download_uri "," make_tmpdir "," uri? ","CSV  new each ","CSV  new "," filename_or_stream "," is_stream? "," Dir  mktmpdir ","ENV  [] ","  download_uri  ","  download_uri _or_stream "]}," CSV celltype_class":{"type":"method","name":"celltype_class","children":[],"call":["TYPE_MAP  [] ","value class "]}," CSV csv_options":{"type":"method","name":"csv_options","children":[],"call":["@options [] "]}," CSV cell_postprocessing":{"type":"method","name":"cell_postprocessing","children":[],"call":[]}," CSV celltype":{"type":"method","name":"celltype","children":[],"call":["@cell_type [] "," normalize "," read_cells "," default_sheet "]}," CSV cell":{"type":"method","name":"cell","children":[],"call":["@cell [] "," normalize "," read_cells "," default_sheet "]}," CSV sheets":{"type":"method","name":"sheets","children":[],"call":[]}," CSV initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Base integer_to_timestring":{"type":"method","name":"integer_to_timestring","children":[],"call":[" sprintf ","content - ","m * ","(send\n  (lvar :content) :/\n  (float 60.0)) floor ","content / ","h * ","(send\n  (lvar :content) :/\n  (float 3600.0)) floor ","content -  - ","(send\n  (lvar :content) :/\n  (float 60.0)) floor  * ","(send\n  (lvar :content - ) :/\n  (float 60.0)) floor ","content -  / ","(send\n  (lvar :content) :/\n  (float 3600.0)) floor  * ","(send\n  (lvar :content - ) :/\n  (float 3600.0)) floor "]}," Base cell_to_csv":{"type":"method","name":"cell_to_csv","children":[],"call":[" raise "," celltype ","Roo Base  integer_to_timestring ","onecell to_s ","onecell class ","onecell to_i to_s ","onecell to_i ","onecell == ","onecell gsub ","onecell empty? "," cell "," empty? ","onecell gsub downcase "," fail ","onecell url tr ","onecell url "," integer_to_timestring ","onecell tr ","onecell tr downcase ","onecell url gsub "," sheet_for cells [] formatted_value "," sheet_for cells [] "," sheet_for cells "," sheet_for "," cell  to_s "," sheet_for cells [] formatted_value  to_s "," cell  class "," sheet_for cells [] formatted_value  class "," cell  to_i to_s "," sheet_for cells [] formatted_value  to_i to_s "," cell  to_i "," sheet_for cells [] formatted_value  to_i "," cell  == "," sheet_for cells [] formatted_value  == "," cell  gsub "," sheet_for cells [] formatted_value  gsub "," cell  empty? "," sheet_for cells [] formatted_value  empty? "," cell  gsub downcase "," sheet_for cells [] formatted_value  gsub downcase "," cell  url tr "," sheet_for cells [] formatted_value  url tr "," cell  url "," sheet_for cells [] formatted_value  url "," cell  tr "," sheet_for cells [] formatted_value  tr "," cell  tr downcase "," sheet_for cells [] formatted_value  tr downcase "," cell  url gsub "," sheet_for cells [] formatted_value  url gsub "]}," Base write_csv_content":{"type":"method","name":"write_csv_content","children":[],"call":["file print "," cell_to_csv ","col > ","1 upto "," last_column "," last_row "," first_row "]}," Base process_zipfile_packed":{"type":"method","name":"process_zipfile_packed","children":[],"call":[" process_zipfile_packed ","path + ","zip dir foreach ","zip dir ","path empty? ","File  join ","file write ","zip read ","File  open ","zip file file? ","zip file "]}," Base validate_sheet!":{"type":"method","name":"validate_sheet!","children":[],"call":[" raise ","sheet inspect "," sheets include? ! "," sheets include? "," sheets "," sheets fetch ","sheet - "," fail "]}," Base unzip":{"type":"method","name":"unzip","children":[],"call":[" process_zipfile_packed ","Zip ZipFile  open ","Roo ZipFile  open ","Zip File  open "," require "]}," Base letter_to_number":{"type":"method","name":"letter_to_number","children":[],"call":[]}," Base number_to_letter":{"type":"method","name":"number_to_letter","children":[],"call":[]}," Base open_from_stream":{"type":"method","name":"open_from_stream","children":[],"call":["File  join ","file write ","stream [] ","File  open "]}," Base download_uri":{"type":"method","name":"download_uri","children":[],"call":[" raise ","file write ","net read "," open ","File  open ","File  join ","File  basename "," require ","URI  open "," find_basename "]}," Base uri?":{"type":"method","name":"uri?","children":[],"call":["filename start_with? "]}," Base normalize":{"type":"method","name":"normalize","children":[],"call":["Roo Base  letter_to_number ","col class == ","col class "," raise ","row class == ","row class "," Roo Utils  letter_to_number ","col is_a? "," fail ","row is_a? ","Roo Base  letter_to_number  class == "," Roo Utils  letter_to_number  class == ","Roo Base  letter_to_number  class "," Roo Utils  letter_to_number  class ","Roo Base  letter_to_number  is_a? "," Roo Utils  letter_to_number  is_a? "]}," Base set_type":{"type":"method","name":"set_type","children":[],"call":["@cell_type [] []= ","@cell_type [] "]}," Base set_value":{"type":"method","name":"set_value","children":[],"call":["@cell [] []= ","@cell [] "]}," Base header_index":{"type":"method","name":"header_index","children":[],"call":[" row index + "," first_column "," row index "," row "]}," Base set_headers":{"type":"method","name":"set_headers","children":[],"call":["Hash  [] ","hash keys zip "," header_index ","@headers map ","hash keys "," row_with ","hash values ","@headers []= ","header_row [] ","hash each_with_index ","Hash  []  map "," row_with  map ","Hash  []  []= "," row_with  []= "," row_with  [] "]}," Base sanitize_value":{"type":"method","name":"sanitize_value","children":[],"call":["(send\n  (send\n    (send\n      (lvar :v) :strip) :unpack\n    (str \"U*\")) :select) pack ","b < ","v strip unpack select ","v strip unpack ","v strip ","v gsub "]}," Base clean_sheet":{"type":"method","name":"clean_sheet","children":[],"call":["@cleaned []= ","@cell [] []= "," sanitize_value ","@cell [] ","String  === ","@cell [] each_pair "," read_cells ","value is_a? "]}," Base make_tmpdir":{"type":"method","name":"make_tmpdir","children":[],"call":["Dir  mktmpdir ","ENV  [] ","TEMP_PREFIX  + "," track_tmpdir! "," block_given? "," Dir  mktmpdir tap "," Dir  mktmpdir "," class make_tempdir "," class "," warn "]}," Base reinitialize":{"type":"method","name":"reinitialize","children":[],"call":[" initialize "]}," Base key_to_string":{"type":"method","name":"key_to_string","children":[],"call":["arr [] "]}," Base key_to_num":{"type":"method","name":"key_to_num","children":[],"call":["c to_i ","r to_i ","str split "]}," Base file_type_check":{"type":"method","name":"file_type_check","children":[],"call":[" raise "," warn ","File  extname downcase != ","File  extname downcase ","File  extname ","filename [] ","qs_begin - ","filename rindex "," uri? ","new_expression [] ","File  basename ","packed == "," fail "," file_type_warning_message ","exts include? ! ","exts include? "," Array ","filename []  [] ","File  basename  [] ","filename rindex  - ","filename []  rindex ","File  basename  rindex "," Array  include? ! "," Array  include? "]}," Base load_xml":{"type":"method","name":"load_xml","children":[],"call":["Nokogiri  XML ","File  open "]}," Base row_with":{"type":"method","name":"row_with","children":[],"call":[" raise ","line_no > ","headers length == ","query length ","headers length ","(send\n  (lvar :query) :map) compact ","(send\n  (lvar :q) :map) compact [] ","(send\n  (lvar :q) :map) compact ","row grep [] ","row grep ","q map ","query map "," each "," Array ","x split ","query map! "," fail ","closest_mismatched_headers grep empty? ","closest_mismatched_headers grep ","query select ","headers length > ","closest_mismatched_headers length ","(send\n  (lvar :query) :map) compact  length == ","(send\n  (lvar :query) :map) compact  length ","closest_mismatched_(send\n  (lvar :query) :map) compact  grep empty? ","closest_mismatched_(send\n  (lvar :query) :map) compact  grep ","(send\n  (lvar :query) :map) compact  length > ","closest_mismatched_(send\n  (lvar :query) :map) compact  length "]}," Base parse":{"type":"method","name":"parse","children":[],"call":["ary << "," each "," block_given? ","results drop ","options [] == ","options [] "," each map "]}," Base each":{"type":"method","name":"each","children":[],"call":["Hash  [] "," cell ","headers map ","@header_line upto "," last_row ","(irange\n  (send nil :first_column)\n  (send nil :last_column)) map "," last_column "," first_column "," set_headers ","@headers << ","i + "," row each_with_index "," row "," first_row ","(sym :first_row) include? ","options [] "," row_with "," clean_sheet ","@cleaned [] ","options delete ","1 upto ","options empty? "," search_or_set_header "," clean_sheet_if_need "," to_enum "," block_given? ","hash []= ","headers each_with_object ","(irange\n  (send nil :first_column)\n  (send nil :last_column)) each_with_object "," row_with  upto "]}," Base each_with_pagename":{"type":"method","name":"each_with_pagename","children":[],"call":[" sheet "," sheets each "," sheets ","yielder << ","Enumerator  new "]}," Base sheet":{"type":"method","name":"sheet","children":[],"call":[" sheets [] "," sheets ","String  === "," default_sheet "," default_sheet= ","index is_a? "]}," Base method_missing":{"type":"method","name":"method_missing","children":[],"call":[" cell ","args first ","args empty? ","2 to_i ","Roo Base  letter_to_number ","m =~ ","Regexp  last_match [] to_i ","Regexp  last_match [] ","Regexp  last_match "," Roo Utils  letter_to_number "]}," Base to_xml":{"type":"method","name":"to_xml","children":[],"call":["(send\n  (const\n    (const\n      (const nil :Nokogiri) :XML) :Builder) :new) to_xml ","x cell "," celltype "," cell "," empty? "," first_column upto "," last_column "," first_column "," first_row upto "," last_row "," first_row ","xml sheet "," default_sheet= "," sheets each "," sheets ","xml spreadsheet ","Nokogiri XML Builder  new "]}," Base info":{"type":"method","name":"info","children":[],"call":["result << ","sheet != "," sheets last "," sheets ","Roo Base  number_to_letter "," last_column "," first_column "," last_row "," first_row ","Sheet  + + ","Sheet  + ","n to_s "," default_sheet= "," sheets each ","(str \"File: \") + + "," sheets join ","(str \"File: \") + "," sheets size ","File  basename "," without_changing_default_sheet "," Roo Utils  number_to_letter ","(str \"File: \") + +  << "]}," Base empty?":{"type":"method","name":"empty?","children":[],"call":["col > "," last_column ","col < "," first_column ","row > "," last_row ","row < "," first_row ","contents empty? "," celltype == "," celltype ","contents ! "," cell "," normalize "," read_cells "," cell  empty? "," cell  ! "]}," Base reload":{"type":"method","name":"reload","children":[],"call":[" default_sheet= "," reinitialize "," default_sheet "]}," Base set":{"type":"method","name":"set","children":[],"call":[" set_type "," set_value "," raise "," normalize "," read_cells "," cell_type_by_value ","  cell_type_by_value _by_value "]}," Base column":{"type":"method","name":"column","children":[],"call":[" cell "," first_row upto map "," first_row upto "," last_row "," first_row "," read_cells ","Roo Excel  letter_to_number ","columnnumber class == ","columnnumber class "," Roo Utils  letter_to_number ","column_number is_a? ","Roo Excel  letter_to_number  class == ","Roo Excel  letter_to_number  class "," Roo Utils  letter_to_number  is_a? "]}," Base row":{"type":"method","name":"row","children":[],"call":[" cell "," first_column upto map "," first_column upto "," last_column "," first_column "," read_cells "]}," Base find":{"type":"method","name":"find","children":[],"call":["Hash  [] "," cell ","header_for fetch ","1 upto map ","1 upto "," row size "," row ","rows map "," cell == ","column_with [] ","conditions all? ","rows select ","header_for invert ","conditions empty? ! ","conditions empty? ","options [] "," first_row upto "," last_row "," first_row ","args [] == ","args [] ","j + "," row size times map "," row size times ","args [] class == ","args [] class "," last_column ","args pop ","args last is_a? ","args last "," fail ","args [] inspect "," find_by_conditions "," find_by_row ","Hash  []  fetch "," first_row upto  map ","header_for invert  [] ","options []  all? "," first_row upto  select ","Hash  []  invert ","options []  empty? ! ","options []  empty? "," find_by_options []  "]}," Base to_matrix":{"type":"method","name":"to_matrix","children":[],"call":["Matrix  rows "," cell ","(or\n  (lvar :from_column)\n  (send nil :first_column\n    (lvar :sheet))) upto map ","(or\n  (lvar :from_column)\n  (send nil :first_column\n    (lvar :sheet))) upto "," last_column "," first_column ","(or\n  (lvar :from_row)\n  (send nil :first_row\n    (lvar :sheet))) upto map ","(or\n  (lvar :from_row)\n  (send nil :first_row\n    (lvar :sheet))) upto "," last_row "," first_row ","Matrix  empty "," require ","from_column upto map ","from_column upto ","from_row upto map ","from_row upto "]}," Base to_csv":{"type":"method","name":"to_csv","children":[],"call":["sio read ","sio rewind "," write_csv_content ","StringIO  new ","File  open "," StringIO  new ","StringIO  new  read "," StringIO  new  read ","StringIO  new  rewind "," StringIO  new  rewind "]}," Base to_yaml":{"type":"method","name":"to_yaml","children":[],"call":["result << "," cell ","Roo Base  integer_to_timestring "," celltype == "," celltype ","prefix each "," empty? ","(or\n  (lvar :from_column)\n  (send nil :first_column\n    (lvar :sheet))) upto "," last_column "," first_column ","(or\n  (lvar :from_row)\n  (send nil :first_row\n    (lvar :sheet))) upto "," last_row "," first_row "," integer_to_timestring ","from_column upto ","from_row upto "]}," Base last_column":{"type":"method","name":"last_column","children":[],"call":["@last_column []= ","result == ","(lvar :result) max ","key last to_i ","key last ","@cell [] each_pair ","@cell [] ","@last_column [] "," read_cells ","(lvar :result) max  == ","(lvar :(lvar :result) max ) max ","(lvar :result) makey last to_i  "]}," Base first_column":{"type":"method","name":"first_column","children":[],"call":["@first_column []= ","result == ","(lvar :result) min ","key last to_i ","key last ","@cell [] each_pair ","@cell [] ","@first_column [] "," read_cells ","(lvar :result) min  == ","(lvar :(lvar :result) min ) min "]}," Base last_row":{"type":"method","name":"last_row","children":[],"call":["@last_row []= ","result == ","(lvar :result) max ","key first to_i ","key first ","@cell [] each_pair ","@cell [] ","@last_row [] "," read_cells ","(lvar :result) max  == ","(lvar :(lvar :result) max ) max ","kekey first to_i  first to_i ","kekey first to_i  first "]}," Base first_row":{"type":"method","name":"first_row","children":[],"call":["@first_row []= ","result == ","(lvar :result) min ","key first to_i ","key first ","@cell [] each_pair ","@cell [] ","@first_row [] "," read_cells ","(lvar :result) min  == ","(lvar :(lvar :result) min ) min ","kekey first to_i  first to_i ","kekey first to_i  first "]}," Base last_column_as_letter":{"type":"method","name":"last_column_as_letter","children":[],"call":["Roo Base  number_to_letter "," last_column "," Roo Utils  number_to_letter "]}," Base first_column_as_letter":{"type":"method","name":"first_column_as_letter","children":[],"call":["Roo Base  number_to_letter "," first_column "," Roo Utils  number_to_letter "]}," Base default_sheet=":{"type":"method","name":"default_sheet=","children":[],"call":["@cells_read []= ","@first_row []= ","@last_row []= ","@first_column []= ","@last_column []= "," validate_sheet! "," sheets [] "," sheets ","sheet is_a? "]}," Base initialize":{"type":"method","name":"initialize","children":[],"call":[" sheets first "," sheets "," raise "," close "]}," Base split_coord":{"type":"method","name":"split_coord","children":[],"call":[]}," Base split_coordinate":{"type":"method","name":"split_coordinate","children":[],"call":[]}," Base without_changing_default_sheet":{"type":"method","name":"without_changing_default_sheet","children":[],"call":[" default_sheet= "," default_sheet "]}," Excelx extract_file":{"type":"method","name":"extract_file","children":[],"call":["f << ","source_zip read "," open "]}," Excelx read_hyperlinks":{"type":"method","name":"read_hyperlinks","children":[],"call":["@hyperlinks_read []= ","@hyperlink [] []= ","rel_element attribute text ","rel_element attribute ","@hyperlink [] ","Roo Base  split_coordinate ","h attributes [] to_s ","h attributes [] ","h attributes ","rels [] ","h attribute text ","h attribute ","@sheet_doc [] xpath each ","@sheet_doc [] xpath ","@sheet_doc [] ","Hash  [] ","r attribute text ","r attribute ","rels_doc xpath map ","rels_doc xpath ","@rels_doc [] "," sheets index "," sheets "," validate_sheet! ","@hyperli sheets index ks_read []= ","@hyperli sheets index k [] []= ","rels []  attribute text ","rel_eleme sheets index t attribute text ","rels []  attribute ","rel_eleme sheets index t attribute ","@hyperli sheets index k [] ","Roo Base  split_coordi sheets index ate ","Hash  []  [] ","Hash  [] _doc xpath map ","@rels_doc []  xpath map ","Hash  [] _doc xpath ","@rels_doc []  xpath ","@Hash  [] _doc [] ","@@rels_doc []  [] "," sheets i sheets index dex "]}," Excelx hyperlink":{"type":"method","name":"hyperlink","children":[],"call":["@hyperlink [] [] ","@hyperlink [] "," normalize "," read_hyperlinks ","@hyperlinks_read [] "," sheet_for hyperlinks [] "," sheet_for hyperlinks "," sheet_for "]}," Excelx hyperlink?":{"type":"method","name":"hyperlink?","children":[],"call":[" hyperlink != "," hyperlink "," hyperlink ! ! "," hyperlink ! "]}," Excelx load_xmls":{"type":"method","name":"load_xmls","children":[],"call":[" load_xml ","paths compact map ","paths compact "]}," Excel get_firsts_lasts_parseexcel":{"type":"method","name":"get_firsts_lasts_parseexcel","children":[],"call":["cell to_s != ","cell to_s ","cell type ","reihe at ","lc - ","worksheet each ","letzte_spalte_leer ! "," empty_row? "," row "," row == ","worksheet max_col + ","worksheet max_col ","worksheet min_col + ","worksheet min_col ","worksheet max_row + ","worksheet max_row ","worksheet min_row + ","worksheet min_row ","@workbook worksheet "," sheet_no ","reihe at  to_s != ","reihe at  to_s ","reihe at  type ","worksheet max_col +  - ","@workbook worksheet  each ","@workbook worksheet  max_col + ","@workbook worksheet  max_col ","@workbook worksheet  min_col + ","@workbook worksheet  min_col ","@workbook worksheet  max_row + ","@workbook worksheet  max_row ","@workbook worksheet  min_row + ","@workbook worksheet  min_row ","@workbook @workbook worksheet  "]}," GData Spreadsheet projection":{"type":"method","name":"projection","children":[],"call":[]}," GData Spreadsheet visibility":{"type":"method","name":"visibility","children":[],"call":[]}," Spreadsheet Excel Reader read_formula":{"type":"method","name":"read_formula","children":[],"call":[" set_cell ","formula value= ","Error  new ","rtype == ","rval > "," client ","@workbook encoding "," read_string ","work [] ","op == "," get_next_chunk ","work unpack ","rtype > ","rcheck != ","formula data= ","formula shared= ","(send\n  (lvar :opts) :&\n  (int 8)) > ","opts & ","Formula  new ","Formula  new  value= ","Formula  new  data= ","Formula  new  shared= "]}," GenericSpreadsheet formulas":{"type":"method","name":"formulas","children":[],"call":["theformulas << "," formula "," formula? "," first_column upto "," last_column "," first_column "," first_row upto "," last_row "," first_row "," read_cells ","@cells_read [] ","Array  new ","Array  new  << "]}," Roo Utils each_element":{"type":"method","name":"each_element","children":[],"call":["Nokogiri  XML root ","Nokogiri  XML ","node outer_xml "," block_given? "," Array include? ","node name "," Array ","node node_type == ","node node_type ","Nokogiri XML  Reader each ","Nokogiri XML  Reader "," File  open ","elements include? "," Array  include? "]}," Roo Utils load_xml":{"type":"method","name":"load_xml","children":[],"call":[" Nokogiri  XML "," File  open "]}," Roo Utils num_cells_in_range":{"type":"method","name":"num_cells_in_range","children":[],"call":["(send\n  (lvar :x2) :-\n  (begin\n    (send\n      (lvar :x1) :-\n      (int 1)))) * ","y2 - ","y1 - ","x2 - ","x1 - "," split_coordinate ","cells [] "," raise ","ArgumentError  new ","cells count != ","cells count ","cells count == ","str split "," extract_coordinate ","str split  [] ","str split  count != ","str split  count ","str split  count == "]}," Roo Utils letter_to_number":{"type":"method","name":"letter_to_number","children":[],"call":["num * ","26 ** ","(send\n  (send\n    (send\n      (lvar :letters) :bytes) :to_a) :map) reverse each_with_index ","(send\n  (send\n    (send\n      (lvar :letters) :bytes) :to_a) :map) reverse ","b - ","b > ","letters bytes to_a map ","letters bytes to_a ","letters bytes ","@letter_to_number [] "]}," Roo Utils number_to_letter":{"type":"method","name":"number_to_letter","children":[],"call":["results join ","(send\n  (lvar :num) :-\n  (lvar :mod)) / ","num - ","(send\n  (begin\n    (send\n      (int 65) :+\n      (lvar :mod))) :chr) + ","(send\n  (int 65) :+\n  (lvar :mod)) chr ","65 + ","(send\n  (lvar :num) :-\n  (int 1)) % ","num > ","num to_i ","result prepend ","LETTERS  [] ","(send\n  (lvar :num) :-\n  (int 1)) divmod ","num zero? "," +@ ","(send\n  (begin\n    (send\n      (int 65) :+\n      (lvar :mod))) :chr) +  join "," +@ s join ","(send\n  (lvar :num) :-\n  (lvar :(send\n  (lvar :num) :-\n  (int 1)) % )) / ","(send\n  (lvar :num to_i ) :-\n  (lvar :mod)) / ","num to_i  - ","(send\n  (begin\n    (send\n      (int 65) :+\n      (lvar :(send\n  (lvar :num) :-\n  (int 1)) % ))) :chr) + ","(send\n  (int 65) :+\n  (lvar :(send\n  (lvar :num) :-\n  (int 1)) % )) chr ","(send\n  (lvar :num to_i ) :-\n  (int 1)) % ","num to_i  > ","num to_i  to_i "," +@  prepend ","(send\n  (lvar :num) :-\n  (int 1)) div(send\n  (lvar :num) :-\n  (int 1)) %  ","(send\n  (lvar :num to_i ) :-\n  (int 1)) divmod ","num to_i  zero? "]}," Roo Utils split_coord":{"type":"method","name":"split_coord","children":[],"call":[" fail ","Regexp  last_match [] to_i ","Regexp  last_match [] ","Regexp  last_match ","s =~ ","coord row "," number_to_letter ","coord column "," extract_coordinate "," extract_coordinate  row "," Regexp  last_match [] to_i _to_letter "," number_to_Regexp  last_match []  "," extract_coordinate  column "," extract_ extract_coordinate inate "]}," Roo Utils split_coordinate":{"type":"method","name":"split_coordinate","children":[],"call":[" letter_to_number "," split_coord ","@split_coordinate [] "," extract_coordinate "," warn "," e letter_to_number tract_coordinate "]}," Roo Spreadsheet extension_for":{"type":"method","name":"extension_for","children":[],"call":["res tr downcase to_sym ","res tr downcase ","res tr "," File  extname "," URI  parse path "," URI  parse "," URI  encode ","path =~ "," URI  regexp ","extension tr downcase to_sym ","extension tr downcase ","extension tr ","options []= ","options delete "," File  extname tr downcase to_sym "," File  extname tr downcase "," File  extname tr ","Regexp  last_match [] ","Regexp  last_match "," URI DEFAULT_PARSER  make_regexp "," File  extname  tr downcase to_sym "," File  extname  tr downcase "," File  extname  tr ","options delete  tr downcase to_sym ","options delete  tr downcase ","options delete  tr "]}," OpenOffice read_table_styles":{"type":"method","name":"read_table_styles","children":[],"call":["@table_display []= ","display == "," attr ","style children each ","style children ","style name == ","style name ","styles children each ","styles children ","@table_ attr  []= "," attr  == "]}," OpenOffice doc":{"type":"method","name":"doc","children":[],"call":[" Roo Utils  load_xml ","File  join "]}," OpenOffice decrypt":{"type":"method","name":"decrypt","children":[],"call":["decrypted + ","cipher final ","block_size > ","total_to_read == ","buffer length ","cipher update ","zipfile read ","content_entry compressed_size ","zipfile seek ","content_entry local_header_offset + ","content_entry calculate_local_header_size ","content_entry local_header_offset ","File  open ","content_entry compressed_size  == ","zipfile read  length "]}," OpenOffice find_cipher_key":{"type":"method","name":"find_cipher_key","children":[],"call":[" raise ","Unknown key derivation name  + ","OpenSSL PKCS5  pbkdf2_hmac_sha1 ","cipher key_len ","key_derivation_name eql? ","Unknown OpenSSL PKCS5  pbkdf2_hmac_sha1  derivation name  + ","cipher OpenSSL PKCS5  pbkdf2_hmac_sha1 _len ","OpenSSL PKCS5  pbkdf2_hmac_sha1 _derivation_name eql? "]}," OpenOffice find_cipher":{"type":"method","name":"find_cipher","children":[],"call":[" raise ","Unknown algorithm  + ","cipher iv= ","cipher key= "," find_cipher_key ","cipher padding= ","cipher decrypt ","OpenSSL Cipher  new ","algorithm eql? ","OpenSSL Cipher  new  iv= ","OpenSSL Cipher  new  key= "," find_OpenSSL Cipher  new _key ","OpenSSL Cipher  new  padding= ","OpenSSL Cipher  new  decrypt "]}," OpenOffice perform_decryption":{"type":"method","name":"perform_decryption","children":[],"call":[" raise ","Invalid password or other data error:  + ","error to_s ","IO  binwrite ","Zlib Inflate  new inflate ","Zlib Inflate  new ","Zlib MAX_WBITS  -@ "," decrypt "," find_cipher ","Unknown key generation algorithm  + ","Digest SHA256  digest ","key_generation_name eql? ","start_key_generation_node [] to_i ","start_key_generation_node [] ","Base64  decode64 ","key_derivation_node [] ","key_derivation_node [] to_i ","algorithm_node [] ","start_key_generation_node nil? ! ","start_key_generation_node nil? ","key_derivation_node nil? ! ","key_derivation_node nil? ","algorithm_node nil? ! ","algorithm_node nil? ","encryption_data xpath first ","encryption_data xpath "," find_ find_cipher  ","Unknown key generation algorithm_node []   + ","start_key_generation_node []  eql? ","encryption_data xpath first  [] to_i ","encryption_data xpath first  [] ","key_derBase64  decode64 ation_node [] ","key_derBase64  decode64 ation_node [] to_i ","algorithm_node [] _node [] ","encryption_data xpath first  nil? ! ","encryption_data xpath first  nil? ","key_derBase64  decode64 ation_node nil? ! ","key_derBase64  decode64 ation_node nil? ","algorithm_node [] _node nil? ! ","algorithm_node [] _node nil? "]}," OpenOffice decrypt_if_necessary":{"type":"method","name":"decrypt_if_necessary","children":[],"call":[" raise "," perform_decryption ","password nil? ! ","password nil? ","options [] ","encryption_data nil? ! ","encryption_data nil? ","manifest xpath first ","manifest xpath "," Roo Utils  load_xml ","manifest_entry extract ","File  join ","zip_file glob first ","zip_file glob ","options []  nil? ! ","options []  nil? ","manifest xpath first  nil? ! ","manifest xpath first  nil? "," Roo Utils  load_xml  xpath first "," Roo Utils  load_xml  xpath "," Roo Utils  load_xml _entry extract ","zip_file glob first  extract "]}," OpenOffice formula?":{"type":"method","name":"formula?","children":[],"call":[" formula ! ! "," formula ! "," formula "]}," Roo Link to_uri":{"type":"method","name":"to_uri","children":[],"call":["URI  parse "," href "]}," Roo Link initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Roo Font underline?":{"type":"method","name":"underline?","children":[],"call":[]}," Roo Font italic?":{"type":"method","name":"italic?","children":[],"call":[]}," Roo Font bold?":{"type":"method","name":"bold?","children":[],"call":[]}," Excelx safe_send":{"type":"method","name":"safe_send","children":[],"call":["object send ","object respond_to? "]}," Excelx workbook":{"type":"method","name":"workbook","children":[],"call":["Workbook  new ","File  join "]}," Excelx shared_strings":{"type":"method","name":"shared_strings","children":[],"call":["SharedStrings  new ","File  join "]}," Excelx styles":{"type":"method","name":"styles","children":[],"call":["Styles  new ","File  join "]}," Excelx extract_sheets_in_order":{"type":"method","name":"extract_sheets_in_order","children":[],"call":["entry extract ","@sheet_files << ","i + ","entry name =~ ","entry name ","entries find ","sheets [] ","sheet_ids each_with_index ","entry sheets []  =~ ","entry sheets []  "]}," Excelx extract_worksheet_rels":{"type":"method","name":"extract_worksheet_rels","children":[],"call":["hash []= ","attributes [] value ","attributes [] ","id value ","relationship attributes ","relationships inject ","relationship attributes [] value == ","relationship attributes [] value ","relationship attributes [] ","rels_doc xpath select ","rels_doc xpath ","Roo Utils  load_xml remove_namespaces! ","Roo Utils  load_xml ","wb_rels extract "," fail "," ArgumentError ","wb_rels nil? ","e name [] ","e name ","entries find ","relationship attributes  [] value ","relationship attributes  [] ","attributes []  value ","relationship relationship attributes  ","relationship relationship attributes  [] value == ","relationship relationship attributes  [] value ","relationship relationship attributes  [] ","Roo Utils  load_xml remove_namespaces!  xpath select ","Roo Utils  load_xml remove_namespaces!  xpath "]}," Excelx extract_worksheet_ids":{"type":"method","name":"extract_worksheet_ids","children":[],"call":["s attributes [] value ","s attributes [] ","s attributes ","workbook_doc xpath map ","workbook_doc xpath ","Roo Utils  load_xml remove_namespaces! ","Roo Utils  load_xml ","wb extract "," fail "," ArgumentError ","wb nil? ","e name [] ","e name ","entries find ","Roo Utils  load_xml remove_namespaces!  xpath map ","Roo Utils  load_xml remove_namespaces!  xpath "]}," Excelx clean_sheet":{"type":"method","name":"clean_sheet","children":[],"call":["@cleaned []= ","@sheets_by_name [] cells [] value= "," sanitize_value ","value value ","@sheets_by_name [] cells [] ","@sheets_by_name [] cells ","@sheets_by_name [] ","value value is_a? ","@sheets_by_name [] cells each_pair "]}," Excelx each_row_streaming":{"type":"method","name":"each_row_streaming","children":[],"call":[" sheet_for each_row "," sheet_for ","options delete "]}," Excelx empty?":{"type":"method","name":"empty?","children":[],"call":["col > ","sheet last_column ","col < ","sheet first_column ","row > ","sheet last_row ","row < ","sheet first_row ","cell value empty? ","cell value ","cell type == ","cell type ","cell value ! ","cell ! ","sheet cells [] ","sheet cells "," normalize "," sheet_for "," sheet_for  last_column "," sheet_for  first_column "," sheet_for  last_row "," sheet_for  first_row ","sheet cells []  value empty? ","sheet cells []  value ","sheet cells []  type == ","sheet cells []  type ","sheet cells []  value ! ","sheet cells []  ! ","sheet sheet cells [] s [] "," sheet_for  cells [] ","sheet sheet cells [] s "," sheet_for  cells ","  sheet_for _for "]}," Excelx last_column":{"type":"method","name":"last_column","children":[],"call":[" sheet_for last_column "," sheet_for "]}," Excelx first_column":{"type":"method","name":"first_column","children":[],"call":[" sheet_for first_column "," sheet_for "]}," Excelx last_row":{"type":"method","name":"last_row","children":[],"call":[" sheet_for last_row "," sheet_for "]}," Excelx first_row":{"type":"method","name":"first_row","children":[],"call":[" sheet_for first_row "," sheet_for "]}," Excelx sheet_for":{"type":"method","name":"sheet_for","children":[],"call":["@sheets_by_name [] "," validate_sheet! "," default_sheet "]}," Excelx Sheet pad_cells":{"type":"method","name":"pad_cells","children":[],"call":["pad << ","(send\n  (send\n    (send\n      (send\n        (lvar :cell) :coordinate) :column) :-\n    (int 1)) :-\n  (lvar :last_column)) times ","cell coordinate column - - ","cell coordinate column - ","cell coordinate column ","cell coordinate "]}," Excelx Sheet cells_for_row_element":{"type":"method","name":"cells_for_row_element","children":[],"call":["cell coordinate column ","cell coordinate ","cells << ","cells concat "," pad_cells ","options [] ","@sheet each_cell "]}," Excelx Sheet dimensions":{"type":"method","name":"dimensions","children":[],"call":["@sheet dimensions "]}," Excelx Sheet comments":{"type":"method","name":"comments","children":[],"call":["@comments comments "]}," Excelx Sheet hyperlinks":{"type":"method","name":"hyperlinks","children":[],"call":["@sheet hyperlinks "]}," Excelx Sheet excelx_format":{"type":"method","name":"excelx_format","children":[],"call":["@styles style_format to_s ","@styles style_format ","cell style "," cells [] "," cells "," cells []  style ","  cells [] s [] ","  cells [] s "]}," Excelx Sheet last_column":{"type":"method","name":"last_column","children":[],"call":["(send\n  (send\n    (send nil :present_cells) :keys) :map) max "," present_cells keys map "," present_cells keys "," present_cells "]}," Excelx Sheet first_column":{"type":"method","name":"first_column","children":[],"call":["(send\n  (send\n    (send nil :present_cells) :keys) :map) min "," present_cells keys map "," present_cells keys "," present_cells "]}," Excelx Sheet last_row":{"type":"method","name":"last_row","children":[],"call":["(send\n  (send\n    (send nil :present_cells) :keys) :map) max "," present_cells keys map "," present_cells keys "," present_cells "]}," Excelx Sheet first_row":{"type":"method","name":"first_row","children":[],"call":["(send\n  (send\n    (send nil :present_cells) :keys) :map) min "," present_cells keys map "," present_cells keys "," present_cells "]}," Excelx Sheet column":{"type":"method","name":"column","children":[],"call":["cell value ","(send\n  (send\n    (send nil :first_row) :upto\n    (send nil :last_row)) :map) map "," cells [] "," cells "," first_row upto map "," first_row upto "," last_row "," first_row "]}," Excelx Sheet row":{"type":"method","name":"row","children":[],"call":["cell value ","(send\n  (send\n    (send nil :first_column) :upto\n    (send nil :last_column)) :map) map "," cells [] "," cells "," first_column upto map "," first_column upto "," last_column "," first_column "]}," Excelx Sheet each_row":{"type":"method","name":"each_row","children":[],"call":["block call "," cells_for_row_element "," block_given? ","row_count == ","options [] + ","options [] ","@sheet each_row_streaming "]}," Excelx Sheet present_cells":{"type":"method","name":"present_cells","children":[],"call":["cell value "," cells select "," cells "]}," Excelx Sheet cells":{"type":"method","name":"cells","children":[],"call":["@sheet cells "]}," Excelx Sheet initialize":{"type":"method","name":"initialize","children":[],"call":["SheetDoc  new ","Comments  new ","Relationships  new "]}," Excelx Cell round_time_from":{"type":"method","name":"round_time_from","children":[],"call":["Time  new round strftime ","Time  new round ","Time  new ","ss to_r ","mi to_i ","hh to_i ","dd to_i ","mm to_i ","yyyy to_i ","time_part split ","date_part split ","datetime_string split "]}," Excelx Cell create_datetime_from":{"type":"method","name":"create_datetime_from","children":[],"call":["DateTime  civil ","ss to_i ","mi to_i ","hh to_i ","dd to_i ","mm to_i ","yyyy to_i ","time_part split ","date_part split "," round_time_from split "," round_time_from "]}," Excelx Cell type_cast_value":{"type":"method","name":"type_cast_value","children":[],"call":["value to_f * ","24 * * ","24 * ","value to_f "," create_datetime_from ","(send\n  (ivar :@base_date) :+\n  (send\n    (send\n      (lvar :value) :to_f) :round\n    (int 6))) strftime ","@base_date + ","value to_f round ","Date  new ","dd to_i ","mm to_i ","yyyy to_i ","(send\n  (ivar :@base_date) :+\n  (send\n    (lvar :value) :to_i)) strftime split ","(send\n  (ivar :@base_date) :+\n  (send\n    (lvar :value) :to_i)) strftime ","value to_i "]}," Excelx Cell Coordinate initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Excelx Cell type":{"type":"method","name":"type","children":[],"call":["@value is_a? "]}," Excelx Cell initialize":{"type":"method","name":"initialize","children":[],"call":["Roo Link  new ","@value to_s "," type_cast_value ","(sym :date) include? ","Roo Link  new  to_s "," type_cast_value  to_s "]}," Roo Workbook base_date":{"type":"method","name":"base_date","children":[],"call":["Date  new ","workbookPr [] =~ ","workbookPr [] "," doc css each "," doc css "," doc "]}," Roo Workbook defined_names":{"type":"method","name":"defined_names","children":[],"call":["Hash  [] ","Label  new ","defined_name [] ","coordinates split ","defined_name text split ","defined_name text "," doc xpath map "," doc xpath "," doc ","defined_defined_name []  [] ","defined_defined_name []  text split ","defined_defined_name []  text "]}," Roo Workbook sheets":{"type":"method","name":"sheets","children":[],"call":[" doc xpath "," doc "]}," Roo Workbook initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "," doc_exists? ! "," doc_exists? "]}," Roo Workbook Label key":{"type":"method","name":"key","children":[],"call":[]}," Roo Workbook Label initialize":{"type":"method","name":"initialize","children":[],"call":[" Roo Utils  letter_to_number ","row to_i "]}," Roo Styles extract_num_fmts":{"type":"method","name":"extract_num_fmts","children":[],"call":["Hash  [] ","num_fmt [] "," doc xpath map "," doc xpath "," doc "]}," Roo Styles extract_num_fmt_ids":{"type":"method","name":"extract_num_fmt_ids","children":[],"call":["xf [] ","xfs children map ","xfs children "," doc xpath flat_map "," doc xpath "," doc "]}," Roo Styles extract_fonts":{"type":"method","name":"extract_fonts","children":[],"call":["font underline= ","font_el xpath empty? ! ","font_el xpath empty? ","font_el xpath ","font italic= ","font bold= ","Font  new tap ","Font  new "," doc xpath map "," doc xpath "," doc "]}," Roo Styles extract_definitions":{"type":"method","name":"extract_definitions","children":[],"call":[" fonts [] ","xf [] to_i ","xf [] "," fonts ","xfs children map ","xfs children "," doc xpath flat_map "," doc xpath "," doc "]}," Roo Styles fonts":{"type":"method","name":"fonts","children":[],"call":[" extract_fonts "]}," Roo Styles num_fmts":{"type":"method","name":"num_fmts","children":[],"call":[" extract_num_fmts "]}," Roo Styles num_fmt_ids":{"type":"method","name":"num_fmt_ids","children":[],"call":[" extract_num_fmt_ids "]}," Roo Styles definitions":{"type":"method","name":"definitions","children":[],"call":[" extract_definitions "]}," Roo Styles style_format":{"type":"method","name":"style_format","children":[],"call":["Excelx Format STANDARD_FORMATS  [] ","id to_i "," num_fmts [] "," num_fmts "," num_fmt_ids [] ","style to_i "," num_fmt_ids "," num_fmt_ids []  to_i "," num_fmt_ num_fmt_ids [] s [] "," num_fmt_ num_fmt_ids [] s "]}," Roo SheetDoc extract_dimensions":{"type":"method","name":"extract_dimensions","children":[],"call":["dimension attributes [] value ","dimension attributes [] ","dimension attributes ","Roo Utils  each_element "]}," Roo SheetDoc extract_cells":{"type":"method","name":"extract_cells","children":[],"call":[" expand_merged_ranges ","@options [] ","Hash  [] "," cell_from_xml "," hyperlinks [] "," hyperlinks "," Roo Utils  ref_to_key ","cell_xml [] "," doc xpath map "," doc xpath "," doc "," Roo Utils  ref_to_ Roo Utils  ref_to_key  "]}," Roo SheetDoc expand_merged_ranges":{"type":"method","name":"expand_merged_ranges","children":[],"call":["cells []= ","cells [] ","merges each ","merges []= ","col == ","tl [] ","row == ","br [] "," Roo Utils  ref_to_key ","mergecell_xml [] split map ","mergecell_xml [] split ","mergecell_xml [] "," doc xpath each "," doc xpath "," doc "]}," Roo SheetDoc extract_hyperlinks":{"type":"method","name":"extract_hyperlinks","children":[],"call":["Hash  [] ","(send\n  (send\n    (send nil :doc) :xpath\n    (str \"/worksheet/hyperlinks/hyperlink\")) :map) compact ","relationship attribute text ","relationship attribute "," Roo Utils  ref_to_key ","hyperlink attributes [] to_s ","hyperlink attributes [] ","hyperlink attributes ","relationships [] ","hyperlink attribute text ","hyperlink attribute "," doc xpath map "," doc xpath "," doc ","relationships []  attribute text ","relationships []  attribute ","relationships [] s [] "]}," Roo SheetDoc cell_from_xml":{"type":"method","name":"cell_from_xml","children":[],"call":["Excelx Cell  new ","Excelx Cell Coordinate  new ","@workbook base_date ","cell content ","cell content to_f ","cell content to_i == ","cell content to_i ","@shared_strings [] ","format to_s ","(send\n  (send\n    (send\n      (lvar :cell) :content) :to_f) :-\n  (send\n    (send\n      (send\n        (lvar :cell) :content) :to_f) :floor)) abs > ","(send\n  (send\n    (send\n      (lvar :cell) :content) :to_f) :-\n  (send\n    (send\n      (send\n        (lvar :cell) :content) :to_f) :floor)) abs ","cell content to_f - ","cell content to_f floor ","cell content to_f >= ","(sym :time) include? ","inline_str content ","inline_str name == ","inline_str name ","cell children each ","cell children ","cell name ","cell_xml children each ","cell_xml children "," Roo Utils  split_coordinate ","cell_xml [] ","Excelx Format  to_type ","@styles style_format ","cell_xml [] to_i ","@styles style_format  to_s ","@styles style_@styles style_format  ","@cell_xml [] to_i s cell_xml [] to_i _format "]}," Roo SheetDoc each_cell":{"type":"method","name":"each_cell","children":[],"call":[" cell_from_xml "," hyperlinks [] "," hyperlinks "," Roo Utils  ref_to_key ","cell_element [] ","row_xml children each ","row_xml children "," Roo Utils  ref_to_ Roo Utils  ref_to_key  "]}," Roo SheetDoc each_row_streaming":{"type":"method","name":"each_row_streaming","children":[],"call":["Roo Utils  each_element "]}," Roo SheetDoc dimensions":{"type":"method","name":"dimensions","children":[],"call":[" extract_dimensions "]}," Roo SheetDoc hyperlinks":{"type":"method","name":"hyperlinks","children":[],"call":[" extract_hyperlinks "]}," Roo SheetDoc cells":{"type":"method","name":"cells","children":[],"call":[" extract_cells "]}," Roo SheetDoc initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Roo SharedStrings extract_shared_strings":{"type":"method","name":"extract_shared_strings","children":[],"call":["elem content ","shared_string << ","r_elem content ","r_elem name == ","r_elem name ","elem children each ","elem children ","elem name ","si children each ","si children "," doc xpath map "," doc xpath "," doc "," doc_exists? ","elem content  << "]}," Roo SharedStrings to_a":{"type":"method","name":"to_a","children":[],"call":[" extract_shared_strings "]}," Roo SharedStrings []":{"type":"method","name":"[]","children":[],"call":[" to_a [] "," to_a "]}," Roo Relationships extract_relationships":{"type":"method","name":"extract_relationships","children":[],"call":["Hash  [] ","rel attribute text ","rel attribute "," doc xpath map "," doc xpath "," doc "," doc_exists? "]}," Roo Relationships to_a":{"type":"method","name":"to_a","children":[],"call":[" extract_relationships "]}," Roo Relationships []":{"type":"method","name":"[]","children":[],"call":[" to_a [] "," to_a "]}," Roo Extractor doc_exists?":{"type":"method","name":"doc_exists?","children":[],"call":["File  exist? "]}," Roo Extractor doc":{"type":"method","name":"doc","children":[],"call":[" Roo Utils  load_xml remove_namespaces! "," Roo Utils  load_xml "," doc_exists? "]}," Roo Extractor initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Roo Comments extract_comments":{"type":"method","name":"extract_comments","children":[],"call":["Hash  [] "," Roo Utils  ref_to_key ","comment attributes [] to_s ","comment attributes [] ","comment attributes ","(or\n  (send\n    (lvar :comment) :at_xpath\n    (str \"./text/r/t\"))\n  (send\n    (lvar :comment) :at_xpath\n    (str \"./text/t\"))) text ","comment at_xpath "," doc xpath map "," doc xpath "," doc "," doc_exists? "]}," Roo Comments comments":{"type":"method","name":"comments","children":[],"call":[" extract_comments "]}," CSV clean_sheet":{"type":"method","name":"clean_sheet","children":[],"call":["@cleaned []= ","@cell []= "," sanitize_value ","value is_a? ","@cell each_pair "," read_cells "]}," Base find_by_conditions":{"type":"method","name":"find_by_conditions","children":[],"call":["Hash  [] "," cell ","header_for fetch ","1 upto map ","1 upto "," row size "," row ","rows map ","options [] "," cell == ","column_with [] ","conditions all? ","rows select ","header_for invert ","conditions empty? ! ","conditions empty? "," last_column "," first_row upto "," last_row "," first_row ","hash []= ","1 upto each_with_object ","Hash  []  fetch "," first_row upto  map ","header_for invert  [] ","options []  all? "," first_row upto  select ","Hash  []  invert ","options []  empty? ! ","options []  empty? "]}," Base find_by_row":{"type":"method","name":"find_by_row","children":[],"call":[" cell ","cell_index + "," row size times map "," row size times "," row size "," row "," header_line - "," header_line "]}," Base file_type_warning_message":{"type":"method","name":"file_type_warning_message","children":[],"call":[" raise ","File  extname downcase ","File  extname ","Roo CLASS_FOR_EXTENSION  fetch ","ext sub to_sym ","ext sub ","last_ext sub to_sym ","last_ext sub ","rest join ","rest any? "]}," Base local_filename":{"type":"method","name":"local_filename","children":[],"call":[" fail ","File  file? "," unzip ","packed == "," download_uri "," uri? "," is_stream? "]}," Base search_or_set_header":{"type":"method","name":"search_or_set_header","children":[],"call":[" set_headers ","@headers << ","i + "," row each_with_index "," row "," first_row ","(sym :first_row) include? ","options [] "," row_with "]}," Base clean_sheet_if_need":{"type":"method","name":"clean_sheet_if_need","children":[],"call":[" clean_sheet "," default_sheet ","@cleaned [] ","options delete ","options [] "]}," Base cell_type_by_value":{"type":"method","name":"cell_type_by_value","children":[],"call":[" raise "," fail "]}," Base inspect":{"type":"method","name":"inspect","children":[],"call":[" instance_variables join "," instance_variables "," object_id to_s "," object_id "," class "]}," Base collect_last_row_col_for_sheet":{"type":"method","name":"collect_last_row_col_for_sheet","children":[],"call":["(lvar :last_column) max ","key last to_i ","key last ","(lvar :first_column) min ","(lvar :last_row) max ","key first to_i ","key first ","(lvar :first_row) min ","@cell [] each_pair ","@cell [] ","(lvar :(lvar :last_column) max ) max ","(lvar :(lvar :first_column) min ) min ","(lvar :(lvar :last_row) max ) max ","(lvar :(lvar :first_row) min ) min "]}," Base first_last_row_col_for_sheet":{"type":"method","name":"first_last_row_col_for_sheet","children":[],"call":["result [] ","result [] == "," collect_last_row_col_for_sheet ","@first_last_row_cols [] "," collect_last_row_col_for_sheet  [] "," collect_last_row_col_for_sheet  [] == "]}," Base default_sheet":{"type":"method","name":"default_sheet","children":[],"call":[" sheets first "," sheets "]}," Roo Excelx safe_send":{"type":"method","name":"safe_send","children":[],"call":["object send ","object respond_to? "]}," Roo Excelx workbook":{"type":"method","name":"workbook","children":[],"call":["Workbook  new ","File  join "]}," Roo Excelx shared_strings":{"type":"method","name":"shared_strings","children":[],"call":["SharedStrings  new ","File  join "]}," Roo Excelx styles":{"type":"method","name":"styles","children":[],"call":["Styles  new ","File  join "]}," Roo Excelx process_zipfile_entries":{"type":"method","name":"process_zipfile_entries","children":[],"call":["entry extract ","@rels_files []= ","nr - ","Regexp  last_match [] to_i ","Regexp  last_match [] ","Regexp  last_match ","@comments_files []= ","entry name downcase ","entry name ","entries each "," extract_sheets_in_order "," extract_worksheet_rels "," extract_worksheet_ids "," image_rels []= "," image_rels "," rels_files []= "," rels_files "," comments_files []= "," comments_files "," extract_images ","Regexp  last_match [] to_i  - "," extract_ extract_worksheet_rels _in_order "," extract_work extract_worksheet_ids  "]}," Roo Excelx process_zipfile":{"type":"method","name":"process_zipfile","children":[],"call":[" process_zipfile_entries ","Zip File  open to_a sort_by ","Zip File  open to_a ","Zip File  open ","stream close ","entries << ","stream get_next_entry ","Zip InputStream  open "," is_stream? ","zip_file to_a sort_by ","zip_file to_a ","zip_file read_from_stream ","Zip CentralDirectory  new ","Zip InputStream  open  close ","stream get_next_stream get_next_entry  ","Zip InputStream  open  get_next_entry "," is_Zip InputStream  open ? ","Zip File  open  to_a sort_by ","Zip CentralDirectory  new  to_a sort_by ","Zip File  open  to_a ","Zip CentralDirectory  new  to_a ","zip_file read_from_Zip InputStream  open  ","Zip File  open  read_from_stream ","Zip CentralDirectory  new  read_from_stream "]}," Roo Excelx extract_sheets_in_order":{"type":"method","name":"extract_sheets_in_order","children":[],"call":["entry extract ","@sheet_files << ","i + ","e name =~ ","e name ","entries find ","sheets [] ","sheet_ids each_with_index "," sheet_files << "," sheet_files ","(str \"/\") =~ ","(send\n  (lvar :sheet_ids) :&\n  (send\n    (lvar :sheets) :keys)) each_with_index ","sheet_ids & ","sheets keys ","e sheets []  =~ ","e sheets []  "]}," Roo Excelx extract_worksheet_rels":{"type":"method","name":"extract_worksheet_rels","children":[],"call":["hash []= ","attributes [] value ","attributes [] ","id value ","relationship attributes ","relationships inject ","relationship attributes [] value == ","relationship attributes [] value ","relationship attributes [] ","rels_doc xpath select ","rels_doc xpath ","Roo Utils  load_xml remove_namespaces! ","Roo Utils  load_xml ","wb_rels extract "," fail "," ArgumentError ","wb_rels nil? ","e name [] ","e name ","entries find ","relationship [] ","relationships each_with_object "," worksheet_types include? "," worksheet_types ","relationship attributes  [] value ","relationship attributes  [] ","attributes []  value ","relationship relationship attributes  ","relationship relationship attributes  [] value == ","relationship relationship attributes  [] value ","relationship relationship attributes  [] ","Roo Utils  load_xml remove_namespaces!  xpath select ","Roo Utils  load_xml remove_namespaces!  xpath "]}," Roo Excelx extract_worksheet_ids":{"type":"method","name":"extract_worksheet_ids","children":[],"call":["s attributes [] value ","s attributes [] ","s attributes ","workbook_doc xpath map ","workbook_doc xpath ","Roo Utils  load_xml remove_namespaces! ","Roo Utils  load_xml ","wb extract "," fail "," ArgumentError ","wb nil? ","e name [] ","e name ","entries find ","s [] ","Roo Utils  load_xml remove_namespaces!  xpath map ","Roo Utils  load_xml remove_namespaces!  xpath "]}," Roo Excelx clean_sheet":{"type":"method","name":"clean_sheet","children":[],"call":["@cleaned []= ","@sheets_by_name [] cells [] value= "," sanitize_value ","value value ","@sheets_by_name [] cells [] ","@sheets_by_name [] cells ","@sheets_by_name [] ","value value is_a? ","@sheets_by_name [] cells each_pair "]}," Roo Excelx each_row_streaming":{"type":"method","name":"each_row_streaming","children":[],"call":[" sheet_for each_row "," sheet_for ","options delete ","sheet to_enum ","sheet each_row "," block_given? ","  sheet_for _for each_row ","  sheet_for _for "," sheet_for  to_enum "," sheet_for  each_row "]}," Roo Excelx comments":{"type":"method","name":"comments","children":[],"call":[" sheet_for comments map "," sheet_for comments "," sheet_for "]}," Roo Excelx comment?":{"type":"method","name":"comment?","children":[],"call":[" comment ! ! "," comment ! "," comment "]}," Roo Excelx comment":{"type":"method","name":"comment","children":[],"call":[" sheet_for comments [] "," sheet_for comments "," sheet_for "," normalize "]}," Roo Excelx hyperlink":{"type":"method","name":"hyperlink","children":[],"call":[" sheet_for hyperlinks [] "," sheet_for hyperlinks "," sheet_for "," normalize "]}," Roo Excelx hyperlink?":{"type":"method","name":"hyperlink?","children":[],"call":[" hyperlink ! ! "," hyperlink ! "," hyperlink "]}," Roo Excelx labels":{"type":"method","name":"labels","children":[],"call":["label sheet ","label col ","label row "," workbook defined_names map "," workbook defined_names "," workbook "]}," Roo Excelx label":{"type":"method","name":"label","children":[],"call":["labels [] sheet ","labels [] ","labels [] col ","labels [] row ","labels key? ! ","labels key? ","labels empty? "," workbook defined_names "," workbook "," workbook defined_names  [] sheet "," workbook defined_names  [] "," workbook defined_names  [] col "," workbook defined_names  [] row "," workbook defined_names  key? ! "," workbook defined_names  key? "," workbook defined_names  empty? "]}," Roo Excelx to_s":{"type":"method","name":"to_s","children":[],"call":[" sheet_for cells inspect "," sheet_for cells "," sheet_for "]}," Roo Excelx empty?":{"type":"method","name":"empty?","children":[],"call":["col > ","sheet last_column ","col < ","sheet first_column ","row > ","sheet last_row ","row < ","sheet first_row ","cell value empty? ","cell value ","cell type == ","cell type ","cell value ! ","cell ! ","sheet cells [] ","sheet cells "," normalize "," sheet_for ","cell empty? "," sheet_for  last_column "," sheet_for  first_column "," sheet_for  last_row "," sheet_for  first_row ","sheet cells []  value empty? ","sheet cells []  value ","sheet cells []  type == ","sheet cells []  type ","sheet cells []  value ! ","sheet cells []  ! ","sheet sheet cells [] s [] "," sheet_for  cells [] ","sheet sheet cells [] s "," sheet_for  cells ","  sheet_for _for ","sheet cells []  empty? "]}," Roo Excelx excelx_format":{"type":"method","name":"excelx_format","children":[],"call":[" sheet_for excelx_format "," sheet_for "," normalize "]}," Roo Excelx excelx_value":{"type":"method","name":"excelx_value","children":[],"call":[" safe_send "," sheet_for cells [] "," sheet_for cells "," sheet_for "," normalize "]}," Roo Excelx excelx_type":{"type":"method","name":"excelx_type","children":[],"call":[" safe_send "," sheet_for cells [] "," sheet_for cells "," sheet_for "," normalize "]}," Roo Excelx celltype":{"type":"method","name":"celltype","children":[],"call":[" safe_send "," sheet_for cells [] "," sheet_for cells "," sheet_for "," normalize "]}," Roo Excelx font":{"type":"method","name":"font","children":[],"call":[" styles definitions [] "," styles definitions "," styles "," safe_send "," sheet_for cells [] "," sheet_for cells "," sheet_for "," normalize "]}," Roo Excelx formulas":{"type":"method","name":"formulas","children":[],"call":["cell formula ","(send\n  (send\n    (send nil :sheet_for\n      (lvar :sheet)) :cells) :select) map "," sheet_for cells select "," sheet_for cells "," sheet_for "]}," Roo Excelx formula?":{"type":"method","name":"formula?","children":[],"call":[" formula ! ! "," formula ! "," formula "]}," Roo Excelx formula":{"type":"method","name":"formula","children":[],"call":[" safe_send "," sheet_for cells [] "," sheet_for cells "," sheet_for "," normalize "]}," Roo Excelx set":{"type":"method","name":"set","children":[],"call":[" sheet_for cells []= ","Cell  new ","Cell Coordinate  new "," sheet_for cells "," sheet_for "," cell_type_by_value "," normalize ","Coordinate  new ","  cell_type_by_value _by_value "]}," Roo Excelx last_column":{"type":"method","name":"last_column","children":[],"call":[" sheet_for last_column "," sheet_for "]}," Roo Excelx first_column":{"type":"method","name":"first_column","children":[],"call":[" sheet_for first_column "," sheet_for "]}," Roo Excelx last_row":{"type":"method","name":"last_row","children":[],"call":[" sheet_for last_row "," sheet_for "]}," Roo Excelx first_row":{"type":"method","name":"first_row","children":[],"call":[" sheet_for first_row "," sheet_for "]}," Roo Excelx column":{"type":"method","name":"column","children":[],"call":[" sheet_for column "," sheet_for "," Roo Utils  letter_to_number ","column_number is_a? "," Roo Utils  letter_to_number  is_a? "]}," Roo Excelx row":{"type":"method","name":"row","children":[],"call":[" sheet_for row "," sheet_for "]}," Roo Excelx cell":{"type":"method","name":"cell","children":[],"call":[" safe_send "," sheet_for cells [] "," sheet_for cells "," sheet_for "," normalize "]}," Roo Excelx sheet_for":{"type":"method","name":"sheet_for","children":[],"call":["@sheets_by_name [] "," validate_sheet! "," default_sheet ","@sheets [] "]}," Roo Excelx sheets":{"type":"method","name":"sheets","children":[],"call":[]}," Roo Excelx method_missing":{"type":"method","name":"method_missing","children":[],"call":[" safe_send "," sheet_for cells [] ","label key "," sheet_for cells "," sheet_for ","label sheet "," workbook defined_names [] ","method to_s "," workbook defined_names "," workbook "," workbook defined_names []  key "," workbook defined_names []  sheet "]}," Roo Excelx initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "," close ","ExceedsMaxError  new ","cell_count > "," Roo Utils  num_cells_in_range "," sheet_for dimensions "," sheet_for ","options delete ","Hash  [] ","@sheets [] ","@sheets []= ","Sheet  new "," workbook "," shared_strings "," styles ","@comments_files [] ","@sheet_files [] ","@rels_files [] ","@sheet_names map with_index ","@sheet_names map ","(send\n  (send\n    (send nil :workbook) :sheets) :map) compact ","sheet [] ","sheet [] == ","options [] "," workbook sheets map "," workbook sheets "," process_zipfile "," local_filename "," make_tmpdir ","File  basename "," file_type_check "," is_stream? ","sheet_options []= ","options fetch "," class finalize_tempdirs "," object_id "," class ","@sheets_by_name []= ","@sheet_names << "," workbook sheets each_with_index ","Shared  new ","ObjectSpace  define_finalizer "," class finalize "," class make_tempdir "," find_basename ","shared_options []= ","@sheet_names each_with_index "," Roo Utils  num_cells_in_range  > ","(send\n  (send\n    (send nil :workbook) :sheets) :map) compact  map with_index ","@sheet [] s map with_index ","(send\n  (send\n    (send nil :workbook) :sheets) :map) compact  map ","@sheet [] s map ","File  File  basename  ","File   find_basename  ","Hash  []  []= ","(send\n  (send\n    (send nil :workbook) :sheets) :map) compact  << ","@sheet [] s << "," find_File  basename  "," find_ find_basename  ","(send\n  (send\n    (send nil :workbook) :sheets) :map) compact  each_with_index ","@sheet [] s each_with_index "]}," Roo Excelx Format to_type":{"type":"method","name":"to_type","children":[],"call":["format include? ","format match nil? ! ","format match nil? ","format match ","EXCEPTIONAL_FORMATS  [] ","format to_s downcase ","format to_s "," _to_type ","@to_type [] ","format to_s downcase  include? ","format to_s downcase  match nil? ! ","format to_s downcase  match nil? ","format to_s downcase  match ","format to_s downcase  to_s downcase ","format to_s downcase  to_s "," _to_EXCEPTIONAL_FORMATS  []  ","@to_EXCEPTIONAL_FORMATS  []  [] "]}," Roo Excelx Workbook base_date":{"type":"method","name":"base_date","children":[],"call":["Date  new ","workbookPr [] =~ ","workbookPr [] "," doc css each "," doc css "," doc "]}," Roo Excelx Workbook defined_names":{"type":"method","name":"defined_names","children":[],"call":["Hash  [] ","Label  new ","defined_name [] ","coordinates split ","defined_name text split ","defined_name text "," doc xpath map "," doc xpath "," doc ","hash []= "," doc xpath each_with_object ","defined_defined_name []  [] ","defined_defined_name []  text split ","defined_defined_name []  text "]}," Roo Excelx Workbook sheets":{"type":"method","name":"sheets","children":[],"call":[" doc xpath "," doc "]}," Roo Excelx Workbook initialize":{"type":"method","name":"initialize","children":[],"call":[" fail "," doc_exists? "]}," Roo Excelx Workbook Label key":{"type":"method","name":"key","children":[],"call":[]}," Roo Excelx Workbook Label initialize":{"type":"method","name":"initialize","children":[],"call":[" Roo Utils  letter_to_number ","row to_i "]}," Roo Excelx Styles extract_num_fmts":{"type":"method","name":"extract_num_fmts","children":[],"call":["Hash  [] ","num_fmt [] "," doc xpath map "," doc xpath "," doc ","hash []= "," doc xpath each_with_object "]}," Roo Excelx Styles extract_num_fmt_ids":{"type":"method","name":"extract_num_fmt_ids","children":[],"call":["xf [] ","xfs children map ","xfs children "," doc xpath flat_map "," doc xpath "," doc ","(send\n  (send\n    (send nil :doc) :xpath\n    (str \"//cellXfs\")) :flat_map) compact "]}," Roo Excelx Styles extract_fonts":{"type":"method","name":"extract_fonts","children":[],"call":["font underline= ","font_el xpath empty? ! ","font_el xpath empty? ","font_el xpath ","font italic= ","font bold= ","Font  new tap ","Font  new "," doc xpath map "," doc xpath "," doc "]}," Roo Excelx Styles extract_definitions":{"type":"method","name":"extract_definitions","children":[],"call":[" fonts [] ","xf [] to_i ","xf [] "," fonts ","xfs children map ","xfs children "," doc xpath flat_map "," doc xpath "," doc "]}," Roo Excelx Styles fonts":{"type":"method","name":"fonts","children":[],"call":[" extract_fonts "]}," Roo Excelx Styles num_fmts":{"type":"method","name":"num_fmts","children":[],"call":[" extract_num_fmts "]}," Roo Excelx Styles num_fmt_ids":{"type":"method","name":"num_fmt_ids","children":[],"call":[" extract_num_fmt_ids "]}," Roo Excelx Styles definitions":{"type":"method","name":"definitions","children":[],"call":[" extract_definitions "]}," Roo Excelx Styles style_format":{"type":"method","name":"style_format","children":[],"call":["Excelx Format STANDARD_FORMATS  [] ","id to_i "," num_fmts [] "," num_fmts "," num_fmt_ids [] ","style to_i "," num_fmt_ids "," num_fmt_ids []  to_i "," num_fmt_ num_fmt_ids [] s [] "," num_fmt_ num_fmt_ids [] s "]}," Roo Excelx SheetDoc extract_dimensions":{"type":"method","name":"extract_dimensions","children":[],"call":["dimension attributes [] value ","dimension attributes [] ","dimension attributes ","Roo Utils  each_element ","dimension [] "]}," Roo Excelx SheetDoc extract_cells":{"type":"method","name":"extract_cells","children":[],"call":[" expand_merged_ranges ","@options [] ","Hash  [] "," cell_from_xml "," hyperlinks [] "," hyperlinks "," Roo Utils  ref_to_key ","cell_xml [] "," doc xpath map "," doc xpath "," doc ","extracted_cells []= "," Roo Utils  extract_coordinate "," Roo Excelx Coordinate  new ","r nil? ","row_xml xpath each with_index ","row_xml xpath each ","row_xml xpath "," doc xpath each with_index "," doc xpath each "," expand_mecell_xml [] ged_cell_xml [] anges ","  cell_from_xml _from_xml "," cell_fcell_xml [] om_xml "," hypecell_xml [] links [] "," hypecell_xml [] links "," Roo Utils  ref_to_ Roo Utils  ref_to_key  "," Roo Utils  cell_xml [] ef_to_key "," cell_from_xml _xml [] ","Hash  []  []= ","extracted_ cell_from_xml s []= ","extcell_xml [] acted_cells []= "," Roo Utils  extract_ Roo Utils  extract_coordinate  "," Roo Utils  extract_ Roo Excelx Coordinate  new  "," Roo Utils  extcell_xml [] act_coocell_xml [] dinate "," Roo Excelx Coocell_xml [] dinate  new ","cell_xml []  nil? ","cell_xml [] ow_xml xpath each with_index ","cell_xml [] ow_xml xpath each ","cell_xml [] ow_xml xpath "]}," Roo Excelx SheetDoc expand_merged_ranges":{"type":"method","name":"expand_merged_ranges","children":[],"call":["cells []= ","cells [] ","merges each ","merges []= ","col == ","tl [] ","row == ","br [] "," Roo Utils  ref_to_key ","mergecell_xml [] split map ","mergecell_xml [] split ","mergecell_xml [] "," doc xpath each "," doc xpath "," doc ","src [] ","dst [] "]}," Roo Excelx SheetDoc extract_hyperlinks":{"type":"method","name":"extract_hyperlinks","children":[],"call":["Hash  [] ","(send\n  (send\n    (send nil :doc) :xpath\n    (str \"/worksheet/hyperlinks/hyperlink\")) :map) compact ","relationship attribute text ","relationship attribute "," Roo Utils  ref_to_key ","hyperlink attributes [] to_s ","hyperlink attributes [] ","hyperlink attributes ","relationships [] ","hyperlink attribute text ","hyperlink attribute "," doc xpath map "," doc xpath "," doc ","hash []= ","Roo Utils  coordinates_in_range ","hyperlink [] to_s ","hyperlink [] ","relationship [] ","hyperlinks each_with_object ","(send\n  (lvar :hyperlinks) :map) compact ","hyperlinks map ","(send\n  (send\n    (send nil :doc) :xpath\n    (str \"/worksheet/ doc xpath /hyperlink\")) :map) compact ","relationships []  attribute text ","relationships []  attribute ","relationships [] s [] ","relationships []  [] "," doc xpath  each_with_object ","(send\n  (lvar : doc xpath ) :map) compact "," doc xpath  map "]}," Roo Excelx SheetDoc cell_from_xml":{"type":"method","name":"cell_from_xml","children":[],"call":["Excelx Cell  new ","Excelx Cell Coordinate  new ","@workbook base_date ","cell content ","cell content to_f ","cell content to_i == ","cell content to_i ","@shared_strings [] ","format to_s ","(send\n  (send\n    (send\n      (lvar :cell) :content) :to_f) :-\n  (send\n    (send\n      (send\n        (lvar :cell) :content) :to_f) :floor)) abs > ","(send\n  (send\n    (send\n      (lvar :cell) :content) :to_f) :-\n  (send\n    (send\n      (send\n        (lvar :cell) :content) :to_f) :floor)) abs ","cell content to_f - ","cell content to_f floor ","cell content to_f >= ","(sym :time) include? ","inline_str content ","inline_str name == ","inline_str name ","cell children each ","cell children ","cell name ","cell_xml children each ","cell_xml children "," Roo Utils  split_coordinate ","cell_xml [] ","Excelx Format  to_type ","@styles style_format ","cell_xml [] to_i "," create_empty_cell "," create_cell_from_value "," cell_value_type "," style_format ","Excelx Cell  cell_class new ","Excelx Cell  cell_class ","content empty? ","cell search map join ","cell search map ","cell search ","cell_xml_children each ","cell_xml_children empty? "," Roo Utils  extract_coordinate "," base_date ","Excelx Cell  create_cell "," styles style_format "," styles ","Excelx Cell Empty  new ","cell_xml children empty? "," extract_coordinate ","content_arr join ","content_arr empty? ","content << "," +@ ","cell cell search map join  ","cell  +@  ","cell cell search map join  to_f ","cell  +@  to_f ","cell cell search map join  to_i == ","cell  +@  to_i == ","cell cell search map join  to_i ","cell  +@  to_i ","@styles style_format  to_s "," style_format  to_s "," styles style_format  to_s ","(send\n  (send\n    (send\n      (lvar :cell) :cell search map join ) :to_f) :-\n  (send\n    (send\n      (send\n        (lvar :cell) :cell search map join ) :to_f) :floor)) abs > ","(send\n  (send\n    (send\n      (lvar :cell) : +@ ) :to_f) :-\n  (send\n    (send\n      (send\n        (lvar :cell) : +@ ) :to_f) :floor)) abs > ","(send\n  (send\n    (send\n      (lvar :cell) :cell search map join ) :to_f) :-\n  (send\n    (send\n      (send\n        (lvar :cell) :cell search map join ) :to_f) :floor)) abs ","(send\n  (send\n    (send\n      (lvar :cell) : +@ ) :to_f) :-\n  (send\n    (send\n      (send\n        (lvar :cell) : +@ ) :to_f) :floor)) abs ","cell cell search map join  to_f - ","cell  +@  to_f - ","cell cell search map join  to_f floor ","cell  +@  to_f floor ","cell cell search map join  to_f >= ","cell  +@  to_f >= ","inline_str cell search map join  ","inline_str  +@  "," Roo Utils  split_ extract_coordinate  ","@styles style_@styles style_format  ","@styles style_ style_format  ","@styles style_ styles style_format  ","@cell_xml [] to_i s cell_xml [] to_i _format "," cell_ cell_value_type  "," style_@styles style_format  "," style_ style_format  "," style_ styles style_format  "," cell_xml [] to_i _format ","cell search map join  empty? "," +@  empty? ","cell_xml children  each ","cell_xml children  empty? "," Roo Utils  extract_ extract_coordinate  "," styles style_@styles style_format  "," styles style_ style_format  "," styles style_ styles style_format  "," cell_xml [] to_i s cell_xml [] to_i _format "," cell_xml [] to_i s "," extract_ extract_coordinate  ","cell search map join _arr join "," +@ _arr join ","cell search map  join ","cell search map join _arr empty? "," +@ _arr empty? ","cell search map  empty? ","cell search map join  << "," +@  << "]}," Roo Excelx SheetDoc each_cell":{"type":"method","name":"each_cell","children":[],"call":[" cell_from_xml "," hyperlinks [] "," hyperlinks "," Roo Utils  ref_to_key ","cell_element [] ","row_xml children each ","row_xml children "," Roo Utils  extract_coordinate ","@options [] ","  hyperlinks []  [] ","  hyperlinks []  "," Roo Utils  ref_to_ Roo Utils  ref_to_key  "," Roo Utils  extract_ Roo Utils  extract_coordinate  "]}," Roo Excelx SheetDoc each_row_streaming":{"type":"method","name":"each_row_streaming","children":[],"call":["Roo Utils  each_element "]}," Roo Excelx SheetDoc dimensions":{"type":"method","name":"dimensions","children":[],"call":[" extract_dimensions "]}," Roo Excelx SheetDoc hyperlinks":{"type":"method","name":"hyperlinks","children":[],"call":[" extract_hyperlinks ","relationships include_type? ! ","relationships include_type? ","@options [] "]}," Roo Excelx SheetDoc cells":{"type":"method","name":"cells","children":[],"call":[" extract_cells "]}," Roo Excelx SheetDoc initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Roo Excelx Sheet pad_cells":{"type":"method","name":"pad_cells","children":[],"call":["pad << ","(send\n  (send\n    (send\n      (send\n        (lvar :cell) :coordinate) :column) :-\n    (int 1)) :-\n  (lvar :last_column)) times ","cell coordinate column - - ","cell coordinate column - ","cell coordinate column ","cell coordinate "]}," Roo Excelx Sheet cells_for_row_element":{"type":"method","name":"cells_for_row_element","children":[],"call":["cell coordinate column ","cell coordinate ","cells << ","cells concat "," pad_cells ","options [] ","@sheet each_cell "]}," Roo Excelx Sheet dimensions":{"type":"method","name":"dimensions","children":[],"call":["@sheet dimensions "]}," Roo Excelx Sheet comments":{"type":"method","name":"comments","children":[],"call":["@comments comments "]}," Roo Excelx Sheet hyperlinks":{"type":"method","name":"hyperlinks","children":[],"call":["@sheet hyperlinks "]}," Roo Excelx Sheet excelx_format":{"type":"method","name":"excelx_format","children":[],"call":["@styles style_format to_s ","@styles style_format ","cell style "," cells [] "," cells "," styles style_format to_s "," styles style_format "," styles "," cells []  style ","  cells [] s [] ","  cells [] s "]}," Roo Excelx Sheet last_column":{"type":"method","name":"last_column","children":[],"call":["(send\n  (send\n    (send nil :present_cells) :keys) :map) max "," present_cells keys map "," present_cells keys "," present_cells "," first_last_row_col [] "," first_last_row_col "]}," Roo Excelx Sheet first_column":{"type":"method","name":"first_column","children":[],"call":["(send\n  (send\n    (send nil :present_cells) :keys) :map) min "," present_cells keys map "," present_cells keys "," present_cells "," first_last_row_col [] "," first_last_row_col "]}," Roo Excelx Sheet last_row":{"type":"method","name":"last_row","children":[],"call":["(send\n  (send\n    (send nil :present_cells) :keys) :map) max "," present_cells keys map "," present_cells keys "," present_cells "," first_last_row_col [] "," first_last_row_col "]}," Roo Excelx Sheet first_row":{"type":"method","name":"first_row","children":[],"call":["(send\n  (send\n    (send nil :present_cells) :keys) :map) min "," present_cells keys map "," present_cells keys "," present_cells "," first_last_row_col [] "," first_last_row_col "]}," Roo Excelx Sheet column":{"type":"method","name":"column","children":[],"call":["cell value ","(send\n  (send\n    (send nil :first_row) :upto\n    (send nil :last_row)) :map) map "," cells [] "," cells "," first_row upto map "," first_row upto "," last_row "," first_row "]}," Roo Excelx Sheet row":{"type":"method","name":"row","children":[],"call":["cell value ","(send\n  (send\n    (send nil :first_column) :upto\n    (send nil :last_column)) :map) map "," cells [] "," cells "," first_column upto map "," first_column upto "," last_column "," first_column "]}," Roo Excelx Sheet each_row":{"type":"method","name":"each_row","children":[],"call":["block call "," cells_for_row_element ","(and\n  (send\n    (lvar :options) :[]\n    (sym :offset))\n  (send\n    (lvar :row_count) :<\n    (send\n      (lvar :options) :[]\n      (sym :offset)))) ! ","row_count < ","options [] "," block_given? ","row_count == ","options [] + + ","options [] + ","@sheet each_row_streaming "]}," Roo Excelx Sheet present_cells":{"type":"method","name":"present_cells","children":[],"call":["cell value "," cells select "," cells "," warn ","cell empty? ! ","cell empty? "]}," Roo Excelx Sheet cells":{"type":"method","name":"cells","children":[],"call":["@sheet cells "]}," Roo Excelx Sheet initialize":{"type":"method","name":"initialize","children":[],"call":["SheetDoc  new ","Comments  new ","Relationships  new "," sheet_files [] "," sheet_files "," comments_files [] "," comments_files "," rels_files [] "," rels_files ","Images  new list ","Images  new "," image_rels [] "," image_rels "]}," Roo Excelx SharedStrings extract_shared_strings":{"type":"method","name":"extract_shared_strings","children":[],"call":["elem content ","shared_string << ","r_elem content ","r_elem name == ","r_elem name ","elem children each ","elem children ","elem name ","si children each ","si children "," doc xpath map "," doc xpath "," doc "," doc_exists? "," fix_invalid_shared_strings "," +@ ","document xpath map ","document xpath ","elem content  << "," +@  << "," fix_invalid_elem content s "," fix_invalid_ +@ s "," fix_invalid_shared_strings  xpath map "," fix_invalid_shared_strings  xpath "]}," Roo Excelx SharedStrings to_a":{"type":"method","name":"to_a","children":[],"call":[" extract_shared_strings "]}," Roo Excelx SharedStrings []":{"type":"method","name":"[]","children":[],"call":[" to_a [] "," to_a "]}," Roo Excelx Relationships extract_relationships":{"type":"method","name":"extract_relationships","children":[],"call":["Hash  [] ","rel attribute text ","rel attribute "," doc xpath map "," doc xpath "," doc "," doc_exists? ","hash []= ","rel [] "," doc xpath each_with_object "]}," Roo Excelx Relationships to_a":{"type":"method","name":"to_a","children":[],"call":[" extract_relationships "]}," Roo Excelx Relationships []":{"type":"method","name":"[]","children":[],"call":[" to_a [] "," to_a "]}," Roo Excelx Extractor doc_exists?":{"type":"method","name":"doc_exists?","children":[],"call":["File  exist? "]}," Roo Excelx Extractor doc":{"type":"method","name":"doc","children":[],"call":[" Roo Utils  load_xml remove_namespaces! "," Roo Utils  load_xml "," doc_exists? "," raise "," instance_cache "]}," Roo Excelx Extractor initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Roo Excelx Comments extract_comments":{"type":"method","name":"extract_comments","children":[],"call":["Hash  [] "," Roo Utils  ref_to_key ","comment attributes [] to_s ","comment attributes [] ","comment attributes ","(or\n  (send\n    (lvar :comment) :at_xpath\n    (str \"./text/r/t\"))\n  (send\n    (lvar :comment) :at_xpath\n    (str \"./text/t\"))) text ","comment at_xpath "," doc xpath map "," doc xpath "," doc "," doc_exists? ","hash []= ","comment [] to_s ","comment [] "," doc xpath each_with_object "]}," Roo Excelx Comments comments":{"type":"method","name":"comments","children":[],"call":[" extract_comments "]}," Roo Excelx Cell round_datetime":{"type":"method","name":"round_datetime","children":[],"call":["Time  new round ","Time  new ","ss to_r ","mi to_i ","hh to_i ","dd to_i ","mm to_i ","yyyy to_i "," Time  new round "," Time  new "]}," Roo Excelx Cell create_datetime":{"type":"method","name":"create_datetime","children":[],"call":["DateTime  civil ","t sec ","t min ","t hour ","t day ","t month ","t year "," round_datetime ","date strftime "," DateTime  civil ","Da round_datetime eTime  civil "," round_datetime  sec "," round_datetime  min "," round_datetime  hour "," round_datetime  day "," round_datetime  mon round_datetime h "," round_datetime  year "," round_da round_datetime e round_datetime ime ","da round_datetime e s round_datetime rf round_datetime ime "," Da round_datetime eTime  civil "]}," Roo Excelx Cell create_date":{"type":"method","name":"create_date","children":[],"call":["Date  new ","dd to_i ","mm to_i ","yyyy to_i ","date strftime split ","date strftime "," Date  new "]}," Roo Excelx Cell type_cast_value":{"type":"method","name":"type_cast_value","children":[],"call":["value to_f * ","value to_f "," create_datetime ","@base_date + ","value to_f round "," create_date ","value to_i "]}," Roo Excelx Cell Coordinate initialize":{"type":"method","name":"initialize","children":[],"call":[" warn "]}," Roo Excelx Cell type":{"type":"method","name":"type","children":[],"call":["@value is_a? "]}," Roo Excelx Cell initialize":{"type":"method","name":"initialize","children":[],"call":["Roo Link  new ","@value to_s "," type_cast_value ","(sym :date) include? "," warn ","Roo Link  new  to_s "," type_cast_value  to_s "]}," Base track_tmpdir!":{"type":"method","name":"track_tmpdir!","children":[],"call":["(or-asgn\n  (ivasgn :@tmpdirs)\n  (array)) << "]}," Base is_stream?":{"type":"method","name":"is_stream?","children":[],"call":["filename_or_stream respond_to? "]}," Base close":{"type":"method","name":"close","children":[],"call":[" FileUtils  remove_entry ","@tmpdirs each "," instance_variable_set "," instance_variables each "," instance_variables "," class finalize_tempdirs "," object_id "," class "," class respond_to? "]}," Roo OpenOffice attribute":{"type":"method","name":"attribute","children":[],"call":["node attributes [] value ","node attributes [] ","node attributes "]}," Roo OpenOffice children_to_string":{"type":"method","name":"children_to_string","children":[],"call":["(send\n  (lvar :children) :map) join ","child content ","  * ","compressed_spaces == ","child attributes [] to_s to_i ","child attributes [] to_s ","child attributes [] ","child attributes ","child name == ","child name ","child text? ","children map ","child attributes [] to_s to_i  == "]}," Roo OpenOffice read_table_styles":{"type":"method","name":"read_table_styles","children":[],"call":["@table_display []= ","display == "," attribute ","style children each ","style children ","style name == ","style name ","styles children each ","styles children ","@table_ attribute  []= "," attribute  == "]}," Roo OpenOffice read_styles":{"type":"method","name":"read_styles","children":[],"call":["@font_style_definitions []= ","font underline= "," attribute ","font italic= ","font bold= ","Roo OpenOffice Font  new ","style each ","style name == ","style name ","style_elements each ","Roo Font  new ","@Roo OpenOffice Font  new _style_definitions []= ","Roo OpenOffice Font  new  underline= ","Roo OpenOffice Font  new  italic= ","Roo OpenOffice Font  new  bold= "]}," Roo OpenOffice read_labels":{"type":"method","name":"read_labels","children":[],"call":["Hash  [] ","sheetname [] ","sheetname [] == ","coords split "," attribute to_s split "," attribute to_s "," attribute "," doc xpath map "," doc xpath "," doc ","hash []= "," doc xpath each_with_object ","sheetname []  [] ","sheet attribute to_s  [] ","sheetname []  [] == ","sheet attribute to_s  [] == "]}," Roo OpenOffice read_comments":{"type":"method","name":"read_comments","children":[],"call":[" read_cells "]}," Roo OpenOffice read_cells":{"type":"method","name":"read_cells","children":[],"call":["@comments_read []= ","@cells_read []= "," fail "," read_styles "," doc xpath each "," doc xpath "," doc "," set_cell_values ","skip_col to_i - ","skip_col to_i ","0 upto ","cell attributes [] ","cell attributes ","v nil? ! ","v nil? "," attribute to_s "," attribute ","str content ","str name == ","str name ","cell children each ","cell children ","CGI  unescapeHTML ","str_v gsub! ","child content ","str children each ","str children "," children_to_string ","str children size > ","str children size ","para_count > ","@comment [] []= ","annotation text ","@comment [] ","@comment []= ","Hash  new ","annotation name == ","annotation name ","table_element children each ","table_element children ","row + - ","row + "," attribute to_s to_i ","table_element attributes [] ","table_element attributes ","@style_defaults [] << ","@style_defaults [] ","table_element name ","ws children each ","ws children ","sheet == ","@cells_read [] "," validate_sheet! ","str_v gsub "," set_cell_ attribute to_s alues "," set_cell_str content alues "," set_cell_ attribute alues "," attribute  to_i - "," attribute  to_i "," attribute to_s  nil? ! ","str content  nil? ! "," attribute  nil? ! "," attribute to_s  nil? ","str content  nil? "," attribute  nil? ","str_ attribute to_s  gsub! ","str_str content  gsub! ","str_ attribute  gsub! ","CGI  unescapeHTML  gsub! ","str_v gsub  gsub! ","row + -  + - ","row + -  + ","  attribute to_s alidate_sheet! "," str content alidate_sheet! ","  attribute alidate_sheet! ","str_ attribute to_s  gsub ","str_str content  gsub ","str_ attribute  gsub ","CGI  unescapeHTML  gsub ","str_v gsub  gsub "]}," Roo OpenOffice set_cell_values":{"type":"method","name":"set_cell_values","children":[],"call":["@cell [] []= ","@cell [] ","hms [] to_i * + + ","hms [] to_i ","hms [] ","hms [] to_i * + ","hms [] to_i * ","v split ","table_cell attributes [] ","table_cell attributes ","@cell_type [] []= ","@cell_type [] ","DateTime  parse "," attribute to_s "," attribute "," attribute size != ","XXXX-XX-XX size "," attribute size ","v to_f ","@cell_type [] [] ","@style [] []= ","@style [] ","@formula [] []= ","@formula [] ","formula [] ","prefix length ","formula [] == ","(str \"of:\") each ","value_type to_sym ","x + ","formula == ","v to_i ","table_cell children first text include? ","table_cell children first text ","table_cell children first ","table_cell children ","table_cell attributes [] to_s include? ","table_cell attributes [] to_s ","v split  [] to_i * + + ","v split  [] to_i ","v split  [] ","v split  [] to_i * + ","v split  [] to_i * ","@formula []  [] []= ","@formula []  [] ","formula []  [] ","formula []  [] == ","v to_i _type to_sym ","v to_f _type to_sym ","formula []  == "]}," Roo OpenOffice oo_version":{"type":"method","name":"oo_version","children":[],"call":[" attribute "," doc xpath each "," doc xpath "," doc "]}," Roo OpenOffice doc":{"type":"method","name":"doc","children":[],"call":[" Roo Utils  load_xml ","File  join "]}," Roo OpenOffice decrypt":{"type":"method","name":"decrypt","children":[],"call":["decrypted + ","cipher final ","block_size > ","total_to_read == ","buffer length ","cipher update ","zipfile read ","content_entry compressed_size ","zipfile seek ","content_entry local_header_offset + ","content_entry calculate_local_header_size ","content_entry local_header_offset ","File  open ","content_entry compressed_size  == ","zipfile read  length "]}," Roo OpenOffice find_cipher_key":{"type":"method","name":"find_cipher_key","children":[],"call":["OpenSSL PKCS5  pbkdf2_hmac_sha1 ","args [] key_len ","args [] "," fail ","args [] == "," OpenSSL PKCS5  pbkdf2_hmac_sha1 "]}," Roo OpenOffice find_cipher":{"type":"method","name":"find_cipher","children":[],"call":["cipher iv= ","args [] ","cipher key= "," find_cipher_key ","cipher padding= ","cipher decrypt ","OpenSSL Cipher  new "," fail ","Unknown algorithm  + "," algorithm ","args [] == "," OpenSSL Cipher  new ","OpenSSL Cipher  new  iv= "," OpenSSL Cipher  new  iv= ","OpenSSL Cipher  new  key= "," OpenSSL Cipher  new  key= "," find_OpenSSL Cipher  new _key "," find_ OpenSSL Cipher  new _key ","OpenSSL Cipher  new  padding= "," OpenSSL Cipher  new  padding= ","OpenSSL Cipher  new  decrypt "," OpenSSL Cipher  new  decrypt "]}," Roo OpenOffice perform_decryption":{"type":"method","name":"perform_decryption","children":[],"call":[" fail "," raise ","IO  binwrite ","Zlib Inflate  new inflate ","Zlib Inflate  new ","Zlib MAX_WBITS  -@ "," decrypt "," find_cipher ","Digest SHA256  digest ","key_generation_name == ","start_key_generation_node [] to_i ","start_key_generation_node [] ","Base64  decode64 ","key_derivation_node [] ","key_derivation_node [] to_i ","algorithm_node [] ","start_key_generation_node nil? ! ","start_key_generation_node nil? ","key_derivation_node nil? ! ","key_derivation_node nil? ","algorithm_node nil? ! ","algorithm_node nil? ","encryption_data xpath first ","encryption_data xpath "," find_ find_cipher  ","start_key_generation_node []  == ","encryption_data xpath first  [] to_i ","encryption_data xpath first  [] ","key_derBase64  decode64 ation_node [] ","key_derBase64  decode64 ation_node [] to_i ","algorithm_node [] _node [] ","encryption_data xpath first  nil? ! ","encryption_data xpath first  nil? ","key_derBase64  decode64 ation_node nil? ! ","key_derBase64  decode64 ation_node nil? ","algorithm_node [] _node nil? ! ","algorithm_node [] _node nil? "]}," Roo OpenOffice decrypt_if_necessary":{"type":"method","name":"decrypt_if_necessary","children":[],"call":[" fail "," perform_decryption ","password nil? ! ","password nil? ","options [] ","encryption_data nil? ","manifest xpath first ","manifest xpath "," Roo Utils  load_xml ","manifest_entry extract ","File  join ","zip_file glob first ","zip_file glob ","options []  nil? ! ","options []  nil? ","manifest xpath first  nil? "," Roo Utils  load_xml  xpath first "," Roo Utils  load_xml  xpath "," Roo Utils  load_xml _entry extract ","zip_file glob first  extract "]}," Roo OpenOffice comments":{"type":"method","name":"comments","children":[],"call":["elem [] ","elem [] [] ","@comment [] each collect ","@comment [] each ","@comment [] "," read_comments ","@comments_read [] "," default_sheet "]}," Roo OpenOffice comment":{"type":"method","name":"comment","children":[],"call":["@comment [] [] ","@comment [] "," normalize "," read_cells "," default_sheet "]}," Roo OpenOffice labels":{"type":"method","name":"labels","children":[],"call":["label [] [] ","label [] "," Roo Utils  letter_to_number ","label [] [] to_i ","@label map "," read_labels "]}," Roo OpenOffice label":{"type":"method","name":"label","children":[],"call":["@label [] [] ","@label [] "," Roo Utils  letter_to_number ","@label [] [] to_i ","@label key? ! ","@label key? ","@label size < ","@label size "," read_labels "]}," Roo OpenOffice to_s":{"type":"method","name":"to_s","children":[],"call":["@cell [] inspect ","@cell [] "," read_cells "," default_sheet "]}," Roo OpenOffice officeversion":{"type":"method","name":"officeversion","children":[],"call":[" oo_version "]}," Roo OpenOffice sheets":{"type":"method","name":"sheets","children":[],"call":["(send\n  (send\n    (send nil :doc) :xpath\n    (const nil :XPATH_LOCAL_NAME_TABLE)) :map) compact ","sheet attributes [] value ","sheet attributes [] ","sheet attributes ","@table_display [] "," attribute ","@only_visible_sheets ! "," doc xpath map "," doc xpath "," doc "," read_table_styles "," doc xpath each ","@table_display any? "]}," Roo OpenOffice celltype":{"type":"method","name":"celltype","children":[],"call":["@cell_type [] [] ","@cell_type [] ","@formula [] [] ","@formula [] "," normalize "," read_cells "," default_sheet "]}," Roo OpenOffice font":{"type":"method","name":"font","children":[],"call":["@font_style_definitions [] ","@style_defaults [] [] ","col - ","@style_defaults [] ","@style [] [] ","@style [] "," normalize "," read_cells "," default_sheet "]}," Roo OpenOffice formulas":{"type":"method","name":"formulas","children":[],"call":["elem [] ","elem [] [] ","@formula [] each collect ","@formula [] each ","@formula [] "," read_cells "," default_sheet "]}," Roo OpenOffice formula?":{"type":"method","name":"formula?","children":[],"call":[" formula ! ! "," formula ! "," formula "]}," Roo OpenOffice formula":{"type":"method","name":"formula","children":[],"call":["@formula [] [] ","@formula [] "," normalize "," read_cells "," default_sheet "]}," Roo OpenOffice cell":{"type":"method","name":"cell","children":[],"call":["@cell [] [] ","@cell [] ","Date  new ","dd to_i ","mm to_i ","yyyy to_i ","@cell [] [] to_s split ","@cell [] [] to_s "," celltype == "," celltype "," normalize "," read_cells "," default_sheet "]}," Roo OpenOffice method_missing":{"type":"method","name":"method_missing","children":[],"call":[" cell "," label ","m to_s ","@label key? "," read_labels "]}," Roo OpenOffice initialize_default_variables":{"type":"method","name":"initialize_default_variables","children":[],"call":["h []= ","Hash  new "]}," Roo OpenOffice open_oo_file":{"type":"method","name":"open_oo_file","children":[],"call":[" decrypt_if_necessary ","content_entry extract "," File  join "," fail ","zip_file glob first ","zip_file glob ","Zip File  open ","zip_file glob first  extract "]}," Roo OpenOffice initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "," close "," initialize_default_variables "," open_oo_file "," local_filename "," make_tmpdir ","options [] ","File  basename "," file_type_check "," class finalize_tempdirs "," object_id "," class ","(send\n  (send\n    (send nil :doc) :xpath\n    (const nil :XPATH_LOCAL_NAME_TABLE)) :map) compact ","sheet attributes [] value ","sheet attributes [] ","sheet attributes ","@table_display [] "," attribute ","@only_visible_sheets ! "," doc xpath map "," doc xpath "," doc "," read_table_styles "," doc xpath each ","@table_display any? ","ObjectSpace  define_finalizer "," class finalize "," class make_tempdir "," find_basename ","options []  ! "]}," Roo Excelx SharedStrings fix_invalid_shared_strings":{"type":"method","name":"fix_invalid_shared_strings","children":[],"call":[" Nokogiri  XML ","xml gsub ","invalid keys join ","invalid keys ","xml [] ","doc to_s ","doc to_s  gsub ","doc to_s  [] "]}," Roo Utils num_index":{"type":"method","name":"num_index","children":[],"call":["byte - ","byte <= ","byte >= "]}," Roo Utils char_index":{"type":"method","name":"char_index","children":[],"call":["byte - ","byte <= ","byte >= "]}," Roo Utils coordinates_in_range":{"type":"method","name":"coordinates_in_range","children":[],"call":["Excelx Coordinate  new ","cols each ","rows each ","br column ","tl column ","br row ","tl row ","coordinates [] ","coordinates size "," extract_coordinate ","str split map! ","str split "," to_enum "," block_given? "]}," Roo Utils extract_coordinate":{"type":"method","name":"extract_coordinate","children":[],"call":["Excelx Coordinate  new "," fail ","num_only ! ","letter_num == "," num_index "," char_index ","s each_byte "," num_ num_index  "," num_ char_index  "," char_ num_index  "," char_ char_index  "]}," Roo Tempdir make_tempdir":{"type":"method","name":"make_tempdir","children":[],"call":["@tempdirs [] << ","@tempdirs [] ","object object_id ","h []= ","Hash  new "," Dir  mktmpdir tap "," Dir  mktmpdir ","ENV  [] ","ObjectSpace  define_finalizer "," method ","@tempdirs []= "]}," Roo Tempdir finalize_tempdirs":{"type":"method","name":"finalize_tempdirs","children":[],"call":[" FileUtils  remove_entry ","dirs_to_remove each ","@tempdirs delete ","@tempdirs [] ","@tempdirs []= ","@tempdirs []  each "]}," Roo Helpers WeakInstanceCache instance_cache_finalizer":{"type":"method","name":"instance_cache_finalizer","children":[],"call":[" remove_instance_variable ","ref __getobj__ object_id == ","ref __getobj__ object_id ","ref __getobj__ ","ref weakref_alive? ! ","ref weakref_alive? "," instance_variable_get "," instance_variable_defined? "," proc "," instance_variable_get  __getobj__ object_id == "," instance_variable_get  __getobj__ object_id "," instance_variable_get  __getobj__ "," instance_variable_get  weak instance_variable_get _alive? ! "," instance_variable_get  weak instance_variable_get _alive? "]}," Roo Helpers WeakInstanceCache instance_cache":{"type":"method","name":"instance_cache","children":[],"call":[" instance_variable_set ","WeakRef  new ","ObjectSpace  define_finalizer "," instance_cache_finalizer "," raise ","e is_a? ","ref __getobj__ ","ref weakref_alive? "," instance_variable_get "," instance_variable_defined? "," instance_variable_get  __getobj__ "," instance_variable_get  weak instance_variable_get _alive? "]}," Roo Helpers DefaultAttrReader attr_reader_with_default":{"type":"method","name":"attr_reader_with_default","children":[],"call":[" instance_variable_get "," instance_variable_defined? "," define_method ","attr_hash each "]}," Roo Formatters YAML to_yaml":{"type":"method","name":"to_yaml","children":[],"call":["result << "," integer_to_timestring "," celltype == "," celltype "," cell ","prefix each "," empty? ","from_column upto ","from_row upto "," last_column "," first_column "," last_row "," first_row "]}," Roo Formatters XML to_xml":{"type":"method","name":"to_xml","children":[],"call":["(send\n  (const\n    (const\n      (const nil :Nokogiri) :XML) :Builder) :new) to_xml ","x cell "," celltype "," cell "," empty? "," first_column upto "," last_column "," first_column "," first_row upto "," last_row "," first_row ","xml sheet "," default_sheet= "," sheets each "," sheets ","xml spreadsheet ","Nokogiri XML Builder  new "]}," Roo Formatters Matrix to_matrix":{"type":"method","name":"to_matrix","children":[],"call":[" Matrix  rows "," cell ","from_column upto map ","from_column upto ","from_row upto map ","from_row upto "," last_column "," first_column "," last_row "," first_row "," Matrix  empty "," require "]}," Roo Formatters CSV cell_to_csv":{"type":"method","name":"cell_to_csv","children":[],"call":[" fail "," celltype ","onecell url gsub ","onecell url "," integer_to_timestring ","onecell to_s ","onecell class ","onecell to_i to_s ","onecell to_i ","onecell == ","onecell gsub ","onecell empty? ","onecell gsub downcase "," sheet_for cells [] formatted_value "," sheet_for cells [] "," sheet_for cells "," sheet_for "," cell "," empty? "," sheet_for cells [] formatted_value  url gsub "," cell  url gsub "," sheet_for cells [] formatted_value  url "," cell  url "," sheet_for cells [] formatted_value  to_s "," cell  to_s "," sheet_for cells [] formatted_value  class "," cell  class "," sheet_for cells [] formatted_value  to_i to_s "," cell  to_i to_s "," sheet_for cells [] formatted_value  to_i "," cell  to_i "," sheet_for cells [] formatted_value  == "," cell  == "," sheet_for cells [] formatted_value  gsub "," cell  gsub "," sheet_for cells [] formatted_value  empty? "," cell  empty? "," sheet_for cells [] formatted_value  gsub downcase "," cell  gsub downcase "]}," Roo Formatters CSV write_csv_content":{"type":"method","name":"write_csv_content","children":[],"call":["file print "," cell_to_csv ","col > ","1 upto "," last_column "," last_row "," first_row "]}," Roo Formatters CSV to_csv":{"type":"method","name":"to_csv","children":[],"call":["sio read ","sio rewind "," write_csv_content "," StringIO  new ","File  open "," StringIO  new  read "," StringIO  new  rewind "]}," Roo Formatters Base integer_to_timestring":{"type":"method","name":"integer_to_timestring","children":[],"call":["Kernel  format ","m * ","(send\n  (lvar :content) :/\n  (float 60.0)) floor ","content / ","h * ","(send\n  (lvar :content) :/\n  (float 3600.0)) floor ","Kernel  for(send\n  (lvar :content) :/\n  (float 60.0)) floor at ","(send\n  (lvar :content) :/\n  (float 60.0)) floor  * ","(send\n  (lvar :content) :/\n  (float 3600.0)) floor  * "]}," Roo Excelx worksheet_types":{"type":"method","name":"worksheet_types","children":[],"call":[]}," Roo Excelx extract_images":{"type":"method","name":"extract_images","children":[],"call":["entry extract "," image_files << "," image_files ","entry name gsub ","entry name ","img_entries each ","e name [] ","e name ","entries select "]}," Roo Excelx formatted_value":{"type":"method","name":"formatted_value","children":[],"call":[" safe_send "," sheet_for cells [] "," sheet_for cells "," sheet_for "," normalize "]}," Roo Excelx images":{"type":"method","name":"images","children":[],"call":["ifile [] "," image_files find "," image_files ","images_names map "," sheet_for images map "," sheet_for images "," sheet_for "," sheet_for images map  map "]}," Roo Excelx Workbook base_timestamp":{"type":"method","name":"base_timestamp","children":[],"call":[" base_date to_datetime to_time to_i "," base_date to_datetime to_time "," base_date to_datetime "," base_date "]}," Roo Excelx SheetDoc shared_strings":{"type":"method","name":"shared_strings","children":[],"call":["@shared shared_strings "]}," Roo Excelx SheetDoc base_timestamp":{"type":"method","name":"base_timestamp","children":[],"call":["@shared base_timestamp "]}," Roo Excelx SheetDoc base_date":{"type":"method","name":"base_date","children":[],"call":["@shared base_date "]}," Roo Excelx SheetDoc style_format":{"type":"method","name":"style_format","children":[],"call":["@shared styles style_format ","@shared styles "]}," Roo Excelx SheetDoc create_cell_from_value":{"type":"method","name":"create_cell_from_value","children":[],"call":["Excelx Cell  cell_class new ","cell content ","Excelx Cell  cell_class "," base_date "," base_timestamp ","cell_type == ","(send\n  (lvar :cell_content) :-\n  (send\n    (lvar :cell_content) :floor)) abs > ","(send\n  (lvar :cell_content) :-\n  (send\n    (lvar :cell_content) :floor)) abs ","cell_content - ","cell_content floor ","cell_content < ","cell content to_f "," shared_strings [] "," shared_strings "," shared_strings to_html [] "," shared_strings to_html "," shared_strings use_html? ","cell content to_i ","format to_s ","Excelx Cell  create_cell ","(send\n  (lvar :cell content to_f ) :-\n  (send\n    (lvar :cell content to_f ) :floor)) abs > ","(send\n  (lvar :cell content to_i ) :-\n  (send\n    (lvar :cell content to_i ) :floor)) abs > ","(send\n  (lvar :cell content to_f ) :-\n  (send\n    (lvar :cell content to_f ) :floor)) abs ","(send\n  (lvar :cell content to_i ) :-\n  (send\n    (lvar :cell content to_i ) :floor)) abs ","cell content to_f  - ","cell content to_i  - ","cell content to_f  floor ","cell content to_i  floor ","cell content to_f  < ","cell content to_i  < "]}," Roo Excelx SheetDoc create_empty_cell":{"type":"method","name":"create_empty_cell","children":[],"call":["Excelx Cell Empty  new "]}," Roo Excelx SheetDoc cell_value_type":{"type":"method","name":"cell_value_type","children":[],"call":["Excelx Format  to_type ","inlineStr freeze ","str freeze ","b freeze ","s freeze "]}," Roo Excelx Sheet first_last_row_col":{"type":"method","name":"first_last_row_col","children":[],"call":["col < ","col > ","row < ","row > "," cells each "," cells "]}," Roo Excelx SharedStrings create_html":{"type":"method","name":"create_html","children":[],"call":["tmp_str << ","formatting reverse_each ","formatting each "," +@ ","reverse_format each ","Hash  [] ","formatting to_a reverse ","formatting to_a "," +@  << ","Hash  []  each "]}," Roo Excelx SharedStrings extract_html_r":{"type":"method","name":"extract_html_r","children":[],"call":["str << "," create_html ","elem content ","xml_elems []= ","rPr_elem xpath first value ","rPr_elem xpath first ","rPr_elem xpath ","rPr_elem name ","elem children each ","elem children ","elem name ","r_elem children each ","r_elem children "," +@ "," +@  << "]}," Roo Excelx SharedStrings extract_html":{"type":"method","name":"extract_html","children":[],"call":["html_string << ","elem content "," extract_html_r ","elem name ","si children each ","si children ","<html> dup "," doc xpath map "," doc xpath "," doc "," fix_invalid_shared_strings "," doc_exists? ","<html> dup  << "]}," Roo Excelx SharedStrings use_html?":{"type":"method","name":"use_html?","children":[],"call":[" to_html [] [] "," to_html [] "," to_html ","@options [] "]}," Roo Excelx SharedStrings to_html":{"type":"method","name":"to_html","children":[],"call":[" extract_html "]}," Roo Excelx Shared base_timestamp":{"type":"method","name":"base_timestamp","children":[],"call":[" workbook base_timestamp "," workbook "]}," Roo Excelx Shared base_date":{"type":"method","name":"base_date","children":[],"call":[" workbook base_date "," workbook "]}," Roo Excelx Shared workbook":{"type":"method","name":"workbook","children":[],"call":["Workbook  new ","File  join "]}," Roo Excelx Shared shared_strings":{"type":"method","name":"shared_strings","children":[],"call":["SharedStrings  new ","File  join "]}," Roo Excelx Shared styles":{"type":"method","name":"styles","children":[],"call":["Styles  new ","File  join "]}," Roo Excelx Shared initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Roo Excelx Relationships include_type?":{"type":"method","name":"include_type?","children":[],"call":["rel [] "," to_a any? "," to_a "]}," Roo Excelx Images extract_images_names":{"type":"method","name":"extract_images_names","children":[],"call":["hash []= ","roo + ","rel [] gsub ","rel [] "," doc xpath each_with_object "," doc xpath "," doc "," doc_exists? "]}," Roo Excelx Images list":{"type":"method","name":"list","children":[],"call":[" extract_images_names "]}," Roo Excelx Format _to_type":{"type":"method","name":"_to_type","children":[],"call":["format include? ","format match nil? ! ","format match nil? ","format match ","EXCEPTIONAL_FORMATS  [] ","format to_s downcase ","format to_s ","format to_s downcase  include? ","format to_s downcase  match nil? ! ","format to_s downcase  match nil? ","format to_s downcase  match ","format to_s downcase  to_s downcase ","format to_s downcase  to_s "]}," Roo Excelx Coordinate column":{"type":"method","name":"column","children":[],"call":[" [] "]}," Roo Excelx Coordinate row":{"type":"method","name":"row","children":[],"call":[" [] "]}," Roo Excelx Coordinate initialize":{"type":"method","name":"initialize","children":[],"call":[" freeze "," << << "," << "]}," Roo Excelx Cell cell_class":{"type":"method","name":"cell_class","children":[],"call":[]}," Roo Excelx Cell create_cell":{"type":"method","name":"create_cell","children":[],"call":[]}," Roo Excelx Cell Time formatted_value":{"type":"method","name":"formatted_value","children":[],"call":["@datetime strftime ","@format gsub ","TIME_FORMATS  keys join ","TIME_FORMATS  keys "]}," Roo Excelx Cell Time initialize":{"type":"method","name":"initialize","children":[],"call":["(send\n  (send\n    (lvar :value) :to_f) :*\n  (int 86400)) round to_i ","(send\n  (send\n    (lvar :value) :to_f) :*\n  (int 86400)) round ","value to_f * ","value to_f ","Roo Link  new "," create_datetime ","excelx_type last ","(send\n  (send\n    (lvar :value) :to_f) :*\n  (int 86400)) to_i "," link? "]}," Roo Excelx Cell String empty?":{"type":"method","name":"empty?","children":[],"call":[" value empty? "," value "]}," Roo Excelx Cell String initialize":{"type":"method","name":"initialize","children":[],"call":["Roo Link  new "," link? "]}," Roo Excelx Cell Number number_format":{"type":"method","name":"number_format","children":[],"call":["Kernel  format reverse gsub reverse ","Kernel  format reverse gsub ","Kernel  format reverse ","Kernel  format ","number to_f abs ","number to_f ","number to_i > ","number to_i "," proc ","number to_f abs  to_f abs ","number to_f abs  to_f ","number to_f abs  to_i > ","number to_f abs  to_i "]}," Roo Excelx Cell Number generate_formatter":{"type":"method","name":"generate_formatter","children":[],"call":[" raise ","format inspect "," generate_formatter call "," generate_formatter "," proc "," number_format ","Kernel  format ","number to_f * ","number to_f ","1 size "]}," Roo Excelx Cell Number formatted_value":{"type":"method","name":"formatted_value","children":[],"call":["Kernel  format ","formatter call ","formatter is_a? "," generate_formatter ","Excelx ERROR_VALUES  include? "," formats [] "," formats ","ERROR_VALUES  include? ","(str \"%0\") % ","@format size "," zero_padded_number? "," generate_formatter  call "," formats []  call "," generate_formatter  is_a? "," formats []  is_a? "," generate_ generate_formatter  "," generate_ formats []  "]}," Roo Excelx Cell Number create_numeric":{"type":"method","name":"create_numeric","children":[],"call":[" Integer "," Float ","number include? ","Excelx ERROR_VALUES  include? ","ERROR_VALUES  include? "]}," Roo Excelx Cell Number initialize":{"type":"method","name":"initialize","children":[],"call":[" create_numeric ","Roo Link  new ","excelx_type last "," link? "]}," Roo Excelx Cell Empty empty?":{"type":"method","name":"empty?","children":[],"call":[]}," Roo Excelx Cell Empty initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Roo Excelx Cell DateTime create_datetime":{"type":"method","name":"create_datetime","children":[],"call":[" Time  at utc to_datetime "," Time  at utc "," Time  at ","(send\n  (lvar :base_timestamp) :+\n  (begin\n    (send\n      (send\n        (send\n          (lvar :value) :to_f) :round\n        (int 6)) :*\n      (const nil :SECONDS_IN_DAY)))) round ","base_timestamp + ","value to_f round * ","value to_f round ","value to_f "," DateTime  civil ","t sec ","t min ","t hour ","t day ","t month ","t year "," round_datetime ","date strftime ","base_date + "," Time  a round_datetime  u round_datetime c  round_datetime o_da round_datetime e round_datetime ime "," Time  at utc to_base_date + time "," Time  a round_datetime  u round_datetime c "," Time  a round_datetime  ","(send\n  (lvar :base_(send\n  (lvar :base_timestamp) :+\n  (begin\n    (send\n      (send\n        (send\n          (lvar :value) :to_f) :round\n        (int 6)) :*\n      (const nil :SECONDS_IN_DAY)))) round ) :+\n  (begin\n    (send\n      (send\n        (send\n          (lvar :value) :to_f) :round\n        (int 6)) :*\n      (const nil :SECONDS_IN_DAY)))) round ","(send\n  (lvar :base_ round_datetime imes round_datetime amp) :+\n  (begin\n    (send\n      (send\n        (send\n          (lvar :value) : round_datetime o_f) :round\n        (in round_datetime  6)) :*\n      (cons round_datetime  nil :SECONDS_IN_DAY)))) round ","base_(send\n  (lvar :base_timestamp) :+\n  (begin\n    (send\n      (send\n        (send\n          (lvar :value) :to_f) :round\n        (int 6)) :*\n      (const nil :SECONDS_IN_DAY)))) round  + ","base_ round_datetime imes round_datetime amp + ","value  round_datetime o_f round * ","value  round_datetime o_f round ","value  round_datetime o_f "," Da round_datetime eTime  civil "," round_datetime  sec "," round_datetime  min "," round_datetime  hour "," round_datetime  day "," round_datetime  mon round_datetime h "," round_datetime  year "," round_da round_datetime e round_datetime ime "," round_base_date + time ","da round_datetime e s round_datetime rf round_datetime ime ","base_date +  strftime ","base_da round_datetime e + ","base_base_date +  + "]}," Roo Excelx Cell DateTime parse_date_or_time_format":{"type":"method","name":"parse_date_or_time_format","children":[],"call":["part gsub ","formats keys join ","formats keys ","part [] ","part [] == "]}," Roo Excelx Cell DateTime formatted_value":{"type":"method","name":"formatted_value","children":[],"call":["@value strftime ","(send\n  (send\n    (send\n      (ivar :@format) :downcase) :split\n    (str \" \")) :map) join "," warn "," parse_date_or_time_format ","@format downcase split map ","@format downcase split ","@format downcase ","part gsub ","TIME_FORMATS  keys join ","TIME_FORMATS  keys ","part [] ","DATE_FORMATS  keys join ","DATE_FORMATS  keys ","part [] == "]}," Roo Excelx Cell DateTime initialize":{"type":"method","name":"initialize","children":[],"call":[" create_datetime ","Roo Link  new ","excelx_type last "," link? "]}," Roo Excelx Cell Date create_date":{"type":"method","name":"create_date","children":[],"call":["base_date + ","value to_i "," Date  new ","dd to_i ","mm to_i ","yyyy to_i ","date strftime split ","date strftime ","base_base_date +  + ","base_date +  strftime split ","base_date +  strftime "]}," Roo Excelx Cell Date create_datetime":{"type":"method","name":"create_datetime","children":[],"call":[]}," Roo Excelx Cell Date initialize":{"type":"method","name":"initialize","children":[],"call":[" create_date ","Roo Link  new ","excelx_type last "," link? "]}," Roo Excelx Cell Boolean create_boolean":{"type":"method","name":"create_boolean","children":[],"call":["value to_i == ","value to_i "]}," Roo Excelx Cell Boolean formatted_value":{"type":"method","name":"formatted_value","children":[],"call":[" value ","FALSE freeze ","TRUE freeze "]}," Roo Excelx Cell Boolean initialize":{"type":"method","name":"initialize","children":[],"call":[" create_boolean ","Roo Link  new "," link? "]}," Roo Excelx Cell Base presence":{"type":"method","name":"presence","children":[],"call":[" empty? "]}," Roo Excelx Cell Base empty?":{"type":"method","name":"empty?","children":[],"call":[]}," Roo Excelx Cell Base excelx_type":{"type":"method","name":"excelx_type","children":[],"call":[" cell_type "," warn "]}," Roo Excelx Cell Base excelx_value":{"type":"method","name":"excelx_value","children":[],"call":[" cell_value "," warn "]}," Roo Excelx Cell Base link":{"type":"method","name":"link","children":[],"call":[" link? "," warn "]}," Roo Excelx Cell Base hyperlink":{"type":"method","name":"hyperlink","children":[],"call":[" link? "," warn "]}," Roo Excelx Cell Base to_s":{"type":"method","name":"to_s","children":[],"call":[" formatted_value "]}," Roo Excelx Cell Base link?":{"type":"method","name":"link?","children":[],"call":["Roo Link  === ","@link ! ! ","@link ! "]}," Roo Excelx Cell Base formula?":{"type":"method","name":"formula?","children":[],"call":["(and\n  (defined?\n    (ivar :@formula))\n  (ivar :@formula)) ! ! ","(and\n  (defined?\n    (ivar :@formula))\n  (ivar :@formula)) ! ","@formula ! ! ","@formula ! "]}," Roo Excelx Cell Base type":{"type":"method","name":"type","children":[],"call":[" default_type "," link? "," formula? "]}," Roo Excelx Cell Base initialize":{"type":"method","name":"initialize","children":[],"call":["Roo Link  new ","style == "," link? ","link ! ! ","link ! "]}," Roo CSV clean_sheet":{"type":"method","name":"clean_sheet","children":[],"call":["@cleaned []= ","@cell []= "," sanitize_value ","value is_a? ","@cell each_pair "," read_cells "]}," Roo CSV set_column_count":{"type":"method","name":"set_column_count","children":[],"call":["@last_column []= ","@first_column [] ","@last_column [] zero? ","@last_column [] ","@first_column []= ","(or\n  (send\n    (send\n      (const\n        (cbase) :CSV) :readlines\n      (ivar :@filename)) :first)\n  (array)) size "," CSV  readlines first "," CSV  readlines ","(or\n  (send\n    (send\n      (const\n        (cbase) :CSV) :readlines\n      (ivar :@filename)\n      (send nil :csv_options)) :first)\n  (array)) size "," csv_options "]}," Roo CSV set_row_count":{"type":"method","name":"set_row_count","children":[],"call":["@last_row []= ","@first_row [] ","@last_row [] zero? ","@last_row [] ","@first_row []= "," CSV  readlines size "," CSV  readlines "," csv_options "]}," Roo CSV csv_foreach":{"type":"method","name":"csv_foreach","children":[],"call":[" CSV  foreach "," CSV  new each "," CSV  new "," is_stream? "]}," Roo CSV each_row_using_tempdir":{"type":"method","name":"each_row_using_tempdir","children":[],"call":[" csv_foreach "," download_uri "," filename "," Dir  mktmpdir ","ENV  [] "," CSV  foreach "," block "," options "]}," Roo CSV each_row":{"type":"method","name":"each_row","children":[],"call":[" csv_foreach "," filename_or_stream "," each_row_using_tempdir "," uri? "," filename "," CSV  foreach "," CSV  new each "," CSV  new "," is_stream? "," each_row_using_temp_dir "]}," Roo CSV read_cells":{"type":"method","name":"read_cells","children":[],"call":["@cells_read []= "," set_column_count "," set_row_count ","col_num > ","@cell_type []= "," celltype_class ","@cell []= ","row each "," each_row "," csv_options ","@cells_read [] "," default_sheet ","col_num + ","row each_with_index "]}," Roo CSV celltype_class":{"type":"method","name":"celltype_class","children":[],"call":["TYPE_MAP  [] ","value class "]}," Roo CSV set_type":{"type":"method","name":"set_type","children":[],"call":["@cell_type []= "]}," Roo CSV set_value":{"type":"method","name":"set_value","children":[],"call":["@cell []= "]}," Roo CSV csv_options":{"type":"method","name":"csv_options","children":[],"call":["@options [] "]}," Roo CSV cell_postprocessing":{"type":"method","name":"cell_postprocessing","children":[],"call":[]}," Roo CSV celltype":{"type":"method","name":"celltype","children":[],"call":["@cell_type [] "," normalize "," read_cells "," default_sheet "]}," Roo CSV cell":{"type":"method","name":"cell","children":[],"call":["@cell [] "," normalize "," read_cells "," default_sheet "]}," Roo CSV sheets":{"type":"method","name":"sheets","children":[],"call":[]}," Base find_basename":{"type":"method","name":"find_basename","children":[],"call":["File  basename "," is_stream? ! "," is_stream? ","uri path ","URI  parse "," require "," uri? ","URI  parse  path "," URI  parse ? "]}," Base finalize":{"type":"method","name":"finalize","children":[],"call":[]}," Base TEMP_PREFIX":{"type":"method","name":"TEMP_PREFIX","children":[],"call":[]}," Roo Excelx SheetDoc extract_coordinate":{"type":"method","name":"extract_coordinate","children":[],"call":["Excelx Coordinate  new "," Roo Utils  split_coordinate "]}," Roo Excelx Cell Time round_datetime":{"type":"method","name":"round_datetime","children":[],"call":[" Time  new round "," Time  new ","ss to_r ","mi to_i ","hh to_i ","dd to_i ","mm to_i ","yyyy to_i "]}," Roo Excelx Cell Time create_datetime":{"type":"method","name":"create_datetime","children":[],"call":[" DateTime  civil ","t sec ","t min ","t hour ","t day ","t month ","t year "," round_datetime ","date strftime ","base_date + ","value to_f round ","value to_f "," Da round_datetime eTime  civil "," round_datetime  sec "," round_datetime  min "," round_datetime  hour "," round_datetime  day "," round_datetime  mon round_datetime h "," round_datetime  year "," round_da round_datetime e round_datetime ime "," round_base_date + time ","da round_datetime e s round_datetime rf round_datetime ime ","base_date +  strftime ","base_da round_datetime e + ","base_base_date +  + ","value  round_datetime o_f round ","value  round_datetime o_f "]}," Roo Excelx Cell Number formats":{"type":"method","name":"formats","children":[],"call":[" proc ","Kernel  format reverse gsub reverse ","Kernel  format reverse gsub ","Kernel  format reverse ","Kernel  format ","number to_f abs ","number to_f ","number to_i > ","number to_i ","number to_f * "," number_format "]}," Roo Excelx Cell DateTime round_datetime":{"type":"method","name":"round_datetime","children":[],"call":[" Time  new round "," Time  new ","ss to_r ","mi to_i ","hh to_i ","dd to_i ","mm to_i ","yyyy to_i "]}," Roo Excelx Cell Number zero_padded_number?":{"type":"method","name":"zero_padded_number?","children":[],"call":["@format [] == ","@format [] "]}," CSV set_type":{"type":"method","name":"set_type","children":[],"call":["@cell_type []= "]}," CSV set_value":{"type":"method","name":"set_value","children":[],"call":["@cell []= "]}}