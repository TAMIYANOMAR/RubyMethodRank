{" Sanitize clean!":{"type":"method","name":"clean!","children":[],"call":["html []= ","html length ","result == ","fragment to_s ","node swap ","node inner_text gsub gsub ","node inner_text gsub ","node inner_text ","node text? ","fragment traverse_element ","node raw_attributes merge! ","@config [] [] ","@config [] ","node raw_attributes ","@config [] has_key? ","node raw_attributes= ","protocol [] include? ! ","protocol [] include? ","1 downcase ","protocol [] ","(send\n  (send\n    (lvar :value) :downcase) :=~\n  (regexp\n    (str \"^([^:]+):\")\n    (regopt))) ! ","value downcase =~ ","value downcase ","protocol has_key? ","node raw_attributes delete_if ","@config [] [] include? ! ","@config [] [] include? ","key downcase ","node parent replace_child ","node children ","node parent ","@config [] include? ","node name downcase ","node name ","node elem? ","node comment? ","node xmldecl? ","node procins? ","node doctype? ","node bogusetag? "," Hpricot ","coder encode ","HTMLEntities  new ","value to_s downcase =~ ","value to_s downcase ","value to_s ","value nil? ","key to_s downcase ","key to_s ","node name to_s downcase ","node name to_s ","fragment search ","sanitize clean! ","Sanitize  new ","Sanitize  encode_html ","node to_original_html ","node raw_attributes []= ","node raw_attributes each ","attr_whitelist include? ! ","attr_whitelist include? ","attr_whitelist empty? ","(send\n  (begin\n    (or\n      (send\n        (send\n          (ivar :@config) :[]\n          (sym :attributes)) :[]\n        (lvar :name))\n      (array))) :+\n  (begin\n    (or\n      (send\n        (send\n          (ivar :@config) :[]\n          (sym :attributes)) :[]\n        (sym :all))\n      (array)))) uniq ","(or\n  (send\n    (send\n      (ivar :@config) :[]\n      (sym :attributes)) :[]\n    (lvar :name))\n  (array)) + ","output_method call gsub ","output_method call ","result gsub! ","output_method call force_encoding ","RUBY_VERSION  >= "," raise ","fragment method ","@config [] == ","node replace ","Nokogiri XML Text  new ","node document ","node text ","node cdata? ","node []= ","@config [] [] each ","attr unlink ","attr value to_s downcase =~ ","attr value to_s downcase ","attr value to_s ","attr value ","attr name downcase ","attr name ","node attribute_nodes each ","node attribute_nodes ","attr remove ","node unlink ","node add_previous_sibling ","node children each ","node element? ","fragment traverse ","Nokogiri HTML DocumentFragment  parse ","result force_encoding ","output_method_params merge! ","output_method_params []= "," clean_node! ","parser parse ","fragment to_s  == ","output_method call gsub  == ","output_method call force_encoding  == ","output_method call  == "," Hpricot  to_s ","Nokogiri HTML DocumentFragment  parse  to_s ","parser parse  to_s "," Hpricot  traverse_element ","Nokogiri HTML DocumentFragment  parse  traverse_element ","parser parse  traverse_element ","@config [] has_key to_s downcase ? ","@config [] []  [] include? ! ","@config [] []  [] include? ","@config [] []  [] ","@config [] []  has_key? ","protocol has_key to_s downcase ? ","node raw_attributes protocol [] include? ! ete_if ","key to_s downcase  downcase ","node node name downcase  downcase ","node node name to_s downcase  downcase ","node node name downcase  ","node node name to_s downcase  ","HTMLEntities  new  encode ","key to_s downcase  to_s downcase ","key to_s downcase  to_s ","node node name downcase  to_s downcase ","node node name to_s downcase  to_s downcase ","node node name downcase  to_s ","node node name to_s downcase  to_s "," Hpricot  search ","Nokogiri HTML DocumentFragment  parse  search ","parser parse  search ","Sanitize  new  clean! ","(send\n  (begin\n    (or\n      (send\n        (send\n          (ivar :@config) :[]\n          (sym :attributes)) :[]\n        (lvar :name))\n      (array))) :+\n  (begin\n    (or\n      (send\n        (send\n          (ivar :@config) :[]\n          (sym :attributes)) :[]\n        (sym :all))\n      (array)))) uniq  include? ! ","(send\n  (begin\n    (or\n      (send\n        (send\n          (ivar :@config) :[]\n          (sym :attributes)) :[]\n        (lvar :name))\n      (array))) :+\n  (begin\n    (or\n      (send\n        (send\n          (ivar :@config) :[]\n          (sym :attributes)) :[]\n        (sym :all))\n      (array)))) uniq  include? ","(send\n  (begin\n    (or\n      (send\n        (send\n          (ivar :@config) :[]\n          (sym :attributes)) :[]\n        (lvar :name))\n      (array))) :+\n  (begin\n    (or\n      (send\n        (send\n          (ivar :@config) :[]\n          (sym :attributes)) :[]\n        (sym :all))\n      (array)))) uniq  empty? ","(send\n  (begin\n    (or\n      (send\n        (send\n          (ivar :@config) :[]\n          (sym :attributes)) :[]\n        (lvar :node name downcase ))\n      (array))) :+\n  (begin\n    (or\n      (send\n        (send\n          (ivar :@config) :[]\n          (sym :attributes)) :[]\n        (sym :all))\n      (array)))) uniq ","(send\n  (begin\n    (or\n      (send\n        (send\n          (ivar :@config) :[]\n          (sym :attributes)) :[]\n        (lvar :node name to_s downcase ))\n      (array))) :+\n  (begin\n    (or\n      (send\n        (send\n          (ivar :@config) :[]\n          (sym :attributes)) :[]\n        (sym :all))\n      (array)))) uniq ","(or\n  (send\n    (send\n      (ivar :@config) :[]\n      (sym :attributes)) :[]\n    (lvar :node name downcase ))\n  (array)) + ","(or\n  (send\n    (send\n      (ivar :@config) :[]\n      (sym :attributes)) :[]\n    (lvar :node name to_s downcase ))\n  (array)) + ","fragment method  call gsub ","fragment method  call ","fragment to_s  gsub! ","output_method call gsub  gsub! ","output_method call force_encoding  gsub! ","output_method call  gsub! ","fragment method  call force_encoding "," Hpricot  method ","Nokogiri HTML DocumentFragment  parse  method ","parser parse  method ","attr node name downcase  downcase ","attr node name to_s downcase  downcase ","attr node name downcase  ","attr node name to_s downcase  "," Hpricot  traverse ","Nokogiri HTML DocumentFragment  parse  traverse ","parser parse  traverse ","fragment to_s  force_encoding ","output_method call gsub  force_encoding ","output_method call force_encoding  force_encoding ","output_method call  force_encoding ","fragment method _params merge! ","fragment method _params []= "]}," Sanitize clean":{"type":"method","name":"clean","children":[],"call":[" clean! ","html dup ","sanitize clean ","Sanitize  new ","Sanitize  new  clean "]}," Sanitize initialize":{"type":"method","name":"initialize","children":[],"call":["Config DEFAULT  merge ","@config []= "," Array ","@config [] ","@config [] ! ! ","@config [] ! ","@remove_element_contents []= ","@config [] each ","@config [] is_a? ","@allowed_elements []= ","@config [] dup ","@config [] << ","Nokogiri VERSION  > ","@whitespace_elements []= ","@transformers [] << << ","Transformers CleanElement  new ","@transformers [] << ","@transformers [] "," Array + ","@transformers << << << ","@transformers << << ","@transformers << ","Transformers CSS CleanAttribute  new ","Sanitize CSS  new ","attr include? ","@config [] values any? ","@config [] values ","Transformers CSS CleanElement  new ","@config [] include? ","Config  merge "," Array dup ","Config DEFAULT  merge  []= ","Config  merge  []= ","Config DEFAULT  merge  [] ","Config  merge  [] ","Config DEFAULT  merge  [] ! ! ","Config  merge  [] ! ! ","Config DEFAULT  merge  [] ! ","Config  merge  [] ! ","Config DEFAULT  merge  [] each ","Config  merge  [] each ","Config DEFAULT  merge  [] is_a? ","Config  merge  [] is_a? ","Config DEFAULT  merge  [] dup ","Config  merge  [] dup ","Config DEFAULT  merge  [] << ","Config  merge  [] << "," Array  [] << << "," Array dup  [] << << "," Array  [] << "," Array dup  [] << "," Array  [] "," Array dup  [] "," Array  << << << "," Array dup  << << << "," Array  << << "," Array dup  << << "," Array  << "," Array dup  << ","Config DEFAULT  merge  [] values any? ","Config  merge  [] values any? ","Config DEFAULT  merge  [] values ","Config  merge  [] values ","Config DEFAULT  merge  [] include? ","Config  merge  [] include? "]}," Hpricot uxs":{"type":"method","name":"uxs","children":[],"call":[]}," Sanitize encode_html":{"type":"method","name":"encode_html","children":[],"call":["str gsub ","str gsub! ","ENTITY_MAP  each ","html dup ","html dup  gsub ","html dup  gsub! "]}," Sanitize transform_element!":{"type":"method","name":"transform_element!","children":[],"call":["node replace ","output [] ","node != "," raise ","output []= ","transform [] ","transform [] is_a? ","@whitelist_nodes uniq! ","transform is_a? ","transform nil? ","transformer call ","@config [] inject ","@config [] ","transformer_node name downcase ","transformer_node name ","transformer call  [] ","transformer call  [] is_a? ","transformer call  is_a? ","transformer call  nil? ","transformer call er call ","transformer call er_node name downcase ","transformer call er_node name "]}," Sanitize clean_element!":{"type":"method","name":"clean_element!","children":[],"call":["node []= ","@config [] [] each ","@config [] [] ","@config [] ","@config [] has_key? ","attr unlink ","protocol [] include? ! ","protocol [] include? ","protocol [] ","1 downcase ","attr value to_s downcase =~ ","attr value to_s downcase ","attr value to_s ","attr value ","protocol has_key? ","attr name downcase ","attr name ","node attribute_nodes each ","node attribute_nodes ","attr_whitelist include? ","attr remove ","attr_whitelist empty? ","(send\n  (send\n    (send\n      (lvar :transform) :[]\n      (sym :attr_whitelist)) :+\n    (begin\n      (or\n        (send\n          (send\n            (ivar :@config) :[]\n            (sym :attributes)) :[]\n          (lvar :name))\n        (array)))) :+\n  (begin\n    (or\n      (send\n        (send\n          (ivar :@config) :[]\n          (sym :attributes)) :[]\n        (sym :all))\n      (array)))) uniq ","transform [] + + ","transform [] + ","transform [] ","node unlink ","node add_previous_sibling ","node children each ","node children ","@config [] include? ","node name to_s downcase ","node name to_s ","node name ","@whitelist_nodes include? "," transform_element! ","@remove_element_contents [] ","@allowed_elements [] ","node replace ","Nokogiri XML Text  new ","node document ","node to_s ","node add_next_sibling ","node children empty? ","@whitespace_elements [] ","@config [] []  [] include? ! ","@config [] []  [] include? ","@config [] []  [] ","@config [] []  has_key? ","attr node name to_s downcase  downcase ","attr node name to_s downcase  ","(send\n  (send\n    (send\n      (lvar :transform) :[]\n      (sym :attr_whitelist)) :+\n    (begin\n      (or\n        (send\n          (send\n            (ivar :@config) :[]\n            (sym :attributes)) :[]\n          (lvar :name))\n        (array)))) :+\n  (begin\n    (or\n      (send\n        (send\n          (ivar :@config) :[]\n          (sym :attributes)) :[]\n        (sym :all))\n      (array)))) uniq  include? ","(send\n  (send\n    (send\n      (lvar :transform) :[]\n      (sym :attr_whitelist)) :+\n    (begin\n      (or\n        (send\n          (send\n            (ivar :@config) :[]\n            (sym :attributes)) :[]\n          (lvar :name))\n        (array)))) :+\n  (begin\n    (or\n      (send\n        (send\n          (ivar :@config) :[]\n          (sym :attributes)) :[]\n        (sym :all))\n      (array)))) uniq  empty? ","(send\n  (send\n    (send\n      (lvar :transform) :[]\n      (sym :(send\n  (send\n    (send\n      (lvar :transform) :[]\n      (sym :attr_whitelist)) :+\n    (begin\n      (or\n        (send\n          (send\n            (ivar :@config) :[]\n            (sym :attributes)) :[]\n          (lvar :name))\n        (array)))) :+\n  (begin\n    (or\n      (send\n        (send\n          (ivar :@config) :[]\n          (sym :attributes)) :[]\n        (sym :all))\n      (array)))) uniq )) :+\n    (begin\n      (or\n        (send\n          (send\n            (ivar :@config) :[]\n            (sym :attributes)) :[]\n          (lvar :name))\n        (array)))) :+\n  (begin\n    (or\n      (send\n        (send\n          (ivar :@config) :[]\n          (sym :attributes)) :[]\n        (sym :all))\n      (array)))) uniq ","(send\n  (send\n    (send\n      (lvar :transform) :[]\n      (sym :attr_whitelist)) :+\n    (begin\n      (or\n        (send\n          (send\n            (ivar :@config) :[]\n            (sym :attributes)) :[]\n          (lvar :node name to_s downcase ))\n        (array)))) :+\n  (begin\n    (or\n      (send\n        (send\n          (ivar :@config) :[]\n          (sym :attributes)) :[]\n        (sym :all))\n      (array)))) uniq ","(send\n  (send\n    (send\n      (lvar : transform_element! ) :[]\n      (sym :attr_whitelist)) :+\n    (begin\n      (or\n        (send\n          (send\n            (ivar :@config) :[]\n            (sym :attributes)) :[]\n          (lvar :name))\n        (array)))) :+\n  (begin\n    (or\n      (send\n        (send\n          (ivar :@config) :[]\n          (sym :attributes)) :[]\n        (sym :all))\n      (array)))) uniq "," transform_element!  [] + + "," transform_element!  [] + "," transform_element!  [] ","node node name to_s downcase  to_s downcase ","node node name to_s downcase  to_s ","node node name to_s downcase  ","  transform_element! _element! "]}," Sanitize clean_node!":{"type":"method","name":"clean_node!","children":[],"call":["traversed_node replace ","Nokogiri XML Text  new ","traversed_node document ","traversed_node text ","traversed_node cdata? ","traversed_node unlink ","@config [] ","traversed_node comment? "," clean_element! ","traversed_node element? ","node traverse "," raise ","node is_a? ","child replace ","child document ","child text ","child cdata? ","child unlink ","child comment? ","child element? ","child to_s ","child text? "," transform_node! "," traverse_depth "," traverse_breadth ","@transformers [] empty? ","@transformers [] ","Set  new "]}," Sanitize traverse_depth":{"type":"method","name":"traverse_depth","children":[],"call":["block call "," traverse_depth ","node children each ","node children "]}," Sanitize traverse_breadth":{"type":"method","name":"traverse_breadth","children":[],"call":[" traverse_breadth ","node children each ","node children ","block call "]}," Sanitize transform_node!":{"type":"method","name":"transform_node!","children":[],"call":["node_whitelist merge ","result [] ","result [] respond_to? ","result is_a? ","transformer call ","node name downcase ","node name ","node_whitelist include? ","@transformers [] each ","@transformers [] ","node fragment? ! ","node fragment? ","node parent nil? ","node parent ","@transformers each ","config []= ","node_allowlist merge ","result_allowlist respond_to? ","node_allowlist include? ","transformer call  [] ","transformer call  [] respond_to? ","transformer call  is_a? ","transformer call _allowlist respond_to? "]}," Sanitize Transformers CleanElement call":{"type":"method","name":"call","children":[],"call":["node []= ","@add_attributes [] each ","@add_attributes [] ","@add_attributes has_key? ","attr unlink ","protocol [] include? ! ","protocol [] include? ","protocol [] ","1 downcase ","attr value to_s downcase =~ ","attr value to_s downcase ","attr value to_s ","attr value ","protocol has_key? ","attr name downcase ","attr name ","node attribute_nodes each ","node attribute_nodes ","@protocols [] ","@protocols has_key? ","attr_whitelist include? ","attr_whitelist empty? ","Set  new ","(or\n  (send\n    (ivar :@attributes) :[]\n    (lvar :name))\n  (array)) + ","@attributes [] ","node unlink ","node add_previous_sibling ","node children each ","node children ","@remove_element_contents include? ","node add_next_sibling ","Nokogiri XML Text  new ","node document ","node children empty? ","@whitespace_elements include? ","@allowed_elements include? ","node element? ! ","node element? ","env [] ","@remove_element_contents [] ","@whitespace_elements [] ","@allowed_elements [] ","attr_name =~ ","attr_name start_with? ","attr value= ","attr value gsub ","UNSAFE_LIBXML_ATTRS_A  include? ","name == ","UNSAFE_LIBXML_ATTRS_GLOBAL  include? ","attr value strip ","@add_attributes include? ","attr_protocols include? ","@protocols [] [] ","@protocols [] include? ","@protocols include? ","attr_whitelist nil? ","@whitespace_elements [] [] to_s ","@whitespace_elements [] [] ","@elements include? ","node type != ","node type ","node parent nil? ","node parent ","attr value =~ ","node [] gsub ","node [] ","node [] downcase =~ ","node [] downcase ","node [] downcase == ","node has_attribute? ","node [] downcase != ","child unlink ","node children empty? ! ","attr_allowlist include? ","attr_allowlist nil? ","child content= ","CGI  escapeHTML ","child content ","child type == ","child type ","UNESCAPED_TEXT_ELEMENTS  include? ","prefix == ","node namespace prefix ","node namespace ","node namespace nil? ","env []  []= ","@protocols []  [] include? ! ","@protocols []  [] include? ","@protocols []  [] ","@protocols []  has_key? ","attr env []  downcase ","attr env []  ","env []  attribute_env [] s each ","env []  attribute_env [] s ","@@protocols [] s [] ","@@protocols [] s has_key? ","Set  new  include? ","Set  new  empty? ","(or\n  (send\n    (ivar :@attributes) :[]\n    (lvar :env [] ))\n  (array)) + ","env []  unlink ","env []  add_previous_sibling ","env []  children each ","env []  children ","env []  add_next_sibling ","env []  document ","env []  children empty? ","env []  element? ! ","env []  element? ","attr name downcase  =~ ","attr_env []  =~ ","attr name downcase  start_with? ","attr_env []  start_with? ","env []  == ","attr_@protocols [] s include? ","@protocols [] []  include? ","@@protocols [] s [] [] ","@@protocols [] s [] include? ","@@protocols [] s include? ","Set  new  nil? ","env []  type != ","env []  type ","env []  parent nil? ","env []  parent ","env []  [] gsub ","env []  [] ","env []  [] downcase =~ ","env []  [] downcase ","env []  [] downcase == ","env []  has_attribute? ","env []  [] downcase != ","env []  children empty? ! ","node namespace prefix  == ","env []  namespace prefix ","node env [] space prefix ","node namespace node namespace prefix  ","env []  namespace ","node env [] space ","env []  namespace nil? ","node env [] space nil? "]}," Sanitize Transformers CleanElement initialize":{"type":"method","name":"initialize","children":[],"call":["config [] ! ! ","config [] ! ","config [] ","@remove_element_contents merge ","config [] is_a? ","Set  new ","@remove_element_contents []= ","config [] each ","@whitespace_elements []= ","@allowed_elements []= ","config [] map ","@attributes []= ","Set  new merge ","@attributes [] ","element_name == ","@attributes each ","config [] dup ","Set  new  merge ","Set  new  []= ","config []  []= ","config [] dup  []= ","config []  [] ","config [] dup  [] ","config []  each ","config [] dup  each "]}," Sanitize clean_document!":{"type":"method","name":"clean_document!","children":[],"call":[" clean! "," raise ","@config [] ! ","@config [] ","@config [] include? ! ","@config [] include? "]}," Sanitize clean_document":{"type":"method","name":"clean_document","children":[],"call":[" clean_document! ","html dup ","html nil? "]}," Sanitize Config freeze_config":{"type":"method","name":"freeze_config","children":[],"call":[]}," Sanitize traverse":{"type":"method","name":"traverse","children":[],"call":["child next_sibling ","node child ","prev next_sibling ","child parent != ","child parent "," traverse ","child previous_sibling ","block call ","child parent == ","child next_sibling  next_sibling ","node child  next_sibling ","prev next_sibling  next_sibling ","node child next_sibling  ","node node child  ","node prev next_sibling  ","child previous_sibling  next_sibling ","child next_sibling  parent != ","node child  parent != ","prev next_sibling  parent != ","child next_sibling  parent ","node child  parent ","prev next_sibling  parent ","child next_sibling  previous_sibling ","node child  previous_sibling ","prev next_sibling  previous_sibling ","child child previous_sibling ious_sibling ","child next_sibling  parent == ","node child  parent == ","prev next_sibling  parent == "]}," Sanitize to_html":{"type":"method","name":"to_html","children":[],"call":["html gsub! ","node to_html "," NO_DECLARATION  | | "," NO_DECLARATION  | ","meta [] downcase == ","meta [] downcase ","meta [] ","node xpath none? ","node xpath ","@config [] include? ! ","@config [] include? ","@config [] ","node type == ","node type ","meta [] casecmp zero? ","meta [] casecmp ","node to_html  gsub! ","node to_node to_html  "]}," Sanitize preprocess":{"type":"method","name":"preprocess","children":[],"call":["html gsub! ","html encode! ","html encoding name == ","html encoding name ","html encoding ","html to_s dup ","html to_s ","html to_s dup  gsub! ","html to_s dup  encode! ","html to_s dup  encoding name == ","html to_s dup  encoding name ","html to_s dup  encoding ","html to_s dup  to_s dup ","html to_s dup  to_s "]}," Sanitize node!":{"type":"method","name":"node!","children":[],"call":[" transform_node! "," traverse ","Set  new "," raise ","@config [] include? ","@config [] ","node is_a? "]}," Sanitize fragment":{"type":"method","name":"fragment","children":[],"call":[" to_html "," node! ","frag << ","doc xpath each ","doc xpath ","doc fragment ","html =~ ","Nokogiri HTML5  parse "," preprocess ","Nokogiri HTML5  fragment ","@config [] "," to_ preprocess  ","doc fragment  << ","Nokogiri HTML5  fragment  << ","Nokogiri HTML5  parse  xpath each ","Nokogiri HTML5  parse  xpath ","doc doc fragment ment ","doc Nokogiri HTML5  fragment ment ","Nokogiri HTML5  parse  fragment "," preprocess  =~ ","Nokogiri HTML5  doc fragment ment ","Nokogiri HTML5  Nokogiri HTML5  fragment ment "]}," Sanitize document":{"type":"method","name":"document","children":[],"call":[" to_html "," node! ","Nokogiri HTML5  parse "," preprocess ","@config [] "]}," Sanitize Transformers CSS CleanElement call":{"type":"method","name":"call","children":[],"call":["node << ","Nokogiri XML Text  new ","node document ","node children unlink ","node children ","node unlink ","css strip empty? ","css strip ","@scss stylesheet ","node content ","env [] == ","env [] ","node type == ","node type ","css gsub! ","env []  << ","env []  document ","env []  children unlink ","env []  children ","env []  unlink ","@scss stylesheet  strip empty? ","@scss stylesheet  strip ","@s@scss stylesheet  stylesheet ","env []  content ","env []  type == ","env []  type ","@scss stylesheet  gsub! "]}," Sanitize Transformers CSS CleanElement initialize":{"type":"method","name":"initialize","children":[],"call":["Sanitize CSS  new ","Sanitize CSS  === "]}," Sanitize Transformers CSS CleanAttribute call":{"type":"method","name":"call","children":[],"call":["attr value= ","attr unlink ","css strip empty? ","css strip ","@scss properties ","attr value ","node attribute ","env [] ! ","env [] ","node key? ","node type == ","node type ","node attribute  value= ","node attribute  unlink ","@scss properties  strip empty? ","@scss properties  strip ","@s@scss properties  properties ","node attribute  value ","node node attribute ibute ","env []  attribute ","env []  key? ","env []  type == ","env []  type "]}," Sanitize Transformers CSS CleanAttribute initialize":{"type":"method","name":"initialize","children":[],"call":["Sanitize CSS  new ","Sanitize CSS  === "]}," Sanitize CSS property!":{"type":"method","name":"property!","children":[],"call":["@config [] include? ","@config [] ","1 downcase ","value =~ ","combined_value downcase == ","combined_value downcase ","value downcase == ","value downcase ","combined_value << ","String  === ","nodes concat ","Array  === ","child [] downcase == ","child [] downcase ","child [] ","child key? ","nodes each ","prop [] dup ","prop [] ","name slice! ","name =~ ","prop [] downcase "," valid_url? ","combined_value == ","lowercase_value == ","name == ","String  new ","child []  =~ ","combined_child []  downcase == ","String  new  downcase == ","combined_child []  downcase ","String  new  downcase ","child []  downcase == ","child []  downcase ","combined_child []  << ","String  new  << ","prop [] dup  concat ","prop [] dup  each ","prop [] downcase  slice! ","child [] downcase  slice! ","prop [] downcase  =~ ","child [] downcase  =~ ","combined_child []  == ","String  new  == ","lowercase_child []  == ","value downcase  == ","prop [] downcase  == ","child [] downcase  == "]}," Sanitize CSS at_rule!":{"type":"method","name":"at_rule!","children":[],"call":["rule delete ","rule [] []= "," tree! ","rule [] ","Crass Parser  parse_properties ","@config [] ","rule [] [] ","AT_RULES_WITH_PROPERTIES  include? ","Crass Parser  parse_rules ","AT_RULES_WITH_STYLES  include? ","@config [] include? ","rule [] downcase ","rule [] [] [] ","rule []= ","rule has_key? ","@at_rules include? ","@at_rules_with_properties include? ","@at_rules_with_styles include? "," import_url_allowed? ! "," import_url_allowed? ","name == ","@at_rules_with_Crass Parser  parse_rules  include? ","rule [] downcase  == "]}," Sanitize CSS tree!":{"type":"method","name":"tree!","children":[],"call":[" tree! ","node [] "," property! ","@config [] "," at_rule! ","node nil? ","tree map! ","prop nil? ! ","prop nil? ","  property! erty! "," property!  nil? ! "," property!  nil? "]}," Sanitize CSS stylesheet":{"type":"method","name":"stylesheet","children":[],"call":["Crass Parser  stringify "," tree! ","Crass  parse ","@config [] "," Crass  parse ! "]}," Sanitize CSS properties":{"type":"method","name":"properties","children":[],"call":["Crass Parser  stringify "," tree! ","Crass  parse_properties ","@config [] "," Crass  parse_properties ! "]}," Sanitize CSS initialize":{"type":"method","name":"initialize","children":[],"call":["Config  merge ","config [] ","Config DEFAULT  [] ","Set  new ","@config [] ","Config  merge  [] "]}," Sanitize Config can_dupe?":{"type":"method","name":"can_dupe?","children":[],"call":[]}," Sanitize Config merge":{"type":"method","name":"merge","children":[],"call":[]}," Sanitize CSS valid_url?":{"type":"method","name":"valid_url?","children":[],"call":["@config [] include? ","@config [] ","1 downcase ","url =~ ","node [] ","type == ","url_string_node [] ","url_string_node nil? ","token [] ","Hash  === ","node [] each ","Array  === ","node [] downcase == ","node [] downcase ","node key? ","node []  =~ ","url_string_node []  =~ ","node []  == ","node [] _string_node [] ","url_string_node [] _string_node [] ","node [] _string_node nil? ","url_string_node [] _string_node nil? "]}," Sanitize CSS import_url_allowed?":{"type":"method","name":"import_url_allowed?","children":[],"call":["@import_url_validator call ","url_token [] ","t [] == ","t [] ","rule [] detect ","rule [] ","@url_token [] _validator call "]}}