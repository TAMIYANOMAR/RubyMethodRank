{" DomainName":{"type":"method","name":"DomainName","children":[],"call":["DomainName  new "]}," DomainName normalize":{"type":"method","name":"normalize","children":[],"call":["DomainName Punycode  encode_hostname downcase ","DomainName Punycode  encode_hostname ","domain chomp to_nfc ","domain chomp ","domain chomp unicode_normalize "]}," DomainName inspect":{"type":"method","name":"inspect","children":[],"call":["str << ","str << << ","#<%s:%s % "," class name "," class ","#<%s:%s %  << ","#<%s:%s %  << << "]}," DomainName to_s":{"type":"method","name":"to_s","children":[],"call":[]}," DomainName ==":{"type":"method","name":"==","children":[],"call":["other hostname == ","other hostname ","DomainName  new ","DomainName  === ","DomainName  new  hostname == ","DomainName  new  hostname "]}," DomainName cookie_domain?":{"type":"method","name":"cookie_domain?","children":[],"call":["@hostname end_with? ",". << "," ipaddr? ","@hostname == ","domain hostname ","DomainName  new ","DomainName  === ","domain <= "," <= "," == ","DomainName  new  hostname ","DomainName  new  <= "]}," DomainName initialize":{"type":"method","name":"initialize","children":[],"call":["@hostname [] ","penultimate_dot + ","@hostname rindex ","last_dot - ","pos + ","@hostname index ","domain length -@ ","domain length ","etld_data [] "," loop ","etld_data key? ","DomainName  etld_data ","last_dot + ","DomainName  normalize ","@ipaddr to_s ","IPAddr  new "," raise ","hostname start_with? ","hostname class ","(lvasgn :hostname\n  (send\n    (lvar :hostname) :to_str)) is_a? ","hostname to_str ","hostname respond_to? ","hostname is_a? ","DomainName  normalize  [] ","@ipaddr to_s  [] ","@hostname to_str  [] ","@hostname rindex  + ","DomainName  normalize  rindex ","@ipaddr to_s  rindex ","@hostname to_str  rindex ","@hostname rindex  - ","@hostname index  + ","DomainName  normalize  index ","@ipaddr to_s  index ","@hostname to_str  index ","DomainName  etld_data  [] ","DomainName  etld_data  key? ","DomainName  DomainName  etld_data  ","IPAddr  new  to_s ","hostname to_str  start_with? ","hostname to_str  class ","(lvasgn :hostname to_str \n  (send\n    (lvar :hostname to_str ) :to_str)) is_a? ","hostname to_str  to_str ","hostname to_str  respond_to? ","hostname to_str  is_a? "]}," DomainName canonical?":{"type":"method","name":"canonical?","children":[],"call":[]}," DomainName canonical_tld?":{"type":"method","name":"canonical_tld?","children":[],"call":[]}," DomainName ipaddr?":{"type":"method","name":"ipaddr?","children":[],"call":[]}," DomainName Punycode encode_hostname":{"type":"method","name":"encode_hostname","children":[],"call":["(send\n  (send\n    (lvar :hostname) :split\n    (str \".\")) :map) join ","xn-- << "," encode ","name match ","hostname split map ","hostname split ","hostname match ","(send\n  (send\n    (lvar :hostname) :split\n    (const nil :DOT)) :map) join ","PREFIX  + "]}," DomainName Punycode encode":{"type":"method","name":"encode","children":[],"call":["(send\n  (const nil :LOBASE) :+\n  (int 1)) * / ","delta + ","(send\n  (const nil :LOBASE) :+\n  (int 1)) * ","LOBASE  + ","delta > ","delta / ","h + ","delta >> ","h == ","output << "," encode_digit ","(send\n  (lvar :q) :-\n  (lvar :t)) / ","BASE  - ","q - ","t + ","(send\n  (lvar :q) :-\n  (lvar :t)) % ","q < ","k - ","k - >= ","k <= "," loop ","cp == "," raise ","(op-asgn\n  (lvasgn :delta) :+\n  (int 1)) == ","cp < ","input each ","(send\n  (lvar :m) :-\n  (lvar :n)) * ","m - ","m - > ","(send\n  (const nil :MAXINT) :-\n  (lvar :delta)) / ","MAXINT  - ","(erange\n  (lvar :n)\n  (lvar :m)) === ","h < ","input length ","b > ","output length ","cp chr ","string unpack ","(send\n  (lvar :q) :-\n  (lvar :t)) divmod ","ENCODE_DIGIT  [] ","delta >>  + ","delta /  + ","delta >>  > ","delta /  > ","delta >>  / ","delta /  / ","delta >>  >> ","delta /  >> ","(send\n  (lvar :(send\n  (lvar :q) :-\n  (lvar :t)) / ) :-\n  (lvar :t)) / ","(send\n  (lvar :q) :-\n  (lvar :t)) /  - ","(send\n  (lvar :(send\n  (lvar :q) :-\n  (lvar :t)) / ) :-\n  (lvar :t)) % ","(send\n  (lvar :q) :-\n  (lvar :t)) /  < ","(op-asgn\n  (lvasgn :delta >> ) :+\n  (int 1)) == ","(op-asgn\n  (lvasgn :delta / ) :+\n  (int 1)) == ","string unpack  each ","(send\n  (const nil :MAXINT) :-\n  (lvar :delta >> )) / ","(send\n  (const nil :MAXINT) :-\n  (lvar :delta / )) / ","string unpack  length ","output length  > ","(send\n  (lvar :(send\n  (lvar :q) :-\n  (lvar :t)) / ) :-\n  (lvar :t)) divmod "]}," DomainName Punycode encode_digit":{"type":"method","name":"encode_digit","children":[],"call":["(send\n  (send\n    (send\n      (lvar :d) :+\n      (int 22)) :+\n    (begin\n      (if\n        (send\n          (lvar :d) :<\n          (int 26))\n        (int 75)\n        (int 0)))) :-\n  (begin\n    (if\n      (lvar :flag)\n      (begin\n        (send\n          (int 1) :<<\n          (int 5)))\n      (int 0)))) chr ","d + + - ","1 << ","d + + ","d < ","d + "]}," DomainName etld_data":{"type":"method","name":"etld_data","children":[],"call":[]}," DomainName >=":{"type":"method","name":">=","children":[],"call":[" <=> "]}," DomainName <=":{"type":"method","name":"<=","children":[],"call":[" <=> "]}," DomainName >":{"type":"method","name":">","children":[],"call":[" <=> "]}," DomainName <":{"type":"method","name":"<","children":[],"call":[" <=> "]}," DomainName <=>":{"type":"method","name":"<=>","children":[],"call":["othername [] == ","othername [] ","@hostname size -@ - ","@hostname size -@ ","@hostname size ","othername end_with? ","@hostname [] == ","@hostname [] ","othername size -@ - ","othername size -@ ","othername size ","@hostname end_with? ","othername == ","other hostname ","DomainName  new ","DomainName  === ","other hostname  [] == ","DomainName  new name [] == ","other hostname  [] ","DomainName  new name [] ","other hostname  end_with? ","DomainName  new name end_with? ","other hostname  size -@ - ","DomainName  new name size -@ - ","other hostname  size -@ ","DomainName  new name size -@ ","other hostname  size ","DomainName  new name size ","other hostname  == ","DomainName  new name == ","DomainName  new  hostname "]}," DomainName Punycode decode_hostname":{"type":"method","name":"decode_hostname","children":[],"call":["1 << "," decode ","hostname gsub ","Regexp  quote "]}," DomainName Punycode decode":{"type":"method","name":"decode","children":[],"call":["output pack ","output []= "," raise ","n > ","i divmod ","out + ","(send\n  (const nil :LOBASE) :+\n  (int 1)) * / ","delta + ","(send\n  (const nil :LOBASE) :+\n  (int 1)) * ","LOBASE  + ","delta > ","delta / ","(send\n  (lvar :i) :-\n  (lvar :oldi)) >> ","i - ","i / ","oldi == ","string inspect ","h < ","w > ","BASE  - ","digit < ","k - ","k - >= ","k <= ","i > ","digit * "," decode_digit ","input [] "," loop ","output length ","input length ","u unpack ","string [] ","j + ","b unpack ","b match ","string rindex ","DECODE_DIGIT  [] ","output length put pack ","ostring [] tpstring [] t pack ","b unpack  pack ","output length put []= ","ostring [] tpstring [] t []= ","b unpack  []= ","output length  + ","ostring [] t + ","(send\n  (lvar :i) :-\n  (lvar :oldi)) >>  + ","i /  + ","(send\n  (lvar :i) :-\n  (lvar :oldi)) >>  > ","i /  > ","(send\n  (lvar :i) :-\n  (lvar :oldi)) >>  / ","i /  / "," decode_digit  < ","DECODE_DIGIT  []  < "," decode_digit  * ","DECODE_DIGIT  []  * "," decode_ decode_digit  "," decode_DECODE_DIGIT  []  ","u unpack  [] ","inpstring [] t [] ","output length put length ","ostring [] tpstring [] t length ","b unpack  length ","u unpack  length ","inpstring [] t length ","string []  string [] npack ","string rindex  + ","b string [] npack ","string []  unpack ","string []  match "]}," DomainName Punycode decode_digit":{"type":"method","name":"decode_digit","children":[],"call":["DECODE_DIGIT  [] "]}," DomainName superdomain":{"type":"method","name":"superdomain","children":[],"call":[" class new ","@hostname [] ","pos + "," class ","@hostname index "," ipaddr? ","@hostname index  + "]}," DomainName tld_idn":{"type":"method","name":"tld_idn","children":[],"call":["DomainName Punycode  decode_hostname "]}," DomainName domain_idn":{"type":"method","name":"domain_idn","children":[],"call":["DomainName Punycode  decode_hostname "]}," DomainName hostname_idn":{"type":"method","name":"hostname_idn","children":[],"call":["DomainName Punycode  decode_hostname "]}}