{" Cliver assert":{"type":"method","name":"assert","children":[],"call":[]}," Cliver Assertion installed_version":{"type":"method","name":"installed_version","children":[],"call":["Gem Version  new ","match [] ","@version_matcher match ","Open3  capture2e "," raise ","(str \"found \") + ","@detector to_proc call tap ","@detector to_proc call ","@detector to_proc ","executable_path empty? ","which chomp "," which ","(and\n  (lvar :version_string)\n  (send\n    (lvar :version_string) :[]\n    (const nil :PARSABLE_GEM_VERSION))) tap ","version_string [] ","@filter to_proc call ","@filter to_proc ","(str \"found command-line executable \") + ","@version_matcher match  [] ","@version_@version_matcher match er @version_matcher match  ","which chomp  empty? "," which  empty? ","(and\n  (lvar :@detector to_proc call )\n  (send\n    (lvar :@detector to_proc call ) :[]\n    (const nil :PARSABLE_GEM_VERSION))) tap ","@detector to_proc call  [] "]}," Cliver Assertion assert!":{"type":"method","name":"assert!","children":[],"call":[" raise ","@requirement satisfied_by? "," installed_version ","@requirement satisfied_by? ! ","Gem Version  new ","(str \"expected command-line executable '\") + ","(str \"required command-line executable '\") + "," installed_ installed_version  "]}," Cliver Assertion initialize":{"type":"method","name":"initialize","children":[],"call":["options fetch ","Gem Requirement  new ","executable dup freeze ","executable dup "," raise ","executable [] ","args pop ","args last kind_of? ","args last ","Detector  new ","args empty? ","@filter requirements ","options fetch extend ","args pop  fetch ","options fetch extend  requirements ","args pop  fetch extend "]}," Cliver Detector to_proc":{"type":"method","name":"to_proc","children":[],"call":[" method to_proc "," method "]}," Cliver Detector detect_version":{"type":"method","name":"detect_version","children":[],"call":["ver first ","output scan "," version_pattern ","Open3  capture2e "," version_command ","escaped_command_parts join ","command_parts map ","Shellwords  method "," version_command shelljoin ","output [] "," shell_out_and_capture "," raise ","Cliver Dependency NotFound  new ","(str \"Could not find an executable at given path '\") + + ","(str \"Could not find an executable at given path '\") + ","$? exitstatus == ","$? exitstatus ","capture stderr [] ","capture stderr ","capture stdout [] ","capture stdout ","capture command_found ","ShellCapture  new ","output scan  first "," shell_out_and_capture  scan "," output scan sion_pattern ","Open3  ShellCapture  new 2e "," output scan sion_command ","command_parts map  join ","escaped_ version_command  join "," version_command  map "," output scan sion_command shelljoin "," shell_out_and_capture  [] "," shell_out_and_ShellCapture  new  ","Clioutput scan  Dependency NotFound  new ","ShellCapture  new  stderr [] ","ShellCapture  new  stderr ","ShellCapture  new  stdout [] ","ShellCapture  new  stdout ","ShellCapture  new  command_found "]}," Cliver Detector version_pattern":{"type":"method","name":"version_pattern","children":[],"call":[" raise "]}," Cliver Detector version_command":{"type":"method","name":"version_command","children":[],"call":[" raise "," command_arg "," Array "]}," Cliver Detector new":{"type":"method","name":"new","children":[],"call":[]}," Cliver Default version_command":{"type":"method","name":"version_command","children":[],"call":[" command_arg "]}," Cliver Default command_arg":{"type":"method","name":"command_arg","children":[],"call":[]}," Cliver Default version_pattern":{"type":"method","name":"version_pattern","children":[],"call":[]}," Cliver Default initialize":{"type":"method","name":"initialize","children":[],"call":["args shift ","args first kind_of? ","args first "]}," Cliver Which Windows which":{"type":"method","name":"which","children":[],"call":["File  executable? ","found empty? ","where split find ","where split ","Open3  capture2e "," raise ","Shellwords  escape ","where lines map find ","where lines map ","where lines "]}," Cliver Which Posix which":{"type":"method","name":"which","children":[],"call":["which chomp ","status success? ","Open3  capture2e "," raise ","executable_path empty? ","Shellwords  escape ","which chomp  empty? "]}," Cliver dependency_unmet?":{"type":"method","name":"dependency_unmet?","children":[],"call":["error message ","error class name split last gsub ","error class name split last ","error class name split ","error class name ","error class ","Cliver  assert "]}," Cliver Filter requirements":{"type":"method","name":"requirements","children":[],"call":["req_parts join ","version replace "," call ","req_parts last ","requirement split ","requirements map "," apply ","requirement split  join ","req_parts last  replace ","requirement split  last "]}," Cliver Detector command_arg":{"type":"method","name":"command_arg","children":[],"call":[]}," Cliver Detector initialize":{"type":"method","name":"initialize","children":[],"call":["args shift ","args first kind_of? ","args first ","args empty? ","args pop ","args last kind_of? ","args last "]}," Cliver detect":{"type":"method","name":"detect","children":[],"call":[]}," Cliver detect!":{"type":"method","name":"detect!","children":[],"call":[]}," Cliver Filter apply":{"type":"method","name":"apply","children":[],"call":[" to_proc call "," to_proc "]}," Cliver Detector shell_out_and_capture":{"type":"method","name":"shell_out_and_capture","children":[],"call":[]}," Cliver Detector generate":{"type":"method","name":"generate","children":[],"call":[]}," Cliver Dependency find_executables":{"type":"method","name":"find_executables","children":[],"call":["File  executable? ","File  join ","cmds product map ","cmds product ","@executables first "," strict? ","@path sub split ","@path sub ","ENV  [] ","ENV  fetch split ","ENV  fetch ","ENV  has_key? "," enum_for "," block_given? ","detected_exes << ","detected_exes include? ","File  expand_path ","File  absolute_path? ","lookup_cache add? ","Set  new "," raise ","ArgumentError  new ","paths empty? ","(if\n  (send\n    (const nil :ENV) :has_key?\n    (str \"PATHEXT\"))\n  (send\n    (send\n      (const nil :ENV) :fetch\n      (str \"PATHEXT\")) :split\n    (str \";\"))\n  (array)) << ","File  File  join cutable? ","File  File  expand_path cutable? ","@executables first  product map ","@executables first  product ","@File  join cutables first ","@File  expand_path cutables first ","detected_File  join s << ","detected_File  expand_path s << ","detected_File  join s include? ","detected_File  expand_path s include? ","Set  new  add? ","@path sub split  empty? "]}," Cliver Dependency detect_version":{"type":"method","name":"detect_version","children":[],"call":[" raise ","(str \"The detector \") + ","@detector to_proc call ","@detector to_proc "]}," Cliver Dependency strict?":{"type":"method","name":"strict?","children":[],"call":[" | "]}," Cliver Dependency requirements_description":{"type":"method","name":"requirements_description","children":[],"call":["(send\n  (ivar :@requirement) :map) join ","@requirement map "]}," Cliver Dependency executable_description":{"type":"method","name":"executable_description","children":[],"call":["quoted_exes join ","quoted_exes pop ","quoted_exes first ","quoted_exes size == ","quoted_exes size ","@executables map "]}," Cliver Dependency raise_version_mismatch!":{"type":"method","name":"raise_version_mismatch!","children":[],"call":[" raise ","Dependency VersionMismatch  new ","installed inspect "," requirements_description "," executable_description ","(str \"Could not find an executable \") + + ","(str \"Could not find an executable \") + "]}," Cliver Dependency raise_not_found!":{"type":"method","name":"raise_not_found!","children":[],"call":[" raise ","Dependency NotFound  new "]}," Cliver Dependency requirement_satisfied_by?":{"type":"method","name":"requirement_satisfied_by?","children":[],"call":[" filtered_requirement satisfied_by? ","Gem Version  new "," filtered_requirement "," raise ","@filter apply [] ","@filter apply "]}," Cliver Dependency filtered_requirement":{"type":"method","name":"filtered_requirement","children":[],"call":["Gem Requirement  new ","@filter requirements "]}," Cliver Dependency detect!":{"type":"method","name":"detect!","children":[],"call":[" raise_version_mismatch! "," raise_not_found! ","installed empty? "," strict? "," requirement_satisfied_by? ","installed []= "," installed_versions each "," installed_versions ","ENV  [] "]}," Cliver Dependency detect":{"type":"method","name":"detect","children":[],"call":[" detect! "]}," Cliver Dependency installed_versions":{"type":"method","name":"installed_versions","children":[],"call":[" detect_version "," find_executables each "," find_executables "," enum_for "," block_given? "," detect_ detect_version  "]}," Cliver Dependency initialize":{"type":"method","name":"initialize","children":[],"call":["args empty? "," Array dup freeze "," Array dup "," Array ","options fetch ","options fetch extend ","Detector  generate ","options [] ","args pop ","args last kind_of? ","args last "," check_compatibility! ","args pop  fetch ","args pop  fetch extend ","args pop  [] "]}," File absolute_path?":{"type":"method","name":"absolute_path?","children":[],"call":[]}," Cliver verify!":{"type":"method","name":"verify!","children":[],"call":[]}," Cliver Dependency check_compatibility!":{"type":"method","name":"check_compatibility!","children":[],"call":[" raise ","File  absolute_path? ! ","File  absolute_path? ","exe [] ","@executables any? "]}," Cliver ShellCapture initialize":{"type":"method","name":"initialize","children":[],"call":["@stderr =~ ","e read chomp ","e read ","o read chomp ","o read ","Open3  popen3 ","command shelljoin ","command kind_of? ","e read chomp  =~ ","command shelljoin  shelljoin ","command shelljoin  kind_of? "]}}