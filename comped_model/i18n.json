{" I18n normalize_translation_keys":{"type":"method","name":"normalize_translation_keys","children":[],"call":["k to_sym ","keys flatten map ","keys flatten ","k to_s split ","k to_s ","keys map ","(lvar :locale) + + ","(lvar :locale) + "," Array ","I18n  default_separator ","keys flatten - "," normalize_keys "," puts ","(lvar :locale) + +  flatten map ","keys flatten -  flatten map ","(lvar :locale) + +  flatten ","keys flatten -  flatten ","(lvar :locale) + +  map ","keys flatten -  map ","(lvar :locale) + +  flatten - ","keys flatten -  flatten - "," normalize_(lvar :locale) + +  "," normalize_keys flatten -  "]}," I18n default_exception_handler":{"type":"method","name":"default_exception_handler","children":[],"call":[" raise ","exception message ","MissingTranslationData  === "," puts ","I18n.default_exception_handler is deprecated. Please use the class I18n::ExceptionHandler instead  + ","exception is_a? "]}," I18n localize":{"type":"method","name":"localize","children":[],"call":[" backend localize "," backend ","options [] ","I18n  locale ","options delete "," config backend localize "," config backend "," config "," config locale "," enforce_available_locales! ","options dup ","options dup  [] ","options dup  delete ","options dup  dup "]}," I18n translate":{"type":"method","name":"translate","children":[],"call":[" send "," raise ","options [] "," backend translate "," backend ","I18n  locale ","options delete ","args shift ","args pop ","args last is_a? ","args last "," handle_exception ","options key? "," config backend translate "," config backend "," config "," config locale ","backend translate ","key map ","key is_a? ","key empty? "," enforce_available_locales! ","result is_a? "," catch ","args pop dup ","args pop  [] ","args pop dup  [] ","  config backend  translate ","  config backend  ","I18n  I18n  locale  ","I18n  options delete  ","args pop  delete ","args pop dup  delete ","options args shift ? ","args pop  key? ","args pop dup  key? "," config  config backend  translate "," config  config backend  "," config I18n  locale  "," config options delete  "," config backend  translate ","args shift  map ","args shift  is_a? ","args shift  empty? "," enforce_available_I18n  locale s! "," enforce_available_options delete s! "]}," I18n store_translations":{"type":"method","name":"store_translations","children":[],"call":[" backend store_translations "," backend "]}," I18n load_translations":{"type":"method","name":"load_translations","children":[],"call":[" backend load_translations "," backend "]}," I18n populate":{"type":"method","name":"populate","children":[],"call":[" backend populate "," backend "]}," I18n exception_handler=":{"type":"method","name":"exception_handler=","children":[],"call":[]}," I18n locale=":{"type":"method","name":"locale=","children":[],"call":["Thread  current []= ","Thread  current ","locale to_sym "]}," I18n locale":{"type":"method","name":"locale","children":[],"call":[" default_locale ","Thread  current [] ","Thread  current "]}," I18n default_locale=":{"type":"method","name":"default_locale=","children":[],"call":["locale to_sym "]}," I18n default_locale":{"type":"method","name":"default_locale","children":[],"call":[]}," I18n backend=":{"type":"method","name":"backend=","children":[],"call":[]}," I18n backend":{"type":"method","name":"backend","children":[],"call":["Backend Simple  new "]}," I18n UnknownFileType initialize":{"type":"method","name":"initialize","children":[],"call":[]}," I18n ReservedInterpolationKey initialize":{"type":"method","name":"initialize","children":[],"call":["string inspect ","key inspect "]}," I18n MissingInterpolationArgument initialize":{"type":"method","name":"initialize","children":[],"call":["string inspect ","values inspect ","key inspect "]}," I18n InvalidPluralizationData initialize":{"type":"method","name":"initialize","children":[],"call":["entry inspect "]}," I18n MissingTranslationData initialize":{"type":"method","name":"initialize","children":[],"call":["keys join ","keys << ","keys size < ","keys size ","I18n  send ","options [] "," options [] "," options ","I18n  normalize_keys "," options []= ","v inspect ","v is_a? "," options each ","opts dup "," keys join "," keys ","I18n  send  join ","I18n  normalize_keys  join ","I18n  send  << ","I18n  normalize_keys  << ","I18n  send  size < ","I18n  normalize_keys  size < ","I18n  send  size ","I18n  normalize_keys  size ","I18n  normalize_I18n  send  ","I18n  normalize_I18n  normalize_keys  "," I18n  send  join "," I18n  normalize_keys  join "," I18n  send  "," I18n  normalize_keys  "]}," I18n InvalidLocale initialize":{"type":"method","name":"initialize","children":[],"call":["locale inspect "]}," I18n Backend Simple deep_symbolize_keys":{"type":"method","name":"deep_symbolize_keys","children":[],"call":["result []= ","key to_sym "," deep_symbolize_keys ","value is_a? ","hash inject "," deep_symbolize_keys  is_a? "]}," I18n Backend Simple merge_translations":{"type":"method","name":"merge_translations","children":[],"call":[" translations [] merge! "," translations [] "," translations ","v1 merge ","Hash  === "," proc "," deep_symbolize_keys ","locale to_sym ","locale to_sym  to_sym "]}," I18n Backend Simple load_yml":{"type":"method","name":"load_yml","children":[],"call":["YAML  load ","IO  read "]}," I18n Backend Simple load_rb":{"type":"method","name":"load_rb","children":[],"call":[" eval "," binding ","IO  read "]}," I18n Backend Simple load_file":{"type":"method","name":"load_file","children":[],"call":[" merge_translations ","data each "," send "," raise ","UnknownFileType  new "," respond_to? ","File  extname tr downcase ","File  extname tr ","File  extname "," send  each "]}," I18n Backend Simple interpolate":{"type":"method","name":"interpolate","children":[],"call":["result force_encoding ","s string ","s unscan ","s string []= ","values [] to_s ","values [] ","key to_sym "," raise ","MissingInterpolationArgument  new ","values has_key? ","ReservedInterpolationKey  new ","(str \"scope\") include? ","s pos - ","s pos ","s scan_until [] ","s scan_until ","s pre_match [] == ","s pre_match [] ","s pre_match ","s skip_until ","StringScanner  new ","string force_encoding ","string encoding ","string respond_to? ","string gsub gsub ","string gsub ","string is_a? ! ","string is_a? ","(send\n  (lvar :string) :gsub\n  (const nil :INTERPOLATION_SYNTAX_PATTERN)) % ","RESERVED_KEYS  include? ","2 to_sym ","values empty? ! ","values empty? ","s string  force_encoding ","reStringScanner  new ult force_encoding ","StringScanner  new  StringScanner  new tring ","s string gsub gsub  ","StringScanner  new  unStringScanner  new can ","StringScanner  new  StringScanner  new tring []= ","s string gsub gsub  []= ","valueStringScanner  new  [] to_StringScanner  new  ","valueStringScanner  new  [] ","s scan_until []  to_sym ","key to_StringScanner  new ym "," raiStringScanner  new e ","MiStringScanner  new StringScanner  new ingInterpolationArgument  new ","values has_s scan_until [] ? ","valueStringScanner  new  haStringScanner  new _key? ","ReStringScanner  new ervedInterpolationKey  new ","(StringScanner  new tr \"StringScanner  new cope\") include? ","StringScanner  new  poStringScanner  new  - ","StringScanner  new  poStringScanner  new  ","StringScanner  new  StringScanner  new can_until [] ","StringScanner  new  StringScanner  new can_until ","StringScanner  new  pre_match [] == ","StringScanner  new  pre_match [] ","StringScanner  new  pre_match ","StringScanner  new  StringScanner  new kip_until ","StringScanner  new tring force_encoding ","string gsub gsub  force_encoding ","StringScanner  new tring encoding ","string gsub gsub  encoding ","StringScanner  new tring reStringScanner  new pond_to? ","string gsub gsub  respond_to? ","StringScanner  new tring gStringScanner  new ub gStringScanner  new ub ","string gsub gsub  gsub gsub ","StringScanner  new tring gStringScanner  new ub ","string gsub gsub  gsub ","StringScanner  new tring iStringScanner  new _a? ! ","string gsub gsub  is_a? ! ","StringScanner  new tring iStringScanner  new _a? ","string gsub gsub  is_a? ","(StringScanner  new end\n  (lvar :StringScanner  new tring) :gStringScanner  new ub\n  (conStringScanner  new t nil :INTERPOLATION_SYNTAX_PATTERN)) % ","(send\n  (lvar :string gsub gsub ) :gsub\n  (const nil :INTERPOLATION_SYNTAX_PATTERN)) % ","2 to_StringScanner  new ym ","valueStringScanner  new  empty? ! ","valueStringScanner  new  empty? "]}," I18n Backend Simple pluralize":{"type":"method","name":"pluralize","children":[],"call":["entry [] "," raise ","InvalidPluralizationData  new ","entry has_key? ","count == ","entry is_a? "]}," I18n Backend Simple default":{"type":"method","name":"default","children":[],"call":[" default ","options dup ","default each "," translate "," resolve ","subject each ","key == ","options dup reject "]}," I18n Backend Simple lookup":{"type":"method","name":"lookup","children":[],"call":["result [] ","k to_sym ","keys inject "," translations ","I18n  send ","(lvasgn :x\n  (send\n    (lvar :result) :[]\n    (send\n      (lvar :k) :to_sym))) nil? "," init_translations "," initialized? ","I18n  send  inject ","(lvasgn :result [] \n  (send\n    (lvar :result) :[]\n    (send\n      (lvar :k) :to_sym))) nil? "]}," I18n Backend Simple translations":{"type":"method","name":"translations","children":[],"call":[]}," I18n Backend Simple localize":{"type":"method","name":"localize","children":[],"call":["object strftime ","format gsub! "," translate ","object hour < ","object hour ","object respond_to? "," translate [] ","object mon ","object wday ","format to_s dup ","format to_s ","formats [] ","format to_sym "," raise ","object inspect ","format include? "," resolve ","options merge "," lookup ","Symbol  === ","format dup ","format to_s dup  gsub! ","formats []  gsub! "," resolve  gsub! "," lookup  gsub! ","format dup  gsub! ","format to_s dup  to_s dup ","formats []  to_s dup "," resolve  to_s dup "," lookup  to_s dup ","format dup  to_s dup ","format to_s dup  to_s ","formats []  to_s "," resolve  to_s "," lookup  to_s ","format dup  to_s ","format to_s dup s [] ","formats [] s [] "," resolve s [] "," lookup s [] ","format dup s [] "," translate  [] ","format to_s dup  to_sym ","formats []  to_sym "," resolve  to_sym "," lookup  to_sym ","format dup  to_sym ","format to_s dup  include? ","formats []  include? "," resolve  include? "," lookup  include? ","format dup  include? ","format to_s dup  dup ","formats []  dup "," resolve  dup "," lookup  dup ","format dup  dup "]}," I18n Backend Simple translate":{"type":"method","name":"translate","children":[],"call":[" interpolate "," pluralize "," raise ","I18n MissingTranslationData  new "," default "," lookup ","reserved include? ","options reject ","options delete ","options values_at "," translate ","key map ","key is_a? ","InvalidLocale  new ","locale nil? ","entry nil? "," resolve ","RESERVED_KEYS  include? "," interpolate  nil? "," pluralize  nil? "," resolve  nil? "," default  nil? "," lookup  nil? "]}," I18n Backend Simple store_translations":{"type":"method","name":"store_translations","children":[],"call":[" merge_translations "]}," I18n Backend Simple load_translations":{"type":"method","name":"load_translations","children":[],"call":[" load_file ","filenames each "]}," I18n Backend Simple populate":{"type":"method","name":"populate","children":[],"call":[]}," I18n reload!":{"type":"method","name":"reload!","children":[],"call":[" backend reload! "," backend "," config backend reload! "," config backend "," config "," config clear_available_locales_set "]}," I18n load_path=":{"type":"method","name":"load_path=","children":[],"call":[]}," I18n load_path":{"type":"method","name":"load_path","children":[],"call":[]}," I18n default_separator=":{"type":"method","name":"default_separator=","children":[],"call":[]}," I18n default_separator":{"type":"method","name":"default_separator","children":[],"call":[]}," I18n available_locales":{"type":"method","name":"available_locales","children":[],"call":[" backend available_locales "," backend "]}," String %":{"type":"method","name":"%","children":[],"call":["result send "," gsub "," raise ","ArgumentError  new "," =~ ","args [] "," sprintf ","args has_key? ","(or\n  (nth-ref 1)\n  (nth-ref 2)) to_sym ","match == "," dup gsub "," dup ","args kind_of? "," gsub  send ","args has_(or\n  (nth-ref 1)\n  (nth-ref 2)) to_sym ? "]}," KeyError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," I18n Backend Simple flatten_once":{"type":"method","name":"flatten_once","children":[],"call":["result push "]}," I18n Backend Simple resolve":{"type":"method","name":"resolve","children":[],"call":[" resolve ","subject call "," translate "]}," I18n Backend Simple init_translations":{"type":"method","name":"init_translations","children":[],"call":[" load_translations ","I18n  load_path flatten ","I18n  load_path "]}," I18n Backend Simple reload!":{"type":"method","name":"reload!","children":[],"call":[]}," I18n Backend Simple available_locales":{"type":"method","name":"available_locales","children":[],"call":[" translations keys "," translations "," init_translations "," initialized? "]}," I18n Backend Simple initialized?":{"type":"method","name":"initialized?","children":[],"call":[]}," I18n handle_exception":{"type":"method","name":"handle_exception","children":[],"call":["@@exception_handler call "," send "," config exception_handler call "," config exception_handler "," config ","handler call ","options [] "," throw "," raise ","exception to_exception ","exception respond_to? "]}," I18n translate!":{"type":"method","name":"translate!","children":[],"call":[" translate ","options merge "]}," I18n available_locales=":{"type":"method","name":"available_locales=","children":[],"call":[]}," I18n Locale Tag tag":{"type":"method","name":"tag","children":[],"call":[" implementation tag "," implementation "]}," I18n Locale Tag implementation=":{"type":"method","name":"implementation=","children":[],"call":[]}," I18n Locale Tag implementation":{"type":"method","name":"implementation","children":[],"call":[]}," I18n Locale Tag Simple to_a":{"type":"method","name":"to_a","children":[],"call":[" subtags "]}," I18n Locale Tag Simple to_s":{"type":"method","name":"to_s","children":[],"call":[" tag to_s "," tag "]}," I18n Locale Tag Simple to_sym":{"type":"method","name":"to_sym","children":[],"call":[" tag "]}," I18n Locale Tag Simple subtags":{"type":"method","name":"subtags","children":[],"call":["subtag to_s "," tag to_s split map "," tag to_s split "," tag to_s "," tag "," tag to_s split map! "]}," I18n Locale Tag Simple initialize":{"type":"method","name":"initialize","children":[],"call":["tag join to_sym ","tag join "]}," I18n Locale Tag Simple tag":{"type":"method","name":"tag","children":[],"call":[" new "]}," I18n Locale Tag Rfc4646 Parser match":{"type":"method","name":"match","children":[],"call":["c [] << << ","c [] ","c [] << ","c [] nil? ","PATTERN  match captures ","PATTERN  match ","tag to_s ","PATTERN  match captures  [] << << ","PATTERN  match captures  [] ","PATTERN  match captures  [] << ","PATTERN  match captures  [] nil? ","PATTERN  matPATTERN  match captures h PATTERN  match captures aptures ","PATTERN  matPATTERN  match captures h "]}," I18n Locale Tag Rfc4646 to_a":{"type":"method","name":"to_a","children":[],"call":[" send "," members collect "," members "]}," I18n Locale Tag Rfc4646 to_s":{"type":"method","name":"to_s","children":[],"call":[" to_a compact join "," to_a compact "," to_a "]}," I18n Locale Tag Rfc4646 to_sym":{"type":"method","name":"to_sym","children":[],"call":[" to_s to_sym "," to_s "]}," I18n Locale Tag Rfc4646 parser=":{"type":"method","name":"parser=","children":[],"call":[]}," I18n Locale Tag Rfc4646 parser":{"type":"method","name":"parser","children":[],"call":[]}," I18n Locale Tag Rfc4646 tag":{"type":"method","name":"tag","children":[],"call":[" new "," parser match "," parser "]}," I18n Locale Tag Parents parents":{"type":"method","name":"parents","children":[],"call":["(send\n  (array\n    (send nil :parent)) :+\n  (begin\n    (if\n      (send nil :parent)\n      (send\n        (send nil :parent) :parents)\n      (array)))) compact ","(send nil :parent) + "," parent parents "," parent ","(send nil :parent) concat "]}," I18n Locale Tag Parents self_and_parents":{"type":"method","name":"self_and_parents","children":[],"call":["(self) + "," parents ","(self) concat "]}," I18n Locale Tag Parents parent":{"type":"method","name":"parent","children":[],"call":[" class tag ","segs [] join ","segs [] ","segs length - ","segs length "," class ","segs length > "," to_a compact "," to_a ","segs compact! "," to_a compact  [] join "," to_a  [] join "," to_a compact  [] "," to_a  [] "," to_a compact  length - "," to_a  length - "," to_a compact  length "," to_a  length "," to_a compact  length > "," to_a  length > "," to_a compact  compact! "," to_a  compact! "]}," I18n Locale Fallbacks compute":{"type":"method","name":"compute","children":[],"call":["result uniq ","result push "," defaults ","(send\n  (send nil :Array\n    (lvar :tags)) :collect) flatten "," compute ","@map [] ","tags each ","t to_sym ","I18n Locale Tag  tag self_and_parents map! ","I18n Locale Tag  tag self_and_parents ","I18n Locale Tag  tag "," Array collect "," Array ","result uniq compact ","exclude + ","(send\n  (send\n    (send\n      (const\n        (const\n          (const nil :I18n) :Locale) :Tag) :tag\n      (lvar :tag)) :self_and_parents) :map!) - ","result compact! ","result uniq! "," Array flat_map ","(send\n  (send nil :Array\n    (lvar :tags)) :collect) flatten  uniq ","(send\n  (send nil :Array\n    (lvar :tags)) :collect) flatten  push ","(send\n  (send nil :Array\n    (lvar :(send\n  (send\n    (send\n      (const\n        (const\n          (const nil :I18n) :Locale) :Tag) :tag\n      (lvar :tag)) :self_and_parents) :map!) - )) :collect) flatten ","(send\n  (send\n    (send\n      (const\n        (const\n          (const nil :I18n) :Locale) :Tag) :tag\n      (lvar :tag)) :self_and_parents) :map!) -  each ","(send\n  (send nil :Array\n    (lvar :tags)) :collect) flatten  uniq compact ","(send\n  (send nil :Array\n    (lvar :tags)) :collect) flatten  compact! ","(send\n  (send nil :Array\n    (lvar :tags)) :collect) flatten  uniq! "]}," I18n Locale Fallbacks map":{"type":"method","name":"map","children":[],"call":["@map [] << ","to to_sym ","@map [] ","to each "," Array ","from to_sym ","mappings each ","_to to_sym ","@map map ","args first "," block_given? ! "," block_given? ","args count == ","args count ","args first  each "]}," I18n Locale Fallbacks []":{"type":"method","name":"[]","children":[],"call":[" store "," compute ","locale to_sym "," raise ","InvalidLocale  new ","locale nil? ","Disabled  new ","locale == ","locale to_sym  to_sym ","locale to_sym  nil? ","locale to_sym  == "]}," I18n Locale Fallbacks defaults=":{"type":"method","name":"defaults=","children":[],"call":["(send\n  (lvar :defaults) :map) flatten "," compute ","defaults map ","defaults flat_map "]}," I18n Locale Fallbacks initialize":{"type":"method","name":"initialize","children":[],"call":[" defaults= ","I18n  default_locale to_sym ","I18n  default_locale ","mappings empty? "," map ","mappings pop ","mappings last is_a? ","mappings last ","args empty? ","args pop ","args last is_a? ","args last "]}," I18n Helpers Gettext npgettext":{"type":"method","name":"npgettext","children":[],"call":[" nsgettext ","(lvar :msgctxt) join ","msgid [] ","msgid is_a? ","(lvar :msgctxt) join  [] ","(lvar :msgctxt) join  is_a? "]}," I18n Helpers Gettext nsgettext":{"type":"method","name":"nsgettext","children":[],"call":["I18n  t ","I18n Gettext  extract_scope ","separator is_a? ","msgid [] ","msgid is_a? "]}," I18n Helpers Gettext ngettext":{"type":"method","name":"ngettext","children":[],"call":[" nsgettext "]}," I18n Helpers Gettext pgettext":{"type":"method","name":"pgettext","children":[],"call":[" sgettext ","(lvar :msgctxt) join "]}," I18n Helpers Gettext sgettext":{"type":"method","name":"sgettext","children":[],"call":["I18n  t ","I18n Gettext  extract_scope "]}," I18n Helpers Gettext gettext":{"type":"method","name":"gettext","children":[],"call":["I18n  t ","(pair\n  (sym :default)\n  (lvar :msgid)) merge "]}," I18n Gettext extract_scope":{"type":"method","name":"extract_scope","children":[],"call":["scope pop ","msgid to_s split ","msgid to_s ","msgid to_s split  pop ","scope pop  to_s split ","scope pop  to_s "]}," I18n Gettext plural_keys":{"type":"method","name":"plural_keys","children":[],"call":["@@plural_keys [] ","args first ","args empty? "]}," meta_class":{"type":"method","name":"meta_class","children":[],"call":[]}," I18n Backend Pluralization pluralizer":{"type":"method","name":"pluralizer","children":[],"call":[" lookup "," pluralizers [] "," pluralizers ","I18n  t "]}," I18n Backend Pluralization pluralizers":{"type":"method","name":"pluralizers","children":[],"call":[]}," I18n Backend Pluralization pluralize":{"type":"method","name":"pluralize","children":[],"call":["entry [] "," raise ","InvalidPluralizationData  new ","entry has_key? ","pluralizer call ","count == ","pluralizer respond_to? "," pluralizer ","entry is_a? "," symbolic_count ","v is_a? ","entry values none? ","entry values ","entry has_pluralizer call ? "," pluralizer  call "," pluralizer  respond_to? ","  pluralizer  ","entry  raise s none? ","entry entry [] s none? ","entry  raise s ","entry entry [] s "]}," I18n Backend Metadata preserve_translation_metadata":{"type":"method","name":"preserve_translation_metadata","children":[],"call":["result translation_metadata= ","object translation_metadata "]}," I18n Backend Metadata with_metadata":{"type":"method","name":"with_metadata","children":[],"call":["result translation_metadata= ","result translation_metadata merge ","result translation_metadata "]}," I18n Backend Metadata pluralize":{"type":"method","name":"pluralize","children":[],"call":[" with_metadata "]}," I18n Backend Metadata interpolate":{"type":"method","name":"interpolate","children":[],"call":[" preserve_translation_metadata "," with_metadata ","entry translation_metadata merge ","entry translation_metadata "," preserve_translation_entry translation_metadata merge  "," with_entry translation_metadata merge  ","entry translation_entry translation_metadata merge  merge ","entry translation_entry translation_metadata merge  "]}," I18n Backend Metadata translate":{"type":"method","name":"translate","children":[],"call":[" with_metadata ","Base RESERVED_KEYS  include? ","options reject ","options [] ","RESERVED_KEYS  include? "]}," I18n Backend Metadata included":{"type":"method","name":"included","children":[{"type":"method","name":"translation_metadata","children":[],"asgn":[null],"call":[]},{"type":"method","name":"translation_metadata=","children":[],"asgn":[null],"call":[]}],"call":["Object  class_eval ","Object  method_defined? "," frozen? "]}," I18n Backend Helpers unwind_keys":{"type":"method","name":"unwind_keys","children":[],"call":["curr []= ","keys shift ","curr [] ","keys size > ","keys size ","key split ","hash each ","key to_s split ","key to_s ","key split  shift ","key to_s split  shift ","key split  size > ","key to_s split  size > ","key split  size ","key to_s split  size "]}," I18n Backend Helpers wind_keys":{"type":"method","name":"wind_keys","children":[],"call":["result []= "," wind_keys ","value is_a? ","(lvar :prev_key) compact join ","(lvar :prev_key) compact ","hash inject "," hash_lookup ","(lvar :prev_key) compact join to_sym "," escape_default_separator ","hash each_pair ","I18n  default_separator "," unescape_default_separator "," wind_ escape_default_separator s ","(lvar :prev_ escape_default_separator ) compact join ","(lvar :prev_ escape_default_separator ) compact ","(lvar :prev_ escape_default_separator ) compact join to_sym "]}," I18n Backend Helpers deep_symbolize_keys":{"type":"method","name":"deep_symbolize_keys","children":[],"call":["result []= ","key to_sym "," deep_symbolize_keys ","value is_a? ","hash inject "," deep_symbolize_keys  is_a? "]}," I18n Backend Gettext normalize_pluralization":{"type":"method","name":"normalize_pluralization","children":[],"call":["result []= ","keys [] ","values each_with_index "," raise ","keys inspect ","values size ","values size != ","keys size ","value split ","I18n Gettext  plural_keys ","key gsub split first ","key gsub split ","key gsub ","values inspect ","key inspect ","I18n Gettext  plural_keys  [] ","key gsub split first s [] ","value split  each_with_index ","I18n Gettext  plural_keys  inspect ","key gsub split first s inspect ","value split  size ","value split  size != ","I18n Gettext  plural_keys  size ","key gsub split first s size ","I18n Gettext  plural_I18n Gettext  plural_keys  ","I18n Gettext  plural_key gsub split first s ","key gsub split first  gsub split first ","key gsub split first  gsub split ","key gsub split first  gsub ","value split  inspect ","key gsub split first  inspect "]}," I18n Backend Gettext normalize":{"type":"method","name":"normalize","children":[],"call":["result merge! ","v1 merge ","Hash  === "," proc ","normalized empty? ","parts inject ","key split reverse ","key split "," normalize_pluralization ","key index ","key blank? ","data inject ","key empty? ","key nil? ","result deep_merge! ","_normalized empty? ","key gsub ","Utils  deep_merge! ","key split reverse  inject ","key gsub  split reverse ","key gsub  split ","key gsub  index ","key gsub  blank? ","key gsub  empty? ","key gsub  nil? ","key gsub  gsub "]}," I18n Backend Gettext parse":{"type":"method","name":"parse","children":[],"call":["GetText PoParser  new parse ","PoData  new "," File  read ","GetText PoParser  new "]}," I18n Backend Gettext load_po":{"type":"method","name":"load_po","children":[],"call":[" normalize "," parse "," File  basename to_sym "," File  basename "]}," I18n Backend Gettext PoData set_comment":{"type":"method","name":"set_comment","children":[],"call":[]}," I18n Backend Fallbacks translate":{"type":"method","name":"translate","children":[],"call":[" raise ","I18n MissingTranslationData  new ","I18n  fallbacks [] each ","I18n  fallbacks [] ","I18n  fallbacks ","result nil? ","options merge "," extract_string_default! ","options [] ","options delete ","options []= "," extract_string_or_lambda_default! "," throw ","I18n MissingTranslation  new "," catch "," extract_non_symbol_default! ","result nil? ! ","options [] nil? ","options key? ","options fetch "," on_fallback ","locale to_s != ","fallback to_s ","locale to_s ","locale != "," extract_string_ extract_string_default! ! "," extract_string_ extract_string_or_lambda_default! ! "," extract_string_ extract_non_symbol_default! ! "," extract_string_or_lambda_ extract_string_default! ! "," extract_string_or_lambda_ extract_string_or_lambda_default! ! "," extract_string_or_lambda_ extract_non_symbol_default! ! "," extract_non_symbol_ extract_string_default! ! "," extract_non_symbol_ extract_string_or_lambda_default! ! "," extract_non_symbol_ extract_non_symbol_default! ! "]}," I18n fallbacks=":{"type":"method","name":"fallbacks=","children":[],"call":["Thread  current []= ","Thread  current ","I18n Locale Fallbacks  new ","fallbacks is_a? "]}," I18n fallbacks":{"type":"method","name":"fallbacks","children":[],"call":["I18n Locale Fallbacks  new ","Thread  current [] ","Thread  current "]}," I18n Backend Chain namespace_lookup?":{"type":"method","name":"namespace_lookup?","children":[],"call":["options has_key? ! ","options has_key? ","result is_a? "]}," I18n Backend Chain localize":{"type":"method","name":"localize","children":[],"call":["backend localize "," backends each "," backends "," raise ","I18n MissingTranslationData  new "]}," I18n Backend Chain translate":{"type":"method","name":"translate","children":[],"call":[" raise ","I18n MissingTranslationData  new ","namespace empty? ","namespace update "," namespace_lookup? ","backend translate ","options update ","backend == "," backends last "," backends "," backends each ","options delete "," translate ","key map ","key is_a? ","translation nil? ! ","translation nil? ","backend translate  nil? ! ","backend translate  nil? "]}," I18n Backend Chain available_locales":{"type":"method","name":"available_locales","children":[],"call":["(send\n  (send nil :backends) :map) flatten uniq ","(send\n  (send nil :backends) :map) flatten ","backend available_locales "," backends map "," backends "]}," I18n Backend Chain store_translations":{"type":"method","name":"store_translations","children":[],"call":[" backends first store_translations "," backends first "," backends "]}," I18n Backend Chain reload!":{"type":"method","name":"reload!","children":[],"call":["backend reload! "," backends each "," backends "]}," I18n Backend Chain initialize":{"type":"method","name":"initialize","children":[],"call":[" backends= "]}," I18n Backend Cache cache_key":{"type":"method","name":"cache_key","children":[],"call":["keys compact join ","keys compact ","args hash ","I18n  cache_namespace ","args inspect ","RUBY_VERSION  >= ","options hash ","options inspect hash ","options inspect ","key hash "," digest_item ","args args inspect  ","args args hash  ","options args inspect  ","options args hash  ","options inspect args inspect  ","options inspect args hash  ","key args inspect  ","key args hash  "]}," I18n Backend Cache fetch":{"type":"method","name":"fetch","children":[],"call":[" raise ","I18n  cache_store write "," cache_key ","I18n  cache_store ","result is_a? ","I18n  cache_store fetch ","result dup ","result frozen? "," fetch_storing_missing_translation_exception "," throw "," _fetch ","I18n  cache_store fetch  is_a? ","result dup  is_a? "," fetch_storing_missing_translation_exception  is_a? "," _fetch  is_a? ","I18n  cache_store fetch  dup ","result dup  dup "," fetch_storing_missing_translation_exception  dup "," _fetch  dup ","I18n  cache_store fetch  frozen? ","result dup  frozen? "," fetch_storing_missing_translation_exception  frozen? "," _fetch  frozen? "]}," I18n Backend Cache translate":{"type":"method","name":"translate","children":[],"call":[" fetch ","I18n  perform_caching? "," cache_key "]}," I18n perform_caching?":{"type":"method","name":"perform_caching?","children":[],"call":[" cache_store nil? ! "," cache_store nil? "," cache_store "]}," I18n cache_namespace=":{"type":"method","name":"cache_namespace=","children":[],"call":[]}," I18n cache_namespace":{"type":"method","name":"cache_namespace","children":[],"call":[]}," I18n cache_store=":{"type":"method","name":"cache_store=","children":[],"call":[]}," I18n cache_store":{"type":"method","name":"cache_store","children":[],"call":[]}," I18n Backend Base merge_translations":{"type":"method","name":"merge_translations","children":[],"call":[" translations [] merge! "," translations [] "," translations ","v1 merge ","Hash  === "," proc "," deep_symbolize_keys ","locale to_sym "," unwind_keys ","I18n  default_separator ","options [] "," deep_merge_hash! ","locale to_sym  to_sym "]}," I18n Backend Base load_yml":{"type":"method","name":"load_yml","children":[],"call":["YAML  load ","IO  read ","YAML  load_file "," raise ","InvalidLocaleData  new ","e inspect ","YAML  unsafe_load_file ","YAML  respond_to? "]}," I18n Backend Base load_rb":{"type":"method","name":"load_rb","children":[],"call":[" eval "," binding ","IO  read "]}," I18n Backend Base load_file":{"type":"method","name":"load_file","children":[],"call":[" merge_translations ","data each "," send "," raise ","UnknownFileType  new "," respond_to? ","File  extname tr downcase ","File  extname tr ","File  extname "," store_translations ","InvalidLocaleData  new ","data is_a? "," send  each "," send  is_a? "]}," I18n Backend Base interpolate_lambda?":{"type":"method","name":"interpolate_lambda?","children":[],"call":["string =~ ","object respond_to? "]}," I18n Backend Base interpolate":{"type":"method","name":"interpolate","children":[],"call":[" raise ","MissingInterpolationArgument  new ","s % ","values []= ","value call "," interpolate_lambda? ","values each ","ReservedInterpolationKey  new ","RESERVED_KEYS  include? ","2 to_sym ","string gsub ","values empty? ! ","values empty? ","string is_a? ","value to_s ","value is_a? "," preserve_encoding ","1 to_sym ","string =~ ","string % "," warn_syntax_deprecation! ","values delete ","keys include? ","key to_s ","keys empty? ","string scan flatten ","string scan ","values dup ","I18n  interpolate "," interpolate ","subject map ","value to_s s []= ","value call s []= ","value to_s  call ","value call  call ","value to_s s each ","value call s each ","value to_s s empty? ! ","value call s empty? ! ","value to_s s empty? ","value call s empty? ","value to_s  to_s ","value call  to_s ","value to_s  is_a? ","value call  is_a? ","value to_s s delete ","value call s delete ","string scan flatten  include? ","string scan flatten  empty? ","value to_s s dup ","value call s dup "]}," I18n Backend Base pluralize":{"type":"method","name":"pluralize","children":[],"call":["entry [] "," raise ","InvalidPluralizationData  new ","entry has_key? ","count == ","entry is_a? "," pluralization_key ","v is_a? ","entry values none? ","entry values ","k == ","entry reject ","entry has_ pluralization_key ? "," pluralization_ pluralization_key  "]}," I18n Backend Base resolve":{"type":"method","name":"resolve","children":[],"call":[" resolve ","subject call ","I18n  translate ","options merge ","(or\n  (lvar :options)\n  (hash)) merge ","options [] == ","options [] ","options delete ","result is_a? "," catch "]}," I18n Backend Base default":{"type":"method","name":"default","children":[],"call":[" resolve ","subject each ","key == ","options dup reject ","options dup ","result nil? ","options reject ","Utils  except ","options has_key? ","options size == ","options size ","Utils  except  dup reject ","Utils  except  dup "," resolve  nil? ","Utils  except  reject ","Utils  except  has_key? ","Utils  except  size == ","Utils  except  size "]}," I18n Backend Base lookup":{"type":"method","name":"lookup","children":[],"call":["result [] ","result has_key? ","result respond_to? ","key to_sym ","keys inject "," translations ","I18n  send "," init_translations "," initialized? "," resolve ","result is_a? ","I18n  normalize_keys ","options [] ","result dup ","String  === "," raise ","options merge "," resolve  [] ","result []  [] ","result has_key to_sym ? "," resolve  has_key? ","result []  has_key? "," resolve  respond_to? ","result []  respond_to? ","key to_sym  to_sym ","key to_sym s inject ","I18n  send  inject ","I18n  normalize_keys  inject "," resolve  is_a? ","result []  is_a? ","I18n  normalize_key to_sym s ","I18n  normalize_I18n  send  ","I18n  normalize_I18n  normalize_keys  "," resolve  dup ","result []  dup "]}," I18n Backend Base translations":{"type":"method","name":"translations","children":[],"call":[]}," I18n Backend Base init_translations":{"type":"method","name":"init_translations","children":[],"call":[" load_translations ","I18n  load_path flatten ","I18n  load_path "]}," I18n Backend Base reload!":{"type":"method","name":"reload!","children":[],"call":[" eager_load! "," eager_loaded? "]}," I18n Backend Base available_locales":{"type":"method","name":"available_locales","children":[],"call":["locales << ","(send\n  (send\n    (lvar :data) :keys) :-\n  (array\n    (sym :i18n))) empty? ","data keys - ","data keys "," translations inject "," translations "," init_translations "," initialized? "," raise "]}," I18n Backend Base initialized?":{"type":"method","name":"initialized?","children":[],"call":[]}," I18n Backend Base localize":{"type":"method","name":"localize","children":[],"call":["object strftime ","I18n  t ","object hour < ","object hour ","object respond_to? ","I18n  t [] ","object mon ","object wday ","format to_s gsub ","format to_s "," resolve "," raise ","MissingTranslationData  new ","format nil? "," lookup ","Symbol  === ","object inspect ","options merge ","I18n  t downcase ","I18n  t upcase "," translate_localization_format ","options [] ","options include? ","object nil? "," resolve  to_s gsub "," lookup  to_s gsub ","I18n  t  to_s gsub "," translate_localization_format  to_s gsub "," resolve  to_s "," lookup  to_s ","I18n  t  to_s "," translate_localization_format  to_s "," resolve  nil? "," lookup  nil? ","I18n  t  nil? "," translate_localization_format  nil? ","options merge  merge "," translate_localization_ resolve  "," translate_localization_ lookup  "," translate_localization_I18n  t  "," translate_localization_ translate_localization_format  ","options merge  [] ","options merge  include? "]}," I18n Backend Base translate":{"type":"method","name":"translate","children":[],"call":[" interpolate "," pluralize "," raise ","I18n MissingTranslationData  new ","entry nil? "," resolve "," default "," lookup ","RESERVED_KEYS  include? ","options reject ","options values_at "," translate ","key map ","key is_a? ","InvalidLocale  new ","locale nil? ","options empty? ","entry dup ","entry is_a? ","options except ","options [] "," lookup! "," throw ","I18n MissingTranslation  new "," deep_interpolate ","options key? ! ","options key? ","options [] nil? ! ","options [] nil? ","key nil? ","key empty? "," subtrees? ! "," subtrees? ","count ! ","Utils  except "," resolve_entry "," interpolate  nil? "," pluralize  nil? "," resolve  nil? "," default  nil? "," lookup  nil? ","entry dup  nil? "," lookup!  nil? "," deep_interpolate  nil? "," resolve_entry  nil? ","options options except _at ","options Utils  except _at "," interpolate  dup "," pluralize  dup "," resolve  dup "," default  dup "," lookup  dup ","entry dup  dup "," lookup!  dup "," deep_interpolate  dup "," resolve_entry  dup "," interpolate  is_a? "," pluralize  is_a? "," resolve  is_a? "," default  is_a? "," lookup  is_a? ","entry dup  is_a? "," lookup!  is_a? "," deep_interpolate  is_a? "," resolve_entry  is_a? ","options []  ! "," resolve_ interpolate  "," resolve_ pluralize  "," resolve_ resolve  "," resolve_ default  "," resolve_ lookup  "," resolve_entry dup  "," resolve_ lookup!  "," resolve_ deep_interpolate  "," resolve_ resolve_entry  "]}," I18n Backend Base store_translations":{"type":"method","name":"store_translations","children":[],"call":[" merge_translations "," raise "," translations [] deep_merge! "," translations [] "," translations ","data deep_symbolize_keys ","locale to_sym ","data deep_symbolize_keys  deep_symbolize_keys ","locale to_sym  to_sym "]}," I18n Backend Base load_translations":{"type":"method","name":"load_translations","children":[],"call":[" load_file ","filenames each ","I18n  load_path flatten ","I18n  load_path ","filenames empty? ","filenames flatten each ","filenames flatten "," block_given? ","I18n  load_path flatten  each ","I18n  load_path  each ","I18n  load_path flatten  empty? ","I18n  load_path  empty? ","I18n  load_path flatten  flatten each ","I18n  load_path  flatten each ","I18n  load_path flatten  flatten ","I18n  load_path  flatten "]}," I18n Backend ActiveRecordMissing translate":{"type":"method","name":"translate","children":[],"call":[" raise "," store_default_translations "]}," I18n Backend ActiveRecordMissing store_default_translation":{"type":"method","name":"store_default_translation","children":[],"call":["translation save ","translation interpolations= ","ActiveRecord Translation  new ","locale to_s ","ActiveRecord Translation  new  save ","ActiveRecord Translation  new  interpolations= "]}," I18n Backend ActiveRecordMissing store_default_translations":{"type":"method","name":"store_default_translations","children":[],"call":[" store_default_translation ","keys each ","(lvar :key) join ","I18n  t map ","I18n  t ","(send\n  (lvar :options) :reject) keys ","Base RESERVED_KEYS  include? ","options reject ","ActiveRecord Translation  locale lookup exists? ","ActiveRecord Translation  locale lookup ","ActiveRecord Translation  locale ","keys join ","I18n  default_separator ","I18n  send [] ","I18n  send ","options values_at ","keys join s each ","I18n  send []  each ","(lvar :keys join ) join ","(send\n  (lvar :options) :reject) keys join s ","(send\n  (lvar :options) :reject) I18n  send []  ","keys join s join ","I18n  send []  join "]}," I18n Backend ActiveRecord expand_keys":{"type":"method","name":"expand_keys","children":[],"call":["keys << ","(send\n  (lvar :keys) :last) compact join ","(send\n  (lvar :keys) :last) compact ","keys last ","key to_s split inject ","key to_s split ","key to_s "]}," I18n Backend ActiveRecord lookup":{"type":"method","name":"lookup","children":[],"call":[" deep_symbolize_keys "," unwind_keys ","hash []= ","r value ","r key slice ","r key ","result inject ","key size + ","separator size ","key size ","result first value ","result first ","result first key == ","result first key ","result empty? ","Translation  locale lookup all ","Translation  locale lookup ","Translation  locale ","(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (send nil :Array\n    (lvar :key))) join "," Array + "," Array ","I18n  default_separator "," resolve_link ","options [] ","FLATTEN_SEPARATOR  size "," normalize_keys "," deep_symbolize_(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (send nil :Array\n    (lvar :key))) join s "," deep_symbolize_ resolve_link s "," deep_symbolize_ normalize_keys s "," unwind_(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (send nil :Array\n    (lvar :key))) join s "," unwind_ resolve_link s "," unwind_ normalize_keys s ","r (send\n  (send nil :Array\n    (lvar :scope)) :+\n  (send nil :Array\n    (lvar :key))) join  slice ","r  resolve_link  slice ","r  normalize_keys  slice ","r (send\n  (send nil :Array\n    (lvar :scope)) :+\n  (send nil :Array\n    (lvar :key))) join  ","r  resolve_link  ","r  normalize_keys  ","Translation  locale lookup all  inject ","(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (send nil :Array\n    (lvar :key))) join  size + "," resolve_link  size + "," normalize_keys  size + ","(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (send nil :Array\n    (lvar :key))) join  size "," resolve_link  size "," normalize_keys  size ","Translation  locale lookup all  first value ","Translation  locale lookup all  first ","Translation  locale lookup all  first key == ","result first (send\n  (send nil :Array\n    (lvar :scope)) :+\n  (send nil :Array\n    (lvar :key))) join  == ","result first  resolve_link  == ","result first  normalize_keys  == ","Translation  locale lookup all  first key ","result first (send\n  (send nil :Array\n    (lvar :scope)) :+\n  (send nil :Array\n    (lvar :key))) join  ","result first  resolve_link  ","result first  normalize_keys  ","Translation  locale lookup all  empty? ","(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (send nil :Array\n    (lvar :(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (send nil :Array\n    (lvar :key))) join ))) join ","(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (send nil :Array\n    (lvar : resolve_link ))) join ","(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (send nil :Array\n    (lvar : normalize_keys ))) join "," normalize_(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (send nil :Array\n    (lvar :key))) join s "," normalize_ resolve_link s "," normalize_ normalize_keys s "]}," I18n Backend ActiveRecord available_locales":{"type":"method","name":"available_locales","children":[],"call":["Translation  available_locales "]}," I18n Backend ActiveRecord store_translations":{"type":"method","name":"store_translations","children":[],"call":["Translation  create ","locale to_s ","Translation  locale lookup delete_all ","Translation  locale lookup "," expand_keys ","Translation  locale "," wind_keys each "," wind_keys ","I18n  default_separator ","options [] ","key to_s "," store_link ","value is_a? ","I18n  default_I18n  default_separator  "]}," I18n Backend ActiveRecord reload!":{"type":"method","name":"reload!","children":[],"call":[]}," I18n Backend ActiveRecord Translation value":{"type":"method","name":"value","children":[],"call":[" read_attribute ","Kernel  eval "," is_proc ","value == "," read_attribute  == "]}," I18n Backend ActiveRecord Translation interpolates?":{"type":"method","name":"interpolates?","children":[],"call":[" interpolations include? "," interpolations "]}," I18n Backend ActiveRecord Translation available_locales":{"type":"method","name":"available_locales","children":[],"call":["t locale to_sym ","t locale ","Translation  find map ","Translation  find "]}," I18n Backend ActiveRecord StoreProcs value=":{"type":"method","name":"value=","children":[],"call":[" write_attribute ","v to_ruby "]}," I18n Backend ActiveRecord StoreProcs included":{"type":"method","name":"included","children":[],"call":[" require "]}," I18n Backend ActiveRecord Missing translate":{"type":"method","name":"translate","children":[],"call":[" raise "," store_default_translations "]}," I18n Backend ActiveRecord Missing store_default_translation":{"type":"method","name":"store_default_translation","children":[],"call":["translation save ","translation interpolations= ","ActiveRecord Translation  new ","locale to_s ","ActiveRecord Translation  new  save ","ActiveRecord Translation  new  interpolations= "]}," I18n Backend ActiveRecord Missing store_default_translations":{"type":"method","name":"store_default_translations","children":[],"call":[" store_default_translation ","keys each ","(lvar :key) join ","I18n  t map ","I18n  t ","(send\n  (lvar :options) :reject) keys ","Base RESERVED_KEYS  include? ","options reject ","ActiveRecord Translation  locale lookup exists? ","ActiveRecord Translation  locale lookup ","ActiveRecord Translation  locale ","keys join ","I18n  default_separator ","I18n  send [] ","I18n  send ","options values_at ","I18n  normalize_keys [] ","I18n  normalize_keys ","options keys - ","options keys "," normalize_flat_keys ","keys join s each "," normalize_flat_keys s each ","I18n  send []  each ","I18n  normalize_keys []  each ","(lvar :keys join ) join ","(lvar : normalize_flat_keys ) join ","(send\n  (lvar :options) :reject) keys join s ","(send\n  (lvar :options) :reject)  normalize_flat_keys s ","(send\n  (lvar :options) :reject) I18n  send []  ","(send\n  (lvar :options) :reject) I18n  normalize_keys []  ","keys join s join "," normalize_flat_keys s join ","I18n  send []  join ","I18n  normalize_keys []  join ","I18n  normalize_keys join s [] ","I18n  normalize_ normalize_flat_keys s [] ","I18n  normalize_I18n  send []  [] ","I18n  normalize_I18n  normalize_keys []  [] ","I18n  normalize_keys join s ","I18n  normalize_ normalize_flat_keys s ","I18n  normalize_I18n  send []  ","I18n  normalize_I18n  normalize_keys []  ","options keys join s - ","options  normalize_flat_keys s - ","options I18n  send []  - ","options I18n  normalize_keys []  - ","options keys join s ","options  normalize_flat_keys s ","options I18n  send []  ","options I18n  normalize_keys []  "," normalize_flat_keys join s "," normalize_flat_ normalize_flat_keys s "," normalize_flat_I18n  send []  "," normalize_flat_I18n  normalize_keys []  "]}," I18n Backend Cascade lookup":{"type":"method","name":"lookup","children":[],"call":["result nil? ","scope pop ","I18n  send ","skip_root ! ","scope empty? ! ","scope empty? ","scope slice! ","step -@ ","scope slice! join ","offset -@ ","I18n  normalize_keys + ","I18n  normalize_keys ","keys length ","options [] [] ","options [] ","cascade [] ","cascade has_key? ","I18n  default_separator ","(or\n  (send\n    (lvar :scope) :slice!\n    (send\n      (lvar :offset) :-@)\n    (lvar :offset))\n  (array)) join ","cascade is_a? ","scope dup ","I18n  normalize_keys +  pop ","I18n  normalize_keys  pop ","scope dup  pop ","cascade []  ! ","I18n  normalize_keys +  empty? ! ","I18n  normalize_keys  empty? ! ","scope dup  empty? ! ","I18n  normalize_keys +  empty? ","I18n  normalize_keys  empty? ","scope dup  empty? ","I18n  normalize_keys +  slice! ","I18n  normalize_keys  slice! ","scope dup  slice! ","cascade []  -@ ","I18n  normalize_keys +  slice! join ","I18n  normalize_keys  slice! join ","scope dup  slice! join ","I18n  normalize_scope pop s + ","I18n  normalize_scope slice! join s + ","I18n  normalize_(or\n  (send\n    (lvar :scope) :slice!\n    (send\n      (lvar :offset) :-@)\n    (lvar :offset))\n  (array)) join s + ","I18n  normalize_I18n  normalize_keys  + ","I18n  normalize_scope pop s ","I18n  normalize_scope slice! join s ","I18n  normalize_(or\n  (send\n    (lvar :scope) :slice!\n    (send\n      (lvar :offset) :-@)\n    (lvar :offset))\n  (array)) join s ","I18n  normalize_I18n  normalize_keys  ","scope pop s length ","scope slice! join s length ","(or\n  (send\n    (lvar :scope) :slice!\n    (send\n      (lvar :offset) :-@)\n    (lvar :offset))\n  (array)) join s length ","I18n  normalize_keys  length ","options []  [] ","cascade has_scope pop ? ","cascade has_scope slice! join ? ","cascade has_(or\n  (send\n    (lvar :scope) :slice!\n    (send\n      (lvar :offset) :-@)\n    (lvar :offset))\n  (array)) join ? ","options []  has_key? ","(or\n  (send\n    (lvar :I18n  normalize_keys + ) :slice!\n    (send\n      (lvar :offset) :-@)\n    (lvar :offset))\n  (array)) join ","(or\n  (send\n    (lvar :I18n  normalize_keys ) :slice!\n    (send\n      (lvar :offset) :-@)\n    (lvar :offset))\n  (array)) join ","(or\n  (send\n    (lvar :scope dup ) :slice!\n    (send\n      (lvar :offset) :-@)\n    (lvar :offset))\n  (array)) join ","options []  is_a? ","I18n  normalize_keys +  dup ","I18n  normalize_keys  dup ","scope dup  dup "]}," I18n Backend Base preserve_encoding":{"type":"method","name":"preserve_encoding","children":[],"call":["result force_encoding ","result respond_to? ","string encoding ","string respond_to? ","result force_string encoding  ","string string encoding  "]}," I18n Backend InterpolationCompiler compile_all_strings_in":{"type":"method","name":"compile_all_strings_in","children":[],"call":[" compile_all_strings_in ","value kind_of? ","Compiler  compile_if_an_interpolation ","data each_value "]}," I18n Backend InterpolationCompiler merge_translations":{"type":"method","name":"merge_translations","children":[],"call":[" compile_all_strings_in "]}," I18n Backend InterpolationCompiler interpolate":{"type":"method","name":"interpolate","children":[],"call":["string i18n_interpolate ","string respond_to? "]}," I18n Backend InterpolationCompiler Compiler escape_key_sym":{"type":"method","name":"escape_key_sym","children":[],"call":["key to_sym inspect ","key to_sym "]}," I18n Backend InterpolationCompiler Compiler escape_plain_str":{"type":"method","name":"escape_plain_str","children":[],"call":["str gsub "]}," I18n Backend InterpolationCompiler Compiler reserved_key":{"type":"method","name":"reserved_key","children":[],"call":[]}," I18n Backend InterpolationCompiler Compiler missing_key":{"type":"method","name":"missing_key","children":[],"call":[]}," I18n Backend InterpolationCompiler Compiler nil_key":{"type":"method","name":"nil_key","children":[],"call":[]}," I18n Backend InterpolationCompiler Compiler direct_key":{"type":"method","name":"direct_key","children":[],"call":[]}," I18n Backend InterpolationCompiler Compiler interpolate_key":{"type":"method","name":"interpolate_key","children":[],"call":["(send nil :direct_key\n  (lvar :key)) join "," missing_key "," nil_key "," direct_key "]}," I18n Backend InterpolationCompiler Compiler interpolate_or_raise_missing":{"type":"method","name":"interpolate_or_raise_missing","children":[],"call":[" interpolate_key "," reserved_key ","Base RESERVED_KEYS  include? "," escape_key_sym ","RESERVED_KEYS  include? "]}," I18n Backend InterpolationCompiler Compiler compile_interpolation_token":{"type":"method","name":"compile_interpolation_token","children":[],"call":[" interpolate_or_raise_missing "]}," I18n Backend InterpolationCompiler Compiler handle_interpolation_token":{"type":"method","name":"handle_interpolation_token","children":[],"call":[" compile_interpolation_token ","key to_sym ","matchdata values_at "]}," I18n Backend InterpolationCompiler Compiler compiled_interpolation_body":{"type":"method","name":"compiled_interpolation_body","children":[],"call":["(send\n  (send nil :tokenize\n    (lvar :str)) :map) join "," escape_plain_str "," handle_interpolation_token ","token match "," tokenize map "," tokenize "]}," I18n Backend InterpolationCompiler Compiler tokenize":{"type":"method","name":"tokenize","children":[],"call":["str split "]}," I18n Backend InterpolationCompiler Compiler interpolated_str?":{"type":"method","name":"interpolated_str?","children":[],"call":["str =~ ","str kind_of? "]}," I18n Backend InterpolationCompiler Compiler compile_if_an_interpolation":{"type":"method","name":"compile_if_an_interpolation","children":[],"call":["string instance_eval "," compiled_interpolation_body "," interpolated_str? "]}," I18n Backend Helpers hash_lookup":{"type":"method","name":"hash_lookup","children":[],"call":["result [] ","result has_key? ","result respond_to? ","key to_sym ","keys to_s split inject ","keys to_s split ","keys to_s ","result has_key to_sym ? ","key to_sym  to_sym ","key to_sym s to_s split inject ","key to_sym s to_s split ","key to_sym s to_s "]}," I18n Backend Helpers escape_default_separator":{"type":"method","name":"escape_default_separator","children":[],"call":["key to_s tr ","I18n  default_separator ","key to_s "]}," I18n Backend Fast cleanup_non_standard_separator":{"type":"method","name":"cleanup_non_standard_separator","children":[],"call":[" escape_default_separator tr ","I18n  default_separator "," escape_default_separator "]}," I18n Backend Fast lookup":{"type":"method","name":"lookup","children":[],"call":[" flattened_translations [] [] ","key to_sym "," flattened_translations [] ","locale to_sym "," flattened_translations ","(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (array\n    (lvar :key))) join ","I18n  default_separator "," Array + "," Array "," cleanup_non_standard_separator "," Array map ","I18n  default_separator != "," init_translations "," initialized? "," resolve_link ","options [] "," flattened_translations has_key? "," normalize_keys to_sym "," normalize_keys ","(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (array\n    (lvar :key))) join  to_sym "," cleanup_non_standard_separator  to_sym "," resolve_link  to_sym "," normalize_keys to_sym  to_sym ","locale to_sym  to_sym ","(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (array\n    (lvar :(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (array\n    (lvar :key))) join ))) join ","(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (array\n    (lvar : cleanup_non_standard_separator ))) join ","(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (array\n    (lvar : resolve_link ))) join ","(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (array\n    (lvar : normalize_keys to_sym ))) join ","I18n  default_options []  "," cleanup_non_standard_options []  ","I18n  default_options []  != "," flattened_translations has_(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (array\n    (lvar :key))) join ? "," flattened_translations has_ cleanup_non_standard_separator ? "," flattened_translations has_ resolve_link ? "," flattened_translations has_ normalize_keys to_sym ? "," normalize_(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (array\n    (lvar :key))) join s to_sym "," normalize_ cleanup_non_standard_separator s to_sym "," normalize_ resolve_link s to_sym "," normalize_ normalize_keys to_sym s to_sym "," normalize_(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (array\n    (lvar :key))) join s "," normalize_ cleanup_non_standard_separator s "," normalize_ resolve_link s "," normalize_ normalize_keys to_sym s "]}," I18n Backend Fast flatten_translations":{"type":"method","name":"flatten_translations","children":[],"call":["flattened_h []= "," flatten_hash ","translations inject "," store_link ","value is_a? ","result [] each ","result [] ","result []= "," wind_keys "]}," I18n Backend Fast flatten_hash":{"type":"method","name":"flatten_hash","children":[],"call":[" wind_keys "]}," I18n Backend Fast init_translations":{"type":"method","name":"init_translations","children":[],"call":[" reset_flattened_translations! "," flattened_translations "]}," I18n Backend Fast merge_translations":{"type":"method","name":"merge_translations","children":[],"call":[" reset_flattened_translations! "]}," I18n Backend Fast flattened_translations":{"type":"method","name":"flattened_translations","children":[],"call":[" flatten_translations "," translations ","result []= "," translations inject "]}," I18n Backend Fast reset_flattened_translations!":{"type":"method","name":"reset_flattened_translations!","children":[],"call":[]}," I18n normalize_keys":{"type":"method","name":"normalize_keys","children":[],"call":["k to_sym ","keys map ","keys flatten - ","keys flatten ","k to_s split ","I18n  default_separator ","k to_s ","(lvar :locale) + + "," Array ","(lvar :locale) + "," normalize_key + + "," normalize_key "," normalize_key + ","keys concat ","keys flatten -  map ","(lvar :locale) + +  map ","keys flatten -  flatten - ","(lvar :locale) + +  flatten - ","keys flatten -  flatten ","(lvar :locale) + +  flatten ","keys flatten -  concat ","(lvar :locale) + +  concat "]}," Hash slice":{"type":"method","name":"slice","children":[],"call":["h []= "," fetch ","keep_keys each "," has_key? "," class new "," class "," class new  []= "," fetc class new  ","keep_keys eac class new  ","  class new as_key? "]}," Hash except":{"type":"method","name":"except","children":[],"call":[" slice "," keys - "," keys "]}," I18n Backend Links find_link":{"type":"method","name":"find_link","children":[],"call":["key [] == ","key [] ","from length "," links each "," links "]}," I18n Backend Links resolve_link":{"type":"method","name":"resolve_link","children":[],"call":[" store_link ","key gsub "," find_link ","links [] ","links key? "," links ","key to_s "," store_ find_link  ","key to_s  gsub "," find_ find_link  "," find_link s [] "," links  [] "," find_link s key? "," links  key? ","links key to_s ? ","  find_link s ","  links  ","key to_s  to_s "]}," I18n Backend Links store_link":{"type":"method","name":"store_link","children":[],"call":[" links []= ","link to_s ","key to_s "," links "]}," I18n Backend Links links":{"type":"method","name":"links","children":[],"call":["@links [] ","locale to_sym "]}," I18n Backend Helpers unescape_default_separator":{"type":"method","name":"unescape_default_separator","children":[],"call":["key to_s tr ","I18n  default_separator ","key to_s ","key to_s tr to_sym "]}," I18n Backend Fallbacks extract_string_default!":{"type":"method","name":"extract_string_default!","children":[],"call":["defaults [] ","options []= ","default is_a? ","defaults index "," Array ","options [] "," find_first_string_default "," Array  [] "," Array  index ","defaults  find_first_string_default  "]}," I18n Backend Cldr raise_unspecified_currency!":{"type":"method","name":"raise_unspecified_currency!","children":[],"call":[" raise ","ArgumentError  new "]}," I18n Backend Cldr raise_unspecified_format_type!":{"type":"method","name":"raise_unspecified_format_type!","children":[],"call":[" raise ","ArgumentError  new "]}," I18n Backend Cldr lookup_currency":{"type":"method","name":"lookup_currency","children":[],"call":["I18n  t "]}," I18n Backend Cldr lookup_format_data":{"type":"method","name":"lookup_format_data","children":[],"call":["I18n  t "]}," I18n Backend Cldr lookup_format":{"type":"method","name":"lookup_format","children":[],"call":["I18n  t "]}," I18n Backend Cldr formatter":{"type":"method","name":"formatter","children":[],"call":[" Cldr Format  const_get new "," Cldr Format  const_get ","type to_s camelize ","type to_s "," lookup_format_data "," lookup_format ","(or-asgn\n  (ivasgn :@formatters)\n  (hash)) [] "," lookup_format_ lookup_format_data  "," lookup_ lookup_format _data "," lookup_ lookup_format  ","(or-asgn\n  (ivasgn :@ lookup_format ters)\n  (hash)) [] "]}," I18n Backend Cldr detect_type":{"type":"method","name":"detect_type","children":[],"call":[" raise_unspecified_format_type! ","object class name downcase to_sym ","object class name downcase ","object class name ","object class ","options has_key? "]}," I18n Backend Cldr format_datetime":{"type":"method","name":"format_datetime","children":[],"call":["I18n  t ","I18n  l ","options [] "]}," I18n Backend Cldr format_time":{"type":"method","name":"format_time","children":[],"call":[" formatter apply "," formatter "]}," I18n Backend Cldr format_date":{"type":"method","name":"format_date","children":[],"call":[" formatter apply "," formatter "]}," I18n Backend Cldr format_percent":{"type":"method","name":"format_percent","children":[],"call":[" formatter apply "," formatter "]}," I18n Backend Cldr format_currency":{"type":"method","name":"format_currency","children":[],"call":[" formatter apply "," formatter ","options merge! "," lookup_currency ","options [] ","options [] is_a? "]}," I18n Backend Cldr format_integer":{"type":"method","name":"format_integer","children":[],"call":[" format_object ","options merge "," number "]}," I18n Backend Cldr format_decimal":{"type":"method","name":"format_decimal","children":[],"call":[" formatter apply "," formatter "]}," I18n Backend Cldr localize":{"type":"method","name":"localize","children":[],"call":[" send ","options [] "," detect_type "]}," I18n config=":{"type":"method","name":"config=","children":[],"call":["Thread  current []= ","Thread  current "]}," I18n config":{"type":"method","name":"config","children":[],"call":["I18n Config  new ","Thread  current [] ","Thread  current "]}," I18n Config load_path=":{"type":"method","name":"load_path=","children":[],"call":[" backend reload! "," backend "]}," I18n Config load_path":{"type":"method","name":"load_path","children":[],"call":[]}," I18n Config exception_handler=":{"type":"method","name":"exception_handler=","children":[],"call":[]}," I18n Config exception_handler":{"type":"method","name":"exception_handler","children":[],"call":["ExceptionHandler  new "]}," I18n Config default_separator=":{"type":"method","name":"default_separator=","children":[],"call":[]}," I18n Config default_separator":{"type":"method","name":"default_separator","children":[],"call":[]}," I18n Config available_locales=":{"type":"method","name":"available_locales=","children":[],"call":["@@available_locales empty? ","locale to_sym "," Array map "," Array "]}," I18n Config available_locales":{"type":"method","name":"available_locales","children":[],"call":[" backend available_locales "," backend "]}," I18n Config default_locale=":{"type":"method","name":"default_locale=","children":[],"call":["locale to_sym ","I18n  enforce_available_locales! "]}," I18n Config default_locale":{"type":"method","name":"default_locale","children":[],"call":[]}," I18n Config backend=":{"type":"method","name":"backend=","children":[],"call":[]}," I18n Config backend":{"type":"method","name":"backend","children":[],"call":["Backend Simple  new "]}," I18n Config locale=":{"type":"method","name":"locale=","children":[],"call":["locale to_sym ","I18n  enforce_available_locales! "]}," I18n Config locale":{"type":"method","name":"locale","children":[],"call":[" default_locale ","@locale != "]}," GetText PoParser _reduce_none":{"type":"method","name":"_reduce_none","children":[],"call":[]}," GetText PoParser _":{"type":"method","name":"_","children":[],"call":[]}," I18n Backend Fallbacks find_first_string_default":{"type":"method","name":"find_first_string_default","children":[],"call":["String  === ","defaults [] ","defaults each_index "]}," I18n normalized_key_cache":{"type":"method","name":"normalized_key_cache","children":[],"call":["@normalized_key_cache [] ","h []= ","Hash  new "]}," I18n normalize_key":{"type":"method","name":"normalize_key","children":[],"call":["key to_sym ","k to_sym ","keys map ","key split - ","key split ","key include? ","key == ","key to_s ","(send\n  (lvar :key) :map) flatten "," normalize_key ","key map "," normalized_key_cache [] "," normalized_key_cache ","keys map! ","keys delete ","key to_s split "," normalized_key_cache [] [] ","key to_s  to_sym ","key split -  map ","key to_s split  map ","key to_s s map ","key to_s  split - ","key to_s  split ","key to_s  include? ","key to_s  == ","key to_s  to_s ","(send\n  (lvar :key to_s ) :map) flatten "," normalize_key to_s  ","key to_s  map "," normalized_key to_s _cache [] "," normalized_key to_s _cache ","key split -  map! ","key to_s split  map! ","key to_s s map! ","key split -  delete ","key to_s split  delete ","key to_s s delete ","key to_s  to_s split "," normalized_key to_s _cache [] [] "]}," I18n with_locale":{"type":"method","name":"with_locale","children":[],"call":[" locale= "," locale "]}," I18n transliterate":{"type":"method","name":"transliterate","children":[],"call":[" handle_exception "," raise "," config backend transliterate "," config backend "," config ","options delete "," config locale ","args shift ","args pop ","args last is_a? ","args last "," enforce_available_locales! ","args pop dup ","args pop  delete ","args pop dup  delete "]}," I18n Gettext Helpers npgettext":{"type":"method","name":"npgettext","children":[],"call":[" nsgettext ","(lvar :msgctxt) join ","msgid [] ","msgid is_a? ","(lvar :msgctxt) join  [] ","(lvar :msgctxt) join  is_a? "]}," I18n Gettext Helpers nsgettext":{"type":"method","name":"nsgettext","children":[],"call":["I18n  t ","I18n Gettext  extract_scope ","separator is_a? ","msgid [] ","msgid is_a? "]}," I18n Gettext Helpers ngettext":{"type":"method","name":"ngettext","children":[],"call":[" nsgettext "]}," I18n Gettext Helpers pgettext":{"type":"method","name":"pgettext","children":[],"call":[" sgettext ","(lvar :msgctxt) join "]}," I18n Gettext Helpers sgettext":{"type":"method","name":"sgettext","children":[],"call":["I18n  t ","I18n Gettext  extract_scope "]}," I18n Gettext Helpers gettext":{"type":"method","name":"gettext","children":[],"call":["I18n  t ","(pair\n  (sym :default)\n  (lvar :msgid)) merge "]}," Hash deep_merge!":{"type":"method","name":"deep_merge!","children":[],"call":[" merge! "]}," Hash deep_symbolize_keys":{"type":"method","name":"deep_symbolize_keys","children":[],"call":["result []= ","key to_sym ","value deep_symbolize_keys ","value is_a? "," inject ","value deep_symbolize_keys  deep_symbolize_keys ","value deep_symbolize_keys  is_a? "]}," I18n Backend Transliterator HashTransliterator add":{"type":"method","name":"add","children":[],"call":[" approximations merge! "," approximations ","hash []= ","hash delete to_s ","hash delete ","key to_s ","hash keys each ","hash keys "," approximations []= ","value to_s ","hash each ","key to_s dup force_encoding ","key to_s dup "]}," I18n Backend Transliterator HashTransliterator approximations":{"type":"method","name":"approximations","children":[],"call":[]}," I18n Backend Transliterator HashTransliterator transliterate":{"type":"method","name":"transliterate","children":[],"call":[" approximations [] "," approximations ","string gsub "]}," I18n Backend Transliterator HashTransliterator initialize":{"type":"method","name":"initialize","children":[],"call":[" add ","DEFAULT_APPROXIMATIONS  dup "," add_default_approximations "]}," I18n Backend Transliterator ProcTransliterator transliterate":{"type":"method","name":"transliterate","children":[],"call":["@rule call "]}," I18n Backend Transliterator ProcTransliterator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," I18n Backend Transliterator get":{"type":"method","name":"get","children":[],"call":[]}," I18n Backend Transliterator transliterate":{"type":"method","name":"transliterate","children":[],"call":["@transliterators [] transliterate ","@transliterators [] ","Transliterator  get ","I18n  t "]}," I18n Backend Simple Implementation lookup":{"type":"method","name":"lookup","children":[],"call":[" resolve ","options merge ","result is_a? ","result [] ","result has_key? ","key to_sym ","keys inject "," translations ","I18n  normalize_keys ","options [] "," init_translations "," initialized? ","_key to_sym "," resolve_entry ","_key to_s to_sym ","_key to_s ","Utils  except "," resolve  is_a? ","result []  is_a? "," resolve_entry  is_a? "," resolve  [] ","result []  [] "," resolve_entry  [] "," resolve  has_key? ","result []  has_key? "," resolve_entry  has_key? ","result has_key to_sym ? ","result has_key to_s to_sym ? ","key to_sym  to_sym ","key to_sym s inject ","I18n  normalize_keys  inject ","I18n  normalize_key to_sym s ","I18n  normalize_I18n  normalize_keys  ","I18n  normalize_key to_s to_sym s ","_key to_sym  to_sym ","_key to_s to_sym  to_sym ","_key to_sym  to_s to_sym ","_key to_s to_sym  to_s to_sym ","_key to_sym  to_s ","_key to_s to_sym  to_s "]}," I18n Backend Simple Implementation translations":{"type":"method","name":"translations","children":[],"call":[" init_translations "," initialized? ! "," initialized? ","h []= ","Concurrent Hash  new ","MUTEX  synchronize "]}," I18n Backend Simple Implementation init_translations":{"type":"method","name":"init_translations","children":[],"call":[" load_translations "]}," I18n Backend Simple Implementation reload!":{"type":"method","name":"reload!","children":[],"call":[]}," I18n Backend Simple Implementation available_locales":{"type":"method","name":"available_locales","children":[],"call":["locales << ","(send\n  (send\n    (lvar :data) :keys) :-\n  (array\n    (sym :i18n))) empty? ","data keys - ","data keys "," translations inject "," translations "," init_translations "," initialized? ","data has_key? ","data empty? ","data size <= ","data size "]}," I18n Backend Simple Implementation store_translations":{"type":"method","name":"store_translations","children":[],"call":[" translations [] deep_merge! "," translations [] "," translations ","data deep_symbolize_keys ","locale to_sym ","I18n  available_locales include? ! ","I18n  available_locales include? ","locale to_s ","I18n  available_locales ","I18n  available_locales_initialized? ","I18n  enforce_available_locales ","Utils  deep_merge! ","Utils  deep_symbolize_keys ","options fetch ","Concurrent Hash  new ","I18n  locale_available? ! ","I18n  locale_available? ","data deep_stringify_keys deep_symbolize_keys ","data deep_stringify_keys ","data deep_symbolize_keys  deep_symbolize_keys ","Utils  deep_symbolize_keys  deep_symbolize_keys ","data deep_stringify_keys deep_symbolize_keys  deep_symbolize_keys ","locale to_sym  to_sym ","I18n  available_locale to_sym s include? ! ","I18n  available_locale to_sym s include? ","locale to_sym  to_s ","I18n  available_locale to_sym s ","I18n  available_locale to_sym s_initialized? ","I18n  enforce_available_locale to_sym s ","I18n  locale to_sym _available? ! ","I18n  locale to_sym _available? ","data deep_symbolize_keys  deep_stringify_keys deep_symbolize_keys ","Utils  deep_symbolize_keys  deep_stringify_keys deep_symbolize_keys ","data deep_stringify_keys deep_symbolize_keys  deep_stringify_keys deep_symbolize_keys ","data deep_symbolize_keys  deep_stringify_keys ","Utils  deep_symbolize_keys  deep_stringify_keys ","data deep_stringify_keys deep_symbolize_keys  deep_stringify_keys "]}," I18n Backend Simple Implementation initialized?":{"type":"method","name":"initialized?","children":[],"call":[]}," I18n Backend Memoize reset_memoizations!":{"type":"method","name":"reset_memoizations!","children":[],"call":["(if\n  (lvar :locale)\n  (send\n    (send nil :memoized_lookup) :[]\n    (send\n      (lvar :locale) :to_sym))\n  (send nil :memoized_lookup)) clear "," memoized_lookup "," memoized_lookup [] ","locale to_sym "]}," I18n Backend Memoize memoized_lookup":{"type":"method","name":"memoized_lookup","children":[],"call":["h []= ","Hash  new ","I18n  new_double_nested_cache "]}," I18n Backend Memoize lookup":{"type":"method","name":"lookup","children":[],"call":["flat_hash []= ","flat_hash [] ","flat_hash key? "," memoized_lookup [] ","locale to_sym "," memoized_lookup ","I18n Backend Flatten  normalize_flat_keys to_sym ","I18n Backend Flatten  normalize_flat_keys ","options [] "," memoized_lookup []  []= "," memoized_lookup []  [] "," memoized_lookup []  key? ","I18n Backend Flatten  normalize_I18n Backend Flatten  normalize_flat_keys to_sym s to_sym ","I18n Backend Flatten  normalize_I18n Backend Flatten  normalize_flat_keys to_sym s "]}," I18n Backend Memoize reload!":{"type":"method","name":"reload!","children":[],"call":[" reset_memoizations! "]}," I18n Backend Memoize store_translations":{"type":"method","name":"store_translations","children":[],"call":[" reset_memoizations! "]}," I18n Backend Memoize available_locales":{"type":"method","name":"available_locales","children":[],"call":[]}," I18n Backend KeyValue Implementation lookup":{"type":"method","name":"lookup","children":[],"call":["value deep_symbolize_keys ","value is_a? ","ActiveSupport JSON  decode ","@store [] "," normalize_flat_keys ","options [] ","ActiveSupport JSON  decode [] ","SubtreeProxy  new ","@subtrees ! ","value nil? ! ","value nil? ","JSON  decode ","Utils  deep_symbolize_keys ","ActiveSupport JSON  decode  deep_symbolize_keys ","@store []  deep_symbolize_keys ","ActiveSupport JSON  decode []  deep_symbolize_keys ","JSON  decode  deep_symbolize_keys ","value deep_symbolize_ normalize_flat_keys s ","ActiveSupport JSON  decode  is_a? ","@store []  is_a? ","ActiveSupport JSON  decode []  is_a? ","JSON  decode  is_a? "," normalize_flat_ normalize_flat_keys s ","ActiveSupport JSON  decode  nil? ! ","@store []  nil? ! ","ActiveSupport JSON  decode []  nil? ! ","JSON  decode  nil? ! ","ActiveSupport JSON  decode  nil? ","@store []  nil? ","ActiveSupport JSON  decode []  nil? ","JSON  decode  nil? ","Utils  deep_symbolize_ normalize_flat_keys s "]}," I18n Backend KeyValue Implementation available_locales":{"type":"method","name":"available_locales","children":[],"call":["k to_sym ","locales map! ","locales compact! ","locales uniq! ","k =~ ","@store keys map ","@store keys "," init_translations "," initialized? "]}," I18n Backend KeyValue Implementation store_translations":{"type":"method","name":"store_translations","children":[],"call":["@store []= ","ActiveSupport JSON  encode ","value is_a? "," raise ","old_value deep_symbolize_keys deep_merge! ","old_value deep_symbolize_keys ","old_value is_a? ","ActiveSupport JSON  decode ","@store [] "," flatten_translations each "," flatten_translations ","options fetch ","JSON  encode ","JSON  decode ","Utils  deep_merge! ","Utils  deep_symbolize_keys ","old_value deep_symbolize_keys deep_merge!  is_a? ","Utils  deep_merge!  is_a? ","old_old_value deep_symbolize_keys deep_merge!  deep_symbolize_keys deep_merge! ","old_Utils  deep_merge!  deep_symbolize_keys deep_merge! ","ActiveSupport JSON  decode  deep_symbolize_keys deep_merge! ","@store []  deep_symbolize_keys deep_merge! ","JSON  decode  deep_symbolize_keys deep_merge! ","old_old_value deep_symbolize_keys deep_merge!  deep_symbolize_keys ","old_Utils  deep_merge!  deep_symbolize_keys ","ActiveSupport JSON  decode  deep_symbolize_keys ","@store []  deep_symbolize_keys ","JSON  decode  deep_symbolize_keys ","old_old_value deep_symbolize_keys deep_merge!  is_a? ","old_Utils  deep_merge!  is_a? ","ActiveSupport JSON  decode  is_a? ","@store []  is_a? ","JSON  decode  is_a? "]}," I18n Backend KeyValue Implementation initialize":{"type":"method","name":"initialize","children":[],"call":[]}," I18n Backend InterpolationCompiler store_translations":{"type":"method","name":"store_translations","children":[],"call":[" compile_all_strings_in "]}," I18n Backend Flatten escape_default_separator":{"type":"method","name":"escape_default_separator","children":[],"call":["I18n Backend Flatten  escape_default_separator ","key to_s tr ","key to_s "]}," I18n Backend Flatten find_link":{"type":"method","name":"find_link","children":[],"call":["key [] == ","key [] ","from length "," links [] each "," links [] "," links "," links [] each_pair "]}," I18n Backend Flatten resolve_link":{"type":"method","name":"resolve_link","children":[],"call":[" store_link ","key gsub "," find_link ","links [] ","links key? "," links [] "," links ","locale to_sym ","key to_s "," store_ find_link  "," find_ find_link  "," find_link s [] "," links []  [] "," find_link s key? "," links []  key? ","  find_link s [] ","  links []  [] ","  find_link s ","  links []  "]}," I18n Backend Flatten store_link":{"type":"method","name":"store_link","children":[],"call":[" links [] []= ","link to_s ","key to_s "," links [] ","locale to_sym "," links "]}," I18n Backend Flatten flatten_translations":{"type":"method","name":"flatten_translations","children":[],"call":["hash []= "," store_link ","value is_a? "," flatten_keys "]}," I18n Backend Flatten flatten_keys":{"type":"method","name":"flatten_keys","children":[],"call":[" flatten_keys ","value is_a? ","(lvar :prev_key) compact join to_sym ","(lvar :prev_key) compact join ","(lvar :prev_key) compact "," escape_default_separator ","hash each_pair "," flatten_ escape_default_separator s ","(lvar :prev_ escape_default_separator ) compact join to_sym ","(lvar :prev_ escape_default_separator ) compact join ","(lvar :prev_ escape_default_separator ) compact "]}," I18n Backend Flatten links":{"type":"method","name":"links","children":[],"call":["h []= ","Hash  new ","I18n  new_double_nested_cache "]}," I18n Backend Flatten normalize_flat_keys":{"type":"method","name":"normalize_flat_keys","children":[],"call":[" resolve_link ","I18n Backend Flatten  normalize_flat_keys ","I18n Backend Flatten  normalize_flat_I18n Backend Flatten  normalize_flat_keys s "]}," I18n Backend Base warn_syntax_deprecation!":{"type":"method","name":"warn_syntax_deprecation!","children":[],"call":[" warn "," caller join "," caller "]}," I18n Backend ActiveRecord Implementation expand_keys":{"type":"method","name":"expand_keys","children":[],"call":["keys << ","(send\n  (lvar :keys) :last) compact join ","(send\n  (lvar :keys) :last) compact ","keys last ","key to_s split inject ","key to_s split ","key to_s "]}," I18n Backend ActiveRecord Implementation lookup":{"type":"method","name":"lookup","children":[],"call":["result deep_symbolize_keys ","hash []= ","r value ","r key slice ","r key ","result inject ","key size + ","FLATTEN_SEPARATOR  size ","key size ","result first value ","result first ","result first key == ","result first key ","result empty? ","Translation  locale lookup all ","Translation  locale lookup ","Translation  locale "," normalize_flat_keys ","options [] ","Translation  locale lookup all  deep_symbolize_keys ","result deep_symbolize_ normalize_flat_keys s ","r  normalize_flat_keys  slice ","r  normalize_flat_keys  ","Translation  locale lookup all  inject "," normalize_flat_keys  size + "," normalize_flat_keys  size ","Translation  locale lookup all  first value ","Translation  locale lookup all  first ","Translation  locale lookup all  first key == ","result first  normalize_flat_keys  == ","Translation  locale lookup all  first key ","result first  normalize_flat_keys  ","Translation  locale lookup all  empty? "," normalize_flat_ normalize_flat_keys s "]}," I18n Backend ActiveRecord Implementation store_translations":{"type":"method","name":"store_translations","children":[],"call":["Translation  create ","key to_s ","locale to_s ","Translation  locale lookup delete_all ","Translation  locale lookup "," expand_keys ","Translation  locale "," flatten_translations each "," flatten_translations ","options fetch "]}," I18n Backend ActiveRecord Implementation available_locales":{"type":"method","name":"available_locales","children":[],"call":["Translation  available_locales "," init_translations "," initialized? "]}," I18n Backend KeyValue merge_translations":{"type":"method","name":"merge_translations","children":[],"call":["@store []= ","ActiveSupport JSON  encode ","value nil? "," raise "," deep_symbolize_keys merge "," deep_symbolize_keys ","old_value is_a? ","ActiveSupport JSON  decode ","@store [] "," flatten_translations each "," flatten_translations "," deep_symbolize_keys merge  nil? ","old_ deep_symbolize_keys merge  is_a? ","ActiveSupport JSON  decode  is_a? ","@store []  is_a? "]}," I18n Backend KeyValue lookup":{"type":"method","name":"lookup","children":[],"call":[" deep_symbolize_keys ","value is_a? ","ActiveSupport JSON  decode ","@store [] "," normalize_keys ","options [] "," deep_symbolize_ normalize_keys s ","ActiveSupport JSON  decode  is_a? ","@store []  is_a? "," normalize_ normalize_keys s "]}," I18n Backend KeyValue available_locales":{"type":"method","name":"available_locales","children":[],"call":["k to_sym ","locales map! ","locales compact! ","locales uniq! ","k =~ ","@store keys map ","@store keys "]}," I18n Backend KeyValue reload!":{"type":"method","name":"reload!","children":[],"call":[]}," I18n Backend KeyValue initialize":{"type":"method","name":"initialize","children":[],"call":[]}," I18n Backend Helpers deep_merge_hash!":{"type":"method","name":"deep_merge_hash!","children":[],"call":["hash merge! "]}," I18n Backend Flatten normalize_keys":{"type":"method","name":"normalize_keys","children":[],"call":[" resolve_link ","keys join ","k to_s tr ","k to_s ","keys map! ","separator != ","I18n  default_separator ","(lvar :scope) flatten compact ","(lvar :scope) flatten ","(lvar :scope) flatten compact  join ","(lvar :scope) flatten compact  map! "]}," I18n Backend Fast reload!":{"type":"method","name":"reload!","children":[],"call":[" reset_flattened_translations! "]}," I18n Backend Base lookup!":{"type":"method","name":"lookup!","children":[],"call":[" lookup ","options [] "," init_translations "," initialized? "]}," I18n Backend Base transliterate":{"type":"method","name":"transliterate","children":[],"call":["@transliterators [] transliterate ","@transliterators [] ","Transliterator  get ","I18n  t "]}," I18n Backend ActiveRecord merge_translations":{"type":"method","name":"merge_translations","children":[],"call":["Translation  create ","key to_s ","locale to_s ","Translation  locale lookup delete_all ","Translation  locale lookup "," expand_keys ","Translation  locale "," flatten_translations each "," flatten_translations "]}," I18n Backend KeyValue Implementation reload!":{"type":"method","name":"reload!","children":[],"call":[]}," I18n Backend ActiveRecord Implementation reload!":{"type":"method","name":"reload!","children":[],"call":[]}," I18n InvalidLocaleData initialize":{"type":"method","name":"initialize","children":[],"call":[]}," I18n Backend Fallbacks find_first_string_or_lambda_default":{"type":"method","name":"find_first_string_or_lambda_default","children":[],"call":["Proc  === ","String  === ","defaults each_with_index "]}," I18n Backend Fallbacks extract_string_or_lambda_default!":{"type":"method","name":"extract_string_or_lambda_default!","children":[],"call":["defaults [] ","options []= "," find_first_string_or_lambda_default "," Array ","options [] ","(send\n  (lvar :options) :[]\n  (sym :default)) flatten "," Array  [] ","(send\n  (lvar :options) :[]\n  (sym :default)) flatten  [] "]}," I18n Backend Chain Implementation namespace_lookup?":{"type":"method","name":"namespace_lookup?","children":[],"call":["options has_key? ! ","options has_key? ","result is_a? "]}," I18n Backend Chain Implementation localize":{"type":"method","name":"localize","children":[],"call":[" raise ","I18n MissingTranslationData  new ","backend localize "," backends each "," backends "," throw ","I18n MissingTranslation  new "," catch "]}," I18n Backend Chain Implementation translate":{"type":"method","name":"translate","children":[],"call":[" raise ","I18n MissingTranslationData  new ","translation nil? ! ","translation nil? ","namespace merge! "," namespace_lookup? ","backend translate ","backend == "," backends last "," backends "," backends each ","default_options except "," throw ","I18n MissingTranslation  new "," catch ","translation merge "," _deep_merge ","options [] nil? ","options [] ","options key? ","Utils  except ","backend translate  nil? ! ","backend translate  nil? ","translation merge  merge! "," _deep_merge  merge! "," translation merge _lookup? ","  _deep_merge _lookup? ","default_default_options except  except ","default_Utils  except  except ","backend translate  merge ","default_options except  [] nil? ","Utils  except  [] nil? ","default_options except  [] ","Utils  except  [] ","default_options except  key? ","Utils  except  key? "]}," I18n Backend Chain Implementation available_locales":{"type":"method","name":"available_locales","children":[],"call":["(send\n  (send nil :backends) :map) flatten uniq ","(send\n  (send nil :backends) :map) flatten ","backend available_locales "," backends map "," backends "]}," I18n Backend Chain Implementation store_translations":{"type":"method","name":"store_translations","children":[],"call":[" backends first store_translations "," backends first "," backends "]}," I18n Backend Chain Implementation reload!":{"type":"method","name":"reload!","children":[],"call":["backend reload! "," backends each "," backends "]}," I18n Backend Chain Implementation initialize":{"type":"method","name":"initialize","children":[],"call":[" backends= "]}," I18n Backend Cache fetch_ignoring_procs":{"type":"method","name":"fetch_ignoring_procs","children":[],"call":["I18n  cache_store write ","I18n  cache_store ","result is_a? "," tap ","I18n  cache_store read "]}," I18n Backend Cache fetch_storing_missing_translation_exception":{"type":"method","name":"fetch_storing_missing_translation_exception","children":[],"call":["I18n  cache_store write ","I18n  cache_store "," fetch_ignoring_procs "]}," I18n Backend ActiveRecord Translation value=":{"type":"method","name":"value=","children":[],"call":[" write_attribute ","value === "]}," I18n Backend ActiveRecord Translation lookup":{"type":"method","name":"lookup","children":[],"call":[" scoped ","keys last "," warn ","[DEPRECATION] Giving a separator to Translation.lookup is deprecated.  << ","separator empty? ","key to_s "," Array map! "," Array "," connection quote_column_name "," connection "," connection quote_ connection quote_column_name  "]}," I18n Backend ActiveRecord Translation locale":{"type":"method","name":"locale","children":[],"call":[" scoped ","locale to_s "]}," I18n Tests Procs filter_args":{"type":"method","name":"filter_args","children":[],"call":["(send\n  (lvar :args) :map) inspect ","arg delete ","arg is_a? ","args map "]}," I18n Tests Lookup setup":{"type":"method","name":"setup","children":[],"call":["I18n  backend store_translations ","I18n  backend "]}," I18n Tests Localization included":{"type":"method","name":"included","children":[],"call":[]}," I18n Tests Localization Time setup_time_translations":{"type":"method","name":"setup_time_translations","children":[],"call":["I18n  backend store_translations ","I18n  backend "]}," I18n Tests Localization Time setup":{"type":"method","name":"setup","children":[],"call":[" Time  utc "," setup_time_translations "," Time  parse "]}," I18n Tests Localization Procs setup_time_proc_translations":{"type":"method","name":"setup_time_proc_translations","children":[],"call":["I18n  backend store_translations ","(str \"янв.\") unshift ","options [] =~ ","options [] "," lambda ","(str \"Январь\") unshift ","(str \"января\") unshift "," inspect_args ","I18n  backend "," filter_args ","I18n Tests Localization Procs  inspect_args "]}," I18n Tests Localization Procs inspect_args":{"type":"method","name":"inspect_args","children":[],"call":["args join ","arg inspect ","arg delete ","arg strftime ","arg strftime sub ","args map "]}," I18n Tests Localization DateTime setup_datetime_translations":{"type":"method","name":"setup_datetime_translations","children":[],"call":["I18n  backend store_translations ","I18n  backend "]}," I18n Tests Localization DateTime setup":{"type":"method","name":"setup","children":[],"call":[" DateTime  new "," setup_datetime_translations "]}," I18n Tests Localization Date setup_date_translations":{"type":"method","name":"setup_date_translations","children":[],"call":["I18n  backend store_translations ","(str \"Jan\") unshift ","(str \"Januar\") unshift ","I18n  backend "]}," I18n Tests Localization Date setup":{"type":"method","name":"setup","children":[],"call":[" Date  new "," setup_date_translations "]}," I18n Tests Interpolation interpolate":{"type":"method","name":"interpolate","children":[],"call":["I18n  backend translate ","I18n  backend ","args pop ","args last is_a? ","args last "]}," I18n Tests Interpolation euc_jp":{"type":"method","name":"euc_jp","children":[],"call":["string encode! "]}," I18n Tests Interpolation capture":{"type":"method","name":"capture","children":[],"call":[" eval ","stream upcase "," eval string ","stream to_s ","stream to_s  upcase ","stream to_s  to_s "]}," I18n Tests Defaults setup":{"type":"method","name":"setup","children":[],"call":["I18n  backend store_translations ","I18n  backend "]}," I18n Tests Basics teardown":{"type":"method","name":"teardown","children":[],"call":["I18n  available_locales= "]}," I18n interpolate_hash":{"type":"method","name":"interpolate_hash","children":[],"call":[" sprintf ","value call ","value respond_to? "," raise ","MissingInterpolationArgument  new ","values [] ","values key? ","(or\n  (nth-ref 1)\n  (nth-ref 2)) to_sym ","match == ","string gsub "," config missing_interpolation_argument_handler call "," config missing_interpolation_argument_handler "," config ","(or\n  (or\n    (nth-ref 1)\n    (nth-ref 2))\n  (send\n    (lvar :match) :tr\n    (str \"%{}\")\n    (str \"\"))) to_sym ","match tr ","Regexp  union "," config interpolation_patterns ","INTERPOLATION_PATTERNS_CACHE  [] ","value call  call "," raise  call ","values []  call "," config missing_interpolation_argument_handler call  call ","value call  respond_to? "," raise  respond_to? ","values []  respond_to? "," config missing_interpolation_argument_handler call  respond_to? ","value call s [] "," raise s [] ","values [] s [] "," config missing_interpolation_argument_handler call s [] ","value call s key? "," raise s key? ","values [] s key? "," config missing_interpolation_argument_handler call s key? ","values (or\n  (nth-ref 1)\n  (nth-ref 2)) to_sym ? ","values (or\n  (or\n    (nth-ref 1)\n    (nth-ref 2))\n  (send\n    (lvar :match) :tr\n    (str \"%{}\")\n    (str \"\"))) to_sym ? "," config interpolation_INTERPOLATION_PATTERNS_CACHE  [] s "]}," I18n interpolate":{"type":"method","name":"interpolate","children":[],"call":[" interpolate_hash "," raise ","ArgumentError  new ","values kind_of? ","ReservedInterpolationKey  new ","1 to_sym ","string =~ ","I18n  reserved_keys_pattern "]}," I18n MissingTranslationData keys":{"type":"method","name":"keys","children":[],"call":["keys << ","keys size < ","keys size ","I18n  normalize_keys tap ","I18n  normalize_keys "," options [] "," options "," key "," locale "]}," I18n MissingTranslationData html_message":{"type":"method","name":"html_message","children":[],"call":[" keys join "," keys ","1 capitalize "," keys last to_s gsub gsub "," keys last to_s gsub "," keys last to_s "," keys last ","CGI  escapeHTML "," titleize "," CGI  escapeHTML s join "," CGI  escapeHTML s "," CGI  escapeHTML s last to_s gsub gsub "," CGI  escapeHTML s last to_s gsub "," CGI  escapeHTML s last to_s "," CGI  escapeHTML s last "]}," I18n ExceptionHandler call":{"type":"method","name":"call","children":[],"call":[" raise ","exception message ","exception html_message ","options [] == ","options [] ","exception is_a? ","$stderr puts ","(ivar :@rescue_format_deprecation) ! "," throw "]}," Kernel suppress_warnings":{"type":"method","name":"suppress_warnings","children":[],"call":[]}," I18n Tests Localization Procs filter_args":{"type":"method","name":"filter_args","children":[],"call":["(send\n  (lvar :args) :map) inspect ","arg delete ","arg is_a? ","args map "]}," I18n handle_enforce_available_locales_deprecation":{"type":"method","name":"handle_enforce_available_locales_deprecation","children":[],"call":["$stderr puts ","@unenforced_available_locales_deprecation ! "," config enforce_available_locales nil? "," config enforce_available_locales "," config ","(ivar :@unenforced_available_locales_deprecation) ! "]}," I18n enforce_available_locales!":{"type":"method","name":"enforce_available_locales!","children":[],"call":[" raise ","I18n InvalidLocale  new "," locale_available? ! "," locale_available? "," config enforce_available_locales "," config "," handle_enforce_available_locales_deprecation "]}," I18n locale_available?":{"type":"method","name":"locale_available?","children":[],"call":["I18n  available_locales map include? ","locale to_s ","I18n  available_locales map ","I18n  available_locales ","I18n  config available_locales_set include? ","I18n  config available_locales_set ","I18n  config "]}," Date inspect":{"type":"method","name":"inspect","children":[],"call":[" strftime "]}," DateTime inspect":{"type":"method","name":"inspect","children":[],"call":[" strftime "]}," I18n MissingTranslationData titleize":{"type":"method","name":"titleize","children":[],"call":["1 capitalize ","key to_s gsub gsub ","key to_s gsub ","key to_s "]}," I18n Config enforce_available_locales=":{"type":"method","name":"enforce_available_locales=","children":[],"call":[]}," I18n Config enforce_available_locales":{"type":"method","name":"enforce_available_locales","children":[],"call":[]}," I18n MissingTranslation Base to_exception":{"type":"method","name":"to_exception","children":[],"call":["MissingTranslationData  new "," options "," key "," locale "]}," I18n MissingTranslation Base message":{"type":"method","name":"message","children":[],"call":[" keys join "," keys ","(send\n  (begin\n    (array\n      (send nil :key)\n      (splat\n        (send\n          (send nil :options) :[]\n          (sym :default))))) :map) join "," normalized_option prepend "," normalized_option ","(array\n  (send nil :key)\n  (splat\n    (send\n      (send nil :options) :[]\n      (sym :default)))) map "," options [] "," options "," key "," options [] is_a? ","(send\n  (begin\n    (array\n      (send nil :key)\n      (splat\n        (lvar :default)))) :map) join ","(array\n  (send nil :key)\n  (splat\n    (lvar :default))) map ","default any? ","(lvasgn :default\n  (send\n    (send nil :options) :[]\n    (sym :default))) is_a? ","(send\n  (begin\n    (array\n      (send nil :key)\n      (splat\n        (send\n          (send nil :options) :[]\n          (sym : options [] ))))) :map) join ","(array\n  (send nil :key)\n  (splat\n    (send\n      (send nil :options) :[]\n      (sym : options [] )))) map ","(send\n  (begin\n    (array\n      (send nil :key)\n      (splat\n        (lvar : options [] )))) :map) join ","(array\n  (send nil :key)\n  (splat\n    (lvar : options [] ))) map "," options []  any? ","(lvasgn : options [] \n  (send\n    (send nil :options) :[]\n    (sym : options [] ))) is_a? "]}," I18n MissingTranslation Base keys":{"type":"method","name":"keys","children":[],"call":["keys << ","keys size < ","keys size ","I18n  normalize_keys tap ","I18n  normalize_keys "," options [] "," options "," key "," locale "]}," I18n MissingTranslation Base html_message":{"type":"method","name":"html_message","children":[],"call":[" keys join "," keys ","1 capitalize "," keys last to_s gsub gsub "," keys last to_s gsub "," keys last to_s "," keys last ","CGI  escapeHTML "," titleize "," CGI  escapeHTML s join "," CGI  escapeHTML s "," CGI  escapeHTML s last to_s gsub gsub "," CGI  escapeHTML s last to_s gsub "," CGI  escapeHTML s last to_s "," CGI  escapeHTML s last "]}," I18n MissingTranslation Base initialize":{"type":"method","name":"initialize","children":[],"call":[" options []= ","v inspect "," options ","v is_a? ","options each ","options dup ","options slice "]}," I18n Backend Cache _fetch":{"type":"method","name":"_fetch","children":[],"call":["I18n  cache_store write ","I18n  cache_store ","result is_a? "," catch ","I18n  cache_store read ","result nil? "," catch  is_a? ","I18n  cache_store read  is_a? "," catch  nil? ","I18n  cache_store read  nil? "]}," I18n Backend Fallbacks extract_non_symbol_default!":{"type":"method","name":"extract_non_symbol_default!","children":[],"call":["options []= ","defaults [] ","defaults index ","default is_a? ! ","default is_a? ","defaults detect ","(send\n  (lvar :options) :[]\n  (sym :default)) flatten ","options [] ","(send\n  (lvar :options) :[]\n  (sym :default)) flatten  [] ","(send\n  (lvar :options) :[]\n  (sym :default)) flatten  index ","(send\n  (lvar :options) :[]\n  (sym :default)) flatten  detect "]}," I18n exists?":{"type":"method","name":"exists?","children":[],"call":[" config backend exists? "," config backend "," config "," raise ","key empty? ","key is_a? "]}," I18n MissingTranslation Base titleize":{"type":"method","name":"titleize","children":[],"call":["1 capitalize ","key to_s gsub gsub ","key to_s gsub ","key to_s "]}," I18n Config missing_interpolation_argument_handler=":{"type":"method","name":"missing_interpolation_argument_handler=","children":[],"call":[]}," I18n Config missing_interpolation_argument_handler":{"type":"method","name":"missing_interpolation_argument_handler","children":[],"call":[" raise ","MissingInterpolationArgument  new "," lambda "]}," I18n Config available_locales_set":{"type":"method","name":"available_locales_set","children":[],"call":["set << << ","locale to_sym ","set << ","locale to_s "," available_locales inject ","Set  new "," available_locales "]}," I18n Backend Chain Implementation exists?":{"type":"method","name":"exists?","children":[],"call":["backend exists? "," backends any? "," backends "]}," I18n Backend Base exists?":{"type":"method","name":"exists?","children":[],"call":[" lookup != "," lookup ","options [] "]}," String force_encoding":{"type":"method","name":"force_encoding","children":[],"call":[" Iconv  conv ","encoding upcase "]}," I18n Config clear_available_locales_set":{"type":"method","name":"clear_available_locales_set","children":[],"call":[]}," I18n Backend Chain Implementation _deep_merge":{"type":"method","name":"_deep_merge","children":[],"call":["copy []= "," _deep_merge ","v is_a? ","value_from_other is_a? ","hash [] ","other_hash each_pair ","hash dup ","hash dup  []= ","hash []  is_a? "]}," I18n Base normalized_key_cache":{"type":"method","name":"normalized_key_cache","children":[],"call":["h []= ","Hash  new "]}," I18n Base normalize_key":{"type":"method","name":"normalize_key","children":[],"call":["k to_sym ","keys map! ","keys delete ","key to_s split ","key to_s ","(send\n  (lvar :key) :map) flatten "," normalize_key ","key map "," normalized_key_cache [] [] "," normalized_key_cache [] "," normalized_key_cache ","@@normalized_key_cache [] [] ","@@normalized_key_cache [] ","k to_i ","key flat_map ","key to_s split  map! ","key to_s split  delete "]}," I18n Base handle_exception":{"type":"method","name":"handle_exception","children":[],"call":["handler call "," send "," config exception_handler "," config ","options [] "," throw "," raise ","exception to_exception ","exception respond_to? "]}," I18n Base enforce_available_locales!":{"type":"method","name":"enforce_available_locales!","children":[],"call":[" raise ","I18n InvalidLocale  new "," locale_available? ! "," locale_available? "," config enforce_available_locales "," config ","locale != "]}," I18n Base locale_available?":{"type":"method","name":"locale_available?","children":[],"call":["I18n  config available_locales_set include? ","I18n  config available_locales_set ","I18n  config "]}," I18n Base normalize_keys":{"type":"method","name":"normalize_keys","children":[],"call":["keys concat "," normalize_key ","I18n  default_separator ","result concat ","locale to_sym ","locale to_sym  to_sym "]}," I18n Base with_locale":{"type":"method","name":"with_locale","children":[],"call":[" locale= "," locale ","tmp_locale == "]}," I18n Base localize":{"type":"method","name":"localize","children":[],"call":[" config backend localize "," config backend "," config "," enforce_available_locales! ","options delete "," config locale ","options dup "," raise ","Disabled  new ","locale == ","options dup  delete ","options dup  dup "]}," I18n Base transliterate":{"type":"method","name":"transliterate","children":[],"call":[" handle_exception "," config backend transliterate "," config backend "," config "," enforce_available_locales! ","options delete "," config locale ","args shift ","args pop dup ","args pop ","args last is_a? ","args last "," raise ","Disabled  new ","locale == ","args pop dup  delete "]}," I18n Base exists?":{"type":"method","name":"exists?","children":[],"call":[" config backend exists? "," config backend "," config "," raise ","key empty? ","key is_a? ","key nil? ","Disabled  new ","locale == "," config locale "]}," I18n Base translate!":{"type":"method","name":"translate!","children":[],"call":[" translate ","options merge "]}," I18n Base translate":{"type":"method","name":"translate","children":[],"call":[" handle_exception ","result is_a? ","backend translate ","key map ","key is_a? "," catch "," raise ","key empty? "," enforce_available_locales! ","options delete "," config locale "," config "," config backend ","args shift ","args pop dup ","args pop ","args last is_a? ","args last ","key nil? ","Disabled  new ","locale == "," translate_key "," config backend  translate ","args shift  map ","args shift  is_a? ","args shift  empty? ","args pop dup  delete "," config  config backend  ","args shift  nil? "," translate_args shift  "]}," I18n Base reload!":{"type":"method","name":"reload!","children":[],"call":[" config backend reload! "," config backend "," config "," config clear_available_locales_set "]}," I18n Base config=":{"type":"method","name":"config=","children":[],"call":["Thread  current []= ","Thread  current "]}," I18n Base config":{"type":"method","name":"config","children":[],"call":["I18n Config  new ","Thread  current [] ","Thread  current "]}," I18n Gettext Helpers N_":{"type":"method","name":"N_","children":[],"call":[]}," I18n Backend Transliterator HashTransliterator add_default_approximations":{"type":"method","name":"add_default_approximations","children":[],"call":[" approximations []= "," approximations ","DEFAULT_APPROXIMATIONS  each "]}," I18n Backend Fallbacks exists?":{"type":"method","name":"exists?","children":[],"call":["I18n  fallbacks [] each ","I18n  fallbacks [] ","I18n  fallbacks ","options fetch "]}," I18n Backend Cache digest_item":{"type":"method","name":"digest_item","children":[],"call":["key hash ","I18n  cache_key_digest hexdigest ","key to_s ","I18n  cache_key_digest ","key to_s hash "]}," I18n cache_key_digest=":{"type":"method","name":"cache_key_digest=","children":[],"call":[]}," I18n cache_key_digest":{"type":"method","name":"cache_key_digest","children":[],"call":[]}," I18n Backend Base translate_localization_format":{"type":"method","name":"translate_localization_format","children":[],"call":["I18n  t downcase ","I18n  t ","object hour < ","object hour ","object respond_to? ","I18n  t upcase ","I18n  t [] ","object mon ","object wday ","format to_s gsub ","format to_s ","e message ","I18n  t! downcase ","I18n  t! ","I18n  t! upcase ","I18n  t! [] upcase ","I18n  t! [] ","(if\n  (send\n    (lvar :object) :respond_to?\n    (sym :hour))\n  (send\n    (lvar :object) :hour)\n  (int 0)) < "]}," I18n Backend Base deep_interpolate":{"type":"method","name":"deep_interpolate","children":[],"call":[" deep_interpolate ","data map ","result []= ","data each_with_object ","I18n  interpolate ","values empty? "]}," I18n new_double_nested_cache":{"type":"method","name":"new_double_nested_cache","children":[],"call":[]}," I18n Middleware call":{"type":"method","name":"call","children":[],"call":["Thread  current []= ","I18n Config  new ","Thread  current ","@app call "]}," I18n Middleware initialize":{"type":"method","name":"initialize","children":[],"call":[]}," I18n Base available_locales_initialized?":{"type":"method","name":"available_locales_initialized?","children":[],"call":[" config available_locales_initialized? "," config "]}," I18n Config available_locales_initialized?":{"type":"method","name":"available_locales_initialized?","children":[],"call":["@@available_locales ! ! ","@@available_locales ! ","(cvar :@@available_locales) ! ! ","(cvar :@@available_locales) ! "]}," I18n Backend KeyValue SubtreeProxy inspect":{"type":"method","name":"inspect","children":[],"call":["@subtree inspect "]}," I18n Backend KeyValue SubtreeProxy nil?":{"type":"method","name":"nil?","children":[],"call":["@subtree nil? "]}," I18n Backend KeyValue SubtreeProxy instance_of?":{"type":"method","name":"instance_of?","children":[],"call":["Hash  == "]}," I18n Backend KeyValue SubtreeProxy is_a?":{"type":"method","name":"is_a?","children":[],"call":["Hash  == "]}," I18n Backend KeyValue SubtreeProxy []":{"type":"method","name":"[]","children":[],"call":["(or-asgn\n  (ivasgn :@subtree)\n  (hash)) []= ","JSON  decode ","@store [] ","@subtree [] "]}," I18n Backend KeyValue SubtreeProxy has_key?":{"type":"method","name":"has_key?","children":[],"call":[" [] ","@subtree has_key? "]}," I18n Backend KeyValue SubtreeProxy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," I18n JSON decode":{"type":"method","name":"decode","children":[],"call":["Oj  load "]}," I18n JSON encode":{"type":"method","name":"encode","children":[],"call":["Oj Rails  encode "]}," I18n Backend KeyValue Implementation pluralize":{"type":"method","name":"pluralize","children":[],"call":["entry [] "," pluralization_key "," subtrees? ","entry is_a? "," pluralization_ pluralization_key  "]}," I18n Backend KeyValue Implementation subtrees?":{"type":"method","name":"subtrees?","children":[],"call":[]}," I18n Backend Base pluralization_key":{"type":"method","name":"pluralization_key","children":[],"call":["count == ","entry has_key? "]}," I18n Backend Base subtrees?":{"type":"method","name":"subtrees?","children":[],"call":[]}," I18n Base eager_load!":{"type":"method","name":"eager_load!","children":[],"call":[" config backend eager_load! "," config backend "," config "]}," I18n reserved_keys_pattern":{"type":"method","name":"reserved_keys_pattern","children":[],"call":[]}," I18n reserve_key":{"type":"method","name":"reserve_key","children":[],"call":[]}," I18n Utils deep_symbolize_keys_in_object":{"type":"method","name":"deep_symbolize_keys_in_object","children":[],"call":[" deep_symbolize_keys_in_object ","value map "," deep_symbolize_keys "]}," I18n Utils deep_symbolize_keys":{"type":"method","name":"deep_symbolize_keys","children":[],"call":["result []= "," deep_symbolize_keys_in_object ","key to_sym ","key respond_to? ","hash each_with_object "]}," I18n Utils deep_merge!":{"type":"method","name":"deep_merge!","children":[],"call":[" block_given? "," deep_merge ","other_val is_a? ","this_val is_a? ","hash merge! "]}," I18n Utils deep_merge":{"type":"method","name":"deep_merge","children":[],"call":[" deep_merge! ","hash dup "]}," I18n Utils except":{"type":"method","name":"except","children":[],"call":["hash delete ","keys each ","hash dup ","hash except ","hash dup  delete ","hash dup  dup ","hash dup  except "]}," I18n InvalidFilenames initialize":{"type":"method","name":"initialize","children":[],"call":["file_errors map first join ","file_errors map first ","file_errors map ","(send\n  (lvar :file_errors) :count) min ","file_errors count "]}," I18n UnsupportedMethod initialize":{"type":"method","name":"initialize","children":[],"call":[]}," I18n Disabled initialize":{"type":"method","name":"initialize","children":[],"call":[]}," I18n Config interpolation_patterns=":{"type":"method","name":"interpolation_patterns=","children":[],"call":[]}," I18n Config interpolation_patterns":{"type":"method","name":"interpolation_patterns","children":[],"call":["I18n DEFAULT_INTERPOLATION_PATTERNS  dup "]}," I18n Backend Simple Implementation eager_load!":{"type":"method","name":"eager_load!","children":[],"call":[" init_translations "," initialized? "]}," I18n Backend Memoize eager_load!":{"type":"method","name":"eager_load!","children":[],"call":[" available_locales "," memoized_lookup "]}," I18n Backend LazyLoadable assert_file_named_correctly!":{"type":"method","name":"assert_file_named_correctly!","children":[],"call":[" raise ","FilenameIncorrect  new ","unexpected_locales empty? ","locale == ","loaded_locales reject ","LocaleExtractor  locale_from_path ","translations keys map ","translations keys ","unLocaleExtractor  locale_from_path s empty? ","translations keys map  reject "]}," I18n Backend LazyLoadable filenames_for_current_locale":{"type":"method","name":"filenames_for_current_locale","children":[],"call":["LocaleExtractor  locale_from_path == ","I18n  locale ","LocaleExtractor  locale_from_path ","I18n  load_path flatten select ","I18n  load_path flatten ","I18n  load_path "]}," I18n Backend LazyLoadable load_translations_and_collect_file_errors":{"type":"method","name":"load_translations_and_collect_file_errors","children":[],"call":["errors << "," assert_file_named_correctly! "," load_translations "]}," I18n Backend LazyLoadable FilenameIncorrect initialize":{"type":"method","name":"initialize","children":[],"call":[]}," I18n Backend LazyLoadable lazy_load?":{"type":"method","name":"lazy_load?","children":[],"call":[]}," I18n Backend LazyLoadable initialized_locales":{"type":"method","name":"initialized_locales","children":[],"call":["Hash  new "]}," I18n Backend LazyLoadable init_translations":{"type":"method","name":"init_translations","children":[],"call":[" raise ","InvalidFilenames  new ","file_errors empty? "," load_translations_and_collect_file_errors ","I18n  load_path "," filenames_for_current_locale "," initialized_locales []= ","I18n  locale "," initialized_locales "," lazy_load? "]}," I18n Backend LazyLoadable lookup":{"type":"method","name":"lookup","children":[],"call":["I18n  with_locale "," lazy_load? "]}," I18n Backend LazyLoadable available_locales":{"type":"method","name":"available_locales","children":[],"call":["LocaleExtractor  locale_from_path ","I18n  load_path map ","I18n  load_path "," lazy_load? ","(send\n  (send\n    (const nil :I18n) :load_path) :map) uniq "]}," I18n Backend LazyLoadable eager_load!":{"type":"method","name":"eager_load!","children":[],"call":[" raise ","UnsupportedMethod  new "," class "," __method__ "," lazy_load? "]}," I18n Backend LazyLoadable reload!":{"type":"method","name":"reload!","children":[],"call":[" lazy_load? "]}," I18n Backend LazyLoadable initialized?":{"type":"method","name":"initialized?","children":[],"call":[" initialized_locales [] ","I18n  locale "," initialized_locales "," lazy_load? "]}," I18n Backend LazyLoadable initialize":{"type":"method","name":"initialize","children":[],"call":[]}," I18n Backend LocaleExtractor locale_from_path":{"type":"method","name":"locale_from_path","children":[],"call":["locale to_sym ","locale nil? ","name split first ","name split ","File  basename ","name split first  to_sym ","name split first  nil? ","File  basename  split first ","File  basename  split ","File  baseFile  basename  "]}," I18n Backend KeyValue Implementation init_translations":{"type":"method","name":"init_translations","children":[],"call":[]}," I18n Backend KeyValue Implementation translations":{"type":"method","name":"translations","children":[],"call":["Utils  deep_symbolize_keys ","Utils  deep_merge! ","(send\n  (send\n    (send\n      (ivar :@store) :keys) :clone) :map) inject ","key to_sym ","main_key to_s split reverse inject ","main_key to_s split reverse ","main_key to_s split ","main_key to_s ","JSON  decode ","@store [] ","@store keys clone map ","@store keys clone ","@store keys ","(send\n  (block\n    (send\n      (send\n        (send\n          (ivar :@store) :keys) :clone) :map)\n    (args\n      (arg :main_key))\n    (begin\n      (lvasgn :main_value\n        (send\n          (const nil :JSON) :decode\n          (send\n            (ivar :@store) :[]\n            (lvar :main_key))))\n      (block\n        (send\n          (send\n            (send\n              (send\n                (lvar :main_key) :to_s) :split\n              (str \".\")) :reverse) :inject\n          (lvar :main_value))\n        (args\n          (arg :value)\n          (arg :key))\n        (hash\n          (pair\n            (send\n              (lvar :key) :to_sym)\n            (lvar :value)))))) :inject) deep_symbolize_keys ","hash deep_merge! ","(send\n  (block\n    (send\n      (send\n        (send\n          (ivar :@store) :keys) :clone) :map)\n    (args\n      (arg :main_key))\n    (begin\n      (lvasgn :JSON  decode \n        (send\n          (const nil :JSON) :decode\n          (send\n            (ivar :@store) :[]\n            (lvar :main_key))))\n      (block\n        (send\n          (send\n            (send\n              (send\n                (lvar :main_key) :to_s) :split\n              (str \".\")) :reverse) :inject\n          (lvar :JSON  decode ))\n        (args\n          (arg :value)\n          (arg :key))\n        (hash\n          (pair\n            (send\n              (lvar :key) :to_sym)\n            (lvar :value)))))) :inject) deep_symbolize_keys "]}," I18n Backend KeyValue Implementation initialized?":{"type":"method","name":"initialized?","children":[],"call":["@store nil? ! ","@store nil? "]}," I18n Backend Fallbacks on_fallback":{"type":"method","name":"on_fallback","children":[],"call":[]}," I18n Backend Fallbacks resolve_entry":{"type":"method","name":"resolve_entry","children":[],"call":["result is_a? "," resolve_entry ","subject call ","options [] ","options delete ","I18n  translate ","options merge ","options key? "," catch ","options [] == "]}," I18n Backend Chain Implementation translations":{"type":"method","name":"translations","children":[],"call":["Utils  deep_merge! "," translations "," init_translations "," initialized? ","backend instance_eval "," backends reverse each_with_object "," backends reverse "," backends "," backends first instance_eval "," backends first ","memo deep_merge! "]}," I18n Backend Chain Implementation init_translations":{"type":"method","name":"init_translations","children":[],"call":["backend send "," backends each "," backends "]}," I18n Backend Chain Implementation eager_load!":{"type":"method","name":"eager_load!","children":[],"call":["backend eager_load! "," backends each "," backends "]}," I18n Backend Chain Implementation initialized?":{"type":"method","name":"initialized?","children":[],"call":[" initialized? ","backend instance_eval "," backends all? "," backends "]}," I18n Backend CacheFile normalized_path":{"type":"method","name":"normalized_path","children":[],"call":["file sub "," path_roots index to_s "," path_roots index "," path_roots "," raise ","InvalidLocaleData  new "," path_roots find ","file method "]}," I18n Backend CacheFile load_file":{"type":"method","name":"load_file","children":[],"call":[" store_translations ","(lvasgn :digest\n  (send\n    (send\n      (const\n        (const\n          (const nil :OpenSSL) :Digest) :SHA256) :file\n      (lvar :filename)) :hexdigest)) == ","OpenSSL Digest SHA256  file hexdigest ","OpenSSL Digest SHA256  file ","(lvasgn :mtime\n  (send\n    (send\n      (const nil :File) :mtime\n      (lvar :filename)) :to_i)) == ","File  mtime to_i ","File  mtime "," lookup ","I18n Backend Flatten  escape_default_separator "," normalized_path "," initialized? "," respond_to? ! "," respond_to? ","(lvasgn :digest\n  (send\n    (send\n      (const\n        (const nil :Digest) :SHA2) :file\n      (lvar :filename)) :hexdigest)) == ","Digest SHA2  file hexdigest ","Digest SHA2  file ","(lvasgn :OpenSSL Digest SHA256  file hexdigest \n  (send\n    (send\n      (const\n        (const\n          (const nil :OpenSSL) :Digest) :SHA256) :file\n      (lvar :filename)) :hexOpenSSL Digest SHA256  file hexdigest )) == ","(lvasgn :Digest SHA2  file hexdigest \n  (send\n    (send\n      (const\n        (const\n          (const nil :OpenSSL) :Digest) :SHA256) :file\n      (lvar :filename)) :hexDigest SHA2  file hexdigest )) == ","OpenSSL Digest SHA256  file hexOpenSSL Digest SHA256  file hexdigest  ","OpenSSL Digest SHA256  file hexDigest SHA2  file hexdigest  ","(lvasgn :File  mtime to_i \n  (send\n    (send\n      (const nil :File) :File  mtime to_i \n      (lvar :filename)) :to_i)) == ","File  File  mtime to_i  to_i ","File  File  mtime to_i  ","(lvasgn :OpenSSL Digest SHA256  file hexdigest \n  (send\n    (send\n      (const\n        (const nil :Digest) :SHA2) :file\n      (lvar :filename)) :hexOpenSSL Digest SHA256  file hexdigest )) == ","(lvasgn :Digest SHA2  file hexdigest \n  (send\n    (send\n      (const\n        (const nil :Digest) :SHA2) :file\n      (lvar :filename)) :hexDigest SHA2  file hexdigest )) == ","Digest SHA2  file hexOpenSSL Digest SHA256  file hexdigest  ","Digest SHA2  file hexDigest SHA2  file hexdigest  "]}," I18n Backend Base load_json":{"type":"method","name":"load_json","children":[],"call":[" raise ","InvalidLocaleData  new ","e inspect "," JSON  parse ","File  read "," JSON  load_file "," JSON  respond_to? "]}," I18n Backend Base eager_loaded?":{"type":"method","name":"eager_loaded?","children":[],"call":[]}," I18n Backend Base eager_load!":{"type":"method","name":"eager_load!","children":[],"call":[]}," I18n Base translate_key":{"type":"method","name":"translate_key","children":[],"call":[" handle_exception ","result is_a? ","backend translate "," catch "]}," I18n Backend Pluralization symbolic_count":{"type":"method","name":"symbolic_count","children":[],"call":["count to_s to_sym ","count to_s ","count == "]}," I18n MissingTranslation Base normalized_option":{"type":"method","name":"normalized_option","children":[],"call":["I18n  normalize_keys join ","I18n  normalize_keys "," options [] "," options "," locale "]}," Hash deep_stringify_keys":{"type":"method","name":"deep_stringify_keys","children":[],"call":["result []= ","key to_s ","value deep_stringify_keys ","value is_a? "," inject ","value deep_stringify_keys  deep_stringify_keys ","value deep_stringify_keys  is_a? "]}," I18n HashRefinements symbolize_key":{"type":"method","name":"symbolize_key","children":[],"call":["key to_sym ","key respond_to? "]}," I18n HashRefinements deep_merge!":{"type":"method","name":"deep_merge!","children":[],"call":[" merge! ","v1 merge ","Hash  === "," lambda ","block call "," block_given? ","this_val deep_merge ","other_val is_a? ","this_val is_a? "]}," I18n HashRefinements deep_symbolize_keys":{"type":"method","name":"deep_symbolize_keys","children":[],"call":["result []= "," symbolize_key ","value deep_symbolize_keys ","value is_a? "," each_with_object "," deep_symbolize_keys_in_object ","value deep_symbolize_keys  deep_symbolize_keys ","value deep_symbolize_keys  is_a? "]}," I18n HashRefinements except":{"type":"method","name":"except","children":[],"call":[" slice "," keys - "," keys "," dup except! "," dup "]}," I18n HashRefinements slice":{"type":"method","name":"slice","children":[],"call":["h []= "," fetch "," has_key? ","keep_keys each "]}," I18n HashRefinements deep_symbolize_keys_in_object":{"type":"method","name":"deep_symbolize_keys_in_object","children":[],"call":[" deep_symbolize_keys_in_object ","value map ","value deep_symbolize_keys "]}," I18n HashRefinements except!":{"type":"method","name":"except!","children":[],"call":[" delete ","keys each "]}," I18n HashRefinements deep_merge":{"type":"method","name":"deep_merge","children":[],"call":[" dup deep_merge! "," dup "]}," I18n Backend Fallbacks resolve":{"type":"method","name":"resolve","children":[],"call":["result is_a? ","I18n  translate ","options merge ","options [] ","options delete "," catch ","subject is_a? ","options [] == "]}}