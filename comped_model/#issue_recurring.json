{" IssueRecurring SettingsHelperPatch authors":{"type":"method","name":"authors","children":[],"call":["unchanged << "," options_from_collection_for_select ","User  all "," options_for_select "," t ","User  active ","options << ","User  active + ","User  anonymous ","User  find_by try ","User  find_by "," options_for_select  << ","  options_for_select _from_collection_for_select ","  options_for_select _for_select "]}," IssueRecurring IssuesHelperPatch delete_button":{"type":"method","name":"delete_button","children":[],"call":[" link_to "," recurrence_path "," l ","r editable? "]}," IssueRecurring IssuesHelperPatch next_recurrence_date":{"type":"method","name":"next_recurrence_date","children":[],"call":["(dstr\n  (begin\n    (if\n      (lvar :intro)\n      (dstr\n        (begin\n          (send nil :t\n            (str \".next_recurrence\")))\n        (str \" \")) nil))) html_safe ","next_dates [] "," t ","r next_dates "]}," IssueRecurring IssuesHelperPatch last_recurrence":{"type":"method","name":"last_recurrence","children":[],"call":["s html_safe "," link_to "," issue_path ","r last_issue ","r last_issue id ","r last_issue present? "," t "]}," IssueRecurring IssuesHelperPatch delay_mode_options":{"type":"method","name":"delay_mode_options","children":[],"call":["translations [] ","k to_sym ","IssueRecurrence  delay_modes map ","IssueRecurrence  delay_modes "," t "," t  [] "]}," IssueRecurring IssuesHelperPatch anchor_mode_options":{"type":"method","name":"anchor_mode_options","children":[],"call":[" sanitize "," t ","IssueRecurrence  anchor_modes map ","IssueRecurrence  anchor_modes "]}," IssueRecurring IssuesHelperPatch mode_options":{"type":"method","name":"mode_options","children":[],"call":["@issue start_date present? ","@issue start_date ","@issue due_date blank? ","@issue due_date ","@issue due_date present? ","@issue start_date blank? "," sanitize ","descriptions [] ","k to_sym ","descriptions [] empty? ","intervals [] pluralize ","intervals [] ","IssueRecurrence  modes map ","IssueRecurrence  modes "," t "," t  [] "," t  [] empty? "," t  [] pluralize ","IssueRecurrence  intervals [] pluralize s map ","IssueRecurrence  intervals [] pluralize s "]}," IssueRecurring IssuesHelperPatch creation_mode_options":{"type":"method","name":"creation_mode_options","children":[],"call":[" sanitize ","translations [] ","k to_sym ","IssueRecurrence  creation_modes map ","IssueRecurrence  creation_modes "," t "," t  [] "]}," IssueRecurring IssuesControllerPatch prepare_recurrences":{"type":"method","name":"prepare_recurrences","children":[],"call":["@issue recurrence_copies ","IssueRecurrence  new ","r visible? ","@issue recurrences select ","@issue recurrences ","@issue due_date blank? ","@issue due_date ","@issue start_date present? ","@issue start_date ","IssueRecurrence  issue_dates "]}," IssueRecurring IssuePatch default_reassign":{"type":"method","name":"default_reassign","children":[],"call":[" default_assign "," assigned_to= "]}," IssueRecurring IssuesHelperPatch anchor_to_start_options":{"type":"method","name":"anchor_to_start_options","children":[],"call":["disabled << ","@issue due_date blank? ","@issue due_date ","@issue start_date present? ","@issue start_date ","@issue due_date present? ","@issue start_date blank? "," sanitize "," t ","(true) map "]}," IssueRecurring IssuesHelperPatch include_subtasks_options":{"type":"method","name":"include_subtasks_options","children":[],"call":[" sanitize "," t ","(true) map "]}," IssueRecurring IssuePatch substitute_if_last_issue":{"type":"method","name":"substitute_if_last_issue","children":[],"call":["r update! ","r issue recurrence_copies last ","r issue recurrence_copies ","r issue ","r nil? "," recurrence_of recurrences find_by "," recurrence_of recurrences "," recurrence_of "," recurrence_of blank? "," recurrence_of recurrences find_by  update! "," recurrence_of recurrences find_by  issue  recurrence_of recurrences find_by ecu recurrence_of recurrences find_by  recurrence_of recurrences find_by ence_copies last "," recurrence_of recurrences find_by  issue  recurrence_of recurrences find_by ecu recurrence_of recurrences find_by  recurrence_of recurrences find_by ence_copies "," recurrence_of recurrences find_by  issue "," recurrence_of recurrences find_by  nil? ","  recurrence_of recurrences find_by ecu recurrence_of recurrences find_by  recurrence_of recurrences find_by ence_of  recurrence_of recurrences find_by ecu recurrence_of recurrences find_by  recurrence_of recurrences find_by ences find_by ","  recurrence_of recurrences find_by ecu recurrence_of recurrences find_by  recurrence_of recurrences find_by ence_of  recurrence_of recurrences find_by ecu recurrence_of recurrences find_by  recurrence_of recurrences find_by ences ","  recurrence_of recurrences find_by ecu recurrence_of recurrences find_by  recurrence_of recurrences find_by ence_of ","  recurrence_of recurrences find_by ecu recurrence_of recurrences find_by  recurrence_of recurrences find_by ence_of blank? "]}," IssueRecurring IssuesHelperPatch limit_mode_options":{"type":"method","name":"limit_mode_options","children":[],"call":[" options_for_select "," sanitize ","translations map "," t "," t  map "]}," IssueRecurring IssuesHelperPatch predicted_recurrences":{"type":"method","name":"predicted_recurrences","children":[],"call":["(dstr\n  (begin\n    (if\n      (lvar :intro)\n      (dstr\n        (begin\n          (send nil :t\n            (str \".predicted_recurrence\")))\n        (str \" \")) nil))) html_safe "," format_dates "," t "]}," IssueRecurring IssuesHelperPatch next_recurrences":{"type":"method","name":"next_recurrences","children":[],"call":["(begin\n  (if\n    (lvar :intro)\n    (dstr\n      (begin\n        (send nil :t\n          (str \".next_recurrence\")))\n      (str \" \")) nil)) html_safe "," format_dates "," t "]}," IssueRecurring IssuesHelperPatch format_dates":{"type":"method","name":"format_dates","children":[],"call":["dates_str empty? ","(send\n  (lvar :dates_list) :map) join ","dates [] ","dates_list map ","(send\n  (lvar :dates_list) :map) join  empty? "]}," IssueRecurring IssuesHelperPatch nameless_error_messages_for":{"type":"method","name":"nameless_error_messages_for","children":[],"call":[" render_error_messages ","(send\n  (send\n    (lvar :objects) :compact) :map) flatten ","o errors messages values ","o errors messages ","o errors ","objects compact map ","objects compact "," instance_variable_get ","o is_a? ","objects map ","o (send\n  (send\n    (lvar :objects) :compact) :map) flatten  messages values ","o (send\n  (send\n    (lvar :objects) :compact) :map) flatten  messages ","o (send\n  (send\n    (lvar :objects) :compact) :map) flatten  "]}," IssueRecurring SettingsHelperPatch journal_mode_options":{"type":"method","name":"journal_mode_options","children":[],"call":[" options_for_select "," t ","modes map "]}," IssueRecurring SettingsControllerPatch save_issue_recurring_settings":{"type":"method","name":"save_issue_recurring_settings","children":[],"call":[" params []= "," params ","settings []= "," params [] [] == "," params [] [] "," params [] ","IssueRecurrence JOURNAL_MODES  first ","IssueRecurrence JOURNAL_MODES  include? "," params [] [] to_sym ","User  exists? "," params [] [] to_i ","IssueRecurrence AHEAD_MODES  first ","IssueRecurrence AHEAD_MODES  include? "," params [] [] to_i abs ","User  find_by try ","User  find_by "]}," IssueRecurring SettingPatch plugin_issue_recurring":{"type":"method","name":"plugin_issue_recurring","children":[],"call":[" with_indifferent_access "]}," IssueRecurring IssuePatch CopyFromWithRecurrences copy_from":{"type":"method","name":"copy_from","children":[],"call":[" recurrences= ","@copied_from recurrences map ","@copied_from recurrences ","Setting  plugin_issue_recurring [] ","Setting  plugin_issue_recurring "," recurrence_of= ","options [] "]}," IssueRecurring SystemTestCasePatch driven_by":{"type":"method","name":"driven_by","children":[],"call":["kwargs []= "]}," IssueRecurring SettingsHelperPatch ahead_mode_options":{"type":"method","name":"ahead_mode_options","children":[],"call":[" options_for_select "," t ","modes map "]}," IssueRecurring SchemaPatch define":{"type":"method","name":"define","children":[],"call":[" assume_plugin_migrated_upto_version ","info except each ","info except "]}," IssueRecurring SchemaPatch assume_plugin_migrated_upto_version":{"type":"method","name":"assume_plugin_migrated_upto_version","children":[],"call":[" execute "," insert_versions_sql ","inserting map! ","ActiveRecord SchemaMigration  create_table ","inserting any? ","v <= ","(send\n  (lvar :versions) :-\n  (lvar :migrated)) select ","versions - ","plugin migrations ","Redmine Plugin Migrator  get_all_versions ","version to_i ","Redmine Plugin  find "," insert_plugin migrations _sql "," insert_version to_i s_sql ","(send\n  (lvar :plugin migrations ) :-\n  (lvar :migrated)) select ","(send\n  (lvar :versions) :-\n  (lvar :Redmine Plugin Migrator  get_all_versions )) select ","(send\n  (lvar :version to_i s) :-\n  (lvar :migrated)) select ","plugin migrations  - ","version to_i s - ","Redmine Plugin  find  migrations ","Redmine Plugin Migrator  get_all_plugin migrations  ","Redmine Plugin Migrator  get_all_version to_i s ","version to_i  to_i "]}," IssueRecurring SchemaDumperPatch define_params":{"type":"method","name":"define_params","children":[],"call":["versions join ","versions << ","plugin id ","current_migration > ","Redmine Plugin Migrator  current_version ","Redmine Plugin  all each ","Redmine Plugin  all "," present? ","Redmine Plugin Migrator  current_version  > "]}}