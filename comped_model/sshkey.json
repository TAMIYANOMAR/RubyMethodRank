{" SSHKey to_byte_array":{"type":"method","name":"to_byte_array","children":[],"call":["result reverse ","result << ","num & ","result last [] == ","num [] ","result last [] ","result last ","num == "]}," SSHKey encode_unsigned_int_32":{"type":"method","name":"encode_unsigned_int_32","children":[],"call":["out []= ","value & ","value >> & ","value >> "]}," SSHKey ssh_public_key_conversion":{"type":"method","name":"ssh_public_key_conversion","children":[],"call":[" to_byte_array pack "," to_byte_array "," encode_unsigned_int_32 pack "," encode_unsigned_int_32 "," to_byte_array length ","(int 0) pack ","@key_object public_key n to_i ","@key_object public_key n ","@key_object public_key ","@key_object public_key e to_i ","@key_object public_key e ","byte_array pack ","byte_array length "," key_object public_key send to_i "," key_object public_key send "," key_object public_key "," key_object ","SSH_CONVERSION  [] each ","SSH_CONVERSION  [] "," type ","SSH_TYPES  [] ","pubkeystr + + ","pubkeystr + ","(send\n  (lvar :data) :length) pack ","data length ","\u0000 + ","first_byte < ","data []= ","(send\n  (int 128) :&\n  (lvar :first_byte)) pack ","128 & ","val < ","data [] unpack first ","data [] unpack ","data [] ","val to_s ","pubkey send ","methods inject ","(int 7) pack + ","(int 7) pack ","SSH_TYPES  invert [] ","SSH_TYPES  invert "," raise "," class ssh_public_key_data_ecdsa "," class "," class ssh_public_key_data_dsarsa "," public_key_object send "," public_key_object ","(send\n  (send nil :typestr) :length) pack + "," typestr ","(send\n  (send nil :typestr) :length) pack "," typestr length "," to_byt@key_object public_key e to_i _array pack "," to_ to_byte_array  pack "," to_byt@key_object public_key e to_i _array "," to_ to_byte_array  "," e@key_object public_key n to_i code_u@key_object public_key n to_i sig@key_object public_key n to_i ed_i@key_object public_key n to_i t_32 pack "," @key_object public_key e to_i ncod@key_object public_key e to_i _unsign@key_object public_key e to_i d_int_32 pack "," e@key_object public_key n to_i code_u@key_object public_key n to_i sig@key_object public_key n to_i ed_i@key_object public_key n to_i t_32 "," @key_object public_key e to_i ncod@key_object public_key e to_i _unsign@key_object public_key e to_i d_int_32 "," to_byte_array le@key_object public_key n to_i gth "," to_byt@key_object public_key e to_i _array l@key_object public_key e to_i ngth "," to_ to_byte_array  length ","(i@key_object public_key n to_i t 0) pack ","@key_object public_key @key_object public_key n to_i  to_i ","@k@key_object public_key e to_i y_obj@key_object public_key e to_i ct public_k@key_object public_key e to_i y n to_i ","@key_object public_key @key_object public_key n to_i  ","@k@key_object public_key e to_i y_obj@key_object public_key e to_i ct public_k@key_object public_key e to_i y n ","@k@key_object public_key e to_i y_obj@key_object public_key e to_i ct public_k@key_object public_key e to_i y ","@k@key_object public_key e to_i y_obj@key_object public_key e to_i ct public_k@key_object public_key e to_i y @key_object public_key e to_i  to_i ","@k@key_object public_key e to_i y_obj@key_object public_key e to_i ct public_k@key_object public_key e to_i y @key_object public_key e to_i  ","byt@key_object public_key e to_i _array pack "," to_byte_array  pack ","byte_array le@key_object public_key n to_i gth ","byt@key_object public_key e to_i _array l@key_object public_key e to_i ngth "," to_byte_array  length "," key_object public_key se@key_object public_key n to_i d to_i "," k@key_object public_key e to_i y_obj@key_object public_key e to_i ct public_k@key_object public_key e to_i y s@key_object public_key e to_i nd to_i "," key_object public_key se@key_object public_key n to_i d "," k@key_object public_key e to_i y_obj@key_object public_key e to_i ct public_k@key_object public_key e to_i y s@key_object public_key e to_i nd "," k@key_object public_key e to_i y_obj@key_object public_key e to_i ct public_k@key_object public_key e to_i y "," k@key_object public_key e to_i y_obj@key_object public_key e to_i ct ","SSH_CONVERSION  [] @key_object public_key e to_i ach "," typ@key_object public_key e to_i  ","pubk@key_object public_key e to_i ystr + + "," key_object public_key str + + ","pubk@key_object public_key e to_i ystr + "," key_object public_key str + ","(se@key_object public_key n to_i d\n  (lvar :data) :le@key_object public_key n to_i gth) pack ","(s@key_object public_key e to_i nd\n  (lvar :data) :l@key_object public_key e to_i ngth) pack ","(send\n  (lvar :\u0000 + ) :length) pack ","(send\n  (lvar :val to_s ) :length) pack ","(send\n  (lvar : class ssh_public_key_data_ecdsa ) :length) pack ","(send\n  (lvar : class ssh_public_key_data_dsarsa ) :length) pack ","data le@key_object public_key n to_i gth ","data l@key_object public_key e to_i ngth ","\u0000 +  length ","val to_s  length "," class ssh_public_key_data_ecdsa  length "," class ssh_public_key_data_dsarsa  length ","first_byt@key_object public_key e to_i  < ","data [] unpack first  < ","\u0000 +  []= ","val to_s  []= "," class ssh_public_key_data_ecdsa  []= "," class ssh_public_key_data_dsarsa  []= ","(se@key_object public_key n to_i d\n  (i@key_object public_key n to_i t 128) :&\n  (lvar :first_byte)) pack ","(s@key_object public_key e to_i nd\n  (int 128) :&\n  (lvar :first_byt@key_object public_key e to_i )) pack ","(send\n  (int 128) :&\n  (lvar :data [] unpack first )) pack ","pubkey send  < "," public_key_object send  < ","data [] u@key_object public_key n to_i pack first ","\u0000 +  [] unpack first ","val to_s  [] unpack first "," class ssh_public_key_data_ecdsa  [] unpack first "," class ssh_public_key_data_dsarsa  [] unpack first ","data [] u@key_object public_key n to_i pack ","\u0000 +  [] unpack ","val to_s  [] unpack "," class ssh_public_key_data_ecdsa  [] unpack "," class ssh_public_key_data_dsarsa  [] unpack ","\u0000 +  [] ","val to_s  [] "," class ssh_public_key_data_ecdsa  [] "," class ssh_public_key_data_dsarsa  [] ","pubkey send  to_s "," public_key_object send  to_s ","pubkey se@key_object public_key n to_i d ","pubk@key_object public_key e to_i y s@key_object public_key e to_i nd "," key_object public_key  send ","methods i@key_object public_key n to_i ject ","m@key_object public_key e to_i thods inj@key_object public_key e to_i ct ","SSH_CONVERSION  []  inject ","(i@key_object public_key n to_i t 7) pack + ","(i@key_object public_key n to_i t 7) pack ","SSH_TYPES  i@key_object public_key n to_i vert [] ","SSH_TYPES  inv@key_object public_key e to_i rt [] ","SSH_TYPES  i@key_object public_key n to_i vert ","SSH_TYPES  inv@key_object public_key e to_i rt "," rais@key_object public_key e to_i  "," class ssh_public_k@key_object public_key e to_i y_data_@key_object public_key e to_i cdsa "," class ssh_public_key_\u0000 + _ecdsa "," class ssh_public_key_val to_s _ecdsa "," class ssh_public_key_ class ssh_public_key_data_ecdsa _ecdsa "," class ssh_public_key_ class ssh_public_key_data_dsarsa _ecdsa "," class ssh_public_k@key_object public_key e to_i y_data_dsarsa "," class ssh_public_key_\u0000 + _dsarsa "," class ssh_public_key_val to_s _dsarsa "," class ssh_public_key_ class ssh_public_key_data_ecdsa _dsarsa "," class ssh_public_key_ class ssh_public_key_data_dsarsa _dsarsa "," public_key_object se@key_object public_key n to_i d "," public_k@key_object public_key e to_i y_obj@key_object public_key e to_i ct s@key_object public_key e to_i nd "," public_k@key_object public_key e to_i y_obj@key_object public_key e to_i ct ","(se@key_object public_key n to_i d\n  (se@key_object public_key n to_i d @key_object public_key n to_i il :typestr) :le@key_object public_key n to_i gth) pack + ","(s@key_object public_key e to_i nd\n  (s@key_object public_key e to_i nd nil :typ@key_object public_key e to_i str) :l@key_object public_key e to_i ngth) pack + ","(send\n  (send nil :SSH_TYPES  [] ) :length) pack + ","(send\n  (send nil :SSH_TYPES  invert [] ) :length) pack + "," typ@key_object public_key e to_i str "," SSH_TYPES  []  "," SSH_TYPES  invert []  ","(se@key_object public_key n to_i d\n  (se@key_object public_key n to_i d @key_object public_key n to_i il :typestr) :le@key_object public_key n to_i gth) pack ","(s@key_object public_key e to_i nd\n  (s@key_object public_key e to_i nd nil :typ@key_object public_key e to_i str) :l@key_object public_key e to_i ngth) pack ","(send\n  (send nil :SSH_TYPES  [] ) :length) pack ","(send\n  (send nil :SSH_TYPES  invert [] ) :length) pack "," typestr le@key_object public_key n to_i gth "," typ@key_object public_key e to_i str l@key_object public_key e to_i ngth "," SSH_TYPES  []  length "," SSH_TYPES  invert []  length "]}," SSHKey initialize":{"type":"method","name":"initialize","children":[],"call":["(str \"ssh-rsa\") join ","Base64  strict_encode64 "," ssh_public_key_conversion ","key_object public_key to_pem ","key_object public_key ","key_object to_pem ","(str \"ssh-rsa\") join strip ","@key_object public_key to_pem ","@key_object public_key ","@key_object to_pem ","options [] ","OpenSSL PKey RSA  new ","Digest MD5  hexdigest gsub ","Digest MD5  hexdigest ","Base64  encode64 gsub ","Base64  encode64 ","OpenSSL PKey DSA  new "," passphrase "," directives= ","ECDSA_CURVES  invert [] ","@key_object group curve_name ","@key_object group ","ECDSA_CURVES  invert ","OpenSSL PKey EC  new ","OpenSSL PKey RSA  new  public_key to_pem ","OpenSSL PKey DSA  new  public_key to_pem ","OpenSSL PKey EC  new  public_key to_pem ","OpenSSL PKey RSA  new  public_key ","OpenSSL PKey DSA  new  public_key ","OpenSSL PKey EC  new  public_key ","OpenSSL PKey RSA  new  to_pem ","OpenSSL PKey DSA  new  to_pem ","OpenSSL PKey EC  new  to_pem ","OpenSSL PKey RSA  new  group curve_name ","OpenSSL PKey DSA  new  group curve_name ","OpenSSL PKey EC  new  group curve_name ","OpenSSL PKey RSA  new  group ","OpenSSL PKey DSA  new  group ","OpenSSL PKey EC  new  group "]}," SSHKey generate":{"type":"method","name":"generate","children":[],"call":[" raise "," new ","OpenSSL PKey DSA  generate to_pem ","options [] ","OpenSSL PKey DSA  generate ","OpenSSL PKey RSA  generate to_pem ","OpenSSL PKey RSA  generate ","type downcase ","OpenSSL Cipher Cipher  new ","type == ","OpenSSL Cipher  new ","key_object to_pem ","key_pkey generate_key ","OpenSSL PKey EC  new ","ECDSA_CURVES  [] ","OpenSSL PKey EC  generate ","OpenSSL OPENSSL_VERSION_NUMBER  >= "," jruby_not_implemented ","VALID_BITS  [] join ","VALID_BITS  [] ","VALID_BITS  [] include? ","VALID_BITS  [] nil? ","key_pkey generate_key  to_pem ","OpenSSL PKey EC  generate  to_pem ","OpenSSL PKey DSA  generate  to_pem ","OpenSSL PKey RSA  generate  to_pem ","OpenSSL PKey EC  new  generate_key "]}," SSHKey fingerprint":{"type":"method","name":"fingerprint","children":[],"call":["Digest MD5  hexdigest gsub ","Digest MD5  hexdigest "," ssh_public_key_conversion "]}," SSHKey ssh_public_key":{"type":"method","name":"ssh_public_key","children":[],"call":["(str \"ssh-rsa\") join strip ","(str \"ssh-rsa\") join ","Base64  encode64 gsub ","Base64  encode64 "," ssh_public_key_conversion ","(send\n  (const nil :SSH_TYPES) :[]\n  (send nil :type)) join strip ","(send\n  (const nil :SSH_TYPES) :[]\n  (send nil :type)) join "," comment ","SSH_TYPES  [] "," type ","(send\n  (send\n    (send nil :directives) :join\n    (str \",\")) :strip) join strip ","(send\n  (send\n    (send nil :directives) :join\n    (str \",\")) :strip) join "," directives join strip "," directives join "," directives ","SSH_TYPES  invert [] ","SSH_TYPES  invert "," typestr "]}," SSHKey rsa_public_key":{"type":"method","name":"rsa_public_key","children":[],"call":[" key_object public_key to_pem "," key_object public_key "," key_object "," public_key "," type == "," type "]}," SSHKey rsa_private_key":{"type":"method","name":"rsa_private_key","children":[],"call":[" key_object to_pem "," key_object "," private_key "," type == "," type "]}," SSHKey dsa_public_key":{"type":"method","name":"dsa_public_key","children":[],"call":[" public_key "," type == "," type "]}," SSHKey dsa_private_key":{"type":"method","name":"dsa_private_key","children":[],"call":[" private_key "," type == "," type "]}," SSHKey public_key":{"type":"method","name":"public_key","children":[],"call":[" key_object public_key to_pem "," key_object public_key "," key_object "," public_key_object to_pem "," public_key_object "]}," SSHKey private_key":{"type":"method","name":"private_key","children":[],"call":[" key_object to_pem "," key_object "," jruby_not_implemented "," type == "," type "]}," SSHKey from_byte_array":{"type":"method","name":"from_byte_array","children":[],"call":["item * ","256 ** ","byte_array reverse each_with_index ","byte_array reverse "," raise ","expected_size != ","byte_array size ","expected_size nil? ! ","expected_size nil? "]}," SSHKey valid?":{"type":"method","name":"valid?","children":[],"call":[]}," SSHKey valid_ssh_public_key?":{"type":"method","name":"valid_ssh_public_key?","children":[],"call":["SSH_CONVERSION  [] size == ","data size ","SSH_CONVERSION  [] size ","SSH_CONVERSION  [] ","index + ","data << "," from_byte_array ","unpacked [] ","index + - ","unpacked [] nil? ","decoded unpack ","decoded sub! ","Base64  encode64 gsub == ","Base64  encode64 gsub ","Base64  encode64 ","Base64  decode64 ","(int 0) pack ","SSH_TYPES  invert [] ","SSH_TYPES  invert ","ssh_public_key split "," parse_ssh_public_key "," unpacked_byte_array size "," unpacked_byte_array ","sections size == ","sections size ","sections [] num_bytes == ","sections [] num_bytes ","sections [] ","SSH_TYPES  [] ","index +  + ","decoded unpack  [] ","index +  + - ","decoded unpack  [] nil? ","Base64  decode64  unpack ","Base64  decode64  sub! "," decoded unpack _byte_array size "," decoded unpack _byte_array "," unpacked_byte_array  size == "," unpacked_byte_array  size "," unpacked_byte_array  [] num_bytes == "," unpacked_byte_array  [] num_bytes "," unpacked_byte_array  [] "]}," SSHKey sha1_fingerprint":{"type":"method","name":"sha1_fingerprint","children":[],"call":["Digest SHA1  hexdigest gsub ","Digest SHA1  hexdigest "," ssh_public_key_conversion "," fingerprint_regex "," decoded_key "," new sha1_fingerprint "," new ","key match "]}," SSHKey md5_fingerprint":{"type":"method","name":"md5_fingerprint","children":[],"call":["Digest MD5  hexdigest gsub ","Digest MD5  hexdigest "," ssh_public_key_conversion "," fingerprint_regex "," decoded_key "," new md5_fingerprint "," new ","key match "]}," SSHKey encrypted_private_key":{"type":"method","name":"encrypted_private_key","children":[],"call":[" key_object to_pem "," passphrase ","OpenSSL Cipher Cipher  new "," key_object "," private_key ","OpenSSL Cipher  new "]}," SSHKey fingerprint_regex":{"type":"method","name":"fingerprint_regex","children":[],"call":[]}," SSHKey decoded_key":{"type":"method","name":"decoded_key","children":[],"call":["Base64  decode64 ","key chomp gsub ","key chomp ","key gsub "," parse_ssh_public_key last "," parse_ssh_public_key "]}," SSHKey parse_ssh_public_key":{"type":"method","name":"parse_ssh_public_key","children":[],"call":["parsed [] ","index + ","SSH_TYPES  invert [] nil? ! ","SSH_TYPES  invert [] nil? ","SSH_TYPES  invert [] ","SSH_TYPES  invert ","parsed each_with_index ","public_key split "," raise ","public_key =~ ","SSH_TYPES  [] ","public_key strip ","public_key gsub ","public_key split  [] ","public_key split  each_with_index ","public_key strip  split ","public_key gsub  split ","public_key strip  =~ ","public_key gsub  =~ ","public_key strip  strip ","public_key gsub  strip ","public_key strip  gsub ","public_key gsub  gsub "]}," SSHKey bits":{"type":"method","name":"bits","children":[],"call":[" key_object to_text match [] to_i "," key_object to_text match [] "," key_object to_text match "," key_object to_text "," key_object "," class ssh_public_key_bits "," ssh_public_key "," class "]}," SSHKey randomart":{"type":"method","name":"randomart","children":[],"call":["output << ","- * ","augmentation_string [] ","(send\n  (send\n    (lvar :field) :[]\n    (lvar :x)) :[]\n  (lvar :y)) min ","field [] [] ","field [] ","fieldsize_x times ","fieldsize_y times "," sprintf "," bits "," type upcase "," type ","field [] []= ","num_bytes - ","fieldsize_y / ","fieldsize_x / ","field [] [] < ","(send\n  (array\n    (lvar :y)\n    (int 0)) :max) min ","fieldsize_y - ","(lvar :y) max ","(send\n  (array\n    (lvar :x)\n    (int 0)) :max) min ","fieldsize_x - ","(lvar :x) max ","byte & != ","byte & ","4 times ","raw_digest bytes each ","raw_digest bytes ","Array  new ","raw_digest bytesize ","Digest MD5  digest "," ssh_public_key_conversion "," bits < ","len - ","augmentation_string length - ","augmentation_string length "," raise "," digest ","Digest SHA2  new digest ","Digest SHA2  new ","(send\n  (send\n    (lvar :field) :[]\n    (lvar :x)) :[]\n  (lvar :(send\n  (array\n    (lvar :y)\n    (int 0)) :max) min )) min ","(send\n  (send\n    (lvar :field) :[]\n    (lvar :x)) :[]\n  (lvar :fieldsize_y / )) min ","(send\n  (send\n    (lvar :field) :[]\n    (lvar :(send\n  (array\n    (lvar :x)\n    (int 0)) :max) min )) :[]\n  (lvar :y)) min ","(send\n  (send\n    (lvar :field) :[]\n    (lvar :fieldsize_x / )) :[]\n  (lvar :y)) min ","fieldsize_(send\n  (array\n    (lvar :x)\n    (int 0)) :max) min  times ","fieldsize_fieldsize_x /  times ","fieldsize_(send\n  (array\n    (lvar :y)\n    (int 0)) :max) min  times ","fieldsize_fieldsize_y /  times "," t(send\n  (array\n    (lvar :y)\n    (int 0)) :max) min pe upcase "," tfieldsize_y / pe upcase "," t(send\n  (array\n    (lvar :y)\n    (int 0)) :max) min pe "," tfieldsize_y / pe ","num_b(send\n  (array\n    (lvar :y)\n    (int 0)) :max) min tes - ","num_bfieldsize_y / tes - ","raw_digest bytesize  - ","fieldsize_(send\n  (array\n    (lvar :y)\n    (int 0)) :max) min  / ","fieldsize_fieldsize_y /  / ","fieldsize_(send\n  (array\n    (lvar :x)\n    (int 0)) :max) min  / ","fieldsize_fieldsize_x /  / ","(send\n  (arra(send\n  (array\n    (lvar :y)\n    (int 0)) :max) min \n    (lvar :(send\n  (array\n    (lvar :y)\n    (int 0)) :max) min )\n    (int 0)) :max) min ","(send\n  (arrafieldsize_y / \n    (lvar :fieldsize_y / )\n    (int 0)) :max) min ","(send\n  (array\n    (lvar :y)\n    (int 0)) :ma(send\n  (array\n    (lvar :x)\n    (int 0)) :max) min ) min ","(send\n  (array\n    (lvar :y)\n    (int 0)) :mafieldsize_x / ) min ","fieldsize_(send\n  (array\n    (lvar :y)\n    (int 0)) :max) min  - ","fieldsize_fieldsize_y /  - ","(lvar :(send\n  (array\n    (lvar :y)\n    (int 0)) :max) min ) max ","(lvar :fieldsize_y / ) max ","(lvar :y) ma(send\n  (array\n    (lvar :x)\n    (int 0)) :max) min  ","(lvar :y) mafieldsize_x /  ","(send\n  (arra(send\n  (array\n    (lvar :y)\n    (int 0)) :max) min \n    (lvar :x)\n    (int 0)) :max) min ","(send\n  (arrafieldsize_y / \n    (lvar :x)\n    (int 0)) :max) min ","(send\n  (array\n    (lvar :(send\n  (array\n    (lvar :x)\n    (int 0)) :max) min )\n    (int 0)) :ma(send\n  (array\n    (lvar :x)\n    (int 0)) :max) min ) min ","(send\n  (array\n    (lvar :fieldsize_x / )\n    (int 0)) :mafieldsize_x / ) min ","fieldsize_(send\n  (array\n    (lvar :x)\n    (int 0)) :max) min  - ","fieldsize_fieldsize_x /  - ","(lvar :(send\n  (array\n    (lvar :x)\n    (int 0)) :max) min ) ma(send\n  (array\n    (lvar :x)\n    (int 0)) :max) min  ","(lvar :fieldsize_x / ) mafieldsize_x /  ","b(send\n  (array\n    (lvar :y)\n    (int 0)) :max) min te & != ","bfieldsize_y / te & != ","b(send\n  (array\n    (lvar :y)\n    (int 0)) :max) min te & ","bfieldsize_y / te & ","raw_digest b(send\n  (array\n    (lvar :y)\n    (int 0)) :max) min tes each ","raw_digest bfieldsize_y / tes each ","Digest MD5  digest  bytes each ","Digest SHA2  new digest  bytes each ","raw_digest b(send\n  (array\n    (lvar :y)\n    (int 0)) :max) min tes ","raw_digest bfieldsize_y / tes ","Digest MD5  digest  bytes ","Digest SHA2  new digest  bytes ","Arra(send\n  (array\n    (lvar :y)\n    (int 0)) :max) min   new ","Arrafieldsize_y /   new ","raw_digest b(send\n  (array\n    (lvar :y)\n    (int 0)) :max) min tesize ","raw_digest bfieldsize_y / tesize ","Digest MD5  digest  bytesize ","Digest SHA2  new digest  bytesize "," ssh_public_ke(send\n  (array\n    (lvar :y)\n    (int 0)) :max) min _conversion "," ssh_public_kefieldsize_y / _conversion ","augmentation_string length -  - ","augmentation_string augmentation_string length - gth - ","augmentation_string augmentation_string length - gth "]}," SSHKey directives=":{"type":"method","name":"directives=","children":[],"call":["Array  [] flatten ","Array  [] ","Array  [] flatten compact "]}," SSHKey unpacked_byte_array":{"type":"method","name":"unpacked_byte_array","children":[],"call":["index + ","data << "," from_byte_array ","unpacked [] ","index + - ","unpacked [] nil? ","decoded unpack "," raise ","decoded sub! nil? ","decoded sub! ","Base64  encode64 gsub != ","Base64  encode64 gsub ","Base64  encode64 ","Base64  decode64 ","(int 0) pack ","OpenSSL BN  new ","segment length == ","segment length ","front length == ","front length ","decoded slice! ","front unpack first ","front unpack ","decoded empty? ","decoded slice! == ","prefix length ","Base64  encode64 gsub == ","(int 7) pack + ","(int 7) pack ","(send\n  (lvar :ssh_type) :length) pack + ","(send\n  (lvar :ssh_type) :length) pack ","ssh_type length ","byte_count == ","ssh_type == ","index +  + ","decoded unpack  [] ","index +  + - ","decoded unpack  [] nil? ","Base64  decode64  unpack ","Base64  decode64  sub! nil? ","Base64  decode64  sub! ","decoded slice!  length == ","decoded slice!  length ","Base64  decode64  slice! ","decoded slice!  unpack first ","decoded slice!  unpack ","Base64  decode64  empty? ","Base64  decode64  slice! == ","(int 0) pack  length ","(int 7) pack +  length ","(send\n  (lvar :ssh_type) :length) pack +  length "]}," SSHKey ssh_public_key_bits":{"type":"method","name":"ssh_public_key_bits","children":[],"call":[" unpacked_byte_array last size * "," unpacked_byte_array last size "," unpacked_byte_array last "," unpacked_byte_array "," parse_ssh_public_key "," unpacked_byte_array last num_bytes * "," unpacked_byte_array last num_bytes "," raise "," ecdsa_bits ","sections [] to_s ","sections [] ","sections count == ","sections count ","sections last num_bytes * ","sections last num_bytes ","sections last "," unpacked_byte_array  [] to_s "," unpacked_byte_array  [] "," unpacked_byte_array  count == "," unpacked_byte_array  count "," unpacked_byte_array  last num_bytes * "," unpacked_byte_array  last num_bytes "," unpacked_byte_array  last "]}," SSHKey ssh2_public_key":{"type":"method","name":"ssh2_public_key","children":[],"call":[" class ssh_public_key_to_ssh2_public_key "," ssh_public_key "," class "]}," SSHKey build_ssh2_headers":{"type":"method","name":"build_ssh2_headers","children":[],"call":["(send\n  (send\n    (send\n      (lvar :headers) :keys) :sort) :collect) join << ","(send\n  (send\n    (send\n      (lvar :headers) :keys) :sort) :collect) join ","header_field scan join ","header_field scan ","headers [] "," raise ","headers [] size <= ","headers [] size ","header_tag size <= ","header_tag size ","b < ","header_tag each_byte all? ","header_tag each_byte ","headers keys sort collect ","headers keys sort ","headers keys ","headers empty? ","headers nil? "]}," SSHKey ssh_public_key_to_ssh2_public_key":{"type":"method","name":"ssh_public_key_to_ssh2_public_key","children":[],"call":["ssh2_key << ","source_key scan join ","source_key scan ","header_fields nil? "," build_ssh2_headers ","source_comment strip ","source_comment empty? ! ","source_comment empty? ","headers nil? ","ssh_public_key split [] ","ssh_public_key split "," parse_ssh_public_key "," raise ","SSHKey  valid_ssh_public_key? "," build_ssh2_headers  nil? ","ssh_public_key split []  strip ","ssh_public_key split []  empty? ! ","ssh_public_key split []  empty? "]}," SSHKey sha256_fingerprint":{"type":"method","name":"sha256_fingerprint","children":[],"call":["Base64  encode64 gsub ","Base64  encode64 ","Digest SHA256  digest "," ssh_public_key_conversion "," decoded_key "," new sha256_fingerprint "," new ","key match "]}," SSHKey sshfp":{"type":"method","name":"sshfp","children":[],"call":[" class format_sshfp_record "," ssh_public_key_conversion "," class "," format_sshfp_record ","Base64  decode64 ","SSH_TYPES  [] "," parse_ssh_public_key "," new sshfp "," new ","key match "]}," SSHKey format_sshfp_record":{"type":"method","name":"format_sshfp_record","children":[],"call":["(send\n  (array\n    (array\n      (const\n        (const nil :Digest) :SHA1)\n      (int 1))\n    (array\n      (const\n        (const nil :Digest) :SHA256)\n      (int 2))) :map) join ","SSHFP_TYPES  [] ","f hexdigest ","(array\n  (const\n    (const nil :Digest) :SHA1)\n  (int 1)) map "]}," SSHKey ssh_public_key_data_ecdsa":{"type":"method","name":"ssh_public_key_data_ecdsa","children":[],"call":[]}," SSHKey ssh_public_key_data_dsarsa":{"type":"method","name":"ssh_public_key_data_dsarsa","children":[],"call":[]}," SSHKey public_key_object":{"type":"method","name":"public_key_object","children":[],"call":[" key_object public_key "," key_object ","pub public_key= ","OpenSSL PKey EC  new "," key_object group ","asn1 to_der ","OpenSSL ASN1  Sequence ","OpenSSL ASN1  BitString ","public_key_point to_octet_string "," key_object group point_conversion_form ","OpenSSL ASN1  ObjectId ","RUBY_PLATFORM  == ","curve_name == "," key_object group curve_name "," jruby_not_implemented ","RUBY_PLATFORM  != ","OpenSSL OPENSSL_VERSION_NUMBER  >= "," type == "," type "," key_object OpenSSL PKey EC  new lic_key ","OpenSSL PKey EC  new  OpenSSL PKey EC  new lic_key= ","OpenSSL ASN1  Sequence  to_der ","OpenSSL PKey EC  new lic_key_point to_octet_string "," key_object public_key  to_octet_string "," key_object group curve_name  == "," key_object group  key_object group curve_name  "]}," SSHKey ecdsa_bits":{"type":"method","name":"ecdsa_bits","children":[],"call":[" raise ","identifier =~ ","len_q - ","compression_octet == ","(send\n  (lvar :len_q) :-\n  (int 1)) / ","q slice ","q length ","ssh_type == ","q length  - ","q slice  == ","(send\n  (lvar :q length ) :-\n  (int 1)) / "]}," EC q":{"type":"method","name":"q","children":[],"call":[" public_key to_octet_string "," group point_conversion_form "," group "," public_key "," jruby_not_implemented "]}," EC identifier":{"type":"method","name":"identifier","children":[],"call":[" raise "," public_key group curve_name "," public_key group "," public_key "," group curve_name "," group "]}," jruby_not_implemented":{"type":"method","name":"jruby_not_implemented","children":[],"call":[" raise ","NotImplementedError  new ","RUBY_PLATFORM  == "]}}