{" Parallel kill_on_ctrl_c":{"type":"method","name":"kill_on_ctrl_c","children":[],"call":[" exit ","Process  kill ","pids compact each ","pids compact ","$stderr puts ","Signal  trap ","@to_be_killed pop "," kill_that_thing! ","@to_be_killed flatten compact each ","@to_be_killed flatten compact ","@to_be_killed flatten ","@to_be_killed any? ","@to_be_killed << "," kill_everything_we_spawned "," restore_interrupt ","@to_be_killed empty? "," trap_interrupt ","options fetch "]}," Parallel in_groups_of":{"type":"method","name":"in_groups_of","children":[],"call":[]}," Parallel processor_count":{"type":"method","name":"processor_count","children":[],"call":["$stderr puts ","RbConfig CONFIG  [] ","(str \"psrinfo -p\") to_i ","cpu to_enum first NumberOfLogicalProcessors ","cpu to_enum first ","cpu to_enum ","wmi ExecQuery ","WIN32OLE  connect "," require ","(str \"sysctl -n hw.ncpu\") to_i ","(str \"grep -c processor /proc/cpuinfo\") to_i ","(if\n  (send nil :hwprefs_available?)\n  (xstr\n    (str \"hwprefs thread_count\"))\n  (xstr\n    (str \"sysctl -n hw.ncpu\"))) to_i "," hwprefs_available? ","(str \"hwprefs cpu_count\") to_i ","(str \"grep -c ^processor /proc/cpuinfo\") to_i ","Unknown platform:  + ","IO  popen read to_i ","IO  popen read ","IO  popen ","File  executable? ","os_name =~ ","IO  popen read count ","out read scan size ","out read scan ","out read ","IO  popen read scan size ","IO  popen read scan ","IO  read scan size ","IO  read scan ","IO  read ","File  readable? ","result to_enum collect reduce ","result to_enum collect ","result to_enum ","WIN32OLE  connect ExecQuery "," Integer ","Etc  nprocessors ","ENV  [] ","wmi ExecQuery  to_enum first NumberOfLogicalProcessors ","wmi ExecQuery  to_enum first ","wmi ExecQuery  to_enum ","WIN32OLE  connect  ExecQuery ","(str \"sysctl -n hw.nwmi ExecQuery \") to_i ","(str \"grep -c processor /proc/wmi ExecQuery info\") to_i ","(if\n  (send nil :hwprefs_available?)\n  (xstr\n    (str \"hwprefs thread_count\"))\n  (xstr\n    (str \"sysctl -n hw.nwmi ExecQuery \"))) to_i ","(str \"hwprefs wmi ExecQuery _count\") to_i ","(str \"grep -c ^processor /proc/wmi ExecQuery info\") to_i ","RbConfig CONFIG  []  =~ ","WIN32OLE  connect ExecQuery  to_enum collect reduce ","WIN32OLE  connect ExecQuery  to_enum collect ","WIN32OLE  connect ExecQuery  to_enum "]}," Parallel map":{"type":"method","name":"map","children":[],"call":[" work_in_processes ","options merge "," work_in_threads ","method == "," work_direct ","size == ","(send\n  (lvar :array) :size) min ","array size "," processor_count ","options [] ","array to_a ","$stderr puts ","Process  respond_to? ","options [] ! ","RUBY_PLATFORM  =~ "," add_progress_bar! ","options []= ","options [] ! ! ","options [] != ","(send\n  (lvar :job_factory) :size) min ","job_factory size ","JobFactory  new "," warn ","Mutex  new "," raise ","ArgumentError  new ","options dup ","result is_a? ","result value ","(send\n  (lvar :options) :[]\n  (sym :in_processes)) ! "," work_in_ractors ","(if\n  (send\n    (lvar :items) :producer?)\n  (lvar :size)\n  (send\n    (lvar :items) :size)) min ","items size ","items producer? ","ItemWrapper  new ","options dup  merge ","(send\n  (lvar :array) :size) min  == ","options []  == ","(send\n  (lvar :job_factory) :size) min  == ","(if\n  (send\n    (lvar :items) :producer?)\n  (lvar :size)\n  (send\n    (lvar :items) :size)) min  == ","(send\n  (lvar :array) :(send\n  (lvar :array) :size) min ) min ","(send\n  (lvar :array) :options [] ) min ","(send\n  (lvar :array) :(send\n  (lvar :job_factory) :size) min ) min ","(send\n  (lvar :array) :(if\n  (send\n    (lvar :items) :producer?)\n  (lvar :size)\n  (send\n    (lvar :items) :size)) min ) min ","(send\n  (lvar :array to_a ) :size) min ","array (send\n  (lvar :array) :size) min  ","array options []  ","array (send\n  (lvar :job_factory) :size) min  ","array (if\n  (send\n    (lvar :items) :producer?)\n  (lvar :size)\n  (send\n    (lvar :items) :size)) min  ","array to_a  size ","options dup  [] ","array to_a  to_a ","options dup  [] ! ","options dup  []= ","options dup  [] ! ! ","options dup  [] != ","(send\n  (lvar :job_factory) :(send\n  (lvar :array) :size) min ) min ","(send\n  (lvar :job_factory) :options [] ) min ","(send\n  (lvar :job_factory) :(send\n  (lvar :job_factory) :size) min ) min ","(send\n  (lvar :job_factory) :(if\n  (send\n    (lvar :items) :producer?)\n  (lvar :size)\n  (send\n    (lvar :items) :size)) min ) min ","(send\n  (lvar :JobFactory  new ) :size) min ","job_factory (send\n  (lvar :array) :size) min  ","job_factory options []  ","job_factory (send\n  (lvar :job_factory) :size) min  ","job_factory (if\n  (send\n    (lvar :items) :producer?)\n  (lvar :size)\n  (send\n    (lvar :items) :size)) min  ","JobFactory  new  size ","options dup  dup "," work_direct  is_a? "," work_direct  value ","(send\n  (lvar :options dup ) :[]\n  (sym :in_processes)) ! ","(if\n  (send\n    (lvar :items) :producer?)\n  (lvar :(send\n  (lvar :array) :size) min )\n  (send\n    (lvar :items) :(send\n  (lvar :array) :size) min )) min ","(if\n  (send\n    (lvar :items) :producer?)\n  (lvar :options [] )\n  (send\n    (lvar :items) :options [] )) min ","(if\n  (send\n    (lvar :items) :producer?)\n  (lvar :(send\n  (lvar :job_factory) :size) min )\n  (send\n    (lvar :items) :(send\n  (lvar :job_factory) :size) min )) min ","(if\n  (send\n    (lvar :items) :producer?)\n  (lvar :(if\n  (send\n    (lvar :items) :producer?)\n  (lvar :size)\n  (send\n    (lvar :items) :size)) min )\n  (send\n    (lvar :items) :(if\n  (send\n    (lvar :items) :producer?)\n  (lvar :size)\n  (send\n    (lvar :items) :size)) min )) min ","(if\n  (send\n    (lvar :ItemWrapper  new ) :producer?)\n  (lvar :size)\n  (send\n    (lvar :ItemWrapper  new ) :size)) min ","items (send\n  (lvar :array) :size) min  ","items options []  ","items (send\n  (lvar :job_factory) :size) min  ","items (if\n  (send\n    (lvar :items) :producer?)\n  (lvar :size)\n  (send\n    (lvar :items) :size)) min  ","ItemWrapper  new  size ","ItemWrapper  new  producer? "]}," Parallel in_processes":{"type":"method","name":"in_processes","children":[],"call":[" processor_count "," map ","options merge "," extract_count_from_options "]}," Parallel in_threads":{"type":"method","name":"in_threads","children":[],"call":[" wait_for_threads ","threads []= ","out []= ","Thread  new ","count times "," extract_count_from_options "," kill_on_ctrl_c ","(send\n  (send\n    (send\n      (const nil :Array) :new\n      (lvar :count)) :each_with_index) :map) map! ","Array  new each_with_index map ","Array  new each_with_index ","Array  new ","(send\n  (const nil :Array) :new\n  (lvar :count)) map! ","threads each ","threads map ","Thread  handle_interrupt ","threads << ","UserInterruptHandler  kill_on_ctrl_c "]}," Parallel each":{"type":"method","name":"each","children":[],"call":[" map ","options merge ","options [] ! ! ","options [] ! ","options [] "]}," Parallel extract_count_from_options":{"type":"method","name":"extract_count_from_options","children":[],"call":["options [] ","options is_a? "]}," Parallel deserialize":{"type":"method","name":"deserialize","children":[],"call":[]}," Parallel serialize":{"type":"method","name":"serialize","children":[],"call":[]}," Parallel do_in_new_process":{"type":"method","name":"do_in_new_process","children":[],"call":[]}," Parallel fork_and_start_writing":{"type":"method","name":"fork_and_start_writing","children":[],"call":[]}," Parallel read_from_pipes":{"type":"method","name":"read_from_pipes","children":[],"call":[]}," Parallel map_with_index":{"type":"method","name":"map_with_index","children":[],"call":[" map ","options merge "]}," Parallel each_with_index":{"type":"method","name":"each_with_index","children":[],"call":[" each ","options merge "]}," Parallel ExceptionWrapper initialize":{"type":"method","name":"initialize","children":[],"call":["RuntimeError  new ","exception inspect ","Parallel  encode ","Marshal  dump ","UndumpableException  new ","exception send ","exception instance_variable_defined? ","RuntimeError  new  inspect ","RuntimeError  new  send ","RuntimeError  new  instance_variable_defined? "]}," Parallel call_with_index":{"type":"method","name":"call_with_index","children":[],"call":["block call ","args << ","options [] ","array [] ","options [] == "]}," Parallel decode":{"type":"method","name":"decode","children":[],"call":[]}," Parallel encode":{"type":"method","name":"encode","children":[],"call":[]}," Parallel wait_for_processes":{"type":"method","name":"wait_for_processes","children":[],"call":[]}," Parallel wait_for_threads":{"type":"method","name":"wait_for_threads","children":[],"call":["t join ","threads compact each ","threads compact "," raise ","interrupted first ","(send\n  (send\n    (lvar :threads) :compact) :map) compact ","threads compact map ","(send\n  (send\n    (lvar :threads) :compact) :map) compact  first "]}," Parallel write_to_pipe":{"type":"method","name":"write_to_pipe","children":[],"call":[]}," Parallel worker":{"type":"method","name":"worker","children":[],"call":["Worker  new ","child_write close ","child_read close "," process_incoming_jobs ","parent_read close ","parent_write close ","options delete each ","options delete ","Process  fork ","IO  pipe ","GC  copy_on_write_friendly= ","GC  respond_to? "," worker_number= ","options [] "]}," Parallel work_in_processes":{"type":"method","name":"work_in_processes","children":[],"call":[" raise ","worker wait ","worker close_pipes ","results []= ","output exception ","ExceptionWrapper  === ","worker work "," with_instrumentation ","items [] ","index >= ","items size ","Thread  exclusive "," loop ","workers [] "," in_threads ","options [] "," create_workers "," handle_exception "," kill_on_ctrl_c ","workers map "," kill_everything_we_spawned ","w silent_death= ","workers each ","Parallel Kill  === "," kill_that_thing! ","w pid ","w thread ","(send\n  (lvar :workers) :-\n  (array\n    (lvar :worker))) each ","workers - ","worker thread= ","Thread  current ","worker stop ","UserInterruptHandler  kill ","w thread kill ","w thread nil? ","results_mutex synchronize ","job_factory pack "," replace_worker ","job_factory next ","UserInterruptHandler  kill_on_ctrl_c ","Mutex  new ","lap > ","worker lap ","worker lap > ","Kill  === ","exception is_a? ","items pack ","items next ","workers []  wait "," replace_worker  wait ","workers []  close_pipes "," replace_worker  close_pipes ","output output exception  ","workers []  work "," replace_worker  work ","workers [] s [] "," replace_worker s [] "," create_workers  [] "," create_workers [] s "," create_ replace_worker s "," create_ create_workers  "," handle_output exception  ","workers [] s map "," replace_worker s map "," create_workers  map ","workers [] s each "," replace_worker s each "," create_workers  each ","(send\n  (lvar :workers [] s) :-\n  (array\n    (lvar :workers [] ))) each ","(send\n  (lvar : replace_worker s) :-\n  (array\n    (lvar : replace_worker ))) each ","(send\n  (lvar : create_workers ) :-\n  (array\n    (lvar :worker))) each ","workers [] s - "," replace_worker s - "," create_workers  - ","workers []  thread= "," replace_worker  thread= ","workers []  stop "," replace_worker  stop ","Mutex  new  synchronize "," replace_workers []  "," replace_ replace_worker  ","workers []  lap "," replace_worker  lap ","workers []  lap > "," replace_worker  lap > ","output exception  is_a? "]}," Parallel process_incoming_jobs":{"type":"method","name":"process_incoming_jobs","children":[],"call":["Marshal  dump ","ExceptionWrapper  new ","options [] == ","options [] "," call_with_index ","Marshal  load ","read eof? ! ","read eof? ","job_factory unpack "," raise ","items unpack "," call_with_Marshal  load  "]}," Parallel work_in_threads":{"type":"method","name":"work_in_threads","children":[],"call":[" raise ","results []= "," call_with_index "," with_instrumentation ","items [] ","index >= ","items size ","Thread  exclusive "," loop "," in_threads ","options [] "," handle_exception ","results_mutex synchronize ","job_factory next ","exception ! "," worker_number= ","Mutex  new ","items next ","Mutex  new  synchronize "]}," Parallel wait_for_process":{"type":"method","name":"wait_for_process","children":[],"call":[]}," Parallel create_workers":{"type":"method","name":"create_workers","children":[],"call":[" kill_on_ctrl_c ","workers map ","workers << "," worker ","options merge ","Array  new each ","Array  new ","options [] ","Array  new each_with_index "]}," Parallel hwprefs_available?":{"type":"method","name":"hwprefs_available?","children":[],"call":["(str \"which hwprefs\") != "]}," Parallel work_direct":{"type":"method","name":"work_direct","children":[],"call":["results << ","options [] ","array each_with_index "," worker_number= "," call_with_index "," with_instrumentation ","job_factory next "," handle_exception ","items each_with_index "]}," Parallel close_pipes":{"type":"method","name":"close_pipes","children":[],"call":[]}," Parallel physical_processor_count":{"type":"method","name":"physical_processor_count","children":[],"call":[" processor_count ","cpu to_enum first NumberOfLogicalProcessors ","cpu to_enum first ","cpu to_enum ","wmi ExecQuery ","WIN32OLE  connect "," require ","(str \"grep cores /proc/cpuinfo\") [] to_i ","(str \"grep cores /proc/cpuinfo\") [] ","(str \"sysctl -n hw.physicalcpu\") to_i ","RbConfig CONFIG  [] ","ppc > ","physicals * ","(str \"grep 'physical id' /proc/cpuinfo |sort|uniq|wc -l\") to_i ","cpu to_enum first NumberOfProcessors ","result_set to_enum collect reduce ","result_set to_enum collect ","result_set to_enum ","WIN32OLE  connect ExecQuery ","cores count ","cores []= ","cores [] ! ","cores [] ","phy + + ","ln [] ","phy + ","ln start_with? ","IO  read scan ","IO  read ","IO  popen read to_i ","IO  popen read ","IO  popen ","File  read scan ","File  read ","wmi ExecQuery  to_enum first NumberOfLogicalProcessors ","wmi ExecQuery  to_enum first ","wmi ExecQuery  to_enum ","WIN32OLE  connect  ExecQuery ","(str \"grep cores /proc/wmi ExecQuery info\") [] to_i ","(str \"grep cores /proc/wmi ExecQuery info\") [] ","(str \"sysctl -n hw.physicalwmi ExecQuery \") to_i ","(str \"sysctl -n hw.ln [] sicalcpu\") to_i ","(str \"grep 'physical id' /proc/cpuinfo |sort|uniq|wc -l\") to_i  * ","ln [] sicals * ","(str \"grep 'physical id' /proc/wmi ExecQuery info |sort|uniq|wc -l\") to_i ","(str \"grep 'ln [] sical id' /proc/cpuinfo |sort|uniq|wc -l\") to_i ","wmi ExecQuery  to_enum first NumberOfProcessors ","WIN32OLE  connect ExecQuery  to_enum collect reduce ","WIN32OLE  connect ExecQuery  to_enum collect ","WIN32OLE  connect ExecQuery  to_enum ","ln []  + + ","ln []  + "]}," Parallel with_instrumentation":{"type":"method","name":"with_instrumentation","children":[],"call":["on_finish call ","on_start call ","options [] ","options [] == ","options [] synchronize "," instrument_finish "," instrument_start ","options []  call "]}," Parallel Worker work":{"type":"method","name":"work","children":[],"call":[" raise ","Marshal  load "," read ","Marshal  dump "," write "," silent_death ","result exception ","ExceptionWrapper  === ","result is_a? "]}," Parallel Worker wait":{"type":"method","name":"wait","children":[],"call":["Process  wait "," pid "]}," Parallel Worker close_pipes":{"type":"method","name":"close_pipes","children":[],"call":[" write close "," write "," read close "," read "," write closed? "," read closed? "]}," Parallel Worker initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Parallel handle_exception":{"type":"method","name":"handle_exception","children":[],"call":[" raise ","exception class == ","exception class ","(const\n  (const nil :Parallel) :Break) include? "]}," Parallel kill_that_thing!":{"type":"method","name":"kill_that_thing!","children":[],"call":["Process  kill ","thing kill ","thing is_a? "]}," Parallel kill_everything_we_spawned":{"type":"method","name":"kill_everything_we_spawned","children":[],"call":[" kill_that_thing! ","@to_be_killed flatten compact each ","@to_be_killed flatten compact ","@to_be_killed flatten "]}," Parallel replace_worker":{"type":"method","name":"replace_worker","children":[],"call":["workers []= "," worker ","options merge ","workers - ","worker stop ","workers [] ","options [] synchronize ","options [] ","workers [] s []= "," workers []  ","workers [] s - ","workers []  stop ","workers [] s [] "]}," Parallel add_progress_bar!":{"type":"method","name":"add_progress_bar!","children":[],"call":["options []= ","progress increment ","old_finish call "," lambda ","options [] ","ProgressBar  create ","(pair\n  (sym :total)\n  (send\n    (lvar :job_factory) :size)) merge ","job_factory size ","progress_options to_str ","progress_options respond_to? ","progress_options == "," require "," raise ","job_factory size == ","array size ","options [] ! ","items size ","items producer? ","(pair\n  (sym :total)\n  (send\n    (lvar :items) :size)) merge ","ProgressBar  create  increment ","options []  call ","ProgressBar  create _options to_str ","(pair\n  (sym :total)\n  (send\n    (lvar :job_factory) :size)) merge  to_str ","options []  to_str ","(pair\n  (sym :total)\n  (send\n    (lvar :items) :size)) merge  to_str ","ProgressBar  create _options respond_to? ","(pair\n  (sym :total)\n  (send\n    (lvar :job_factory) :size)) merge  respond_to? ","options []  respond_to? ","(pair\n  (sym :total)\n  (send\n    (lvar :items) :size)) merge  respond_to? ","ProgressBar  create _options == ","(pair\n  (sym :total)\n  (send\n    (lvar :job_factory) :size)) merge  == ","options []  == ","(pair\n  (sym :total)\n  (send\n    (lvar :items) :size)) merge  == "]}," Parallel worker_number=":{"type":"method","name":"worker_number=","children":[],"call":["Thread  current []= ","Thread  current "]}," Parallel worker_number":{"type":"method","name":"worker_number","children":[],"call":["Thread  current [] ","Thread  current "]}," Parallel UserInterruptHandler restore_interrupt":{"type":"method","name":"restore_interrupt","children":[],"call":["Signal  trap "]}," Parallel UserInterruptHandler trap_interrupt":{"type":"method","name":"trap_interrupt","children":[],"call":["old call "," raise ","old == ","Signal  trap ","old ! ","Signal  trap  call ","Signal  trap  == ","Signal  trap  ! "]}," Parallel UserInterruptHandler kill":{"type":"method","name":"kill","children":[],"call":["Process  kill ","thing kill ","thing is_a? "]}," Parallel UserInterruptHandler kill_on_ctrl_c":{"type":"method","name":"kill_on_ctrl_c","children":[],"call":[" restore_interrupt ","@to_be_killed empty? ","@to_be_killed pop ","@to_be_killed << "," kill ","@to_be_killed flatten each ","@to_be_killed flatten ","$stderr puts "," trap_interrupt ","options fetch "," warn ","@to_be_killed flatten compact each ","@to_be_killed flatten compact ","RUBY_ENGINE  == "]}," Parallel JobFactory queue_wrapper":{"type":"method","name":"queue_wrapper","children":[],"call":["array pop "," lambda ","array respond_to? "]}," Parallel JobFactory producer?":{"type":"method","name":"producer?","children":[],"call":[]}," Parallel JobFactory unpack":{"type":"method","name":"unpack","children":[],"call":["@source [] "," producer? "]}," Parallel JobFactory pack":{"type":"method","name":"pack","children":[],"call":[" producer? "]}," Parallel JobFactory size":{"type":"method","name":"size","children":[],"call":["@source size "," producer? "]}," Parallel JobFactory next":{"type":"method","name":"next","children":[],"call":["@source [] ","index >= "," size ","@mutex synchronize ","item == ","@lambda call "," producer? ","@source []  == ","@lambda call  == "]}," Parallel JobFactory initialize":{"type":"method","name":"initialize","children":[],"call":["source to_a "," queue_wrapper ","source respond_to? "]}," Parallel Worker stop":{"type":"method","name":"stop","children":[],"call":[" wait "," close_pipes "]}," Parallel UndumpableException backtrace":{"type":"method","name":"backtrace","children":[],"call":[]}," Parallel UndumpableException initialize":{"type":"method","name":"initialize","children":[],"call":["original backtrace ","original message ","original class "]}," Parallel ProcessorCount physical_processor_count":{"type":"method","name":"physical_processor_count","children":[],"call":[" processor_count ","ppc > ","result_set to_enum collect reduce ","result_set to_enum collect ","result_set to_enum ","WIN32OLE  connect ExecQuery ","WIN32OLE  connect "," require ","cores count ","cores []= ","cores [] ! ","cores [] ","phy + + ","ln [] ","phy + ","ln start_with? ","IO  read scan ","IO  read ","IO  popen read to_i ","IO  popen read ","IO  popen ","RbConfig CONFIG  [] ","File  read scan ","File  read ","WIN32OLE  connect ExecQuery  to_enum collect reduce ","WIN32OLE  connect ExecQuery  to_enum collect ","WIN32OLE  connect ExecQuery  to_enum ","ln []  + + ","ln []  + "]}," Parallel ProcessorCount processor_count":{"type":"method","name":"processor_count","children":[],"call":["$stderr puts ","Unknown platform:  + ","RbConfig CONFIG  [] ","IO  popen read to_i ","IO  popen read ","IO  popen ","File  executable? ","os_name =~ ","IO  popen read count ","out read scan size ","out read scan ","out read ","IO  popen read scan size ","IO  popen read scan ","IO  read scan size ","IO  read scan ","IO  read ","File  readable? ","result to_enum collect reduce ","result to_enum collect ","result to_enum ","WIN32OLE  connect ExecQuery ","WIN32OLE  connect "," require ","Etc  nprocessors ","Etc  respond_to? "," Integer ","ENV  [] ","RbConfig CONFIG  []  =~ ","WIN32OLE  connect ExecQuery  to_enum collect reduce ","WIN32OLE  connect ExecQuery  to_enum collect ","WIN32OLE  connect ExecQuery  to_enum "]}," Parallel all?":{"type":"method","name":"all?","children":[],"call":["(send nil :each\n  (splat\n    (lvar :args))) ! ! ","(send nil :each\n  (splat\n    (lvar :args))) ! "," raise ","block call "," each ","block nil? "]}," Parallel any?":{"type":"method","name":"any?","children":[],"call":["(send nil :each\n  (splat\n    (lvar :args))) ! "," raise ","block call "," each ","block nil? "]}," Parallel flat_map":{"type":"method","name":"flat_map","children":[],"call":[" map flatten "," map "]}," Parallel restore_interrupt":{"type":"method","name":"restore_interrupt","children":[],"call":["Signal  trap "]}," Parallel trap_interrupt":{"type":"method","name":"trap_interrupt","children":[],"call":["old call "," raise ","old == ","Signal  trap ","Signal  trap  call ","Signal  trap  == "]}," Parallel Break initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Parallel instrument_start":{"type":"method","name":"instrument_start","children":[],"call":["on_start call ","options [] synchronize ","options [] ","options []  call "]}," Parallel instrument_finish":{"type":"method","name":"instrument_finish","children":[],"call":["on_finish call ","options [] synchronize ","options [] ","options []  call "]}," Parallel work_in_ractors":{"type":"method","name":"work_in_ractors","children":[],"call":["ractor send ","results []= ","options [] == ","options [] ","results_mutex synchronize "," instrument_finish ","ractor take ","ractors each ","done send "," instrument_start ","ractors delete ","Ractor  select ","job_factory next ","ractors dup each ","ractors dup ","Ractor  yield ","klass send ","index == "," receive "," loop ","Ractor  new ","Array  new ","options fetch "," raise ","callback ! "," block_given? ","Mutex  new ","Mutex  new  synchronize ","options []  ! "]}," Parallel filter_map":{"type":"method","name":"filter_map","children":[],"call":[" map compact "," map "]}," Parallel ItemWrapper queue_wrapper":{"type":"method","name":"queue_wrapper","children":[],"call":["array pop "," lambda ","array is_a? ","array respond_to? "]}," Parallel ItemWrapper unpack":{"type":"method","name":"unpack","children":[],"call":["@items [] "," producer? "]}," Parallel ItemWrapper pack":{"type":"method","name":"pack","children":[],"call":[" producer? "]}," Parallel ItemWrapper size":{"type":"method","name":"size","children":[],"call":["@items size "]}," Parallel ItemWrapper next":{"type":"method","name":"next","children":[],"call":["@items [] ","index >= "," size ","@mutex synchronize ","item == ","@lambda call "," producer? ","@@items [] s [] ","@@lambda call s [] ","@items []  == ","@lambda call  == "]}," Parallel ItemWrapper each_with_index":{"type":"method","name":"each_with_index","children":[],"call":["@items each_with_index "," next "," loop "," producer? "]}," Parallel ItemWrapper producer?":{"type":"method","name":"producer?","children":[],"call":[]}," Parallel ItemWrapper initialize":{"type":"method","name":"initialize","children":[],"call":["array to_a "," queue_wrapper ","array respond_to? "]}}