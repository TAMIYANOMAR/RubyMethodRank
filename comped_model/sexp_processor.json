{" Object deep_clone":{"type":"method","name":"deep_clone","children":[],"call":["Marshal  load ","Marshal  dump "]}," SexpProcessor Environment scope":{"type":"method","name":"scope","children":[],"call":[" raise ","@env empty? ","@env shift ","@env unshift "]}," SexpProcessor Environment []=":{"type":"method","name":"[]=","children":[],"call":["hash []= ","@env first ","closure has_key? ","@env find "," current ","closure key? "]}," SexpProcessor Environment []":{"type":"method","name":"[]","children":[],"call":["hash [] ","closure has_key? ","@env find ","closure key? "]}," SexpProcessor Environment depth":{"type":"method","name":"depth","children":[],"call":["@env length "]}," SexpProcessor Environment all":{"type":"method","name":"all","children":[],"call":["env merge ","@env reverse inject ","@env reverse "]}," SexpProcessor Environment initialize":{"type":"method","name":"initialize","children":[],"call":["@env unshift "]}," SexpProcessor scope":{"type":"method","name":"scope","children":[],"call":[" env scope "," env "]}," SexpProcessor process_dummy":{"type":"method","name":"process_dummy","children":[],"call":["result << "," process ","exp shift ","exp empty? ","@expected new "]}," SexpProcessor on_error_in":{"type":"method","name":"on_error_in","children":[],"call":["@exceptions []= "]}," SexpProcessor error_handler":{"type":"method","name":"error_handler","children":[],"call":[" raise "," warn "," caller inspect "," caller ","exp inspect ","err class ","@exceptions [] call ","@exceptions [] ","@exceptions has_key? ","@exceptions key? "]}," SexpProcessor assert_type":{"type":"method","name":"assert_type","children":[],"call":[" raise ","list inspect ","typ inspect ","list first != ","list first ","Array  === ! ","Array  === ","list sexp_type != ","list sexp_type "]}," SexpProcessor process":{"type":"method","name":"process","children":[],"call":[" context shift "," context ","result sexp_type= ","exp sexp_type ","result << "," raise ","sub_exp inspect ","Symbol  === ","sub_exp first ","sub_exp empty? ","Array  === "," process "," error_handler ","exp shift ","exp empty? "," caller inspect "," caller ","exp_orig inspect "," class ","type inspect "," assert_empty ","result inspect ","result class ","@expected === "," send ","meth != "," warn ","meth == ","@processors [] "," puts ","str =~ ","@debug [] ","exp inspect ","@debug has_key? ","@unsupported include? ","exp deep_clone ","@exceptions has_key? "," context unshift ","exp first inspect ","exp first "," expected new "," expected ","supported inspect ","supported empty? ","m - ","o to_s sub intern ","o to_s sub ","o to_s "," public_methods grep "," public_methods "," rewrite "," context empty? ","exp nil? "," in_context ","o to_s sub to_sym "," p "," debug empty? "," debug ","exp c_type ","result c_type ","exp respond_to? ","Sexp  === ","result class new ","sub_exp sexp_type ","@debug key? ","exp sexp_body ","@exceptions key? ","exp class ","result sexp_exp first = ","result sexp_exp sexp_type = "," expected new  sexp_type= ","result class new  sexp_type= ","result s rewrite _type= ","result sexp sexp_body _type= ","exp sexp_exp first  ","exp sexp_exp sexp_type  "," rewrite  s rewrite _type ","exp sexp_body  sexp sexp_body _type "," expected new  << ","result class new  << ","exp shift  inspect ","sub_ rewrite  inspect ","sub_exp sexp_body  inspect ","exp shift  first ","sub_ rewrite  first ","sub_exp sexp_body  first ","exp shift  empty? ","sub_ rewrite  empty? ","sub_exp sexp_body  empty? "," rewrite  shift ","exp sexp_body  shift "," rewrite  empty? ","exp sexp_body  empty? ","exp deep_clone  inspect "," rewrite _orig inspect ","exp sexp_body _orig inspect ","exp first  inspect ","exp sexp_type  inspect "," expected new  inspect ","result class new  inspect "," expected new  class ","result class new  class ","@ rewrite ected === ","@exp sexp_body ected === ","exp inspect  =~ "," rewrite  inspect ","exp sexp_body  inspect ","@unm -  include? "," rewrite  deep_clone ","exp sexp_body  deep_clone "," rewrite  first inspect ","exp sexp_body  first inspect "," rewrite  first ","exp sexp_body  first ","  rewrite ected new "," exp sexp_body ected new ","  rewrite ected "," exp sexp_body ected ","m -  inspect ","m -  empty? "," rewrite  nil? ","exp sexp_body  nil? ","exp c_exp first  ","exp c_exp sexp_type  "," rewrite  c_type ","exp sexp_body  c_type ","result c_exp first  ","result c_exp sexp_type  "," expected new  c_type ","result class new  c_type "," rewrite  respond_to? ","exp sexp_body  respond_to? ","S rewrite   === ","Sexp sexp_body   === "," expected new  class new ","result class new  class new ","exp shift  sexp_type ","sub_exp sexp_exp first  ","sub_exp sexp_exp sexp_type  ","sub_ rewrite  s rewrite _type ","sub_exp sexp_body  sexp sexp_body _type "," rewrite  s rewrite _body ","exp sexp_body  sexp sexp_body _body "," rewrite  class ","exp sexp_body  class "]}," SexpProcessor rewrite":{"type":"method","name":"rewrite","children":[],"call":["exp first ","Sexp  === "," send ","@rewriters [] ","old_type == "," context shift "," context "," rewrite ","Array  === ","exp map! "," context unshift "," in_context "," puts ","str =~ ","@debug [] ","exp inspect ","@debug has_key? ","exp comments= ","exp sexp_type ","@debug key? "," loop ","exp map ","exp comments "," send  first ","S send   === ","old_exp first  == ","old_exp sexp_type  == "," send  map! ","exp inspect  =~ "," send  inspect "," send  comments= ","exp exp comments = "," send  s send _type ","exp sexp_exp first  ","exp sexp_exp sexp_type  "," send  map "," send  comments ","exp exp comments  "]}," SexpProcessor assert_empty":{"type":"method","name":"assert_empty","children":[],"call":[" raise ","exp_orig inspect ","exp inspect "," class ","exp empty? "]}," SexpProcessor initialize":{"type":"method","name":"initialize","children":[],"call":["@rewriters []= ","name intern ","1 intern ","@processors []= "," public_methods each "," public_methods ","name to_sym ","1 to_sym ","@processors empty? "," class rewriters "," class "," class processors "," class rewriters  []= "," class processors  []= "," class processors  empty? "]}," s":{"type":"method","name":"s","children":[],"call":["Sexp  new ","Sexp  class_eval "]}," SexpMatchSpecials ANY":{"type":"method","name":"ANY","children":[],"call":["SexpAny  new "]}," SexpAny inspect":{"type":"method","name":"inspect","children":[],"call":[]}," SexpAny ===":{"type":"method","name":"===","children":[],"call":["Sexp  === "]}," SexpAny ==":{"type":"method","name":"==","children":[],"call":["Sexp  === "]}," Sexp to_s":{"type":"method","name":"to_s","children":[],"call":[" inspect "]}," Sexp to_a":{"type":"method","name":"to_a","children":[],"call":["o to_a ","Sexp  === "," map "]}," Sexp sub":{"type":"method","name":"sub","children":[],"call":["Sexp  from_array ","subset sub ","pattern === ","repl dup ","pattern == "," map ","pattern satisfy? ","Matcher  === "]}," Sexp structure":{"type":"method","name":"structure","children":[],"call":["result << ","subexp structure "," grep each "," grep "," first "," first structure ","Array  === "," class new "," class "," raise "," inspect ","Sexp  === "," each "," s "," s structure "," each_sexp map "," each_sexp "," sexp_type "," warn "," first structure  << "," class new  << "," s  << "]}," Sexp shift":{"type":"method","name":"shift","children":[],"call":[" raise "," empty? "]}," Sexp sexp_body":{"type":"method","name":"sexp_body","children":[],"call":[" [] "," safe_idx "," new "," new concat "," new _concat "]}," Sexp pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp ","q seplist ","q group ","nnd << "," line ","ENV  [] "]}," Sexp method_missing":{"type":"method","name":"method_missing","children":[],"call":[" find_node "," raise ","don't call method_missing on Sexps: %p.(%s) % ","args inspect [] ","args inspect "," warn ","%p.method_missing(%p) from %s % "," caller first "," caller ","ENV  [] ","%p.method_missing(%p) => nil from %s % ","r nil? ","  find_node aise ","a find_node gs inspect [] ","a find_node gs inspect "," wa find_node n ","%p.method_missing(%p) f find_node om %s % "," calle find_node  fi find_node st "," calle find_node  ","%p.method_missing(%p) => nil f find_node om %s % "," find_node  nil? "]}," Sexp find_nodes":{"type":"method","name":"find_nodes","children":[],"call":["sexp first == ","sexp first ","Sexp  === "," find_all ","sexp sexp_type == ","sexp sexp_type "," each_sexp find_all "," each_sexp "]}," Sexp find_node":{"type":"method","name":"find_node","children":[],"call":[" raise "," inspect "," delete ","matches first ","matches size "," find_nodes ","matches first es first "," find_nodes  first ","matches first es size "," find_nodes  size "]}," Sexp inspect":{"type":"method","name":"inspect","children":[],"call":["(send\n  (self) :map) join ","x inspect "," map "," line ","ENV  [] "," map join "]}," Sexp gsub":{"type":"method","name":"gsub","children":[],"call":["Sexp  from_array ","subset gsub "," map ","pattern == ","repl dup ","pattern satisfy? ","Matcher  === "]}," Sexp find_and_replace_all":{"type":"method","name":"find_and_replace_all","children":[],"call":[" []= ","elem == ","elem find_and_replace_all ","Sexp  === "," each_with_index "]}," Sexp each_of_type":{"type":"method","name":"each_of_type","children":[],"call":["b call ","elem first == ","elem first ","elem each_of_type ","Sexp  === "," each ","sexp sexp_type == ","sexp sexp_type ","sexp each_of_type "," each_sexp "," enum_for "," block_given? "]}," Sexp compact":{"type":"method","name":"compact","children":[],"call":["o nil? "," delete_if "]}," Sexp array_type?":{"type":"method","name":"array_type?","children":[],"call":["@@array_types include? "," first "," sexp_type "," warn "," caller first "," caller ","@@array_ first s include? ","@@array_ sexp_type s include? "," sexp_ first  "," sexp_ sexp_type  "]}," Sexp =~":{"type":"method","name":"=~","children":[],"call":["pattern === ","pattern =~ "," raise ","Not a pattern: %p % ","Matcher  === "]}," Sexp ===":{"type":"method","name":"===","children":[],"call":["pattern === ","sexp each ","pattern == ","Sexp  === "]}," Sexp ==":{"type":"method","name":"==","children":[],"call":["obj class == "," class ","obj class "]}," Sexp from_array":{"type":"method","name":"from_array","children":[],"call":[]}," Sexp initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CompositeSexpProcessor on_error_in":{"type":"method","name":"on_error_in","children":[],"call":["processor on_error_in ","@processors each "]}," CompositeSexpProcessor process":{"type":"method","name":"process","children":[],"call":["processor process ","@processors each "]}," CompositeSexpProcessor <<":{"type":"method","name":"<<","children":[],"call":["@processors << "," raise ","processor respond_to? ","SexpProcessor  === "]}," CompositeSexpProcessor initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sexp sexp_type":{"type":"method","name":"sexp_type","children":[],"call":[" first "," safe_idx "]}," Sexp line":{"type":"method","name":"line","children":[],"call":[" raise ","setting %p.line %p % ","Integer  === ","n != "]}," Unique next":{"type":"method","name":"next","children":[],"call":[]}," Unique reset":{"type":"method","name":"reset","children":[],"call":[]}," SexpProcessor in_context":{"type":"method","name":"in_context","children":[],"call":[" context shift "," context "," context unshift "]}," Sexp mass":{"type":"method","name":"mass","children":[],"call":[" structure flatten size "," structure flatten "," structure ","t + ","s mass ","Sexp  === "," inject "]}," Sexp each_sexp":{"type":"method","name":"each_sexp","children":[],"call":["Sexp  === "," each "," enum_for "," block_given? "]}," Sexp deep_each":{"type":"method","name":"deep_each","children":[],"call":["sexp deep_each ","block [] "," each_sexp "," enum_for "," block_given? ","block [] == "]}," SexpProcessor Environment current":{"type":"method","name":"current","children":[],"call":["@env first "]}," Sexp respond_to?":{"type":"method","name":"respond_to?","children":[],"call":[]}," Sexp sexp_body=":{"type":"method","name":"sexp_body=","children":[],"call":[" safe_asgn "," []= "]}," Sexp sexp_type=":{"type":"method","name":"sexp_type=","children":[],"call":[" safe_asgn "," []= "]}," Sexp first":{"type":"method","name":"first","children":[],"call":[" raise "]}," Sexp []=":{"type":"method","name":"[]=","children":[],"call":[" safe_asgn "," raise ","v inspect "," inspect "," __strict > "," __strict ","i > ","Integer  === ","i == "]}," Sexp []":{"type":"method","name":"[]","children":[],"call":[" safe_idx "," raise ","i == "," inspect ","i > ","Integer  === "," __strict > "," __strict "]}," Sexp __strict":{"type":"method","name":"__strict","children":[],"call":[" class __strict "," class "]}," Sexp nuke_method":{"type":"method","name":"nuke_method","children":[],"call":[]}," MethodBasedSexpProcessor with_new_method_stack":{"type":"method","name":"with_new_method_stack","children":[],"call":[]}," MethodBasedSexpProcessor signature":{"type":"method","name":"signature","children":[],"call":[" method_name "," klass_name "]}," MethodBasedSexpProcessor process_until_empty":{"type":"method","name":"process_until_empty","children":[],"call":[" process ","Sexp  === ","exp shift ","exp empty? "]}," MethodBasedSexpProcessor process_sclass":{"type":"method","name":"process_sclass","children":[],"call":[" s "," process_until_empty "," block_given? "," in_sklass ","exp shift "," auto_shift_type "]}," MethodBasedSexpProcessor process_module":{"type":"method","name":"process_module","children":[],"call":[" s "," process_until_empty "," block_given? "," in_klass ","exp shift "," auto_shift_type "]}," MethodBasedSexpProcessor process_defs":{"type":"method","name":"process_defs","children":[],"call":[" s "," process_until_empty "," block_given? "," in_method ","exp line_max ","exp line ","exp file ","exp shift "," process "," auto_shift_type "]}," MethodBasedSexpProcessor process_defn":{"type":"method","name":"process_defn","children":[],"call":[" s "," process_until_empty "," block_given? "," in_method ","exp line_max ","exp line ","exp file ","exp shift ","@sclass empty? "," auto_shift_type "]}," MethodBasedSexpProcessor process_class":{"type":"method","name":"process_class","children":[],"call":[" s "," process_until_empty "," block_given? "," in_klass ","exp shift "," auto_shift_type "]}," MethodBasedSexpProcessor method_name":{"type":"method","name":"method_name","children":[],"call":["m =~ ","@method_stack first "]}," MethodBasedSexpProcessor klass_name":{"type":"method","name":"klass_name","children":[],"call":["@class_stack reverse join sub ","@class_stack reverse join ","@class_stack reverse ","@class_stack any? "," raise ","Sexp  === ","@class_stack first "]}," MethodBasedSexpProcessor in_sklass":{"type":"method","name":"in_sklass","children":[],"call":["@sclass pop "," with_new_method_stack ","@sclass push "]}," MethodBasedSexpProcessor in_method":{"type":"method","name":"in_method","children":[],"call":["@method_stack shift ","@method_locations []= "," signature ","@method_stack unshift ","name to_s ","name inspect ","Regexp  === "]}," MethodBasedSexpProcessor in_klass":{"type":"method","name":"in_klass","children":[],"call":["@class_stack shift "," with_new_method_stack ","@class_stack unshift "," raise ","name inspect ","name last to_s ","name last ","name join ","name delete ","name flatten ","name sexp_type ","Sexp  === ","name first ","name flatten  inspect ","name flatten  last to_s ","name flatten  last ","name flatten  join ","name flatten  delete ","name flatten  flatten ","name flatten  sexp_type ","name flatten  first "]}," MethodBasedSexpProcessor initialize":{"type":"method","name":"initialize","children":[],"call":[" require_empty= "]}," SexpInterpreter initialize":{"type":"method","name":"initialize","children":[],"call":[" strict= "," require_empty= "," expected= "]}," SexpProcessor rewriters":{"type":"method","name":"rewriters","children":[],"call":[]}," SexpProcessor processors":{"type":"method","name":"processors","children":[],"call":[]}," SexpProcessor expand_dirs_to_files":{"type":"method","name":"expand_dirs_to_files","children":[],"call":[]}," Sexp MatchCollection pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp ","q seplist ","q group "]}," Sexp MatchCollection inspect":{"type":"method","name":"inspect","children":[],"call":["MatchCollection.new(%s) % "," to_a inspect [] "," to_a inspect "," to_a "]}," Sexp MatchCollection /":{"type":"method","name":"/","children":[],"call":["result concat ","match / "," inject "," class new "," class "]}," Sexp Sibling index_matches":{"type":"method","name":"index_matches","children":[],"call":["indexes << ","pattern == ","o [] ","pattern satisfy? ","pattern kind_of? ","o each_with_index ","o kind_of? "]}," Sexp Sibling pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp "," sibling ","q text "," subject ","q group ","q seplist "," distance "]}," Sexp Sibling inspect":{"type":"method","name":"inspect","children":[],"call":["%p >> %p % "," sibling "," subject "]}," Sexp Sibling ==":{"type":"method","name":"==","children":[],"call":[" distance == ","o distance "," distance "," sibling == ","o sibling "," sibling "," subject == ","o subject "," subject "]}," Sexp Sibling satisfy?":{"type":"method","name":"satisfy?","children":[],"call":["i2 > ","i2 - == "," distance ","i2 - ","sibling_matches any? ","subject_matches any? ","sibling_matches empty? "," index_matches "," sibling ","subject_matches empty? "," subject "," index_matches  any? "," index_matches  empty? "]}," Sexp Sibling initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sexp Include pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp "," value ","q group "]}," Sexp Include inspect":{"type":"method","name":"inspect","children":[],"call":["include(%p) % "," value "]}," Sexp Include ==":{"type":"method","name":"==","children":[],"call":[" value == ","o value "," value "]}," Sexp Include satisfy?":{"type":"method","name":"satisfy?","children":[],"call":[" value == "," value "," value satisfy? ","Sexp  === ","o any? "]}," Sexp Include initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sexp Type pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp "," sexp_type ","q group "]}," Sexp Type inspect":{"type":"method","name":"inspect","children":[],"call":["t(%p) % "," sexp_type "]}," Sexp Type satisfy?":{"type":"method","name":"satisfy?","children":[],"call":["o sexp_type == "," sexp_type ","o sexp_type ","o kind_of? "]}," Sexp Type ==":{"type":"method","name":"==","children":[],"call":[" sexp_type == ","o sexp_type "," sexp_type "]}," Sexp Type initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sexp Pattern pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp "," pattern ","q group "]}," Sexp Pattern inspect":{"type":"method","name":"inspect","children":[],"call":["m(%p) % "," pattern "]}," Sexp Pattern satisfy?":{"type":"method","name":"satisfy?","children":[],"call":["o to_s =~ "," pattern ","o to_s ","o kind_of? ! ","o kind_of? "]}," Sexp Pattern initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sexp Pattern ==":{"type":"method","name":"==","children":[],"call":[" pattern == ","o pattern "," pattern "]}," Sexp Atom pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q text "]}," Sexp Atom inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Sexp Atom satisfy?":{"type":"method","name":"satisfy?","children":[],"call":["(send\n  (lvar :o) :kind_of?\n  (const nil :Sexp)) ! ","o kind_of? "]}," Sexp Child pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp "," child ","q group "]}," Sexp Child inspect":{"type":"method","name":"inspect","children":[],"call":["child(%p) % "," child "]}," Sexp Child ==":{"type":"method","name":"==","children":[],"call":[" child == ","o child "," child "]}," Sexp Child satisfy?":{"type":"method","name":"satisfy?","children":[],"call":["o search_each any? ","o search_each "," child ","o kind_of? "," child satisfy? "]}," Sexp Child initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sexp Not pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp "," value ","q group "]}," Sexp Not inspect":{"type":"method","name":"inspect","children":[],"call":["not?(%p) % "," value "]}," Sexp Not satisfy?":{"type":"method","name":"satisfy?","children":[],"call":["(if\n  (send\n    (send nil :value) :kind_of?\n    (const nil :Sexp))\n  (send\n    (send nil :value) :satisfy?\n    (lvar :o))\n  (send\n    (send nil :value) :==\n    (lvar :o))) ! "," value == "," value "," value satisfy? "," value kind_of? "]}," Sexp Not ==":{"type":"method","name":"==","children":[],"call":[" value == ","o value "," value "]}," Sexp Not initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sexp All pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp ","q seplist "," options ","q group "]}," Sexp All inspect":{"type":"method","name":"inspect","children":[],"call":[" options map join "," options map "," options "]}," Sexp All ==":{"type":"method","name":"==","children":[],"call":[" options == ","o options "," options "]}," Sexp All satisfy?":{"type":"method","name":"satisfy?","children":[],"call":["exp == ","exp satisfy? ","exp kind_of? "," options all? "," options "]}," Sexp All initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sexp Any pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp ","q seplist "," options ","q group "]}," Sexp Any inspect":{"type":"method","name":"inspect","children":[],"call":[" options map join "," options map "," options "]}," Sexp Any ==":{"type":"method","name":"==","children":[],"call":[" options == ","o options "," options "]}," Sexp Any satisfy?":{"type":"method","name":"satisfy?","children":[],"call":["exp == ","exp satisfy? ","Sexp  === "," options any? "," options "]}," Sexp Any initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sexp Remaining pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q text "]}," Sexp Remaining inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Sexp Remaining greedy?":{"type":"method","name":"greedy?","children":[],"call":[]}," Sexp Remaining satisfy?":{"type":"method","name":"satisfy?","children":[],"call":[]}," Sexp Wild pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q text "]}," Sexp Wild inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Sexp Wild satisfy?":{"type":"method","name":"satisfy?","children":[],"call":[]}," Sexp Matcher Parser parse_cmd":{"type":"method","name":"parse_cmd","children":[],"call":["Sexp  send "," raise ","bad cmd: %p % ","ALLOWED  include? ","Sexp  s ","args shift "," next_token ","args << "," parse_sexp "," peek_token != "," peek_token ","Sexp  q ","bad args shift : %p % ","Sexp  s  shift ","Sexp  q  shift ","Sexp  s  << ","Sexp  q  << "]}," Sexp Matcher Parser parse_list":{"type":"method","name":"parse_list","children":[],"call":["Sexp  s "," next_token ","result << "," parse_sexp "," peek_token != "," peek_token ","Sexp  q "]}," Sexp Matcher Parser parse_sexp":{"type":"method","name":"parse_sexp","children":[],"call":[" raise ","unhandled token: %p % ","token to_sym ","Regexp  new ","Not allowed: /%p/ % ","re =~ ","Sexp  _ ","Sexp  ___ ","token to_i "," parse_cmd "," parse_list "," next_token ","1 to_sym ","Object  const_get ","unhandled  next_token : %p % "," next_token  to_sym "," next_token  to_i "," next_ next_token  "]}," Sexp Matcher Parser parse":{"type":"method","name":"parse","children":[],"call":[" parse_sexp "," tokens empty? "," tokens "]}," Sexp Matcher Parser peek_token":{"type":"method","name":"peek_token","children":[],"call":[" tokens first "," tokens "]}," Sexp Matcher Parser next_token":{"type":"method","name":"next_token","children":[],"call":[" tokens shift "," tokens "," raise "," tokens empty? "]}," Sexp Matcher Parser lex":{"type":"method","name":"lex","children":[],"call":[" tokens concat ","s scan "," tokens "]}," Sexp Matcher Parser initialize":{"type":"method","name":"initialize","children":[],"call":[" lex "," tokens= "]}," Sexp Matcher parse":{"type":"method","name":"parse","children":[],"call":[]}," Sexp Matcher pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp ","q seplist ","q group "]}," Sexp Matcher inspect":{"type":"method","name":"inspect","children":[],"call":["s []= "]}," Sexp Matcher greedy?":{"type":"method","name":"greedy?","children":[],"call":[]}," Sexp Matcher >>":{"type":"method","name":">>","children":[],"call":["Sibling  new "]}," Sexp Matcher -@":{"type":"method","name":"-@","children":[],"call":["Not  new "]}," Sexp Matcher &":{"type":"method","name":"&","children":[],"call":["All  new "]}," Sexp Matcher |":{"type":"method","name":"|","children":[],"call":["Any  new "]}," Sexp Matcher /":{"type":"method","name":"/","children":[],"call":["MatchCollection  new ","sexp search_each to_a ","sexp search_each "," raise ","Matcher  === "]}," Sexp Matcher =~":{"type":"method","name":"=~","children":[],"call":[" =~ ","sexp each_sexp any? ","sexp each_sexp "," class match_subs? "," class "," satisfy? "," raise ","Can't both be matchers: %p % ","Matcher  === "]}," Sexp Matcher satisfy?":{"type":"method","name":"satisfy?","children":[],"call":["child == ","child satisfy? ","o sexp_body ","child greedy? ","child respond_to? ","Sexp  === ","o at "," each_with_index all? "," each_with_index "," last greedy? "," last ","Matcher  === "," length == ","o length "," length ","o kind_of? ","o o sexp_body _body ","o o at _body "]}," Sexp Matcher match_subs=":{"type":"method","name":"match_subs=","children":[],"call":[]}," Sexp Matcher match_subs?":{"type":"method","name":"match_subs?","children":[],"call":[]}," Sexp m":{"type":"method","name":"m","children":[],"call":[]}," Sexp t":{"type":"method","name":"t","children":[],"call":[]}," Sexp child":{"type":"method","name":"child","children":[],"call":[]}," Sexp not?":{"type":"method","name":"not?","children":[],"call":[]}," Sexp all":{"type":"method","name":"all","children":[],"call":[]}," Sexp any":{"type":"method","name":"any","children":[],"call":[]}," Sexp atom":{"type":"method","name":"atom","children":[],"call":[]}," Sexp include":{"type":"method","name":"include","children":[],"call":[]}," Sexp ___":{"type":"method","name":"___","children":[],"call":[]}," Sexp _":{"type":"method","name":"_","children":[],"call":[]}," Sexp s":{"type":"method","name":"s","children":[],"call":[]}," Sexp replace_sexp":{"type":"method","name":"replace_sexp","children":[],"call":[" class new ","subset replace_sexp "," map "," class ","pattern satisfy? "," raise ","pattern kind_of? "]}," Sexp search_each":{"type":"method","name":"search_each","children":[],"call":["subset search_each "," each_sexp ","pattern satisfy? "," enum_for "," block_given? "," raise ","pattern kind_of? "]}," Sexp /":{"type":"method","name":"/","children":[],"call":["pattern / "," raise ","Not a pattern: %p % ","Matcher  === "]}," Sexp satisfy?":{"type":"method","name":"satisfy?","children":[],"call":["pattern satisfy? "," raise ","Not a pattern: %p % ","Matcher  === "]}," Sexp line_max":{"type":"method","name":"line_max","children":[],"call":[" deep_each map max "," deep_each map "," deep_each "," deep_each map compact max "," deep_each map compact "]}," Sexp depth":{"type":"method","name":"depth","children":[],"call":["1 + "," each_sexp map max "," each_sexp map "," each_sexp "]}," Sexp map":{"type":"method","name":"map","children":[],"call":[" new "," new concat "," new _concat "]}," Sexp new":{"type":"method","name":"new","children":[],"call":["r comments= "," comments ","r line= "," line ","r file= "," file "," class new "," class "," class new concat "," class new _concat ","r line_max= "," line_max "," class new  comments= "," class new concat  comments= "," class new _concat  comments= "," class new  line= "," class new concat  line= "," class new _concat  line= "," class new  file= "," class new concat  file= "," class new _concat  file= "," class new  line_max= "," class new concat  line_max= "," class new _concat  line_max= "]}," Sexp Pattern hash":{"type":"method","name":"hash","children":[],"call":["(zsuper) hash "," pattern "]}," Sexp Pattern eql?":{"type":"method","name":"eql?","children":[],"call":[" pattern eql? ","o pattern "," pattern "]}," Sexp q":{"type":"method","name":"q","children":[],"call":[]}," Sexp hash":{"type":"method","name":"hash","children":[],"call":["(send\n  (self) :class) hash "," class "]}," Sexp eql?":{"type":"method","name":"eql?","children":[],"call":[" class == ","o class "," class "]}," Sexp Klass pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp "," pattern ","q group "]}," Sexp Klass inspect":{"type":"method","name":"inspect","children":[],"call":["k(%p) % "," pattern "]}," Sexp Klass satisfy?":{"type":"method","name":"satisfy?","children":[],"call":["o kind_of? "," pattern "]}," Sexp k":{"type":"method","name":"k","children":[],"call":[]}," Sexp value":{"type":"method","name":"value","children":[],"call":[" last "," raise "," size > "," size "]}}