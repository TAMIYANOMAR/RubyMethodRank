{" CFPropertyList XML import_xml":{"type":"method","name":"import_xml","children":[],"call":["CFDate  new ","CFDate  parse_date "," get_value ","CFData  new ","CFString  new ","CFInteger  new "," get_value to_i ","CFReal  new "," get_value to_f ","CFBoolean  new ","CFArray  new ","ary push "," import_xml ","node children each ","node children ","node children? ","Array  new ","CFDictionary  new ","hsh []= "," raise ","CFFormatError  new ","key nil? ","n name == ","n name ","n text? ","Hash  new ","node name ","node elements each ","node elements ","node has_elements? ","children each ","children empty? ","n comment? ","Array  new  push ","node node children  each ","node node children  ","node node children ? ","CFDictionArray  new   new ","Hash  new  []= "," get_value  nil? ","node children  each ","node children  empty? "]}," CFPropertyList XML get_value":{"type":"method","name":"get_value","children":[],"call":["n content ","n first content ","n first ","n children? ","content force_encoding ","content respond_to? ","n text ","n children first content ","n children first ","n children ","n children empty? ","n n content  ","n n first content  ","n n text  ","n n children first content  ","n first n content  ","n first n first content  ","n first n text  ","n first n children first content  ","n content  force_encoding ","n first content  force_encoding ","n text  force_encoding ","n children first content  force_encoding ","n content  respond_to? ","n first content  respond_to? ","n text  respond_to? ","n children first content  respond_to? ","n children first n content  ","n children first n first content  ","n children first n text  ","n children first n children first content  "]}," CFPropertyList XML to_str":{"type":"method","name":"to_str","children":[],"call":["str1 << ","line =~ ","str each_line ","String  new ","doc to_s ","opts [] ","doc root << ","opts [] to_xml ","doc root ","doc root []= ","doc encoding= ","doc root= ","LibXML XML Node  new ","LibXML XML Document  new ","str1 force_encoding ","str1 respond_to? ","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n + + ","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n + ","formatter write ","REXML Formatters Default  new ","f compact= ","REXML Formatters Pretty  new ","doc add_element ","doc context []= ","doc context ","REXML Document  new ","doc serialize ","doc create_element ","Nokogiri XML Document  new ","String  new  << ","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n + +  << ","doc to_s 1 << ","formatter write 1 << ","doc serialize 1 << ","doc to_s  each_line ","formatter write  each_line ","doc serialize  each_line ","LibXML XML Document  new  to_s ","REXML Document  new  to_s ","Nokogiri XML Document  new  to_s ","LibXML XML Document  new  root << ","REXML Document  new  root << ","Nokogiri XML Document  new  root << ","LibXML XML Document  new  root ","REXML Document  new  root ","Nokogiri XML Document  new  root ","LibXML XML Document  new  root []= ","REXML Document  new  root []= ","Nokogiri XML Document  new  root []= ","LibXML XML Document  new  encoding= ","REXML Document  new  encoding= ","Nokogiri XML Document  new  encoding= ","LibXML XML Document  new  root= ","REXML Document  new  root= ","Nokogiri XML Document  new  root= ","String  new  force_encoding ","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n + +  force_encoding ","doc to_s 1 force_encoding ","formatter write 1 force_encoding ","doc serialize 1 force_encoding ","str1 REXML Formatters Pretty  new orce_encoding ","String  new  respond_to? ","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n + +  respond_to? ","doc to_s 1 respond_to? ","formatter write 1 respond_to? ","doc serialize 1 respond_to? ","REXML Formatters Default  new  write ","REXML Formatters Pretty  new ormatter write ","REXML Formatters DeREXML Formatters Pretty  new ault  new ","REXML Formatters Pretty  new  compact= ","LibXML XML Document  new  add_element ","REXML Document  new  add_element ","Nokogiri XML Document  new  add_element ","LibXML XML Document  new  context []= ","REXML Document  new  context []= ","Nokogiri XML Document  new  context []= ","LibXML XML Document  new  context ","REXML Document  new  context ","Nokogiri XML Document  new  context ","LibXML XML Document  new  serialize ","REXML Document  new  serialize ","Nokogiri XML Document  new  serialize ","LibXML XML Document  new  create_element ","REXML Document  new  create_element ","Nokogiri XML Document  new  create_element "]}," CFPropertyList XML load":{"type":"method","name":"load","children":[],"call":[" import_xml ","doc root first ","doc root ","LibXML XML Document  string ","LibXML XML Parser Options NOBLANKS  | ","opts [] ","LibXML XML Document  file ","opts has_key? ","doc root elements [] ","doc root elements ","REXML Document  new ","File  open ","doc root children first ","doc root children ","Nokogiri XML Document  parse ","Nokogiri XML ParseOptions NOBLANKS  | ","doc doc root first  first ","doc doc root elements []  first ","doc doc root children first  first ","LibXML XML Document  string  root first ","LibXML XML Document  file  root first ","REXML Document  new  root first ","Nokogiri XML Document  parse  root first ","doc doc root first  ","doc doc root elements []  ","doc doc root children first  ","LibXML XML Document  string  root ","LibXML XML Document  file  root ","REXML Document  new  root ","Nokogiri XML Document  parse  root ","doc doc root first  elements [] ","doc doc root elements []  elements [] ","doc doc root children first  elements [] ","LibXML XML Document  string  root elements [] ","LibXML XML Document  file  root elements [] ","REXML Document  new  root elements [] ","Nokogiri XML Document  parse  root elements [] ","doc doc root first  elements ","doc doc root elements []  elements ","doc doc root children first  elements ","LibXML XML Document  string  root elements ","LibXML XML Document  file  root elements ","REXML Document  new  root elements ","Nokogiri XML Document  parse  root elements ","doc doc root first  children first ","doc doc root elements []  children first ","doc doc root children first  children first ","LibXML XML Document  string  root children first ","LibXML XML Document  file  root children first ","REXML Document  new  root children first ","Nokogiri XML Document  parse  root children first ","doc doc root first  children ","doc doc root elements []  children ","doc doc root children first  children ","LibXML XML Document  string  root children ","LibXML XML Document  file  root children ","REXML Document  new  root children ","Nokogiri XML Document  parse  root children "]}," CFPropertyList CFDictionary to_binary":{"type":"method","name":"to_binary","children":[],"call":["bplist dict_to_binary "]}," CFPropertyList CFDictionary to_xml":{"type":"method","name":"to_xml","children":[],"call":["n << ","value to_xml ","LibXML XML Node  new << ","LibXML XML Node  new_text ","LibXML XML Node  new ","@value each_pair ","parser append_node ","parser new_text ","key to_s ","parser new_node ","LibXML XML Node  new  << ","parser append_node  << ","parser new_node  << ","LibXML XML Node  LibXML XML Node  new ew << ","LibXML XML Node  parser append_node ew << ","LibXML XML Node  parser new_node ew << ","LibXML XML Node  LibXML XML Node  new ew_text ","LibXML XML Node  parser append_node ew_text ","LibXML XML Node  parser new_node ew_text ","LibXML XML Node  LibXML XML Node  new ew ","LibXML XML Node  parser append_node ew ","LibXML XML Node  parser new_node ew ","parser appeLibXML XML Node  new d_LibXML XML Node  new ode ","parser appeparser append_node d_parser append_node ode ","parser appeparser new_node d_parser new_node ode ","parser LibXML XML Node  new ew_text ","parser parser append_node ew_text ","parser parser new_node ew_text ","LibXML XML Node  new << ey to_s ","parser append_node ey to_s ","parser LibXML XML Node  new ew_LibXML XML Node  new ode ","parser parser append_node ew_parser append_node ode ","parser parser new_node ew_parser new_node ode "]}," CFPropertyList CFDictionary initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CFPropertyList CFArray to_binary":{"type":"method","name":"to_binary","children":[],"call":["bplist array_to_binary "]}," CFPropertyList CFArray to_xml":{"type":"method","name":"to_xml","children":[],"call":["n << ","v to_xml ","@value each ","LibXML XML Node  new ","parser append_node ","parser new_node ","LibXML XML Node  new  << ","parser append_node  << ","parser new_node  << ","LibXML XML Node  LibXML XML Node  new ew ","LibXML XML Node  parser append_node ew ","LibXML XML Node  parser new_node ew ","parser appeLibXML XML Node  new d_LibXML XML Node  new ode ","parser appeparser append_node d_parser append_node ode ","parser appeparser new_node d_parser new_node ode ","parser LibXML XML Node  new ew_LibXML XML Node  new ode ","parser parser append_node ew_parser append_node ode ","parser parser new_node ew_parser new_node ode "]}," CFPropertyList CFArray initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CFPropertyList CFData to_binary":{"type":"method","name":"to_binary","children":[],"call":["bplist data_to_binary "," decoded_value "]}," CFPropertyList CFData to_xml":{"type":"method","name":"to_xml","children":[],"call":["LibXML XML Node  new << ","LibXML XML Node  new_text ","LibXML XML Node  new "," encoded_value ","parser append_node ","parser new_text ","parser new_node ","LibXML XML Node  parser append_node ew << ","LibXML XML Node  parser new_node ew << ","LibXML XML Node  parser append_node ew_text ","LibXML XML Node  parser new_node ew_text ","LibXML XML Node  parser append_node ew ","LibXML XML Node  parser new_node ew "," eparser append_node coded_value "," eparser new_node coded_value ","parser appeparser append_node d_parser append_node ode ","parser appeparser new_node d_parser new_node ode ","parser parser append_node ew_text ","parser parser new_node ew_text ","parser parser append_node ew_parser append_node ode ","parser parser new_node ew_parser new_node ode "]}," CFPropertyList CFData decoded_value":{"type":"method","name":"decoded_value","children":[],"call":["Base64  decode64 ","@raw_value blob= ","String  new ","Blob  new "]}," CFPropertyList CFData initialize":{"type":"method","name":"initialize","children":[],"call":["Base64  encode64 ","format == ","@raw_value blob= "]}," CFPropertyList CFBoolean to_binary":{"type":"method","name":"to_binary","children":[],"call":["bplist bool_to_binary "]}," CFPropertyList CFBoolean to_xml":{"type":"method","name":"to_xml","children":[],"call":["LibXML XML Node  new ","parser new_node "]}," CFPropertyList CFDate to_binary":{"type":"method","name":"to_binary","children":[],"call":["bplist date_to_binary "]}," CFPropertyList CFDate to_xml":{"type":"method","name":"to_xml","children":[],"call":["LibXML XML Node  new << ","LibXML XML Node  new_text ","CFDate  date_string ","LibXML XML Node  new ","parser append_node ","parser new_text ","parser new_node ","LibXML XML Node  parser append_node ew << ","LibXML XML Node  parser new_node ew << ","LibXML XML Node  parser append_node ew_text ","LibXML XML Node  parser new_node ew_text ","CFDate  date_striparser append_node g ","CFDate  date_striparser new_node g ","LibXML XML Node  parser append_node ew ","LibXML XML Node  parser new_node ew ","parser appeparser append_node d_parser append_node ode ","parser appeparser new_node d_parser new_node ode ","parser parser append_node ew_text ","parser parser new_node ew_text ","parser parser append_node ew_parser append_node ode ","parser parser new_node ew_parser new_node ode "]}," CFPropertyList CFDate get_value":{"type":"method","name":"get_value","children":[],"call":["@value to_f - ","@value to_f ","@value to_i ","format == "]}," CFPropertyList CFDate set_value":{"type":"method","name":"set_value","children":[],"call":["Time  at ","value + ","format == "]}," CFPropertyList CFDate initialize":{"type":"method","name":"initialize","children":[],"call":[" set_value ","Time  now ","value nil? ","value is_a? ","value to_time utc ","value to_time ","value instance_of? ","Time  utc ","value day ","value month ","value year "]}," CFPropertyList CFDate parse_date":{"type":"method","name":"parse_date","children":[],"call":[]}," CFPropertyList CFDate date_string":{"type":"method","name":"date_string","children":[],"call":[]}," CFPropertyList CFReal to_binary":{"type":"method","name":"to_binary","children":[],"call":["bplist num_to_binary "]}," CFPropertyList CFReal to_xml":{"type":"method","name":"to_xml","children":[],"call":["LibXML XML Node  new << ","LibXML XML Node  new_text ","@value to_s ","LibXML XML Node  new ","parser append_node ","parser new_text ","parser new_node ","LibXML XML Node  parser append_node ew << ","LibXML XML Node  parser new_node ew << ","LibXML XML Node  parser append_node ew_text ","LibXML XML Node  parser new_node ew_text ","LibXML XML Node  parser append_node ew ","LibXML XML Node  parser new_node ew ","parser appeparser append_node d_parser append_node ode ","parser appeparser new_node d_parser new_node ode ","parser parser append_node ew_text ","parser parser new_node ew_text ","parser parser append_node ew_parser append_node ode ","parser parser new_node ew_parser new_node ode "]}," CFPropertyList CFInteger to_binary":{"type":"method","name":"to_binary","children":[],"call":["bplist num_to_binary "]}," CFPropertyList CFInteger to_xml":{"type":"method","name":"to_xml","children":[],"call":["LibXML XML Node  new << ","LibXML XML Node  new_text ","@value to_s ","LibXML XML Node  new ","parser append_node ","parser new_text ","parser new_node ","LibXML XML Node  parser append_node ew << ","LibXML XML Node  parser new_node ew << ","LibXML XML Node  parser append_node ew_text ","LibXML XML Node  parser new_node ew_text ","LibXML XML Node  parser append_node ew ","LibXML XML Node  parser new_node ew ","parser appeparser append_node d_parser append_node ode ","parser appeparser new_node d_parser new_node ode ","parser parser append_node ew_text ","parser parser new_node ew_text ","parser parser append_node ew_parser append_node ode ","parser parser new_node ew_parser new_node ode "]}," CFPropertyList CFString to_binary":{"type":"method","name":"to_binary","children":[],"call":["bplist string_to_binary "]}," CFPropertyList CFString to_xml":{"type":"method","name":"to_xml","children":[],"call":["n << ","LibXML XML Node  new_text ","@value nil? ","LibXML XML Node  new ","parser append_node ","parser new_text ","parser new_node ","LibXML XML Node  new  << ","parser append_node  << ","parser new_node  << ","LibXML XML Node  LibXML XML Node  new ew_text ","LibXML XML Node  parser append_node ew_text ","LibXML XML Node  parser new_node ew_text ","@value LibXML XML Node  new il? ","@value parser append_node il? ","@value parser new_node il? ","LibXML XML Node  LibXML XML Node  new ew ","LibXML XML Node  parser append_node ew ","LibXML XML Node  parser new_node ew ","parser appeLibXML XML Node  new d_LibXML XML Node  new ode ","parser appeparser append_node d_parser append_node ode ","parser appeparser new_node d_parser new_node ode ","parser LibXML XML Node  new ew_text ","parser parser append_node ew_text ","parser parser new_node ew_text ","parser LibXML XML Node  new ew_LibXML XML Node  new ode ","parser parser append_node ew_parser append_node ode ","parser parser new_node ew_parser new_node ode "]}," CFPropertyList CFType to_binary":{"type":"method","name":"to_binary","children":[],"call":[]}," CFPropertyList CFType to_xml":{"type":"method","name":"to_xml","children":[],"call":[]}," CFPropertyList CFType initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Hash to_plist":{"type":"method","name":"to_plist","children":[],"call":["plist to_str ","options [] ","plist value= ","CFPropertyList  guess ","CFPropertyList List  new ","CFPropertyList List  new  to_str ","CFPropertyList List  new  value= "]}," Array to_plist":{"type":"method","name":"to_plist","children":[],"call":["plist to_str ","options [] ","plist value= ","CFPropertyList  guess ","CFPropertyList List  new ","CFPropertyList List  new  to_str ","CFPropertyList List  new  value= "]}," CFPropertyList List to_str":{"type":"method","name":"to_str","children":[],"call":["prsr to_str ","opts []= ","@@parsers [] new ","@@parsers [] ","format - ","opts has_key? "," raise ","CFFormatError  new ","format != ","@@parsers [] new  to_str "]}," CFPropertyList List save":{"type":"method","name":"save","children":[],"call":["fd write ","File  open ","prsr to_str ","@@parsers [] new ","@@parsers [] ","format - ","opts []= "," raise ","IOError  new ","File  writable? ! ","File  writable? ","File  dirname ","File  exists? ! ","File  exists? ","CFFormatError  new ","format != ","file nil? ","format nil? ","opts has_key? ","File  exist? ! ","File  exist? ","@@parsers [] new  to_str "]}," CFPropertyList List load":{"type":"method","name":"load","children":[],"call":["prsr load ","XML  new ","Binary  new "," raise ","CFFormatError  new ","version == ","filetype == ","magic_number [] ","IO  read ","@@parsers [] new ","@@parsers [] ","format - ","IOError  new ","File  readable? ","format nil? ","file nil? ","CFPropertyList  xml_parser_interface new ","CFPropertyList  xml_parser_interface ","@value nil? ","PlainParser  new ","magic_number =~ ","XML  new  load ","Binary  new  load ","@@parsers [] new  load ","CFPropertyList  xml_parser_interface new  load ","PlainParser  new  load ","magic_number []  == ","IO  read  [] ","prsr load  nil? ","IO  read  =~ "]}," CFPropertyList List load_str":{"type":"method","name":"load_str","children":[],"call":["prsr load ","XML  new ","Binary  new "," raise ","CFFormatError  new ","version == ","filetype == ","str [] ","@@parsers [] new ","@@parsers [] ","format - ","format nil? ","str nil? ","CFPropertyList  xml_parser_interface new ","CFPropertyList  xml_parser_interface ","PlainParser  new ","str =~ ","XML  new  load ","Binary  new  load ","@@parsers [] new  load ","CFPropertyList  xml_parser_interface new  load ","PlainParser  new  load ","str []  == "]}," CFPropertyList List load_binary_str":{"type":"method","name":"load_binary_str","children":[],"call":[" load_str "]}," CFPropertyList List load_xml_str":{"type":"method","name":"load_xml_str","children":[],"call":[" load_str "]}," CFPropertyList List load_binary":{"type":"method","name":"load_binary","children":[],"call":[" load "]}," CFPropertyList List load_xml":{"type":"method","name":"load_xml","children":[],"call":[" load "]}," CFPropertyList List initialize":{"type":"method","name":"initialize","children":[],"call":[" load_str ","@data nil? "," load ","@filename nil? ","opts [] ","opts []  nil? "]}," CFPropertyList native_types":{"type":"method","name":"native_types","children":[],"call":["hsh []= ","CFPropertyList  native_types ","k to_sym ","object value each_pair ","object value ","object is_a? ","ary push ","object value each ","object decoded_value ","object nil? ","CFPropertyList Blob  new ","k to_sym  to_sym "]}," CFPropertyList guess":{"type":"method","name":"guess","children":[],"call":[" raise ","CFTypeError  new ","object class to_s ","object class ","CFString  new ","object to_s ","options [] ","CFPropertyList  guess ","object send ","object respond_to? ","CFDictionary  new ","hsh []= ","k to_s ","k is_a? ","object each_pair ","Hash  new ","object is_a? ","CFArray  new ","ary push ","object each ","Array  new ","CFData  new ","object read ","CFDate  new ","CFBoolean  new ","CFReal  new ","Object  const_defined? ","CFInteger  new ","object blob? ","raw_data force_encoding ","raw_data respond_to? ","CFUid  new ","CFDictionArray  new   new ","Hash  new  []= ","k to_s  to_s ","k to_s  is_a? ","Array  new  push ","object read  force_encoding ","object read  respond_to? "]}," String bytesize":{"type":"method","name":"bytesize","children":[],"call":[" length "]}," CFPropertyList ParserInterface to_str":{"type":"method","name":"to_str","children":[],"call":[]}," CFPropertyList ParserInterface load":{"type":"method","name":"load","children":[],"call":[]}," CFPropertyList Binary dict_to_binary":{"type":"method","name":"dict_to_binary","children":[],"call":["@object_table []= ","Binary  pack_it_with_size ","v to_binary ","val value each_value ","val value ","str to_binary ","CFString  new ","val value each_key ","Binary  type_bytes ","val value size ","bdata << ","val value count ","CFString  new  to_binary ","val value each_str to_binary  ","Binary  type_bytes  << "]}," CFPropertyList Binary array_to_binary":{"type":"method","name":"array_to_binary","children":[],"call":["@object_table []= ","Binary  pack_it_with_size ","v to_binary ","val value each ","val value ","Binary  type_bytes ","val value size ","bdata << ","val value count ","Binary  type_bytes  << "]}," CFPropertyList Binary data_to_binary":{"type":"method","name":"data_to_binary","children":[],"call":["@object_table []= ","bdata + ","Binary  type_bytes ","val bytesize ","Binary  type_bytes  + "]}," CFPropertyList Binary bool_to_binary":{"type":"method","name":"bool_to_binary","children":[],"call":["@object_table []= "]}," CFPropertyList Binary date_to_binary":{"type":"method","name":"date_to_binary","children":[],"call":["@object_table []= ","bdata + ","(lvar :val) pack reverse ","(lvar :val) pack ","Binary  type_bytes ","val getutc to_f - ","val getutc to_f ","val getutc ","Binary  type_bytes  + ","(lvar :val getutc to_f - ) pack reverse ","(lvar :val getutc to_f - ) pack ","val getutc to_f -  getutc to_f - ","val getutc to_f -  getutc to_f ","val getutc to_f -  getutc "]}," CFPropertyList Binary num_to_binary":{"type":"method","name":"num_to_binary","children":[],"call":["@object_table []= "," real_to_binary ","value value "," int_to_binary ","value is_a? "," real_to_binary ue  real_to_binary ue "," int_to_binary ue  int_to_binary ue "," real_to_binary ue is_a? "," int_to_binary ue is_a? "]}," CFPropertyList Binary real_to_binary":{"type":"method","name":"real_to_binary","children":[],"call":["bdata + ","buff reverse ","(lvar :val) pack ","Binary  type_bytes ","Binary  type_bytes  + ","(lvar :val) pack  reverse "]}," CFPropertyList Binary int_to_binary":{"type":"method","name":"int_to_binary","children":[],"call":["bdata + ","(lvar :high_word) pack ","value & ","value >> ","(lvar :value) pack ","nbytes == ","nbytes < ","Binary  type_bytes ","value < ","value > ","Binary  type_bytes  + ","(lvar :value >> ) pack "]}," CFPropertyList Binary string_to_binary":{"type":"method","name":"string_to_binary","children":[],"call":["@object_table []= ","bdata + ","Binary  type_bytes ","val bytesize ","val force_encoding ","val respond_to? ","Binary  charset_convert ","Binary  charset_strlen ","b > ","val each_byte ","@unique_table []= ","@unique_table [] ","@unique_table has_key? ","Binary  type_bytes  + ","Binary  charset_convert  bytesize ","Binary  charset_convert  force_encoding ","Binary  charset_convert  respond_to? ","Binary  charset_convert  each_byte "]}," CFPropertyList Binary binary_strlen":{"type":"method","name":"binary_strlen","children":[],"call":[]}," CFPropertyList Binary unique_and_count_values":{"type":"method","name":"unique_and_count_values","children":[],"call":["@unique_table [] ","Binary  bytes_size_int ","Binary  charset_strlen ","Binary  binary_strlen + ","Binary  binary_strlen ","@unique_table []= ","@unique_table has_key? ! ","@unique_table has_key? ","value value ","val length ","value decoded_value ","value is_a? "," unique_and_count_values ","value value each_pair ","value value each ","Binary  bytes_int ","val length + ","value value ue value value ue ","value decoded_value ue value decoded_value ue ","value value  length ","value decoded_value  length ","value value ue decoded_value value ue ","value decoded_value ue decoded_value decoded_value ue ","value value ue is_a? ","value decoded_value ue is_a? "," unique_and_count_value value ues "," unique_and_count_value decoded_value ues ","value value ue value value ue each_pair ","value decoded_value ue value decoded_value ue each_pair ","value value ue value value ue each ","value decoded_value ue value decoded_value ue each ","value value  length + ","value decoded_value  length + "]}," CFPropertyList Binary type_bytes":{"type":"method","name":"type_bytes","children":[],"call":[]}," CFPropertyList Binary int_bytes":{"type":"method","name":"int_bytes","children":[],"call":[]}," CFPropertyList Binary bytes_needed":{"type":"method","name":"bytes_needed","children":[],"call":[]}," CFPropertyList Binary pack_it_with_size":{"type":"method","name":"pack_it_with_size","children":[],"call":[]}," CFPropertyList Binary bytes_int":{"type":"method","name":"bytes_int","children":[],"call":[]}," CFPropertyList Binary bytes_size_int":{"type":"method","name":"bytes_size_int","children":[],"call":[]}," CFPropertyList Binary read_binary_object_at":{"type":"method","name":"read_binary_object_at","children":[],"call":[" read_binary_object ","fd seek ","@offsets [] "]}," CFPropertyList Binary read_binary_object":{"type":"method","name":"read_binary_object","children":[],"call":[" read_binary_dict "," read_binary_array "," read_binary_unicode_string "," read_binary_string "," read_binary_data "," read_binary_date "," read_binary_real "," read_binary_int "," read_binary_null_type ","object_length value "," read_binary_object ","object_length == ","object_type != ","buff [] [] chr ","buff [] [] ","buff [] ","buff unpack ","object_length [] & ","object_length [] ","fd read ","object_length value  value "," read_binary_object  value ","object_length [] &  value ","buff unpack  value ","object_length value  == "," read_binary_object  == ","object_length [] &  == ","buff unpack  == ","buff [] [] chr  != ","buff unpack  [] [] chr ","fd read  [] [] chr ","buff unpack  [] [] ","fd read  [] [] ","buff unpack  [] ","fd read  [] ","buff unpack  unpack ","fd read  unpack ","object_length value  [] & "," read_binary_object  [] & ","object_length [] &  [] & ","buff unpack  [] & ","object_length value  [] "," read_binary_object  [] ","object_length [] &  [] "]}," CFPropertyList Binary read_binary_dict":{"type":"method","name":"read_binary_dict","children":[],"call":["CFDictionary  new ","dict []= ","key value "," read_binary_object_at ","objects [] ","keys [] ","0 upto ","length - ","buff unpack ","@object_ref_size == ","fd read ","length * ","length != "," read_binary_object_at  value "," read_binary_ read_binary_object_at _at "," read_binary_object_at s [] ","buff unpack  [] ","fd read  unpack ","@ read_binary_object_at _ref_size == "]}," CFPropertyList Binary read_binary_array":{"type":"method","name":"read_binary_array","children":[],"call":["CFArray  new ","ary push "," read_binary_object_at ","objects [] ","0 upto ","length - ","buff unpack ","@object_ref_size == ","fd read ","length * ","length != "," read_binary_ read_binary_object_at _at "," read_binary_object_at s [] ","buff unpack  [] ","fd read  unpack ","@ read_binary_object_at _ref_size == "]}," CFPropertyList Binary read_binary_unicode_string":{"type":"method","name":"read_binary_unicode_string","children":[],"call":["CFString  new ","Binary  charset_convert ","@unique_table []= ","@unique_table has_key? ","fd read ","2 * "]}," CFPropertyList Binary charset_strlen":{"type":"method","name":"charset_strlen","children":[],"call":[]}," CFPropertyList Binary charset_convert":{"type":"method","name":"charset_convert","children":[],"call":[]}," CFPropertyList Binary read_binary_string":{"type":"method","name":"read_binary_string","children":[],"call":["CFString  new ","@unique_table []= ","@unique_table has_key? ","fd read ","length > "]}," CFPropertyList Binary read_binary_data":{"type":"method","name":"read_binary_data","children":[],"call":["CFData  new ","fd read ","length > "]}," CFPropertyList Binary read_binary_date":{"type":"method","name":"read_binary_date","children":[],"call":["CFDate  new ","val [] ","buff reverse unpack ","buff reverse "," raise ","CFFormatError  new ","length + ","fd read ","1 << ","length > ","val []  [] ","buff reverse unpack  [] ","fd read  reverse unpack ","fd read  reverse "]}," CFPropertyList Binary read_binary_real":{"type":"method","name":"read_binary_real","children":[],"call":["CFReal  new ","val [] ","buff reverse unpack ","buff reverse "," raise ","CFFormatError  new ","length + ","fd read ","1 << ","length > ","val []  [] ","buff reverse unpack  [] ","fd read  reverse unpack ","fd read  reverse "]}," CFPropertyList Binary read_binary_int":{"type":"method","name":"read_binary_int","children":[],"call":["CFInteger  new ","hiword << | ","hiword << ","buff unpack ","val [] ","fd read ","1 << "," raise ","CFFormatError  new ","length > ","fd read  unpack ","hiword << |  [] ","val []  [] ","buff unpack  [] "]}," CFPropertyList Binary read_binary_null_type":{"type":"method","name":"read_binary_null_type","children":[],"call":[" raise ","CFFormatError  new ","CFBoolean  new "]}," CFPropertyList Binary to_str":{"type":"method","name":"to_str","children":[],"call":["(lvar :table_offset) pack ","(int 0) pack ","(ivar :@count_objects) pack ","(lvar :offset_size) pack ","Binary  pack_it_with_size ","offsets each ","@object_table [] bytesize ","@object_table [] ","offsets []= ","0 upto ","@object_table size - ","@object_table size ","opts [] to_binary ","opts [] ","file_size - ","Binary  bytes_needed ","@string_size + + + + ","@string_size + + + ","@object_refs * ","@string_size + + ","@string_size + ","@unique_table size "," unique_and_count_values ","binary_str << ","@object_table count - ","@object_table count ","@unique_table count ","(lvar :file_size - ) pack ","(lvar :Binary  bytes_needed ) pack ","@string_size + + + +  - "]}," CFPropertyList Binary load":{"type":"method","name":"load","children":[],"call":["fd close "," read_binary_object_at ","@offsets []= ","@offsets [] to_i ","@offsets [] ","0 upto ","@offsets size - ","@offsets size ","offset_size == ","coded_offset_table unpack ","formats [] "," raise ","CFFormatError  new ","coded_offset_table bytesize == ","number_of_objects * ","coded_offset_table bytesize ","fd read ","fd seek ","buff unpack ","StringIO  new ","opts [] ","File  open ","opts has_key? ","@offsets count - ","@offsets count ","StringIO  new  close ","File  open  close ","coded_offset_table unpack  []= ","coded_offset_table unpack  [] to_i ","coded_offset_table unpack  [] ","coded_offset_table unpack  size - ","coded_offset_table unpack  size ","fd read  unpack ","fd read  bytesize == ","fd read  bytesize ","StringIO  new  read ","File  open  read ","StringIO  new  seek ","File  open  seek ","coded_offset_table unpack  count - ","coded_offset_table unpack  count "]}," CFPropertyList CFData encoded_value":{"type":"method","name":"encoded_value","children":[],"call":["Base64  encode64 ","Base64  encode64 gsub scan join ","Base64  encode64 gsub scan ","Base64  encode64 gsub "]}," String blob?":{"type":"method","name":"blob?","children":[],"call":[" blob "]}," Enumerator to_plist":{"type":"method","name":"to_plist","children":[],"call":["plist to_str ","options [] ","plist value= ","CFPropertyList  guess ","CFPropertyList List  new ","CFPropertyList List  new  to_str ","CFPropertyList List  new  value= "]}," CFPropertyList XML append_node":{"type":"method","name":"append_node","children":[],"call":["parent elements << ","parent elements ","parent add_text ","child is_a? ","parent << "]}," CFPropertyList XML new_text":{"type":"method","name":"new_text","children":[],"call":["@doc create_text_node ","LibXML XML Node  new_text "]}," CFPropertyList XML new_node":{"type":"method","name":"new_node","children":[],"call":["REXML Element  new ","@doc create_element ","LibXML XML Node  new "]}," CFPropertyList XMLParserInterface append_node":{"type":"method","name":"append_node","children":[],"call":[]}," CFPropertyList XMLParserInterface new_text":{"type":"method","name":"new_text","children":[],"call":[]}," CFPropertyList XMLParserInterface new_node":{"type":"method","name":"new_node","children":[],"call":[]}," CFPropertyList ReXMLParser import_xml":{"type":"method","name":"import_xml","children":[],"call":["CFDate  new ","CFDate  parse_date "," get_value ","CFData  new ","CFString  new ","CFInteger  new "," get_value to_i ","CFReal  new "," get_value to_f ","CFBoolean  new ","CFArray  new ","ary push "," import_xml ","node elements each ","node elements ","node has_elements? ","Array  new ","CFDictionary  new ","hsh []= "," raise ","CFFormatError  new ","key nil? ","n name == ","n name ","Hash  new ","node name ","ret value= ","ret value nil? ","ret value ","CFUid  new ","hsh [] value ","hsh [] ","hsh keys length == ","hsh keys length ","hsh keys ","Array  new  push ","CFDictionArray  new   new ","Hash  new  []= "," get_value  nil? ","CFDate  new  value= ","CFData  new  value= ","CFString  new  value= ","CFInteger  new  value= ","CFReal  new  value= ","CFBoolean  new  value= ","CFArray  new  value= ","CFDictionary  new  value= ","CFUid  new  value= ","CFDate  new  value nil? ","CFData  new  value nil? ","CFString  new  value nil? ","CFInteger  new  value nil? ","CFReal  new  value nil? ","CFBoolean  new  value nil? ","CFArray  new  value nil? ","CFDictionary  new  value nil? ","CFUid  new  value nil? ","CFDate  new  value ","CFData  new  value ","CFString  new  value ","CFInteger  new  value ","CFReal  new  value ","CFBoolean  new  value ","CFArray  new  value ","CFDictionary  new  value ","CFUid  new  value ","Hash  new  [] value ","Hash  new  [] ","hsh  get_value s length == ","Hash  new  keys length == ","hsh  get_value s length ","Hash  new  keys length ","hsh  get_value s ","Hash  new  keys "]}," CFPropertyList ReXMLParser get_value":{"type":"method","name":"get_value","children":[],"call":["content force_encoding ","content respond_to? ","n text ","n text  force_encoding ","n text  respond_to? "]}," CFPropertyList ReXMLParser append_node":{"type":"method","name":"append_node","children":[],"call":["parent elements << ","parent elements ","parent add_text ","child is_a? "]}," CFPropertyList ReXMLParser new_text":{"type":"method","name":"new_text","children":[],"call":[]}," CFPropertyList ReXMLParser new_node":{"type":"method","name":"new_node","children":[],"call":["REXML Element  new "]}," CFPropertyList ReXMLParser to_str":{"type":"method","name":"to_str","children":[],"call":["str1 force_encoding ","str1 respond_to? ","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n + + ","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n + ","formatter write ","doc root ","REXML Formatters Default  new ","f compact= ","REXML Formatters Pretty  new ","opts [] ","doc root << ","opts [] to_xml ","doc add_element ","doc context []= ","doc context ","REXML Document  new ","f width= ","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n + +  force_encoding ","formatter write 1 force_encoding ","str1 REXML Formatters Pretty  new orce_encoding ","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n + +  respond_to? ","formatter write 1 respond_to? ","REXML Formatters Default  new  write ","REXML Formatters Pretty  new ormatter write ","REXML Document  new  root ","REXML Formatters DeREXML Formatters Pretty  new ault  new ","REXML Formatters Pretty  new  compact= ","REXML Document  new  root << ","REXML Document  new  add_element ","REXML Document  new  context []= ","REXML Document  new  context ","REXML Formatters Pretty  new  width= "]}," CFPropertyList ReXMLParser load":{"type":"method","name":"load","children":[],"call":[" import_xml ","doc root elements [] ","doc root elements ","doc root ","REXML Document  new ","opts [] ","File  open ","opts has_key? "," raise ","CFFormatError  new ","invalid XML:  + ","e message ","doc doc root elements []  elements [] ","REXML Document  new  root elements [] ","doc doc root elements []  elements ","REXML Document  new  root elements ","doc doc root elements []  ","REXML Document  new  root "]}," CFPropertyList NokogiriXMLParser import_xml":{"type":"method","name":"import_xml","children":[],"call":["CFDate  new ","CFDate  parse_date "," get_value ","CFData  new ","CFString  new ","CFInteger  new "," get_value to_i ","CFReal  new "," get_value to_f ","CFBoolean  new ","CFArray  new ","ary push "," import_xml ","children each ","children empty? ","node children ","Array  new ","CFDictionary  new ","hsh []= "," raise ","CFFormatError  new ","key nil? ","n name == ","n name ","n comment? ","n text? ","Hash  new ","node name ","CFUid  new ","hsh [] value ","hsh [] ","hsh keys length == ","hsh keys length ","hsh keys ","Array  new  push ","node children  each ","node children  empty? ","node node children  ","CFDictionArray  new   new ","Hash  new  []= "," get_value  nil? ","Hash  new  [] value ","Hash  new  [] ","hsh  get_value s length == ","Hash  new  keys length == ","hsh  get_value s length ","Hash  new  keys length ","hsh  get_value s ","Hash  new  keys "]}," CFPropertyList NokogiriXMLParser get_value":{"type":"method","name":"get_value","children":[],"call":["content force_encoding ","content respond_to? ","n children first content ","n children first ","n children ","n content ","n children empty? ","n children first content  force_encoding ","n content  force_encoding ","n children first content  respond_to? ","n content  respond_to? ","n children first n children first content  ","n children first n content  ","n n children first content  ","n n content  "]}," CFPropertyList NokogiriXMLParser append_node":{"type":"method","name":"append_node","children":[],"call":["parent << "]}," CFPropertyList NokogiriXMLParser new_text":{"type":"method","name":"new_text","children":[],"call":["@doc create_text_node "]}," CFPropertyList NokogiriXMLParser new_node":{"type":"method","name":"new_node","children":[],"call":["@doc create_element "]}," CFPropertyList NokogiriXMLParser to_str":{"type":"method","name":"to_str","children":[],"call":["str1 force_encoding ","str1 respond_to? ","str1 << ","line =~ ","str each_line ","String  new ","doc serialize ","opts [] ","doc root << ","opts [] to_xml ","doc root ","doc encoding= ","doc root= ","doc create_element ","Nokogiri XML Document  new ","String  new  force_encoding ","doc serialize 1 force_encoding ","String  new  respond_to? ","doc serialize 1 respond_to? ","String  new  << ","doc serialize 1 << ","doc serialize  each_line ","Nokogiri XML Document  new  serialize ","Nokogiri XML Document  new  root << ","Nokogiri XML Document  new  root ","Nokogiri XML Document  new  encoding= ","Nokogiri XML Document  new  root= ","Nokogiri XML Document  new  create_element "]}," CFPropertyList NokogiriXMLParser load":{"type":"method","name":"load","children":[],"call":[" import_xml ","doc root children first ","doc root children ","doc root ","Nokogiri XML Document  parse ","Nokogiri XML ParseOptions NOBLANKS  | ","opts [] ","File  open ","opts has_key? "," raise ","CFFormatError  new ","invalid XML:  + ","e message ","doc doc root children first  children first ","Nokogiri XML Document  parse  root children first ","doc doc root children first  children ","Nokogiri XML Document  parse  root children ","doc doc root children first  ","Nokogiri XML Document  parse  root "]}," CFPropertyList LibXMLParser import_xml":{"type":"method","name":"import_xml","children":[],"call":["CFDate  new ","CFDate  parse_date "," get_value ","CFData  new ","CFString  new ","CFInteger  new "," get_value to_i ","CFReal  new "," get_value to_f ","CFBoolean  new ","CFArray  new ","ary push "," import_xml ","node children each ","node children ","node children? ","Array  new ","CFDictionary  new ","hsh []= "," raise ","CFFormatError  new ","key nil? ","n name == ","n name ","n comment? ","n text? ","Hash  new ","node name ","CFUid  new ","hsh [] value ","hsh [] ","hsh keys length == ","hsh keys length ","hsh keys ","Array  new  push ","CFDictionArray  new   new ","Hash  new  []= "," get_value  nil? ","Hash  new  [] value ","Hash  new  [] ","hsh  get_value s length == ","Hash  new  keys length == ","hsh  get_value s length ","Hash  new  keys length ","hsh  get_value s ","Hash  new  keys "]}," CFPropertyList LibXMLParser get_value":{"type":"method","name":"get_value","children":[],"call":["content force_encoding ","content respond_to? ","n content ","n first content ","n first ","n children? ","n content  force_encoding ","n first content  force_encoding ","n content  respond_to? ","n first content  respond_to? ","n n content  ","n n first content  ","n first n content  ","n first n first content  "]}," CFPropertyList LibXMLParser append_node":{"type":"method","name":"append_node","children":[],"call":["parent << "]}," CFPropertyList LibXMLParser new_text":{"type":"method","name":"new_text","children":[],"call":["LibXML XML Node  new_text "]}," CFPropertyList LibXMLParser new_node":{"type":"method","name":"new_node","children":[],"call":["LibXML XML Node  new "]}," CFPropertyList LibXMLParser to_str":{"type":"method","name":"to_str","children":[],"call":["str1 force_encoding ","str1 respond_to? ","str1 << ","line =~ ","str each_line ","String  new ","doc to_s ","opts [] ","doc root << ","opts [] to_xml ","doc root ","doc root []= ","doc encoding= ","doc root= ","LibXML XML Node  new ","LibXML XML Document  new ","String  new  force_encoding ","doc to_s 1 force_encoding ","String  new  respond_to? ","doc to_s 1 respond_to? ","String  new  << ","doc to_s 1 << ","doc to_s  each_line ","LibXML XML Document  new  to_s ","LibXML XML Document  new  root << ","LibXML XML Document  new  root ","LibXML XML Document  new  root []= ","LibXML XML Document  new  encoding= ","LibXML XML Document  new  root= "]}," CFPropertyList LibXMLParser load":{"type":"method","name":"load","children":[],"call":[" import_xml ","doc root first ","doc root ","LibXML XML Document  string ","LibXML XML Parser Options NOBLANKS  | ","opts [] ","LibXML XML Document  file ","opts has_key? "," raise ","CFFormatError  new ","invalid XML:  + ","e message ","doc doc root first  first ","LibXML XML Document  string  root first ","LibXML XML Document  file  root first ","doc doc root first  ","LibXML XML Document  string  root ","LibXML XML Document  file  root "]}," CFPropertyList List parsers=":{"type":"method","name":"parsers=","children":[],"call":[]}," CFPropertyList List parsers":{"type":"method","name":"parsers","children":[],"call":[]}," CFPropertyList CFUid to_binary":{"type":"method","name":"to_binary","children":[],"call":["bplist uid_to_binary "]}," CFPropertyList CFUid to_xml":{"type":"method","name":"to_xml","children":[],"call":["CFDictionary  new to_xml ","CFDictionary  new ","CFInteger  new "]}," CFPropertyList PlainParser import_plain":{"type":"method","name":"import_plain","children":[],"call":[" read_unquoted "," read_binary ","@doc scan "," read_quoted "," read_array "," read_dict "," skip_whitespaces "]}," CFPropertyList PlainParser read_binary":{"type":"method","name":"read_binary","children":[],"call":["CFData  new ","(lvar :hex_str) pack ","@doc [] gsub ","@doc [] ","@doc scan ","(lvar :@doc [] gsub ) pack "]}," CFPropertyList PlainParser read_unquoted":{"type":"method","name":"read_unquoted","children":[],"call":["CFString  new ","@doc scan ","CFBoolean  new ","@doc matched == ","@doc matched ","CFInteger  new ","@doc matched to_i ","CFReal  new ","@doc matched to_f ","CFDate  new ","Time  new "," sprintf ","@doc [] "," raise ","CFFormatError  new ","@doc eos? "]}," CFPropertyList PlainParser read_quoted":{"type":"method","name":"read_quoted","children":[],"call":["CFString  new ","str << ","@doc matched ","@doc scan "," raise ","CFFormatError  new ","@doc eos? "," escape_char ","@doc scan ! "]}," CFPropertyList PlainParser escape_char":{"type":"method","name":"escape_char","children":[],"call":["@doc matched ","@doc scan hex chr ","@doc scan hex ","@doc scan "]}," CFPropertyList PlainParser read_array":{"type":"method","name":"read_array","children":[],"call":["CFArray  new "," raise ","CFFormatError  new ","@doc eos? ","ary << ","@doc scan ","@doc skip ! ","@doc skip "," skip_whitespaces ","val value ! ","val value ","val ! "," import_plain ","@doc scan ! "," import_plain   import_plain ue ! "," import_plain   import_plain ue "," import_plain  ! "]}," CFPropertyList PlainParser read_dict":{"type":"method","name":"read_dict","children":[],"call":["CFDictionary  new "," raise ","CFFormatError  new ","@doc eos? ","hsh []= "," skip_whitespaces ","@doc scan "," import_plain ","key value to_s ","key value ","key is_a? ","key ! ","@doc scan ! ","key  import_plain ue to_s ","key value to_s  value to_s ","key value  value to_s "," import_plain  value to_s ","key  import_plain ue ","key value to_s  value ","key value  value "," import_plain  value ","key value to_s  is_a? ","key value  is_a? "," import_plain  is_a? ","key value to_s  ! ","key value  ! "," import_plain  ! "]}," CFPropertyList PlainParser skip_whitespaces":{"type":"method","name":"skip_whitespaces","children":[],"call":["@doc skip "]}," CFPropertyList PlainParser to_str":{"type":"method","name":"to_str","children":[],"call":["opts [] to_plain ","opts [] "]}," CFPropertyList PlainParser load":{"type":"method","name":"load","children":[],"call":[" raise ","CFFormatError  new ","@doc eos? "," import_plain ","StringScanner  new ","opts [] ","fd read ","File  open ","opts has_key? ","StringScanner  new  eos? "]}," CFPropertyList CFUid to_plain":{"type":"method","name":"to_plain","children":[],"call":["CFDictionary  new to_plain ","CFDictionary  new ","CFInteger  new "]}," CFPropertyList CFDictionary to_plain":{"type":"method","name":"to_plain","children":[],"call":["str << ","cfstr to_plain + + + ","cfstr to_plain + + ","v to_plain ","cfstr to_plain + ","cfstr to_plain ","cfstr value= ","@value each ","CFString  new ","CFString  new  to_plain + + + ","CFString  new  to_plain + + ","CFString  new  to_plain + ","CFString  new  to_plain ","CFString  new  value= "]}," CFPropertyList CFArray to_plain":{"type":"method","name":"to_plain","children":[],"call":["(  + + ","(  + ","ary join ","v to_plain ","@value map "]}," CFPropertyList CFData to_plain":{"type":"method","name":"to_plain","children":[],"call":["< + + ","< + "," decoded_value unpack join "," decoded_value unpack "," decoded_value "]}," CFPropertyList CFBoolean to_plain":{"type":"method","name":"to_plain","children":[],"call":[]}," CFPropertyList CFDate to_plain":{"type":"method","name":"to_plain","children":[],"call":["@value strftime "]}," CFPropertyList CFReal to_plain":{"type":"method","name":"to_plain","children":[],"call":["@value to_s "]}," CFPropertyList CFInteger to_plain":{"type":"method","name":"to_plain","children":[],"call":["@value to_s "]}," CFPropertyList CFString quoted":{"type":"method","name":"quoted","children":[],"call":["str << ","@value each_char "]}," CFPropertyList CFString to_plain":{"type":"method","name":"to_plain","children":[],"call":[" quoted ","@value =~ "]}," CFPropertyList CFType to_plain":{"type":"method","name":"to_plain","children":[],"call":[]}," CFPropertyList List load_plain":{"type":"method","name":"load_plain","children":[],"call":[" load "]}," CFPropertyList List load_plain_str":{"type":"method","name":"load_plain_str","children":[],"call":[" load_str "]}}