{" OAuth AccessToken perform":{"type":"method","name":"perform","children":[],"call":["request perform "," secret "," consumer secret "," consumer "," consumer create_request "," token "," consumer create_request  perform "," consumer create_ consumer create_request  "]}," OAuth AccessToken delete":{"type":"method","name":"delete","children":[],"call":[" perform "," request "]}," OAuth AccessToken put":{"type":"method","name":"put","children":[],"call":[" perform "," request "]}," OAuth AccessToken post":{"type":"method","name":"post","children":[],"call":[" perform "," request "]}," OAuth AccessToken head":{"type":"method","name":"head","children":[],"call":[" perform "," request "]}," OAuth AccessToken get":{"type":"method","name":"get","children":[],"call":[" perform "," request "]}," OAuth RequestToken get_access_token":{"type":"method","name":"get_access_token","children":[],"call":["OAuth AccessToken  new ","response [] "," consumer ","request perform_token_request "," secret "," consumer secret "," consumer create_request "," token "," consumer access_token_path "," consumer http_method "," consumer token_request "," consumer access_token_url "," consumer access_token_url? ","OAuth AccessToken  from_hash ","request perform_token_request  [] "," consumer token_request  [] "," consumer create_request  perform_token_ consumer create_request  "," consumer create_ consumer create_request  "," consumer token_ consumer create_request  "]}," OAuth RequestToken authorize_url":{"type":"method","name":"authorize_url","children":[],"call":[" consumer authorize_url + + ","CGI  escape "," token "," consumer authorize_url + "," consumer authorize_url "," consumer "," build_authorize_url ","(or\n  (lvar :params)\n  (hash)) merge "," token nil? "," build_url ","(or\n  (lvar :(or\n  (lvar :params)\n  (hash)) merge )\n  (hash)) merge "]}," OAuth ConsumerToken initialize":{"type":"method","name":"initialize","children":[],"call":[]}," OAuth ServerToken initialize":{"type":"method","name":"initialize","children":[],"call":[" generate_key "]}," OAuth Token to_query":{"type":"method","name":"to_query","children":[],"call":[" escape "," secret "," token "]}," OAuth Token initialize":{"type":"method","name":"initialize","children":[],"call":[]}," OAuth Server access_token_url":{"type":"method","name":"access_token_url","children":[],"call":[" base_url + "," access_token_path "," base_url "]}," OAuth Server access_token_path":{"type":"method","name":"access_token_path","children":[],"call":["@paths [] "]}," OAuth Server authorize_url":{"type":"method","name":"authorize_url","children":[],"call":[" base_url + "," authorize_path "," base_url "]}," OAuth Server authorize_path":{"type":"method","name":"authorize_path","children":[],"call":["@paths [] "]}," OAuth Server request_token_url":{"type":"method","name":"request_token_url","children":[],"call":[" base_url + "," request_token_path "," base_url "]}," OAuth Server request_token_path":{"type":"method","name":"request_token_path","children":[],"call":["@paths [] "]}," OAuth Server create_consumer":{"type":"method","name":"create_consumer","children":[],"call":["Consumer  new "," access_token_path "," authorize_path "," request_token_path ","credentials [] "," base_url "," generate_credentials ","creds [] "," generate_credentials  [] "," generate_ generate_credentials  "]}," OAuth Server generate_consumer_credentials":{"type":"method","name":"generate_consumer_credentials","children":[],"call":["ConsumerCredentials  new "," generate_credentials ","Consumer  new "]}," OAuth Server generate_credentials":{"type":"method","name":"generate_credentials","children":[],"call":[" generate_key "]}," OAuth Server initialize":{"type":"method","name":"initialize","children":[],"call":["@@server_paths merge "]}," OAuth Request verify?":{"type":"method","name":"verify?","children":[],"call":["OAuth Signature  create verify? ","OAuth Signature  create "]}," OAuth Request sign":{"type":"method","name":"sign","children":[],"call":["OAuth Signature  create sign! ","OAuth Signature  create "]}," OAuth Request signed?":{"type":"method","name":"signed?","children":[],"call":[" signature != "," signature "]}," OAuth Request signature_method=":{"type":"method","name":"signature_method=","children":[],"call":[" []= "]}," OAuth Request signature_method":{"type":"method","name":"signature_method","children":[],"call":[" [] "]}," OAuth Request signature=":{"type":"method","name":"signature=","children":[],"call":[" []= "]}," OAuth Request signature":{"type":"method","name":"signature","children":[],"call":[" [] "]}," OAuth Request oauth_params_without_signature":{"type":"method","name":"oauth_params_without_signature","children":[],"call":["key to_sym == ","key to_sym "," to_hash reject "," to_hash "]}," OAuth Request to_base_string":{"type":"method","name":"to_base_string","children":[],"call":[" to_query "]}," OAuth Request to_auth_string":{"type":"method","name":"to_auth_string","children":[],"call":["(str \"OAuth realm=\\\"\") + ","(send\n  (send nil :oauth_params) :collect) sort join ","(send\n  (send nil :oauth_params) :collect) sort "," escape ","key to_s "," oauth_params collect "," oauth_params "," realm "]}," OAuth Request to_query_without_signature":{"type":"method","name":"to_query_without_signature","children":[],"call":["(send nil :to_name_value_pair_array\n  (send nil :oauth_params_without_signature)\n  (lvar :with)) sort join ","(send nil :to_name_value_pair_array\n  (send nil :oauth_params_without_signature)\n  (lvar :with)) sort "," to_name_value_pair_array "," oauth_params_without_signature "]}," OAuth Request to_query":{"type":"method","name":"to_query","children":[],"call":["(send nil :to_name_value_pair_array\n  (send nil :to_hash\n    (lvar :with))) sort join ","(send nil :to_name_value_pair_array\n  (send nil :to_hash\n    (lvar :with))) sort "," to_name_value_pair_array "," to_hash "]}," OAuth Request to_hash":{"type":"method","name":"to_hash","children":[],"call":[" oauth_params merge merge "," oauth_params merge "," http_parameters "," oauth_params "]}," OAuth Request to_name_value_pair_array":{"type":"method","name":"to_name_value_pair_array","children":[],"call":["(send\n  (send\n    (lvar :hash) :merge\n    (lvar :with)) :collect) sort "," escape ","key to_s ","hash merge collect ","hash merge "]}," OAuth Request token":{"type":"method","name":"token","children":[],"call":[" [] "]}," OAuth Request nonce":{"type":"method","name":"nonce","children":[],"call":[" [] "]}," OAuth Request create_timestamp":{"type":"method","name":"create_timestamp","children":[],"call":["Time  now utc to_i to_s ","Time  now utc to_i ","Time  now utc ","Time  now "]}," OAuth Request timestamp":{"type":"method","name":"timestamp","children":[],"call":[" [] "]}," OAuth Request []=":{"type":"method","name":"[]=","children":[],"call":[" oauth_params []= ","key to_sym "," oauth_params "]}," OAuth Request []":{"type":"method","name":"[]","children":[],"call":[" oauth_params [] ","key to_sym "," oauth_params "]}," OAuth Request normalized_url":{"type":"method","name":"normalized_url","children":[],"call":["uri [] ","uri [] == ","uri [] nil? ","URI  split "," url ","URI  split  [] ","URI  split  [] == ","URI  split  [] nil? "]}," OAuth Request parse_url_form_encoded":{"type":"method","name":"parse_url_form_encoded","children":[],"call":["h []= ","v [] ","k to_sym ","CGI  parse inject ","CGI  parse "]}," OAuth Request http_parameters":{"type":"method","name":"http_parameters","children":[],"call":[" parse_url_form_encoded "," uri query "," uri "," body "]}," OAuth Request url":{"type":"method","name":"url","children":[],"call":[" site + "," path "," site "]}," OAuth Request uri":{"type":"method","name":"uri","children":[],"call":["URI  parse "," url "]}," OAuth Request path=":{"type":"method","name":"path=","children":[],"call":[]}," OAuth Request site=":{"type":"method","name":"site=","children":[],"call":["_site downcase "]}," OAuth Request content_type":{"type":"method","name":"content_type","children":[],"call":[" headers [] "," headers "]}," OAuth Request http_method":{"type":"method","name":"http_method","children":[],"call":[]}," OAuth Request http_method=":{"type":"method","name":"http_method=","children":[],"call":["value to_s strip upcase ","value to_s strip ","value to_s "]}," OAuth Request perform_token_request":{"type":"method","name":"perform_token_request","children":[],"call":["response error! ","h []= ","v first ","k to_sym ","CGI  parse inject ","CGI  parse ","response body ","response code == ","response code "," perform "," perform  error! "," perform  body "," perform  code == "," perform  code "]}," OAuth Request perform":{"type":"method","name":"perform","children":[],"call":["http send "," headers "," http_method downcase to_sym "," http_method downcase "," http_method "," body ","(str \"POST\") include? "," path "," headers []= "," to_auth_string "," body= "," to_query "," uri path "," uri "," auth_method "," sign ","http_klass start "," uri port "," uri host "," uri scheme == "," uri scheme "]}," OAuth Request incoming":{"type":"method","name":"incoming","children":[],"call":[]}," OAuth Request extract_consumer_key":{"type":"method","name":"extract_consumer_key","children":[],"call":[]}," OAuth Request initialize":{"type":"method","name":"initialize","children":[],"call":[" auth_method= "," auth_method == "," auth_method ","(str \"GET\") include? "," http_method "," []= "," generate_key "," nonce "," create_timestamp "," timestamp "," headers [] "," headers ","(str \"POST\") include? "," headers= ","arguments shift "," body= ","@oauth_params delete "," realm= "," path= "," site= "," http_method= ","@@default_oauth_params merge ","options []= ","key to_sym ","oauth_params inject ","@@default_oauth_params merge  delete "]}," OAuth OAuthTestHelper mock_incoming_request_with_authorize_header":{"type":"method","name":"mock_incoming_request_with_authorize_header","children":[],"call":["incoming env []= ","request http_method ","incoming env ","incoming host= ","request uri host ","request uri ","request uri port ","incoming request_uri= ","request path ","request to_auth_string ","ActionController TestRequest  new ","ActionController TestRequest  new  env []= ","ActionController TestRequest  new  env ","ActionController TestRequest  new  host= ","ActionController TestRequest  new  request_uri= "]}," OAuth OAuthTestHelper mock_incoming_request_with_query":{"type":"method","name":"mock_incoming_request_with_query","children":[],"call":["incoming env []= ","request http_method ","incoming env ","incoming host= ","request uri host ","request uri ","request uri port ","incoming request_uri= ","request path ","ActionController TestRequest  new ","request to_hash ","ActionController TestRequest  new  env []= ","ActionController TestRequest  new  env ","ActionController TestRequest  new  host= ","ActionController TestRequest  new  request_uri= "]}," OAuth Key escape":{"type":"method","name":"escape","children":[],"call":["CGI  escape gsub gsub ","CGI  escape gsub ","CGI  escape ","value to_s "]}," OAuth Key generate_key":{"type":"method","name":"generate_key","children":[],"call":["Base64  encode64 gsub ","Base64  encode64 ","OpenSSL Random  random_bytes "]}," OAuth ConsumerCredentials initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "]}," OAuth Consumer access_token_url":{"type":"method","name":"access_token_url","children":[],"call":[" site + "," access_token_path "," site ","@options [] "]}," OAuth Consumer authorize_url":{"type":"method","name":"authorize_url","children":[],"call":[" site + "," authorize_path "," site ","@options [] "]}," OAuth Consumer request_token_url":{"type":"method","name":"request_token_url","children":[],"call":[" site + "," request_token_path "," site ","@options [] "]}," OAuth Consumer access_token_path":{"type":"method","name":"access_token_path","children":[],"call":["@params [] ","@options [] "]}," OAuth Consumer authorize_path":{"type":"method","name":"authorize_path","children":[],"call":["@params [] ","@options [] "]}," OAuth Consumer request_token_path":{"type":"method","name":"request_token_path","children":[],"call":["@params [] ","@options [] "]}," OAuth Consumer auth_method":{"type":"method","name":"auth_method","children":[],"call":["@params [] "]}," OAuth Consumer signed_request":{"type":"method","name":"signed_request","children":[],"call":["request sign "," secret "," create_request "," create_request  sign "," create_ create_request  "]}," OAuth Consumer create_request":{"type":"method","name":"create_request","children":[],"call":["OAuth Request  new ","oauth_params merge "," auth_method "," params [] "," params "," authorize_url "," key "," site "]}," OAuth Consumer get_request_token":{"type":"method","name":"get_request_token","children":[],"call":["OAuth RequestToken  new ","response [] ","request perform_token_request "," secret "," create_request "," request_token_path "," http_method "," token_request "," request_token_url "," request_token_url? ","OAuth RequestToken  from_hash ","request_options [] "," block_given? ","request perform_token_request  [] "," token_request  [] "," create_request  perform_token_ create_request  "," create_ create_request  ","  create_request _token_path "," token_ create_request  ","  create_request _token_url ","  create_request _token_url? "," create_request _options [] "]}," OAuth Consumer http_method":{"type":"method","name":"http_method","children":[],"call":["@params [] ","@options [] "]}," OAuth Consumer initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","@params [] ","@@default_params merge ","options []= ","key to_sym ","params inject ","@@default_options merge ","options inject ","opts []= ","options each_with_object ","options transform_keys ","SnakyHash SymbolKeyed  new ","@@default_params merge  [] "]}," OAuth ConsumerToken sign!":{"type":"method","name":"sign!","children":[],"call":[" consumer sign! "," consumer "]}," OAuth ConsumerToken request":{"type":"method","name":"request","children":[],"call":[" consumer request "," consumer "]}," OAuth Signature signature_base_string":{"type":"method","name":"signature_base_string","children":[],"call":[]}," OAuth Signature verify":{"type":"method","name":"verify","children":[],"call":[]}," OAuth Signature sign":{"type":"method","name":"sign","children":[],"call":[]}," OAuth Signature build":{"type":"method","name":"build","children":[],"call":[]}," OAuth Signature available_methods":{"type":"method","name":"available_methods","children":[],"call":[]}," Signature SHA1 signature_base_string":{"type":"method","name":"signature_base_string","children":[],"call":[" secret + "," secret "]}," RSA SHA1 digest":{"type":"method","name":"digest","children":[],"call":["private_key sign "," signature_base_string ","OpenSSL Digest SHA1  new ","OpenSSL PKey RSA  new "," request consumer secret "," request consumer "," request "," consumer_secret ","IO  read "," options [] "," options ","OpenSSL PKey RSA  new  sign "]}," RSA SHA1 ==":{"type":"method","name":"==","children":[],"call":["public_key verify "," signature_base_string ","OpenSSL Digest SHA1  new ","OpenSSL PKey RSA  new "," request consumer secret "," request consumer "," request "," public_key verify ","Base64  decode64 ","cmp_signature first ","cmp_signature is_a? "," public_key ","OpenSSL PKey RSA  new  verify "," OpenSSL PKey RSA  new  verify "," OpenSSL PKey RSA  new  "]}," Signature PLAINTEXT signature_base_string":{"type":"method","name":"signature_base_string","children":[],"call":[" secret "]}," Signature PLAINTEXT ==":{"type":"method","name":"==","children":[],"call":[" signature == "," signature "," escape "," signature to_s == ","cmp_signature to_s "," signature to_s "]}," Signature PLAINTEXT signature":{"type":"method","name":"signature","children":[],"call":[" signature_base_string "]}," Signature MD5 signature_base_string":{"type":"method","name":"signature_base_string","children":[],"call":[" secret + "," secret "]}," HMAC Base digest":{"type":"method","name":"digest","children":[],"call":[" class digest_class digest "," signature_base_string "," secret "," class digest_class "," class ","Digest HMAC  digest ","Object  module_eval "," class digest_klass "]}," Signature Base digest":{"type":"method","name":"digest","children":[],"call":[" class digest_class digest "," signature_base_string "," class digest_class "," class "," raise_instantiation_error "]}," Signature Base secret":{"type":"method","name":"secret","children":[],"call":[" escape "," token_secret "," consumer_secret "]}," Signature Base consumer_key":{"type":"method","name":"consumer_key","children":[],"call":[" request consumer_key "," request "]}," Signature Base token":{"type":"method","name":"token","children":[],"call":[" request token "," request "]}," Signature Base signature_base_string":{"type":"method","name":"signature_base_string","children":[],"call":["(send\n  (lvar :base) :map) join "," escape ","base map "," request uri "," request "," request method ","(send\n  (send\n    (send\n      (send nil :request) :parameters_for_signature) :sort) :map) join ","(send nil :escape\n  (lvar :k)) * "," request parameters_for_signature sort map "," request parameters_for_signature sort "," request parameters_for_signature "," request signature_base_string "]}," Signature Base verify":{"type":"method","name":"verify","children":[],"call":[" == "," request signature "," request "]}," Signature Base ==":{"type":"method","name":"==","children":[],"call":["Base64  decode64 == ","Base64  decode64 "," signature "," signature == ","check zero? ","x ^ ","y to_i "," signature bytes zip ","cmp_signature bytes "," signature bytes "," signature bytesize ^ ","cmp_signature bytesize "," signature bytesize "," signature bytesize ^  zero? "]}," Signature Base signature":{"type":"method","name":"signature","children":[],"call":["Base64  encode64 chomp ","Base64  encode64 "," digest ","Base64  encode64 chomp gsub ","Base64  encode64 chomp delete "]}," Signature Base initialize":{"type":"method","name":"initialize","children":[],"call":["options [] secret ","options [] "," consumer_key "," token ","block arity == ","block arity "," block_given? "," raise ","request kind_of? ","request timestamp "," nonce ","@options [] secret ","@options [] ","secrets [] ","secrets size == ","secrets size ","secrets is_a? ","request is_a? "]}," Signature Base digest_class":{"type":"method","name":"digest_class","children":[],"call":[]}," Signature Base implements":{"type":"method","name":"implements","children":[],"call":[]}," OAuth RequestProxy proxy":{"type":"method","name":"proxy","children":[],"call":[]}," OAuth RequestProxy available_proxies":{"type":"method","name":"available_proxies","children":[],"call":[]}," Net HTTP HTTPRequest auth_header_params":{"type":"method","name":"auth_header_params","children":[],"call":[" request [] "," request "," request [] [] == "," request [] [] "]}," Net HTTP HTTPRequest post_params":{"type":"method","name":"post_params","children":[],"call":[" request body "," request "]}," Net HTTP HTTPRequest query_params":{"type":"method","name":"query_params","children":[],"call":["URI  parse query ","URI  parse "," request path "," request "]}," Net HTTP HTTPRequest query_string":{"type":"method","name":"query_string","children":[],"call":["(send nil :query_params) compact join ","(send nil :query_params) compact "," auth_header_params "," post_params "," query_params ","params compact join ","params compact ","params << "," method to_s upcase == "," method to_s upcase "," method to_s "," method "," request [] downcase == "," request [] downcase "," request [] "," request "," request [] != "," form_url_encoded? "]}," Net HTTP HTTPRequest all_parameters":{"type":"method","name":"all_parameters","children":[],"call":["request_params []= ","(lvar :v) flatten ","request_params [] << ","request_params [] ","request_params has_key? "," options [] each "," options [] "," options ","CGI  parse "," query_string ","CGI  parse  []= ","CGI  parse  [] << ","CGI  parse  [] ","CGI  parse  has_key? "]}," Net HTTP HTTPRequest parameters":{"type":"method","name":"parameters","children":[],"call":[" all_parameters "," options [] "," options "]}," Net HTTP HTTPRequest uri":{"type":"method","name":"uri","children":[],"call":["uri to_s ","uri query= ","URI  parse ","uri kind_of? "," options [] "," options "," options [] to_s ","URI  parse  to_s "," options []  to_s ","URI  parse  query= "," options []  query= ","URI  parse  kind_of? "," options []  kind_of? "]}," Net HTTP HTTPRequest method":{"type":"method","name":"method","children":[],"call":[" request method "," request "]}," RequestProxy ActionControllerRequest unescape":{"type":"method","name":"unescape","children":[],"call":["URI  unescape ","value gsub "]}," RequestProxy ActionControllerRequest request_params":{"type":"method","name":"request_params","children":[],"call":[" request request_parameters "," request "]}," RequestProxy ActionControllerRequest query_params":{"type":"method","name":"query_params","children":[],"call":[" request query_parameters "," request "]}," RequestProxy ActionControllerRequest header_params":{"type":"method","name":"header_params","children":[],"call":["k !~ ","oauth_params reject! ","Hash  [] ","oauth_param_string flatten ","v [] ","v =~ ","oauth_param_string map! "," unescape ","v strip ","header [] split ","header [] ","header length ","header [] == "," request env [] "," request env "," request "," request env include? ","(str \"X-HTTP_AUTHORIZATION\") each ","Hash  []  reject! ","header [] split  flatten ","header [] split  map! "," request env []  [] split "," request env []  [] "," request env []  length "," request env []  [] == "]}," RequestProxy ActionControllerRequest parameters":{"type":"method","name":"parameters","children":[],"call":["params merge "," options [] "," options ","params stringify_keys! ","params respond_to? "," request_params merge merge "," header_params "," request_params merge "," query_params "," request_params "," request_params merge merge  merge "," request_params merge merge  stringify_keys! "," request_params merge merge  respond_to? "," request_ request_params merge merge  merge merge "," header_ request_params merge merge  "," request_ request_params merge merge  merge "," query_ request_params merge merge  "," request_ request_params merge merge  "]}," RequestProxy ActionControllerRequest uri":{"type":"method","name":"uri","children":[],"call":["uri to_s ","uri query= ","URI  parse "," request protocol + + + "," request path "," request "," request protocol + + "," request port_string "," request protocol + "," request host "," request protocol "," request url ","URI  parse  to_s ","URI  parse  query= "]}," RequestProxy ActionControllerRequest method":{"type":"method","name":"method","children":[],"call":[" request method to_s upcase "," request method to_s "," request method "," request "]}," OAuth Helper generate_key":{"type":"method","name":"generate_key","children":[],"call":["Base64  encode64 gsub ","Base64  encode64 ","OpenSSL Random  random_bytes "]}," OAuth Helper escape":{"type":"method","name":"escape","children":[],"call":["CGI  escape gsub gsub ","CGI  escape gsub ","CGI  escape ","value to_s ","URI  escape ","value to_s force_encoding ","value to_s to_str force_encoding ","value to_s to_str "," _escape "]}," OAuth Consumer create_http_request":{"type":"method","name":"create_http_request","children":[],"call":["request body= ","data to_s ","request set_form_data ","data is_a? "," raise ","http_method to_s ","Net HTTP Head  new ","Net HTTP Delete  new ","Net HTTP Get  new ","Net HTTP Put  new ","Net HTTP Post  new ","arguments shift ","arguments first is_a? ","arguments first ","(sym :post) include? ","http_method to_sym ","request []= ","request body length ","request body ","data stat size ","data stat ","data stat respond_to? ","data respond_to? ","data length ","request body_stream= ","v nil? ","(or\n  (send\n    (lvar :arguments) :shift)\n  (hash)) reject ","data reject! ","form_data []= ","k to_s ","v nil? ! ","data each ","request body length to_s ","data stat size to_s ","data length to_s ","uri path + ","uri path ","URI  parse "," site ","request content_type= ","OAuth Helper  normalize ","uri path != ","Net HTTP Patch  new ","uri host == "," http address "," http ","uri host ","Net HTTP Head  new  body= ","Net HTTP Delete  new  body= ","Net HTTP Get  new  body= ","Net HTTP Put  new  body= ","Net HTTP Post  new  body= ","Net HTTP Patch  new  body= ","arguments shift  to_s ","Net HTTP Head  new  set_form_data ","Net HTTP Delete  new  set_form_data ","Net HTTP Get  new  set_form_data ","Net HTTP Put  new  set_form_data ","Net HTTP Post  new  set_form_data ","Net HTTP Patch  new  set_form_data ","request set_form_arguments shift  ","arguments shift  is_a? ","http_method to_sym  to_s ","http_method to_sym  to_sym ","Net HTTP Head  new  []= ","Net HTTP Delete  new  []= ","Net HTTP Get  new  []= ","Net HTTP Put  new  []= ","Net HTTP Post  new  []= ","Net HTTP Patch  new  []= ","Net HTTP Head  new  body length ","Net HTTP Delete  new  body length ","Net HTTP Get  new  body length ","Net HTTP Put  new  body length ","Net HTTP Post  new  body length ","Net HTTP Patch  new  body length ","Net HTTP Head  new  body ","Net HTTP Delete  new  body ","Net HTTP Get  new  body ","Net HTTP Put  new  body ","Net HTTP Post  new  body ","Net HTTP Patch  new  body ","arguments shift  stat size ","arguments shift  stat ","arguments shift  stat respond_to? ","arguments shift  respond_to? ","arguments shift  length ","Net HTTP Head  new  body_stream= ","Net HTTP Delete  new  body_stream= ","Net HTTP Get  new  body_stream= ","Net HTTP Put  new  body_stream= ","Net HTTP Post  new  body_stream= ","Net HTTP Patch  new  body_stream= ","arguments shift  reject! ","form_arguments shift  []= ","arguments shift  each ","Net HTTP Head  new  body length to_s ","Net HTTP Delete  new  body length to_s ","Net HTTP Get  new  body length to_s ","Net HTTP Put  new  body length to_s ","Net HTTP Post  new  body length to_s ","Net HTTP Patch  new  body length to_s ","arguments shift  stat size to_s ","arguments shift  length to_s ","uri uri path +  + ","URI  parse  path + ","uri uri path +  ","URI  parse  path ","Net HTTP Head  new  content_type= ","Net HTTP Delete  new  content_type= ","Net HTTP Get  new  content_type= ","Net HTTP Put  new  content_type= ","Net HTTP Post  new  content_type= ","Net HTTP Patch  new  content_type= ","uri uri path +  != ","URI  parse  path != ","URI  parse  host == ","URI  parse  host "]}," OAuth Consumer scheme":{"type":"method","name":"scheme","children":[],"call":["@options [] "]}," OAuth Consumer site":{"type":"method","name":"site","children":[],"call":["@options [] ","@options [] to_s "]}," OAuth Consumer signature_base_string":{"type":"method","name":"signature_base_string","children":[],"call":["request signature_base_string ","(pair\n  (sym :scheme)\n  (send nil :scheme)) merge "," scheme "," http "," options merge "," options "]}," OAuth Consumer sign!":{"type":"method","name":"sign!","children":[],"call":["request oauth! ","(pair\n  (sym :scheme)\n  (send nil :scheme)) merge "," scheme "," http "," options merge "," options "]}," OAuth Consumer token_request":{"type":"method","name":"token_request","children":[],"call":["response error! ","h []= ","v first ","k to_sym ","CGI  parse inject ","CGI  parse ","response body ","response code == ","response code "," request "," raise ","response code to_i ","k strip ","k strip to_sym "," block_given? "," token_request ","uri path ","uri path == ","URI  parse ","response header [] ","response header ","request_options [] "," create_http "," options []= ","uri host ","uri scheme "," options ","our_uri host != ","our_uri host ","our_uri host == "," site ","response [] ","CGI  parse each_with_object "," request  error! "," request  body "," request  code == "," request  code "," request  code to_i ","URI  parse  path ","URI  parse  path == "," request  header [] "," request  header ","URI  parse  host ","URI  parse  scheme ","our_URI  parse  host != ","URI  parse  host != ","our_URI  parse  host ","our_URI  parse  host == ","URI  parse  host == "," request  [] "]}," OAuth Consumer create_signed_request":{"type":"method","name":"create_signed_request","children":[],"call":[" sign! "," create_http_request "," create_http_ create_http_request  "]}," OAuth Consumer request":{"type":"method","name":"request","children":[],"call":[" http request "," create_signed_request "," http ","_http request ","_uri query ","_uri path ","URI  parse "," create_http ","path =~ "," raise ","OAuth Problem  new ","params delete ","OAuth Helper  parse_header ","h first ","h first =~ ","(lvasgn :h\n  (block\n    (send\n      (lvar :headers) :select)\n    (args\n      (arg :h))\n    (send\n      (lvar :h) :=~\n      (regexp\n        (str \"^OAuth \")\n        (regopt))))) any? ","h =~ ","headers select ","(lvasgn :headers\n  (send\n    (send\n      (lvar :rsp) :to_hash) :[]\n    (str \"www-authenticate\"))) nil? ! ","(lvasgn :headers\n  (send\n    (send\n      (lvar :rsp) :to_hash) :[]\n    (str \"www-authenticate\"))) nil? ","rsp to_hash [] ","rsp to_hash ","path !~ ","(lvasgn :h\n  (block\n    (send\n      (lvar :headers) :select)\n    (args\n      (arg :hdr))\n    (send\n      (lvar :hdr) :=~\n      (regexp\n        (str \"^OAuth \")\n        (regopt))))) any? ","hdr =~ ","(lvar :req) == "," block_given? ","h first include? ","(lvasgn :h\n  (send\n    (lvar :headers) :grep\n    (regexp\n      (str \"^OAuth \")\n      (regopt)))) any? ","headers grep ","(str \"^/\") match? "," http  create_signed_request uest "," headers grep ttp request "," create_signed_ create_signed_request uest "," headers grep ttp "," create_http  request "," http  request ","_http  create_signed_request uest ","_headers grep ttp request ","URI  parse  query ","URI  parse  path ","_uri patheaders grep  "," create create_http  "," create http  "," create_headers grep ttp ","patheaders grep  =~ ","OAutheaders grep  Problem  new ","OAuth Helper  parse_header  delete ","OAutheaders grep  Helper  parse_headers grep eader ","headers grep  first ","headers grep  first =~ ","(lvasgn :h\n  (block\n    (send\n      (lvar :rsp to_hash [] ) :select)\n    (args\n      (arg :h))\n    (send\n      (lvar :h) :=~\n      (regexp\n        (str \"^OAuth \")\n        (regopt))))) any? ","(lvasgn :headers grep \n  (block\n    (send\n      (lvar :headers grep eaders) :select)\n    (args\n      (arg :headers grep ))\n    (send\n      (lvar :headers grep ) :=~\n      (regexp\n        (str \"^OAutheaders grep  \")\n        (regopt))))) any? ","headers grep  =~ ","rsp to_hash []  select ","headers grep eaders select ","(lvasgn :rsp to_hash [] \n  (send\n    (send\n      (lvar :rsp) :to_hash) :[]\n    (str \"www-authenticate\"))) nil? ! ","(lvasgn :headers\n  (send\n    (send\n      (lvar : http request ) :to_hash) :[]\n    (str \"www-authenticate\"))) nil? ! ","(lvasgn :headers grep eaders\n  (send\n    (send\n      (lvar :rsp) :to_headers grep asheaders grep ) :[]\n    (str \"www-autheaders grep enticate\"))) nil? ! ","(lvasgn :rsp to_hash [] \n  (send\n    (send\n      (lvar :rsp) :to_hash) :[]\n    (str \"www-authenticate\"))) nil? ","(lvasgn :headers\n  (send\n    (send\n      (lvar : http request ) :to_hash) :[]\n    (str \"www-authenticate\"))) nil? ","(lvasgn :headers grep eaders\n  (send\n    (send\n      (lvar :rsp) :to_headers grep asheaders grep ) :[]\n    (str \"www-autheaders grep enticate\"))) nil? "," http request  to_hash [] ","rsp to_headers grep asheaders grep  [] "," http request  to_hash ","rsp to_headers grep asheaders grep  ","patheaders grep  !~ ","(lvasgn :h\n  (block\n    (send\n      (lvar :rsp to_hash [] ) :select)\n    (args\n      (arg :hdr))\n    (send\n      (lvar :hdr) :=~\n      (regexp\n        (str \"^OAuth \")\n        (regopt))))) any? ","(lvasgn :headers grep \n  (block\n    (send\n      (lvar :headers grep eaders) :select)\n    (args\n      (arg :headers grep dr))\n    (send\n      (lvar :headers grep dr) :=~\n      (regexp\n        (str \"^OAutheaders grep  \")\n        (regopt))))) any? ","headers grep dr =~ ","(lvar : create_signed_request ) == ","headers grep  first include? ","(lvasgn :h\n  (send\n    (lvar :rsp to_hash [] ) :grep\n    (regexp\n      (str \"^OAuth \")\n      (regopt)))) any? ","(lvasgn :headers grep \n  (send\n    (lvar :headers grep eaders) :grep\n    (regexp\n      (str \"^OAutheaders grep  \")\n      (regopt)))) any? ","rsp to_hash []  grep ","headers grep eaders grep ","(str \"^/\") matcheaders grep ? "]}," OAuth Consumer uri":{"type":"method","name":"uri","children":[],"call":["URI  parse "," site "," create_http "]}," OAuth Consumer http":{"type":"method","name":"http","children":[],"call":["Net HTTP  new "," uri port "," uri "," uri host "," create_http "]}," HTTPRequest set_oauth_query_string":{"type":"method","name":"set_oauth_query_string","children":[],"call":["@path << ","@oauth_helper signature ","uri to_s ","uri query= ","uri query + + ","uri query + ","uri query ","uri query == ","uri query ! ","URI  parse "," path ","(send\n  (send\n    (ivar :@oauth_helper) :oauth_parameters) :map) join ","@oauth_helper oauth_parameters map ","@oauth_helper oauth_parameters "," escape "," oauth_helper signature "," oauth_helper ","uri query to_s == ","uri query to_s ","(send nil :escape\n  (lvar :k)) * ","uri to_s  << ","URI  parse  to_s ","URI  parse  query= ","URI  parse  query + + ","URI  parse  query + ","URI  parse  query ","URI  parse  query == ","URI  parse  query ! ","URI  parse  query to_s == ","URI  parse  query to_s "]}," HTTPRequest set_oauth_body":{"type":"method","name":"set_oauth_body","children":[],"call":[" set_form_data ","@oauth_helper parameters merge ","@oauth_helper signature ","@oauth_helper parameters ","@oauth_helper parameters_with_oauth ","@oauth_helper stringify_keys "]}," HTTPRequest set_oauth_header":{"type":"method","name":"set_oauth_header","children":[],"call":[" []= ","@oauth_helper header "]}," HTTPRequest oauth_full_request_uri":{"type":"method","name":"oauth_full_request_uri","children":[],"call":["uri to_s ","uri scheme= ","http use_ssl? ","http respond_to? ","uri port= ","http port ","uri host= ","http address ","URI  parse "," path ","hostval []= ","hostval include? ","options [] ","options [] gsub ","URI  parse  to_s ","URI  parse  scheme= ","URI  parse  port= ","URI  parse  host= ","options []  []= ","options []  include? "]}," HTTPRequest oauth_helper":{"type":"method","name":"oauth_helper","children":[],"call":[]}," HTTPRequest signature_base_string":{"type":"method","name":"signature_base_string","children":[],"call":["OAuth Client Helper  new signature_base_string ","OAuth Client Helper  new ","(pair\n  (sym :request_uri)\n  (send nil :oauth_full_request_uri\n    (lvar :http))) merge "," oauth_full_request_uri ","oauth_helper signature_base_string ","oauth_helper hash_body "," oauth_body_hash_required? "," oauth_helper_options ","OAuth Client Helper  new  signature_base_string ","OAuth Client Helper  new  hash_body "," oauth_helper_(pair\n  (sym :request_uri)\n  (send nil :oauth_full_request_uri\n    (lvar :http))) merge  "," OAuth Client Helper  new _options "," oauth_ oauth_helper_options  "]}," HTTPRequest oauth!":{"type":"method","name":"oauth!","children":[],"call":[" send ","options [] ","OAuth Client Helper  new ","(pair\n  (sym :request_uri)\n  (send nil :oauth_full_request_uri\n    (lvar :http))) merge "," oauth_full_request_uri ","@oauth_helper amend_user_agent_header ","helper_options [] ","@oauth_helper hash_body "," oauth_body_hash_required? "," oauth_helper_options ","(pair\n  (sym :request_uri)\n  (send nil :oauth_full_request_uri\n    (lvar :http))) merge  [] ","OAuth Client Helper  new  amend_user_agent_header ","helper_(pair\n  (sym :request_uri)\n  (send nil :oauth_full_request_uri\n    (lvar :http))) merge  [] "," oauth_helper_options  [] ","OAuth Client Helper  new  hash_body "," oauth_helper_(pair\n  (sym :request_uri)\n  (send nil :oauth_full_request_uri\n    (lvar :http))) merge  "," oauth_ oauth_helper_options  "]}," Client Helper parameters_with_oauth":{"type":"method","name":"parameters_with_oauth","children":[],"call":[" oauth_parameters merge "," parameters "," oauth_parameters "]}," Client Helper parameters":{"type":"method","name":"parameters","children":[],"call":["OAuth RequestProxy  proxy parameters ","OAuth RequestProxy  proxy "]}," Client Helper header":{"type":"method","name":"header","children":[],"call":[" options [] "," options ","(send\n  (lvar :parameters) :map) join "," escape ","parameters map ","parameters merge! "," signature "," oauth_parameters "," options merge ","(send\n  (send\n    (lvar :parameters) :sort) :map) join ","parameters sort map ","parameters sort ","parameters []= ","(send\n  (lvar : oauth_parameters ) :map) join "," oauth_parameters  map "," oauth_parameters  merge! "," oauth_ oauth_parameters  ","(send\n  (send\n    (lvar : oauth_parameters ) :sort) :map) join "," oauth_parameters  sort map "," oauth_parameters  sort "," oauth_parameters  []= "]}," Client Helper signature_base_string":{"type":"method","name":"signature_base_string","children":[],"call":["OAuth Signature  signature_base_string ","(pair\n  (sym :uri)\n  (send\n    (send nil :options) :[]\n    (sym :request_uri))) merge "," oauth_parameters "," options [] "," options "]}," Client Helper signature":{"type":"method","name":"signature","children":[],"call":["OAuth Signature  sign ","(pair\n  (sym :uri)\n  (send\n    (send nil :options) :[]\n    (sym :request_uri))) merge "," options [] "," options "]}," Client Helper oauth_parameters":{"type":"method","name":"oauth_parameters","children":[],"call":[" nonce "," timestamp "," options [] "," options "," options [] token "," options [] key ","v == ","(pair\n  (str \"oauth_consumer_key\")\n  (send\n    (send\n      (send nil :options) :[]\n      (sym :consumer)) :key)) reject ","v to_s == ","v to_s ","(pair\n  (str \"oauth_callback\")\n  (send\n    (send nil :options) :[]\n    (sym :oauth_callback))) reject ","(pair\n  (str \"oauth_body_hash\")\n  (send\n    (send nil :options) :[]\n    (sym :body_hash))) reject ","allowed_empty_params include? ","allowed_empty_params == ","v to_s != ","out select! ","allowed_empty_params is_a? ! ","allowed_empty_params is_a? ","allowed_empty_params != ","allowed_empty_params kind_of? ! ","allowed_empty_params kind_of? "," options []  include? "," options []  == "," options []  is_a? ! "," options []  is_a? "," options []  != "," options []  kind_of? ! "," options []  kind_of? "]}," Client Helper generate_timestamp":{"type":"method","name":"generate_timestamp","children":[],"call":["Time  now to_i to_s ","Time  now to_i ","Time  now "]}," Client Helper timestamp":{"type":"method","name":"timestamp","children":[],"call":[" generate_timestamp "," options [] "," options "]}," Client Helper nonce":{"type":"method","name":"nonce","children":[],"call":[" generate_key "," options [] "," options "]}," Client Helper options":{"type":"method","name":"options","children":[],"call":[]}," Client Helper initialize":{"type":"method","name":"initialize","children":[],"call":["@options [] "]}," ActionController TestRequest set_oauth_query_string":{"type":"method","name":"set_oauth_query_string","children":[],"call":[]}," ActionController TestRequest set_oauth_parameters":{"type":"method","name":"set_oauth_parameters","children":[],"call":["@query_parameters merge! ","@oauth_helper signature ","@oauth_helper parameters_with_oauth ","@oauth_helper parameters_with_oauth  merge! "]}," ActionController TestRequest set_oauth_header":{"type":"method","name":"set_oauth_header","children":[],"call":[" env []= ","@oauth_helper header "," env "]}," ActionController TestRequest apply_oauth!":{"type":"method","name":"apply_oauth!","children":[],"call":[" send "," options [] "," options ","OAuth Client Helper  new ","@options merge "," request_uri ","ActionController TestRequest  use_oauth? ","@oauth_options [] ","@oauth_options merge ","@oauth_helper amend_user_agent_header "," env "," fullpath "," respond_to? ","OAuth Client Helper  new  amend_user_agent_header "]}," ActionController TestRequest configure_oauth":{"type":"method","name":"configure_oauth","children":[],"call":["(pair\n  (sym :consumer)\n  (lvar :consumer)) merge "]}," ActionController TestRequest use_oauth?":{"type":"method","name":"use_oauth?","children":[],"call":[]}," ActionController TestRequest use_oauth=":{"type":"method","name":"use_oauth=","children":[],"call":[]}," ActionController Base process_with_oauth":{"type":"method","name":"process_with_oauth","children":[],"call":["request apply_oauth! "," process_without_oauth ","request respond_to? "]}," Signature Base nonce":{"type":"method","name":"nonce","children":[],"call":[" request nonce "," request "]}," OAuth Consumer create_http":{"type":"method","name":"create_http","children":[],"call":["http_object use_ssl= "," uri scheme == "," uri scheme "," uri ","Net HTTP  new "," uri port "," uri host ","our_uri scheme == ","our_uri scheme ","our_uri port ","our_uri host ","URI  parse "," site ","_url [] =~ ","_url [] ","_url nil? ","http_object verify_mode= ","http_object verify_depth= ","http_object ca_file= ","proxy_uri password ","proxy_uri user ","proxy_uri port ","proxy_uri host "," proxy "," proxy is_a? "," proxy nil? ","@options [] "," request_endpoint "," request_endpoint nil? ! "," request_endpoint nil? ","http_object open_timeout= ","http_object read_timeout= ","http_object set_debug_output "," debug_output ","http_object key= ","http_object cert= ","http_object ssl_version= ","your_uri host nil? ","your_uri host ","Net HTTP  new  use_ssl= ","URI  parse  scheme == ","URI  parse  scheme ","URI  parse  port ","URI  parse  host "," request_endpoint  [] =~ "," request_endpoint  [] "," request_endpoint  nil? ","Net HTTP  new  verify_mode= ","Net HTTP  new  verify_depth= ","Net HTTP  new  ca_file= ","URI  parse  password "," proxy  password ","URI  parse  user "," proxy  user "," proxy  port "," proxy  host ","Net HTTP  new  open_timeout= ","Net HTTP  new  read_timeout= ","Net HTTP  new  set_debug_output ","Net HTTP  new  key= ","Net HTTP  new  cert= ","Net HTTP  new  ssl_version= ","yURI  parse  host nil? ","URI  parse  host nil? ","yURI  parse  host "]}," RequestProxy RackRequest request_params":{"type":"method","name":"request_params","children":[],"call":[" request params "," request "," request POST "," request content_type to_s downcase start_with? "," request content_type to_s downcase "," request content_type to_s "," request content_type "]}," RequestProxy RackRequest query_params":{"type":"method","name":"query_params","children":[],"call":[" request GET "," request "]}," RequestProxy RackRequest signature":{"type":"method","name":"signature","children":[],"call":[" parameters [] "," parameters "]}," RequestProxy RackRequest parameters":{"type":"method","name":"parameters","children":[],"call":["params merge "," options [] "," options "," request_params merge merge "," header_params "," request_params merge "," query_params "," request_params "," request_params merge merge  merge "," request_ request_params merge merge  merge merge "," header_ request_params merge merge  "," request_ request_params merge merge  merge "," query_ request_params merge merge  "," request_ request_params merge merge  "]}," RequestProxy RackRequest uri":{"type":"method","name":"uri","children":[],"call":["uri to_s ","uri query= ","URI  parse "," request url "," request ","URI  parse  to_s ","URI  parse  query= "]}," RequestProxy RackRequest method":{"type":"method","name":"method","children":[],"call":[" request request_method "," request "," request env [] "," request env "]}," OAuth AccessToken request":{"type":"method","name":"request","children":[],"call":[" consumer uri "," consumer ","request_uri != ","request_uri absolute? ","URI  parse ","URI  parse  != ","URI  parse  absolute? "]}," RSA SHA1 decode_public_key":{"type":"method","name":"decode_public_key","children":[],"call":["OpenSSL PKey RSA  new "," consumer_secret ","OpenSSL X509 Certificate  new public_key ","OpenSSL X509 Certificate  new "]}," RSA SHA1 public_key":{"type":"method","name":"public_key","children":[],"call":[" consumer_secret "," consumer_secret public_key "," consumer_secret is_a? "," decode_public_key "]}," Signature PLAINTEXT secret":{"type":"method","name":"secret","children":[],"call":[" escape "]}," RequestProxy ActionControllerRequest parameters_for_signature":{"type":"method","name":"parameters_for_signature","children":[],"call":["p split ","(send\n  (send\n    (send\n      (lvar :params) :join\n      (str \"&\")) :split\n    (str \"&\")) :reject) reject map ","(send\n  (send\n    (send\n      (lvar :params) :join\n      (str \"&\")) :split\n    (str \"&\")) :reject) reject ","kv =~ ","params join split reject ","params join split ","params join ","params << ","CGI  unescape "," request raw_post "," request "," request content_type == ","Mime Type  lookup "," request content_type "," request query_string "," request query_string blank? "," header_params to_query "," header_params "," options [] "," options "," options [] to_query ","p split map ","(send\n  (send\n    (send\n      (send\n        (lvar :params) :join\n        (str \"&\")) :split\n      (str \"&\")) :reject\n    (block-pass\n      (sym :blank?))) :map) reject ","params join split reject map "," request post? ","kv [] == ","kv [] "," query_string_blank? "," request content_type to_s downcase start_with? "," request content_type to_s downcase "," request content_type to_s ","(send\n  (block\n    (send\n      (send\n        (send\n          (lvar :params) :join\n          (str \"&\")) :split\n        (str \"&\")) :reject)\n    (args\n      (arg :s))\n    (send\n      (lvar :s) :match\n      (regexp\n        (str \"\\\\A\\\\s*\\\\z\")\n        (regopt)))) :map) reject ","(send\n  (send\n    (send\n      (lvar :params) :join\n      (str \"&\")) :split\n    (str \"&\")) :reject) map ","s match "," raw_post_signature? "]}," OAuth Consumer marshal_dump":{"type":"method","name":"marshal_dump","children":[],"call":[]}," OAuth RequestProxy MockRequest uri":{"type":"method","name":"uri","children":[],"call":["@request [] "]}," OAuth RequestProxy MockRequest method":{"type":"method","name":"method","children":[],"call":["@request [] "]}," OAuth RequestProxy MockRequest parameters":{"type":"method","name":"parameters","children":[],"call":["@request [] "]}," OAuth RequestProxy JabberRequest normalized_uri":{"type":"method","name":"normalized_uri","children":[],"call":[" uri "]}," OAuth RequestProxy JabberRequest uri":{"type":"method","name":"uri","children":[],"call":["(send\n  (send\n    (send\n      (ivar :@request) :from) :strip) :to_s) join ","@request to strip to_s ","@request to strip ","@request to ","@request from strip to_s ","@request from strip ","@request from "]}," OAuth RequestProxy JabberRequest method":{"type":"method","name":"method","children":[],"call":["@request name "]}," OAuth RequestProxy JabberRequest parameters":{"type":"method","name":"parameters","children":[],"call":["@params []= ","element text ","oauth first_element ","(str \"oauth_token\") each ","@request get_elements first ","@request get_elements ","oauth first_element  text ","oauth first_oauth first_element  ","@request get_elements first  first_element ","(str \"@request get_elements first _token\") each ","@request get_oauth first_element s first ","@request get_oauth first_element s "]}," OAuth CLI verbose?":{"type":"method","name":"verbose?","children":[],"call":[" options [] "," options "]}," OAuth CLI valid_command?":{"type":"method","name":"valid_command?","children":[],"call":["SUPPORTED_COMMANDS  include? "," command ","SUPPORTED_COMMANDS  keys include? ","SUPPORTED_COMMANDS  keys "]}," OAuth CLI usage":{"type":"method","name":"usage","children":[],"call":[" stdout puts "," stdout "," puts ","command ljust ","SUPPORTED_COMMANDS  each "," option_parser help "," option_parser "]}," OAuth CLI sufficient_options?":{"type":"method","name":"sufficient_options?","children":[],"call":[" options [] "," options "," command "]}," OAuth CLI prepare_parameters":{"type":"method","name":"prepare_parameters","children":[],"call":["(pair\n  (str \"oauth_consumer_key\")\n  (send\n    (send nil :options) :[]\n    (sym :oauth_consumer_key))) merge ","CGI  parse "," options [] "," options ","(send\n  (hash\n    (pair\n      (str \"oauth_consumer_key\")\n      (send\n        (send nil :options) :[]\n        (sym :oauth_consumer_key)))\n    (pair\n      (str \"oauth_nonce\")\n      (send\n        (send nil :options) :[]\n        (sym :oauth_nonce)))\n    (pair\n      (str \"oauth_timestamp\")\n      (send\n        (send nil :options) :[]\n        (sym :oauth_timestamp)))\n    (pair\n      (str \"oauth_token\")\n      (send\n        (send nil :options) :[]\n        (sym :oauth_token)))\n    (pair\n      (str \"oauth_signature_method\")\n      (send\n        (send nil :options) :[]\n        (sym :oauth_signature_method)))\n    (pair\n      (str \"oauth_version\")\n      (send\n        (send nil :options) :[]\n        (sym :oauth_version)))) :reject) merge ","v == ","v nil? ","(pair\n  (str \"oauth_consumer_key\")\n  (send\n    (send nil :options) :[]\n    (sym :oauth_consumer_key))) reject ","escaped_pairs * ","(send\n  (const nil :CGI) :escape\n  (send\n    (lvar :k) :strip)) * ","CGI  escape ","v strip ","k strip ","Hash  [] collect ","Hash  [] ","pair split ","pair =~ "," options [] collect "]}," OAuth CLI parse_options":{"type":"method","name":"parse_options","children":[],"call":["(send\n  (const nil :OptionParser) :new) parse! "," options []= "," options ","opts on ","opts banner= ","OptionParser  new "," option_parser parse! "," option_parser "]}," OAuth CLI extract_command_and_parse_options":{"type":"method","name":"extract_command_and_parse_options","children":[],"call":[" parse_options ","arguments [] "]}," OAuth CLI execute":{"type":"method","name":"execute","children":[],"call":[" usage ","stdout puts ","OAuth Helper  escape "," verbose? ","request signature_base_string ","request normalized_parameters ","request uri ","request method ","OAuth Signature  sign "," options [] "," options ","OAuth RequestProxy  proxy "," prepare_parameters "," command "," valid_command? "," sufficient_options? "," extract_command_and_parse_options ","request oauth_signature ","request oauth_header ","request signed_uri ","request oauth_version ","request oauth_nonce ","request oauth_timestamp ","request oauth_signature_method ","request oauth_token ","request oauth_consumer_key ","request sign! ","   + ","(lvar :k) * ","request non_oauth_parameters each ","request non_oauth_parameters ","request non_oauth_parameters any? ","request oauth_parameters each ","request oauth_parameters ","stderr puts ","access_token params each ","access_token params ","request_token get_access_token ","stdin gets ","request_token authorize_url ","consumer get_request_token ","OAuth Consumer  new ","@options []= "," command == "," puts ","response body ","response message ","response code ","access_token request "," options [] downcase to_sym "," options [] downcase ","OAuth AccessToken  new ","e request body ","e request ","k is_a? ","stdin gets chomp "," options [] == "," options []= ","request_token callback_confirmed? ","uri to_s "," p ","uri query= ","(send\n  (array\n    (send\n      (lvar :uri) :query)\n    (splat\n      (lvar :params))) :reject) * ","x nil? ","(send\n  (lvar :uri) :query) reject ","uri query ","(send\n  (lvar :v) :map) * ","URI  encode ","v map "," prepare_parameters map ","URI  parse "," options [] to_s downcase to_sym "," options [] to_s downcase "," options [] to_s ","OAuth RequestProxy  proxy  signature_base_string ","OAuth RequestProxy  proxy  normalized_parameters ","request normalized_ prepare_parameters  ","OAuth RequestProxy  proxy  uri ","request URI  parse  ","OAuth RequestProxy  proxy  method "," prepare_ prepare_parameters  ","OAuth RequestProxy  proxy  oauth_signature ","OAuth RequestProxy  proxy  oauth_header ","OAuth RequestProxy  proxy  signed_uri ","request signed_URI  parse  ","OAuth RequestProxy  proxy  oauth_version ","OAuth RequestProxy  proxy  oauth_nonce ","OAuth RequestProxy  proxy  oauth_timestamp ","OAuth RequestProxy  proxy  oauth_signature_method ","OAuth RequestProxy  proxy  oauth_token ","OAuth RequestProxy  proxy  oauth_consumer_key ","request oauth_OAuth Consumer  new _key ","OAuth RequestProxy  proxy  sign! ","OAuth RequestProxy  proxy  non_oauth_parameters each ","request non_oauth_ prepare_parameters  each ","OAuth RequestProxy  proxy  non_oauth_parameters ","request non_oauth_ prepare_parameters  ","OAuth RequestProxy  proxy  non_oauth_parameters any? ","request non_oauth_ prepare_parameters  any? ","OAuth RequestProxy  proxy  oauth_parameters each ","request oauth_ prepare_parameters  each ","OAuth RequestProxy  proxy  oauth_parameters ","request oauth_ prepare_parameters  ","request_token get_access_token  params each ","OAuth AccessToken  new  params each ","request_token get_access_token  params ","OAuth AccessToken  new  params ","OAuth RequestProxy  proxy _token get_access_token ","request_token get_request_token get_access_token  ","request_token get_OAuth AccessToken  new  ","consumer get_request_token  get_access_token ","OAuth RequestProxy  proxy _token authorize_url ","consumer get_request_token  authorize_url ","consumer get_OAuth RequestProxy  proxy _token ","consumer get_consumer get_request_token  ","OAuth Consumer  new  get_request_token ","access_token request  body ","access_token request  message ","access_token request  code ","access_token OAuth RequestProxy  proxy  ","request_token get_access_token  request ","OAuth AccessToken  new  request ","e OAuth RequestProxy  proxy  body ","e OAuth RequestProxy  proxy  ","OAuth RequestProxy  proxy _token callback_confirmed? ","consumer get_request_token  callback_confirmed? ","URI  parse  to_s ","URI  parse  query= ","(send\n  (array\n    (send\n      (lvar :URI  parse ) :query)\n    (splat\n      (lvar :params))) :reject) * ","(send\n  (lvar :URI  parse ) :query) reject ","URI  parse  query "," prepare_ prepare_parameters  map "]}," OAuth Consumer access_token_url?":{"type":"method","name":"access_token_url?","children":[],"call":["@options [] != ","@options [] ","@options has_key? ","@options key? "]}," OAuth Consumer authorize_url?":{"type":"method","name":"authorize_url?","children":[],"call":["@options [] != ","@options [] ","@options has_key? ","@options key? "]}," OAuth Consumer request_token_url?":{"type":"method","name":"request_token_url?","children":[],"call":["@options [] != ","@options [] ","@options has_key? ","@options key? "]}," OAuth RequestToken build_authorize_url":{"type":"method","name":"build_authorize_url","children":[],"call":["uri to_s ","uri query= ","(send\n  (lvar :params) :map) * ","(lvar :k) * ","CGI  escape ","params map ","URI  parse ","base_url to_s ","uri query ","params empty? ! ","params empty? ","uri query blank? ! ","uri query blank? ","URI  encode_www_form ","queries empty? ! ","queries empty? ","queries merge! ","Hash  [] ","URI  decode_www_form ","URI  parse  to_s ","URI  parse  query= ","URI  parse  query ","URI  parse  query blank? ! ","URI  parse  query blank? ","Hash  []  empty? ! ","Hash  []  empty? ","Hash  []  merge! "]}," OAuth ConsumerToken from_hash":{"type":"method","name":"from_hash","children":[],"call":[]}," OAuth RequestProxy MockRequest normalized_uri":{"type":"method","name":"normalized_uri","children":[],"call":[" uri "]}," RequestProxy Base header_params":{"type":"method","name":"header_params","children":[],"call":["k !~ ","oauth_params reject! ","OAuth Helper  parse_header ","header [] == ","header [] "," request env [] "," request env "," request "," request env include? ","(str \"X-HTTP_AUTHORIZATION\") each ","OAuth Helper  parse_header  reject! ","OAuth Helper  parse_ request env []  "," request env []  [] == "," request env []  [] "]}," RequestProxy Base oauth_header":{"type":"method","name":"oauth_header","children":[],"call":["options [] ","(send\n  (send nil :oauth_parameters) :map) join "," escape "," oauth_parameters map "," oauth_parameters "]}," RequestProxy Base signed_uri":{"type":"method","name":"signed_uri","children":[],"call":["STDERR  puts ","(send nil :uri) * "," normalize "," uri "," non_oauth_parameters "," parameters "," signed? "]}," RequestProxy Base signed?":{"type":"method","name":"signed?","children":[],"call":[]}," RequestProxy Base signature_base_string":{"type":"method","name":"signature_base_string","children":[],"call":["(send\n  (lvar :base) :map) join "," escape ","base map "," normalized_parameters "," normalized_uri "," method "]}," RequestProxy Base sign!":{"type":"method","name":"sign!","children":[],"call":[" signature "," parameters []= "," sign "," parameters "]}," RequestProxy Base sign":{"type":"method","name":"sign","children":[],"call":["OAuth Signature  sign "]}," RequestProxy Base normalized_parameters":{"type":"method","name":"normalized_parameters","children":[],"call":[" normalize "," parameters_for_signature "]}," RequestProxy Base normalized_uri":{"type":"method","name":"normalized_uri","children":[],"call":["u path ","u path != ","u port ","u port != ","u scheme downcase == ","u scheme downcase ","u scheme ","u host downcase ","u host ","URI  parse "," uri ","URI  parse  path ","URI  parse  path != ","URI  parse  port ","URI  parse  port != ","URI  parse  scheme downcase == ","URI  parse  scheme downcase ","URI  parse  scheme ","URI  parse  host downcase ","URI  parse  host "," URI  parse ri "]}," RequestProxy Base non_oauth_parameters":{"type":"method","name":"non_oauth_parameters","children":[],"call":["OAuth PARAMETERS  include? "," parameters reject "," parameters "]}," RequestProxy Base oauth_parameters":{"type":"method","name":"oauth_parameters","children":[],"call":["v == ","(send\n  (send nil :parameters) :select) reject ","OAuth PARAMETERS  include? "," parameters select "," parameters "]}," RequestProxy Base parameters_for_signature":{"type":"method","name":"parameters_for_signature","children":[],"call":["k == "," parameters reject "," parameters "," unsigned_parameters include? "," unsigned_parameters "," signature_and_unsigned_parameters include? ! "," signature_and_unsigned_parameters include? "," signature_and_unsigned_parameters "," parameters select "]}," RequestProxy Base parameters":{"type":"method","name":"parameters","children":[],"call":[" raise "]}," RequestProxy Base oauth_version":{"type":"method","name":"oauth_version","children":[],"call":[" parameters [] "," parameters "]}," RequestProxy Base oauth_token":{"type":"method","name":"oauth_token","children":[],"call":[" parameters [] "," parameters "]}," RequestProxy Base oauth_timestamp":{"type":"method","name":"oauth_timestamp","children":[],"call":[" parameters [] "," parameters "]}," RequestProxy Base oauth_signature_method":{"type":"method","name":"oauth_signature_method","children":[],"call":[" parameters [] "," parameters "," parameters [] first "]}," RequestProxy Base oauth_signature":{"type":"method","name":"oauth_signature","children":[],"call":[" parameters [] "," parameters ","(send\n  (send nil :parameters) :[]\n  (str \"oauth_signature\")) flatten first ","(send\n  (send nil :parameters) :[]\n  (str \"oauth_signature\")) flatten "]}," RequestProxy Base oauth_nonce":{"type":"method","name":"oauth_nonce","children":[],"call":[" parameters [] "," parameters "]}," RequestProxy Base oauth_consumer_key":{"type":"method","name":"oauth_consumer_key","children":[],"call":[" parameters [] "," parameters "]}," RequestProxy Base initialize":{"type":"method","name":"initialize","children":[],"call":["param to_s ","(or\n  (send\n    (lvar :options) :[]\n    (sym :unsigned_parameters))\n  (array)) map ","options [] "]}," RequestProxy Base proxies":{"type":"method","name":"proxies","children":[],"call":[]}," OAuth Helper unescape":{"type":"method","name":"unescape","children":[],"call":["URI  unescape ","value gsub ","URI DEFAULT_PARSER  unescape "]}," OAuth Helper parse_header":{"type":"method","name":"parse_header","children":[],"call":["Hash  [] ","params flatten ","v [] ","v =~ ","params map! "," unescape ","v strip ","header [] split ","header [] ","header length ","val sub "," raise ","OAuth Problem  new ","params size % != ","params size % ","params size ","params size odd? ","header [] split  flatten ","header [] split  map! "," unescape  sub ","header [] split  size % != ","header [] split  size % ","header [] split  size ","header [] split  size odd? "]}," OAuth Helper normalize":{"type":"method","name":"normalize","children":[],"call":["(send\n  (send\n    (lvar :params) :sort) :map) * ","(send nil :escape\n  (lvar :k)) * "," escape ","values sort collect ","values sort ","values is_a? ","params sort map ","params sort "," normalize_nested_query ","values << ","values empty? ","(send nil :escape\n  (lvar :k)) join ","values [] is_a? ","values [] "]}," OAuth Helper generate_timestamp":{"type":"method","name":"generate_timestamp","children":[],"call":["Time  now to_i to_s ","Time  now to_i ","Time  now "]}," OAuth Unauthorized to_s":{"type":"method","name":"to_s","children":[],"call":["(send\n  (send nil :request) :code) * "," request message "," request "," request code "," request nil? "]}," OAuth Unauthorized initialize":{"type":"method","name":"initialize","children":[],"call":[]}," OAuth Problem to_s":{"type":"method","name":"to_s","children":[],"call":[" problem "]}," OAuth Problem initialize":{"type":"method","name":"initialize","children":[],"call":[]}," OAuth CLI option_parser":{"type":"method","name":"option_parser","children":[],"call":[" options []= "," options ","opts on "," options [] "," options [] << ","OAuth Helper  generate_timestamp ","OAuth Helper  generate_key ","opts banner= ","OptionParser  new ","opts separator ","arguments unshift ","(send\n  (send\n    (send nil :open\n      (lvar :v)) :readlines) :map) flatten ","l chomp split ","l chomp "," open readlines map "," open readlines "," open "]}," OAuth CLI initialize":{"type":"method","name":"initialize","children":[],"call":[" exit "," trap ","HelpCommand  new ","klass new "," get_command_class "," parse_command "," get_command_class  new "]}," Client Helper amend_user_agent_header":{"type":"method","name":"amend_user_agent_header","children":[],"call":["headers []= ","headers [] ","headers [] != "]}," OAuth RequestToken callback_confirmed?":{"type":"method","name":"callback_confirmed?","children":[],"call":[" params [] == "," params [] "," params "]}," RequestProxy Base oauth_verifier":{"type":"method","name":"oauth_verifier","children":[],"call":[" parameters [] "," parameters "]}," RequestProxy Base oauth_callback":{"type":"method","name":"oauth_callback","children":[],"call":[" parameters [] "," parameters "]}," OAuth Consumer proxy":{"type":"method","name":"proxy","children":[],"call":["@options [] "]}," OAuth Consumer get_access_token":{"type":"method","name":"get_access_token","children":[],"call":["OAuth AccessToken  from_hash "," token_request "," access_token_path "," access_token_url "," access_token_url? "," http_method "]}," Signature Base digest_klass":{"type":"method","name":"digest_klass","children":[],"call":[]}," Typhoeus Request post_parameters":{"type":"method","name":"post_parameters","children":[],"call":[" request body "," request "," request headers [] downcase == "," request headers [] downcase "," request headers [] "," request headers "," method == "," method ","OAuth Helper  stringify_keys "," request params "," request options [] "," request options "]}," Typhoeus Request query_parameters":{"type":"method","name":"query_parameters","children":[],"call":["CGI  parse ","URI  parse query ","URI  parse "," request url "," request ","URI  parse URI  parse query  "]}," Typhoeus Request parameters":{"type":"method","name":"parameters","children":[],"call":[" post_parameters merge merge "," options [] "," options "," post_parameters merge "," query_parameters "," post_parameters "]}," Typhoeus Request uri":{"type":"method","name":"uri","children":[],"call":[" options [] to_s "," options [] "," options "]}," Typhoeus Request method":{"type":"method","name":"method","children":[],"call":[" request method to_s upcase "," request method to_s "," request method "," request ","request_method empty? "," request options [] to_s upcase "," request options [] to_s "," request options [] "," request options "," request options [] to_s upcase  empty? "]}," Net HTTP HTTPRequest form_url_encoded?":{"type":"method","name":"form_url_encoded?","children":[],"call":[" request [] downcase == "," request [] downcase "," request [] "," request "," request [] != "," request [] to_s downcase start_with? "," request [] to_s downcase "," request [] to_s "]}," EventMachine HttpRequest merged_parameters":{"type":"method","name":"merged_parameters","children":[],"call":["params []= ","(lvar :value) flatten ","params [] ","params has_key? ","params_pairs each_pair ","extra_params compact each ","extra_params compact ","key to_s "]}," EventMachine HttpRequest post_parameters":{"type":"method","name":"post_parameters","children":[],"call":["CGI  parse "," request normalize_body to_s "," request normalize_body "," request ","(str \"POST\") include? "," method ","headers [] to_s downcase == ","headers [] to_s downcase ","headers [] to_s ","headers [] "," request options [] "," request options ","headers [] to_s downcase start_with? "," request req [] "," request req "]}," EventMachine HttpRequest query_parameters":{"type":"method","name":"query_parameters","children":[],"call":["CGI  parse "," request normalize_uri query to_s "," request normalize_uri query "," request normalize_uri "," request ","CGI  parse merge "," request conn query to_s "," request conn query "," request conn ","quer to_s ","quer respond_to? "," request req [] "," request req "," request normalize_uri  request req [] y to_s "," request normalize_uri  request req [] y "," request conn  request req [] y to_s "," request conn  request req [] y "," request req []  to_s "," request req []  respond_to? "]}," EventMachine HttpRequest all_parameters":{"type":"method","name":"all_parameters","children":[],"call":[" merged_parameters "," options [] "," options "," query_parameters "," post_parameters "]}," EventMachine HttpRequest parameters":{"type":"method","name":"parameters","children":[],"call":[" all_parameters "," options [] "," options "]}," EventMachine HttpRequest uri":{"type":"method","name":"uri","children":[],"call":[" request normalize_uri to_s "," request normalize_uri "," request "," request conn normalize to_s "," request conn normalize "," request conn "]}," EventMachine HttpRequest method":{"type":"method","name":"method","children":[],"call":[" request method "," request "," request req [] "," request req "]}," Curl Easy post_parameters":{"type":"method","name":"post_parameters","children":[],"call":["post_body []= ","param [] ","str split "," request post_body split each "," request post_body split "," request post_body "," request "," request headers [] downcase == "," request headers [] downcase "," request headers [] "," request headers "," request headers [] to_s downcase start_with? "," request headers [] to_s downcase "," request headers [] to_s ","str split  [] "]}," Curl Easy query_parameters":{"type":"method","name":"query_parameters","children":[],"call":["CGI  parse ","URI  parse query ","URI  parse "," request url "," request ","URI  parse URI  parse query  "]}," Curl Easy parameters":{"type":"method","name":"parameters","children":[],"call":[" post_parameters merge merge "," options [] "," options "," post_parameters merge "," query_parameters "," post_parameters "]}," Curl Easy uri":{"type":"method","name":"uri","children":[],"call":[" options [] to_s "," options [] "," options "]}," Curl Easy method":{"type":"method","name":"method","children":[],"call":[]}," OAuth Helper stringify_keys":{"type":"method","name":"stringify_keys","children":[],"call":["new_h []= "," stringify_keys ","v is_a? ","k to_s ","hash each "]}," String bytes":{"type":"method","name":"bytes","children":[],"call":["Enumerable Enumerator  new "," require "]}," String bytesize":{"type":"method","name":"bytesize","children":[],"call":[" size "]}," Object tap":{"type":"method","name":"tap","children":[],"call":[]}," OAuth Consumer marshal_load":{"type":"method","name":"marshal_load","children":[],"call":[" initialize ","data [] "]}," HttpClient set_oauth_query_string":{"type":"method","name":"set_oauth_query_string","children":[],"call":[" raise "]}," HttpClient set_oauth_body":{"type":"method","name":"set_oauth_body","children":[],"call":[" raise "]}," HttpClient set_oauth_header":{"type":"method","name":"set_oauth_header","children":[],"call":["headers []= ","@oauth_helper header "," options [] "," options "]}," HttpClient normalized_oauth_uri":{"type":"method","name":"normalized_oauth_uri","children":[],"call":["uri to_s ","uri scheme= ","http use_ssl? ","http respond_to? ","uri port= ","http port ","uri host= ","http address ","URI  parse "," normalize_uri path "," normalize_uri ","URI  parse  to_s ","URI  parse  scheme= ","URI  parse  port= ","URI  parse  host= "," normalize_URI  parse  path "," normalize_URI  parse  "]}," HttpClient signature_base_string":{"type":"method","name":"signature_base_string","children":[],"call":["OAuth Client Helper  new signature_base_string ","OAuth Client Helper  new ","(pair\n  (sym :request_uri)\n  (send nil :normalized_oauth_uri\n    (lvar :http))) merge "," normalized_oauth_uri "]}," HttpClient oauth!":{"type":"method","name":"oauth!","children":[],"call":[" __send__ ","options [] ","OAuth Client Helper  new ","(pair\n  (sym :request_uri)\n  (send nil :normalized_oauth_uri\n    (lvar :http))) merge "," normalized_oauth_uri ","(pair\n  (sym :request_uri)\n  (send nil :normalized_oauth_uri\n    (lvar :http))) merge  [] "]}," Digest HMAC inspect":{"type":"method","name":"inspect","children":[],"call":[" sprintf ","@md inspect sub ","@md inspect ","@key inspect "," class name "," class "]}," Digest HMAC block_length":{"type":"method","name":"block_length","children":[],"call":["@md block_length "]}," Digest HMAC digest_length":{"type":"method","name":"digest_length","children":[],"call":["@md digest_length "]}," Digest HMAC finish":{"type":"method","name":"finish","children":[],"call":["@md digest! ","@md update ","@m@md digest!  @md digest! igest! ","@m@md digest!  up@md digest! ate "]}," Digest HMAC reset":{"type":"method","name":"reset","children":[],"call":["@md update ","@md reset "]}," Digest HMAC update":{"type":"method","name":"update","children":[],"call":["@md update "]}," Digest HMAC initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["@md clone ","other instance_eval "]}," Digest HMAC initialize":{"type":"method","name":"initialize","children":[],"call":["@md update ","(send\n  (lvar :opad) :inject\n  (str \"\")) freeze ","s << ","c chr ","opad inject ","(send\n  (lvar :ipad) :inject\n  (str \"\")) freeze ","ipad inject ","key freeze ","opad [] ","ipad [] ","key bytes each_with_index ","key bytes ","Array  new fill ","Array  new ","@md digest ","key bytesize > ","key bytesize ","@md block_length ","digester new ","digester new  update ","(send\n  (lvar :Array  new fill ) :inject\n  (str \"\")) freeze ","Array  new fill  inject ","@md digest  freeze ","Array  new fill  [] ","@md digest  bytes each_with_index ","@md digest  bytes ","digester new  digest ","@md digest  bytesize > ","@md digest  bytesize ","@md @md block_length gth ","digester new  block_length "]}," OAuth Signature body_hash":{"type":"method","name":"body_hash","children":[],"call":[]}," Signature Base body_hash":{"type":"method","name":"body_hash","children":[],"call":["Base64  encode64 chomp gsub ","Base64  encode64 chomp ","Base64  encode64 "," class hash_class digest "," request body "," request "," class hash_class "," class "," raise_instantiation_error "]}," Signature Base hash_class":{"type":"method","name":"hash_class","children":[],"call":[]}," Net HTTP HTTPRequest body":{"type":"method","name":"body","children":[],"call":[" request body "," request "]}," HTTPRequest oauth_body_hash_required?":{"type":"method","name":"oauth_body_hash_required?","children":[],"call":[" content_type != "," content_type "," request_body_permitted? "]}," HTTPRequest oauth_helper_options":{"type":"method","name":"oauth_helper_options","children":[],"call":["(pair\n  (sym :request_uri)\n  (send nil :oauth_full_request_uri\n    (lvar :http))) merge "," oauth_full_request_uri ","(pair\n  (sym :request_uri)\n  (send nil :oauth_full_request_uri\n    (lvar :http)\n    (lvar :options))) merge "]}," Client Helper hash_body":{"type":"method","name":"hash_body","children":[],"call":["@options []= ","OAuth Signature  body_hash "," oauth_parameters "]}," OAuth Consumer request_endpoint":{"type":"method","name":"request_endpoint","children":[],"call":["@options [] to_s ","@options [] ","@options [] nil? "]}," RequestProxy Base query_string_blank?":{"type":"method","name":"query_string_blank?","children":[],"call":[" request query_string blank? "," request query_string "," request ","uri split [] nil? ","uri split [] ","uri split "," request request_uri "," request env [] "," request env "," request query_string match "," request request_uri  split [] nil? "," request env []  split [] nil? "," request request_uri  split [] "," request env []  split [] "," request request_uri  split "," request env []  split "," request request_ request request_uri  "," request request_ request env []  "]}," HttpClient combine_query":{"type":"method","name":"combine_query","children":[],"call":["combined_query to_s empty? ","combined_query to_s ","(send\n  (array\n    (lvar :combined_query)\n    (lvar :uri_query)) :reject) join ","part empty? ","(lvar :combined_query) reject ","uri_query to_s empty? ! ","uri_query to_s empty? ","uri_query to_s ","query to_s ","(send\n  (lvar :query) :map) join "," encode_param ","query map ","query kind_of? ","(send\n  (array\n    (lvar :combined_query)\n    (lvar :uri_query)) :reject) join  to_s empty? ","query to_s  to_s empty? ","(send\n  (lvar :query) :map) join  to_s empty? ","(send\n  (array\n    (lvar :combined_query)\n    (lvar :uri_query)) :reject) join  to_s ","query to_s  to_s ","(send\n  (lvar :query) :map) join  to_s ","(send\n  (array\n    (lvar :(send\n  (array\n    (lvar :combined_query)\n    (lvar :uri_query)) :reject) join )\n    (lvar :uri_query)) :reject) join ","(send\n  (array\n    (lvar :query to_s )\n    (lvar :uri_query)) :reject) join ","(send\n  (array\n    (lvar :(send\n  (lvar :query) :map) join )\n    (lvar :uri_query)) :reject) join ","(lvar :(send\n  (array\n    (lvar :combined_query)\n    (lvar :uri_query)) :reject) join ) reject ","(lvar :query to_s ) reject ","(lvar :(send\n  (lvar :query) :map) join ) reject "]}," HttpClient normalize_uri":{"type":"method","name":"normalize_uri","children":[],"call":["uri path= ","uri query= ","encoded_query empty? ","encoded_query split "," encode_query ","@uri query ","@options [] ","@uri path ","@uri dup ","@uri dup  path= ","@uri dup  query= "," encode_query  empty? "," encode_query  split ","@@uri dup  query ","@@uri dup  path ","@@uri dup  dup "]}," ActionController Base process_with_new_base_test":{"type":"method","name":"process_with_new_base_test","children":[],"call":["request apply_oauth! ","request respond_to? "]}," HTTPGenericRequest set_oauth_query_string":{"type":"method","name":"set_oauth_query_string","children":[],"call":["@path << "," escape "," oauth_helper signature "," oauth_helper ","uri to_s ","uri query= ","uri query + + ","uri query + ","uri query ","uri query to_s == ","uri query to_s ","URI  parse "," path ","(send\n  (send\n    (ivar :@oauth_helper) :oauth_parameters) :map) join ","(send nil :escape\n  (lvar :k)) * ","@oauth_helper oauth_parameters map ","@oauth_helper oauth_parameters ","(send nil :escape\n  (lvar :k)) join ","uri to_s  << ","URI  parse  to_s ","URI  parse  query= ","URI  parse  query + + ","URI  parse  query + ","URI  parse  query ","URI  parse  query to_s == ","URI  parse  query to_s "]}," HTTPGenericRequest set_oauth_body":{"type":"method","name":"set_oauth_body","children":[],"call":[" set_form_data ","@oauth_helper stringify_keys ","@oauth_helper parameters merge ","@oauth_helper signature ","@oauth_helper parameters ","@oauth_helper parameters_with_oauth "]}," HTTPGenericRequest set_oauth_header":{"type":"method","name":"set_oauth_header","children":[],"call":[" []= ","@oauth_helper header "]}," HTTPGenericRequest oauth_body_hash_required?":{"type":"method","name":"oauth_body_hash_required?","children":[],"call":[" content_type to_s downcase start_with? ! "," content_type to_s downcase start_with? "," content_type to_s downcase "," content_type to_s "," content_type "," request_body_permitted? ","@oauth_helper token_request? ! ","@oauth_helper token_request? "]}," HTTPGenericRequest oauth_full_request_uri":{"type":"method","name":"oauth_full_request_uri","children":[],"call":["uri to_s ","uri scheme= ","http use_ssl? ","http respond_to? ","uri port ","uri host= ","options [] gsub ","options [] ","options [] match ","uri port= ","http port ","http address ","URI  parse "," path ","URI  parse  to_s ","URI  parse  scheme= ","URI  parse  port ","URI  parse  host= ","URI  parse  port= "]}," HTTPGenericRequest oauth_helper_options":{"type":"method","name":"oauth_helper_options","children":[],"call":["(pair\n  (sym :request_uri)\n  (send nil :oauth_full_request_uri\n    (lvar :http)\n    (lvar :options))) merge "," oauth_full_request_uri "]}," HTTPGenericRequest signature_base_string":{"type":"method","name":"signature_base_string","children":[],"call":["oauth_helper signature_base_string ","oauth_helper hash_body "," oauth_body_hash_required? ","OAuth Client Helper  new "," oauth_helper_options ","@oauth_helper signature_base_string ","@oauth_helper hash_body ","OAuth Client Helper  new  signature_base_string ","OAuth Client Helper  new  hash_body "," OAuth Client Helper  new _options "," oauth_ oauth_helper_options  ","@OAuth Client Helper  new  signature_base_string ","@OAuth Client Helper  new  hash_body "]}," HTTPGenericRequest oauth!":{"type":"method","name":"oauth!","children":[],"call":[" send ","helper_options [] ","@oauth_helper hash_body "," oauth_body_hash_required? ","@oauth_helper amend_user_agent_header ","OAuth Client Helper  new "," oauth_helper_options "," oauth_helper_options  [] ","OAuth Client Helper  new  hash_body ","OAuth Client Helper  new  amend_user_agent_header "," oauth_ oauth_helper_options  "]}," OAuth Helper normalize_nested_query":{"type":"method","name":"normalize_nested_query","children":[],"call":["(send nil :escape\n  (lvar :prefix)) * "," escape ","(send\n  (lvar :value) :map) flatten sort ","(send\n  (lvar :value) :map) flatten "," normalize_nested_query ","value map ","(send nil :escape\n  (lvar :prefix)) join "]}," OAuth AccessToken patch":{"type":"method","name":"patch","children":[],"call":[" request "]}," RSA SHA1 body_hash":{"type":"method","name":"body_hash","children":[],"call":["Base64  encode64 chomp gsub ","Base64  encode64 chomp ","Base64  encode64 ","OpenSSL Digest SHA1  digest "," request body "," request ","Base64  encode64 chomp delete "]}," Signature PLAINTEXT body_hash":{"type":"method","name":"body_hash","children":[],"call":[]}," HMAC SHA1 digest":{"type":"method","name":"digest","children":[],"call":["OpenSSL HMAC  digest "," signature_base_string "," secret ","OpenSSL Digest  new "]}," HMAC SHA1 body_hash":{"type":"method","name":"body_hash","children":[],"call":["Base64  encode64 chomp gsub ","Base64  encode64 chomp ","Base64  encode64 ","OpenSSL Digest SHA1  digest "," request body "," request ","Base64  encode64 chomp delete "]}," Signature Base raise_instantiation_error":{"type":"method","name":"raise_instantiation_error","children":[],"call":[" raise "," class name "," class "]}," RestClient Request query_string_to_hash":{"type":"method","name":"query_string_to_hash","children":[],"call":["result merge ","result key? ! ","result key? ","v nil? ! ","v nil? ","q split ","query split inject ","query split "]}," RestClient Request post_parameters":{"type":"method","name":"post_parameters","children":[],"call":["OAuth Helper  stringify_keys "," query_string_to_hash "," request payload to_s "," request payload "," request "," method == "," method "]}," RestClient Request request_params":{"type":"method","name":"request_params","children":[],"call":[]}," RestClient Request query_params":{"type":"method","name":"query_params","children":[],"call":["CGI  parse ","URI  parse query ","URI  parse "," request url "," request ","URI  parse URI  parse query  "]}," RestClient Request parameters":{"type":"method","name":"parameters","children":[],"call":[" post_parameters merge merge "," options [] "," options "," post_parameters merge "," query_params "," post_parameters "]}," RestClient Request uri":{"type":"method","name":"uri","children":[],"call":[" request url "," request "]}," RestClient Request method":{"type":"method","name":"method","children":[],"call":[" request method to_s upcase "," request method to_s "," request method "," request "]}," Client Helper token_request?":{"type":"method","name":"token_request?","children":[],"call":["@options [] eql? ","@options [] "]}," OAuth RequestToken build_url":{"type":"method","name":"build_url","children":[],"call":["uri to_s ","uri query= ","URI  encode_www_form ","queries empty? ","queries merge! ","Hash  [] ","URI  decode_www_form ","uri query ","URI  parse ","base_url to_s ","queries empty? ! ","URI  decode_www_form to_h ","URI  parse  to_s ","URI  parse  query= ","Hash  []  empty? ","URI  decode_www_form to_h  empty? ","Hash  []  merge! ","URI  decode_www_form to_h  merge! ","URI  parse  query ","Hash  []  empty? ! ","URI  decode_www_form to_h  empty? ! "]}," OAuth RequestToken authenticate_url":{"type":"method","name":"authenticate_url","children":[],"call":[" build_url "," consumer authenticate_url "," consumer ","(or\n  (lvar :params)\n  (hash)) merge "," token "," token nil? ","(or\n  (lvar :(or\n  (lvar :params)\n  (hash)) merge )\n  (hash)) merge "]}," HMAC SHA256 digest":{"type":"method","name":"digest","children":[],"call":["OpenSSL HMAC  digest "," signature_base_string "," secret ","OpenSSL Digest  new "]}," HMAC SHA256 body_hash":{"type":"method","name":"body_hash","children":[],"call":["Base64  encode64 chomp delete ","Base64  encode64 chomp ","Base64  encode64 ","OpenSSL Digest SHA256  digest "," request body "," request ","Base64  encode64 chomp gsub "]}," OAuth RequestProxy Typhoeus Request post_parameters":{"type":"method","name":"post_parameters","children":[],"call":["OAuth Helper  stringify_keys "," request options [] "," request options "," request "," method == "," method "]}," OAuth RequestProxy Typhoeus Request query_parameters":{"type":"method","name":"query_parameters","children":[],"call":["CGI  parse ","URI  parse query ","URI  parse "," request url "," request ","URI  parse URI  parse query  "]}," OAuth RequestProxy Typhoeus Request parameters":{"type":"method","name":"parameters","children":[],"call":[" post_parameters merge merge "," options [] "," options "," post_parameters merge "," query_parameters "," post_parameters "]}," OAuth RequestProxy Typhoeus Request uri":{"type":"method","name":"uri","children":[],"call":[" options [] to_s "," options [] "," options "]}," OAuth RequestProxy Typhoeus Request method":{"type":"method","name":"method","children":[],"call":["request_method empty? "," request options [] to_s upcase "," request options [] to_s "," request options [] "," request options "," request "," request options [] to_s upcase  empty? "]}," OAuth RequestProxy RestClient Request query_string_to_hash":{"type":"method","name":"query_string_to_hash","children":[],"call":["result merge ","result key? ! ","result key? ","v nil? ! ","v nil? ","q split ","query split inject ","query split "]}," OAuth RequestProxy RestClient Request post_parameters":{"type":"method","name":"post_parameters","children":[],"call":["OAuth Helper  stringify_keys "," query_string_to_hash "," request payload to_s "," request payload "," request "," method == "," method "," request payload headers [] == "," request payload headers [] "," request payload headers "]}," OAuth RequestProxy RestClient Request request_params":{"type":"method","name":"request_params","children":[],"call":[]}," OAuth RequestProxy RestClient Request query_params":{"type":"method","name":"query_params","children":[],"call":["CGI  parse ","URI  parse query ","URI  parse "," request url "," request ","URI  parse URI  parse query  "]}," OAuth RequestProxy RestClient Request parameters":{"type":"method","name":"parameters","children":[],"call":[" post_parameters merge merge "," options [] "," options "," post_parameters merge "," query_params "," post_parameters "]}," OAuth RequestProxy RestClient Request uri":{"type":"method","name":"uri","children":[],"call":[" request url "," request "]}," OAuth RequestProxy RestClient Request method":{"type":"method","name":"method","children":[],"call":[" request method to_s upcase "," request method to_s "," request method "," request "]}," OAuth RequestProxy RackRequest request_params":{"type":"method","name":"request_params","children":[],"call":[" request POST "," request "," request content_type to_s downcase start_with? "," request content_type to_s downcase "," request content_type to_s "," request content_type "]}," OAuth RequestProxy RackRequest query_params":{"type":"method","name":"query_params","children":[],"call":[" request GET "," request "]}," OAuth RequestProxy RackRequest signature":{"type":"method","name":"signature","children":[],"call":[" parameters [] "," parameters "]}," OAuth RequestProxy RackRequest parameters":{"type":"method","name":"parameters","children":[],"call":["params merge "," options [] "," options "," request_params merge merge "," header_params "," request_params merge "," query_params "," request_params "," request_params merge merge  merge "," request_ request_params merge merge  merge merge "," header_ request_params merge merge  "," request_ request_params merge merge  merge "," query_ request_params merge merge  "," request_ request_params merge merge  "]}," OAuth RequestProxy RackRequest uri":{"type":"method","name":"uri","children":[],"call":[" request url "," request "]}," OAuth RequestProxy RackRequest method":{"type":"method","name":"method","children":[],"call":[" request request_method "," request "," request env [] "," request env "]}," OAuth RequestProxy Net HTTP HTTPRequest auth_header_params":{"type":"method","name":"auth_header_params","children":[],"call":[" request [] "," request "," request [] [] == "," request [] [] "]}," OAuth RequestProxy Net HTTP HTTPRequest post_params":{"type":"method","name":"post_params","children":[],"call":[" request body "," request "]}," OAuth RequestProxy Net HTTP HTTPRequest query_params":{"type":"method","name":"query_params","children":[],"call":["URI  parse query ","URI  parse "," request path "," request "]}," OAuth RequestProxy Net HTTP HTTPRequest form_url_encoded?":{"type":"method","name":"form_url_encoded?","children":[],"call":[" request [] to_s downcase start_with? "," request [] to_s downcase "," request [] to_s "," request [] "," request "," request [] nil? ! "," request [] nil? "]}," OAuth RequestProxy Net HTTP HTTPRequest query_string":{"type":"method","name":"query_string","children":[],"call":["params compact join ","params compact ","params << "," post_params "," form_url_encoded? "," method to_s casecmp zero? "," method to_s casecmp "," method to_s "," method "," auth_header_params "," query_params "]}," OAuth RequestProxy Net HTTP HTTPRequest all_parameters":{"type":"method","name":"all_parameters","children":[],"call":["request_params []= ","request_params [] << ","request_params [] ","request_params key? "," options [] each "," options [] "," options ","CGI  parse "," query_string ","request_params has_key? ","CGI  parse  []= ","CGI  parse  [] << ","CGI  parse  [] ","CGI  parse  key? ","CGI  parse  has_key? "]}," OAuth RequestProxy Net HTTP HTTPRequest body":{"type":"method","name":"body","children":[],"call":[" request body "," request "]}," OAuth RequestProxy Net HTTP HTTPRequest parameters":{"type":"method","name":"parameters","children":[],"call":[" all_parameters "," options [] "," options "]}," OAuth RequestProxy Net HTTP HTTPRequest uri":{"type":"method","name":"uri","children":[],"call":[" options [] to_s "," options [] "," options "]}," OAuth RequestProxy Net HTTP HTTPRequest method":{"type":"method","name":"method","children":[],"call":[" request method "," request "]}," OAuth RequestProxy EventMachine HttpRequest merged_parameters":{"type":"method","name":"merged_parameters","children":[],"call":["params []= ","(lvar :value) flatten ","key to_s ","params [] ","params key? ","params_pairs each_pair ","extra_params compact each ","extra_params compact "]}," OAuth RequestProxy EventMachine HttpRequest post_parameters":{"type":"method","name":"post_parameters","children":[],"call":["CGI  parse "," request normalize_body to_s "," request normalize_body "," request req [] "," request req "," request ","(str \"POST\") include? "," method ","headers [] to_s downcase start_with? ","headers [] to_s downcase ","headers [] to_s ","headers [] "]}," OAuth RequestProxy EventMachine HttpRequest query_parameters":{"type":"method","name":"query_parameters","children":[],"call":["CGI  parse merge ","CGI  parse "," request conn query to_s "," request conn query "," request conn "," request ","quer to_s ","quer respond_to? "," request req [] "," request req "," request conn  request req [] y to_s "," request conn  request req [] y "," request req []  to_s "," request req []  respond_to? "]}," OAuth RequestProxy EventMachine HttpRequest all_parameters":{"type":"method","name":"all_parameters","children":[],"call":[" merged_parameters "," options [] "," options "," query_parameters "," post_parameters "]}," OAuth RequestProxy EventMachine HttpRequest parameters":{"type":"method","name":"parameters","children":[],"call":[" all_parameters "," options [] "," options "]}," OAuth RequestProxy EventMachine HttpRequest uri":{"type":"method","name":"uri","children":[],"call":[" request conn normalize to_s "," request conn normalize "," request conn "," request "]}," OAuth RequestProxy EventMachine HttpRequest method":{"type":"method","name":"method","children":[],"call":[" request req [] "," request req "," request "]}," OAuth RequestProxy Curl Easy post_parameters":{"type":"method","name":"post_parameters","children":[],"call":["post_body []= ","param [] ","str split "," request post_body split each "," request post_body split "," request post_body "," request "," request headers [] to_s downcase start_with? "," request headers [] to_s downcase "," request headers [] to_s "," request headers [] "," request headers ","str split  [] "]}," OAuth RequestProxy Curl Easy query_parameters":{"type":"method","name":"query_parameters","children":[],"call":["CGI  parse ","URI  parse query ","URI  parse "," request url "," request ","URI  parse URI  parse query  "]}," OAuth RequestProxy Curl Easy parameters":{"type":"method","name":"parameters","children":[],"call":[" post_parameters merge merge "," options [] "," options "," post_parameters merge "," query_parameters "," post_parameters "]}," OAuth RequestProxy Curl Easy uri":{"type":"method","name":"uri","children":[],"call":[" options [] to_s "," options [] "," options "]}," OAuth RequestProxy Curl Easy method":{"type":"method","name":"method","children":[],"call":[]}," OAuth RequestProxy Base header_params":{"type":"method","name":"header_params","children":[],"call":["k =~ ","oauth_params select! ","OAuth Helper  parse_header ","header [] == ","header [] "," request env [] "," request env "," request "," request env include? ","(str \"X-HTTP_AUTHORIZATION\") each ","OAuth Helper  parse_header  select! ","OAuth Helper  parse_ request env []  "," request env []  [] == "," request env []  [] "]}," OAuth RequestProxy Base query_string_blank?":{"type":"method","name":"query_string_blank?","children":[],"call":[" request query_string match "," request query_string "," request ","uri split [] nil? ","uri split [] ","uri split "," request env [] "," request env "," request env []  split [] nil? "," request env []  split [] "," request env []  split "]}," OAuth RequestProxy Base oauth_header":{"type":"method","name":"oauth_header","children":[],"call":["options [] ","(send\n  (send nil :oauth_parameters) :map) join "," escape "," oauth_parameters map "," oauth_parameters "]}," OAuth RequestProxy Base signed_uri":{"type":"method","name":"signed_uri","children":[],"call":[" warn ","(send nil :uri) join "," normalize "," uri "," non_oauth_parameters "," parameters "," signed? "]}," OAuth RequestProxy Base signed?":{"type":"method","name":"signed?","children":[],"call":[]}," OAuth RequestProxy Base signature_base_string":{"type":"method","name":"signature_base_string","children":[],"call":["(send\n  (lvar :base) :map) join "," escape ","base map "," normalized_parameters "," normalized_uri "," method "]}," OAuth RequestProxy Base sign!":{"type":"method","name":"sign!","children":[],"call":[" signature "," parameters []= "," sign "," parameters "]}," OAuth RequestProxy Base sign":{"type":"method","name":"sign","children":[],"call":["OAuth Signature  sign "]}," OAuth RequestProxy Base normalized_parameters":{"type":"method","name":"normalized_parameters","children":[],"call":[" normalize "," parameters_for_signature "]}," OAuth RequestProxy Base normalized_uri":{"type":"method","name":"normalized_uri","children":[],"call":["u path ","u path != ","u port ","u port != ","u scheme casecmp zero? ","u scheme casecmp ","u scheme ","u host downcase ","u host ","u scheme downcase ","URI  parse "," uri ","URI  parse  path ","URI  parse  path != ","URI  parse  port ","URI  parse  port != ","URI  parse  scheme casecmp zero? ","URI  parse  scheme casecmp ","URI  parse  scheme ","URI  parse  host downcase ","URI  parse  host ","URI  parse  scheme downcase "," URI  parse ri "]}," OAuth RequestProxy Base signature_and_unsigned_parameters":{"type":"method","name":"signature_and_unsigned_parameters","children":[],"call":[" unsigned_parameters + "," unsigned_parameters "]}," OAuth RequestProxy Base non_oauth_parameters":{"type":"method","name":"non_oauth_parameters","children":[],"call":["OAuth PARAMETERS  include? "," parameters reject "," parameters ","OAuth PARAMETERS  include? ! "," parameters select "]}," OAuth RequestProxy Base oauth_parameters":{"type":"method","name":"oauth_parameters","children":[],"call":["v == ","(send\n  (send nil :parameters) :select) reject ","OAuth PARAMETERS  include? "," parameters select "," parameters ","v != ","(send\n  (send nil :parameters) :select) select ","v nil? ! ","v nil? "]}," OAuth RequestProxy Base parameters_for_signature":{"type":"method","name":"parameters_for_signature","children":[],"call":[" signature_and_unsigned_parameters include? "," signature_and_unsigned_parameters "," parameters reject "," parameters "," signature_and_unsigned_parameters include? ! "," parameters select "]}," OAuth RequestProxy Base parameters":{"type":"method","name":"parameters","children":[],"call":[" raise "]}," OAuth RequestProxy Base oauth_version":{"type":"method","name":"oauth_version","children":[],"call":[" parameters [] "," parameters "]}," OAuth RequestProxy Base oauth_verifier":{"type":"method","name":"oauth_verifier","children":[],"call":[" parameters [] "," parameters "]}," OAuth RequestProxy Base oauth_token":{"type":"method","name":"oauth_token","children":[],"call":[" parameters [] "," parameters "]}," OAuth RequestProxy Base oauth_timestamp":{"type":"method","name":"oauth_timestamp","children":[],"call":[" parameters [] "," parameters "]}," OAuth RequestProxy Base oauth_signature_method":{"type":"method","name":"oauth_signature_method","children":[],"call":[" parameters [] "," parameters "," parameters [] first "]}," OAuth RequestProxy Base oauth_signature":{"type":"method","name":"oauth_signature","children":[],"call":["(send\n  (send nil :parameters) :[]\n  (str \"oauth_signature\")) flatten first ","(send\n  (send nil :parameters) :[]\n  (str \"oauth_signature\")) flatten "," parameters [] "," parameters "]}," OAuth RequestProxy Base oauth_nonce":{"type":"method","name":"oauth_nonce","children":[],"call":[" parameters [] "," parameters "]}," OAuth RequestProxy Base oauth_consumer_key":{"type":"method","name":"oauth_consumer_key","children":[],"call":[" parameters [] "," parameters "]}," OAuth RequestProxy Base oauth_callback":{"type":"method","name":"oauth_callback","children":[],"call":[" parameters [] "," parameters "]}," OAuth RequestProxy Base initialize":{"type":"method","name":"initialize","children":[],"call":["(or\n  (send\n    (lvar :options) :[]\n    (sym :unsigned_parameters))\n  (array)) map ","options [] "]}," OAuth RequestProxy Base proxies":{"type":"method","name":"proxies","children":[],"call":[]}," OAuth RequestProxy ActionControllerRequest request_params":{"type":"method","name":"request_params","children":[],"call":[" request request_parameters "," request "]}," OAuth RequestProxy ActionControllerRequest query_params":{"type":"method","name":"query_params","children":[],"call":[" request query_parameters "," request "]}," OAuth RequestProxy ActionControllerRequest raw_post_signature?":{"type":"method","name":"raw_post_signature?","children":[],"call":[" request content_type to_s downcase start_with? "," request content_type to_s downcase "," request content_type to_s "," request content_type "," request "," request put? "," request post? "]}," OAuth RequestProxy ActionControllerRequest parameters_for_signature":{"type":"method","name":"parameters_for_signature","children":[],"call":["kv [] == ","kv [] ","(send\n  (block\n    (send\n      (send\n        (send\n          (lvar :params) :join\n          (str \"&\")) :split\n        (str \"&\")) :reject)\n    (args\n      (arg :s))\n    (send\n      (lvar :s) :match\n      (regexp\n        (str \"\\\\A\\\\s*\\\\z\")\n        (regopt)))) :map) reject ","CGI  unescape ","p split map ","p split ","(send\n  (send\n    (send\n      (lvar :params) :join\n      (str \"&\")) :split\n    (str \"&\")) :reject) map ","s match ","params join split reject ","params join split ","params join ","params << "," request raw_post "," request "," raw_post_signature? "," request query_string "," query_string_blank? "," header_params to_query "," header_params "," options [] "," options "," options [] to_query "]}," OAuth RequestProxy ActionControllerRequest parameters":{"type":"method","name":"parameters","children":[],"call":["params merge "," options [] "," options ","params stringify_keys! ","params respond_to? "," request_params merge merge "," header_params "," request_params merge "," query_params "," request_params "," request_params merge merge  merge "," request_params merge merge  stringify_keys! "," request_params merge merge  respond_to? "," request_ request_params merge merge  merge merge "," header_ request_params merge merge  "," request_ request_params merge merge  merge "," query_ request_params merge merge  "," request_ request_params merge merge  "]}," OAuth RequestProxy ActionControllerRequest uri":{"type":"method","name":"uri","children":[],"call":[" request url "," request "]}," OAuth RequestProxy ActionControllerRequest method":{"type":"method","name":"method","children":[],"call":[" request method to_s upcase "," request method to_s "," request method "," request "]}," OAuth Helper _escape":{"type":"method","name":"_escape","children":[],"call":["URI DEFAULT_PARSER  escape ","URI  escape "]}," OAuth Consumer authenticate_url?":{"type":"method","name":"authenticate_url?","children":[],"call":["@options key? ","@options has_key? "]}," OAuth Consumer authenticate_url":{"type":"method","name":"authenticate_url","children":[],"call":[" site + "," authenticate_path "," site ","@options [] "]}," OAuth Consumer authenticate_path":{"type":"method","name":"authenticate_path","children":[],"call":["@options [] "]}," OAuth Consumer debug_output":{"type":"method","name":"debug_output","children":[],"call":["@options [] "]}," EventMachine HttpClient set_oauth_query_string":{"type":"method","name":"set_oauth_query_string","children":[],"call":[" raise "]}," EventMachine HttpClient set_oauth_body":{"type":"method","name":"set_oauth_body","children":[],"call":[" raise "]}," EventMachine HttpClient set_oauth_header":{"type":"method","name":"set_oauth_header","children":[],"call":[" req [] merge! ","@oauth_helper header "," req [] "," req "]}," EventMachine HttpClient normalized_oauth_uri":{"type":"method","name":"normalized_oauth_uri","children":[],"call":["uri to_s ","uri scheme= ","http use_ssl? ","http respond_to? ","uri port= ","http port ","uri host= ","http address ","URI  parse "," normalize_uri path "," normalize_uri ","URI  parse  to_s ","URI  parse  scheme= ","URI  parse  port= ","URI  parse  host= "," normalize_URI  parse  path "," normalize_URI  parse  "]}," EventMachine HttpClient combine_query":{"type":"method","name":"combine_query","children":[],"call":["combined_query to_s empty? ","combined_query to_s ","(lvar :combined_query) reject join ","(lvar :combined_query) reject ","uri_query to_s empty? ","uri_query to_s ","query to_s ","(send\n  (lvar :query) :map) join "," encode_param ","query map ","query is_a? ","(send\n  (array\n    (lvar :combined_query)\n    (lvar :uri_query)) :reject) join ","part empty? ","uri_query to_s empty? ! ","query kind_of? ","(lvar :combined_query) reject join  to_s empty? ","query to_s  to_s empty? ","(send\n  (lvar :query) :map) join  to_s empty? ","(send\n  (array\n    (lvar :combined_query)\n    (lvar :uri_query)) :reject) join  to_s empty? ","(lvar :combined_query) reject join  to_s ","query to_s  to_s ","(send\n  (lvar :query) :map) join  to_s ","(send\n  (array\n    (lvar :combined_query)\n    (lvar :uri_query)) :reject) join  to_s ","(lvar :(lvar :combined_query) reject join ) reject join ","(lvar :query to_s ) reject join ","(lvar :(send\n  (lvar :query) :map) join ) reject join ","(lvar :(send\n  (array\n    (lvar :combined_query)\n    (lvar :uri_query)) :reject) join ) reject join ","(lvar :(lvar :combined_query) reject join ) reject ","(lvar :query to_s ) reject ","(lvar :(send\n  (lvar :query) :map) join ) reject ","(lvar :(send\n  (array\n    (lvar :combined_query)\n    (lvar :uri_query)) :reject) join ) reject ","(send\n  (array\n    (lvar :(lvar :combined_query) reject join )\n    (lvar :uri_query)) :reject) join ","(send\n  (array\n    (lvar :query to_s )\n    (lvar :uri_query)) :reject) join ","(send\n  (array\n    (lvar :(send\n  (lvar :query) :map) join )\n    (lvar :uri_query)) :reject) join ","(send\n  (array\n    (lvar :(send\n  (array\n    (lvar :combined_query)\n    (lvar :uri_query)) :reject) join )\n    (lvar :uri_query)) :reject) join "]}," EventMachine HttpClient normalize_uri":{"type":"method","name":"normalize_uri","children":[],"call":["uri path= ","uri query= ","encoded_query empty? ","encoded_query split "," encode_query ","@req [] ","@conn dup ","@conn dup  path= ","@conn dup  query= "," encode_query  empty? "," encode_query  split "]}," EventMachine HttpClient signature_base_string":{"type":"method","name":"signature_base_string","children":[],"call":["OAuth Client Helper  new signature_base_string ","OAuth Client Helper  new ","(pair\n  (sym :request_uri)\n  (send nil :normalized_oauth_uri\n    (lvar :http))) merge "," normalized_oauth_uri "]}," EventMachine HttpClient oauth!":{"type":"method","name":"oauth!","children":[],"call":[" __send__ ","options [] ","OAuth Client Helper  new ","(pair\n  (sym :request_uri)\n  (send nil :normalized_oauth_uri\n    (lvar :http))) merge "," normalized_oauth_uri ","(pair\n  (sym :request_uri)\n  (send nil :normalized_oauth_uri\n    (lvar :http))) merge  [] "]}," OAuth CLI parse_command":{"type":"method","name":"parse_command","children":[],"call":["OAuth CLI  puts_red ","ALIASES  values ","ALIASES  [] ","ALIASES  keys ","command to_s downcase ","command to_s ","command to_s downcase  to_s downcase ","command to_s downcase  to_s "]}," OAuth CLI get_command_class":{"type":"method","name":"get_command_class","children":[],"call":["Object  const_get ","command camelize "]}," OAuth CLI run":{"type":"method","name":"run","children":[],"call":["@command run "]}," OAuth CLI puts_red":{"type":"method","name":"puts_red","children":[],"call":[]}," CLI VersionCommand run":{"type":"method","name":"run","children":[],"call":[" puts "]}," CLI SignCommand xmpp_output":{"type":"method","name":"xmpp_output","children":[],"call":["request oauth_version ","request oauth_nonce ","request oauth_timestamp ","request oauth_signature ","request oauth_signature_method ","request oauth_token ","request oauth_consumer_key "]}," CLI SignCommand puts_verbose_request":{"type":"method","name":"puts_verbose_request","children":[],"call":[" puts ","OAuth Helper  escape ","request oauth_signature ","request oauth_header "," options [] "," options ","request signed_uri "," xmpp_output "," xmpp? ","request signature_base_string ","request normalized_parameters ","request uri ","request method "]}," CLI SignCommand puts_verbose_parameters":{"type":"method","name":"puts_verbose_parameters","children":[],"call":[" puts ","   + ","(lvar :k) join ","request non_oauth_parameters each ","request non_oauth_parameters ","request non_oauth_parameters any? ","request oauth_parameters each ","request oauth_parameters ","(lvar :k) * "]}," CLI SignCommand _run":{"type":"method","name":"_run","children":[],"call":[" puts ","request oauth_signature "," puts_verbose_request "," verbose? ","request sign! "," options [] "," options "," puts_verbose_parameters ","OAuth RequestProxy  proxy "," parameters ","OAuth RequestProxy  proxy  oauth_signature "," puts_verbose_OAuth RequestProxy  proxy  ","OAuth RequestProxy  proxy  sign! "]}," CLI SignCommand required_options":{"type":"method","name":"required_options","children":[],"call":[]}," CLI QueryCommand _run":{"type":"method","name":"_run","children":[],"call":[" puts ","response body ","response message ","response code ","access_token request ","uri to_s "," options [] to_s downcase to_sym "," options [] to_s downcase "," options [] to_s "," options [] "," options ","uri query= ","(send\n  (lvar :uri) :query) reject * ","(send\n  (lvar :uri) :query) reject ","uri query ","(send\n  (send nil :Array\n    (lvar :v)) :map) * ","OAuth Helper  escape "," Array map "," Array "," parameters map "," parameters ","URI  parse ","OAuth AccessToken  new ","OAuth Consumer  new ","(send\n  (array\n    (send\n      (lvar :uri) :query)\n    (splat\n      (lvar :params))) :reject) * ","x nil? ","access_token request  body ","access_token request  message ","access_token request  code ","OAuth AccessToken  new  request ","URI  parse  to_s ","URI  parse  query= ","(send\n  (lvar :URI  parse ) :query) reject * ","(send\n  (lvar :URI  parse ) :query) reject ","URI  parse  query ","(send\n  (array\n    (send\n      (lvar :URI  parse ) :query)\n    (splat\n      (lvar :params))) :reject) * "]}," CLI QueryCommand required_options":{"type":"method","name":"required_options","children":[],"call":[]}," CLI HelpCommand run":{"type":"method","name":"run","children":[],"call":[" puts "]}," CLI BaseCommand _option_parser_authorization":{"type":"method","name":"_option_parser_authorization","children":[],"call":[" options []= "," options ","opts on ","opts separator "]}," CLI BaseCommand _option_parser_sign_and_query":{"type":"method","name":"_option_parser_sign_and_query","children":[],"call":[" options []= "," options ","opts on "," options [] "," options [] << ","opts separator "]}," CLI BaseCommand _option_parser_common":{"type":"method","name":"_option_parser_common","children":[],"call":[" options merge! "," options "," parse_options ","(send\n  (send\n    (send nil :open\n      (lvar :v)) :readlines) :map) flatten ","l chomp split ","l chomp "," open readlines map "," open readlines "," open ","opts on "," options []= "]}," CLI BaseCommand _option_parser_defaults":{"type":"method","name":"_option_parser_defaults","children":[],"call":[" options []= "," options ","OAuth Helper  generate_timestamp ","OAuth Helper  generate_key "]}," CLI BaseCommand option_parser":{"type":"method","name":"option_parser","children":[],"call":[" _option_parser_authorization "," _option_parser_sign_and_query "," _option_parser_common "," _option_parser_defaults ","opts banner= ","OptionParser  new "]}," CLI BaseCommand parameters":{"type":"method","name":"parameters","children":[],"call":["(send\n  (hash\n    (pair\n      (str \"oauth_consumer_key\")\n      (send\n        (send nil :options) :[]\n        (sym :oauth_consumer_key)))\n    (pair\n      (str \"oauth_nonce\")\n      (send\n        (send nil :options) :[]\n        (sym :oauth_nonce)))\n    (pair\n      (str \"oauth_timestamp\")\n      (send\n        (send nil :options) :[]\n        (sym :oauth_timestamp)))\n    (pair\n      (str \"oauth_token\")\n      (send\n        (send nil :options) :[]\n        (sym :oauth_token)))\n    (pair\n      (str \"oauth_signature_method\")\n      (send\n        (send nil :options) :[]\n        (sym :oauth_signature_method)))\n    (pair\n      (str \"oauth_version\")\n      (send\n        (send nil :options) :[]\n        (sym :oauth_version)))) :reject) merge ","v == ","v nil? ","(pair\n  (str \"oauth_consumer_key\")\n  (send\n    (send nil :options) :[]\n    (sym :oauth_consumer_key))) reject "," options [] "," options ","CGI  parse ","escaped_pairs * ","(send\n  (const nil :CGI) :escape\n  (send\n    (lvar :k) :strip)) join ","CGI  escape ","v strip ","k strip ","Hash  [] collect ","Hash  [] ","pair split ","pair =~ "," options [] collect ","(send\n  (const nil :CGI) :escape\n  (send\n    (lvar :k) :strip)) * "]}," CLI BaseCommand alert":{"type":"method","name":"alert","children":[],"call":["@stderr puts "]}," CLI BaseCommand puts":{"type":"method","name":"puts","children":[],"call":["@stdout puts "]}," CLI BaseCommand verbose?":{"type":"method","name":"verbose?","children":[],"call":[" options [] "," options "]}," CLI BaseCommand xmpp?":{"type":"method","name":"xmpp?","children":[],"call":[" options [] "," options "]}," CLI BaseCommand show_missing":{"type":"method","name":"show_missing","children":[],"call":["OAuth CLI  puts_red ","(send\n  (lvar :array) :map) join ","array map ","(send\n  (lvar :(send\n  (lvar :array) :map) join ) :map) join ","(send\n  (lvar :array) :map) join  map "]}," CLI BaseCommand required_options":{"type":"method","name":"required_options","children":[],"call":[]}," CLI BaseCommand run":{"type":"method","name":"run","children":[],"call":[" puts "," option_parser help "," option_parser "," show_missing "," _run ","missing empty? "," required_options - "," options keys "," options "," required_options "," show_ required_options -  "," required_options -  empty? "]}," CLI BaseCommand initialize":{"type":"method","name":"initialize","children":[],"call":[" option_parser parse! "," option_parser "]}," CLI AuthorizeCommand verbosely_get_access_token":{"type":"method","name":"verbosely_get_access_token","children":[],"call":[" alert ","e request body ","e request "," puts ","k is_a? ","access_token params each ","access_token params ","request_token get_access_token ","request_token get_access_token  params each ","request_token get_access_token  params ","request_token get_request_token get_access_token  "]}," CLI AuthorizeCommand ask_user_for_verifier":{"type":"method","name":"ask_user_for_verifier","children":[],"call":["@stdin gets "," puts ","@stdin gets chomp "," options [] == "," options [] "," options "]}," CLI AuthorizeCommand get_consumer":{"type":"method","name":"get_consumer","children":[],"call":["OAuth Consumer  new "," options [] to_s downcase to_sym "," options [] to_s downcase "," options [] to_s "," options [] "," options "]}," CLI AuthorizeCommand get_request_token":{"type":"method","name":"get_request_token","children":[],"call":[" alert ","e request body ","e request ","consumer get_request_token "," options [] "," options "," get_consumer "," get_consumer  get_request_token "," get_ get_consumer  "]}," CLI AuthorizeCommand _run":{"type":"method","name":"_run","children":[],"call":[" verbosely_get_access_token "," ask_user_for_verifier "," puts ","request_token authorize_url "," options []= "," options ","request_token callback_confirmed? "," get_request_token "," get_request_token  authorize_url "," get_request_token  callback_confirmed? "," get_ get_request_token  "]}," CLI AuthorizeCommand required_options":{"type":"method","name":"required_options","children":[],"call":[]}," RequestProxy Base signature_and_unsigned_parameters":{"type":"method","name":"signature_and_unsigned_parameters","children":[],"call":[" unsigned_parameters + "," unsigned_parameters "]}," URI Escape unescape":{"type":"method","name":"unescape","children":[],"call":["DEFAULT_PARSER  unescape "]}," URI Escape escape":{"type":"method","name":"escape","children":[],"call":["DEFAULT_PARSER  escape "]}," RequestProxy ActionControllerRequest raw_post_signature?":{"type":"method","name":"raw_post_signature?","children":[],"call":[" request content_type to_s downcase start_with? "," request content_type to_s downcase "," request content_type to_s "," request content_type "," request "," request put? "," request post? "]}," OAuth Signature RSA SHA1 digest":{"type":"method","name":"digest","children":[],"call":["private_key sign "," signature_base_string ","OpenSSL Digest  new ","OpenSSL PKey RSA  new "," consumer_secret "," options [] "," options ","File  read ","OpenSSL PKey RSA  new  sign "]}," OAuth Signature RSA SHA1 decode_public_key":{"type":"method","name":"decode_public_key","children":[],"call":["OpenSSL PKey RSA  new "," consumer_secret ","OpenSSL X509 Certificate  new public_key ","OpenSSL X509 Certificate  new "]}," OAuth Signature RSA SHA1 body_hash":{"type":"method","name":"body_hash","children":[],"call":["Base64  encode64 chomp delete ","Base64  encode64 chomp ","Base64  encode64 ","OpenSSL Digest  digest "," request body "," request "]}," OAuth Signature RSA SHA1 public_key":{"type":"method","name":"public_key","children":[],"call":[" consumer_secret "," consumer_secret public_key "," decode_public_key "]}," OAuth Signature RSA SHA1 ==":{"type":"method","name":"==","children":[],"call":[" public_key verify "," signature_base_string ","Base64  decode64 ","other first ","other is_a? ","OpenSSL Digest  new "," public_key "]}," OAuth Signature PLAINTEXT body_hash":{"type":"method","name":"body_hash","children":[],"call":[]}," OAuth Signature PLAINTEXT signature_base_string":{"type":"method","name":"signature_base_string","children":[],"call":[" secret "]}," OAuth Signature PLAINTEXT ==":{"type":"method","name":"==","children":[],"call":[" signature to_s == ","other to_s "," signature to_s "," signature "]}," OAuth Signature PLAINTEXT signature":{"type":"method","name":"signature","children":[],"call":[" signature_base_string "]}," OAuth Signature HMAC SHA256 digest":{"type":"method","name":"digest","children":[],"call":["OpenSSL HMAC  digest "," signature_base_string "," secret ","OpenSSL Digest  new "]}," OAuth Signature HMAC SHA256 body_hash":{"type":"method","name":"body_hash","children":[],"call":["Base64  encode64 chomp delete ","Base64  encode64 chomp ","Base64  encode64 ","OpenSSL Digest  digest "," request body "," request "]}," OAuth Signature HMAC SHA1 digest":{"type":"method","name":"digest","children":[],"call":["OpenSSL HMAC  digest "," signature_base_string "," secret ","OpenSSL Digest  new "]}," OAuth Signature HMAC SHA1 body_hash":{"type":"method","name":"body_hash","children":[],"call":["Base64  encode64 chomp delete ","Base64  encode64 chomp ","Base64  encode64 ","OpenSSL Digest  digest "," request body "," request "]}," OAuth Signature Base raise_instantiation_error":{"type":"method","name":"raise_instantiation_error","children":[],"call":[" raise "," class name "," class "]}," OAuth Signature Base digest":{"type":"method","name":"digest","children":[],"call":[" raise_instantiation_error "]}," OAuth Signature Base secret":{"type":"method","name":"secret","children":[],"call":[" escape "," token_secret "," consumer_secret "]}," OAuth Signature Base nonce":{"type":"method","name":"nonce","children":[],"call":[" request nonce "," request "]}," OAuth Signature Base consumer_key":{"type":"method","name":"consumer_key","children":[],"call":[" request consumer_key "," request "]}," OAuth Signature Base token":{"type":"method","name":"token","children":[],"call":[" request token "," request "]}," OAuth Signature Base body_hash":{"type":"method","name":"body_hash","children":[],"call":[" raise_instantiation_error "]}," OAuth Signature Base signature_base_string":{"type":"method","name":"signature_base_string","children":[],"call":[" request signature_base_string "," request "]}," OAuth Signature Base verify":{"type":"method","name":"verify","children":[],"call":[" == "," request signature "," request "]}," OAuth Signature Base ==":{"type":"method","name":"==","children":[],"call":["check zero? ","x ^ ","y to_i "," signature bytes zip ","other bytes "," signature bytes "," signature "," signature bytesize ^ ","other bytesize "," signature bytesize "," signature bytesize ^  zero? "]}," OAuth Signature Base signature":{"type":"method","name":"signature","children":[],"call":["Base64  encode64 chomp delete ","Base64  encode64 chomp ","Base64  encode64 "," digest "]}," OAuth Signature Base initialize":{"type":"method","name":"initialize","children":[],"call":["secrets [] ","secrets size == ","secrets size ","secrets is_a? ","request timestamp "," nonce "," consumer_key "," token ","block arity == ","block arity ","options [] ","options [] secret "," raise ","request is_a? "]}," OAuth Signature Base implements":{"type":"method","name":"implements","children":[],"call":[]}," Net HTTPGenericRequest set_oauth_query_string":{"type":"method","name":"set_oauth_query_string","children":[],"call":["@path << "," escape "," oauth_helper signature "," oauth_helper ","uri to_s ","uri query= ","uri query ","uri query to_s == ","uri query to_s ","URI  parse "," path ","(send\n  (send\n    (ivar :@oauth_helper) :oauth_parameters) :map) join ","(send nil :escape\n  (lvar :k)) join ","@oauth_helper oauth_parameters map ","@oauth_helper oauth_parameters ","uri to_s  << ","URI  parse  to_s ","URI  parse  query= ","URI  parse  query ","URI  parse  query to_s == ","URI  parse  query to_s "]}," Net HTTPGenericRequest set_oauth_body":{"type":"method","name":"set_oauth_body","children":[],"call":[" set_form_data ","OAuth Helper  stringify_keys ","@oauth_helper parameters merge ","@oauth_helper signature ","@oauth_helper parameters ","@oauth_helper parameters_with_oauth "]}," Net HTTPGenericRequest set_oauth_header":{"type":"method","name":"set_oauth_header","children":[],"call":[" []= ","@oauth_helper header "]}," Net HTTPGenericRequest oauth_body_hash_required?":{"type":"method","name":"oauth_body_hash_required?","children":[],"call":["options [] "," content_type to_s downcase start_with? ! "," content_type to_s downcase start_with? "," content_type to_s downcase "," content_type to_s "," content_type "," request_body_permitted? ","@oauth_helper token_request? ! ","@oauth_helper token_request? "]}," Net HTTPGenericRequest oauth_full_request_uri":{"type":"method","name":"oauth_full_request_uri","children":[],"call":["uri to_s ","uri scheme= ","http use_ssl? ","http respond_to? ","uri port ","uri host= ","options [] gsub ","options [] ","options [] match ","uri port= ","http port ","http address ","URI  parse "," path ","URI  parse  to_s ","URI  parse  scheme= ","URI  parse  port ","URI  parse  host= ","URI  parse  port= "]}," Net HTTPGenericRequest oauth_helper_options":{"type":"method","name":"oauth_helper_options","children":[],"call":["(pair\n  (sym :request_uri)\n  (send nil :oauth_full_request_uri\n    (lvar :http)\n    (lvar :options))) merge "," oauth_full_request_uri "]}," Net HTTPGenericRequest signature_base_string":{"type":"method","name":"signature_base_string","children":[],"call":["@oauth_helper signature_base_string ","@oauth_helper hash_body "," oauth_body_hash_required? ","OAuth Client Helper  new "," oauth_helper_options ","OAuth Client Helper  new  signature_base_string ","OAuth Client Helper  new  hash_body "," oauth_ oauth_helper_options  "]}," Net HTTPGenericRequest oauth!":{"type":"method","name":"oauth!","children":[],"call":[" send ","helper_options [] ","@oauth_helper hash_body "," oauth_body_hash_required? ","@oauth_helper amend_user_agent_header ","OAuth Client Helper  new "," oauth_helper_options "," oauth_helper_options  [] ","OAuth Client Helper  new  hash_body ","OAuth Client Helper  new  amend_user_agent_header "," oauth_ oauth_helper_options  "]}," OAuth Client Helper parameters_with_oauth":{"type":"method","name":"parameters_with_oauth","children":[],"call":[" oauth_parameters merge "," parameters "," oauth_parameters "]}," OAuth Client Helper parameters":{"type":"method","name":"parameters","children":[],"call":["OAuth RequestProxy  proxy parameters ","OAuth RequestProxy  proxy "]}," OAuth Client Helper header":{"type":"method","name":"header","children":[],"call":[" options [] "," options ","(send\n  (send\n    (lvar :parameters) :sort) :map) join "," escape ","parameters sort map ","parameters sort ","parameters []= "," signature "," options merge "," oauth_parameters ","(send\n  (send\n    (lvar : oauth_parameters ) :sort) :map) join "," oauth_parameters  sort map "," oauth_parameters  sort "," oauth_parameters  []= "," oauth_ oauth_parameters  "]}," OAuth Client Helper amend_user_agent_header":{"type":"method","name":"amend_user_agent_header","children":[],"call":["headers []= ","headers [] ","headers [] != "]}," OAuth Client Helper hash_body":{"type":"method","name":"hash_body","children":[],"call":["@options []= ","OAuth Signature  body_hash "," oauth_parameters "]}," OAuth Client Helper token_request?":{"type":"method","name":"token_request?","children":[],"call":["@options [] eql? ","@options [] "]}," OAuth Client Helper signature_base_string":{"type":"method","name":"signature_base_string","children":[],"call":["OAuth Signature  signature_base_string ","(pair\n  (sym :uri)\n  (send\n    (send nil :options) :[]\n    (sym :request_uri))) merge "," oauth_parameters "," options [] "," options "]}," OAuth Client Helper signature":{"type":"method","name":"signature","children":[],"call":["OAuth Signature  sign ","(pair\n  (sym :uri)\n  (send\n    (send nil :options) :[]\n    (sym :request_uri))) merge "," options [] "," options "]}," OAuth Client Helper oauth_parameters":{"type":"method","name":"oauth_parameters","children":[],"call":["allowed_empty_params include? ","allowed_empty_params == ","v to_s != ","v to_s ","out select! ","allowed_empty_params is_a? ! ","allowed_empty_params is_a? ","allowed_empty_params != "," options [] "," options "," nonce "," timestamp "," options [] token "," options [] key "," options []  include? "," options []  == "," options []  is_a? ! "," options []  is_a? "," options []  != "]}," OAuth Client Helper timestamp":{"type":"method","name":"timestamp","children":[],"call":[" generate_timestamp "," options [] "," options "]}," OAuth Client Helper nonce":{"type":"method","name":"nonce","children":[],"call":[" generate_key "," options [] "," options "]}," OAuth Client Helper initialize":{"type":"method","name":"initialize","children":[],"call":["@options [] "]}," OAuth CLI VersionCommand run":{"type":"method","name":"run","children":[],"call":[" puts "]}," OAuth CLI SignCommand xmpp_output":{"type":"method","name":"xmpp_output","children":[],"call":["request oauth_version ","request oauth_nonce ","request oauth_timestamp ","request oauth_signature ","request oauth_signature_method ","request oauth_token ","request oauth_consumer_key "]}," OAuth CLI SignCommand puts_verbose_request":{"type":"method","name":"puts_verbose_request","children":[],"call":[" puts ","OAuth Helper  escape ","request oauth_signature ","request oauth_header "," options [] "," options ","request signed_uri "," xmpp_output "," xmpp? ","request signature_base_string ","request normalized_parameters ","request uri ","request method "]}," OAuth CLI SignCommand puts_verbose_parameters":{"type":"method","name":"puts_verbose_parameters","children":[],"call":[" puts ","(lvar :k) join ","request non_oauth_parameters each ","request non_oauth_parameters ","request non_oauth_parameters any? ","request oauth_parameters each ","request oauth_parameters "]}," OAuth CLI SignCommand _run":{"type":"method","name":"_run","children":[],"call":[" puts ","request oauth_signature "," puts_verbose_request "," verbose? ","request sign! "," options [] "," options "," puts_verbose_parameters ","OAuth RequestProxy  proxy "," parameters ","OAuth RequestProxy  proxy  oauth_signature "," puts_verbose_OAuth RequestProxy  proxy  ","OAuth RequestProxy  proxy  sign! "]}," OAuth CLI SignCommand required_options":{"type":"method","name":"required_options","children":[],"call":[]}," OAuth CLI QueryCommand _run":{"type":"method","name":"_run","children":[],"call":[" puts ","response body ","response message ","response code ","access_token request ","uri to_s "," options [] to_s downcase to_sym "," options [] to_s downcase "," options [] to_s "," options [] "," options ","uri query= ","(send\n  (lvar :uri) :query) compact * ","(send\n  (lvar :uri) :query) compact ","uri query ","(send\n  (send nil :Array\n    (lvar :v)) :map) * ","OAuth Helper  escape "," Array map "," Array "," parameters map "," parameters ","URI  parse ","OAuth AccessToken  new ","OAuth Consumer  new ","access_token request  body ","access_token request  message ","access_token request  code ","OAuth AccessToken  new  request ","URI  parse  to_s ","URI  parse  query= ","(send\n  (lvar :URI  parse ) :query) compact * ","(send\n  (lvar :URI  parse ) :query) compact ","URI  parse  query "]}," OAuth CLI QueryCommand required_options":{"type":"method","name":"required_options","children":[],"call":[]}," OAuth CLI HelpCommand run":{"type":"method","name":"run","children":[],"call":[" puts "]}," OAuth CLI BaseCommand _option_parser_authorization":{"type":"method","name":"_option_parser_authorization","children":[],"call":[" options []= "," options ","opts on ","opts separator "]}," OAuth CLI BaseCommand _option_parser_sign_and_query":{"type":"method","name":"_option_parser_sign_and_query","children":[],"call":[" options []= "," options ","opts on "," options [] "," options [] << ","opts separator "]}," OAuth CLI BaseCommand _option_parser_common":{"type":"method","name":"_option_parser_common","children":[],"call":[" options merge! "," options "," parse_options ","(send\n  (send\n    (send nil :open\n      (lvar :v)) :readlines) :map) flatten ","l chomp split ","l chomp "," open readlines map "," open readlines "," open ","opts on "," options []= "]}," OAuth CLI BaseCommand _option_parser_defaults":{"type":"method","name":"_option_parser_defaults","children":[],"call":[" options []= "," options ","OAuth Helper  generate_timestamp ","OAuth Helper  generate_key "]}," OAuth CLI BaseCommand option_parser":{"type":"method","name":"option_parser","children":[],"call":[" _option_parser_authorization "," _option_parser_sign_and_query "," _option_parser_common "," _option_parser_defaults ","opts banner= ","OptionParser  new "]}," OAuth CLI BaseCommand parameters":{"type":"method","name":"parameters","children":[],"call":["(send\n  (hash\n    (pair\n      (str \"oauth_consumer_key\")\n      (send\n        (send nil :options) :[]\n        (sym :oauth_consumer_key)))\n    (pair\n      (str \"oauth_nonce\")\n      (send\n        (send nil :options) :[]\n        (sym :oauth_nonce)))\n    (pair\n      (str \"oauth_timestamp\")\n      (send\n        (send nil :options) :[]\n        (sym :oauth_timestamp)))\n    (pair\n      (str \"oauth_token\")\n      (send\n        (send nil :options) :[]\n        (sym :oauth_token)))\n    (pair\n      (str \"oauth_signature_method\")\n      (send\n        (send nil :options) :[]\n        (sym :oauth_signature_method)))\n    (pair\n      (str \"oauth_version\")\n      (send\n        (send nil :options) :[]\n        (sym :oauth_version)))) :reject) merge ","v == ","v nil? ","(pair\n  (str \"oauth_consumer_key\")\n  (send\n    (send nil :options) :[]\n    (sym :oauth_consumer_key))) reject "," options [] "," options ","CGI  parse ","escaped_pairs * ","(send\n  (const nil :CGI) :escape\n  (send\n    (lvar :k) :strip)) join ","CGI  escape ","v strip ","k strip ","Hash  [] collect ","Hash  [] ","pair split ","(str \":\") match? "," options [] collect "]}," OAuth CLI BaseCommand alert":{"type":"method","name":"alert","children":[],"call":["@stderr puts "]}," OAuth CLI BaseCommand puts":{"type":"method","name":"puts","children":[],"call":["@stdout puts "]}," OAuth CLI BaseCommand verbose?":{"type":"method","name":"verbose?","children":[],"call":[" options [] "," options "]}," OAuth CLI BaseCommand xmpp?":{"type":"method","name":"xmpp?","children":[],"call":[" options [] "," options "]}," OAuth CLI BaseCommand show_missing":{"type":"method","name":"show_missing","children":[],"call":["OAuth CLI  puts_red ","(send\n  (lvar :array) :map) join ","array map ","(send\n  (lvar :(send\n  (lvar :array) :map) join ) :map) join ","(send\n  (lvar :array) :map) join  map "]}," OAuth CLI BaseCommand required_options":{"type":"method","name":"required_options","children":[],"call":[]}," OAuth CLI BaseCommand run":{"type":"method","name":"run","children":[],"call":[" puts "," option_parser help "," option_parser "," show_missing "," _run ","missing empty? "," required_options - "," options keys "," options "," required_options "," show_ required_options -  "," required_options -  empty? "]}," OAuth CLI BaseCommand initialize":{"type":"method","name":"initialize","children":[],"call":[" option_parser parse! "," option_parser "]}," OAuth CLI AuthorizeCommand verbosely_get_access_token":{"type":"method","name":"verbosely_get_access_token","children":[],"call":[" alert ","e request body ","e request "," puts ","k is_a? ","access_token params each ","access_token params ","request_token get_access_token ","request_token get_access_token  params each ","request_token get_access_token  params ","request_token get_request_token get_access_token  "]}," OAuth CLI AuthorizeCommand ask_user_for_verifier":{"type":"method","name":"ask_user_for_verifier","children":[],"call":["@stdin gets "," puts ","@stdin gets chomp "," options [] == "," options [] "," options "]}," OAuth CLI AuthorizeCommand get_consumer":{"type":"method","name":"get_consumer","children":[],"call":["OAuth Consumer  new "," options [] to_s downcase to_sym "," options [] to_s downcase "," options [] to_s "," options [] "," options "]}," OAuth CLI AuthorizeCommand get_request_token":{"type":"method","name":"get_request_token","children":[],"call":[" alert ","e request body ","e request ","consumer get_request_token "," options [] "," options "," get_consumer "," get_consumer  get_request_token "," get_ get_consumer  "]}," OAuth CLI AuthorizeCommand _run":{"type":"method","name":"_run","children":[],"call":[" verbosely_get_access_token "," ask_user_for_verifier "," puts ","request_token authorize_url "," options []= "," options ","request_token callback_confirmed? "," get_request_token "," get_request_token  authorize_url "," get_request_token  callback_confirmed? "," get_ get_request_token  "]}," OAuth CLI AuthorizeCommand required_options":{"type":"method","name":"required_options","children":[],"call":[]}}