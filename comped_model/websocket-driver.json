{" WebSocket Driver websocket?":{"type":"method","name":"websocket?","children":[],"call":[]}," WebSocket Driver valid_utf8?":{"type":"method","name":"valid_utf8?","children":[],"call":[]}," WebSocket Driver utf8_string":{"type":"method","name":"utf8_string","children":[],"call":[]}," WebSocket Driver rack":{"type":"method","name":"rack","children":[],"call":[]}," WebSocket Driver client":{"type":"method","name":"client","children":[],"call":[]}," WebSocket Driver encode":{"type":"method","name":"encode","children":[],"call":[]}," WebSocket Driver queue":{"type":"method","name":"queue","children":[],"call":["@queue << "]}," WebSocket Driver open":{"type":"method","name":"open","children":[],"call":[" emit ","OpenEvent  new "," frame ","@queue each "]}," WebSocket Driver close":{"type":"method","name":"close","children":[],"call":[" emit ","CloseEvent  new ","@ready_state == "]}," WebSocket Driver ping":{"type":"method","name":"ping","children":[],"call":[]}," WebSocket Driver binary":{"type":"method","name":"binary","children":[],"call":[]}," WebSocket Driver text":{"type":"method","name":"text","children":[],"call":[" frame ","message encode ","message encoding name == ","message encoding name ","message encoding ","message encoding == ","Driver  encode ","message encode  encode ","Driver  encode  encode ","message encode  encoding name == ","Driver  encode  encoding name == ","message encode  encoding name ","Driver  encode  encoding name ","message encode  encoding ","Driver  encode  encoding ","message encode  encoding == ","Driver  encode  encoding == "]}," WebSocket Driver start":{"type":"method","name":"start","children":[],"call":[" open ","@stage == ","@socket write "," handshake_response ","@ready_state == ","Driver  encode "," fail_handshake ","ProtocolError  new ","Driver  websocket? ","@socket env "," handshake_ handshake_response  "]}," WebSocket Driver state":{"type":"method","name":"state","children":[],"call":["STATES  [] ","@ready_state >= "]}," WebSocket Driver initialize":{"type":"method","name":"initialize","children":[],"call":["Headers  new ","options [] ","Driver  validate_options ","StreamReader  new "]}," WebSocket Driver mask":{"type":"method","name":"mask","children":[],"call":[]}," WebSocket Driver Hybi integer":{"type":"method","name":"integer","children":[],"call":["data << ","8 * ","bytes size - - ","bytes size - ","bytes size ","bytes each_with_index ","buffer bytesize - - ","buffer bytesize - ","buffer bytesize ","buffer each_byte with_index ","buffer each_byte "]}," WebSocket Driver Hybi reset":{"type":"method","name":"reset","children":[],"call":[]}," WebSocket Driver Hybi emit_frame":{"type":"method","name":"emit_frame","children":[],"call":["callback call ","@ping_callbacks delete ","@ping_callbacks [] ","Driver  encode ","OPCODES  [] "," frame "," shutdown ","payload [] ","payload size > ","payload size ","ERRORS  [] ","Driver  valid_utf8? ! ","Driver  valid_utf8? ","ERROR_CODES  include? ","code <= ","code >= ","payload size == ","256 * + ","256 * ","payload size >= ","@buffer concat "," emit ","MessageEvent  new "," fail "," reset ","@mode == ","Mask  mask ","message nil? "," emit_message ","MESSAGE_OPCODES  include? ","frame final ","reason nil? ","bytesize > ","bytesize == ","bytes [] ","bytesize >= ","@message << ","Message  new ","payload bytes to_a ","payload bytes ","payload bytesize ","frame payload= ","@frame masking_key ","frame opcode ","payload unpack first ","payload unpack ","PACK_FORMATS  [] ","PongEvent  new ","PingEvent  new ","reason valid_encoding? ! ","reason valid_encoding? ","@ping_callbacks []  call ","@ping_@ping_callbacks [] s delete ","@ping_@ping_callbacks [] s [] ","Driver  enERRORS  []  ","Driver  en256 * +  ","Driver  enpayload unpack first  ","Mask  mask  [] ","frame payload=  [] ","Mask  mask  size > ","frame payload=  size > ","Mask  mask  size ","frame payload=  size ","ERRORS  []  <= ","256 * +  <= ","payload unpack first  <= ","ERRORS  []  >= ","256 * +  >= ","payload unpack first  >= ","Mask  mask  size == ","frame payload=  size == ","Mask  mask  size >= ","frame payload=  size >= ","Driver  encode  nil? "," emit_Driver  encode  ","payload bytes to_a ize > ","payload bytesize  > ","payload bytes to_a ize == ","payload bytesize  == ","payload bytes to_a  [] ","payload bytes to_a ize >= ","payload bytesize  >= ","@Driver  encode  << ","Message  new  << ","Mask  mask  bytes to_a ","frame payload=  bytes to_a ","payload payload bytes to_a  to_a ","Mask  mask  bytes ","frame payload=  bytes ","payload payload bytes to_a  ","Mask  mask  bytesize ","frame payload=  bytesize ","payload payload bytes to_a ize ","payload payload bytesize  ","frame Mask  mask = ","frame frame payload= = ","frame opERRORS  []  ","frame op256 * +  ","frame oppayload unpack first  ","frame frame opcode  ","Mask  mask  unpack first ","frame payload=  unpack first ","Mask  mask  unpack ","frame payload=  unpack ","Driver  encode  valid_encoding? ! ","Driver  encode  valid_encoding? "]}," WebSocket Driver Hybi parse_extended_length":{"type":"method","name":"parse_extended_length","children":[],"call":[" fail ","@length <= ","FRAGMENTED_OPCODES  include? "," integer ","@length > "," check_frame_length ","@frame masked ","@frame length ","@frame length <= ","MESSAGE_OPCODES  include? ","@frame opcode ","@frame length= ","buffer unpack first ","buffer unpack ","PACK_FORMATS  [] ","buffer bytesize "," integer  <= "," integer  > "]}," WebSocket Driver Hybi parse_length":{"type":"method","name":"parse_length","children":[],"call":["@length == ","@length <= ","data & "," fail ","@masked ! ","(send\n  (lvar :data) :&\n  (const nil :MASK)) == "," check_frame_length ","@length >= ","@frame length_bytes= ","@frame length == ","@frame length ","@frame masked ","@frame length <= ","@frame length >= ","@frame length= ","@frame masked ! ","@frame masked= ","octet & ","(send\n  (lvar :octet) :&\n  (const nil :MASK)) == ","(send\n  (lvar :data) :&\n  (const nil :MASK)) ==  ! "]}," WebSocket Driver Hybi parse_opcode":{"type":"method","name":"parse_opcode","children":[],"call":[" fail ","OPENING_OPCODES  include? ","FRAGMENTED_OPCODES  include? ","OPCODES  values include? ","OPCODES  values ","data & ","(send\n  (lvar :data) :&\n  (const nil :FIN)) == ","(str \"One or more reserved bits are on: reserved1 = \") + + ","rsvs [] ","(str \"One or more reserved bits are on: reserved1 = \") + ","rsvs any? ","(send\n  (lvar :data) :&\n  (lvar :rsv)) == ","(const nil :RSV1) map ","@frame opcode ","@frame final ","MESSAGE_OPCODES  include? ","@frame rsv3 ","@frame rsv2 ","@frame rsv1 ","@extensions valid_frame_rsv? ","@frame opcode= ","@frame rsv3= ","@frame rsv2= ","@frame rsv1= ","@frame final= ","Frame  new ","octet & ","(send\n  (lvar :octet) :&\n  (const nil :FIN)) == ","(send\n  (lvar :octet) :&\n  (lvar :rsv)) == ","Frame  new  opcode ","Frame  new  final ","Frame  new  rsv3 ","Frame  new  rsv2 ","Frame  new  rsv1 ","Frame  new  opcode= ","Frame  new  rsv3= ","Frame  new  rsv2= ","Frame  new  rsv1= ","Frame  new  final= "]}," WebSocket Driver Hybi fail":{"type":"method","name":"fail","children":[],"call":[" shutdown ","ERRORS  [] "," emit ","ProtocolError  new ","@ready_state > "]}," WebSocket Driver Hybi shutdown":{"type":"method","name":"shutdown","children":[],"call":[" emit ","CloseEvent  new "," frame ","@extensions close ","@ready_state < ","ProtocolError  new "]}," WebSocket Driver Hybi handshake_response":{"type":"method","name":"handshake_response","children":[],"call":["(send\n  (lvar :headers) :+\n  (array\n    (str \"\")\n    (str \"\"))) join ","headers + ","headers << ","supported include? ","protos find ","protos split ","String  === ","@socket env [] ","@socket env ","Hybi  generate_accept ","(send\n  (lvar :headers) :+\n  (array\n    (send\n      (ivar :@headers) :to_s)\n    (str \"\"))) join ","@headers to_s ","headers join ","@headers []= ","@extensions generate_response "," fail ","e message ","error message "," raise ","ProtocolError  new ","version == ","protos split  find ","@socket env []  find ","protos split  split ","@socket env []  split ","Hybi  generate_Hybi  generate_accept  ","@@extensions generate_response  generate_response ","@socket env []  == "]}," WebSocket Driver Hybi close":{"type":"method","name":"close","children":[],"call":[" frame "," emit ","CloseEvent  new ","ERRORS  [] ","@ready_state == ","@ready_state <= "]}," WebSocket Driver Hybi ping":{"type":"method","name":"ping","children":[],"call":[" frame ","@ping_callbacks []= "]}," WebSocket Driver Hybi binary":{"type":"method","name":"binary","children":[],"call":[" frame "]}," WebSocket Driver Hybi text":{"type":"method","name":"text","children":[],"call":[" frame "]}," WebSocket Driver Hybi frame":{"type":"method","name":"frame","children":[],"call":["@socket write ","Driver  encode ","frame concat ","Mask  mask ","frame []= "," rand ","(send\n  (begin\n    (send\n      (lvar :code) :>>\n      (int 8))) :&\n  (const nil :BYTE)) + ","code & ","(send\n  (lvar :code) :>>\n  (int 8)) & ","code >> ","length & ","(send\n  (lvar :length) :>>\n  (int 8)) & ","length >> ","(send\n  (lvar :length) :>>\n  (int 16)) & ","(send\n  (lvar :length) :>>\n  (int 24)) & ","(send\n  (lvar :length) :>>\n  (int 32)) & ","(send\n  (lvar :length) :>>\n  (int 40)) & ","(send\n  (lvar :length) :>>\n  (int 48)) & ","(send\n  (lvar :length) :>>\n  (int 56)) & ","masked | ","length <= ","FIN  | ","Array  new ","header + ","buffer size + ","buffer size ","data bytes to_a ","data bytes ","data respond_to? ","OPCODES  [] ","String  === ","data to_s ","Array  === ","@ready_state == "," queue ","@ready_state <= "," send_frame ","frame payload= ","message data ","frame length= ","message data bytesize ","frame masking_key= ","SecureRandom  random_bytes ","frame masked ","frame masked= ","@masking ! ! ","@masking ! ","frame opcode= ","message opcode ","frame rsv3= ","message rsv3 ","frame rsv2= ","message rsv2 ","frame rsv1= ","message rsv1 ","frame final= ","@extensions process_outgoing_message ","MESSAGE_OPCODES  include? ","message data= ","payload pack ","message opcode= ","message rsv1= ","message rsv2= ","message rsv3= ","Frame  new ","Message  new "," fail ","error message ","(lvar :code) pack bytes to_a + ","(lvar :code) pack bytes to_a ","(lvar :code) pack bytes ","(lvar :code) pack ","PACK_FORMATS  [] ","buffer bytes to_a ","buffer bytes ","Array  new  concat ","Frame  new  concat ","Array  new  []= ","Frame  new  []= ","buffer size +  & ","(send\n  (lvar :buffer size + ) :>>\n  (int 8)) & ","buffer size +  >> ","(send\n  (lvar :buffer size + ) :>>\n  (int 16)) & ","(send\n  (lvar :buffer size + ) :>>\n  (int 24)) & ","(send\n  (lvar :buffer size + ) :>>\n  (int 32)) & ","(send\n  (lvar :buffer size + ) :>>\n  (int 40)) & ","(send\n  (lvar :buffer size + ) :>>\n  (int 48)) & ","(send\n  (lvar :buffer size + ) :>>\n  (int 56)) & ","buffer size +  <= ","Mask  mask  size + ","(send\n  (begin\n    (send\n      (lvar :code) :>>\n      (int 8))) :&\n  (const nil :BYTE)) +  size + ","data bytes to_a  size + ","Mask  mask  size ","(send\n  (begin\n    (send\n      (lvar :code) :>>\n      (int 8))) :&\n  (const nil :BYTE)) +  size ","data bytes to_a  size ","Driver  encode  bytes to_a ","data to_s  bytes to_a ","Driver  encode  bytes ","data to_s  bytes ","Driver  encode  respond_to? ","data to_s  respond_to? ","Driver  encode  to_s ","data to_s  to_s "," send_Array  new  "," send_Frame  new  ","Array  new  payload= ","Frame  new  payload= ","frame data bytes to_a = ","frame (lvar :code) pack bytes to_a + = ","frame buffer bytes to_a = ","frame (lvar :code) pack = ","frame Driver  encode = ","message Driver  encode  ","message data to_s  ","@extensions process_outgoing_message  data ","Message  new  data ","Array  new  length= ","Frame  new  length= ","frame buffer size + = ","message Driver  encode  bytesize ","message data to_s  bytesize ","@extensions process_outgoing_message  data bytesize ","Message  new  data bytesize ","Array  new  masking_key= ","Frame  new  masking_key= ","Array  new  masked ","Frame  new  masked ","Array  new  masked= ","Frame  new  masked= ","Array  new  opcode= ","Frame  new  opcode= ","frame OPCODES  [] = ","message OPCODES  []  ","@extensions process_outgoing_message  opcode ","Message  new  opcode ","Array  new  rsv3= ","Frame  new  rsv3= ","@extensions process_outgoing_message  rsv3 ","Message  new  rsv3 ","Array  new  rsv2= ","Frame  new  rsv2= ","@extensions process_outgoing_message  rsv2 ","Message  new  rsv2 ","Array  new  rsv1= ","Frame  new  rsv1= ","@extensions process_outgoing_message  rsv1 ","Message  new  rsv1 ","Array  new  final= ","Frame  new  final= ","@extensions process_outgoing_@extensions process_outgoing_message  ","@extensions process_outgoing_Message  new  ","message Driver  encode = ","message data to_s = ","@extensions process_outgoing_message  data= ","Message  new  data= ","data bytes to_a  pack ","(lvar :code) pack bytes to_a +  pack ","buffer bytes to_a  pack ","(lvar :code) pack  pack ","Driver  encode  pack ","message OPCODES  [] = ","@extensions process_outgoing_message  opcode= ","Message  new  opcode= ","@extensions process_outgoing_message  rsv1= ","Message  new  rsv1= ","@extensions process_outgoing_message  rsv2= ","Message  new  rsv2= ","@extensions process_outgoing_message  rsv3= ","Message  new  rsv3= ","error @extensions process_outgoing_message  ","error Message  new  ","Mask  mask  bytes to_a ","(send\n  (begin\n    (send\n      (lvar :code) :>>\n      (int 8))) :&\n  (const nil :BYTE)) +  bytes to_a ","data bytes to_a  bytes to_a ","Mask  mask  bytes ","(send\n  (begin\n    (send\n      (lvar :code) :>>\n      (int 8))) :&\n  (const nil :BYTE)) +  bytes ","data bytes to_a  bytes "]}," WebSocket Driver Hybi parse":{"type":"method","name":"parse","children":[],"call":[" emit_frame ","@reader read "," parse_extended_length "," parse_length ","buffer [] "," parse_opcode ","@reader put ","data bytes to_a ","data bytes ","data respond_to? ","@frame length ","@frame masking_key= ","@frame length_bytes ","buffer getbyte ","@reader read  [] ","data bytes to_a  bytes to_a ","data bytes to_a  bytes ","data bytes to_a  respond_to? ","@reader read  getbyte "]}," WebSocket Driver Hybi version":{"type":"method","name":"version","children":[],"call":["@socket env [] ","@socket env "]}," WebSocket Driver Hybi initialize":{"type":"method","name":"initialize","children":[],"call":["options [] ","@protocols strip split ","@protocols strip ","String  === ","StreamReader  new "," reset ","@protocols include? ","protos find ","protos split ","@socket env [] ","@socket env ","@socket respond_to? ","@headers []= ","Hybi  generate_accept "," WebSocket Extensions  new ","@protocols strip split  strip split ","@protocols strip split  strip ","@protocols strip split  include? ","protos split  find ","@socket env []  find ","protos split  split ","@socket env []  split "]}," WebSocket Driver Hybi generate_accept":{"type":"method","name":"generate_accept","children":[],"call":[]}," WebSocket Driver Hybi StreamReader read_bytes":{"type":"method","name":"read_bytes","children":[],"call":["@queue shift ","length > ","@queue size "]}," WebSocket Driver Hybi StreamReader put":{"type":"method","name":"put","children":[],"call":["@queue concat ","bytes size > ","bytes size ","@buffer << ","Driver  encode ","string bytesize > ","string bytesize "]}," WebSocket Driver Hybi StreamReader read":{"type":"method","name":"read","children":[],"call":[" read_bytes ","@buffer byteslice ","buffer_size - ","length > ","@buffer bytesize ","@buffer byteslice  byteslice ","@buffer bytesize  - ","@buffer byteslice  bytesize "]}," WebSocket Driver Hybi StreamReader initialize":{"type":"method","name":"initialize","children":[],"call":["Driver  encode "]}," WebSocket Driver EventEmitter listener_count":{"type":"method","name":"listener_count","children":[],"call":["list size ","@listeners [] ","event to_s ","@listeners [] size ","@listeners has_key? ","@listeners []  size ","@@listeners [] eners [] ","@@listeners [] eners [] size ","@@listeners [] eners has_key? "]}," WebSocket Driver EventEmitter emit":{"type":"method","name":"emit","children":[],"call":["listener call ","@listeners [] each ","@listeners [] ","event to_s ","@listeners [] dup each ","@listeners [] dup "]}," WebSocket Driver EventEmitter remove_all_listeners":{"type":"method","name":"remove_all_listeners","children":[],"call":["@listeners clear ","@listeners delete ","event to_s "]}," WebSocket Driver EventEmitter remove_listener":{"type":"method","name":"remove_listener","children":[],"call":["@listeners [] delete ","@listeners [] ","event to_s "]}," WebSocket Driver EventEmitter on":{"type":"method","name":"on","children":[],"call":[" add_listener "]}," WebSocket Driver EventEmitter add_listener":{"type":"method","name":"add_listener","children":[],"call":["@listeners [] << ","@listeners [] ","event to_s "]}," WebSocket Driver EventEmitter initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","Hash  new "]}," WebSocket Driver Client validate_handshake":{"type":"method","name":"validate_handshake","children":[],"call":[" open "," fail_handshake ","@protocols include? ","protocol == ","accept == ","connection downcase != ","connection downcase ","connection == ","upgrade downcase != ","upgrade downcase ","upgrade == ","response [] ","response code ","response code to_i == ","response code to_i ","Net HTTPResponse  read_new ","Net BufferedIO  new ","StringIO  new ","Driver  encode ","@http [] ","@http code ","@http code == ","Headers  new ","@http headers ","e message ","@extensions activate ","@headers [] ","error message ","Net HTTPResponse  read_new  [] ","Net HTTPResponse  read_new  code ","Net HTTPResponse  read_new  code to_i == ","Net HTTPResponse  read_new  code to_i ","Headers  new  [] "]}," WebSocket Driver Client fail_handshake":{"type":"method","name":"fail_handshake","children":[],"call":[" emit ","CloseEvent  new ","ERRORS  [] ","ProtocolError  new "]}," WebSocket Driver Client handshake_request":{"type":"method","name":"handshake_request","children":[],"call":["(send\n  (lvar :headers) :+\n  (array\n    (str \"\")\n    (str \"\"))) join ","headers + ","headers << ","@protocols * ","@protocols size > ","@protocols size ","uri query ","uri path ","uri path == ","uri host + ","uri port ","uri host ","URI  parse ","@socket url ","(send\n  (lvar :headers) :+\n  (array\n    (send\n      (ivar :@headers) :to_s)\n    (str \"\"))) join ","@headers to_s ","Base64  encode64 gsub ","Base64  encode64 ","(send\n  (lvar :uri) :user) * ","uri password ","uri user ","headers join ","@headers []= ","@extensions generate_offer ","URI  parse  query ","uri uri path  ","URI  parse  path ","uri uri path  == ","URI  parse  path == ","uri uri host +  + ","URI  parse  host + ","URI  parse  port ","uri uri host +  ","URI  parse  host ","(send\n  (lvar :URI  parse ) :user) * ","URI  parse  password ","URI  parse  user ","@@extensions generate_offer  generate_offer "]}," WebSocket Driver Client parse":{"type":"method","name":"parse","children":[],"call":[" parse ","@ready_state == ","message << "," validate_handshake ","@buffer [] == ","@buffer [] ","@buffer << ","buffer each_byte ","@ready_state > ","@http body ","@http complete? "," fail_handshake ","@http error? ","@http parse "," open "]}," WebSocket Driver Client start":{"type":"method","name":"start","children":[],"call":["@socket write "," handshake_request ","@ready_state == ","Driver  encode "]}," WebSocket Driver Client version":{"type":"method","name":"version","children":[],"call":[]}," WebSocket Driver Client initialize":{"type":"method","name":"initialize","children":[],"call":["Hybi  generate_accept ","Client  generate_key ","HTTP Response  new ","@headers []= ","Basic  + ","Base64  encode64 gsub ","Base64  encode64 ","(send\n  (lvar :uri) :user) * ","uri password ","uri user ","@protocols * ","@protocols size > ","@protocols size ","path + ","? + ","uri query ","uri path ","uri path == ","uri host + ","uri port ","uri host ","URI  parse ","@socket url ","Base64  strict_encode64 "," raise ","socket url ","VALID_SCHEMES  include? ","uri scheme ","Driver  host_header ","(send\n  (lvar :URI  parse ) :user) * ","URI  parse  password ","URI  parse  user ","uri path  + ","URI  parse  query ","uri uri path  ","URI  parse  path ","uri uri path  == ","URI  parse  path == ","uri uri host +  + ","URI  parse  host + ","URI  parse  port ","uri uri host +  ","URI  parse  host ","URI  parse  scheme ","Driver  uri host + _header "]}," WebSocket Driver Client generate_key":{"type":"method","name":"generate_key","children":[],"call":[]}," WebSocket HTTP normalize_header":{"type":"method","name":"normalize_header","children":[],"call":[]}," WebSocket HTTP Response start_line":{"type":"method","name":"start_line","children":[],"call":["parsed [] to_i ","parsed [] ","line scan first ","line scan ","line scan first  [] to_i ","line scan first  [] "]}," WebSocket HTTP Response body":{"type":"method","name":"body","children":[],"call":["@buffer pack "]}," WebSocket HTTP Response []":{"type":"method","name":"[]","children":[],"call":["@headers [] ","HTTP  normalize_header "]}," WebSocket HTTP Request complete":{"type":"method","name":"complete","children":[],"call":["@env []= ","uri port to_s ","uri port ","uri host ","URI  parse ","@env [] ","RESERVED_HEADERS  include? ","name upcase gsub ","name upcase ","@headers each ","URI  parse  port to_s ","URI  parse  port ","URI  parse  host ","uri @env []  "]}," WebSocket HTTP Request start_line":{"type":"method","name":"start_line","children":[],"call":["target [] ","parsed [] ","parsed [] scan first ","parsed [] scan ","line scan first ","line scan ","parsed [] scan first  [] ","line scan first  [] ","line scan first  [] scan first ","line scan first  [] scan "]}," WebSocket HTTP Headers string_buffer":{"type":"method","name":"string_buffer","children":[],"call":["@buffer pack "]}," WebSocket HTTP Headers header_line":{"type":"method","name":"header_line","children":[],"call":["@headers []= ","parsed [] strip ","parsed [] ","HTTP  normalize_header ","line scan first ","line scan ","@headers [] << << ","@headers [] << ","@headers [] ","@headers has_key? ","line scan first  [] strip ","line scan first  [] ","@headers has_HTTP  normalize_header ? "]}," WebSocket HTTP Headers error":{"type":"method","name":"error","children":[],"call":[]}," WebSocket HTTP Headers complete":{"type":"method","name":"complete","children":[],"call":[]}," WebSocket HTTP Headers parse":{"type":"method","name":"parse","children":[],"call":["@env []= ","StringIO  new "," string_buffer "," error ","@buffer size > ","@buffer size ","@stage < ","@buffer << ","@stage >= "," header_line "," start_line "," complete ","@stage == ","@buffer empty? ","@buffer pop ","@buffer last == ","@buffer last ","byte == ","data each_byte ","octet == ","chunk each_byte "]}," WebSocket HTTP Headers error?":{"type":"method","name":"error?","children":[],"call":["@stage == "]}," WebSocket HTTP Headers complete?":{"type":"method","name":"complete?","children":[],"call":["@stage == "]}," WebSocket HTTP Headers initialize":{"type":"method","name":"initialize","children":[],"call":[]}," WebSocket Driver server":{"type":"method","name":"server","children":[],"call":[]}," WebSocket Driver set_header":{"type":"method","name":"set_header","children":[],"call":["@headers []= ","@ready_state <= "]}," WebSocket Driver Server open":{"type":"method","name":"open","children":[],"call":["@delegate __send__ ","message [] ","@queue each "]}," WebSocket Driver Server fail_request":{"type":"method","name":"fail_request","children":[],"call":[" emit ","CloseEvent  new "," message ","Hybi ERRORS  [] ","ProtocolError  new "]}," WebSocket Driver Server write":{"type":"method","name":"write","children":[],"call":["@socket write ","Driver  encode "]}," WebSocket Driver Server parse":{"type":"method","name":"parse","children":[],"call":[" emit ","ConnectEvent  new ","@delegate on ","EVENTS  each "," open ","Driver  rack ","@http complete? "," fail_request ","@http error? ","@http parse ","@delegate parse ","Driver  rack  on ","Driver  rack  parse "]}," WebSocket Driver Server url":{"type":"method","name":"url","children":[],"call":["url << ","e [] ","e [] == "," env "," env  [] "," env  [] == ","  env nv "]}," WebSocket Driver Server env":{"type":"method","name":"env","children":[],"call":["@http env ","@http complete? "]}," WebSocket Driver Server initialize":{"type":"method","name":"initialize","children":[],"call":["HTTP Request  new "]}," WebSocket Driver Headers to_s":{"type":"method","name":"to_s","children":[],"call":["@lines join "]}," WebSocket Driver Headers to_h":{"type":"method","name":"to_h","children":[],"call":["@raw dup "]}," WebSocket Driver Headers inspect":{"type":"method","name":"inspect","children":[],"call":["@raw inspect "]}," WebSocket Driver Headers []=":{"type":"method","name":"[]=","children":[],"call":["@lines << ","value to_s strip ","value to_s ","name strip ","ALLOWED_DUPLICATES  include? ","@sent add? ","HTTP  normalize_header ","value nil? "]}," WebSocket Driver Headers []":{"type":"method","name":"[]","children":[],"call":["@received [] ","HTTP  normalize_header "]}," WebSocket Driver Headers initialize":{"type":"method","name":"initialize","children":[],"call":["@received []= ","HTTP  normalize_header ","@raw each ","Set  new "," clear "]}," WebSocket Driver EventEmitter listeners":{"type":"method","name":"listeners","children":[],"call":["@listeners [] ","event to_s "]}," WebSocket Driver Hybi check_frame_length":{"type":"method","name":"check_frame_length","children":[],"call":[" fail ","@buffer size + > ","@buffer size + ","@buffer size ","length + > ","length + ","@frame length ","@message data bytesize ","@message data ","@message data bytesize  + > ","@message data bytesize  + ","@frame @message data bytesize  "]}," WebSocket Driver Proxy parse":{"type":"method","name":"parse","children":[],"call":[" emit ","ProtocolError  new ","@socket url ","@status == ","Headers  new ","@http headers ","@http code ","@http complete? ","@http parse ","ConnectEvent  new ","@http code  == "]}," WebSocket Driver Proxy start":{"type":"method","name":"start","children":[],"call":["@socket write ","headers join ","@headers to_s ","@origin host ","PORTS  [] ","@origin scheme ","@origin port ","@state == ","Driver  encode "]}," WebSocket Driver Proxy set_header":{"type":"method","name":"set_header","children":[],"call":["@headers []= ","@state == "]}," WebSocket Driver Proxy initialize":{"type":"method","name":"initialize","children":[],"call":["@headers []= ","Basic  + ","Base64  encode64 gsub ","Base64  encode64 ","(send\n  (ivar :@url) :user) * ","@url password ","@url user ","@origin host + ","@origin port ","@origin host ","Headers  new ","URI  parse ","@socket url ","client instance_variable_get ","HTTP Response  new ","Base64  strict_encode64 ","Driver  host_header ","Headers  new  []= ","(send\n  (ivar :URI  parse ) :user) * ","URI  parse  password ","URI  parse  user ","URI  parse  host + ","URI  parse  port ","URI  parse  host ","client instance_variable_get  url "]}," WebSocket Driver Headers clear":{"type":"method","name":"clear","children":[],"call":["Set  new "]}," WebSocket Driver Client proxy":{"type":"method","name":"proxy","children":[],"call":["Proxy  new "]}," WebSocket Driver add_extension":{"type":"method","name":"add_extension","children":[],"call":[]}," WebSocket Driver Hybi emit_message":{"type":"method","name":"emit_message","children":[],"call":[" fail ","e message "," emit ","MessageEvent  new ","payload bytes to_a ","payload bytes ","OPCODES  [] ","Driver  encode ","message opcode ","message data ","@extensions process_incoming_message ","error message ","payload valid_encoding? ","e @extensions process_incoming_message  ","payload bytes to_a  bytes to_a ","Driver  encode  bytes to_a ","message data  bytes to_a ","payload bytes to_a  bytes ","Driver  encode  bytes ","message data  bytes ","@extensions process_incoming_message  opcode ","@extensions process_incoming_message  data ","@extensions process_incoming_@extensions process_incoming_message  ","error @extensions process_incoming_message  ","payload bytes to_a  valid_encoding? ","Driver  encode  valid_encoding? ","message data  valid_encoding? "]}," WebSocket Driver Hybi send_frame":{"type":"method","name":"send_frame","children":[],"call":[" fail ","e message ","@socket write ","buffer pack ","buffer concat ","frame payload bytes to_a ","frame payload bytes ","frame payload ","Mask  mask bytes to_a ","Mask  mask bytes ","Mask  mask ","frame masking_key ","frame masking_key bytes to_a ","frame masking_key bytes ","frame masked ","buffer []= ","length & ","(send\n  (lvar :length) :>>\n  (int 8)) & ","length >> ","(send\n  (lvar :length) :>>\n  (int 16)) & ","(send\n  (lvar :length) :>>\n  (int 24)) & ","(send\n  (lvar :length) :>>\n  (int 32)) & ","(send\n  (lvar :length) :>>\n  (int 40)) & ","(send\n  (lvar :length) :>>\n  (int 48)) & ","(send\n  (lvar :length) :>>\n  (int 56)) & ","masked | ","length <= ","(if\n  (send\n    (lvar :frame) :final)\n  (const nil :FIN)\n  (int 0)) | | | | ","frame opcode ","(if\n  (send\n    (lvar :frame) :final)\n  (const nil :FIN)\n  (int 0)) | | | ","frame rsv3 ","(if\n  (send\n    (lvar :frame) :final)\n  (const nil :FIN)\n  (int 0)) | | ","frame rsv2 ","(if\n  (send\n    (lvar :frame) :final)\n  (const nil :FIN)\n  (int 0)) | ","frame rsv1 ","frame final ","header + ","frame length ","(lvar :length) pack bytes to_a ","(lvar :length) pack bytes ","(lvar :length) pack ","PACK_FORMATS  [] ","values pack ","format << ","values << ","values []= ","frame length  & ","(send\n  (lvar :frame length ) :>>\n  (int 8)) & ","frame length  >> ","(send\n  (lvar :frame length ) :>>\n  (int 16)) & ","(send\n  (lvar :frame length ) :>>\n  (int 24)) & ","(send\n  (lvar :frame length ) :>>\n  (int 32)) & ","(send\n  (lvar :frame length ) :>>\n  (int 40)) & ","(send\n  (lvar :frame length ) :>>\n  (int 48)) & ","(send\n  (lvar :frame length ) :>>\n  (int 56)) & ","frame length  <= ","frame frame length  ","(lvar :frame length ) pack bytes to_a ","(lvar :frame length ) pack bytes ","(lvar :frame length ) pack "]}," WebSocket Driver Hybi add_extension":{"type":"method","name":"add_extension","children":[],"call":["@extensions add "]}," WebSocket Driver Hybi Message <<":{"type":"method","name":"<<","children":[],"call":["@data << ","frame payload ","frame opcode ","frame rsv3 ","frame rsv2 ","frame rsv1 "]}," WebSocket Driver Hybi Message initialize":{"type":"method","name":"initialize","children":[],"call":["Driver  encode ","String  new force_encoding ","String  new "]}," WebSocket Driver validate_options":{"type":"method","name":"validate_options","children":[],"call":[]}," WebSocket Driver pong":{"type":"method","name":"pong","children":[],"call":[]}," WebSocket Driver StreamReader prune":{"type":"method","name":"prune","children":[],"call":["@buffer byteslice ","buffer_size - ","Driver  encode ","@offset > ","@buffer bytesize ","String  new force_encoding ","String  new ","@buffer byteslice  byteslice ","Driver  encode  byteslice ","String  new force_encoding  byteslice ","@buffer bytesize  - ","@buffer byteslice  bytesize ","Driver  encode  bytesize ","String  new force_encoding  bytesize "]}," WebSocket Driver StreamReader each_byte":{"type":"method","name":"each_byte","children":[],"call":["@buffer each_byte "," prune "]}," WebSocket Driver StreamReader read":{"type":"method","name":"read","children":[],"call":[" prune ","@offset > ","chunk bytesize ","@buffer byteslice ","(send\n  (ivar :@offset) :+\n  (lvar :length)) > ","@buffer bytesize ","@offset + ","@buffer byteslice  bytesize "]}," WebSocket Driver StreamReader put":{"type":"method","name":"put","children":[],"call":["@buffer << ","Driver  encode ","buffer bytesize > ","buffer bytesize ","chunk bytesize > ","chunk bytesize ","chunk force_encoding "]}," WebSocket Driver StreamReader initialize":{"type":"method","name":"initialize","children":[],"call":["Driver  encode ","String  new force_encoding ","String  new "]}," WebSocket Driver Hybi pong":{"type":"method","name":"pong","children":[],"call":[" frame "]}," WebSocket Driver Draft76 spaces_in_key":{"type":"method","name":"spaces_in_key","children":[],"call":["key scan size ","key scan "]}," WebSocket Driver Draft76 number_from_key":{"type":"method","name":"number_from_key","children":[],"call":["key scan join to_i ","key scan join ","key scan ","number to_i ","number == ","key scan join  to_i ","key scan join  == "]}," WebSocket Driver Draft76 parse_leading_byte":{"type":"method","name":"parse_leading_byte","children":[],"call":["octet == "]}," WebSocket Driver Draft76 send_handshake_body":{"type":"method","name":"send_handshake_body","children":[],"call":[" parse ","@body [] ","@body bytesize > ","@body bytesize "," open ","@socket write ","Driver  encode "," handshake_signature "," handshake_ handshake_signature  "]}," WebSocket Driver Draft76 handshake_signature":{"type":"method","name":"handshake_signature","children":[],"call":["Digest MD5  digest ","(lvar :value1) pack "," number_from_key / "," spaces_in_key "," number_from_key ","env [] ","@socket env ","@body [] ","@body bytesize >= ","@body bytesize ","(send\n  (ivar :@key_values) :+\n  (array\n    (lvar :head))) pack ","@key_values + ","(lvar : number_from_key / ) pack ","@socket env  [] ","@socket @socket env  ","(send\n  (ivar :@key_values) :+\n  (array\n    (lvar :@body [] ))) pack "]}," WebSocket Driver Draft76 handshake_response":{"type":"method","name":"handshake_response","children":[],"call":["headers join ","@headers to_s ","number2 / ","number1 / "," close "," emit ","ProtocolError  new ","number2 % != ","number2 % ","number1 % != ","number1 % "," spaces_in_key "," number_from_key ","env [] ","@socket env "," raise "," number_from_key  / "," number_from_key  % != "," number_from_key  % ","@socket env  [] ","@socket @socket env  "]}," WebSocket Driver Draft76 close":{"type":"method","name":"close","children":[],"call":[" emit ","CloseEvent  new ","@socket write ","(int 255) pack ","@ready_state == "]}," WebSocket Driver Draft76 start":{"type":"method","name":"start","children":[],"call":[" send_handshake_body "]}," WebSocket Driver Draft76 version":{"type":"method","name":"version","children":[],"call":[]}," WebSocket Driver Draft76 initialize":{"type":"method","name":"initialize","children":[],"call":["@headers []= ","@socket url ","@socket env [] ","@socket env ","@headers clear ","Driver  encode ","input read ","(if\n  (lvar :input)\n  (send\n    (lvar :input) :read)\n  (send\n    (const nil :String) :new\n    (str \"\"))) force_encoding ","String  new ","input force_encoding ","input dup ","input frozen? ","(or\n  (send\n    (send\n      (ivar :@socket) :env) :[]\n    (str \"rack.input\"))\n  (send\n    (const nil :StringIO) :new\n    (str \"\"))) read ","StringIO  new ","@socket env []  read ","input dup  read ","(or\n  (send\n    (send\n      (ivar :@socket) :env) :[]\n    (str \"rack.input\"))\n  (send\n    (const nil :StringIO) :new\n    (str \"\"))) read  read ","(if\n  (lvar :@socket env [] )\n  (send\n    (lvar :@socket env [] ) :read)\n  (send\n    (const nil :String) :new\n    (str \"\"))) force_encoding ","(if\n  (lvar :input dup )\n  (send\n    (lvar :input dup ) :read)\n  (send\n    (const nil :String) :new\n    (str \"\"))) force_encoding ","(if\n  (lvar :(or\n  (send\n    (send\n      (ivar :@socket) :env) :[]\n    (str \"rack.input\"))\n  (send\n    (const nil :StringIO) :new\n    (str \"\"))) read )\n  (send\n    (lvar :(or\n  (send\n    (send\n      (ivar :@socket) :env) :[]\n    (str \"rack.input\"))\n  (send\n    (const nil :StringIO) :new\n    (str \"\"))) read ) :read)\n  (send\n    (const nil :String) :new\n    (str \"\"))) force_encoding ","@socket env []  force_encoding ","input dup  force_encoding ","(or\n  (send\n    (send\n      (ivar :@socket) :env) :[]\n    (str \"rack.input\"))\n  (send\n    (const nil :StringIO) :new\n    (str \"\"))) read  force_encoding ","@socket env []  dup ","input dup  dup ","(or\n  (send\n    (send\n      (ivar :@socket) :env) :[]\n    (str \"rack.input\"))\n  (send\n    (const nil :StringIO) :new\n    (str \"\"))) read  dup ","@socket env []  frozen? ","input dup  frozen? ","(or\n  (send\n    (send\n      (ivar :@socket) :env) :[]\n    (str \"rack.input\"))\n  (send\n    (const nil :StringIO) :new\n    (str \"\"))) read  frozen? ","(or\n  (send\n    (send\n      (ivar :@socket) :env) :[]\n    (str \"rack.@socket env [] \"))\n  (send\n    (const nil :StringIO) :new\n    (str \"\"))) read ","(or\n  (send\n    (send\n      (ivar :@socket) :env) :[]\n    (str \"rack.input dup \"))\n  (send\n    (const nil :StringIO) :new\n    (str \"\"))) read ","(or\n  (send\n    (send\n      (ivar :@socket) :env) :[]\n    (str \"rack.(or\n  (send\n    (send\n      (ivar :@socket) :env) :[]\n    (str \"rack.input\"))\n  (send\n    (const nil :StringIO) :new\n    (str \"\"))) read \"))\n  (send\n    (const nil :StringIO) :new\n    (str \"\"))) read "]}," WebSocket Driver Draft75 parse_leading_byte":{"type":"method","name":"parse_leading_byte","children":[],"call":["(send\n  (lvar :octet) :&\n  (int 128)) == ","octet & "]}," WebSocket Driver Draft75 handshake_response":{"type":"method","name":"handshake_response","children":[],"call":["headers join ","@headers to_s "]}," WebSocket Driver Draft75 frame":{"type":"method","name":"frame","children":[],"call":["@socket write ","(int 0) pack "," queue ","@ready_state == "]}," WebSocket Driver Draft75 parse":{"type":"method","name":"parse","children":[],"call":[" close ","@buffer size > ","@buffer size ","@buffer << ","@skipped == "," emit ","MessageEvent  new ","Driver  encode ","octet == ","@length zero? ","(send\n  (lvar :octet) :&\n  (int 128)) != ","octet & ","(send\n  (lvar :octet) :&\n  (int 127)) + ","128 * "," parse_leading_byte "," send_handshake_body ","@body << ","@reader each_byte ","@reader put ","@ready_state > ","(send\n  (lvar :octet) :&\n  (int 127)) +  zero? "]}," WebSocket Driver Draft75 close":{"type":"method","name":"close","children":[],"call":[" emit ","CloseEvent  new ","@ready_state == "]}," WebSocket Driver Draft75 version":{"type":"method","name":"version","children":[],"call":[]}," WebSocket Driver Draft75 initialize":{"type":"method","name":"initialize","children":[],"call":["@headers []= ","@socket url ","@socket env [] ","@socket env "]}," WebSocket Mask mask":{"type":"method","name":"mask","children":[],"call":[]}," WebSocket Driver fail":{"type":"method","name":"fail","children":[],"call":[" close "," emit ","ProtocolError  new "]}," WebSocket Driver fail_handshake":{"type":"method","name":"fail_handshake","children":[],"call":[" fail ","error message ","@socket write ","headers join ","headers to_s ","headers []= ","error message bytesize ","Headers  new ","Headers  new  join ","Headers  new  to_s ","Headers  new  []= "]}," WebSocket Driver host_header":{"type":"method","name":"host_header","children":[],"call":[]}}