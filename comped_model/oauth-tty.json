{" OAuth TTY Commands VersionCommand run":{"type":"method","name":"run","children":[],"call":[" puts "]}," OAuth TTY Commands SignCommand xmpp_output":{"type":"method","name":"xmpp_output","children":[],"call":["request oauth_version ","request oauth_nonce ","request oauth_timestamp ","request oauth_signature ","request oauth_signature_method ","request oauth_token ","request oauth_consumer_key "]}," OAuth TTY Commands SignCommand puts_verbose_request":{"type":"method","name":"puts_verbose_request","children":[],"call":[" puts ","OAuth Helper  escape ","request oauth_signature ","request oauth_header "," options [] "," options ","request signed_uri "," xmpp_output "," xmpp? ","request signature_base_string ","request normalized_parameters ","request uri ","request method "]}," OAuth TTY Commands SignCommand puts_verbose_parameters":{"type":"method","name":"puts_verbose_parameters","children":[],"call":[" puts ","(lvar :k) join ","request non_oauth_parameters each ","request non_oauth_parameters ","request non_oauth_parameters any? ","request oauth_parameters each ","request oauth_parameters "]}," OAuth TTY Commands SignCommand _run":{"type":"method","name":"_run","children":[],"call":[" puts ","request oauth_signature "," puts_verbose_request "," verbose? ","request sign! "," options [] "," options "," puts_verbose_parameters ","OAuth RequestProxy  proxy "," parameters ","OAuth RequestProxy  proxy  oauth_signature "," puts_verbose_OAuth RequestProxy  proxy  ","OAuth RequestProxy  proxy  sign! "]}," OAuth TTY Commands SignCommand required_options":{"type":"method","name":"required_options","children":[],"call":[]}," OAuth TTY Commands QueryCommand _run":{"type":"method","name":"_run","children":[],"call":[" puts ","response body ","response message ","response code ","access_token request ","uri to_s "," options [] to_s downcase to_sym "," options [] to_s downcase "," options [] to_s "," options [] "," options ","uri query= ","(send\n  (lvar :uri) :query) compact * ","(send\n  (lvar :uri) :query) compact ","uri query ","(send\n  (send nil :Array\n    (lvar :v)) :map) * ","OAuth Helper  escape "," Array map "," Array "," parameters map "," parameters ","URI  parse ","OAuth AccessToken  new ","OAuth Consumer  new ","access_token request  body ","access_token request  message ","access_token request  code ","OAuth AccessToken  new  request ","URI  parse  to_s ","URI  parse  query= ","(send\n  (lvar :URI  parse ) :query) compact * ","(send\n  (lvar :URI  parse ) :query) compact ","URI  parse  query "]}," OAuth TTY Commands QueryCommand required_options":{"type":"method","name":"required_options","children":[],"call":[]}," OAuth TTY Commands HelpCommand run":{"type":"method","name":"run","children":[],"call":[" puts "]}," OAuth TTY Commands AuthorizeCommand verbosely_get_access_token":{"type":"method","name":"verbosely_get_access_token","children":[],"call":[" alert ","e request body ","e request "," puts ","k is_a? ","access_token params each ","access_token params ","request_token get_access_token ","request_token get_access_token  params each ","request_token get_access_token  params ","request_token get_request_token get_access_token  "]}," OAuth TTY Commands AuthorizeCommand ask_user_for_verifier":{"type":"method","name":"ask_user_for_verifier","children":[],"call":["@stdin gets "," puts ","@stdin gets chomp "," options [] == "," options [] "," options "]}," OAuth TTY Commands AuthorizeCommand get_consumer":{"type":"method","name":"get_consumer","children":[],"call":["OAuth Consumer  new "," options [] to_s downcase to_sym "," options [] to_s downcase "," options [] to_s "," options [] "," options "]}," OAuth TTY Commands AuthorizeCommand get_request_token":{"type":"method","name":"get_request_token","children":[],"call":[" alert ","e request body ","e request ","consumer get_request_token "," options [] "," options "," get_consumer "," get_consumer  get_request_token "," get_ get_consumer  "]}," OAuth TTY Commands AuthorizeCommand _run":{"type":"method","name":"_run","children":[],"call":[" verbosely_get_access_token "," ask_user_for_verifier "," puts ","request_token authorize_url "," options []= "," options ","request_token callback_confirmed? "," get_request_token "," get_request_token  authorize_url "," get_request_token  callback_confirmed? "," get_ get_request_token  "]}," OAuth TTY Commands AuthorizeCommand required_options":{"type":"method","name":"required_options","children":[],"call":[]}," OAuth TTY Command _option_parser_authorization":{"type":"method","name":"_option_parser_authorization","children":[],"call":[" options []= "," options ","opts on ","opts separator "]}," OAuth TTY Command _option_parser_sign_and_query":{"type":"method","name":"_option_parser_sign_and_query","children":[],"call":[" options []= "," options ","opts on "," options [] "," options [] << ","opts separator "]}," OAuth TTY Command _option_parser_common":{"type":"method","name":"_option_parser_common","children":[],"call":[" options merge! "," options "," parse_options ","(send\n  (send\n    (send nil :open\n      (lvar :v)) :readlines) :map) flatten ","l chomp split ","l chomp "," open readlines map "," open readlines "," open ","opts on "," options []= "]}," OAuth TTY Command _option_parser_defaults":{"type":"method","name":"_option_parser_defaults","children":[],"call":[" options []= "," options ","OAuth Helper  generate_timestamp ","OAuth Helper  generate_key "]}," OAuth TTY Command option_parser":{"type":"method","name":"option_parser","children":[],"call":[" _option_parser_authorization "," _option_parser_sign_and_query "," _option_parser_common "," _option_parser_defaults ","opts banner= ","OptionParser  new "]}," OAuth TTY Command parameters":{"type":"method","name":"parameters","children":[],"call":["(send\n  (hash\n    (pair\n      (str \"oauth_consumer_key\")\n      (send\n        (send nil :options) :[]\n        (sym :oauth_consumer_key)))\n    (pair\n      (str \"oauth_nonce\")\n      (send\n        (send nil :options) :[]\n        (sym :oauth_nonce)))\n    (pair\n      (str \"oauth_timestamp\")\n      (send\n        (send nil :options) :[]\n        (sym :oauth_timestamp)))\n    (pair\n      (str \"oauth_token\")\n      (send\n        (send nil :options) :[]\n        (sym :oauth_token)))\n    (pair\n      (str \"oauth_signature_method\")\n      (send\n        (send nil :options) :[]\n        (sym :oauth_signature_method)))\n    (pair\n      (str \"oauth_version\")\n      (send\n        (send nil :options) :[]\n        (sym :oauth_version)))) :reject) merge ","v == ","v nil? ","(pair\n  (str \"oauth_consumer_key\")\n  (send\n    (send nil :options) :[]\n    (sym :oauth_consumer_key))) reject "," options [] "," options ","CGI  parse ","escaped_pairs * ","(send\n  (const nil :CGI) :escape\n  (send\n    (lvar :k) :strip)) join ","CGI  escape ","v strip ","k strip ","Hash  [] collect ","Hash  [] ","pair split ","(str \":\") match? "," options [] collect "]}," OAuth TTY Command alert":{"type":"method","name":"alert","children":[],"call":["@stderr puts "]}," OAuth TTY Command puts":{"type":"method","name":"puts","children":[],"call":["@stdout puts "]}," OAuth TTY Command verbose?":{"type":"method","name":"verbose?","children":[],"call":[" options [] "," options "]}," OAuth TTY Command xmpp?":{"type":"method","name":"xmpp?","children":[],"call":[" options [] "," options "]}," OAuth TTY Command show_missing":{"type":"method","name":"show_missing","children":[],"call":["OAuth TTY CLI  puts_red ","(send\n  (lvar :array) :map) join ","array map ","(send\n  (lvar :(send\n  (lvar :array) :map) join ) :map) join ","(send\n  (lvar :array) :map) join  map "]}," OAuth TTY Command required_options":{"type":"method","name":"required_options","children":[],"call":[]}," OAuth TTY Command run":{"type":"method","name":"run","children":[],"call":[" puts "," option_parser help "," option_parser "," show_missing "," _run ","missing empty? "," required_options - "," options keys "," options "," required_options "," show_ required_options -  "," required_options -  empty? "]}," OAuth TTY Command initialize":{"type":"method","name":"initialize","children":[],"call":[" option_parser parse! "," option_parser "]}," OAuth TTY CLI parse_command":{"type":"method","name":"parse_command","children":[],"call":["OAuth TTY CLI  puts_red ","ALIASES  values ","ALIASES  [] ","ALIASES  keys ","command to_s downcase ","command to_s ","command to_s downcase  to_s downcase ","command to_s downcase  to_s "]}," OAuth TTY CLI get_command_class":{"type":"method","name":"get_command_class","children":[],"call":["Object  const_get ","command capitalize "]}," OAuth TTY CLI run":{"type":"method","name":"run","children":[],"call":["@command run "]}," OAuth TTY CLI initialize":{"type":"method","name":"initialize","children":[],"call":["Commands HelpCommand  new ","klass new "," get_command_class "," parse_command "," get_command_class  new "]}," OAuth TTY CLI puts_red":{"type":"method","name":"puts_red","children":[],"call":[]}}