{" Archive Zip dump":{"type":"method","name":"dump","children":[],"call":["io write "," comment ","(int 0) pack "," comment length ","entries length ","bytes_written - ","entry dump_central_file_record ","entries each ","entry dump_local_file_record ","@entries values "," comment bytesize ","@entries length ","@entries each ","@entries values  length ","@entries values  each ","@@entries values  values ","@@entries values  length ","@@entries values  each "]}," Archive Zip find_central_directory":{"type":"method","name":"find_central_directory","children":[],"call":[" raise ","io readbytes unpack [] ","io readbytes unpack ","io readbytes ","io seek ","eocd_offset + ","io readbytes unpack [] == ","(send\n  (lvar :eocd_offset) :+\n  (int 22)) abs ","io readbytes == "," loop ","IOExtensions  read_exactly unpack [] ","IOExtensions  read_exactly unpack ","IOExtensions  read_exactly ","IOExtensions  read_exactly unpack [] == ","IOExtensions  read_exactly == "]}," Archive Zip parse":{"type":"method","name":"parse","children":[],"call":[" add_entry ","Zip Entry  parse ","signature == ","io readbytes "," loop ","io seek "," find_central_directory "," raise ","io seekable? ","io respond_to? ","@entries << ","IOExtensions  read_exactly ","io readbytes  == ","IOExtensions  read_exactly  == "]}," Archive Zip extract":{"type":"method","name":"extract","children":[],"call":["entry extract ","options merge ","File  join ","entry zip_path ","(send\n  (lvar :directories) :sort) each ","b zip_path <=> ","a zip_path ","b zip_path ","directories sort ","options [] ","entry symlink? ","entry file? ","directories << ","entry directory? ","options [] call ","options [] nil? ! ","options [] nil? ","entry mtime <= ","entry mtime ","options [] == ","options [] ! ","file_exists ! ","File  mtime ","File  exist? ","File  basename "," each ","options []= ","options has_key? "," raise ","options [] [] ","entry password= ","options [] kind_of? "," closed? "," readable? ","File  exist?  ! "]}," Archive Zip archive":{"type":"method","name":"archive","children":[],"call":[" archive ","options merge ","File  join ","(send\n  (send\n    (const nil :Dir) :entries\n    (lvar :path)) :reject) collect ","e == ","Dir  entries reject ","Dir  entries ","options [] ","zip_entry directory? "," add_entry ","zip_entry directory? ! ","options [] call ","options [] nil? ! ","options [] nil? ","options [] ! ","zip_entry symlink? "," raise ","Zip Entry  from_file ","options has_key? ","options [] empty? ","File  directory? ","File  basename ","paths each ","options []= ","Entry  expand_path ","options [] to_s ","(send\n  (lvar :paths) :collect) flatten uniq ","(send\n  (lvar :paths) :collect) flatten ","basename == ","paths collect ","paths kind_of? ","zip_entry password= ","options [] [] ","options [] kind_of? "," closed? "," writable? ","Zip Entry  from_file  directory? ","Zip Entry  from_file  directory? ! ","Zip Entry  from_file  symlink? ","File  File  basename  ","(send\n  (lvar :paths) :collect) flatten uniq  each ","(send\n  (lvar :(send\n  (lvar :paths) :collect) flatten uniq ) :collect) flatten uniq ","(send\n  (lvar :(send\n  (lvar :paths) :collect) flatten uniq ) :collect) flatten ","File  basename  == ","(send\n  (lvar :paths) :collect) flatten uniq  collect ","(send\n  (lvar :paths) :collect) flatten uniq  kind_of? ","Zip Entry  from_file  password= "]}," Archive Zip remove_entry":{"type":"method","name":"remove_entry","children":[],"call":["entry nil? ! ","entry nil? ","entry [] ","@entries delete ","entry zip_path ","entry kind_of? "," raise ","entry []  nil? ! ","@entries delete  nil? ! ","entry []  nil? ","@entries delete  nil? ","entry []  [] ","@entries delete  [] ","entry []  zip_path ","@entries delete  zip_path ","entry entry zip_path  ","entry []  kind_of? ","@entries delete  kind_of? "]}," Archive Zip get_entry":{"type":"method","name":"get_entry","children":[],"call":["@entries [] "]}," Archive Zip add_entry":{"type":"method","name":"add_entry","children":[],"call":["@entries []= ","entry zip_path "," raise ","entry kind_of? ","@entries << "," closed? "," writable? "]}," Archive Zip each":{"type":"method","name":"each","children":[],"call":["@entries each_value "," raise ","@entries each "," parse "," closed? "," readable? "]}," Archive Zip closed?":{"type":"method","name":"closed?","children":[],"call":[]}," Archive Zip close":{"type":"method","name":"close","children":[],"call":["File  rename ","@archive_out nil? ","@archive_in close ","@archive_in nil? "," dump ","File  open ","@archive_out kind_of? ","File  chmod ","438 & ","File  umask ~ ","File  umask ","archive_out path ","archive_out binmode ","Tempfile  open ","File  split reverse ","File  split "," raise "," closed? ","@archive_in nil? ! ","@archive close "," writable? "]}," Archive Zip initialize":{"type":"method","name":"initialize","children":[],"call":[" parse ","File  new ","File  exist? ","@archive_path nil? ! ","@archive_path nil? "," raise ","archive_out empty? ","archive_out kind_of? ","archive_out nil? ","archive_path empty? ","archive_path nil? ","File  open ","mode == ","@archive kind_of? ","mode to_sym ","File  open _path nil? ! ","File  open _path nil? ","mode to_sym  == ","File  open  kind_of? ","mode to_sym  to_sym "]}," Archive Zip open":{"type":"method","name":"open","children":[],"call":[]}," Archive Zip ExtraField parse":{"type":"method","name":"parse","children":[],"call":[]}," Archive Zip ExtraField Unix dump":{"type":"method","name":"dump","children":[],"call":["(const nil :ID) pack + ","(const nil :ID) pack ","@mtime to_i ","@atime to_i ","12 + ","@data size "]}," Archive Zip ExtraField Unix link_target=":{"type":"method","name":"link_target=","children":[],"call":[]}," Archive Zip ExtraField Unix link_target":{"type":"method","name":"link_target","children":[],"call":[]}," Archive Zip ExtraField Unix device_numbers=":{"type":"method","name":"device_numbers=","children":[],"call":["major_minor pack "]}," Archive Zip ExtraField Unix device_numbers":{"type":"method","name":"device_numbers","children":[],"call":["@data unpack "]}," Archive Zip ExtraField Unix initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Archive Zip ExtraField Unix parse":{"type":"method","name":"parse","children":[],"call":[]}," Archive Zip ExtraField Raw dump":{"type":"method","name":"dump","children":[],"call":["(send nil :header_id) pack + ","(send nil :header_id) pack ","@data size "," header_id "]}," Archive Zip ExtraField Raw initialize":{"type":"method","name":"initialize","children":[],"call":["@local_record_data << ","@central_record_data << "]}," Archive Zip ExtraField Raw parse":{"type":"method","name":"parse","children":[],"call":[]}," Archive Zip ExtraField ExtendedTimestamp dump":{"type":"method","name":"dump","children":[],"call":["(send\n  (array\n    (const nil :ID)\n    (send\n      (send\n        (int 4) :*\n        (send\n          (lvar :times) :size)) :+\n      (int 1))\n    (lvar :flags)) :+\n  (lvar :times)) pack ","vvC + ","V * ","times size ","(const nil :ID) + ","4 * + ","4 * ","times << "," crtime to_i "," crtime "," crtime nil? "," atime to_i "," atime "," atime nil? "," mtime to_i "," mtime "," mtime nil? "]}," Archive Zip ExtraField ExtendedTimestamp initialize":{"type":"method","name":"initialize","children":[],"call":[" crtime= ","crtime nil? "," atime= ","atime nil? "," mtime= ","mtime nil? "]}," Archive Zip ExtraField ExtendedTimestamp parse":{"type":"method","name":"parse","children":[],"call":[]}," Archive Zip Entry File dump_compressed_data":{"type":"method","name":"dump_compressed_data","children":[],"call":[" file_data close "," file_data "," file_data rewind "," file_path nil? "," file_path ","io write "," file_data read "]}," Archive Zip Entry File extract":{"type":"method","name":"extract","children":[],"call":[" file_data rewind "," file_data "," File  utime "," mtime "," atime "," File  chown "," gid "," uid "," File  chmod "," mode "," raise ","e message "," zip_path "," expected_data_descriptor verify "," file_data data_descriptor "," expected_data_descriptor "," expected_data_descriptor nil? ","f write "," file_data read "," File  open ","FileUtils  mkdir_p "," File  exist? "," File  dirname ","options [] ","options has_key? ","options [] to_s "]}," Archive Zip Entry File mode=":{"type":"method","name":"mode=","children":[],"call":["32768 | ","mode & "]}," Archive Zip Entry File file?":{"type":"method","name":"file?","children":[],"call":[]}," Archive Zip Entry File ftype":{"type":"method","name":"ftype","children":[],"call":[]}," Archive Zip Entry File file_path=":{"type":"method","name":"file_path=","children":[],"call":[]}," Archive Zip Entry File file_data=":{"type":"method","name":"file_data=","children":[],"call":["Zip Codec Store  new decompressor ","Zip Codec Store  new ","@file_data respond_to? ","StringIO  new ","file_data kind_of? "," raw_data= ","Zip Codec Store  new decompressor  respond_to? ","StringIO  new  respond_to? "]}," Archive Zip Entry File file_data":{"type":"method","name":"file_data","children":[],"call":["Zip Codec Store  new decompressor ","Zip Codec Store  new "," File  new ","StringIO  new ","@file_path nil? ","@file_data closed? ","@file_data nil? "," compression_codec decompressor "," encryption_codec decryptor "," password "," raw_data "," encryption_codec "," compression_codec "," raw_data rewind ","BinaryStringIO  new "," raw_data nil? ","Zip Codec Store  new decompressor  closed? "," File  new  closed? ","StringIO  new  closed? "," compression_codec decompressor  closed? ","Zip Codec Store  new decompressor  nil? "," File  new  nil? ","StringIO  new  nil? "," compression_codec decompressor  nil? "]}," Archive Zip Entry File initialize":{"type":"method","name":"initialize","children":[],"call":["Zip Codec Deflate  new "]}," Archive Zip Entry Symlink dump_compressed_data":{"type":"method","name":"dump_compressed_data","children":[],"call":["io write "]}," Archive Zip Entry Symlink extract":{"type":"method","name":"extract","children":[],"call":[" File  lchown "," gid "," uid "," File  lchmod "," mode "," File  symlink "," link_target ","FileUtils  mkdir_p "," File  exist? "," File  dirname ","options [] ","options has_key? ","options [] to_s "," raise "," link_target nil? "]}," Archive Zip Entry Symlink mode=":{"type":"method","name":"mode=","children":[],"call":["40960 | ","mode & "]}," Archive Zip Entry Symlink symlink?":{"type":"method","name":"symlink?","children":[],"call":[]}," Archive Zip Entry Symlink ftype":{"type":"method","name":"ftype","children":[],"call":[]}," Archive Zip Entry Directory dump_compressed_data":{"type":"method","name":"dump_compressed_data","children":[],"call":[]}," Archive Zip Entry Directory extract":{"type":"method","name":"extract","children":[],"call":[" File  utime "," mtime "," atime "," File  chown "," gid "," uid "," File  chmod "," mode ","FileUtils  mkdir_p ","options [] ","options has_key? ","options [] to_s "]}," Archive Zip Entry Directory mode=":{"type":"method","name":"mode=","children":[],"call":["16384 | ","mode & "]}," Archive Zip Entry Directory directory?":{"type":"method","name":"directory?","children":[],"call":[]}," Archive Zip Entry Directory ftype":{"type":"method","name":"ftype","children":[],"call":[]}," Archive Zip Entry Directory zip_path=":{"type":"method","name":"zip_path=","children":[],"call":[]}," Archive Zip Entry external_file_attributes":{"type":"method","name":"external_file_attributes","children":[],"call":["(send\n  (send nil :mode) :<<\n  (int 16)) + "," directory? "," mode << "," mode "]}," Archive Zip Entry internal_file_attributes":{"type":"method","name":"internal_file_attributes","children":[],"call":[]}," Archive Zip Entry extra_field_data":{"type":"method","name":"extra_field_data","children":[],"call":["(send\n  (ivar :@extra_fields) :collect) join + + ","ExtraField Unix  new dump ","ExtraField Unix  new "," gid "," uid "," atime "," mtime ","(send\n  (ivar :@extra_fields) :collect) join + ","ExtraField ExtendedTimestamp  new dump ","ExtraField ExtendedTimestamp  new ","(send\n  (ivar :@extra_fields) :collect) join ","extra_field dump ","extra_field kind_of? ","@extra_fields collect ","@extra_field_data nil? ","(send\n  (ivar :@extra_fields) :collect) join + +  nil? "]}," Archive Zip Entry version_made_by":{"type":"method","name":"version_made_by","children":[],"call":[]}," Archive Zip Entry dump_central_file_record":{"type":"method","name":"dump_central_file_record","children":[],"call":["io write "," comment "," extra_field_data "," zip_path ","(send\n  (send nil :zip_path) :length) pack "," external_file_attributes "," internal_file_attributes "," comment length "," extra_field_data length "," zip_path length ","@data_descriptor dump ","(send nil :version_made_by) pack "," mtime to_dos_time to_i "," mtime to_dos_time "," mtime "," codec compression_method "," codec "," codec version_needed_to_extract "," version_made_by ","io seekable? "," codec general_purpose_flags ","(send\n  (send nil :zip_path) :bytesize) pack ","extra_field_data length "," zip_path bytesize "," central_extra_field_data "," compression_codec compression_method "," compression_codec "," encryption_codec version_needed_to_extract "," encryption_codec "," encryption_codec version_needed_to_extract > "," compression_codec version_needed_to_extract "," encryption_codec general_purpose_flags "," compression_codec general_purpose_flags "," encryption_codec class == "," encryption_codec class ","io pos ","io seekable? ! ","  central_extra_field_data  ","  central_extra_field_data  length "," codec  encryption_codec version_needed_to_extract  "," codec  compression_codec version_needed_to_extract  "," codec  codec general_purpose_flags  "," codec  compression_codec general_purpose_flags  "," central_extra_field_data  length "," central_ central_extra_field_data  "," encryption_codec  encryption_codec version_needed_to_extract  "," encryption_codec  compression_codec version_needed_to_extract  "," encryption_codec  encryption_codec version_needed_to_extract  > "," encryption_codec  compression_codec version_needed_to_extract  > "," compression_codec  encryption_codec version_needed_to_extract  "," compression_codec  compression_codec version_needed_to_extract  "," encryption_codec  codec general_purpose_flags  "," encryption_codec  compression_codec general_purpose_flags  "," compression_codec  codec general_purpose_flags  "," compression_codec  compression_codec general_purpose_flags  "]}," Archive Zip Entry dump_local_file_record":{"type":"method","name":"dump_local_file_record","children":[],"call":["@data_descriptor dump ","io write ","io pos= ","@local_file_record_position + ","io pos ","io seekable? ","@data_descriptor compressed_size ","c data_descriptor ","c close "," dump_compressed_data "," codec compressor "," codec "," extra_field_data "," zip_path ","(send\n  (send nil :codec) :version_needed_to_extract) pack "," extra_field_data length "," zip_path length "," mtime to_dos_time to_i "," mtime to_dos_time "," mtime "," codec compression_method "," codec version_needed_to_extract "," codec general_purpose_flags ","e close ","DataDescriptor  new ","c data_descriptor uncompressed_size ","c data_descriptor compressed_size + "," encryption_codec header_size "," encryption_codec ","c data_descriptor compressed_size ","c data_descriptor crc32 "," dump_file_data "," compression_codec compressor "," compression_codec "," encryption_codec encryptor "," password ","(lvar :version_needed_to_extract) pack ","extra_field_data length "," zip_path bytesize "," compression_codec compression_method "," local_extra_field_data "," encryption_codec version_needed_to_extract "," encryption_codec version_needed_to_extract > "," compression_codec version_needed_to_extract "," encryption_codec general_purpose_flags "," compression_codec general_purpose_flags "," encryption_codec mtime= "," encryption_codec class == "," encryption_codec class ","io seekable? ! ","c data_descriptor  dump ","DataDescriptor  new  dump ","c data_descriptor  compressed_size ","DataDescriptor  new  compressed_size ","  local_extra_field_data  ","(send\n  (send nil :codec) : encryption_codec version_needed_to_extract ) pack ","(send\n  (send nil :codec) : compression_codec version_needed_to_extract ) pack ","  local_extra_field_data  length "," codec  encryption_codec version_needed_to_extract  "," codec  compression_codec version_needed_to_extract  "," codec  codec general_purpose_flags  "," codec  compression_codec general_purpose_flags  ","(lvar : encryption_codec version_needed_to_extract ) pack ","(lvar : compression_codec version_needed_to_extract ) pack "," local_extra_field_data  length "," local_ local_extra_field_data  "," encryption_codec  encryption_codec version_needed_to_extract  "," encryption_codec  compression_codec version_needed_to_extract  "," encryption_codec  encryption_codec version_needed_to_extract  > "," encryption_codec  compression_codec version_needed_to_extract  > "," compression_codec  encryption_codec version_needed_to_extract  "," compression_codec  compression_codec version_needed_to_extract  "," encryption_codec  codec general_purpose_flags  "," encryption_codec  compression_codec general_purpose_flags  "," compression_codec  codec general_purpose_flags  "," compression_codec  compression_codec general_purpose_flags  "]}," Archive Zip Entry add_extra_field":{"type":"method","name":"add_extra_field","children":[],"call":[" gid= ","extra_field gid "," uid= ","extra_field uid "," atime= ","extra_field atime "," mtime= ","extra_field mtime ","extra_field kind_of? ","@extra_fields << ","extra_field uid nil? ","extra_field atime nil? ","extra_field mtime nil? ","existing_extra_field merge ","existing_extra_field nil? ","ef header_id == ","extra_field header_id ","ef header_id ","@extra_fields find ","existing_extra_field merge  gid ","existing_extra_field merge  uid ","existing_extra_field merge  atime ","existing_extra_field merge  mtime ","existing_extra_field merge  kind_of? ","@existing_extra_field merge s << ","existing_extra_field merge  uid nil? ","existing_extra_field merge  atime nil? ","existing_extra_field merge  mtime nil? ","existing_existing_extra_field merge  merge ","existing_existing_extra_field merge  nil? ","existing_extra_field merge  header_id ","@existing_extra_field merge s find "]}," Archive Zip Entry extract":{"type":"method","name":"extract","children":[],"call":[]}," Archive Zip Entry directory?":{"type":"method","name":"directory?","children":[],"call":[]}," Archive Zip Entry symlink?":{"type":"method","name":"symlink?","children":[],"call":[]}," Archive Zip Entry file?":{"type":"method","name":"file?","children":[],"call":[]}," Archive Zip Entry ftype":{"type":"method","name":"ftype","children":[],"call":[]}," Archive Zip Entry zip_path=":{"type":"method","name":"zip_path=","children":[],"call":[" raise ","@zip_path empty? ","Archive Zip Entry  expand_path ","Archive Zip Entry  expand_path  empty? "]}," Archive Zip Entry initialize":{"type":"method","name":"initialize","children":[],"call":[" codec= ","Zip Codec Store  new "," comment= "," mode= "," gid= "," uid= "," atime= "," mtime= ","Time  now "," zip_path= "," password= "," encryption_codec= ","Zip Codec NullEncryption  new "," compression_codec= "," expected_data_descriptor= "]}," Archive Zip Entry compare_file_records":{"type":"method","name":"compare_file_records","children":[],"call":[]}," Archive Zip Entry parse_extra_fields":{"type":"method","name":"parse_extra_fields","children":[],"call":[]}," Archive Zip Entry parse_local_file_record":{"type":"method","name":"parse_local_file_record","children":[],"call":[]}," Archive Zip Entry parse_central_file_record":{"type":"method","name":"parse_central_file_record","children":[],"call":[]}," Archive Zip Entry parse":{"type":"method","name":"parse","children":[],"call":[]}," Archive Zip Entry from_file":{"type":"method","name":"from_file","children":[],"call":[]}," Archive Zip Entry expand_path":{"type":"method","name":"expand_path","children":[],"call":[]}," Archive Zip DataDescriptor dump":{"type":"method","name":"dump","children":[],"call":["io write ","(send nil :crc32) pack "," uncompressed_size "," compressed_size "," crc32 "]}," Archive Zip DataDescriptor verify":{"type":"method","name":"verify","children":[],"call":[" raise ","other uncompressed_size "," uncompressed_size "," uncompressed_size == ","other compressed_size "," compressed_size "," compressed_size == ","other crc32 to_s ","other crc32 "," crc32 to_s "," crc32 "," crc32 == "]}," Archive Zip DataDescriptor initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Archive Zip Codec supported?":{"type":"method","name":"supported?","children":[],"call":[]}," Archive Zip Codec create":{"type":"method","name":"create","children":[],"call":[]}," Archive Zip Codec Store general_purpose_flags":{"type":"method","name":"general_purpose_flags","children":[],"call":[]}," Archive Zip Codec Store compression_method":{"type":"method","name":"compression_method","children":[],"call":[]}," Archive Zip Codec Store version_needed_to_extract":{"type":"method","name":"version_needed_to_extract","children":[],"call":[]}," Archive Zip Codec Store decompressor":{"type":"method","name":"decompressor","children":[],"call":["Unstore  open ","Decompress  open "]}," Archive Zip Codec Store compressor":{"type":"method","name":"compressor","children":[],"call":["Store  open ","Compress  open "]}," Archive Zip Codec Store initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Archive Zip Codec Store Unstore unbuffered_seek":{"type":"method","name":"unbuffered_seek","children":[],"call":["@io rewind "," raise ","@io respond_to? ","whence == ","offset == "]}," Archive Zip Codec Store Unstore unbuffered_read":{"type":"method","name":"unbuffered_read","children":[],"call":["Zlib  crc32 ","buffer length "," raise ","buffer nil? ","@io read ","@io read  length ","@io read  nil? "]}," Archive Zip Codec Store Unstore data_descriptor":{"type":"method","name":"data_descriptor","children":[],"call":["DataDescriptor  new "]}," Archive Zip Codec Store Unstore close":{"type":"method","name":"close","children":[],"call":["@io close "]}," Archive Zip Codec Store Unstore initialize":{"type":"method","name":"initialize","children":[],"call":[" fill_size= "]}," Archive Zip Codec Store Unstore open":{"type":"method","name":"open","children":[],"call":[]}," Archive Zip Codec Store Store unbuffered_write":{"type":"method","name":"unbuffered_write","children":[],"call":["Zlib  crc32 ","string slice ","@io write "]}," Archive Zip Codec Store Store data_descriptor":{"type":"method","name":"data_descriptor","children":[],"call":["DataDescriptor  new "]}," Archive Zip Codec Store Store close":{"type":"method","name":"close","children":[],"call":["@io close "]}," Archive Zip Codec Store Store initialize":{"type":"method","name":"initialize","children":[],"call":[" flush_size= "]}," Archive Zip Codec Store Store open":{"type":"method","name":"open","children":[],"call":[]}," Archive Zip Codec Deflate general_purpose_flags":{"type":"method","name":"general_purpose_flags","children":[],"call":[]}," Archive Zip Codec Deflate compression_method":{"type":"method","name":"compression_method","children":[],"call":[]}," Archive Zip Codec Deflate version_needed_to_extract":{"type":"method","name":"version_needed_to_extract","children":[],"call":[]}," Archive Zip Codec Deflate decompressor":{"type":"method","name":"decompressor","children":[],"call":["Inflate  open ","Decompress  open "]}," Archive Zip Codec Deflate compressor":{"type":"method","name":"compressor","children":[],"call":["Deflate  open ","Compress  open "]}," Archive Zip Codec Deflate initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","general_purpose_flags & "]}," Archive Zip Codec Deflate Inflate data_descriptor":{"type":"method","name":"data_descriptor","children":[],"call":["DataDescriptor  new "," uncompressed_size "," compressed_size "," crc32 "]}," Archive Zip Codec Deflate Inflate close":{"type":"method","name":"close","children":[],"call":[" delegate close "," delegate "]}," Archive Zip Codec Deflate Inflate initialize":{"type":"method","name":"initialize","children":[],"call":["Zlib MAX_WBITS  -@ "]}," Archive Zip Codec Deflate Inflate open":{"type":"method","name":"open","children":[],"call":[]}," Archive Zip Codec Deflate Deflate data_descriptor":{"type":"method","name":"data_descriptor","children":[],"call":["DataDescriptor  new "," uncompressed_size "," compressed_size "," crc32 "]}," Archive Zip Codec Deflate Deflate close":{"type":"method","name":"close","children":[],"call":[" delegate close "," delegate "]}," Archive Zip Codec Deflate Deflate initialize":{"type":"method","name":"initialize","children":[],"call":["Zlib MAX_WBITS  -@ "]}," Archive Zip Codec Deflate Deflate open":{"type":"method","name":"open","children":[],"call":[]}," Zlib ZReader unbuffered_seek":{"type":"method","name":"unbuffered_seek","children":[],"call":["Zlib Inflate  new ","@inflater close "," delegate rewind "," delegate "," raise "," delegate respond_to? ","whence == ","offset == ","@inflater total_out - ","@inflate_buffer length ","@inflater total_out ","Zlib Inflate  new  close ","Zlib Inflate  new  total_out - ","Zlib Inflate  new  total_out "]}," Zlib ZReader unbuffered_read":{"type":"method","name":"unbuffered_read","children":[],"call":["Zlib  crc32 ","@decompress_buffer slice! "," raise ","@decompress_buffer empty? ","@decompress_buffer << ","@inflater inflate "," delegate read "," delegate ","@inflater finished? ! ","@inflater finished? ","@decompress_buffer length < ","@decompress_buffer length ","@inflate_buffer slice! ","@inflate_buffer empty? ","@inflate_buffer << ","@inflate_buffer length < ","@inflate_buffer length ","@decompress_@decompress_buffer slice!  slice! ","@decompress_@decompress_buffer slice!  empty? ","@decompress_@decompress_buffer slice!  << ","@decompress_@decompress_buffer slice!  length < ","@decompress_@decompress_buffer slice!  length ","@inflate_@decompress_buffer slice!  slice! ","@inflate_@decompress_buffer slice!  empty? ","@inflate_@decompress_buffer slice!  << ","@inflate_@decompress_buffer slice!  length < ","@inflate_@decompress_buffer slice!  length "]}," Zlib ZReader uncompressed_size":{"type":"method","name":"uncompressed_size","children":[],"call":["@inflater total_out ","@inflater closed? "]}," Zlib ZReader compressed_size":{"type":"method","name":"compressed_size","children":[],"call":["@inflater total_in ","@inflater closed? "]}," Zlib ZReader close":{"type":"method","name":"close","children":[],"call":["@inflater close ","@inflater total_out ","@inflater total_in ","@inflater adler "]}," Zlib ZReader initialize":{"type":"method","name":"initialize","children":[],"call":["Zlib Inflate  new "]}," Zlib ZReader open":{"type":"method","name":"open","children":[],"call":[]}," Zlib ZWriter unbuffered_write":{"type":"method","name":"unbuffered_write","children":[],"call":["string length ","Zlib  crc32 ","@deflate_buffer slice! "," delegate write "," delegate ","@deflater deflate ","@deflate_buffer empty? ","@deflater deflate  slice! ","@deflater deflate  empty? "]}," Zlib ZWriter uncompressed_size":{"type":"method","name":"uncompressed_size","children":[],"call":["@deflater total_in ","@deflater closed? "]}," Zlib ZWriter compressed_size":{"type":"method","name":"compressed_size","children":[],"call":["@deflater total_out ","@deflater closed? "]}," Zlib ZWriter close":{"type":"method","name":"close","children":[],"call":[" delegate write ","@deflater finish "," delegate ","@deflater close ","@deflater total_in ","@deflater total_out ","@deflater adler "," write_ready? ","@deflate_buffer slice! ","@deflate_buffer empty? ","@deflate_buffer << ","@deflater finished? "," flush "]}," Zlib ZWriter initialize":{"type":"method","name":"initialize","children":[],"call":["Zlib Deflate  new "]}," Zlib ZWriter open":{"type":"method","name":"open","children":[],"call":[]}," DOSTime to_time":{"type":"method","name":"to_time","children":[],"call":["Time  local ","(send\n  (begin\n    (send\n      (send\n        (int 127) :<<\n        (int 25)) :&\n      (ivar :@dos_time))) :>>\n  (int 25)) + ","(send\n  (send\n    (int 127) :<<\n    (int 25)) :&\n  (ivar :@dos_time)) >> ","127 << & ","127 << ","(send\n  (send\n    (int 15) :<<\n    (int 21)) :&\n  (ivar :@dos_time)) >> ","15 << & ","15 << ","(send\n  (send\n    (int 31) :<<\n    (int 16)) :&\n  (ivar :@dos_time)) >> ","31 << & ","31 << ","(send\n  (send\n    (int 31) :<<\n    (int 11)) :&\n  (ivar :@dos_time)) >> ","(send\n  (send\n    (int 63) :<<\n    (int 5)) :&\n  (ivar :@dos_time)) >> ","63 << & ","63 << ","(begin\n  (send\n    (int 31) :&\n    (ivar :@dos_time))) * ","31 & "]}," DOSTime to_i":{"type":"method","name":"to_i","children":[],"call":[]}," DOSTime cmp":{"type":"method","name":"cmp","children":[],"call":["@dos_time <=> ","other dos_time "]}," DOSTime initialize":{"type":"method","name":"initialize","children":[],"call":["dos_time unpack [] ","dos_time unpack "," raise ","dos_time length == ","dos_time length ","Time  now to_dos_time dos_time ","Time  now to_dos_time ","Time  now "]}," Time to_dos_time":{"type":"method","name":"to_dos_time","children":[],"call":["DOSTime  new ","(lvar :dos_sec) | | | | | ","dos_year << ","(lvar :dos_sec) | | | | "," month << "," month ","(lvar :dos_sec) | | | "," day << "," day ","(lvar :dos_sec) | | "," hour << "," hour ","(lvar :dos_sec) | "," min << "," min ","dos_year > ","dos_year < "," year - "," year "," sec / "," sec ","Archive DOSTime  new ","(lvar : sec / ) | | | | | "," year -  << ","(lvar : sec / ) | | | | ","(lvar : sec / ) | | | ","(lvar : sec / ) | | ","(lvar : sec / ) | "," year -  > "," year -  < "]}," StringIO seekable?":{"type":"method","name":"seekable?","children":[],"call":[]}," StringIO readbytes":{"type":"method","name":"readbytes","children":[],"call":[" raise ","TruncatedDataError  new ","str size < ","str size ","str == "," read "," read  size < "," read  size "," read  == "]}," IOWindow restore_self":{"type":"method","name":"restore_self","children":[],"call":["@io pos= ","@window_position + ","@io lineno ","@io pos "]}," IOWindow restore_delegate":{"type":"method","name":"restore_delegate","children":[],"call":["@io lineno= ","@io pos= "]}," IOWindow unbuffered_write":{"type":"method","name":"unbuffered_write","children":[],"call":[" restore_delegate ","@io write ","string slice ","@window_size - "," restore_self ","string slice  slice "]}," IOWindow unbuffered_seek":{"type":"method","name":"unbuffered_seek","children":[],"call":[" raise ","new_pos > ","new_pos < ","@window_size + ","@unbuffered_pos + ","@window_size +  > ","@unbuffered_pos +  > ","@window_size +  < ","@unbuffered_pos +  < "]}," IOWindow unbuffered_read":{"type":"method","name":"unbuffered_read","children":[],"call":[" restore_delegate ","buffer length "," raise ","buffer nil? ","@io read ","@window_size - ","@unbuffered_pos + > ","@unbuffered_pos + ","@unbuffered_pos >= "," restore_self ","@io read  length ","buffer @window_size -  ","@io read  nil? ","@un@io read ed_pos + > ","@un@io read ed_pos + ","@un@io read ed_pos >= "]}," IOWindow window_size=":{"type":"method","name":"window_size=","children":[],"call":[" raise ","window_size < ","window_size kind_of? ","window_size to_int ","window_size class ","window_size respond_to? ","window_size to_int  < ","window_size to_int  kind_of? ","window_size to_int  to_int ","window_size to_int  class ","window_size to_int  respond_to? "]}," IOWindow window_position=":{"type":"method","name":"window_position=","children":[],"call":[" raise ","window_position < ","window_position kind_of? ","window_position to_int ","window_position class ","window_position respond_to? ","window_position to_int  < ","window_position to_int  kind_of? ","window_position to_int  to_int ","window_position to_int  class ","window_position to_int  respond_to? "]}," IOWindow initialize":{"type":"method","name":"initialize","children":[],"call":[" window_size= "," window_position= "," raise ","io seekable? "]}," IO seekable?":{"type":"method","name":"seekable?","children":[],"call":[" pos "]}," Archive Zip writable?":{"type":"method","name":"writable?","children":[],"call":["@mode == "]}," Archive Zip readable?":{"type":"method","name":"readable?","children":[],"call":["@mode == "]}," Archive Zip ExtraField parse_local":{"type":"method","name":"parse_local","children":[],"call":[]}," Archive Zip ExtraField parse_central":{"type":"method","name":"parse_central","children":[],"call":[]}," Archive Zip ExtraField Unix dump_local":{"type":"method","name":"dump_local","children":[],"call":["(const nil :ID) pack + ","(const nil :ID) pack ","@mtime to_i ","@atime to_i ","12 + ","@data size "]}," Archive Zip ExtraField Unix merge":{"type":"method","name":"merge","children":[],"call":["other data ","other gid ","other uid ","other mtime ","other atime "," raise ","other class "," class "," class != "]}," Archive Zip ExtraField Unix parse_central":{"type":"method","name":"parse_central","children":[],"call":[" new ","Time  at ","data unpack "," raise ","data size ","data length >= ","data length "]}," Archive Zip ExtraField Raw dump_local":{"type":"method","name":"dump_local","children":[],"call":["(send nil :header_id) pack + ","(send nil :header_id) pack ","data size "," header_id ","@local_record_data collect "]}," Archive Zip ExtraField Raw dump_central":{"type":"method","name":"dump_central","children":[],"call":["(send nil :header_id) pack + ","(send nil :header_id) pack ","data size "," header_id ","@central_record_data collect "]}," Archive Zip ExtraField Raw merge":{"type":"method","name":"merge","children":[],"call":["other local_record_data ","other central_record_data "," raise ","other header_id "," header_id "," header_id != "]}," Archive Zip ExtraField Raw parse_local":{"type":"method","name":"parse_local","children":[],"call":[" new "]}," Archive Zip ExtraField Raw parse_central":{"type":"method","name":"parse_central","children":[],"call":[" new "]}," Archive Zip ExtraField ExtendedTimestamp flags":{"type":"method","name":"flags","children":[],"call":[" crtime nil? "," crtime "," atime nil? "," atime "," mtime nil? "," mtime "]}," Archive Zip ExtraField ExtendedTimestamp dump_local":{"type":"method","name":"dump_local","children":[],"call":["(send\n  (array\n    (const nil :ID)\n    (send\n      (send\n        (int 4) :*\n        (send\n          (lvar :times) :size)) :+\n      (int 1))\n    (send nil :flags)) :+\n  (lvar :times)) pack ","vvC + ","V * ","times size ","(const nil :ID) + "," flags ","4 * + ","4 * ","times << "," crtime to_i "," crtime "," crtime nil? "," atime to_i "," atime "," atime nil? "," mtime to_i "," mtime "," mtime nil? "]}," Archive Zip ExtraField ExtendedTimestamp dump_central":{"type":"method","name":"dump_central","children":[],"call":["(send\n  (array\n    (const nil :ID)\n    (send\n      (send\n        (int 4) :*\n        (send\n          (lvar :times) :size)) :+\n      (int 1))\n    (send nil :flags)) :+\n  (lvar :times)) pack ","vvC + ","V * ","times size ","(const nil :ID) + "," flags ","4 * + ","4 * ","times << "," mtime to_i "," mtime "," mtime nil? "]}," Archive Zip ExtraField ExtendedTimestamp merge":{"type":"method","name":"merge","children":[],"call":["other crtime ","other crtime nil? ","other atime ","other atime nil? ","other mtime ","other mtime nil? "," raise ","other class "," class "," class != "]}," Archive Zip ExtraField ExtendedTimestamp parse_local":{"type":"method","name":"parse_local","children":[],"call":[" new ","Time  at ","times shift "," raise ","times size == ","times size ","flags & != ","flags & ","data unpack ","data size ","data size == "]}," Archive Zip ExtraField ExtendedTimestamp parse_central":{"type":"method","name":"parse_central","children":[],"call":[" new ","Time  at ","times shift ","times size > ","times size ","flags & != ","flags & "," raise ","times size == ","data unpack ","data size ","data size == "]}," Archive Zip Entry File dump_file_data":{"type":"method","name":"dump_file_data","children":[],"call":[" file_data close "," file_data "," file_data rewind "," file_path nil? "," file_path ","io write "," file_data read "]}," Archive Zip Entry File password=":{"type":"method","name":"password=","children":[],"call":["@raw_data nil? "]}," Archive Zip Entry Symlink dump_file_data":{"type":"method","name":"dump_file_data","children":[],"call":["io write "]}," Archive Zip Entry Symlink link_target=":{"type":"method","name":"link_target=","children":[],"call":[" raw_data= "]}," Archive Zip Entry Symlink link_target":{"type":"method","name":"link_target","children":[],"call":[" raise ","e message "," zip_path "," expected_data_descriptor verify ","decompressor data_descriptor "," expected_data_descriptor "," expected_data_descriptor nil? ","decompressor read "," compression_codec decompressor "," compression_codec "," encryption_codec decryptor "," password "," raw_data "," encryption_codec "," raw_data rewind ","@link_target nil? ","decompressor read  nil? "]}," Archive Zip Entry Directory dump_file_data":{"type":"method","name":"dump_file_data","children":[],"call":[]}," Archive Zip Entry local_extra_field_data":{"type":"method","name":"local_extra_field_data","children":[],"call":["(send\n  (ivar :@extra_fields) :collect) join ","extra_field dump_local ","@extra_fields collect "]}," Archive Zip Entry dummy":{"type":"method","name":"dummy","children":[],"call":["ExtraField Unix  new dump_central ","ExtraField Unix  new "," gid "," uid "," atime "," mtime "," atime nil? "," mtime nil? "," gid nil? "," uid nil? ","ExtraField ExtendedTimestamp  new dump_central ","ExtraField ExtendedTimestamp  new "]}," Archive Zip Entry central_extra_field_data":{"type":"method","name":"central_extra_field_data","children":[],"call":["(send\n  (ivar :@extra_fields) :collect) join ","extra_field dump_central ","@extra_fields collect "]}," Archive Zip Entry parse_local_extra_fields":{"type":"method","name":"parse_local_extra_fields","children":[],"call":[]}," Archive Zip Entry parse_central_extra_fields":{"type":"method","name":"parse_central_extra_fields","children":[],"call":[]}," Archive Zip Codec create_encryption_codec":{"type":"method","name":"create_encryption_codec","children":[],"call":[]}," Archive Zip Codec create_compression_codec":{"type":"method","name":"create_compression_codec","children":[],"call":[]}," Archive Zip Codec TraditionalEncryption header_size":{"type":"method","name":"header_size","children":[],"call":[]}," Archive Zip Codec TraditionalEncryption general_purpose_flags":{"type":"method","name":"general_purpose_flags","children":[],"call":[]}," Archive Zip Codec TraditionalEncryption version_needed_to_extract":{"type":"method","name":"version_needed_to_extract","children":[],"call":[]}," Archive Zip Codec TraditionalEncryption decryptor":{"type":"method","name":"decryptor","children":[],"call":["Decrypt  open "," mtime "]}," Archive Zip Codec TraditionalEncryption encryptor":{"type":"method","name":"encryptor","children":[],"call":["Encrypt  open "," mtime "]}," Archive Zip Codec TraditionalEncryption Decrypt unbuffered_seek":{"type":"method","name":"unbuffered_seek","children":[],"call":[" initialize_keys "," io rewind "," io "," raise ","whence == ","@io respond_to? ","offset == "," io respond_to? "]}," Archive Zip Codec TraditionalEncryption Decrypt unbuffered_read":{"type":"method","name":"unbuffered_read","children":[],"call":[" update_keys ","buffer [] chr ","buffer [] ","buffer []= ","(send\n  (send\n    (send\n      (lvar :buffer) :[]\n      (lvar :i)) :ord) :^\n  (send nil :decrypt_byte)) chr ","buffer [] ord ^ "," decrypt_byte ","buffer [] ord ","0 upto ","buffer length - ","buffer length "," raise ","buffer nil? "," io read "," io ","buffer [] ^ ","(erange\n  (int 0)\n  (send\n    (lvar :buffer) :size)) each ","buffer size "," io read  [] chr "," io read  [] "," io read  []= ","(send\n  (send\n    (send\n      (lvar : io read ) :[]\n      (lvar :i)) :ord) :^\n  (send nil :decrypt_byte)) chr "," io read  [] ord ^ "," io read  [] ord "," io read  length - "," io read  length "," io read  nil? "," io read  [] ^ ","(erange\n  (int 0)\n  (send\n    (lvar : io read ) :size)) each "," io read  size "]}," Archive Zip Codec TraditionalEncryption Decrypt initialize_keys":{"type":"method","name":"initialize_keys","children":[],"call":[" sleep ","bytes_read size "," unbuffered_read ","bytes_needed > "," unbuffered_read  size "]}," Archive Zip Codec TraditionalEncryption Decrypt close":{"type":"method","name":"close","children":[],"call":[" io close "," io "]}," Archive Zip Codec TraditionalEncryption Decrypt initialize":{"type":"method","name":"initialize","children":[],"call":[" fill_size= "]}," Archive Zip Codec TraditionalEncryption Decrypt open":{"type":"method","name":"open","children":[],"call":[]}," Archive Zip Codec TraditionalEncryption Encrypt unbuffered_write":{"type":"method","name":"unbuffered_write","children":[],"call":["string length "," update_keys ","byte chr ","@encrypt_buffer << ","(send\n  (lvar :byte) :^\n  (lvar :temp)) chr ","byte ^ "," decrypt_byte ","string each_byte ","@encrypt_buffer slice! "," io write "," io ","@encrypt_buffer empty? "," io write > ","string to_s ","string to_s  length ","(send\n  (lvar :byte) :^\n  (lvar : decrypt_byte )) chr ","string to_s  each_byte ","string to_s  to_s "]}," Archive Zip Codec TraditionalEncryption Encrypt unbuffered_seek":{"type":"method","name":"unbuffered_seek","children":[],"call":[" initialize_keys "," io rewind "," io "," raise ","whence == ","@io respond_to? ","offset == "]}," Archive Zip Codec TraditionalEncryption Encrypt initialize_keys":{"type":"method","name":"initialize_keys","children":[],"call":[" sleep ","header slice! "," unbuffered_write ","header size > ","header size ","header << "," mtime to_dos_time pack [] "," mtime to_dos_time pack "," mtime to_dos_time "," mtime "," rand chr "," rand ","10 times ","(send\n  (begin\n    (send\n      (lvar :time) :>>\n      (int 8))) :&\n  (int 255)) chr ","(send\n  (lvar :time) :>>\n  (int 8)) & ","time >> ","(send\n  (lvar :time) :&\n  (int 255)) chr ","time & "," mtime to_dos_time to_i ","header << << "," m mtime to_dos_time to_i  to_dos_ mtime to_dos_time to_i  pack [] "," m mtime to_dos_time to_i  to_dos_ mtime to_dos_time to_i  pack "," m mtime to_dos_time to_i  to_dos_ mtime to_dos_time to_i  "," m mtime to_dos_time to_i  ","10  mtime to_dos_time to_i s ","(send\n  (begin\n    (send\n      (lvar : mtime to_dos_time to_i ) :>>\n      (int 8))) :&\n  (int 255)) chr ","(send\n  (lvar : mtime to_dos_time to_i ) :>>\n  (int 8)) & "," mtime to_dos_time to_i  >> ","(send\n  (lvar : mtime to_dos_time to_i ) :&\n  (int 255)) chr "," mtime to_dos_time to_i  & "," m mtime to_dos_time to_i  to_dos_ mtime to_dos_time to_i  to_i "]}," Archive Zip Codec TraditionalEncryption Encrypt close":{"type":"method","name":"close","children":[],"call":[" io close "," io "," write_ready? ","@encrypt_buffer slice! "," io write ","@encrypt_buffer empty? "," flush "]}," Archive Zip Codec TraditionalEncryption Encrypt initialize":{"type":"method","name":"initialize","children":[],"call":[" flush_size= "]}," Archive Zip Codec TraditionalEncryption Encrypt open":{"type":"method","name":"open","children":[],"call":[]}," Archive Zip Codec TraditionalEncryption Base decrypt_byte":{"type":"method","name":"decrypt_byte","children":[],"call":["(send\n  (begin\n    (send\n      (lvar :temp) :*\n      (begin\n        (send\n          (lvar :temp) :^\n          (int 1))))) :>>\n  (int 8)) & ","(send\n  (lvar :temp) :*\n  (begin\n    (send\n      (lvar :temp) :^\n      (int 1)))) >> ","temp * ","temp ^ ","(send\n  (ivar :@key2) :|\n  (int 2)) & ","@key2 | ","(send\n  (begin\n    (send\n      (lvar :(send\n  (ivar :@key2) :|\n  (int 2)) & ) :*\n      (begin\n        (send\n          (lvar :(send\n  (ivar :@key2) :|\n  (int 2)) & ) :^\n          (int 1))))) :>>\n  (int 8)) & ","(send\n  (lvar :(send\n  (ivar :@key2) :|\n  (int 2)) & ) :*\n  (begin\n    (send\n      (lvar :(send\n  (ivar :@key2) :|\n  (int 2)) & ) :^\n      (int 1)))) >> ","(send\n  (ivar :@key2) :|\n  (int 2)) &  * ","(send\n  (ivar :@key2) :|\n  (int 2)) &  ^ "]}," Archive Zip Codec TraditionalEncryption Base update_keys":{"type":"method","name":"update_keys","children":[],"call":["Zlib  crc32 ~ ","Zlib  crc32 ","@key2 ~ ","(send\n  (ivar :@key1) :>>\n  (int 24)) chr ","@key1 >> ","(send\n  (send\n    (begin\n      (send\n        (ivar :@key1) :+\n        (begin\n          (send\n            (ivar :@key0) :&\n            (int 255))))) :*\n    (int 134775813)) :+\n  (int 1)) & ","(send\n  (ivar :@key1) :+\n  (begin\n    (send\n      (ivar :@key0) :&\n      (int 255)))) * + ","(send\n  (ivar :@key1) :+\n  (begin\n    (send\n      (ivar :@key0) :&\n      (int 255)))) * ","@key1 + ","@key0 & ","@key0 ~ ","Zlib  crc32 ^ ","@key2 ^ ","@key0 ^ ","Zlib  crc32 ~  ~ ","Zlib  crc32 ^  ~ ","(send\n  (ivar :(send\n  (send\n    (begin\n      (send\n        (ivar :@key1) :+\n        (begin\n          (send\n            (ivar :@key0) :&\n            (int 255))))) :*\n    (int 134775813)) :+\n  (int 1)) & ) :>>\n  (int 24)) chr ","(send\n  (send\n    (begin\n      (send\n        (ivar :@key1) :+\n        (begin\n          (send\n            (ivar :@key0) :&\n            (int 255))))) :*\n    (int 134775813)) :+\n  (int 1)) &  >> ","(send\n  (send\n    (begin\n      (send\n        (ivar :(send\n  (send\n    (begin\n      (send\n        (ivar :@key1) :+\n        (begin\n          (send\n            (ivar :@key0) :&\n            (int 255))))) :*\n    (int 134775813)) :+\n  (int 1)) & ) :+\n        (begin\n          (send\n            (ivar :@key0) :&\n            (int 255))))) :*\n    (int 134775813)) :+\n  (int 1)) & ","(send\n  (send\n    (begin\n      (send\n        (ivar :@key1) :+\n        (begin\n          (send\n            (ivar :Zlib  crc32 ~ ) :&\n            (int 255))))) :*\n    (int 134775813)) :+\n  (int 1)) & ","(send\n  (send\n    (begin\n      (send\n        (ivar :@key1) :+\n        (begin\n          (send\n            (ivar :Zlib  crc32 ^ ) :&\n            (int 255))))) :*\n    (int 134775813)) :+\n  (int 1)) & ","(send\n  (ivar :(send\n  (send\n    (begin\n      (send\n        (ivar :@key1) :+\n        (begin\n          (send\n            (ivar :@key0) :&\n            (int 255))))) :*\n    (int 134775813)) :+\n  (int 1)) & ) :+\n  (begin\n    (send\n      (ivar :@key0) :&\n      (int 255)))) * + ","(send\n  (ivar :@key1) :+\n  (begin\n    (send\n      (ivar :Zlib  crc32 ~ ) :&\n      (int 255)))) * + ","(send\n  (ivar :@key1) :+\n  (begin\n    (send\n      (ivar :Zlib  crc32 ^ ) :&\n      (int 255)))) * + ","(send\n  (ivar :(send\n  (send\n    (begin\n      (send\n        (ivar :@key1) :+\n        (begin\n          (send\n            (ivar :@key0) :&\n            (int 255))))) :*\n    (int 134775813)) :+\n  (int 1)) & ) :+\n  (begin\n    (send\n      (ivar :@key0) :&\n      (int 255)))) * ","(send\n  (ivar :@key1) :+\n  (begin\n    (send\n      (ivar :Zlib  crc32 ~ ) :&\n      (int 255)))) * ","(send\n  (ivar :@key1) :+\n  (begin\n    (send\n      (ivar :Zlib  crc32 ^ ) :&\n      (int 255)))) * ","(send\n  (send\n    (begin\n      (send\n        (ivar :@key1) :+\n        (begin\n          (send\n            (ivar :@key0) :&\n            (int 255))))) :*\n    (int 134775813)) :+\n  (int 1)) &  + ","Zlib  crc32 ~  & ","Zlib  crc32 ^  & ","Zlib  crc32 ~  ^ ","Zlib  crc32 ^  ^ "]}," Archive Zip Codec TraditionalEncryption Base initialize_keys":{"type":"method","name":"initialize_keys","children":[],"call":[" update_keys ","byte chr ","@password each_byte "]}," Archive Zip Codec TraditionalEncryption Base initialize":{"type":"method","name":"initialize","children":[],"call":[" initialize_keys ","password nil? "]}," Archive Zip Codec Store Decompress unbuffered_seek":{"type":"method","name":"unbuffered_seek","children":[],"call":["@io rewind "," raise ","whence == ","@io respond_to? ","offset == "]}," Archive Zip Codec Store Decompress unbuffered_read":{"type":"method","name":"unbuffered_read","children":[],"call":["Zlib  crc32 ","buffer length "," raise ","buffer nil? ","@io read ","@io read  length ","@io read  nil? "]}," Archive Zip Codec Store Decompress data_descriptor":{"type":"method","name":"data_descriptor","children":[],"call":["DataDescriptor  new "]}," Archive Zip Codec Store Decompress close":{"type":"method","name":"close","children":[],"call":["@io close "]}," Archive Zip Codec Store Decompress initialize":{"type":"method","name":"initialize","children":[],"call":[" fill_size= "]}," Archive Zip Codec Store Decompress open":{"type":"method","name":"open","children":[],"call":[]}," Archive Zip Codec Store Compress unbuffered_write":{"type":"method","name":"unbuffered_write","children":[],"call":["Zlib  crc32 ","string slice ","@io write "]}," Archive Zip Codec Store Compress unbuffered_seek":{"type":"method","name":"unbuffered_seek","children":[],"call":["@io rewind "," raise ","whence == ","@io respond_to? ","offset == "]}," Archive Zip Codec Store Compress data_descriptor":{"type":"method","name":"data_descriptor","children":[],"call":["DataDescriptor  new "]}," Archive Zip Codec Store Compress close":{"type":"method","name":"close","children":[],"call":["@io close "]}," Archive Zip Codec Store Compress initialize":{"type":"method","name":"initialize","children":[],"call":[" flush_size= "]}," Archive Zip Codec Store Compress open":{"type":"method","name":"open","children":[],"call":[]}," Archive Zip Codec NullEncryption header_size":{"type":"method","name":"header_size","children":[],"call":[]}," Archive Zip Codec NullEncryption general_purpose_flags":{"type":"method","name":"general_purpose_flags","children":[],"call":[]}," Archive Zip Codec NullEncryption version_needed_to_extract":{"type":"method","name":"version_needed_to_extract","children":[],"call":[]}," Archive Zip Codec NullEncryption decryptor":{"type":"method","name":"decryptor","children":[],"call":["Decrypt  open "]}," Archive Zip Codec NullEncryption encryptor":{"type":"method","name":"encryptor","children":[],"call":["Encrypt  open "]}," Archive Zip Codec NullEncryption Decrypt unbuffered_seek":{"type":"method","name":"unbuffered_seek","children":[],"call":["@io rewind "," raise ","whence == ","@io respond_to? ","offset == "]}," Archive Zip Codec NullEncryption Decrypt unbuffered_read":{"type":"method","name":"unbuffered_read","children":[],"call":["buffer length "," raise ","buffer nil? ","@io read ","@io read  length ","@io read  nil? "]}," Archive Zip Codec NullEncryption Decrypt close":{"type":"method","name":"close","children":[],"call":["@io close "]}," Archive Zip Codec NullEncryption Decrypt initialize":{"type":"method","name":"initialize","children":[],"call":[" fill_size= "]}," Archive Zip Codec NullEncryption Decrypt open":{"type":"method","name":"open","children":[],"call":[]}," Archive Zip Codec NullEncryption Encrypt unbuffered_write":{"type":"method","name":"unbuffered_write","children":[],"call":["@io write "]}," Archive Zip Codec NullEncryption Encrypt unbuffered_seek":{"type":"method","name":"unbuffered_seek","children":[],"call":["@io rewind "," raise ","whence == ","@io respond_to? ","offset == "]}," Archive Zip Codec NullEncryption Encrypt close":{"type":"method","name":"close","children":[],"call":["@io close "]}," Archive Zip Codec NullEncryption Encrypt initialize":{"type":"method","name":"initialize","children":[],"call":[" flush_size= "]}," Archive Zip Codec NullEncryption Encrypt open":{"type":"method","name":"open","children":[],"call":[]}," Archive Zip Codec Deflate Decompress unbuffered_seek":{"type":"method","name":"unbuffered_seek","children":[],"call":["whence == "]}," Archive Zip Codec Deflate Decompress unbuffered_read":{"type":"method","name":"unbuffered_read","children":[],"call":["Zlib  crc32 "]}," Archive Zip Codec Deflate Decompress data_descriptor":{"type":"method","name":"data_descriptor","children":[],"call":["DataDescriptor  new "," uncompressed_size "," compressed_size "," crc32 "]}," Archive Zip Codec Deflate Decompress close":{"type":"method","name":"close","children":[],"call":[" delegate close "," delegate "]}," Archive Zip Codec Deflate Decompress initialize":{"type":"method","name":"initialize","children":[],"call":["Zlib MAX_WBITS  -@ "]}," Archive Zip Codec Deflate Decompress open":{"type":"method","name":"open","children":[],"call":[]}," Archive Zip Codec Deflate Compress unbuffered_write":{"type":"method","name":"unbuffered_write","children":[],"call":["Zlib  crc32 "]}," Archive Zip Codec Deflate Compress unbuffered_seek":{"type":"method","name":"unbuffered_seek","children":[],"call":["whence == "]}," Archive Zip Codec Deflate Compress data_descriptor":{"type":"method","name":"data_descriptor","children":[],"call":["DataDescriptor  new "," uncompressed_size "," compressed_size "," crc32 "]}," Archive Zip Codec Deflate Compress close":{"type":"method","name":"close","children":[],"call":[" delegate close "," delegate "]}," Archive Zip Codec Deflate Compress initialize":{"type":"method","name":"initialize","children":[],"call":["Zlib MAX_WBITS  -@ "]}," Archive Zip Codec Deflate Compress open":{"type":"method","name":"open","children":[],"call":[]}," Zlib ZReader checksum":{"type":"method","name":"checksum","children":[],"call":["@inflater adler ","@inflater closed? ","@window_bits < "]}," Zlib ZWriter unbuffered_seek":{"type":"method","name":"unbuffered_seek","children":[],"call":["@deflater total_in ","Zlib Deflate  new ","@deflater close ","@deflater finish "," delegate rewind "," delegate "," raise ","whence == "," delegate respond_to? ","offset == ","Zlib Deflate  new  total_in ","Zlib Deflate  new  close ","Zlib Deflate  new  finish "]}," Zlib ZWriter checksum":{"type":"method","name":"checksum","children":[],"call":["@deflater adler ","@deflater closed? ","@window_bits < "]}," Archive DOSTime validate":{"type":"method","name":"validate","children":[],"call":[" raise ","year > ","month > ","month < ","day < ","hour > ","minute > ","second > ","(send\n  (send\n    (int 127) :<<\n    (int 25)) :&\n  (ivar :@dos_time)) >> ","127 << & ","127 << ","(send\n  (send\n    (int 15) :<<\n    (int 21)) :&\n  (ivar :@dos_time)) >> ","15 << & ","15 << ","(send\n  (send\n    (int 31) :<<\n    (int 16)) :&\n  (ivar :@dos_time)) >> ","31 << & ","31 << ","(send\n  (send\n    (int 31) :<<\n    (int 11)) :&\n  (ivar :@dos_time)) >> ","(send\n  (send\n    (int 63) :<<\n    (int 5)) :&\n  (ivar :@dos_time)) >> ","63 << & ","63 << ","31 & ","(send\n  (send\n    (int 127) :<<\n    (int 25)) :&\n  (ivar :@dos_time)) >>  > ","(send\n  (send\n    (int 15) :<<\n    (int 21)) :&\n  (ivar :@dos_time)) >>  > ","(send\n  (send\n    (int 15) :<<\n    (int 21)) :&\n  (ivar :@dos_time)) >>  < ","(send\n  (send\n    (int 31) :<<\n    (int 16)) :&\n  (ivar :@dos_time)) >>  < ","(send\n  (send\n    (int 31) :<<\n    (int 11)) :&\n  (ivar :@dos_time)) >>  > ","(send\n  (send\n    (int 63) :<<\n    (int 5)) :&\n  (ivar :@dos_time)) >>  > "]}," Archive DOSTime to_time":{"type":"method","name":"to_time","children":[],"call":["Time  local ","(send\n  (begin\n    (send\n      (send\n        (int 127) :<<\n        (int 25)) :&\n      (ivar :@dos_time))) :>>\n  (int 25)) + ","(send\n  (send\n    (int 127) :<<\n    (int 25)) :&\n  (ivar :@dos_time)) >> ","127 << & ","127 << ","(send\n  (send\n    (int 15) :<<\n    (int 21)) :&\n  (ivar :@dos_time)) >> ","15 << & ","15 << ","(send\n  (send\n    (int 31) :<<\n    (int 16)) :&\n  (ivar :@dos_time)) >> ","31 << & ","31 << ","(send\n  (send\n    (int 31) :<<\n    (int 11)) :&\n  (ivar :@dos_time)) >> ","(send\n  (send\n    (int 63) :<<\n    (int 5)) :&\n  (ivar :@dos_time)) >> ","63 << & ","63 << ","(begin\n  (send\n    (int 31) :&\n    (ivar :@dos_time))) * ","31 & "]}," Archive DOSTime pack":{"type":"method","name":"pack","children":[],"call":["(send nil :to_i) pack "," to_i "]}," Archive DOSTime to_i":{"type":"method","name":"to_i","children":[],"call":[]}," Archive DOSTime cmp":{"type":"method","name":"cmp","children":[],"call":[" to_i <=> ","other to_i "," to_i "]}," Archive DOSTime initialize":{"type":"method","name":"initialize","children":[],"call":[" validate ","dos_time unpack [] ","dos_time unpack "," raise ","dos_time length == ","dos_time length ","Time  now to_dos_time to_i ","Time  now to_dos_time ","Time  now ","Time  now to_dos_time dos_time "]}," IOExtensions read_exactly":{"type":"method","name":"read_exactly","children":[],"call":[]}," Integer ord":{"type":"method","name":"ord","children":[],"call":[]}," BinaryStringIO set_encoding":{"type":"method","name":"set_encoding","children":[],"call":[" raise "]}," BinaryStringIO initialize":{"type":"method","name":"initialize","children":[],"call":[" set_encoding "," respond_to? "]}," Archive Zip ExtraField Unix dump_central":{"type":"method","name":"dump_central","children":[],"call":[]}}