{" DatabaseCleaner Strategy cleaning":{"type":"method","name":"cleaning","children":[],"call":[" clean "," start "]}," DatabaseCleaner Strategy clean":{"type":"method","name":"clean","children":[],"call":[" raise "]}," DatabaseCleaner Strategy start":{"type":"method","name":"start","children":[],"call":[]}," DatabaseCleaner Strategy db":{"type":"method","name":"db","children":[],"call":[]}," DatabaseCleaner Strategy initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "," class name sub sub "," class name sub "," class name "," class "," class  class name sub sub  sub sub "," class  class name sub sub  sub "," class  class name sub sub  "]}," DatabaseCleaner Spec DatabaseHelper default_config":{"type":"method","name":"default_config","children":[],"call":[" db_config [] "," db to_s "," db "," db_config "]}," DatabaseCleaner Spec DatabaseHelper db_config":{"type":"method","name":"db_config","children":[],"call":["YAML  load ","IO  read "]}," DatabaseCleaner Spec DatabaseHelper drop_db":{"type":"method","name":"drop_db","children":[],"call":[" connection execute "," default_config [] "," default_config "," connection "," db == "," db ","File  unlink "," db_config [] [] "," db_config [] "," db_config "]}," DatabaseCleaner Spec DatabaseHelper load_schema":{"type":"method","name":"load_schema","children":[],"call":[" connection execute "," connection "," db "]}," DatabaseCleaner Spec DatabaseHelper create_db":{"type":"method","name":"create_db","children":[],"call":[" connection execute "," default_config [] "," default_config "," connection "," establish_connection "," default_config merge "," db == "," db "]}," DatabaseCleaner Spec DatabaseHelper establish_connection":{"type":"method","name":"establish_connection","children":[],"call":[" raise "]}," DatabaseCleaner Spec DatabaseHelper teardown":{"type":"method","name":"teardown","children":[],"call":[" drop_db "]}," DatabaseCleaner Spec DatabaseHelper setup":{"type":"method","name":"setup","children":[],"call":[" load_schema "," establish_connection "," create_db "]}," DatabaseCleaner Spec DatabaseHelper with_all_dbs":{"type":"method","name":"with_all_dbs","children":[],"call":[]}," DatabaseCleaner Safeguard run":{"type":"method","name":"run","children":[],"call":["const new run ","const new ","CHECKS  each "]}," DatabaseCleaner Safeguard Production skip?":{"type":"method","name":"skip?","children":[],"call":["DatabaseCleaner  allow_production ","ENV  [] "]}," DatabaseCleaner Safeguard Production key":{"type":"method","name":"key","children":[],"call":["ENV  [] == ","ENV  [] ","KEYS  detect "]}," DatabaseCleaner Safeguard Production given?":{"type":"method","name":"given?","children":[],"call":[" key ! ! "," key ! "," key "]}," DatabaseCleaner Safeguard Production run":{"type":"method","name":"run","children":[],"call":[" raise ","Error ProductionEnv  new "," key "," given? "," skip? ! "," skip? "]}," DatabaseCleaner Safeguard RemoteDatabaseUrl skip?":{"type":"method","name":"skip?","children":[],"call":["DatabaseCleaner  url_allowlist ","DatabaseCleaner  allow_remote_database_url ","ENV  [] ","DatabaseCleaner  url_whitelist "]}," DatabaseCleaner Safeguard RemoteDatabaseUrl remote?":{"type":"method","name":"remote?","children":[],"call":["host end_with? ","LOCAL  include? ","parsed host ","parsed scheme == ","parsed scheme ","URI  parse ","parsed host  end_with? ","parsed parsed host  ","URI  parse  host ","URI  parse  scheme == ","URI  parse  scheme "]}," DatabaseCleaner Safeguard RemoteDatabaseUrl given?":{"type":"method","name":"given?","children":[],"call":[" remote? ","ENV  [] "]}," DatabaseCleaner Safeguard RemoteDatabaseUrl run":{"type":"method","name":"run","children":[],"call":[" raise "," given? "," skip? ! "," skip? "]}," DatabaseCleaner Safeguard AllowedUrl skip?":{"type":"method","name":"skip?","children":[],"call":["DatabaseCleaner  url_allowlist ! ","DatabaseCleaner  url_allowlist "]}," DatabaseCleaner Safeguard AllowedUrl database_url_not_allowed?":{"type":"method","name":"database_url_not_allowed?","children":[],"call":["(send\n  (send\n    (const nil :DatabaseCleaner) :url_allowlist) :any?) ! ","allowed === ","ENV  [] ","DatabaseCleaner  url_allowlist any? ","DatabaseCleaner  url_allowlist "]}," DatabaseCleaner Safeguard AllowedUrl run":{"type":"method","name":"run","children":[],"call":[" raise "," database_url_not_allowed? "," skip? "]}," DatabaseCleaner Safeguard Error UrlNotAllowed initialize":{"type":"method","name":"initialize","children":[],"call":[]}," DatabaseCleaner Safeguard Error ProductionEnv initialize":{"type":"method","name":"initialize","children":[],"call":[]}," DatabaseCleaner Safeguard Error RemoteDatabaseUrl initialize":{"type":"method","name":"initialize","children":[],"call":[]}," DatabaseCleaner NullStrategy cleaning":{"type":"method","name":"cleaning","children":[],"call":[]}," DatabaseCleaner NullStrategy clean":{"type":"method","name":"clean","children":[],"call":[]}," DatabaseCleaner NullStrategy db=":{"type":"method","name":"db=","children":[],"call":[]}," DatabaseCleaner NullStrategy start":{"type":"method","name":"start","children":[],"call":[]}," DatabaseCleaner Deprecator deprecate":{"type":"method","name":"deprecate","children":[],"call":["@methods_already_warned []= ","$stderr puts ","@methods_already_warned key? "]}," DatabaseCleaner Deprecator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," DatabaseCleaner deprecate":{"type":"method","name":"deprecate","children":[],"call":["@@deprecator deprecate ","Deprecator  new "," caller first [] to_sym "," caller first [] "," caller first "," caller "]}," DatabaseCleaner cleaners":{"type":"method","name":"cleaners","children":[],"call":["Cleaners  new "]}," DatabaseCleaner Cleaners remove_duplicates":{"type":"method","name":"remove_duplicates","children":[],"call":[" replace ","cleaners []= ","cleaners values include? ","cleaners values "," reduce ","Cleaners  new "]}," DatabaseCleaner Cleaners add_cleaner":{"type":"method","name":"add_cleaner","children":[],"call":[" []= ","Cleaner  new "," DatabaseCleaner Base  new "]}," DatabaseCleaner Cleaners clean_with":{"type":"method","name":"clean_with","children":[],"call":["cleaner clean_with "," values each "," values ","Safeguard  new run ","Safeguard  new "]}," DatabaseCleaner Cleaners cleaning":{"type":"method","name":"cleaning","children":[],"call":["(send\n  (send nil :values) :inject\n  (lvar :inner_block)) call ","cleaner cleaning "," proc "," values inject "," values ","Safeguard  new run ","Safeguard  new "]}," DatabaseCleaner Cleaners clean":{"type":"method","name":"clean","children":[],"call":["cleaner clean "," values each "," values ","Safeguard  new run ","Safeguard  new "]}," DatabaseCleaner Cleaners start":{"type":"method","name":"start","children":[],"call":["cleaner start "," values each "," values ","Safeguard  new run ","Safeguard  new "]}," DatabaseCleaner Cleaners strategy=":{"type":"method","name":"strategy=","children":[],"call":[" remove_duplicates ","cleaner strategy= "," values each "," values "]}," DatabaseCleaner Cleaners []":{"type":"method","name":"[]","children":[],"call":[" add_cleaner "," fetch "," raise ","orm nil? "]}," DatabaseCleaner Cleaners initialize":{"type":"method","name":"initialize","children":[],"call":[" replace "]}," DatabaseCleaner Cleaner underscore":{"type":"method","name":"underscore","children":[],"call":[]}," DatabaseCleaner Cleaner camelize":{"type":"method","name":"camelize","children":[],"call":["string gsub! ","2 capitalize ","match capitalize ","string sub ","term to_s ","term to_s  gsub! ","term to_s  sub "]}," DatabaseCleaner Cleaner orm_module":{"type":"method","name":"orm_module","children":[],"call":["DatabaseCleaner  const_get "," camelize "," orm "]}," DatabaseCleaner Cleaner orm_strategy":{"type":"method","name":"orm_strategy","children":[],"call":[" raise ","available_strategies join "," orm "," class available_strategies "," orm_module "," class "," orm_module const_get ","strategy to_s capitalize ","strategy to_s "," class available_strategies  join "," class  class available_strategies  "]}," DatabaseCleaner Cleaner create_strategy":{"type":"method","name":"create_strategy","children":[],"call":[" orm_strategy new "," orm_strategy "]}," DatabaseCleaner Cleaner set_strategy_db":{"type":"method","name":"set_strategy_db","children":[],"call":[" raise ","desired_db != ","strategy db= ","strategy respond_to? "]}," DatabaseCleaner Cleaner strategy_db=":{"type":"method","name":"strategy_db=","children":[],"call":[" set_strategy_db "," strategy "]}," DatabaseCleaner Cleaner clean_with":{"type":"method","name":"clean_with","children":[],"call":["strategy clean "," set_strategy_db "," db "," create_strategy "," create_strategy  clean "," set_ create_strategy _db "," create_ create_strategy  "]}," DatabaseCleaner Cleaner strategy":{"type":"method","name":"strategy","children":[],"call":["NullStrategy  new "]}," DatabaseCleaner Cleaner strategy=":{"type":"method","name":"strategy=","children":[],"call":[" set_strategy_db "," db "," raise ","strategy_args empty? "," create_strategy ","strategy is_a? "]}," DatabaseCleaner Cleaner db":{"type":"method","name":"db","children":[],"call":[]}," DatabaseCleaner Cleaner db=":{"type":"method","name":"db=","children":[],"call":[" strategy_db= "]}," DatabaseCleaner Cleaner initialize":{"type":"method","name":"initialize","children":[],"call":["Safeguard  new run ","Safeguard  new "," db= "]}," DatabaseCleaner Cleaner <=>":{"type":"method","name":"<=>","children":[],"call":["(send nil :orm) <=> ","other db ","other orm "," db "," orm "]}," DatabaseCleaner Cleaner available_strategies":{"type":"method","name":"available_strategies","children":[],"call":[]}," DatabaseCleaner Safeguard WhitelistedUrl skip?":{"type":"method","name":"skip?","children":[],"call":["DatabaseCleaner  url_whitelist ! ","DatabaseCleaner  url_whitelist "]}," DatabaseCleaner Safeguard WhitelistedUrl database_url_not_whitelisted?":{"type":"method","name":"database_url_not_whitelisted?","children":[],"call":["DatabaseCleaner  url_whitelist include? ! ","DatabaseCleaner  url_whitelist include? ","ENV  [] ","DatabaseCleaner  url_whitelist "]}," DatabaseCleaner Safeguard WhitelistedUrl run":{"type":"method","name":"run","children":[],"call":[" raise "," database_url_not_whitelisted? "," skip? "]}," DatabaseCleaner Safeguard Error NotWhitelistedUrl initialize":{"type":"method","name":"initialize","children":[],"call":[]}," DatabaseCleaner Generic Truncation migration_storage_names":{"type":"method","name":"migration_storage_names","children":[],"call":[]}," DatabaseCleaner Generic Truncation tables_to_truncate":{"type":"method","name":"tables_to_truncate","children":[],"call":[" raise "]}," DatabaseCleaner Generic Truncation clean":{"type":"method","name":"clean","children":[],"call":[" raise "]}," DatabaseCleaner Generic Truncation start":{"type":"method","name":"start","children":[],"call":[]}," DatabaseCleaner Generic Truncation initialize":{"type":"method","name":"initialize","children":[],"call":["opts [] ! ! ","opts [] ! ","opts [] ","opts has_key? "," migration_storage_names "," Array flatten "," Array ","(or\n  (send\n    (lvar :opts) :[]\n    (sym :except))\n  (array)) dup "," raise ","opts keys join ","opts keys ","(send\n  (send\n    (lvar :opts) :keys) :-\n  (array\n    (sym :only)\n    (sym :except)\n    (sym :pre_count)\n    (sym :reset_ids)\n    (sym :cache_tables))) empty? ! ","(send\n  (send\n    (lvar :opts) :keys) :-\n  (array\n    (sym :only)\n    (sym :except)\n    (sym :pre_count)\n    (sym :reset_ids)\n    (sym :cache_tables))) empty? ","opts keys - ","opts empty? ! ","opts empty? "]}," DatabaseCleaner Generic Transaction initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","opts empty? ! ","opts empty? "]}," DatabaseCleaner Generic Base ClassMethods available_strategies":{"type":"method","name":"available_strategies","children":[],"call":[]}," DatabaseCleaner Generic Base cleaning":{"type":"method","name":"cleaning","children":[],"call":[" clean "," start "]}," DatabaseCleaner Generic Base db":{"type":"method","name":"db","children":[],"call":[]}," DatabaseCleaner Generic Base included":{"type":"method","name":"included","children":[],"call":[]}," DatabaseCleaner configuration":{"type":"method","name":"configuration","children":[],"call":["Configuration  new "]}," DatabaseCleaner Configuration remove_duplicates":{"type":"method","name":"remove_duplicates","children":[],"call":["@cleaners remove_duplicates "]}," DatabaseCleaner Configuration add_cleaner":{"type":"method","name":"add_cleaner","children":[],"call":["@cleaners add_cleaner "]}," DatabaseCleaner Configuration connections":{"type":"method","name":"connections","children":[],"call":["@cleaners values "]}," DatabaseCleaner Configuration clean_with":{"type":"method","name":"clean_with","children":[],"call":["connection clean_with "," connections each "," connections "]}," DatabaseCleaner Configuration cleaning":{"type":"method","name":"cleaning","children":[],"call":["(send\n  (send nil :connections) :inject\n  (lvar :inner_block)) call ","connection cleaning "," proc "," connections inject "," connections "]}," DatabaseCleaner Configuration clean":{"type":"method","name":"clean","children":[],"call":["connection clean "," connections each "," connections "]}," DatabaseCleaner Configuration start":{"type":"method","name":"start","children":[],"call":["connection start "," connections each "," connections "]}," DatabaseCleaner Configuration initialize":{"type":"method","name":"initialize","children":[],"call":["Cleaners  new "]}," DatabaseCleaner Cleaners orm=":{"type":"method","name":"orm=","children":[],"call":[" remove_duplicates ","cleaner orm= "," values each "," values "]}," DatabaseCleaner Base camelize":{"type":"method","name":"camelize","children":[],"call":["string gsub! ","2 capitalize ","match capitalize ","string sub ","term to_s ","term to_s  gsub! ","term to_s  sub "]}," DatabaseCleaner Base orm_module":{"type":"method","name":"orm_module","children":[],"call":["DatabaseCleaner  const_get "," camelize "," orm "]}," DatabaseCleaner Base orm_strategy":{"type":"method","name":"orm_strategy","children":[],"call":[" raise "," orm_module available_strategies join "," orm_module available_strategies "," orm_module "," orm "," orm_module const_get ","strategy to_s capitalize ","strategy to_s "]}," DatabaseCleaner Base create_strategy":{"type":"method","name":"create_strategy","children":[],"call":[" orm_strategy new "," orm_strategy "]}," DatabaseCleaner Base set_strategy_db":{"type":"method","name":"set_strategy_db","children":[],"call":[" raise ","desired_db != ","strategy db= ","strategy respond_to? "]}," DatabaseCleaner Base strategy_db=":{"type":"method","name":"strategy_db=","children":[],"call":[" set_strategy_db "," strategy "]}," DatabaseCleaner Base clean_with":{"type":"method","name":"clean_with","children":[],"call":["strategy clean "," set_strategy_db "," db "," create_strategy "," create_strategy  clean "," set_ create_strategy _db "," create_ create_strategy  "]}," DatabaseCleaner Base orm=":{"type":"method","name":"orm=","children":[],"call":["orm to_sym "," raise ","orm nil? "]}," DatabaseCleaner Base strategy":{"type":"method","name":"strategy","children":[],"call":["NullStrategy  new "]}," DatabaseCleaner Base strategy=":{"type":"method","name":"strategy=","children":[],"call":[" set_strategy_db "," db "," raise ","strategy_args empty? "," create_strategy ","strategy is_a? "]}," DatabaseCleaner Base db":{"type":"method","name":"db","children":[],"call":[]}," DatabaseCleaner Base db=":{"type":"method","name":"db=","children":[],"call":[" strategy_db= "]}," DatabaseCleaner Base initialize":{"type":"method","name":"initialize","children":[],"call":["Safeguard  new run ","Safeguard  new "," db= ","opts [] ","opts has_key? "," orm= "]}," DatabaseCleaner Base <=>":{"type":"method","name":"<=>","children":[],"call":["(send nil :orm) <=> ","other db ","other orm "," db "," orm "]}}