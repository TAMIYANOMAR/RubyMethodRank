{" Axiom Types finalize":{"type":"method","name":"finalize","children":[],"call":[]}," Axiom Types ValueComparable has_value_within_range":{"type":"method","name":"has_value_within_range","children":[],"call":["object between? "," maximum "," minimum "," constraint ","range method "]}," Axiom Types ValueComparable finalize":{"type":"method","name":"finalize","children":[],"call":[" has_value_within_range "," frozen? "," use_value_within_range ","IceNine  deep_freeze "," maximum "," minimum "]}," Axiom Types ValueComparable extended":{"type":"method","name":"extended","children":[],"call":[]}," Axiom Types Type add_constraint":{"type":"method","name":"add_constraint","children":[],"call":[]}," Axiom Types Type includes":{"type":"method","name":"includes","children":[],"call":[]}," Axiom Types Type constraint":{"type":"method","name":"constraint","children":[],"call":[]}," Axiom Types Type include?":{"type":"method","name":"include?","children":[],"call":[]}," Axiom Types Type finalize":{"type":"method","name":"finalize","children":[],"call":[]}," Axiom Types Type new":{"type":"method","name":"new","children":[],"call":[]}," Axiom Types Options define_option_method":{"type":"method","name":"define_option_method","children":[],"call":[" instance_variable_set "," instance_variable_get ","args empty? "," define_singleton_method "]}," Axiom Types Options assert_method_available":{"type":"method","name":"assert_method_available","children":[],"call":[" raise ","name inspect "," respond_to? "," fail "]}," Axiom Types Options accepted_options":{"type":"method","name":"accepted_options","children":[],"call":[]}," Axiom Types Options options":{"type":"method","name":"options","children":[],"call":["options []= "," public_send "," accepted_options each_with_object "," accepted_options "]}," Axiom Types Options inherited":{"type":"method","name":"inherited","children":[],"call":["descendant add_accepted_option public_send ","descendant add_accepted_option "," options each "," options ","descendant add_accepted_option set_option ","descendant setup_option public_send ","descendant setup_option "]}," Axiom Types Options add_accepted_option":{"type":"method","name":"add_accepted_option","children":[],"call":["descendant send "," __method__ "," descendants each "," descendants "," accepted_options << "," accepted_options "]}," Axiom Types Options accept_options":{"type":"method","name":"accept_options","children":[],"call":[" define_option_method "," add_accepted_option "," assert_method_available ","(send\n  (lvar :new_options) :-\n  (send nil :accepted_options)) each ","new_options - "," accepted_options "," setup_option "]}," Axiom Types Object inherits_from_primitive":{"type":"method","name":"inherits_from_primitive","children":[],"call":[]}," Axiom Types Object finalize":{"type":"method","name":"finalize","children":[],"call":[]}," Axiom Types LengthComparable has_length_within_range":{"type":"method","name":"has_length_within_range","children":[],"call":["object length between? "," maximum_length "," minimum_length ","object length "," constraint ","range cover? "]}," Axiom Types LengthComparable finalize":{"type":"method","name":"finalize","children":[],"call":[" has_length_within_range "," frozen? "," use_length_within_range ","IceNine  deep_freeze "," maximum_length "," minimum_length "]}," Axiom Types LengthComparable extended":{"type":"method","name":"extended","children":[],"call":[]}," Axiom Types Hash matches_key_and_value_types":{"type":"method","name":"matches_key_and_value_types","children":[],"call":[]}," Axiom Types Hash finalize":{"type":"method","name":"finalize","children":[],"call":[]}," Axiom Types Encodable has_encoding":{"type":"method","name":"has_encoding","children":[],"call":["object encoding equal? "," encoding ","object encoding "," constraint "]}," Axiom Types Encodable has_ascii_compatible_encoding":{"type":"method","name":"has_ascii_compatible_encoding","children":[],"call":["object to_s ascii_only? ","object to_s ","object encoding equal? "," encoding ","object encoding "," constraint "]}," Axiom Types Encodable ascii_compatible?":{"type":"method","name":"ascii_compatible?","children":[],"call":[" encoding ascii_compatible? "," encoding "]}," Axiom Types Encodable finalize":{"type":"method","name":"finalize","children":[],"call":[" has_encoding "," has_ascii_compatible_encoding "," ascii_compatible? "," frozen? "," use_encoding "," use_ascii_compatible_encoding "]}," Axiom Types Encodable extended":{"type":"method","name":"extended","children":[],"call":[]}," Axiom Types infer":{"type":"method","name":"infer","children":[],"call":[]}," Axiom Types Type infer":{"type":"method","name":"infer","children":[],"call":[]}," Axiom Types Options set_option":{"type":"method","name":"set_option","children":[],"call":[" public_send "]}," Axiom Types Set base?":{"type":"method","name":"base?","children":[],"call":[]}," Axiom Types Object infer_from_primitive_class":{"type":"method","name":"infer_from_primitive_class","children":[],"call":[]}," Axiom Types Object infer":{"type":"method","name":"infer","children":[],"call":[]}," Axiom Types Hash base?":{"type":"method","name":"base?","children":[],"call":[]}," Axiom Types Hash new_from":{"type":"method","name":"new_from","children":[],"call":[]}," Axiom Types Hash infer_from":{"type":"method","name":"infer_from","children":[],"call":[]}," Axiom Types Hash infer_from_primitive_instance":{"type":"method","name":"infer_from_primitive_instance","children":[],"call":[]}," Axiom Types Hash infer":{"type":"method","name":"infer","children":[],"call":[]}," Axiom Types Collection matches_member_type":{"type":"method","name":"matches_member_type","children":[],"call":[]}," Axiom Types Collection base?":{"type":"method","name":"base?","children":[],"call":[]}," Axiom Types Collection new_from":{"type":"method","name":"new_from","children":[],"call":[]}," Axiom Types Collection infer_from":{"type":"method","name":"infer_from","children":[],"call":[]}," Axiom Types Collection infer_from_primitive_instance":{"type":"method","name":"infer_from_primitive_instance","children":[],"call":[]}," Axiom Types Collection finalize":{"type":"method","name":"finalize","children":[],"call":[]}," Axiom Types Collection infer":{"type":"method","name":"infer","children":[],"call":[]}," Axiom Types Boolean infer_from_primitive_class":{"type":"method","name":"infer_from_primitive_class","children":[],"call":[]}," Axiom Types Array base?":{"type":"method","name":"base?","children":[],"call":[]}," Axiom Types Options setup_option":{"type":"method","name":"setup_option","children":[],"call":["descendant send "," __method__ "," descendants each "," descendants "," accepted_options << "," accepted_options "," instance_variable_set "]}," Axiom Types NegativeInfinity number":{"type":"method","name":"number","children":[],"call":[]}," Axiom Types NegativeInfinity inverse":{"type":"method","name":"inverse","children":[],"call":[]}," Axiom Types NegativeInfinity <=>":{"type":"method","name":"<=>","children":[],"call":["comparison -@ "]}," Axiom Types Infinity number":{"type":"method","name":"number","children":[],"call":[]}," Axiom Types Infinity inverse":{"type":"method","name":"inverse","children":[],"call":[" class inverse instance "," class inverse "," class "]}," Axiom Types Infinity succ":{"type":"method","name":"succ","children":[],"call":[]}," Axiom Types Infinity coerce":{"type":"method","name":"coerce","children":[],"call":[" fail ","other class "," inverse "," class number "," class "]}," Axiom Types Infinity <=>":{"type":"method","name":"<=>","children":[],"call":["klass inverse ","arg == ","klass number "," lambda "," class "," class  inverse "," class  number "]}," Axiom Types Object match_primitive?":{"type":"method","name":"match_primitive?","children":[],"call":[]}," Axiom Types Hash match_primitive?":{"type":"method","name":"match_primitive?","children":[],"call":[]}," Axiom Types Collection match_primitive?":{"type":"method","name":"match_primitive?","children":[],"call":[]}," Axiom Types ValueComparable use_value_within_range":{"type":"method","name":"use_value_within_range","children":[],"call":[" constraint "," range method "," range "]}," Axiom Types Type anonymous?":{"type":"method","name":"anonymous?","children":[],"call":[]}," Axiom Types Type base?":{"type":"method","name":"base?","children":[],"call":[]}," Axiom Types Type base":{"type":"method","name":"base","children":[],"call":[]}," Axiom Types Object inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Axiom Types LengthComparable use_length_within_range":{"type":"method","name":"use_length_within_range","children":[],"call":[" range cover? ","object length "," range "," constraint "]}," Axiom Types Encodable use_encoding":{"type":"method","name":"use_encoding","children":[],"call":["object encoding equal? "," encoding ","object encoding "," constraint "]}," Axiom Types Encodable use_ascii_compatible_encoding":{"type":"method","name":"use_ascii_compatible_encoding","children":[],"call":["object to_s ascii_only? ","object to_s ","object encoding equal? "," encoding ","object encoding "," constraint "]}}