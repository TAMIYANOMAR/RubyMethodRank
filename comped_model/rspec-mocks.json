{" RSpec Mocks teardown":{"type":"method","name":"teardown","children":[],"call":[" space reset_all "," space "," space outside_example= "]}," RSpec Mocks verify":{"type":"method","name":"verify","children":[],"call":[" space verify_all "," space "]}," RSpec Mocks setup":{"type":"method","name":"setup","children":[],"call":["RSpec Mocks Space  new "," space "," include ","(sclass\n  (lvar :includer)\n  (self)) class_eval "," require ","(sclass\n  (lvar :host)\n  (self)) class_eval "," add_extensions "," extensions_added? ","Object  class_eval ","Object  < ","Class  class_eval "," space outside_example= ","RSpec  deprecate ","host inspect ","host is_a? ","(sclass\n  (lvar :host)\n  (self)) class_exec "]}," RSpec Mocks ExampleMethods declare_double":{"type":"method","name":"declare_double","children":[],"call":["RSpec Mocks Mock  new ","args last []= ","args last ","args << ","Hash  === ","RSpec Mocks Double  new ","type new "]}," RSpec Mocks ExampleMethods allow_message_expectations_on_nil":{"type":"method","name":"allow_message_expectations_on_nil","children":[],"call":["Proxy  allow_message_expectations_on_nil ","RSpec Mocks  space proxy_for warn_about_expectations= ","RSpec Mocks  space proxy_for ","RSpec Mocks  space "]}," RSpec Mocks ExampleMethods stub":{"type":"method","name":"stub","children":[],"call":[" declare_double ","RSpec  deprecate "]}," RSpec Mocks ExampleMethods mock":{"type":"method","name":"mock","children":[],"call":[" declare_double ","RSpec  deprecate "]}," RSpec Mocks ExampleMethods double":{"type":"method","name":"double","children":[],"call":[" declare_double ","ExampleMethods  declare_double "]}," RSpec Mocks Space mocks":{"type":"method","name":"mocks","children":[],"call":[]}," RSpec Mocks Space reset_all":{"type":"method","name":"reset_all","children":[],"call":[" mocks clear "," mocks ","mock rspec_reset "," mocks each "," expectation_ordering clear "," expectation_ordering "," receivers clear "," receivers "," receivers each "," any_instance_recorders clear "," any_instance_recorders "," proxies clear "," proxies ","object reset "," proxies each_value ","ConstantMutator  reset_all ","recorder stop_all_observation! "," any_instance_recorders each_value ","mut idempotently_reset ","@constant_mutators reverse each ","@constant_mutators reverse ","proxy reset "]}," RSpec Mocks Space verify_all":{"type":"method","name":"verify_all","children":[],"call":["mock rspec_verify "," mocks each "," mocks "," receivers each "," receivers ","recorder verify "," any_instance_recorders each_value "," any_instance_recorders ","object verify "," proxies each_value "," proxies ","proxy verify "," proxies values each "," proxies values "]}," RSpec Mocks Space add":{"type":"method","name":"add","children":[],"call":[" mocks << "," mocks ","m equal? "," mocks detect "," receivers << "," receivers "," receivers detect "]}," RSpec Mocks Serialization YAML to_yaml":{"type":"method","name":"to_yaml","children":[],"call":[" remove_instance_variable "," instance_variable_defined? ","options [] ","options respond_to? "]}," RSpec Mocks Serialization fix_for":{"type":"method","name":"fix_for","children":[],"call":[]}," RSpec Mocks Proxy find_almost_matching_stub":{"type":"method","name":"find_almost_matching_stub","children":[],"call":["stub matches_name_but_not_args "," method_double [] stubs find "," method_double [] stubs "," method_double [] "," method_double "," method_double_for stubs find "," method_double_for stubs "," method_double_for "]}," RSpec Mocks Proxy find_matching_method_stub":{"type":"method","name":"find_matching_method_stub","children":[],"call":["stub matches? "," method_double [] stubs find "," method_double [] stubs "," method_double [] "," method_double ","stub matches "," method_double_for stubs find "," method_double_for stubs "," method_double_for "]}," RSpec Mocks Proxy find_almost_matching_expectation":{"type":"method","name":"find_almost_matching_expectation","children":[],"call":["expectation matches_name_but_not_args "," method_double [] expectations find "," method_double [] expectations "," method_double [] "," method_double ","expectation called_max_times? ! ","expectation called_max_times? "," find_best_matching_expectation_for "]}," RSpec Mocks Proxy find_matching_expectation":{"type":"method","name":"find_matching_expectation","children":[],"call":["expectation matches? "," method_double [] expectations find "," method_double [] expectations "," method_double [] "," method_double ","expectation called_max_times? ! ","expectation called_max_times? ","expectation matches "," find_best_matching_expectation_for "]}," RSpec Mocks Proxy method_doubles":{"type":"method","name":"method_doubles","children":[],"call":[" method_double values "," method_double "]}," RSpec Mocks Proxy method_double":{"type":"method","name":"method_double","children":[],"call":["h []= ","MethodDouble  new ","Hash  new "]}," RSpec Mocks Proxy raise_unexpected_message_error":{"type":"method","name":"raise_unexpected_message_error","children":[],"call":["@error_generator raise_unexpected_message_error "]}," RSpec Mocks Proxy raise_unexpected_message_args_error":{"type":"method","name":"raise_unexpected_message_args_error","children":[],"call":["@error_generator raise_unexpected_message_args_error "]}," RSpec Mocks Proxy message_received":{"type":"method","name":"message_received","children":[],"call":["@object __send__ ","@object superclass send ","@object superclass ","@object is_a? "," raise_unexpected_message_args_error ","stub advise "," find_almost_matching_stub "," null_object? "," has_negative_expectation? ","expectation advise ","expectation expected_messages_received? "," find_almost_matching_expectation ","expectation invoke ","stub invoke ","expectation ! ","expectation called_max_times? "," find_matching_method_stub "," find_matching_expectation ","@object superclass __send__ ","expectation increase_actual_received_count! ","expectation actual_received_count_matters? "," raise_missing_default_stub_error "," record_message_received ","Class  === ","subscriber notify_received_message "," object ","RSpec Mocks  space any_instance_recorders_from_ancestry_of each ","RSpec Mocks  space any_instance_recorders_from_ancestry_of ","RSpec Mocks  space "," has_negative_expectation? ! ","expectation raise_unexpected_message_args_error ","expectation unadvise "," messages_arg_list "," find_almost_matching_stub  advise "," find_matching_method_stub  advise "," find_almost_matching_ find_almost_matching_stub  "," find_almost_matching_ find_matching_method_stub  "," has_negative_ find_almost_matching_expectation ? "," has_negative_ find_matching_expectation ? "," find_almost_matching_expectation  advise "," find_matching_expectation  advise "," find_almost_matching_expectation  expected_messages_received? "," find_matching_expectation  expected_messages_received? "," find_almost_matching_ find_almost_matching_expectation  "," find_almost_matching_ find_matching_expectation  "," find_almost_matching_expectation  invoke "," find_matching_expectation  invoke "," find_almost_matching_stub  invoke "," find_matching_method_stub  invoke "," find_almost_matching_expectation  ! "," find_matching_expectation  ! "," find_almost_matching_expectation  called_max_times? "," find_matching_expectation  called_max_times? "," find_matching_method_ find_almost_matching_stub  "," find_matching_method_ find_matching_method_stub  "," find_matching_ find_almost_matching_expectation  "," find_matching_ find_matching_expectation  "," find_almost_matching_expectation  increase_actual_received_count! "," find_matching_expectation  increase_actual_received_count! "," find_almost_matching_expectation  actual_received_count_matters? "," find_matching_expectation  actual_received_count_matters? "," raise_missing_default_ find_almost_matching_stub _error "," raise_missing_default_ find_matching_method_stub _error "," has_negative_ find_almost_matching_expectation ? ! "," has_negative_ find_matching_expectation ? ! "," find_almost_matching_expectation  raise_unexpected_message_args_error "," find_matching_expectation  raise_unexpected_message_args_error "," find_almost_matching_expectation  unadvise "," find_matching_expectation  unadvise "]}," RSpec Mocks Proxy record_message_received":{"type":"method","name":"record_message_received","children":[],"call":["@messages_received << ","@order_group invoked ","SpecificMessage  new "," object ","@messages_received_mutex synchronize ","ReceivedArgList  new "]}," RSpec Mocks Proxy has_negative_expectation?":{"type":"method","name":"has_negative_expectation?","children":[],"call":["expectation negative_expectation_for? "," method_double [] expectations detect "," method_double [] expectations "," method_double [] "," method_double "," method_double_for expectations detect "," method_double_for expectations "," method_double_for "," method_double_for expectations find "]}," RSpec Mocks Proxy received_message?":{"type":"method","name":"received_message?","children":[],"call":["array == ","@messages_received any? ","@messages_received_mutex synchronize ","block == ","args == ","received_arg_list args ","method_name == "]}," RSpec Mocks Proxy reset":{"type":"method","name":"reset","children":[],"call":["d reset "," method_doubles each "," method_doubles ","@messages_received clear ","@method_doubles each_value ","@messages_received_mutex synchronize "]}," RSpec Mocks Proxy verify":{"type":"method","name":"verify","children":[],"call":[" reset ","d verify "," method_doubles each "," method_doubles ","@method_doubles each_value "]}," RSpec Mocks Proxy remove_stub":{"type":"method","name":"remove_stub","children":[],"call":[" method_double [] remove_stub "," method_double [] "," method_double "," method_double_for remove_stub "," method_double_for "]}," RSpec Mocks Proxy add_stub":{"type":"method","name":"add_stub","children":[],"call":[" method_double [] add_stub "," method_double [] "," method_double "," method_double_for add_stub "," method_double_for ","CallerFilter  first_non_rspec_line ","opts fetch "]}," RSpec Mocks Proxy add_negative_message_expectation":{"type":"method","name":"add_negative_message_expectation","children":[],"call":[" method_double [] add_negative_expectation "," method_double [] "," method_double "]}," RSpec Mocks Proxy add_message_expectation":{"type":"method","name":"add_message_expectation","children":[],"call":[" method_double [] add_expectation "," method_double [] "," method_double ","Proc  new "," null_object? ","meth_double add_expectation ","meth_double add_default_stub ","block ! "," method_double_for ","CallerFilter  first_non_rspec_line ","opts fetch "," method_double []  add_expectation "," method_double_for  add_expectation "," method_double []  add_default_stub "," method_double_for  add_default_stub "]}," RSpec Mocks Proxy already_proxied_respond_to?":{"type":"method","name":"already_proxied_respond_to?","children":[],"call":[]}," RSpec Mocks Proxy already_proxied_respond_to":{"type":"method","name":"already_proxied_respond_to","children":[],"call":[]}," RSpec Mocks Proxy as_null_object":{"type":"method","name":"as_null_object","children":[],"call":[]}," RSpec Mocks Proxy null_object?":{"type":"method","name":"null_object?","children":[],"call":[]}," RSpec Mocks Proxy initialize":{"type":"method","name":"initialize","children":[],"call":["OrderGroup  new ","ErrorGenerator  new ","RSpec Mocks  space expectation_ordering ","RSpec Mocks  space ","h []= ","MethodDouble  new ","Hash  new ","Mutex  new "," ensure_can_be_proxied! "]}," RSpec Mocks Proxy allow_message_expectations_on_nil?":{"type":"method","name":"allow_message_expectations_on_nil?","children":[],"call":[" warn_about_expectations_on_nil ! "," warn_about_expectations_on_nil "]}," RSpec Mocks Proxy allow_message_expectations_on_nil":{"type":"method","name":"allow_message_expectations_on_nil","children":[],"call":["RSpec Mocks  space add ","RSpec Mocks  space ","RSpec Mocks  space nil? ","$rspec_mocks add ","$rspec_mocks nil? "]}," RSpec Mocks Proxy warn_about_expectations_on_nil=":{"type":"method","name":"warn_about_expectations_on_nil=","children":[],"call":[]}," RSpec Mocks Proxy warn_about_expectations_on_nil":{"type":"method","name":"warn_about_expectations_on_nil","children":[],"call":[]}," RSpec Mocks OrderGroup handle_order_constraint":{"type":"method","name":"handle_order_constraint","children":[],"call":["@error_generator raise_out_of_order_error ","expectation sym "," consume "," ready_for? ","@ordering include? ","expectation raise_out_of_order_error "," remaining_expectations include? "," remaining_expectations ","expectation ordered? "]}," RSpec Mocks OrderGroup consume":{"type":"method","name":"consume","children":[],"call":["@ordering shift ","index + ","expectation ordered? "," remaining_expectations each_with_index "," remaining_expectations "]}," RSpec Mocks OrderGroup ready_for?":{"type":"method","name":"ready_for?","children":[],"call":["@ordering first == ","@ordering first "," remaining_expectations find == "," remaining_expectations find "," remaining_expectations "]}," RSpec Mocks OrderGroup register":{"type":"method","name":"register","children":[],"call":["@ordering << ","@expectations << "]}," RSpec Mocks OrderGroup initialize":{"type":"method","name":"initialize","children":[],"call":["Array  new "]}," RSpec Mocks Mock assign_stubs":{"type":"method","name":"assign_stubs","children":[],"call":[" stub! and_return "," stub! ","stubs each_pair "," stub and_return "," stub "]}," RSpec Mocks Mock extract_option":{"type":"method","name":"extract_option","children":[],"call":["target []= ","source delete ","source [] "]}," RSpec Mocks Mock extract_options":{"type":"method","name":"extract_options","children":[],"call":[" extract_option ","RSpec  deprecate ","stubs_and_options delete ","stubs_and_options [] "]}," RSpec Mocks Mock method_missing":{"type":"method","name":"method_missing","children":[],"call":[" __mock_proxy raise_unexpected_message_error "," __mock_proxy "," __mock_proxy null_object? "," __mock_proxy record_message_received "," raise ","sym == ","message == "]}," RSpec Mocks Mock respond_to?":{"type":"method","name":"respond_to?","children":[],"call":[" __mock_proxy null_object? "," __mock_proxy ","sym != ","message != "]}," RSpec Mocks Mock to_s":{"type":"method","name":"to_s","children":[],"call":[" inspect gsub gsub "," inspect gsub "," inspect "]}," RSpec Mocks Mock inspect":{"type":"method","name":"inspect","children":[],"call":["@name inspect "," sprintf "," object_id "," class "]}," RSpec Mocks Mock ==":{"type":"method","name":"==","children":[],"call":["other == "," __mock_proxy "]}," RSpec Mocks Mock initialize":{"type":"method","name":"initialize","children":[],"call":[" assign_stubs "," extract_options ","stubs_and_options empty? ","name is_a? "]}," RSpec Mocks Methods format_chain":{"type":"method","name":"format_chain","children":[],"call":["chain join split ","chain join "," lambda ","chain << ","hash each ","chain pop ","Hash  === ","chain last ","chain pop  each "]}," RSpec Mocks Methods __mock_proxy":{"type":"method","name":"__mock_proxy","children":[],"call":["Serialization  fix_for ","Proxy  new ","Mock  === ","TestDouble  === "]}," RSpec Mocks Methods null_object?":{"type":"method","name":"null_object?","children":[],"call":[" __mock_proxy null_object? "," __mock_proxy "]}," RSpec Mocks Methods as_null_object":{"type":"method","name":"as_null_object","children":[],"call":[" __mock_proxy as_null_object "," __mock_proxy "]}," RSpec Mocks Methods rspec_reset":{"type":"method","name":"rspec_reset","children":[],"call":[" __mock_proxy reset "," __mock_proxy "]}," RSpec Mocks Methods rspec_verify":{"type":"method","name":"rspec_verify","children":[],"call":[" __mock_proxy verify "," __mock_proxy "]}," RSpec Mocks Methods received_message?":{"type":"method","name":"received_message?","children":[],"call":[" __mock_proxy received_message? ","sym to_sym "," __mock_proxy "]}," RSpec Mocks Methods stub_chain":{"type":"method","name":"stub_chain","children":[],"call":[" stub ","chain shift ","next_in_chain stub_chain ","Object  new ","matching_stub invoke stub_chain ","matching_stub invoke "," __mock_proxy __send__ ","chain [] to_sym ","chain [] "," __mock_proxy ","chain length > ","chain length "," format_chain "," stub! ","methods shift ","methods length > ","methods length ","methods [] to_sym ","methods [] ","chain join split ","chain join ","Mock  new ","Object  new  stub_chain ","Mock  new  stub_chain "," __mock_proxy __send__  invoke stub_chain "," __mock_proxy __send__  invoke ","chain join split  shift ","chain join split  length > ","chain join split  length ","chain join split  [] to_sym ","chain join split  [] "]}," RSpec Mocks Methods unstub":{"type":"method","name":"unstub","children":[],"call":[" __mock_proxy remove_stub "," __mock_proxy "]}," RSpec Mocks Methods stub":{"type":"method","name":"stub","children":[],"call":[" __mock_proxy add_stub ","sym_or_hash to_sym "," caller [] "," caller "," __mock_proxy "," stub! and_return "," stub! ","sym_or_hash each ","Hash  === ","message_or_hash to_sym "," stub and_return "," stub ","message_or_hash each "]}," RSpec Mocks Methods should_not_receive":{"type":"method","name":"should_not_receive","children":[],"call":[" __mock_proxy add_negative_message_expectation ","sym to_sym "," caller [] "," caller "," __mock_proxy ","message to_sym "]}," RSpec Mocks Methods should_receive":{"type":"method","name":"should_receive","children":[],"call":[" __mock_proxy add_message_expectation ","sym to_sym "," caller [] "," caller ","opts [] "," __mock_proxy ","message to_sym "]}," RSpec Mocks MethodDouble reset_nil_expectations_warning":{"type":"method","name":"reset_nil_expectations_warning","children":[],"call":["RSpec Mocks Proxy  warn_about_expectations_on_nil= "," proxy_for_nil_class? "]}," RSpec Mocks MethodDouble raise_method_not_stubbed_error":{"type":"method","name":"raise_method_not_stubbed_error","children":[],"call":[" raise "," method_name ","RSpec Mocks  error_generator raise_method_not_stubbed_error ","RSpec Mocks  error_generator "]}," RSpec Mocks MethodDouble warn_if_nil_class":{"type":"method","name":"warn_if_nil_class","children":[],"call":["Kernel  warn "," caller [] "," caller "," proxy_for_nil_class? & ","RSpec Mocks Proxy  warn_about_expectations_on_nil "," proxy_for_nil_class? "]}," RSpec Mocks MethodDouble proxy_for_nil_class?":{"type":"method","name":"proxy_for_nil_class?","children":[],"call":["@object nil? ","NilClass  === "]}," RSpec Mocks MethodDouble remove_stub":{"type":"method","name":"remove_stub","children":[],"call":[" stubs clear "," stubs "," reset "," expectations empty? "," expectations "," raise_method_not_stubbed_error "," stubs empty? "," remove_stub_if_present "]}," RSpec Mocks MethodDouble add_stub":{"type":"method","name":"add_stub","children":[],"call":[" stubs unshift "," stubs ","MessageExpectation  new "," configure_method "," message_expectation_class new "," message_expectation_class "," MessageExpectation  new s unshift ","  message_expectation_class new s unshift "," MessageExpectation  new s ","  message_expectation_class new s "]}," RSpec Mocks MethodDouble add_negative_expectation":{"type":"method","name":"add_negative_expectation","children":[],"call":[" expectations unshift "," expectations ","NegativeMessageExpectation  new "," configure_method "," NegativeMessageExpectation  new s unshift "," NegativeMessageExpectation  new s "]}," RSpec Mocks MethodDouble add_expectation":{"type":"method","name":"add_expectation","children":[],"call":[" expectations << "," expectations ","MessageExpectation  new ","existing_stub build_child "," stubs first "," stubs "," configure_method "," message_expectation_class new "," message_expectation_class "," MessageExpectation  new s << "," existing_stub build_child s << ","  message_expectation_class new s << "," MessageExpectation  new s "," existing_stub build_child s ","  message_expectation_class new s "," stubs first  build_child "," message_MessageExpectation  new _class new "," message_existing_stub build_child _class new "," message_ message_expectation_class new _class new "," message_MessageExpectation  new _class "," message_existing_stub build_child _class "," message_ message_expectation_class new _class "]}," RSpec Mocks MethodDouble clear":{"type":"method","name":"clear","children":[],"call":[" stubs clear "," stubs "," expectations clear "," expectations "]}," RSpec Mocks MethodDouble reset":{"type":"method","name":"reset","children":[],"call":[" clear "," restore_original_method "," reset_nil_expectations_warning "]}," RSpec Mocks MethodDouble verify":{"type":"method","name":"verify","children":[],"call":["e verify_messages_received "," expectations each "," expectations "]}," RSpec Mocks MethodDouble restore_original_method":{"type":"method","name":"restore_original_method","children":[],"call":[" remove_method "," alias_method "," private_method_defined? "," method_defined? "," object_singleton_class instance_eval "," object_singleton_class "," stashed_method_name ","@stashed_method restore "," object_singleton_class __send__ ","@method_stasher restore "," restore_original_visibility ","@method_stasher method_is_stashed? "," definition_target __send__ "," definition_target "," show_frozen_warning "," object_singleton_class frozen? "," remove_method_from_definition_target "," raise ","FROZEN_ERROR_MSG  === ","e message ","e is_a? ","  stashed_method_name  "]}," RSpec Mocks MethodDouble define_proxy_method":{"type":"method","name":"define_proxy_method","children":[],"call":[" object_singleton_class class_eval "," object_singleton_class "," visibility ","60 + "," visibility_for_method ","134 + ","156 + ","165 + ","172 + "," __send__ ","method_double proxy_method_invoked "," define_method "," definition_target class_exec "," method_name "," definition_target "," save_original_method! "," object_singleton_class class_exec "," save_original_implementation_callable! "," ruby2_keywords ","Module  private_method_defined? "," raise ","FROZEN_ERROR_MSG  === ","e message ","e is_a? "]}," RSpec Mocks MethodDouble stash_original_method":{"type":"method","name":"stash_original_method","children":[],"call":[" alias_method "," private_method_defined? "," method_defined? "," object_singleton_class class_eval "," object_singleton_class "," stashed_method_name "," object_responds_to? ","  stashed_method_name _method_name "]}," RSpec Mocks MethodDouble configure_method":{"type":"method","name":"configure_method","children":[],"call":[" define_proxy_method "," stash_original_method "," warn_if_nil_class ","RSpec Mocks  space add ","RSpec Mocks  space ","$rspec_mocks add ","@stashed_method stash ","@method_stasher stash "," visibility_for_method "," method_name "," visibility "]}," RSpec Mocks MethodDouble object_responds_to?":{"type":"method","name":"object_responds_to?","children":[],"call":["@object respond_to? ","@proxy already_proxied_respond_to ","method_name == ","@object __send__ "," obfuscate ","@proxy already_proxied_respond_to? "]}," RSpec Mocks MethodDouble stashed_method_name":{"type":"method","name":"stashed_method_name","children":[],"call":[" obfuscate "," method_name "]}," RSpec Mocks MethodDouble obfuscate":{"type":"method","name":"obfuscate","children":[],"call":[]}," RSpec Mocks MethodDouble object_singleton_class":{"type":"method","name":"object_singleton_class","children":[],"call":[]}," RSpec Mocks MethodDouble visibility":{"type":"method","name":"visibility","children":[],"call":[" object_singleton_class protected_method_defined? "," object_singleton_class "," object_singleton_class private_method_defined? ","Mock  === ","TestDouble  === ","@proxy visibility_for "]}," RSpec Mocks MethodDouble stubs":{"type":"method","name":"stubs","children":[],"call":[" [] "]}," RSpec Mocks MethodDouble expectations":{"type":"method","name":"expectations","children":[],"call":[" [] "]}," RSpec Mocks MethodDouble initialize":{"type":"method","name":"initialize","children":[],"call":[" store ","StashedInstanceMethod  new "," object_singleton_class ","InstanceMethodStasher  new "]}," RSpec Mocks NegativeMessageExpectation negative_expectation_for?":{"type":"method","name":"negative_expectation_for?","children":[],"call":["@sym == ","@message == "]}," RSpec Mocks NegativeMessageExpectation initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks MessageExpectation clear_actual_received_count!":{"type":"method","name":"clear_actual_received_count!","children":[],"call":[]}," RSpec Mocks MessageExpectation set_expected_received_count":{"type":"method","name":"set_expected_received_count","children":[],"call":["relativity == "]}," RSpec Mocks MessageExpectation negative_expectation_for?":{"type":"method","name":"negative_expectation_for?","children":[],"call":[" negative? ","@message == "]}," RSpec Mocks MessageExpectation ordered":{"type":"method","name":"ordered","children":[],"call":["@order_group register "," inner_implementation_action= "," additional_expected_calls times "," additional_expected_calls ","RSpec  warning "," type == "," type "]}," RSpec Mocks MessageExpectation twice":{"type":"method","name":"twice","children":[],"call":[" set_expected_received_count "," inner_implementation_action= "]}," RSpec Mocks MessageExpectation once":{"type":"method","name":"once","children":[],"call":[" set_expected_received_count "," inner_implementation_action= "]}," RSpec Mocks MessageExpectation never":{"type":"method","name":"never","children":[],"call":["ErrorGenerator  raise_double_negation_error "," negative? "," error_generator raise_double_negation_error "," error_generator "]}," RSpec Mocks MessageExpectation any_number_of_times":{"type":"method","name":"any_number_of_times","children":[],"call":[" inner_implementation_action= ","RSpec  deprecate "]}," RSpec Mocks MessageExpectation times":{"type":"method","name":"times","children":[],"call":[" inner_implementation_action= "]}," RSpec Mocks MessageExpectation at_most":{"type":"method","name":"at_most","children":[],"call":[" set_expected_received_count "," inner_implementation_action= "," raise_already_invoked_error_if_necessary "," __method__ "]}," RSpec Mocks MessageExpectation at_least":{"type":"method","name":"at_least","children":[],"call":[" set_expected_received_count "," inner_implementation_action= ","RSpec  deprecate ","n == "," raise "," raise_already_invoked_error_if_necessary "," __method__ "]}," RSpec Mocks MessageExpectation exactly":{"type":"method","name":"exactly","children":[],"call":[" set_expected_received_count "," inner_implementation_action= "," raise_already_invoked_error_if_necessary "," __method__ "]}," RSpec Mocks MessageExpectation with":{"type":"method","name":"with","children":[],"call":["ArgumentExpectation  new "," block_given? ","args empty? ","ArgumentListMatcher  new "," inner_implementation_action= ","RSpec  deprecate "," raise "," raise_already_invoked_error_if_necessary "," __method__ "]}," RSpec Mocks MessageExpectation generate_error":{"type":"method","name":"generate_error","children":[],"call":["@error_generator raise_similar_message_args_error ","@error_generator raise_expectation_error ","@args_expectation args "," similar_messages empty? "," similar_messages ","@argument_expectation args "," expected_args "," expectation_count_type "]}," RSpec Mocks MessageExpectation advise":{"type":"method","name":"advise","children":[],"call":[" similar_messages << "," similar_messages "]}," RSpec Mocks MessageExpectation similar_messages":{"type":"method","name":"similar_messages","children":[],"call":[]}," RSpec Mocks MessageExpectation matches_exact_count?":{"type":"method","name":"matches_exact_count?","children":[],"call":["@expected_received_count == "]}," RSpec Mocks MessageExpectation matches_at_most_count?":{"type":"method","name":"matches_at_most_count?","children":[],"call":["@actual_received_count <= "]}," RSpec Mocks MessageExpectation matches_at_least_count?":{"type":"method","name":"matches_at_least_count?","children":[],"call":["@actual_received_count >= "]}," RSpec Mocks MessageExpectation ignoring_args?":{"type":"method","name":"ignoring_args?","children":[],"call":["@expected_received_count == "]}," RSpec Mocks MessageExpectation expected_messages_received?":{"type":"method","name":"expected_messages_received?","children":[],"call":[" matches_at_most_count? "," matches_at_least_count? "," matches_exact_count? "," ignoring_args? "]}," RSpec Mocks MessageExpectation verify_messages_received":{"type":"method","name":"verify_messages_received","children":[],"call":["Kernel  raise ","error backtrace insert ","error backtrace "," generate_error "," failed_fast? "," expected_messages_received? ","InsertOntoBacktrace  line "]}," RSpec Mocks MessageExpectation matches_name_but_not_args":{"type":"method","name":"matches_name_but_not_args","children":[],"call":["@args_expectation args_match? ! ","@args_expectation args_match? ","@sym == ","@argument_expectation args_match? ! ","@argument_expectation args_match? ","@message == ","@argument_list_matcher args_match? ! ","@argument_list_matcher args_match? "]}," RSpec Mocks BaseExpectation failed_fast?":{"type":"method","name":"failed_fast?","children":[],"call":[]}," RSpec Mocks BaseExpectation clone_args_to_yield":{"type":"method","name":"clone_args_to_yield","children":[],"call":["args clone "]}," RSpec Mocks BaseExpectation invoke_return_block":{"type":"method","name":"invoke_return_block","children":[],"call":["@return_block call ","@return_block arity == ","@return_block arity ","args << ","block nil? "]}," RSpec Mocks BaseExpectation invoke_consecutive_return_block":{"type":"method","name":"invoke_consecutive_return_block","children":[],"call":["value [] ","(ivar :@actual_received_count) min ","value size - ","value size "," invoke_return_block "," invoke_return_block  [] "," invoke_return_block  size - "," invoke_return_block  size "]}," RSpec Mocks BaseExpectation eval_block":{"type":"method","name":"eval_block","children":[],"call":["block call ","@eval_context instance_exec "]}," RSpec Mocks BaseExpectation invoke_with_yield":{"type":"method","name":"invoke_with_yield","children":[],"call":[" eval_block ","@error_generator raise_wrong_arity_error ","block arity ","args_to_yield_this_time length != ","args_to_yield_this_time length ","block arity > ","@args_to_yield each ","@error_generator raise_missing_block_error ","block nil? "]}," RSpec Mocks BaseExpectation invoke_method_block":{"type":"method","name":"invoke_method_block","children":[],"call":["@error_generator raise_block_failed_error ","detail message ","@method_block call "]}," RSpec Mocks BaseExpectation called_max_times?":{"type":"method","name":"called_max_times?","children":[],"call":["@actual_received_count >= ","@expected_received_count > ","@expected_received_count != "]}," RSpec Mocks BaseExpectation invoke":{"type":"method","name":"invoke","children":[],"call":[" invoke_return_block "," invoke_consecutive_return_block "," invoke_with_yield ","@args_to_yield empty? ! ","@args_to_yield empty? "," invoke_method_block ","@method_block nil? ! ","@method_block nil? ","Kernel  throw ","@symbol_to_throw nil? ","Kernel  raise ","@exception_to_raise nil? ","@order_group handle_order_constraint ","@error_generator raise_expectation_error ","@expected_received_count == ","@args_to_yield size > ","@args_to_yield size "]}," RSpec Mocks BaseExpectation matches?":{"type":"method","name":"matches?","children":[],"call":["@args_expectation args_match? ","@sym == "]}," RSpec Mocks BaseExpectation and_yield":{"type":"method","name":"and_yield","children":[],"call":["@args_to_yield << ","@eval_context extend ","Object  new ","@args_to_yield clear "," require ","Object  new  extend "]}," RSpec Mocks BaseExpectation and_throw":{"type":"method","name":"and_throw","children":[],"call":[]}," RSpec Mocks BaseExpectation and_raise":{"type":"method","name":"and_raise","children":[],"call":[]}," RSpec Mocks BaseExpectation and_return":{"type":"method","name":"and_return","children":[],"call":[" lambda "," block_given? ","values size ","@expected_received_count < "," ignoring_args? ! "," ignoring_args? ","values [] ","Kernel  raise ","@method_block nil? ","values [] s size ","values size  < ","values [] s [] "]}," RSpec Mocks BaseExpectation expected_args":{"type":"method","name":"expected_args","children":[],"call":["@args_expectation args "]}," RSpec Mocks BaseExpectation build_child":{"type":"method","name":"build_child","children":[],"call":["child clone_args_to_yield ","child error_generator= ","new_gen opts= "," error_generator clone "," error_generator ","child clear_actual_received_count! ","child expected_received_count= ","child method_block= ","child expected_from= "," clone "," clone  clone_args_to_yield "," clone  error_generator= "," error_generator clone  opts= "," clone  clear_actual_received_count! "," clone  expected_received_count= "," clone  method_block= "," clone  expected_from= "]}," RSpec Mocks BaseExpectation initialize":{"type":"method","name":"initialize","children":[],"call":["ArgumentExpectation  new ","ArgumentMatchers AnyArgsMatcher  new ","@error_generator opts= "]}," RSpec Mocks InstanceExec instance_exec":{"type":"method","name":"instance_exec","children":[],"call":[" remove_method ","singleton_class module_eval "," send ","Thread  critical= "," define_method "," respond_to? ","Thread  critical "]}," RSpec Mocks ErrorGenerator pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["count == "]}," RSpec Mocks ErrorGenerator count_message":{"type":"method","name":"count_message","children":[],"call":[" pretty_print ","count abs ","count < ","expectation_count_type == "," times "]}," RSpec Mocks ErrorGenerator arg_list":{"type":"method","name":"arg_list","children":[],"call":["(send\n  (lvar :args) :collect) join ","arg inspect ","arg description ","arg respond_to? ","args collect "," arg_has_valid_description ","(send\n  (lvar :args) :map) join ","args map ","RSpec Support ObjectFormatter  format "," arg_has_valid_description? "]}," RSpec Mocks ErrorGenerator format_args":{"type":"method","name":"format_args","children":[],"call":["( + + ","( + "," arg_list ","args empty? "]}," RSpec Mocks ErrorGenerator arg_message":{"type":"method","name":"arg_message","children":[],"call":[" with  + "," format_args "]}," RSpec Mocks ErrorGenerator __raise":{"type":"method","name":"__raise","children":[],"call":["Kernel  raise "," opts [] "," opts "," opts [] nil? "," notify "," prepend_to_backtrace ","RSpec Mocks MockExpectationError  new "]}," RSpec Mocks ErrorGenerator intro":{"type":"method","name":"intro","children":[],"call":["@target inspect ","Class  === ","Mock  === ","@name inspect ","TestDouble  === ","TestDoubleFormatter  format "]}," RSpec Mocks ErrorGenerator raise_wrong_arity_error":{"type":"method","name":"raise_wrong_arity_error","children":[],"call":[" __raise "," arg_list "," intro ","signature description "]}," RSpec Mocks ErrorGenerator raise_missing_block_error":{"type":"method","name":"raise_missing_block_error","children":[],"call":[" __raise "," arg_list "," intro "]}," RSpec Mocks ErrorGenerator raise_block_failed_error":{"type":"method","name":"raise_block_failed_error","children":[],"call":[" __raise "," intro "]}," RSpec Mocks ErrorGenerator raise_out_of_order_error":{"type":"method","name":"raise_out_of_order_error","children":[],"call":[" __raise "," intro "]}," RSpec Mocks ErrorGenerator raise_expectation_error":{"type":"method","name":"raise_expectation_error","children":[],"call":[" __raise "," count_message "," format_args "," intro "," received_part_of_expectation_error "," expected_part_of_expectation_error ","  received_part_of_expectation_error _of_expectation_error ","  expected_part_of_expectation_error _of_expectation_error "]}," RSpec Mocks ErrorGenerator raise_similar_message_args_error":{"type":"method","name":"raise_similar_message_args_error","children":[],"call":[" __raise ","expectation sym inspect ","expectation sym "," intro ","(send\n  (lvar :args) :collect) join "," format_args ","args collect ","expectation expected_args ","expectation message inspect ","expectation message ","(send\n  (lvar :args_for_multiple_calls) :collect) join ","args_for_multiple_calls collect "," format_received_args ","(send\n  (lvar :args_for_multiple_calls) :map) join ","args_for_multiple_calls map "," error_message "," default_error_message ","expectation  format_args  "]}," RSpec Mocks ErrorGenerator raise_unexpected_message_args_error":{"type":"method","name":"raise_unexpected_message_args_error","children":[],"call":[" __raise ","expectation sym inspect ","expectation sym "," intro "," format_args ","expectation expected_args ","expectation message inspect ","expectation message "," format_received_args "," error_message ","message << ","diff empty? "," default_error_message "," diff_message ","expectation  format_args  ","expectation  default_error_message  inspect ","expectation  default_error_message  "," error_ default_error_message  "," default_error_message  << "," diff_message  empty? "," default_error_ default_error_message  "," diff_ default_error_message  ","  diff_message _message "]}," RSpec Mocks ErrorGenerator raise_unexpected_message_error":{"type":"method","name":"raise_unexpected_message_error","children":[],"call":[" __raise "," arg_message "," intro "," format_args "]}," RSpec Mocks ErrorGenerator opts":{"type":"method","name":"opts","children":[],"call":[]}," RSpec Mocks ErrorGenerator initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," RSpec Mocks ArgumentMatchers anythingize_lonely_keys":{"type":"method","name":"anythingize_lonely_keys","children":[],"call":["hash []= "," anything ","args each ","args delete_at ","args last class == ","args last class ","args last ","args delete_at  []= "]}," RSpec Mocks ArgumentMatchers kind_of":{"type":"method","name":"kind_of","children":[],"call":["KindOf  new "]}," RSpec Mocks ArgumentMatchers instance_of":{"type":"method","name":"instance_of","children":[],"call":["InstanceOf  new "]}," RSpec Mocks ArgumentMatchers hash_not_including":{"type":"method","name":"hash_not_including","children":[],"call":["HashNotIncludingMatcher  new "," anythingize_lonely_keys "]}," RSpec Mocks ArgumentMatchers hash_including":{"type":"method","name":"hash_including","children":[],"call":["HashIncludingMatcher  new "," anythingize_lonely_keys ","ArgumentMatchers  anythingize_lonely_keys "]}," RSpec Mocks ArgumentMatchers boolean":{"type":"method","name":"boolean","children":[],"call":["BooleanMatcher  new "]}," RSpec Mocks ArgumentMatchers duck_type":{"type":"method","name":"duck_type","children":[],"call":["DuckTypeMatcher  new "]}," RSpec Mocks ArgumentMatchers no_args":{"type":"method","name":"no_args","children":[],"call":["NoArgsMatcher  new "]}," RSpec Mocks ArgumentMatchers anything":{"type":"method","name":"anything","children":[],"call":["AnyArgMatcher  new "]}," RSpec Mocks ArgumentMatchers any_args":{"type":"method","name":"any_args","children":[],"call":["AnyArgsMatcher  new "]}," RSpec Mocks ArgumentMatchers KindOf ==":{"type":"method","name":"==","children":[],"call":["actual kind_of? "]}," RSpec Mocks ArgumentMatchers KindOf initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks ArgumentMatchers InstanceOf ==":{"type":"method","name":"==","children":[],"call":["actual instance_of? "]}," RSpec Mocks ArgumentMatchers InstanceOf initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks ArgumentMatchers EqualityProxy ==":{"type":"method","name":"==","children":[],"call":["@given == ","RSpec  warn_deprecation ","(str \"              |In RSpec 3.0.0 matchers use `#===` (the match operator) to perform\\n\") gsub ","RSpec CallerFilter  first_non_rspec_line ","DateTime  === "]}," RSpec Mocks ArgumentMatchers EqualityProxy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks ArgumentMatchers MatcherMatcher ==":{"type":"method","name":"==","children":[],"call":["@matcher matches? "]}," RSpec Mocks ArgumentMatchers MatcherMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks ArgumentMatchers DuckTypeMatcher ==":{"type":"method","name":"==","children":[],"call":["value respond_to? ","@methods_to_respond_to all? "]}," RSpec Mocks ArgumentMatchers DuckTypeMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks ArgumentMatchers HashNotIncludingMatcher description":{"type":"method","name":"description","children":[],"call":["@expected inspect sub sub ","@expected inspect sub ","@expected inspect "]}," RSpec Mocks ArgumentMatchers HashNotIncludingMatcher ==":{"type":"method","name":"==","children":[],"call":["value == ","actual [] ","actual has_key? ","@expected each "]}," RSpec Mocks ArgumentMatchers HashNotIncludingMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks ArgumentMatchers HashIncludingMatcher description":{"type":"method","name":"description","children":[],"call":["@expected inspect sub sub ","@expected inspect sub ","@expected inspect "]}," RSpec Mocks ArgumentMatchers HashIncludingMatcher ==":{"type":"method","name":"==","children":[],"call":["value == ","actual [] ","actual has_key? ","@expected each ","v == ","@expected all? "]}," RSpec Mocks ArgumentMatchers HashIncludingMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks ArgumentMatchers BooleanMatcher ==":{"type":"method","name":"==","children":[],"call":["FalseClass  === ","TrueClass  === ","(true) include? "]}," RSpec Mocks ArgumentMatchers BooleanMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks ArgumentMatchers RegexpMatcher ==":{"type":"method","name":"==","children":[],"call":["value == ","value =~ ","value is_a? ","Regexp  === "]}," RSpec Mocks ArgumentMatchers RegexpMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks ArgumentMatchers NoArgsMatcher description":{"type":"method","name":"description","children":[],"call":[]}," RSpec Mocks ArgumentMatchers AnyArgMatcher ==":{"type":"method","name":"==","children":[],"call":[]}," RSpec Mocks ArgumentMatchers AnyArgMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks ArgumentMatchers AnyArgsMatcher description":{"type":"method","name":"description","children":[],"call":[]}," RSpec Mocks ArgumentExpectation match_any_args?":{"type":"method","name":"match_any_args?","children":[],"call":[]}," RSpec Mocks ArgumentExpectation matchers_match?":{"type":"method","name":"matchers_match?","children":[],"call":["@matchers == "]}," RSpec Mocks ArgumentExpectation matchers_block_matches?":{"type":"method","name":"matchers_block_matches?","children":[],"call":["@matchers_block call "]}," RSpec Mocks ArgumentExpectation args_match?":{"type":"method","name":"args_match?","children":[],"call":[" matchers_match? "," matchers_block_matches? "," match_any_args? "," block_passes? "]}," RSpec Mocks ArgumentExpectation is_matcher?":{"type":"method","name":"is_matcher?","children":[],"call":["obj respond_to? & ","obj respond_to? ","obj null_object? ! & & ","(sym :failure_message_for_should) any? ","obj null_object? ! & ","obj null_object? ! ","obj null_object? "," is_stub_as_null_object? ! & & "," is_stub_as_null_object? ! & "," is_stub_as_null_object? ! "," is_stub_as_null_object? "," null_object? ! & & "," null_object? ! & "," null_object? ! "," null_object? "]}," RSpec Mocks ArgumentExpectation matcher_for":{"type":"method","name":"matcher_for","children":[],"call":["ArgumentMatchers EqualityProxy  new ","ArgumentMatchers RegexpMatcher  new ","arg is_a? ","ArgumentMatchers MatcherMatcher  new "," is_matcher? "]}," RSpec Mocks ArgumentExpectation initialize":{"type":"method","name":"initialize","children":[],"call":[" matcher_for ","args collect ","ArgumentMatchers NoArgsMatcher  === ","args first ","ArgumentMatchers AnyArgsMatcher  === ","args empty? "]}," Rspec Mocks ExampleMethods allow_message_expectations_on_nil":{"type":"method","name":"allow_message_expectations_on_nil","children":[],"call":["Proxy  allow_message_expectations_on_nil "]}," Rspec Mocks ExampleMethods mock":{"type":"method","name":"mock","children":[],"call":["Rspec Mocks Mock  new "," declare_double "]}," Rspec Mocks Space mocks":{"type":"method","name":"mocks","children":[],"call":[]}," Rspec Mocks Space reset_all":{"type":"method","name":"reset_all","children":[],"call":[" mocks clear "," mocks ","mock rspec_reset "," mocks each "]}," Rspec Mocks Space verify_all":{"type":"method","name":"verify_all","children":[],"call":["mock rspec_verify "," mocks each "," mocks "]}," Rspec Mocks Space add":{"type":"method","name":"add","children":[],"call":[" mocks << "," mocks ","m equal? "," mocks detect "]}," Rspec Mocks Proxy find_matching_method_stub":{"type":"method","name":"find_matching_method_stub","children":[],"call":["stub matches ","@stubs find "," method_double [] stubs find "," method_double [] stubs "," method_double [] "," method_double "]}," Rspec Mocks Proxy find_almost_matching_expectation":{"type":"method","name":"find_almost_matching_expectation","children":[],"call":["expectation matches_name_but_not_args ","@expectations find "," method_double [] expectations find "," method_double [] expectations "," method_double [] "," method_double "]}," Rspec Mocks Proxy find_matching_expectation":{"type":"method","name":"find_matching_expectation","children":[],"call":["expectation matches ","@expectations find ","expectation called_max_times? ! ","expectation called_max_times? "," method_double [] expectations find "," method_double [] expectations "," method_double [] "," method_double "]}," Rspec Mocks Proxy reset_nil_expectations_warning":{"type":"method","name":"reset_nil_expectations_warning","children":[],"call":[" proxy_for_nil_class? "]}," Rspec Mocks Proxy proxy_for_nil_class?":{"type":"method","name":"proxy_for_nil_class?","children":[],"call":["@target nil? "]}," Rspec Mocks Proxy reset_proxied_methods":{"type":"method","name":"reset_proxied_methods","children":[],"call":[" remove_method "," alias_method "," method_defined? "," target_metaclass instance_eval "," target_metaclass "," munge ","@proxied_methods each "]}," Rspec Mocks Proxy verify_expectations":{"type":"method","name":"verify_expectations","children":[],"call":["expectation verify_messages_received ","@expectations each "]}," Rspec Mocks Proxy target_metaclass":{"type":"method","name":"target_metaclass","children":[],"call":[]}," Rspec Mocks Proxy clear_proxied_methods":{"type":"method","name":"clear_proxied_methods","children":[],"call":["@proxied_methods clear "]}," Rspec Mocks Proxy clear_stubs":{"type":"method","name":"clear_stubs","children":[],"call":["@stubs clear "]}," Rspec Mocks Proxy clear_expectations":{"type":"method","name":"clear_expectations","children":[],"call":["@expectations clear "]}," Rspec Mocks Proxy munge":{"type":"method","name":"munge","children":[],"call":[]}," Rspec Mocks Proxy visibility":{"type":"method","name":"visibility","children":[],"call":[" target_metaclass protected_method_defined? "," target_metaclass "," target_metaclass private_method_defined? ","Mock  === "]}," Rspec Mocks Proxy target_responds_to?":{"type":"method","name":"target_responds_to?","children":[],"call":["@target respond_to? ","sym == ","@target __send__ "," munge "]}," Rspec Mocks Proxy define_expected_method":{"type":"method","name":"define_expected_method","children":[],"call":[" target_metaclass class_eval "," target_metaclass ","@proxied_methods << "," alias_method "," method_defined? "," target_metaclass instance_eval "," munge "," target_responds_to? "," visibility ","@proxied_methods include? "]}," Rspec Mocks Proxy warn_if_nil_class":{"type":"method","name":"warn_if_nil_class","children":[],"call":["Kernel  warn "," caller [] "," caller "," proxy_for_nil_class? & "," proxy_for_nil_class? "]}," Rspec Mocks Proxy __add":{"type":"method","name":"__add","children":[],"call":[" define_expected_method ","$rspec_mocks add ","$rspec_mocks nil? "]}," Rspec Mocks Proxy raise_unexpected_message_error":{"type":"method","name":"raise_unexpected_message_error","children":[],"call":["@error_generator raise_unexpected_message_error "]}," Rspec Mocks Proxy raise_unexpected_message_args_error":{"type":"method","name":"raise_unexpected_message_args_error","children":[],"call":["@error_generator raise_unexpected_message_args_error "]}," Rspec Mocks Proxy message_received":{"type":"method","name":"message_received","children":[],"call":["@target __send__ "," raise_unexpected_message_args_error "," null_object? "," has_negative_expectation? ","expectation advise ","expectation expected_messages_received? "," find_almost_matching_expectation ","expectation invoke ","stub invoke ","expectation ! ","expectation called_max_times? "," find_matching_method_stub "," find_matching_expectation ","@target superclass send ","@target superclass ","@target is_a? ","@object __send__ ","@object superclass send ","@object superclass ","@object is_a? "," has_negative_ find_almost_matching_expectation ? "," has_negative_ find_matching_expectation ? "," find_almost_matching_expectation  advise "," find_matching_expectation  advise "," find_almost_matching_expectation  expected_messages_received? "," find_matching_expectation  expected_messages_received? "," find_almost_matching_ find_almost_matching_expectation  "," find_almost_matching_ find_matching_expectation  "," find_almost_matching_expectation  invoke "," find_matching_expectation  invoke "," find_matching_method_stub  invoke "," find_almost_matching_expectation  ! "," find_matching_expectation  ! "," find_almost_matching_expectation  called_max_times? "," find_matching_expectation  called_max_times? "," find_matching_method_ find_matching_method_stub  "," find_matching_ find_almost_matching_expectation  "," find_matching_ find_matching_expectation  "]}," Rspec Mocks Proxy record_message_received":{"type":"method","name":"record_message_received","children":[],"call":["@messages_received << "]}," Rspec Mocks Proxy has_negative_expectation?":{"type":"method","name":"has_negative_expectation?","children":[],"call":["expectation negative_expectation_for? ","@expectations detect "," method_double [] expectations detect "," method_double [] expectations "," method_double [] "," method_double "]}," Rspec Mocks Proxy received_message?":{"type":"method","name":"received_message?","children":[],"call":["array == ","@messages_received any? "]}," Rspec Mocks Proxy reset":{"type":"method","name":"reset","children":[],"call":[" reset_nil_expectations_warning "," clear_proxied_methods "," reset_proxied_methods "," clear_stubs "," clear_expectations ","d reset "," method_doubles each "," method_doubles "]}," Rspec Mocks Proxy verify":{"type":"method","name":"verify","children":[],"call":[" reset "," verify_expectations ","d verify "," method_doubles each "," method_doubles "]}," Rspec Mocks Proxy add_stub":{"type":"method","name":"add_stub","children":[],"call":["@stubs first ","@stubs unshift ","MessageExpectation  new "," __add "," method_double [] add_stub "," method_double [] "," method_double "]}," Rspec Mocks Proxy add_negative_message_expectation":{"type":"method","name":"add_negative_message_expectation","children":[],"call":["@expectations last ","@expectations << ","NegativeMessageExpectation  new "," block_given? "," warn_if_nil_class "," __add "," method_double [] add_negative_expectation "," method_double [] "," method_double "]}," Rspec Mocks Proxy add_message_expectation":{"type":"method","name":"add_message_expectation","children":[],"call":["@expectations last ","@expectations << ","MessageExpectation  new "," block_given? ","existing_stub build_child ","s sym == ","s sym ","@stubs detect "," warn_if_nil_class "," __add "," method_double [] add_expectation "," method_double [] "," method_double ","@MessageExpectation  new s last ","@existing_stub build_child s last ","@MessageExpectation  new s << ","@existing_stub build_child s << "," method_double [] add_MessageExpectation  new  "," method_double [] add_existing_stub build_child  "]}," Rspec Mocks Proxy as_null_object":{"type":"method","name":"as_null_object","children":[],"call":["@options []= "]}," Rspec Mocks Proxy null_object?":{"type":"method","name":"null_object?","children":[],"call":["@options [] "]}," Rspec Mocks Proxy initialize":{"type":"method","name":"initialize","children":[],"call":["DEFAULT_OPTIONS  dup merge ","DEFAULT_OPTIONS  dup ","OrderGroup  new ","ErrorGenerator  new "]}," Rspec Mocks Proxy allow_message_expectations_on_nil":{"type":"method","name":"allow_message_expectations_on_nil","children":[],"call":["$rspec_mocks add ","$rspec_mocks nil? "]}," Rspec Mocks OrderGroup handle_order_constraint":{"type":"method","name":"handle_order_constraint","children":[],"call":["@error_generator raise_out_of_order_error ","expectation sym "," consume "," ready_for? ","@ordering include? "]}," Rspec Mocks OrderGroup consume":{"type":"method","name":"consume","children":[],"call":["@ordering shift "]}," Rspec Mocks OrderGroup ready_for?":{"type":"method","name":"ready_for?","children":[],"call":["@ordering first == ","@ordering first "]}," Rspec Mocks OrderGroup register":{"type":"method","name":"register","children":[],"call":["@ordering << "]}," Rspec Mocks OrderGroup initialize":{"type":"method","name":"initialize","children":[],"call":["Array  new "]}," Rspec Mocks Mock build_name_from_options":{"type":"method","name":"build_name_from_options","children":[],"call":["{ + + ","{ + ","vals join ","coll << ","pair last inspect ","pair last ","pair first ","options inject "]}," Rspec Mocks Mock assign_stubs":{"type":"method","name":"assign_stubs","children":[],"call":[" stub! and_return "," stub! ","stubs each_pair "]}," Rspec Mocks Mock parse_options":{"type":"method","name":"parse_options","children":[],"call":["options delete ","options has_key? "]}," Rspec Mocks Mock method_missing":{"type":"method","name":"method_missing","children":[],"call":[" __mock_proxy raise_unexpected_message_error "," __mock_proxy "," __mock_proxy null_object? "," __mock_proxy record_message_received "]}," Rspec Mocks Mock to_s":{"type":"method","name":"to_s","children":[],"call":[" inspect gsub gsub "," inspect gsub "," inspect "]}," Rspec Mocks Mock inspect":{"type":"method","name":"inspect","children":[],"call":["@name inspect "," sprintf "," object_id "," class "]}," Rspec Mocks Mock ==":{"type":"method","name":"==","children":[],"call":["other == "," __mock_proxy "]}," Rspec Mocks Mock initialize":{"type":"method","name":"initialize","children":[],"call":[" assign_stubs "," parse_options "," build_name_from_options ","stubs_and_options empty? ","name is_a? "," extract_options "]}," Rspec Mocks Methods __mock_proxy":{"type":"method","name":"__mock_proxy","children":[],"call":["Proxy  new ","Mock  === "]}," Rspec Mocks Methods null_object?":{"type":"method","name":"null_object?","children":[],"call":[" __mock_proxy null_object? "," __mock_proxy "]}," Rspec Mocks Methods as_null_object":{"type":"method","name":"as_null_object","children":[],"call":[" __mock_proxy as_null_object "," __mock_proxy "]}," Rspec Mocks Methods rspec_reset":{"type":"method","name":"rspec_reset","children":[],"call":[" __mock_proxy reset "," __mock_proxy "]}," Rspec Mocks Methods rspec_verify":{"type":"method","name":"rspec_verify","children":[],"call":[" __mock_proxy verify "," __mock_proxy "]}," Rspec Mocks Methods received_message?":{"type":"method","name":"received_message?","children":[],"call":[" __mock_proxy received_message? ","sym to_sym "," __mock_proxy "]}," Rspec Mocks Methods stub_chain":{"type":"method","name":"stub_chain","children":[],"call":[" stub! ","methods shift ","next_in_chain stub_chain ","Object  new ","methods length > ","methods length ","Object  new  stub_chain "]}," Rspec Mocks Methods stub!":{"type":"method","name":"stub!","children":[],"call":[" __mock_proxy add_stub ","sym_or_hash to_sym "," caller [] "," caller "," __mock_proxy "," stub! and_return "," stub! ","sym_or_hash each ","Hash  === "]}," Rspec Mocks Methods should_not_receive":{"type":"method","name":"should_not_receive","children":[],"call":[" __mock_proxy add_negative_message_expectation ","sym to_sym "," caller [] "," caller "," __mock_proxy "]}," Rspec Mocks Methods should_receive":{"type":"method","name":"should_receive","children":[],"call":[" __mock_proxy add_message_expectation ","sym to_sym "," caller [] "," caller ","opts [] "," __mock_proxy "]}," Rspec Mocks NegativeMessageExpectation negative_expectation_for?":{"type":"method","name":"negative_expectation_for?","children":[],"call":["@sym == "]}," Rspec Mocks NegativeMessageExpectation initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Mocks MessageExpectation clear_actual_received_count!":{"type":"method","name":"clear_actual_received_count!","children":[],"call":[]}," Rspec Mocks MessageExpectation set_expected_received_count":{"type":"method","name":"set_expected_received_count","children":[],"call":["relativity == "]}," Rspec Mocks MessageExpectation negative_expectation_for?":{"type":"method","name":"negative_expectation_for?","children":[],"call":[]}," Rspec Mocks MessageExpectation ordered":{"type":"method","name":"ordered","children":[],"call":["@order_group register "]}," Rspec Mocks MessageExpectation twice":{"type":"method","name":"twice","children":[],"call":[]}," Rspec Mocks MessageExpectation once":{"type":"method","name":"once","children":[],"call":[]}," Rspec Mocks MessageExpectation never":{"type":"method","name":"never","children":[],"call":[]}," Rspec Mocks MessageExpectation any_number_of_times":{"type":"method","name":"any_number_of_times","children":[],"call":[]}," Rspec Mocks MessageExpectation times":{"type":"method","name":"times","children":[],"call":[]}," Rspec Mocks MessageExpectation at_most":{"type":"method","name":"at_most","children":[],"call":[" set_expected_received_count "]}," Rspec Mocks MessageExpectation at_least":{"type":"method","name":"at_least","children":[],"call":[" set_expected_received_count "]}," Rspec Mocks MessageExpectation exactly":{"type":"method","name":"exactly","children":[],"call":[" set_expected_received_count "]}," Rspec Mocks MessageExpectation with":{"type":"method","name":"with","children":[],"call":["ArgumentExpectation  new "," block_given? "]}," Rspec Mocks MessageExpectation generate_error":{"type":"method","name":"generate_error","children":[],"call":["@error_generator raise_unexpected_message_args_error ","@error_generator raise_expectation_error ","@args_expectation args "," similar_messages empty? "," similar_messages ","@error_generator raise_similar_message_args_error "]}," Rspec Mocks MessageExpectation advise":{"type":"method","name":"advise","children":[],"call":[" similar_messages << "," similar_messages "]}," Rspec Mocks MessageExpectation similar_messages":{"type":"method","name":"similar_messages","children":[],"call":[]}," Rspec Mocks MessageExpectation matches_exact_count?":{"type":"method","name":"matches_exact_count?","children":[],"call":["@expected_received_count == "]}," Rspec Mocks MessageExpectation matches_at_most_count?":{"type":"method","name":"matches_at_most_count?","children":[],"call":["@actual_received_count <= "]}," Rspec Mocks MessageExpectation matches_at_least_count?":{"type":"method","name":"matches_at_least_count?","children":[],"call":["@actual_received_count >= "]}," Rspec Mocks MessageExpectation ignoring_args?":{"type":"method","name":"ignoring_args?","children":[],"call":["@expected_received_count == "]}," Rspec Mocks MessageExpectation expected_messages_received?":{"type":"method","name":"expected_messages_received?","children":[],"call":[" matches_at_most_count? "," matches_at_least_count? "," matches_exact_count? "," ignoring_args? "]}," Rspec Mocks MessageExpectation verify_messages_received":{"type":"method","name":"verify_messages_received","children":[],"call":["Kernel  raise ","error backtrace insert ","error backtrace "," generate_error "," failed_fast? "," expected_messages_received? "]}," Rspec Mocks MessageExpectation matches_name_but_not_args":{"type":"method","name":"matches_name_but_not_args","children":[],"call":["@args_expectation args_match? ! ","@args_expectation args_match? ","@sym == "]}," Rspec Mocks BaseExpectation failed_fast?":{"type":"method","name":"failed_fast?","children":[],"call":[]}," Rspec Mocks BaseExpectation clone_args_to_yield":{"type":"method","name":"clone_args_to_yield","children":[],"call":["args clone "]}," Rspec Mocks BaseExpectation invoke_return_block":{"type":"method","name":"invoke_return_block","children":[],"call":["@return_block call ","@return_block arity == ","@return_block arity ","args << ","block nil? "]}," Rspec Mocks BaseExpectation invoke_consecutive_return_block":{"type":"method","name":"invoke_consecutive_return_block","children":[],"call":["value [] ","(ivar :@actual_received_count) min ","value size - ","value size "," invoke_return_block "," invoke_return_block  [] "," invoke_return_block  size - "," invoke_return_block  size "]}," Rspec Mocks BaseExpectation invoke_with_yield":{"type":"method","name":"invoke_with_yield","children":[],"call":["block call ","@error_generator raise_wrong_arity_error ","block arity ","args_to_yield_this_time length != ","args_to_yield_this_time length ","block arity > ","@args_to_yield each ","@error_generator raise_missing_block_error ","block nil? "," eval_block "]}," Rspec Mocks BaseExpectation invoke_method_block":{"type":"method","name":"invoke_method_block","children":[],"call":["@error_generator raise_block_failed_error ","detail message ","@method_block call "]}," Rspec Mocks BaseExpectation called_max_times?":{"type":"method","name":"called_max_times?","children":[],"call":["@actual_received_count >= ","@expected_received_count > ","@expected_received_count != "]}," Rspec Mocks BaseExpectation invoke":{"type":"method","name":"invoke","children":[],"call":[" invoke_return_block "," invoke_consecutive_return_block "," invoke_with_yield ","@args_to_yield size > ","@args_to_yield size "," invoke_method_block ","@method_block nil? ! ","@method_block nil? ","Kernel  throw ","@symbol_to_throw nil? ","Kernel  raise ","@exception_to_raise nil? ","@order_group handle_order_constraint ","@error_generator raise_expectation_error ","@expected_received_count == "]}," Rspec Mocks BaseExpectation matches":{"type":"method","name":"matches","children":[],"call":["@args_expectation args_match? ","@sym == "]}," Rspec Mocks BaseExpectation and_yield":{"type":"method","name":"and_yield","children":[],"call":["@args_to_yield << ","@args_to_yield clear ","@eval_context extend ","Object  new "," require ","Object  new  extend "]}," Rspec Mocks BaseExpectation and_throw":{"type":"method","name":"and_throw","children":[],"call":[]}," Rspec Mocks BaseExpectation and_raise":{"type":"method","name":"and_raise","children":[],"call":[]}," Rspec Mocks BaseExpectation and_return":{"type":"method","name":"and_return","children":[],"call":[" lambda "," block_given? ","values size ","@expected_received_count < "," ignoring_args? ! "," ignoring_args? ","values [] ","Kernel  raise ","@method_block nil? ","values [] s size ","values size  < ","values [] s [] "]}," Rspec Mocks BaseExpectation expected_args":{"type":"method","name":"expected_args","children":[],"call":["@args_expectation args "]}," Rspec Mocks BaseExpectation build_child":{"type":"method","name":"build_child","children":[],"call":["child clone_args_to_yield ","child error_generator= ","new_gen opts= "," error_generator clone "," error_generator ","child clear_actual_received_count! ","child expected_received_count= ","child method_block= ","child expected_from= "," clone "," clone  clone_args_to_yield "," clone  error_generator= "," error_generator clone  opts= "," clone  clear_actual_received_count! "," clone  expected_received_count= "," clone  method_block= "," clone  expected_from= "]}," Rspec Mocks BaseExpectation initialize":{"type":"method","name":"initialize","children":[],"call":["ArgumentExpectation  new ","ArgumentMatchers AnyArgsMatcher  new ","@error_generator opts= "]}," Rspec Mocks ErrorGenerator pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["count == "]}," Rspec Mocks ErrorGenerator count_message":{"type":"method","name":"count_message","children":[],"call":[" pretty_print ","count abs ","count < "]}," Rspec Mocks ErrorGenerator arg_list":{"type":"method","name":"arg_list","children":[],"call":["(send\n  (lvar :args) :collect) join ","arg inspect ","arg description ","arg respond_to? ","args collect "]}," Rspec Mocks ErrorGenerator format_args":{"type":"method","name":"format_args","children":[],"call":["( + + ","( + "," arg_list ","args empty? "]}," Rspec Mocks ErrorGenerator arg_message":{"type":"method","name":"arg_message","children":[],"call":[" with  + "," format_args "]}," Rspec Mocks ErrorGenerator __raise":{"type":"method","name":"__raise","children":[],"call":["Kernel  raise "," opts [] "," opts "," opts [] nil? "]}," Rspec Mocks ErrorGenerator intro":{"type":"method","name":"intro","children":[],"call":["@target nil? ","@target inspect ","@target class == ","@target class ","Class  === ","Mock  === ","@name inspect "]}," Rspec Mocks ErrorGenerator raise_wrong_arity_error":{"type":"method","name":"raise_wrong_arity_error","children":[],"call":[" __raise "," arg_list "," intro "]}," Rspec Mocks ErrorGenerator raise_missing_block_error":{"type":"method","name":"raise_missing_block_error","children":[],"call":[" __raise "," arg_list "," intro "]}," Rspec Mocks ErrorGenerator raise_block_failed_error":{"type":"method","name":"raise_block_failed_error","children":[],"call":[" __raise "," intro "]}," Rspec Mocks ErrorGenerator raise_out_of_order_error":{"type":"method","name":"raise_out_of_order_error","children":[],"call":[" __raise "," intro "]}," Rspec Mocks ErrorGenerator raise_expectation_error":{"type":"method","name":"raise_expectation_error","children":[],"call":[" __raise "," count_message "," arg_message "," intro "," format_args "]}," Rspec Mocks ErrorGenerator raise_unexpected_message_args_error":{"type":"method","name":"raise_unexpected_message_args_error","children":[],"call":[" __raise ","expectation sym inspect ","expectation sym "," intro "," format_args ","args empty? ","expectation expected_args ","expectation  format_args  "]}," Rspec Mocks ErrorGenerator raise_unexpected_message_error":{"type":"method","name":"raise_unexpected_message_error","children":[],"call":[" __raise "," arg_message "," intro "]}," Rspec Mocks ErrorGenerator opts":{"type":"method","name":"opts","children":[],"call":[]}," Rspec Mocks ErrorGenerator initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," Rspec Mocks ArgumentMatchers anythingize_lonely_keys":{"type":"method","name":"anythingize_lonely_keys","children":[],"call":["hash []= "," anything ","args each ","args delete_at ","args last class == ","args last class ","args last ","args delete_at  []= "]}," Rspec Mocks ArgumentMatchers kind_of":{"type":"method","name":"kind_of","children":[],"call":["KindOf  new "]}," Rspec Mocks ArgumentMatchers instance_of":{"type":"method","name":"instance_of","children":[],"call":["InstanceOf  new "]}," Rspec Mocks ArgumentMatchers hash_not_including":{"type":"method","name":"hash_not_including","children":[],"call":["HashNotIncludingMatcher  new "," anythingize_lonely_keys "]}," Rspec Mocks ArgumentMatchers hash_including":{"type":"method","name":"hash_including","children":[],"call":["HashIncludingMatcher  new "," anythingize_lonely_keys "]}," Rspec Mocks ArgumentMatchers boolean":{"type":"method","name":"boolean","children":[],"call":["BooleanMatcher  new "]}," Rspec Mocks ArgumentMatchers duck_type":{"type":"method","name":"duck_type","children":[],"call":["DuckTypeMatcher  new "]}," Rspec Mocks ArgumentMatchers no_args":{"type":"method","name":"no_args","children":[],"call":["NoArgsMatcher  new "]}," Rspec Mocks ArgumentMatchers anything":{"type":"method","name":"anything","children":[],"call":["AnyArgMatcher  new "]}," Rspec Mocks ArgumentMatchers any_args":{"type":"method","name":"any_args","children":[],"call":["AnyArgsMatcher  new "]}," Rspec Mocks ArgumentMatchers KindOf ==":{"type":"method","name":"==","children":[],"call":["actual kind_of? "]}," Rspec Mocks ArgumentMatchers KindOf initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Mocks ArgumentMatchers InstanceOf ==":{"type":"method","name":"==","children":[],"call":["actual instance_of? "]}," Rspec Mocks ArgumentMatchers InstanceOf initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Mocks ArgumentMatchers EqualityProxy ==":{"type":"method","name":"==","children":[],"call":["@given == "]}," Rspec Mocks ArgumentMatchers EqualityProxy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Mocks ArgumentMatchers MatcherMatcher ==":{"type":"method","name":"==","children":[],"call":["@matcher matches? "]}," Rspec Mocks ArgumentMatchers MatcherMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Mocks ArgumentMatchers DuckTypeMatcher ==":{"type":"method","name":"==","children":[],"call":["value respond_to? ","@methods_to_respond_to all? "]}," Rspec Mocks ArgumentMatchers DuckTypeMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Mocks ArgumentMatchers HashNotIncludingMatcher description":{"type":"method","name":"description","children":[],"call":["@expected inspect sub sub ","@expected inspect sub ","@expected inspect "]}," Rspec Mocks ArgumentMatchers HashNotIncludingMatcher ==":{"type":"method","name":"==","children":[],"call":["value == ","actual [] ","actual has_key? ","@expected each "]}," Rspec Mocks ArgumentMatchers HashNotIncludingMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Mocks ArgumentMatchers HashIncludingMatcher description":{"type":"method","name":"description","children":[],"call":["@expected inspect sub sub ","@expected inspect sub ","@expected inspect "]}," Rspec Mocks ArgumentMatchers HashIncludingMatcher ==":{"type":"method","name":"==","children":[],"call":["value == ","actual [] ","actual has_key? ","@expected each "]}," Rspec Mocks ArgumentMatchers HashIncludingMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Mocks ArgumentMatchers BooleanMatcher ==":{"type":"method","name":"==","children":[],"call":["FalseClass  === ","TrueClass  === "]}," Rspec Mocks ArgumentMatchers BooleanMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Mocks ArgumentMatchers RegexpMatcher ==":{"type":"method","name":"==","children":[],"call":["value == ","value =~ ","value is_a? "]}," Rspec Mocks ArgumentMatchers RegexpMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Mocks ArgumentMatchers NoArgsMatcher description":{"type":"method","name":"description","children":[],"call":[]}," Rspec Mocks ArgumentMatchers AnyArgMatcher ==":{"type":"method","name":"==","children":[],"call":[]}," Rspec Mocks ArgumentMatchers AnyArgMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rspec Mocks ArgumentMatchers AnyArgsMatcher description":{"type":"method","name":"description","children":[],"call":[]}," Rspec Mocks ArgumentExpectation match_any_args?":{"type":"method","name":"match_any_args?","children":[],"call":[]}," Rspec Mocks ArgumentExpectation matchers_match?":{"type":"method","name":"matchers_match?","children":[],"call":["@matchers == "]}," Rspec Mocks ArgumentExpectation matchers_block_matches?":{"type":"method","name":"matchers_block_matches?","children":[],"call":["@matchers_block call "]}," Rspec Mocks ArgumentExpectation args_match?":{"type":"method","name":"args_match?","children":[],"call":[" matchers_match? "," matchers_block_matches? "," match_any_args? "]}," Rspec Mocks ArgumentExpectation is_matcher?":{"type":"method","name":"is_matcher?","children":[],"call":["obj respond_to? & ","obj respond_to? "]}," Rspec Mocks ArgumentExpectation matcher_for":{"type":"method","name":"matcher_for","children":[],"call":["ArgumentMatchers EqualityProxy  new ","ArgumentMatchers RegexpMatcher  new ","arg is_a? ","ArgumentMatchers MatcherMatcher  new "," is_matcher? "]}," Rspec Mocks ArgumentExpectation initialize":{"type":"method","name":"initialize","children":[],"call":[" matcher_for ","args collect ","ArgumentMatchers NoArgsMatcher  === ","args first ","ArgumentMatchers AnyArgsMatcher  === "]}," Rspec Mocks BaseExpectation eval_block":{"type":"method","name":"eval_block","children":[],"call":["block call ","@eval_context instance_exec "]}," Rspec Core InstanceExec instance_exec":{"type":"method","name":"instance_exec","children":[],"call":[" remove_method ","singleton_class module_eval "," send ","Thread  critical= "," define_method "," respond_to? ","Thread  critical "]}," RSpec Mocks BaseExpectation matches":{"type":"method","name":"matches","children":[],"call":["@args_expectation args_match? ","@sym == "]}," Rspec Mocks ExampleMethods declare_double":{"type":"method","name":"declare_double","children":[],"call":["Rspec Mocks Mock  new ","args last []= ","args last ","args << ","Hash  === "]}," Rspec Mocks ExampleMethods stub":{"type":"method","name":"stub","children":[],"call":[" declare_double "]}," Rspec Mocks ExampleMethods double":{"type":"method","name":"double","children":[],"call":[" declare_double "]}," Rspec Mocks Proxy method_doubles":{"type":"method","name":"method_doubles","children":[],"call":[" method_double values "," method_double "]}," Rspec Mocks Proxy method_double":{"type":"method","name":"method_double","children":[],"call":["h []= ","MethodDouble  new ","Hash  new "]}," Rspec Mocks Proxy already_proxied_respond_to?":{"type":"method","name":"already_proxied_respond_to?","children":[],"call":[]}," Rspec Mocks Proxy already_proxied_respond_to":{"type":"method","name":"already_proxied_respond_to","children":[],"call":[]}," Rspec Mocks Proxy allow_message_expectations_on_nil?":{"type":"method","name":"allow_message_expectations_on_nil?","children":[],"call":[" warn_about_expectations_on_nil ! "," warn_about_expectations_on_nil "]}," Rspec Mocks Proxy warn_about_expectations_on_nil=":{"type":"method","name":"warn_about_expectations_on_nil=","children":[],"call":[]}," Rspec Mocks Proxy warn_about_expectations_on_nil":{"type":"method","name":"warn_about_expectations_on_nil","children":[],"call":[]}," Rspec Mocks Mock extract_option":{"type":"method","name":"extract_option","children":[],"call":["target []= ","source delete ","source [] "]}," Rspec Mocks Mock extract_options":{"type":"method","name":"extract_options","children":[],"call":[" extract_option "]}," Rspec Mocks Methods stub":{"type":"method","name":"stub","children":[],"call":[" __mock_proxy add_stub ","sym_or_hash to_sym "," caller [] "," caller "," __mock_proxy "," stub! and_return "," stub! ","sym_or_hash each ","Hash  === "]}," Rspec Mocks MethodDouble reset_nil_expectations_warning":{"type":"method","name":"reset_nil_expectations_warning","children":[],"call":["Rspec Mocks Proxy  warn_about_expectations_on_nil= "," proxy_for_nil_class? "]}," Rspec Mocks MethodDouble warn_if_nil_class":{"type":"method","name":"warn_if_nil_class","children":[],"call":["Kernel  warn "," caller [] "," caller "," proxy_for_nil_class? & ","Rspec Mocks Proxy  warn_about_expectations_on_nil "," proxy_for_nil_class? "]}," Rspec Mocks MethodDouble proxy_for_nil_class?":{"type":"method","name":"proxy_for_nil_class?","children":[],"call":["@object nil? "]}," Rspec Mocks MethodDouble add_stub":{"type":"method","name":"add_stub","children":[],"call":[" stubs << "," stubs ","MessageExpectation  new "," configure_method "," stubs unshift "," MessageExpectation  new s << "," MessageExpectation  new s "," MessageExpectation  new s unshift "]}," Rspec Mocks MethodDouble add_negative_expectation":{"type":"method","name":"add_negative_expectation","children":[],"call":[" expectations << "," expectations ","NegativeMessageExpectation  new "," configure_method "," expectations unshift "," NegativeMessageExpectation  new s << "," NegativeMessageExpectation  new s "," NegativeMessageExpectation  new s unshift "]}," Rspec Mocks MethodDouble add_expectation":{"type":"method","name":"add_expectation","children":[],"call":[" expectations << "," expectations ","MessageExpectation  new ","existing_stub build_child "," stubs first "," stubs "," configure_method "," MessageExpectation  new s << "," existing_stub build_child s << "," MessageExpectation  new s "," existing_stub build_child s "," stubs first  build_child "]}," Rspec Mocks MethodDouble clear":{"type":"method","name":"clear","children":[],"call":[" stubs clear "," stubs "," expectations clear "," expectations "]}," Rspec Mocks MethodDouble reset":{"type":"method","name":"reset","children":[],"call":[" clear "," restore_original_method "," reset_nil_expectations_warning "]}," Rspec Mocks MethodDouble verify":{"type":"method","name":"verify","children":[],"call":["e verify_messages_received "," expectations each "," expectations "]}," Rspec Mocks MethodDouble restore_original_method":{"type":"method","name":"restore_original_method","children":[],"call":[" remove_method "," alias_method "," method_defined? "," object_singleton_class instance_eval "," object_singleton_class "," stashed_method_name ","  stashed_method_name  "]}," Rspec Mocks MethodDouble define_proxy_method":{"type":"method","name":"define_proxy_method","children":[],"call":[" object_singleton_class class_eval "," object_singleton_class "," visibility "]}," Rspec Mocks MethodDouble stash_original_method":{"type":"method","name":"stash_original_method","children":[],"call":[" alias_method "," method_defined? "," object_singleton_class class_eval "," object_singleton_class "," stashed_method_name "," object_responds_to? ","  stashed_method_name _method_name "]}," Rspec Mocks MethodDouble configure_method":{"type":"method","name":"configure_method","children":[],"call":[" define_proxy_method "," stash_original_method "," warn_if_nil_class ","$rspec_mocks add "]}," Rspec Mocks MethodDouble object_responds_to?":{"type":"method","name":"object_responds_to?","children":[],"call":["@object respond_to? ","@proxy already_proxied_respond_to ","method_name == ","@object __send__ "," obfuscate ","@proxy already_proxied_respond_to? "]}," Rspec Mocks MethodDouble stashed_method_name":{"type":"method","name":"stashed_method_name","children":[],"call":[" obfuscate "," method_name "]}," Rspec Mocks MethodDouble obfuscate":{"type":"method","name":"obfuscate","children":[],"call":[]}," Rspec Mocks MethodDouble object_singleton_class":{"type":"method","name":"object_singleton_class","children":[],"call":[]}," Rspec Mocks MethodDouble visibility":{"type":"method","name":"visibility","children":[],"call":[" object_singleton_class protected_method_defined? "," object_singleton_class "," object_singleton_class private_method_defined? ","Mock  === "]}," Rspec Mocks MethodDouble stubs":{"type":"method","name":"stubs","children":[],"call":[" [] "]}," Rspec Mocks MethodDouble expectations":{"type":"method","name":"expectations","children":[],"call":[" [] "]}," Rspec Mocks MethodDouble initialize":{"type":"method","name":"initialize","children":[],"call":[" store "]}," Rspec Mocks ErrorGenerator raise_similar_message_args_error":{"type":"method","name":"raise_similar_message_args_error","children":[],"call":[" __raise ","expectation sym inspect ","expectation sym "," intro ","(send\n  (lvar :args) :collect) join "," format_args ","args collect ","expectation expected_args ","expectation  format_args  "]}," Marshal dump_with_mocks":{"type":"method","name":"dump_with_mocks","children":[],"call":["object instance_variable_set "," dump_without_mocks ","args unshift ","object dup ","object send ","object instance_variable_get ","object instance_variable_defined? ","args shift ","object __send__ ","mp is_a? ","NilClass  === "," RSpec Mocks  space registered? ! "," RSpec Mocks  space registered? "," RSpec Mocks  space "," RSpec Mocks  space nil? ","RSpec  warn_deprecation ","(str \"            |Using Marshal.dump on stubbed objects relies on a monkey-patch\\n\") gsub ","RSpec CallerFilter  first_non_rspec_line "," RSpec Mocks  configuration marshal_patched? "," RSpec Mocks  configuration ","args shift  instance_variable_set "," duobject instance_variable_get _without_mocks ","args shift  dup ","args shift  send ","args shift  instance_variable_get ","args shift  instance_variable_defined? ","args shift  __send__ ","object instance_variable_get  is_a? ","(str \"            |Using Marshal.duobject instance_variable_get  on stubbed objects relies on a monkey-patch\\n\") gsub ","(str \"            |Using Marshal.dump on stubbed args shift s relies on a monkey-patch\\n\") gsub "]}," RSpec Mocks extensions_added?":{"type":"method","name":"extensions_added?","children":[],"call":[]}," RSpec Mocks add_extensions":{"type":"method","name":"add_extensions","children":[],"call":[" include ","Class  class_eval ","Object  class_eval "," method_host class_eval "," method_host "]}," RSpec Mocks TestDouble assign_stubs":{"type":"method","name":"assign_stubs","children":[],"call":[" stub and_return "," stub ","stubs each_pair ","Mocks  allow_message and_return ","Mocks  allow_message "," __mock_proxy add_simple_stub "," __mock_proxy "]}," RSpec Mocks TestDouble extract_option":{"type":"method","name":"extract_option","children":[],"call":["target []= ","source delete ","source [] "]}," RSpec Mocks TestDouble extract_options":{"type":"method","name":"extract_options","children":[],"call":[" extract_option ","RSpec  deprecate ","stubs_and_options delete ","stubs_and_options [] "]}," RSpec Mocks TestDouble method_missing":{"type":"method","name":"method_missing","children":[],"call":[" __mock_proxy raise_unexpected_message_error "," __mock_proxy "," __mock_proxy null_object? "," __mock_proxy record_message_received "," raise ","message == ","(sym :to_a) include? ","proxy raise_unexpected_message_error ","ErrorGenerator  new raise_non_public_error ","ErrorGenerator  new ","visibility == ","proxy visibility_for "," to_s ","proxy null_object? ","proxy record_message_received "," __mock_ __mock_proxy  raise_unexpected_message_error "," __mock_ __mock_proxy  "," __mock_ __mock_proxy  null_object? "," __mock_ __mock_proxy  record_message_received "," __mock_proxy  raise_unexpected_message_error ","proxy visibility_for  == ","proxy proxy visibility_for _for "," __mock_proxy  visibility_for "," __mock_proxy  null_object? "," __mock_proxy  record_message_received "]}," RSpec Mocks TestDouble __initialize_as_test_double":{"type":"method","name":"__initialize_as_test_double","children":[],"call":[" assign_stubs "," extract_options ","stubs_and_options empty? ","name is_a? ","stubs empty? ","Hash  === "]}," RSpec Mocks TestDouble respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["message != "," __mock_proxy null_object? "," __mock_proxy "]}," RSpec Mocks TestDouble to_s":{"type":"method","name":"to_s","children":[],"call":[" inspect gsub gsub "," inspect gsub "," inspect "," inspect tr tr "," inspect tr "]}," RSpec Mocks TestDouble inspect":{"type":"method","name":"inspect","children":[],"call":["@name inspect "," sprintf "," object_id "," class ","0x%x % ","TestDoubleFormatter  format "]}," RSpec Mocks TestDouble ==":{"type":"method","name":"==","children":[],"call":["other == "," __mock_proxy "]}," RSpec Mocks TestDouble initialize":{"type":"method","name":"initialize","children":[],"call":[" __initialize_as_test_double "," assign_stubs ","stubs empty? ","Hash  === "]}," RSpec Mocks TestDouble extend_onto":{"type":"method","name":"extend_onto","children":[],"call":[]}," RSpec Mocks Space receivers":{"type":"method","name":"receivers","children":[],"call":[]}," RSpec Mocks Space expectation_ordering":{"type":"method","name":"expectation_ordering","children":[],"call":["OrderGroup  new "]}," RSpec Mocks OrderGroup empty?":{"type":"method","name":"empty?","children":[],"call":["@ordering empty? ","@expectations empty? "]}," RSpec Mocks OrderGroup clear":{"type":"method","name":"clear","children":[],"call":["@ordering clear ","@expectations clear ","@invocation_order clear "]}," RSpec Mocks MessageExpectation build_implementation":{"type":"method","name":"build_implementation","children":[],"call":[" lambda ","values first ","values size == ","values size ","Implementation  new method ","Implementation  new ","values first s first ","values first s size == ","values first s size "]}," RSpec Mocks MessageExpectation failed_fast?":{"type":"method","name":"failed_fast?","children":[],"call":[]}," RSpec Mocks MessageExpectation clone_args_to_yield":{"type":"method","name":"clone_args_to_yield","children":[],"call":["args clone "]}," RSpec Mocks MessageExpectation call_implementation":{"type":"method","name":"call_implementation","children":[],"call":["@implementation call ","@implementation arity == ","@implementation arity ","@implementation arity zero? "]}," RSpec Mocks MessageExpectation call_implementation_consecutive":{"type":"method","name":"call_implementation_consecutive","children":[],"call":["@value [] ","(ivar :@actual_received_count) min ","@value size - ","@value size "," call_implementation "]}," RSpec Mocks MessageExpectation call_with_yield":{"type":"method","name":"call_with_yield","children":[],"call":["block call ","@eval_context instance_exec ","@error_generator raise_wrong_arity_error ","block arity ","args length != ","args length ","block arity > ","@args_to_yield each ","@error_generator raise_missing_block_error "]}," RSpec Mocks MessageExpectation increase_actual_received_count!":{"type":"method","name":"increase_actual_received_count!","children":[],"call":[]}," RSpec Mocks MessageExpectation actual_received_count_matters?":{"type":"method","name":"actual_received_count_matters?","children":[],"call":[]}," RSpec Mocks MessageExpectation raise_out_of_order_error":{"type":"method","name":"raise_out_of_order_error","children":[],"call":["@error_generator raise_out_of_order_error "]}," RSpec Mocks MessageExpectation called_max_times?":{"type":"method","name":"called_max_times?","children":[],"call":["@actual_received_count >= ","@expected_received_count > ","@expected_received_count != ","@at_least ! "]}," RSpec Mocks MessageExpectation raise_exception":{"type":"method","name":"raise_exception","children":[],"call":[" raise ","ArgumentError  new ","@exception_to_raise instance_method arity ","@exception_to_raise instance_method ","@exception_to_raise to_s ","@exception_to_raise instance_method arity <= ","@exception_to_raise respond_to? ! ","@exception_to_raise respond_to? "]}," RSpec Mocks MessageExpectation invoke":{"type":"method","name":"invoke","children":[],"call":[" call_implementation "," call_implementation_consecutive "," call_with_yield ","@args_to_yield empty? ! ","@args_to_yield empty? ","Kernel  throw ","@args_to_throw empty? "," raise_exception ","@exception_to_raise nil? ","@order_group handle_order_constraint ","@error_generator raise_expectation_error ","@actual_received_count == ","@expected_received_count == ","@at_least ! "," raise ","parent_stub invoke "," implementation call "," implementation "," implementation present? "," expectation_count_type "," negative? ","@implementation call "," invoke_return_block "," invoke_consecutive_return_block "," invoke_with_yield "," invoke_method_block ","@method_block nil? ! ","@method_block nil? ","Kernel  raise ","e exception ","@exception_to_raise instance_method arity ","@exception_to_raise instance_method ","@exception_to_raise to_s ","args unshift "," orig_object "," yield_receiver_to_implementation_block? "," invoke_incrementing_actual_calls_by "]}," RSpec Mocks MessageExpectation matches?":{"type":"method","name":"matches?","children":[],"call":["@argument_expectation args_match? ","@message == ","@argument_list_matcher args_match? ","@args_expectation args_match? ","@sym == "]}," RSpec Mocks MessageExpectation and_yield":{"type":"method","name":"and_yield","children":[],"call":["@args_to_yield << ","Object  new extend ","Object  new ","@args_to_yield clear "," build_implementation "," initial_implementation_action= ","AndYieldImplementation  new ","@eval_context extend "," raise_already_invoked_error_if_necessary "," __method__ ","Object  new extend  extend ","Object  new  extend "]}," RSpec Mocks MessageExpectation and_throw":{"type":"method","name":"and_throw","children":[],"call":["(lvar :symbol) compact "," implementation= "," throw ","Proc  new "," terminal_implementation_action= ","@args_to_throw << "," raise_already_invoked_error_if_necessary "," __method__ ","(lvar :symbol) compact  << "]}," RSpec Mocks MessageExpectation and_raise":{"type":"method","name":"and_raise","children":[],"call":["exception exception ","exception respond_to? "," implementation= "," raise ","Proc  new "," terminal_implementation_action= "," raise_already_invoked_error_if_necessary "," __method__ ","exception exception  exception exception  ","exception exception  respond_to? "]}," RSpec Mocks MessageExpectation and_return":{"type":"method","name":"and_return","children":[],"call":[" build_implementation ","values size > ","values size ","(ivar :@expected_received_count) max "," ignoring_args? ","@expected_received_count == "," terminal_implementation_action= ","AndReturnImplementation  new "," inner_implementation_action= ","RSpec  deprecate "," negative? "," lambda "," block_given? ","@expected_received_count < "," ignoring_args? ! ","values [] ","Kernel  raise ","@method_block nil? ","RSpec  warn_deprecation ","`and_return` without arguments is deprecated.  + + ","CallerFilter  first_non_rspec_line ","`and_return` without arguments is deprecated.  + ","values empty? ","values unshift "," raise "," raise_already_invoked_error_if_necessary "," __method__ ","values [] s size > ","values [] s size ","(ivar :(ivar :@expected_received_count) max ) max ","(ivar :values size ) max ","(ivar :@expected_received_count) max  == ","values size  == ","(ivar :@expected_received_count) max  < ","values size  < ","values [] s [] ","values [] s empty? ","values [] s unshift "]}," RSpec Mocks MessageExpectation expected_args":{"type":"method","name":"expected_args","children":[],"call":["@argument_expectation args ","@argument_list_matcher expected_args ","@args_expectation args "]}," RSpec Mocks MessageExpectation build_child":{"type":"method","name":"build_child","children":[],"call":["child argument_expectation= ","ArgumentExpectation  new ","ArgumentMatchers AnyArgsMatcher  new ","child clone_args_to_yield ","child error_generator= ","new_gen opts= "," error_generator clone "," error_generator ","child clear_actual_received_count! ","child expected_received_count= ","child implementation= ","child expected_from= "," clone ","child argument_list_matcher= ","ArgumentListMatcher  new ","child method_block= "," clone  argument_expectation= "," clone  clone_args_to_yield "," clone  error_generator= "," error_generator clone  opts= "," clone  clear_actual_received_count! "," clone  expected_received_count= "," clone  implementation= "," clone  expected_from= "," clone  argument_list_matcher= "," clone  method_block= "]}," RSpec Mocks MessageExpectation initialize":{"type":"method","name":"initialize","children":[],"call":["ArgumentExpectation  new ","ArgumentMatchers AnyArgsMatcher  new ","@error_generator opts= ","ArgumentListMatcher  new ","@method_double method_name "," inner_implementation_action= ","Implementation  new ","@method_double object ","@order_group register ","type == "]}," Psych dump_with_mocks":{"type":"method","name":"dump_with_mocks","children":[],"call":["object instance_variable_set "," dump_without_mocks ","object __send__ ","mp is_a? ","object instance_variable_get ","object instance_variable_defined? ","object send "," duobject instance_variable_get _without_mocks ","object instance_variable_get  is_a? "]}," RSpec Mocks ArgumentMatchers hash_excluding":{"type":"method","name":"hash_excluding","children":[],"call":["HashExcludingMatcher  new "," anythingize_lonely_keys ","ArgumentMatchers  anythingize_lonely_keys "]}," RSpec Mocks ArgumentMatchers HashExcludingMatcher description":{"type":"method","name":"description","children":[],"call":["@expected inspect sub sub ","@expected inspect sub ","@expected inspect "]}," RSpec Mocks ArgumentMatchers HashExcludingMatcher ==":{"type":"method","name":"==","children":[],"call":["v == ","actual [] ","actual has_key? ","@expected none? "]}," RSpec Mocks ArgumentMatchers HashExcludingMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks ArgumentExpectation block_passes?":{"type":"method","name":"block_passes?","children":[],"call":["@block call "]}," RSpec Mocks AnyInstance __recorder":{"type":"method","name":"__recorder","children":[],"call":["AnyInstance Recorder  new "]}," RSpec Mocks AnyInstance rspec_verify":{"type":"method","name":"rspec_verify","children":[],"call":[" __recorder stop_all_observation! "," __recorder "," __recorder verify "," restore_dup "," __recorder stop_observing! "]}," RSpec Mocks AnyInstance any_instance":{"type":"method","name":"any_instance","children":[],"call":[" __recorder ","RSpec Mocks  space add ","RSpec Mocks  space "," modify_dup_to_remove_mock_proxy_when_invoked "]}," RSpec Mocks AnyInstance Recorder mark_invoked!":{"type":"method","name":"mark_invoked!","children":[],"call":["@klass class_eval "," backup_method! ","187 + ","192 + ","194 + ","195 + ","199 + ","196 + "," raise ","(send\n  (send nil :instance_variables) :map) join "," instance_variable_get "," instance_variables map "," instance_variables "," object_id "," class ","recorder instance_that_received ","@klass __send__ "," inspect "," RSpec Mocks  any_instance_recorder_for instance_that_received "," RSpec Mocks  any_instance_recorder_for "," RSpec Mocks  method_handle_for owner "," RSpec Mocks  method_handle_for "," RSpec Mocks  space any_instance_recorder_for instance_that_received "," RSpec Mocks  space any_instance_recorder_for "," RSpec Mocks  space "," RSpec Support  method_handle_for owner "," RSpec Support  method_handle_for ","AnyInstance  error_generator raise_message_already_received_by_other_instance_error ","AnyInstance  error_generator ","@ RSpec Mocks  method_handle_for owner  class_eval ","@ RSpec Support  method_handle_for owner  class_eval ","@ RSpec Mocks  method_handle_for owner  __send__ ","@ RSpec Support  method_handle_for owner  __send__ "]}," RSpec Mocks AnyInstance Recorder observe!":{"type":"method","name":"observe!","children":[],"call":["@klass class_eval "," backup_method! ","@observed_methods << "," stop_observing! "," already_observing? ","176 + ","181 + ","183 + ","184 + ","188 + ","185 + "," __send__ ","recorder playback! ","@klass __send__ "," raise "," public_protected_or_private_method_defined? ","RSpec Mocks  configuration verify_partial_doubles? ","RSpec Mocks  configuration "," allow_no_prepended_module_definition_of "," RSpec Mocks  any_instance_recorder_for playback! "," RSpec Mocks  any_instance_recorder_for "," RSpec Mocks  method_handle_for owner "," RSpec Mocks  method_handle_for ","@klass method_defined? "," RSpec Mocks  space any_instance_recorder_for playback! "," RSpec Mocks  space any_instance_recorder_for "," RSpec Mocks  space "," RSpec Support  method_handle_for owner "," RSpec Support  method_handle_for ","AnyInstance  error_generator raise_does_not_implement_error ","AnyInstance  error_generator ","Mocks  configuration temporarily_suppress_partial_double_verification ! ","Mocks  configuration temporarily_suppress_partial_double_verification ","Mocks  configuration ","@klass respond_to? ","@ RSpec Mocks  method_handle_for owner  class_eval ","@ RSpec Support  method_handle_for owner  class_eval ","@ RSpec Mocks  method_handle_for owner  __send__ ","@ RSpec Support  method_handle_for owner  __send__ ","@ RSpec Mocks  method_handle_for owner  method_defined? ","@ RSpec Support  method_handle_for owner  method_defined? ","@ RSpec Mocks  method_handle_for owner  respond_to? ","@ RSpec Support  method_handle_for owner  respond_to? "]}," RSpec Mocks AnyInstance Recorder already_observing?":{"type":"method","name":"already_observing?","children":[],"call":["@observed_methods include? "," super_class_observing? "]}," RSpec Mocks AnyInstance Recorder stop_observing!":{"type":"method","name":"stop_observing!","children":[],"call":["@observed_methods delete "," restore_method! ","@observed_methods each "," RSpec Mocks  space any_instance_recorder_for stop_observing! "," RSpec Mocks  space any_instance_recorder_for "," RSpec Mocks  space "," super_class_observers_for each "," super_class_observers_for "]}," RSpec Mocks AnyInstance Recorder public_protected_or_private_method_defined?":{"type":"method","name":"public_protected_or_private_method_defined?","children":[],"call":["@klass private_method_defined? ","@klass method_defined? ","MethodReference  method_defined_at_any_visibility? "]}," RSpec Mocks AnyInstance Recorder backup_method!":{"type":"method","name":"backup_method!","children":[],"call":[" alias_method ","@klass class_eval "," public_protected_or_private_method_defined? "," build_alias_method_name "," method_defined? ","@klass class_exec ","@klass instance_method owner ","@klass instance_method ","@backed_up_method_owner [] ","method_name to_sym "," build_ build_alias_method_name  "]}," RSpec Mocks AnyInstance Recorder remove_dummy_method!":{"type":"method","name":"remove_dummy_method!","children":[],"call":[" remove_method ","@klass class_eval ","@klass class_exec "]}," RSpec Mocks AnyInstance Recorder restore_original_method!":{"type":"method","name":"restore_original_method!","children":[],"call":[" remove_method "," alias_method ","@klass class_eval "," build_alias_method_name ","@klass class_exec ","@klass instance_method owner == ","@klass instance_method owner ","@klass instance_method ","backed_up_method_owner [] == ","backed_up_method_owner [] ","method_name to_sym ","RUBY_VERSION  < "," build_ build_alias_method_name  "]}," RSpec Mocks AnyInstance Recorder build_alias_method_name":{"type":"method","name":"build_alias_method_name","children":[],"call":[]}," RSpec Mocks AnyInstance Recorder restore_method!":{"type":"method","name":"restore_method!","children":[],"call":[" remove_dummy_method! "," restore_original_method! "," public_protected_or_private_method_defined? "," build_alias_method_name ","@klass method_defined? "]}," RSpec Mocks AnyInstance Recorder received_expected_message!":{"type":"method","name":"received_expected_message!","children":[],"call":[" mark_invoked! "," restore_method! "," message_chains received_expected_message! "," message_chains ","@message_chains [] expectation_fulfilled! ","@message_chains [] "]}," RSpec Mocks AnyInstance Recorder normalize_chain":{"type":"method","name":"normalize_chain","children":[],"call":["args first ","args unshift ","(send\n  (send\n    (send\n      (send\n        (lvar :args) :shift) :to_s) :split\n    (str \".\")) :map) reverse each ","(send\n  (send\n    (send\n      (send\n        (lvar :args) :shift) :to_s) :split\n    (str \".\")) :map) reverse ","s to_sym ","args shift to_s split map ","args shift to_s split ","args shift to_s ","args shift "]}," RSpec Mocks AnyInstance Recorder instance_that_received":{"type":"method","name":"instance_that_received","children":[],"call":["@played_methods [] "]}," RSpec Mocks AnyInstance Recorder playback!":{"type":"method","name":"playback!","children":[],"call":[" received_expected_message! "," message_chains has_expectation? "," message_chains ","@played_methods []= "," message_chains playback! ","RSpec Mocks  space add ","RSpec Mocks  space ","RSpec Mocks  space ensure_registered "," has_expectation? ","@message_chains [] playback! ","@message_chains [] "]}," RSpec Mocks AnyInstance Recorder stop_all_observation!":{"type":"method","name":"stop_all_observation!","children":[],"call":[" restore_method! ","@observed_methods each "]}," RSpec Mocks AnyInstance Recorder stub!":{"type":"method","name":"stub!","children":[],"call":[" raise "]}," RSpec Mocks AnyInstance Recorder verify":{"type":"method","name":"verify","children":[],"call":[" raise "," message_chains unfulfilled_expectations sort join "," message_chains unfulfilled_expectations sort "," message_chains unfulfilled_expectations "," message_chains "," message_chains all_expectations_fulfilled? ! "," message_chains all_expectations_fulfilled? "," RSpec Mocks  space remove_any_instance_recorder_for "," RSpec Mocks  space "," stop_all_observation! "," unfulfilled_expectations sort join "," unfulfilled_expectations sort "," unfulfilled_expectations "," each_expectation_filfilled? ! "," each_expectation_filfilled? "," message_chains each_expectation_fulfilled? ! "," message_chains each_expectation_fulfilled? ","AnyInstance  error_generator raise_second_instance_received_message_error ","AnyInstance  error_generator "]}," RSpec Mocks AnyInstance Recorder unstub":{"type":"method","name":"unstub","children":[],"call":[" stop_observing! "," message_chains has_expectation? "," message_chains "," message_chains remove_stub_chains_for! "," raise ","@observed_methods include? ","method_name to_sym "," stubs [] clear "," stubs [] "," stubs ","proxy remove_single_stub "," stubs [] each "," RSpec Mocks  proxies_of each "," RSpec Mocks  proxies_of "," RSpec Mocks  space proxies_of each "," RSpec Mocks  space proxies_of "," RSpec Mocks  space ","AnyInstance  error_generator raise_method_not_stubbed_error ","AnyInstance  error_generator "]}," RSpec Mocks AnyInstance Recorder should_receive":{"type":"method","name":"should_receive","children":[],"call":[" message_chains add ","ExpectationChain  new "," message_chains "," observe! ","PositiveExpectationChain  new ","@message_chains []= "," message_ExpectationChain  new s add "," message_ExpectationChain  new s ","@message_ExpectationChain  new s []= "]}," RSpec Mocks AnyInstance Recorder stub_chain":{"type":"method","name":"stub_chain","children":[],"call":[" message_chains add ","StubChainChain  new "," message_chains "," observe! "," normalize_chain ","method_name_or_string_chain split first to_sym ","method_name_or_string_chain split first ","method_name_or_string_chain split "," period_separated_method_chain? "," message_StubChainChain  new s add "," message_StubChainChain  new s "," normalize_StubChainChain  new  ","method_name_or_string_StubChainChain  new  split first to_sym ","method_name_or_string_StubChainChain  new  split first ","method_name_or_string_StubChainChain  new  split "," period_separated_method_StubChainChain  new ? "]}," RSpec Mocks AnyInstance Recorder stub":{"type":"method","name":"stub","children":[],"call":[" message_chains add ","StubChain  new "," message_chains "," observe! "," stub and_return "," stub ","method_name_or_method_map each ","method_name_or_method_map is_a? ","@message_chains []= ","chain and_return ","method_map each ","Hash  === "," message_StubChain  new s add "," message_StubChain  new s ","@message_StubChain  new s []= ","StubChain  new  and_return "]}," RSpec Mocks AnyInstance Recorder initialize":{"type":"method","name":"initialize","children":[],"call":["MessageChains  new ","hash []= ","Hash  new ","block call ","ObjectReference  for ","RSpec Mocks  configuration verifying_double_callbacks each ","RSpec Mocks  configuration verifying_double_callbacks ","RSpec Mocks  configuration ","RSpec Mocks  configuration verify_partial_doubles? "]}," RSpec Mocks AnyInstance MessageChains raise_if_second_instance_to_receive_message":{"type":"method","name":"raise_if_second_instance_to_receive_message","children":[],"call":[" raise "," unfulfilled_expectations sort join "," unfulfilled_expectations sort "," unfulfilled_expectations ","@instance_with_expectation equal? ! ","@instance_with_expectation equal? ","instance is_a? ","ExpectationChain  === ","AnyInstance  error_generator raise_second_instance_received_message_error ","AnyInstance  error_generator "]}," RSpec Mocks AnyInstance MessageChains playback!":{"type":"method","name":"playback!","children":[],"call":["chain playback! "," [] each "," [] "," raise_if_second_instance_to_receive_message "," raise "," unfulfilled_expectations sort join "," unfulfilled_expectations sort "," unfulfilled_expectations ","@instance_with_expectation equal? ! ","@instance_with_expectation equal? ","instance is_a? ","@instance_with_expectation ! ","@chains_by_method_name [] each ","@chains_by_method_name [] "]}," RSpec Mocks AnyInstance MessageChains received_expected_message!":{"type":"method","name":"received_expected_message!","children":[],"call":["chain expectation_fulfilled! "," [] each "," [] ","@chains_by_method_name [] each ","@chains_by_method_name [] "]}," RSpec Mocks AnyInstance MessageChains unfulfilled_expectations":{"type":"method","name":"unfulfilled_expectations","children":[],"call":["(send nil :map) compact ","method_name to_s ","chains last is_a? ","chains last ","chains last expectation_fulfilled? "," map ","(send\n  (self) :map) compact ","(send\n  (ivar :@chains_by_method_name) :map) compact ","ExpectationChain  === ","@chains_by_method_name map ","chains last expectation_fulfilled? ! "]}," RSpec Mocks AnyInstance MessageChains all_expectations_fulfilled?":{"type":"method","name":"all_expectations_fulfilled?","children":[],"call":["chain expectation_fulfilled? ","chains all? "," all? ","@chains_by_method_name all? "]}," RSpec Mocks AnyInstance MessageChains has_expectation?":{"type":"method","name":"has_expectation?","children":[],"call":["chain is_a? "," [] find "," [] ","(send\n  (send\n    (self) :[]\n    (lvar :method_name)) :find) ! ! ","(send\n  (send\n    (self) :[]\n    (lvar :method_name)) :find) ! ","ExpectationChain  === ","@chains_by_method_name [] find ","@chains_by_method_name [] "]}," RSpec Mocks AnyInstance MessageChains remove_stub_chains_for!":{"type":"method","name":"remove_stub_chains_for!","children":[],"call":["chain is_a? "," [] reject! "," [] ","chains reject! ","StubChain  === ","@chains_by_method_name [] reject! ","@chains_by_method_name [] "," []  reject! ","@ [] _by_method_name [] reject! ","@ [] _by_method_name [] "]}," RSpec Mocks AnyInstance MessageChains add":{"type":"method","name":"add","children":[],"call":[" [] << "," [] ","(or-asgn\n  (send\n    (self) :[]\n    (lvar :method_name))\n  (array)) << ","@chains_by_method_name [] << ","@chains_by_method_name [] "]}," RSpec Mocks AnyInstance MessageChains initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","Hash  new "]}," RSpec Mocks AnyInstance StubChainChain invocation_order":{"type":"method","name":"invocation_order","children":[],"call":[]}," RSpec Mocks AnyInstance StubChainChain initialize":{"type":"method","name":"initialize","children":[],"call":[" record "]}," RSpec Mocks AnyInstance StubChain verify_invocation_order":{"type":"method","name":"verify_invocation_order","children":[],"call":[" raise "," invocation_order [] include? "," last_message "," invocation_order [] "," invocation_order "," invocation_order fetch include? "," invocation_order fetch "]}," RSpec Mocks AnyInstance StubChain invocation_order":{"type":"method","name":"invocation_order","children":[],"call":[]}," RSpec Mocks AnyInstance StubChain expectation_fulfilled?":{"type":"method","name":"expectation_fulfilled?","children":[],"call":[]}," RSpec Mocks AnyInstance StubChain initialize":{"type":"method","name":"initialize","children":[],"call":[" record "]}," RSpec Mocks AnyInstance ExpectationChain invocation_order":{"type":"method","name":"invocation_order","children":[],"call":[]}," RSpec Mocks AnyInstance ExpectationChain verify_invocation_order":{"type":"method","name":"verify_invocation_order","children":[],"call":[]}," RSpec Mocks AnyInstance ExpectationChain expectation_fulfilled?":{"type":"method","name":"expectation_fulfilled?","children":[],"call":[" constrained_to_any_of? "]}," RSpec Mocks AnyInstance ExpectationChain initialize":{"type":"method","name":"initialize","children":[],"call":[" record "]}," RSpec Mocks AnyInstance Chain record":{"type":"method","name":"record","children":[],"call":[" messages << ","args unshift "," messages "," verify_invocation_order "," class_eval ","16 + ","21 + "]}," RSpec Mocks AnyInstance Chain last_message":{"type":"method","name":"last_message","children":[],"call":[" messages last first first "," messages last first "," messages last "," messages "," messages empty? "]}," RSpec Mocks AnyInstance Chain messages":{"type":"method","name":"messages","children":[],"call":[]}," RSpec Mocks AnyInstance Chain expectation_fulfilled!":{"type":"method","name":"expectation_fulfilled!","children":[],"call":[]}," RSpec Mocks AnyInstance Chain constrained_to_any_of?":{"type":"method","name":"constrained_to_any_of?","children":[],"call":["message first first == ","message first first ","message first "," messages any? "," messages ","constraints any? "]}," RSpec Mocks AnyInstance Chain playback!":{"type":"method","name":"playback!","children":[],"call":["_instance __send__ ","message last ","message first "," messages inject "," messages ","object __send__ "," create_message_expectation_on ","instance send "," create_ create_message_expectation_on _on "]}," RSpec Mocks NegativeMessageExpectation and_return":{"type":"method","name":"and_return","children":[],"call":["RSpec  warn_deprecation "," caller [] "," caller ","RSpec Mocks  warn_deprecation ","RSpec  deprecate "]}," RSpec Mocks ConstantStubber raise_on_invalid_const":{"type":"method","name":"raise_on_invalid_const","children":[],"call":[]}," RSpec Mocks ConstantStubber find":{"type":"method","name":"find","children":[],"call":[]}," RSpec Mocks ConstantStubber stubbers":{"type":"method","name":"stubbers","children":[],"call":[]}," RSpec Mocks ConstantStubber rspec_reset":{"type":"method","name":"rspec_reset","children":[],"call":[]}," RSpec Mocks ConstantStubber ensure_registered_with_mocks_space":{"type":"method","name":"ensure_registered_with_mocks_space","children":[],"call":[]}," RSpec Mocks ConstantStubber UndefinedConstantSetter rspec_reset":{"type":"method","name":"rspec_reset","children":[],"call":["@deepest_defined_const send "]}," RSpec Mocks ConstantStubber UndefinedConstantSetter previously_defined?":{"type":"method","name":"previously_defined?","children":[],"call":[]}," RSpec Mocks ConstantStubber UndefinedConstantSetter stub":{"type":"method","name":"stub","children":[],"call":["context const_set ","remaining_parts first ","klass const_set ","Module  new ","remaining_parts inject ","klass const_get ","remaining_parts shift ","klass const_defined? ","@context_parts inject ","@context_parts dup "," get_const_defined_on "," const_defined_on? ","@context_parts dup  first ","@context_parts dup  inject ","@context_parts dup  shift "]}," RSpec Mocks ConstantStubber DefinedConstantReplacer verify_constants_to_transfer!":{"type":"method","name":"verify_constants_to_transfer!","children":[],"call":["@original_value constants "," raise ","(str \"Cannot transfer nested constant(s) \") + + ","available_constants join ","(str \"Cannot transfer nested constant(s) \") + ","undefined_constants join ","@original_value constants - ","undefined_constants any? ","@transfer_nested_constants - ","@transfer_nested_constants map ","RUBY_VERSION  == ","@transfer_nested_constants is_a? ","(str \"Cannot transfer nested constants for \") + + ","(str \"Cannot transfer nested constants for \") + ","value respond_to? ","(pair\n  (ivar :@original_value)\n  (str \"the original value\")) each "," constants_defined_on "," constants_defined_on - ","@original_value constants -  join "," constants_defined_on -  join ","@transfer_nested_constants -  join ","@transfer_nested_constants -  any? ","@transfer_nested_constants map  - ","@transfer_nested_constants map  map ","@transfer_nested_constants map  is_a? "]}," RSpec Mocks ConstantStubber DefinedConstantReplacer transfer_nested_constants":{"type":"method","name":"transfer_nested_constants","children":[],"call":["@stubbed_value const_set "," original_value const_get "," original_value ","constants each "," get_const_defined_on "]}," RSpec Mocks ConstantStubber DefinedConstantReplacer rspec_reset":{"type":"method","name":"rspec_reset","children":[],"call":["@context const_set ","@context send "]}," RSpec Mocks ConstantStubber DefinedConstantReplacer previously_defined?":{"type":"method","name":"previously_defined?","children":[],"call":[]}," RSpec Mocks ConstantStubber DefinedConstantReplacer stub":{"type":"method","name":"stub","children":[],"call":[" transfer_nested_constants ","@context const_set ","@context send "," verify_constants_to_transfer! ","@context const_get "," recursive_const_get ","@context_parts join "," get_const_defined_on "," recursive_const_get  const_set "," recursive_const_get  send "," verify_ verify_constants_to_transfer! ! "," recursive_const_get  const_get "," recursive_const_get _parts join "]}," RSpec Mocks ConstantStubber BaseStubber to_constant":{"type":"method","name":"to_constant","children":[],"call":["const original_value= "," original_value ","const previously_defined= "," previously_defined? ","const stubbed= ","Constant  new "," full_constant_name ","Constant  new  original_value= ","Constant  new  previously_defined= ","Constant  new  stubbed= "," full_Constant  new ant_name "]}," RSpec Mocks ConstantStubber BaseStubber initialize":{"type":"method","name":"initialize","children":[],"call":["@context_parts pop ","@full_constant_name split ","@full_constant_name split  pop "]}," RSpec Mocks ConstantStubber stub":{"type":"method","name":"stub","children":[],"call":[]}," RSpec Mocks Constant original":{"type":"method","name":"original","children":[],"call":[]}," RSpec Mocks Constant unstubbed":{"type":"method","name":"unstubbed","children":[],"call":[]}," RSpec Mocks Constant to_s":{"type":"method","name":"to_s","children":[],"call":[" name "," class name "," class "]}," RSpec Mocks Constant stubbed?":{"type":"method","name":"stubbed?","children":[],"call":[]}," RSpec Mocks Constant previously_defined?":{"type":"method","name":"previously_defined?","children":[],"call":[]}," RSpec Mocks Constant initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "]}," RSpec Mocks RecursiveConstMethods recursive_const_defined?":{"type":"method","name":"recursive_const_defined?","children":[],"call":["(lvar :mod) join ","mod const_get ","mod const_defined? ","mod is_a? ! ","mod is_a? "," block_given? ","name split inject ","name split "," get_const_defined_on "," const_defined_on? ","const_name split inject ","const_name split "," normalize_const_name split inject "," normalize_const_name split "," normalize_const_name ","(send\n  (const nil :Module) :===\n  (lvar :mod)) ! ","Module  === "]}," RSpec Mocks RecursiveConstMethods recursive_const_get":{"type":"method","name":"recursive_const_get","children":[],"call":["mod const_get ","name split inject ","name split "," get_const_defined_on ","const_name split inject ","const_name split "," normalize_const_name split inject "," normalize_const_name split "," normalize_const_name "]}," RSpec Mocks Proxy raise_missing_default_stub_error":{"type":"method","name":"raise_missing_default_stub_error","children":[],"call":["@error_generator raise_missing_default_stub_error "]}," RSpec Mocks Methods __remove_mock_proxy":{"type":"method","name":"__remove_mock_proxy","children":[],"call":[]}," RSpec Mocks MessageExpectation implementation=":{"type":"method","name":"implementation=","children":[],"call":[]}," RSpec Mocks ExampleMethods stub_const":{"type":"method","name":"stub_const","children":[],"call":["ConstantStubber  stub ","ConstantMutator  stub "]}," RSpec Mocks ErrorGenerator raise_missing_default_stub_error":{"type":"method","name":"raise_missing_default_stub_error","children":[],"call":[" __raise ","expectation message inspect ","expectation message "," intro ","(send\n  (lvar :args) :collect) join "," format_args ","args collect ","expectation expected_args "," format_received_args "," error_message + "," error_message ","message << ","diff empty? "," default_error_message "," diff_message ","expectation  default_error_message  inspect ","expectation  error_message  inspect ","expectation  default_error_message  ","expectation  error_message  ","expectation  format_args  "," error_ default_error_message  + "," error_ error_message  + "," error_ default_error_message  "," error_ error_message  "," default_error_message  << "," error_message  << "," diff_message  empty? "," default_error_ default_error_message  "," default_error_ error_message  "," diff_ default_error_message  "," diff_ error_message  ","  diff_message _message "]}," RSpec Mocks ArgumentListMatcher match_any_args?":{"type":"method","name":"match_any_args?","children":[],"call":[]}," RSpec Mocks ArgumentListMatcher matchers_match?":{"type":"method","name":"matchers_match?","children":[],"call":["@matchers == "]}," RSpec Mocks ArgumentListMatcher block_passes?":{"type":"method","name":"block_passes?","children":[],"call":["@block call "]}," RSpec Mocks ArgumentListMatcher is_matcher?":{"type":"method","name":"is_matcher?","children":[],"call":["obj null_object? ! & & ","obj respond_to? ","(sym :failure_message_for_should) any? ","obj null_object? ! & ","obj null_object? ! ","obj null_object? ","object respond_to? "]}," RSpec Mocks ArgumentListMatcher matcher_for":{"type":"method","name":"matcher_for","children":[],"call":["ArgumentMatchers EqualityProxy  new ","ArgumentMatchers RegexpMatcher  new ","arg is_a? ","ArgumentMatchers MatcherMatcher  new "," is_matcher? ","Regexp  === "]}," RSpec Mocks ArgumentListMatcher args_match?":{"type":"method","name":"args_match?","children":[],"call":[" matchers_match? "," block_passes? "," match_any_args? ","Support FuzzyMatcher  values_match? "," resolve_expected_args_based_on ","Hash  ruby2_keywords_hash? ","expected_args last ","Hash  ruby2_keywords_hash? ! ","actual_args last ","Hash  === ","RUBY_VERSION  >= ","expected_args size != ","actual_args size ","expected_args size "," resolve_ resolve_expected_args_based_on _based_on "," resolve_expected_args_based_on  last "," resolve_expected_args_based_on  size != "," resolve_expected_args_based_on  size "]}," RSpec Mocks ArgumentListMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[" matcher_for ","expected_args collect ","expected_args first ","expected_args empty? "," ensure_expected_args_valid! "]}," RSpec Mocks AnyInstance restore_dup":{"type":"method","name":"restore_dup","children":[],"call":[" remove_method "," alias_method "," class_eval "," method_defined? "]}," RSpec Mocks AnyInstance modify_dup_to_remove_mock_proxy_when_invoked":{"type":"method","name":"modify_dup_to_remove_mock_proxy_when_invoked","children":[{"type":"method","name":"__rspec_dup","children":[],"asgn":[],"call":[" __rspec_original_dup "," __remove_mock_proxy "]}],"call":[" alias_method "," __rspec_original_dup "," __remove_mock_proxy "," class_eval "," method_defined? "," method_defined? ! "]}," RSpec Mocks AnyInstance rspec_reset":{"type":"method","name":"rspec_reset","children":[],"call":[" __mock_proxy reset "," __mock_proxy "," restore_dup "]}," RSpec Mocks AnyInstance Recorder should_not_receive":{"type":"method","name":"should_not_receive","children":[],"call":[" message_chains add ","NegativeExpectationChain  new "," message_chains "," observe! "," should_receive never "," should_receive "]}," RSpec Mocks AnyInstance NegativeExpectationChain invocation_order":{"type":"method","name":"invocation_order","children":[],"call":[]}," RSpec Mocks AnyInstance NegativeExpectationChain initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks AnyInstance PositiveExpectationChain invocation_order":{"type":"method","name":"invocation_order","children":[],"call":[]}," RSpec Mocks AnyInstance PositiveExpectationChain initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks MethodDouble add_default_stub":{"type":"method","name":"add_default_stub","children":[],"call":[" add_stub "," stubs any? "," stubs "]}," RSpec Mocks RecursiveConstMethods get_const_defined_on":{"type":"method","name":"get_const_defined_on","children":[],"call":["mod const_get "," raise ","mod name "," const_defined_on? "]}," RSpec Mocks RecursiveConstMethods const_defined_on?":{"type":"method","name":"const_defined_on?","children":[],"call":["mod const_defined? "]}," RSpec Mocks RecursiveConstMethods constants_defined_on":{"type":"method","name":"constants_defined_on","children":[],"call":["mod constants "," const_defined_on? ","mod constants select "]}," StashedInstanceMethod restore":{"type":"method","name":"restore","children":[],"call":["@klass __send__ "," stashed_method_name "]}," StashedInstanceMethod stashed_method_name":{"type":"method","name":"stashed_method_name","children":[],"call":[]}," StashedInstanceMethod method_owned_by_klass?":{"type":"method","name":"method_owned_by_klass?","children":[],"call":["@klass instance_method owner == ","@klass instance_method owner ","@klass instance_method "]}," StashedInstanceMethod method_defined_on_klass?":{"type":"method","name":"method_defined_on_klass?","children":[],"call":["@klass private_method_defined? ","@klass method_defined? "]}," StashedInstanceMethod method_defined_directly_on_klass?":{"type":"method","name":"method_defined_directly_on_klass?","children":[],"call":[" method_owned_by_klass? "," method_defined_on_klass? "]}," StashedInstanceMethod stash":{"type":"method","name":"stash","children":[],"call":["@klass __send__ "," stashed_method_name "," method_defined_directly_on_klass? ! "," method_defined_directly_on_klass? "]}," StashedInstanceMethod initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks MethodDouble visibility_for_method":{"type":"method","name":"visibility_for_method","children":[],"call":[" method_name "," visibility "]}," RSpec Mocks method_host":{"type":"method","name":"method_host","children":[],"call":["Object  ancestors last == ","Object  ancestors last ","Object  ancestors "]}," RSpec Mocks configuration":{"type":"method","name":"configuration","children":[],"call":["Configuration  new "]}," RSpec Mocks Proxy find_best_matching_expectation_for":{"type":"method","name":"find_best_matching_expectation_for","children":[],"call":["expectation called_max_times? "," method_double [] expectations each "," method_double [] expectations "," method_double [] "," method_double "," method_double_for expectations each "," method_double_for expectations "," method_double_for "]}," RSpec Mocks ConstantMutator raise_on_invalid_const":{"type":"method","name":"raise_on_invalid_const","children":[],"call":[]}," RSpec Mocks ConstantMutator find":{"type":"method","name":"find","children":[],"call":[]}," RSpec Mocks ConstantMutator register_mutator":{"type":"method","name":"register_mutator","children":[],"call":[]}," RSpec Mocks ConstantMutator mutators":{"type":"method","name":"mutators","children":[],"call":[]}," RSpec Mocks ConstantMutator rspec_reset":{"type":"method","name":"rspec_reset","children":[],"call":[]}," RSpec Mocks ConstantMutator ensure_registered_with_mocks_space":{"type":"method","name":"ensure_registered_with_mocks_space","children":[],"call":[]}," RSpec Mocks ConstantMutator mutate":{"type":"method","name":"mutate","children":[],"call":[]}," RSpec Mocks ConstantMutator UndefinedConstantSetter rspec_reset":{"type":"method","name":"rspec_reset","children":[],"call":["@deepest_defined_const send ","@deepest_defined_const __send__ "]}," RSpec Mocks ConstantMutator UndefinedConstantSetter to_constant":{"type":"method","name":"to_constant","children":[],"call":["const previously_defined= ","const stubbed= "]}," RSpec Mocks ConstantMutator UndefinedConstantSetter mutate":{"type":"method","name":"mutate","children":[],"call":["context const_set ","remaining_parts first ","klass const_set ","Module  new ","remaining_parts inject "," get_const_defined_on ","remaining_parts shift "," const_defined_on? ","@context_parts inject ","@context_parts dup ","@parent const_set ","ConstantMutator  stub "," name_for ","@context_parts dup  first ","@context_parts dup  inject ","@context_parts dup  shift "]}," RSpec Mocks ConstantMutator DefinedConstantReplacer verify_constants_to_transfer!":{"type":"method","name":"verify_constants_to_transfer!","children":[],"call":[" constants_defined_on "," raise ","(str \"Cannot transfer nested constant(s) \") + + ","available_constants join ","(str \"Cannot transfer nested constant(s) \") + ","undefined_constants join "," constants_defined_on - ","undefined_constants any? ","@transfer_nested_constants - ","@transfer_nested_constants map ","RUBY_VERSION  == ","@transfer_nested_constants is_a? ","(str \"Cannot transfer nested constants for \") + + ","(str \"Cannot transfer nested constants for \") + ","value respond_to? ","(pair\n  (ivar :@original_value)\n  (str \"the original value\")) each ","Array  === "," should_transfer_nested_constants? "," constants_defined_on -  join ","@transfer_nested_constants -  join ","@transfer_nested_constants -  any? ","@transfer_nested_constants map  - ","@transfer_nested_constants map  map ","@transfer_nested_constants map  is_a? "]}," RSpec Mocks ConstantMutator DefinedConstantReplacer transfer_nested_constants":{"type":"method","name":"transfer_nested_constants","children":[],"call":["@mutated_value const_set "," get_const_defined_on "," original_value ","constants each ","@constants_to_transfer each "]}," RSpec Mocks ConstantMutator DefinedConstantReplacer rspec_reset":{"type":"method","name":"rspec_reset","children":[],"call":["@context const_set ","@context send ","@context __send__ "]}," RSpec Mocks ConstantMutator DefinedConstantReplacer to_constant":{"type":"method","name":"to_constant","children":[],"call":["const previously_defined= ","const stubbed= "]}," RSpec Mocks ConstantMutator DefinedConstantReplacer mutate":{"type":"method","name":"mutate","children":[],"call":[" transfer_nested_constants ","@context const_set ","@context send "," verify_constants_to_transfer! "," get_const_defined_on "," recursive_const_get ","@context_parts join ","@context __send__ "," recursive_const_get  const_set "," recursive_const_get  send "," verify_ verify_constants_to_transfer! ! "," recursive_const_get _parts join "," recursive_const_get  __send__ "]}," RSpec Mocks ConstantMutator ConstantHider rspec_reset":{"type":"method","name":"rspec_reset","children":[],"call":["@context const_set "]}," RSpec Mocks ConstantMutator ConstantHider to_constant":{"type":"method","name":"to_constant","children":[],"call":["const previously_defined= ","const hidden= ","Constant  unmutated "," full_constant_name "]}," RSpec Mocks ConstantMutator ConstantHider mutate":{"type":"method","name":"mutate","children":[],"call":["@context send "," get_const_defined_on "," recursive_const_get ","@context_parts join ","@context __send__ "," recursive_const_defined? "," full_constant_name "," recursive_const_get  send "," recursive_const_get _parts join "," recursive_const_get  __send__ "]}," RSpec Mocks ConstantMutator BaseMutator to_constant":{"type":"method","name":"to_constant","children":[],"call":["const original_value= "," original_value ","Constant  new "," full_constant_name ","Constant  new  original_value= "," full_Constant  new ant_name "]}," RSpec Mocks ConstantMutator BaseMutator initialize":{"type":"method","name":"initialize","children":[],"call":["@context_parts pop ","@full_constant_name split "," normalize_const_name ","@full_constant_name split  pop "," normalize_const_name  split "]}," RSpec Mocks ConstantMutator hide":{"type":"method","name":"hide","children":[],"call":[]}," RSpec Mocks ConstantMutator stub":{"type":"method","name":"stub","children":[],"call":[]}," RSpec Mocks Constant unmutated":{"type":"method","name":"unmutated","children":[],"call":[]}," RSpec Mocks Constant hidden?":{"type":"method","name":"hidden?","children":[],"call":[]}," RSpec Mocks Constant mutated?":{"type":"method","name":"mutated?","children":[],"call":[]}," RSpec Mocks MethodDouble method_handle_for":{"type":"method","name":"method_handle_for","children":[],"call":["OBJECT_METHOD_METHOD  bind call ","OBJECT_METHOD_METHOD  bind "]}," RSpec Mocks MethodDouble original_method_from_superclass":{"type":"method","name":"original_method_from_superclass","children":[],"call":["@object superclass method ","@object superclass "," Kernel  warn ","(str \"            |\\n\") gsub "," caller [] "," caller ","@object superclass singleton_class instance_method bind ","@object superclass singleton_class instance_method ","@object superclass singleton_class ","CallerFilter  first_non_rspec_line "]}," RSpec Mocks MethodDouble original_method":{"type":"method","name":"original_method","children":[],"call":["@object __send__ ","Proc  new "," original_method_from_superclass "," raise ","@object respond_to? ","@object class instance_method bind ","@object class instance_method ","@object class "," method_handle_for ","@method_stasher stashed_method_name ","@method_stasher method_is_stashed? "," original_unrecorded_any_instance_method "," original_method_from_ancestor "," object_singleton_class ancestors "," object_singleton_class "," RSpec Mocks  method_handle_for ","ProcWithBlock  new "," original_method_from_ancestry ","@proxy original_method_handle_for "," method_name ","@method_stasher original_method ","@proxy method_handle_for "," original_ original_unrecorded_any_instance_method od_from_superclass ","@object class instance_ original_unrecorded_any_instance_method od bind ","@object class instance_ original_unrecorded_any_instance_method od ","  original_unrecorded_any_instance_method od_handle_for ","@ original_unrecorded_any_instance_method od_stasher stashed_ original_unrecorded_any_instance_method od_name ","@ original_unrecorded_any_instance_method od_stasher  original_unrecorded_any_instance_method od_is_stashed? "," original_unrecorded_any_instance_ original_unrecorded_any_instance_method od "," original_ original_unrecorded_any_instance_method od_from_ancestor "," RSpec Mocks   original_unrecorded_any_instance_method od_handle_for "," original_ original_unrecorded_any_instance_method od_from_ancestry ","@proxy original_ original_unrecorded_any_instance_method od_handle_for ","  original_unrecorded_any_instance_method od_name ","@ original_unrecorded_any_instance_method od_stasher original_ original_unrecorded_any_instance_method od ","@proxy  original_unrecorded_any_instance_method od_handle_for "]}," RSpec Mocks MessageExpectation and_call_original":{"type":"method","name":"and_call_original","children":[],"call":[" implementation= ","@method_double original_method ","@error_generator raise_only_valid_on_a_partial_mock ","@method_double object is_a? ","@method_double object ","AndCallOriginalImplementation  new "," warn_about_stub_override "," implementation inner_action "," implementation ","@error_generator raise_only_valid_on_a_partial_double ","RSpec Mocks TestDouble  === ","RSpec  warning ","original call "," and_wrap_original "," wrap_original "," __method__ ","block ruby2_keywords ","block respond_to? "," lambda ","block ruby2_keywords  ruby2_keywords ","block ruby2_keywords  respond_to? "]}," RSpec Mocks InstanceMethodStasher restore":{"type":"method","name":"restore","children":[],"call":["@klass __send__ "," stashed_method_name "," handle_restoration_failures "]}," RSpec Mocks InstanceMethodStasher stashed_method_name":{"type":"method","name":"stashed_method_name","children":[],"call":[]}," RSpec Mocks InstanceMethodStasher method_owned_by_klass?":{"type":"method","name":"method_owned_by_klass?","children":[],"call":["@klass instance_method owner == ","@klass instance_method owner ","@klass instance_method ","(send nil :method_defined_on_klass?\n  (lvar :owner)) ! "," method_defined_on_klass? ","owner == ","owner class ","owner is_a? ","Module  === ","RUBY_VERSION  < ","@klass instance_method @klass instance_method owner  == ","@klass instance_method owner class  == ","@klass instance_method @klass instance_method owner  ","@klass instance_method owner class  ","(send nil :method_defined_on_klass?\n  (lvar :@klass instance_method owner )) ! ","(send nil :method_defined_on_klass?\n  (lvar :owner class )) ! ","@klass instance_method owner  == ","owner class  == ","@klass instance_method owner  class ","owner class  class ","@klass instance_method owner  is_a? ","owner class  is_a? "]}," RSpec Mocks InstanceMethodStasher method_defined_on_klass?":{"type":"method","name":"method_defined_on_klass?","children":[],"call":["@klass private_method_defined? ","@klass method_defined? ","klass private_method_defined? ","klass method_defined? ","MethodReference  method_defined_at_any_visibility? "]}," RSpec Mocks InstanceMethodStasher method_defined_directly_on_klass?":{"type":"method","name":"method_defined_directly_on_klass?","children":[],"call":[" method_owned_by_klass? "," method_defined_on_klass? "]}," RSpec Mocks InstanceMethodStasher stash":{"type":"method","name":"stash","children":[],"call":["@klass __send__ "," stashed_method_name "," method_defined_directly_on_klass? ! "," method_defined_directly_on_klass? "," RSpec Support  method_handle_for "," RSpec Mocks  method_handle_for "]}," RSpec Mocks InstanceMethodStasher method_is_stashed?":{"type":"method","name":"method_is_stashed?","children":[],"call":["@original_method ! ! ","@original_method ! "]}," RSpec Mocks InstanceMethodStasher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks ExampleMethods hide_const":{"type":"method","name":"hide_const","children":[],"call":["ConstantMutator  hide "]}," RSpec Mocks ErrorGenerator raise_only_valid_on_a_partial_mock":{"type":"method","name":"raise_only_valid_on_a_partial_mock","children":[],"call":[" __raise ","(begin\n  (send nil :intro)) + "," intro "]}," RSpec Mocks Configuration add_stub_and_should_receive_to":{"type":"method","name":"add_stub_and_should_receive_to","children":[],"call":["mod __send__ ","modules each ","Syntax  enable_should "]}," RSpec Mocks RecursiveConstMethods normalize_const_name":{"type":"method","name":"normalize_const_name","children":[],"call":["const_name sub "]}," RSpec Mocks MethodDouble any_instance_class_recorder_observing_method?":{"type":"method","name":"any_instance_class_recorder_observing_method?","children":[],"call":[" any_instance_class_recorder_observing_method? ","superklass nil? ","klass superclass ","klass __recorder already_observing? ","klass __recorder "," RSpec Mocks  any_instance_recorder_for already_observing? "," RSpec Mocks  any_instance_recorder_for ","klass superclass  nil? "]}," RSpec Mocks MethodDouble original_unrecorded_any_instance_method":{"type":"method","name":"original_unrecorded_any_instance_method","children":[],"call":["@object method ","@object class __recorder build_alias_method_name ","@object class __recorder ","@object class "," any_instance_class_recorder_observing_method? "," RSpec Mocks  any_instance_recorder_for build_alias_method_name "," RSpec Mocks  any_instance_recorder_for "]}," RSpec Mocks warn_deprecation":{"type":"method","name":"warn_deprecation","children":[],"call":[" warn "]}," RSpec Mocks MethodDouble restore_original_visibility":{"type":"method","name":"restore_original_visibility","children":[],"call":[" object_singleton_class class_eval "," object_singleton_class "," object_singleton_class private_method_defined? "," object_singleton_class method_defined? ","200 + "," object_singleton_class __send__ ","MethodReference  method_defined_at_any_visibility? "," method_name "]}," RSpec Mocks MethodDouble original_method_from_ancestor":{"type":"method","name":"original_method_from_ancestor","children":[],"call":[" original_method_from_ancestor "," raise ","rest empty? ","klass instance_method bind ","klass instance_method "]}," RSpec Mocks method_handle_for":{"type":"method","name":"method_handle_for","children":[],"call":["object method ","KERNEL_METHOD_METHOD  bind call ","KERNEL_METHOD_METHOD  bind "," Kernel  === "]}," RSpec Mocks Implementation perform_yield":{"type":"method","name":"perform_yield","children":[],"call":["block call ","@eval_context instance_exec ","@error_generator raise_wrong_arity_error ","block arity ","args length != ","args length ","block arity > ","@args_to_yield each ","@error_generator raise_missing_block_error ","@eval_context nil? ","@args_to_yield empty? "]}," RSpec Mocks Implementation call":{"type":"method","name":"call","children":[],"call":["@values_to_return first ","@values_to_return shift ","@values_to_return size > ","@values_to_return size "," perform_yield ","(send\n  (send nil :actions) :map) last ","action call ","action arity zero? ","action arity "," actions map "," actions "," arg_slice_for ","RSpec  deprecate ","CallerFilter  first_non_rspec_line ","action arity != ","args size ","action lambda? ","action respond_to? "]}," RSpec Mocks Implementation initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks AnyInstance Recorder unstub!":{"type":"method","name":"unstub!","children":[],"call":[" raise "]}," RSpec Mocks AnyInstance NegativeExpectationChain expectation_fulfilled?":{"type":"method","name":"expectation_fulfilled?","children":[],"call":[]}," RSpec Mocks AndCallOriginalImplementation cannot_modify_further_error":{"type":"method","name":"cannot_modify_further_error","children":[],"call":["CannotModifyFurtherError  new ","This method has already been configured  + "]}," RSpec Mocks AndCallOriginalImplementation call":{"type":"method","name":"call","children":[],"call":["@method call "]}," RSpec Mocks AndCallOriginalImplementation present?":{"type":"method","name":"present?","children":[],"call":[]}," RSpec Mocks AndCallOriginalImplementation terminal_action=":{"type":"method","name":"terminal_action=","children":[],"call":[" raise "," cannot_modify_further_error "]}," RSpec Mocks AndCallOriginalImplementation inner_action=":{"type":"method","name":"inner_action=","children":[],"call":[" raise "," cannot_modify_further_error "]}," RSpec Mocks AndCallOriginalImplementation initial_action=":{"type":"method","name":"initial_action=","children":[],"call":[" raise "," cannot_modify_further_error "]}," RSpec Mocks AndCallOriginalImplementation initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks Implementation actions":{"type":"method","name":"actions","children":[],"call":["(send nil :initial_action) compact "," terminal_action "," inner_action "," initial_action "]}," RSpec Mocks Implementation present?":{"type":"method","name":"present?","children":[],"call":[" actions any? "," actions "]}," RSpec Mocks AndReturnImplementation call":{"type":"method","name":"call","children":[],"call":["@values_to_return first ","@values_to_return shift ","@values_to_return size > ","@values_to_return size "]}," RSpec Mocks AndReturnImplementation arity":{"type":"method","name":"arity","children":[],"call":[]}," RSpec Mocks AndReturnImplementation initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks AndYieldImplementation call":{"type":"method","name":"call","children":[],"call":["block call ","@eval_context instance_exec ","@error_generator raise_wrong_arity_error ","block arity ","args length != ","args length ","block arity > ","@args_to_yield each ","@error_generator raise_missing_block_error ","@eval_context nil? ","@args_to_yield empty? ","Support MethodSignatureVerifier  new valid? ","Support MethodSignatureVerifier  new ","Support BlockSignature  new ","MethodSignatureVerifier  new valid? ","MethodSignatureVerifier  new ","BlockSignature  new ","Support StrictSignatureVerifier  new valid? ","Support StrictSignatureVerifier  new "]}," RSpec Mocks AndYieldImplementation arity":{"type":"method","name":"arity","children":[],"call":[]}," RSpec Mocks AndYieldImplementation initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks MessageExpectation terminal_implementation_action=":{"type":"method","name":"terminal_implementation_action=","children":[],"call":[" implementation terminal_action= "," implementation "]}," RSpec Mocks MessageExpectation inner_implementation_action=":{"type":"method","name":"inner_implementation_action=","children":[],"call":[" implementation inner_action= "," implementation "," display_any_instance_deprecation_warning_if_necessary "," warn_about_stub_override "," implementation inner_action ","RSpec  warning "]}," RSpec Mocks MessageExpectation initial_implementation_action=":{"type":"method","name":"initial_implementation_action=","children":[],"call":[" implementation initial_action= "," implementation "]}," RSpec Mocks expect_message":{"type":"method","name":"expect_message","children":[],"call":[" RSpec Mocks  proxy_for add_message_expectation ","message to_sym "," RSpec Mocks  proxy_for "," caller [] "," caller ","opts fetch ","CallerFilter  first_non_rspec_line "]}," RSpec Mocks allow_message":{"type":"method","name":"allow_message","children":[],"call":[" RSpec Mocks  proxy_for add_stub ","message to_sym "," RSpec Mocks  proxy_for "," caller [] "," caller ","opts fetch ","CallerFilter  first_non_rspec_line "]}," RSpec Mocks any_instance_recorder_for":{"type":"method","name":"any_instance_recorder_for","children":[],"call":[" space any_instance_recorder_for "," space "]}," RSpec Mocks proxy_for":{"type":"method","name":"proxy_for","children":[],"call":[" space proxy_for "," space "]}," RSpec Mocks TestDouble __mock_proxy":{"type":"method","name":"__mock_proxy","children":[],"call":[" RSpec Mocks  proxy_for "," RSpec Mocks  space proxy_for "," RSpec Mocks  space "]}," RSpec Mocks TestDouble __build_mock_proxy":{"type":"method","name":"__build_mock_proxy","children":[],"call":["Proxy  new ","proxy as_null_object "," null_object? "," __warn_of_expired_use_if_expired ","TestDoubleProxy  new ","RSpec  deprecate "," __raise_expired_error ","Proxy  new  as_null_object ","TestDoubleProxy  new  as_null_object "]}," RSpec Mocks TestDouble null_object?":{"type":"method","name":"null_object?","children":[],"call":[" __mock_proxy null_object? "," __mock_proxy "," __warn_of_expired_use_if_expired "]}," RSpec Mocks TestDouble as_null_object":{"type":"method","name":"as_null_object","children":[],"call":[" __mock_proxy as_null_object "," __mock_proxy "]}," RSpec Mocks TargetBase expression":{"type":"method","name":"expression","children":[],"call":[" class "]}," RSpec Mocks TargetBase disallow_negation":{"type":"method","name":"disallow_negation","children":[],"call":[]}," RSpec Mocks TargetBase delegate_to":{"type":"method","name":"delegate_to","children":[],"call":[]}," RSpec Mocks TargetBase initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks Syntax default_should_syntax_host":{"type":"method","name":"default_should_syntax_host","children":[],"call":[]}," RSpec Mocks Syntax expect_enabled?":{"type":"method","name":"expect_enabled?","children":[],"call":[]}," RSpec Mocks Syntax should_enabled?":{"type":"method","name":"should_enabled?","children":[],"call":[" default_should_syntax_host "]}," RSpec Mocks Syntax disable_expect":{"type":"method","name":"disable_expect","children":[],"call":[]}," RSpec Mocks Syntax enable_expect":{"type":"method","name":"enable_expect","children":[{"type":"method","name":"receive","children":[],"asgn":[],"call":["Matchers Receive  new "]},{"type":"method","name":"allow","children":[],"asgn":[],"call":["AllowanceTarget  new "]},{"type":"method","name":"expect_any_instance_of","children":[],"asgn":[],"call":["AnyInstanceExpectationTarget  new "]},{"type":"method","name":"allow_any_instance_of","children":[],"asgn":[],"call":["AnyInstanceAllowanceTarget  new "]},{"type":"method","name":"expect","children":[],"asgn":[],"call":["ExpectationTarget  new "]}],"call":[]}," RSpec Mocks Syntax disable_should":{"type":"method","name":"disable_should","children":[],"call":[" default_should_syntax_host "]}," RSpec Mocks Syntax enable_should":{"type":"method","name":"enable_should","children":[{"type":"method","name":"should_receive","children":[],"asgn":[],"call":[" RSpec Mocks  expect_message ","message to_sym "," caller [] "," caller ","opts [] "]},{"type":"method","name":"should_not_receive","children":[],"asgn":[null],"call":[" RSpec Mocks  expect_message never "," RSpec Mocks  expect_message ","message to_sym "," caller [] "," caller "]},{"type":"method","name":"stub","children":[],"asgn":[],"call":[" RSpec Mocks  allow_message ","opts []= "," caller [] "," caller "," stub and_return "," stub ","message_or_hash each "," Hash  === "]},{"type":"method","name":"unstub","children":[],"asgn":[],"call":[" RSpec Mocks  space proxy_for remove_stub "," RSpec Mocks  space proxy_for "," RSpec Mocks  space "]},{"type":"method","name":"stub!","children":[],"asgn":[null],"call":[" stub "," RSpec  deprecate "]},{"type":"method","name":"unstub!","children":[],"asgn":[],"call":[" unstub "," RSpec  deprecate "]},{"type":"method","name":"stub_chain","children":[],"asgn":[],"call":[" RSpec Mocks StubChain  stub_chain_on "]},{"type":"method","name":"as_null_object","children":[],"asgn":[null],"call":[" RSpec Mocks  proxy_for as_null_object "," RSpec Mocks  proxy_for "]},{"type":"method","name":"null_object?","children":[],"asgn":[],"call":[]},{"type":"method","name":"received_message?","children":[],"asgn":[],"call":[" RSpec Mocks  proxy_for received_message? "," RSpec Mocks  proxy_for "]},{"type":"method","name":"any_instance","children":[],"asgn":[],"call":[" RSpec Mocks  any_instance_recorder_for "]}],"call":[" default_should_syntax_host "]}," RSpec Mocks StubChain find_matching_stub":{"type":"method","name":"find_matching_stub","children":[],"call":[" RSpec Mocks  proxy_for __send__ "," chain first to_sym "," chain first "," chain "," RSpec Mocks  proxy_for "," object "]}," RSpec Mocks StubChain format_chain":{"type":"method","name":"format_chain","children":[],"call":["chain join split ","chain join "," lambda ","chain << ","hash each ","chain pop ","Hash  === ","chain last ","Proc  new ","chain pop  each "]}," RSpec Mocks StubChain stub_chain":{"type":"method","name":"stub_chain","children":[],"call":[" object stub "," block "," chain shift "," chain "," object ","StubChain  stub_chain_on ","Mock  new ","matching_stub invoke stub_chain ","matching_stub invoke "," find_matching_stub "," chain length > "," chain length ","Double  new "," find_matching_stub  invoke stub_chain "," find_matching_stub  invoke "," find_ find_matching_stub  "]}," RSpec Mocks StubChain initialize":{"type":"method","name":"initialize","children":[],"call":[" format_chain "]}," RSpec Mocks StubChain stub_chain_on":{"type":"method","name":"stub_chain_on","children":[],"call":[]}," RSpec Mocks Space id_for":{"type":"method","name":"id_for","children":[],"call":["object __id__ "," SecureRandom  uuid ","object instance_eval ","object equal? "," ObjectSpace  _id2ref ","object instance_exec ","object __object __id__ __ "," SecureRandom  uuobject __id__  "," ObjectSpace  _object __id__ 2ref "]}," RSpec Mocks Space registered?":{"type":"method","name":"registered?","children":[],"call":[" proxies has_key? "," id_for "," proxies "," proxies key? "]}," RSpec Mocks Space proxy_for":{"type":"method","name":"proxy_for","children":[],"call":[" proxies []= ","Proxy  new ","object __build_mock_proxy ","ProxyForNil  new "," proxies "," proxies fetch "," id_for "," print_out_of_example_deprecation "," outside_example "," proxy_not_found_for "," proxy_mutex synchronize "," proxy_mutex ","PartialMockProxy  new "," expectation_ordering ","VerifyingPartialMockProxy  new ","RSpec Mocks  configuration verify_partial_doubles? ","RSpec Mocks  configuration ","  id_for _for "," outs id_for e_example "]}," RSpec Mocks Space remove_any_instance_recorder_for":{"type":"method","name":"remove_any_instance_recorder_for","children":[],"call":[" any_instance_recorders delete ","klass __id__ "," any_instance_recorders "]}," RSpec Mocks Space any_instance_recorder_for":{"type":"method","name":"any_instance_recorder_for","children":[],"call":[" any_instance_recorders []= ","AnyInstance Recorder  new "," any_instance_recorders "," any_instance_recorders fetch ","klass __id__ "," print_out_of_example_deprecation "," outside_example "," any_instance_recorder_not_found_for "," any_instance_mutex synchronize "," any_instance_mutex ","klass __klass __id__ __ "," outsklass __id__ e_example "]}," RSpec Mocks Space initialize":{"type":"method","name":"initialize","children":[],"call":[" outside_example= "," new_mutex ","OrderGroup  new "]}," RSpec Mocks ProxyForNil warn":{"type":"method","name":"warn","children":[],"call":["Kernel  warn ","line include? ! ","line include? "," caller find "," caller "," caller [] ","CallerFilter  first_non_rspec_line ","RSpec  warning ","@error_generator expectation_on_nil_message "]}," RSpec Mocks ProxyForNil add_stub":{"type":"method","name":"add_stub","children":[],"call":[" warn "," warn_about_expectations? "," warn_or_raise! "]}," RSpec Mocks ProxyForNil add_negative_message_expectation":{"type":"method","name":"add_negative_message_expectation","children":[],"call":[" warn "," warn_about_expectations? "," warn_or_raise! "]}," RSpec Mocks ProxyForNil add_message_expectation":{"type":"method","name":"add_message_expectation","children":[],"call":[" warn "," warn_about_expectations? "," warn_or_raise! "]}," RSpec Mocks ProxyForNil initialize":{"type":"method","name":"initialize","children":[],"call":[" set_expectation_behavior "]}," RSpec Mocks Proxy check_for_unexpected_arguments":{"type":"method","name":"check_for_unexpected_arguments","children":[],"call":[" raise_unexpected_message_args_error ","expectation matches_name_but_not_args ","@messages_received each ","expectation raise_unexpected_message_args_error ","args [] ","name_but_not_args map ","others empty? ! ","others empty? ","name_but_not_args empty? ","@messages_received partition ","expectation matches? ","@messages_received any? ","@messages_received empty? ","@messages_received_mutex synchronize ","received_arg_list args "," raise_unexpected_message_received_arg_list args _error ","expectation matches_name_but_not_received_arg_list args  ","expectation raise_unexpected_message_received_arg_list args _error ","received_arg_list args  [] ","name_but_not_received_arg_list args  map ","name_but_not_received_arg_list args  empty? ","received_arg_list received_arg_list args  "]}," RSpec Mocks Proxy replay_received_message_on":{"type":"method","name":"replay_received_message_on","children":[],"call":["expectation invoke ","expectation matches? ","@messages_received each ","@error_generator raise_expectation_on_unstubbed_method ","meth_double stubs any? ","meth_double stubs "," null_object? ","@error_generator raise_expectation_on_mocked_method ","meth_double expectations any? ","meth_double expectations "," method_double [] "," method_double ","expectation message ","block call "," method_double_for ","expectation safe_invoke ","@messages_received_mutex synchronize ","received_arg_list args ","expectation fail_if_problematic_received_arg_mutations ","expectation message == "," method_double []  stubs any? "," method_double_for  stubs any? "," method_double []  stubs "," method_double_for  stubs "," method_double []  expectations any? "," method_double_for  expectations any? "," method_double []  expectations "," method_double_for  expectations ","received_arg_list received_arg_list args  "]}," RSpec Mocks Proxy build_expectation":{"type":"method","name":"build_expectation","children":[],"call":["meth_double build_expectation "," method_double [] "," method_double "," method_double_for "," method_double []  build_expectation "," method_double_for  build_expectation "]}," RSpec Mocks ConstantMutator reset_all":{"type":"method","name":"reset_all","children":[],"call":[]}," RSpec Mocks MethodDouble build_expectation":{"type":"method","name":"build_expectation","children":[],"call":["MessageExpectation  new "," message_expectation_class new "," message_expectation_class "]}," RSpec Mocks MethodDouble original_method_from_ancestry":{"type":"method","name":"original_method_from_ancestry","children":[],"call":[" original_method_from_superclass "," raise ","@object respond_to? "," original_method_from_ancestor "," object_singleton_class ancestors "," object_singleton_class "," object_singleton_class ancestors drop "]}," RSpec Mocks MethodDouble ProcWithBlock call":{"type":"method","name":"call","children":[],"call":[" object __send__ "," method_name "," object "]}," RSpec Mocks AndCallOriginalImplementation arity":{"type":"method","name":"arity","children":[],"call":["@method arity "]}," RSpec Mocks Implementation arg_slice_for":{"type":"method","name":"arg_slice_for","children":[],"call":["args slice ","arity >= "]}," RSpec Mocks MessageExpectation description":{"type":"method","name":"description","children":[],"call":["@error_generator describe_expectation "," expected_args "]}," RSpec Mocks MessageExpectation expectation_count_type":{"type":"method","name":"expectation_count_type","children":[],"call":[]}," RSpec Mocks MessageExpectation negative?":{"type":"method","name":"negative?","children":[],"call":["@at_least ! ","@expected_received_count == "]}," RSpec Mocks Matchers Receive Customization playback_onto":{"type":"method","name":"playback_onto","children":[],"call":["expectation __send__ "]}," RSpec Mocks Matchers Receive Customization initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks Matchers Receive setup_method_substitute":{"type":"method","name":"setup_method_substitute","children":[],"call":["customization playback_onto ","@recorded_customizations each ","host __send__ ","args << ","@message to_sym "," move_block_to_last_customization "," move_ move_block_to_last_customization _to_last_customization "]}," RSpec Mocks Matchers Receive setup_any_instance_method_substitute":{"type":"method","name":"setup_any_instance_method_substitute","children":[],"call":[" setup_method_substitute "," RSpec Mocks  any_instance_recorder_for "," RSpec Mocks  space any_instance_proxy_for "," RSpec Mocks  space "," RSpec Mocks  space any_instance_recorder_for "," RSpec Mocks   RSpec Mocks  any_instance_recorder_for _for "," RSpec Mocks   RSpec Mocks  space any_instance_recorder_for _for "," RSpec Mocks  space any_instance_ RSpec Mocks  space any_instance_proxy_for _for "," RSpec Mocks  space  RSpec Mocks  any_instance_recorder_for _for "," RSpec Mocks  space  RSpec Mocks  space any_instance_recorder_for _for "]}," RSpec Mocks Matchers Receive setup_mock_proxy_method_substitute":{"type":"method","name":"setup_mock_proxy_method_substitute","children":[],"call":[" setup_method_substitute "," RSpec Mocks  proxy_for "," RSpec Mocks  space proxy_for "," RSpec Mocks  space "," RSpec Mocks   RSpec Mocks  proxy_for _for "," RSpec Mocks   RSpec Mocks  space proxy_for _for "," RSpec Mocks  space  RSpec Mocks  proxy_for _for "," RSpec Mocks  space  RSpec Mocks  space proxy_for _for "]}," RSpec Mocks Matchers Receive setup_any_instance_allowance":{"type":"method","name":"setup_any_instance_allowance","children":[],"call":[" setup_any_instance_method_substitute "]}," RSpec Mocks Matchers Receive setup_any_instance_negative_expectation":{"type":"method","name":"setup_any_instance_negative_expectation","children":[],"call":[" setup_any_instance_method_substitute "]}," RSpec Mocks Matchers Receive setup_any_instance_expectation":{"type":"method","name":"setup_any_instance_expectation","children":[],"call":[" setup_any_instance_method_substitute "]}," RSpec Mocks Matchers Receive setup_allowance":{"type":"method","name":"setup_allowance","children":[],"call":[" setup_mock_proxy_method_substitute "," warn_if_any_instance "]}," RSpec Mocks Matchers Receive setup_negative_expectation":{"type":"method","name":"setup_negative_expectation","children":[],"call":[" setup_expectation ","@recorded_customizations unshift ","Customization  new "," setup_mock_proxy_method_substitute "," warn_if_any_instance ","ExpectationCustomization  new "]}," RSpec Mocks Matchers Receive setup_expectation":{"type":"method","name":"setup_expectation","children":[],"call":[" setup_mock_proxy_method_substitute "," warn_if_any_instance "]}," RSpec Mocks Matchers Receive initialize":{"type":"method","name":"initialize","children":[],"call":["line split first end_with? ! ","line split first end_with? ","line split first ","line split "," caller find "," caller ","CallerFilter  first_non_rspec_line "]}," RSpec Mocks Matchers HaveReceived mock_proxy":{"type":"method","name":"mock_proxy","children":[],"call":["RSpec Mocks  proxy_for ","RSpec Mocks  space proxy_for ","RSpec Mocks  space "]}," RSpec Mocks Matchers HaveReceived expected_messages_received?":{"type":"method","name":"expected_messages_received?","children":[],"call":["@expectation expected_messages_received? "," mock_proxy replay_received_message_on "," mock_proxy "]}," RSpec Mocks Matchers HaveReceived generate_failure_message":{"type":"method","name":"generate_failure_message","children":[],"call":["error message ","@expectation generate_error "," mock_proxy check_for_unexpected_arguments "," mock_proxy ","RSpec Support  with_failure_notifier ","err message ","Proc  new "]}," RSpec Mocks Matchers HaveReceived count_constraint":{"type":"method","name":"count_constraint","children":[],"call":["COUNT_CONSTRAINTS  include? ","@constraints map detect ","@constraints map ","@constraints map find "]}," RSpec Mocks Matchers HaveReceived ensure_count_unconstrained":{"type":"method","name":"ensure_count_unconstrained","children":[],"call":[" raise "," count_constraint ","RSpec Mocks  error_generator raise_cant_constrain_count_for_negated_have_received_error ","RSpec Mocks  error_generator "]}," RSpec Mocks Matchers HaveReceived apply_constraints_to":{"type":"method","name":"apply_constraints_to","children":[],"call":["expectation send ","@constraints each "]}," RSpec Mocks Matchers HaveReceived expect":{"type":"method","name":"expect","children":[],"call":[" apply_constraints_to "," mock_proxy build_expectation "," mock_proxy "," mock_proxy build_ mock_proxy build_expectation  "]}," RSpec Mocks Matchers HaveReceived description":{"type":"method","name":"description","children":[],"call":[" expect description "," expect ","(or-asgn\n  (ivasgn :@expectation)\n  (send nil :expect)) description_for "]}," RSpec Mocks Matchers HaveReceived negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":[" generate_failure_message "]}," RSpec Mocks Matchers HaveReceived failure_message":{"type":"method","name":"failure_message","children":[],"call":[" generate_failure_message "," capture_failure_message "]}," RSpec Mocks Matchers HaveReceived does_not_match?":{"type":"method","name":"does_not_match?","children":[],"call":[" expected_messages_received? "," expect never "," expect "," ensure_count_unconstrained "," expected_messages_received_in_order? "," mock_proxy ensure_implemented "," mock_proxy "]}," RSpec Mocks Matchers HaveReceived matches?":{"type":"method","name":"matches?","children":[],"call":[" expected_messages_received? "," expect "," expected_messages_received_in_order? "," mock_proxy ensure_implemented "," mock_proxy "]}," RSpec Mocks Matchers HaveReceived initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks ExampleMethods included":{"type":"method","name":"included","children":[],"call":[]}," RSpec Mocks ExampleMethods have_received":{"type":"method","name":"have_received","children":[],"call":["Matchers HaveReceived  new "]}," RSpec Mocks ErrorGenerator received_arg_list":{"type":"method","name":"received_arg_list","children":[],"call":["args collect join ","args collect ","args map join ","args map "]}," RSpec Mocks ErrorGenerator format_received_args":{"type":"method","name":"format_received_args","children":[],"call":["( + + ","( + "," received_arg_list ","args empty? ","(send\n  (send nil :grouped_args\n    (lvar :args_for_multiple_calls)) :map) join "," group_count "," format_args "," grouped_args map "," grouped_args "]}," RSpec Mocks ErrorGenerator raise_double_negation_error":{"type":"method","name":"raise_double_negation_error","children":[],"call":[" __raise "]}," RSpec Mocks ErrorGenerator raise_expectation_on_mocked_method":{"type":"method","name":"raise_expectation_on_mocked_method","children":[],"call":[" __raise ","(begin\n  (send nil :intro)) + "," intro "]}," RSpec Mocks ErrorGenerator raise_expectation_on_unstubbed_method":{"type":"method","name":"raise_expectation_on_unstubbed_method","children":[],"call":[" __raise ","(begin\n  (send nil :intro)) + "," intro "]}," RSpec Mocks ErrorGenerator describe_expectation":{"type":"method","name":"describe_expectation","children":[],"call":[" count_message "," format_args "]}," RSpec Mocks ErrorGenerator method_call_args_description":{"type":"method","name":"method_call_args_description","children":[],"call":["args inspect gsub ","args inspect ","args length > ","args length ","args first is_a? ","args first "," format_args "]}," RSpec Mocks ErrorGenerator expected_part_of_expectation_error":{"type":"method","name":"expected_part_of_expectation_error","children":[],"call":["(str \"expected: \") + "," method_call_args_description ","argument_list_matcher expected_args "," count_message "," expected_method_call_args_description ","argument_list_matcher expected_args length > ","argument_list_matcher expected_args length "]}," RSpec Mocks ErrorGenerator received_part_of_expectation_error":{"type":"method","name":"received_part_of_expectation_error","children":[],"call":["(str \"received: \") + "," method_call_args_description "," count_message "," actual_method_call_args_description ","args length > ","args length ","actual_received_count > "]}," RSpec Mocks Deprecation deprecate":{"type":"method","name":"deprecate","children":[],"call":[" warn ","message << "," caller [] "," caller ","options [] ","CallerFilter  first_non_rspec_line "]}," RSpec Mocks Configuration syntax":{"type":"method","name":"syntax","children":[],"call":["syntaxes << ","Syntax  expect_enabled? ","Syntax  should_enabled? "]}," RSpec Mocks Configuration syntax=":{"type":"method","name":"syntax=","children":[],"call":["Syntax  disable_should ","Syntax  enable_should "," Array include? "," Array ","Syntax  disable_expect ","Syntax  enable_expect ","syntaxes include? ","values flatten ","values flatten  include? "]}," RSpec Mocks AnyInstance StubChainChain create_message_expectation_on":{"type":"method","name":"create_message_expectation_on","children":[],"call":[" RSpec Mocks StubChain  stub_chain_on "]}," RSpec Mocks AnyInstance StubChain create_message_expectation_on":{"type":"method","name":"create_message_expectation_on","children":[],"call":["proxy add_stub "," RSpec Mocks  proxy_for ","@recorder stubs [] << ","@recorder stubs [] ","stub message ","@recorder stubs ","stub and_yield_receiver_to_implementation ","RSpec Mocks  configuration yield_receiver_to_any_instance_implementation_blocks? ","RSpec Mocks  configuration ","(or\n  (lvar :opts)\n  (hash)) merge "," RSpec Mocks  space proxy_for "," RSpec Mocks  space "," RSpec Mocks  proxy_for  add_stub "," RSpec Mocks  space proxy_for  add_stub ","proxy add_proxy add_stub  "," RSpec Mocks   RSpec Mocks  proxy_for _for "," RSpec Mocks   RSpec Mocks  space proxy_for _for ","@recorder proxy add_stub s [] << ","@recorder proxy add_stub s [] ","proxy add_stub  message ","@recorder proxy add_stub s ","proxy add_stub  and_yield_receiver_to_implementation ","(or\n  (lvar :(or\n  (lvar :opts)\n  (hash)) merge )\n  (hash)) merge "," RSpec Mocks  space  RSpec Mocks  proxy_for _for "," RSpec Mocks  space  RSpec Mocks  space proxy_for _for "]}," RSpec Mocks AnyInstance PositiveExpectationChain create_message_expectation_on":{"type":"method","name":"create_message_expectation_on","children":[],"call":["proxy add_message_expectation "," RSpec Mocks  proxy_for ","me and_yield_receiver_to_implementation ","RSpec Mocks  configuration yield_receiver_to_any_instance_implementation_blocks? ","RSpec Mocks  configuration ","(or\n  (lvar :opts)\n  (hash)) merge "," RSpec Mocks  space proxy_for "," RSpec Mocks  space "," RSpec Mocks  proxy_for  add_message_expectation "," RSpec Mocks  space proxy_for  add_message_expectation ","proxy add_proxy add_message_expectation ssage_expectation "," RSpec Mocks   RSpec Mocks  proxy_for _for "," RSpec Mocks   RSpec Mocks  space proxy_for _for ","proxy add_message_expectation  and_yield_receiver_to_impleproxy add_message_expectation ntation ","RSpec Mocks  configuration yield_receiver_to_any_instance_impleproxy add_message_expectation ntation_blocks? ","(or\n  (lvar :opts)\n  (hash)) proxy add_message_expectation rge ","(or\n  (lvar :(or\n  (lvar :opts)\n  (hash)) merge )\n  (hash)) merge "," RSpec Mocks  space  RSpec Mocks  proxy_for _for "," RSpec Mocks  space  RSpec Mocks  space proxy_for _for "]}," RSpec Mocks AnyInstance Chain negated?":{"type":"method","name":"negated?","children":[],"call":["message to_sym == ","message to_sym "," messages any? "," messages ","message == "]}," RSpec Mocks AnyInstance Chain never":{"type":"method","name":"never","children":[],"call":["ErrorGenerator  raise_double_negation_error "," negated? ","AnyInstance  error_generator raise_double_negation_error ","AnyInstance  error_generator "]}," RSpec Mocks AnyInstance Chain Customizations record":{"type":"method","name":"record","children":[],"call":[]}," RSpec Mocks AnyInstance Chain initialize":{"type":"method","name":"initialize","children":[],"call":[" ensure_expectation_block_has_source_location ","CallerFilter  first_non_rspec_line "]}," RSpec Mocks AnyInstance NegativeExpectationChain create_message_expectation_on":{"type":"method","name":"create_message_expectation_on","children":[],"call":["proxy add_negative_message_expectation "," RSpec Mocks  proxy_for "," RSpec Mocks  proxy_for  add_negative_message_expectation "," RSpec Mocks   RSpec Mocks  proxy_for _for "]}," RSpec Mocks Syntax stub_object":{"type":"method","name":"stub_object","children":[],"call":[]}," RSpec Mocks proxies_of":{"type":"method","name":"proxies_of","children":[],"call":[" space proxies_of "," space "]}," RSpec Mocks Space proxies_of":{"type":"method","name":"proxies_of","children":[],"call":["klass === ","proxy object "," proxies values select "," proxies values "," proxies "]}," RSpec Mocks Proxy remove_single_stub":{"type":"method","name":"remove_single_stub","children":[],"call":[" method_double [] remove_single_stub "," method_double [] "," method_double "," method_double_for remove_single_stub "," method_double_for "]}," RSpec Mocks MethodDouble remove_single_stub":{"type":"method","name":"remove_single_stub","children":[],"call":[" restore_original_method "," expectations empty? "," expectations "," stubs empty? "," stubs "," stubs delete "]}," RSpec Mocks ArgumentExpectation is_stub_as_null_object?":{"type":"method","name":"is_stub_as_null_object?","children":[],"call":["obj __rspec_double_acting_as_null_object? ","obj respond_to? "]}," RSpec Mocks ArgumentExpectation null_object?":{"type":"method","name":"null_object?","children":[],"call":["obj __rspec_double_acting_as_null_object? ","obj respond_to? "]}," RSpec Mocks AnyInstance Recorder unfulfilled_expectations":{"type":"method","name":"unfulfilled_expectations","children":[],"call":["(send\n  (ivar :@message_chains) :map) compact ","method_name to_s ","chain is_a? ","chain expectation_filfilled? ","@message_chains map "]}," RSpec Mocks AnyInstance Recorder has_expectation?":{"type":"method","name":"has_expectation?","children":[],"call":["@message_chains [] is_a? ","@message_chains [] "]}," RSpec Mocks AnyInstance Recorder each_expectation_filfilled?":{"type":"method","name":"each_expectation_filfilled?","children":[],"call":["chain expectation_filfilled? ","@message_chains all? "]}," RSpec Mocks AnyInstance ExpectationChain expectation_filfilled?":{"type":"method","name":"expectation_filfilled?","children":[],"call":[" constrained_to_any_of? "]}," RSpec Mocks AnyInstance ExpectationChain expectation_fulfilled!":{"type":"method","name":"expectation_fulfilled!","children":[],"call":[]}," RSpec Mocks AnyInstance StubChain expectation_filfilled?":{"type":"method","name":"expectation_filfilled?","children":[],"call":[]}," RSpec Mocks AnyInstance StubChainChain verify_invocation_order":{"type":"method","name":"verify_invocation_order","children":[],"call":[" raise "," invocation_order [] include? "," last_message "," invocation_order [] "," invocation_order "]}," RSpec Mocks AnyInstance StubChainChain expectation_fulfilled!":{"type":"method","name":"expectation_fulfilled!","children":[],"call":[]}," RSpec Mocks AnyInstance StubChainChain expectation_fulfilled?":{"type":"method","name":"expectation_fulfilled?","children":[],"call":[]}," RSpec Mocks AnyInstance StubChain expectation_fulfilled!":{"type":"method","name":"expectation_fulfilled!","children":[],"call":[]}," RSpec Mocks AnyInstance Recorder period_separated_method_chain?":{"type":"method","name":"period_separated_method_chain?","children":[],"call":["method_name include? ","method_name is_a? "]}," RSpec Mocks AnyInstance MessageChains each_expectation_fulfilled?":{"type":"method","name":"each_expectation_fulfilled?","children":[],"call":["chain expectation_fulfilled? ","chains all? "," all? "]}," RSpec Mocks MessageExpectation invoke_return_block":{"type":"method","name":"invoke_return_block","children":[],"call":["@return_block call ","@return_block arity == ","@return_block arity ","args << ","block nil? "]}," RSpec Mocks MessageExpectation invoke_consecutive_return_block":{"type":"method","name":"invoke_consecutive_return_block","children":[],"call":["value [] ","(ivar :@actual_received_count) min ","value size - ","value size "," invoke_return_block "," invoke_return_block  [] "," invoke_return_block  size - "," invoke_return_block  size "]}," RSpec Mocks MessageExpectation eval_block":{"type":"method","name":"eval_block","children":[],"call":["block call ","@eval_context instance_exec "]}," RSpec Mocks MessageExpectation invoke_with_yield":{"type":"method","name":"invoke_with_yield","children":[],"call":[" eval_block ","@error_generator raise_wrong_arity_error ","block arity ","args_to_yield_this_time length != ","args_to_yield_this_time length ","block arity > ","@args_to_yield each ","@error_generator raise_missing_block_error ","block nil? "]}," RSpec Mocks MessageExpectation invoke_method_block":{"type":"method","name":"invoke_method_block","children":[],"call":["@error_generator raise_block_failed_error ","detail message ","@method_block call "]}," RSpec Mocks const_missing":{"type":"method","name":"const_missing","children":[],"call":[]}," RSpec Mocks TestDouble __warn_of_expired_use_if_expired":{"type":"method","name":"__warn_of_expired_use_if_expired","children":[],"call":["RSpec  deprecate ","@__unfrozen_attributes [] "]}," RSpec Mocks TestDouble __warn_if_used_further!":{"type":"method","name":"__warn_if_used_further!","children":[],"call":["@__unfrozen_attributes []= "]}," RSpec Mocks Space print_out_of_example_deprecation":{"type":"method","name":"print_out_of_example_deprecation","children":[],"call":["RSpec  deprecate "]}," RSpec Mocks TestDoubleProxy reset":{"type":"method","name":"reset","children":[],"call":[" object __warn_if_used_further! "," object "," object __disallow_further_usage! ","@method_doubles clear "]}," RSpec Mocks MessageExpectation display_any_instance_deprecation_warning":{"type":"method","name":"display_any_instance_deprecation_warning","children":[],"call":["RSpec  warn_deprecation "]}," RSpec Mocks MessageExpectation should_display_any_instance_deprecation_warning":{"type":"method","name":"should_display_any_instance_deprecation_warning","children":[],"call":["@have_warned_about_yielding_receiver ! "," warn_about_yielding_receiver_to_implementation_block "]}," RSpec Mocks MessageExpectation warn_about_receiver_passing":{"type":"method","name":"warn_about_receiver_passing","children":[],"call":[]}," RSpec Mocks MessageExpectation passing_an_additional_arg_would_break_block?":{"type":"method","name":"passing_an_additional_arg_would_break_block?","children":[],"call":["block arity zero? ! ","block arity zero? ","block arity ","block lambda? "]}," RSpec Mocks MessageExpectation display_any_instance_deprecation_warning_if_necessary":{"type":"method","name":"display_any_instance_deprecation_warning_if_necessary","children":[],"call":[" display_any_instance_deprecation_warning ","block source_location join ","block source_location ","block respond_to? "," should_display_any_instance_deprecation_warning "," passing_an_additional_arg_would_break_block? "]}," RSpec Mocks MessageExpectation yield_receiver_to_implementation_block?":{"type":"method","name":"yield_receiver_to_implementation_block?","children":[],"call":[]}," RSpec Mocks MessageExpectation and_yield_receiver_to_implementation":{"type":"method","name":"and_yield_receiver_to_implementation","children":[],"call":[]}," Kernel proc_with_lambda_tracking":{"type":"method","name":"proc_with_lambda_tracking","children":[],"call":["l send ","block send == ","block send "," proc_without_lambda_tracking "," proc_without_lambda_tracking  send ","b proc_without_lambda_tracking ock send == ","b proc_without_lambda_tracking ock send "," proc_without_ proc_without_lambda_tracking ambda_tracking "]}," Kernel lambda_with_lambda_tracking":{"type":"method","name":"lambda_with_lambda_tracking","children":[],"call":["l send ","block send == ","block send "," lambda_without_lambda_tracking "," lambda_without_lambda_tracking  send ","b lambda_without_lambda_tracking ock send == ","b lambda_without_lambda_tracking ock send ","  lambda_without_lambda_tracking ambda_without_ lambda_without_lambda_tracking ambda_tracking "]}," Method to_proc_with_lambda_tracking":{"type":"method","name":"to_proc_with_lambda_tracking","children":[],"call":["proc send "," to_proc_without_lambda_tracking "," to_proc_without_lambda_tracking  send "," to_ to_proc_without_lambda_tracking _without_lambda_tracking "]}," Proc lambda?":{"type":"method","name":"lambda?","children":[],"call":[" __is_lambda__ ! ! "," __is_lambda__ ! "," __is_lambda__ "]}," Backports alias_method_chain":{"type":"method","name":"alias_method_chain","children":[],"call":[]}," RSpec Mocks Deprecation warn_deprecation":{"type":"method","name":"warn_deprecation","children":[],"call":[" warn "]}," RSpec Mocks Configuration marshal_patched?":{"type":"method","name":"marshal_patched?","children":[],"call":[]}," RSpec Mocks Configuration patch_marshal_to_support_partial_doubles=":{"type":"method","name":"patch_marshal_to_support_partial_doubles=","children":[],"call":["RSpec Mocks MarshalExtension  unpatch! ","RSpec Mocks MarshalExtension  patch! "]}," RSpec Mocks Configuration should_warn_about_any_instance_blocks?":{"type":"method","name":"should_warn_about_any_instance_blocks?","children":[],"call":[]}," RSpec Mocks Configuration yield_receiver_to_any_instance_implementation_blocks=":{"type":"method","name":"yield_receiver_to_any_instance_implementation_blocks=","children":[],"call":[]}," RSpec Mocks Configuration yield_receiver_to_any_instance_implementation_blocks?":{"type":"method","name":"yield_receiver_to_any_instance_implementation_blocks?","children":[],"call":[]}," RSpec Mocks Configuration initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec CallerFilter first_non_rspec_line":{"type":"method","name":"first_non_rspec_line","children":[],"call":[]}," RSpec Mocks AnyInstance ExpectationChain create_message_expectation_on":{"type":"method","name":"create_message_expectation_on","children":[],"call":["proxy add_message_expectation "]}," RSpec Mocks AnyInstance Chain ensure_expectation_block_has_source_location":{"type":"method","name":"ensure_expectation_block_has_source_location","children":[],"call":["@expectation_block extend "," define_method ","Module  new ","CallerFilter  first_non_rspec_line split ","CallerFilter  first_non_rspec_line "]}," RSpec Mocks AnyInstance Chain create_message_expectation_on":{"type":"method","name":"create_message_expectation_on","children":[],"call":["me and_yield_receiver_to_implementation ","RSpec Mocks  configuration yield_receiver_to_any_instance_implementation_blocks? ","RSpec Mocks  configuration ","me display_any_instance_deprecation_warning_if_necessary ","me warn_about_receiver_passing ","RSpec Mocks  configuration should_warn_about_any_instance_blocks? "," RSpec Mocks  proxy_for "]}," RSpec Mocks TestDouble freeze":{"type":"method","name":"freeze","children":[],"call":["RSpec  deprecate ","RSpec  warn_with "]}," RSpec Mocks with_temporary_scope":{"type":"method","name":"with_temporary_scope","children":[],"call":[]}," RSpec Mocks VerifyingExistingMethodDouble unimplemented?":{"type":"method","name":"unimplemented?","children":[],"call":["@valid_method ! "]}," RSpec Mocks VerifyingExistingMethodDouble with_signature":{"type":"method","name":"with_signature","children":[],"call":["Support MethodSignature  new "," original_method ","MethodSignature  new "," original_implementation_callable "]}," RSpec Mocks VerifyingExistingMethodDouble initialize":{"type":"method","name":"initialize","children":[],"call":[" save_original_method! ","object respond_to? "," save_original_implementation_callable! "]}," RSpec Mocks VerifyingMethodDouble validate_arguments!":{"type":"method","name":"validate_arguments!","children":[],"call":[" raise ","verifier error_message ","verifier valid? ","Support MethodSignatureVerifier  new ","@method_reference with_signature ","MethodSignatureVerifier  new ","Support StrictSignatureVerifier  new ","Support MethodSignatureVerifier  new  error_message ","MethodSignatureVerifier  new  error_message ","Support StrictSignatureVerifier  new  error_message ","Support MethodSignatureVerifier  new  valid? ","MethodSignatureVerifier  new  valid? ","Support StrictSignatureVerifier  new  valid? "]}," RSpec Mocks VerifyingMethodDouble proxy_method_invoked":{"type":"method","name":"proxy_method_invoked","children":[],"call":[" validate_arguments! "," ensure_arity! ","args length "]}," RSpec Mocks VerifyingMethodDouble add_expectation":{"type":"method","name":"add_expectation","children":[],"call":["x method_reference= ","(splat\n  (lvar :args)) tap "," tap "]}," RSpec Mocks VerifyingMethodDouble message_expectation_class":{"type":"method","name":"message_expectation_class","children":[],"call":[]}," RSpec Mocks VerifyingMethodDouble initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks VerifyingPartialDoubleProxy method_reference":{"type":"method","name":"method_reference","children":[],"call":[]}," RSpec Mocks VerifyingPartialDoubleProxy initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","VerifyingExistingMethodDouble  new ","Hash  new ","DirectObjectReference  new ","optional_callback_invocation_strategy call ","VerifyingExistingMethodDouble  for ","block call ","RSpec Mocks  configuration verifying_double_callbacks each ","RSpec Mocks  configuration verifying_double_callbacks ","RSpec Mocks  configuration "]}," RSpec Mocks VerifyingProxy visibility_for":{"type":"method","name":"visibility_for","children":[],"call":[" method_reference [] visibility "," method_reference [] "," method_reference "]}," RSpec Mocks VerifyingProxy method_reference":{"type":"method","name":"method_reference","children":[],"call":["h []= ","@method_reference_class new ","Hash  new ","@method_reference_class for "]}," RSpec Mocks VerifyingProxy initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","VerifyingMethodDouble  new "," method_reference [] "," method_reference ","Hash  new "]}," RSpec Mocks VerifyingProxyMethods ensure_publicly_implemented":{"type":"method","name":"ensure_publicly_implemented","children":[],"call":["@error_generator raise_non_public_error ","visibility == "," method_reference [] visibility "," method_reference [] "," method_reference "," ensure_implemented "," method_reference [] visibility  == "," method_reference []  method_reference [] visibility  "]}," RSpec Mocks VerifyingProxyMethods ensure_implemented":{"type":"method","name":"ensure_implemented","children":[],"call":["@error_generator raise_unimplemented_error "," method_reference [] unimplemented? "," method_reference [] "," method_reference "," method_reference [] when_unimplemented ","@doubled_module defined? "]}," RSpec Mocks VerifyingProxyMethods add_message_expectation":{"type":"method","name":"add_message_expectation","children":[],"call":[" ensure_implemented "]}," RSpec Mocks VerifyingProxyMethods add_simple_stub":{"type":"method","name":"add_simple_stub","children":[],"call":[" ensure_implemented "]}," RSpec Mocks VerifyingProxyMethods add_stub":{"type":"method","name":"add_stub","children":[],"call":[" ensure_implemented "]}," RSpec Mocks VerifyingMessageExpectation validate_arguments!":{"type":"method","name":"validate_arguments!","children":[],"call":["@error_generator raise_invalid_arguments_error ","verifier valid? ","Support MethodSignatureVerifier  new "," method_reference with_signature "," method_reference "," method_reference nil? ","MethodSignatureVerifier  new ","Support MethodSignatureVerifier  new  valid? ","MethodSignatureVerifier  new  valid? "]}," RSpec Mocks VerifyingMessageExpectation with":{"type":"method","name":"with","children":[],"call":[" validate_arguments! ","args length > ","args length ","ArgumentMatchers NoArgsMatcher  === ","args first ","ArgumentMatchers AnyArgsMatcher  === "," ensure_arity! "," validate_expected_arguments! ","@argument_list_matcher resolve_expected_args_based_on ","example_call_site_args << ","signature required_kw_args any? ","signature required_kw_args ","(sym :an_arg) * ","signature min_non_kw_args ","(splat\n  (lvar :args)) tap ","(sym :an_arg) *  << "]}," RSpec Mocks VerifyingMessageExpectation initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks ObjectVerifyingDoubleMethods as_stubbed_const":{"type":"method","name":"as_stubbed_const","children":[],"call":["ConstantMutator  stub ","@doubled_module const_to_replace "]}," RSpec Mocks ObjectVerifyingDoubleMethods __build_mock_proxy":{"type":"method","name":"__build_mock_proxy","children":[],"call":["VerifyingProxy  new "]}," RSpec Mocks ObjectVerifyingDoubleMethods initialize":{"type":"method","name":"initialize","children":[],"call":["doubled_module description "," __initialize_as_test_double "]}," RSpec Mocks InstanceVerifyingDouble __build_mock_proxy":{"type":"method","name":"__build_mock_proxy","children":[],"call":["VerifyingProxy  new "]}," RSpec Mocks InstanceVerifyingDouble initialize":{"type":"method","name":"initialize","children":[],"call":["doubled_module description "," __initialize_as_test_double "]}," RSpec Mocks VerifyingDouble initialize":{"type":"method","name":"initialize","children":[],"call":["args shift ","Symbol  === ","String  === ","args first "]}," RSpec Mocks VerifyingDouble send":{"type":"method","name":"send","children":[],"call":[" __send__ "]}," RSpec Mocks VerifyingDouble __send__":{"type":"method","name":"__send__","children":[],"call":[]}," RSpec Mocks VerifyingDouble method_missing":{"type":"method","name":"method_missing","children":[],"call":[" __mock_proxy ensure_publicly_implemented "," __mock_proxy "," __mock_proxy ensure_implemented ","@__sending_message == "," null_object? "," __mock_proxy validate_arguments! "]}," RSpec Mocks VerifyingDouble respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["method_ref unimplemented? ! ","method_ref unimplemented? ","RUBY_VERSION  to_f < ","RUBY_VERSION  to_f ","method_ref visibility "," __mock_proxy method_reference [] "," __mock_proxy method_reference "," __mock_proxy "," null_object? "," __mock_proxy method_reference []  unimplemented? ! "," __mock_proxy method_reference []  unimplemented? "," __mock_proxy method_reference []  visibility "," __mock_proxy  __mock_proxy method_reference [] erence [] "," __mock_proxy  __mock_proxy method_reference [] erence "]}," RSpec Mocks TestDouble __raise_expired_error":{"type":"method","name":"__raise_expired_error","children":[],"call":["ErrorGenerator  new raise_expired_test_double_error ","ErrorGenerator  new "]}," RSpec Mocks TestDouble __disallow_further_usage!":{"type":"method","name":"__disallow_further_usage!","children":[],"call":[]}," RSpec Mocks TargetBase raise_negation_unsupported":{"type":"method","name":"raise_negation_unsupported","children":[],"call":[" raise ","(str \"`\") + ","matcher name "," expression "]}," RSpec Mocks TargetBase raise_unsupported_matcher":{"type":"method","name":"raise_unsupported_matcher","children":[],"call":[" raise ","only the `receive` or `receive_messages` matchers are supported  + "," expression "]}," RSpec Mocks TargetBase define_matcher":{"type":"method","name":"define_matcher","children":[],"call":["matcher __send__ "]}," RSpec Mocks TargetBase matcher_allowed?":{"type":"method","name":"matcher_allowed?","children":[],"call":["matcher class name start_with? ","RSpec::Mocks::Matchers freeze ","matcher class name ","matcher class ","ALLOWED_MATCHERS  include? ","Matchers Matcher  === "]}," RSpec Mocks TargetBase delegate_not_to":{"type":"method","name":"delegate_not_to","children":[],"call":[]}," RSpec Mocks Syntax warn_unless_should_configured":{"type":"method","name":"warn_unless_should_configured","children":[],"call":[]}," RSpec Mocks Syntax warn_about_should!":{"type":"method","name":"warn_about_should!","children":[],"call":[]}," RSpec Mocks NestedSpace any_instance_recorder_not_found_for":{"type":"method","name":"any_instance_recorder_not_found_for","children":[],"call":["@parent any_instance_recorders [] ","@parent any_instance_recorders "]}," RSpec Mocks NestedSpace proxy_not_found_for":{"type":"method","name":"proxy_not_found_for","children":[],"call":["@parent proxies [] ","@parent proxies "]}," RSpec Mocks NestedSpace registered?":{"type":"method","name":"registered?","children":[],"call":["@parent registered? "]}," RSpec Mocks NestedSpace constant_mutator_for":{"type":"method","name":"constant_mutator_for","children":[],"call":["@parent constant_mutator_for "]}," RSpec Mocks NestedSpace proxies_of":{"type":"method","name":"proxies_of","children":[],"call":[" + ","@parent proxies_of "]}," RSpec Mocks NestedSpace initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks Space any_instance_recorder_not_found_for":{"type":"method","name":"any_instance_recorder_not_found_for","children":[],"call":[" any_instance_recorders []= ","AnyInstance Recorder  new "," any_instance_recorders "]}," RSpec Mocks Space proxy_not_found_for":{"type":"method","name":"proxy_not_found_for","children":[],"call":[" proxies []= ","PartialDoubleProxy  new ","VerifyingPartialDoubleProxy  new ","RSpec Mocks  configuration verify_partial_doubles? ","RSpec Mocks  configuration ","PartialClassDoubleProxy  new ","VerifyingPartialClassDoubleProxy  new ","object __build_mock_proxy ","ProxyForNil  new "," proxies ","object __build_mock_proxy_unless_expired "," class_proxy_with_callback_verification_strategy ","CallbackInvocationStrategy  new "]}," RSpec Mocks Space FakeMutex synchronize":{"type":"method","name":"synchronize","children":[],"call":[]}," RSpec Mocks Space new_mutex":{"type":"method","name":"new_mutex","children":[],"call":[" Mutex  new ","Support ReentrantMutex  new ","Mocks ReentrantMutex  new "]}," RSpec Mocks Space any_instance_recorders_from_ancestry_of":{"type":"method","name":"any_instance_recorders_from_ancestry_of","children":[],"call":["(send\n  (begin\n    (sclass\n      (lvar :object)\n      (send nil :ancestors))) :map) compact "," any_instance_recorders [] ","klass __id__ "," any_instance_recorders ","(sclass\n  (lvar :object)\n  (send nil :ancestors)) map "," ancestors "," any_instance_recorders empty? ","(send\n  (send\n    (send\n      (lvar :object) :class) :ancestors) :map) compact ","object class ancestors map ","object class ancestors ","object class "]}," RSpec Mocks Space any_instance_proxy_for":{"type":"method","name":"any_instance_proxy_for","children":[],"call":["AnyInstance Proxy  new "," proxies_of "," any_instance_recorder_for "]}," RSpec Mocks Space constant_mutator_for":{"type":"method","name":"constant_mutator_for","children":[],"call":["m full_constant_name == ","m full_constant_name ","@constant_mutators find "]}," RSpec Mocks Space register_constant_mutator":{"type":"method","name":"register_constant_mutator","children":[],"call":["@constant_mutators << "]}," RSpec Mocks Space new_scope":{"type":"method","name":"new_scope","children":[],"call":["NestedSpace  new "]}," RSpec Mocks RootSpace raise_lifecycle_message":{"type":"method","name":"raise_lifecycle_message","children":[],"call":[" raise "]}," RSpec Mocks RootSpace new_scope":{"type":"method","name":"new_scope","children":[],"call":["Space  new "]}," RSpec Mocks RootSpace registered?":{"type":"method","name":"registered?","children":[],"call":[]}," RSpec Mocks RootSpace verify_all":{"type":"method","name":"verify_all","children":[],"call":[]}," RSpec Mocks RootSpace reset_all":{"type":"method","name":"reset_all","children":[],"call":[]}," RSpec Mocks RootSpace any_instance_recorders_from_ancestry_of":{"type":"method","name":"any_instance_recorders_from_ancestry_of","children":[],"call":[" raise_lifecycle_message "]}," RSpec Mocks RootSpace register_constant_mutator":{"type":"method","name":"register_constant_mutator","children":[],"call":[" raise_lifecycle_message "]}," RSpec Mocks RootSpace any_instance_proxy_for":{"type":"method","name":"any_instance_proxy_for","children":[],"call":[" raise_lifecycle_message "]}," RSpec Mocks RootSpace any_instance_recorder_for":{"type":"method","name":"any_instance_recorder_for","children":[],"call":[" raise_lifecycle_message "]}," RSpec Mocks RootSpace proxy_for":{"type":"method","name":"proxy_for","children":[],"call":[" raise_lifecycle_message "]}," RSpec Mocks PartialClassDoubleProxyMethods superclass_proxy":{"type":"method","name":"superclass_proxy","children":[],"call":["@source_space proxy_for "," object superclass "," object ","@source_space superclass_proxy_for "," object  object superclass  ","@source_space  object superclass _proxy_for "]}," RSpec Mocks PartialClassDoubleProxyMethods original_unbound_method_handle_from_ancestor_for":{"type":"method","name":"original_unbound_method_handle_from_ancestor_for","children":[],"call":["method_double original_method unbind ","method_double original_method "," superclass_proxy original_unbound_method_handle_from_ancestor_for "," superclass_proxy ","@method_doubles fetch ","double original_method unbind ","double original_method "," method_double_from_ancestor_for ","method_ method_double_from_ancestor_for  original_method unbind ","method_ method_double_from_ancestor_for  original_method ","@method_ method_double_from_ancestor_for s fetch "," method_double_from_ancestor_for  original_method unbind "," method_double_from_ancestor_for  original_method "," method_ method_double_from_ancestor_for _from_ancestor_for "]}," RSpec Mocks PartialClassDoubleProxyMethods original_method_handle_for":{"type":"method","name":"original_method_handle_for","children":[],"call":["unbound_method bind "," object "," superclass_proxy original_unbound_method_handle_from_ancestor_for ","message to_sym "," superclass_proxy "," raise "," object method ","double method_stasher stashed_method_name ","double method_stasher "," method_double_from_ancestor_for ","unbound_method owner ancestors first != ","unbound_method owner ","unbound_method owner ancestors first ","unbound_method owner ancestors ","RUBY_VERSION  == "," method_double_from_ancestor_for  method_stasher stashed_method_name "," method_double_from_ancestor_for  method_stasher "," method_ method_double_from_ancestor_for _from_ancestor_for "]}," RSpec Mocks PartialClassDoubleProxyMethods initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks PartialDoubleProxy any_instance_class_recorder_observing_method?":{"type":"method","name":"any_instance_class_recorder_observing_method?","children":[],"call":[" any_instance_class_recorder_observing_method? ","superklass nil? ","klass superclass ","recorder already_observing? "," RSpec Mocks  space any_instance_recorder_for "," RSpec Mocks  space "," RSpec Mocks  space any_instance_recorder_for already_observing? "," any_instance_class_ RSpec Mocks  space any_instance_recorder_for _observing_method? ","klass superclass  nil? "," RSpec Mocks  space any_instance_recorder_for  already_observing? "," RSpec Mocks  space any_instance_ RSpec Mocks  space any_instance_recorder_for _for "," RSpec Mocks  space any_instance_ RSpec Mocks  space any_instance_recorder_for _for already_observing? "]}," RSpec Mocks PartialDoubleProxy message_received":{"type":"method","name":"message_received","children":[],"call":["subscriber notify_received_message "," object ","RSpec Mocks  space any_instance_recorders_from_ancestry_of each ","RSpec Mocks  space any_instance_recorders_from_ancestry_of ","RSpec Mocks  space "]}," RSpec Mocks PartialDoubleProxy reset":{"type":"method","name":"reset","children":[],"call":["d reset ","@method_doubles each_value "]}," RSpec Mocks PartialDoubleProxy visibility_for":{"type":"method","name":"visibility_for","children":[],"call":["MethodReference  method_visibility_for "]}," RSpec Mocks PartialDoubleProxy add_simple_stub":{"type":"method","name":"add_simple_stub","children":[],"call":[" method_double_for configure_method "," method_double_for "]}," RSpec Mocks PartialDoubleProxy add_simple_expectation":{"type":"method","name":"add_simple_expectation","children":[],"call":[" method_double_for configure_method "," method_double_for "]}," RSpec Mocks PartialDoubleProxy original_method_handle_for":{"type":"method","name":"original_method_handle_for","children":[],"call":[" RSpec Support  method_handle_for "," RSpec Mocks  space any_instance_recorder_for build_alias_method_name "," RSpec Mocks  space any_instance_recorder_for ","@object class "," RSpec Mocks  space "," any_instance_class_recorder_observing_method? "]}," RSpec Mocks Proxy method_double_for":{"type":"method","name":"method_double_for","children":[],"call":["@method_doubles [] ","message to_sym "]}," RSpec Mocks Proxy prepended_modules_of_singleton_class":{"type":"method","name":"prepended_modules_of_singleton_class","children":[],"call":["(or\n  (send\n    (const nil :Class) :===\n    (lvar :mod))\n  (send\n    (ivar :@object) :equal?\n    (lvar :mod))) ! ","@object equal? ","Class  === ","singleton_class ancestors take_while ","singleton_class ancestors ","@object singleton_class ","(send\n  (const nil :Class) :===\n  (lvar :mod)) ! ","ancestors [] ","ancestors index ","RSpec Mocks Proxy  prepended_modules_of ","@object singleton_class  ancestors take_while ","singleton_class singleton_class ancestors  take_while ","@object singleton_class  ancestors ","singleton_class singleton_class ancestors  ","@object @object singleton_class  ","singleton_class ancestors  [] ","singleton_class ancestors  index "]}," RSpec Mocks Proxy visibility_for":{"type":"method","name":"visibility_for","children":[],"call":[]}," RSpec Mocks Proxy remove_stub_if_present":{"type":"method","name":"remove_stub_if_present","children":[],"call":[" method_double_for remove_stub_if_present "," method_double_for "]}," RSpec Mocks Proxy add_simple_stub":{"type":"method","name":"add_simple_stub","children":[],"call":[" method_double_for add_simple_stub "," method_double_for "]}," RSpec Mocks Proxy add_simple_expectation":{"type":"method","name":"add_simple_expectation","children":[],"call":[" method_double_for add_simple_expectation "," method_double_for "]}," RSpec Mocks Proxy original_method_handle_for":{"type":"method","name":"original_method_handle_for","children":[],"call":[]}," RSpec Mocks Proxy ==":{"type":"method","name":"==","children":[],"call":["expectation matches? "," args "," message ","expectation orig_object == "," object ","expectation orig_object ","expectation message == ","expectation message "]}," RSpec Mocks OrderGroup expectation_for":{"type":"method","name":"expectation_for","children":[],"call":["message == ","@expectations find "]}," RSpec Mocks OrderGroup expected_invocations":{"type":"method","name":"expected_invocations","children":[],"call":["(send\n  (ivar :@invocation_order) :map) compact "," expectation_for ","@invocation_order map "]}," RSpec Mocks OrderGroup invoked_expectations":{"type":"method","name":"invoked_expectations","children":[],"call":["@invocation_order include? ","e ordered? ","@expectations select "]}," RSpec Mocks OrderGroup expectations_invoked_in_order?":{"type":"method","name":"expectations_invoked_in_order?","children":[],"call":[" invoked_expectations == "," expected_invocations "," invoked_expectations "]}," RSpec Mocks OrderGroup remaining_expectations":{"type":"method","name":"remaining_expectations","children":[],"call":["@expectations [] "]}," RSpec Mocks OrderGroup verify_invocation_order":{"type":"method","name":"verify_invocation_order","children":[],"call":["expectation raise_out_of_order_error "," expectations_invoked_in_order? "]}," RSpec Mocks OrderGroup invoked":{"type":"method","name":"invoked","children":[],"call":["@invocation_order << "]}," RSpec Mocks NamedObjectReference object":{"type":"method","name":"object","children":[],"call":["Constant  original original_value ","Constant  original "]}," RSpec Mocks NamedObjectReference when_loaded":{"type":"method","name":"when_loaded","children":[],"call":[" object "]}," RSpec Mocks NamedObjectReference const_to_replace":{"type":"method","name":"const_to_replace","children":[],"call":[]}," RSpec Mocks NamedObjectReference defined?":{"type":"method","name":"defined?","children":[],"call":[" object ! ! "," object ! "," object "]}," RSpec Mocks NamedObjectReference initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks DirectModuleReference const_to_replace":{"type":"method","name":"const_to_replace","children":[],"call":["@object name "]}," RSpec Mocks DirectObjectReference when_loaded":{"type":"method","name":"when_loaded","children":[],"call":[]}," RSpec Mocks DirectObjectReference defined?":{"type":"method","name":"defined?","children":[],"call":[]}," RSpec Mocks DirectObjectReference const_to_replace":{"type":"method","name":"const_to_replace","children":[],"call":[" raise "]}," RSpec Mocks DirectObjectReference description":{"type":"method","name":"description","children":[],"call":["@object inspect "]}," RSpec Mocks DirectObjectReference initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks ObjectReference for":{"type":"method","name":"for","children":[],"call":[]}," RSpec Mocks ConstantMutator UndefinedConstantSetter name_for":{"type":"method","name":"name_for","children":[],"call":["root + + ","root + ","parent name ","parent == ","parent name  + + ","parent name  + "]}," RSpec Mocks ConstantMutator UndefinedConstantSetter reset":{"type":"method","name":"reset","children":[],"call":["@parent __send__ "]}," RSpec Mocks ConstantMutator DefinedConstantReplacer should_transfer_nested_constants?":{"type":"method","name":"should_transfer_nested_constants?","children":[],"call":["@mutated_value respond_to? ","@original_value respond_to? ","RSpec Mocks  configuration transfer_nested_constants? ","RSpec Mocks  configuration "]}," RSpec Mocks ConstantMutator DefinedConstantReplacer reset":{"type":"method","name":"reset","children":[],"call":["@context const_set ","@context __send__ ","@mutated_value __send__ ","@constants_to_transfer each "]}," RSpec Mocks ConstantMutator DefinedConstantReplacer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks ConstantMutator ConstantHider reset":{"type":"method","name":"reset","children":[],"call":["@context const_set "]}," RSpec Mocks ConstantMutator BaseMutator idempotently_reset":{"type":"method","name":"idempotently_reset","children":[],"call":[" reset "]}," RSpec Mocks ObjectMethodReference visibility_from":{"type":"method","name":"visibility_from","children":[],"call":["MethodReference  method_visibility_for "]}," RSpec Mocks ObjectMethodReference find_method":{"type":"method","name":"find_method","children":[],"call":["object method ","m method "]}," RSpec Mocks ObjectMethodReference method_defined?":{"type":"method","name":"method_defined?","children":[],"call":["(sclass\n  (lvar :object)\n  (self)) method_defined? ","(sclass\n  (lvar :m)\n  (self)) method_defined? "]}," RSpec Mocks ObjectMethodReference method_implemented?":{"type":"method","name":"method_implemented?","children":[],"call":["object respond_to? ","m respond_to? "]}," RSpec Mocks InstanceMethodReference visibility_from":{"type":"method","name":"visibility_from","children":[],"call":["MethodReference  instance_method_visibility_for "]}," RSpec Mocks InstanceMethodReference find_method":{"type":"method","name":"find_method","children":[],"call":["mod instance_method ","mod dup instance_method ","mod dup ","m instance_method ","m dup instance_method ","m dup "]}," RSpec Mocks InstanceMethodReference method_implemented?":{"type":"method","name":"method_implemented?","children":[],"call":["MethodReference  method_defined_at_any_visibility? ","m method_defined? "]}," RSpec Mocks MethodReference method_visibility_for":{"type":"method","name":"method_visibility_for","children":[],"call":[]}," RSpec Mocks MethodReference instance_method_visibility_for":{"type":"method","name":"instance_method_visibility_for","children":[],"call":[]}," RSpec Mocks MethodReference original_method":{"type":"method","name":"original_method","children":[],"call":[" find_method "," defined? ","@object_reference when_loaded ","@module_reference when_loaded "]}," RSpec Mocks MethodReference visibility":{"type":"method","name":"visibility","children":[],"call":[" visibility_from ","@object_reference when_loaded "]}," RSpec Mocks MethodReference with_signature":{"type":"method","name":"with_signature","children":[],"call":["Support MethodSignature  new "," original_method ","MethodSignature  new ","  original_method _method "]}," RSpec Mocks MethodReference defined?":{"type":"method","name":"defined?","children":[],"call":[" method_defined? ","@object_reference when_loaded ","@module_reference when_loaded "]}," RSpec Mocks MethodReference unimplemented?":{"type":"method","name":"unimplemented?","children":[],"call":[" implemented? ! "," implemented? ","@object_reference when_loaded "]}," RSpec Mocks MethodReference implemented?":{"type":"method","name":"implemented?","children":[],"call":[" method_implemented? ","@object_reference when_loaded ","@module_reference when_loaded "]}," RSpec Mocks MethodReference initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks MethodDouble definition_target":{"type":"method","name":"definition_target","children":[],"call":[" object_singleton_class "," usable_rspec_prepended_module "]}," RSpec Mocks MethodDouble new_rspec_prepended_module":{"type":"method","name":"new_rspec_prepended_module","children":[],"call":[" object_singleton_class __send__ "," object_singleton_class ","RSpecPrependedModule  new tap ","RSpecPrependedModule  new "]}," RSpec Mocks MethodDouble usable_rspec_prepended_module":{"type":"method","name":"usable_rspec_prepended_module","children":[],"call":[" new_rspec_prepended_module ","mod method_defined? "," method_name ","RSpecPrependedModule  === ","@proxy prepended_modules_of_singleton_class each ","@proxy prepended_modules_of_singleton_class "]}," RSpec Mocks MethodDouble remove_stub_if_present":{"type":"method","name":"remove_stub_if_present","children":[],"call":[" stubs clear "," stubs "," reset "," expectations empty? "," expectations "]}," RSpec Mocks MethodDouble setup_simple_method_double":{"type":"method","name":"setup_simple_method_double","children":[],"call":["collection unshift ","SimpleMessageExpectation  new "," define_proxy_method "," define_proxy_SimpleMessageExpectation  new thod "]}," RSpec Mocks MethodDouble add_simple_expectation":{"type":"method","name":"add_simple_expectation","children":[],"call":[" setup_simple_method_double "," expectations "]}," RSpec Mocks MethodDouble add_simple_stub":{"type":"method","name":"add_simple_stub","children":[],"call":[" setup_simple_method_double "," stubs "]}," RSpec Mocks MethodDouble message_expectation_class":{"type":"method","name":"message_expectation_class","children":[],"call":[]}," RSpec Mocks MethodDouble show_frozen_warning":{"type":"method","name":"show_frozen_warning","children":[],"call":["RSpec  warn_with ","@object inspect "]}," RSpec Mocks MethodDouble proxy_method_invoked":{"type":"method","name":"proxy_method_invoked","children":[],"call":["@proxy message_received "," method_name "]}," RSpec Mocks InsertOntoBacktrace line":{"type":"method","name":"line","children":[],"call":[]}," RSpec Mocks AndCallOriginalImplementation inner_action":{"type":"method","name":"inner_action","children":[],"call":[]}," RSpec Mocks MessageExpectation warn_about_stub_override":{"type":"method","name":"warn_about_stub_override","children":[],"call":["RSpec  warning ","(str \"You're overriding a previous stub implementation of `\") + ","CallerFilter  first_non_rspec_line "]}," RSpec Mocks MessageExpectation invoke_incrementing_actual_calls_by":{"type":"method","name":"invoke_incrementing_actual_calls_by","children":[],"call":["parent_stub invoke "," implementation call "," implementation "," implementation present? ","@order_group handle_order_constraint ","@error_generator raise_expectation_error "," expectation_count_type ","@actual_received_count == "," negative? ","args unshift "," orig_object "," yield_receiver_to_implementation_block? "]}," RSpec Mocks MessageExpectation ordered?":{"type":"method","name":"ordered?","children":[],"call":[]}," RSpec Mocks MessageExpectation ensure_expected_ordering_received!":{"type":"method","name":"ensure_expected_ordering_received!","children":[],"call":["@order_group verify_invocation_order "]}," RSpec Mocks MessageExpectation invoke_without_incrementing_received_count":{"type":"method","name":"invoke_without_incrementing_received_count","children":[],"call":[" invoke_incrementing_actual_calls_by "]}," RSpec Mocks SimpleMessageExpectation verify_messages_received":{"type":"method","name":"verify_messages_received","children":[],"call":["@error_generator raise_expectation_error ","InsertOntoBacktrace  line "]}," RSpec Mocks SimpleMessageExpectation called_max_times?":{"type":"method","name":"called_max_times?","children":[],"call":[]}," RSpec Mocks SimpleMessageExpectation matches?":{"type":"method","name":"matches?","children":[],"call":["@message == ","message to_sym "]}," RSpec Mocks SimpleMessageExpectation invoke":{"type":"method","name":"invoke","children":[],"call":[]}," RSpec Mocks SimpleMessageExpectation initialize":{"type":"method","name":"initialize","children":[],"call":["message to_sym "]}," RSpec Mocks StubChain expectation":{"type":"method","name":"expectation","children":[],"call":[" RSpec Mocks  allow_message "]}," RSpec Mocks ExpectChain expectation":{"type":"method","name":"expectation","children":[],"call":[" RSpec Mocks  expect_message "]}," RSpec Mocks ExpectChain expect_chain_on":{"type":"method","name":"expect_chain_on","children":[],"call":[]}," RSpec Mocks MessageChain find_matching_expectation":{"type":"method","name":"find_matching_expectation","children":[],"call":[" RSpec Mocks  space proxy_for __send__ "," chain first to_sym "," chain first "," chain "," RSpec Mocks  space proxy_for "," object "," RSpec Mocks  space "]}," RSpec Mocks MessageChain find_matching_stub":{"type":"method","name":"find_matching_stub","children":[],"call":[" RSpec Mocks  space proxy_for __send__ "," chain first to_sym "," chain first "," chain "," RSpec Mocks  space proxy_for "," object "," RSpec Mocks  space "]}," RSpec Mocks MessageChain format_chain":{"type":"method","name":"format_chain","children":[],"call":["chain join split ","chain join ","Proc  new ","chain << ","hash each ","chain pop ","Hash  === ","chain last ","chain pop  each "]}," RSpec Mocks MessageChain chain_on":{"type":"method","name":"chain_on","children":[],"call":[" setup_chain "," initialize "]}," RSpec Mocks MessageChain expectation":{"type":"method","name":"expectation","children":[],"call":[" raise ","NotImplementedError  new "]}," RSpec Mocks MessageChain setup_chain":{"type":"method","name":"setup_chain","children":[],"call":[" expectation "," chain shift "," chain "," object "," chain_on ","Double  new ","matching_expectation invoke_without_incrementing_received_count "," find_matching_expectation ","matching_stub invoke "," find_matching_stub "," chain length > "," chain length "," RSpec Mocks  allow_message "," block "," find_matching_expectation  invoke_without_incrementing_received_count "," find_ find_matching_expectation  "," find_matching_stub  invoke "," find_ find_matching_stub  "]}," RSpec Mocks MessageChain initialize":{"type":"method","name":"initialize","children":[],"call":[" format_chain "]}," RSpec Mocks Matchers ReceiveMessages each_message_on":{"type":"method","name":"each_message_on","children":[],"call":["@message_return_value_hash each "]}," RSpec Mocks Matchers ReceiveMessages any_instance_of":{"type":"method","name":"any_instance_of","children":[],"call":[" RSpec Mocks  space any_instance_proxy_for "," RSpec Mocks  space "," RSpec Mocks  any_instance_recorder_for "," RSpec Mocks  space any_instance_recorder_for "]}," RSpec Mocks Matchers ReceiveMessages proxy_on":{"type":"method","name":"proxy_on","children":[],"call":[" RSpec Mocks  space proxy_for "," RSpec Mocks  space "," RSpec Mocks  proxy_for "]}," RSpec Mocks Matchers ReceiveMessages warn_about_block":{"type":"method","name":"warn_about_block","children":[],"call":[" raise "]}," RSpec Mocks Matchers ReceiveMessages setup_any_instance_allowance":{"type":"method","name":"setup_any_instance_allowance","children":[],"call":[" any_instance_of stub "," any_instance_of "," warn_about_block "," block_given? "]}," RSpec Mocks Matchers ReceiveMessages setup_any_instance_expectation":{"type":"method","name":"setup_any_instance_expectation","children":[],"call":["host should_receive and_return ","host should_receive "," each_message_on "," any_instance_of "," warn_about_block "," block_given? "]}," RSpec Mocks Matchers ReceiveMessages setup_allowance":{"type":"method","name":"setup_allowance","children":[],"call":["host add_simple_stub "," each_message_on "," proxy_on "," warn_about_block "," block_given? "]}," RSpec Mocks Matchers ReceiveMessages setup_negative_expectation":{"type":"method","name":"setup_negative_expectation","children":[],"call":[" raise ","`expect(...).to_not receive_messages` is not supported since it  + "]}," RSpec Mocks Matchers ReceiveMessages setup_expectation":{"type":"method","name":"setup_expectation","children":[],"call":["host add_simple_expectation "," each_message_on "," proxy_on "," warn_about_block "," block_given? "]}," RSpec Mocks Matchers ReceiveMessages name":{"type":"method","name":"name","children":[],"call":[]}," RSpec Mocks Matchers ReceiveMessages initialize":{"type":"method","name":"initialize","children":[],"call":["CallerFilter  first_non_rspec_line "]}," RSpec Mocks Matchers ReceiveMessageChain replay_customizations":{"type":"method","name":"replay_customizations","children":[],"call":["customization playback_onto ","@recorded_customizations each "]}," RSpec Mocks Matchers ReceiveMessageChain setup_negative_expectation":{"type":"method","name":"setup_negative_expectation","children":[],"call":[" raise ","NegationUnsupportedError  new ","`expect(...).not_to receive_message_chain` is not supported  + "]}," RSpec Mocks Matchers ReceiveMessageChain setup_expectation":{"type":"method","name":"setup_expectation","children":[],"call":[" replay_customizations ","ExpectChain  expect_chain_on ","ExpectChain  expect_ExpectChain  expect_chain_on _on "]}," RSpec Mocks Matchers ReceiveMessageChain setup_any_instance_expectation":{"type":"method","name":"setup_any_instance_expectation","children":[],"call":[" replay_customizations ","proxy expect_chain "," RSpec Mocks  space any_instance_proxy_for "," RSpec Mocks  space ","recorder expect_chain "," RSpec Mocks  space any_instance_recorder_for ","proxy expect_proxy expect_chain  ","proxy expect_recorder expect_chain  "," RSpec Mocks  space any_instance_proxy_for  expect_chain "," RSpec Mocks  space any_instance_ RSpec Mocks  space any_instance_proxy_for _for ","recorder expect_proxy expect_chain  ","recorder expect_recorder expect_chain  "," RSpec Mocks  space any_instance_recorder_for  expect_chain "," RSpec Mocks  space any_instance_ RSpec Mocks  space any_instance_recorder_for _for "]}," RSpec Mocks Matchers ReceiveMessageChain setup_any_instance_allowance":{"type":"method","name":"setup_any_instance_allowance","children":[],"call":[" replay_customizations ","proxy stub_chain "," RSpec Mocks  space any_instance_proxy_for "," RSpec Mocks  space ","recorder stub_chain "," RSpec Mocks  space any_instance_recorder_for ","proxy stub_proxy stub_chain  ","proxy stub_recorder stub_chain  "," RSpec Mocks  space any_instance_proxy_for  stub_chain "," RSpec Mocks  space any_instance_ RSpec Mocks  space any_instance_proxy_for _for ","recorder stub_proxy stub_chain  ","recorder stub_recorder stub_chain  "," RSpec Mocks  space any_instance_recorder_for  stub_chain "," RSpec Mocks  space any_instance_ RSpec Mocks  space any_instance_recorder_for _for "]}," RSpec Mocks Matchers ReceiveMessageChain setup_allowance":{"type":"method","name":"setup_allowance","children":[],"call":[" replay_customizations ","StubChain  stub_chain_on ","StubChain  stub_StubChain  stub_chain_on _on "]}," RSpec Mocks Matchers ReceiveMessageChain name":{"type":"method","name":"name","children":[],"call":[]}," RSpec Mocks Matchers ReceiveMessageChain initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks Matchers Receive move_block_to_last_customization":{"type":"method","name":"move_block_to_last_customization","children":[],"call":["last block ","@recorded_customizations last ","@recorded_customizations last  block ","@recorded_customizations @recorded_customizations last  "]}," RSpec Mocks Matchers Receive warn_if_any_instance":{"type":"method","name":"warn_if_any_instance","children":[],"call":["RSpec  warning ","(str \"`\") << << << ","subject klass ","(str \"`\") << << ","(str \"`\") << ","AnyInstance Proxy  === ","AnyInstance Recorder  === "]}," RSpec Mocks Matchers Receive name":{"type":"method","name":"name","children":[],"call":[]}," RSpec Mocks Matchers HaveReceived expected_messages_received_in_order?":{"type":"method","name":"expected_messages_received_in_order?","children":[],"call":["@expectation ensure_expected_ordering_received! ","@expectation expected_messages_received? "," mock_proxy replay_received_message_on "," mock_proxy "]}," RSpec Mocks Matchers HaveReceived failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[" generate_failure_message "," capture_failure_message "]}," RSpec Mocks Matchers HaveReceived name":{"type":"method","name":"name","children":[],"call":[]}," RSpec Mocks Matchers ExpectationCustomization playback_onto":{"type":"method","name":"playback_onto","children":[],"call":["expectation __send__ "]}," RSpec Mocks Matchers ExpectationCustomization initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks MarshalExtension unpatch!":{"type":"method","name":"unpatch!","children":[],"call":[]}," RSpec Mocks MarshalExtension patch!":{"type":"method","name":"patch!","children":[{"type":"method","name":"dump_with_rspec_mocks","children":[],"asgn":[],"call":[" dump_without_rspec_mocks ","object dup "," dump_without_rspec_mocks ","NilClass  === "," RSpec Mocks  space registered? ! "," RSpec Mocks  space registered? "," RSpec Mocks  space "]}],"call":[]}," RSpec Mocks InstanceMethodStasher handle_restoration_failures":{"type":"method","name":"handle_restoration_failures","children":[],"call":["RSpec  warn_with ","(str \"RSpec failed to properly restore a partial double (\") + + + ","(str \"RSpec failed to properly restore a partial double (\") + + ","(str \"RSpec failed to properly restore a partial double (\") + ","@object inspect "]}," RSpec Mocks ExampleMethods declare_verifying_double":{"type":"method","name":"declare_verifying_double","children":[],"call":[" declare_double "," raise ","(begin\n  (send\n    (lvar :ref) :name)) + + ","(begin\n  (send\n    (lvar :ref) :name)) + ","ref name ","ref defined? ! ","ref defined? ","RSpec Mocks  configuration verify_doubled_constant_names? ","RSpec Mocks  configuration "]}," RSpec Mocks ExampleMethods object_double":{"type":"method","name":"object_double","children":[],"call":["ExampleMethods  declare_verifying_double ","ObjectReference  for "," declare_verifying_double "]}," RSpec Mocks ExampleMethods class_double":{"type":"method","name":"class_double","children":[],"call":["ExampleMethods  declare_verifying_double ","ObjectReference  for "," declare_verifying_double "]}," RSpec Mocks ExampleMethods instance_double":{"type":"method","name":"instance_double","children":[],"call":["ExampleMethods  declare_verifying_double ","ObjectReference  for "," declare_verifying_double "]}," RSpec Mocks ErrorGenerator times":{"type":"method","name":"times","children":[],"call":["count == "]}," RSpec Mocks ErrorGenerator arg_has_valid_description":{"type":"method","name":"arg_has_valid_description","children":[],"call":["arg description empty? ! ","arg description empty? ","arg description ","arg description nil? ! ","arg description nil? ","arg respond_to? "]}," RSpec Mocks ErrorGenerator raise_only_valid_on_a_partial_double":{"type":"method","name":"raise_only_valid_on_a_partial_double","children":[],"call":[" __raise ","(begin\n  (send nil :intro)) + "," intro "]}," RSpec Mocks ErrorGenerator expected_method_call_args_description":{"type":"method","name":"expected_method_call_args_description","children":[],"call":[" format_args ","args length > ","args length "," method_call_args_description "]}," RSpec Mocks ErrorGenerator actual_method_call_args_description":{"type":"method","name":"actual_method_call_args_description","children":[],"call":["args inspect gsub ","args inspect ","args length > ","args length ","count > "," method_call_args_description "]}," RSpec Mocks ErrorGenerator raise_expired_test_double_error":{"type":"method","name":"raise_expired_test_double_error","children":[],"call":[" raise ","(begin\n  (send nil :intro)) + + + ","(begin\n  (send nil :intro)) + + ","(begin\n  (send nil :intro)) + "," intro "]}," RSpec Mocks ErrorGenerator raise_invalid_arguments_error":{"type":"method","name":"raise_invalid_arguments_error","children":[],"call":[" __raise ","verifier error_message "]}," RSpec Mocks ErrorGenerator raise_non_public_error":{"type":"method","name":"raise_non_public_error","children":[],"call":[" raise ","%s method `%s' called on %s % "," intro "]}," RSpec Mocks ErrorGenerator raise_unimplemented_error":{"type":"method","name":"raise_unimplemented_error","children":[],"call":[" __raise ","%s does not implement: %s % ","doubled_module description ","%s does not implement:\n  %s % ","message % ","the %s class does not implement the class method: %s dup << ","InstanceMethodReference  for implemented? ","InstanceMethodReference  for ","the %s class does not implement the class method: %s dup ","the %s class does not implement the instance method: %s dup << ","ObjectMethodReference  for implemented? ","ObjectMethodReference  for ","the %s class does not implement the instance method: %s dup ","the %s class does not implement the class method: %s << ","the %s class does not implement the instance method: %s << "]}," RSpec Mocks Configuration reset_syntaxes_to_default":{"type":"method","name":"reset_syntaxes_to_default","children":[],"call":["RSpec Mocks Syntax  warn_about_should! "," syntax= "]}," RSpec Mocks Configuration verify_partial_doubles?":{"type":"method","name":"verify_partial_doubles?","children":[],"call":[]}," RSpec Mocks Configuration verify_partial_doubles=":{"type":"method","name":"verify_partial_doubles=","children":[],"call":["val ! ! ","val ! "]}," RSpec Mocks Configuration transfer_nested_constants=":{"type":"method","name":"transfer_nested_constants=","children":[],"call":[]}," RSpec Mocks Configuration transfer_nested_constants?":{"type":"method","name":"transfer_nested_constants?","children":[],"call":["@transfer_nested_constants ! ! ","@transfer_nested_constants ! "]}," RSpec Mocks Configuration verify_doubled_constant_names=":{"type":"method","name":"verify_doubled_constant_names=","children":[],"call":[]}," RSpec Mocks Configuration verify_doubled_constant_names?":{"type":"method","name":"verify_doubled_constant_names?","children":[],"call":["@verify_doubled_constant_names ! ! ","@verify_doubled_constant_names ! "]}," RSpec Mocks ArgumentMatchers InstanceOf description":{"type":"method","name":"description","children":[],"call":["@klass name "]}," RSpec Mocks ArgumentMatchers InstanceOf ===":{"type":"method","name":"===","children":[],"call":["actual instance_of? "]}," RSpec Mocks ArgumentMatchers DuckTypeMatcher description":{"type":"method","name":"description","children":[],"call":["@methods_to_respond_to map join ","@methods_to_respond_to map "]}," RSpec Mocks ArgumentMatchers DuckTypeMatcher ===":{"type":"method","name":"===","children":[],"call":["value respond_to? ","@methods_to_respond_to all? "]}," RSpec Mocks ArgumentMatchers ArrayIncludingMatcher description":{"type":"method","name":"description","children":[],"call":["@expected join "," formatted_expected_values "]}," RSpec Mocks ArgumentMatchers ArrayIncludingMatcher ===":{"type":"method","name":"===","children":[],"call":["Set  new superset? ","Set  new ","RSpec Support FuzzyMatcher  values_match? ","actual any? ","@expected uniq all? ","@expected uniq ","actual uniq ","actual uniq  any? ","actual uniq  uniq "]}," RSpec Mocks ArgumentMatchers ArrayIncludingMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks ArgumentMatchers HashExcludingMatcher ===":{"type":"method","name":"===","children":[],"call":[]}," RSpec Mocks ArgumentMatchers HashIncludingMatcher ===":{"type":"method","name":"===","children":[],"call":[]}," RSpec Mocks ArgumentMatchers BaseHashMatcher description":{"type":"method","name":"description","children":[],"call":["@expected inspect sub sub ","@expected inspect sub ","@expected inspect "," formatted_expected_hash inspect sub sub "," formatted_expected_hash inspect sub "," formatted_expected_hash inspect "," formatted_expected_hash "]}," RSpec Mocks ArgumentMatchers BaseHashMatcher ===":{"type":"method","name":"===","children":[],"call":["Support FuzzyMatcher  values_match? ","actual [] ","actual has_key? ","@expected __send__ ","actual key? "]}," RSpec Mocks ArgumentMatchers BaseHashMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks ArgumentMatchers BooleanMatcher description":{"type":"method","name":"description","children":[],"call":[]}," RSpec Mocks ArgumentMatchers BooleanMatcher ===":{"type":"method","name":"===","children":[],"call":[" == "]}," RSpec Mocks ArgumentMatchers AnyArgMatcher description":{"type":"method","name":"description","children":[],"call":[]}," RSpec Mocks ArgumentMatchers AnyArgMatcher ===":{"type":"method","name":"===","children":[],"call":[]}," RSpec Mocks ArgumentMatchers array_including":{"type":"method","name":"array_including","children":[],"call":["ArrayIncludingMatcher  new ","args first ","args count == ","args count ","Array  === "]}," RSpec Mocks AnyInstance Recorder allow_no_prepended_module_definition_of":{"type":"method","name":"allow_no_prepended_module_definition_of","children":[],"call":[" raise ","(str \"Using `any_instance` to stub a method (\") + ","mod method_defined? ","prepended_modules find ","(send\n  (const nil :Class) :===\n  (lvar :mod)) ! ","Class  === ","@klass ancestors take_while ","@klass ancestors ","RSpec Mocks Proxy  prepended_modules_of ","AnyInstance  error_generator raise_not_supported_with_prepend_error ","AnyInstance  error_generator ","RSpec Mocks Proxy  prepended_modules_of  find ","RSpec Mocks Proxy  RSpec Mocks Proxy  prepended_modules_of _of "]}," RSpec Mocks AnyInstance Recorder super_class_observing?":{"type":"method","name":"super_class_observing?","children":[],"call":["@klass ancestors any? "," ancestor_is_an_observer? ","@klass ancestors "]}," RSpec Mocks AnyInstance Recorder super_class_observers_for":{"type":"method","name":"super_class_observers_for","children":[],"call":["@klass ancestors select "," ancestor_is_an_observer? ","@klass ancestors "]}," RSpec Mocks AnyInstance Recorder ancestor_is_an_observer?":{"type":"method","name":"ancestor_is_an_observer?","children":[],"call":[" RSpec Mocks  space any_instance_recorder_for already_observing? "," RSpec Mocks  space any_instance_recorder_for "," RSpec Mocks  space ","ancestor == "," lambda "]}," RSpec Mocks AnyInstance Recorder notify_received_message":{"type":"method","name":"notify_received_message","children":[],"call":[" mark_invoked! "," restore_method! ","expectation expectation_fulfilled! "," message_chains each_unfulfilled_expectation_matching "," message_chains "]}," RSpec Mocks AnyInstance Recorder expect_chain":{"type":"method","name":"expect_chain","children":[],"call":[" message_chains add ","ExpectChainChain  new "," message_chains "," observe! "," normalize_chain "]}," RSpec Mocks AnyInstance FluentInterfaceProxy method_missing":{"type":"method","name":"method_missing","children":[],"call":["FluentInterfaceProxy  new ","t __send__ ","@targets map "]}," RSpec Mocks AnyInstance FluentInterfaceProxy respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["@targets first respond_to? ","@targets first "]}," RSpec Mocks AnyInstance FluentInterfaceProxy respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["@targets first respond_to? ","@targets first "]}," RSpec Mocks AnyInstance FluentInterfaceProxy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks AnyInstance Proxy perform_proxying":{"type":"method","name":"perform_proxying","children":[],"call":["FluentInterfaceProxy  new ","(lvar :recorder_value) + ","@target_proxies map ","@recorder __send__ ","(lvar :@recorder __send__ ) + "]}," RSpec Mocks AnyInstance Proxy should_not_receive":{"type":"method","name":"should_not_receive","children":[],"call":["proxy add_message_expectation never ","proxy add_message_expectation "," perform_proxying "," __method__ "]}," RSpec Mocks AnyInstance Proxy should_receive":{"type":"method","name":"should_receive","children":[],"call":["proxy add_message_expectation "," perform_proxying "," __method__ ","proxy add_stub "]}," RSpec Mocks AnyInstance Proxy expect_chain":{"type":"method","name":"expect_chain","children":[],"call":["Mocks ExpectChain  expect_chain_on ","proxy object "," perform_proxying "," __method__ "]}," RSpec Mocks AnyInstance Proxy stub_chain":{"type":"method","name":"stub_chain","children":[],"call":["Mocks StubChain  stub_chain_on ","proxy object "," perform_proxying "," __method__ "]}," RSpec Mocks AnyInstance Proxy unstub":{"type":"method","name":"unstub","children":[],"call":["proxy remove_stub_if_present "," perform_proxying "," __method__ "]}," RSpec Mocks AnyInstance Proxy stub":{"type":"method","name":"stub","children":[],"call":["proxy add_stub "," perform_proxying "," __method__ "," stub and_return "," stub ","method_name_or_method_map each ","Hash  === "]}," RSpec Mocks AnyInstance Proxy klass":{"type":"method","name":"klass","children":[],"call":["@recorder klass "]}," RSpec Mocks AnyInstance Proxy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks AnyInstance MessageChains each_unfulfilled_expectation_matching":{"type":"method","name":"each_unfulfilled_expectation_matching","children":[],"call":["chain matches_args? ","chain expectation_fulfilled? ! ","chain expectation_fulfilled? ","@chains_by_method_name [] each ","@chains_by_method_name [] "]}," RSpec Mocks AnyInstance MessageChains []":{"type":"method","name":"[]","children":[],"call":["@chains_by_method_name [] "]}," RSpec Mocks AnyInstance ExpectChainChain invocation_order":{"type":"method","name":"invocation_order","children":[],"call":[]}," RSpec Mocks AnyInstance ExpectChainChain create_message_expectation_on":{"type":"method","name":"create_message_expectation_on","children":[],"call":[" RSpec Mocks ExpectChain  expect_chain_on "]}," RSpec Mocks AnyInstance ExpectChainChain playback!":{"type":"method","name":"playback!","children":[],"call":[" tap "]}," RSpec Mocks AnyInstance ExpectChainChain expectation_fulfilled?":{"type":"method","name":"expectation_fulfilled?","children":[],"call":[]}," RSpec Mocks AnyInstance ExpectChainChain initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks AnyInstance Chain with":{"type":"method","name":"with","children":[],"call":["ArgumentListMatcher  new "]}," RSpec Mocks AnyInstance Chain matches_args?":{"type":"method","name":"matches_args?","children":[],"call":["@argument_list_matcher args_match? "]}," RSpec Mocks VerifyingExistingMethodDouble when_unimplemented":{"type":"method","name":"when_unimplemented","children":[],"call":[]}," RSpec Mocks VerifyingExistingMethodDouble when_defined":{"type":"method","name":"when_defined","children":[],"call":[" original_method "]}," RSpec Mocks VerifyingMethodDouble ensure_arity!":{"type":"method","name":"ensure_arity!","children":[],"call":[" raise ","method arity ","calculator within_range? ","ArityCalculator  new ","@method_reference when_defined ","ArityCalculator  new  within_range? "]}," RSpec Mocks VerifyingPartialMockProxy method_reference":{"type":"method","name":"method_reference","children":[],"call":[]}," RSpec Mocks VerifyingPartialMockProxy initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","VerifyingExistingMethodDouble  new ","Hash  new ","DirectObjectReference  new "]}," RSpec Mocks VerifyingMessageExpectation ensure_arity!":{"type":"method","name":"ensure_arity!","children":[],"call":["@error_generator raise_arity_error ","calculator within_range? ","ArityCalculator  new "," method_reference when_defined "," method_reference "," method_reference nil? ","ArityCalculator  new  within_range? "]}," RSpec Mocks PartialMockProxy any_instance_class_recorder_observing_method?":{"type":"method","name":"any_instance_class_recorder_observing_method?","children":[],"call":[" any_instance_class_recorder_observing_method? ","superklass nil? ","klass superclass "," RSpec Mocks  any_instance_recorder_for already_observing? "," RSpec Mocks  any_instance_recorder_for ","klass superclass  nil? "]}," RSpec Mocks PartialMockProxy add_simple_stub":{"type":"method","name":"add_simple_stub","children":[],"call":[" method_double_for configure_method "," method_double_for "]}," RSpec Mocks PartialMockProxy add_simple_expectation":{"type":"method","name":"add_simple_expectation","children":[],"call":[" method_double_for configure_method "," method_double_for "]}," RSpec Mocks PartialMockProxy method_handle_for":{"type":"method","name":"method_handle_for","children":[],"call":[" RSpec Mocks  method_handle_for "," RSpec Mocks  any_instance_recorder_for build_alias_method_name "," RSpec Mocks  any_instance_recorder_for ","@object class "," any_instance_class_recorder_observing_method? "]}," RSpec Mocks Proxy method_handle_for":{"type":"method","name":"method_handle_for","children":[],"call":[]}," RSpec Mocks MethodReference when_unimplemented":{"type":"method","name":"when_unimplemented","children":[],"call":[" implemented? "]}," RSpec Mocks MethodReference when_defined":{"type":"method","name":"when_defined","children":[],"call":[" original_method ","  original_method _method "]}," RSpec Mocks ErrorGenerator raise_arity_error":{"type":"method","name":"raise_arity_error","children":[],"call":[" __raise ","Wrong number of arguments. Expected %s, got %s. % ","calculator range_description "]}," RSpec Mocks ArityCalculator max_arity":{"type":"method","name":"max_arity","children":[],"call":[" method arity "," method "," method arity < ","type != ","params count ","type == ","params any? "," method parameters "," method parameters  count "," method parameters  any? "]}," RSpec Mocks ArityCalculator min_arity":{"type":"method","name":"min_arity","children":[],"call":[" method arity ~ "," method arity "," method "," method arity >= "]}," RSpec Mocks ArityCalculator supports_optional_and_splat_args?":{"type":"method","name":"supports_optional_and_splat_args?","children":[],"call":[]}," RSpec Mocks ArityCalculator method":{"type":"method","name":"method","children":[],"call":[]}," RSpec Mocks ArityCalculator range_description":{"type":"method","name":"range_description","children":[],"call":[" max_arity "," min_arity "," max_arity == "," min_arity to_s "," min_arity == "]}," RSpec Mocks ArityCalculator within_range?":{"type":"method","name":"within_range?","children":[],"call":["actual <= "," max_arity "," min_arity <= "," min_arity "]}," RSpec Mocks ArityCalculator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks ArgumentMatchers ArrayIncludingMatcher ==":{"type":"method","name":"==","children":[],"call":["Set  new superset? ","Set  new "]}," RSpec Mocks VerifyingDouble __initialize_as_test_double":{"type":"method","name":"__initialize_as_test_double","children":[],"call":[]}," RSpec Mocks RubyFeatures required_kw_args_supported?":{"type":"method","name":"required_kw_args_supported?","children":[],"call":["RUBY_ENGINE  != ","RUBY_VERSION  >= "]}," RSpec Mocks RubyFeatures kw_args_supported?":{"type":"method","name":"kw_args_supported?","children":[],"call":["RUBY_ENGINE  != ","RUBY_VERSION  >= "]}," RSpec Mocks RubyFeatures optional_and_splat_args_supported?":{"type":"method","name":"optional_and_splat_args_supported?","children":[],"call":["Method  method_defined? "]}," RSpec Mocks PartialDoubleProxy method_handle_for":{"type":"method","name":"method_handle_for","children":[],"call":[" RSpec Support  method_handle_for "," RSpec Mocks  space any_instance_recorder_for build_alias_method_name "," RSpec Mocks  space any_instance_recorder_for ","@object class "," RSpec Mocks  space "," any_instance_class_recorder_observing_method? "]}," RSpec Mocks MethodSignatureVerifier split_args":{"type":"method","name":"split_args","children":[],"call":["args pop keys ","args pop ","@signature has_kw_args_in? ","@signature has_args pop keys _in? "]}," RSpec Mocks MethodSignatureVerifier invalid_kw_args":{"type":"method","name":"invalid_kw_args","children":[],"call":["@signature invalid_kw_args_from "," kw_args "]}," RSpec Mocks MethodSignatureVerifier missing_kw_args":{"type":"method","name":"missing_kw_args","children":[],"call":["@signature missing_kw_args_from "," kw_args "]}," RSpec Mocks MethodSignatureVerifier valid_non_kw_args?":{"type":"method","name":"valid_non_kw_args?","children":[],"call":["actual <= ","@signature max_non_kw_args ","@signature min_non_kw_args <= ","@signature min_non_kw_args "," non_kw_args length "," non_kw_args "," non_kw_args length  <= "]}," RSpec Mocks MethodSignatureVerifier error_message":{"type":"method","name":"error_message","children":[],"call":["Wrong number of arguments. Expected %s, got %s. % "," non_kw_args length "," non_kw_args ","@signature non_kw_args_arity_description "," valid_non_kw_args? ! "," valid_non_kw_args? ","Invalid keyword arguments provided: %s % "," invalid_kw_args join "," invalid_kw_args "," invalid_kw_args any? ","Missing required keyword arguments: %s % "," missing_kw_args join "," missing_kw_args "," missing_kw_args any? "]}," RSpec Mocks MethodSignatureVerifier valid?":{"type":"method","name":"valid?","children":[],"call":[" valid_non_kw_args? "," invalid_kw_args empty? "," invalid_kw_args "," missing_kw_args empty? "," missing_kw_args "]}," RSpec Mocks MethodSignatureVerifier initialize":{"type":"method","name":"initialize","children":[],"call":[" split_args "]}," RSpec Mocks BlockSignature classify_parameters":{"type":"method","name":"classify_parameters","children":[],"call":["@max_non_kw_args == "]}," RSpec Mocks MethodSignature classify_parameters":{"type":"method","name":"classify_parameters","children":[],"call":["arity ~ ","arity < ","@method arity ","@required_kw_args + ","@min_non_kw_args + ","@optional_kw_args << ","@required_kw_args << ","@method parameters each ","@method parameters ","@method arity  ~ ","@method arity  < ","@method @method arity  ","arity ~  + "]}," RSpec Mocks MethodSignature has_kw_args_in?":{"type":"method","name":"has_kw_args_in?","children":[],"call":["@allowed_kw_args any? ","args count <= "," min_non_kw_args ","args count ","Hash  === ","args last "]}," RSpec Mocks MethodSignature invalid_kw_args_from":{"type":"method","name":"invalid_kw_args_from","children":[],"call":["given_kw_args - "]}," RSpec Mocks MethodSignature missing_kw_args_from":{"type":"method","name":"missing_kw_args_from","children":[],"call":["@required_kw_args - "]}," RSpec Mocks MethodSignature description":{"type":"method","name":"description","children":[],"call":[" non_kw_args_arity_description ","parts join ","parts << ","@required_kw_args map join ","@required_kw_args map ","@required_kw_args any? ","@optional_kw_args map join ","@optional_kw_args map ","@optional_kw_args any? "," non_kw_args_arity_description == "]}," RSpec Mocks MethodSignature non_kw_args_arity_description":{"type":"method","name":"non_kw_args_arity_description","children":[],"call":[" max_non_kw_args "," min_non_kw_args "," min_non_kw_args to_s "]}," RSpec Mocks MethodSignature initialize":{"type":"method","name":"initialize","children":[],"call":[" classify_parameters "]}," RSpec Mocks ExpectationCustomization playback_onto":{"type":"method","name":"playback_onto","children":[],"call":["expectation __send__ "]}," RSpec Mocks ExpectationCustomization initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks TestDouble __build_mock_proxy_unless_expired":{"type":"method","name":"__build_mock_proxy_unless_expired","children":[],"call":[" __build_mock_proxy "," __raise_expired_error "]}," RSpec Mocks MessageExpectation additional_expected_calls":{"type":"method","name":"additional_expected_calls","children":[],"call":["@expected_received_count - ","@exactly ! ","@expectation_type == "]}," RSpec Mocks TestDouble initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":[" as_null_object ","other null_object? "]}," RSpec Mocks Proxy ensure_implemented":{"type":"method","name":"ensure_implemented","children":[],"call":[]}," RSpec Mocks ArgumentMatchers KindOf description":{"type":"method","name":"description","children":[],"call":["@klass name "]}," RSpec Mocks ArgumentMatchers KindOf ===":{"type":"method","name":"===","children":[],"call":["actual kind_of? "]}," RSpec Mocks VerifyingMessageExpectation validate_expected_arguments!":{"type":"method","name":"validate_expected_arguments!","children":[],"call":["@error_generator raise_invalid_arguments_error ","verifier valid? ","Support LooseSignatureVerifier  new "," method_reference with_signature "," method_reference "," method_reference nil? ","Support LooseSignatureVerifier  new  valid? "]}," RSpec Mocks AndWrapOriginalImplementation cannot_modify_further_error":{"type":"method","name":"cannot_modify_further_error","children":[],"call":["CannotModifyFurtherError  new "]}," RSpec Mocks AndWrapOriginalImplementation call":{"type":"method","name":"call","children":[],"call":["@block call "]}," RSpec Mocks AndWrapOriginalImplementation inner_action":{"type":"method","name":"inner_action","children":[],"call":[]}," RSpec Mocks AndWrapOriginalImplementation present?":{"type":"method","name":"present?","children":[],"call":[]}," RSpec Mocks AndWrapOriginalImplementation terminal_action=":{"type":"method","name":"terminal_action=","children":[],"call":[" raise "," cannot_modify_further_error "]}," RSpec Mocks AndWrapOriginalImplementation inner_action=":{"type":"method","name":"inner_action=","children":[],"call":[" raise "," cannot_modify_further_error "]}," RSpec Mocks AndWrapOriginalImplementation initial_action=":{"type":"method","name":"initial_action=","children":[],"call":[" raise "," cannot_modify_further_error "]}," RSpec Mocks AndWrapOriginalImplementation initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks MessageExpectation thrice":{"type":"method","name":"thrice","children":[],"call":[" set_expected_received_count "," inner_implementation_action= "]}," RSpec Mocks MessageExpectation and_wrap_original":{"type":"method","name":"and_wrap_original","children":[],"call":["AndWrapOriginalImplementation  new ","@method_double original_method "," warn_about_stub_override "," implementation inner_action "," implementation ","@error_generator raise_only_valid_on_a_partial_double ","RSpec Mocks TestDouble  === ","@method_double object "," wrap_original "," __method__ ","@method_double original_implementation_callable "]}," RSpec Mocks ExampleMethods class_spy":{"type":"method","name":"class_spy","children":[],"call":[" class_double as_null_object "," class_double "]}," RSpec Mocks ExampleMethods object_spy":{"type":"method","name":"object_spy","children":[],"call":[" object_double as_null_object "," object_double "]}," RSpec Mocks ExampleMethods instance_spy":{"type":"method","name":"instance_spy","children":[],"call":[" instance_double as_null_object "," instance_double "]}," RSpec Mocks ExampleMethods spy":{"type":"method","name":"spy","children":[],"call":[" double as_null_object "," double "]}," RSpec Mocks Proxy prepended_modules_of":{"type":"method","name":"prepended_modules_of","children":[],"call":[]}," RSpec Mocks Matchers HaveReceived setup_allowance":{"type":"method","name":"setup_allowance","children":[],"call":[" raise "," disallow "]}," RSpec Mocks VerifyingMethodDouble add_stub":{"type":"method","name":"add_stub","children":[],"call":["x method_reference= ","(splat\n  (lvar :args)) tap "]}," RSpec Mocks MessageExpectation safe_invoke":{"type":"method","name":"safe_invoke","children":[],"call":[" invoke_incrementing_actual_calls_by "]}," RSpec Mocks Matchers HaveReceived disallow":{"type":"method","name":"disallow","children":[],"call":[" raise ","RSpec Mocks  error_generator raise_have_received_disallowed ","RSpec Mocks  error_generator "]}," RSpec Mocks Matchers HaveReceived setup_any_instance_expectation":{"type":"method","name":"setup_any_instance_expectation","children":[],"call":[" disallow "]}," RSpec Mocks Matchers HaveReceived setup_any_instance_allowance":{"type":"method","name":"setup_any_instance_allowance","children":[],"call":[" disallow "]}," RSpec Mocks VerifyingExistingClassNewMethodDouble with_signature":{"type":"method","name":"with_signature","children":[],"call":["Support MethodSignature  new "," object instance_method "," object "]}," RSpec Mocks VerifyingExistingMethodDouble for":{"type":"method","name":"for","children":[],"call":[]}," RSpec Mocks VerifyingPartialDoubleProxy ensure_implemented":{"type":"method","name":"ensure_implemented","children":[],"call":["Mocks  configuration temporarily_suppress_partial_double_verification ","Mocks  configuration "]}," RSpec Mocks VerifyingProxy validate_arguments!":{"type":"method","name":"validate_arguments!","children":[],"call":["@method_doubles [] validate_arguments! ","@method_doubles [] "]}," RSpec Mocks NoCallbackInvocationStrategy call":{"type":"method","name":"call","children":[],"call":[]}," RSpec Mocks CallbackInvocationStrategy call":{"type":"method","name":"call","children":[],"call":["block call ","RSpec Mocks  configuration verifying_double_callbacks each ","RSpec Mocks  configuration verifying_double_callbacks ","RSpec Mocks  configuration "]}," RSpec Mocks VerifyingDouble SilentIO respond_to?":{"type":"method","name":"respond_to?","children":[],"call":[]}," RSpec Mocks VerifyingDouble SilentIO method_missing":{"type":"method","name":"method_missing","children":[],"call":[]}," RSpec Mocks TestDoubleFormatter name_desc":{"type":"method","name":"name_desc","children":[],"call":["name inspect ","IVAR_GET  bind call ","IVAR_GET  bind ","IVAR_GET  bind call  inspect "]}," RSpec Mocks TestDoubleFormatter verified_module_desc":{"type":"method","name":"verified_module_desc","children":[],"call":["IVAR_GET  bind call description ","IVAR_GET  bind call ","IVAR_GET  bind ","VerifyingDouble  === "]}," RSpec Mocks TestDoubleFormatter type_desc":{"type":"method","name":"type_desc","children":[],"call":[]}," RSpec Mocks TestDoubleFormatter format":{"type":"method","name":"format","children":[],"call":[]}," RSpec Mocks AnyInstanceExpectationTarget expression":{"type":"method","name":"expression","children":[],"call":[]}," RSpec Mocks AnyInstanceAllowanceTarget expression":{"type":"method","name":"expression","children":[],"call":[]}," RSpec Mocks AllowanceTarget expression":{"type":"method","name":"expression","children":[],"call":[]}," RSpec Mocks ExpectationTargetMethods expression":{"type":"method","name":"expression","children":[],"call":[]}," RSpec Mocks TargetDelegationInstanceMethods raise_negation_unsupported":{"type":"method","name":"raise_negation_unsupported","children":[],"call":[" raise ","matcher name "," expression ","matcher matcher_name "]}," RSpec Mocks TargetDelegationInstanceMethods raise_unsupported_matcher":{"type":"method","name":"raise_unsupported_matcher","children":[],"call":[" raise "," expression "]}," RSpec Mocks TargetDelegationInstanceMethods define_matcher":{"type":"method","name":"define_matcher","children":[],"call":["matcher __send__ "," target "]}," RSpec Mocks TargetDelegationInstanceMethods matcher_allowed?":{"type":"method","name":"matcher_allowed?","children":[],"call":["Matchers Matcher  === "]}," RSpec Mocks TargetDelegationClassMethods disallow_negation":{"type":"method","name":"disallow_negation","children":[],"call":[" raise_negation_unsupported "," define_method "]}," RSpec Mocks TargetDelegationClassMethods delegate_not_to":{"type":"method","name":"delegate_not_to","children":[],"call":[" raise_unsupported_matcher "," raise_negation_unsupported "," define_matcher "," define_method ","options fetch "]}," RSpec Mocks TargetDelegationClassMethods delegate_to":{"type":"method","name":"delegate_to","children":[],"call":[" define_matcher "," raise_unsupported_matcher "," matcher_allowed? "," define_method "]}," RSpec Mocks Space class_proxy_with_callback_verification_strategy":{"type":"method","name":"class_proxy_with_callback_verification_strategy","children":[],"call":["PartialClassDoubleProxy  new ","VerifyingPartialClassDoubleProxy  new ","RSpec Mocks  configuration verify_partial_doubles? ","RSpec Mocks  configuration "]}," RSpec Mocks Space superclass_proxy_not_found_for":{"type":"method","name":"superclass_proxy_not_found_for","children":[],"call":[" proxies []= "," class_proxy_with_callback_verification_strategy ","NoCallbackInvocationStrategy  new "," proxies "," raise ","Class  === "]}," RSpec Mocks Space superclass_proxy_for":{"type":"method","name":"superclass_proxy_for","children":[],"call":[" superclass_proxy_not_found_for "," proxies fetch "," proxies "," id_for "," proxy_mutex synchronize "," proxy_mutex ","  id_for _for "]}," RSpec Mocks RootSpace superclass_proxy_for":{"type":"method","name":"superclass_proxy_for","children":[],"call":[" raise_lifecycle_message "]}," RSpec Mocks ProxyForNil raise_error":{"type":"method","name":"raise_error","children":[],"call":["@error_generator raise_expectation_on_nil_error "]}," RSpec Mocks ProxyForNil warn_or_raise!":{"type":"method","name":"warn_or_raise!","children":[],"call":[" warn "," warn_about_expectations "," raise_error "," disallow_expectations "]}," RSpec Mocks ProxyForNil set_expectation_behavior":{"type":"method","name":"set_expectation_behavior","children":[],"call":["RSpec Mocks  configuration allow_message_expectations_on_nil ","RSpec Mocks  configuration "]}," RSpec Mocks PartialClassDoubleProxyMethods method_double_from_ancestor_for":{"type":"method","name":"method_double_from_ancestor_for","children":[],"call":[" superclass_proxy method_double_from_ancestor_for "," superclass_proxy ","@method_doubles fetch "]}," RSpec Mocks Proxy method_double_if_exists_for_message":{"type":"method","name":"method_double_if_exists_for_message","children":[],"call":[" method_double_for ","@method_doubles key? ","message to_sym "]}," RSpec Mocks Proxy messages_arg_list":{"type":"method","name":"messages_arg_list","children":[],"call":["@messages_received map ","@messages_received_mutex synchronize "]}," RSpec Mocks NamedObjectReference target":{"type":"method","name":"target","children":[],"call":[" object "]}," RSpec Mocks DirectObjectReference target":{"type":"method","name":"target","children":[],"call":[]}," RSpec Mocks ObjectReference name_of":{"type":"method","name":"name_of","children":[],"call":[]}," RSpec Mocks ObjectReference anonymous_module?":{"type":"method","name":"anonymous_module?","children":[],"call":[]}," RSpec Mocks Constant valid_name?":{"type":"method","name":"valid_name?","children":[],"call":[]}," to_not":{"type":"method","name":"to_not","children":[],"call":[" ctx assertions "," ctx "]}," not_to":{"type":"method","name":"not_to","children":[],"call":[" ctx assertions "," ctx "]}," to":{"type":"method","name":"to","children":[],"call":[" ctx assertions "," ctx "]}," RSpec Mocks MinitestIntegration after_teardown":{"type":"method","name":"after_teardown","children":[],"call":[" RSpec Mocks  teardown "," RSpec Mocks  verify "," failures any? "," failures "]}," RSpec Mocks MinitestIntegration before_setup":{"type":"method","name":"before_setup","children":[],"call":[" RSpec Mocks  setup "]}," RSpec Mocks ClassNewMethodReference with_signature":{"type":"method","name":"with_signature","children":[],"call":["Support MethodSignature  new ","klass instance_method ","@object_reference when_loaded "]}," RSpec Mocks ClassNewMethodReference applies_to?":{"type":"method","name":"applies_to?","children":[],"call":[]}," RSpec Mocks ObjectMethodReference for":{"type":"method","name":"for","children":[],"call":[]}," RSpec Mocks MethodReference for":{"type":"method","name":"for","children":[],"call":[]}," RSpec Mocks MethodDouble remove_method_from_definition_target":{"type":"method","name":"remove_method_from_definition_target","children":[],"call":["RSpec  warn_with ","@object inspect "," definition_target __send__ "," definition_target "]}," RSpec Mocks MethodDouble original_implementation_callable":{"type":"method","name":"original_implementation_callable","children":[],"call":["@object __send__ ","Proc  new "," original_method "," method_missing_block "]}," RSpec Mocks MessageExpectation ImplementationDetails wrap_original":{"type":"method","name":"wrap_original","children":[],"call":["AndWrapOriginalImplementation  new ","@method_double original_implementation_callable "," warn_about_stub_override "," implementation inner_action "," implementation ","@error_generator raise_only_valid_on_a_partial_double ","RSpec Mocks TestDouble  === ","@method_double object "]}," RSpec Mocks MessageExpectation ImplementationDetails warn_about_stub_override":{"type":"method","name":"warn_about_stub_override","children":[],"call":["RSpec  warning ","CallerFilter  first_non_rspec_line "]}," RSpec Mocks MessageExpectation ImplementationDetails terminal_implementation_action=":{"type":"method","name":"terminal_implementation_action=","children":[],"call":[" implementation terminal_action= "," implementation "]}," RSpec Mocks MessageExpectation ImplementationDetails inner_implementation_action=":{"type":"method","name":"inner_implementation_action=","children":[],"call":[" implementation inner_action= "," implementation "," warn_about_stub_override "," implementation inner_action "]}," RSpec Mocks MessageExpectation ImplementationDetails initial_implementation_action=":{"type":"method","name":"initial_implementation_action=","children":[],"call":[" implementation initial_action= "," implementation "]}," RSpec Mocks MessageExpectation ImplementationDetails set_expected_received_count":{"type":"method","name":"set_expected_received_count","children":[],"call":["relativity == "," raise "," negative? "]}," RSpec Mocks MessageExpectation ImplementationDetails raise_already_invoked_error_if_necessary":{"type":"method","name":"raise_already_invoked_error_if_necessary","children":[],"call":[" error_generator raise_already_invoked_error "," message "," error_generator "," has_been_invoked? "," raise "," orig_object inspect "," orig_object "]}," RSpec Mocks MessageExpectation ImplementationDetails has_been_invoked?":{"type":"method","name":"has_been_invoked?","children":[],"call":["@actual_received_count > "]}," RSpec Mocks MessageExpectation ImplementationDetails invoke_incrementing_actual_calls_by":{"type":"method","name":"invoke_incrementing_actual_calls_by","children":[],"call":["@actual_received_count_write_mutex synchronize ","parent_stub invoke "," implementation call "," implementation "," implementation present? ","@order_group handle_order_constraint ","@error_generator raise_expectation_error "," exception_source_id "," expectation_count_type ","@actual_received_count + ","@actual_received_count == "," negative? ","args unshift "," orig_object "," yield_receiver_to_implementation_block? "]}," RSpec Mocks MessageExpectation ImplementationDetails exception_source_id":{"type":"method","name":"exception_source_id","children":[],"call":[" __id__ "," class name "," class "]}," RSpec Mocks MessageExpectation ImplementationDetails increase_actual_received_count!":{"type":"method","name":"increase_actual_received_count!","children":[],"call":["@actual_received_count_write_mutex synchronize "]}," RSpec Mocks MessageExpectation ImplementationDetails actual_received_count_matters?":{"type":"method","name":"actual_received_count_matters?","children":[],"call":[]}," RSpec Mocks MessageExpectation ImplementationDetails negative_expectation_for?":{"type":"method","name":"negative_expectation_for?","children":[],"call":[" negative? ","@message == "]}," RSpec Mocks MessageExpectation ImplementationDetails ordered?":{"type":"method","name":"ordered?","children":[],"call":[]}," RSpec Mocks MessageExpectation ImplementationDetails additional_expected_calls":{"type":"method","name":"additional_expected_calls","children":[],"call":["@expected_received_count - ","@exactly ! ","@expectation_type == "]}," RSpec Mocks MessageExpectation ImplementationDetails raise_out_of_order_error":{"type":"method","name":"raise_out_of_order_error","children":[],"call":["@error_generator raise_out_of_order_error "]}," RSpec Mocks MessageExpectation ImplementationDetails description_for":{"type":"method","name":"description_for","children":[],"call":["@error_generator describe_expectation "," expected_args "]}," RSpec Mocks MessageExpectation ImplementationDetails expectation_count_type":{"type":"method","name":"expectation_count_type","children":[],"call":[]}," RSpec Mocks MessageExpectation ImplementationDetails raise_unexpected_message_args_error":{"type":"method","name":"raise_unexpected_message_args_error","children":[],"call":["@error_generator raise_unexpected_message_args_error "," exception_source_id "]}," RSpec Mocks MessageExpectation ImplementationDetails generate_error":{"type":"method","name":"generate_error","children":[],"call":["@error_generator raise_similar_message_args_error ","@error_generator raise_expectation_error "," exception_source_id "," expected_args "," expectation_count_type "," similar_messages empty? "," similar_messages "]}," RSpec Mocks MessageExpectation ImplementationDetails unadvise":{"type":"method","name":"unadvise","children":[],"call":["args include? "," similar_messages delete_if "," similar_messages "]}," RSpec Mocks MessageExpectation ImplementationDetails advise":{"type":"method","name":"advise","children":[],"call":[" similar_messages << "," similar_messages "]}," RSpec Mocks MessageExpectation ImplementationDetails similar_messages":{"type":"method","name":"similar_messages","children":[],"call":[]}," RSpec Mocks MessageExpectation ImplementationDetails matches_exact_count?":{"type":"method","name":"matches_exact_count?","children":[],"call":["@expected_received_count == "]}," RSpec Mocks MessageExpectation ImplementationDetails matches_at_most_count?":{"type":"method","name":"matches_at_most_count?","children":[],"call":["@actual_received_count <= "]}," RSpec Mocks MessageExpectation ImplementationDetails matches_at_least_count?":{"type":"method","name":"matches_at_least_count?","children":[],"call":["@actual_received_count >= "]}," RSpec Mocks MessageExpectation ImplementationDetails ignoring_args?":{"type":"method","name":"ignoring_args?","children":[],"call":["@expected_received_count == "]}," RSpec Mocks MessageExpectation ImplementationDetails ensure_expected_ordering_received!":{"type":"method","name":"ensure_expected_ordering_received!","children":[],"call":["@order_group verify_invocation_order "]}," RSpec Mocks MessageExpectation ImplementationDetails expected_messages_received?":{"type":"method","name":"expected_messages_received?","children":[],"call":[" matches_at_most_count? "," matches_at_least_count? "," matches_exact_count? "," ignoring_args? "]}," RSpec Mocks MessageExpectation ImplementationDetails verify_messages_received":{"type":"method","name":"verify_messages_received","children":[],"call":[" generate_error "," expected_messages_received? "," failed_fast? ","InsertOntoBacktrace  line "]}," RSpec Mocks MessageExpectation ImplementationDetails matches_name_but_not_args":{"type":"method","name":"matches_name_but_not_args","children":[],"call":["@argument_list_matcher args_match? ! ","@argument_list_matcher args_match? ","@message == "]}," RSpec Mocks MessageExpectation ImplementationDetails called_max_times?":{"type":"method","name":"called_max_times?","children":[],"call":["@actual_received_count >= ","@expected_received_count > ","@at_least ! ","@expected_received_count != "]}," RSpec Mocks MessageExpectation ImplementationDetails negative?":{"type":"method","name":"negative?","children":[],"call":["@at_least ! ","@expected_received_count == "]}," RSpec Mocks MessageExpectation ImplementationDetails invoke_without_incrementing_received_count":{"type":"method","name":"invoke_without_incrementing_received_count","children":[],"call":[" invoke_incrementing_actual_calls_by "]}," RSpec Mocks MessageExpectation ImplementationDetails invoke":{"type":"method","name":"invoke","children":[],"call":[" invoke_incrementing_actual_calls_by "]}," RSpec Mocks MessageExpectation ImplementationDetails safe_invoke":{"type":"method","name":"safe_invoke","children":[],"call":[" invoke_incrementing_actual_calls_by "]}," RSpec Mocks MessageExpectation ImplementationDetails matches?":{"type":"method","name":"matches?","children":[],"call":["@argument_list_matcher args_match? ","@message == "]}," RSpec Mocks MessageExpectation ImplementationDetails yield_receiver_to_implementation_block?":{"type":"method","name":"yield_receiver_to_implementation_block?","children":[],"call":[]}," RSpec Mocks MessageExpectation ImplementationDetails and_yield_receiver_to_implementation":{"type":"method","name":"and_yield_receiver_to_implementation","children":[],"call":[]}," RSpec Mocks MessageExpectation ImplementationDetails expected_args":{"type":"method","name":"expected_args","children":[],"call":["@argument_list_matcher expected_args "]}," RSpec Mocks MessageExpectation ImplementationDetails initialize":{"type":"method","name":"initialize","children":[],"call":[" inner_implementation_action= ","Implementation  new ","@order_group register ","type == ","Support Mutex  new ","@method_double method_name ","@method_double object ","@error_generator opts= ","error_generator opts merge ","error_generator opts "]}," RSpec Mocks MessageExpectation to_s":{"type":"method","name":"to_s","children":[],"call":[" message "," error_generator intro "," error_generator "," class ","args_description start_with? "," error_generator method_call_args_description ","@argument_list_matcher expected_args "]}," RSpec Mocks SimpleMessageExpectation unadvise":{"type":"method","name":"unadvise","children":[],"call":[]}," RSpec Mocks Matchers ReceiveMessages description":{"type":"method","name":"description","children":[],"call":["@message_return_value_hash inspect "]}," RSpec Mocks Matchers ReceiveMessageChain formatted_chain":{"type":"method","name":"formatted_chain","children":[],"call":["(send\n  (ivar :@chain) :map) join ","part to_s ","part keys first to_s ","part keys first ","part keys ","Hash  === ","@chain map "]}," RSpec Mocks Matchers ReceiveMessageChain description":{"type":"method","name":"description","children":[],"call":[" formatted_chain "]}," RSpec Mocks Matchers Receive DefaultDescribable description_for":{"type":"method","name":"description_for","children":[],"call":[]}," RSpec Mocks Matchers Receive DefaultDescribable initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks Matchers Receive describable":{"type":"method","name":"describable","children":[],"call":["DefaultDescribable  new "]}," RSpec Mocks Matchers Receive description":{"type":"method","name":"description","children":[],"call":[" describable description_for "," describable "]}," RSpec Mocks Matchers HaveReceived notify_failure_message":{"type":"method","name":"notify_failure_message","children":[],"call":["@expectation generate_error "," mock_proxy check_for_unexpected_arguments "," mock_proxy "]}," RSpec Mocks Matchers HaveReceived capture_failure_message":{"type":"method","name":"capture_failure_message","children":[],"call":[" notify_failure_message ","RSpec Support  with_failure_notifier ","err message ","Proc  new "]}," RSpec Mocks Matchers HaveReceived setup_any_instance_negative_expectation":{"type":"method","name":"setup_any_instance_negative_expectation","children":[],"call":[" disallow "]}," RSpec Mocks Matchers HaveReceived setup_negative_expectation":{"type":"method","name":"setup_negative_expectation","children":[],"call":[" notify_failure_message "," does_not_match? "]}," RSpec Mocks Matchers HaveReceived setup_expectation":{"type":"method","name":"setup_expectation","children":[],"call":[" notify_failure_message "," matches? "]}," RSpec Mocks ExampleMethods extended":{"type":"method","name":"extended","children":[],"call":[]}," RSpec Mocks ExampleMethods without_partial_double_verification":{"type":"method","name":"without_partial_double_verification","children":[],"call":["Mocks  configuration temporarily_suppress_partial_double_verification= ","Mocks  configuration ","Mocks  configuration temporarily_suppress_partial_double_verification "]}," RSpec Mocks error_generator":{"type":"method","name":"error_generator","children":[],"call":[]}," RSpec Mocks ErrorGenerator group_count":{"type":"method","name":"group_count","children":[],"call":[" times ","index > ","args size > ","args size "]}," RSpec Mocks ErrorGenerator grouped_args":{"type":"method","name":"grouped_args","children":[],"call":["Hash  [] ","v count ","(send\n  (lvar :args) :group_by) map ","args group_by "]}," RSpec Mocks ErrorGenerator notify":{"type":"method","name":"notify","children":[],"call":["RSpec Support  notify_failure "]}," RSpec Mocks ErrorGenerator prepend_to_backtrace":{"type":"method","name":"prepend_to_backtrace","children":[],"call":["exception set_backtrace "," caller unshift "," caller ","with_backtrace backtrace unshift ","with_backtrace backtrace "," raise "]}," RSpec Mocks ErrorGenerator differ":{"type":"method","name":"differ","children":[],"call":["RSpec Support Differ  new ","RSpec Mocks  configuration color? ","RSpec Mocks  configuration "]}," RSpec Mocks ErrorGenerator list_of_exactly_one_string?":{"type":"method","name":"list_of_exactly_one_string?","children":[],"call":["String  === ","args first ","args count == ","args count ","Array  === "]}," RSpec Mocks ErrorGenerator unpack_string_args":{"type":"method","name":"unpack_string_args","children":[],"call":["actual_args first ","formatted_expected_args first "," list_of_exactly_one_string? ","(lvar :formatted_expected_args) all? "]}," RSpec Mocks ErrorGenerator diff_message":{"type":"method","name":"diff_message","children":[],"call":[" differ diff "," differ "," unpack_string_args ","RSpec Support  rspec_description_for_object ","expected_args map "]}," RSpec Mocks ErrorGenerator error_message":{"type":"method","name":"error_message","children":[],"call":["message << ","diff strip empty? ","diff strip "," diff_message ","args_for_multiple_calls first ","expectation expected_args ","args_for_multiple_calls one? "," default_error_message "," format_received_args "," format_args ","Hash  ruby2_keywords_hash? ","Hash  ruby2_keywords_hash? != ","Hash  === ","args_for_multiple_calls last last ","args_for_multiple_calls last ","expectation expected_args last ","expected_args == ","RSpec Support RubyFeatures  distincts_kw_args_from_positional_hash? ","diff gsub strip empty? ","diff gsub strip ","diff gsub ","RSpec Mocks  configuration color? ","RSpec Mocks  configuration ","actual_description != "," default_error_message  << "," diff_message  strip empty? "," diff_message  strip ","  diff_message _message "," diff_ default_error_message  ","expectation  format_args  "," default_error_ default_error_message  ","expectation  format_args  last "," format_args  == "," diff_message  gsub strip empty? "," diff_message  gsub strip "," diff_message  gsub "]}," RSpec Mocks ErrorGenerator unexpected_arguments_message":{"type":"method","name":"unexpected_arguments_message","children":[],"call":[]}," RSpec Mocks ErrorGenerator expectation_on_nil_message":{"type":"method","name":"expectation_on_nil_message","children":[],"call":[]}," RSpec Mocks ErrorGenerator raise_expectation_on_nil_error":{"type":"method","name":"raise_expectation_on_nil_error","children":[],"call":[" __raise "," expectation_on_nil_message "]}," RSpec Mocks ErrorGenerator raise_already_invoked_error":{"type":"method","name":"raise_already_invoked_error","children":[],"call":[" notify ","MockExpectationAlreadyInvokedError  new "," intro "]}," RSpec Mocks ErrorGenerator raise_method_not_stubbed_error":{"type":"method","name":"raise_method_not_stubbed_error","children":[],"call":[" __raise "]}," RSpec Mocks ErrorGenerator raise_cant_constrain_count_for_negated_have_received_error":{"type":"method","name":"raise_cant_constrain_count_for_negated_have_received_error","children":[],"call":[" __raise "]}," RSpec Mocks ErrorGenerator raise_have_received_disallowed":{"type":"method","name":"raise_have_received_disallowed","children":[],"call":[" __raise "]}," RSpec Mocks ErrorGenerator raise_verifying_double_not_defined_error":{"type":"method","name":"raise_verifying_double_not_defined_error","children":[],"call":[" notify ","VerifyingDoubleNotDefinedError  new ","ref description inspect ","ref description "]}," RSpec Mocks ErrorGenerator default_error_message":{"type":"method","name":"default_error_message","children":[],"call":["(begin\n  (send nil :intro)) dup "," unexpected_arguments_message ","expectation message inspect ","expectation message "," intro ","(send nil :intro) join "]}," RSpec Mocks Configuration color?":{"type":"method","name":"color?","children":[],"call":[" RSpec  configuration color_enabled? "," RSpec  configuration "]}," RSpec Mocks Configuration verifying_double_callbacks":{"type":"method","name":"verifying_double_callbacks","children":[],"call":[]}," RSpec Mocks Configuration before_verifying_doubles":{"type":"method","name":"before_verifying_doubles","children":[],"call":[" verifying_double_callbacks << "," verifying_double_callbacks "]}," RSpec Mocks ArgumentMatchers ArrayIncludingMatcher formatted_expected_values":{"type":"method","name":"formatted_expected_values","children":[],"call":["(send\n  (ivar :@expected) :map) join ","RSpec Support  rspec_description_for_object ","@expected map "]}," RSpec Mocks ArgumentMatchers BaseHashMatcher formatted_expected_hash":{"type":"method","name":"formatted_expected_hash","children":[],"call":["Hash  [] ","RSpec Support  rspec_description_for_object ","@expected map "]}," RSpec Mocks ArgumentMatchers SingletonMatcher inherited":{"type":"method","name":"inherited","children":[],"call":[]}," RSpec Mocks ArgumentListMatcher ensure_expected_args_valid!":{"type":"method","name":"ensure_expected_args_valid!","children":[],"call":[" raise ","ArgumentMatchers NoArgsMatcher INSTANCE  == "," expected_args any? "," expected_args "," expected_args count > "," expected_args count ","(send\n  (send nil :expected_args) :count) > ","ArgumentMatchers AnyArgsMatcher INSTANCE  == "," expected_args include? "]}," RSpec Mocks ArgumentListMatcher replace_any_args_with_splat_of_anything":{"type":"method","name":"replace_any_args_with_splat_of_anything","children":[],"call":[" expected_args first + + "," expected_args last "," expected_args "," expected_args first + "," expected_args first ","1 upto map ","1 upto "," expected_args count - - "," expected_args count - "," expected_args count ","actual_args_count - + ","actual_args_count - "]}," RSpec Mocks ArgumentListMatcher resolve_expected_args_based_on":{"type":"method","name":"resolve_expected_args_based_on","children":[],"call":[" replace_any_args_with_splat_of_anything ","actual_args count "," expected_args ","ArgumentMatchers AnyArgsMatcher INSTANCE  == "," expected_args index ","(const\n  (const\n    (const nil :ArgumentMatchers) :NoArgsMatcher) :INSTANCE) == "]}," RSpec Mocks AnyInstance error_generator":{"type":"method","name":"error_generator","children":[],"call":[]}," RSpec Mocks AnyInstance ErrorGenerator raise_not_supported_with_prepend_error":{"type":"method","name":"raise_not_supported_with_prepend_error","children":[],"call":[" __raise "]}," RSpec Mocks AnyInstance ErrorGenerator raise_message_already_received_by_other_instance_error":{"type":"method","name":"raise_message_already_received_by_other_instance_error","children":[],"call":[" __raise "]}," RSpec Mocks AnyInstance ErrorGenerator raise_does_not_implement_error":{"type":"method","name":"raise_does_not_implement_error","children":[],"call":[" __raise "]}," RSpec Mocks AnyInstance ErrorGenerator raise_second_instance_received_message_error":{"type":"method","name":"raise_second_instance_received_message_error","children":[],"call":[" __raise ","unfulfilled_expectations sort join ","unfulfilled_expectations sort "]}," RSpec Mocks Proxy ensure_can_be_proxied!":{"type":"method","name":"ensure_can_be_proxied!","children":[],"call":[" raise ","msg << ","Symbol  === ","object nil? ","object frozen? ","object is_a? "]}," RSpec Mocks AndInvokeImplementation call":{"type":"method","name":"call","children":[],"call":["proc call ","@procs_to_invoke first ","@procs_to_invoke shift ","@procs_to_invoke size > ","@procs_to_invoke size ","@procs_to_invoke first  call ","@procs_to_invoke shift  call ","@@procs_to_invoke first s_to_invoke first ","@@procs_to_invoke shift s_to_invoke first ","@@procs_to_invoke first s_to_invoke shift ","@@procs_to_invoke shift s_to_invoke shift ","@@procs_to_invoke first s_to_invoke size > ","@@procs_to_invoke shift s_to_invoke size > ","@@procs_to_invoke first s_to_invoke size ","@@procs_to_invoke shift s_to_invoke size "]}," RSpec Mocks AndInvokeImplementation initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RSpec Mocks MessageExpectation and_invoke":{"type":"method","name":"and_invoke","children":[],"call":[" terminal_implementation_action= ","AndInvokeImplementation  new ","(ivar :@expected_received_count) max ","procs size ","@expected_received_count == "," ignoring_args? "," raise ","p respond_to? ! ","p respond_to? ","procs any? ","procs unshift "," block_given? "," negative? "," raise_already_invoked_error_if_necessary "," __method__ ","(ivar :(ivar :@expected_received_count) max ) max ","(ivar :@expected_received_count) max  == "]}," RSpec Mocks ClassNewMethodReference uses_class_new?":{"type":"method","name":"uses_class_new?","children":[],"call":[]}," RSpec Mocks Matchers ReceiveMessages matcher_name":{"type":"method","name":"matcher_name","children":[],"call":[]}," RSpec Mocks Matchers ReceiveMessageChain matcher_name":{"type":"method","name":"matcher_name","children":[],"call":[]}," RSpec Mocks Matchers Receive matcher_name":{"type":"method","name":"matcher_name","children":[],"call":[]}," RSpec Mocks Matchers HaveReceived matcher_name":{"type":"method","name":"matcher_name","children":[],"call":[]}," RSpec Mocks MethodDouble method_missing_block":{"type":"method","name":"method_missing_block","children":[],"call":["block ruby2_keywords ","block respond_to? ","@object __send__ ","Proc  new "]}," RSpec Mocks Proxy ReceivedArgList hash_of":{"type":"method","name":"hash_of","children":[],"call":["arg hash "]}," RSpec Mocks Proxy ReceivedArgList has_mutations?":{"type":"method","name":"has_mutations?","children":[],"call":["@original_hash != "," hash_of "," args "]}," RSpec Mocks Proxy ReceivedArgList initialize":{"type":"method","name":"initialize","children":[],"call":[" hash_of "]}," RSpec Mocks MessageExpectation ImplementationDetails failed_fast?":{"type":"method","name":"failed_fast?","children":[],"call":[]}," RSpec Mocks MessageExpectation ImplementationDetails fail_if_problematic_received_arg_mutations":{"type":"method","name":"fail_if_problematic_received_arg_mutations","children":[],"call":[" raise ","received_arg_list has_mutations? ","@argument_list_matcher == "]}," RSpec Mocks ErrorGenerator arg_has_valid_description?":{"type":"method","name":"arg_has_valid_description?","children":[],"call":["arg respond_to? ","RSpec Support  is_a_matcher? "]}," RSpec Mocks Configuration verifying_double_declaration_callbacks":{"type":"method","name":"verifying_double_declaration_callbacks","children":[],"call":[]}," RSpec Mocks Configuration when_declaring_verifying_double":{"type":"method","name":"when_declaring_verifying_double","children":[],"call":[" verifying_double_declaration_callbacks << "," verifying_double_declaration_callbacks "]}," RSpec Mocks ReentrantMutex exit":{"type":"method","name":"exit","children":[],"call":["@mutex unlock ","@count == "]}," RSpec Mocks ReentrantMutex enter":{"type":"method","name":"enter","children":[],"call":["Thread  current ","@mutex lock ","@owner != ","Thread  current  != "]}," RSpec Mocks ReentrantMutex synchronize":{"type":"method","name":"synchronize","children":[],"call":[" exit "," enter "]}," RSpec Mocks ReentrantMutex initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "]}," RSpec Mocks Mutex wakeup_and_run_waiting_thread":{"type":"method","name":"wakeup_and_run_waiting_thread","children":[],"call":["t run ","Thread  critical= ","t wakeup ","@waiting shift ","@waiting shift  run ","Thread  cri@waiting shift ical= ","@waiting shift  wakeup ","@wai@waiting shift ing shif@waiting shift  "]}," RSpec Mocks Mutex synchronize":{"type":"method","name":"synchronize","children":[],"call":[" unlock "," lock "]}," RSpec Mocks Mutex unlock":{"type":"method","name":"unlock","children":[],"call":[" wakeup_and_run_waiting_thread ","Thread  critical= "]}," RSpec Mocks Mutex lock":{"type":"method","name":"lock","children":[],"call":["Thread  critical= ","Thread  stop ","@waiting push ","Thread  current "]}," RSpec Mocks Mutex initialize":{"type":"method","name":"initialize","children":[],"call":[" taint ","@waiting taint "]}}