{" NhtsaVin get":{"type":"method","name":"get","children":[],"call":["query get ","NhtsaVin Query  new ","NhtsaVin Query  new  get "]}," NhtsaVin Query fetch":{"type":"method","name":"fetch","children":[],"call":["Net HTTP  get ","URI  parse ","e message ","resp message ","resp code "," raise ","resp body ","http request_get ","http send ","@http_options each ","Net HTTP  start ","url scheme == ","url scheme ","url port ","url host ","http_options update ","http request_get  message ","http request_get  code ","http request_get  body ","URI  parse  scheme == ","URI  parse  scheme ","URI  parse  port ","URI  parse  host "]}," NhtsaVin Query build_url":{"type":"method","name":"build_url","children":[],"call":[]}," NhtsaVin Query value_id_for":{"type":"method","name":"value_id_for","children":[],"call":[" get_row [] "," get_row "]}," NhtsaVin Query value_for":{"type":"method","name":"value_for","children":[],"call":[" get_row [] "," get_row "]}," NhtsaVin Query get_row":{"type":"method","name":"get_row","children":[],"call":["(send\n  (ivar :@data) :select) first ","r [] == ","r [] ","@data select "]}," NhtsaVin Query vehicle_type":{"type":"method","name":"vehicle_type","children":[],"call":["body_class =~ "]}," NhtsaVin Query parse":{"type":"method","name":"parse","children":[],"call":["Struct NhtsaResponse  new "," value_for "," vehicle_type "," value_for capitalize "," valid? "," value_id_for to_i < "," value_id_for to_i "," value_id_for ","json [] ","@error_code != ","@error_code < ","json dig "," vehicle_ vehicle_type  "," value_for _code != ","json dig _code != "," value_for _code < ","json dig _code < "]}," NhtsaVin Query valid?":{"type":"method","name":"valid?","children":[],"call":[]}," NhtsaVin Query get":{"type":"method","name":"get","children":[],"call":[" parse ","JSON  parse "," fetch ","@raw_response nil? "," raise ","@raw_response inspect ","ex message ","(lvasgn :json_response\n  (send\n    (const nil :JSON) :parse\n    (ivar :@raw_response))) nil? "," fetch  nil? "," fetch  inspect ","(lvasgn :json_response\n  (send\n    (const nil :JSON) :parse\n    (ivar : fetch ))) nil? ","(lvasgn :JSON  parse \n  (send\n    (const nil :JSON) :parse\n    (ivar :@raw_response))) nil? "]}," NhtsaVin Query initialize":{"type":"method","name":"initialize","children":[],"call":[" build_url ","options [] ","vin strip upcase ","vin strip "]}," NhtsaVin Validation checksum":{"type":"method","name":"checksum","children":[],"call":["checksum to_s ","checksum == ","m inject % ","m inject ","TRANSLITERATIONS  [] * ","WEIGHTS  [] ","TRANSLITERATIONS  [] ","char upcase to_sym ","char upcase ","char to_i * ","char to_i ","char !~ ","@vin chars each_with_index map ","@vin chars each_with_index ","@vin chars ","m inject %  to_s ","m inject %  == "]}," NhtsaVin Validation regex":{"type":"method","name":"regex","children":[],"call":["match_data [] ","(str \"\\n\") match ","(str \"\\n\") match  [] "]}," NhtsaVin Validation valid?":{"type":"method","name":"valid?","children":[],"call":[]}," NhtsaVin Validation initialize":{"type":"method","name":"initialize","children":[],"call":[" checksum "," checksum != "," regex ! "," regex ","vin strip ","vin nil? ","vin strip upcase "]}," NhtsaVin validate":{"type":"method","name":"validate","children":[],"call":["NhtsaVin Validation  new "]}}