{" TimeZone us_zones":{"type":"method","name":"us_zones","children":[],"call":["z name =~ ","z name "," all find_all "," all "]}," TimeZone []":{"type":"method","name":"[]","children":[],"call":[" raise ","arg inspect ","z utc_offset == ","arg to_i ","z utc_offset "," all find "," all ","arg abs <= ","arg abs ","z name == ","z name "]}," TimeZone all":{"type":"method","name":"all","children":[],"call":["@@zones sort! ","@@zones << "," create freeze "," create ","places each ","(array\n  (int -43200)\n  (str \"International Date Line West\")) each "]}," TimeZone new":{"type":"method","name":"new","children":[],"call":[" [] "]}," TimeZone create":{"type":"method","name":"create","children":[],"call":["zone send "," allocate ","zone send! "," allocate  send "," allocate  send! "]}," TimeZone to_s":{"type":"method","name":"to_s","children":[],"call":[" name "," formatted_offset "]}," TimeZone <=>":{"type":"method","name":"<=>","children":[],"call":[" name <=> ","zone name "," name ","result == "," utc_offset <=> ","zone utc_offset "," utc_offset "]}," TimeZone unadjust":{"type":"method","name":"unadjust","children":[],"call":["time - + ","time utc_offset ","time - "," utc_offset ","Time  local ","time to_time to_a ","time to_time ","time - - ","time localtime ","time is_a? ","Time  local  - + ","time localtime  - + ","time to_time  - + ","Time  local  utc_offset ","time localtime  utc_offset ","time to_time  utc_offset ","Time  local  - ","time localtime  - ","time to_time  - ","Time  local  to_Time  local  to_a ","time localtime  to_time localtime  to_a ","time to_time  to_time to_time  to_a ","Time  local  to_Time  local  ","time localtime  to_time localtime  ","time to_time  to_time to_time  ","Time  local  - - ","time localtime  - - ","time to_time  - - ","Time  local  localTime  local  ","time localtime  localtime localtime  ","time to_time  localtime to_time  ","Time  local  is_a? ","time localtime  is_a? ","time to_time  is_a? "]}," TimeZone adjust":{"type":"method","name":"adjust","children":[],"call":["time + - ","time utc_offset ","time + "," utc_offset ","time to_time ","time is_a? ","time to_time  + - ","time to_time  utc_offset ","time to_time  + ","time to_time  to_time to_time  ","time to_time  is_a? "]}," TimeZone today":{"type":"method","name":"today","children":[],"call":[" now to_date "," now "]}," TimeZone now":{"type":"method","name":"now","children":[],"call":[" adjust ","Time  now "]}," TimeZone formatted_offset":{"type":"method","name":"formatted_offset","children":[],"call":["%+03d%s%02d % ","hours * ","(send\n  (send\n    (send nil :utc_offset) :abs) :%\n  (int 3600)) / "," utc_offset abs % "," utc_offset abs "," utc_offset "," utc_offset abs / "," utc_offset < "," utc_offset == "," utc_offset abs /  * "]}," TimeZone initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Module mattr_accessor":{"type":"method","name":"mattr_accessor","children":[],"call":[" mattr_writer "," mattr_reader "," caller_locations first "," caller_locations "," caller_ caller_locations first s first "," caller_ caller_locations first s "]}," Module mattr_writer":{"type":"method","name":"mattr_writer","children":[],"call":[" class_eval ","sym id2name ","syms each ","options [] == ","options [] ","syms pop ","syms last is_a? ","syms last ","syms extract_options! ","54 + ","43 + ","35 + ","28 + ","26 + ","41 + ","30 + ","37 + "," raise ","NameError  new ","sym =~ "," send "," block_given? ","132 + ","123 + ","136 + ","127 + ","(str \"\\\\A[_A-Za-z]\\\\w*\\\\z\") match? ","sym_default_value nil? ","default nil? ","133 + ","124 + ","130 + ","121 + "," module_eval ","location lineno ","location path ","definition join "," class_variable_set "," class_variable_defined? ","definition << "," caller_locations first "," caller_locations "," singleton_class? ","syms pop  [] == ","syms extract_options!  [] == ","syms pop  [] ","syms extract_options!  [] ","syms extract_syms pop ! ","syms extract_syms extract_options! ! "]}," Module mattr_reader":{"type":"method","name":"mattr_reader","children":[],"call":[" class_eval ","sym id2name ","syms each ","sym is_a? ","31 + ","options [] == ","options [] ","20 + ","syms extract_options! ","16 + ","7 + ","18 + ","17 + ","8 + "," raise ","NameError  new ","sym =~ "," class_variable_set "," block_given? ","66 + ","57 + ","68 + ","59 + ","(str \"\\\\A[_A-Za-z]\\\\w*\\\\z\") match? ","sym_default_value nil? ","default nil? ","63 + ","54 + "," module_eval ","location lineno ","location path ","definition join "," class_variable_defined? ","definition << "," caller_locations first "," caller_locations "," singleton_class? ","syms extract_options!  [] == ","syms extract_options!  [] ","syms extract_syms extract_options! ! "]}," silence_warnings":{"type":"method","name":"silence_warnings","children":[],"call":[]}," Inflector singular_rules":{"type":"method","name":"singular_rules","children":[],"call":[]}," Inflector plural_rules":{"type":"method","name":"plural_rules","children":[],"call":[]}," Inflector constantize":{"type":"method","name":"constantize","children":[],"call":["final_type const_get ","camel_cased_word split inject ","camel_cased_word split ","Object  module_eval "," raise ","camel_cased_word inspect ","final_type const_get  const_get "]}," Inflector foreign_key":{"type":"method","name":"foreign_key","children":[],"call":["Inflector  underscore + ","Inflector  underscore ","Inflector  demodulize "," underscore + "," underscore "," demodulize "]}," Inflector classify":{"type":"method","name":"classify","children":[],"call":[" camelize "," singularize ","table_name to_s sub ","table_name to_s "]}," Inflector tableize":{"type":"method","name":"tableize","children":[],"call":[" pluralize "," underscore "]}," Inflector demodulize":{"type":"method","name":"demodulize","children":[],"call":["class_name_in_module to_s gsub ","class_name_in_module to_s "]}," Inflector humanize":{"type":"method","name":"humanize","children":[],"call":["lower_case_and_underscored_word to_s gsub capitalize ","lower_case_and_underscored_word to_s gsub ","lower_case_and_underscored_word to_s ","lower_case_and_underscored_word to_s gsub gsub capitalize ","lower_case_and_underscored_word to_s gsub gsub "]}," Inflector underscore":{"type":"method","name":"underscore","children":[],"call":["camel_cased_word to_s gsub gsub gsub downcase ","camel_cased_word to_s gsub gsub gsub ","camel_cased_word to_s gsub gsub ","camel_cased_word to_s gsub ","camel_cased_word to_s ","camel_cased_word to_s gsub gsub gsub tr downcase ","camel_cased_word to_s gsub gsub gsub tr "]}," Inflector camelize":{"type":"method","name":"camelize","children":[],"call":["2 upcase ","(send\n  (send\n    (lvar :lower_case_and_underscored_word) :to_s) :gsub\n  (regexp\n    (str \"/(.?)\")\n    (regopt))) gsub ",":: + ","1 upcase ","lower_case_and_underscored_word to_s gsub ","lower_case_and_underscored_word to_s ","lower_case_and_underscored_word first + "," camelize [] "," camelize ","lower_case_and_underscored_word first "]}," Inflector singularize":{"type":"method","name":"singularize","children":[],"call":["result gsub! "," singular_rules each "," singular_rules ","word to_s dup ","word to_s "," uncountable_words include? ","result downcase "," uncountable_words "," inflections singulars each "," inflections singulars "," inflections "," inflections uncountables include? "," inflections uncountables ","word to_s dup  gsub! ","word to_s dup  downcase "]}," Inflector pluralize":{"type":"method","name":"pluralize","children":[],"call":["result gsub! "," plural_rules each "," plural_rules ","word to_s dup ","word to_s "," uncountable_words include? ","result downcase "," uncountable_words "," inflections plurals each "," inflections plurals "," inflections "," inflections uncountables include? "," inflections uncountables ","word empty? ","word to_s dup  gsub! ","word to_s dup  downcase "]}," Exception describe_blame":{"type":"method","name":"describe_blame","children":[],"call":[" blamed_files join "," blamed_files "," blamed_files empty? "]}," Exception blamed_files":{"type":"method","name":"blamed_files","children":[],"call":[]}," Exception blame_file!":{"type":"method","name":"blame_file!","children":[],"call":["(or-asgn\n  (ivasgn :@blamed_files)\n  (array)) unshift "]}," Object require":{"type":"method","name":"require","children":[],"call":[" raise ","exception blame_file! ","Dependencies  new_constants_in ","ActiveSupport Dependencies  new_constants_in "]}," Object load":{"type":"method","name":"load","children":[],"call":[" raise ","exception blame_file! ","Dependencies  new_constants_in ","ActiveSupport Dependencies  new_constants_in "]}," Object const_missing":{"type":"method","name":"const_missing","children":[],"call":[" raise ","Object  const_get ","Object  const_defined? "," require_or_load ","class_id to_s demodulize underscore ","class_id to_s demodulize ","class_id to_s ","Object Controllers  const_get ","Object Controllers  const_available? ","NameError  new copy_blame! ","NameError  new "," require_dependency "]}," Dependencies ConstantLoadPath const_name_to_module_name":{"type":"method","name":"const_name_to_module_name","children":[],"call":["name to_s underscore ","name to_s "]}," Dependencies ConstantLoadPath const_name_to_file_name":{"type":"method","name":"const_name_to_file_name","children":[],"call":["name to_s underscore + ","name to_s underscore ","name to_s "]}," Dependencies ConstantLoadPath filesystem_path":{"type":"method","name":"filesystem_path","children":[],"call":["File  file? ","File  join "," const_name_to_file_name ","path last ","File  directory? "," const_name_to_module_name ","path [] collect ","path [] ","path [] map "]}," Dependencies ConstantLoadPath initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Dependencies RootLoadingModule clear!":{"type":"method","name":"clear!","children":[],"call":[" send ","Object  send "," path empty? "," path ","Object  const_defined? "," constants each "," constants ","Object  const_get object_id == "," const_get object_id "," const_get ","Object  const_get object_id ","Object  const_get "]}," Dependencies RootLoadingModule load_file!":{"type":"method","name":"load_file!","children":[],"call":[" raise ","exception blame_file! "," root module_eval ","IO  read "," root "," require_dependency "]}," Dependencies RootLoadingModule path":{"type":"method","name":"path","children":[],"call":[]}," Dependencies RootLoadingModule root":{"type":"method","name":"root","children":[],"call":[]}," Dependencies RootLoadingModule initialize":{"type":"method","name":"initialize","children":[],"call":["ConstantLoadPath  new ","p kind_of? ","paths flatten collect ","paths flatten "]}," Dependencies LoadingModule const_available?":{"type":"method","name":"const_available?","children":[],"call":["lp filesystem_path "," path + "," path "," load_paths any? "," load_paths "," const_defined? "]}," Dependencies LoadingModule const_load!":{"type":"method","name":"const_load!","children":[],"call":[" const_defined? "," root load_file! "," root ","File  file? "," const_set ","LoadingModule  new "," path + "," path ","File  directory? ","load_path filesystem_path "," load_paths each "," load_paths ","Object  const_get ","Object  const_defined? "," root? ","Object  const_set "," raise ","Object  const_get class to_s ","Object  const_get class ","Object  const_get inspect ","name to_s == ","name to_s "," const_defined? ! ","  path +  + ","  path +  ","load_ path +  filesystem_ path +  "," load_ path + s each "," load_ path + s "]}," Dependencies LoadingModule const_missing":{"type":"method","name":"const_missing","children":[],"call":[" const_get "," const_load! "]}," Dependencies LoadingModule load_paths":{"type":"method","name":"load_paths","children":[],"call":[" root load_paths "," root "]}," Dependencies LoadingModule initialize":{"type":"method","name":"initialize","children":[],"call":["path clone freeze ","path clone "]}," Dependencies LoadingModule root":{"type":"method","name":"root","children":[],"call":["RootLoadingModule  new "]}," Dependencies remove_subclasses_for":{"type":"method","name":"remove_subclasses_for","children":[],"call":["klass remove_subclasses ","classes each ","Object  remove_subclasses_of "]}," Dependencies require_or_load":{"type":"method","name":"require_or_load","children":[],"call":[" require "," load "," load? "," load? ! ","file_name [] == ","file_name [] "," history << "," history "," raise "," loaded delete "," loaded "," enable_warnings "," history include? "," warnings_on_first_load ! "," warnings_on_first_load "," loaded << "," loaded include? ","file_name =~ "," log "," load_file ","load_args << ","const_path nil? ","File  expand_path "," log_call "]}," Dependencies clear":{"type":"method","name":"clear","children":[],"call":[" loaded= "," loaded clear "," loaded "," remove_unloadable_constants! "," log_call "]}," Dependencies associate_with":{"type":"method","name":"associate_with","children":[],"call":[" depend_on "]}," Dependencies depend_on":{"type":"method","name":"depend_on","children":[],"call":[" raise ","e message "," require_or_load "," loaded << "," loaded "," loaded include? ! "," loaded include? "," search_for_file "]}," Dependencies load?":{"type":"method","name":"load?","children":[],"call":[" mechanism == "," mechanism "]}," ActiveSupport CoreExtensions Time Conversions to_time":{"type":"method","name":"to_time","children":[],"call":[]}," ActiveSupport CoreExtensions Time Conversions to_date":{"type":"method","name":"to_date","children":[],"call":[" Date  new "," day "," month "," year "]}," ActiveSupport CoreExtensions Time Conversions to_formatted_s":{"type":"method","name":"to_formatted_s","children":[],"call":[" strftime strip "," strftime "," to_default_s ","DATE_FORMATS  [] ","formatter call to_s ","formatter call ","formatter respond_to? ","DATE_FORMATS  []  call to_s ","DATE_FORMATS  []  call ","DATE_FORMATS  []  respond_to? "]}," ActiveSupport CoreExtensions Time Conversions append_features":{"type":"method","name":"append_features","children":[],"call":[]}," ActiveSupport CoreExtensions Time Calculations tomorrow":{"type":"method","name":"tomorrow","children":[],"call":[" since ","1 day "," advance "]}," ActiveSupport CoreExtensions Time Calculations yesterday":{"type":"method","name":"yesterday","children":[],"call":[" ago ","1 day "," advance "]}," ActiveSupport CoreExtensions Time Calculations beginning_of_year":{"type":"method","name":"beginning_of_year","children":[],"call":[" change "]}," ActiveSupport CoreExtensions Time Calculations beginning_of_month":{"type":"method","name":"beginning_of_month","children":[],"call":[" change "]}," ActiveSupport CoreExtensions Time Calculations beginning_of_day":{"type":"method","name":"beginning_of_day","children":[],"call":[" - "," seconds_since_midnight ","(send\n  (self) :-\n  (send\n    (self) :seconds_since_midnight)) change "," change "]}," ActiveSupport CoreExtensions Time Calculations next_week":{"type":"method","name":"next_week","children":[],"call":[" since beginning_of_week since change "," since beginning_of_week since ","days_into_week [] day ","days_into_week [] "," since beginning_of_week "," since ","1 week "]}," ActiveSupport CoreExtensions Time Calculations beginning_of_week":{"type":"method","name":"beginning_of_week","children":[],"call":["(send\n  (self) :-\n  (send\n    (send\n      (self) :wday) :days)) midnight + ","1 day ","(send\n  (self) :-\n  (send\n    (send\n      (self) :wday) :days)) midnight "," - "," wday days "," wday ","(send\n  (self) :-\n  (send\n    (lvar :days_to_monday) :days)) midnight ","days_to_monday days "," wday - "," wday != ","(send\n  (self) :-\n  (send\n    (lvar : wday - ) :days)) midnight "," wday -  days "]}," ActiveSupport CoreExtensions Time Calculations next_month":{"type":"method","name":"next_month","children":[],"call":[" months_since "]}," ActiveSupport CoreExtensions Time Calculations last_month":{"type":"method","name":"last_month","children":[],"call":[" months_ago "," prev_month ","ActiveSupport Deprecation  warn "," caller "]}," ActiveSupport CoreExtensions Time Calculations next_year":{"type":"method","name":"next_year","children":[],"call":[" years_since "]}," ActiveSupport CoreExtensions Time Calculations last_year":{"type":"method","name":"last_year","children":[],"call":[" years_since "," years_ago "," prev_year ","ActiveSupport Deprecation  warn "," caller "]}," ActiveSupport CoreExtensions Time Calculations years_since":{"type":"method","name":"years_since","children":[],"call":[" change "," year + "," year "," advance "]}," ActiveSupport CoreExtensions Time Calculations years_ago":{"type":"method","name":"years_ago","children":[],"call":[" change "," year - "," year "," advance ","years -@ "]}," ActiveSupport CoreExtensions Time Calculations months_since":{"type":"method","name":"months_since","children":[],"call":[" change "," month + "," month "," year "," change months_since ","months - "," month == "," year + ","months + > ","months + ","months + - - ","months + - ","old_time month ","mday > "," Time  days_in_month ","month > ","month < "," mday "," advance "]}," ActiveSupport CoreExtensions Time Calculations months_ago":{"type":"method","name":"months_ago","children":[],"call":[" change "," month - "," month "," year "," change months_ago ","months - "," year - ","months >= "," months_since ","months -@ "," advance "]}," ActiveSupport CoreExtensions Time Calculations since":{"type":"method","name":"since","children":[],"call":["seconds since ","f + ","(send\n  (lvar :initial_dst) :-\n  (lvar :final_dst)) hours ","initial_dst - ","initial_dst != ","seconds abs >= ","seconds abs ","f dst? "," dst? "," to_datetime since "," to_datetime ","ActiveSupport Duration  === ","seconds since  + ","(send\n  (lvar :initial_dst) :-\n  (lvar :seconds since inal_dst)) hours ","seconds since  dst? "]}," ActiveSupport CoreExtensions Time Calculations ago":{"type":"method","name":"ago","children":[],"call":["seconds until "," since ","seconds -@ "]}," ActiveSupport CoreExtensions Time Calculations change":{"type":"method","name":"change","children":[],"call":[" Time  send "," usec ","options [] "," sec "," min "," hour "," mday "," month "," year "," utc? "," day "]}," ActiveSupport CoreExtensions Time Calculations seconds_since_midnight":{"type":"method","name":"seconds_since_midnight","children":[],"call":[" hour hours + + + "," usec / "," usec "," hour hours + + "," sec "," hour hours + "," min minutes "," min "," hour hours "," hour "," to_i - + "," to_i - "," change to_i "," change "," to_i "]}," ActiveSupport CoreExtensions String Inflections constantize":{"type":"method","name":"constantize","children":[],"call":["Inflector  constantize "]}," ActiveSupport CoreExtensions String Inflections foreign_key":{"type":"method","name":"foreign_key","children":[],"call":["Inflector  foreign_key "]}," ActiveSupport CoreExtensions String Inflections humanize":{"type":"method","name":"humanize","children":[],"call":["Inflector  humanize "]}," ActiveSupport CoreExtensions String Inflections classify":{"type":"method","name":"classify","children":[],"call":["Inflector  classify "]}," ActiveSupport CoreExtensions String Inflections tableize":{"type":"method","name":"tableize","children":[],"call":["Inflector  tableize "]}," ActiveSupport CoreExtensions String Inflections demodulize":{"type":"method","name":"demodulize","children":[],"call":["Inflector  demodulize "]}," ActiveSupport CoreExtensions String Inflections underscore":{"type":"method","name":"underscore","children":[],"call":["Inflector  underscore "]}," ActiveSupport CoreExtensions String Inflections camelize":{"type":"method","name":"camelize","children":[],"call":["Inflector  camelize "]}," ActiveSupport CoreExtensions String Inflections singularize":{"type":"method","name":"singularize","children":[],"call":["Inflector  singularize "]}," ActiveSupport CoreExtensions String Inflections pluralize":{"type":"method","name":"pluralize","children":[],"call":["Inflector  pluralize "]}," Class subclasses":{"type":"method","name":"subclasses","children":[],"call":["Object  subclasses_of ","o to_s ","Object  subclasses_of map ","subclasses << ","c > ","chain any? ","chain each "," descendants ","Class  subclasses_of map ","Class  subclasses_of ","descendant superclass == ","descendant superclass "," descendants select "]}," Class remove_subclasses":{"type":"method","name":"remove_subclasses","children":[],"call":["Object  remove_subclasses_of "]}," Object subclasses_of":{"type":"method","name":"subclasses_of","children":[],"call":["subclasses << ","k to_s ","subclasses include? ","k to_s include? ","superclass == ","k ancestors include? ! ","k ancestors include? ","k ancestors ","ObjectSpace  each_object ","superclasses include? ","(send\n  (send\n    (lvar :k) :ancestors) :&\n  (lvar :superclasses)) empty? ","k ancestors & "," eval object_id != ","k object_id "," eval object_id "," eval ","k name blank? ","k name ","k < ","superclasses any? ","k != ","superclasses each ","subclasses uniq! ","Class  subclasses_of "]}," Object remove_subclasses_of":{"type":"method","name":"remove_subclasses_of","children":[],"call":["Object  send "," subclasses_of each "," subclasses_of ","k send ","k instance_variables each ","k instance_variables ","k to_s == ","k to_s ","ObjectSpace  each_object ","subclass to_s ","subclass send ","subclass instance_variables each ","subclass instance_variables ","Class  remove_class "]}," ActiveSupport CoreExtensions Numeric Time since":{"type":"method","name":"since","children":[],"call":["time + "]}," ActiveSupport CoreExtensions Numeric Time ago":{"type":"method","name":"ago","children":[],"call":["time - "]}," ActiveSupport CoreExtensions Numeric Time years":{"type":"method","name":"years","children":[],"call":[" * ","365 days ","(send\n  (self) :*\n  (send\n    (float 365.25) :days)) to_i ","365.25 days ","ActiveSupport Duration  new "]}," ActiveSupport CoreExtensions Numeric Time months":{"type":"method","name":"months","children":[],"call":[" * ","30 days ","ActiveSupport Duration  new "]}," ActiveSupport CoreExtensions Numeric Time fortnights":{"type":"method","name":"fortnights","children":[],"call":[" * ","2 weeks ","ActiveSupport Duration  new "]}," ActiveSupport CoreExtensions Numeric Time weeks":{"type":"method","name":"weeks","children":[],"call":[" * ","7 days ","ActiveSupport Duration  new "]}," ActiveSupport CoreExtensions Numeric Time days":{"type":"method","name":"days","children":[],"call":[" * ","24 hours ","ActiveSupport Duration  new "]}," ActiveSupport CoreExtensions Numeric Time hours":{"type":"method","name":"hours","children":[],"call":[" * ","60 minutes ","ActiveSupport Duration  new "]}," ActiveSupport CoreExtensions Numeric Time minutes":{"type":"method","name":"minutes","children":[],"call":[" * ","ActiveSupport Duration  new "]}," ActiveSupport CoreExtensions Numeric Bytes terabytes":{"type":"method","name":"terabytes","children":[],"call":[" * ","1024 gigabytes "]}," ActiveSupport CoreExtensions Numeric Bytes gigabytes":{"type":"method","name":"gigabytes","children":[],"call":[" * ","1024 megabytes "]}," ActiveSupport CoreExtensions Numeric Bytes megabytes":{"type":"method","name":"megabytes","children":[],"call":[" * ","1024 kilobytes "]}," ActiveSupport CoreExtensions Numeric Bytes kilobytes":{"type":"method","name":"kilobytes","children":[],"call":[" * "]}," ActiveSupport CoreExtensions Numeric Bytes bytes":{"type":"method","name":"bytes","children":[],"call":[]}," ActiveSupport CoreExtensions Hash Keys assert_valid_keys":{"type":"method","name":"assert_valid_keys","children":[],"call":[" raise ","unknown_keys join ","unknown_keys empty? "," keys - "," keys ","(lvar :valid_keys) flatten "," keys -  join "," keys -  empty? "]}," ActiveSupport CoreExtensions Hash Keys symbolize_keys!":{"type":"method","name":"symbolize_keys!","children":[],"call":[" delete "," []= "," [] ","key to_sym ","key is_a? "," keys each "," keys ","(lvasgn :new_key\n  (send\n    (lvar :key) :to_sym)) nil? "," replace "," symbolize_keys ","(lvasgn :key to_sym \n  (send\n    (lvar :key) :to_sym)) nil? "]}," ActiveSupport CoreExtensions Hash Keys symbolize_keys":{"type":"method","name":"symbolize_keys","children":[],"call":["options []= ","key to_sym "," inject "]}," ActiveSupport CoreExtensions Hash Keys stringify_keys!":{"type":"method","name":"stringify_keys!","children":[],"call":[" delete "," []= "," [] ","key to_s ","key class to_s == ","key class to_s ","key class "," keys each "," keys "]}," ActiveSupport CoreExtensions Hash Keys stringify_keys":{"type":"method","name":"stringify_keys","children":[],"call":["options []= ","key to_s "," inject "]}," ActiveSupport CoreExtensions Date Conversions to_time":{"type":"method","name":"to_time","children":[],"call":[" Time  send "," day "," month "," year "," sec "," min "," hour "," respond_to? "]}," ActiveSupport CoreExtensions Date Conversions to_date":{"type":"method","name":"to_date","children":[],"call":[]}," ActiveSupport CoreExtensions Date Conversions to_formatted_s":{"type":"method","name":"to_formatted_s","children":[],"call":[" strftime strip "," strftime "," to_default_s ","DATE_FORMATS  [] ","formatter call to_s ","formatter call ","formatter respond_to? ","DATE_FORMATS  []  call to_s ","DATE_FORMATS  []  call ","DATE_FORMATS  []  respond_to? "]}," ActiveSupport CoreExtensions Date Conversions append_features":{"type":"method","name":"append_features","children":[],"call":[]}," Logger format_message":{"type":"method","name":"format_message","children":[],"call":["Format  % "," formatter call "," formatter "]}," Class inherited_with_inheritable_attributes":{"type":"method","name":"inherited_with_inheritable_attributes","children":[],"call":["child instance_variable_set "," inheritable_attributes dup "," inheritable_attributes "," inherited_without_inheritable_attributes "," respond_to? ","memo update ","value dup "," inheritable_attributes inject "," inheritable_attributes equal? ","value duplicable? ","Hash  [] "," inheritable_attributes map "]}," Class reset_inheritable_attributes":{"type":"method","name":"reset_inheritable_attributes","children":[],"call":[" inheritable_attributes clear "," inheritable_attributes ","ActiveSupport Deprecation  warn "]}," Class read_inheritable_attribute":{"type":"method","name":"read_inheritable_attribute","children":[],"call":[" inheritable_attributes [] "," inheritable_attributes ","ActiveSupport Deprecation  warn "]}," Class write_inheritable_hash":{"type":"method","name":"write_inheritable_hash","children":[],"call":[" write_inheritable_attribute "," read_inheritable_attribute merge "," read_inheritable_attribute "," read_inheritable_attribute nil? "]}," Class write_inheritable_array":{"type":"method","name":"write_inheritable_array","children":[],"call":[" write_inheritable_attribute "," read_inheritable_attribute + "," read_inheritable_attribute "," read_inheritable_attribute nil? "]}," Class write_inheritable_attribute":{"type":"method","name":"write_inheritable_attribute","children":[],"call":[" inheritable_attributes []= "," inheritable_attributes "," inheritable_attributes equal? ","ActiveSupport Deprecation  warn "]}," Class inheritable_attributes":{"type":"method","name":"inheritable_attributes","children":[],"call":[]}," Class class_inheritable_hash":{"type":"method","name":"class_inheritable_hash","children":[],"call":[" class_inheritable_hash_writer "," class_inheritable_reader "]}," Class class_inheritable_array":{"type":"method","name":"class_inheritable_array","children":[],"call":[" class_inheritable_array_writer "," class_inheritable_reader "]}," Class class_inheritable_accessor":{"type":"method","name":"class_inheritable_accessor","children":[],"call":[" class_inheritable_writer "," class_inheritable_reader "]}," Class class_inheritable_hash_writer":{"type":"method","name":"class_inheritable_hash_writer","children":[],"call":[" class_eval ","syms each ","options [] == ","options [] ","syms pop ","syms last is_a? ","syms last ","syms extract_options! ","93 + ","68 + ","71 + ","64 + ","99 + ","ActiveSupport Deprecation  warn ","syms pop  [] == ","syms extract_options!  [] == ","syms pop  [] ","syms extract_options!  [] ","syms extract_syms pop ! ","syms extract_syms extract_options! ! "]}," Class class_inheritable_array_writer":{"type":"method","name":"class_inheritable_array_writer","children":[],"call":[" class_eval ","syms each ","options [] == ","options [] ","syms pop ","syms last is_a? ","syms last ","syms extract_options! ","76 + ","51 + ","54 + ","47 + ","81 + ","ActiveSupport Deprecation  warn ","syms pop  [] == ","syms extract_options!  [] == ","syms pop  [] ","syms extract_options!  [] ","syms extract_syms pop ! ","syms extract_syms extract_options! ! "]}," Class class_inheritable_writer":{"type":"method","name":"class_inheritable_writer","children":[],"call":[" class_eval ","syms each ","options [] == ","options [] ","syms pop ","syms last is_a? ","syms last ","syms extract_options! ","59 + ","34 + ","37 + ","30 + ","63 + ","ActiveSupport Deprecation  warn ","syms pop  [] == ","syms extract_options!  [] == ","syms pop  [] ","syms extract_options!  [] ","syms extract_syms pop ! ","syms extract_syms extract_options! ! "]}," Class class_inheritable_reader":{"type":"method","name":"class_inheritable_reader","children":[],"call":[" class_eval ","syms each ","sym is_a? ","42 + ","options [] == ","options [] ","syms extract_options! ","17 + ","20 + ","15 + ","45 + ","ActiveSupport Deprecation  warn ","syms extract_options!  [] == ","syms extract_options!  [] ","syms extract_syms extract_options! ! "]}," Class cattr_accessor":{"type":"method","name":"cattr_accessor","children":[],"call":[" cattr_writer "," cattr_reader "]}," Class cattr_writer":{"type":"method","name":"cattr_writer","children":[],"call":[" class_eval ","sym id2name ","syms each ","(send\n  (lvar :syms) :select) each ","sym respond_to? ","syms select ","syms flatten each ","syms flatten ","options [] == ","options [] ","syms pop ","syms last is_a? ","syms last ","syms extract_options! ","48 + ","37 + "," send "," block_given? ","65 + ","54 + ","34 + ","49 + ","38 + ","66 + ","55 + ","106 + ","95 + ","108 + ","97 + "," raise ","NameError  new ","sym =~ ","syms pop  [] == ","syms extract_options!  [] == ","syms pop  [] ","syms extract_options!  [] ","syms extract_syms pop ! ","syms extract_syms extract_options! ! "]}," Class cattr_reader":{"type":"method","name":"cattr_reader","children":[],"call":[" class_eval ","sym id2name ","syms each ","(send\n  (lvar :syms) :select) each ","sym respond_to? ","syms select ","syms flatten each ","syms flatten ","sym is_a? ","25 + ","options [] == ","options [] ","14 + ","syms extract_options! ","42 + ","31 + ","15 + ","26 + ","43 + ","32 + ","46 + ","35 + ","47 + ","36 + "," raise ","NameError  new ","sym =~ ","syms extract_options!  [] == ","syms extract_options!  [] ","syms extract_syms extract_options! ! "]}," assert":{"type":"method","name":"assert","children":[],"call":["Breakpoint  assert ","Binding  of_caller "]}," breakpoint":{"type":"method","name":"breakpoint","children":[],"call":["Breakpoint  breakpoint ","Binding  of_caller "]}," IRB InputCompletor eval":{"type":"method","name":"eval","children":[],"call":[]}," IRB WorkSpace evaluate":{"type":"method","name":"evaluate","children":[],"call":[" old_evaluate ","result extend ","(true) include? ! ","(true) include? ","args [] != ","args [] ","Breakpoint  use_drb? "," old_evaluate  extend "]}," IRB Context evaluate":{"type":"method","name":"evaluate","children":[],"call":[" old_evaluate "," exit ","line chomp == ","line chomp "]}," IRB parse_opts":{"type":"method","name":"parse_opts","children":[],"call":[]}," IRB CurrentContext":{"type":"method","name":"CurrentContext","children":[{"type":"method","name":"last_value","children":[],"asgn":[],"call":[]}],"call":[]}," IRB start":{"type":"method","name":"start","children":[],"call":[]}," Breakpoint use_drb?":{"type":"method","name":"use_drb?","children":[],"call":["@use_drb == "]}," Breakpoint deactivate_drb":{"type":"method","name":"deactivate_drb","children":[],"call":["@service stop_service ","@service nil? "]}," Breakpoint activate_drb":{"type":"method","name":"activate_drb","children":[],"call":[" sleep ","DRbObject  new collision ","DRbObject  new ","DRb  start_service ","DRbService  new ","DRb  install_acl ","ACL  new "," Array each "," Array "]}," Breakpoint DRbService add_breakpoint":{"type":"method","name":"add_breakpoint","children":[],"call":["@handler call ","@handler untaint "," sleep ","workspace extend ","IRB WorkSpace  new ","IRB WorkSpace  new  extend "]}," Breakpoint DRbService ping":{"type":"method","name":"ping","children":[],"call":[]}," Breakpoint DRbService collision":{"type":"method","name":"collision","children":[],"call":["@collision_handler call ","@collision_handler untaint "," sleep "]}," Breakpoint DRbService initialize":{"type":"method","name":"initialize","children":[],"call":["IRB  run_config ","@CONF []= ","IRB  instance_eval "]}," Breakpoint assert":{"type":"method","name":"assert","children":[],"call":[" handle_breakpoint ","Binding  of_caller "," raise ","$DEBUG ! ","Breakpoint  asserts_cause_exceptions ","callstack first match captures ","callstack first match ","callstack first ","callstack slice! ","callstack first [] "," caller ","Breakpoint  optimize_asserts "," caller  first match captures "," caller  first match "," caller  first "," caller  slice! "," caller  first [] "]}," Breakpoint handle_breakpoint":{"type":"method","name":"handle_breakpoint","children":[],"call":["block call ","@drb_service add_breakpoint ","IRB  start ","IRB WorkSpace  new "," puts "," use_drb? ! "," use_drb? "," eval ","file inspect "," catch "]}," Breakpoint CommandBundle client":{"type":"method","name":"client","children":[],"call":["Client  new "," eval "," lambda ","Breakpoint  drb_service eval_handler ","Breakpoint  drb_service "," sleep ","Breakpoint  use_drb? "]}," Breakpoint CommandBundle source_lines":{"type":"method","name":"source_lines","children":[],"call":["lines [] ","end_line - ","start_line - ","break_line + ","(send\n  (lvar :break_line) :-\n  (lvar :context)) max ","break_line - ","line chomp ","File  readlines map ","File  readlines ","break_line +  - ","(send\n  (lvar :break_line) :-\n  (lvar :context)) max  - "]}," Breakpoint CommandBundle Client method_missing":{"type":"method","name":"method_missing","children":[],"call":["remote call_with_block "," eval ","block ! ","args empty? "," eval  call_with_block "]}," Breakpoint CommandBundle Client eval":{"type":"method","name":"eval","children":[],"call":["@eval_handler call "]}," Breakpoint CommandBundle Client initialize":{"type":"method","name":"initialize","children":[],"call":["eval_handler untaint "]}," Breakpoint breakpoint":{"type":"method","name":"breakpoint","children":[],"call":[" handle_breakpoint ","Binding  of_caller ","Executing break point  + + + ","Executing break point  + + ","Executing break point  + ","id inspect ","callstack first match captures ","callstack first match ","callstack first ","callstack slice! ","callstack first [] "," caller "," caller  first match captures "," caller  first match "," caller  first "," caller  slice! "," caller  first [] "]}," of_caller":{"type":"method","name":"of_caller","children":[],"call":[]}," create":{"type":"method","name":"create","children":[],"call":[]}," Dependencies LoadingModule root?":{"type":"method","name":"root?","children":[],"call":[" root == "," root "]}," ActiveSupport CoreExtensions String Conversions to_date":{"type":"method","name":"to_date","children":[],"call":[" Date  new ","ParseDate  parsedate [] ","ParseDate  parsedate "," Date  _parse values_at "," Date  _parse "]}," ActiveSupport CoreExtensions String Conversions to_time":{"type":"method","name":"to_time","children":[],"call":[" Time  send ","ParseDate  parsedate ","ParseDate  parsedate [] map ","ParseDate  parsedate [] "," Date  _parse values_at map "," Date  _parse values_at "," Date  _parse "]}," Object blank?":{"type":"method","name":"blank?","children":[],"call":[" ! "," zero? "," respond_to? "," empty? "," strip empty? "," strip "," empty? ! ! "," empty? ! "]}," Kernel returning":{"type":"method","name":"returning","children":[],"call":[]}," Exception copy_blame!":{"type":"method","name":"copy_blame!","children":[],"call":["exc blamed_files clone ","exc blamed_files "]}," Object suppress":{"type":"method","name":"suppress","children":[],"call":[" raise ","e kind_of? ","exception_classes any? "]}," ActiveSupport CoreExtensions LoadErrorExtensions LoadErrorClassMethods new":{"type":"method","name":"new","children":[],"call":["MissingSourceFile  from_message ","args first "," == "]}," MissingSourceFile from_message":{"type":"method","name":"from_message","children":[],"call":[]}," MissingSourceFile is_missing?":{"type":"method","name":"is_missing?","children":[],"call":["path gsub == "," path gsub "," path ","path gsub "]}," MissingSourceFile initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport CoreExtensions Fixnum EvenOdd odd?":{"type":"method","name":"odd?","children":[],"call":[" even? ! "," even? "]}," ActiveSupport CoreExtensions Fixnum EvenOdd even?":{"type":"method","name":"even?","children":[],"call":[" % == "," % "," multiple_of? "]}," NilClass raise_nil_warning_for":{"type":"method","name":"raise_nil_warning_for","children":[],"call":[" raise "," caller ","NIL_WARNING_MESSAGE  % ","message << "]}," NilClass method_missing":{"type":"method","name":"method_missing","children":[],"call":[" raise_nil_warning_for "," caller ","@@method_class_map [] ","@@method_class_map include? ","METHOD_CLASS_MAP  [] ","method == "," raise "]}," NilClass id":{"type":"method","name":"id","children":[],"call":[" raise "," caller "," object_id "]}," Inflector uncountable_words":{"type":"method","name":"uncountable_words","children":[],"call":[]}," Module const_missing":{"type":"method","name":"const_missing","children":[],"call":[" raise ","NameError  new copy_blame! ","NameError  new ","Object  const_get ","Object  const_defined? "," require_dependency ","class_id to_s demodulize underscore ","class_id to_s demodulize ","class_id to_s ","Object Controllers  const_get ","Object Controllers  const_available? "," rails_original_const_missing ","e path == ","e path ","e is_missing? "," parent send "," parent "," suppress ","(send\n  (send nil :parents) :any?) ! ","p const_defined? "," parents any? "," parents "," parent != "," const_set ","Module  new ","File  directory? ","$LOAD_PATH any? "," const_get "," const_defined? "," name "," == "," as_load_path "," as_load_path empty? ","Dependencies  load_missing_constant ","ActiveSupport Dependencies  load_missing_constant ","class_id to_s deModule  new ulize underscore ","class_id to_s deModule  new ulize "]}," ActiveSupport CoreExtensions Hash IndifferentAccess with_indifferent_access":{"type":"method","name":"with_indifferent_access","children":[],"call":["HashWithIndifferentAccess  new ","hash default= "," default ","HashWithIndifferentAccess  new  default= "]}," HashWithIndifferentAccess convert_value":{"type":"method","name":"convert_value","children":[],"call":["value with_indifferent_access ","value is_a? ","e with_indifferent_access ","e is_a? ","value collect "]}," HashWithIndifferentAccess convert_key":{"type":"method","name":"convert_key","children":[],"call":["key to_s ","key kind_of? "]}," HashWithIndifferentAccess values_at":{"type":"method","name":"values_at","children":[],"call":[" [] "," convert_key ","indices collect "]}," HashWithIndifferentAccess fetch":{"type":"method","name":"fetch","children":[],"call":[" convert_key "]}," HashWithIndifferentAccess key?":{"type":"method","name":"key?","children":[],"call":[" convert_key "]}," HashWithIndifferentAccess update":{"type":"method","name":"update","children":[],"call":[" []= ","hash each "," regular_writer "," convert_value "," convert_key ","other_hash each_pair "]}," HashWithIndifferentAccess []=":{"type":"method","name":"[]=","children":[],"call":[" regular_writer "," convert_value "," convert_key "]}," HashWithIndifferentAccess default":{"type":"method","name":"default","children":[],"call":[" [] ","key to_s ","key is_a? "," include? ","key to_s  to_s ","key to_s  is_a? "]}," HashWithIndifferentAccess initialize":{"type":"method","name":"initialize","children":[],"call":[" update ","constructor is_a? "]}," ActiveSupport CoreExtensions Fixnum EvenOdd multiple_of?":{"type":"method","name":"multiple_of?","children":[],"call":[" % == "," % "]}," ActiveSupport CoreExtensions CGI EscapeSkippingSlashes escape_skipping_slashes":{"type":"method","name":"escape_skipping_slashes","children":[],"call":["(send\n  (lvar :str) :gsub\n  (regexp\n    (str \"([^ /a-zA-Z0-9_.-])\")\n    (regopt :n))) tr ","1 unpack first upcase ","1 unpack first ","1 unpack ","str gsub ","str join ","str respond_to? ","1 unpack join upcase ","1 unpack join ","H2 * ","1 bytesize ","(send\n  (lvar :str join ) :gsub\n  (regexp\n    (str join  \"([^ /a-zA-Z0-9_.-])\")\n    (regopt :n))) tr ","str join  gsub ","str join  join ","str join  respond_to? "]}," ActiveSupport CoreExtensions Array ToParam to_param":{"type":"method","name":"to_param","children":[],"call":[" join "]}," Logger silence":{"type":"method","name":"silence","children":[],"call":[" level= "," level "," silencer "]}," Object remove_instance_variables_of":{"type":"method","name":"remove_instance_variables_of","children":[],"call":["k send ","k instance_variables each ","k instance_variables ","k to_s == ","k to_s ","ObjectSpace  each_object "]}," OrderedOptions find_pair":{"type":"method","name":"find_pair","children":[],"call":["i first == ","i first "," each "]}," OrderedOptions method_missing":{"type":"method","name":"method_missing","children":[],"call":[" [] "," []= ","args first ","1 to_sym ","name to_s =~ ","name to_s "]}," OrderedOptions []":{"type":"method","name":"[]","children":[],"call":["pair last "," find_pair ","key to_sym "," find_pair  last "," find_ find_pair  "]}," OrderedOptions []=":{"type":"method","name":"[]=","children":[],"call":[" << ","pair << ","pair pop "," find_pair ","key to_sym "," find_pair  << "," find_pair  pop "," find_ find_pair  ","key to_sym  to_sym "]}," ActiveSupport CoreExtensions Time Calculations ClassMethods days_in_month":{"type":"method","name":"days_in_month","children":[],"call":["month % == ","month % ","month <= ","year % == ","year % ","year % != ","year nil? ! ","year nil? ","month == ","COMMON_YEAR_DAYS_IN_MONTH  [] "," Date  gregorian_leap? "]}," ActiveSupport CoreExtensions Time Calculations append_features":{"type":"method","name":"append_features","children":[],"call":[]}," ActiveSupport CoreExtensions String StartsEndsWith ends_with?":{"type":"method","name":"ends_with?","children":[],"call":[" [] == "," [] ","suffix length ","suffix length -@ ","suffix to_s ","suffix respond_to? ","suffix to_s  length ","suffix to_s  length -@ ","suffix to_s  to_s ","suffix to_s  respond_to? "]}," ActiveSupport CoreExtensions String StartsEndsWith starts_with?":{"type":"method","name":"starts_with?","children":[],"call":[" [] == "," [] ","prefix length ","prefix to_s ","prefix respond_to? ","prefix to_s  length ","prefix to_s  to_s ","prefix to_s  respond_to? "]}," ActiveSupport CoreExtensions String Access last":{"type":"method","name":"last","children":[],"call":[" [] ","limit -@ ","(or\n  (send\n    (send nil :chars) :[]\n    (irange\n      (begin\n        (send\n          (lvar :limit) :-@))\n      (int -1)))\n  (self)) to_s "," chars [] "," chars "," from ","(or\n  (send\n    (send nil :mb_chars) :[]\n    (irange\n      (begin\n        (send\n          (lvar :limit) :-@))\n      (int -1)))\n  (self)) to_s "," mb_chars [] "," mb_chars "," mb_chars [] to_s ","limit >= "," size ","limit == "]}," ActiveSupport CoreExtensions String Access first":{"type":"method","name":"first","children":[],"call":[" [] ","limit - "," chars [] to_s "," chars [] "," chars "," mb_chars [] to_s "," mb_chars [] "," mb_chars ","limit >= "," size ","limit == "," to "]}," ActiveSupport CoreExtensions String Access to":{"type":"method","name":"to","children":[],"call":[" [] "," chars [] to_s "," chars [] "," chars "," mb_chars [] to_s "," mb_chars [] "," mb_chars "]}," ActiveSupport CoreExtensions String Access from":{"type":"method","name":"from","children":[],"call":[" [] "," chars [] to_s "," chars [] "," chars "," mb_chars [] to_s "," mb_chars [] "," mb_chars "]}," ActiveSupport CoreExtensions String Access at":{"type":"method","name":"at","children":[],"call":[" [] "," chars [] to_s "," chars [] "," chars "," mb_chars [] to_s "," mb_chars [] "," mb_chars "]}," ActiveSupport CoreExtensions Range Conversions to_formatted_s":{"type":"method","name":"to_formatted_s","children":[],"call":[" to_default_s ","DATE_FORMATS  [] call "," last "," first ","DATE_FORMATS  [] ","RANGE_FORMATS  [] call ","RANGE_FORMATS  [] "]}," ActiveSupport CoreExtensions Range Conversions included":{"type":"method","name":"included","children":[],"call":[]}," Kernel require_library_or_gem":{"type":"method","name":"require_library_or_gem","children":[],"call":[" raise "," require "," silence_warnings "]}," Kernel silence_warnings":{"type":"method","name":"silence_warnings","children":[],"call":[" with_warnings "]}," ActiveSupport CoreExtensions Integer Inflections ordinalize":{"type":"method","name":"ordinalize","children":[],"call":["Inflector  ordinalize "]}," ActiveSupport CoreExtensions Integer EvenOdd odd?":{"type":"method","name":"odd?","children":[],"call":[" even? ! "," even? "]}," ActiveSupport CoreExtensions Integer EvenOdd even?":{"type":"method","name":"even?","children":[],"call":[" multiple_of? "]}," ActiveSupport CoreExtensions Integer EvenOdd multiple_of?":{"type":"method","name":"multiple_of?","children":[],"call":[" % == "," % "]}," ActiveSupport CoreExtensions Hash ReverseMerge reverse_merge!":{"type":"method","name":"reverse_merge!","children":[],"call":[" replace "," reverse_merge "]}," ActiveSupport CoreExtensions Hash ReverseMerge reverse_merge":{"type":"method","name":"reverse_merge","children":[],"call":["other_hash merge "]}," Exception framework_backtrace":{"type":"method","name":"framework_backtrace","children":[],"call":["line =~ "," clean_backtrace select "," clean_backtrace "," clean_backtrace grep "]}," Exception application_backtrace":{"type":"method","name":"application_backtrace","children":[],"call":["before_application_frame ! ","(send\n  (lvar :line) :=~\n  (const nil :FrameworkRegexp)) ! ! ","(send\n  (lvar :line) :=~\n  (const nil :FrameworkRegexp)) ! ","line =~ "," clean_backtrace reject "," clean_backtrace "]}," Exception clean_backtrace":{"type":"method","name":"clean_backtrace","children":[],"call":["line gsub ","TraceSubstitutions  inject "," backtrace collect "," backtrace ","Pathname  clean_within ","result gsub ","Exception  clean_paths "]}," Enumerable first_match":{"type":"method","name":"first_match","children":[],"call":[" each "]}," ActiveSupport CoreExtensions Date Conversions included":{"type":"method","name":"included","children":[],"call":[]}," String blank?":{"type":"method","name":"blank?","children":[],"call":[" strip empty? "," strip "," empty? "," !~ "," encoding_aware? ","BLANK_RE  === "," =~ ","(send\n  (regexp\n    (str \"[[:^space:]]\")\n    (regopt)) :===\n  (self)) ! ","(str \"[[:^space:]]\") === ","BLANK_RE  match? ","ENCODED_BLANKS  [] match? ","ENCODED_BLANKS  [] "," encoding "]}," TrueClass blank?":{"type":"method","name":"blank?","children":[],"call":[]}," FalseClass blank?":{"type":"method","name":"blank?","children":[],"call":[]}," NilClass blank?":{"type":"method","name":"blank?","children":[],"call":[]}," ActiveSupport CoreExtensions Array Conversions to_param":{"type":"method","name":"to_param","children":[],"call":[" join "," map join "," map ","(send nil :collect) join ","e to_param "," collect "]}," ActiveSupport CoreExtensions Array Conversions to_sentence":{"type":"method","name":"to_sentence","children":[],"call":[" [] ","options [] "," [] join "," length ","options reverse_merge! ","options assert_valid_keys ","options []= ","options [] strip == ","options [] strip ","options [] nil? "," [] to_s ","I18n  translate ","options delete "," ActiveSupport Deprecation  warn "," caller ","options has_key? "]}," ActiveSupport CoreExtensions String Inflections titleize":{"type":"method","name":"titleize","children":[],"call":["Inflector  titleize "]}," ActiveSupport CoreExtensions Time Calculations end_of_month":{"type":"method","name":"end_of_month","children":[],"call":[" change "," Time  days_in_month "," year "," month "]}," ActiveSupport CoreExtensions Numeric Bytes exabytes":{"type":"method","name":"exabytes","children":[],"call":[" * ","1024 petabytes "]}," ActiveSupport CoreExtensions Numeric Bytes petabytes":{"type":"method","name":"petabytes","children":[],"call":[" * ","1024 terabytes "]}," Object require_library_or_gem":{"type":"method","name":"require_library_or_gem","children":[],"call":[" raise "," require "]}," Object `":{"type":"method","name":"`","children":[],"call":["STDERR  puts "]}," Object silence_stderr":{"type":"method","name":"silence_stderr","children":[],"call":["STDERR  reopen ","STDERR  sync= ","RUBY_PLATFORM  =~ ","STDERR  dup "]}," Object silence_warnings":{"type":"method","name":"silence_warnings","children":[],"call":[]}," Object returning":{"type":"method","name":"returning","children":[],"call":["ActiveSupport Deprecation  warn "," caller "]}," Numeric blank?":{"type":"method","name":"blank?","children":[],"call":[]}," Builder XmlMarkup _ensure_no_block":{"type":"method","name":"_ensure_no_block","children":[],"call":[" fail "]}," Builder XmlMarkup _insert_attributes":{"type":"method","name":"_insert_attributes","children":[],"call":["@target << ","order member? ","attrs each ","attrs [] ","order each ","attrs nil? "," _attr_value "," _attr_attrs [] alue "]}," Builder XmlMarkup _end_tag":{"type":"method","name":"_end_tag","children":[],"call":["@target << "]}," Builder XmlMarkup _start_tag":{"type":"method","name":"_start_tag","children":[],"call":["@target << "," _insert_attributes "]}," Builder XmlMarkup _special":{"type":"method","name":"_special","children":[],"call":[" _newline ","@target << "," _insert_attributes "," _indent "]}," Builder XmlMarkup _text":{"type":"method","name":"_text","children":[],"call":["@target << "]}," Builder XmlMarkup cdata!":{"type":"method","name":"cdata!","children":[],"call":[" _special "," _ensure_no_block "," block_given? "]}," Builder XmlMarkup instruct!":{"type":"method","name":"instruct!","children":[],"call":[" _special ","a merge ","directive_tag == "," _ensure_no_block "," block_given? "]}," Builder XmlMarkup declare!":{"type":"method","name":"declare!","children":[],"call":[" _newline ","@target << "," _nested_structures "," block_given? ","args each "," _indent "]}," Builder XmlMarkup comment!":{"type":"method","name":"comment!","children":[],"call":[" _special "," _ensure_no_block "," block_given? "]}," Builder XmlMarkup target!":{"type":"method","name":"target!","children":[],"call":[]}," Builder XmlMarkup initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," Builder XmlEvents _end_tag":{"type":"method","name":"_end_tag","children":[],"call":["@target end_tag "]}," Builder XmlEvents _start_tag":{"type":"method","name":"_start_tag","children":[],"call":[" _end_tag ","@target start_tag "]}," Builder XmlEvents text!":{"type":"method","name":"text!","children":[],"call":["@target text "]}," Builder XmlBase _nested_structures":{"type":"method","name":"_nested_structures","children":[],"call":["block call "]}," Builder XmlBase _indent":{"type":"method","name":"_indent","children":[],"call":[" text! ","  * ","@level * ","@level == ","@indent == "]}," Builder XmlBase _newline":{"type":"method","name":"_newline","children":[],"call":[" text! ","@indent == "]}," Builder XmlBase _capture_outer_self":{"type":"method","name":"_capture_outer_self","children":[],"call":[" eval "]}," Builder XmlBase _escape":{"type":"method","name":"_escape","children":[],"call":["text gsub gsub gsub ","text gsub gsub ","text gsub ","text to_xs "]}," Builder XmlBase nil?":{"type":"method","name":"nil?","children":[],"call":[]}," Builder XmlBase <<":{"type":"method","name":"<<","children":[],"call":[" _text "]}," Builder XmlBase text!":{"type":"method","name":"text!","children":[],"call":[" _text "," _escape "]}," Builder XmlBase method_missing":{"type":"method","name":"method_missing","children":[],"call":[" _newline "," _end_tag "," text! "," _start_tag "," _indent ","text nil? "," _nested_structures "," _capture_outer_self ","@self nil? "," raise ","text << ","arg to_s ","attrs merge! ","args each ","args shift ","args first kind_of? ","args first ","@self nil? ! "]}," Builder XmlBase tag!":{"type":"method","name":"tag!","children":[],"call":[" __send__ "," method_missing ","sym to_sym "]}," Builder XmlBase initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Object method_added":{"type":"method","name":"method_added","children":[],"call":["Builder BlankSlate  hide "," != "," blank_slate_method_added ","BlankSlate  hide "]}," Kernel method_added":{"type":"method","name":"method_added","children":[],"call":["Builder BlankSlate  hide "," != "," blank_slate_method_added ","BlankSlate  hide "]}," Builder BlankSlate hide":{"type":"method","name":"hide","children":[],"call":[" undef_method ","name !~ "," instance_methods include? ","name to_s "," instance_methods "]}," Reloadable Subclasses included":{"type":"method","name":"included","children":[],"call":[]}," Reloadable reloadable_classes":{"type":"method","name":"reloadable_classes","children":[],"call":["klass reloadable? "," included_in_classes select "," included_in_classes ","ActiveSupport Deprecation  silence "]}," Reloadable included":{"type":"method","name":"included","children":[],"call":[" define_method ","base respond_to? "," raise ","base is_a? ","ActiveSupport Deprecation  warn "," caller ","base ancestors include? ","base ancestors "]}," OrderedHash find_pair":{"type":"method","name":"find_pair","children":[],"call":["i first == ","i first "," each "]}," OrderedHash keys":{"type":"method","name":"keys","children":[],"call":["i first "," collect "]}," OrderedHash []":{"type":"method","name":"[]","children":[],"call":["pair last "," find_pair "," find_pair  last "," find_ find_pair  "]}," OrderedHash []=":{"type":"method","name":"[]=","children":[],"call":[" << ","pair << ","pair pop "," find_pair "," find_pair  << "," find_pair  pop "," find_ find_pair  "]}," ActiveSupport OptionMerger merge_argument_options!":{"type":"method","name":"merge_argument_options!","children":[],"call":["arguments << ","@options dup ","arguments pop dup merge! ","arguments pop dup ","arguments pop ","arguments last respond_to? ","arguments last ","@options merge "]}," ActiveSupport OptionMerger method_missing":{"type":"method","name":"method_missing","children":[],"call":["@context send "," merge_argument_options! ","@context send! ","@context __send__ ","arguments << ","@options dup ","@options deep_merge ","arguments pop ","arguments last respond_to? ","arguments last ","proc call "," lambda ","arguments last is_a? ","arguments first is_a? ","arguments first "," invoke_method ","arguments shift ","arguments size == ","arguments size "," merge_argument_@options deep_merge ! ","@@options deep_merge  dup ","@@options deep_merge  deep_merge ","arguments pop  call ","arguments shift  call "]}," ActiveSupport OptionMerger initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport JSON raise_on_circular_reference":{"type":"method","name":"raise_on_circular_reference","children":[],"call":["stack pop ","stack << "," raise ","stack include? ","Thread  current [] ","Thread  current "]}," ActiveSupport JSON encode":{"type":"method","name":"encode","children":[],"call":["Encoders  [] call ","Encoders  [] ","value class "," raise_on_circular_reference ","value send ","Encoding  json_encoder new encode ","Encoding  json_encoder new ","Encoding  json_encoder "]}," ActiveSupport JSON Variable to_json":{"type":"method","name":"to_json","children":[],"call":[]}," ActiveSupport JSON Encoders []":{"type":"method","name":"[]","children":[],"call":[" encoders [] "," encoders ","klass ancestors each ","klass ancestors ","  encoders [] s [] ","  encoders [] s "]}," ActiveSupport JSON Encoders define_encoder":{"type":"method","name":"define_encoder","children":[],"call":[" encoders []= "," encoders "]}," Class const_missing":{"type":"method","name":"const_missing","children":[],"call":[" parent send "," parent "," parent == ","(const nil :Object) include? "," raise ","NameError  new copy_blame! ","NameError  new ","Dependencies  qualified_name_for ","e missing_name? ","Dependencies  load_missing_constant ","ActiveSupport Dependencies  qualified_name_for ","ActiveSupport Dependencies  load_missing_constant ","Dependencies  Dependencies  qualified_name_for _for ","Dependencies  ActiveSupport Dependencies  qualified_name_for _for ","ActiveSupport Dependencies  Dependencies  qualified_name_for _for ","ActiveSupport Dependencies  ActiveSupport Dependencies  qualified_name_for _for "]}," ActiveSupport CoreExtensions Time Calculations beginning_of_quarter":{"type":"method","name":"beginning_of_quarter","children":[],"call":[" beginning_of_month change ","m <= "," month ","(int 10) detect "," beginning_of_month "]}," ActiveSupport CoreExtensions Time Calculations advance":{"type":"method","name":"advance","children":[],"call":[" change ","options merge ","d day ","d month ","d year ","d + ","options delete ","options [] ","d >> "," Date  new "," day "," month "," year + "," year ","time_advanced_by_date since ","seconds_to_advance == ","(or\n  (send\n    (lvar :options) :[]\n    (sym :seconds))\n  (int 0)) + + ","(or\n  (send\n    (lvar :options) :[]\n    (sym :hours))\n  (int 0)) * ","(or\n  (send\n    (lvar :options) :[]\n    (sym :seconds))\n  (int 0)) + ","(or\n  (send\n    (lvar :options) :[]\n    (sym :minutes))\n  (int 0)) * "," to_date advance "," to_date ","options []= ","(or\n  (send\n    (lvar :options) :[]\n    (sym :hours))\n  (int 0)) + ","24 * ","options [] divmod ","options [] nil? ","(or\n  (send\n    (lvar :options) :[]\n    (sym :days))\n  (int 0)) + ","7 * ","d +  d + ay ","d >>  d >> ay "," Date  new   Date  new ay "," to_date advance   to_date advance ay ","d +  month ","d >>  month "," Date  new  month "," to_date advance  month ","d +  year ","d >>  year "," Date  new  year "," to_date advance  year ","d +  + ","d >>  + "," Date  new  + "," to_date advance  + ","options d + elete ","options d >> elete ","options  Date  new elete ","options  to_date advance elete ","d +  >> ","d >>  >> "," Date  new  >> "," to_date advance  >> "," d + ay "," d >> ay ","  Date  new ay ","  to_date advance ay ","time_ad + vanced + _by_d + ate since ","time_ad >> vanced >> _by_d >> ate since ","time_a Date  new vance Date  new _by_ Date  new ate since ","time_a to_date advance vance to_date advance _by_ to_date advance ate since "," change  since ","second + s_to_ad + vance == ","second >> s_to_ad >> vance == ","secon Date  new s_to_a Date  new vance == ","secon to_date advance s_to_a to_date advance vance == ","(or\n  (send\n    (lvar :options) :[]\n    (sym :seconds))\n  (int 0)) + +  == ","(or\n  (send + \n    (lvar :options) :[]\n    (sym :second + s))\n  (int 0)) + + ","(or\n  (send >> \n    (lvar :options) :[]\n    (sym :second >> s))\n  (int 0)) + + ","(or\n  (sen Date  new \n    (lvar :options) :[]\n    (sym :secon Date  new s))\n  (int 0)) + + ","(or\n  (sen to_date advance \n    (lvar :options) :[]\n    (sym :secon to_date advance s))\n  (int 0)) + + ","(or\n  (send + \n    (lvar :options) :[]\n    (sym :hours))\n  (int 0)) * ","(or\n  (send >> \n    (lvar :options) :[]\n    (sym :hours))\n  (int 0)) * ","(or\n  (sen Date  new \n    (lvar :options) :[]\n    (sym :hours))\n  (int 0)) * ","(or\n  (sen to_date advance \n    (lvar :options) :[]\n    (sym :hours))\n  (int 0)) * ","(or\n  (send + \n    (lvar :options) :[]\n    (sym :second + s))\n  (int 0)) + ","(or\n  (send >> \n    (lvar :options) :[]\n    (sym :second >> s))\n  (int 0)) + ","(or\n  (sen Date  new \n    (lvar :options) :[]\n    (sym :secon Date  new s))\n  (int 0)) + ","(or\n  (sen to_date advance \n    (lvar :options) :[]\n    (sym :secon to_date advance s))\n  (int 0)) + ","(or\n  (send + \n    (lvar :options) :[]\n    (sym :minutes))\n  (int 0)) * ","(or\n  (send >> \n    (lvar :options) :[]\n    (sym :minutes))\n  (int 0)) * ","(or\n  (sen Date  new \n    (lvar :options) :[]\n    (sym :minutes))\n  (int 0)) * ","(or\n  (sen to_date advance \n    (lvar :options) :[]\n    (sym :minutes))\n  (int 0)) * "," to_d + ate ad + vance "," to_d >> ate ad >> vance "," to_ Date  new ate a Date  new vance "," to_ to_date advance ate a to_date advance vance "," to_d + ate "," to_d >> ate "," to_ Date  new ate "," to_ to_date advance ate ","(or\n  (send + \n    (lvar :options) :[]\n    (sym :hours))\n  (int 0)) + ","(or\n  (send >> \n    (lvar :options) :[]\n    (sym :hours))\n  (int 0)) + ","(or\n  (sen Date  new \n    (lvar :options) :[]\n    (sym :hours))\n  (int 0)) + ","(or\n  (sen to_date advance \n    (lvar :options) :[]\n    (sym :hours))\n  (int 0)) + ","options [] d + ivmod +  ","options [] d >> ivmod >>  ","options []  Date  new ivmo Date  new  ","options []  to_date advance ivmo to_date advance  ","(or\n  (send + \n    (lvar :options) :[]\n    (sym :d + ays))\n  (int 0)) + ","(or\n  (send >> \n    (lvar :options) :[]\n    (sym :d >> ays))\n  (int 0)) + ","(or\n  (sen Date  new \n    (lvar :options) :[]\n    (sym : Date  new ays))\n  (int 0)) + ","(or\n  (sen to_date advance \n    (lvar :options) :[]\n    (sym : to_date advance ays))\n  (int 0)) + "]}," Symbol to_proc":{"type":"method","name":"to_proc","children":[],"call":["obj send ","Proc  new ","args shift __send__ ","args shift "]}," ActiveSupport CoreExtensions String Iterators each_char":{"type":"method","name":"each_char","children":[],"call":["scanner scan "," loop ","StringScanner  new ","sscanner scan anner sscanner scan an ","StringSscanner scan anner  new "]}," ActiveSupport CoreExtensions String Inflections dasherize":{"type":"method","name":"dasherize","children":[],"call":["Inflector  dasherize "]}," Proc bind":{"type":"method","name":"bind","children":[],"call":["(send\n  (begin\n    (sclass\n      (lvar :object)\n      (self))) :class_eval) bind "," remove_method "," instance_method "," define_method ","time usec ","time to_i ","(sclass\n  (lvar :object)\n  (self)) class_eval ","Time  now ","(send\n  (lvar :object) :class_eval) bind ","object class_eval ","ActiveSupport Deprecation  warn "," remove_ instance_method  "," instance_ instance_method  "," define_ instance_method  "]}," Object to_json":{"type":"method","name":"to_json","children":[],"call":["ActiveSupport JSON  encode "," instance_values "," as_json "]}," Object with_options":{"type":"method","name":"with_options","children":[],"call":["ActiveSupport OptionMerger  new ","block call ","option_merger instance_eval ","block arity zero? ","block arity ","ActiveSupport OptionMerger  new  instance_eval "]}," Object instance_exec":{"type":"method","name":"instance_exec","children":[],"call":["block bind [] ","block bind "," remove_method ","InstanceExecMethods  module_eval "," send ","Thread  critical= "," define_method "," respond_to? ","Thread  critical "]}," Object instance_values":{"type":"method","name":"instance_values","children":[],"call":["values []= "," instance_variable_get ","name [] "," instance_variables inject "," instance_variables ","name to_s [] ","name to_s ","Hash  [] "," instance_variables map ","ivar [] freeze ","ivar [] "," instance_variables to_h "]}," Object extend_with_included_modules_from":{"type":"method","name":"extend_with_included_modules_from","children":[],"call":[" extend ","object extended_by each ","object extended_by "]}," Object copy_instance_variables_from":{"type":"method","name":"copy_instance_variables_from","children":[],"call":[" instance_variable_set ","object instance_variable_get ","instance_variables each ","object instance_variables - ","name to_s ","exclude map ","object instance_variables ","object protected_instance_variables ","object respond_to? ","vars each ","object instance_variables map - ","object instance_variables map ","object instance_variables -  each ","object object instance_variables -  - ","object object instance_variables -  ","object protected_object instance_variables -  ","object instance_variables map -  each ","object object instance_variables -  map - ","object object instance_variables -  map "]}," Object extended_by":{"type":"method","name":"extended_by","children":[],"call":["(send\n  (lvar :ancestors) :select) - ","mod class == ","mod class ","ancestors select "," ancestors "]}," ActiveSupport CoreExtensions Numeric Time seconds":{"type":"method","name":"seconds","children":[],"call":["ActiveSupport Duration  new "]}," Module as_load_path":{"type":"method","name":"as_load_path","children":[],"call":["(send\n  (send\n    (send nil :name) :split\n    (str \"::\")) :collect) * ","word underscore "," name split collect "," name split "," name "," parent as_load_path "," parent "," parent == "," is_a? "," == "]}," Module parents":{"type":"method","name":"parents","children":[],"call":["parents << ","parents include? ","parts pop ","(send\n  (lvar :parts) :*\n  (str \"::\")) constantize ","parts * ","parts empty? "," name split [] "," name split "," name ","ActiveSupport Inflector  constantize "," parent_name split "," parent_name "," module_parents ","ActiveSupport Deprecation  warn ","(str \"      `Module#parents` has been renamed to `module_parents`.\\n\") squish "," name split []  pop "," parent_name split  pop ","(send\n  (lvar : name split [] ) :*\n  (str \"::\")) constantize ","(send\n  (lvar : parent_name split ) :*\n  (str \"::\")) constantize "," name split []  * "," parent_name split  * "," name split []  empty? "," parent_name split  empty? "]}," Module parent":{"type":"method","name":"parent","children":[],"call":["parent_name constantize ","parent_name empty? "," name split [] * "," name split [] "," name split "," name ","ActiveSupport Inflector  constantize "," parent_name "," module_parent ","ActiveSupport Deprecation  warn ","(str \"      `Module#parent` has been renamed to `module_parent`.\\n\") squish "," name split [] *  constantize "," name split [] *  empty? ","  name split [] *  "]}," Module included_in_classes":{"type":"method","name":"included_in_classes","children":[],"call":["unique_classes << ","(send\n  (lvar :unique_classes) :collect) include? ","klass to_s ","k to_s ","unique_classes collect ","classes reverse inject ","classes reverse ","classes << ","k included_modules include? ","k included_modules ","ObjectSpace  each_object "]}," Module delegate":{"type":"method","name":"delegate","children":[],"call":[" module_eval ","method inspect ","methods each "," raise ","options [] ","options is_a? ","methods pop ","options [] == ","options [] to_s =~ ","options [] to_s ","line to_i "," caller first split "," caller first "," caller ","line - ","(begin\n  (lvar :file)) inspect ","method to_s ","prefix == ","to to_s =~ ","to to_s ","method =~ ","to == ","to =~ ","options values_at ","(dstr\n  (str \"def \")\n  (begin\n    (lvar :method_prefix))\n  (begin\n    (lvar :method))\n  (str \"(\")\n  (begin\n    (lvar :definition))\n  (str \")\")) join ","RUBY_RESERVED_WORDS  include? ","DELEGATION_RESERVED_METHOD_NAMES  include? ","location lineno ","location path "," caller_locations first "," caller_locations ",": freeze ","(str \"[^\\\\]]=$\") match? ","(str \"^[^a-z_]\") match? ","methods map "," private ","RUBY_VERSION  >= ","method_def join ","method_def << << << << << << << << << << ","method_def << << << << << << << << << ","method_def << << << << << << << << ","method_def << << << << << << << ","method_def << << << << << << ","method_def << << << << << ","method_def << << << << ","method_def << << << ","method_def << << ","method_def << ","method_name to_s ","method_names << ","method_name to_sym ","(str \"[^\\\\]]=\\\\z\") match? ","defn join ","defn << ","type == ","parameters filter_map ","(send\n  (send\n    (lvar :parameters) :map\n    (block-pass\n      (sym :first))) :&\n  (array\n    (sym :opt)\n    (sym :rest)\n    (sym :keyreq)\n    (sym :key)\n    (sym :keyrest))) any? ","parameters map & ","parameters map ","method_object parameters "," method ","receiver == ","to method ","to is_a? ","method to_s  inspect ","method to_s s each ","methods pop  [] ","methods pop  is_a? ","method to_s s pop ","methods pop  [] == ","options [] options [] _s =~ ","options [] to to_s _s =~ ","methods pop  [] to_s =~ ","options [] options [] _s ","options [] to to_s _s ","methods pop  [] to_s ","line options [] _i ","line to to_s _i ","line to_i  to_i ","line to_i  - ","method options [] _s ","method to to_s _s ","method to_s  to_s ","options []  options [] _s =~ ","to to_s  to to_s _s =~ ","options []  options [] _s ","to to_s  to to_s _s ","method to_s  =~ ","options []  == ","to to_s  == ","options []  =~ ","to to_s  =~ ","methods pop  values_at ","(dstr\n  (str \"def \")\n  (begin\n    (lvar :method to_s _prefix))\n  (begin\n    (lvar :method to_s ))\n  (str \"(\")\n  (begin\n    (lvar :definition))\n  (str \")\")) join ","location line to_i no "," caller_locations first  lineno "," caller_locations first  path "," caller_ caller_locations first s first "," caller_ caller_locations first s ","method to_s s map ","method to_s _def join ","(dstr\n  (str \"def \")\n  (begin\n    (lvar :method_prefix))\n  (begin\n    (lvar :method))\n  (str \"(\")\n  (begin\n    (lvar :definition))\n  (str \")\")) join  join ","method to_s _def << << << << << << << << << << ","(dstr\n  (str \"def \")\n  (begin\n    (lvar :method_prefix))\n  (begin\n    (lvar :method))\n  (str \"(\")\n  (begin\n    (lvar :definition))\n  (str \")\")) join  << << << << << << << << << << ","method to_s _def << << << << << << << << << ","(dstr\n  (str \"def \")\n  (begin\n    (lvar :method_prefix))\n  (begin\n    (lvar :method))\n  (str \"(\")\n  (begin\n    (lvar :definition))\n  (str \")\")) join  << << << << << << << << << ","method to_s _def << << << << << << << << ","(dstr\n  (str \"def \")\n  (begin\n    (lvar :method_prefix))\n  (begin\n    (lvar :method))\n  (str \"(\")\n  (begin\n    (lvar :definition))\n  (str \")\")) join  << << << << << << << << ","method to_s _def << << << << << << << ","(dstr\n  (str \"def \")\n  (begin\n    (lvar :method_prefix))\n  (begin\n    (lvar :method))\n  (str \"(\")\n  (begin\n    (lvar :definition))\n  (str \")\")) join  << << << << << << << ","method to_s _def << << << << << << ","(dstr\n  (str \"def \")\n  (begin\n    (lvar :method_prefix))\n  (begin\n    (lvar :method))\n  (str \"(\")\n  (begin\n    (lvar :definition))\n  (str \")\")) join  << << << << << << ","method to_s _def << << << << << ","(dstr\n  (str \"def \")\n  (begin\n    (lvar :method_prefix))\n  (begin\n    (lvar :method))\n  (str \"(\")\n  (begin\n    (lvar :definition))\n  (str \")\")) join  << << << << << ","method to_s _def << << << << ","(dstr\n  (str \"def \")\n  (begin\n    (lvar :method_prefix))\n  (begin\n    (lvar :method))\n  (str \"(\")\n  (begin\n    (lvar :definition))\n  (str \")\")) join  << << << << ","method to_s _def << << << ","(dstr\n  (str \"def \")\n  (begin\n    (lvar :method_prefix))\n  (begin\n    (lvar :method))\n  (str \"(\")\n  (begin\n    (lvar :definition))\n  (str \")\")) join  << << << ","method to_s _def << << ","(dstr\n  (str \"def \")\n  (begin\n    (lvar :method_prefix))\n  (begin\n    (lvar :method))\n  (str \"(\")\n  (begin\n    (lvar :definition))\n  (str \")\")) join  << << ","method to_s _def << ","(dstr\n  (str \"def \")\n  (begin\n    (lvar :method_prefix))\n  (begin\n    (lvar :method))\n  (str \"(\")\n  (begin\n    (lvar :definition))\n  (str \")\")) join  << ","method_name options [] _s ","method_name to to_s _s ","method to_s _name to_s ","method_name to_s  to_s ","method to_s _names << ","method_name to_s s << ","method_name options [] _sym ","method_name to to_s _sym ","method to_s _name to_sym ","method_name to_s  to_sym ","method_object parameters  filter_map ","(send\n  (send\n    (lvar :method_object parameters ) :map\n    (block-pass\n      (sym :first))) :&\n  (array\n    (sym :opt)\n    (sym :rest)\n    (sym :keyreq)\n    (sym :key)\n    (sym :keyrest))) any? ","method_object parameters  map & ","method_object parameters  map ","method to_s _object parameters ","method_object method_object parameters  "," method to_s  ","options []  method ","to to_s  method ","to method to_s  ","options []  is_a? ","to to_s  is_a? "]}," Logger define_around_helper":{"type":"method","name":"define_around_helper","children":[],"call":[]}," Kernel suppress":{"type":"method","name":"suppress","children":[],"call":[" raise ","e kind_of? ","exception_classes any? "]}," Kernel silence_stream":{"type":"method","name":"silence_stream","children":[],"call":["stream reopen ","stream sync= ","RUBY_PLATFORM  =~ ","stream dup ","RbConfig CONFIG  [] =~ ","RbConfig CONFIG  [] ","Config CONFIG  [] =~ ","Config CONFIG  [] ","old_stream close ","stream dup  close "]}," Kernel silence_stderr":{"type":"method","name":"silence_stderr","children":[],"call":[" silence_stream ","ActiveSupport Deprecation  warn "]}," Kernel enable_warnings":{"type":"method","name":"enable_warnings","children":[],"call":[" with_warnings "]}," Kernel daemonize":{"type":"method","name":"daemonize","children":[],"call":[" exit "," trap ","STDERR  reopen ","STDOUT  reopen ","STDIN  reopen ","File  umask ","Dir  chdir "," fork ","Process  setsid ","Process  daemon "]}," HashWithIndifferentAccess delete":{"type":"method","name":"delete","children":[],"call":[" convert_key "]}," HashWithIndifferentAccess merge":{"type":"method","name":"merge","children":[],"call":[" dup update "," dup "]}," HashWithIndifferentAccess dup":{"type":"method","name":"dup","children":[],"call":["HashWithIndifferentAccess  new "]}," ActiveSupport CoreExtensions Hash Diff diff":{"type":"method","name":"diff","children":[],"call":["(send\n  (send\n    (self) :dup) :delete_if) merge "," has_key? ","h2 dup delete_if ","h2 dup ","h2 [] == ","h2 [] "," dup delete_if "," dup "]}," ActiveSupport CoreExtensions Hash Conversions to_xml":{"type":"method","name":"to_xml","children":[],"call":["options [] tag! ","type_name nil? ","value nil? ","options [] ","XML_FORMATTING  [] call ","XML_FORMATTING  [] ","key to_s dasherize ","key to_s ","XML_TYPE_NAMES  [] ","value class to_s ","value class ","value to_xml ","options merge ","key to_s singularize "," each ","options [] __send__ ","options [] to_s dasherize ","options [] to_s ","options [] instruct! ","options delete ","options reverse_merge! ","Builder XmlMarkup  new ","attributes []= ","value class name ","value respond_to? ","value call ","1 == ","value arity ","options has_key? ! ","options has_key? "," block_given? "," rename_key ","options dup "," require ","options dup  [] tag! ","XML_TYPE_NAMES  []  nil? ","options dup  [] ","key to_s  to_s dasherize ","key to_s dasherize  to_s dasherize "," rename_key  to_s dasherize ","key to_s  to_s ","key to_s dasherize  to_s "," rename_key  to_s ","options dup  merge ","key to_s  to_s singularize ","key to_s dasherize  to_s singularize "," rename_key  to_s singularize ","options dup  [] __send__ ","options dup  [] to_s dasherize ","options dup  [] to_s ","options dup  [] instruct! ","options dup  delete ","options dup  reverse_merge! ","options has_key to_s ? ! ","options has_key to_s dasherize ? ! ","options has_ rename_key ? ! ","options dup  has_key? ! ","options has_key to_s ? ","options has_key to_s dasherize ? ","options has_ rename_key ? ","options dup  has_key? "," rename_key to_s  "," rename_key to_s dasherize  "," rename_ rename_key  ","options dup  dup "]}," Enumerable group_by":{"type":"method","name":"group_by","children":[],"call":["(or-asgn\n  (send\n    (lvar :groups) :[]\n    (yield\n      (lvar :element)))\n  (array)) << ","groups [] "," inject ","(or-asgn\n  (send\n    (lvar :grouped) :[]\n    (yield\n      (lvar :element)))\n  (array)) << ","grouped [] ","ActiveSupport OrderedHash  new ","assoc []= ","assoc [] << ","assoc [] ","assoc has_key? "," each "," to_enum "," block_given? ","ActiveSupport OrderedHash  new  []= ","ActiveSupport OrderedHash  new  [] << ","ActiveSupport OrderedHash  new  [] ","ActiveSupport OrderedHash  new  has_key? "]}," Class remove_class":{"type":"method","name":"remove_class","children":[],"call":["parent send ","parent == ","parent const_get ","parent const_defined? ","klass parent ","klass to_s split last ","klass to_s split ","klass to_s ","klass name ","klasses flatten each ","klasses flatten "," remove_const ","parent instance_eval ","klass parent  send ","klass parent  == ","klass parent  const_get ","klass parent  const_defined? ","parent const_get  parent ","klass klass parent  ","parent const_get  to_s split last ","parent const_get  to_s split ","parent const_get  to_s ","parent const_get  name ","parent const_get es flatten each ","parent const_get es flatten ","klass parent  instance_eval "]}," Array in_groups_of":{"type":"method","name":"in_groups_of","children":[],"call":["collection each_slice ","collection << ","collection size modulo zero? ","collection size modulo ","collection size "," dup "," require ","groups << "," block_given? "," dup concat ","(lvar :fill_with) * ","(send\n  (lvar :number) :-\n  (send\n    (send nil :size) :%\n    (lvar :number))) % ","number - "," size % "," size ","fill_with == ","collection each_slice to_a ","Array  new "," raise ","number inspect ","number to_i <= ","number to_i "," dup  each_slice "," dup concat  each_slice "," dup  << "," dup concat  << "," dup  size modulo zero? "," dup concat  size modulo zero? "," dup  size modulo "," dup concat  size modulo "," dup  size "," dup concat  size "," dup  each_slice to_a "," dup concat  each_slice to_a "]}," ActiveSupport CoreExtensions Array Conversions to_xml":{"type":"method","name":"to_xml","children":[],"call":["e to_xml ","options merge "," each ","options [] tag! ","root to_s dasherize ","root to_s ","options [] ","options [] instruct! ","options delete ","Builder XmlMarkup  new ","options [] singularize "," first class to_s underscore pluralize "," first class to_s underscore "," first class to_s "," first class "," first "," first class to_s != ","e is_a? "," all? "," raise ","e respond_to? ","opts merge! ","root dasherize ","options has_key? ! ","options has_key? ","options delete to_s "," block_given? ","xml tag! "," empty? ","opts merge "," first class to_s underscore pluralize tr ","options dup "," require ","e to_options []  ","options dup  merge ","options dup  [] tag! ","options delete  to_s dasherize ","root dasherize  to_s dasherize ","options delete to_s  to_s dasherize ","options delete  to_s ","root dasherize  to_s ","options delete to_s  to_s ","options dup  [] ","options dup  [] instruct! ","options dup  delete ","options dup  [] singularize ","options merge  merge! ","options delete  dasherize ","root dasherize  dasherize ","options delete to_s  dasherize ","options dup  has_key? ! ","options dup  has_key? ","options dup  delete to_s ","options []  tag! ","options merge  merge ","options dup  dup "]}," ActiveSupport CachingTools HashCaching hash_cache":{"type":"method","name":"hash_cache","children":[],"call":[" class_eval ","2 to_i "," caller [] "," caller ","code << ","} * ","method arity ","args * ","args << ","(irange\n  (int 1)\n  (send\n    (lvar :method) :arity)) each "," instance_method ","options [] "," instance_method  arity ","(irange\n  (int 1)\n  (send\n    (lvar : instance_method ) :arity)) each "," instance_ instance_method  "]}," ActiveSupport CoreExtensions Pathname CleanWithin clean_within":{"type":"method","name":"clean_within","children":[],"call":[" new cleanpath "," new ","string gsub "]}," Exception clean_message":{"type":"method","name":"clean_message","children":[],"call":["Pathname  clean_within "," message ","Exception  clean_paths "]}," XmlSimple put_into_cache":{"type":"method","name":"put_into_cache","children":[],"call":[" raise ","@@cache save_mem_copy ","@@cache save_mem_share ","@@cache save_storable ","@options [] each ","@options [] ","@options has_key? "]}," XmlSimple load_xml_file":{"type":"method","name":"load_xml_file","children":[],"call":[" parse ","File  readlines to_s ","File  readlines "]}," XmlSimple find_xml_file":{"type":"method","name":"find_xml_file","children":[],"call":[" raise ","searchpath join ","File  file? ","searchpath empty? ","File  join ","searchpath each ","filename != ","File  basename ","File  basename  != "]}," XmlSimple parse":{"type":"method","name":"parse","children":[],"call":["Document  new "]}," XmlSimple node_to_text":{"type":"method","name":"node_to_text","children":[],"call":["node value strip ","node value ","node instance_of? ","node value nil? ","(send\n  (send\n    (lvar :node) :texts) :map) join ","t value ","node texts map ","node texts "]}," XmlSimple empty":{"type":"method","name":"empty","children":[],"call":["value nil? ","value !~ ","value empty? "]}," XmlSimple normalise_space":{"type":"method","name":"normalise_space","children":[],"call":["text strip gsub ","text strip "]}," XmlSimple escape_value":{"type":"method","name":"escape_value","children":[],"call":["Text  normalize "]}," XmlSimple hash_to_array":{"type":"method","name":"hash_to_array","children":[],"call":["arrayref << ","(pair\n  (send\n    (send\n      (ivar :@options) :[]\n      (str \"keyattr\")) :[]\n    (int 0))\n  (lvar :key)) update ","@options [] [] ","@options [] ","(pair\n  (send\n    (send\n      (send\n        (ivar :@options) :[]\n        (str \"keyattr\")) :[]\n      (lvar :parent)) :[]\n    (int 0))\n  (lvar :key)) update ","@options [] [] [] ","@options [] has_key? ","@options [] instance_of? ","value instance_of? ","hashref each "]}," XmlSimple scalar":{"type":"method","name":"scalar","children":[],"call":["value instance_of? "]}," XmlSimple value_to_xml":{"type":"method","name":"value_to_xml","children":[],"call":["result join ","@ancestors pop "," scalar ! "," scalar "," raise ","ref type ","result << << << << << ","result << << << << ","result << << << ","result << << ","result << "," value_to_xml ","indent + ","@options [] ","value instance_of? "," escape_value ","value to_s ","ref each ","ref instance_of? ","nested empty? ! ","nested empty? ","nested [] sub! ","nested [] ","text_content nil? ! ","text_content nil? ","key == ","nested << ","@options [] nil? ","@options has_key? ","value nil? ","key [] == ","key [] ","key nil? ! ","key nil? ","ref empty? ! ","ref empty? ","ref []= ","@options [] [] ","@options [] has_key? "," hash_to_array ","indent != ","@options [] empty? ! ","@options [] empty? ","ref to_s + ","ref to_s ","(lvar :indent) join ","@ancestors << ","@ancestors member? ","name != ","name nil? ! ","name nil? "," hash_to_array  type ","  escape_value _to_xml "," value to_s _to_xml "," escape_value  instance_of? ","value to_s  instance_of? "," escape_ escape_value  "," escape_value to_s  "," escape_value  to_s ","value to_s  to_s "," hash_to_array  each "," hash_to_array  instance_of? "," escape_value  nil? ","value to_s  nil? "," hash_to_array  empty? ! "," hash_to_array  empty? "," hash_to_array  []= "," hash_to_array  to_s + "," hash_to_array  to_s "]}," XmlSimple get_var":{"type":"method","name":"get_var","children":[],"call":["@_var_values [] ","@_var_values has_key? "]}," XmlSimple set_var":{"type":"method","name":"set_var","children":[],"call":["@_var_values []= "]}," XmlSimple has_mixed_content?":{"type":"method","name":"has_mixed_content?","children":[],"call":["element texts join !~ ","element texts join ","element texts ","element has_elements? ","element has_text? "]}," XmlSimple get_attributes":{"type":"method","name":"get_attributes","children":[],"call":["attributes []= ","node attributes each ","node attributes "]}," XmlSimple force_array?":{"type":"method","name":"force_array?","children":[],"call":["key =~ ","forcearray [] each ","forcearray [] ","forcearray has_key? ","forcearray instance_of? ","@options [] ","@options [] == ","key == ","@options []  [] each ","@options []  [] ","@options []  has_key? ","@options []  instance_of? "]}," XmlSimple merge":{"type":"method","name":"merge","children":[],"call":["hash []= "," force_array? ","value instance_of? ","hash [] ","hash [] << ","hash [] instance_of? ","hash has_key? ","key to_s downcase to_sym ","key to_s downcase ","key to_s ","@options [] == ","@options [] ","@options has_key? "," set_var "," get_var ","value gsub! ","@_var_values empty? ","@_var_values nil? "," normalise_space "," normalise_space  instance_of? ","hash has_key to_s downcase to_sym ? ","key to_s downcase to_sym  to_s downcase to_sym ","key to_s downcase to_sym  to_s downcase ","key to_s downcase to_sym  to_s ","@options has_key to_s downcase to_sym ? "," normalise_space  gsub! ","@_var_ normalise_space s empty? ","@_var_ normalise_space s nil? "]}," XmlSimple collapse_content":{"type":"method","name":"collapse_content","children":[],"call":["hash []= ","hash [] [] ","hash [] ","hash each_key ","value has_key? ","value size == ","value size ","value instance_of? ","hash each_value ","@options [] "]}," XmlSimple fold_array_by_name":{"type":"method","name":"fold_array_by_name","children":[],"call":[" collapse_content ","@options [] ","$stderr puts ","hash [] delete ","hash [] ","flag == ","hash [] []= ","hash [] [] ","hash []= "," normalise_space ","@options [] == ","value instance_of? ","x [] ","x has_key? ","x instance_of? ","array each ","Hash  new ","@options [] [] ","@options [] has_key? "," collapse_content  [] delete ","Hash  new  [] delete "," collapse_content  [] ","Hash  new  [] "," collapse_content  [] []= ","Hash  new  [] []= "," collapse_content  [] [] ","Hash  new  [] [] "," collapse_content  []= ","Hash  new  []= "," normalise_space  instance_of? ","x []  instance_of? "]}," XmlSimple fold_array":{"type":"method","name":"fold_array","children":[],"call":[" collapse_content ","@options [] ","hash []= ","x delete "," normalise_space ","@options [] == ","value instance_of? ","x [] ","x has_key? ","@options [] each ","x instance_of? ","array each ","Hash  new "," collapse_content  []= ","Hash  new  []= "," normalise_space  instance_of? ","x []  instance_of? "]}," XmlSimple fold_arrays":{"type":"method","name":"fold_arrays","children":[],"call":["hash []= "," fold_array_by_name "," fold_array ","keyattr instance_of? ","value instance_of? ","hash each ","@options [] ","@options []  instance_of? "]}," XmlSimple collapse_text_node":{"type":"method","name":"collapse_text_node","children":[],"call":[" merge ","@options [] ","@options [] ! ","element has_attributes? ","element has_attributes? ! "," empty "," node_to_text "]}," XmlSimple collapse":{"type":"method","name":"collapse","children":[],"call":["@options [] == ","@options [] ","@options has_key? ","result empty? ","result [] ","result [] instance_of? ","result has_key? ","count == ","result []= ","@options [] [] == ","@options [] [] ","value to_a [] ","value to_a ","value size == ","value size ","value instance_of? ","result each "," fold_arrays "," collapse_text_node ","element has_text? ","content [] ","content size == ","content size ","x to_s ","element texts map ","element texts "," has_mixed_content? "," merge ","child name ","element attributes empty? ","element attributes "," empty "," collapse ","element each_element ","element has_elements? "," normalise_space "," get_attributes "," merge  empty? "," get_attributes  empty? "," merge  [] "," get_attributes  [] "," merge  [] instance_of? "," get_attributes  [] instance_of? "," merge  has_key? "," get_attributes  has_key? "," fold_arrays  == "," merge  []= "," get_attributes  []= "," collapse  to_a [] "," collapse  to_a "," collapse  size == "," collapse  size "," collapse  instance_of? "," merge  each "," get_attributes  each ","content []  [] ","content []  size == ","content []  size "," has_mixed_content [] ? "]}," XmlSimple handle_options":{"type":"method","name":"handle_options","children":[],"call":["@options has_key? ","@options [] "," raise ","@options [] instance_of? ! ","@options [] instance_of? ","@options []= ","@options [] []= ","@options [] [] << ","@options [] [] ","@options [] [] instance_of? ","tag instance_of? ","force_list each ","force_list empty? ","value =~ ","@options [] each "," scalar ! "," scalar ","@options [] nil? ","@options has_key? ! ","@options [] =~ ","@options [] == ","@default_options [] ","@default_options has_key? ","known_options each ","@default_options nil? "," normalize_option_names ","KNOWN_OPTIONS  [] ","KNOWN_OPTIONS  has_key? ","@options instance_of? ","Hash  new "," normalize_option_names  has_key? "," normalize_option_names  [] "," normalize_option_names  [] instance_of? ! "," normalize_option_names  [] instance_of? "," normalize_option_names  []= "," normalize_option_names  [] []= "," normalize_option_names  [] [] << "," normalize_option_names  [] [] "," normalize_option_names  [] [] instance_of? ","@options []  each ","@options []  empty? "," normalize_option_names  [] each "," normalize_option_names  [] nil? "," normalize_option_names  has_key? ! "," normalize_option_names  [] =~ "," normalize_option_names  [] == ","KNOWN_OPTIONS  []  each "," normalize_option_names  instance_of? "]}," XmlSimple normalize_option_names":{"type":"method","name":"normalize_option_names","children":[],"call":["result []= "," raise ","known_options member? ! ","known_options member? ","lkey gsub! ","key downcase ","options each ","Hash  new ","options nil? ","Hash  new  []= ","key downcase  gsub! "]}," XmlSimple xml_out":{"type":"method","name":"xml_out","children":[],"call":["file write ","File  open ","@options [] ","@options [] write ","@options [] kind_of? ","@options has_key? ","@options [] + + ","@options [] + "," value_to_xml ","ref []= ","value to_s "," scalar ! "," scalar ","refsave each ","ref instance_of? ","@options [] == ","@options []= ","keys [] ","ref [] ","keys size == ","keys size ","ref keys "," handle_options "," value_to_@options [] + +  "," value_to_ value_to_xml  ","ref []  []= ","ref [] save each ","ref []  instance_of? ","ref keys  [] ","ref []  [] ","ref keys  size == ","ref keys  size ","ref []  keys ","ref ref keys  "]}," XmlSimple xml_in":{"type":"method","name":"xml_in","children":[],"call":[" put_into_cache "," merge ","@doc root name ","@doc root ","@options [] "," collapse "," raise ","string type "," parse ","string readlines to_s ","string readlines ","string kind_of? "," load_xml_file ","@@cache restore_mem_copy ","@@cache restore_mem_share ","@@cache restore_storable ","@options [] each ","@options has_key? "," find_xml_file ","$stdin readlines to_s ","$stdin readlines ","string == ","string =~ ","string instance_of? ","@options [] unshift ","directory nil? ","File  dirname ","string sub! ","File  basename ","string nil? "," handle_options "," parse  root name "," load_xml_file  root name "," parse  root "," load_xml_file  root ","File  basename  type ","File  basename  readlines to_s ","File  basename  readlines ","File  basename  kind_of? ","File  basename  == ","File  basename  =~ ","File  basename  instance_of? ","File  dirname  nil? ","File  basename  sub! ","File  basename  nil? "]}," XmlSimple initialize":{"type":"method","name":"initialize","children":[],"call":["Hash  new "," normalize_option_names ","KNOWN_OPTIONS  [] & ","KNOWN_OPTIONS  [] "," raise ","defaults instance_of? ","defaults nil? ","(send\n  (send\n    (const nil :KNOWN_OPTIONS) :[]\n    (str \"in\")) :+\n  (send\n    (const nil :KNOWN_OPTIONS) :[]\n    (str \"out\"))) uniq ","KNOWN_OPTIONS  [] + "]}," XmlSimple Cache get_from_memory_cache":{"type":"method","name":"get_from_memory_cache","children":[],"call":["cache [] [] ","cache [] ","cache [] [] > ","File  mtime to_i ","File  mtime "]}," XmlSimple Cache get_cache_filename":{"type":"method","name":"get_cache_filename","children":[],"call":["filename sub "]}," XmlSimple Cache restore_mem_copy":{"type":"method","name":"restore_mem_copy","children":[],"call":["Marshal  load ","data nil? "," get_from_memory_cache ","Marshal  load  nil? "," get_from_memory_cache  nil? "]}," XmlSimple Cache save_mem_copy":{"type":"method","name":"save_mem_copy","children":[],"call":["@mem_share_cache []= ","Marshal  dump ","Time  now to_i ","Time  now "]}," XmlSimple Cache restore_mem_share":{"type":"method","name":"restore_mem_share","children":[],"call":[" get_from_memory_cache "]}," XmlSimple Cache save_mem_share":{"type":"method","name":"save_mem_share","children":[],"call":["@mem_share_cache []= ","Time  now to_i ","Time  now "]}," XmlSimple Cache restore_storable":{"type":"method","name":"restore_storable","children":[],"call":["Marshal  load ","File  open ","File  mtime to_i > ","File  mtime to_i ","File  mtime ","File  exist? "," get_cache_filename "," get_ get_cache_filename name "]}," XmlSimple Cache save_storable":{"type":"method","name":"save_storable","children":[],"call":["Marshal  dump ","File  open "," get_cache_filename "," get_ get_cache_filename name "]}," XmlSimple Cache initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Builder XmlMarkup _attr_value":{"type":"method","name":"_attr_value","children":[],"call":[" _escape_quote ","value to_s "]}," Builder XmlBase _escape_quote":{"type":"method","name":"_escape_quote","children":[],"call":[" _escape gsub "," _escape "]}," String to_xs":{"type":"method","name":"to_xs","children":[],"call":["(send\n  (send nil :unpack\n    (str \"C*\")) :map) join ","n xchr "," unpack map "," unpack ","(send\n  (send nil :unpack\n    (str \"U*\")) :map) join "]}," Fixnum xchr":{"type":"method","name":"xchr","children":[],"call":["n chr ","n < ","XChar PREDEFINED  [] ","range include? ","XChar VALID  find ","XChar CP1252  [] "]}," Builder check_for_name_collision":{"type":"method","name":"check_for_name_collision","children":[],"call":[]}," Reloadable Deprecated included":{"type":"method","name":"included","children":[],"call":[]}," ActiveSupport OrderedHash values":{"type":"method","name":"values","children":[],"call":[" collect "," [] ","@keys collect "]}," ActiveSupport OrderedHash keys":{"type":"method","name":"keys","children":[],"call":[" collect ","@keys dup "]}," ActiveSupport OrderedHash []":{"type":"method","name":"[]","children":[],"call":["pair last "," assoc "," assoc  last "]}," ActiveSupport OrderedHash []=":{"type":"method","name":"[]=","children":[],"call":[" << ","pair << ","pair pop "," assoc ","@keys << "," has_key? ! "," has_key? "," assoc  << "," assoc  pop "]}," UTF8HandlerProc utf8map":{"type":"method","name":"utf8map","children":[],"call":["Utf8Proc  utf8map "," raise ","Utf8Proc Options  [] ","option_array each "]}," UTF8HandlerProc downcase":{"type":"method","name":"downcase","children":[],"call":[" utf8map "]}," UTF8HandlerProc decompose":{"type":"method","name":"decompose","children":[],"call":[" utf8map "]}," UTF8HandlerProc normalize":{"type":"method","name":"normalize","children":[],"call":[" raise "," caller "," utf8map ","str unpack "]}," PassthruHandler translate_offset":{"type":"method","name":"translate_offset","children":[],"call":[]}," Handlers UnicodeTableGenerator dump_to":{"type":"method","name":"dump_to","children":[],"call":["f write ","Marshal  dump ","@ucd cp1252 ","@ucd boundary ","@ucd composition_map ","@ucd composition_exclusion ","@ucd codepoints ","File  open "]}," Handlers UnicodeTableGenerator parse":{"type":"method","name":"parse","children":[],"call":[" normalize_boundary_map "," create_composition_map "," send ","(str \"parse_\") intern ","file each_line ","File  open ","target write ","source each_line "," open ","$stderr puts ","url split last ","url split ","File  exist? ","File  join ","Dir  tmpdir ","SOURCES  each "]}," Handlers UnicodeTableGenerator normalize_boundary_map":{"type":"method","name":"normalize_boundary_map","children":[],"call":["@ucd boundary []= ","v [] ","@ucd boundary ","(sym :lf) include? ","@ucd boundary each "]}," Handlers UnicodeTableGenerator create_composition_map":{"type":"method","name":"create_composition_map","children":[],"call":["@ucd composition_map [] []= ","cp code ","cp decomp_mapping [] ","cp decomp_mapping ","@ucd composition_map [] ","@ucd composition_map ","@ucd composition_exclusion include? ! ","@ucd composition_exclusion include? ","@ucd composition_exclusion ","@ucd [] combining_class == ","@ucd [] combining_class ","@ucd [] ","cp decomp_mapping length == ","cp decomp_mapping length ","cp decomp_mapping nil? ! ","cp decomp_mapping nil? ","cp decomp_type nil? ","cp decomp_type ","cp combining_class == ","cp combining_class ","cp nil? ! ","cp nil? ","@ucd codepoints each ","@ucd codepoints "]}," Handlers UnicodeTableGenerator parse_cp1252":{"type":"method","name":"parse_cp1252","children":[],"call":["@ucd cp1252 []= ","2 hex ","1 hex ","@ucd cp1252 ","line =~ "]}," Handlers UnicodeTableGenerator parse_composition_exclusion":{"type":"method","name":"parse_composition_exclusion","children":[],"call":["@ucd composition_exclusion << ","1 hex ","@ucd composition_exclusion ","line =~ "]}," Handlers UnicodeTableGenerator parse_grapheme_break_property":{"type":"method","name":"parse_grapheme_break_property","children":[],"call":["@ucd boundary [] << ","1 hex ","@ucd boundary [] ","@ucd boundary ","parts [] hex ","parts [] ","1 split ","1 include? ","2 downcase intern ","2 downcase ","line =~ ","1 split  [] hex ","1 split  [] "]}," Handlers UnicodeTableGenerator parse_codepoints":{"type":"method","name":"parse_codepoints","children":[],"call":["@ucd codepoints []= ","codepoint code ","@ucd codepoints ","codepoint lowercase_mapping= ","17 hex ","17 == ","codepoint uppercase_mapping= ","16 hex ","16 == ","codepoint decomp_mapping= ","element hex ","8 split collect ","8 split ","8 == ","codepoint decomp_type= ","codepoint combining_class= "," Integer ","codepoint code= ","1 hex "," raise ","line =~ ","Codepoint  new ","@ucd Codepoint  new s []= ","Codepoint  new  code ","@ucd Codepoint  new s ","Codepoint  new  lowercase_mapping= ","Codepoint  new  uppercase_mapping= ","Codepoint  new  decomp_mapping= ","Codepoint  new  decomp_type= ","Codepoint  new  combining_class= ","Codepoint  new  code= "]}," Handlers UnicodeTableGenerator initialize":{"type":"method","name":"initialize","children":[],"call":["@ucd cp1252= ","@ucd boundary= ","@ucd composition_map= ","@ucd composition_exclusion= ","@ucd codepoints= ","Hash  new ","default lowercase_mapping= ","default uppercase_mapping= ","default combining_class= ","Codepoint  new ","UnicodeDatabase  new ","UnicodeDatabase  new  cp1252= ","UnicodeDatabase  new  boundary= ","UnicodeDatabase  new  composition_map= ","UnicodeDatabase  new  composition_exclusion= ","UnicodeDatabase  new  codepoints= ","Codepoint  new  lowercase_mapping= ","Codepoint  new  uppercase_mapping= ","Codepoint  new  combining_class= "]}," Handlers UnicodeDatabase load":{"type":"method","name":"load","children":[],"call":[]}," Multibyte Chars utf8_pragma?":{"type":"method","name":"utf8_pragma?","children":[],"call":["$KCODE == ","@string nil? ! ","@string nil? ","Encoding  default_external == ","Encoding  default_external "]}," Multibyte Chars handler":{"type":"method","name":"handler","children":[],"call":[" utf8_pragma? "]}," Multibyte Chars handler=":{"type":"method","name":"handler=","children":[],"call":[]}," Multibyte Chars method_missing":{"type":"method","name":"method_missing","children":[],"call":["result chars ","result kind_of? ","@string replace "," handler tidy_bytes "," handler ","@string send "," handler send ","result == ","m to_s =~ ","m to_s "," handler respond_to? ","@string send  chars "," handler send  chars ","@string send  kind_of? "," handler send  kind_of? ","@string send  == "," handler send  == "]}," Multibyte Chars =~":{"type":"method","name":"=~","children":[],"call":[" handler translate_offset ","@string =~ "," handler "]}," Multibyte Chars gsub":{"type":"method","name":"gsub","children":[],"call":["@string gsub chars ","@string gsub "]}," Multibyte Chars split":{"type":"method","name":"split","children":[],"call":["i chars ","@string split map ","@string split "]}," Multibyte Chars <=>":{"type":"method","name":"<=>","children":[],"call":["@string <=> ","other to_s "]}," Multibyte Chars initialize":{"type":"method","name":"initialize","children":[],"call":["str string ","str respond_to? "]}," Multibyte Chars to_str":{"type":"method","name":"to_str","children":[],"call":[]}," ActiveSupport JSON can_unquote_identifier?":{"type":"method","name":"can_unquote_identifier?","children":[],"call":["key to_s =~ ","key to_s "," unquote_hash_key_identifiers "]}," Test Unit Error message_with_silenced_deprecation":{"type":"method","name":"message_with_silenced_deprecation","children":[],"call":[" message_without_silenced_deprecation ","ActiveSupport Deprecation  silence "," ActiveSupport Deprecation  silence "]}," ActiveSupport Deprecation DeprecatedInstanceVariableProxy warn":{"type":"method","name":"warn","children":[],"call":["ActiveSupport Deprecation  warn ","args inspect ","@deprecator warn "]}," ActiveSupport Deprecation DeprecatedInstanceVariableProxy target":{"type":"method","name":"target","children":[],"call":["@instance __send__ "]}," ActiveSupport Deprecation DeprecatedInstanceVariableProxy method_missing":{"type":"method","name":"method_missing","children":[],"call":[" target __send__ "," target "," warn "," caller "]}," ActiveSupport Deprecation DeprecatedInstanceVariableProxy inspect":{"type":"method","name":"inspect","children":[],"call":[" target inspect "," target "]}," ActiveSupport Deprecation DeprecatedInstanceVariableProxy initialize":{"type":"method","name":"initialize","children":[],"call":["ActiveSupport Deprecation  _instance ","ActiveSupport  deprecator warn ","ActiveSupport  deprecator "]}," ActiveSupport Deprecation Assertions collect_deprecations":{"type":"method","name":"collect_deprecations","children":[],"call":["ActiveSupport Deprecation  behavior= ","deprecations << ","Proc  new ","ActiveSupport Deprecation  behavior "]}," ActiveSupport Deprecation Assertions assert_not_deprecated":{"type":"method","name":"assert_not_deprecated","children":[],"call":[" assert ","deprecations * ","deprecations size ","deprecations empty? "," collect_deprecations "]}," ActiveSupport Deprecation Assertions assert_deprecated":{"type":"method","name":"assert_deprecated","children":[],"call":[" assert ","warnings join ","w =~ ","warnings any? ","Regexp  new ","Regexp  escape ","match is_a? ","warnings empty? ! ","warnings empty? "," collect_deprecations ","Regexp  new  is_a? "]}," ActiveSupport Deprecation ClassMethods deprecation_horizon":{"type":"method","name":"deprecation_horizon","children":[],"call":[]}," ActiveSupport Deprecation ClassMethods deprecated_method_warning":{"type":"method","name":"deprecated_method_warning","children":[],"call":[" deprecation_horizon "]}," ActiveSupport Deprecation ClassMethods deprecate":{"type":"method","name":"deprecate","children":[],"call":[" class_eval ","options [] inspect ","options [] "," alias_method_chain ","method_names each ","method_names + ","options keys ","method_names pop ","method_names last is_a? ","method_names last ","method_names extract_options! ","93 + ","method_names pop  [] inspect ","method_names extract_options!  [] inspect ","method_names pop  [] ","method_names extract_options!  [] ","method_names +  each ","method_names +  + ","method_names pop  keys ","method_names extract_options!  keys ","method_names +  pop ","method_names +  last is_a? ","method_names +  last ","method_names +  extract_options! ","method_names extract_method_names pop ! ","method_names extract_method_names extract_options! ! "]}," ActiveSupport Deprecation extract_callstack":{"type":"method","name":"extract_callstack","children":[],"call":["callstack first ","md captures ","callstack first match ","offending_line match ","line start_with? ! ","line start_with? ","callstack find ","File  expand_path + ","File  expand_path ","callstack first match  captures ","offending_line match  captures "]}," ActiveSupport Deprecation deprecation_caller_message":{"type":"method","name":"deprecation_caller_message","children":[],"call":[" extract_callstack "]}," ActiveSupport Deprecation deprecation_message":{"type":"method","name":"deprecation_message","children":[],"call":[" deprecation_caller_message ","message =~ "]}," ActiveSupport Deprecation silence":{"type":"method","name":"silence","children":[],"call":[]}," ActiveSupport Deprecation silenced?":{"type":"method","name":"silenced?","children":[],"call":[]}," ActiveSupport Deprecation default_behavior":{"type":"method","name":"default_behavior","children":[],"call":["DEFAULT_BEHAVIORS  [] ","RAILS_ENV  to_s ","Deprecation DEFAULT_BEHAVIORS  [] ","Rails  env to_s ","Rails  env "]}," ActiveSupport Deprecation warn":{"type":"method","name":"warn","children":[],"call":[" behavior call "," deprecation_message "," behavior "," silenced? ! "," silenced? ","b call "," behavior each "," deprecation_message tap "," silenced "," silenced ! "]}," Object unloadable":{"type":"method","name":"unloadable","children":[],"call":["Dependencies  mark_for_unload ","ActiveSupport Dependencies  mark_for_unload "]}," Module unloadable":{"type":"method","name":"unloadable","children":[],"call":[]}," Dependencies log":{"type":"method","name":"log","children":[],"call":["RAILS_DEFAULT_LOGGER  debug "," log_activity "]}," Dependencies log_call":{"type":"method","name":"log_call","children":[],"call":[" log "," caller first "," caller ","args collect * ","args collect "," log_activity "]}," Dependencies remove_constant":{"type":"method","name":"remove_constant","children":[],"call":["parent send ","names last "," log ","(send\n  (send\n    (lvar :names) :[]\n    (irange\n      (int 0)\n      (int -2))) :*\n  (str \"::\")) constantize ","names [] * ","names [] ","names size == ","names size ","const split ","const to_s "," qualified_const_defined? "," remove_const ","parent instance_eval ","const to_s split ","(send\n  (send\n    (lvar :names) :[]\n    (irange\n      (int 0)\n      (int -2))) :*\n  (str \"::\")) constantize  send ","const split  last ","const to_s split  last ","(send\n  (send\n    (lvar :const split ) :[]\n    (irange\n      (int 0)\n      (int -2))) :*\n  (str \"::\")) constantize ","(send\n  (send\n    (lvar :const to_s split ) :[]\n    (irange\n      (int 0)\n      (int -2))) :*\n  (str \"::\")) constantize ","const split  [] * ","const to_s split  [] * ","const split  [] ","const to_s split  [] ","const split  size == ","const to_s split  size == ","const split  size ","const to_s split  size ","(send\n  (send\n    (lvar :names) :[]\n    (irange\n      (int 0)\n      (int -2))) :*\n  (str \"::\")) constantize  instance_eval "]}," Dependencies to_constant_name":{"type":"method","name":"to_constant_name","children":[],"call":[" raise ","desc inspect ","desc name ","desc name blank? ","desc to_s ","desc [] ","desc starts_with? "]}," Dependencies new_constants_in":{"type":"method","name":"new_constants_in","children":[],"call":["frame_ids include? ","watch_frame object_id "," constant_watch_stack delete_if "," constant_watch_stack ","watch_frames collect ","watch_frames empty? ! ","watch_frames empty? ","new_constants clear "," remove_constant ","new_constants each "," log ","new_constants * ","(send\n  (lvar :watch_frames) :collect) flatten ","mod_name == ","new_constants collect ","constants concat ","frame_name == "," constant_watch_stack each ","mod constants - ","mod constants ","mod is_a? ","mod_name constantize "," qualified_const_defined? "," constant_watch_stack concat "," raise ","desc inspect ","mod_name constantize constants ","desc to_s ","desc is_a? ","desc constants ","desc name ","descs collect "," log_call ","mod local_constants - ","mod local_constants ","mod_name constantize local_constants ","desc local_constants ","mod local_constant_names - ","mod local_constant_names ","mod_name constantize local_constant_names ","desc local_constant_names ","watch_frames blank? ! ","watch_frames blank? ","watch_frames collect  include? ","(send\n  (lvar :watch_frames) :collect) flatten  clear ","mod constants -  clear ","mod local_constants -  clear ","mod local_constant_names -  clear ","(send\n  (lvar :watch_frames) :collect) flatten  each ","mod constants -  each ","mod local_constants -  each ","mod local_constant_names -  each ","(send\n  (lvar :watch_frames) :collect) flatten  * ","mod constants -  * ","mod local_constants -  * ","mod local_constant_names -  * ","mod_name constantize _name == ","desc to_s  == ","desc name  == ","(send\n  (lvar :watch_frames) :collect) flatten  collect ","mod constants -  collect ","mod local_constants -  collect ","mod local_constant_names -  collect ","mod_name constantize  constants - ","mod_name constantize  constants ","mod_name constantize  is_a? ","mod_name constantize _name constantize ","desc to_s  constantize ","desc name  constantize ","mod_name constantize _name constantize constants ","desc to_s  constantize constants ","desc name  constantize constants ","mod_name constantize  local_constants - ","mod_name constantize  local_constants ","mod_name constantize _name constantize local_constants ","desc to_s  constantize local_constants ","desc name  constantize local_constants ","mod_name constantize  local_constant_names - ","mod_name constantize  local_constant_names ","mod_name constantize _name constantize local_constant_names ","desc to_s  constantize local_constant_names ","desc name  constantize local_constant_names "]}," Dependencies mark_for_unload":{"type":"method","name":"mark_for_unload","children":[],"call":[" explicitly_unloadable_constants << "," explicitly_unloadable_constants "," explicitly_unloadable_constants include? "," to_constant_name "," to_constant_ to_constant_name  "]}," Dependencies will_unload?":{"type":"method","name":"will_unload?","children":[],"call":[" explicitly_unloadable_constants include? "," to_constant_name "," explicitly_unloadable_constants "," autoloaded? "," desc "]}," Dependencies autoloaded?":{"type":"method","name":"autoloaded?","children":[],"call":[" autoloaded_constants include? "," autoloaded_constants "," qualified_const_defined? "," to_constant_name ","desc name blank? ","desc name ","desc is_a? "," to_constant_ to_constant_name  ","desc  to_constant_name  blank? ","desc  to_constant_name  "]}," Dependencies remove_unloadable_constants!":{"type":"method","name":"remove_unloadable_constants!","children":[],"call":[" remove_constant "," explicitly_unloadable_constants each "," explicitly_unloadable_constants "," autoloaded_constants clear "," autoloaded_constants "," autoloaded_constants each "]}," Dependencies load_missing_constant":{"type":"method","name":"load_missing_constant","children":[],"call":[" raise ","e missing_name? "," qualified_name_for ","parent const_missing ","(send\n  (send\n    (lvar :from_mod) :parents) :any?) ! ","p const_defined? ","from_mod parents any? ","from_mod parents ","parent != ","from_mod parent "," autoload_module! ","from_mod const_get ","from_mod const_defined? "," require_or_load "," loaded include? ! "," loaded include? ","File  expand_path "," loaded "," search_for_file ","NameError  new ","qualified_name underscore ","from_mod name constantize object_id == ","from_mod object_id ","from_mod name constantize object_id ","from_mod name constantize ","from_mod name "," qualified_const_defined? ","from_mod name empty? "," log "," Object  const_get "," Object  const_defined? ","from_mod == "," log_call ","from_mod name blank? "," uninherited_const_defined? ","  qualified_name_for _for ","from_mod parent  const_missing ","(send\n  (send\n    (lvar :from_mod) :from_mod parent s) :any?) ! ","(send\n  (send\n    (lvar :from_ autoload_module! ) :parents) :any?) ! ","from_mod from_mod parent s any? ","from_ autoload_module!  parents any? ","from_mod from_mod parent s ","from_ autoload_module!  parents ","from_mod parent  != ","from_mod from_mod parent  ","from_ autoload_module!  parent "," autoload_ autoload_module! ule! ","from_ autoload_module!  const_get ","from_ autoload_module!  const_defined? "," qualified_name_for  underscore ","from_ autoload_module!  name constantize object_id == ","from_ autoload_module!  object_id ","from_ autoload_module!  name constantize object_id ","from_ autoload_module!  name constantize ","from_ autoload_module!  name ","from_ autoload_module!  name empty? ","from_ autoload_module!  == ","from_ autoload_module!  name blank? "]}," Dependencies qualified_name_for":{"type":"method","name":"qualified_name_for","children":[],"call":["name to_s ","(str \"Object\") include? "," to_constant_name "]}," Dependencies load_file":{"type":"method","name":"load_file","children":[],"call":[" log ","newly_defined_paths * ","newly_defined_paths empty? "," autoloaded_constants uniq! "," autoloaded_constants "," autoloaded_constants concat "," load_once_path? "," load_without_new_constant_marking "," new_constants_in ","const_paths collect ","(lvar :const_paths) compact ","const_paths is_a? "," log_call ","(lvar :const_paths) compact  collect ","(lvar :(lvar :const_paths) compact ) compact ","(lvar :const_paths) compact  is_a? "]}," Dependencies autoload_module!":{"type":"method","name":"autoload_module!","children":[],"call":[" autoloaded_constants << "," autoloaded_constants "," load_once_paths include? "," load_once_paths ","into const_set ","Module  new "," autoloadable_module? "," autoloadable_Module  new ule? "]}," Dependencies load_once_path?":{"type":"method","name":"load_once_path?","children":[],"call":["path starts_with? "," load_once_paths any? "," load_once_paths "]}," Dependencies autoloadable_module?":{"type":"method","name":"autoloadable_module?","children":[],"call":["File  directory? ","File  join "," load_paths each "," load_paths "]}," Dependencies search_for_file":{"type":"method","name":"search_for_file","children":[],"call":["File  file? ","File  join "," load_paths each "," load_paths ","path_suffix + ","path_suffix ends_with? "," load_File  join s each "," load_File  join s ","File  join _suffix + ","path_suffix +  + ","File  join _suffix ends_with? ","path_suffix +  ends_with? "]}," Dependencies loadable_constants_for_path":{"type":"method","name":"loadable_constants_for_path","children":[],"call":["(send\n  (lvar :bases) :collect) flatten compact uniq ","(send\n  (lvar :bases) :collect) flatten compact ","(send\n  (lvar :bases) :collect) flatten ","nesting == ","nesting camelize ","nesting blank? ","nesting [] ","nesting [] == ","expanded_path [] ","expanded_root size ","(str \"\\\\A\") =~ ","Regexp  escape ","File  expand_path ","bases collect ","path =~ ","nesting []  == ","expanded_path []  == ","nesting []  camelize ","expanded_path []  camelize ","nesting []  blank? ","expanded_path []  blank? ","nesting []  [] ","expanded_path []  [] ","nesting []  [] == ","expanded_path []  [] == ","File  expand_path  [] ","File  expand_path  size "]}," Dependencies qualified_const_defined?":{"type":"method","name":"qualified_const_defined?","children":[],"call":["mod const_get ","mod const_defined? ","names inject ","names shift ","names first empty? ","names first ","path split "," raise ","path inspect ","path to_s split ","path to_s "," uninherited_const_defined? ","path split  inject ","path to_s split  inject ","path split  shift ","path to_s split  shift ","path split  first empty? ","path to_s split  first empty? ","path split  first ","path to_s split  first "]}," ActiveSupport CoreExtensions Time Conversions included":{"type":"method","name":"included","children":[],"call":[]}," ActiveSupport CoreExtensions Time Calculations included":{"type":"method","name":"included","children":[],"call":[]}," ActiveSupport CoreExtensions String Unicode is_utf8?":{"type":"method","name":"is_utf8?","children":[],"call":["ActiveSupport Multibyte Handlers UTF8Handler  consumes? "," dup force_encoding valid_encoding? "," dup force_encoding "," dup "," valid_encoding? "," encoding "]}," ActiveSupport CoreExtensions String Unicode chars":{"type":"method","name":"chars","children":[],"call":["ActiveSupport Multibyte Chars  new "]}," NameError missing_name?":{"type":"method","name":"missing_name?","children":[],"call":[" missing_name == ","name to_s "," missing_name ","last_name == ","(or\n  (send nil :missing_name)\n  (str \"\")) split last ","(or\n  (send nil :missing_name)\n  (str \"\")) split ","name is_a? "," name == "," name ","(or\n  (send nil :missing_name)\n  (str \"\")) split last  == "]}," NameError missing_name":{"type":"method","name":"missing_name","children":[],"call":[" message ","(str \"undefined local variable or method\") !~ "," original_message "," respond_to? ","match [] ","message match "," name "," real_mod_name "," name to_s ","receiver == "," receiver ","message start_with? ","  message  ","  original_message  "," original_ message  "," original_ original_message  ","message match  [] "," message  match "," original_message  match ","message message match  "," message  start_with? "," original_message  start_with? "]}," Module attr_internal_ivar_name":{"type":"method","name":"attr_internal_ivar_name","children":[],"call":[" attr_internal_naming_format % "," attr_internal_naming_format ","Module  attr_internal_naming_format % ","Module  attr_internal_naming_format "]}," Module attr_internal_accessor":{"type":"method","name":"attr_internal_accessor","children":[],"call":[" attr_internal_writer "," attr_internal_reader "]}," Module attr_internal_writer":{"type":"method","name":"attr_internal_writer","children":[],"call":[" module_eval "," attr_internal_ivar_name ","attrs each "," attr_internal_define "]}," Module attr_internal_reader":{"type":"method","name":"attr_internal_reader","children":[],"call":[" module_eval "," attr_internal_ivar_name ","attrs each "," attr_internal_define "]}," Module alias_attribute":{"type":"method","name":"alias_attribute","children":[],"call":[" module_eval ","52 + ","64 + ","63 + ","68 + ","23 + ","25 + "]}," Module alias_method_chain":{"type":"method","name":"alias_method_chain","children":[],"call":[" alias_method "," block_given? ","target to_s sub ","target to_s "," private "," private_method_defined? "," protected "," protected_method_defined? "," public "," public_method_defined? ","ActiveSupport Deprecation  warn "]}," HashWithIndifferentAccess symbolize_keys!":{"type":"method","name":"symbolize_keys!","children":[],"call":[]}," HashWithIndifferentAccess stringify_keys!":{"type":"method","name":"stringify_keys!","children":[],"call":[]}," ActiveSupport CoreExtensions Hash Conversions ClassMethods undasherize_keys":{"type":"method","name":"undasherize_keys","children":[],"call":[" undasherize_keys ","params map ","h []= ","k to_s tr ","k to_s ","params inject ","params class to_s ","params class "]}," ActiveSupport CoreExtensions Hash Conversions ClassMethods translate_xml_entities":{"type":"method","name":"translate_xml_entities","children":[],"call":["value gsub gsub gsub gsub gsub ","value gsub gsub gsub gsub ","value gsub gsub gsub ","value gsub gsub ","value gsub "]}," ActiveSupport CoreExtensions Hash Conversions ClassMethods typecast_xml_value":{"type":"method","name":"typecast_xml_value","children":[],"call":[" raise ","value inspect ","value first ","value length "," typecast_xml_value ","value map! ","h []= ","value inject ","value [] == ","value [] ","value blank? "," Date  parse "," Time  parse utc "," Time  parse ","content strip == ","content strip ","content to_i "," translate_xml_entities ","value has_key? ","value class to_s ","value class ","value class name ","xml_value [] ","xml_value [] is_a? ","value size == ","value size ","value [] != ","XML_PARSING  [] call ","XML_PARSING  [] ","parser arity == ","parser arity ","entries inspect ","entries collect ","entries class to_s ","entries class ","c blank? ","entries nil? ","k != ","value detect ","value [] is_a? ! ","value [] is_a? ","disallowed_types include? ","value include? "," translate_xml_entities  strip == ","value []  strip == "," translate_xml_entities  strip ","value []  strip "," translate_xml_entities  to_i ","value []  to_i ","XML_PARSING  []  arity == ","XML_PARSING  []  arity "]}," ActiveSupport CoreExtensions Hash Conversions ClassMethods create_from_xml":{"type":"method","name":"create_from_xml","children":[],"call":[" from_xml ","ActiveSupport Deprecation  warn "," caller "]}," ActiveSupport CoreExtensions Hash Conversions ClassMethods from_xml":{"type":"method","name":"from_xml","children":[],"call":[" undasherize_keys "," typecast_xml_value ","XmlSimple  xml_in ","XmlSimple  xml_in_string "," unrename_keys ","XmlMini  parse "]}," ActiveSupport CoreExtensions Hash Conversions included":{"type":"method","name":"included","children":[],"call":[]}," Enumerable index_by":{"type":"method","name":"index_by","children":[],"call":["accum []= "," inject ","Hash  [] "," map "," to_enum "," block_given? "," size "," respond_to? ","result []= "," each "]}," Enumerable sum":{"type":"method","name":"sum","children":[],"call":["sum + "," inject "," map sum "," map "," block_given? "," size > "," size "," _original_sum_with_required_identity ","ActiveSupport Deprecation  warn ","(str \"        Rails 7.0 has deprecated Enumerable.sum in favor of Ruby's native implementation available since 2.4.\\n\") squish "," first == "," first "," first is_a? "," first respond_to? ","(str \"              Rails 7.0 has deprecated Enumerable.sum in favor of Ruby's native implementation available since 2.4.\\n\") squish ","value respond_to? ","value is_a? "," reduce "," inject  + "," map  inject  "," _original_ inject _with_required_identity ","(str \"        Rails 7.0 has deprecated Enumerable. inject  in favor of Ruby's native implementation available since 2.4.\\n\") squish ","(str \"              Rails 7.0 has deprecated Enumerable. inject  in favor of Ruby's native implementation available since 2.4.\\n\") squish "]}," ActiveSupport CoreExtensions Date Conversions xmlschema":{"type":"method","name":"xmlschema","children":[],"call":[" to_time xmlschema "," to_time "]}," BigDecimal to_s":{"type":"method","name":"to_s","children":[],"call":[" _original_to_s "]}," ActiveSupport CoreExtensions Array Grouping split":{"type":"method","name":"split","children":[],"call":["results last << ","results last ","results << ","block call "," inject ","e == ","Proc  new ","value == "," block_given? "]}," ActiveSupport CoreExtensions Array Grouping in_groups_of":{"type":"method","name":"in_groups_of","children":[],"call":[" block_given? ","grouped_collection << ","collection each_slice ","collection << ","collection size modulo zero? ","collection size modulo ","collection size ","fill_with == "," dup "," require ","groups << "," returning "," dup concat ","(lvar :fill_with) * ","(send\n  (lvar :number) :-\n  (send\n    (send nil :size) :%\n    (lvar :number))) % ","number - "," size % "," size "," tap ","grouped_ dup  << ","grouped_ dup concat  << "," dup  each_slice "," dup concat  each_slice "," dup  << "," dup concat  << "," dup  size modulo zero? "," dup concat  size modulo zero? "," dup  size modulo "," dup concat  size modulo "," dup  size "," dup concat  size "]}," ActiveSupport CoreExtensions Array Conversions to_formatted_s":{"type":"method","name":"to_formatted_s","children":[],"call":[" to_default_s ","(send nil :collect) join ","element id "," collect "," empty? "," respond_to? "]}," ActiveSupport CoreExtensions Array Conversions included":{"type":"method","name":"included","children":[],"call":[]}," Module local_constants":{"type":"method","name":"local_constants","children":[],"call":["inherited [] object_id != "," const_get object_id "," const_get ","inherited [] object_id ","inherited [] ","inherited key? ! ","inherited key? "," constants select "," constants ","inherited []= ","anc const_get ","anc constants each ","anc constants ","anc == "," ancestors each "," ancestors ","ActiveSupport Deprecation  warn ","(str \"      Module#local_constants is deprecated and will be removed in Rails 5.1.\\n\") squish "]}," XmlSimple xml_in_string":{"type":"method","name":"xml_in_string","children":[],"call":[" merge ","@doc root name ","@doc root ","@options [] "," collapse "," parse "," handle_options "," parse  root name "," parse  root "]}," ActiveSupport CoreExtensions Hash Conversions to_query":{"type":"method","name":"to_query","children":[],"call":["(send nil :collect) sort * ","(send nil :collect) sort ","value to_query "," collect "]}," Array to_query":{"type":"method","name":"to_query","children":[],"call":["(send nil :collect) sort * ","(send nil :collect) sort ","value to_query "," collect ","(send nil :collect) * ","(send nil :collect) join "," to_query "," empty? "]}," Object to_query":{"type":"method","name":"to_query","children":[],"call":["CGI  escape "," to_param to_s "," to_param ","key to_s "," require ","(nth-ref 1) pack ","CGI  escape gsub ","key to_param "]}," Object to_param":{"type":"method","name":"to_param","children":[],"call":[" to_s "]}," Builder CSS _css_line":{"type":"method","name":"_css_line","children":[],"call":[" _text ","args * ","sym to_s gsub ","sym to_s "]}," Builder CSS _end_container":{"type":"method","name":"_end_container","children":[],"call":["@parts << "]}," Builder CSS _start_container":{"type":"method","name":"_start_container","children":[],"call":["@parts << ","selector << ","# + ","atts [] ","sym to_s ","sym to_s  << "]}," Builder CSS _nested_structures":{"type":"method","name":"_nested_structures","children":[],"call":[" instance_eval "]}," Builder CSS _indent":{"type":"method","name":"_indent","children":[],"call":[" _text ","  * "]}," Builder CSS _newline":{"type":"method","name":"_newline","children":[],"call":[" _text "]}," Builder CSS _end_block":{"type":"method","name":"_end_block","children":[],"call":[" _newline "]}," Builder CSS _css_block":{"type":"method","name":"_css_block","children":[],"call":[" _end_block "," _end_container "," _nested_structures "," _newline "]}," Builder CSS _text":{"type":"method","name":"_text","children":[],"call":["@parts << "]}," Builder CSS _join_with_op!":{"type":"method","name":"_join_with_op!","children":[],"call":["@target << ","@target pop "]}," Builder CSS _unify_block":{"type":"method","name":"_unify_block","children":[],"call":["@target << ","@parts * "]}," Builder CSS nil?":{"type":"method","name":"nil?","children":[],"call":[]}," Builder CSS method_missing":{"type":"method","name":"method_missing","children":[],"call":[" _unify_block "," _start_container ","args first "," _newline "," _css_line "," _indent "," _css_block ","args shift ","args first kind_of? "]}," Builder CSS group!":{"type":"method","name":"group!","children":[],"call":[" _unify_block "," _css_block "," _text ","arg == ","args last "," instance_eval ","@library [] ","arg is_a? ","args each "]}," Builder CSS store!":{"type":"method","name":"store!","children":[],"call":["@library []= ","block to_proc "]}," Builder CSS class!":{"type":"method","name":"class!","children":[],"call":[" _unify_block "," _css_block "," _start_container "," block_given? ",". + ","arg to_s "]}," Builder CSS id!":{"type":"method","name":"id!","children":[],"call":[" _unify_block "," _css_block "," _start_container "," block_given? ","# + ","arg to_s "]}," Builder CSS comment!":{"type":"method","name":"comment!","children":[],"call":["@target << "]}," Builder CSS target!":{"type":"method","name":"target!","children":[],"call":["@target * "]}," Builder CSS |":{"type":"method","name":"|","children":[],"call":[" _join_with_op! "]}," Builder CSS >":{"type":"method","name":">","children":[],"call":[" _join_with_op! "]}," Builder CSS >>":{"type":"method","name":">>","children":[],"call":[" _join_with_op! "]}," Builder CSS +":{"type":"method","name":"+","children":[],"call":[" _join_with_op! "]}," Builder CSS initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Module append_features":{"type":"method","name":"append_features","children":[],"call":["BlankSlate  hide "," instance_methods each "," instance_methods ","mod != "," blankslate_original_append_features "]}," Object find_hidden_method":{"type":"method","name":"find_hidden_method","children":[],"call":[]}," BlankSlate reveal":{"type":"method","name":"reveal","children":[],"call":["bound_method call ","unbound_method bind "," define_method "," fail "," find_hidden_method "," find_hidden_method  bind "]}," BlankSlate find_hidden_method":{"type":"method","name":"find_hidden_method","children":[],"call":[" superclass find_hidden_method "," superclass ","@hidden_methods [] "]}," BlankSlate hide":{"type":"method","name":"hide","children":[],"call":[" undef_method ","@hidden_methods []= "," instance_method ","name to_sym ","name !~ "," instance_methods include? ","name to_s "," instance_methods "]}," ActiveSupport Testing Default run":{"type":"method","name":"run","children":[],"call":["@method_name to_s == ","@method_name to_s "]}," Multibyte Chars respond_to?":{"type":"method","name":"respond_to?","children":[],"call":[" handler respond_to? "," handler ","method to_s =~ ","method to_s ","@string respond_to? "]}," ActiveSupport JSON reserved_word?":{"type":"method","name":"reserved_word?","children":[],"call":["RESERVED_WORDS  include? ","key to_s "]}," ActiveSupport JSON valid_identifier?":{"type":"method","name":"valid_identifier?","children":[],"call":[" reserved_word? ! "," reserved_word? ","key to_s =~ ","key to_s "]}," TrueClass to_json":{"type":"method","name":"to_json","children":[],"call":[]}," Time to_json":{"type":"method","name":"to_json","children":[],"call":[" to_datetime to_json "," to_datetime "," formatted_offset "," strftime "," xmlschema inspect "," xmlschema ","ActiveSupport  use_standard_json_time_format "]}," Symbol to_json":{"type":"method","name":"to_json","children":[],"call":["ActiveSupport JSON  encode "," to_s "]}," String to_json":{"type":"method","name":"to_json","children":[],"call":["\" + + ","\" + ","s unpack pack unpack [] gsub ","s unpack pack unpack [] ","s unpack pack unpack ","s unpack pack ","s unpack ","(send nil :gsub\n  (regexp\n    (str \"[\\\\010\\\\f\\\\n\\\\r\\\\t\\\"\\\\\\\\><&]\")\n    (regopt))) gsub ","ActiveSupport JSON Encoding ESCAPED_CHARS  [] "," gsub ","(send\n  (lvar :json) :gsub\n  (regexp\n    (str \"([\\\\xC0-\\\\xDF][\\\\x80-\\\\xBF]|\\n\")\n    (str \"             [\\\\xE0-\\\\xEF][\\\\x80-\\\\xBF]{2}|\\n\")\n    (str \"             [\\\\xF0-\\\\xF7][\\\\x80-\\\\xBF]{3})+\")\n    (regopt :n :x))) + ","json gsub ","json force_encoding "," respond_to? ","ActiveSupport JSON Encoding  escape_regex ","ActiveSupport JSON Encoding  escape ","(send\n  (lvar :\" + ) :gsub\n  (regexp\n    (str \"([\\\\xC0-\\\\xDF][\\\\x80-\\\\xBF]|\\n\")\n    (str \"             [\\\\xE0-\\\\xEF][\\\\x80-\\\\xBF]{2}|\\n\")\n    (str \"             [\\\\xF0-\\\\xF7][\\\\x80-\\\\xBF]{3})+\")\n    (regopt :n :x))) + ","\" +  gsub ","\" +  force_encoding "]}," Regexp to_json":{"type":"method","name":"to_json","children":[],"call":[" inspect "]}," Numeric to_json":{"type":"method","name":"to_json","children":[],"call":[" to_s "]}," NilClass to_json":{"type":"method","name":"to_json","children":[],"call":[]}," Hash to_json":{"type":"method","name":"to_json","children":[],"call":["result << ","(send\n  (lvar :hash_keys) :map) * ","ActiveSupport JSON  encode "," [] ","hash_keys map "," returning ","hash_keys & "," Array ","options [] ","hash_keys - "," keys ","(send\n  (lvar :hash) :map) * ","key to_s ","hash map "," as_json ","Array  wrap ","(send\n  (lvar :hash_keys & ) :map) * ","(send\n  (lvar :hash_keys - ) :map) * ","(send\n  (lvar : keys ) :map) * ","(send\n  (lvar : as_json _keys) :map) * ","hash_keys &  map ","hash_keys -  map "," keys  map "," as_json _keys map ","hash_keys &  & ","hash_keys -  & "," keys  & "," as_json _keys & ","hash_keys &  - ","hash_keys -  - "," keys  - "," as_json _keys - ","(send\n  (lvar : as_json ) :map) * "," as_json  map "]}," FalseClass to_json":{"type":"method","name":"to_json","children":[],"call":[]}," Enumerable to_json":{"type":"method","name":"to_json","children":[],"call":["(send nil :map) * ","ActiveSupport JSON  encode "," map "]}," DateTime to_json":{"type":"method","name":"to_json","children":[],"call":[" strftime "," xmlschema inspect "," xmlschema ","ActiveSupport  use_standard_json_time_format "]}," Date to_json":{"type":"method","name":"to_json","children":[],"call":[" strftime ","ActiveSupport  use_standard_json_time_format "]}," ActiveSupport JSON convert_json_to_yaml":{"type":"method","name":"convert_json_to_yaml","children":[],"call":["output gsub! ","output []= ","i - ","times each ","(send\n  (send\n    (begin\n      (send\n        (array\n          (int 0)) :+\n        (send\n          (lvar :marks) :map\n          (block-pass\n            (sym :succ))))) :zip\n    (send\n      (lvar :marks) :+\n      (array\n        (send\n          (lvar :json) :length)))) :map) join ","json [] ","(send\n  (array\n    (int 0)) :+\n  (send\n    (lvar :marks) :map\n    (block-pass\n      (sym :succ)))) zip map ","(send\n  (array\n    (int 0)) :+\n  (send\n    (lvar :marks) :map\n    (block-pass\n      (sym :succ)))) zip ","marks + ","json length ","(int 0) + ","marks map ","json gsub ","marks empty? ","marks << ","scanner pos - ","scanner pos ","times << << ","scanner pos + ","times << ","pos + ","marks size ","json [] =~ ","quoting == ","quoting ! ","scanner [] ","scanner scan_until ","StringScanner  new ","output * ","output << ","right_pos [] ","left succ ","left_pos each_with_index ","(int -1) push ","scanner peek ","right_pos [] - + ","right_pos [] - ","scanner pos= ","scanner rest_size ","ustr == ","(send\n  (send\n    (lvar :ustr) :[]\n    (irange\n      (int 1)\n      (int -1))) :to_i\n  (int 16)) pack ","ustr [] to_i ","ustr [] ","ustr starts_with? ","scanner peek gsub ","(send\n  (send\n    (begin\n      (send\n        (array\n          (int 0)) :+\n        (send\n          (lvar :marks) :map\n          (block-pass\n            (sym :succ))))) :zip\n    (send\n      (lvar :marks) :+\n      (array\n        (send\n          (lvar :json) :length)))) :map) join  gsub! ","output *  gsub! ","(send\n  (send\n    (begin\n      (send\n        (array\n          (int 0)) :+\n        (send\n          (lvar :marks) :map\n          (block-pass\n            (sym :succ))))) :zip\n    (send\n      (lvar :marks) :+\n      (array\n        (send\n          (lvar :json) :length)))) :map) join  []= ","output *  []= ","scanner scanner pos  - ","scanner scanner pos  ","scanner scanner pos  + ","scanner pos  + ","(send\n  (send\n    (begin\n      (send\n        (array\n          (int 0)) :+\n        (send\n          (lvar :marks) :map\n          (block-pass\n            (sym :succ))))) :zip\n    (send\n      (lvar :marks) :+\n      (array\n        (send\n          (lvar :json) :length)))) :map) join  * ","output *  * ","(send\n  (send\n    (begin\n      (send\n        (array\n          (int 0)) :+\n        (send\n          (lvar :marks) :map\n          (block-pass\n            (sym :succ))))) :zip\n    (send\n      (lvar :marks) :+\n      (array\n        (send\n          (lvar :json) :length)))) :map) join  << ","output *  << ","right_scanner pos  [] ","marks <<  [] ","left_scanner pos  each_with_index ","(int -1) push  each_with_index ","right_scanner pos  [] - + ","marks <<  [] - + ","right_scanner pos  [] - ","marks <<  [] - ","scanner scanner pos = "]}," ActiveSupport JSON decode":{"type":"method","name":"decode","children":[],"call":[" raise ","YAML  load "," convert_json_to_yaml "," convert_dates_from ","ActiveSupport  parse_json_times ","MultiJson  decode ","MultiJson  load ","MultiJson  respond_to? "," JSON  parse ","options present? "]}," Inflector ordinalize":{"type":"method","name":"ordinalize","children":[],"call":["number to_i % ","number to_i ","(irange\n  (int 11)\n  (int 13)) include? "]}," Inflector dasherize":{"type":"method","name":"dasherize","children":[],"call":["underscored_word gsub "]}," Inflector titleize":{"type":"method","name":"titleize","children":[],"call":["1 capitalize "," humanize gsub "," humanize "," underscore "]}," Inflector inflections":{"type":"method","name":"inflections","children":[],"call":["Inflections  instance "," block_given? "]}," Inflector Inflections clear":{"type":"method","name":"clear","children":[],"call":[" instance_variable_set "]}," Inflector Inflections uncountable":{"type":"method","name":"uncountable","children":[],"call":["(send\n  (ivar :@uncountables) :<<\n  (lvar :words)) flatten! ","@uncountables << "]}," Inflector Inflections irregular":{"type":"method","name":"irregular","children":[],"call":[" singular ","singular [] downcase + ","singular [] ","singular [] downcase ","Regexp  new ","plural [] ","plural [] downcase ","singular [] upcase + ","singular [] upcase ","plural [] upcase "," plural ","plural [] downcase + ","plural [] upcase + ","\\1 + ","singular [] upcase == "]}," Inflector Inflections singular":{"type":"method","name":"singular","children":[],"call":["@singulars insert "]}," Inflector Inflections plural":{"type":"method","name":"plural","children":[],"call":["@plurals insert "]}," Inflector Inflections initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Duration method_missing":{"type":"method","name":"method_missing","children":[],"call":[" value send "," value "," value public_send "]}," ActiveSupport Duration sum":{"type":"method","name":"sum","children":[],"call":[" raise ","time inspect ","t advance ","sign * ","t since ","type == ","t acts_like? "," parts inject "," parts ","sign * * ","time since "," value "," parts empty? ","time acts_like? ","@parts inject ","@parts empty? "]}," ActiveSupport Duration inspect":{"type":"method","name":"inspect","children":[],"call":["(send\n  (array\n    (sym :years)\n    (sym :months)\n    (sym :days)\n    (sym :minutes)\n    (sym :seconds)) :map) compact to_sentence ","(send\n  (array\n    (sym :years)\n    (sym :months)\n    (sym :days)\n    (sym :minutes)\n    (sym :seconds)) :map) compact ","length to_s ","length to_s singularize ","n == ","n nonzero? ","consolidated [] ","(sym :years) map ","part last ","h [] ","part first "," parts inject ","Hash  new "," parts "," Hash  new ","parts to_sentence ","parts empty? ","(send\n  (block\n    (send\n      (block\n        (send\n          (send nil :parts) :reduce\n          (send\n            (const\n              (cbase) :Hash) :new\n            (int 0)))\n        (args\n          (arg :h)\n          (mlhs\n            (arg :l)\n            (arg :r)))\n        (begin\n          (op-asgn\n            (send\n              (lvar :h) :[]\n              (lvar :l)) :+\n            (lvar :r))\n          (lvar :h))) :sort_by)\n    (args\n      (arg :unit)\n      (arg :_))\n    (send\n      (array\n        (sym :years)\n        (sym :months)\n        (sym :days)\n        (sym :minutes)\n        (sym :seconds)) :index\n      (lvar :unit))) :map) to_sentence ","unit to_s ","unit to_s chop ","val == ","(send\n  (block\n    (send\n      (send nil :parts) :reduce\n      (send\n        (const\n          (cbase) :Hash) :new\n        (int 0)))\n    (args\n      (arg :h)\n      (mlhs\n        (arg :l)\n        (arg :r)))\n    (begin\n      (op-asgn\n        (send\n          (lvar :h) :[]\n          (lvar :l)) :+\n        (lvar :r))\n      (lvar :h))) :sort_by) map ","(sym :years) index ","(send\n  (send nil :parts) :reduce\n  (send\n    (const\n      (cbase) :Hash) :new\n    (int 0))) sort_by "," parts reduce "," I18n  default_locale ","(send\n  (block\n    (send\n      (block\n        (send\n          (send nil :parts) :reduce\n          (send\n            (const\n              (cbase) :Hash) :new\n            (int 0)))\n        (args\n          (arg :h)\n          (mlhs\n            (arg :l)\n            (arg :r)))\n        (begin\n          (op-asgn\n            (send\n              (lvar :h) :[]\n              (lvar :l)) :+\n            (lvar :r))\n          (lvar :h))) :sort_by)\n    (args\n      (arg :unit)\n      (arg :_))\n    (send\n      (array\n        (sym :years)\n        (sym :months)\n        (sym :weeks)\n        (sym :days)\n        (sym :hours)\n        (sym :minutes)\n        (sym :seconds)) :index\n      (lvar :unit))) :map) to_sentence ","(send\n  (block\n    (send\n      (block\n        (send\n          (send nil :parts) :reduce\n          (send\n            (const\n              (cbase) :Hash) :new\n            (int 0)))\n        (args\n          (arg :h)\n          (mlhs\n            (arg :l)\n            (arg :r)))\n        (begin\n          (op-asgn\n            (send\n              (lvar :h) :[]\n              (lvar :l)) :+\n            (lvar :r))\n          (lvar :h))) :sort_by)\n    (args\n      (arg :unit)\n      (arg :_))\n    (send\n      (const nil :PARTS) :index\n      (lvar :unit))) :map) to_sentence ","PARTS  index "," parts empty? ","(send\n  (block\n    (send\n      (send nil :parts) :sort_by)\n    (args\n      (arg :unit)\n      (arg :_))\n    (send\n      (const nil :PARTS) :index\n      (lvar :unit))) :map) to_sentence ","(send\n  (send nil :parts) :sort_by) map "," parts sort_by "," value ","(send\n  (block\n    (send\n      (ivar :@parts) :sort_by)\n    (args\n      (arg :unit)\n      (arg :_))\n    (send\n      (const nil :PARTS) :index\n      (lvar :unit))) :map) to_sentence ","(send\n  (ivar :@parts) :sort_by) map ","@parts sort_by ","@parts empty? ","(seconsolidated [] d\n  (array\n    (sym :years)\n    (sym :moconsolidated [] ths)\n    (sym :days)\n    (sym :miconsolidated [] utes)\n    (sym :secoconsolidated [] ds)) :map) compact to_seconsolidated [] teconsolidated [] ce ","(seconsolidated [] d\n  (array\n    (sym :years)\n    (sym :moconsolidated [] ths)\n    (sym :days)\n    (sym :miconsolidated [] utes)\n    (sym :secoconsolidated [] ds)) :map) compact ","leconsolidated [] gth to_s ","leconsolidated [] gth to_s siconsolidated [] gularize ","consolidated []  == ","consolidated []  consolidated [] oconsolidated [] zero? ","coconsolidated [] solidated [] "," parts iconsolidated [] ject "," (send\n  (array\n    (sym :years)\n    (sym :months)\n    (sym :days)\n    (sym :minutes)\n    (sym :seconds)) :map) compact  inject ","Hash  consolidated [] ew "," (send\n  (array\n    (sym :years)\n    (sym :months)\n    (sym :days)\n    (sym :minutes)\n    (sym :seconds)) :map) compact  "," Hash  consolidated [] ew ","parts to_seconsolidated [] teconsolidated [] ce ","(send\n  (array\n    (sym :years)\n    (sym :months)\n    (sym :days)\n    (sym :minutes)\n    (sym :seconds)) :map) compact  to_sentence ","(send\n  (array\n    (sym :years)\n    (sym :months)\n    (sym :days)\n    (sym :minutes)\n    (sym :seconds)) :map) compact  empty? ","(seconsolidated [] d\n  (block\n    (seconsolidated [] d\n      (block\n        (seconsolidated [] d\n          (seconsolidated [] d consolidated [] il :parts) :reduce\n          (seconsolidated [] d\n            (coconsolidated [] st\n              (cbase) :Hash) :consolidated [] ew\n            (iconsolidated [] t 0)))\n        (args\n          (arg :h)\n          (mlhs\n            (arg :l)\n            (arg :r)))\n        (begiconsolidated [] \n          (op-asgconsolidated [] \n            (seconsolidated [] d\n              (lvar :h) :[]\n              (lvar :l)) :+\n            (lvar :r))\n          (lvar :h))) :sort_by)\n    (args\n      (arg :uconsolidated [] it)\n      (arg :_))\n    (seconsolidated [] d\n      (array\n        (sym :years)\n        (sym :moconsolidated [] ths)\n        (sym :days)\n        (sym :miconsolidated [] utes)\n        (sym :secoconsolidated [] ds)) :iconsolidated [] dex\n      (lvar :uconsolidated [] it))) :map) to_seconsolidated [] teconsolidated [] ce ","(send\n  (block\n    (send\n      (block\n        (send\n          (send nil :(send\n  (array\n    (sym :years)\n    (sym :months)\n    (sym :days)\n    (sym :minutes)\n    (sym :seconds)) :map) compact ) :reduce\n          (send\n            (const\n              (cbase) :Hash) :new\n            (int 0)))\n        (args\n          (arg :h)\n          (mlhs\n            (arg :l)\n            (arg :r)))\n        (begin\n          (op-asgn\n            (send\n              (lvar :h) :[]\n              (lvar :l)) :+\n            (lvar :r))\n          (lvar :h))) :sort_by)\n    (args\n      (arg :unit)\n      (arg :_))\n    (send\n      (array\n        (sym :years)\n        (sym :months)\n        (sym :days)\n        (sym :minutes)\n        (sym :seconds)) :index\n      (lvar :unit))) :map) to_sentence ","uconsolidated [] it to_s ","uconsolidated [] it to_s chop ","(seconsolidated [] d\n  (block\n    (seconsolidated [] d\n      (seconsolidated [] d consolidated [] il :parts) :reduce\n      (seconsolidated [] d\n        (coconsolidated [] st\n          (cbase) :Hash) :consolidated [] ew\n        (iconsolidated [] t 0)))\n    (args\n      (arg :h)\n      (mlhs\n        (arg :l)\n        (arg :r)))\n    (begiconsolidated [] \n      (op-asgconsolidated [] \n        (seconsolidated [] d\n          (lvar :h) :[]\n          (lvar :l)) :+\n        (lvar :r))\n      (lvar :h))) :sort_by) map ","(send\n  (block\n    (send\n      (send nil :(send\n  (array\n    (sym :years)\n    (sym :months)\n    (sym :days)\n    (sym :minutes)\n    (sym :seconds)) :map) compact ) :reduce\n      (send\n        (const\n          (cbase) :Hash) :new\n        (int 0)))\n    (args\n      (arg :h)\n      (mlhs\n        (arg :l)\n        (arg :r)))\n    (begin\n      (op-asgn\n        (send\n          (lvar :h) :[]\n          (lvar :l)) :+\n        (lvar :r))\n      (lvar :h))) :sort_by) map ","(sym :years) iconsolidated [] dex ","(seconsolidated [] d\n  (seconsolidated [] d consolidated [] il :parts) :reduce\n  (seconsolidated [] d\n    (coconsolidated [] st\n      (cbase) :Hash) :consolidated [] ew\n    (iconsolidated [] t 0))) sort_by ","(send\n  (send nil :(send\n  (array\n    (sym :years)\n    (sym :months)\n    (sym :days)\n    (sym :minutes)\n    (sym :seconds)) :map) compact ) :reduce\n  (send\n    (const\n      (cbase) :Hash) :new\n    (int 0))) sort_by "," (send\n  (array\n    (sym :years)\n    (sym :months)\n    (sym :days)\n    (sym :minutes)\n    (sym :seconds)) :map) compact  reduce "," I18consolidated []   default_locale ","(seconsolidated [] d\n  (block\n    (seconsolidated [] d\n      (block\n        (seconsolidated [] d\n          (seconsolidated [] d consolidated [] il :parts) :reduce\n          (seconsolidated [] d\n            (coconsolidated [] st\n              (cbase) :Hash) :consolidated [] ew\n            (iconsolidated [] t 0)))\n        (args\n          (arg :h)\n          (mlhs\n            (arg :l)\n            (arg :r)))\n        (begiconsolidated [] \n          (op-asgconsolidated [] \n            (seconsolidated [] d\n              (lvar :h) :[]\n              (lvar :l)) :+\n            (lvar :r))\n          (lvar :h))) :sort_by)\n    (args\n      (arg :uconsolidated [] it)\n      (arg :_))\n    (seconsolidated [] d\n      (array\n        (sym :years)\n        (sym :moconsolidated [] ths)\n        (sym :weeks)\n        (sym :days)\n        (sym :hours)\n        (sym :miconsolidated [] utes)\n        (sym :secoconsolidated [] ds)) :iconsolidated [] dex\n      (lvar :uconsolidated [] it))) :map) to_seconsolidated [] teconsolidated [] ce ","(send\n  (block\n    (send\n      (block\n        (send\n          (send nil :(send\n  (array\n    (sym :years)\n    (sym :months)\n    (sym :days)\n    (sym :minutes)\n    (sym :seconds)) :map) compact ) :reduce\n          (send\n            (const\n              (cbase) :Hash) :new\n            (int 0)))\n        (args\n          (arg :h)\n          (mlhs\n            (arg :l)\n            (arg :r)))\n        (begin\n          (op-asgn\n            (send\n              (lvar :h) :[]\n              (lvar :l)) :+\n            (lvar :r))\n          (lvar :h))) :sort_by)\n    (args\n      (arg :unit)\n      (arg :_))\n    (send\n      (array\n        (sym :years)\n        (sym :months)\n        (sym :weeks)\n        (sym :days)\n        (sym :hours)\n        (sym :minutes)\n        (sym :seconds)) :index\n      (lvar :unit))) :map) to_sentence ","(seconsolidated [] d\n  (block\n    (seconsolidated [] d\n      (block\n        (seconsolidated [] d\n          (seconsolidated [] d consolidated [] il :parts) :reduce\n          (seconsolidated [] d\n            (coconsolidated [] st\n              (cbase) :Hash) :consolidated [] ew\n            (iconsolidated [] t 0)))\n        (args\n          (arg :h)\n          (mlhs\n            (arg :l)\n            (arg :r)))\n        (begiconsolidated [] \n          (op-asgconsolidated [] \n            (seconsolidated [] d\n              (lvar :h) :[]\n              (lvar :l)) :+\n            (lvar :r))\n          (lvar :h))) :sort_by)\n    (args\n      (arg :uconsolidated [] it)\n      (arg :_))\n    (seconsolidated [] d\n      (coconsolidated [] st consolidated [] il :PARTS) :iconsolidated [] dex\n      (lvar :uconsolidated [] it))) :map) to_seconsolidated [] teconsolidated [] ce ","(send\n  (block\n    (send\n      (block\n        (send\n          (send nil :(send\n  (array\n    (sym :years)\n    (sym :months)\n    (sym :days)\n    (sym :minutes)\n    (sym :seconds)) :map) compact ) :reduce\n          (send\n            (const\n              (cbase) :Hash) :new\n            (int 0)))\n        (args\n          (arg :h)\n          (mlhs\n            (arg :l)\n            (arg :r)))\n        (begin\n          (op-asgn\n            (send\n              (lvar :h) :[]\n              (lvar :l)) :+\n            (lvar :r))\n          (lvar :h))) :sort_by)\n    (args\n      (arg :unit)\n      (arg :_))\n    (send\n      (const nil :PARTS) :index\n      (lvar :unit))) :map) to_sentence ","PARTS  iconsolidated [] dex "," (send\n  (array\n    (sym :years)\n    (sym :months)\n    (sym :days)\n    (sym :minutes)\n    (sym :seconds)) :map) compact  empty? ","(seconsolidated [] d\n  (block\n    (seconsolidated [] d\n      (seconsolidated [] d consolidated [] il :parts) :sort_by)\n    (args\n      (arg :uconsolidated [] it)\n      (arg :_))\n    (seconsolidated [] d\n      (coconsolidated [] st consolidated [] il :PARTS) :iconsolidated [] dex\n      (lvar :uconsolidated [] it))) :map) to_seconsolidated [] teconsolidated [] ce ","(send\n  (block\n    (send\n      (send nil :(send\n  (array\n    (sym :years)\n    (sym :months)\n    (sym :days)\n    (sym :minutes)\n    (sym :seconds)) :map) compact ) :sort_by)\n    (args\n      (arg :unit)\n      (arg :_))\n    (send\n      (const nil :PARTS) :index\n      (lvar :unit))) :map) to_sentence ","(seconsolidated [] d\n  (seconsolidated [] d consolidated [] il :parts) :sort_by) map ","(send\n  (send nil :(send\n  (array\n    (sym :years)\n    (sym :months)\n    (sym :days)\n    (sym :minutes)\n    (sym :seconds)) :map) compact ) :sort_by) map "," (send\n  (array\n    (sym :years)\n    (sym :months)\n    (sym :days)\n    (sym :minutes)\n    (sym :seconds)) :map) compact  sort_by ","(seconsolidated [] d\n  (block\n    (seconsolidated [] d\n      (ivar :@parts) :sort_by)\n    (args\n      (arg :uconsolidated [] it)\n      (arg :_))\n    (seconsolidated [] d\n      (coconsolidated [] st consolidated [] il :PARTS) :iconsolidated [] dex\n      (lvar :uconsolidated [] it))) :map) to_seconsolidated [] teconsolidated [] ce ","(send\n  (block\n    (send\n      (ivar :@(send\n  (array\n    (sym :years)\n    (sym :months)\n    (sym :days)\n    (sym :minutes)\n    (sym :seconds)) :map) compact ) :sort_by)\n    (args\n      (arg :unit)\n      (arg :_))\n    (send\n      (const nil :PARTS) :index\n      (lvar :unit))) :map) to_sentence ","(seconsolidated [] d\n  (ivar :@parts) :sort_by) map ","(send\n  (ivar :@(send\n  (array\n    (sym :years)\n    (sym :months)\n    (sym :days)\n    (sym :minutes)\n    (sym :seconds)) :map) compact ) :sort_by) map ","@(send\n  (array\n    (sym :years)\n    (sym :months)\n    (sym :days)\n    (sym :minutes)\n    (sym :seconds)) :map) compact  sort_by ","@(send\n  (array\n    (sym :years)\n    (sym :months)\n    (sym :days)\n    (sym :minutes)\n    (sym :seconds)) :map) compact  empty? "]}," ActiveSupport Duration ago":{"type":"method","name":"ago","children":[],"call":[" sum "]}," ActiveSupport Duration since":{"type":"method","name":"since","children":[],"call":[" sum "]}," ActiveSupport Duration ===":{"type":"method","name":"===","children":[],"call":[" value === "," value ","other is_a? "]}," ActiveSupport Duration is_a?":{"type":"method","name":"is_a?","children":[],"call":["klass == "," value is_a? "," value ","Duration  == "]}," ActiveSupport Duration -@":{"type":"method","name":"-@","children":[],"call":["Duration  new ","number -@ "," parts map "," parts "," value -@ "," value "," parts transform_values ","@parts transform_values "]}," ActiveSupport Duration -":{"type":"method","name":"-","children":[],"call":[" + ","other -@ "]}," ActiveSupport Duration +":{"type":"method","name":"+","children":[],"call":["Duration  new ","@parts + "," value + "," value ","other parts ","other value ","Duration  === ","@parts merge ","@parts [] + ","@parts [] ","parts [] ","other parts each ","@parts dup ","@parts fetch + ","@parts fetch ","value + ","other variable? ","other _parts ","@@parts dup  + ","other @parts dup  ","@@parts dup  merge ","@@parts dup  [] + ","@@parts dup  [] ","@parts dup  [] ","other @parts dup  each ","@@parts dup  dup ","@@parts dup  fetch + ","@@parts dup  fetch ","other _@parts dup  "]}," ActiveSupport Duration initialize":{"type":"method","name":"initialize","children":[],"call":["@parts default= ","parts to_h ","v zero? ","@parts reject! ","value == ","VARIABLE_PARTS  include? ","@parts any? ","@variable nil? ","@parts freeze "]}," ActiveSupport CoreExtensions Time Conversions to_datetime":{"type":"method","name":"to_datetime","children":[],"call":[" DateTime  civil "," Rational "," utc_offset "," sec "," min "," hour "," day "," month "," year "]}," ActiveSupport CoreExtensions Time Calculations minus_with_duration":{"type":"method","name":"minus_with_duration","children":[],"call":[" minus_without_duration ","other until ","ActiveSupport Duration  === "]}," ActiveSupport CoreExtensions Time Calculations plus_with_duration":{"type":"method","name":"plus_with_duration","children":[],"call":[" plus_without_duration ","other since ","ActiveSupport Duration  === "]}," ActiveSupport CoreExtensions Time Calculations end_of_day":{"type":"method","name":"end_of_day","children":[],"call":[" change "]}," ActiveSupport CoreExtensions Time Calculations ClassMethods local_time":{"type":"method","name":"local_time","children":[],"call":[" time_with_datetime_fallback "]}," ActiveSupport CoreExtensions Time Calculations ClassMethods utc_time":{"type":"method","name":"utc_time","children":[],"call":[" time_with_datetime_fallback "]}," ActiveSupport CoreExtensions Time Calculations ClassMethods time_with_datetime_fallback":{"type":"method","name":"time_with_datetime_fallback","children":[],"call":[" DateTime  civil "," DateTime  local_offset ","utc_or_local to_sym == ","utc_or_local to_sym "," Time  send "," DateTime  local_ DateTime  local_offset  "]}," ActiveSupport CoreExtensions Time Behavior acts_like_time?":{"type":"method","name":"acts_like_time?","children":[],"call":[]}," Test Unit Assertions assert_no_difference":{"type":"method","name":"assert_no_difference","children":[],"call":[" assert_difference "]}," Test Unit Assertions assert_difference":{"type":"method","name":"assert_difference","children":[],"call":[" assert_equal ","expression call ","original_values [] + ","original_values [] ","expression_evaluations each_with_index ","memo << ","expression_evaluations inject "," eval ","block send! "," lambda "," Array collect "," Array ","expression [] call ","expression [] ","full_message << ","block __send__ "," Array map "]}," ActiveSupport CoreExtensions String Conversions to_datetime":{"type":"method","name":"to_datetime","children":[],"call":[" DateTime  civil ","(send\n  (send\n    (send\n      (const nil :ParseDate) :parsedate\n      (self)) :[]\n    (irange\n      (int 0)\n      (int 5))) :map) << ","ParseDate  parsedate [] map ","ParseDate  parsedate [] ","ParseDate  parsedate "," Date  _parse values_at map "," Date  _parse values_at "," Date  _parse "]}," ActiveSupport CoreExtensions Range Overlaps overlaps?":{"type":"method","name":"overlaps?","children":[],"call":["other include? "," first "," include? ","other first "]}," ActiveSupport CoreExtensions Range IncludeRange include_with_range?":{"type":"method","name":"include_with_range?","children":[],"call":[" include_without_range? ","(send\n  (send\n    (lvar :value) :last) :<=>\n  (lvar :end_value)) send ","value last <=> ","value last "," include? ","value first "," last "," last succ ","value exclude_end? "," exclude_end? ","value is_a? ","(send\n  (send\n    (lvar :value) :last) :<=>\n  (lvar : last )) send ","(send\n  (send\n    (lvar :value) :last) :<=>\n  (lvar : last succ )) send "]}," ActiveSupport CoreExtensions Range IncludeRange included":{"type":"method","name":"included","children":[],"call":[]}," ActiveSupport CoreExtensions Range BlocklessStep step_with_blockless":{"type":"method","name":"step_with_blockless","children":[],"call":["array << "," step_without_blockless "," returning "," block_given? "," step_without_blockless to_a "," tap "]}," ActiveSupport CoreExtensions Range BlocklessStep included":{"type":"method","name":"included","children":[],"call":[]}," Object acts_like?":{"type":"method","name":"acts_like?","children":[],"call":[" respond_to? "]}," Object instance_variable_defined?":{"type":"method","name":"instance_variable_defined?","children":[],"call":[" instance_variables include? ","variable to_s "," instance_variables "]}," Module attr_accessor_with_default":{"type":"method","name":"attr_accessor_with_default","children":[],"call":[" module_eval "," define_method ","Proc  new "," block_given? "," raise ","default nil? ! ","default nil? ","24 + ","ActiveSupport Deprecation  warn ","23 + "]}," Kernel breakpoint":{"type":"method","name":"breakpoint","children":[],"call":[" debugger ","RAILS_DEFAULT_LOGGER  info ","Rails  logger info ","Rails  logger ","$stderr puts "]}," Kernel debugger":{"type":"method","name":"debugger","children":[],"call":["RAILS_DEFAULT_LOGGER  info ","Rails  logger info ","Rails  logger ","$stderr puts "]}," ActiveSupport CoreExtensions Hash Slice slice!":{"type":"method","name":"slice!","children":[],"call":[" replace "," slice "," keys - "," keys "," convert_key ","keys map! "," respond_to? "]}," ActiveSupport CoreExtensions Hash Slice slice":{"type":"method","name":"slice","children":[],"call":["allowed include? ! ","allowed include? "," reject ","Set  new "," convert_key ","keys map "," respond_to? ","hash []= "," [] "," has_key? ","allowed each "," class new "," class ","keys each ","keys map! ","Set  new  include? ! ","Set  new  include? "," class new  []= ","Set  new  each "]}," HashWithIndifferentAccess to_hash":{"type":"method","name":"to_hash","children":[],"call":["Hash  new merge ","Hash  new "," default "]}," ActiveSupport CoreExtensions Hash Except except!":{"type":"method","name":"except!","children":[],"call":[" replace "," except "," delete ","keys each "," convert_key ","keys map! "," respond_to? "]}," ActiveSupport CoreExtensions Hash Except except":{"type":"method","name":"except","children":[],"call":["rejected include? "," reject ","Set  new "," convert_key ","keys map "," respond_to? "," clone except! "," clone "," dup except! "," dup ","Set  new  include? "]}," ActiveSupport CoreExtensions Float Rounding round_with_precision":{"type":"method","name":"round_with_precision","children":[],"call":["(send\n  (self) :*\n  (begin\n    (send\n      (int 10) :**\n      (lvar :precision)))) round / ","(send\n  (int 10) :**\n  (lvar :precision)) to_f ","10 ** ","(send\n  (self) :*\n  (begin\n    (send\n      (int 10) :**\n      (lvar :precision)))) round "," * "," round_without_precision ","precision nil? "]}," ActiveSupport CoreExtensions Float Rounding included":{"type":"method","name":"included","children":[],"call":[]}," atomic_write":{"type":"method","name":"atomic_write","children":[],"call":["Dir  tmpdir "]}," Numeric duplicable?":{"type":"method","name":"duplicable?","children":[],"call":[]}," Symbol duplicable?":{"type":"method","name":"duplicable?","children":[],"call":[]}," TrueClass duplicable?":{"type":"method","name":"duplicable?","children":[],"call":[]}," FalseClass duplicable?":{"type":"method","name":"duplicable?","children":[],"call":[]}," NilClass duplicable?":{"type":"method","name":"duplicable?","children":[],"call":[]}," Object duplicable?":{"type":"method","name":"duplicable?","children":[],"call":[]}," ActiveSupport CoreExtensions DateTime Conversions xmlschema":{"type":"method","name":"xmlschema","children":[],"call":[" strftime "," offset == "," offset "]}," ActiveSupport CoreExtensions DateTime Conversions to_datetime":{"type":"method","name":"to_datetime","children":[],"call":[]}," ActiveSupport CoreExtensions DateTime Conversions to_time":{"type":"method","name":"to_time","children":[],"call":[" Time  utc_time "," sec "," min "," hour "," day "," month "," year "," offset == "," offset "]}," ActiveSupport CoreExtensions DateTime Conversions to_date":{"type":"method","name":"to_date","children":[],"call":[" Date  new "," day "," month "," year "]}," ActiveSupport CoreExtensions DateTime Conversions readable_inspect":{"type":"method","name":"readable_inspect","children":[],"call":[" to_s "]}," ActiveSupport CoreExtensions DateTime Conversions to_formatted_s":{"type":"method","name":"to_formatted_s","children":[],"call":[" to_datetime_default_s "," strftime ","formatter call to_s ","formatter call ","formatter respond_to? "," Time DATE_FORMATS  [] "," to_default_s "," Time DATE_FORMATS  []  call to_s "," Time DATE_FORMATS  []  call "," Time DATE_FORMATS  []  respond_to? "]}," ActiveSupport CoreExtensions DateTime Conversions included":{"type":"method","name":"included","children":[],"call":[]}," ActiveSupport CoreExtensions DateTime Calculations end_of_day":{"type":"method","name":"end_of_day","children":[],"call":[" change "]}," ActiveSupport CoreExtensions DateTime Calculations beginning_of_day":{"type":"method","name":"beginning_of_day","children":[],"call":[" change "]}," ActiveSupport CoreExtensions DateTime Calculations since":{"type":"method","name":"since","children":[],"call":[" + "," Rational ","seconds round "]}," ActiveSupport CoreExtensions DateTime Calculations ago":{"type":"method","name":"ago","children":[],"call":[" since ","seconds -@ "]}," ActiveSupport CoreExtensions DateTime Calculations advance":{"type":"method","name":"advance","children":[],"call":["datetime_advanced_by_date since ","seconds_to_advance == ","(or\n  (send\n    (lvar :options) :[]\n    (sym :seconds))\n  (int 0)) + + ","(or\n  (send\n    (lvar :options) :[]\n    (sym :hours))\n  (int 0)) * ","options [] ","(or\n  (send\n    (lvar :options) :[]\n    (sym :seconds))\n  (int 0)) + ","(or\n  (send\n    (lvar :options) :[]\n    (sym :minutes))\n  (int 0)) * "," change ","d day ","d month ","d year "," to_date advance "," to_date "," change  since "," to_date advance atetime_a to_date advance vance to_date advance _by_ to_date advance ate since ","(or\n  (send\n    (lvar :options) :[]\n    (sym :seconds))\n  (int 0)) + +  == ","secon to_date advance s_to_a to_date advance vance == ","(or\n  (sen to_date advance \n    (lvar :options) :[]\n    (sym :secon to_date advance s))\n  (int 0)) + + ","(or\n  (sen to_date advance \n    (lvar :options) :[]\n    (sym :hours))\n  (int 0)) * ","(or\n  (sen to_date advance \n    (lvar :options) :[]\n    (sym :secon to_date advance s))\n  (int 0)) + ","(or\n  (sen to_date advance \n    (lvar :options) :[]\n    (sym :minutes))\n  (int 0)) * "," to_date advance   to_date advance ay "," to_date advance  month "," to_date advance  year "," to_ to_date advance ate a to_date advance vance "," to_ to_date advance ate "]}," ActiveSupport CoreExtensions DateTime Calculations change":{"type":"method","name":"change","children":[],"call":[" DateTime  civil "," start ","options [] "," offset "," sec "," min "," hour "," day "," month "," year "]}," ActiveSupport CoreExtensions DateTime Calculations seconds_since_midnight":{"type":"method","name":"seconds_since_midnight","children":[],"call":[" sec + + "," hour * "," hour "," sec + "," min * "," min "," sec "]}," ActiveSupport CoreExtensions DateTime Calculations ClassMethods local_offset":{"type":"method","name":"local_offset","children":[],"call":[" Time  local utc_offset to_r / "," Time  local utc_offset to_r "," Time  local utc_offset "," Time  local "]}," ActiveSupport CoreExtensions DateTime Calculations included":{"type":"method","name":"included","children":[],"call":[]}," ActiveSupport CoreExtensions Date Conversions to_datetime":{"type":"method","name":"to_datetime","children":[],"call":[" DateTime  civil "," day "," month "," year "]}," ActiveSupport CoreExtensions Date Conversions readable_inspect":{"type":"method","name":"readable_inspect","children":[],"call":[" strftime "]}," ActiveSupport CoreExtensions Date Calculations tomorrow":{"type":"method","name":"tomorrow","children":[],"call":[" + "]}," ActiveSupport CoreExtensions Date Calculations yesterday":{"type":"method","name":"yesterday","children":[],"call":[" - "]}," ActiveSupport CoreExtensions Date Calculations beginning_of_year":{"type":"method","name":"beginning_of_year","children":[],"call":[" change "," acts_like? "]}," ActiveSupport CoreExtensions Date Calculations beginning_of_quarter":{"type":"method","name":"beginning_of_quarter","children":[],"call":[" beginning_of_month change ","m <= "," month ","(int 10) detect "," beginning_of_month "]}," ActiveSupport CoreExtensions Date Calculations end_of_month":{"type":"method","name":"end_of_month","children":[],"call":[" change "," acts_like? "," Time  days_in_month "," year "," month "]}," ActiveSupport CoreExtensions Date Calculations beginning_of_month":{"type":"method","name":"beginning_of_month","children":[],"call":[" change "," acts_like? "]}," ActiveSupport CoreExtensions Date Calculations next_week":{"type":"method","name":"next_week","children":[],"call":["result change "," acts_like? ","(send\n  (self) :+\n  (int 7)) beginning_of_week + ","days_into_week [] ","(send\n  (self) :+\n  (int 7)) beginning_of_week "," + ","(send\n  (self) :+\n  (int 7)) beginning_of_week +  change "]}," ActiveSupport CoreExtensions Date Calculations beginning_of_week":{"type":"method","name":"beginning_of_week","children":[],"call":["result midnight "," acts_like? "," - "," wday - "," wday "," wday != "," -  midnight "]}," ActiveSupport CoreExtensions Date Calculations next_month":{"type":"method","name":"next_month","children":[],"call":[" months_since "]}," ActiveSupport CoreExtensions Date Calculations last_month":{"type":"method","name":"last_month","children":[],"call":[" months_ago "," prev_month ","ActiveSupport Deprecation  warn "," caller "]}," ActiveSupport CoreExtensions Date Calculations next_year":{"type":"method","name":"next_year","children":[],"call":[" years_since "]}," ActiveSupport CoreExtensions Date Calculations last_year":{"type":"method","name":"last_year","children":[],"call":[" years_ago "," prev_year ","ActiveSupport Deprecation  warn "," caller "]}," ActiveSupport CoreExtensions Date Calculations years_since":{"type":"method","name":"years_since","children":[],"call":[" advance "]}," ActiveSupport CoreExtensions Date Calculations years_ago":{"type":"method","name":"years_ago","children":[],"call":[" advance ","years -@ "]}," ActiveSupport CoreExtensions Date Calculations months_since":{"type":"method","name":"months_since","children":[],"call":[" advance "]}," ActiveSupport CoreExtensions Date Calculations months_ago":{"type":"method","name":"months_ago","children":[],"call":[" advance ","months -@ "]}," ActiveSupport CoreExtensions Date Calculations change":{"type":"method","name":"change","children":[],"call":[" Date  new "," day ","options [] "," month "," year "]}," ActiveSupport CoreExtensions Date Calculations advance":{"type":"method","name":"advance","children":[],"call":["d + ","options delete ","options [] ","options delete * ","d >> ","options dup ","d +  + ","d >>  + ","options d + elete ","options d >> elete ","options dup  delete ","options dup  [] ","options d + elete * ","options d >> elete * ","options dup  delete * ","d +  >> ","d >>  >> ","options d + up ","options d >> up ","options dup  dup "]}," ActiveSupport CoreExtensions Date Calculations minus_with_duration":{"type":"method","name":"minus_with_duration","children":[],"call":[" minus_without_duration "," plus_with_duration ","other -@ ","ActiveSupport Duration  === "]}," ActiveSupport CoreExtensions Date Calculations plus_with_duration":{"type":"method","name":"plus_with_duration","children":[],"call":[" plus_without_duration ","other since ","ActiveSupport Duration  === "]}," ActiveSupport CoreExtensions Date Calculations end_of_day":{"type":"method","name":"end_of_day","children":[],"call":[" to_time end_of_day "," to_time "]}," ActiveSupport CoreExtensions Date Calculations beginning_of_day":{"type":"method","name":"beginning_of_day","children":[],"call":[" to_time "]}," ActiveSupport CoreExtensions Date Calculations since":{"type":"method","name":"since","children":[],"call":[" to_time since "," to_time "]}," ActiveSupport CoreExtensions Date Calculations ago":{"type":"method","name":"ago","children":[],"call":[" to_time since ","seconds -@ "," to_time "]}," ActiveSupport CoreExtensions Date Calculations ClassMethods tomorrow":{"type":"method","name":"tomorrow","children":[],"call":[" Date  today tomorrow "," Date  today "]}," ActiveSupport CoreExtensions Date Calculations ClassMethods yesterday":{"type":"method","name":"yesterday","children":[],"call":[" Date  today yesterday "," Date  today "]}," ActiveSupport CoreExtensions Date Calculations included":{"type":"method","name":"included","children":[],"call":[]}," ActiveSupport CoreExtensions Date Behavior acts_like_date?":{"type":"method","name":"acts_like_date?","children":[],"call":[]}," Class superclass_delegating_accessor":{"type":"method","name":"superclass_delegating_accessor","children":[],"call":[" superclass_delegating_writer "," superclass_delegating_reader "," send ! ! "," send ! "," send "," define_method ","options [] != ","options [] "," singleton_class send "," singleton_class "," _superclass_delegating_accessor "," metaclass send "," metaclass "]}," Class superclass_delegating_writer":{"type":"method","name":"superclass_delegating_writer","children":[],"call":[" class_eval ","names each "," send "," block_given? ","31 + "]}," Class superclass_delegating_reader":{"type":"method","name":"superclass_delegating_reader","children":[],"call":[" class_eval ","names each "," superclass name "," superclass "," superclass name blank? ","7 + "]}," ActiveSupport CoreExtensions Array RandomAccess rand":{"type":"method","name":"rand","children":[],"call":[" [] ","Kernel  rand "," length "," sample ","ActiveSupport Deprecation  warn "," caller "," random_element "]}," ActiveSupport CoreExtensions Array ExtractOptions extract_options!":{"type":"method","name":"extract_options!","children":[],"call":[" pop "," last is_a? "," last "]}," ActiveSupport CoreExtensions Array Access to":{"type":"method","name":"to","children":[],"call":[" [] "]}," ActiveSupport CoreExtensions Array Access from":{"type":"method","name":"from","children":[],"call":[" [] "]}," Logger msg2str":{"type":"method","name":"msg2str","children":[],"call":[]}," Logger format_datetime":{"type":"method","name":"format_datetime","children":[],"call":[]}," Logger SimpleFormatter call":{"type":"method","name":"call","children":[],"call":["msg inspect ","String  === "]}," Logger Formatter msg2str":{"type":"method","name":"msg2str","children":[],"call":["msg inspect ","(begin\n  (send\n    (lvar :msg) :message)) << ","(or\n  (send\n    (lvar :msg) :backtrace)\n  (array)) join ","msg backtrace ","msg class ","msg message "]}," Logger Formatter format_datetime":{"type":"method","name":"format_datetime","children":[],"call":["time strftime ","time strftime << ","%06d  % ","time usec ","@datetime_format nil? "]}," Logger Formatter call":{"type":"method","name":"call","children":[],"call":["Format  % "," msg2str "," format_datetime ","severity [] "]}," Logger Formatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Logger formatter":{"type":"method","name":"formatter","children":[],"call":["SimpleFormatter  new "]}," Logger datetime_format":{"type":"method","name":"datetime_format","children":[],"call":[" formatter datetime_format "," formatter "," formatter respond_to? "]}," Logger datetime_format=":{"type":"method","name":"datetime_format=","children":[],"call":[" formatter datetime_format= "," formatter "," formatter respond_to? "]}," ActiveSupport BufferedLogger auto_flush":{"type":"method","name":"auto_flush","children":[],"call":[" flush ","@buffer size >= ","@buffer size "," buffer size >= "," buffer size "," buffer "]}," ActiveSupport BufferedLogger close":{"type":"method","name":"close","children":[],"call":["@log close ","@log respond_to? "," flush "]}," ActiveSupport BufferedLogger flush":{"type":"method","name":"flush","children":[],"call":["@log write ","@buffer slice! to_s ","@buffer slice! ","@buffer empty? ","@buffer slice! join "," buffer slice! join "," buffer slice! "," buffer ","@log write_nonblock "," buffer empty? ","old_buffer join "," clear_buffer ","@guard synchronize ","all_content string ","all_content << ","old_buffer each ","StringIO  new "," buffer each "," buffer  join ","StringIO  new  string ","StringIO  new  << "," buffer  each "]}," ActiveSupport BufferedLogger auto_flushing=":{"type":"method","name":"auto_flushing=","children":[],"call":[" raise ","period inspect "]}," ActiveSupport BufferedLogger add":{"type":"method","name":"add","children":[],"call":[" auto_flush ","@buffer << ","message [] == ","message [] ","(or\n  (or\n    (lvar :message)\n    (begin\n      (and\n        (lvar :block)\n        (send\n          (lvar :block) :call))))\n  (lvar :progname)) to_s ","block call ","@level > "," buffer << "," buffer ","@log add ","(or\n  (or\n    (lvar :message)\n    (begin\n      (and\n        (lvar :block)\n        (send\n          (lvar :block) :call))))\n  (lvar :progname)) to_s  [] == ","(or\n  (or\n    (lvar :message)\n    (begin\n      (and\n        (lvar :block)\n        (send\n          (lvar :block) :call))))\n  (lvar :progname)) to_s  [] ","(or\n  (or\n    (lvar :(or\n  (or\n    (lvar :message)\n    (begin\n      (and\n        (lvar :block)\n        (send\n          (lvar :block) :call))))\n  (lvar :progname)) to_s )\n    (begin\n      (and\n        (lvar :block)\n        (send\n          (lvar :block) :call))))\n  (lvar :progname)) to_s "]}," ActiveSupport BufferedLogger initialize":{"type":"method","name":"initialize","children":[],"call":["@log write ","# Logfile created on %s % ","Time  now to_s ","Time  now ","@log sync= "," open ","File WRONLY  | | ","File WRONLY  | ","File  exist? ","log respond_to? ","FileUtils  mkdir_p ","File  dirname ","Mutex  new "," open_log ","h []= ","Hash  new "," open_logfile ","ActiveSupport Deprecation  warn "," level= "," class _deprecation_warning "," class "," open  write "," open_log  write "," open_logfile  write "," open  sync= "," open_log  sync= "," open_logfile  sync= "]}," ActiveSupport BufferedLogger silence":{"type":"method","name":"silence","children":[],"call":[" level= "," level "," silencer ","logger close "," class new "," class ","@log_dest dup "," class new  close "]}," ActiveSupport Duration ==":{"type":"method","name":"==","children":[],"call":["other == "," value ","other value == ","other value ","Duration  === "]}," ActiveSupport CoreExtensions String StartsEndsWith included":{"type":"method","name":"included","children":[],"call":[]}," ActiveSupport CoreExtensions String Conversions ord":{"type":"method","name":"ord","children":[],"call":[" [] "]}," HashWithIndifferentAccess to_options!":{"type":"method","name":"to_options!","children":[],"call":[]}," ActiveSupport CoreExtensions Array Conversions to_query":{"type":"method","name":"to_query","children":[],"call":["(send nil :collect) * ","value to_query "," collect ","(send nil :collect) join "]}," ActiveSupport OrderedHash to_hash":{"type":"method","name":"to_hash","children":[],"call":["hash []= ","array [] "," each "," returning "]}," ActiveSupport Deprecation DeprecatedInstanceVariable __getobj__":{"type":"method","name":"__getobj__","children":[],"call":["ActiveSupport Deprecation  warn "]}," ActiveSupport Deprecation DeprecatedInstanceVariable initialize":{"type":"method","name":"initialize","children":[],"call":[]}," REXML Document record_entity_expansion!":{"type":"method","name":"record_entity_expansion!","children":[],"call":[" raise ","@number_of_expansions > "]}," REXML Document entity_expansion_limit=":{"type":"method","name":"entity_expansion_limit=","children":[],"call":[]}," REXML Entity unnormalized":{"type":"method","name":"unnormalized","children":[],"call":["Text  unnormalize "," parent ","v nil? "," value "," document record_entity_expansion! "," document "," value  nil? ","  value alue "]}," Module local_constant_names":{"type":"method","name":"local_constant_names","children":[],"call":[" local_constants map "," local_constants ","c to_s ","ActiveSupport Deprecation  warn "]}," ActiveSupport Base64 decode64":{"type":"method","name":"decode64","children":[],"call":[]}," ActiveSupport Base64 encode64":{"type":"method","name":"encode64","children":[],"call":[]}," TZInfo TimezoneTransitionInfo inspect":{"type":"method","name":"inspect","children":[],"call":["@offset inspect "," at inspect "," at "," class "]}," TZInfo TimezoneTransitionInfo hash":{"type":"method","name":"hash","children":[],"call":["@offset hash ^ ^ ^ ","@denominator hash ","@offset hash ^ ^ ","@numerator_or_time hash ","@offset hash ^ ","@previous_offset hash ","@offset hash "]}," TZInfo TimezoneTransitionInfo eql?":{"type":"method","name":"eql?","children":[],"call":[" denominator == ","tti denominator "," denominator "," numerator_or_time == ","tti numerator_or_time "," numerator_or_time "," previous_offset == ","tti previous_offset "," previous_offset "," offset == ","tti offset "," offset ","tti respond_to? "]}," TZInfo TimezoneTransitionInfo ==":{"type":"method","name":"==","children":[],"call":[" at == ","tti at "," at "," previous_offset == ","tti previous_offset "," previous_offset "," offset == ","tti offset "," offset ","tti respond_to? "]}," TZInfo TimezoneTransitionInfo local_start":{"type":"method","name":"local_start","children":[],"call":[" at add_with_convert ","@offset utc_total_offset "," at "]}," TZInfo TimezoneTransitionInfo local_end":{"type":"method","name":"local_end","children":[],"call":[" at add_with_convert ","@previous_offset utc_total_offset "," at "]}," TZInfo TimezoneTransitionInfo at":{"type":"method","name":"at","children":[],"call":["TimeOrDateTime  new ","DateTime  new0 ","DateTime  new! ","DateTime  respond_to? ","Rational  new! ","Rational  send ","RubyCoreSupport  datetime_new! ","RubyCoreSupport  rational_new! ","TimeORational  new! DateTime  new ","TimeORational  send DateTime  new ","TimeORubyCoreSupport  rational_new! DateTime  new ","DateTime  Rational  new! espond_to? ","DateTime  Rational  send espond_to? ","DateTime  RubyCoreSupport  rational_new! espond_to? ","RubyCoRational  new! eSuppoRational  new! t  datetime_new! ","RubyCoRational  send eSuppoRational  send t  datetime_new! ","RubyCoRubyCoreSupport  rational_new! eSuppoRubyCoreSupport  rational_new! t  datetime_new! ","RubyCoRational  new! eSuppoRational  new! t  Rational  new! ational_new! ","RubyCoRational  send eSuppoRational  send t  Rational  send ational_new! ","RubyCoRubyCoreSupport  rational_new! eSuppoRubyCoreSupport  rational_new! t  RubyCoreSupport  rational_new! ational_new! "]}," TZInfo TimezoneTransitionInfo initialize":{"type":"method","name":"initialize","children":[],"call":[]}," TZInfo TimezonePeriod inspect":{"type":"method","name":"inspect","children":[],"call":["result + ","result << ","@offset inspect ","@end_transition inspect ","@start_transition inspect "," class "]}," TZInfo TimezonePeriod hash":{"type":"method","name":"hash","children":[],"call":["@offset hash ","@start_transition hash ^ ","@end_transition hash ","@start_transition hash "]}," TZInfo TimezonePeriod eql?":{"type":"method","name":"eql?","children":[],"call":[" offset eql? ","p offset "," offset "," end_transition eql? ","p end_transition "," end_transition "," start_transition eql? ","p start_transition "," start_transition ","p respond_to? "]}," TZInfo TimezonePeriod ==":{"type":"method","name":"==","children":[],"call":[" offset == ","p offset "," offset "," end_transition == ","p end_transition "," end_transition "," start_transition == ","p start_transition "," start_transition ","p respond_to? "]}," TZInfo TimezonePeriod to_utc":{"type":"method","name":"to_utc","children":[],"call":["@offset to_utc "]}," TZInfo TimezonePeriod to_local":{"type":"method","name":"to_local","children":[],"call":["@offset to_local "]}," TZInfo TimezonePeriod local_before_end?":{"type":"method","name":"local_before_end?","children":[],"call":["@end_transition local_end > ","@end_transition local_end ","@end_transition ! "]}," TZInfo TimezonePeriod local_after_start?":{"type":"method","name":"local_after_start?","children":[],"call":["@start_transition local_start <= ","@start_transition local_start ","@start_transition ! "]}," TZInfo TimezonePeriod valid_for_local?":{"type":"method","name":"valid_for_local?","children":[],"call":[" local_before_end? "," local_after_start? "]}," TZInfo TimezonePeriod utc_before_end?":{"type":"method","name":"utc_before_end?","children":[],"call":["@end_transition at > ","@end_transition at ","@end_transition ! "]}," TZInfo TimezonePeriod utc_after_start?":{"type":"method","name":"utc_after_start?","children":[],"call":["@start_transition at <= ","@start_transition at ","@start_transition ! "]}," TZInfo TimezonePeriod valid_for_utc?":{"type":"method","name":"valid_for_utc?","children":[],"call":[" utc_before_end? "," utc_after_start? "]}," TZInfo TimezonePeriod dst?":{"type":"method","name":"dst?","children":[],"call":["@offset dst? "]}," TZInfo TimezonePeriod local_end":{"type":"method","name":"local_end","children":[],"call":["@end_transition local_end to_datetime ","@end_transition local_end "]}," TZInfo TimezonePeriod local_start":{"type":"method","name":"local_start","children":[],"call":["@start_transition local_start to_datetime ","@start_transition local_start "]}," TZInfo TimezonePeriod utc_end":{"type":"method","name":"utc_end","children":[],"call":["@end_transition at to_datetime ","@end_transition at "]}," TZInfo TimezonePeriod utc_start":{"type":"method","name":"utc_start","children":[],"call":["@start_transition at to_datetime ","@start_transition at "]}," TZInfo TimezonePeriod utc_total_offset_rational":{"type":"method","name":"utc_total_offset_rational","children":[],"call":["OffsetRationals  rational_for_offset "," utc_total_offset "]}," TZInfo TimezonePeriod utc_total_offset":{"type":"method","name":"utc_total_offset","children":[],"call":["@offset utc_total_offset "]}," TZInfo TimezonePeriod abbreviation":{"type":"method","name":"abbreviation","children":[],"call":["@offset abbreviation "]}," TZInfo TimezonePeriod std_offset":{"type":"method","name":"std_offset","children":[],"call":["@offset std_offset "]}," TZInfo TimezonePeriod utc_offset":{"type":"method","name":"utc_offset","children":[],"call":["@offset utc_offset "]}," TZInfo TimezonePeriod initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","@end_transition previous_offset ","@start_transition offset "]}," TZInfo TimezoneOffsetInfo inspect":{"type":"method","name":"inspect","children":[],"call":[" class "]}," TZInfo TimezoneOffsetInfo hash":{"type":"method","name":"hash","children":[],"call":[" utc_offset hash ^ ^ "," abbreviation hash "," abbreviation "," utc_offset hash ^ "," std_offset hash "," std_offset "," utc_offset hash "," utc_offset "]}," TZInfo TimezoneOffsetInfo eql?":{"type":"method","name":"eql?","children":[],"call":[" == "]}," TZInfo TimezoneOffsetInfo ==":{"type":"method","name":"==","children":[],"call":[" abbreviation == ","toi abbreviation "," abbreviation "," std_offset == ","toi std_offset "," std_offset "," utc_offset == ","toi utc_offset "," utc_offset ","toi respond_to? "]}," TZInfo TimezoneOffsetInfo to_utc":{"type":"method","name":"to_utc","children":[],"call":["local - ","TimeOrDateTime  wrap ","wrapped - "]}," TZInfo TimezoneOffsetInfo to_local":{"type":"method","name":"to_local","children":[],"call":["utc + ","TimeOrDateTime  wrap ","wrapped + "]}," TZInfo TimezoneOffsetInfo dst?":{"type":"method","name":"dst?","children":[],"call":["@std_offset != "]}," TZInfo TimezoneOffsetInfo initialize":{"type":"method","name":"initialize","children":[],"call":["@utc_offset + "]}," TZInfo TimezoneInfo inspect":{"type":"method","name":"inspect","children":[],"call":[" class "]}," TZInfo TimezoneInfo initialize":{"type":"method","name":"initialize","children":[],"call":[]}," TZInfo TimezoneDefinition ClassMethods get":{"type":"method","name":"get","children":[],"call":[]}," TZInfo TimezoneDefinition ClassMethods linked_timezone":{"type":"method","name":"linked_timezone","children":[],"call":["LinkedTimezoneInfo  new "]}," TZInfo TimezoneDefinition ClassMethods timezone":{"type":"method","name":"timezone","children":[],"call":["DataTimezoneInfo  new "]}," TZInfo TimezoneDefinition append_features":{"type":"method","name":"append_features","children":[],"call":[]}," TZInfo Timezone get_proxies":{"type":"method","name":"get_proxies","children":[],"call":[]}," TZInfo Timezone load_index":{"type":"method","name":"load_index","children":[],"call":[]}," TZInfo Timezone _load":{"type":"method","name":"_load","children":[],"call":[]}," TZInfo Timezone _dump":{"type":"method","name":"_dump","children":[],"call":[" identifier "]}," TZInfo Timezone hash":{"type":"method","name":"hash","children":[],"call":[" identifier hash "," identifier "]}," TZInfo Timezone eql?":{"type":"method","name":"eql?","children":[],"call":[" == "]}," TZInfo Timezone <=>":{"type":"method","name":"<=>","children":[],"call":[" identifier <=> ","tz identifier "," identifier "]}," TZInfo Timezone strftime":{"type":"method","name":"strftime","children":[],"call":["local strftime ","1 == ","format gsub ","period abbreviation to_s gsub ","period abbreviation to_s ","period abbreviation ","Time  at utc ","Time  at ","local kind_of? ","period to_local "," period_for_utc ","Time  at utc  strftime ","period to_local  strftime ","period period abbreviation to_s gsub  to_s gsub "," period_for_utc  abbreviation to_s gsub ","period period abbreviation to_s gsub  to_s "," period_for_utc  abbreviation to_s ","period period abbreviation to_s gsub  "," period_for_utc  abbreviation ","Time  at utc  kind_of? ","period to_local  kind_of? ","period to_Time  at utc  ","period to_period to_local  "," period_for_utc  to_local ","  period_for_utc _for_utc "]}," TZInfo Timezone current_period_and_time":{"type":"method","name":"current_period_and_time","children":[],"call":["period to_local "," period_for_utc ","Time  now utc ","Time  now "," period_for_utc  to_local ","  period_for_utc _for_utc "," period_for_Time  now utc  ","Time  now Time  now utc  "]}," TZInfo Timezone current_period":{"type":"method","name":"current_period","children":[],"call":[" period_for_utc ","Time  now utc ","Time  now "]}," TZInfo Timezone now":{"type":"method","name":"now","children":[],"call":[" utc_to_local ","Time  now utc ","Time  now "]}," TZInfo Timezone local_to_utc":{"type":"method","name":"local_to_utc","children":[],"call":["period to_utc "," period_for_local "," block_given? ","TimeOrDateTime  wrap "," period_for_local  to_utc ","  period_for_local _for_local "]}," TZInfo Timezone utc_to_local":{"type":"method","name":"utc_to_local","children":[],"call":[" period_for_utc to_local "," period_for_utc ","TimeOrDateTime  wrap "]}," TZInfo Timezone period_for_local":{"type":"method","name":"period_for_local","children":[],"call":[" raise ","results first ","results size == ","results size ","results is_a? "," block_given? ","results size < ","matches empty? ! ","matches empty? ","period dst? == ","period dst? ","results find_all ","dst nil? ! ","dst nil? ","results empty? "," periods_for_local "," periods_for_local  first "," periods_for_local  size == "," periods_for_local  size "," periods_for_local  is_a? "," periods_for_local  size < "," periods_for_local  find_all "," periods_for_local  empty? "]}," TZInfo Timezone periods_for_local":{"type":"method","name":"periods_for_local","children":[],"call":[" raise "]}," TZInfo Timezone period_for_utc":{"type":"method","name":"period_for_utc","children":[],"call":[" raise "]}," TZInfo Timezone friendly_identifier":{"type":"method","name":"friendly_identifier","children":[],"call":["result slice! ","result length - ","result length ","result << ","part gsub! ","part index ","parts [] reverse_each ","parts [] ","parts length - ","parts length ","parts [] + ","parts length == "," identifier ","parts empty? "," identifier split ","parts [] +  slice! ","parts [] +  length - ","parts [] +  length ","parts [] +  << "," identifier split  [] reverse_each "," identifier split  [] "," identifier split  length - "," identifier split  length "," identifier split  [] + "," identifier split  length == "," identifier split  empty? "]}," TZInfo Timezone inspect":{"type":"method","name":"inspect","children":[],"call":[" identifier "," class "]}," TZInfo Timezone to_s":{"type":"method","name":"to_s","children":[],"call":[" friendly_identifier "]}," TZInfo Timezone name":{"type":"method","name":"name","children":[],"call":[" identifier "]}," TZInfo Timezone identifier":{"type":"method","name":"identifier","children":[],"call":[" raise "]}," TZInfo Timezone us_zone_identifiers":{"type":"method","name":"us_zone_identifiers","children":[],"call":[]}," TZInfo Timezone us_zones":{"type":"method","name":"us_zones","children":[],"call":[]}," TZInfo Timezone all_country_zone_identifiers":{"type":"method","name":"all_country_zone_identifiers","children":[],"call":[]}," TZInfo Timezone all_country_zones":{"type":"method","name":"all_country_zones","children":[],"call":[]}," TZInfo Timezone all_linked_zone_identifiers":{"type":"method","name":"all_linked_zone_identifiers","children":[],"call":[]}," TZInfo Timezone all_linked_zones":{"type":"method","name":"all_linked_zones","children":[],"call":[]}," TZInfo Timezone all_data_zone_identifiers":{"type":"method","name":"all_data_zone_identifiers","children":[],"call":[]}," TZInfo Timezone all_data_zones":{"type":"method","name":"all_data_zones","children":[],"call":[]}," TZInfo Timezone all_identifiers":{"type":"method","name":"all_identifiers","children":[],"call":[]}," TZInfo Timezone all":{"type":"method","name":"all","children":[],"call":[]}," TZInfo Timezone new":{"type":"method","name":"new","children":[],"call":[]}," TZInfo Timezone get_proxy":{"type":"method","name":"get_proxy","children":[],"call":[]}," TZInfo Timezone get":{"type":"method","name":"get","children":[],"call":[]}," TZInfo TimeOrDateTime wrap":{"type":"method","name":"wrap","children":[],"call":[]}," TZInfo TimeOrDateTime hash":{"type":"method","name":"hash","children":[],"call":["@orig hash "]}," TZInfo TimeOrDateTime eql?":{"type":"method","name":"eql?","children":[],"call":[" to_orig eql? ","todt to_orig "," to_orig ","todt respond_to? "]}," TZInfo TimeOrDateTime add_with_convert":{"type":"method","name":"add_with_convert","children":[],"call":["TimeOrDateTime  new ","@orig + "," to_datetime + ","OffsetRationals  rational_for_offset "," to_datetime ","result > ","result < "," to_i + "," to_i ","@orig is_a? ","seconds == ","TimeOrDateTime  new  > "," to_i +  > ","TimeOrDateTime  new  < "," to_i +  < "]}," TZInfo TimeOrDateTime -":{"type":"method","name":"-","children":[],"call":[" + ","seconds -@ "]}," TZInfo TimeOrDateTime +":{"type":"method","name":"+","children":[],"call":["TimeOrDateTime  new ","@orig + ","OffsetRationals  rational_for_offset ","@orig is_a? ","seconds == "]}," TZInfo TimeOrDateTime <=>":{"type":"method","name":"<=>","children":[],"call":[" to_i <=> ","timeOrDateTime to_i "," to_i "," to_time <=> "," to_time ","timeOrDateTime is_a? "," to_datetime <=> ","TimeOrDateTime  wrap to_datetime ","TimeOrDateTime  wrap "," to_datetime ","@orig is_a? ","timeOrDateTime to_time ","orig is_a? ","timeOrDateTime to_datetime ","timeOrDateTime to_orig ","@timeOrDateTime to_orig  is_a? ","timeOrDateTime to_orig  is_a? ","timeOrDateTime to_timeOrDateTime to_orig  "]}," TZInfo TimeOrDateTime sec":{"type":"method","name":"sec","children":[],"call":[" to_time sec "," to_time ","@datetime sec ","@time sec "]}," TZInfo TimeOrDateTime min":{"type":"method","name":"min","children":[],"call":[" to_time min "," to_time ","@datetime min ","@time min "]}," TZInfo TimeOrDateTime hour":{"type":"method","name":"hour","children":[],"call":[" to_time hour "," to_time ","@datetime hour ","@time hour "]}," TZInfo TimeOrDateTime mday":{"type":"method","name":"mday","children":[],"call":[" to_time mday "," to_time ","@datetime mday ","@time mday "]}," TZInfo TimeOrDateTime mon":{"type":"method","name":"mon","children":[],"call":[" to_time mon "," to_time ","@datetime mon ","@time mon "]}," TZInfo TimeOrDateTime year":{"type":"method","name":"year","children":[],"call":[" to_time year "," to_time ","@datetime year ","@time year "]}," TZInfo TimeOrDateTime inspect":{"type":"method","name":"inspect","children":[],"call":["@orig inspect "," class "]}," TZInfo TimeOrDateTime to_s":{"type":"method","name":"to_s","children":[],"call":["@orig to_s ","@orig is_a? "]}," TZInfo TimeOrDateTime to_orig":{"type":"method","name":"to_orig","children":[],"call":[]}," TZInfo TimeOrDateTime to_i":{"type":"method","name":"to_i","children":[],"call":[" to_time to_i "," to_time "]}," TZInfo TimeOrDateTime to_datetime":{"type":"method","name":"to_datetime","children":[],"call":["DateTime  new "," sec "," min "," hour "," mday "," mon "," year "]}," TZInfo TimeOrDateTime to_time":{"type":"method","name":"to_time","children":[],"call":["Time  utc "," sec "," min "," hour "," mday "," mon "," year ","Time  at utc ","Time  at "]}," TZInfo TimeOrDateTime initialize":{"type":"method","name":"initialize","children":[],"call":["timeOrDateTime to_i ","@datetime new_offset ","@datetime offset == ","@datetime offset ","timeOrDateTime is_a? ","Time  utc ","@time sec ","@time min ","@time hour ","@time mday ","@time mon ","@time year ","@time zone == ","@time zone ","@datetime new_offset  new_offset ","@datetime new_offset  offset == ","@datetime new_offset  offset ","Time  utc  sec ","Time  utc  min ","Time  utc  hour ","Time  utc  mday ","Time  utc  mon ","Time  utc  year ","Time  utc  zone == ","Time  utc  zone "]}," TZInfo OffsetRationals rational_for_offset":{"type":"method","name":"rational_for_offset","children":[],"call":[" Rational ","@@rational_cache [] "]}," TZInfo LinkedTimezoneInfo inspect":{"type":"method","name":"inspect","children":[],"call":[" class "]}," TZInfo LinkedTimezoneInfo initialize":{"type":"method","name":"initialize","children":[],"call":[]}," TZInfo LinkedTimezone setup":{"type":"method","name":"setup","children":[],"call":["Timezone  get ","info link_to_identifier "]}," TZInfo LinkedTimezone periods_for_local":{"type":"method","name":"periods_for_local","children":[],"call":["@linked_timezone periods_for_local "]}," TZInfo LinkedTimezone period_for_utc":{"type":"method","name":"period_for_utc","children":[],"call":["@linked_timezone period_for_utc "]}," TZInfo InfoTimezone setup":{"type":"method","name":"setup","children":[],"call":[]}," TZInfo InfoTimezone info":{"type":"method","name":"info","children":[],"call":[]}," TZInfo InfoTimezone identifier":{"type":"method","name":"identifier","children":[],"call":["@info identifier "]}," TZInfo InfoTimezone new":{"type":"method","name":"new","children":[],"call":[]}," TZInfo DataTimezoneInfo transition_before_end":{"type":"method","name":"transition_before_end","children":[],"call":["@transitions_index [] - ","@transitions_index [] ","@transitions length - ","@transitions length ","index >= ","@transitions_index length ","index <= ","index + ","@transitions_index +  [] - ","@transitions_index +  [] ","index +  >= ","@transitions_index +  length ","index +  <= ","index +  + "]}," TZInfo DataTimezoneInfo transition_after_start":{"type":"method","name":"transition_after_start","children":[],"call":["@transitions_index [] ","index < ","index >= ","@transitions_index length "]}," TZInfo DataTimezoneInfo transition_index":{"type":"method","name":"transition_index","children":[],"call":["@start_month > ","month > ","(send\n  (lvar :year) :-\n  (ivar :@start_year)) * ","year - "]}," TZInfo DataTimezoneInfo periods_for_local":{"type":"method","name":"periods_for_local","children":[],"call":["result << ","TimezonePeriod  new ","@transitions [] ","i + ","@transitions [] local_end > ","@transitions [] local_end ","i + < ","@transitions length ","@transitions [] local_start <= ","@transitions [] local_start ","start_index upto "," transition_before_end ","index + ","start_index - ","start_index > "," transition_after_start ","index - "," transition_index ","local mon ","local year ","TimeOrDateTime  wrap "," raise ","@transitions empty? ","@transitions [] TimeOrDateTime  wrap _end > ","@transitions [] TimeOrDateTime  wrap _end ","@transitions [] TimeOrDateTime  wrap _start <= ","@transitions [] TimeOrDateTime  wrap _start "," transition_after_start  upto ","start_ transition_index  upto "," transition_index  + "," transition_after_start  - ","start_ transition_index  - "," transition_after_start  > ","start_ transition_index  > "," transition_index  - "," transition_ transition_index  ","TimeOrDateTime  wrap  mon ","TimeOrDateTime  wrap  year "]}," TZInfo DataTimezoneInfo period_for_utc":{"type":"method","name":"period_for_utc","children":[],"call":[" raise ","TimezonePeriod  new ","@transitions [] ","@transitions [] at > ","@transitions [] at ","start upto ","@transitions length - ","@transitions length "," transition_after_start ","@transitions [] at <= ","start downto "," transition_before_end "," transition_index ","utc mon ","utc year ","TimeOrDateTime  wrap ","@transitions empty? "," transition_after_start  upto "," transition_before_end  upto "," transition_after_ transition_after_start  "," transition_after_ transition_before_end  "," transition_after_start  downto "," transition_before_end  downto "," transition_ transition_index  ","TimeOrDateTime  wrap  mon ","TimeOrDateTime  wrap  year "]}," TZInfo DataTimezoneInfo transition":{"type":"method","name":"transition","children":[],"call":["@transitions << ","TimezoneTransitionInfo  new ","@transitions length ","@transitions_index []= ","@transitions_index [] ","(send\n  (lvar :index) :-\n  (int 1)) downto ","index - "," transition_index "," raise ","month < ","year == ","year < ","@offsets [] ","@transitions_ transition_index  []= ","@transitions_ transition_index  [] ","(send\n  (lvar : transition_index ) :-\n  (int 1)) downto "," transition_index  - "," transition_ transition_index  ","@@offsets [] s [] "]}," TZInfo DataTimezoneInfo offset":{"type":"method","name":"offset","children":[],"call":["@offsets []= ","TimezoneOffsetInfo  new "," raise ","@offsets has_key? ","@TimezoneOffsetInfo  new s []= ","@TimezoneOffsetInfo  new s has_key? "]}," TZInfo DataTimezoneInfo initialize":{"type":"method","name":"initialize","children":[],"call":[]}," TZInfo DataTimezone periods_for_local":{"type":"method","name":"periods_for_local","children":[],"call":[" info periods_for_local "," info "]}," TZInfo DataTimezone period_for_utc":{"type":"method","name":"period_for_utc","children":[],"call":[" info period_for_utc "," info "]}," MemCache Server mark_dead":{"type":"method","name":"mark_dead","children":[],"call":[" sprintf ","Time  now + ","Time  now ","@sock close ","@sock closed? ! ","@sock closed? ","@logger info ","error message ","error class name ","error class "]}," MemCache Server close":{"type":"method","name":"close","children":[],"call":["@mutex unlock ","@sock close ","@sock closed? ! ","@sock closed? ","@mutex lock "]}," MemCache Server socket":{"type":"method","name":"socket","children":[],"call":["@mutex unlock "," mark_dead ","err message ","@sock setsockopt ","Socket  constants include? ","Socket  constants ","TCPSocket  new "," timeout ","@retry > ","Time  now ","@sock closed? ! ","@sock closed? ","@mutex lock ","err class name ","err class "," logger warn "," logger "," connect_to ","TCPTimeoutSocket  new "," connect_to  setsockopt ","TCPSocket  new  setsockopt ","TCPTimeoutSocket  new  setsockopt "," connect_to  closed? ! ","TCPSocket  new  closed? ! ","TCPTimeoutSocket  new  closed? ! "," connect_to  closed? ","TCPSocket  new  closed? ","TCPTimeoutSocket  new  closed? "]}," MemCache Server alive?":{"type":"method","name":"alive?","children":[],"call":[" socket ! ! "," socket ! "," socket "]}," MemCache Server inspect":{"type":"method","name":"inspect","children":[],"call":["<MemCache::Server: %s:%d [%d] (%s)> % "]}," MemCache Server initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new ","@memcache multithread ","weight to_i ","port to_i "," raise ","port to_i zero? ","port nil? ","host empty? ","host nil? ","memcache logger ","memcache timeout "]}," MemCache raise_on_error_response!":{"type":"method","name":"raise_on_error_response!","children":[],"call":[" raise ","1 strip ","response =~ "]}," MemCache threadsafe_cache_incr":{"type":"method","name":"threadsafe_cache_incr","children":[],"call":["@mutex unlock "," cache_incr ","@mutex lock "]}," MemCache threadsafe_cache_get_multi":{"type":"method","name":"threadsafe_cache_get_multi","children":[],"call":["@mutex unlock "," cache_get_multi ","@mutex lock "]}," MemCache threadsafe_cache_get":{"type":"method","name":"threadsafe_cache_get","children":[],"call":["@mutex unlock "," cache_get ","@mutex lock "]}," MemCache threadsafe_cache_decr":{"type":"method","name":"threadsafe_cache_decr","children":[],"call":["@mutex unlock "," cache_decr ","@mutex lock "]}," MemCache request_setup":{"type":"method","name":"request_setup","children":[],"call":[" raise ","server socket nil? ","server socket "," get_server_for_key "," make_cache_key "," active? "," get_server_for_key  socket nil? "," get_server_for_key  socket "," get_ get_server_for_key _for_key "," make_ make_cache_key  "]}," MemCache handle_error":{"type":"method","name":"handle_error","children":[],"call":[" raise ","new_error set_backtrace ","error backtrace ","MemCacheError  new ","error message ","server close ","error is_a? ","MemCacheError  new  set_backtrace "]}," MemCache cache_incr":{"type":"method","name":"cache_incr","children":[],"call":["text to_i ","text == "," raise_on_error_response! ","socket gets ","socket write ","server socket "," noreply "," with_socket_management ","socket gets  to_i ","socket gets  == ","server socket  gets ","server socket  write ","server server socket  "," with_server socket _management "]}," MemCache cache_get_multi":{"type":"method","name":"cache_get_multi","children":[],"call":[" raise ","server port ","server host ","server close ","socket read ","values []= ","data_length to_i ","keyline inspect ","keyline =~ "," raise_on_error_response! ","keyline == ","socket gets ","socket write ","server socket "," with_socket_management ","server socket  read ","socket gets  inspect ","socket gets  =~ ","socket gets  == ","server socket  gets ","server socket  write ","server server socket  "," with_server socket _management "]}," MemCache cache_get":{"type":"method","name":"cache_get","children":[],"call":["socket gets ","socket read ","1 to_i "," raise ","keyline inspect ","server close ","keyline =~ ","keyline == "," raise_on_error_response! ","server port ","server host ","keyline nil? ","socket write ","server socket "," with_socket_management ","server socket  gets ","server socket  read ","socket gets  inspect ","socket gets  =~ ","socket gets  == ","socket gets  nil? ","server socket  write ","server server socket  "," with_server socket _management "]}," MemCache cache_decr":{"type":"method","name":"cache_decr","children":[],"call":["text to_i ","text == "," raise_on_error_response! ","socket gets ","socket write ","server socket "," noreply "," with_socket_management ","socket gets  to_i ","socket gets  == ","server socket  gets ","server socket  write ","server server socket  "," with_server socket _management "]}," MemCache hash_for":{"type":"method","name":"hash_for","children":[],"call":["(send\n  (send\n    (lvar :key) :crc32_ITU_T) :>>\n  (int 16)) & ","key crc32_ITU_T >> ","key crc32_ITU_T ","Zlib  crc32 "]}," MemCache get_server_for_key":{"type":"method","name":"get_server_for_key","children":[],"call":[" raise "," hash_for ","server alive? ","@buckets [] ","hkey % ","@buckets nitems ","20 times ","@servers first ","@servers length == ","@servers length ","@servers empty? ","key inspect ","key length > ","key length ","key =~ "," failover ","@continuum [] server ","@continuum [] ","Continuum  binary_search ","@buckets []  alive? ","@continuum [] server  alive? "," hash_for  % ","@@buckets [] s first ","@@continuum [] server s first ","@@buckets [] s length == ","@@continuum [] server s length == ","@@buckets [] s length ","@@continuum [] server s length ","@@buckets [] s empty? ","@@continuum [] server s empty? ","@continuum [] @buckets []  ","@continuum [] @continuum [] server  "]}," MemCache make_cache_key":{"type":"method","name":"make_cache_key","children":[],"call":[" namespace nil? "," namespace ","Digest SHA1  hexdigest ","(send\n  (send\n    (lvar :key) :length) :+\n  (begin\n    (if\n      (send\n        (send nil :namespace) :nil?)\n      (int 0)\n      (send\n        (send nil :namespace) :length)))) > ","key length + "," namespace length ","key length ","key =~ "]}," MemCache []=":{"type":"method","name":"[]=","children":[],"call":[" set "]}," MemCache stats":{"type":"method","name":"stats","children":[],"call":[" raise ","err message ","server close ","server_stats []= ","server port ","server host ","stats []= ","value to_i ","value =~ "," Float + "," Float / "," Float ","value split ","line =~ ","line == "," raise_on_error_response! ","sock gets ","sock write ","sock nil? ","server socket ","@servers each "," active? ","server_stats empty? ","socket gets ","socket write "," with_socket_management ","server alive? ","sock gets  =~ ","socket gets  =~ ","sock gets  == ","socket gets  == ","server socket  gets ","server socket  write ","server socket  nil? ","server server socket et ","server socket et gets ","server socket et write "," with_server socket et_management "]}," MemCache reset":{"type":"method","name":"reset","children":[],"call":["server close ","@servers each "]}," MemCache flush_all":{"type":"method","name":"flush_all","children":[],"call":["@mutex unlock "," raise ","err message ","server close "," raise_on_error_response! ","sock gets ","sock write ","sock nil? ","server socket ","@servers each ","@mutex lock "," active? "," handle_error ","socket gets ","socket write "," noreply ","delay == "," logger debug "," logger "," with_socket_management ","server socket  gets ","server socket  write ","server socket  nil? ","server server socket et ","server socket et gets ","server socket et write "," with_server socket et_management "]}," MemCache delete":{"type":"method","name":"delete","children":[],"call":["@mutex unlock "," raise ","err message ","server close "," raise_on_error_response! ","sock gets ","sock write ","sock nil? ","server socket "," get_server_for_key "," make_cache_key "," active? ","@mutex lock ","socket gets ","socket write "," noreply "," logger debug "," logger "," with_socket_management "," with_server "," get_server_for_key  close ","server socket  gets ","server socket  write ","server socket  nil? ","server server socket et "," get_server_for_key  socket "," get_ get_server_for_key _for_key "," make_ make_cache_key  ","server socket et gets ","server socket et write "," with_server socket et_management "," with_ get_server_for_key  "]}," MemCache add":{"type":"method","name":"add","children":[],"call":["@mutex unlock "," raise ","err message ","server close "," raise_on_error_response! ","socket gets ","socket write ","@mutex lock ","value size ","Marshal  dump ","server socket "," request_setup "," with_socket_management "," noreply ","value to_s size ","value to_s "," logger debug "," logger "," with_server ","server socket  gets ","server socket  write ","Marshal  dump  size ","server server socket  "," with_server socket _management ","Marshal  dump  to_s size ","Marshal  dump  to_s "]}," MemCache set":{"type":"method","name":"set","children":[],"call":["@mutex unlock "," raise ","err message ","server close "," raise_on_error_response! ","socket gets ","socket write ","@mutex lock ","value size ","Marshal  dump ","server socket "," request_setup ","server port ","server host ","result nil? "," with_socket_management "," noreply ","value to_s size ","value to_s ","value to_s size > ","server inspect "," logger debug "," logger "," with_server ","data size ","data size > ","server socket  gets ","server socket  write ","Marshal  dump  size ","server server socket  ","socket gets  nil? "," with_server socket _management ","Marshal  dump  to_s size ","Marshal  dump  to_s ","Marshal  dump  to_s size > ","value to_s  size ","value to_s  size > "]}," MemCache incr":{"type":"method","name":"incr","children":[],"call":[" handle_error "," cache_incr "," threadsafe_cache_incr "," request_setup "," with_server "," raise "]}," MemCache get_multi":{"type":"method","name":"get_multi","children":[],"call":[" handle_error "," server ","results []= ","Marshal  load ","cache_keys [] ","values each "," cache_get_multi "," threadsafe_cache_get_multi ","keys_for_server join ","server_keys each ","server_keys [] << ","server_keys [] ","cache_keys []= "," request_setup ","keys each ","h []= ","Hash  new ","keys length ","keys flatten! "," raise "," active? ","e message ","server inspect ","keys_for_server size "," logger warn "," logger "," cache_get_multi  each "," threadsafe_cache_get_multi  each ","keys_for_server join  join ","keys_for_server join  size "]}," MemCache get":{"type":"method","name":"get","children":[],"call":[" handle_error ","Marshal  load ","value nil? "," cache_get "," threadsafe_cache_get "," request_setup ","server inspect "," logger debug "," logger "," with_server ","value to_s size ","value to_s ","Marshal  load  nil? "," cache_get  nil? "," threadsafe_cache_get  nil? ","Marshal  load  to_s size "," cache_get  to_s size "," threadsafe_cache_get  to_s size ","Marshal  load  to_s "," cache_get  to_s "," threadsafe_cache_get  to_s "]}," MemCache decr":{"type":"method","name":"decr","children":[],"call":[" handle_error "," cache_decr "," threadsafe_cache_decr "," request_setup "," with_server "," raise "]}," MemCache servers=":{"type":"method","name":"servers=","children":[],"call":["@buckets push ","server weight times ","server weight ","@servers each "," raise ","server class ","server memcache multithread != ","server memcache multithread ","server memcache ","Server  new ","server split ","servers collect "," create_continuum_for ","@servers size > ","@servers size ","@servers inspect "," logger debug "," logger "," Array collect "," Array "]}," MemCache readonly?":{"type":"method","name":"readonly?","children":[],"call":[]}," MemCache active?":{"type":"method","name":"active?","children":[],"call":["@servers empty? ! ","@servers empty? "]}," MemCache inspect":{"type":"method","name":"inspect","children":[],"call":["<MemCache: %d servers, %d buckets, ns: %p, ro: %p> % ","@buckets length ","@servers length ","<MemCache: %d servers, ns: %p, ro: %p> % "]}," MemCache initialize":{"type":"method","name":"initialize","children":[],"call":[" servers= ","Mutex  new ","opts [] ","DEFAULT_OPTIONS  merge "," raise ","args length ","args shift ","Thread  current []= "," object_id ","Thread  current ","@multithread ! "," Array inspect "," Array "," logger info "," logger ","DEFAULT_OPTIONS  merge  [] ","args shift s length ","args shift s shift ","opts []  ! "]}," String crc32_ITU_T":{"type":"method","name":"crc32_ITU_T","children":[],"call":["r ^ ","(send\n  (lvar :r) :>>\n  (int 1)) ^ ","r >> ","(send\n  (lvar :r) :&\n  (int 1)) != ","r & ","8 times "," [] ","n times "," length ","(send\n  (lvar :r) :>>\n  (int 1)) ^  ^ ","(send\n  (lva(send\n  (lvar :r) :>>\n  (int 1)) ^  :(send\n  (lvar :r) :>>\n  (int 1)) ^ ) :>>\n  (int 1)) ^ ","(se length d\n  (lvar :r) :>>\n  (i length t 1)) ^ ","(send\n  (lvar :r) :>>\n  (int 1)) ^  >> ","(send\n  (lva(send\n  (lvar :r) :>>\n  (int 1)) ^  :(send\n  (lvar :r) :>>\n  (int 1)) ^ ) :&\n  (int 1)) != ","(se length d\n  (lvar :r) :&\n  (i length t 1)) != ","(send\n  (lvar :r) :>>\n  (int 1)) ^  & "," length  times "," le length gth "]}," ActiveSupport TimeWithZone transfer_time_values_to_utc_constructor":{"type":"method","name":"transfer_time_values_to_utc_constructor","children":[],"call":[" Time  utc_time ","time usec ","time respond_to? ","time sec ","time min ","time hour ","time day ","time month ","time year "," Rational ","time nsec "," Time  utc ","time sec + ","time subsec ","time utc? ","time instance_of? ","time  Rational  "]}," ActiveSupport TimeWithZone get_period_and_ensure_valid_local_time":{"type":"method","name":"get_period_and_ensure_valid_local_time","children":[],"call":["1 hour ","@time_zone period_for_local "," transfer_time_values_to_utc_constructor ","@time utc? "," transfer_time_values_to_utc_constructor _zone period_for_local "," transfer_time_values_to_utc_constructor  utc? "]}," ActiveSupport TimeWithZone method_missing":{"type":"method","name":"method_missing","children":[],"call":[" class new "," time_zone "," class ","result acts_like? "," time __send__ "," time "," wrap_with_time_zone "," raise ","e backtrace ","e message sub "," inspect "," time inspect ","e message ","e message sub sub "," time __send__  acts_like? "]}," ActiveSupport TimeWithZone respond_to?":{"type":"method","name":"respond_to?","children":[],"call":[" time respond_to? "," time ","sym to_s == ","sym to_s ","sym to_sym == ","sym to_sym "]}," ActiveSupport TimeWithZone marshal_load":{"type":"method","name":"marshal_load","children":[],"call":[" initialize ","variables [] "," Time  send! ","variables [] utc "," Time  __send__ "," Time  find_zone "]}," ActiveSupport TimeWithZone marshal_dump":{"type":"method","name":"marshal_dump","children":[],"call":[" time "," time_zone name "," time_zone "," utc "]}," ActiveSupport TimeWithZone freeze":{"type":"method","name":"freeze","children":[],"call":[" time "," utc "," period "," to_time "," to_datetime "]}," ActiveSupport TimeWithZone is_a?":{"type":"method","name":"is_a?","children":[],"call":["klass == "]}," ActiveSupport TimeWithZone acts_like_time?":{"type":"method","name":"acts_like_time?","children":[],"call":[]}," ActiveSupport TimeWithZone to_datetime":{"type":"method","name":"to_datetime","children":[],"call":[" utc to_datetime new_offset "," Rational "," utc_offset "," utc to_datetime "," utc "]}," ActiveSupport TimeWithZone to_time":{"type":"method","name":"to_time","children":[],"call":[" utc "," utc to_time "," getlocal "," utc_offset "," preserve_timezone "]}," ActiveSupport TimeWithZone to_i":{"type":"method","name":"to_i","children":[],"call":[" utc to_i "," utc "]}," ActiveSupport TimeWithZone to_f":{"type":"method","name":"to_f","children":[],"call":[" utc to_f "," utc "]}," ActiveSupport TimeWithZone to_a":{"type":"method","name":"to_a","children":[],"call":[" zone "," dst? "," time yday "," time "," time wday "," time year "," time mon "," time day "," time hour "," time min "," time sec "]}," ActiveSupport TimeWithZone usec":{"type":"method","name":"usec","children":[],"call":[" time usec "," time "," time respond_to? "]}," ActiveSupport TimeWithZone advance":{"type":"method","name":"advance","children":[],"call":[" utc advance in_time_zone "," time_zone "," utc advance "," utc "," method_missing ","(sym :years) include? ","options detect ","options values_at any? ","options values_at "]}," ActiveSupport TimeWithZone ago":{"type":"method","name":"ago","children":[],"call":[" utc ago in_time_zone "," time_zone "," utc ago "," utc "," since ","other -@ "]}," ActiveSupport TimeWithZone since":{"type":"method","name":"since","children":[],"call":[" utc since in_time_zone "," time_zone "," utc since "," utc "," method_missing "," duration_of_variable_length? "]}," ActiveSupport TimeWithZone -":{"type":"method","name":"-","children":[],"call":["result in_time_zone "," time_zone "," utc ago "," utc "," utc - "," utc acts_like? ","other acts_like? "," method_missing "," duration_of_variable_length? "," utc to_f - ","other to_f "," utc to_f "," to_time - ","other to_time "," to_time "]}," ActiveSupport TimeWithZone +":{"type":"method","name":"+","children":[],"call":["result in_time_zone "," time_zone "," utc since "," utc "," utc + "," utc acts_like? "," method_missing "," duration_of_variable_length? "]}," ActiveSupport TimeWithZone eql?":{"type":"method","name":"eql?","children":[],"call":[" utc == "," utc "," utc eql? ","other eql? "]}," ActiveSupport TimeWithZone between?":{"type":"method","name":"between?","children":[],"call":[" utc between? "," utc "]}," ActiveSupport TimeWithZone <=>":{"type":"method","name":"<=>","children":[],"call":[" utc <=> "," utc "]}," ActiveSupport TimeWithZone strftime":{"type":"method","name":"strftime","children":[],"call":[" time strftime "," time ","format gsub gsub "," formatted_offset ","format gsub "," zone ","format gsub gsub gsub gsub "," formatted_offset + ","format gsub gsub gsub "," getlocal strftime "," getlocal "," utc_offset ","format gsub gsub  gsub gsub ","format gsub gsub gsub gsub  gsub gsub ","format gsub  gsub gsub "," format gsub gsub ted_offset "," format gsub gsub gsub gsub ted_offset "," format gsub ted_offset ","format gsub gsub  gsub ","format gsub gsub gsub gsub  gsub ","format gsub  gsub ","format gsub gsub  gsub gsub gsub gsub ","format gsub gsub gsub gsub  gsub gsub gsub gsub ","format gsub  gsub gsub gsub gsub "," format gsub gsub ted_offset + "," format gsub gsub gsub gsub ted_offset + "," format gsub ted_offset + ","format gsub gsub  gsub gsub gsub ","format gsub gsub gsub gsub  gsub gsub gsub ","format gsub  gsub gsub gsub "]}," ActiveSupport TimeWithZone to_s":{"type":"method","name":"to_s","children":[],"call":[" formatted_offset "," time strftime "," time "," strftime ","formatter call to_s ","formatter call ","formatter respond_to? "," Time DATE_FORMATS  [] "," utc to_s "," utc ","format == ","ActiveSupport Deprecation  warn ","format inspect "," utc to_formatted_s "," utc to_fs ","(str \"            Using a :default format for TimeWithZone#to_s is deprecated. Please use TimeWithZone#to_fs instead.\\n\") squish "," Time DATE_FORMATS  []  call to_s "," Time DATE_FORMATS  []  call "," Time DATE_FORMATS  []  respond_to? "]}," ActiveSupport TimeWithZone rfc2822":{"type":"method","name":"rfc2822","children":[],"call":[" to_s "," to_formatted_s "," to_fs "]}," ActiveSupport TimeWithZone httpdate":{"type":"method","name":"httpdate","children":[],"call":[" utc httpdate "," utc "]}," ActiveSupport TimeWithZone to_yaml":{"type":"method","name":"to_yaml","children":[],"call":[" time to_yaml gsub "," formatted_offset "," time to_yaml "," time "," utc to_yaml "," utc ","options kind_of? ","YAML ENGINE  syck? ! ","YAML ENGINE  syck? "]}," ActiveSupport TimeWithZone to_json":{"type":"method","name":"to_json","children":[],"call":[" formatted_offset "," time strftime "," time "," xmlschema inspect "," xmlschema ","ActiveSupport  use_standard_json_time_format "]}," ActiveSupport TimeWithZone xmlschema":{"type":"method","name":"xmlschema","children":[],"call":[" formatted_offset "," time strftime "," time ",".%i % "," time usec to_s [] "," time usec to_s "," time usec ","fraction_digits > ","(send\n  (str \".%06i\") :%\n  (send\n    (send nil :time) :usec)) [] ","fraction_digits + ",".%06i % ","fraction_digits to_i + ","fraction_digits to_i ","fraction_digits to_i > ","Z freeze ","PRECISIONS  [] ",".%i % _digits > ","(send\n  (str \".%06i\") :%\n  (send\n    (send nil :time) :usec)) [] _digits > ",".%i % _digits + ","(send\n  (str \".%06i\") :%\n  (send\n    (send nil :time) :usec)) [] _digits + ",".%i % _digits to_i + ","(send\n  (str \".%06i\") :%\n  (send\n    (send nil :time) :usec)) [] _digits to_i + ",".%i % _digits to_i ","(send\n  (str \".%06i\") :%\n  (send\n    (send nil :time) :usec)) [] _digits to_i ",".%i % _digits to_i > ","(send\n  (str \".%06i\") :%\n  (send\n    (send nil :time) :usec)) [] _digits to_i > "]}," ActiveSupport TimeWithZone inspect":{"type":"method","name":"inspect","children":[],"call":[" formatted_offset "," zone "," time strftime "," time "]}," ActiveSupport TimeWithZone zone":{"type":"method","name":"zone","children":[],"call":[" period zone_identifier to_s "," period zone_identifier "," period "," period abbreviation "]}," ActiveSupport TimeWithZone formatted_offset":{"type":"method","name":"formatted_offset","children":[],"call":[" utc_offset to_utc_offset_s "," utc_offset "," utc? ","TimeZone  seconds_to_utc_offset "]}," ActiveSupport TimeWithZone utc_offset":{"type":"method","name":"utc_offset","children":[],"call":[" period utc_total_offset "," period "," period observed_utc_offset "]}," ActiveSupport TimeWithZone utc?":{"type":"method","name":"utc?","children":[],"call":[" time_zone name == "," time_zone name "," time_zone "," period offset abbreviation == "," period offset abbreviation "," period offset "," period "," zone == "," zone "]}," ActiveSupport TimeWithZone dst?":{"type":"method","name":"dst?","children":[],"call":[" period dst? "," period "]}," ActiveSupport TimeWithZone localtime":{"type":"method","name":"localtime","children":[],"call":[" utc getlocal "," utc "," utc to_time getlocal "," utc to_time "," utc respond_to? "]}," ActiveSupport TimeWithZone in_time_zone":{"type":"method","name":"in_time_zone","children":[],"call":[" utc in_time_zone "," utc "," time_zone == "," time_zone "]}," ActiveSupport TimeWithZone period":{"type":"method","name":"period","children":[],"call":[" time_zone period_for_utc "," time_zone "]}," ActiveSupport TimeWithZone utc":{"type":"method","name":"utc","children":[],"call":[" period to_utc "," period "," incorporate_utc_offset "," utc_offset -@ "," utc_offset "]}," ActiveSupport TimeWithZone time":{"type":"method","name":"time","children":[],"call":[" period to_local "," period "," incorporate_utc_offset "," utc_offset "]}," ActiveSupport TimeWithZone initialize":{"type":"method","name":"initialize","children":[],"call":[" get_period_and_ensure_valid_local_time "," transfer_time_values_to_utc_constructor "]}," ActiveSupport Testing SetupAndTeardown run_with_callbacks_and_mocha":{"type":"method","name":"run_with_callbacks_and_mocha","children":[],"call":[" name ","result add_run "," mocha_teardown "," add_error "," add_failure ","e backtrace ","e message "," run_callbacks "," teardown "," add_assertion "," mocha_verify "," __send__ "," setup "," mocha_setup ","@method_name to_s == ","@method_name to_s "]}," ActiveSupport Testing SetupAndTeardown run_with_callbacks":{"type":"method","name":"run_with_callbacks","children":[],"call":[" name ","result add_run "," add_error "," raise "," add_failure ","e backtrace ","e message "," run_callbacks "," teardown "," __send__ "," setup ","@method_name to_s == ","@method_name to_s "]}," ActiveSupport Testing SetupAndTeardown included":{"type":"method","name":"included","children":[],"call":[]}," ActiveSupport Testing Default default_test":{"type":"method","name":"default_test","children":[],"call":[]}," ActiveSupport OrderedHash delete":{"type":"method","name":"delete","children":[],"call":[" delete_at last "," delete_at "," index "," assoc ","@keys delete_at ","@keys index "," has_key? "," @keys index  ","@keys @keys index  "]}," ActiveSupport escape_html_entities_in_json=":{"type":"method","name":"escape_html_entities_in_json=","children":[],"call":["ActiveSupport JSON Encoding  escape_regex= "]}," ActiveSupport escape_html_entities_in_json":{"type":"method","name":"escape_html_entities_in_json","children":[],"call":[]}," ActiveSupport Gzip compress":{"type":"method","name":"compress","children":[],"call":[]}," ActiveSupport Gzip decompress":{"type":"method","name":"decompress","children":[],"call":[]}," ActiveSupport Gzip Stream close":{"type":"method","name":"close","children":[],"call":[" rewind "]}," Dependencies uninherited_const_defined?":{"type":"method","name":"uninherited_const_defined?","children":[],"call":["mod const_defined? "]}," ActiveSupport CoreExtensions Time Zones in_time_zone":{"type":"method","name":"in_time_zone","children":[],"call":["ActiveSupport TimeWithZone  new "," Time  send! "," getutc "," utc? "," Time  __send__ "]}," ActiveSupport CoreExtensions Time Zones ClassMethods get_zone":{"type":"method","name":"get_zone","children":[],"call":["TimeZone  create ","time_zone name ","time_zone is_a? ","TZInfo Timezone  get ","TimeZone  [] ","time_zone respond_to? ","time_zone nil? "]}," ActiveSupport CoreExtensions Time Zones ClassMethods current":{"type":"method","name":"current","children":[],"call":[" Time  now "," Time  zone now "," Time  zone "," Time  zone_default "]}," ActiveSupport CoreExtensions Time Zones ClassMethods use_zone":{"type":"method","name":"use_zone","children":[],"call":[" Time  zone= "," get_zone "," Time  zone "]}," ActiveSupport CoreExtensions Time Zones ClassMethods zone=":{"type":"method","name":"zone=","children":[],"call":["Thread  current []= "," get_zone ","Thread  current "]}," ActiveSupport CoreExtensions Time Zones ClassMethods zone":{"type":"method","name":"zone","children":[],"call":[" zone_default ","Thread  current [] ","Thread  current "]}," ActiveSupport CoreExtensions Time Zones included":{"type":"method","name":"included","children":[],"call":[]}," ActiveSupport CoreExtensions Time Conversions formatted_offset":{"type":"method","name":"formatted_offset","children":[],"call":[" utc_offset to_utc_offset_s "," utc_offset "," utc? "]}," ActiveSupport CoreExtensions Time Calculations compare_with_coercion":{"type":"method","name":"compare_with_coercion","children":[],"call":[" compare_without_coercion "," to_datetime compare_without_coercion "," to_datetime ","other acts_like? ","other comparable_time ","other respond_to? ","other comparable_time  acts_like? ","other comparable_time  comparable_time ","other comparable_time  respond_to? "]}," ActiveSupport CoreExtensions Time Calculations minus_with_coercion":{"type":"method","name":"minus_with_coercion","children":[],"call":[" minus_without_coercion ","other comparable_time ","other respond_to? "," to_f - ","other to_f "," to_f ","other is_a? ","other comparable_time  comparable_time ","other comparable_time  respond_to? ","other comparable_time  to_f ","other comparable_time  is_a? "]}," ActiveSupport CoreExtensions Time Calculations end_of_year":{"type":"method","name":"end_of_year","children":[],"call":[" change "]}," ActiveSupport CoreExtensions Time Calculations end_of_quarter":{"type":"method","name":"end_of_quarter","children":[],"call":[" change end_of_month "," change ","m >= "," month ","(int 3) detect "," beginning_of_month change end_of_month "," beginning_of_month change "," beginning_of_month "]}," ActiveSupport CoreExtensions Time Calculations end_of_week":{"type":"method","name":"end_of_week","children":[],"call":["(send\n  (self) :+\n  (send\n    (lvar :days_to_sunday) :days)) end_of_day "," + ","days_to_sunday days ","7 - "," wday "," wday != ","(send\n  (self) :+\n  (send\n    (lvar :7 - ) :days)) end_of_day ","7 -  days "]}," ActiveSupport CoreExtensions Time Calculations ClassMethods ===":{"type":"method","name":"===","children":[],"call":["other is_a? "]}," ActiveSupport CoreExtensions String Unicode append_features":{"type":"method","name":"append_features","children":[],"call":[]}," ActiveSupport CoreExtensions String StartsEndsWith append_features":{"type":"method","name":"append_features","children":[],"call":[]}," ActiveSupport CoreExtensions String Iterators append_features":{"type":"method","name":"append_features","children":[],"call":[]}," ActiveSupport CoreExtensions String Filters squish!":{"type":"method","name":"squish!","children":[],"call":[" gsub! "," strip! "]}," ActiveSupport CoreExtensions String Filters squish":{"type":"method","name":"squish","children":[],"call":[" dup squish! "," dup "]}," Process daemon":{"type":"method","name":"daemon","children":[],"call":[]}," Object instance_variable_names":{"type":"method","name":"instance_variable_names","children":[],"call":[" instance_variables map "," instance_variables ","var to_s ","s to_s freeze ","s to_s ","variables map! "," instance_ instance_variables  map "," instance_ instance_variables  "," instance_variables  map! "]}," ActiveSupport CoreExtensions Numeric Conversions to_utc_offset_s":{"type":"method","name":"to_utc_offset_s","children":[],"call":["%+03d%s%02d % ","hours * ","(send\n  (send\n    (lvar :seconds) :abs) :%\n  (int 3600)) / ","seconds abs % ","seconds abs ","seconds abs / ","seconds < ","%s%02d%s%02d % ","seconds abs /  * "]}," FileLike content_type":{"type":"method","name":"content_type","children":[],"call":[]}," FileLike original_filename":{"type":"method","name":"original_filename","children":[],"call":[]}," ActiveSupport CoreExtensions DateTime Conversions to_f":{"type":"method","name":"to_f","children":[],"call":["(send\n  (lvar :days_since_unix_epoch) :*\n  (int 86400)) to_f ","days_since_unix_epoch * "," - "," DateTime  civil "," seconds_since_unix_epoch to_f "," seconds_since_unix_epoch ","(send\n  (lvar : - ) :*\n  (int 86400)) to_f "," -  * "]}," ActiveSupport CoreExtensions DateTime Conversions formatted_offset":{"type":"method","name":"formatted_offset","children":[],"call":[" utc_offset to_utc_offset_s "," utc_offset "," utc? "]}," ActiveSupport CoreExtensions DateTime Conversions append_features":{"type":"method","name":"append_features","children":[],"call":[]}," ActiveSupport CoreExtensions DateTime Calculations compare_with_coercion":{"type":"method","name":"compare_with_coercion","children":[],"call":[" compare_without_coercion ","other to_datetime ","other acts_like? ","other comparable_time ","other respond_to? ","other to_datetime  to_datetime ","other comparable_time  to_datetime ","other to_datetime  acts_like? ","other comparable_time  acts_like? ","other to_datetime  comparable_time ","other comparable_time  comparable_time ","other to_datetime  respond_to? ","other comparable_time  respond_to? "]}," ActiveSupport CoreExtensions DateTime Calculations utc_offset":{"type":"method","name":"utc_offset","children":[],"call":["(send\n  (send nil :offset) :*\n  (int 86400)) to_i "," offset * "," offset "]}," ActiveSupport CoreExtensions DateTime Calculations utc?":{"type":"method","name":"utc?","children":[],"call":[" offset == "," offset "]}," ActiveSupport CoreExtensions DateTime Calculations utc":{"type":"method","name":"utc","children":[],"call":[" new_offset "]}," ActiveSupport CoreExtensions Date Calculations end_of_year":{"type":"method","name":"end_of_year","children":[],"call":[" change "," acts_like? "]}," ActiveSupport CoreExtensions Date Calculations end_of_quarter":{"type":"method","name":"end_of_quarter","children":[],"call":[" change end_of_month "," change ","m >= "," month ","(int 3) detect "," beginning_of_month change end_of_month "," beginning_of_month change "," beginning_of_month "]}," ActiveSupport CoreExtensions Date Calculations end_of_week":{"type":"method","name":"end_of_week","children":[],"call":["result end_of_day "," acts_like? "," + ","days_to_sunday days ","7 - "," wday "," wday != "," +  end_of_day ","7 -  days "]}," ActiveSupport CoreExtensions Date Calculations ClassMethods current":{"type":"method","name":"current","children":[],"call":[" Date  today "," Time  zone today "," Time  zone "," Time  zone_default "]}," ActiveSupport CoreExtensions BigDecimal Conversions to_yaml":{"type":"method","name":"to_yaml","children":[],"call":["out scalar ","str == "," to_s ","YAML  quick_emit ","YAML_MAPPING  [] "," to_s  == "]}," ActiveSupport CoreExtensions BigDecimal Conversions to_formatted_s":{"type":"method","name":"to_formatted_s","children":[],"call":[" _original_to_s "]}," ActiveSupport CoreExtensions BigDecimal Conversions included":{"type":"method","name":"included","children":[],"call":[]}," realtime":{"type":"method","name":"realtime","children":[],"call":["r1 to_f - ","r0 to_f ","r1 to_f ","Time  now ","Time  now  to_f - ","Time  now  to_f "]}," ActiveSupport CoreExtensions Base64 Encoding encode64s":{"type":"method","name":"encode64s","children":[],"call":[" encode64 gsub "," encode64 "]}," ActiveSupport Callbacks run_callbacks":{"type":"method","name":"run_callbacks","children":[],"call":[" class send run "," class send "," class "," send "," class __define_callbacks ","runner call value ","runner call ","Filters Environment  new ","cbs compile "," block_given? ","cbs empty? ","callbacks compile ","callbacks empty? ","invoke_sequence call ","env value ","next_sequence invoke_after ","env value= "," block_given? ! ","env halted ! ","env halted ","next_sequence invoke_before ","next_sequence final? ","skipped pop invoke_after ","skipped pop ","skipped first ","current invoke_after ","target send ","current expand_call_template ","next_sequence nested ","(or-asgn\n  (lvasgn :skipped)\n  (array)) << ","current skip? ","current final? ","current invoke_before ","Proc  new "," __callbacks [] ","kind to_sym "," __callbacks "," class sFilters Environment  new nd run "," class sFilters Environment  new nd "," sFilters Environment  new nd "," class __dFilters Environment  new finFilters Environment  new _callbacks "," class __define_ send  "," class __define_ __callbacks []  ","runnFilters Environment  new r call valuFilters Environment  new  ","cbs compile  call value ","callbacks compile  call value ","runnFilters Environment  new r call ","cbs compile  call ","callbacks compile  call ","FiltFilters Environment  new rs EnvironmFilters Environment  new nt  nFilters Environment  new w ","cbs compilFilters Environment  new  "," send  compile "," block_givFilters Environment  new n? ","cbs Filters Environment  new mpty? "," send  empty? ","callbacks compilFilters Environment  new  "," __callbacks []  compile ","callbacks Filters Environment  new mpty? "," __callbacks []  empty? ","invokFilters Environment  new _sFilters Environment  new quFilters Environment  new ncFilters Environment  new  call ","Filters Environment  new nv valuFilters Environment  new  ","Filters Environment  new  value ","nFilters Environment  new xt_sFilters Environment  new quFilters Environment  new ncFilters Environment  new  invokFilters Environment  new _aftFilters Environment  new r ","next_sequence nested  invoke_after ","callbacks compile  invoke_after ","Filters Environment  new nv valuFilters Environment  new = ","Filters Environment  new  value= "," block_givFilters Environment  new n? ! ","Filters Environment  new nv haltFilters Environment  new d ! ","Filters Environment  new  halted ! ","Filters Environment  new nv haltFilters Environment  new d ","Filters Environment  new  halted ","nFilters Environment  new xt_sFilters Environment  new quFilters Environment  new ncFilters Environment  new  invokFilters Environment  new _bFilters Environment  new forFilters Environment  new  ","next_sequence nested  invoke_before ","callbacks compile  invoke_before ","nFilters Environment  new xt_sFilters Environment  new quFilters Environment  new ncFilters Environment  new  final? ","next_sequence nested  final? ","callbacks compile  final? ","skippFilters Environment  new d pop invokFilters Environment  new _aftFilters Environment  new r ","skippFilters Environment  new d pop ","skippFilters Environment  new d first ","currFilters Environment  new nt invokFilters Environment  new _aftFilters Environment  new r ","targFilters Environment  new t sFilters Environment  new nd ","currFilters Environment  new nt Filters Environment  new xpand_call_tFilters Environment  new mplatFilters Environment  new  ","nFilters Environment  new xt_sFilters Environment  new quFilters Environment  new ncFilters Environment  new  nFilters Environment  new stFilters Environment  new d ","next_sequence nested  nested ","callbacks compile  nested ","(or-asgn\n  (lvasgn :skippFilters Environment  new d)\n  (array)) << ","currFilters Environment  new nt skip? ","currFilters Environment  new nt final? ","currFilters Environment  new nt invokFilters Environment  new _bFilters Environment  new forFilters Environment  new  ","Proc  nFilters Environment  new w "," __ send  [] "," __ __callbacks []  [] "," __ send  "," __ __callbacks []  "]}," ActiveSupport Callbacks ClassMethods define_callbacks":{"type":"method","name":"define_callbacks","children":[],"call":[" class_eval ","callbacks each "," __define_runner ","CallbackChain  new "," extlib_inheritable_reader ","callbacks pop ","callbacks last is_a? ","callbacks last ","567 + "," extlib_inheritable_accessor ","symbols each ","symbols pop ","symbols last is_a? ","symbols last "," send "," class_attribute "," set_callbacks ","names each ","options []= ","target instance_exec "," lambda ","options [] ","ActiveSupport Deprecation  warn ","String  === ","options key? ","names extract_options! "," module_eval ","732 + ","774 + ","776 + ","748 + ","823 + ","name inspect ","name to_sym ","825 + ","814 + ","target set_callbacks ","(send\n  (array\n    (self)) :+\n  (send\n    (const\n      (const nil :ActiveSupport) :DescendantsTracker) :descendants\n    (self))) each ","(self) + ","ActiveSupport DescendantsTracker  descendants ","822 + ","927 + ","(send\n  (array\n    (self)) :+\n  (send\n    (self) :descendants)) each "," descendants ","832 + ","950 + ","947 + ","name to_sym s each ","names extract_options!  []= ","names extract_options!  [] ","names extract_options!  key? ","names extract_names extract_options! ! ","name to_sym s extract_options! ","name to_sym  inspect ","name to_sym  to_sym "]}," ActiveSupport Callbacks included":{"type":"method","name":"included","children":[],"call":[]}," ActiveSupport Callbacks Callback should_run_callback?":{"type":"method","name":"should_run_callback?","children":[],"call":[" evaluate_method ! "," evaluate_method "," options [] "," options ","(send\n  (send\n    (send\n      (array\n        (send\n          (send nil :options) :[]\n          (sym :unless))) :flatten) :compact) :any?) ! ","(send\n  (send nil :options) :[]\n  (sym :unless)) flatten compact any? ","(send\n  (send nil :options) :[]\n  (sym :unless)) flatten compact ","(send\n  (send nil :options) :[]\n  (sym :unless)) flatten ","(send\n  (send nil :options) :[]\n  (sym :if)) flatten compact all? ","(send\n  (send nil :options) :[]\n  (sym :if)) flatten compact ","(send\n  (send nil :options) :[]\n  (sym :if)) flatten "]}," ActiveSupport Callbacks Callback evaluate_method":{"type":"method","name":"evaluate_method","children":[],"call":[" raise ","Callbacks must be a symbol denoting the method to call, a string to be evaluated,  + ","method send "," kind ","method respond_to? ","method call "," eval "," binding ","args first instance_eval ","args first ","object send ","args shift ","args shift  send "]}," ActiveSupport Callbacks Callback call":{"type":"method","name":"call","children":[],"call":[" raise ","Cannot yield from a Proc type filter. The Proc must take two  + "," evaluate_method "," method "," should_run_callback? "]}," ActiveSupport Callbacks Callback dup":{"type":"method","name":"dup","children":[],"call":[" class new ","@options dup "," class "]}," ActiveSupport Callbacks Callback eql?":{"type":"method","name":"eql?","children":[],"call":[" == "]}," ActiveSupport Callbacks Callback ==":{"type":"method","name":"==","children":[],"call":[" method == "," method "," identifier == "," identifier ","other method ","other identifier "]}," ActiveSupport Callbacks Callback initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "," _compile_per_key_options "," next_id "," _compile_options "," _compile_filter ","options delete "," normalize_options! "," recompile_options! "," deprecate_per_key_option "," Array "," compute_identifier "," check_conditionals "]}," ActiveSupport Callbacks CallbackChain extract_options":{"type":"method","name":"extract_options","children":[],"call":[" class extract_options "," class "]}," ActiveSupport Callbacks CallbackChain delete":{"type":"method","name":"delete","children":[],"call":[" find ","callback is_a? ","@chain delete ","@single_callbacks clear "]}," ActiveSupport Callbacks CallbackChain find":{"type":"method","name":"find","children":[],"call":["(send nil :select) first "," block_given? ! "," block_given? ","c == "," select "]}," ActiveSupport Callbacks CallbackChain |":{"type":"method","name":"|","children":[],"call":[" << "," []= "," index "," find "," | ","chain each ","chain is_a? ","  index  "]}," ActiveSupport Callbacks CallbackChain run":{"type":"method","name":"run","children":[],"call":["callback call "," send ","terminator call "," block_given? ","options [] "]}," ActiveSupport Callbacks CallbackChain build":{"type":"method","name":"build","children":[],"call":[]}," ActiveSupport Cache ThreadSafety delete_matched":{"type":"method","name":"delete_matched","children":[],"call":["@mutex synchronize "]}," ActiveSupport Cache ThreadSafety delete":{"type":"method","name":"delete","children":[],"call":["@mutex synchronize "]}," ActiveSupport Cache ThreadSafety write":{"type":"method","name":"write","children":[],"call":["@mutex synchronize "]}," ActiveSupport Cache ThreadSafety read":{"type":"method","name":"read","children":[],"call":["@mutex synchronize "]}," ActiveSupport Cache Store log":{"type":"method","name":"log","children":[],"call":[" logger debug ","options inspect "," logger ","@logger_off ! ","@silence ! "," logger_off? ! "," logger_off? "," silence? ! "," silence? ","options blank? "," logger debug? "]}," ActiveSupport Cache Store decrement":{"type":"method","name":"decrement","children":[],"call":[" write ","num - "," read "," log "," raise ","NotImplementedError  new "," class name "," class "," read  - "]}," ActiveSupport Cache Store increment":{"type":"method","name":"increment","children":[],"call":[" write ","num + "," read "," log "," raise ","NotImplementedError  new "," class name "," class "," read  + "]}," ActiveSupport Cache Store exist?":{"type":"method","name":"exist?","children":[],"call":[" log ","entry expired? ! ","entry expired? "," read_entry "," namespaced_key "," instrument "," merged_options "," normalize_key ","entry mismatched? ! ","entry mismatched? "," normalize_version "," read_entry  expired? ! "," read_entry  expired? "," read_ read_entry  "," merged_ merged_options  "," read_entry  mismatched? ! "," read_entry  mismatched? "]}," ActiveSupport Cache Store delete_matched":{"type":"method","name":"delete_matched","children":[],"call":[" log ","matcher inspect "," raise ","NotImplementedError  new "," class name "," class "," instrument "]}," ActiveSupport Cache Store delete":{"type":"method","name":"delete","children":[],"call":[" log "," delete_entry "," namespaced_key "," instrument "," merged_options "," normalize_key "," merged_ merged_options  "]}," ActiveSupport Cache Store write":{"type":"method","name":"write","children":[],"call":[" log "," write_entry "," namespaced_key ","Entry  new "," instrument "," merged_options "," normalize_key ","options merge "," normalize_version "," write_Entry  new  "," merged_ merged_options  "," merged_options  merge "]}," ActiveSupport Cache Store read":{"type":"method","name":"read","children":[],"call":[" log ","payload []= ","entry value "," delete_entry ","entry expired? "," read_entry "," instrument "," namespaced_key "," merged_options "," normalize_key ","entry mismatched? "," normalize_version "," read_entry  value "," delete_ read_entry  "," read_entry  expired? "," read_ read_entry  "," namespaced_ namespaced_key  "," namespaced_ normalize_key  "," merged_ merged_options  "," normalize_ namespaced_key  "," normalize_ normalize_key  "," read_entry  mismatched? "," normalize_ normalize_version  "]}," ActiveSupport Cache Store fetch":{"type":"method","name":"fetch","children":[],"call":[" log ","%.5f % "," write ","Benchmark  realtime "," block_given? "," read ","options [] ! ","options [] ","%.2f % ","seconds * ","write (will save %.2fms) % ","Benchmark  ms "," instrument ","entry value "," delete_entry "," write_entry ","race_ttl * ","entry expires_at= ","Time  now + ","Time  now ","Time  now to_f - <= ","Time  now to_f - ","entry expires_at ","Time  now to_f ","options [] to_f ","entry expired? "," read_entry ","payload []= "," namespaced_key "," merged_options "," save_block_result_to_cache "," get_entry_value "," handle_expired_entry "," find_cached_entry "," raise ","entry ! ! ","entry ! "," normalize_key ","entry mismatched? "," normalize_version "," merged_options  [] ! "," merged_options  [] ","entry  read  "," handle_expired_entry  value "," delete_ handle_expired_entry  "," write_ handle_expired_entry  ","options [] to_f  * "," handle_expired_entry  expires_at= "," handle_expired_entry  expires_at "," merged_options  [] to_f "," handle_expired_entry  expired? "," read_ handle_expired_entry  "," namespaced_ namespaced_key  "," namespaced_ normalize_key  "," merged_ merged_options  "," save_block_ instrument _to_cache "," get_entry_ read  "," get_ handle_expired_entry _value "," handle_expired_ handle_expired_entry  "," find_cached_ handle_expired_entry  "," find_ find_cached_entry  "," find_ read_entry  "," handle_expired_entry  ! ! "," handle_expired_entry  ! "," normalize_ namespaced_key  "," normalize_ normalize_key  "," handle_expired_entry  mismatched? "]}," ActiveSupport Cache Store threadsafe!":{"type":"method","name":"threadsafe!","children":[],"call":[" class send "," class ","Mutex  new "]}," ActiveSupport Cache Store initialize":{"type":"method","name":"initialize","children":[],"call":["options dup "," class ","@options delete ","@coder respond_to? "," default_coder ","@options []= ","@options key? "," normalize_options ","Cache SerializerWithFallback  [] ","Cache Coder  new ","serializer is_a? "," default_serializer ","@options [] ! ","@options [] ","Cache  format_version < ","Cache  format_version "," validate_options ","options dup  delete "," normalize_options  delete "," validate_options  delete ","options dup  []= "," normalize_options  []= "," validate_options  []= ","options dup  key? "," normalize_options  key? "," validate_options  key? ","Cache SerializerWithFallback  []  is_a? "," default_Cache SerializerWithFallback  []  ","options dup  [] ! "," normalize_options  [] ! "," validate_options  [] ! ","options dup  [] "," normalize_options  [] "," validate_options  [] "]}," ActiveSupport Cache expand_cache_key":{"type":"method","name":"expand_cache_key","children":[],"call":["expanded_cache_key << "," retrieve_cache_key ","ENV  [] ","(if\n  (lvar :namespace)\n  (dstr\n    (begin\n      (lvar :namespace))\n    (str \"/\"))\n  (str \"\")) dup "," +@ ","(begin\n  (lvar :namespace)) +@ ","(if\n  (lvar :namespace)\n  (dstr\n    (begin\n      (lvar :namespace))\n    (str \"/\"))\n  (str \"\")) dup  << "," +@  << ","(begin\n  (lvar :namespace)) +@  << "]}," ActiveSupport Cache lookup_store":{"type":"method","name":"lookup_store","children":[],"call":["ActiveSupport Cache MemoryStore  new ","store_class new ","ActiveSupport Cache  const_get "," raise "," require ","store to_s camelize ","store to_s ","Array  wrap flatten ","Array  wrap "," retrieve_store_class new "," retrieve_store_class "," lookup_store ","parameters extract_options! ","options empty? ","parameters extract_parameters extract_options! ! ","parameters extract_options!  empty? "]}," ActiveSupport Cache MemoryStore clear":{"type":"method","name":"clear","children":[],"call":["@data clear ","@key_access clear "," synchronize "]}," ActiveSupport Cache MemoryStore exist?":{"type":"method","name":"exist?","children":[],"call":["@data has_key? "]}," ActiveSupport Cache MemoryStore delete_matched":{"type":"method","name":"delete_matched","children":[],"call":["k =~ ","@data delete_if "," delete_entry ","key match ","keys each ","@data keys "," synchronize "," key_matcher "," instrument ","matcher inspect "," merged_options "," key_ key_matcher  "," key_matcher  inspect "," merged_ merged_options  "]}," ActiveSupport Cache MemoryStore delete":{"type":"method","name":"delete","children":[],"call":["@data delete "]}," ActiveSupport Cache MemoryStore write":{"type":"method","name":"write","children":[],"call":["@data []= ","value freeze ","(if\n  (send\n    (lvar :value) :duplicable?)\n  (send\n    (lvar :value) :dup)\n  (lvar :value)) freeze ","value dup ","value duplicable? "]}," ActiveSupport Cache MemoryStore read":{"type":"method","name":"read","children":[],"call":["@data [] "]}," ActiveSupport Cache MemoryStore initialize":{"type":"method","name":"initialize","children":[],"call":["Monitor  new ","options [] ","32 megabytes ","options []= ","options key? "]}," ActiveSupport Cache MemCacheStore raw?":{"type":"method","name":"raw?","children":[],"call":["options [] "]}," ActiveSupport Cache MemCacheStore expires_in":{"type":"method","name":"expires_in","children":[],"call":["options [] "]}," ActiveSupport Cache MemCacheStore stats":{"type":"method","name":"stats","children":[],"call":["@data stats ","c stats ","@data with "]}," ActiveSupport Cache MemCacheStore clear":{"type":"method","name":"clear","children":[],"call":["@data flush_all "," logger error ","e message "," logger "," rescue_error_with ","c flush_all ","@data with "]}," ActiveSupport Cache MemCacheStore delete_matched":{"type":"method","name":"delete_matched","children":[],"call":[" raise "]}," ActiveSupport Cache MemCacheStore decrement":{"type":"method","name":"decrement","children":[],"call":["response == "," data decr "," data "," log ","@data decr "," instrument ","response to_i "," escape_key "," namespaced_key "," merged_options "," logger error "," e message "," e "," logger ","e message "," normalize_key "," rescue_error_with ","c decr ","options [] ","@data with "," data decr  == ","@data decr  == "," data decr  to_i ","@data decr  to_i "," merged_ merged_options  "," merged_options  [] "]}," ActiveSupport Cache MemCacheStore increment":{"type":"method","name":"increment","children":[],"call":["response == ","@data incr "," log "," instrument ","response to_i "," escape_key "," namespaced_key "," merged_options "," logger error "," e message "," e "," logger ","e message "," normalize_key "," rescue_error_with ","c incr ","options [] ","@data with ","@data incr  == ","@data incr  to_i "," merged_ merged_options  "," merged_options  [] "]}," ActiveSupport Cache MemCacheStore exist?":{"type":"method","name":"exist?","children":[],"call":[" read nil? ! "," read nil? "," read "]}," ActiveSupport Cache MemCacheStore delete":{"type":"method","name":"delete","children":[],"call":[" logger error ","e message "," logger ","response == ","@data delete "," expires_in ","@data delete  == "]}," ActiveSupport Cache MemCacheStore write":{"type":"method","name":"write","children":[],"call":[" logger error ","e message "," logger ","response == ","@data send "," raw? "," expires_in ","options [] ","value to_s ","@data send  == ","value to_s  to_s "]}," ActiveSupport Cache MemCacheStore read":{"type":"method","name":"read","children":[],"call":[" logger error ","e message "," logger ","@data get "," raw? "]}," ActiveSupport Cache MemCacheStore initialize":{"type":"method","name":"initialize","children":[],"call":["MemCache  new ","addresses empty? ","addresses extract_options! ","addresses flatten "," extend "," class build_mem_cache "," class ","addresses first ","addresses first respond_to? ","addresses + ","mem_cache_options delete ","UNIVERSAL_OPTIONS  each ","options dup ","addresses first is_a? "," raise ","(const nil :String) include? ","addresses first class ","(send\n  (const nil :UNIVERSAL_OPTIONS) :-\n  (array\n    (sym :compress))) each ","UNIVERSAL_OPTIONS  - ","mem_cache_options []= ","options []= ","options delete ! ","options delete ","options key? ","@mem_cache_options delete ","(send\n  (const nil :OVERRIDDEN_OPTIONS) :-\n  (array\n    (sym :compress))) each ","OVERRIDDEN_OPTIONS  - ","@mem_cache_options []= ","ActiveSupport  deprecator warn ","ActiveSupport  deprecator ","addresses flatten  empty? ","addresses extract_addresses extract_options! ! ","addresses flatten  extract_options! ","addresses flatten  flatten ","addresses flatten  first ","addresses flatten  first respond_to? ","addresses flatten  + ","mem_cache_addresses extract_options!  delete ","options dup  delete ","addresses extract_options!  dup ","addresses flatten  first is_a? ","addresses flatten  first class ","mem_cache_addresses extract_options!  []= ","options dup  []= ","addresses extract_options!  []= ","addresses extract_options!  delete ! ","addresses extract_options!  delete ","addresses extract_options!  key? ","@mem_cache_addresses extract_options!  delete ","@options dup  delete ","@mem_cache_addresses extract_options!  []= ","@options dup  []= "]}," ActiveSupport Cache FileStore search_dir":{"type":"method","name":"search_dir","children":[],"call":["callback call "," search_dir ","File  directory? ","File  join ","d == ","Dir  foreach ","File  exist? ! ","File  exist? ","d in? ","EXCLUDED_DIRS  include? ","Dir  each_child "]}," ActiveSupport Cache FileStore ensure_cache_path":{"type":"method","name":"ensure_cache_path","children":[],"call":["FileUtils  makedirs ","File  exist? "]}," ActiveSupport Cache FileStore real_file_path":{"type":"method","name":"real_file_path","children":[],"call":["%s/%s.cache % ","name gsub gsub ","name gsub "]}," ActiveSupport Cache FileStore exist?":{"type":"method","name":"exist?","children":[],"call":["File  exist? "," real_file_path "]}," ActiveSupport Cache FileStore delete_matched":{"type":"method","name":"delete_matched","children":[],"call":["File  delete ","f =~ "," search_dir "," delete_entry ","key match "," file_path_key "," cache_path "," key_matcher "," instrument ","matcher inspect "," merged_options "," file_path_key  match "," file_path_ file_path_key  ","  file_path_key _matcher "," key_ key_matcher  "," key_matcher  inspect "," merged_ merged_options  "]}," ActiveSupport Cache FileStore delete":{"type":"method","name":"delete","children":[],"call":["File  delete "," real_file_path "]}," ActiveSupport Cache FileStore write":{"type":"method","name":"write","children":[],"call":["RAILS_DEFAULT_LOGGER  error ","e message ","f write ","File  open "," real_file_path "," ensure_cache_path ","File  dirname "," logger error "," logger ","Marshal  dump ","File  atomic_write "," cache_path "]}," ActiveSupport Cache FileStore read":{"type":"method","name":"read","children":[],"call":["f read ","File  open "," real_file_path ","Marshal  load ","Time  now - < ","Time  now - ","File  mtime ","Time  now ","expires <= ","File  exist? "," expires_in "," expires_in  <= ","  expires_in _in "]}," ActiveSupport Cache FileStore initialize":{"type":"method","name":"initialize","children":[],"call":[" extend ","cache_path to_s "]}," ActiveSupport Cache DRbStore initialize":{"type":"method","name":"initialize","children":[],"call":["DRbObject  new "," require "]}," ActiveSupport Cache CompressedMemCacheStore write":{"type":"method","name":"write","children":[],"call":["options merge ","ActiveSupport Gzip  compress ","Marshal  dump ","(or\n  (lvar :options)\n  (hash)) merge "," raw? "]}," ActiveSupport Cache CompressedMemCacheStore read":{"type":"method","name":"read","children":[],"call":["Marshal  load ","ActiveSupport Gzip  decompress ","options merge ","(or\n  (lvar :options)\n  (hash)) merge "," raw? "]}," ActiveSupport BufferedLogger set_non_blocking_io":{"type":"method","name":"set_non_blocking_io","children":[],"call":["@log respond_to? ","(send\n  (ivar :@log) :==\n  (const nil :STDOUT)) ! ","@log == ","RUBY_PLATFORM  match ! ","RUBY_PLATFORM  match "]}," ActiveSupport BasicObject raise":{"type":"method","name":"raise","children":[],"call":[" Object  send "]}," ActiveSupport TimeWithZone duration_of_variable_length?":{"type":"method","name":"duration_of_variable_length?","children":[],"call":["(sym :years) include? ","obj parts flatten detect ","obj parts flatten ","obj parts ","ActiveSupport Duration  === ","p [] ","obj parts any? ","p [] in? ","obj variable? "]}," ActiveSupport StringInquirer method_missing":{"type":"method","name":"method_missing","children":[],"call":[" == ","method_name to_s [] ","method_name to_s ","method_name to_s ends_with? ","method_name to_s [] == ","method_name [] ","method_name [] == ","method_name end_with? "]}," ActiveSupport OrderedOptions method_missing":{"type":"method","name":"method_missing","children":[],"call":[" [] "," []= ","args first ","1 to_sym ","name to_s =~ ","name to_s ","name_string chomp! "," raise ","KeyError  new "," fetch presence "," fetch ","name_string to_sym "," [] presence ","name to_s dup ","name to_s +@ ","name to_s  chomp! ","name to_s dup  chomp! ","name to_s +@  chomp! ","name to_s  to_sym ","name to_s dup  to_sym ","name to_s +@  to_sym "]}," ActiveSupport OrderedOptions []":{"type":"method","name":"[]","children":[],"call":["key to_sym "]}," ActiveSupport OrderedOptions []=":{"type":"method","name":"[]=","children":[],"call":["key to_sym "]}," ActiveSupport Inflector ordinalize":{"type":"method","name":"ordinalize","children":[],"call":["number to_i % ","number to_i ","(irange\n  (int 11)\n  (int 13)) include? ","number to_i abs % ","number to_i abs "," ordinal ","I18n  translate "]}," ActiveSupport Inflector constantize":{"type":"method","name":"constantize","children":[],"call":["constant const_missing ","constant const_get ","constant const_defined? ","names each ","names shift ","names first empty? ","names first ","names empty? ","camel_cased_word split ","ancestor const_defined? ","ancestor == ","constant ancestors inject ","constant ancestors ","Object  const_defined? ","constant == ","names inject ","names size > ","names size ","Object  const_get ",":: freeze ","camel_cased_word include? ! ","camel_cased_word include? ","camel_cased_word blank? ","constant const_missing  const_missing ","constant const_get  const_missing ","constant const_missing  const_get ","constant const_get  const_get ","constant const_missing  const_defined? ","constant const_get  const_defined? ","camel_cased_word split  each ","camel_cased_word split  shift ","camel_cased_word split  first empty? ","camel_cased_word split  first ","camel_cased_word split  empty? ","constant const_missing  ancestors inject ","constant const_get  ancestors inject ","constant const_missing  ancestors ","constant const_get  ancestors ","constant const_missing  == ","constant const_get  == ","camel_cased_word split  inject ","camel_cased_word split  size > ","camel_cased_word split  size "]}," ActiveSupport Inflector foreign_key":{"type":"method","name":"foreign_key","children":[],"call":[" underscore + "," underscore "," demodulize "]}," ActiveSupport Inflector classify":{"type":"method","name":"classify","children":[],"call":[" camelize "," singularize ","table_name to_s sub ","table_name to_s "," freeze "]}," ActiveSupport Inflector tableize":{"type":"method","name":"tableize","children":[],"call":[" pluralize "," underscore "]}," ActiveSupport Inflector demodulize":{"type":"method","name":"demodulize","children":[],"call":["class_name_in_module to_s gsub ","class_name_in_module to_s ","path [] ","i + ","path rindex ","path to_s ","path length ","class_name_path rindex n_module to_s gsub ","class_name_path rindex n_module to_s ","path to_s  [] ","path rindex  + ","path rpath rindex ndex ","path to_s  rindex ","path to_s  to_s ","path to_s  length "]}," ActiveSupport Inflector humanize":{"type":"method","name":"humanize","children":[],"call":["lower_case_and_underscored_word to_s gsub gsub capitalize ","lower_case_and_underscored_word to_s gsub gsub ","lower_case_and_underscored_word to_s gsub ","lower_case_and_underscored_word to_s ","result gsub gsub capitalize ","result gsub gsub ","result gsub ","result gsub! "," inflections humans each "," inflections humans "," inflections ","lower_case_and_underscored_word to_s dup ","$& upcase ","(send\n  (lvar :result) :gsub\n  (regexp\n    (str \"(_)?([a-z\\\\d]*)\")\n    (regopt :i))) gsub ","2 downcase "," inflections acronyms [] "," inflections acronyms ","(send\n  (lvar :result) :gsub\n  (regexp\n    (str \"([a-z\\\\d]*)\")\n    (regopt :i))) gsub ","match downcase ","result tr! ","result sub! ","match upcase ","options fetch ","  freeze ","_ freeze "," freeze ","result delete_suffix! ","match upcase! ","match downcase! ","result lstrip! ","lower_case_and_underscored_word end_with? ","keep_id_suffix ! ","lower_case_and_underscored_word to_s dup  gsub gsub capitalize ","lower_case_and_underscored_word to_s dup  gsub gsub ","lower_case_and_underscored_word to_s dup  gsub ","lower_case_and_underscored_word to_s dup  gsub! ","(send\n  (lvar :lower_case_and_underscored_word to_s dup ) :gsub\n  (regexp\n    (str \"(_)?([a-z\\\\d]*)\")\n    (regopt :i))) gsub ","(send\n  (lvar :lower_case_and_underscored_word to_s dup ) :gsub\n  (regexp\n    (str \"([a-z\\\\d]*)\")\n    (regopt :i))) gsub ","lower_case_and_underscored_word to_s dup  tr! ","lower_case_and_underscored_word to_s dup  sub! ","lower_case_and_underscored_word to_s dup  delete_suffix! ","lower_case_and_underscored_word to_s dup  lstrip! "]}," ActiveSupport Inflector dasherize":{"type":"method","name":"dasherize","children":[],"call":["underscored_word gsub ","underscored_word tr ","- freeze ","_ freeze "]}," ActiveSupport Inflector underscore":{"type":"method","name":"underscore","children":[],"call":["camel_cased_word to_s gsub gsub gsub tr downcase ","camel_cased_word to_s gsub gsub gsub tr ","camel_cased_word to_s gsub gsub gsub ","camel_cased_word to_s gsub gsub ","camel_cased_word to_s gsub ","camel_cased_word to_s ","word downcase! ","word tr! ","word gsub! ","camel_cased_word to_s dup ","2 downcase "," inflections acronym_regex "," inflections ","camel_cased_word =~ ","_ freeze ","- freeze ","\\1_\\2 freeze ","/ freeze ",":: freeze ","(str \"[A-Z-]|::\") match? "," inflections acronyms_underscore_regex ","(or\n  (nth-ref 1)\n  (nth-ref 2)) << ","camel_cased_camel_cased_word to_s dup  to_s gsub gsub gsub tr downcase ","camel_cased_camel_cased_word to_s gsub  to_s gsub gsub gsub tr downcase ","camel_cased_camel_cased_word to_s dup  to_s gsub gsub gsub tr ","camel_cased_camel_cased_word to_s gsub  to_s gsub gsub gsub tr ","camel_cased_camel_cased_word to_s dup  to_s gsub gsub gsub ","camel_cased_camel_cased_word to_s gsub  to_s gsub gsub gsub ","camel_cased_camel_cased_word to_s dup  to_s gsub gsub ","camel_cased_camel_cased_word to_s gsub  to_s gsub gsub ","camel_cased_camel_cased_word to_s dup  to_s gsub ","camel_cased_camel_cased_word to_s gsub  to_s gsub ","camel_cased_camel_cased_word to_s dup  to_s ","camel_cased_camel_cased_word to_s gsub  to_s ","camel_cased_word to_s dup  downcase! ","camel_cased_word to_s gsub  downcase! ","camel_cased_word to_s dup  tr! ","camel_cased_word to_s gsub  tr! ","camel_cased_word to_s dup  gsub! ","camel_cased_word to_s gsub  gsub! ","camel_cased_camel_cased_word to_s dup  to_s dup ","camel_cased_camel_cased_word to_s gsub  to_s dup ","camel_cased_camel_cased_word to_s dup  =~ ","camel_cased_camel_cased_word to_s gsub  =~ "]}," ActiveSupport Inflector titleize":{"type":"method","name":"titleize","children":[],"call":["1 capitalize "," humanize gsub "," humanize "," underscore ","$& capitalize ","match capitalize "]}," ActiveSupport Inflector camelize":{"type":"method","name":"camelize","children":[],"call":["lower_case_and_underscored_word first + "," camelize [] "," camelize ","lower_case_and_underscored_word first ","1 upcase ","(send\n  (send\n    (lvar :lower_case_and_underscored_word) :to_s) :gsub\n  (regexp\n    (str \"/(.?)\")\n    (regopt))) gsub ","lower_case_and_underscored_word to_s gsub ","lower_case_and_underscored_word to_s ","lower_case_and_underscored_word first downcase + ","lower_case_and_underscored_word first downcase ","lower_case_and_underscored_word to_s [] chr downcase + ","lower_case_and_underscored_word to_s [] chr downcase ","lower_case_and_underscored_word to_s [] chr ","lower_case_and_underscored_word to_s [] ","lower_case_and_underscored_word to_s first downcase + ","lower_case_and_underscored_word to_s first downcase ","lower_case_and_underscored_word to_s first ","(send\n  (lvar :string) :gsub\n  (regexp\n    (str \"(?:_|(/))([a-z\\\\d]*)\")\n    (regopt :i))) gsub ","2 capitalize "," inflections acronyms [] "," inflections acronyms "," inflections ","string gsub ","$& downcase ","string sub "," inflections acronym_regex ","$& capitalize ","term to_s ","string gsub! ",":: freeze ","/ freeze ","match downcase ","match capitalize "," inflections acronyms_camelize_regex ","word capitalize! ","match capitalize! ","match downcase! ","uppercase_first_letter == ","uppercase_first_letter ! ","string capitalize ","string match? ","(send\n  (lvar :term to_s ) :gsub\n  (regexp\n    (str \"(?:_|(/))([a-z\\\\d]*)\")\n    (regopt :i))) gsub ","term to_s  gsub ","term to_s  sub ","term to_s  gsub! ","term to_s  capitalize ","term to_s  match? "]}," ActiveSupport Inflector singularize":{"type":"method","name":"singularize","children":[],"call":["result gsub! "," inflections singulars each "," inflections singulars "," inflections "," inflections uncountables include? ","result downcase "," inflections uncountables ","word to_s dup ","word to_s ","result =~ "," inflections uncountables any? "," apply_inflections ","word to_s dup  gsub! ","word to_s dup  downcase ","word to_s dup  =~ "]}," ActiveSupport Inflector pluralize":{"type":"method","name":"pluralize","children":[],"call":["result gsub! "," inflections plurals each "," inflections plurals "," inflections "," inflections uncountables include? ","result downcase "," inflections uncountables ","word empty? ","word to_s dup ","word to_s "," apply_inflections ","word to_s dup  gsub! ","word to_s dup  downcase "]}," ActiveSupport Inflector inflections":{"type":"method","name":"inflections","children":[],"call":["Inflections  instance "," block_given? ","Inflections  instance_or_fallback "]}," ActiveSupport Inflector Inflections clear":{"type":"method","name":"clear","children":[],"call":[" instance_variable_set ","Uncountables  new "," define_acronym_regex_patterns "," clear "]}," ActiveSupport Inflector Inflections uncountable":{"type":"method","name":"uncountable","children":[],"call":["(send\n  (ivar :@uncountables) :<<\n  (lvar :words)) flatten! ","@uncountables << ","words flatten map ","words flatten ","@uncountables add "]}," ActiveSupport Inflector Inflections irregular":{"type":"method","name":"irregular","children":[],"call":[" singular ","singular [] downcase + ","singular [] ","singular [] downcase ","Regexp  new ","plural [] ","plural [] downcase ","singular [] upcase + ","singular [] upcase ","plural [] upcase "," plural ","plural [] downcase + ","plural [] upcase + ","\\1 + ","singular [] upcase == ","@uncountables delete ","s0 downcase + ","s0 downcase ","p0 downcase ","s0 upcase + ","s0 upcase ","p0 upcase ","p0 downcase + ","p0 upcase + ","s0 upcase == ","singular []  downcase + ","singular []  downcase ","plural []  downcase ","singular []  upcase + ","singular []  upcase ","plural []  upcase ","plural []  downcase + ","plural []  upcase + ","singular []  upcase == "]}," ActiveSupport Inflector Inflections singular":{"type":"method","name":"singular","children":[],"call":["@singulars insert ","@uncountables delete ","rule is_a? ","@singulars prepend "]}," ActiveSupport Inflector Inflections plural":{"type":"method","name":"plural","children":[],"call":["@plurals insert ","@uncountables delete ","rule is_a? ","@plurals prepend "]}," ActiveSupport Inflector Inflections initialize":{"type":"method","name":"initialize","children":[],"call":["Uncountables  new "," define_acronym_regex_patterns "]}," ActiveSupport Deprecation DeprecatedConstantProxy warn":{"type":"method","name":"warn","children":[],"call":["ActiveSupport Deprecation  warn ","@deprecator warn "]}," ActiveSupport Deprecation DeprecatedConstantProxy target":{"type":"method","name":"target","children":[],"call":["@new_const to_s constantize ","@new_const to_s ","ActiveSupport Inflector  constantize "]}," ActiveSupport Deprecation DeprecatedConstantProxy initialize":{"type":"method","name":"initialize","children":[],"call":[" require ","Kernel  require ","ActiveSupport Deprecation  _instance ","ActiveSupport  deprecator warn ","ActiveSupport  deprecator "]}," ActiveSupport Deprecation DeprecationProxy method_missing":{"type":"method","name":"method_missing","children":[],"call":[" target __send__ "," target "," warn "," caller "," caller_locations "]}," ActiveSupport Deprecation DeprecationProxy inspect":{"type":"method","name":"inspect","children":[],"call":[" target inspect "," target "]}," ActiveSupport Dependencies log":{"type":"method","name":"log","children":[],"call":["RAILS_DEFAULT_LOGGER  debug "," log_activity "," logger debug "," logger "," log_activity? "," verbose "]}," ActiveSupport Dependencies log_call":{"type":"method","name":"log_call","children":[],"call":[" log "," caller first "," caller ","args collect * ","args collect "," log_activity ","(send\n  (lvar :args) :collect) * ","arg inspect "," logger "," log_activity? "]}," ActiveSupport Dependencies remove_constant":{"type":"method","name":"remove_constant","children":[],"call":[" remove_const ","names last ","parent instance_eval "," log ","(send\n  (send\n    (lvar :names) :[]\n    (irange\n      (int 0)\n      (int -2))) :*\n  (str \"::\")) constantize ","names [] * ","names [] ","names size == ","names size ","const to_s split ","const to_s "," qualified_const_defined? ","Inflector  constantize ","names * ","names pop ","const to_s sub split ","const to_s sub "," constantize before_remove_const "," constantize "," constantize respond_to? ","constantized before_remove_const ","constantized respond_to? ","parent const_get ","parent autoload? ","constants join ","constants empty? ","constants pop ","normalized split ","normalized sub! "," loaded delete "," loaded ","expanded sub! ","File  expand_path "," search_for_file ","const underscore ","expanded delete_suffix! ","const to_s delete_prefix ","const to_s split  last ","const to_s sub split  last ","(send\n  (send\n    (lvar :names) :[]\n    (irange\n      (int 0)\n      (int -2))) :*\n  (str \"::\")) constantize  instance_eval ","Inflector  constantize  instance_eval "," constantize  instance_eval ","(send\n  (send\n    (lvar :const to_s split ) :[]\n    (irange\n      (int 0)\n      (int -2))) :*\n  (str \"::\")) constantize ","(send\n  (send\n    (lvar :const to_s sub split ) :[]\n    (irange\n      (int 0)\n      (int -2))) :*\n  (str \"::\")) constantize ","const to_s split  [] * ","const to_s sub split  [] * ","const to_s split  [] ","const to_s sub split  [] ","const to_s split  size == ","const to_s sub split  size == ","const to_s split  size ","const to_s sub split  size ","const to_s split  * ","const to_s sub split  * ","const to_s split  pop ","const to_s sub split  pop "," constantize  before_remove_const ","parent const_get  before_remove_const "," constantize  respond_to? ","parent const_get  respond_to? ","(send\n  (send\n    (lvar :names) :[]\n    (irange\n      (int 0)\n      (int -2))) :*\n  (str \"::\")) constantize  const_get ","Inflector  constantize  const_get "," constantize  const_get ","(send\n  (send\n    (lvar :names) :[]\n    (irange\n      (int 0)\n      (int -2))) :*\n  (str \"::\")) constantize  autoload? ","Inflector  constantize  autoload? "," constantize  autoload? ","normalized split  join ","normalized split  empty? ","normalized split  pop ","const to_s sub  split ","const to_s delete_prefix  split ","const to_s sub  sub! ","const to_s delete_prefix  sub! ","File  expand_path  sub! ","File  expand_path  delete_suffix! "]}," ActiveSupport Dependencies to_constant_name":{"type":"method","name":"to_constant_name","children":[],"call":[" raise ","desc inspect ","desc name ","desc name blank? ","desc to_s ","desc [] ","desc starts_with? ","desc name presence ","desc sub "," real_mod_name ","desc delete_prefix "]}," ActiveSupport Dependencies LoadingModule root":{"type":"method","name":"root","children":[],"call":[]}," ActiveSupport Dependencies new_constants_in":{"type":"method","name":"new_constants_in","children":[],"call":["frame_ids include? ","watch_frame object_id "," constant_watch_stack delete_if "," constant_watch_stack ","watch_frames collect ","watch_frames blank? ! ","watch_frames blank? ","new_constants clear "," remove_constant ","new_constants each "," log ","new_constants * ","(send\n  (lvar :watch_frames) :collect) flatten ","mod_name == ","new_constants collect ","constants concat ","frame_name == "," constant_watch_stack each ","mod local_constant_names - ","mod local_constant_names ","mod is_a? ","mod_name constantize "," qualified_const_defined? "," constant_watch_stack concat "," raise ","desc inspect ","mod_name constantize local_constant_names ","desc to_s ","desc is_a? ","desc local_constant_names ","desc name ","descs collect "," log_call ","frame object_id "," constant_watch_stack_mutex synchronize "," constant_watch_stack_mutex ","(send\n  (lvar :new_constants) :each) clear "," constant_watch_stack new_constants "," constant_watch_stack watch_namespaces ","Inflector  constantize ","Inflector  constantize local_constant_names "," constant_watch_stack delete ","watch_frames each ","watch_frames present? "," constant_watch_stack new_constants_for "," constant_watch_stack add_modules ","watch_frames collect  include? "," constant_watch_stack add_modules  collect "," constant_watch_stack add_modules  blank? ! "," constant_watch_stack add_modules  blank? ","(send\n  (lvar :watch_frames) :collect) flatten  clear ","mod local_constant_names -  clear "," constant_watch_stack new_constants  clear "," constant_watch_stack new_constants_for  clear ","(send\n  (lvar :watch_frames) :collect) flatten  each ","mod local_constant_names -  each "," constant_watch_stack new_constants  each "," constant_watch_stack new_constants_for  each ","(send\n  (lvar :watch_frames) :collect) flatten  * ","mod local_constant_names -  * "," constant_watch_stack new_constants  * "," constant_watch_stack new_constants_for  * ","(send\n  (lvar : constant_watch_stack add_modules ) :collect) flatten ","mod_name constantize _name == ","Inflector  constantize _name == ","desc to_s  == ","desc name  == ","(send\n  (lvar :watch_frames) :collect) flatten  collect ","mod local_constant_names -  collect "," constant_watch_stack new_constants  collect "," constant_watch_stack new_constants_for  collect ","mod_name constantize  local_constant_names - ","Inflector  constantize  local_constant_names - ","mod_name constantize  local_constant_names ","Inflector  constantize  local_constant_names ","mod_name constantize  is_a? ","Inflector  constantize  is_a? ","mod_name constantize _name constantize ","Inflector  constantize _name constantize ","desc to_s  constantize ","desc name  constantize ","mod_name constantize _name constantize local_constant_names ","Inflector  constantize _name constantize local_constant_names ","desc to_s  constantize local_constant_names ","desc name  constantize local_constant_names ","(send\n  (lvar :(send\n  (lvar :watch_frames) :collect) flatten ) :each) clear ","(send\n  (lvar :mod local_constant_names - ) :each) clear ","(send\n  (lvar : constant_watch_stack new_constants ) :each) clear ","(send\n  (lvar : constant_watch_stack new_constants_for ) :each) clear "," constant_watch_stack (send\n  (lvar :watch_frames) :collect) flatten  "," constant_watch_stack mod local_constant_names -  "," constant_watch_stack  constant_watch_stack new_constants  "," constant_watch_stack  constant_watch_stack new_constants_for  "," constant_watch_stack add_modules  each "," constant_watch_stack add_modules  present? "," constant_watch_stack (send\n  (lvar :watch_frames) :collect) flatten _for "," constant_watch_stack mod local_constant_names - _for "," constant_watch_stack  constant_watch_stack new_constants _for "," constant_watch_stack  constant_watch_stack new_constants_for _for "," constant_watch_stack add_mod_name constantize ules "," constant_watch_stack add_Inflector  constantize ules "]}," ActiveSupport Dependencies mark_for_unload":{"type":"method","name":"mark_for_unload","children":[],"call":[" explicitly_unloadable_constants << "," explicitly_unloadable_constants "," explicitly_unloadable_constants include? "," to_constant_name "," to_constant_ to_constant_name  "]}," ActiveSupport Dependencies will_unload?":{"type":"method","name":"will_unload?","children":[],"call":[" explicitly_unloadable_constants include? "," to_constant_name "," explicitly_unloadable_constants "," autoloaded? "]}," ActiveSupport Dependencies autoloaded?":{"type":"method","name":"autoloaded?","children":[],"call":[" autoloaded_constants include? "," autoloaded_constants "," qualified_const_defined? "," to_constant_name ","desc name blank? ","desc name ","desc is_a? ","desc anonymous? "," real_mod_name nil? "," real_mod_name "," to_constant_ to_constant_name  ","desc  to_constant_name  blank? ","desc  to_constant_name  "," real_mod_ to_constant_name  nil? "," real_mod_ to_constant_name  "]}," ActiveSupport Dependencies remove_unloadable_constants!":{"type":"method","name":"remove_unloadable_constants!","children":[],"call":[" remove_constant "," explicitly_unloadable_constants each "," explicitly_unloadable_constants "," autoloaded_constants clear "," autoloaded_constants "," autoloaded_constants each ","Reference  clear! "," log "]}," ActiveSupport Dependencies load_missing_constant":{"type":"method","name":"load_missing_constant","children":[],"call":[" raise ","e missing_name? "," qualified_name_for ","parent const_missing ","(send\n  (send\n    (lvar :from_mod) :parents) :any?) ! "," uninherited_const_defined? ","from_mod parents any? ","from_mod parents ","parent != ","from_mod parent "," autoload_module! ","from_mod const_get "," require_or_load "," loaded include? ! "," loaded include? ","File  expand_path "," loaded "," search_for_file ","NameError  new ","qualified_name underscore ","from_mod name constantize object_id == ","from_mod object_id ","from_mod name constantize object_id ","from_mod name constantize ","from_mod name "," qualified_const_defined? ","from_mod name blank? "," log "," Object  const_get "," Object  const_defined? ","from_mod == "," log_call "," local_const_defined? ","name_error set_backtrace ","l =~ ","Regexp  escape "," caller reject "," caller ","Inflector  constantize equal? ","Inflector  constantize ","Inflector  constantize object_id == ","Inflector  constantize object_id ","l starts_with? ","File  expand_path sub ","p const_defined? ","from_mod const_defined? ","expanded sub! "," loading include? "," loading "," freeze ","(send\n  (send\n    (lvar :from_mod) :module_parents) :any?) ! ","from_mod module_parents any? ","from_mod module_parents ","from_mod module_parent ","l start_with? "," uninitialized_constant ","expanded delete_suffix! "," real_mod_name ","  qualified_name_for _for ","from_mod parent  const_missing ","from_mod module_parent  const_missing ","(send\n  (send\n    (lvar :from_mod) :from_mod parent s) :any?) ! ","(send\n  (send\n    (lvar :from_mod) :from_mod module_parent s) :any?) ! ","(send\n  (send\n    (lvar :from_ autoload_module! ) :parents) :any?) ! ","from_mod from_mod parent s any? ","from_mod from_mod module_parent s any? ","from_ autoload_module!  parents any? ","from_mod from_mod parent s ","from_mod from_mod module_parent s ","from_ autoload_module!  parents ","from_mod parent  != ","from_mod module_parent  != ","from_mod from_mod parent  ","from_mod from_mod module_parent  ","from_ autoload_module!  parent "," autoload_ autoload_module! ule! ","from_ autoload_module!  const_get "," qualified_name_for  underscore ","from_ autoload_module!  name constantize object_id == ","from_ autoload_module!  object_id ","from_ autoload_module!  name constantize object_id ","from_ autoload_module!  name constantize ","from_ autoload_module!  name ","from_ autoload_module!  name blank? ","from_ autoload_module!  == ","NameError  new  set_backtrace "," uninitialized_constant  set_backtrace ","from_ autoload_module!  const_defined? ","File  expand_path  sub! ","(send\n  (send\n    (lvar :from_mod) :module_from_mod parent s) :any?) ! ","(send\n  (send\n    (lvar :from_mod) :module_from_mod module_parent s) :any?) ! ","(send\n  (send\n    (lvar :from_ autoload_module! ) : autoload_module! ule_parents) :any?) ! ","from_mod module_from_mod parent s any? ","from_mod module_from_mod module_parent s any? ","from_ autoload_module!   autoload_module! ule_parents any? ","from_mod module_from_mod parent s ","from_mod module_from_mod module_parent s ","from_ autoload_module!   autoload_module! ule_parents ","from_mod module_from_mod parent  ","from_mod module_from_mod module_parent  ","from_ autoload_module!   autoload_module! ule_parent ","File  expand_path  delete_suffix! "," real_ autoload_module! _name "]}," ActiveSupport Dependencies qualified_name_for":{"type":"method","name":"qualified_name_for","children":[],"call":["name to_s ","(str \"Object\") include? "," to_constant_name ","mod_name == "," to_constant_name  == "]}," ActiveSupport Dependencies load_file":{"type":"method","name":"load_file","children":[],"call":[" log ","newly_defined_paths * ","newly_defined_paths empty? "," autoloaded_constants uniq! "," autoloaded_constants "," autoloaded_constants concat "," load_once_path? "," load_without_new_constant_marking "," new_constants_in ","const_paths collect ","(lvar :const_paths) compact ","const_paths is_a? "," log_call ","Kernel  load ","const_path [] ","(lvar :const_paths) compact  collect ","(lvar :(lvar :const_paths) compact ) compact ","(lvar :const_paths) compact  is_a? "]}," ActiveSupport Dependencies autoload_module!":{"type":"method","name":"autoload_module!","children":[],"call":[" autoloaded_constants << "," autoloaded_constants "," load_once_paths include? "," load_once_paths ","into const_set ","Module  new "," autoloadable_module? "," autoload_once_paths include? "," autoload_once_paths "," autoloaded_constants uniq! "," log ","File  join "," autoloadable_Module  new ule? "]}," ActiveSupport Dependencies load_once_path?":{"type":"method","name":"load_once_path?","children":[],"call":["path starts_with? "," load_once_paths any? "," load_once_paths "," autoload_once_paths any? "," autoload_once_paths ","base to_s ","path start_with? "]}," ActiveSupport Dependencies autoloadable_module?":{"type":"method","name":"autoloadable_module?","children":[],"call":["File  directory? ","File  join "," load_paths each "," load_paths "," autoload_paths each "," autoload_paths "]}," ActiveSupport Dependencies search_for_file":{"type":"method","name":"search_for_file","children":[],"call":["File  file? ","File  join "," load_paths each "," load_paths ","path_suffix + ","path_suffix ends_with? "," autoload_paths each "," autoload_paths ","path_suffix sub ","path_suffix =~ ",".rb freeze ","path_suffix end_with? "," load_File  join s each "," load_File  join s ","File  join _suffix + ","path_suffix +  + ","path_suffix sub  + ","File  join _suffix ends_with? ","path_suffix +  ends_with? ","path_suffix sub  ends_with? "," autoload_File  join s each "," autoload_File  join s ","File  join _suffix sub ","path_suffix +  sub ","path_suffix sub  sub ","File  join _suffix =~ ","path_suffix +  =~ ","path_suffix sub  =~ ","File  join _suffix end_with? ","path_suffix +  end_with? ","path_suffix sub  end_with? "]}," ActiveSupport Dependencies loadable_constants_for_path":{"type":"method","name":"loadable_constants_for_path","children":[],"call":["(send\n  (lvar :bases) :collect) flatten compact uniq ","(send\n  (lvar :bases) :collect) flatten compact ","(send\n  (lvar :bases) :collect) flatten ","nesting == ","nesting camelize ","nesting blank? ","nesting [] ","nesting [] == ","expanded_path [] ","expanded_root size ","(str \"\\\\A\") =~ ","Regexp  escape ","File  expand_path ","bases collect ","path =~ "," qualified_const_defined? ","paths uniq! ","paths << ","bases each ","(send\n  (lvar :bases) :collect) compact flatten compact uniq ","(send\n  (lvar :bases) :collect) compact flatten compact ","(send\n  (lvar :bases) :collect) compact flatten ","(send\n  (lvar :bases) :collect) compact ","(send\n  (lvar :bases) :inject\n  (array)) uniq ","nesting =~ ","expanded_path relative_path_from to_s ","expanded_path relative_path_from ","Pathname  new expand_path ","Pathname  new ","bases inject ","path [] ","root_size + ","expanded_path [] != ","/ freeze ","expanded_path start_with? ","path chomp ","nesting []  == ","expanded_path []  == ","expanded_path relative_path_from to_s  == ","nesting []  camelize ","expanded_path []  camelize ","expanded_path relative_path_from to_s  camelize ","nesting []  blank? ","expanded_path []  blank? ","expanded_path relative_path_from to_s  blank? ","nesting []  [] ","expanded_path []  [] ","expanded_path relative_path_from to_s  [] ","nesting []  [] == ","expanded_path []  [] == ","expanded_path relative_path_from to_s  [] == ","File  expand_path  [] ","Pathname  new expand_path  [] ","expanded_path chomp  [] ","File  expand_path  size ","Pathname  new expand_path  size ","File  expand_path chomp  ","path chomp  =~ ","path chomp s uniq! ","path chomp s << ","nesting []  =~ ","expanded_path []  =~ ","expanded_path relative_path_from to_s  =~ ","File  expand_path  relative_path_from to_s ","Pathname  new expand_path  relative_path_from to_s ","expanded_path chomp  relative_path chomp _from to_s ","File  expand_path  relative_path_from ","Pathname  new expand_path  relative_path_from ","expanded_path chomp  relative_path chomp _from ","Pathname  new expand_path chomp  ","path chomp  [] ","expanded_root size  + ","File  expand_path  [] != ","Pathname  new expand_path  [] != ","expanded_path chomp  [] != ","File  expand_path  start_with? ","Pathname  new expand_path  start_with? ","expanded_path chomp  start_with? ","path chomp  chomp "]}," ActiveSupport Dependencies uninherited_const_defined?":{"type":"method","name":"uninherited_const_defined?","children":[],"call":["mod const_defined? "]}," ActiveSupport Dependencies qualified_const_defined?":{"type":"method","name":"qualified_const_defined?","children":[],"call":["mod const_get "," uninherited_const_defined? ","names inject ","names shift ","names first empty? ","names first ","path to_s split ","path to_s "," raise ","path inspect "," local_const_defined? ","path sub to_s split ","path sub to_s ","path sub ","Object  qualified_const_defined? ","Object  const_defined? ","path to_s split  inject ","path sub to_s split  inject ","path to_s split  shift ","path sub to_s split  shift ","path to_s split  first empty? ","path sub to_s split  first empty? ","path to_s split  first ","path sub to_s split  first "]}," ActiveSupport Dependencies require_or_load":{"type":"method","name":"require_or_load","children":[],"call":[" history << "," history "," raise "," loaded delete "," loaded "," require "," log "," load_file "," enable_warnings "," history include? "," warnings_on_first_load ! "," warnings_on_first_load ","load_args << ","const_path nil? "," load? "," loaded << "," loaded include? ","File  expand_path ","file_name =~ "," log_call "," loading pop "," loading "," loading << ","Dependencies  load_interlock ","file_name chomp ","file_name chomp  =~ ","file_name chomp  chomp "]}," ActiveSupport Dependencies clear":{"type":"method","name":"clear","children":[],"call":[" remove_unloadable_constants! "," loaded clear "," loaded "," log_call "," loading clear "," loading ","Dependencies  unload_interlock "]}," ActiveSupport Dependencies associate_with":{"type":"method","name":"associate_with","children":[],"call":[" depend_on "]}," ActiveSupport Dependencies depend_on":{"type":"method","name":"depend_on","children":[],"call":[" raise "," require_or_load "," search_for_file ","LoadError  new copy_blame! ","LoadError  new ","message % ","load_error message [] ","load_error message ","MissingSourceFile  new copy_blame! ","MissingSourceFile  new ","load_error path ","load_error copy_blame! ","load_error message replace ","load_error_message replace ","load_error original_message ","load_error respond_to? ","load_error  search_for_file  ","load_error message  replace ","load_error original_message  replace "]}," ActiveSupport Dependencies load?":{"type":"method","name":"load?","children":[],"call":[" mechanism == "," mechanism "]}," Time _dump":{"type":"method","name":"_dump","children":[],"call":["obj _original_dump ","obj instance_variable_set "," utc? "," dup "," frozen? ","obj _dump_without_zone "," zone ","obj _dump_without_utc_flag ","obj send "," dup  _original_dump "," dup  instance_variable_set "," dup  _dump_without_zone "," dup  _dump_without_utc_flag "," dup  send "]}," Time _load":{"type":"method","name":"_load","children":[],"call":["time utc ","time instance_variable_get "," _original_load "," utc "," remove_instance_variable ","time instance_eval ","Time  local ","Time  utc "," utc? ","ary []= "," to_a "," _load_without_zone "," _load_without_utc_flag "," subsec ","ary [] ","ary [] == "," sec ","time time instance_variable_get  "," _original_load  utc "," _load_without_zone  utc "," _load_without_utc_flag  utc "," _original_load  instance_variable_get "," _load_without_zone  instance_variable_get "," _load_without_utc_flag  instance_variable_get "," time instance_variable_get  "," _original_load  instance_eval "," _load_without_zone  instance_eval "," _load_without_utc_flag  instance_eval ","time instance_e remove_instance_variable  ","Time  time instance_variable_get  "," time instance_variable_get ? "," to_a  []= "," _load_without_time instance_variable_get _flag "," to_a  [] "," to_a  [] == "]}," ActiveSupport CoreExt Module ModelNaming model_name":{"type":"method","name":"model_name","children":[],"call":["ModelName  new "," name "]}," ActiveSupport ModelName initialize":{"type":"method","name":"initialize","children":[],"call":["(begin\n  (send nil :tableize)) freeze "," demodulize underscore "," demodulize "," tableize ","@singular pluralize freeze ","@singular pluralize "," underscore tr freeze "," underscore tr "," underscore ","(begin\n  (ivar :@cache_key)) freeze "," tableize freeze ","(begin\n  (ivar :@collection)) freeze ","ActiveSupport Inflector  tableize freeze ","ActiveSupport Inflector  tableize ","ActiveSupport Inflector  underscore freeze ","ActiveSupport Inflector  underscore ","ActiveSupport Inflector  demodulize ","ActiveSupport Inflector  pluralize freeze ","ActiveSupport Inflector  pluralize ","ActiveSupport Inflector  underscore tr freeze ","ActiveSupport Inflector  underscore tr "," underscore tr freeze  pluralize freeze ","ActiveSupport Inflector  underscore tr freeze  pluralize freeze "," underscore tr freeze  pluralize ","ActiveSupport Inflector  underscore tr freeze  pluralize ","(begin\n  (ivar : tableize freeze )) freeze ","(begin\n  (ivar :ActiveSupport Inflector  tableize freeze )) freeze "]}," ActiveSupport CoreExtensions Date Behavior freeze":{"type":"method","name":"freeze","children":[],"call":[" instance_variable_set "," send ","m to_s =~ ","m to_s "," class private_instance_methods each "," class private_instance_methods "," class "]}," TZInfo RubyCoreSupport datetime_new!":{"type":"method","name":"datetime_new!","children":[],"call":[]}," TZInfo RubyCoreSupport rational_new!":{"type":"method","name":"rational_new!","children":[],"call":[]}," I18n normalize_translation_keys":{"type":"method","name":"normalize_translation_keys","children":[],"call":["k to_sym ","keys flatten map ","keys flatten ","k to_s split ","k to_s ","keys map ","(lvar :locale) + + ","(lvar :locale) + "," Array "," normalize_keys ","keys flatten - ","I18n  default_separator ","(lvar :locale) + +  flatten map ","keys flatten -  flatten map ","(lvar :locale) + +  flatten ","keys flatten -  flatten ","(lvar :locale) + +  map ","keys flatten -  map "," normalize_(lvar :locale) + +  "," normalize_keys flatten -  ","(lvar :locale) + +  flatten - ","keys flatten -  flatten - "]}," I18n default_exception_handler":{"type":"method","name":"default_exception_handler","children":[],"call":[" raise ","exception message ","MissingTranslationData  === "]}," I18n localize":{"type":"method","name":"localize","children":[],"call":[" backend localize "," backend ","options [] ","I18n  locale "," config backend localize "," config backend "," config ","options delete "," config locale "]}," I18n translate":{"type":"method","name":"translate","children":[],"call":[" send "," raise ","options [] "," backend translate "," backend ","I18n  locale ","options delete "," handle_exception "," config backend translate "," config backend "," config "," config locale ","args shift ","args pop ","args last is_a? ","args last ","args pop  [] ","args pop  delete "]}," I18n reload!":{"type":"method","name":"reload!","children":[],"call":[" backend reload! "," backend "," config backend reload! "," config backend "," config "]}," I18n load_path=":{"type":"method","name":"load_path=","children":[],"call":[]}," I18n load_path":{"type":"method","name":"load_path","children":[],"call":[]}," I18n exception_handler=":{"type":"method","name":"exception_handler=","children":[],"call":[]}," I18n locale=":{"type":"method","name":"locale=","children":[],"call":["Thread  current []= ","Thread  current ","locale to_sym "]}," I18n locale":{"type":"method","name":"locale","children":[],"call":[" default_locale ","Thread  current [] ","Thread  current "]}," I18n default_locale=":{"type":"method","name":"default_locale=","children":[],"call":["locale to_sym "]}," I18n default_locale":{"type":"method","name":"default_locale","children":[],"call":[]}," I18n backend=":{"type":"method","name":"backend=","children":[],"call":[]}," I18n backend":{"type":"method","name":"backend","children":[],"call":["Backend Simple  new "]}," I18n UnknownFileType initialize":{"type":"method","name":"initialize","children":[],"call":[]}," I18n ReservedInterpolationKey initialize":{"type":"method","name":"initialize","children":[],"call":["string inspect ","key inspect "]}," I18n MissingInterpolationArgument initialize":{"type":"method","name":"initialize","children":[],"call":["string inspect ","values inspect "]}," I18n InvalidPluralizationData initialize":{"type":"method","name":"initialize","children":[],"call":["entry inspect "]}," I18n MissingTranslationData initialize":{"type":"method","name":"initialize","children":[],"call":["keys join ","keys << ","keys size < ","keys size ","I18n  send ","options [] ","I18n  normalize_keys "," options [] "," options ","I18n  send  join ","I18n  normalize_keys  join ","I18n  send  << ","I18n  normalize_keys  << ","I18n  send  size < ","I18n  normalize_keys  size < ","I18n  send  size ","I18n  normalize_keys  size ","I18n  normalize_I18n  send  ","I18n  normalize_I18n  normalize_keys  "]}," I18n InvalidLocale initialize":{"type":"method","name":"initialize","children":[],"call":["locale inspect "]}," I18n Backend Simple deep_symbolize_keys":{"type":"method","name":"deep_symbolize_keys","children":[],"call":["result []= ","key to_sym "," deep_symbolize_keys ","value is_a? ","hash inject "," deep_symbolize_keys  is_a? "]}," I18n Backend Simple merge_translations":{"type":"method","name":"merge_translations","children":[],"call":[" translations [] merge! "," translations [] "," translations ","v1 merge ","Hash  === "," proc "," deep_symbolize_keys ","locale to_sym ","locale to_sym  to_sym "]}," I18n Backend Simple load_yml":{"type":"method","name":"load_yml","children":[],"call":["YAML  load ","IO  read "," require "]}," I18n Backend Simple load_rb":{"type":"method","name":"load_rb","children":[],"call":[" eval "," binding ","IO  read "]}," I18n Backend Simple load_file":{"type":"method","name":"load_file","children":[],"call":[" merge_translations ","data each "," send "," raise ","UnknownFileType  new "," respond_to? ","File  extname tr downcase ","File  extname tr ","File  extname "," send  each "]}," I18n Backend Simple interpolate":{"type":"method","name":"interpolate","children":[],"call":["result force_encoding ","values [] to_s ","values [] "," raise ","MissingInterpolationArgument  new ","values include? ! ","values include? ","ReservedInterpolationKey  new ","INTERPOLATION_RESERVED_KEYS  include? ","2 to_sym ","string gsub ","string force_encoding ","string encoding ","string respond_to? ","string is_a? "]}," I18n Backend Simple pluralize":{"type":"method","name":"pluralize","children":[],"call":["entry [] "," raise ","InvalidPluralizationData  new ","entry has_key? ","count == ","entry is_a? "]}," I18n Backend Simple default":{"type":"method","name":"default","children":[],"call":[" default ","options dup ","default each "," translate "]}," I18n Backend Simple lookup":{"type":"method","name":"lookup","children":[],"call":["(lvasgn :x\n  (send\n    (lvar :result) :[]\n    (send\n      (lvar :k) :to_sym))) nil? ","result [] ","k to_sym ","keys inject "," translations ","I18n  send "," init_translations "," initialized? ","(lvasgn :result [] \n  (send\n    (lvar :result) :[]\n    (send\n      (lvar :k) :to_sym))) nil? ","I18n  send  inject "]}," I18n Backend Simple translations":{"type":"method","name":"translations","children":[],"call":[]}," I18n Backend Simple init_translations":{"type":"method","name":"init_translations","children":[],"call":[" load_translations ","I18n  load_path ","I18n  load_path flatten "]}," I18n Backend Simple reload!":{"type":"method","name":"reload!","children":[],"call":[]}," I18n Backend Simple initialized?":{"type":"method","name":"initialized?","children":[],"call":[]}," I18n Backend Simple localize":{"type":"method","name":"localize","children":[],"call":["object strftime ","format gsub! "," translate ","object hour < ","object hour ","object respond_to? "," translate [] ","object mon ","object wday ","format to_s dup ","format to_s ","formats [] ","format to_sym "," raise ","object inspect ","format to_s dup  gsub! ","formats []  gsub! ","format to_s dup  to_s dup ","formats []  to_s dup ","format to_s dup  to_s ","formats []  to_s ","format to_s dup s [] ","formats [] s [] "," translate  [] ","format to_s dup  to_sym ","formats []  to_sym "]}," I18n Backend Simple translate":{"type":"method","name":"translate","children":[],"call":[" interpolate "," pluralize "," raise ","I18n MissingTranslationData  new ","entry nil? "," default "," lookup ","reserved include? ","options reject ","options delete ","options values_at "," translate ","key map ","key is_a? ","InvalidLocale  new ","locale nil? "," interpolate  nil? "," pluralize  nil? "," default  nil? "," lookup  nil? "]}," I18n Backend Simple store_translations":{"type":"method","name":"store_translations","children":[],"call":[" merge_translations "]}," I18n Backend Simple load_translations":{"type":"method","name":"load_translations","children":[],"call":[" load_file ","filenames each "]}," ActiveSupport TimeWithZone future?":{"type":"method","name":"future?","children":[],"call":[" utc future? "," utc "]}," ActiveSupport TimeWithZone today?":{"type":"method","name":"today?","children":[],"call":[" time today? "," time "]}," ActiveSupport TimeWithZone past?":{"type":"method","name":"past?","children":[],"call":[" utc past? "," utc "]}," ActiveSupport Testing SetupAndTeardown run_with_callbacks_and_testunit":{"type":"method","name":"run_with_callbacks_and_testunit","children":[],"call":[" name ","result add_run "," add_error "," raise "," add_failure ","e backtrace ","e message "," run_callbacks "," teardown "," __send__ "," setup ","@method_name to_s == ","@method_name to_s "]}," ActiveSupport Testing SetupAndTeardown run_with_callbacks_and_miniunit":{"type":"method","name":"run_with_callbacks_and_miniunit","children":[],"call":["runner puke "," name "," class "," run_callbacks "," teardown "]}," ActiveSupport Testing Performance Metrics GcTime format":{"type":"method","name":"format","children":[],"call":["%d ms % ","measurement / ","%.2f ms % "]}," ActiveSupport Testing Performance Metrics GcTime measure":{"type":"method","name":"measure","children":[],"call":["GC  time ","RubyProf  measure_gc_time ","RubyProf  measure_gc_time / ","GC Profiler  total_time ","RubyProf  measure_gc_time / / ","(send\n  (send\n    (send\n      (send nil :loopback) :get\n      (str \"system.gc.full.wallclock\")) :last) :+\n  (send\n    (send\n      (send nil :loopback) :get\n      (str \"system.gc.young.wallclock\")) :last)) / "," loopback get last + "," loopback get last "," loopback get "," loopback ","(send\n  (send\n    (const nil :ManagementFactory) :garbage_collector_mx_beans) :inject\n  (int 0)) / ","current_gc collection_time ","ManagementFactory  garbage_collector_mx_beans inject ","ManagementFactory  garbage_collector_mx_beans "]}," ActiveSupport Testing Performance Metrics GcRuns format":{"type":"method","name":"format","children":[],"call":["measurement to_i to_s ","measurement to_i "]}," ActiveSupport Testing Performance Metrics GcRuns measure":{"type":"method","name":"measure","children":[],"call":["GC  heap_info [] ","GC  heap_info ","GC  collections ","RubyProf  measure_gc_runs ","GC  count "," loopback get last + "," loopback get last "," loopback get "," loopback ","current_gc collection_count ","ManagementFactory  garbage_collector_mx_beans inject ","ManagementFactory  garbage_collector_mx_beans "]}," ActiveSupport Testing Performance Metrics Objects format":{"type":"method","name":"format","children":[],"call":["measurement to_i to_s ","measurement to_i "]}," ActiveSupport Testing Performance Metrics Objects measure":{"type":"method","name":"measure","children":[],"call":["GC  disable ","last [] + ","last [] ","GC Profiler  data last ","GC Profiler  data ","GC  start ","GC  enable ","ObjectSpace  allocated_objects ","RubyProf  measure_allocations ","GC  malloc_allocations "," loopback get last "," loopback get "," loopback ","GC Profiler  data last  [] + ","GC Profiler  data last  [] ","GC Profiler  data GC Profiler  data last  "," loopback get GC Profiler  data last  "]}," ActiveSupport Testing Performance Metrics Memory format":{"type":"method","name":"format","children":[],"call":["%.2f KB % "]}," ActiveSupport Testing Performance Metrics Memory measure":{"type":"method","name":"measure","children":[],"call":["GC  disable ","GC Profiler  data last [] / ","GC Profiler  data last [] ","GC Profiler  data last ","GC Profiler  data ","GC  start ","GC  enable ","GC  malloc_allocated_size / ","GC  malloc_allocated_size ","GC  total_malloc_allocated_size / ","GC  total_malloc_allocated_size ","GC  heap_info [] / ","GC  heap_info [] ","GC  heap_info ","GC  allocated_size / ","GC  allocated_size ","RubyProf  measure_memory / ","RubyProf  measure_memory "," loopback get last "," loopback get "," loopback ","ManagementFactory  memory_mx_bean non_heap_memory_usage used + ","ManagementFactory  memory_mx_bean heap_memory_usage used ","ManagementFactory  memory_mx_bean heap_memory_usage ","ManagementFactory  memory_mx_bean ","ManagementFactory  memory_mx_bean non_heap_memory_usage used ","ManagementFactory  memory_mx_bean non_heap_memory_usage "]}," ActiveSupport Testing Performance Metrics CpuTime measure":{"type":"method","name":"measure","children":[],"call":["RubyProf  measure_cpu_time ","ManagementFactory  thread_mx_bean get_current_thread_cpu_time / / / ","ManagementFactory  thread_mx_bean get_current_thread_cpu_time / / ","ManagementFactory  thread_mx_bean get_current_thread_cpu_time / ","ManagementFactory  thread_mx_bean get_current_thread_cpu_time ","ManagementFactory  thread_mx_bean "]}," ActiveSupport Testing Performance Metrics CpuTime initialize":{"type":"method","name":"initialize","children":[],"call":["RubyProf  cpu_frequency= ","RubyProf  cpu_frequency > ","RubyProf  cpu_frequency "]}," ActiveSupport Testing Performance Metrics WallTime measure":{"type":"method","name":"measure","children":[],"call":["RubyProf  measure_wall_time "]}," ActiveSupport Testing Performance Metrics ProcessTime measure":{"type":"method","name":"measure","children":[],"call":["RubyProf  measure_process_time "]}," ActiveSupport Testing Performance Metrics Time format":{"type":"method","name":"format","children":[],"call":["%.2f sec % ","%d ms % ","measurement * ","measurement < "]}," ActiveSupport Testing Performance Metrics Time measure":{"type":"method","name":"measure","children":[],"call":[" Time  now to_f "," Time  now "]}," ActiveSupport Testing Performance Metrics Base with_gc_stats":{"type":"method","name":"with_gc_stats","children":[],"call":["GC  enable ","GC Profiler  disable ","GC Profiler  enable ","GC  disable ","GC  start ","GC  disable_stats ","GC  enable_stats ","GC  run ","Rubinius Agent  loopback ","ManagementFactory  memory_mx_bean gc ","ManagementFactory  memory_mx_bean "]}," ActiveSupport Testing Performance Metrics Base profile":{"type":"method","name":"profile","children":[],"call":["RubyProf  pause ","RubyProf  resume "]}," ActiveSupport Testing Performance Metrics Base benchmark":{"type":"method","name":"benchmark","children":[],"call":[" measure - "," measure "," with_gc_stats "]}," ActiveSupport Testing Performance Metrics Base measure":{"type":"method","name":"measure","children":[],"call":[]}," ActiveSupport Testing Performance Metrics Base measure_mode":{"type":"method","name":"measure_mode","children":[],"call":[" class "]}," ActiveSupport Testing Performance Metrics Base name":{"type":"method","name":"name","children":[],"call":[" class name demodulize underscore "," class name demodulize "," class name "," class "]}," ActiveSupport Testing Performance Metrics Base initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Testing Performance Metrics []":{"type":"method","name":"[]","children":[],"call":[]}," ActiveSupport Testing Performance Profiler output_filename":{"type":"method","name":"output_filename","children":[],"call":["printer_class name sub underscore ","printer_class name sub ","printer_class name ","printer_class name demodulize "]}," ActiveSupport Testing Performance Profiler record":{"type":"method","name":"record","children":[],"call":["klass new print "," profile_options slice "," profile_options ","klass new ","File  open ","FileUtils  mkdir_p ","File  dirname "," output_filename ","klasses each ","(send\n  (send\n    (send nil :profile_options) :[]\n    (sym :formats)) :map) compact ","RubyProf  const_get ","f to_s camelize ","f to_s "," profile_options [] map "," profile_options [] "," full_profile_options slice "," full_profile_options ","(send\n  (send\n    (send nil :full_profile_options) :[]\n    (sym :formats)) :map) compact "," full_profile_options [] map "," full_profile_options [] ","@profiler show "," create_path_and_open_file "," full_profile_options [] include? ","klass new printProfile ","JRuby Profiler  const_get ","(send\n  (send\n    (send nil :profile_options) :[]\n    (sym :formats)) :map) compact  each ","(send\n  (send\n    (send nil :full_profile_options) :[]\n    (sym :formats)) :map) compact  each "]}," ActiveSupport Testing Performance Profiler report":{"type":"method","name":"report","children":[],"call":["%20s: unsupported % ","@metric name "]}," ActiveSupport Testing Performance Profiler run":{"type":"method","name":"run","children":[],"call":["method_infos sort last total_time ","method_infos sort last ","method_infos sort ","@data threads values sum ","@data threads values ","@data threads ","RubyProf  stop "," run_test "," profile_options [] to_i times "," profile_options [] to_i "," profile_options [] "," profile_options ","RubyProf  pause ","RubyProf  start ","RubyProf  measure_mode= ","@metric measure_mode ","method_infos max total_time ","method_infos max "," full_profile_options [] to_i times "," full_profile_options [] to_i "," full_profile_options [] "," full_profile_options ","@profiler profile "," time_with_block ","Rubinius Profiler Instrumenter  new ","JRuby Profiler  profile ","thread methods max total_time ","thread methods max ","thread methods ","@data threads sum ","RubyProf  stop  threads values sum ","RubyProf  stop  threads values ","RubyProf  stop  threads ","Rubinius Profiler Instrumenter  new  profile ","RubyProf  stop  threads sum "]}," ActiveSupport Testing Performance Profiler initialize":{"type":"method","name":"initialize","children":[],"call":["@metric measure_mode ","@metric is_a? "]}," ActiveSupport Testing Performance Benchmarker output_filename":{"type":"method","name":"output_filename","children":[],"call":[]}," ActiveSupport Testing Performance Benchmarker with_output_file":{"type":"method","name":"with_output_file","children":[],"call":["file puts ","File  open ","FileUtils  mkdir_p ","File  dirname ","File  exist? ! ","File  exist? "," output_filename "]}," ActiveSupport Testing Performance Benchmarker environment":{"type":"method","name":"environment","children":[],"call":["(lvar :app) * ","(str \"git branch -v\") =~ ","Dir  chdir ","File  directory? "]}," ActiveSupport Testing Performance Benchmarker record":{"type":"method","name":"record","children":[],"call":["file puts "," environment "," with_output_file ","Time  now utc xmlschema ","Time  now utc ","Time  now ","@metric total / "," profile_options [] to_i "," profile_options [] "," profile_options ","@metric total "," full_profile_options [] to_i "," full_profile_options [] "," full_profile_options ","Time  Time  now utc xmlschema  utc xmlschema ","Time  Time  now utc xmlschema  utc ","Time  Time  now utc xmlschema  "]}," ActiveSupport Testing Performance Benchmarker run":{"type":"method","name":"run","children":[],"call":["@metric total "," run_test "," profile_options [] to_i times "," profile_options [] to_i "," profile_options [] "," profile_options "," full_profile_options [] to_i times "," full_profile_options [] to_i "," full_profile_options [] "," full_profile_options "]}," ActiveSupport Testing Performance Performer output_filename":{"type":"method","name":"output_filename","children":[],"call":["@metric name "," full_test_name "," profile_options [] "," profile_options "," full_profile_options [] "," full_profile_options "]}," ActiveSupport Testing Performance Performer report":{"type":"method","name":"report","children":[],"call":["%20s: %s % ","@metric format ","@metric name ","@total / "," profile_options [] "," profile_options ","%20s: unsupported % "," full_profile_options [] "," full_profile_options "]}," ActiveSupport Testing Performance Performer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Testing Performance run_profile":{"type":"method","name":"run_profile","children":[],"call":["performer record "," puts ","performer report ","performer run ","klass new "," profile_options [] "," profile_options "," full_profile_options [] "," full_profile_options ","klass new  record ","klass new  report ","klass new  run "]}," ActiveSupport Testing Performance run_warmup":{"type":"method","name":"run_warmup","children":[],"call":["GC  start "," puts ","%s (%s warmup) % ","time format ","time total "," full_test_name "," run_test ","Metrics Time  new "," run_gc ","Metrics Time  new  format ","Metrics Time  new  total "]}," ActiveSupport Testing Performance run_test":{"type":"method","name":"run_test","children":[],"call":[" add_error "," add_failure ","e backtrace ","e message "," run_callbacks "," teardown "," __send__ ","metric send "," setup "]}," ActiveSupport Testing Performance run":{"type":"method","name":"run","children":[],"call":[" name "," class ","result add_run "," run_profile ","klass new ","Metrics  [] ","metric_name to_sym ","metrics each "," profile_options [] "," profile_options "," run_warmup "," method_name =~ "," method_name ","Metrics  []  new "," profile_options []  each "]}," ActiveSupport Testing Performance full_test_name":{"type":"method","name":"full_test_name","children":[],"call":[" method_name "," class name "," class "]}," ActiveSupport Testing Performance included":{"type":"method","name":"included","children":[],"call":[]}," ActiveSupport TestCase test":{"type":"method","name":"test","children":[],"call":[]}," ActiveSupport SecureRandom lastWin32ErrorMessage":{"type":"method","name":"lastWin32ErrorMessage","children":[],"call":[]}," ActiveSupport SecureRandom random_number":{"type":"method","name":"random_number","children":[],"call":[]}," ActiveSupport SecureRandom base64":{"type":"method","name":"base64","children":[],"call":[]}," ActiveSupport SecureRandom hex":{"type":"method","name":"hex","children":[],"call":[]}," ActiveSupport SecureRandom random_bytes":{"type":"method","name":"random_bytes","children":[],"call":[]}," ActiveSupport Rescuable handler_for_rescue":{"type":"method","name":"handler_for_rescue","children":[],"call":["rescuer bind "," method ","exception is_a? ","klass_name constantize "," class const_get "," class "," Array reverse detect "," Array reverse "," Array "," rescue_handlers "," class rescue_handlers reverse detect "," class rescue_handlers reverse "," class rescue_handlers "," instance_exec ","Proc  new ","rescuer arity == ","rescuer arity "," class handler_for_rescue ","klass === "]}," ActiveSupport Rescuable rescue_with_handler":{"type":"method","name":"rescue_with_handler","children":[],"call":["handler call ","handler arity != ","handler arity "," handler_for_rescue "," class rescue_with_handler "," class "," handler_for_rescue  call "," handler_for_rescue  arity != "," handler_for_rescue  arity ","  handler_for_rescue _for_rescue "," class rescue_with_ handler_for_rescue  "]}," ActiveSupport Rescuable ClassMethods rescue_from":{"type":"method","name":"rescue_from","children":[],"call":[" rescue_handlers << ","options [] "," rescue_handlers "," raise ","klass is_a? ","klass name ","klass <= ","klasses each ","options []= "," block_given? ","options has_key? ","klasses extract_options! ","klass inspect ","klass respond_to? ","klasses extract_options!  [] ","klasses extract_options!  []= ","options has_klass name ? ","klasses extract_options!  has_key? ","klasses extract_klasses extract_options! ! "]}," ActiveSupport Rescuable included":{"type":"method","name":"included","children":[],"call":[]}," ActiveSupport OrderedHash has_value?":{"type":"method","name":"has_value?","children":[],"call":["value == "," any? "]}," ActiveSupport OrderedHash has_key?":{"type":"method","name":"has_key?","children":[],"call":[" assoc nil? ! "," assoc nil? "," assoc "]}," ActiveSupport Multibyte UnicodeDatabase filename":{"type":"method","name":"filename","children":[],"call":[]}," ActiveSupport Multibyte UnicodeDatabase dirname":{"type":"method","name":"dirname","children":[],"call":[]}," ActiveSupport Multibyte UnicodeDatabase load":{"type":"method","name":"load","children":[{"type":"method","name":"===","children":[],"asgn":[],"call":["i === "," detect "]}],"call":[" attr_reader ","i === "," detect ","@boundary [] instance_eval ","@boundary [] ","@boundary [] kind_of? ","@boundary each "," raise ","IOError  new ","e message ","Marshal  load ","f read ","File  open "," class filename "," class "]}," ActiveSupport Multibyte UnicodeDatabase initialize":{"type":"method","name":"initialize","children":[],"call":["Hash  new ","Codepoint  new "]}," ActiveSupport Memoizable memoize":{"type":"method","name":"memoize","children":[],"call":[" class_eval ","MEMOIZED_IVAR  call ","symbols each ","61 + ","symbol inspect ","original_method inspect ","ActiveSupport Memoizable  memoized_ivar_for ","64 + ","71 + ","ActiveSupport Memoizable  MEMOIZED_IVAR  call _for ","ActiveSupport Memoizable  ActiveSupport Memoizable  memoized_ivar_for _for "]}," ActiveSupport Memoizable Freezable unmemoize_all":{"type":"method","name":"unmemoize_all","children":[],"call":[" instance_variable_get clear "," instance_variable_get "," instance_variable_defined? ","MEMOIZED_IVAR  call ","m to_s =~ ","m to_s "," methods each "," methods "]}," ActiveSupport Memoizable Freezable memoize_all":{"type":"method","name":"memoize_all","children":[],"call":[" instance_variable_set ","MEMOIZED_IVAR  call "," __send__ "," method arity == "," method arity "," method ","m to_s =~ ","m to_s "," methods each "," methods "]}," ActiveSupport Memoizable Freezable freeze_with_memoizable":{"type":"method","name":"freeze_with_memoizable","children":[],"call":[" freeze_without_memoizable "," memoize_all "," frozen? "]}," ActiveSupport Memoizable Freezable included":{"type":"method","name":"included","children":[],"call":[]}," ActiveSupport Inflector transliterate":{"type":"method","name":"transliterate","children":[],"call":["string mb_chars normalize gsub ","string mb_chars normalize ","string mb_chars ","Iconv  iconv to_s ","Iconv  iconv ","string dup "," warn ","I18n  transliterate ","ActiveSupport Multibyte Unicode  normalize ","ActiveSupport Multibyte Unicode  tidy_bytes ","proxy normalize gsub ","proxy normalize ","ActiveSupport Multibyte  proxy_class new ","ActiveSupport Multibyte  proxy_class ","(send\n  (send\n    (send\n      (send\n        (send\n          (const\n            (const\n              (const nil :ActiveSupport) :Multibyte) :Chars) :new\n          (lvar :string)) :tidy_bytes) :normalize\n      (sym :d)) :unpack\n    (str \"U*\")) :map) compact flatten pack ","(send\n  (send\n    (send\n      (send\n        (send\n          (const\n            (const\n              (const nil :ActiveSupport) :Multibyte) :Chars) :new\n          (lvar :string)) :tidy_bytes) :normalize\n      (sym :d)) :unpack\n    (str \"U*\")) :map) compact flatten ","(send\n  (send\n    (send\n      (send\n        (send\n          (const\n            (const\n              (const nil :ActiveSupport) :Multibyte) :Chars) :new\n          (lvar :string)) :tidy_bytes) :normalize\n      (sym :d)) :unpack\n    (str \"U*\")) :map) compact ","char < ","ASCII_APPROXIMATIONS  [] ","ActiveSupport Multibyte Chars  new tidy_bytes normalize unpack map ","ActiveSupport Multibyte Chars  new tidy_bytes normalize unpack ","ActiveSupport Multibyte Chars  new tidy_bytes normalize ","ActiveSupport Multibyte Chars  new tidy_bytes ","ActiveSupport Multibyte Chars  new "," raise ","string class name ","string class ","string is_a? ","transliterated encode! ","input_encoding != ","transliterated encoding ","ActiveSupport Multibyte Unicode  tidy_bytes unicode_normalize ","string encode! ","string encoding == ","string encoding ","string force_encoding ","allowed_encodings include? ","string frozen? ","ALLOWED_ENCODINGS_FOR_TRANSLITERATE  include? ","string ascii_only? ","string dup  mb_chars normalize gsub ","string dup  mb_chars normalize ","string dup  mb_chars ","string dup  dup ","ActiveSupport Multibyte  proxy_class new  normalize gsub ","ActiveSupport Multibyte  proxy_class new  normalize ","ActiveSupport Multibyte  ActiveSupport Multibyte  proxy_class new _class new ","ActiveSupport Multibyte  ActiveSupport Multibyte  proxy_class new _class ","(send\n  (send\n    (send\n      (send\n        (send\n          (const\n            (const\n              (const nil :ActiveSupport) :Multibyte) :Chars) :new\n          (lvar :string dup )) :tidy_bytes) :normalize\n      (sym :d)) :unpack\n    (str \"U*\")) :map) compact flatten pack ","(send\n  (send\n    (send\n      (send\n        (send\n          (const\n            (const\n              (const nil :ActiveSupport) :Multibyte) :Chars) :new\n          (lvar :string dup )) :tidy_bytes) :normalize\n      (sym :d)) :unpack\n    (str \"U*\")) :map) compact flatten ","(send\n  (send\n    (send\n      (send\n        (send\n          (const\n            (const\n              (const nil :ActiveSupport) :Multibyte) :Chars) :new\n          (lvar :string dup )) :tidy_bytes) :normalize\n      (sym :d)) :unpack\n    (str \"U*\")) :map) compact ","string dup  class name ","string dup  class ","string dup  is_a? ","I18n  transliterate  encode! ","string encoding  != ","I18n  transliterate  encoding ","string dup  encode! ","string dup  encoding == ","string dup  encoding ","string dup  force_encoding ","string dup  frozen? ","string dup  ascii_only? "]}," ActiveSupport Inflector parameterize":{"type":"method","name":"parameterize","children":[],"call":["parameterized_string downcase ","parameterized_string gsub! ","parameterized_string squeeze! "," transliterate ","Regexp  escape ","sep blank? ","string toutf8 ","string is_utf8? ","sep empty? ","sep nil? ","parameterized_string downcase! "," freeze ","separator == ","- freeze ","separator empty? ","separator nil? ","ActiveSupport Deprecation  warn ","sep == "," transliterate  downcase ","parameterized_string toutf8  downcase "," transliterate  gsub! ","parameterized_string toutf8  gsub! "," transliterate  squeeze! ","parameterized_string toutf8  squeeze! ","string toutf8  toutf8 ","string toutf8  is_utf8? "," transliterate  downcase! ","parameterized_string toutf8  downcase! "]}," ActiveSupport Inflector Inflections human":{"type":"method","name":"human","children":[],"call":["@humans insert ","@humans prepend "]}," ActiveSupport Deprecation DeprecatedConstantProxy class":{"type":"method","name":"class","children":[],"call":[" target class "," target "]}," ActiveSupport Deprecation DeprecatedObjectProxy warn":{"type":"method","name":"warn","children":[],"call":["ActiveSupport Deprecation  warn ","@deprecator warn "]}," ActiveSupport Deprecation DeprecatedObjectProxy target":{"type":"method","name":"target","children":[],"call":[]}," ActiveSupport Deprecation DeprecatedObjectProxy initialize":{"type":"method","name":"initialize","children":[],"call":["ActiveSupport Deprecation  _instance ","ActiveSupport  deprecator warn ","ActiveSupport  deprecator "]}," ActiveSupport Dependencies unhook!":{"type":"method","name":"unhook!","children":[],"call":["Loadable  excluded ","ModuleConstMissing  excluded ","Loadable  exclude_from ","ModuleConstMissing  exclude_from "]}," ActiveSupport Dependencies hook!":{"type":"method","name":"hook!","children":[],"call":[" include ","Exception  instance_eval ","Class  instance_eval ","Module  instance_eval ","Object  instance_eval ","Exception  class_eval ","Module  class_eval ","Object  class_eval ","Exception  include ","ModuleConstMissing  include_into ","Loadable  include_into "]}," ActiveSupport Dependencies Blamable copy_blame!":{"type":"method","name":"copy_blame!","children":[],"call":["exc blamed_files clone ","exc blamed_files "]}," ActiveSupport Dependencies Blamable describe_blame":{"type":"method","name":"describe_blame","children":[],"call":[" blamed_files join "," blamed_files "," blamed_files empty? "]}," ActiveSupport Dependencies Blamable blamed_files":{"type":"method","name":"blamed_files","children":[],"call":[]}," ActiveSupport Dependencies Blamable blame_file!":{"type":"method","name":"blame_file!","children":[],"call":["(or-asgn\n  (ivasgn :@blamed_files)\n  (array)) unshift "]}," ActiveSupport Dependencies Loadable unloadable":{"type":"method","name":"unloadable","children":[],"call":["Dependencies  mark_for_unload "]}," ActiveSupport Dependencies Loadable require":{"type":"method","name":"require","children":[],"call":[" raise ","exception blame_file! ","Dependencies  new_constants_in ","Dependencies  load? "," load_dependency "]}," ActiveSupport Dependencies Loadable load_with_new_constant_marking":{"type":"method","name":"load_with_new_constant_marking","children":[],"call":[" raise ","exception blame_file! "," load_without_new_constant_marking ","Dependencies  new_constants_in ","Dependencies  load? "]}," ActiveSupport Dependencies Loadable require_association":{"type":"method","name":"require_association","children":[],"call":["Dependencies  associate_with "]}," ActiveSupport Dependencies Loadable require_dependency":{"type":"method","name":"require_dependency","children":[],"call":["Dependencies  depend_on "," raise ","file_name inspect ","file_name is_a? ","file_name to_path ","file_name respond_to? ","file_name to_path  inspect ","file_name to_path  is_a? ","file_name to_path  to_path ","file_name to_path  respond_to? "]}," ActiveSupport Dependencies Loadable require_or_load":{"type":"method","name":"require_or_load","children":[],"call":["Dependencies  require_or_load "]}," ActiveSupport Dependencies Loadable excluded":{"type":"method","name":"excluded","children":[],"call":[]}," ActiveSupport Dependencies Loadable included":{"type":"method","name":"included","children":[],"call":[]}," ActiveSupport Dependencies ClassConstMissing const_missing":{"type":"method","name":"const_missing","children":[],"call":[" raise ","NameError  new copy_blame! ","NameError  new ","Dependencies  qualified_name_for ","e missing_name? "," parent "," parent send ","Dependencies  load_missing_constant "," parent == ","(const nil :Object) include? ","Dependencies  Dependencies  qualified_name_for _for "]}," ActiveSupport Dependencies ModuleConstMissing unloadable":{"type":"method","name":"unloadable","children":[],"call":[]}," ActiveSupport Dependencies ModuleConstMissing const_missing_with_dependencies":{"type":"method","name":"const_missing_with_dependencies","children":[],"call":["ActiveSupport Dependencies  load_missing_constant "]}," ActiveSupport Dependencies ModuleConstMissing excluded":{"type":"method","name":"excluded","children":[],"call":[]}," ActiveSupport Dependencies ModuleConstMissing included":{"type":"method","name":"included","children":[],"call":[]}," ActiveSupport CoreExtensions Time Calculations future?":{"type":"method","name":"future?","children":[],"call":[" > "," Time  current "]}," ActiveSupport CoreExtensions Time Calculations today?":{"type":"method","name":"today?","children":[],"call":[" to_date == "," Date  current "," to_date "]}," ActiveSupport CoreExtensions Time Calculations past?":{"type":"method","name":"past?","children":[],"call":[" < "," Time  current "]}," ActiveSupport CoreExtensions String Multibyte chars":{"type":"method","name":"chars","children":[],"call":[" mb_chars ","ActiveSupport Deprecation  warn "," caller "]}," ActiveSupport CoreExtensions String Multibyte is_utf8?":{"type":"method","name":"is_utf8?","children":[],"call":["ActiveSupport Multibyte Chars  consumes? "," dup force_encoding valid_encoding? "," dup force_encoding "," dup "," valid_encoding? "," encoding "]}," ActiveSupport CoreExtensions String Multibyte mb_chars":{"type":"method","name":"mb_chars","children":[],"call":["ActiveSupport Multibyte  proxy_class new ","ActiveSupport Multibyte  proxy_class ","ActiveSupport Multibyte  proxy_class wants? "]}," ActiveSupport CoreExtensions String Inflections parameterize":{"type":"method","name":"parameterize","children":[],"call":["Inflector  parameterize "]}," ActiveSupport CoreExtensions String Behavior acts_like_string?":{"type":"method","name":"acts_like_string?","children":[],"call":[]}," Object class_eval":{"type":"method","name":"class_eval","children":[],"call":[" metaclass class_eval "," metaclass "," singleton_class class_eval "," singleton_class "]}," Object metaclass":{"type":"method","name":"metaclass","children":[],"call":[]}," Module synchronize":{"type":"method","name":"synchronize","children":[],"call":[" alias_method_chain "," module_eval "," raise "," method_defined? ","method to_s sub ","method to_s ","methods each ","options [] ","options is_a? ","methods extract_options! ","28 + ","31 + ","32 + ","33 + ","methods extract_options!  [] ","methods extract_options!  is_a? ","methods extract_methods extract_options! ! "]}," ActiveSupport CoreExtensions Module model_name":{"type":"method","name":"model_name","children":[],"call":["ModelName  new "," name "," ActiveSupport ModelName  new "]}," ActiveSupport CoreExtensions Module local_constant_names":{"type":"method","name":"local_constant_names","children":[],"call":["c to_s "," local_constants map "," local_constants "]}," ActiveSupport CoreExtensions Module local_constants":{"type":"method","name":"local_constants","children":[],"call":[" constants ","inherited [] object_id != "," const_get object_id "," const_get ","inherited [] object_id ","inherited [] ","inherited key? ! ","inherited key? "," constants select ","inherited []= ","anc const_get ","anc constants each ","anc constants ","anc == "," ancestors each "," ancestors "]}," ActiveSupport CoreExtensions Module parents":{"type":"method","name":"parents","children":[],"call":["parents << ","parents include? ","parts pop ","(send\n  (lvar :parts) :*\n  (str \"::\")) constantize ","parts * ","parts empty? "," parent_name split "," parent_name "," parent_name split  pop ","(send\n  (lvar : parent_name split ) :*\n  (str \"::\")) constantize "," parent_name split  * "," parent_name split  empty? "]}," ActiveSupport CoreExtensions Module parent":{"type":"method","name":"parent","children":[],"call":[" parent_name constantize "," parent_name "]}," ActiveSupport CoreExtensions Module parent_name":{"type":"method","name":"parent_name","children":[],"call":["$` freeze "," name =~ "," name "]}," ActiveSupport CoreExtensions Module alias_attribute":{"type":"method","name":"alias_attribute","children":[],"call":[" module_eval ","66 + "]}," ActiveSupport CoreExtensions Module alias_method_chain":{"type":"method","name":"alias_method_chain","children":[],"call":[" private "," private_method_defined? "," protected "," protected_method_defined? "," public "," public_method_defined? "," alias_method "," block_given? ","target to_s sub ","target to_s "]}," ActiveSupport CoreExtensions Integer Time years":{"type":"method","name":"years","children":[],"call":["ActiveSupport Duration  new "," * ","365.25 days "]}," ActiveSupport CoreExtensions Integer Time months":{"type":"method","name":"months","children":[],"call":["ActiveSupport Duration  new "," * ","30 days "]}," ActiveSupport CoreExtensions Hash DeepMerge deep_merge!":{"type":"method","name":"deep_merge!","children":[],"call":[" replace "," deep_merge "]}," ActiveSupport CoreExtensions Hash DeepMerge deep_merge":{"type":"method","name":"deep_merge","children":[],"call":["oldval deep_merge ","newval class to_s == ","newval class to_s ","newval class ","oldval class to_s == ","oldval class to_s ","oldval class ","newval to_hash ","newval respond_to? ","oldval to_hash ","oldval respond_to? "," merge ","oldval to_hash  deep_merge ","newval to_hash  class to_s == ","newval to_hash  class to_s ","newval to_hash  class ","oldval to_hash  class to_s == ","oldval to_hash  class to_s ","oldval to_hash  class ","newval to_hash  to_hash ","newval to_hash  respond_to? ","oldval to_hash  to_hash ","oldval to_hash  respond_to? "]}," ActiveSupport CoreExtensions Float Time years_without_deprecation":{"type":"method","name":"years_without_deprecation","children":[],"call":["ActiveSupport Duration  new "," * ","365.25 days "]}," ActiveSupport CoreExtensions Float Time months_without_deprecation":{"type":"method","name":"months_without_deprecation","children":[],"call":["ActiveSupport Duration  new "," * ","30 days "]}," ActiveSupport CoreExtensions Float Time months":{"type":"method","name":"months","children":[],"call":[" months_without_deprecation "," ActiveSupport Deprecation  warn "," caller "," class deprecated_method_warning "," class "]}," ActiveSupport CoreExtensions Float Time years":{"type":"method","name":"years","children":[],"call":[" years_without_deprecation "," ActiveSupport Deprecation  warn "," caller "," class deprecated_method_warning "," class "]}," ActiveSupport CoreExtensions File Atomic atomic_write":{"type":"method","name":"atomic_write","children":[],"call":[" chmod ","old_stat mode "," chown ","old_stat gid ","old_stat uid "," rename ","temp_file path "," unlink "," stat "," open "," rand ","Process  pid ","Thread  current object_id ","Thread  current ","temp_file close ","Tempfile  new "," basename "," join "," dirname ","FileUtils  mv "," require "," stat  mode "," stat  gid "," stat  uid ","Tempfile  new  path ","Tempfile  new  close "]}," Enumerable many?":{"type":"method","name":"many?","children":[],"call":["size > "," size "," select size "," select "," block_given? "," count ","(op-asgn\n  (lvasgn :cnt) :+\n  (int 1)) > "," any? ","cnt > "," size  > "," select size  > "," count  > ","  size  ","  select size  ","  count  "," select  size  "," select  select size  "," select  count  "]}," Enumerable each_with_object":{"type":"method","name":"each_with_object","children":[],"call":["block call "," each "," returning ","memo tap "," to_enum "," block_given? "]}," Class duplicable?":{"type":"method","name":"duplicable?","children":[],"call":[]}," ActiveSupport CoreExtensions DateTime Calculations future?":{"type":"method","name":"future?","children":[],"call":[" > "," DateTime  current "]}," ActiveSupport CoreExtensions DateTime Calculations past?":{"type":"method","name":"past?","children":[],"call":[" < "," DateTime  current "]}," ActiveSupport CoreExtensions DateTime Calculations ClassMethods current":{"type":"method","name":"current","children":[],"call":[" Time  now to_datetime "," Time  now "," Time  zone now to_datetime "," Time  zone now "," Time  zone "," Time  zone_default "]}," ActiveSupport CoreExtensions Date Calculations future?":{"type":"method","name":"future?","children":[],"call":[" > "," Date  current "]}," ActiveSupport CoreExtensions Date Calculations today?":{"type":"method","name":"today?","children":[],"call":[" to_date == "," Date  current "," to_date "]}," ActiveSupport CoreExtensions Date Calculations past?":{"type":"method","name":"past?","children":[],"call":[" < "," Date  current "]}," Object present?":{"type":"method","name":"present?","children":[],"call":[" blank? ! "," blank? "]}," ActiveSupport CoreExtensions Array Grouping in_groups":{"type":"method","name":"in_groups","children":[],"call":["groups each "," block_given? ","groups << "," slice concat ","(lvar :fill_with) * "," slice ","length == ","modulo > ","fill_with != ","division + ","number times "," size % "," size "," size / ","division +  == "," size %  > "," size /  + "]}," ActiveSupport CoreExtensions Array Access forty_two":{"type":"method","name":"forty_two","children":[],"call":[" [] "]}," ActiveSupport CoreExtensions Array Access fifth":{"type":"method","name":"fifth","children":[],"call":[" [] "]}," ActiveSupport CoreExtensions Array Access fourth":{"type":"method","name":"fourth","children":[],"call":[" [] "]}," ActiveSupport CoreExtensions Array Access third":{"type":"method","name":"third","children":[],"call":[" [] "]}," ActiveSupport CoreExtensions Array Access second":{"type":"method","name":"second","children":[],"call":[" [] "]}," ActiveSupport Callbacks Callback hash":{"type":"method","name":"hash","children":[],"call":["@method hash ","@identifier hash "]}," ActiveSupport Callbacks CallbackChain replace_or_append!":{"type":"method","name":"replace_or_append!","children":[],"call":[" << "," []= "," index ","  index  "]}," ActiveSupport Cache Store silence!":{"type":"method","name":"silence!","children":[],"call":[]}," ActiveSupport Cache SynchronizedMemoryStore clear":{"type":"method","name":"clear","children":[],"call":["@guard synchronize "]}," ActiveSupport Cache SynchronizedMemoryStore decrement":{"type":"method","name":"decrement","children":[],"call":["@guard synchronize "]}," ActiveSupport Cache SynchronizedMemoryStore increment":{"type":"method","name":"increment","children":[],"call":["@guard synchronize "]}," ActiveSupport Cache SynchronizedMemoryStore exist?":{"type":"method","name":"exist?","children":[],"call":["@guard synchronize "]}," ActiveSupport Cache SynchronizedMemoryStore delete_matched":{"type":"method","name":"delete_matched","children":[],"call":["@guard synchronize "]}," ActiveSupport Cache SynchronizedMemoryStore delete":{"type":"method","name":"delete","children":[],"call":["@guard synchronize "]}," ActiveSupport Cache SynchronizedMemoryStore write":{"type":"method","name":"write","children":[],"call":["@guard synchronize "]}," ActiveSupport Cache SynchronizedMemoryStore read":{"type":"method","name":"read","children":[],"call":["@guard synchronize "]}," ActiveSupport Cache SynchronizedMemoryStore fetch":{"type":"method","name":"fetch","children":[],"call":["@guard synchronize "]}," ActiveSupport Cache SynchronizedMemoryStore initialize":{"type":"method","name":"initialize","children":[],"call":["Monitor  new ","ActiveSupport Deprecation  warn "," caller "]}," ActiveSupport BufferedLogger clear_buffer":{"type":"method","name":"clear_buffer","children":[],"call":["@buffer delete ","Thread  current "]}," ActiveSupport BufferedLogger buffer":{"type":"method","name":"buffer","children":[],"call":["@buffer [] ","Thread  current "]}," ActiveSupport Multibyte proxy_class":{"type":"method","name":"proxy_class","children":[],"call":[]}," ActiveSupport Multibyte proxy_class=":{"type":"method","name":"proxy_class=","children":[],"call":[]}," ActiveSupport Multibyte clean":{"type":"method","name":"clean","children":[],"call":[]}," ActiveSupport Multibyte verify!":{"type":"method","name":"verify!","children":[],"call":[]}," ActiveSupport Multibyte verify":{"type":"method","name":"verify","children":[],"call":[]}," ActiveSupport Multibyte valid_character":{"type":"method","name":"valid_character","children":[],"call":[]}," unescape":{"type":"method","name":"unescape","children":[],"call":["(send\n  (lvar :str) :gsub\n  (lvar :escaped)) force_encoding ","(send\n  (send\n    (back-ref :$&) :[]\n    (int 1)\n    (int 2)) :hex) pack ","$& [] hex ","$& [] ","str gsub ","str encoding ","str encoding == ","enc == ","(send\n  (send\n    (lvar :match) :[]\n    (int 1)\n    (int 2)) :hex) pack ","match [] hex ","match [] ","(send\n  (send\n    (send\n      (lvar :str) :dup) :force_encoding\n    (const\n      (const nil :Encoding) :ASCII_8BIT)) :gsub\n  (lvar :escaped)) force_encoding ","str dup force_encoding gsub ","str dup force_encoding ","str dup ","(send\n  (lvar :str) :gsub\n  (lvar :escaped)) force_str encoding oding ","str str encoding oding ","str str encoding oding == ","str encoding  == ","(send\n  (send\n    (send\n      (lvar :str) :dup) :force_str encoding oding\n    (const\n      (const nil :Encoding) :ASCII_8BIT)) :gsub\n  (lvar :escaped)) force_str encoding oding ","str dup force_str encoding oding gsub ","str dup force_str encoding oding "]}," ActiveSupport load_all!":{"type":"method","name":"load_all!","children":[],"call":["hook call "," load_all_hooks each "," load_all_hooks "]}," ActiveSupport XmlMini with_backend":{"type":"method","name":"with_backend","children":[],"call":[" backend= "," backend "," current_thread_backend= "," cast_backend_name_to_module "," current_thread_backend "]}," ActiveSupport XmlMini backend=":{"type":"method","name":"backend=","children":[],"call":["ActiveSupport  const_get "," require ","name to_s downcase ","name to_s ","name is_a? "," current_thread_backend= "," current_thread_backend "," cast_backend_name_to_module "]}," ActiveSupport XmlMini_REXML empty_content?":{"type":"method","name":"empty_content?","children":[],"call":["element texts join blank? ","element texts join ","element texts "]}," ActiveSupport XmlMini_REXML get_attributes":{"type":"method","name":"get_attributes","children":[],"call":["attributes []= ","element attributes each ","element attributes "]}," ActiveSupport XmlMini_REXML merge!":{"type":"method","name":"merge!","children":[],"call":["hash []= ","value instance_of? ","hash [] ","hash [] << ","hash [] instance_of? ","hash has_key? "]}," ActiveSupport XmlMini_REXML merge_texts!":{"type":"method","name":"merge_texts!","children":[],"call":[" merge! ","element texts sum ","element texts ","element has_text? ","texts << ","t value ","element texts each "," dup "," +@ ","element  dup  sum ","element  +@  sum ","element  dup  ","element  +@  "," dup  << "," +@  << ","element  dup  each ","element  +@  each "]}," ActiveSupport XmlMini_REXML collapse":{"type":"method","name":"collapse","children":[],"call":[" merge_texts! "," empty_content? "," merge_element! ","element each_element ","element has_elements? "," get_attributes ","depth - "]}," ActiveSupport XmlMini_REXML merge_element!":{"type":"method","name":"merge_element!","children":[],"call":[" merge! "," collapse ","element name "," raise ","depth == "]}," ActiveSupport XmlMini_REXML parse":{"type":"method","name":"parse","children":[],"call":[" merge_element! ","doc root ","REXML Document  new "," require "," raise ","doc to_s inspect ","doc to_s "," silence_warnings ","data ungetc ","char nil? ","data getc ","StringIO  new ","data respond_to? ! ","data respond_to? ","XmlMini  depth ","data eof? "," require_rexml ","REXML Document  new  root ","REXML Document  new  to_s inspect ","REXML Document  new  to_s ","StringIO  new  ungetc ","data getc  nil? ","StringIO  new  getc ","StringIO  new  respond_to? ! ","StringIO  new  respond_to? ","StringIO  new  eof? "]}," ActiveSupport XmlMini_NokogiriSAX parse":{"type":"method","name":"parse","children":[],"call":["document hash ","parser parse ","Nokogiri XML SAX Parser  new "," document_class new "," document_class ","string blank? ","data ungetc ","char nil? ","data getc ","StringIO  new ","data respond_to? ! ","data respond_to? ","data eof? "," document_class new  hash ","Nokogiri XML SAX Parser  new  parse ","  document_class new _class new ","  document_class new _class ","StringIO  new  ungetc ","data getc  nil? ","StringIO  new  getc ","StringIO  new  respond_to? ! ","StringIO  new  respond_to? ","StringIO  new  eof? "]}," ActiveSupport XmlMini_NokogiriSAX HashBuilder characters":{"type":"method","name":"characters","children":[],"call":[" current_hash [] << "," current_hash [] "," current_hash "]}," ActiveSupport XmlMini_NokogiriSAX HashBuilder end_element":{"type":"method","name":"end_element","children":[],"call":["@hash_stack pop "," current_hash delete "," current_hash "," current_hash [] == "," current_hash [] "," current_hash [] blank? "," current_hash length > "," current_hash length "]}," ActiveSupport XmlMini_NokogiriSAX HashBuilder start_element":{"type":"method","name":"start_element","children":[],"call":["@hash_stack push "," current_hash []= "," current_hash "," current_hash [] "," current_hash [] << ","new_hash []= ","new_hash size + ","new_hash size ","attrs shift ","attrs length > ","attrs length ","(pair\n  (const nil :CONTENT_KEY)\n  (str \"\")) merge ","Hash  [] ","(pair\n  (const nil :CONTENT_KEY)\n  (str \"\")) merge! ","(pair\n  (const nil :CONTENT_KEY)\n  (send\n    (str \"\") :dup)) merge! "," dup ","(pair\n  (const nil :CONTENT_KEY)\n  (send\n    (str \"\") :+@)) merge! "," +@ ","(pair\n  (const nil :CONTENT_KEY)\n  (str \"\")) merge  []= ","(pair\n  (const nil :CONTENT_KEY)\n  (str \"\")) merge!  []= ","(pair\n  (const nil :CONTENT_KEY)\n  (send\n    (str \"\") :dup)) merge!  []= ","(pair\n  (const nil :CONTENT_KEY)\n  (send\n    (str \"\") :+@)) merge!  []= ","(pair\n  (const nil :CONTENT_KEY)\n  (str \"\")) merge  size + ","(pair\n  (const nil :CONTENT_KEY)\n  (str \"\")) merge!  size + ","(pair\n  (const nil :CONTENT_KEY)\n  (send\n    (str \"\") :dup)) merge!  size + ","(pair\n  (const nil :CONTENT_KEY)\n  (send\n    (str \"\") :+@)) merge!  size + ","(pair\n  (const nil :CONTENT_KEY)\n  (str \"\")) merge  size ","(pair\n  (const nil :CONTENT_KEY)\n  (str \"\")) merge!  size ","(pair\n  (const nil :CONTENT_KEY)\n  (send\n    (str \"\") :dup)) merge!  size ","(pair\n  (const nil :CONTENT_KEY)\n  (send\n    (str \"\") :+@)) merge!  size "]}," ActiveSupport XmlMini_NokogiriSAX HashBuilder error":{"type":"method","name":"error","children":[],"call":[" raise "]}," ActiveSupport XmlMini_NokogiriSAX HashBuilder end_document":{"type":"method","name":"end_document","children":[],"call":[" raise ","@hash_stack size > ","@hash_stack size "]}," ActiveSupport XmlMini_NokogiriSAX HashBuilder start_document":{"type":"method","name":"start_document","children":[],"call":[]}," ActiveSupport XmlMini_NokogiriSAX HashBuilder current_hash":{"type":"method","name":"current_hash","children":[],"call":["@hash_stack last "]}," ActiveSupport XmlMini_Nokogiri Conversions Node to_hash":{"type":"method","name":"to_hash","children":[],"call":["node_hash []= ","a value ","a node_name "," attribute_nodes each "," attribute_nodes ","node_hash delete ","node_hash [] blank? ","node_hash [] ","node_hash length > ","node_hash length ","node_hash [] << ","c content ","c cdata? ","c text? ","c to_hash ","c element? "," children each "," children "," raise ","hash []= "," name ","hash [] ","hash [] << ","walker call ","callback call ","child children each ","child children ","memo []= ","memo [] << ","memo [] ","(send\n  (lvar :memo) :[]\n  (lvar :name)) flatten ","child attributes_as_hash ","child name ","(or-asgn\n  (send\n    (lvar :memo) :[]\n    (const nil :CONTENT_ROOT))\n  (str \"\")) << ","child content ","child text? ","file != ","parent [] ","child blank? "," lambda "," attributes_as_hash ","child to_hash ","(or-asgn\n  (send\n    (lvar :attributes) :[]\n    (const nil :CONTENT_ROOT))\n  (str \"\")) << ","attributes [] ","child cdata? "," [] ","(send\n  (lvar :hash) :[]\n  (send nil :name)) flatten "," dup "," +@ ","a node_child name  "," child name  ","(send\n  (lvar :memo) :[]\n  (lvar :child name )) flatten ","child  attributes_as_hash _as_hash ","child child name  ","  attributes_as_hash _as_hash ","(or-asgn\n  (send\n    (lvar : attributes_as_hash ) :[]\n    (const nil :CONTENT_ROOT))\n  (str \"\")) << "," attributes_as_hash  [] ","(send\n  (lvar :hash) :[]\n  (send nil :child name )) flatten "]}," ActiveSupport XmlMini_Nokogiri Conversions Document to_hash":{"type":"method","name":"to_hash","children":[],"call":[" root to_hash "," root "]}," ActiveSupport XmlMini_Nokogiri parse":{"type":"method","name":"parse","children":[],"call":["doc to_hash "," raise ","doc errors first ","doc errors ","doc errors length > ","doc errors length ","Nokogiri  XML ","string blank? ","cfg noblanks ","data ungetc ","char nil? ","data getc ","StringIO  new ","data respond_to? ! ","data respond_to? ","data eof? ","Nokogiri  XML  to_hash ","Nokogiri  XML  errors first ","Nokogiri  XML  errors ","Nokogiri  XML  errors length > ","Nokogiri  XML  errors length ","StringIO  new  ungetc ","data getc  nil? ","StringIO  new  getc ","StringIO  new  respond_to? ! ","StringIO  new  respond_to? ","StringIO  new  eof? "]}," ActiveSupport XmlMini_LibXMLSAX parse":{"type":"method","name":"parse","children":[],"call":["document hash ","parser parse ","parser callbacks= "," document_class new "," document_class ","LibXML XML SaxParser  string ","LibXML XML Error  set_handler ","string blank? ","LibXML XML SaxParser  io ","data ungetc ","char nil? ","data getc ","StringIO  new ","data respond_to? ! ","data respond_to? ","data eof? "," document_class new  hash ","LibXML XML SaxParser  string  parse ","LibXML XML SaxParser  io  parse ","LibXML XML SaxParser  string  callbacks= ","LibXML XML SaxParser  io  callbacks= ","  document_class new _class new ","  document_class new _class ","StringIO  new  ungetc ","data getc  nil? ","StringIO  new  getc ","StringIO  new  respond_to? ! ","StringIO  new  respond_to? ","StringIO  new  eof? "]}," ActiveSupport XmlMini_LibXMLSAX HashBuilder on_characters":{"type":"method","name":"on_characters","children":[],"call":[" current_hash [] << "," current_hash [] "," current_hash "]}," ActiveSupport XmlMini_LibXMLSAX HashBuilder on_end_element":{"type":"method","name":"on_end_element","children":[],"call":["@hash_stack pop "," current_hash delete "," current_hash "," current_hash [] == "," current_hash [] "," current_hash [] blank? "," current_hash length > "," current_hash length "]}," ActiveSupport XmlMini_LibXMLSAX HashBuilder on_start_element":{"type":"method","name":"on_start_element","children":[],"call":["@hash_stack push "," current_hash []= "," current_hash "," current_hash [] "," current_hash [] << ","new_hash []= ","new_hash size + ","new_hash size ","(pair\n  (const nil :CONTENT_KEY)\n  (str \"\")) merge ","(pair\n  (const nil :CONTENT_KEY)\n  (str \"\")) merge! ","(pair\n  (const nil :CONTENT_KEY)\n  (send\n    (str \"\") :dup)) merge! "," dup ","(pair\n  (const nil :CONTENT_KEY)\n  (send\n    (str \"\") :+@)) merge! "," +@ ","(pair\n  (const nil :CONTENT_KEY)\n  (str \"\")) merge  []= ","(pair\n  (const nil :CONTENT_KEY)\n  (str \"\")) merge!  []= ","(pair\n  (const nil :CONTENT_KEY)\n  (send\n    (str \"\") :dup)) merge!  []= ","(pair\n  (const nil :CONTENT_KEY)\n  (send\n    (str \"\") :+@)) merge!  []= ","(pair\n  (const nil :CONTENT_KEY)\n  (str \"\")) merge  size + ","(pair\n  (const nil :CONTENT_KEY)\n  (str \"\")) merge!  size + ","(pair\n  (const nil :CONTENT_KEY)\n  (send\n    (str \"\") :dup)) merge!  size + ","(pair\n  (const nil :CONTENT_KEY)\n  (send\n    (str \"\") :+@)) merge!  size + ","(pair\n  (const nil :CONTENT_KEY)\n  (str \"\")) merge  size ","(pair\n  (const nil :CONTENT_KEY)\n  (str \"\")) merge!  size ","(pair\n  (const nil :CONTENT_KEY)\n  (send\n    (str \"\") :dup)) merge!  size ","(pair\n  (const nil :CONTENT_KEY)\n  (send\n    (str \"\") :+@)) merge!  size "]}," ActiveSupport XmlMini_LibXMLSAX HashBuilder on_end_document":{"type":"method","name":"on_end_document","children":[],"call":["@hash delete ","@hash_stack pop ","@hash_stack pop  delete ","@hash_stack pop _stack pop "]}," ActiveSupport XmlMini_LibXMLSAX HashBuilder on_start_document":{"type":"method","name":"on_start_document","children":[],"call":[" dup "," +@ "]}," ActiveSupport XmlMini_LibXMLSAX HashBuilder current_hash":{"type":"method","name":"current_hash","children":[],"call":["@hash_stack last "]}," LibXML Conversions Node to_hash":{"type":"method","name":"to_hash","children":[],"call":["node_hash []= ","a value ","a name "," each_attr ","node_hash delete ","node_hash [] blank? ","node_hash [] ","node_hash length > ","node_hash length ","node_hash [] << ","c content ","c cdata? ","c text? ","c to_hash ","c element? "," each_child "," raise ","hash []= "," name ","hash [] ","hash [] << "," children_to_hash "," children_yaml_to_hash "," yaml? "," children_array_to_hash "," array? "," attributes_to_hash "," insert_name_into_hash "," content "," content length >= "," content length "," text? ","hash [] to_s + ","hash [] to_s ","hash [] to_s length + >= ","hash [] to_s length + ","hash [] to_s length "," cdata? "," dup "," +@ "]}," LibXML Conversions Document to_hash":{"type":"method","name":"to_hash","children":[],"call":[" root to_hash "," root "]}," ActiveSupport XmlMini_LibXML parse":{"type":"method","name":"parse","children":[],"call":["LibXML XML Parser  string parse to_hash ","LibXML XML Parser  string parse ","LibXML XML Parser  string ","string strip ","string blank? ","LibXML XML  default_keep_blanks= ","LibXML XML Parser  io parse to_hash ","LibXML XML Parser  io parse ","LibXML XML Parser  io ","data ungetc ","char nil? ","data getc ","StringIO  new ","data respond_to? ! ","data respond_to? ","data eof? ","StringIO  new  ungetc ","data getc  nil? ","StringIO  new  getc ","StringIO  new  respond_to? ! ","StringIO  new  respond_to? ","StringIO  new  eof? "]}," ActiveSupport XmlMini_JDOM empty_content?":{"type":"method","name":"empty_content?","children":[],"call":["text strip length == ","text strip length ","text strip ","text << ","item get_data strip ","item get_data ","item node_type == ","Node  TEXT_NODE ","item node_type ","child_nodes item ","child_nodes length ","element child_nodes ","(erange\n  (int 0)\n  (send\n    (lvar :child_nodes) :length)) each "," dup "," +@ "," dup  strip length == "," +@  strip length == "," dup  strip length "," +@  strip length "," dup  strip "," +@  strip "," dup  << "," +@  << ","child_nodes item  get_data strip ","child_nodes item  get_data ","child_nodes item  node_type == ","child_nodes item  node_type ","child_nodes child_nodes item  ","element child_nodes  item ","element child_nodes  length ","element element child_nodes  ","(erange\n  (int 0)\n  (send\n    (lvar :element child_nodes ) :length)) each "]}," ActiveSupport XmlMini_JDOM texts":{"type":"method","name":"texts","children":[],"call":["texts << ","item get_data ","item node_type == ","Node  TEXT_NODE ","item node_type ","child_nodes item ","child_nodes length ","element child_nodes ","(erange\n  (int 0)\n  (send\n    (lvar :child_nodes) :length)) each ","child_nodes item  get_data ","child_nodes item  node_type == ","child_nodes item  node_type ","child_nodes child_nodes item  ","element child_nodes  item ","element child_nodes  length ","element element child_nodes  ","(erange\n  (int 0)\n  (send\n    (lvar :element child_nodes ) :length)) each "]}," ActiveSupport XmlMini_JDOM get_attributes":{"type":"method","name":"get_attributes","children":[],"call":["attribute_hash []= ","attributes item value ","attributes item ","attributes item name ","attributes length ","element attributes ","attribute_hash [] ","(erange\n  (int 0)\n  (send\n    (lvar :attributes) :length)) each ","element attributes  item value ","element attributes  item ","element attributes  item name ","element attributes  length ","element element attributes  ","(erange\n  (int 0)\n  (send\n    (lvar :element attributes ) :length)) each "]}," ActiveSupport XmlMini_JDOM merge!":{"type":"method","name":"merge!","children":[],"call":["hash []= ","value instance_of? ","hash [] ","hash [] << ","hash [] instance_of? ","hash has_key? "]}," ActiveSupport XmlMini_JDOM merge_texts!":{"type":"method","name":"merge_texts!","children":[],"call":[" merge! ","text_children join ","text_children join empty? "," texts "," delete_empty "," texts  join "," texts  join empty? "]}," ActiveSupport XmlMini_JDOM collapse":{"type":"method","name":"collapse","children":[],"call":[" merge_texts! "," empty_content? "," merge_element! ","child node_type == ","Node  TEXT_NODE ","child node_type ","child_nodes item ","child_nodes length ","child_nodes length > ","element child_nodes "," get_attributes ","depth - ","(erange\n  (int 0)\n  (send\n    (lvar :child_nodes) :length)) each ","child_nodes item  node_type == ","child_nodes item  node_type ","child_nodes item _nodes item ","element child_nodes  item ","child_nodes item _nodes length ","element child_nodes  length ","child_nodes item _nodes length > ","element child_nodes  length > ","element child_nodes item _nodes ","element element child_nodes  ","(erange\n  (int 0)\n  (send\n    (lvar :child_nodes item _nodes) :length)) each ","(erange\n  (int 0)\n  (send\n    (lvar :element child_nodes ) :length)) each "]}," ActiveSupport XmlMini_JDOM merge_element!":{"type":"method","name":"merge_element!","children":[],"call":[" merge! "," collapse ","element tag_name "," delete_empty "," raise ","depth == "]}," ActiveSupport XmlMini_JDOM parse":{"type":"method","name":"parse","children":[],"call":[" merge_element! ","doc document_element ","@dbf new_document_builder parse ","@dbf new_document_builder ","InputSource  new ","StringReader  new ","DocumentBuilderFactory  new_instance ","string blank? ","data blank? ","data read ","data respond_to? ","@dbf setFeature "," javax xml XMLConstants "," javax xml "," javax ","XmlMini  depth ","@dbf new_document_builder parse  @dbf new_document_builder parse ument_element ","@dbf new_@dbf new_document_builder parse ument_builder parse ","DocumentBuilderFactory  new_instance  new_document_builder parse ","@dbf new_@dbf new_document_builder parse ument_builder ","DocumentBuilderFactory  new_instance  new_document_builder ","data read  blank? ","data read  read ","data read  respond_to? ","DocumentBuilderFactory  new_instance  setFeature "]}," Continuum Entry inspect":{"type":"method","name":"inspect","children":[],"call":[" server port "," server "," server host "," value "]}," Continuum Entry initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Continuum binary_search":{"type":"method","name":"binary_search","children":[],"call":[]}," MemCache BufferedIO gets":{"type":"method","name":"gets","children":[],"call":[" readuntil "]}," MemCache BufferedIO setsockopt":{"type":"method","name":"setsockopt","children":[],"call":["@io setsockopt "]}," MemCache BufferedIO rbuf_fill":{"type":"method","name":"rbuf_fill","children":[],"call":[" raise ","IO  select ","@rbuf << ","@io read_nonblock "]}," MemCache Server connect_to":{"type":"method","name":"connect_to","children":[],"call":["io read_timeout= ","MemCache BufferedIO  new ","TCPSocket  new ","MemCache BufferedIO  new  read_timeout= "]}," MemCache check_multithread_status!":{"type":"method","name":"check_multithread_status!","children":[],"call":[" raise ","Thread  current [] != "," object_id ","Thread  current [] ","Thread  current "]}," MemCache entry_count_for":{"type":"method","name":"entry_count_for","children":[],"call":["(send\n  (begin\n    (send\n      (send\n        (lvar :total_servers) :*\n        (const\n          (const nil :Continuum) :POINTS_PER_SERVER)) :*\n      (send\n        (lvar :server) :weight))) :/\n  (send nil :Float\n    (lvar :total_weight))) floor ","(send\n  (send\n    (lvar :total_servers) :*\n    (const\n      (const nil :Continuum) :POINTS_PER_SERVER)) :*\n  (send\n    (lvar :server) :weight)) / "," Float ","total_servers * * ","server weight ","total_servers * "]}," MemCache create_continuum_for":{"type":"method","name":"create_continuum_for","children":[],"call":["a value <=> ","b value ","a value ","continuum sort ","continuum << ","Continuum Entry  new "," Integer ","hash [] ","Digest SHA1  hexdigest ","server port ","server host "," entry_count_for times "," entry_count_for ","servers size ","servers each ","memo + ","srv weight ","servers inject ","a  Integer  <=> ","b  Integer  ","a  Integer  ","Digest SHA1  hexdigest  [] "]}," MemCache noreply":{"type":"method","name":"noreply","children":[],"call":[]}," MemCache with_server":{"type":"method","name":"with_server","children":[],"call":[" handle_error ","server inspect "," logger info "," logger ","@servers size > ","@servers size ","retried ! ","e message ","e class name ","e class "," logger warn "," request_setup "]}," MemCache with_socket_management":{"type":"method","name":"with_socket_management","children":[],"call":["@mutex unlock "," handle_error ","socket nil? ","err message ","err class name ","err class "," logger warn "," logger ","server mark_dead ","block call "," raise ","server status ","server socket ","@mutex lock "," check_multithread_status! ","server socket  nil? ","server server socket  "]}," MemCache gets":{"type":"method","name":"gets","children":[],"call":[" handle_error ","result []= ","Marshal  load ","result [] ","socket gets ","socket read ","1 to_i "," raise ","keyline inspect ","server close ","keyline =~ ","keyline == "," raise_on_error_response! ","server port ","server host ","keyline nil? ","socket write "," with_socket_management ","server inspect "," logger debug "," logger "," with_server ","socket gets  inspect ","socket gets  =~ ","socket gets  == ","socket gets  nil? "]}," MemCache prepend":{"type":"method","name":"prepend","children":[],"call":[" raise_on_error_response! ","socket gets ","socket write "," with_socket_management "," noreply ","value to_s size ","value to_s "," logger debug "," logger "," with_server "," raise "]}," MemCache append":{"type":"method","name":"append","children":[],"call":[" raise_on_error_response! ","socket gets ","socket write "," with_socket_management "," noreply ","value to_s size ","value to_s "," logger debug "," logger "," with_server "," raise "]}," MemCache replace":{"type":"method","name":"replace","children":[],"call":[" raise_on_error_response! ","socket gets ","socket write "," with_socket_management "," noreply ","value to_s size ","value to_s "," logger debug "," logger ","Marshal  dump "," with_server "," raise ","Marshal  dump  to_s size ","Marshal  dump  to_s "]}," MemCache cas":{"type":"method","name":"cas","children":[],"call":[" raise ","server port ","server host ","server close ","result nil? "," raise_on_error_response! ","socket gets ","socket write "," with_socket_management "," noreply ","value to_s size ","value to_s ","server inspect "," logger debug "," logger ","Marshal  dump "," with_server "," gets "," block_given? ","socket gets  nil? ","Marshal  dump  to_s size ","Marshal  dump  to_s "]}," MemCache fetch":{"type":"method","name":"fetch","children":[],"call":[" add "," block_given? ","value nil? "," get "," get  nil? "]}," I18n normalized_key_cache":{"type":"method","name":"normalized_key_cache","children":[],"call":["h []= ","Hash  new ","@normalized_key_cache [] "]}," I18n normalize_key":{"type":"method","name":"normalize_key","children":[],"call":["k to_sym ","keys map! ","keys delete ","key to_s split ","key to_s ","(send\n  (lvar :key) :map) flatten "," normalize_key ","key map "," normalized_key_cache [] [] "," normalized_key_cache [] "," normalized_key_cache ","key to_sym ","keys map ","key split - ","key split ","key include? ","key == ","key to_s split  map! ","key split -  map! ","key to_s s map! ","key to_s split  delete ","key split -  delete ","key to_s s delete ","key to_s  to_s split ","key to_s  to_s ","(send\n  (lvar :key to_s ) :map) flatten "," normalize_key to_s  ","key to_s  map "," normalized_key to_s _cache [] [] "," normalized_key to_s _cache [] "," normalized_key to_s _cache ","key to_s  to_sym ","key to_s split  map ","key split -  map ","key to_s s map ","key to_s  split - ","key to_s  split ","key to_s  include? ","key to_s  == "]}," I18n handle_exception":{"type":"method","name":"handle_exception","children":[],"call":[" config exception_handler call "," config exception_handler "," config "," send ","@@exception_handler call "]}," I18n normalize_keys":{"type":"method","name":"normalize_keys","children":[],"call":["keys concat "," normalize_key ","I18n  default_separator "," normalize_key + + "," normalize_key + "]}," I18n with_locale":{"type":"method","name":"with_locale","children":[],"call":[" locale= "," locale "]}," I18n transliterate":{"type":"method","name":"transliterate","children":[],"call":[" handle_exception "," raise "," config backend transliterate "," config backend "," config ","options delete "," config locale ","args shift ","args pop ","args last is_a? ","args last ","args pop  delete "]}," I18n translate!":{"type":"method","name":"translate!","children":[],"call":[" translate ","options merge "]}," I18n config=":{"type":"method","name":"config=","children":[],"call":["Thread  current []= ","Thread  current "]}," I18n config":{"type":"method","name":"config","children":[],"call":["I18n Config  new ","Thread  current [] ","Thread  current "]}," I18n Locale Tag tag":{"type":"method","name":"tag","children":[],"call":[" implementation tag "," implementation "]}," I18n Locale Tag implementation=":{"type":"method","name":"implementation=","children":[],"call":[]}," I18n Locale Tag implementation":{"type":"method","name":"implementation","children":[],"call":[]}," I18n Locale Tag Simple to_a":{"type":"method","name":"to_a","children":[],"call":[" subtags "]}," I18n Locale Tag Simple to_s":{"type":"method","name":"to_s","children":[],"call":[" tag to_s "," tag "]}," I18n Locale Tag Simple to_sym":{"type":"method","name":"to_sym","children":[],"call":[" tag "]}," I18n Locale Tag Simple subtags":{"type":"method","name":"subtags","children":[],"call":["subtag to_s "," tag to_s split map "," tag to_s split "," tag to_s "," tag "]}," I18n Locale Tag Simple initialize":{"type":"method","name":"initialize","children":[],"call":["tag join to_sym ","tag join "]}," I18n Locale Tag Simple tag":{"type":"method","name":"tag","children":[],"call":[" new "]}," I18n Locale Tag Rfc4646 Parser match":{"type":"method","name":"match","children":[],"call":["c [] << << ","c [] ","c [] << ","c [] nil? ","PATTERN  match captures ","PATTERN  match ","tag to_s ","PATTERN  match captures  [] << << ","PATTERN  match captures  [] ","PATTERN  match captures  [] << ","PATTERN  match captures  [] nil? ","PATTERN  matPATTERN  match captures h PATTERN  match captures aptures ","PATTERN  matPATTERN  match captures h "]}," I18n Locale Tag Rfc4646 to_a":{"type":"method","name":"to_a","children":[],"call":[" send "," members collect "," members "]}," I18n Locale Tag Rfc4646 to_s":{"type":"method","name":"to_s","children":[],"call":[" to_a compact join "," to_a compact "," to_a "]}," I18n Locale Tag Rfc4646 to_sym":{"type":"method","name":"to_sym","children":[],"call":[" to_s to_sym "," to_s "]}," I18n Locale Tag Rfc4646 parser=":{"type":"method","name":"parser=","children":[],"call":[]}," I18n Locale Tag Rfc4646 parser":{"type":"method","name":"parser","children":[],"call":[]}," I18n Locale Tag Rfc4646 tag":{"type":"method","name":"tag","children":[],"call":[" new "," parser match "," parser "]}," I18n Locale Tag Parents parents":{"type":"method","name":"parents","children":[],"call":["(send\n  (array\n    (send nil :parent)) :+\n  (begin\n    (if\n      (send nil :parent)\n      (send\n        (send nil :parent) :parents)\n      (array)))) compact ","(send nil :parent) + "," parent parents "," parent "]}," I18n Locale Tag Parents self_and_parents":{"type":"method","name":"self_and_parents","children":[],"call":["(self) + "," parents "]}," I18n Locale Tag Parents parent":{"type":"method","name":"parent","children":[],"call":[" class tag ","segs [] join ","segs [] ","segs length - ","segs length "," class ","segs length > "," to_a compact "," to_a "," to_a compact  [] join "," to_a compact  [] "," to_a compact  length - "," to_a compact  length "," to_a compact  length > "]}," I18n Locale Fallbacks compute":{"type":"method","name":"compute","children":[],"call":["result uniq ","result push "," defaults ","(send\n  (send nil :Array\n    (lvar :tags)) :collect) flatten "," compute ","@map [] ","tags each ","t to_sym ","I18n Locale Tag  tag self_and_parents map! ","I18n Locale Tag  tag self_and_parents ","I18n Locale Tag  tag "," Array collect "," Array ","(send\n  (send nil :Array\n    (lvar :tags)) :collect) flatten  uniq ","(send\n  (send nil :Array\n    (lvar :tags)) :collect) flatten  push "]}," I18n Locale Fallbacks map":{"type":"method","name":"map","children":[],"call":["@map [] << ","to to_sym ","@map [] ","to each "," Array ","from to_sym ","mappings each "]}," I18n Locale Fallbacks []":{"type":"method","name":"[]","children":[],"call":[" store "," compute ","locale to_sym "," raise ","InvalidLocale  new ","locale nil? ","locale to_sym  to_sym ","locale to_sym  nil? "]}," I18n Locale Fallbacks defaults=":{"type":"method","name":"defaults=","children":[],"call":["(send\n  (lvar :defaults) :map) flatten "," compute ","defaults map "]}," I18n Locale Fallbacks initialize":{"type":"method","name":"initialize","children":[],"call":[" defaults= ","I18n  default_locale to_sym ","I18n  default_locale ","mappings empty? "," map ","mappings pop ","mappings last is_a? ","mappings last "]}," I18n Gettext extract_scope":{"type":"method","name":"extract_scope","children":[],"call":["scope pop ","msgid to_s split ","msgid to_s ","msgid to_s split  pop ","scope pop  to_s split ","scope pop  to_s "]}," I18n Gettext plural_keys":{"type":"method","name":"plural_keys","children":[],"call":["@@plural_keys [] "]}," GetText PoParser _reduce_none":{"type":"method","name":"_reduce_none","children":[],"call":[]}," GetText PoParser _":{"type":"method","name":"_","children":[],"call":[]}," I18n Gettext Helpers npgettext":{"type":"method","name":"npgettext","children":[],"call":[" nsgettext ","(lvar :msgctxt) join ","msgid [] ","msgid is_a? ","(lvar :msgctxt) join  [] ","(lvar :msgctxt) join  is_a? "]}," I18n Gettext Helpers nsgettext":{"type":"method","name":"nsgettext","children":[],"call":["I18n  t ","I18n Gettext  extract_scope ","separator is_a? ","msgid [] ","msgid is_a? "]}," I18n Gettext Helpers ngettext":{"type":"method","name":"ngettext","children":[],"call":[" nsgettext "]}," I18n Gettext Helpers pgettext":{"type":"method","name":"pgettext","children":[],"call":[" sgettext ","(lvar :msgctxt) join "]}," I18n Gettext Helpers sgettext":{"type":"method","name":"sgettext","children":[],"call":["I18n  t ","I18n Gettext  extract_scope "]}," I18n Gettext Helpers gettext":{"type":"method","name":"gettext","children":[],"call":["I18n  t ","(pair\n  (sym :default)\n  (lvar :msgid)) merge "]}," KeyError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," String %":{"type":"method","name":"%","children":[],"call":["result send "," gsub "," raise ","ArgumentError  new "," =~ ","args [] "," sprintf ","args has_key? ","(or\n  (nth-ref 1)\n  (nth-ref 2)) to_sym ","match == "," dup gsub "," dup ","args kind_of? "," gsub  send ","args has_(or\n  (nth-ref 1)\n  (nth-ref 2)) to_sym ? "]}," Hash deep_merge!":{"type":"method","name":"deep_merge!","children":[],"call":[" merge! "," []= ","tv deep_merge ","v is_a? ","tv is_a? "," [] ","other_hash each_pair "," replace "," deep_merge ","block call "," key? "," block_given? ","this_value deep_merge ","other_value is_a? ","this_value is_a? ","this_val deep_merge ","other_val is_a? ","this_val is_a? "," []  deep_merge "," []  is_a? "]}," Hash deep_symbolize_keys":{"type":"method","name":"deep_symbolize_keys","children":[],"call":["result []= ","key to_sym ","value deep_symbolize_keys ","value is_a? "," inject "," deep_transform_keys ","value deep_symbolize_keys  deep_symbolize_keys ","value deep_symbolize_keys  is_a? "]}," Hash except":{"type":"method","name":"except","children":[],"call":[" slice "," keys - "," keys "," dup except! "," dup "]}," Hash slice":{"type":"method","name":"slice","children":[],"call":["h []= "," fetch ","keep_keys each ","hash []= "," [] "," has_key? ","keys each "," class new "," class "," convert_key ","keys map! "," respond_to? ","keys each_with_object ","Hash  new "," class new  []= "]}," I18n Config load_path=":{"type":"method","name":"load_path=","children":[],"call":[]}," I18n Config load_path":{"type":"method","name":"load_path","children":[],"call":[]}," I18n Config exception_handler=":{"type":"method","name":"exception_handler=","children":[],"call":[]}," I18n Config exception_handler":{"type":"method","name":"exception_handler","children":[],"call":[]}," I18n Config default_separator=":{"type":"method","name":"default_separator=","children":[],"call":[]}," I18n Config default_separator":{"type":"method","name":"default_separator","children":[],"call":[]}," I18n Config available_locales=":{"type":"method","name":"available_locales=","children":[],"call":[]}," I18n Config available_locales":{"type":"method","name":"available_locales","children":[],"call":[" backend available_locales "," backend "]}," I18n Config default_locale=":{"type":"method","name":"default_locale=","children":[],"call":["locale to_sym "]}," I18n Config default_locale":{"type":"method","name":"default_locale","children":[],"call":[]}," I18n Config backend=":{"type":"method","name":"backend=","children":[],"call":[]}," I18n Config backend":{"type":"method","name":"backend","children":[],"call":["Backend Simple  new "]}," I18n Config locale=":{"type":"method","name":"locale=","children":[],"call":["locale to_sym "]}," I18n Config locale":{"type":"method","name":"locale","children":[],"call":[" default_locale "]}," I18n Backend Transliterator HashTransliterator add":{"type":"method","name":"add","children":[],"call":[" approximations merge! "," approximations ","hash []= ","hash delete to_s ","hash delete ","key to_s ","hash keys each ","hash keys "]}," I18n Backend Transliterator HashTransliterator approximations":{"type":"method","name":"approximations","children":[],"call":[]}," I18n Backend Transliterator HashTransliterator transliterate":{"type":"method","name":"transliterate","children":[],"call":[" approximations [] "," approximations ","string gsub "]}," I18n Backend Transliterator HashTransliterator initialize":{"type":"method","name":"initialize","children":[],"call":[" add "]}," I18n Backend Transliterator ProcTransliterator transliterate":{"type":"method","name":"transliterate","children":[],"call":["@rule call "]}," I18n Backend Transliterator ProcTransliterator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," I18n Backend Transliterator get":{"type":"method","name":"get","children":[],"call":[]}," I18n Backend Transliterator transliterate":{"type":"method","name":"transliterate","children":[],"call":["@transliterators [] transliterate ","@transliterators [] ","Transliterator  get ","I18n  t "]}," I18n Backend Simple Implementation lookup":{"type":"method","name":"lookup","children":[],"call":[" resolve ","options merge ","result is_a? ","result [] ","result has_key? ","key to_sym ","keys inject "," translations ","I18n  normalize_keys ","options [] "," init_translations "," initialized? "," resolve  is_a? ","result []  is_a? "," resolve  [] ","result []  [] "," resolve  has_key? ","result []  has_key? ","result has_key to_sym ? ","key to_sym  to_sym ","key to_sym s inject ","I18n  normalize_keys  inject ","I18n  normalize_key to_sym s ","I18n  normalize_I18n  normalize_keys  "]}," I18n Backend Simple Implementation translations":{"type":"method","name":"translations","children":[],"call":[]}," I18n Backend Simple Implementation init_translations":{"type":"method","name":"init_translations","children":[],"call":[" load_translations "]}," I18n Backend Simple Implementation reload!":{"type":"method","name":"reload!","children":[],"call":[]}," I18n Backend Simple Implementation available_locales":{"type":"method","name":"available_locales","children":[],"call":["locales << ","(send\n  (send\n    (lvar :data) :keys) :-\n  (array\n    (sym :i18n))) empty? ","data keys - ","data keys "," translations inject "," translations "," init_translations "," initialized? "]}," I18n Backend Simple Implementation store_translations":{"type":"method","name":"store_translations","children":[],"call":[" translations [] deep_merge! "," translations [] "," translations ","data deep_symbolize_keys ","locale to_sym ","data deep_symbolize_keys  deep_symbolize_keys ","locale to_sym  to_sym "]}," I18n Backend Simple Implementation initialized?":{"type":"method","name":"initialized?","children":[],"call":[]}," I18n Backend Pluralization pluralizer":{"type":"method","name":"pluralizer","children":[],"call":["I18n  t "," pluralizers [] "," pluralizers "," lookup "]}," I18n Backend Pluralization pluralizers":{"type":"method","name":"pluralizers","children":[],"call":[]}," I18n Backend Pluralization pluralize":{"type":"method","name":"pluralize","children":[],"call":["entry [] "," raise ","InvalidPluralizationData  new ","entry has_key? ","pluralizer call ","count == ","pluralizer respond_to? "," pluralizer ","entry is_a? ","entry has_pluralizer call ? "," pluralizer  call "," pluralizer  respond_to? ","  pluralizer  "]}," I18n Backend Metadata with_metadata":{"type":"method","name":"with_metadata","children":[],"call":["result translation_metadata= ","result translation_metadata merge ","result translation_metadata "]}," I18n Backend Metadata pluralize":{"type":"method","name":"pluralize","children":[],"call":[" with_metadata "]}," I18n Backend Metadata interpolate":{"type":"method","name":"interpolate","children":[],"call":[" with_metadata ","entry translation_metadata merge ","entry translation_metadata "," preserve_translation_metadata "," with_entry translation_metadata merge  ","entry translation_entry translation_metadata merge  merge ","entry translation_entry translation_metadata merge  "," preserve_translation_entry translation_metadata merge  "]}," I18n Backend Metadata translate":{"type":"method","name":"translate","children":[],"call":[" with_metadata ","Base RESERVED_KEYS  include? ","options reject ","options [] "]}," I18n Backend Metadata included":{"type":"method","name":"included","children":[{"type":"method","name":"translation_metadata","children":[],"asgn":[null],"call":[]},{"type":"method","name":"translation_metadata=","children":[],"asgn":[null],"call":[]}],"call":["Object  class_eval ","Object  method_defined? "]}," I18n Backend Memoize reset_memoizations!":{"type":"method","name":"reset_memoizations!","children":[],"call":["(if\n  (lvar :locale)\n  (send\n    (send nil :memoized_lookup) :[]\n    (send\n      (lvar :locale) :to_sym))\n  (send nil :memoized_lookup)) clear "," memoized_lookup "," memoized_lookup [] ","locale to_sym "]}," I18n Backend Memoize memoized_lookup":{"type":"method","name":"memoized_lookup","children":[],"call":["h []= ","Hash  new "]}," I18n Backend Memoize lookup":{"type":"method","name":"lookup","children":[],"call":["flat_hash []= ","flat_hash [] ","flat_hash key? "," memoized_lookup [] ","locale to_sym "," memoized_lookup ","I18n Backend Flatten  normalize_flat_keys to_sym ","I18n Backend Flatten  normalize_flat_keys ","options [] "," memoized_lookup []  []= "," memoized_lookup []  [] "," memoized_lookup []  key? ","I18n Backend Flatten  normalize_I18n Backend Flatten  normalize_flat_keys to_sym s to_sym ","I18n Backend Flatten  normalize_I18n Backend Flatten  normalize_flat_keys to_sym s "]}," I18n Backend Memoize reload!":{"type":"method","name":"reload!","children":[],"call":[" reset_memoizations! "]}," I18n Backend Memoize store_translations":{"type":"method","name":"store_translations","children":[],"call":[" reset_memoizations! "]}," I18n Backend Memoize available_locales":{"type":"method","name":"available_locales","children":[],"call":[]}," I18n Backend KeyValue Implementation lookup":{"type":"method","name":"lookup","children":[],"call":["value deep_symbolize_keys ","value is_a? ","ActiveSupport JSON  decode ","@store [] "," normalize_flat_keys ","options [] ","ActiveSupport JSON  decode  deep_symbolize_keys ","@store []  deep_symbolize_keys ","value deep_symbolize_ normalize_flat_keys s ","ActiveSupport JSON  decode  is_a? ","@store []  is_a? "," normalize_flat_ normalize_flat_keys s "]}," I18n Backend KeyValue Implementation available_locales":{"type":"method","name":"available_locales","children":[],"call":["k to_sym ","locales map! ","locales compact! ","locales uniq! ","k =~ ","@store keys map ","@store keys "]}," I18n Backend KeyValue Implementation store_translations":{"type":"method","name":"store_translations","children":[],"call":["@store []= ","ActiveSupport JSON  encode ","value is_a? "," raise ","old_value deep_symbolize_keys deep_merge! ","old_value deep_symbolize_keys ","old_value is_a? ","ActiveSupport JSON  decode ","@store [] "," flatten_translations each "," flatten_translations ","options fetch ","old_value deep_symbolize_keys deep_merge!  is_a? ","old_old_value deep_symbolize_keys deep_merge!  deep_symbolize_keys deep_merge! ","ActiveSupport JSON  decode  deep_symbolize_keys deep_merge! ","@store []  deep_symbolize_keys deep_merge! ","old_old_value deep_symbolize_keys deep_merge!  deep_symbolize_keys ","ActiveSupport JSON  decode  deep_symbolize_keys ","@store []  deep_symbolize_keys ","old_old_value deep_symbolize_keys deep_merge!  is_a? ","ActiveSupport JSON  decode  is_a? ","@store []  is_a? "]}," I18n Backend KeyValue Implementation initialize":{"type":"method","name":"initialize","children":[],"call":[]}," I18n Backend InterpolationCompiler compile_all_strings_in":{"type":"method","name":"compile_all_strings_in","children":[],"call":[" compile_all_strings_in ","value kind_of? ","Compiler  compile_if_an_interpolation ","data each_value "]}," I18n Backend InterpolationCompiler store_translations":{"type":"method","name":"store_translations","children":[],"call":[" compile_all_strings_in "]}," I18n Backend InterpolationCompiler interpolate":{"type":"method","name":"interpolate","children":[],"call":["string i18n_interpolate ","string respond_to? "]}," I18n Backend InterpolationCompiler Compiler escape_key_sym":{"type":"method","name":"escape_key_sym","children":[],"call":["key to_sym inspect ","key to_sym "]}," I18n Backend InterpolationCompiler Compiler escape_plain_str":{"type":"method","name":"escape_plain_str","children":[],"call":["str gsub "]}," I18n Backend InterpolationCompiler Compiler reserved_key":{"type":"method","name":"reserved_key","children":[],"call":[]}," I18n Backend InterpolationCompiler Compiler missing_key":{"type":"method","name":"missing_key","children":[],"call":[]}," I18n Backend InterpolationCompiler Compiler nil_key":{"type":"method","name":"nil_key","children":[],"call":[]}," I18n Backend InterpolationCompiler Compiler direct_key":{"type":"method","name":"direct_key","children":[],"call":[]}," I18n Backend InterpolationCompiler Compiler interpolate_key":{"type":"method","name":"interpolate_key","children":[],"call":["(send nil :direct_key\n  (lvar :key)) join "," missing_key "," nil_key "," direct_key "]}," I18n Backend InterpolationCompiler Compiler interpolate_or_raise_missing":{"type":"method","name":"interpolate_or_raise_missing","children":[],"call":[" interpolate_key "," reserved_key ","Base RESERVED_KEYS  include? "," escape_key_sym "]}," I18n Backend InterpolationCompiler Compiler compile_interpolation_token":{"type":"method","name":"compile_interpolation_token","children":[],"call":[" interpolate_or_raise_missing "]}," I18n Backend InterpolationCompiler Compiler handle_interpolation_token":{"type":"method","name":"handle_interpolation_token","children":[],"call":[" compile_interpolation_token ","key to_sym ","matchdata values_at "]}," I18n Backend InterpolationCompiler Compiler compiled_interpolation_body":{"type":"method","name":"compiled_interpolation_body","children":[],"call":["(send\n  (send nil :tokenize\n    (lvar :str)) :map) join "," escape_plain_str "," handle_interpolation_token ","token match "," tokenize map "," tokenize "]}," I18n Backend InterpolationCompiler Compiler tokenize":{"type":"method","name":"tokenize","children":[],"call":["str split "]}," I18n Backend InterpolationCompiler Compiler interpolated_str?":{"type":"method","name":"interpolated_str?","children":[],"call":["str =~ ","str kind_of? "]}," I18n Backend InterpolationCompiler Compiler compile_if_an_interpolation":{"type":"method","name":"compile_if_an_interpolation","children":[],"call":["string instance_eval "," compiled_interpolation_body "," interpolated_str? "]}," I18n Backend Gettext normalize_pluralization":{"type":"method","name":"normalize_pluralization","children":[],"call":["result []= ","keys [] ","values each_with_index "," raise ","keys inspect ","values size ","values size != ","keys size ","value split ","I18n Gettext  plural_keys ","key gsub split first ","key gsub split ","key gsub ","I18n Gettext  plural_keys  [] ","key gsub split first s [] ","value split  each_with_index ","I18n Gettext  plural_keys  inspect ","key gsub split first s inspect ","value split  size ","value split  size != ","I18n Gettext  plural_keys  size ","key gsub split first s size ","I18n Gettext  plural_I18n Gettext  plural_keys  ","I18n Gettext  plural_key gsub split first s ","key gsub split first  gsub split first ","key gsub split first  gsub split ","key gsub split first  gsub "]}," I18n Backend Gettext normalize":{"type":"method","name":"normalize","children":[],"call":["result merge! ","v1 merge ","Hash  === "," proc ","normalized empty? ","parts inject ","key split reverse ","key split "," normalize_pluralization ","key index ","key empty? ","key nil? ","data inject ","key split reverse  inject "]}," I18n Backend Gettext parse":{"type":"method","name":"parse","children":[],"call":["GetText PoParser  new parse ","PoData  new "," File  read ","GetText PoParser  new "]}," I18n Backend Gettext load_po":{"type":"method","name":"load_po","children":[],"call":[" normalize "," parse "," File  basename to_sym "," File  basename "]}," I18n Backend Gettext PoData set_comment":{"type":"method","name":"set_comment","children":[],"call":[]}," I18n Backend Flatten escape_default_separator":{"type":"method","name":"escape_default_separator","children":[],"call":["I18n Backend Flatten  escape_default_separator "]}," I18n Backend Flatten find_link":{"type":"method","name":"find_link","children":[],"call":["key [] == ","key [] ","from length "," links [] each "," links [] "," links "]}," I18n Backend Flatten resolve_link":{"type":"method","name":"resolve_link","children":[],"call":[" store_link ","key gsub "," find_link ","links [] ","links key? "," links [] "," links ","locale to_sym ","key to_s "," store_ find_link  "," find_ find_link  "," find_link s [] "," links []  [] "," find_link s key? "," links []  key? ","  find_link s [] ","  links []  [] ","  find_link s ","  links []  "]}," I18n Backend Flatten store_link":{"type":"method","name":"store_link","children":[],"call":[" links [] []= ","link to_s ","key to_s "," links [] ","locale to_sym "," links "]}," I18n Backend Flatten flatten_translations":{"type":"method","name":"flatten_translations","children":[],"call":["hash []= "," store_link ","value is_a? "," flatten_keys "]}," I18n Backend Flatten flatten_keys":{"type":"method","name":"flatten_keys","children":[],"call":[" flatten_keys ","value is_a? ","(lvar :prev_key) compact join to_sym ","(lvar :prev_key) compact join ","(lvar :prev_key) compact "," escape_default_separator ","hash each_pair "," flatten_ escape_default_separator s ","(lvar :prev_ escape_default_separator ) compact join to_sym ","(lvar :prev_ escape_default_separator ) compact join ","(lvar :prev_ escape_default_separator ) compact "]}," I18n Backend Flatten links":{"type":"method","name":"links","children":[],"call":["h []= ","Hash  new "]}," I18n Backend Flatten normalize_flat_keys":{"type":"method","name":"normalize_flat_keys","children":[],"call":[" resolve_link ","I18n Backend Flatten  normalize_flat_keys ","I18n Backend Flatten  normalize_flat_I18n Backend Flatten  normalize_flat_keys s "]}," I18n Backend Fallbacks find_first_string_default":{"type":"method","name":"find_first_string_default","children":[],"call":["String  === ","defaults [] ","defaults each_index "]}," I18n Backend Fallbacks extract_string_default!":{"type":"method","name":"extract_string_default!","children":[],"call":["defaults [] ","options []= "," find_first_string_default "," Array ","options [] "," Array  [] "]}," I18n Backend Fallbacks translate":{"type":"method","name":"translate","children":[],"call":[" raise ","I18n MissingTranslationData  new ","options merge ","result nil? ","I18n  fallbacks [] each ","I18n  fallbacks [] ","I18n  fallbacks "," extract_string_default! ","options [] "," extract_string_ extract_string_default! ! "]}," I18n fallbacks=":{"type":"method","name":"fallbacks=","children":[],"call":[]}," I18n fallbacks":{"type":"method","name":"fallbacks","children":[],"call":["I18n Locale Fallbacks  new "]}," I18n Backend Cldr raise_unspecified_currency!":{"type":"method","name":"raise_unspecified_currency!","children":[],"call":[" raise ","ArgumentError  new "]}," I18n Backend Cldr raise_unspecified_format_type!":{"type":"method","name":"raise_unspecified_format_type!","children":[],"call":[" raise ","ArgumentError  new "]}," I18n Backend Cldr lookup_currency":{"type":"method","name":"lookup_currency","children":[],"call":["I18n  t "]}," I18n Backend Cldr lookup_format_data":{"type":"method","name":"lookup_format_data","children":[],"call":["I18n  t "]}," I18n Backend Cldr lookup_format":{"type":"method","name":"lookup_format","children":[],"call":["I18n  t "]}," I18n Backend Cldr formatter":{"type":"method","name":"formatter","children":[],"call":[" Cldr Format  const_get new "," Cldr Format  const_get ","type to_s camelize ","type to_s "," lookup_format_data "," lookup_format ","(or-asgn\n  (ivasgn :@formatters)\n  (hash)) [] "," lookup_format_ lookup_format_data  "," lookup_ lookup_format _data "," lookup_ lookup_format  ","(or-asgn\n  (ivasgn :@ lookup_format ters)\n  (hash)) [] "]}," I18n Backend Cldr detect_type":{"type":"method","name":"detect_type","children":[],"call":[" raise_unspecified_format_type! ","object class name downcase to_sym ","object class name downcase ","object class name ","object class ","options has_key? "]}," I18n Backend Cldr format_datetime":{"type":"method","name":"format_datetime","children":[],"call":["I18n  t ","I18n  l ","options [] "]}," I18n Backend Cldr format_time":{"type":"method","name":"format_time","children":[],"call":[" formatter apply "," formatter "]}," I18n Backend Cldr format_date":{"type":"method","name":"format_date","children":[],"call":[" formatter apply "," formatter "]}," I18n Backend Cldr format_percent":{"type":"method","name":"format_percent","children":[],"call":[" formatter apply "," formatter "]}," I18n Backend Cldr format_currency":{"type":"method","name":"format_currency","children":[],"call":[" formatter apply "," formatter ","options merge! "," lookup_currency ","options [] ","options [] is_a? "]}," I18n Backend Cldr format_integer":{"type":"method","name":"format_integer","children":[],"call":[" format_object ","options merge "," number "]}," I18n Backend Cldr format_decimal":{"type":"method","name":"format_decimal","children":[],"call":[" formatter apply "," formatter "]}," I18n Backend Cldr localize":{"type":"method","name":"localize","children":[],"call":[" send ","options [] "," detect_type "]}," I18n Backend Chain namespace_lookup?":{"type":"method","name":"namespace_lookup?","children":[],"call":["options has_key? ! ","options has_key? ","result is_a? "]}," I18n Backend Chain localize":{"type":"method","name":"localize","children":[],"call":[" raise ","I18n MissingTranslationData  new ","backend localize "," backends each "," backends "]}," I18n Backend Chain translate":{"type":"method","name":"translate","children":[],"call":[" raise ","I18n MissingTranslationData  new ","namespace empty? ","translation nil? ! ","translation nil? ","namespace update "," namespace_lookup? ","backend translate ","options update ","backend == "," backends last "," backends "," backends each ","options delete "," translate ","key map ","key is_a? ","backend translate  nil? ! ","backend translate  nil? "]}," I18n Backend Chain available_locales":{"type":"method","name":"available_locales","children":[],"call":["(send\n  (send nil :backends) :map) flatten uniq ","(send\n  (send nil :backends) :map) flatten ","backend available_locales "," backends map "," backends "]}," I18n Backend Chain store_translations":{"type":"method","name":"store_translations","children":[],"call":[" backends first store_translations "," backends first "," backends "]}," I18n Backend Chain reload!":{"type":"method","name":"reload!","children":[],"call":["backend reload! "," backends each "," backends "]}," I18n Backend Chain initialize":{"type":"method","name":"initialize","children":[],"call":[" backends= "]}," I18n Backend Cascade lookup":{"type":"method","name":"lookup","children":[],"call":["result nil? ","skip_root ! ","scope empty? ! ","scope empty? ","scope slice! ","step -@ ","scope slice! join ","offset -@ ","I18n  normalize_keys + ","I18n  normalize_keys ","keys length ","options [] [] ","options [] ","cascade [] ","cascade has_key? ","I18n  default_separator ","scope pop ","I18n  send ","cascade []  ! ","I18n  normalize_keys +  empty? ! ","I18n  normalize_keys +  empty? ","I18n  normalize_keys +  slice! ","cascade []  -@ ","I18n  normalize_keys +  slice! join ","I18n  normalize_scope slice! join s + ","I18n  normalize_scope pop s + ","I18n  normalize_I18n  normalize_keys  + ","I18n  normalize_scope slice! join s ","I18n  normalize_scope pop s ","I18n  normalize_I18n  normalize_keys  ","scope slice! join s length ","scope pop s length ","I18n  normalize_keys  length ","options []  [] ","cascade has_scope slice! join ? ","cascade has_scope pop ? ","options []  has_key? ","I18n  normalize_keys +  pop "]}," I18n Backend Cache cache_key":{"type":"method","name":"cache_key","children":[],"call":["keys compact join ","keys compact ","I18n  cache_namespace ","args inspect ","args hash ","RUBY_VERSION  >= ","args args inspect  ","args args hash  "]}," I18n Backend Cache fetch":{"type":"method","name":"fetch","children":[],"call":[" raise ","I18n  cache_store write "," cache_key ","I18n  cache_store ","result dup ","result frozen? ","result is_a? ","I18n  cache_store fetch ","result dup  dup ","I18n  cache_store fetch  dup ","result dup  frozen? ","I18n  cache_store fetch  frozen? ","result dup  is_a? ","I18n  cache_store fetch  is_a? "]}," I18n Backend Cache translate":{"type":"method","name":"translate","children":[],"call":[" fetch ","I18n  perform_caching? "]}," I18n perform_caching?":{"type":"method","name":"perform_caching?","children":[],"call":[" cache_store nil? ! "," cache_store nil? "," cache_store "]}," I18n cache_namespace=":{"type":"method","name":"cache_namespace=","children":[],"call":[]}," I18n cache_namespace":{"type":"method","name":"cache_namespace","children":[],"call":[]}," I18n cache_store=":{"type":"method","name":"cache_store=","children":[],"call":[]}," I18n cache_store":{"type":"method","name":"cache_store","children":[],"call":[]}," I18n Backend Base warn_syntax_deprecation!":{"type":"method","name":"warn_syntax_deprecation!","children":[],"call":[" warn "," caller join "," caller "]}," I18n Backend Base load_yml":{"type":"method","name":"load_yml","children":[],"call":["YAML  load ","IO  read "]}," I18n Backend Base load_rb":{"type":"method","name":"load_rb","children":[],"call":[" eval "," binding ","IO  read "]}," I18n Backend Base load_file":{"type":"method","name":"load_file","children":[],"call":[" store_translations ","data each "," send "," raise ","UnknownFileType  new "," respond_to? ","File  extname tr downcase ","File  extname tr ","File  extname "," merge_translations "," send  each "]}," I18n Backend Base interpolate_lambda?":{"type":"method","name":"interpolate_lambda?","children":[],"call":["string =~ ","object respond_to? "]}," I18n Backend Base preserve_encoding":{"type":"method","name":"preserve_encoding","children":[],"call":["result force_encoding ","result respond_to? ","string encoding ","string respond_to? ","result force_string encoding  ","string string encoding  "]}," I18n Backend Base interpolate":{"type":"method","name":"interpolate","children":[],"call":[" raise ","MissingInterpolationArgument  new ","ReservedInterpolationKey  new ","1 to_sym ","string =~ ","string % ","values delete ","values []= ","value to_s ","value is_a? ","value call "," interpolate_lambda? ","keys include? ","key to_s ","values each ","keys empty? ","string scan flatten ","string scan "," warn_syntax_deprecation! ","2 to_sym ","string gsub "," preserve_encoding ","values dup ","values empty? ! ","values empty? ","string is_a? ","s % ","RESERVED_KEYS  include? ","value to_s s delete ","value call s delete ","value to_s s []= ","value call s []= ","value to_s  to_s ","value call  to_s ","value to_s  is_a? ","value call  is_a? ","value to_s  call ","value call  call ","string scan flatten  include? ","value to_s s each ","value call s each ","string scan flatten  empty? ","value to_s s dup ","value call s dup ","value to_s s empty? ! ","value call s empty? ! ","value to_s s empty? ","value call s empty? "]}," I18n Backend Base pluralize":{"type":"method","name":"pluralize","children":[],"call":["entry [] "," raise ","InvalidPluralizationData  new ","entry has_key? ","count == ","entry is_a? "]}," I18n Backend Base resolve":{"type":"method","name":"resolve","children":[],"call":[" resolve ","subject call ","options delete ","I18n  translate ","(or\n  (lvar :options)\n  (hash)) merge ","options [] == ","options [] "]}," I18n Backend Base default":{"type":"method","name":"default","children":[],"call":[" resolve ","subject each ","key == ","options dup reject ","options dup "]}," I18n Backend Base lookup":{"type":"method","name":"lookup","children":[],"call":[" raise ","result dup ","String  === "," resolve ","result is_a? ","result [] ","result has_key? ","key to_sym ","keys inject "," translations ","I18n  normalize_keys ","options [] "," init_translations "," initialized? ","I18n  send "," resolve  dup ","result []  dup "," resolve  is_a? ","result []  is_a? "," resolve  [] ","result []  [] "," resolve  has_key? ","result []  has_key? ","result has_key to_sym ? ","key to_sym  to_sym ","key to_sym s inject ","I18n  normalize_keys  inject ","I18n  send  inject ","I18n  normalize_key to_sym s ","I18n  normalize_I18n  normalize_keys  ","I18n  normalize_I18n  send  "]}," I18n Backend Base reload!":{"type":"method","name":"reload!","children":[],"call":[]}," I18n Backend Base available_locales":{"type":"method","name":"available_locales","children":[],"call":[" raise ","locales << ","(send\n  (send\n    (lvar :data) :keys) :-\n  (array\n    (sym :i18n))) empty? ","data keys - ","data keys "," translations inject "," translations "," init_translations "," initialized? "]}," I18n Backend Base localize":{"type":"method","name":"localize","children":[],"call":["object strftime ","I18n  t ","object hour < ","object hour ","object respond_to? ","I18n  t [] ","object mon ","object wday ","format to_s gsub ","format to_s ","options merge ","Symbol  === "," raise ","object inspect "," resolve ","MissingTranslationData  new ","format nil? "," lookup ","I18n  t  to_s gsub "," resolve  to_s gsub "," lookup  to_s gsub ","I18n  t  to_s "," resolve  to_s "," lookup  to_s ","I18n  t  nil? "," resolve  nil? "," lookup  nil? "]}," I18n Backend Base translate":{"type":"method","name":"translate","children":[],"call":[" interpolate "," pluralize ","entry dup ","entry is_a? "," raise ","I18n MissingTranslationData  new ","entry nil? "," resolve "," default ","options except ","options values_at ","options empty? "," lookup ","options [] "," translate ","key map ","key is_a? ","InvalidLocale  new ","RESERVED_KEYS  include? ","options reject "," interpolate  dup "," pluralize  dup ","entry dup  dup "," resolve  dup "," default  dup "," lookup  dup "," interpolate  is_a? "," pluralize  is_a? ","entry dup  is_a? "," resolve  is_a? "," default  is_a? "," lookup  is_a? "," interpolate  nil? "," pluralize  nil? ","entry dup  nil? "," resolve  nil? "," default  nil? "," lookup  nil? ","options options except _at "]}," I18n Backend Base store_translations":{"type":"method","name":"store_translations","children":[],"call":[" raise "," merge_translations "]}," I18n Backend Base load_translations":{"type":"method","name":"load_translations","children":[],"call":[" load_file ","filenames each ","I18n  load_path flatten ","I18n  load_path ","filenames empty? ","I18n  load_path flatten  each ","I18n  load_path flatten  empty? "]}," I18n Backend ActiveRecord Implementation expand_keys":{"type":"method","name":"expand_keys","children":[],"call":["keys << ","(send\n  (lvar :keys) :last) compact join ","(send\n  (lvar :keys) :last) compact ","keys last ","key to_s split inject ","key to_s split ","key to_s "]}," I18n Backend ActiveRecord Implementation lookup":{"type":"method","name":"lookup","children":[],"call":["result deep_symbolize_keys ","hash []= ","r value ","r key slice ","r key ","result inject ","key size + ","FLATTEN_SEPARATOR  size ","key size ","result first value ","result first ","result first key == ","result first key ","result empty? ","Translation  locale lookup all ","Translation  locale lookup ","Translation  locale "," normalize_flat_keys ","options [] ","Translation  locale lookup all  deep_symbolize_keys ","result deep_symbolize_ normalize_flat_keys s ","r  normalize_flat_keys  slice ","r  normalize_flat_keys  ","Translation  locale lookup all  inject "," normalize_flat_keys  size + "," normalize_flat_keys  size ","Translation  locale lookup all  first value ","Translation  locale lookup all  first ","Translation  locale lookup all  first key == ","result first  normalize_flat_keys  == ","Translation  locale lookup all  first key ","result first  normalize_flat_keys  ","Translation  locale lookup all  empty? "," normalize_flat_ normalize_flat_keys s "]}," I18n Backend ActiveRecord Implementation store_translations":{"type":"method","name":"store_translations","children":[],"call":["Translation  create ","key to_s ","locale to_s ","Translation  locale lookup delete_all ","Translation  locale lookup "," expand_keys ","Translation  locale "," flatten_translations each "," flatten_translations ","options fetch "]}," I18n Backend ActiveRecord Implementation available_locales":{"type":"method","name":"available_locales","children":[],"call":["Translation  available_locales "]}," I18n Backend ActiveRecord Translation value":{"type":"method","name":"value","children":[],"call":["value == "," read_attribute ","Kernel  eval "," is_proc "," read_attribute  == "]}," I18n Backend ActiveRecord Translation interpolates?":{"type":"method","name":"interpolates?","children":[],"call":[" interpolations include? "," interpolations "]}," I18n Backend ActiveRecord Translation available_locales":{"type":"method","name":"available_locales","children":[],"call":[]}," I18n Backend ActiveRecord StoreProcs value=":{"type":"method","name":"value=","children":[],"call":[" write_attribute ","v to_ruby "]}," I18n Backend ActiveRecord Missing translate":{"type":"method","name":"translate","children":[],"call":[" raise "," store_default_translations "]}," I18n Backend ActiveRecord Missing store_default_translation":{"type":"method","name":"store_default_translation","children":[],"call":["translation save ","translation interpolations= ","ActiveRecord Translation  new ","locale to_s ","ActiveRecord Translation  new  save ","ActiveRecord Translation  new  interpolations= "]}," I18n Backend ActiveRecord Missing store_default_translations":{"type":"method","name":"store_default_translations","children":[],"call":[" store_default_translation ","keys each ","(lvar :key) join ","I18n  t map ","I18n  t ","(send\n  (lvar :options) :reject) keys ","Base RESERVED_KEYS  include? ","options reject ","ActiveRecord Translation  locale lookup exists? ","ActiveRecord Translation  locale lookup ","ActiveRecord Translation  locale ","keys join ","I18n  default_separator ","I18n  normalize_keys [] ","I18n  normalize_keys ","options values_at ","I18n  send [] ","I18n  send ","keys join s each ","I18n  normalize_keys []  each ","I18n  send []  each ","(lvar :keys join ) join ","(send\n  (lvar :options) :reject) keys join s ","(send\n  (lvar :options) :reject) I18n  normalize_keys []  ","(send\n  (lvar :options) :reject) I18n  send []  ","keys join s join ","I18n  normalize_keys []  join ","I18n  send []  join ","I18n  normalize_keys join s [] ","I18n  normalize_I18n  normalize_keys []  [] ","I18n  normalize_I18n  send []  [] ","I18n  normalize_keys join s ","I18n  normalize_I18n  normalize_keys []  ","I18n  normalize_I18n  send []  "]}," ActiveSupport TimeWithZone as_json":{"type":"method","name":"as_json","children":[],"call":[" formatted_offset "," time strftime "," time "," xmlschema ","ActiveSupport JSON Encoding  use_standard_json_time_format ","ActiveSupport JSON Encoding  time_precision "]}," ActiveSupport Testing SetupAndTeardown ForClassicTestUnit run":{"type":"method","name":"run","children":[],"call":[" name ","result add_run "," mocha_teardown "," add_error "," raise ","PASSTHROUGH_EXCEPTIONS  include? ","e class "," add_failure ","e backtrace ","e message "," run_callbacks "," teardown "," mocha_verify "," __send__ "," setup ","assertion_counter_klass new "," respond_to? ","@method_name to_s == ","@method_name to_s "," _run_teardown_callbacks "," _run_setup_callbacks "," retrieve_mocha_counter ","assertion_counter_klass new _klass new "," retrieve_ retrieve_mocha_counter  "]}," ActiveSupport Testing SetupAndTeardown ForMiniTest run":{"type":"method","name":"run","children":[],"call":["runner puke "," __name__ "," class "," run_callbacks "," name "," method_name "," _run_teardown_callbacks "," _run_setup_callbacks "," raise "]}," ActiveSupport Testing Deprecation collect_deprecations":{"type":"method","name":"collect_deprecations","children":[],"call":["ActiveSupport Deprecation  behavior= ","deprecations << ","Proc  new ","ActiveSupport Deprecation  behavior ","deprecator behavior= ","deprecator behavior ","ActiveSupport Deprecation  _instance ","ActiveSupport  deprecator warn ","ActiveSupport  deprecator ","ActiveSupport Deprecation  _instance  behavior= ","ActiveSupport Deprecation  _instance  behavior ","ActiveSupport  ActiveSupport Deprecation  _instance  warn ","ActiveSupport  ActiveSupport Deprecation  _instance  "]}," ActiveSupport Testing Deprecation assert_not_deprecated":{"type":"method","name":"assert_not_deprecated","children":[],"call":[" assert ","deprecations * ","deprecations size ","deprecations empty? "," collect_deprecations ","ActiveSupport Deprecation  _instance ","ActiveSupport  deprecator warn ","ActiveSupport  deprecator ","ActiveSupport  ActiveSupport Deprecation  _instance  warn ","ActiveSupport  ActiveSupport Deprecation  _instance  "]}," ActiveSupport Testing Deprecation assert_deprecated":{"type":"method","name":"assert_deprecated","children":[],"call":[" assert ","warnings join ","w =~ ","warnings any? ","Regexp  new ","Regexp  escape ","match is_a? ","warnings empty? ! ","warnings empty? "," collect_deprecations ","match match? ","ActiveSupport Deprecation  _instance ","ActiveSupport  deprecator warn ","ActiveSupport  deprecator ","Regexp  new  is_a? ","Regexp  new  Regexp  new ? ","ActiveSupport  ActiveSupport Deprecation  _instance  warn ","ActiveSupport  ActiveSupport Deprecation  _instance  "]}," ActiveSupport Testing Declarative test":{"type":"method","name":"test","children":[],"call":[" flunk "," define_method "," block_given? "," raise "," instance_method ","(str \"test_\") to_sym ","name gsub "," method_defined? "," method_ method_defined? ? "]}," ActiveSupport Testing Assertions assert_present":{"type":"method","name":"assert_present","children":[],"call":[" assert ","object inspect ","object present? ","ActiveSupport Deprecation  warn "]}," ActiveSupport Testing Assertions assert_blank":{"type":"method","name":"assert_blank","children":[],"call":[" assert ","object inspect ","object blank? ","ActiveSupport Deprecation  warn "]}," ActiveSupport Testing Assertions assert_no_difference":{"type":"method","name":"assert_no_difference","children":[],"call":[" assert_difference "]}," ActiveSupport Testing Assertions assert_difference":{"type":"method","name":"assert_difference","children":[],"call":[" assert_equal "," eval ","before [] + ","before [] ","e inspect ","exps each_with_index ","exps map ","Array  wrap ","block send ","e call ","code inspect ","expressions zip each_with_index ","expressions zip ","block binding "," lambda ","e respond_to? ","expressions map ","Array  wrap map "," Array ","exp call ","before_value + ","expressions keys map ","expressions keys ","Hash  [] "," Array map ","args [] ","expression is_a? "," assert_nothing_raised "," Array index_with "," _assert_nothing_raised_or_warn ","actual - ","block send efore [] + ","exps map  [] + ","block send efore [] ","exps map  [] ","Array  wrap  each_with_index ","Array  wrap  map ","block send lock send ","Array  wrap  zip each_with_index "," Array  zip each_with_index ","Array  wrap  zip "," Array  zip ","block send lock block send inding "," lamblock send da "," Array  map ","block send efore_value + ","exps map _value + ","Array  wrap  keys map "," Array  keys map ","Array  wrap  keys "," Array  keys ","exp call  - "]}," ActiveSupport OrderedHash sync_keys!":{"type":"method","name":"sync_keys!","children":[],"call":[" has_key? ! "," has_key? ","@keys delete_if "]}," ActiveSupport OrderedHash inspect":{"type":"method","name":"inspect","children":[],"call":[]}," ActiveSupport OrderedHash invert":{"type":"method","name":"invert","children":[],"call":["OrderedHash  [] ","key_value_pair reverse "," to_a map! "," to_a "]}," ActiveSupport OrderedHash replace":{"type":"method","name":"replace","children":[],"call":["other keys "]}," ActiveSupport OrderedHash merge":{"type":"method","name":"merge","children":[],"call":[" dup merge! "," dup "]}," ActiveSupport OrderedHash merge!":{"type":"method","name":"merge!","children":[],"call":[" []= ","other_hash each "," [] "," key? "," block_given? "]}," ActiveSupport OrderedHash shift":{"type":"method","name":"shift","children":[],"call":[" delete ","@keys first ","@@keys first eys first "]}," ActiveSupport OrderedHash clear":{"type":"method","name":"clear","children":[],"call":["@keys clear "]}," ActiveSupport OrderedHash each":{"type":"method","name":"each","children":[],"call":[" [] ","@keys each "," to_enum "," block_given? "]}," ActiveSupport OrderedHash each_value":{"type":"method","name":"each_value","children":[],"call":[" [] ","@keys each "," to_enum "," block_given? "]}," ActiveSupport OrderedHash each_key":{"type":"method","name":"each_key","children":[],"call":["@keys each "," to_enum "," block_given? "]}," ActiveSupport OrderedHash to_a":{"type":"method","name":"to_a","children":[],"call":[" [] ","@keys map "]}," ActiveSupport OrderedHash reject":{"type":"method","name":"reject","children":[],"call":[" dup reject! "," dup ","hash reject! "," dup tap "]}," ActiveSupport OrderedHash reject!":{"type":"method","name":"reject!","children":[],"call":[" sync_keys! "]}," ActiveSupport OrderedHash delete_if":{"type":"method","name":"delete_if","children":[],"call":[" sync_keys! "]}," ActiveSupport OrderedHash initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["other keys "]}," ActiveSupport OrderedHash initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport OrderedHash to_yaml":{"type":"method","name":"to_yaml","children":[],"call":["seq add "," each ","out seq "," to_yaml_style "," taguri ","YAML  quick_emit ","YAML ENGINE  syck? ! ","YAML ENGINE  syck? ","YAML  const_defined? "]}," ActiveSupport OrderedHash to_yaml_type":{"type":"method","name":"to_yaml_type","children":[],"call":[]}," ActiveSupport MessageVerifier generate_digest":{"type":"method","name":"generate_digest","children":[],"call":["OpenSSL HMAC  hexdigest ","OpenSSL Digest Digest  new "," require ","OpenSSL Digest  const_get new ","OpenSSL Digest  const_get "]}," ActiveSupport MessageVerifier secure_compare":{"type":"method","name":"secure_compare","children":[],"call":["result == ","a [] ^ ","b [] ","a [] ","a length - ","a length ","a length == ","b length ","a [] ord ^ ","b [] ord ","a [] ord ","b dup force_encoding ","b dup ","a dup force_encoding ","a dup ","res == ","byte ^ ","l shift ","b each_byte ","a unpack ","a bytesize ","a bytesize == ","b bytesize ","byte == ","resua unpack t == ","a dup force_encoding  [] ^ ","b dup force_encoding  [] ","a dup force_encoding  [] ","a dup force_encoding  length - ","a a unpack ength - ","a dup force_encoding  length ","a a unpack ength ","a dup force_encoding  length == ","a a unpack ength == ","b dup force_encoding  length ","b a unpack ength ","a dup force_encoding  [] ord ^ ","b dup force_encoding  [] ord ","a dup force_encoding  [] ord ","b dup force_encoding  dup force_encoding ","b dup force_encoding  dup ","a dup force_encoding  dup force_encoding ","a dup force_encoding  dup ","b dup force_encoding yte ^ ","a unpack  shift ","b dup force_encoding  each_b dup force_encoding yte ","b ea dup force_encoding ch_byte ","a dup force_encoding  unpa dup force_encoding ck ","a b dup force_encoding ytesize ","a dup force_encoding  bytesize ","a b dup force_encoding ytesize == ","a dup force_encoding  bytesize == ","b dup force_encoding  b dup force_encoding ytesize ","b dup force_encoding yte == "]}," ActiveSupport MessageVerifier generate":{"type":"method","name":"generate","children":[],"call":[" generate_digest ","ActiveSupport Base64  encode64s ","Marshal  dump "," Base64  strict_encode64 ","@serializer dump "," encode ","Messages Metadata  wrap "," create_message ","Messages MetaActiveSupport Base64  encode64s   wrap ","Messages Meta Base64  strict_encode64   wrap ","Messages Meta encode   wrap "]}," ActiveSupport MessageVerifier verify":{"type":"method","name":"verify","children":[],"call":[" raise ","Marshal  load ","ActiveSupport Base64  decode64 "," secure_compare "," generate_digest ","digest present? ","data present? ","signed_message split ","signed_message blank? ","digest != ","@serializer load "," Base64  decode64 ","argument_error message =~ ","argument_error message "," Base64  strict_decode64 "," decode ","ActiveSupport SecurityUtils  secure_compare ","signed_message valid_encoding? ! ","signed_message valid_encoding? ","signed_message nil? "," verified "," read_message "," catch_and_raise "]}," ActiveSupport MessageVerifier initialize":{"type":"method","name":"initialize","children":[],"call":["options [] ","ActiveSupport Deprecation  warn ","options is_a? "," raise "]}," ActiveSupport MessageEncryptor verifier":{"type":"method","name":"verifier","children":[],"call":["MessageVerifier  new "]}," ActiveSupport MessageEncryptor new_cipher":{"type":"method","name":"new_cipher","children":[],"call":["OpenSSL Cipher Cipher  new ","OpenSSL Cipher  new "]}," ActiveSupport MessageEncryptor decrypt_and_verify":{"type":"method","name":"decrypt_and_verify","children":[],"call":[" decrypt "," verifier verify "," verifier "," _decrypt "," read_message "," catch_and_ignore "," catch_and_raise "]}," ActiveSupport MessageEncryptor encrypt_and_sign":{"type":"method","name":"encrypt_and_sign","children":[],"call":[" verifier generate "," encrypt "," verifier "," _encrypt "," create_message "]}," ActiveSupport MessageEncryptor decrypt":{"type":"method","name":"decrypt","children":[],"call":[" raise ","Marshal  load ","decrypted_data << ","cipher final ","cipher update ","cipher iv= ","cipher key= ","cipher decrypt ","ActiveSupport Base64  decode64 ","encrypted_message split map ","encrypted_message split "," new_cipher "," _decrypt ","ActiveSupport Deprecation  warn "," throw ","cipher auth_data= ","cipher auth_tag= "," aead_mode? ","auth_tag bytesize != ","auth_tag bytesize "," extract_parts ","cipher update  << "," new_cipher  final "," new_cipher  update "," new_cipher  iv= "," new_cipher  key= "," new_cipher  decrypt "," new_ new_cipher  "," new_cipher  auth_data= "," new_cipher  auth_tag= "]}," ActiveSupport MessageEncryptor encrypt":{"type":"method","name":"encrypt","children":[],"call":["(send\n  (array\n    (lvar :encrypted_data)\n    (lvar :iv)) :map) join ","ActiveSupport Base64  encode64s ","(lvar :encrypted_data) map ","encrypted_data << ","cipher final ","cipher update ","Marshal  dump ","cipher iv= ","cipher key= ","cipher encrypt ","cipher random_iv "," new_cipher "," _encrypt ","ActiveSupport Deprecation  warn "," join_parts ","parts << ","cipher auth_tag "," aead_mode? ","cipher auth_data= ","(send\n  (array\n    (lvar :cipher update )\n    (lvar :iv)) :map) join ","(send\n  (array\n    (lvar :encrypted_data)\n    (lvar :cipher random_iv )) :map) join ","Actcipher random_iv eSupport Base64  encode64s ","(lvar :cipher update ) map ","cipher update  << "," new_cipher  final "," new_cipher  update ","cipher cipher random_iv = "," new_cipher  iv= "," new_cipher  key= "," new_cipher  encrypt ","cipher random_cipher random_iv  "," new_cipher  random_iv "," new_ new_cipher  ","Actcipher random_iv eSupport Deprecation  warn "," new_cipher  auth_tag "," new_cipher  auth_data= "]}," ActiveSupport MessageEncryptor initialize":{"type":"method","name":"initialize","children":[],"call":["options [] ","MessageVerifier  new ","ActiveSupport Deprecation  warn ","options is_a? ","signature_key_or_options first ","signature_key_or_options extract_options! "," resolve_verifier "," aead_mode? "," class default_cipher "," class ","@aead_mode ! "," new_cipher authenticated? "," new_cipher ","signature_key_or_options extract_options!  [] ","signature_key_or_options extract_options!  is_a? ","signature_key_or_signature_key_or_options extract_options!  first ","signature_key_or_signature_key_or_options extract_options!  extract_signature_key_or_options extract_options! ! "," new_cipher authenticated?  ! "]}," ActiveSupport Memoizable InstanceMethods flush_cache":{"type":"method","name":"flush_cache","children":[],"call":[" instance_variable_get clear "," instance_variable_get "," instance_variable_defined? ","ActiveSupport Memoizable  memoized_ivar_for ","m to_s =~ ","m to_s ","(send\n  (send\n    (send nil :methods) :+\n    (send nil :private_methods)) :+\n  (send nil :protected_methods)) each "," methods + + "," protected_methods "," methods + "," private_methods "," methods ","syms each "," methods each ","sym to_s gsub ","sym to_s ","ActiveSupport Memoizable  memoized_ActiveSupport Memoizable  memoized_ivar_for _for "]}," ActiveSupport Memoizable InstanceMethods prime_cache":{"type":"method","name":"prime_cache","children":[],"call":[" instance_variable_set ","ActiveSupport Memoizable  memoized_ivar_for "," __send__ "," method arity == "," method arity "," method ","m to_s =~ ","m to_s "," methods each "," methods ","syms each ","ActiveSupport Memoizable  memoized_ActiveSupport Memoizable  memoized_ivar_for _for "]}," ActiveSupport Memoizable InstanceMethods unmemoize_all":{"type":"method","name":"unmemoize_all","children":[],"call":[" flush_cache "]}," ActiveSupport Memoizable InstanceMethods memoize_all":{"type":"method","name":"memoize_all","children":[],"call":[" prime_cache "]}," ActiveSupport Memoizable InstanceMethods freeze_with_memoizable":{"type":"method","name":"freeze_with_memoizable","children":[],"call":[" freeze_without_memoizable "," memoize_all "," frozen? "]}," ActiveSupport Memoizable InstanceMethods included":{"type":"method","name":"included","children":[],"call":[]}," ActiveSupport Memoizable memoized_ivar_for":{"type":"method","name":"memoized_ivar_for","children":[],"call":[]}," ActiveSupport JSON Encoding encode":{"type":"method","name":"encode","children":[],"call":["seen pop ","value to_json ","seen << "," raise ","seen include? ","options [] ","Hash  === "]}," ActiveSupport JSON Encoding escape":{"type":"method","name":"escape","children":[],"call":["s unpack pack unpack [] gsub ","s unpack pack unpack [] ","s unpack pack unpack ","s unpack pack ","s unpack ","(send\n  (lvar :string) :gsub\n  (send nil :escape_regex)) gsub ","ESCAPED_CHARS  [] ","string gsub "," escape_regex ","string dup force_encoding ","string dup ","string respond_to? ","json force_encoding ","json respond_to? ","string encode force_encoding ","string encode ","(send\n  (lvar :string dup force_encoding ) :gsub\n  (send nil :escape_regex)) gsub ","(send\n  (lvar :string encode force_encoding ) :gsub\n  (send nil :escape_regex)) gsub ","string dup force_encoding  gsub ","string encode force_encoding  gsub ","string dup force_encoding  dup force_encoding ","string encode force_encoding  dup force_encoding ","string dup force_encoding  dup ","string encode force_encoding  dup ","string dup force_encoding  respond_to? ","string encode force_encoding  respond_to? ","string dup force_encoding  encode force_encoding ","string encode force_encoding  encode force_encoding ","string dup force_encoding  encode ","string encode force_encoding  encode "]}," ActiveSupport JSON Encoding escape_html_entities_in_json=":{"type":"method","name":"escape_html_entities_in_json=","children":[],"call":[" escape_regex= "]}," TrueClass as_json":{"type":"method","name":"as_json","children":[],"call":[]}," Time as_json":{"type":"method","name":"as_json","children":[],"call":[" formatted_offset "," strftime "," xmlschema ","ActiveSupport JSON Encoding  use_standard_json_time_format ","ActiveSupport  use_standard_json_time_format ","ActiveSupport JSON Encoding  time_precision "]}," Symbol as_json":{"type":"method","name":"as_json","children":[],"call":[" to_s "]}," String as_json":{"type":"method","name":"as_json","children":[],"call":[]}," Regexp as_json":{"type":"method","name":"as_json","children":[],"call":[" to_s "]}," Object as_json":{"type":"method","name":"as_json","children":[],"call":[" instance_values "," to_hash "," respond_to? "," instance_values as_json "," to_hash as_json "]}," Integer to_json":{"type":"method","name":"to_json","children":[],"call":[" to_s "]}," Float to_json":{"type":"method","name":"to_json","children":[],"call":[" to_s "]}," Numeric as_json":{"type":"method","name":"as_json","children":[],"call":[]}," NilClass as_json":{"type":"method","name":"as_json","children":[],"call":[]}," Hash as_json":{"type":"method","name":"as_json","children":[],"call":[" slice ","Array  wrap ","options [] "," except ","hash []= ","pair last ","pair first ","pairs inject ","Hash  new ","ActiveSupport OrderedHash  new "," is_a? ","encoder as_json ","k to_s ","subset map ","ActiveSupport JSON Encoding Encoder  new ","result [] ","Hash  [] "," Array ","v as_json ","options dup ","result []= ","subset each ","Hash  new  [] ","ActiveSupport OrderedHash  new  [] ","Hash  new  []= ","ActiveSupport OrderedHash  new  []= "]}," FalseClass as_json":{"type":"method","name":"as_json","children":[],"call":[]}," Array as_json":{"type":"method","name":"as_json","children":[],"call":["encoder as_json "," map ","ActiveSupport JSON Encoding Encoder  new ","options [] ","v as_json ","options dup "]}," Array to_json":{"type":"method","name":"to_json","children":[],"call":["(send nil :map) * ","ActiveSupport JSON  encode "," map "]}," Enumerable as_json":{"type":"method","name":"as_json","children":[],"call":[" to_a "," to_a as_json "]}," DateTime as_json":{"type":"method","name":"as_json","children":[],"call":[" strftime "," xmlschema ","ActiveSupport JSON Encoding  use_standard_json_time_format ","ActiveSupport  use_standard_json_time_format ","ActiveSupport JSON Encoding  time_precision "]}," Date as_json":{"type":"method","name":"as_json","children":[],"call":[" strftime ","ActiveSupport JSON Encoding  use_standard_json_time_format ","ActiveSupport  use_standard_json_time_format "]}," ActiveSupport JSON set_default_backend":{"type":"method","name":"set_default_backend","children":[],"call":[" backend= ","DECODERS  find "]}," ActiveSupport JSON with_backend":{"type":"method","name":"with_backend","children":[],"call":[" backend= "," backend "]}," ActiveSupport JSON backend=":{"type":"method","name":"backend=","children":[],"call":["ActiveSupport JSON Backends  const_get "," require ","name to_s downcase ","name to_s ","name is_a? "]}," ActiveSupport JSON backend":{"type":"method","name":"backend","children":[],"call":[" set_default_backend "," backend= "]}," ActiveSupport JSON Backends Yaml convert_json_to_yaml":{"type":"method","name":"convert_json_to_yaml","children":[],"call":["output gsub! ","output * ","output << ","ustr == ","(send\n  (send\n    (lvar :ustr) :[]\n    (irange\n      (int 1)\n      (int -1))) :to_i\n  (int 16)) pack ","ustr [] to_i ","ustr [] ","ustr start_with? ","chunk gsub! ","chunk []= ","times shift - - ","times shift - ","scanner pos ","times shift ","times [] <= ","right_pos [] ","times [] ","times size > ","times size ","scanner peek ","right_pos [] - + ","right_pos [] - ","scanner pos= ","left succ ","left_pos each_with_index ","marks << ","scanner pos + ","scanner rest_size ","(int -1) push ","json gsub ","marks empty? ","scanner skip ","scanner pos - ","times << << ","times << ","json [] =~ ","json [] ","quoting == ","quoting ! ","scanner [] ","scanner scan_until "," StringScanner  new "," require ","output []= ","i - ","times each ","scanner peek gsub ","pos + ","marks size ","char == ","chunk insert "," valid_date? ","output *  gsub! ","output *  * ","output *  << ","scanner peek  gsub! ","scanner peek  []= ","scanner scanner pos  ","marks <<  [] ","right_scanner pos  [] ","marks <<  [] - + ","right_scanner pos  [] - + ","marks <<  [] - ","right_scanner pos  [] - ","scanner scanner pos = ","(int -1) push  each_with_index ","left_scanner pos  each_with_index ","scanner scanner pos  + ","scanner scanner pos  - ","output *  []= ","scanner pos  + ","scanner []  == ","(send\n  (send\n    (lvar :ustr) :[]\n    (irange\n      (int 1)\n      (int -1))) :to_i\n  (int 16)) pack  == ","scanner peek  insert "]}," ActiveSupport JSON Backends Yaml decode":{"type":"method","name":"decode","children":[],"call":[" raise ","YAML  load "," convert_json_to_yaml ","json read ","json respond_to? ","Invalid JSON string: '%s' % "," convert_json read _to_yaml ","json read  read ","json read  respond_to? "]}," ActiveSupport JSON Backends Yajl convert_dates_from":{"type":"method","name":"convert_dates_from","children":[],"call":["data []= "," convert_dates_from ","data each ","data map! ","DateTime  parse "]}," ActiveSupport JSON Backends Yajl decode":{"type":"method","name":"decode","children":[],"call":[" convert_dates_from ","ActiveSupport  parse_json_times "," Yajl Parser  new parse "," Yajl Parser  new "]}," ActiveSupport JSON Backends JSONGem convert_dates_from":{"type":"method","name":"convert_dates_from","children":[],"call":["data []= "," convert_dates_from ","data each ","data map! ","DateTime  parse "]}," ActiveSupport JSON Backends JSONGem decode":{"type":"method","name":"decode","children":[],"call":[" convert_dates_from ","ActiveSupport  parse_json_times "," JSON  parse ","json read ","json respond_to? ","ActiveSupport  parse_json read _times ","json read  read ","json read  respond_to? "]}," ActiveSupport Deprecation DeprecationProxy new":{"type":"method","name":"new","children":[],"call":[]}," ActiveSupport Dependencies load_once_paths=":{"type":"method","name":"load_once_paths=","children":[],"call":[]}," ActiveSupport Dependencies load_once_paths":{"type":"method","name":"load_once_paths","children":[],"call":[]}," ActiveSupport Dependencies load_paths=":{"type":"method","name":"load_paths=","children":[],"call":[]}," ActiveSupport Dependencies load_paths":{"type":"method","name":"load_paths","children":[],"call":[]}," NilClass try":{"type":"method","name":"try","children":[],"call":[]}," Object try":{"type":"method","name":"try","children":[],"call":[" send "," __send__ "," respond_to? ! "," respond_to? ","a first ","a empty? ! ","a empty? "," block_given? "," public_send "," try! "," instance_eval ","b arity zero? ","b arity "]}," ActiveSupport CoreExtensions Time Calculations prev_month":{"type":"method","name":"prev_month","children":[],"call":[" months_ago "]}," ActiveSupport CoreExtensions Time Calculations prev_year":{"type":"method","name":"prev_year","children":[],"call":[" years_ago "]}," String html_safe?":{"type":"method","name":"html_safe?","children":[],"call":[]}," String html_safe":{"type":"method","name":"html_safe","children":[],"call":["ActiveSupport SafeBuffer  new "," dup html_safe! "," dup "]}," String as_str":{"type":"method","name":"as_str","children":[],"call":[]}," ActiveSupport SafeBuffer to_yaml":{"type":"method","name":"to_yaml","children":[],"call":[" to_str to_yaml "," to_str ","YAML ENGINE  syck? ! ","YAML ENGINE  syck? "]}," ActiveSupport SafeBuffer to_s":{"type":"method","name":"to_s","children":[],"call":[]}," ActiveSupport SafeBuffer html_safe":{"type":"method","name":"html_safe","children":[],"call":[]}," ActiveSupport SafeBuffer html_safe?":{"type":"method","name":"html_safe?","children":[],"call":[" dirty? ! "," dirty? "]}," ActiveSupport SafeBuffer +":{"type":"method","name":"+","children":[],"call":[" dup concat "," dup "]}," Fixnum html_safe?":{"type":"method","name":"html_safe?","children":[],"call":[]}," Object html_safe?":{"type":"method","name":"html_safe?","children":[],"call":[]}," ERB Util json_escape":{"type":"method","name":"json_escape","children":[],"call":["JSON_ESCAPE  [] ","s to_s gsub ","s to_s ","result html_safe ","s html_safe? ","result gsub! ","s to_s dup ","s to_s gsub  html_safe ","s to_s dup  html_safe ","s to_s gsub  gsub! ","s to_s dup  gsub! "]}," ERB Util html_escape":{"type":"method","name":"html_escape","children":[],"call":["(send\n  (lvar :s) :gsub\n  (regexp\n    (str \"[&\\\"><]\")\n    (regopt))) html_safe ","HTML_ESCAPE  [] ","s gsub ","s html_safe? ","s to_s ","s to_s gsub gsub gsub gsub html_safe ","s to_s gsub gsub gsub gsub ","s to_s gsub gsub gsub ","s to_s gsub gsub ","s to_s gsub ","(send\n  (lvar :s) :gsub\n  (regexp\n    (str \"[&\\\"'><]\")\n    (regopt :n))) html_safe ","s gsub html_safe ","s gsub gsub gsub gsub html_safe ","s gsub gsub gsub gsub ","s gsub gsub gsub ","s gsub gsub ","(send\n  (lvar :s) :gsub\n  (regexp\n    (str \"[&\\\"><]\")\n    (regopt :n))) html_safe ","s encode [] html_safe ","s encode [] ","s encode ","s encoding "," unwrapped_html_escape html_safe "," unwrapped_html_escape ","(s to_s end\n  (lvar :s to_s ) :gs to_s ub\n  (regexp\n    (s to_s tr \"[&\\\"><]\")\n    (regopt))) html_s to_s afe ","s to_s  gs to_s ub ","s to_s  html_s to_s afe? ","s to_s  to_s to_s  ","s to_s  to_s to_s  gs to_s ub gs to_s ub gs to_s ub gs to_s ub html_s to_s afe ","s to_s  to_s to_s  gs to_s ub gs to_s ub gs to_s ub gs to_s ub ","s to_s  to_s to_s  gs to_s ub gs to_s ub gs to_s ub ","s to_s  to_s to_s  gs to_s ub gs to_s ub ","s to_s  to_s to_s  gs to_s ub ","(s to_s end\n  (lvar :s to_s ) :gs to_s ub\n  (regexp\n    (s to_s tr \"[&\\\"'><]\")\n    (regopt :n))) html_s to_s afe ","s to_s  gs to_s ub html_s to_s afe ","s to_s  gs to_s ub gs to_s ub gs to_s ub gs to_s ub html_s to_s afe ","s to_s  gs to_s ub gs to_s ub gs to_s ub gs to_s ub ","s to_s  gs to_s ub gs to_s ub gs to_s ub ","s to_s  gs to_s ub gs to_s ub ","(s to_s end\n  (lvar :s to_s ) :gs to_s ub\n  (regexp\n    (s to_s tr \"[&\\\"><]\")\n    (regopt :n))) html_s to_s afe ","s to_s  encode [] html_s to_s afe ","s to_s  encode [] ","s to_s  encode ","s to_s  encoding "," unwrapped_html_es to_s cape html_s to_s afe "," unwrapped_html_es to_s cape "]}," Object singleton_class":{"type":"method","name":"singleton_class","children":[],"call":[]}," Object tap":{"type":"method","name":"tap","children":[],"call":[]}," Object presence":{"type":"method","name":"presence","children":[],"call":[" present? "]}," Module remove_possible_method":{"type":"method","name":"remove_possible_method","children":[],"call":[" remove_method "," private_method_defined? "," method_defined? "," undef_method "]}," Kernel class_eval":{"type":"method","name":"class_eval","children":[],"call":[" singleton_class class_eval "," singleton_class "]}," Kernel singleton_class":{"type":"method","name":"singleton_class","children":[],"call":[]}," HashWithIndifferentAccess reverse_merge":{"type":"method","name":"reverse_merge","children":[],"call":["other_hash with_indifferent_access "]}," ActiveSupport CoreExtensions Hash Conversions ClassMethods unrename_keys":{"type":"method","name":"unrename_keys","children":[],"call":[" unrename_keys ","params map ","h []= ","k to_s tr ","k to_s ","params inject ","params class to_s ","params class ","k to_s underscore tr ","k to_s underscore "]}," ActiveSupport CoreExtensions Hash Conversions rename_key":{"type":"method","name":"rename_key","children":[],"call":["key dasherize ","key camelize ","ActiveSupport  dasherize_xml ","options [] ","options has_key? ","ActiveSupport  camelize_xml ","options has_key? ! ","key dasherize  dasherize ","key camelize  dasherize ","key ActiveSupport  dasherize_xml  ","key options []  ","key dasherize  camelize ","key camelize  camelize ","key ActiveSupport  camelize_xml  ","ActiveSupport  ActiveSupport  dasherize_xml _xml ","ActiveSupport  options [] _xml ","options has_key dasherize ? ","options has_key camelize ? ","ActiveSupport  ActiveSupport  camelize_xml _xml ","options has_key dasherize ? ! ","options has_key camelize ? ! "]}," ActiveSupport CoreExtensions Hash Conversions FileLike content_type":{"type":"method","name":"content_type","children":[],"call":[]}," ActiveSupport CoreExtensions Hash Conversions FileLike original_filename":{"type":"method","name":"original_filename","children":[],"call":[]}," Enumerable exclude?":{"type":"method","name":"exclude?","children":[],"call":[" include? ! "," include? "]}," Enumerable none?":{"type":"method","name":"none?","children":[],"call":[" any? ! "," any? "]}," ActiveSupport CoreExtensions DateTime Conversions seconds_since_unix_epoch":{"type":"method","name":"seconds_since_unix_epoch","children":[],"call":["(send\n  (self) :-\n  (send\n    (const\n      (cbase) :DateTime) :civil\n    (int 1970))) * "," - "," DateTime  civil "]}," ActiveSupport CoreExtensions DateTime Conversions to_i":{"type":"method","name":"to_i","children":[],"call":[" seconds_since_unix_epoch to_i "," seconds_since_unix_epoch "]}," ActiveSupport CoreExtensions Date Calculations prev_month":{"type":"method","name":"prev_month","children":[],"call":[" months_ago "]}," ActiveSupport CoreExtensions Date Calculations prev_year":{"type":"method","name":"prev_year","children":[],"call":[" years_ago "]}," Class class_attribute":{"type":"method","name":"class_attribute","children":[],"call":[" attr_writer "," class_eval ","44 + ","attrs each ","attrs pop [] ","attrs pop ","attrs last is_a? ! ","attrs last is_a? ","attrs last ","66 + "," metaclass send "," metaclass "," send ! ! "," send ! "," send "," singleton_class send "," singleton_class "," singleton_class remove_possible_method "," define_method "," class send "," class ","s send ","66 - ","74 + ","options fetch ","attrs extract_options! "," public_send ! ! "," public_send ! "," public_send "," class public_send "," instance_variable_get "," instance_variable_defined? "," remove_possible_method "," singleton_class? "," singleton_class class_eval "," define_singleton_method ","80 + "," remove_possible_singleton_method ","default_value nil? "," instance_variable_set "," redefine_method "," singleton_class silence_redefinition_of_method "," redefine_singleton_method ","(str \"@\") to_sym ","location lineno ","location path ","(str \"class << self\") join tr ","(str \"class << self\") join "," caller_locations first "," caller_locations ","methods << ","class_methods << "," raise ","name inspect ","name is_a? "," cla singleton_class  singleton_class _eval ","attr singleton_class  each ","attr singleton_class  pop [] ","attr singleton_class  pop ","attr singleton_class  la singleton_class t i singleton_class _a? ! ","attr singleton_class  la singleton_class t i singleton_class _a? ","attr singleton_class  la singleton_class t "," metacla singleton_class  singleton_class   singleton_class end "," metacla singleton_class  singleton_class  ","  singleton_class end ! ! ","  singleton_class end ! ","  singleton_class end ","  singleton_class ingleton_cla singleton_class  singleton_class   singleton_class end ","  singleton_class ingleton_cla singleton_class  singleton_class  ","  singleton_class ingleton_cla singleton_class  singleton_class  remove_po singleton_class  singleton_class ible_method "," cla singleton_class  singleton_class   singleton_class end "," cla singleton_class  singleton_class  "," singleton_class   singleton_class end ","option singleton_class  fetch ","attrs extract_options!  fetch ","attr singleton_class  extract_option singleton_class ! ","attrs extract_attrs extract_options! ! "," public_ singleton_class end ! ! "," public_ singleton_class end ! "," public_ singleton_class end "," cla singleton_class  singleton_class  public_ singleton_class end "," in singleton_class tance_variable_get "," in singleton_class tance_variable_defined? "," remove_po singleton_class  singleton_class ible_method ","  singleton_class ingleton_cla singleton_class  singleton_class ? ","  singleton_class ingleton_cla singleton_class  singleton_class  cla singleton_class  singleton_class _eval "," define_ singleton_class ingleton_method "," remove_po singleton_class  singleton_class ible_ singleton_class ingleton_method ","options fetch  nil? "," in singleton_class tance_variable_ singleton_class et ","  singleton_class ingleton_cla singleton_class  singleton_class   singleton_class ilence_redefinition_of_method "," redefine_ singleton_class ingleton_method ","( singleton_class tr \"@\") to_ singleton_class ym "," caller_locations first  lineno "," caller_locations first  path ","( singleton_class tr \"cla singleton_class  singleton_class  <<  singleton_class elf\") join tr ","( singleton_class tr \"cla singleton_class  singleton_class  <<  singleton_class elf\") join "," caller_location singleton_class  fir singleton_class t "," caller_ caller_locations first s first "," caller_location singleton_class  "," caller_ caller_locations first s ","method singleton_class  << ","cla singleton_class  singleton_class _method singleton_class  << "," rai singleton_class e ","name in singleton_class pect ","name i singleton_class _a? "]}," ms":{"type":"method","name":"ms","children":[],"call":["1000 * "," realtime "]}," ActiveSupport CoreExtensions Array Wrapper wrap":{"type":"method","name":"wrap","children":[],"call":["object to_ary ","object respond_to? "]}," ActiveSupport CoreExtensions Array RandomAccess sample":{"type":"method","name":"sample","children":[],"call":["result []= "," size ","result [] ","i + ","Kernel  rand "," size - ","n times "," Array  new ","n > "," raise ","n < ","n class ","n kind_of? ","e message ","n inspect ","n to_int "," [] ","n nil? ","i + esult []= "," Array  new  []= ","i + esult [] "," Array  new  [] ","Kei + nel  i + and ","Ker size el  ra size d ","Kern to_int el  ran to_int d "," size  times ","n to_int  times "," Ai + i + ay  new "," Array   size ew "," Array  n to_int ew "," size  > ","n to_int  > "," i + aise "," size  < ","n to_int  < "," size  class ","n to_int  class "," size  ki size d_of? ","n to_int  kin to_int d_of? "," size  i size spect ","n to_int  in to_int spect "," size  to_i size t ","n to_int  to_in to_int t "," size   size il? ","n to_int  n to_int il? "]}," ActiveSupport CoreExtensions Array RandomAccess random_element":{"type":"method","name":"random_element","children":[],"call":[" sample ","ActiveSupport Deprecation  warn "," caller "," [] ","Kernel  rand "," length "]}," ActiveSupport Cache Store expires_in":{"type":"method","name":"expires_in","children":[],"call":[" raise ","expires_in is_a? ! ","expires_in is_a? ","options [] "]}," ActiveSupport Cache Store mute":{"type":"method","name":"mute","children":[],"call":[]}," ActiveSupport Cache Strategy LocalCache local_cache":{"type":"method","name":"local_cache","children":[],"call":["Thread  current [] "," thread_local_key ","Thread  current ","LocalCacheRegistry  cache_for "," local_cache_key "]}," ActiveSupport Cache Strategy LocalCache thread_local_key":{"type":"method","name":"thread_local_key","children":[],"call":["(begin\n  (send\n    (send\n      (send\n        (self) :class) :name) :underscore)) gsub to_sym ","(begin\n  (send\n    (send\n      (send\n        (self) :class) :name) :underscore)) gsub "," class name underscore "," class name "," class "," object_id "]}," ActiveSupport Cache Strategy LocalCache clear":{"type":"method","name":"clear","children":[],"call":[" local_cache clear "," local_cache ","cache clear "," local_ local_cache  clear "," local_ local_cache  "," local_cache  clear "]}," ActiveSupport Cache Strategy LocalCache decrement":{"type":"method","name":"decrement","children":[],"call":[" local_cache write ","value to_s "," local_cache "," local_cache mute "," local_cache delete "," bypass_local_cache "," increment_or_decrement "," set_cache_value "," write_cache_value "]}," ActiveSupport Cache Strategy LocalCache increment":{"type":"method","name":"increment","children":[],"call":[" local_cache write ","value to_s "," local_cache "," local_cache mute "," local_cache delete "," bypass_local_cache "," increment_or_decrement "," set_cache_value "," write_cache_value "]}," ActiveSupport Cache Strategy LocalCache exist":{"type":"method","name":"exist","children":[],"call":["value == "," local_cache read "," local_cache "," local_cache read  == "]}," ActiveSupport Cache Strategy LocalCache delete":{"type":"method","name":"delete","children":[],"call":[" local_cache write "," local_cache "," local_cache mute "]}," ActiveSupport Cache Strategy LocalCache write":{"type":"method","name":"write","children":[],"call":[" local_cache write "," local_cache "," local_cache mute ","value to_s "," raw? "," respond_to? ","value to_s  to_s "]}," ActiveSupport Cache Strategy LocalCache read":{"type":"method","name":"read","children":[],"call":["value dup ","value duplicable? "," local_cache write "," local_cache "," local_cache mute ","value nil? ","value == "," local_cache read "]}," ActiveSupport Cache Strategy LocalCache middleware":{"type":"method","name":"middleware","children":[],"call":["klass class_eval ","18 + "," thread_local_key ","Class  new ","58 + ","21 + ","Middleware  new "," local_cache_key ","Class  new  class_eval "]}," ActiveSupport Cache Strategy LocalCache with_local_cache":{"type":"method","name":"with_local_cache","children":[],"call":["Thread  current []= "," thread_local_key ","Thread  current ","MemoryStore  new ","LocalStore  new ","Thread  current [] "," use_temporary_local_cache "]}," ActiveSupport Cache MemoryStore read_multi":{"type":"method","name":"read_multi","children":[],"call":["results []= "," read ","names each "]}," ActiveSupport Cache MemCacheStore read_multi":{"type":"method","name":"read_multi","children":[],"call":["@data get_multi ","values []= ","entry value ","keys_to_names [] ","entry expired? "," deserialize_entry ","raw_values each ","keys_to_names keys ","map []= "," escape_key "," namespaced_key ","names inject "," merged_options ","names extract_options! ","Hash  [] ","names map "," normalize_key "," instrument_multi ","entry mismatched? "," normalize_version "," deserialize_entry  value ","Hash  []  [] "," deserialize_entry  expired? "," deserialize_ deserialize_entry  ","@data get_multi  each ","Hash  []  keys "," merged_ merged_options  "," merged_names extract_options!  ","names extract_ merged_options ! ","names extract_names extract_options! ! "," deserialize_entry  mismatched? "]}," ActiveSupport Cache MemCacheStore build_mem_cache":{"type":"method","name":"build_mem_cache","children":[],"call":[]}," ActiveSupport BacktraceCleaner silence":{"type":"method","name":"silence","children":[],"call":["s call ","backtrace reject ","@silencers each ","line to_s "]}," ActiveSupport BacktraceCleaner filter":{"type":"method","name":"filter","children":[],"call":["f call ","backtrace map ","@filters each "]}," ActiveSupport BacktraceCleaner remove_silencers!":{"type":"method","name":"remove_silencers!","children":[],"call":[]}," ActiveSupport BacktraceCleaner add_silencer":{"type":"method","name":"add_silencer","children":[],"call":["@silencers << "]}," ActiveSupport BacktraceCleaner add_filter":{"type":"method","name":"add_filter","children":[],"call":["@filters << "]}," ActiveSupport BacktraceCleaner clean":{"type":"method","name":"clean","children":[],"call":[" silence "," filter "," noise "," filter_backtrace "]}," ActiveSupport BacktraceCleaner initialize":{"type":"method","name":"initialize","children":[],"call":[" add_stdlib_silencer "," add_gem_silencer "," add_gem_filter "]}," ActiveSupport CoreExtensions Hash Conversions ClassMethods from_trusted_xml":{"type":"method","name":"from_trusted_xml","children":[],"call":[" from_xml "]}," ActiveSupport CoreExtensions Hash Conversions DisallowedType initialize":{"type":"method","name":"initialize","children":[],"call":["type inspect "]}," ActiveSupport JSON Backends OkJson convert_dates_from":{"type":"method","name":"convert_dates_from","children":[],"call":["data []= "," convert_dates_from ","data each ","data map! ","DateTime  parse "]}," ActiveSupport JSON Backends OkJson decode":{"type":"method","name":"decode","children":[],"call":[" convert_dates_from ","ActiveSupport  parse_json_times ","ActiveSupport OkJson  decode ","json read ","json respond_to? ","ActiveSupport  parse_json read _times ","json read  read ","json read  respond_to? "]}," ActiveSupport OkJson ucharcopy":{"type":"method","name":"ucharcopy","children":[],"call":["t write "," raise ","t putc ","u <= ","(send\n  (lvar :c0) :&\n  (const nil :Umask4)) << | | | ","c3 & ","(send\n  (lvar :c0) :&\n  (const nil :Umask4)) << | | ","(send\n  (lvar :c2) :&\n  (const nil :Umaskx)) << ","c2 & ","(send\n  (lvar :c0) :&\n  (const nil :Umask4)) << | ","(send\n  (lvar :c1) :&\n  (const nil :Umaskx)) << ","c1 & ","(send\n  (lvar :c0) :&\n  (const nil :Umask4)) << ","c0 & ","c0 < ","Utag2  <= ","c3 < ","s [] ord ","s [] ","i + ","n < ","(send\n  (lvar :c0) :&\n  (const nil :Umask3)) << | | ","(send\n  (lvar :c0) :&\n  (const nil :Umask3)) << | ","(send\n  (lvar :c0) :&\n  (const nil :Umask3)) << ","c2 < ","(send\n  (send\n    (begin\n      (send\n        (lvar :c0) :&\n        (const nil :Umask2))) :<<\n    (int 6)) :|\n  (begin\n    (send\n      (lvar :c1) :&\n      (const nil :Umaskx)))) <= ","(send\n  (lvar :c0) :&\n  (const nil :Umask2)) << | ","(send\n  (lvar :c0) :&\n  (const nil :Umask2)) << ","c1 < ","s length - ","s length ","t p(send\n  (lvar :c0) :&\n  (const nil :Umask4)) << | | | tc ","t p(send\n  (lvar :c0) :&\n  (const nil :Umask3)) << | | tc ","(send\n  (lvar :c0) :&\n  (const nil :Umask4)) << | | |  <= ","(send\n  (lvar :c0) :&\n  (const nil :Umask3)) << | |  <= ","(send\n  (lvar :s [] ord ) :&\n  (const nil :Umask4)) << | | | ","(ses length - d\n  (lvar :c0) :&\n  (cos length - st s length - il :Umask4)) << | | | ","s [] ord  & ","(send\n  (lvar :s [] ord ) :&\n  (const nil :Umask4)) << | | ","(ses length - d\n  (lvar :c0) :&\n  (cos length - st s length - il :Umask4)) << | | ","(send\n  (lvar :s [] ord ) :&\n  (const nil :Umaskx)) << ","(ses length - d\n  (lvar :c2) :&\n  (cos length - st s length - il :Umaskx)) << ","(send\n  (lvar :s [] ord ) :&\n  (const nil :Umask4)) << | ","(ses length - d\n  (lvar :c0) :&\n  (cos length - st s length - il :Umask4)) << | ","(ses length - d\n  (lvar :c1) :&\n  (cos length - st s length - il :Umaskx)) << ","(send\n  (lvar :s [] ord ) :&\n  (const nil :Umask4)) << ","(ses length - d\n  (lvar :c0) :&\n  (cos length - st s length - il :Umask4)) << ","s [] ord  < ","s length -  < ","(send\n  (lvar :s [] ord ) :&\n  (const nil :Umask3)) << | | ","(ses length - d\n  (lvar :c0) :&\n  (cos length - st s length - il :Umask3)) << | | ","(send\n  (lvar :s [] ord ) :&\n  (const nil :Umask3)) << | ","(ses length - d\n  (lvar :c0) :&\n  (cos length - st s length - il :Umask3)) << | ","(send\n  (lvar :s [] ord ) :&\n  (const nil :Umask3)) << ","(ses length - d\n  (lvar :c0) :&\n  (cos length - st s length - il :Umask3)) << ","(send\n  (send\n    (begin\n      (send\n        (lvar :c0) :&\n        (const nil :Umask2))) :<<\n    (int 6)) :|\n  (begin\n    (send\n      (lvar :s [] ord ) :&\n      (const nil :Umaskx)))) <= ","(send\n  (send\n    (begin\n      (send\n        (lvar :s [] ord ) :&\n        (const nil :Umask2))) :<<\n    (int 6)) :|\n  (begin\n    (send\n      (lvar :c1) :&\n      (const nil :Umaskx)))) <= ","(ses length - d\n  (ses length - d\n    (begis length - \n      (ses length - d\n        (lvar :c0) :&\n        (cos length - st s length - il :Umask2))) :<<\n    (is length - t 6)) :|\n  (begis length - \n    (ses length - d\n      (lvar :c1) :&\n      (cos length - st s length - il :Umaskx)))) <= ","(send\n  (lvar :s [] ord ) :&\n  (const nil :Umask2)) << | ","(ses length - d\n  (lvar :c0) :&\n  (cos length - st s length - il :Umask2)) << | ","(send\n  (lvar :s [] ord ) :&\n  (const nil :Umask2)) << ","(ses length - d\n  (lvar :c0) :&\n  (cos length - st s length - il :Umask2)) << ","s les length - gth - ","s les length - gth "]}," ActiveSupport OkJson numenc":{"type":"method","name":"numenc","children":[],"call":[" raise ","x infinite? ","x nan? "]}," ActiveSupport OkJson strenc":{"type":"method","name":"strenc","children":[],"call":["t string ","t putc ","n - "," ucharcopy ","c <= ","Spc  <= ","t write ","c ord ","s [] ","t print ","r < ","s length ","s class method_defined? ","s class ","StringIO  new ","t stri ucharcopy g ","StringIO  new  sStringIO  new ring ","t puts []  ","StringIO  new  puStringIO  new c "," ucharcopy  - "," us [] hars [] opy ","s []  <= ","Sps []   <= ","StringIO  new  wriStringIO  new e ","s []  ord ","t pri ucharcopy t ","StringIO  new  prinStringIO  new  ","s le ucharcopy gth ","s lengStringIO  new h ","s class method_defi ucharcopy ed? ","s s [] lass method_defined? ","s class meStringIO  new hod_defined? ","s s [] lass ","Stri ucharcopy gIO   ucharcopy ew ","SStringIO  new ringIO  new "]}," ActiveSupport OkJson keyenc":{"type":"method","name":"keyenc","children":[],"call":[" raise ","k inspect "," strenc "]}," ActiveSupport OkJson arrenc":{"type":"method","name":"arrenc","children":[],"call":["[ + + ","[ + ","(send\n  (lvar :a) :map) join "," valenc ","a map "]}," ActiveSupport OkJson objenc":{"type":"method","name":"objenc","children":[],"call":["{ + + ","{ + ","(send\n  (lvar :x) :map) join "," keyenc + + "," valenc "," keyenc + "," keyenc ","x map "]}," ActiveSupport OkJson valenc":{"type":"method","name":"valenc","children":[],"call":[" raise ","x inspect ","x class "," numenc "," strenc "," arrenc "," objenc "]}," ActiveSupport OkJson encode":{"type":"method","name":"encode","children":[],"call":[" raise "," arrenc "," objenc "]}," ActiveSupport OkJson nibble":{"type":"method","name":"nibble","children":[],"call":[" raise ","c ord - + ","c ord - ","A ord ","c ord ","c <= ","A <= ","a ord ","a <= ","0 ord ","0 <= "]}," ActiveSupport OkJson surrogate?":{"type":"method","name":"surrogate?","children":[],"call":["u < ","Usurr1  <= "]}," ActiveSupport OkJson subst":{"type":"method","name":"subst","children":[],"call":["(send\n  (begin\n    (send\n      (lvar :u1) :-\n      (const nil :Usurr1))) :<<\n  (int 10)) | ","(send\n  (lvar :u2) :-\n  (const nil :Usurr2)) + ","u2 - ","(send\n  (lvar :u1) :-\n  (const nil :Usurr1)) << ","u1 - ","u2 < ","Usurr2  <= ","u1 < ","Usurr1  <= "]}," ActiveSupport OkJson hexdec4":{"type":"method","name":"hexdec4","children":[],"call":["(send\n  (send nil :nibble\n    (send\n      (lvar :s) :[]\n      (int 0))) :<<\n  (int 12)) | | | "," nibble ","s [] ","(send\n  (send nil :nibble\n    (send\n      (lvar :s) :[]\n      (int 0))) :<<\n  (int 12)) | | "," nibble << ","(send\n  (send nil :nibble\n    (send\n      (lvar :s) :[]\n      (int 0))) :<<\n  (int 12)) | "," raise ","s length != ","s length "]}," ActiveSupport OkJson ucharenc":{"type":"method","name":"ucharenc","children":[],"call":["a []= ","(send\n  (const nil :Utagx) :|\n  (begin\n    (send\n      (lvar :u) :&\n      (const nil :Umaskx)))) chr ","Utagx  | ","u & ","i + ","(send\n  (const nil :Utagx) :|\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :u) :>>\n          (int 6))) :&\n      (const nil :Umaskx)))) chr ","(send\n  (lvar :u) :>>\n  (int 6)) & ","u >> ","(send\n  (const nil :Utagx) :|\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :u) :>>\n          (int 12))) :&\n      (const nil :Umaskx)))) chr ","(send\n  (lvar :u) :>>\n  (int 12)) & ","(send\n  (const nil :Utag4) :|\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :u) :>>\n          (int 18))) :&\n      (int 255)))) chr ","Utag4  | ","(send\n  (lvar :u) :>>\n  (int 18)) & ","(send\n  (const nil :Utag3) :|\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :u) :>>\n          (int 12))) :&\n      (int 255)))) chr ","Utag3  | ","u <= ","(send\n  (const nil :Utag2) :|\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :u) :>>\n          (int 6))) :&\n      (int 255)))) chr ","Utag2  | ","(send\n  (lvar :u) :&\n  (int 255)) chr "]}," ActiveSupport OkJson unquote":{"type":"method","name":"unquote","children":[],"call":["a [] ","a []= "," raise ","c < ","c == ","q [] "," ucharenc "," << ","uchar != "," subst "," hexdec4 ","r + ","q length >= ","q length "," surrogate? ","Unesc  [] ","r >= ","r < ","a force_encoding ","a class method_defined? ","a class ","q dup ","q dup  [] ","q dup  []= "," rq dup ise ","q []  < ","q []  == ","q []  [] ","  subst enc "," uq [] harenq []  "," uchq dup renc "," subst  != ","uq [] har != ","uchq dup r != "," hexdeq [] 4 ","q []  length >= ","q []  length "," surrogq dup te? ","Unesq []   [] ","a forq [] e_enq [] oding ","q dup  force_encoding ","a q [] lass method_defined? ","q dup  clq dup ss method_defined? ","a q [] lass ","q dup  clq dup ss ","q []  dup "]}," ActiveSupport OkJson abbrev":{"type":"method","name":"abbrev","children":[],"call":["` + + ","` + ","t + ","t length < ","s length ","t length ","t [] ","s [] ","t +  + ","t []  + ","s []  + ","t +  lengt + h < ","t []  lengt [] h < ","s []  lengs [] h < ","s lengt + h ","s lengt [] h ","s lengs [] h ","t +  lengt + h ","t []  lengt [] h ","s []  lengs [] h ","t +  [] ","t []  [] ","s []  [] "]}," ActiveSupport OkJson strtok":{"type":"method","name":"strtok","children":[],"call":[" unquote ","m [] "," raise "," abbrev ","m ! ","(str \"\\\"([^\\\"\\\\\\\\]|\\\\\\\\[\\\"/\\\\\\\\bfnrt]|\\\\\\\\u[0-9a-fA-F]{4})*\\\"\") match ","(str \"\\\"([^\\\"\\\\]|\\\\[\\\"/\\\\bfnrt]|\\\\u[0-9a-fA-F]{4})*\\\"\") match  [] ","(str \"\\\"([^\\\"\\\\]|\\\\[\\\"/\\\\bfnrt]|\\\\u[0-9a-fA-F]{4})*\\\"\") match  ! ","(str \"\\\"([^\\\"\\\\\\\\]|\\\\\\\\[\\\"/\\\\\\\\bfnrt]|\\\\\\\\u[0-9a-fA-F]{4})*\\\"\") (str \"\\\"([^\\\"\\\\]|\\\\[\\\"/\\\\bfnrt]|\\\\u[0-9a-fA-F]{4})*\\\"\") match atch "]}," ActiveSupport OkJson numtok":{"type":"method","name":"numtok","children":[],"call":[" Integer ","m [] "," Float "," Integer * ","10 ** ","m [] [] ","m [] ! ","m begin == ","m begin ","(str \"-?([1-9][0-9]+|[0-9])([.][0-9]+)?([eE][+-]?[0-9]+)?\") match ","(str \"-?([1-9][0-9]+|[0-9])([.][0-9]+)?([eE][+-]?[0-9]+)?\") match  [] ","(str \"-?([1-9][0-9]+|[0-9])([.][0-9]+)?([eE][+-]?[0-9]+)?\") match  [] [] ","(str \"-?([1-9][0-9]+|[0-9])([.][0-9]+)?([eE][+-]?[0-9]+)?\") match  [] ! ","(str \"-?([1-9][0-9]+|[0-9])([.][0-9]+)?([eE][+-]?[0-9]+)?\") match  begin == ","(str \"-?([1-9][0-9]+|[0-9])([.][0-9]+)?([eE][+-]?[0-9]+)?\") match  begin ","(str \"-?([1-9][0-9]+|[0-9])([.][0-9]+)?([eE][+-]?[0-9]+)?\") (str \"-?([1-9][0-9]+|[0-9])([.][0-9]+)?([eE][+-]?[0-9]+)?\") match atch "]}," ActiveSupport OkJson falsetok":{"type":"method","name":"falsetok","children":[],"call":["s [] == ","s [] "]}," ActiveSupport OkJson truetok":{"type":"method","name":"truetok","children":[],"call":["s [] == ","s [] "]}," ActiveSupport OkJson nulltok":{"type":"method","name":"nulltok","children":[],"call":["s [] == ","s [] "]}," ActiveSupport OkJson tok":{"type":"method","name":"tok","children":[],"call":[" numtok ","s [] "," strtok "," falsetok "," truetok "," nulltok "]}," ActiveSupport OkJson lex":{"type":"method","name":"lex","children":[],"call":["s [] ","lexeme length ","ts << ","typ != "," raise ","s [] inspect ","typ == "," tok ","s length > ","s length ","s []  [] ","ts []  << "," rais [] e ","s []  [] ins [] pect ","s []  length > ","s []  length "]}," ActiveSupport OkJson eat":{"type":"method","name":"eat","children":[],"call":["ts [] "," raise ","ts [] inspect ","ts [] [] != ","ts [] [] "]}," ActiveSupport OkJson arrparse":{"type":"method","name":"arrparse","children":[],"call":["ts [] ","ts [] [] == ","ts [] [] ","arr << "," valparse "," eat "," loop "," eat  [] "," eat  [] [] == "," eat  [] [] "]}," ActiveSupport OkJson pairparse":{"type":"method","name":"pairparse","children":[],"call":[" valparse "," eat "," raise ","k inspect ","typ != ","ts [] "," eat  [] "]}," ActiveSupport OkJson objparse":{"type":"method","name":"objparse","children":[],"call":["ts [] ","ts [] [] == ","ts [] [] ","obj []= "," pairparse "," eat "," loop "," eat  [] "," eat  [] [] == "," eat  [] [] "]}," ActiveSupport OkJson valparse":{"type":"method","name":"valparse","children":[],"call":[" raise ","val inspect ","ts [] "," arrparse "," objparse ","ts length < ","ts length "]}," ActiveSupport OkJson textparse":{"type":"method","name":"textparse","children":[],"call":[" raise ","val inspect "," arrparse "," objparse ","ts [] ","ts length < ","ts length "]}," ActiveSupport OkJson decode":{"type":"method","name":"decode","children":[],"call":[" raise ","ts length > ","ts length "," textparse "," lex "," lex  length > "," lex  length "]}," Class write_inheritable_hiwa":{"type":"method","name":"write_inheritable_hiwa","children":[],"call":[" write_inheritable_attribute "," read_inheritable_attribute merge "," read_inheritable_attribute "," with_indifferent_access "," read_inheritable_attribute nil? "]}," ActiveSupport XmlMini_Nokogiri Conversions Node attributes_as_hash":{"type":"method","name":"attributes_as_hash","children":[],"call":["Hash  [] ","(send\n  (send nil :attribute_nodes) :map) flatten ","node value ","node node_name "," attribute_nodes map "," attribute_nodes "]}," LibXML Conversions Node yaml?":{"type":"method","name":"yaml?","children":[],"call":["(send\n  (send nil :attributes) :collect) include? ","x value "," attributes collect "," attributes "]}," LibXML Conversions Node array?":{"type":"method","name":"array?","children":[],"call":[" child name == "," child next name "," child next "," child "," child name "," child next? "," child? "]}," LibXML Conversions Node children_yaml_to_hash":{"type":"method","name":"children_yaml_to_hash","children":[],"call":["hash []= "," content "," content blank? "]}," LibXML Conversions Node children_array_to_hash":{"type":"method","name":"children_array_to_hash","children":[],"call":["hash []= ","child children_to_hash "," returning "," map "," child name "," child "]}," LibXML Conversions Node attributes_to_hash":{"type":"method","name":"attributes_to_hash","children":[],"call":["hash []= ","attr value ","attr name "," each_attr "]}," LibXML Conversions Node children_to_hash":{"type":"method","name":"children_to_hash","children":[],"call":[" attributes_to_hash ","child to_hash "," each ","hash delete ","hash [] blank? ","hash [] ","hash length > ","hash length "]}," LibXML Conversions Node insert_name_into_hash":{"type":"method","name":"insert_name_into_hash","children":[],"call":["hash []= ","hash [] << ","hash [] ","hash [] kind_of? ! ","hash [] kind_of? "]}," TCPTimeoutSocket close":{"type":"method","name":"close","children":[],"call":["@sock close "]}," TCPTimeoutSocket closed?":{"type":"method","name":"closed?","children":[],"call":["@sock closed? "]}," TCPTimeoutSocket method_missing":{"type":"method","name":"method_missing","children":[],"call":["@sock __send__ "]}," TCPTimeoutSocket _socket":{"type":"method","name":"_socket","children":[],"call":[]}," TCPTimeoutSocket read":{"type":"method","name":"read","children":[],"call":["@sock read ","Timeout  timeout "]}," TCPTimeoutSocket gets":{"type":"method","name":"gets","children":[],"call":["@sock gets ","Timeout  timeout "]}," TCPTimeoutSocket write":{"type":"method","name":"write","children":[],"call":["@sock write ","Timeout  timeout "]}," TCPTimeoutSocket initialize":{"type":"method","name":"initialize","children":[],"call":["TCPSocket  new ","Timeout  timeout "]}," I18nSimpleBackendReloadTranslationsTest test_reload_translations_uninitializes_translations":{"type":"method","name":"test_reload_translations_uninitializes_translations","children":[],"call":[" assert_equal ","@backend initialized? ","@backend reload! "]}," I18nSimpleBackendReloadTranslationsTest test_reload_translations_unloads_translations":{"type":"method","name":"test_reload_translations_unloads_translations","children":[],"call":[" assert_nil "," backend_get_translations ","@backend reload! "]}," I18nSimpleBackendReloadTranslationsTest test_setup":{"type":"method","name":"test_setup","children":[],"call":[" assert_not_nil "," backend_get_translations "]}," I18nSimpleBackendReloadTranslationsTest teardown":{"type":"method","name":"teardown","children":[],"call":["I18n  load_path= "]}," I18nSimpleBackendReloadTranslationsTest setup":{"type":"method","name":"setup","children":[],"call":["@backend send "," assert_nil "," backend_get_translations ","I18n  load_path= ","File  dirname + ","File  dirname ","I18n Backend Simple  new ","I18n Backend Simple  new  send "]}," I18nSimpleBackendLoadPathTest test_adding_arrays_of_filenames_to_load_path_do_not_break_locale_loading":{"type":"method","name":"test_adding_arrays_of_filenames_to_load_path_do_not_break_locale_loading","children":[],"call":[" assert_not_nil "," backend_get_translations ","@backend send "," assert_nothing_raised "," assert_nil ","I18n  load_path << ","Dir  [] ","File  dirname + ","File  dirname ","I18n  load_path ","I18n Backend Simple  new ","I18n Backend Simple  new  send "]}," I18nSimpleBackendLoadPathTest test_nested_load_paths_do_not_break_locale_loading":{"type":"method","name":"test_nested_load_paths_do_not_break_locale_loading","children":[],"call":[" assert_not_nil "," backend_get_translations ","@backend send "," assert_nothing_raised "," assert_nil ","I18n  load_path= ","File  dirname + ","File  dirname ","I18n Backend Simple  new ","I18n Backend Simple  new  send "]}," I18nSimpleBackendLoadPathTest teardown":{"type":"method","name":"teardown","children":[],"call":["I18n  load_path= "]}," I18nSimpleBackendLoadTranslationsTest test_load_translations_loads_from_different_file_formats":{"type":"method","name":"test_load_translations_loads_from_different_file_formats","children":[],"call":[" assert_equal "," backend_get_translations ","@backend load_translations ","I18n Backend Simple  new ","I18n Backend Simple  new  load_translations "]}," I18nSimpleBackendLoadTranslationsTest test_load_rb_loads_data_from_yaml_file":{"type":"method","name":"test_load_rb_loads_data_from_yaml_file","children":[],"call":[" assert_equal ","@backend send "]}," I18nSimpleBackendLoadTranslationsTest test_load_rb_loads_data_from_ruby_file":{"type":"method","name":"test_load_rb_loads_data_from_ruby_file","children":[],"call":[" assert_equal ","@backend send "]}," I18nSimpleBackendLoadTranslationsTest test_load_translations_with_ruby_file_type_does_not_raise_exception":{"type":"method","name":"test_load_translations_with_ruby_file_type_does_not_raise_exception","children":[],"call":["@backend load_translations "," assert_nothing_raised "]}," I18nSimpleBackendLoadTranslationsTest test_load_translations_with_unknown_file_type_raises_exception":{"type":"method","name":"test_load_translations_with_unknown_file_type_raises_exception","children":[],"call":["@backend load_translations "," assert_raise "]}," I18nSimpleBackendHelperMethodsTest test_deep_symbolize_keys_works":{"type":"method","name":"test_deep_symbolize_keys_works","children":[],"call":[" assert_equal ","@backend send "]}," I18nSimpleBackendHelperMethodsTest setup":{"type":"method","name":"setup","children":[],"call":["I18n Backend Simple  new "]}," I18nSimpleBackendLocalizeTimeTest test_translate_given_an_unknown_format_it_does_not_fail":{"type":"method","name":"test_translate_given_an_unknown_format_it_does_not_fail","children":[],"call":["@backend localize "," assert_nothing_raised "]}," I18nSimpleBackendLocalizeTimeTest test_translate_given_no_format_it_does_not_fail":{"type":"method","name":"test_translate_given_no_format_it_does_not_fail","children":[],"call":["@backend localize "," assert_nothing_raised "]}," I18nSimpleBackendLocalizeTimeTest test_translate_given_a_meridian_indicator_format_it_returns_the_correct_meridian_indicator":{"type":"method","name":"test_translate_given_a_meridian_indicator_format_it_returns_the_correct_meridian_indicator","children":[],"call":[" assert_equal ","@backend localize "]}," I18nSimpleBackendLocalizeTimeTest test_translate_given_an_abbr_month_name_format_it_returns_the_correct_abbrevated_month_name":{"type":"method","name":"test_translate_given_an_abbr_month_name_format_it_returns_the_correct_abbrevated_month_name","children":[],"call":[" assert_equal ","@backend localize "]}," I18nSimpleBackendLocalizeTimeTest test_translate_given_a_month_name_format_it_returns_the_correct_month_name":{"type":"method","name":"test_translate_given_a_month_name_format_it_returns_the_correct_month_name","children":[],"call":[" assert_equal ","@backend localize "]}," I18nSimpleBackendLocalizeTimeTest test_translate_given_an_abbr_day_name_format_it_returns_the_correct_abbrevated_day_name":{"type":"method","name":"test_translate_given_an_abbr_day_name_format_it_returns_the_correct_abbrevated_day_name","children":[],"call":[" assert_equal ","@backend localize "]}," I18nSimpleBackendLocalizeTimeTest test_translate_given_a_day_name_format_it_returns_the_correct_day_name":{"type":"method","name":"test_translate_given_a_day_name_format_it_returns_the_correct_day_name","children":[],"call":[" assert_equal ","@backend localize "]}," I18nSimpleBackendLocalizeTimeTest test_translate_given_the_long_format_it_uses_it":{"type":"method","name":"test_translate_given_the_long_format_it_uses_it","children":[],"call":[" assert_equal ","@backend localize "]}," I18nSimpleBackendLocalizeTimeTest test_translate_given_the_short_format_it_uses_it":{"type":"method","name":"test_translate_given_the_short_format_it_uses_it","children":[],"call":[" assert_equal ","@backend localize "]}," I18nSimpleBackendLocalizeTimeTest teardown":{"type":"method","name":"teardown","children":[],"call":["ENV  delete ","ENV  []= "]}," I18nSimpleBackendLocalizeTimeTest setup":{"type":"method","name":"setup","children":[],"call":["Time  parse "," add_datetime_translations ","I18n Backend Simple  new ","ENV  [] ","ENV  []= "]}," I18nSimpleBackendLocalizeDateTimeTest test_translate_given_an_unknown_format_it_does_not_fail":{"type":"method","name":"test_translate_given_an_unknown_format_it_does_not_fail","children":[],"call":["@backend localize "," assert_nothing_raised "]}," I18nSimpleBackendLocalizeDateTimeTest test_translate_given_no_format_it_does_not_fail":{"type":"method","name":"test_translate_given_no_format_it_does_not_fail","children":[],"call":["@backend localize "," assert_nothing_raised "]}," I18nSimpleBackendLocalizeDateTimeTest test_translate_given_a_meridian_indicator_format_it_returns_the_correct_meridian_indicator":{"type":"method","name":"test_translate_given_a_meridian_indicator_format_it_returns_the_correct_meridian_indicator","children":[],"call":[" assert_equal ","@backend localize "]}," I18nSimpleBackendLocalizeDateTimeTest test_translate_given_an_abbr_month_name_format_it_returns_the_correct_abbrevated_month_name":{"type":"method","name":"test_translate_given_an_abbr_month_name_format_it_returns_the_correct_abbrevated_month_name","children":[],"call":[" assert_equal ","@backend localize "]}," I18nSimpleBackendLocalizeDateTimeTest test_translate_given_a_month_name_format_it_returns_the_correct_month_name":{"type":"method","name":"test_translate_given_a_month_name_format_it_returns_the_correct_month_name","children":[],"call":[" assert_equal ","@backend localize "]}," I18nSimpleBackendLocalizeDateTimeTest test_translate_given_an_abbr_day_name_format_it_returns_the_correct_abbrevated_day_name":{"type":"method","name":"test_translate_given_an_abbr_day_name_format_it_returns_the_correct_abbrevated_day_name","children":[],"call":[" assert_equal ","@backend localize "]}," I18nSimpleBackendLocalizeDateTimeTest test_translate_given_a_day_name_format_it_returns_the_correct_day_name":{"type":"method","name":"test_translate_given_a_day_name_format_it_returns_the_correct_day_name","children":[],"call":[" assert_equal ","@backend localize "]}," I18nSimpleBackendLocalizeDateTimeTest test_translate_given_the_default_format_it_uses_it":{"type":"method","name":"test_translate_given_the_default_format_it_uses_it","children":[],"call":[" assert_equal ","@backend localize "]}," I18nSimpleBackendLocalizeDateTimeTest test_translate_given_the_long_format_it_uses_it":{"type":"method","name":"test_translate_given_the_long_format_it_uses_it","children":[],"call":[" assert_equal ","@backend localize "]}," I18nSimpleBackendLocalizeDateTimeTest test_translate_given_the_short_format_it_uses_it":{"type":"method","name":"test_translate_given_the_short_format_it_uses_it","children":[],"call":[" assert_equal ","@backend localize "]}," I18nSimpleBackendLocalizeDateTimeTest setup":{"type":"method","name":"setup","children":[],"call":["DateTime  new "," add_datetime_translations ","I18n Backend Simple  new "]}," I18nSimpleBackendLocalizeDateTest test_localize_object_raises_argument_error":{"type":"method","name":"test_localize_object_raises_argument_error","children":[],"call":["@backend localize ","Object  new "," assert_raise "]}," I18nSimpleBackendLocalizeDateTest test_localize_nil_raises_argument_error":{"type":"method","name":"test_localize_nil_raises_argument_error","children":[],"call":["@backend localize "," assert_raise "]}," I18nSimpleBackendLocalizeDateTest test_translate_given_an_unknown_format_it_does_not_fail":{"type":"method","name":"test_translate_given_an_unknown_format_it_does_not_fail","children":[],"call":["@backend localize "," assert_nothing_raised "]}," I18nSimpleBackendLocalizeDateTest test_translate_given_no_format_it_does_not_fail":{"type":"method","name":"test_translate_given_no_format_it_does_not_fail","children":[],"call":["@backend localize "," assert_nothing_raised "]}," I18nSimpleBackendLocalizeDateTest test_translate_given_an_abbr_month_name_format_it_returns_an_abbrevated_month_name":{"type":"method","name":"test_translate_given_an_abbr_month_name_format_it_returns_an_abbrevated_month_name","children":[],"call":[" assert_equal ","@backend localize "]}," I18nSimpleBackendLocalizeDateTest test_translate_given_a_month_name_format_it_returns_a_month_name":{"type":"method","name":"test_translate_given_a_month_name_format_it_returns_a_month_name","children":[],"call":[" assert_equal ","@backend localize "]}," I18nSimpleBackendLocalizeDateTest test_translate_given_an_abbr_day_name_format_it_returns_an_abbrevated_day_name":{"type":"method","name":"test_translate_given_an_abbr_day_name_format_it_returns_an_abbrevated_day_name","children":[],"call":[" assert_equal ","@backend localize "]}," I18nSimpleBackendLocalizeDateTest test_translate_given_a_day_name_format_it_returns_a_day_name":{"type":"method","name":"test_translate_given_a_day_name_format_it_returns_a_day_name","children":[],"call":[" assert_equal ","@backend localize "]}," I18nSimpleBackendLocalizeDateTest test_translate_given_the_default_format_it_uses_it":{"type":"method","name":"test_translate_given_the_default_format_it_uses_it","children":[],"call":[" assert_equal ","@backend localize "]}," I18nSimpleBackendLocalizeDateTest test_translate_given_the_long_format_it_uses_it":{"type":"method","name":"test_translate_given_the_long_format_it_uses_it","children":[],"call":[" assert_equal ","@backend localize "]}," I18nSimpleBackendLocalizeDateTest test_translate_given_the_short_format_it_uses_it":{"type":"method","name":"test_translate_given_the_short_format_it_uses_it","children":[],"call":[" assert_equal ","@backend localize "]}," I18nSimpleBackendLocalizeDateTest setup":{"type":"method","name":"setup","children":[],"call":["Date  new "," add_datetime_translations ","I18n Backend Simple  new "]}," I18nSimpleBackendInterpolateTest euc_jp":{"type":"method","name":"euc_jp","children":[],"call":["string encode! "]}," I18nSimpleBackendInterpolateTest test_interpolate_given_a_string_containing_a_reserved_key_raises_reserved_interpolation_key":{"type":"method","name":"test_interpolate_given_a_string_containing_a_reserved_key_raises_reserved_interpolation_key","children":[],"call":["@backend send "," assert_raise "]}," I18nSimpleBackendInterpolateTest test_interpolate_given_an_empty_values_hash_raises_missing_interpolation_argument":{"type":"method","name":"test_interpolate_given_an_empty_values_hash_raises_missing_interpolation_argument","children":[],"call":["@backend send "," assert_raise "]}," I18nSimpleBackendInterpolateTest test_interpolate_given_a_values_hash_with_nil_values_interpolates_the_string":{"type":"method","name":"test_interpolate_given_a_values_hash_with_nil_values_interpolates_the_string","children":[],"call":[" assert_equal ","@backend send "]}," I18nSimpleBackendInterpolateTest test_interpolate_given_an_non_string_as_a_string_returns_nil":{"type":"method","name":"test_interpolate_given_an_non_string_as_a_string_returns_nil","children":[],"call":[" assert_equal ","@backend send "]}," I18nSimpleBackendInterpolateTest test_interpolate_given_nil_as_a_string_returns_nil":{"type":"method","name":"test_interpolate_given_nil_as_a_string_returns_nil","children":[],"call":[" assert_nil ","@backend send "]}," I18nSimpleBackendInterpolateTest test_interpolate_given_a_non_unicode_multibyte_value_hash_into_an_unicode_string_raises_encoding_compatibility_error":{"type":"method","name":"test_interpolate_given_a_non_unicode_multibyte_value_hash_into_an_unicode_string_raises_encoding_compatibility_error","children":[],"call":["@backend send "," euc_jp "," assert_raise "]}," I18nSimpleBackendInterpolateTest test_interpolate_given_an_unicode_value_hash_into_a_non_unicode_multibyte_string_raises_encoding_compatibility_error":{"type":"method","name":"test_interpolate_given_an_unicode_value_hash_into_a_non_unicode_multibyte_string_raises_encoding_compatibility_error","children":[],"call":["@backend send "," euc_jp "," assert_raise "]}," I18nSimpleBackendInterpolateTest test_interpolate_given_a_non_unicode_multibyte_value_hash_interpolates_into_a_string_with_the_same_encoding":{"type":"method","name":"test_interpolate_given_a_non_unicode_multibyte_value_hash_interpolates_into_a_string_with_the_same_encoding","children":[],"call":[" assert_equal ","@backend send "," euc_jp "]}," I18nSimpleBackendInterpolateTest test_interpolate_given_an_unicode_value_hash_interpolates_into_unicode_string":{"type":"method","name":"test_interpolate_given_an_unicode_value_hash_interpolates_into_unicode_string","children":[],"call":[" assert_equal ","@backend send "]}," I18nSimpleBackendInterpolateTest test_interpolate_given_an_unicode_value_hash_interpolates_to_the_string":{"type":"method","name":"test_interpolate_given_an_unicode_value_hash_interpolates_to_the_string","children":[],"call":[" assert_equal ","@backend send "]}," I18nSimpleBackendInterpolateTest test_interpolate_given_a_value_hash_interpolates_into_unicode_string":{"type":"method","name":"test_interpolate_given_a_value_hash_interpolates_into_unicode_string","children":[],"call":[" assert_equal ","@backend send "]}," I18nSimpleBackendInterpolateTest test_interpolate_given_a_value_hash_interpolates_the_values_to_the_string":{"type":"method","name":"test_interpolate_given_a_value_hash_interpolates_the_values_to_the_string","children":[],"call":[" assert_equal ","@backend send "]}," I18nSimpleBackendPluralizeTest test_interpolate_given_incomplete_pluralization_data_raises_invalid_pluralization_data":{"type":"method","name":"test_interpolate_given_incomplete_pluralization_data_raises_invalid_pluralization_data","children":[],"call":["@backend send "," assert_raise "]}," I18nSimpleBackendPluralizeTest test_pluralize_given_3_returns_plural_string":{"type":"method","name":"test_pluralize_given_3_returns_plural_string","children":[],"call":[" assert_equal ","@backend send "]}," I18nSimpleBackendPluralizeTest test_pluralize_given_2_returns_plural_string":{"type":"method","name":"test_pluralize_given_2_returns_plural_string","children":[],"call":[" assert_equal ","@backend send "]}," I18nSimpleBackendPluralizeTest test_pluralize_given_1_returns_singular_string":{"type":"method","name":"test_pluralize_given_1_returns_singular_string","children":[],"call":[" assert_equal ","@backend send "]}," I18nSimpleBackendPluralizeTest test_pluralize_given_0_returns_plural_string_if_no_zero_key_given":{"type":"method","name":"test_pluralize_given_0_returns_plural_string_if_no_zero_key_given","children":[],"call":[" assert_equal ","@backend send "]}," I18nSimpleBackendPluralizeTest test_pluralize_given_0_returns_zero_string_if_zero_key_given":{"type":"method","name":"test_pluralize_given_0_returns_zero_string_if_zero_key_given","children":[],"call":[" assert_equal ","@backend send "]}," I18nSimpleBackendPluralizeTest test_pluralize_given_nil_returns_the_given_entry":{"type":"method","name":"test_pluralize_given_nil_returns_the_given_entry","children":[],"call":[" assert_equal ","@backend send "]}," I18nSimpleBackendLookupTest test_lookup_given_nested_keys_looks_up_a_nested_hash_value":{"type":"method","name":"test_lookup_given_nested_keys_looks_up_a_nested_hash_value","children":[],"call":[" assert_equal ","@backend send "]}," I18nSimpleBackendLookupTest test_lookup_given_nil_as_a_key_returns_nil":{"type":"method","name":"test_lookup_given_nil_as_a_key_returns_nil","children":[],"call":[" assert_nil ","@backend send "]}," I18nSimpleBackendTranslateTest test_translate_with_a_bogus_key_and_no_default_raises_missing_translation_data":{"type":"method","name":"test_translate_with_a_bogus_key_and_no_default_raises_missing_translation_data","children":[],"call":["@backend translate "," assert_raise "]}," I18nSimpleBackendTranslateTest test_translate_given_nil_as_a_locale_raises_an_argument_error":{"type":"method","name":"test_translate_given_nil_as_a_locale_raises_an_argument_error","children":[],"call":["@backend translate "," assert_raise "]}," I18nSimpleBackendTranslateTest test_translate_calls_interpolate_including_count_as_a_value":{"type":"method","name":"test_translate_calls_interpolate_including_count_as_a_value","children":[],"call":["@backend translate ","@backend expects with ","@backend expects "]}," I18nSimpleBackendTranslateTest test_translate_calls_interpolate":{"type":"method","name":"test_translate_calls_interpolate","children":[],"call":["@backend translate ","@backend expects with ","@backend expects "]}," I18nSimpleBackendTranslateTest test_translate_calls_pluralize":{"type":"method","name":"test_translate_calls_pluralize","children":[],"call":["@backend translate ","@backend expects with ","@backend expects "]}," I18nSimpleBackendTranslateTest test_translate_an_array_of_keys_translates_all_of_them":{"type":"method","name":"test_translate_an_array_of_keys_translates_all_of_them","children":[],"call":[" assert_equal ","@backend translate "]}," I18nSimpleBackendTranslateTest test_translate_given_an_array_of_inexistent_keys_it_raises_missing_translation_data":{"type":"method","name":"test_translate_given_an_array_of_inexistent_keys_it_raises_missing_translation_data","children":[],"call":["@backend translate "," assert_raise "]}," I18nSimpleBackendTranslateTest test_translate_given_an_array_as_default_uses_the_first_match":{"type":"method","name":"test_translate_given_an_array_as_default_uses_the_first_match","children":[],"call":[" assert_equal ","@backend translate "]}," I18nSimpleBackendTranslateTest test_translate_given_a_symbol_as_a_default_translates_the_symbol":{"type":"method","name":"test_translate_given_a_symbol_as_a_default_translates_the_symbol","children":[],"call":[" assert_equal ","@backend translate "]}," I18nSimpleBackendTranslateTest test_given_no_keys_it_returns_the_default":{"type":"method","name":"test_given_no_keys_it_returns_the_default","children":[],"call":[" assert_equal ","@backend translate "]}," I18nSimpleBackendTranslateTest test_translate_calls_lookup_with_locale_given":{"type":"method","name":"test_translate_calls_lookup_with_locale_given","children":[],"call":["@backend translate ","@backend expects with returns ","@backend expects with ","@backend expects "]}," I18nSimpleBackendAvailableLocalesTest test_available_locales":{"type":"method","name":"test_available_locales","children":[],"call":[" assert_equal ","(send\n  (send\n    (ivar :@backend) :available_locales) :map) sort ","locale to_s ","@backend available_locales map ","@backend available_locales ","@backend store_translations ","I18n Backend Simple  new ","(send\n  (send\n    (ivar :I18n Backend Simple  new ) :available_locales) :map) sort ","I18n Backend Simple  new  available_locales map ","I18n Backend Simple  new  available_locales ","I18n Backend Simple  new  store_translations "]}," I18nSimpleBackendTranslationsTest test_store_translations_converts_keys_to_symbols":{"type":"method","name":"test_store_translations_converts_keys_to_symbols","children":[],"call":[" assert_equal "," backend_get_translations ","Hash  [] ","@backend store_translations "]}," I18nSimpleBackendTranslationsTest test_store_translations_forces_locale_to_sym":{"type":"method","name":"test_store_translations_forces_locale_to_sym","children":[],"call":[" assert_equal "," backend_get_translations ","Hash  [] ","@backend store_translations "]}," I18nSimpleBackendTranslationsTest test_store_translations_deep_merges_translations":{"type":"method","name":"test_store_translations_deep_merges_translations","children":[],"call":[" assert_equal "," backend_get_translations ","Hash  [] ","@backend store_translations "]}," I18nSimpleBackendTranslationsTest test_store_translations_adds_translations":{"type":"method","name":"test_store_translations_adds_translations","children":[],"call":[" assert_equal "," backend_get_translations ","Hash  [] ","@backend store_translations "]}," I18nSimpleBackendTestSetup add_datetime_translations":{"type":"method","name":"add_datetime_translations","children":[],"call":["@backend store_translations ","(str \"Jan\") unshift ","(str \"Januar\") unshift "]}," I18nSimpleBackendTestSetup backend_get_translations":{"type":"method","name":"backend_get_translations","children":[],"call":["@backend instance_variable_get "]}," I18nSimpleBackendTestSetup setup_backend":{"type":"method","name":"setup_backend","children":[],"call":["File  dirname + ","File  dirname ","@backend store_translations ","I18n Backend Simple  new ","I18n Backend Simple  new  store_translations "]}," I18nTest test_localize_object_raises_argument_error":{"type":"method","name":"test_localize_object_raises_argument_error","children":[],"call":["I18n  l ","Object  new "," assert_raise "," assert_raises "]}," I18nTest test_localize_nil_raises_argument_error":{"type":"method","name":"test_localize_nil_raises_argument_error","children":[],"call":["I18n  l "," assert_raise "," assert_raises "]}," I18nTest test_translate_given_a_bogus_key_raises_missing_translation_data":{"type":"method","name":"test_translate_given_a_bogus_key_raises_missing_translation_data","children":[],"call":[" assert_equal ","I18n  t "]}," I18nTest test_translate_with_options_using_scope_works":{"type":"method","name":"test_translate_with_options_using_scope_works","children":[],"call":["locale t ","I18n  with_options ","I18n  backend expects with ","I18n  backend expects ","I18n  backend "]}," I18nTest test_translate_with_dot_separated_key_array_and_scope_works":{"type":"method","name":"test_translate_with_dot_separated_key_array_and_scope_works","children":[],"call":[" assert_equal ","I18n  t "]}," I18nTest test_translate_with_key_array_and_dot_separated_scope_works":{"type":"method","name":"test_translate_with_key_array_and_dot_separated_scope_works","children":[],"call":[" assert_equal ","I18n  t "]}," I18nTest test_translate_with_array_containing_dot_separated_strings_as_scope_works":{"type":"method","name":"test_translate_with_array_containing_dot_separated_strings_as_scope_works","children":[],"call":[" assert_equal ","I18n  t "]}," I18nTest test_translate_with_array_as_scope_works":{"type":"method","name":"test_translate_with_array_as_scope_works","children":[],"call":[" assert_equal ","I18n  t "]}," I18nTest test_translate_with_nested_string_keys_works":{"type":"method","name":"test_translate_with_nested_string_keys_works","children":[],"call":[" assert_equal ","I18n  t "]}," I18nTest test_translate_on_nested_symbol_keys_works":{"type":"method","name":"test_translate_on_nested_symbol_keys_works","children":[],"call":[" assert_equal ","I18n  t "]}," I18nTest test_translate_given_no_locale_uses_i18n_locale":{"type":"method","name":"test_translate_given_no_locale_uses_i18n_locale","children":[],"call":["I18n  translate ","I18n  backend expects with ","I18n  backend expects ","I18n  backend "]}," I18nTest test_delegates_localize_to_backend":{"type":"method","name":"test_delegates_localize_to_backend","children":[],"call":["I18n  localize ","I18n  backend expects with ","I18n  backend expects ","I18n  backend "]}," I18nTest test_delegates_translate_to_backend":{"type":"method","name":"test_delegates_translate_to_backend","children":[],"call":["I18n  translate ","I18n  backend expects with ","I18n  backend expects ","I18n  backend "]}," I18nTest test_uses_custom_exception_handler":{"type":"method","name":"test_uses_custom_exception_handler","children":[],"call":["I18n  exception_handler= ","I18n  translate ","I18n  expects "]}," I18nTest test_can_set_exception_handler":{"type":"method","name":"test_can_set_exception_handler","children":[],"call":["I18n  exception_handler= "," assert_nothing_raised "]}," I18nTest test_can_set_locale_to_thread_current":{"type":"method","name":"test_can_set_locale_to_thread_current","children":[],"call":["I18n  locale= "," assert_equal ","Thread  current [] ","Thread  current ","I18n  locale "," assert_nothing_raised "]}," I18nTest test_uses_default_locale_as_locale_by_default":{"type":"method","name":"test_uses_default_locale_as_locale_by_default","children":[],"call":[" assert_equal ","I18n  locale ","I18n  default_locale "]}," I18nTest test_can_set_default_locale":{"type":"method","name":"test_can_set_default_locale","children":[],"call":["I18n  default_locale= "," assert_equal ","I18n  default_locale "," assert_nothing_raised "]}," I18nTest test_uses_en_us_as_default_locale_by_default":{"type":"method","name":"test_uses_en_us_as_default_locale_by_default","children":[],"call":[" assert_equal ","I18n  default_locale "]}," I18nTest test_can_set_backend":{"type":"method","name":"test_can_set_backend","children":[],"call":["I18n  backend= ","I18n Backend Simple  new "," assert_equal ","I18n  backend "," assert_nothing_raised "]}," I18nTest test_uses_simple_backend_set_by_default":{"type":"method","name":"test_uses_simple_backend_set_by_default","children":[],"call":[" assert ","I18n  backend is_a? ","I18n  backend "]}," I18nTest setup":{"type":"method","name":"setup","children":[],"call":["I18n  backend store_translations ","I18n  backend "]}," I18nExceptionsTest force_reserved_interpolation_key":{"type":"method","name":"force_reserved_interpolation_key","children":[],"call":["I18n  backend translate ","I18n  backend ","I18n  backend store_translations "]}," I18nExceptionsTest force_missing_interpolation_argument":{"type":"method","name":"force_missing_interpolation_argument","children":[],"call":["I18n  backend translate ","I18n  backend ","I18n  backend store_translations "]}," I18nExceptionsTest force_invalid_pluralization_data":{"type":"method","name":"force_invalid_pluralization_data","children":[],"call":["I18n  backend translate ","I18n  backend ","I18n  backend store_translations "]}," I18nExceptionsTest force_missing_translation_data":{"type":"method","name":"force_missing_translation_data","children":[],"call":["I18n  backend translate ","I18n  backend ","I18n  backend store_translations "]}," I18nExceptionsTest force_invalid_locale":{"type":"method","name":"force_invalid_locale","children":[],"call":["I18n  backend translate ","I18n  backend "]}," I18nExceptionsTest test_reserved_interpolation_key_message":{"type":"method","name":"test_reserved_interpolation_key_message","children":[],"call":[" assert_equal ","e message "," force_reserved_interpolation_key "]}," I18nExceptionsTest test_reserved_interpolation_key_stores_key_and_string":{"type":"method","name":"test_reserved_interpolation_key_stores_key_and_string","children":[],"call":[" assert_equal ","e string ","e key "," force_reserved_interpolation_key "]}," I18nExceptionsTest test_missing_interpolation_argument_message":{"type":"method","name":"test_missing_interpolation_argument_message","children":[],"call":[" assert_equal ","e message "," force_missing_interpolation_argument "]}," I18nExceptionsTest test_missing_interpolation_argument_stores_key_and_string":{"type":"method","name":"test_missing_interpolation_argument_stores_key_and_string","children":[],"call":[" assert_equal ","e string ","e key "," force_missing_interpolation_argument "," assert_raises "]}," I18nExceptionsTest test_invalid_pluralization_data_message":{"type":"method","name":"test_invalid_pluralization_data_message","children":[],"call":[" assert_equal ","e message "," force_invalid_pluralization_data "]}," I18nExceptionsTest test_invalid_pluralization_data_stores_entry_and_count":{"type":"method","name":"test_invalid_pluralization_data_stores_entry_and_count","children":[],"call":[" assert_equal ","e count ","e entry "," force_invalid_pluralization_data "]}," I18nExceptionsTest test_missing_translation_data_message":{"type":"method","name":"test_missing_translation_data_message","children":[],"call":[" assert_equal ","e message "," force_missing_translation_data "]}," I18nExceptionsTest test_missing_translation_data_stores_locale_key_and_options":{"type":"method","name":"test_missing_translation_data_stores_locale_key_and_options","children":[],"call":[" assert_equal ","e options ","e key ","e locale "," force_missing_translation_data "]}," I18nExceptionsTest test_invalid_locale_message":{"type":"method","name":"test_invalid_locale_message","children":[],"call":[" assert_equal ","e message "," force_invalid_locale "]}," I18nExceptionsTest test_invalid_locale_stores_locale":{"type":"method","name":"test_invalid_locale_stores_locale","children":[],"call":[" assert_nil ","e locale "," force_invalid_locale "]}," I18n available_locales":{"type":"method","name":"available_locales","children":[],"call":[" backend available_locales "," backend "]}," I18n Backend Simple available_locales":{"type":"method","name":"available_locales","children":[],"call":[" translations keys "," translations "," init_translations "," initialized? "]}," ActiveSupport CoreExtensions String OutputSafety also_html_safe?":{"type":"method","name":"also_html_safe?","children":[],"call":["other html_safe? ","other respond_to? "]}," ActiveSupport CoreExtensions String OutputSafety concat_with_safety":{"type":"method","name":"concat_with_safety","children":[],"call":[" also_html_safe? "," html_safe? "," concat_without_safety "]}," ActiveSupport CoreExtensions String OutputSafety add_with_safety":{"type":"method","name":"add_with_safety","children":[],"call":["result html_safe! "," also_html_safe? "," html_safe? "," add_without_safety "," add_without_safety  html_safe! "]}," ActiveSupport CoreExtensions String OutputSafety html_safe!":{"type":"method","name":"html_safe!","children":[],"call":[]}," ActiveSupport CoreExtensions String OutputSafety html_safe?":{"type":"method","name":"html_safe?","children":[],"call":[]}," ActiveSupport CoreExtensions String OutputSafety included":{"type":"method","name":"included","children":[],"call":[]}," I18n Helpers Gettext npgettext":{"type":"method","name":"npgettext","children":[],"call":[" nsgettext ","(lvar :msgctxt) join ","msgid [] ","msgid is_a? ","(lvar :msgctxt) join  [] ","(lvar :msgctxt) join  is_a? "]}," I18n Helpers Gettext nsgettext":{"type":"method","name":"nsgettext","children":[],"call":["I18n  t ","I18n Gettext  extract_scope ","separator is_a? ","msgid [] ","msgid is_a? "]}," I18n Helpers Gettext ngettext":{"type":"method","name":"ngettext","children":[],"call":[" nsgettext "]}," I18n Helpers Gettext pgettext":{"type":"method","name":"pgettext","children":[],"call":[" sgettext ","(lvar :msgctxt) join "]}," I18n Helpers Gettext sgettext":{"type":"method","name":"sgettext","children":[],"call":["I18n  t ","I18n Gettext  extract_scope "]}," I18n Helpers Gettext gettext":{"type":"method","name":"gettext","children":[],"call":["I18n  t ","(pair\n  (sym :default)\n  (lvar :msgid)) merge "]}," meta_class":{"type":"method","name":"meta_class","children":[],"call":[]}," I18n Backend Metadata preserve_translation_metadata":{"type":"method","name":"preserve_translation_metadata","children":[],"call":["result translation_metadata= ","object translation_metadata "]}," I18n Backend Links find_link":{"type":"method","name":"find_link","children":[],"call":["key [] == ","key [] ","from length "," links each "," links "]}," I18n Backend Links resolve_link":{"type":"method","name":"resolve_link","children":[],"call":[" store_link ","key gsub "," find_link ","links [] ","links key? "," links ","key to_s "," store_ find_link  ","key to_s  gsub "," find_ find_link  "," find_link s [] "," links  [] "," find_link s key? "," links  key? ","links key to_s ? ","  find_link s ","  links  ","key to_s  to_s "]}," I18n Backend Links store_link":{"type":"method","name":"store_link","children":[],"call":[" links []= ","link to_s ","key to_s "," links "]}," I18n Backend Links links":{"type":"method","name":"links","children":[],"call":["@links [] ","locale to_sym "]}," I18n Backend InterpolationCompiler merge_translations":{"type":"method","name":"merge_translations","children":[],"call":[" compile_all_strings_in "]}," I18n Backend Helpers unwind_keys":{"type":"method","name":"unwind_keys","children":[],"call":["curr []= ","keys shift ","curr [] ","keys size > ","keys size ","key to_s split ","key to_s ","hash each ","key to_s split  shift ","key to_s split  size > ","key to_s split  size "]}," I18n Backend Helpers unescape_default_separator":{"type":"method","name":"unescape_default_separator","children":[],"call":["key to_s tr to_sym ","key to_s tr ","I18n  default_separator ","key to_s "]}," I18n Backend Helpers escape_default_separator":{"type":"method","name":"escape_default_separator","children":[],"call":["key to_s tr ","I18n  default_separator ","key to_s "]}," I18n Backend Helpers wind_keys":{"type":"method","name":"wind_keys","children":[],"call":["result []= "," unescape_default_separator "," wind_keys ","value is_a? ","(lvar :prev_key) compact join to_sym ","(lvar :prev_key) compact join ","(lvar :prev_key) compact "," escape_default_separator ","hash each_pair ","I18n  default_separator "," hash_lookup "," wind_ escape_default_separator s ","(lvar :prev_ escape_default_separator ) compact join to_sym ","(lvar :prev_ escape_default_separator ) compact join ","(lvar :prev_ escape_default_separator ) compact "]}," I18n Backend Helpers deep_symbolize_keys":{"type":"method","name":"deep_symbolize_keys","children":[],"call":["result []= ","key to_sym "," deep_symbolize_keys ","value is_a? ","hash inject "," deep_symbolize_keys  is_a? "]}," I18n Backend Fast cleanup_non_standard_separator":{"type":"method","name":"cleanup_non_standard_separator","children":[],"call":[" escape_default_separator tr ","I18n  default_separator "," escape_default_separator "]}," I18n Backend Fast lookup":{"type":"method","name":"lookup","children":[],"call":[" flattened_translations [] [] ","key to_sym "," flattened_translations [] ","locale to_sym "," flattened_translations ","(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (array\n    (lvar :key))) join ","I18n  default_separator "," Array + "," Array "," resolve_link "," cleanup_non_standard_separator "," Array map ","I18n  default_separator != ","options [] "," flattened_translations has_key? "," init_translations "," initialized? ","(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (array\n    (lvar :key))) join  to_sym "," resolve_link  to_sym "," cleanup_non_standard_separator  to_sym ","(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (array\n    (lvar :(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (array\n    (lvar :key))) join ))) join ","(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (array\n    (lvar : resolve_link ))) join ","(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (array\n    (lvar : cleanup_non_standard_separator ))) join ","I18n  default_options []  "," cleanup_non_standard_options []  ","I18n  default_options []  != "," flattened_translations has_(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (array\n    (lvar :key))) join ? "," flattened_translations has_ resolve_link ? "," flattened_translations has_ cleanup_non_standard_separator ? "]}," I18n Backend Fast flatten_translations":{"type":"method","name":"flatten_translations","children":[],"call":[" store_link ","value is_a? ","result [] each ","result [] ","result []= "," wind_keys ","translations inject ","flattened_h []= "," flatten_hash "]}," I18n Backend Fast init_translations":{"type":"method","name":"init_translations","children":[],"call":[" reset_flattened_translations! "]}," I18n Backend Fast merge_translations":{"type":"method","name":"merge_translations","children":[],"call":[" reset_flattened_translations! "]}," I18n Backend Fast flattened_translations":{"type":"method","name":"flattened_translations","children":[],"call":[" flatten_translations "," translations "]}," I18n Backend Fast reset_flattened_translations!":{"type":"method","name":"reset_flattened_translations!","children":[],"call":[]}," I18n Backend Base merge_translations":{"type":"method","name":"merge_translations","children":[],"call":[" translations [] merge! "," translations [] "," translations ","v1 merge ","Hash  === "," proc "," deep_symbolize_keys "," unwind_keys ","I18n  default_separator ","options [] ","locale to_sym ","locale to_sym  to_sym "]}," I18n Backend Base translations":{"type":"method","name":"translations","children":[],"call":[]}," I18n Backend Base init_translations":{"type":"method","name":"init_translations","children":[],"call":[" load_translations ","I18n  load_path flatten ","I18n  load_path "]}," I18n Backend Base initialized?":{"type":"method","name":"initialized?","children":[],"call":[]}," I18n Backend ActiveRecord expand_keys":{"type":"method","name":"expand_keys","children":[],"call":["keys << ","(send\n  (lvar :keys) :last) compact join ","(send\n  (lvar :keys) :last) compact ","keys last ","key to_s split inject ","key to_s split ","key to_s "]}," I18n Backend ActiveRecord lookup":{"type":"method","name":"lookup","children":[],"call":[" deep_symbolize_keys "," unwind_keys ","hash []= ","r value ","r key slice ","r key ","result inject ","key size + ","separator size ","key size ","result first value ","result first ","result first key == ","result first key ","result empty? ","Translation  locale lookup all ","Translation  locale lookup ","Translation  locale ","(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (send nil :Array\n    (lvar :key))) join "," Array + "," Array "," resolve_link ","I18n  default_separator ","options [] "," deep_symbolize_(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (send nil :Array\n    (lvar :key))) join s "," deep_symbolize_ resolve_link s "," unwind_(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (send nil :Array\n    (lvar :key))) join s "," unwind_ resolve_link s ","r (send\n  (send nil :Array\n    (lvar :scope)) :+\n  (send nil :Array\n    (lvar :key))) join  slice ","r  resolve_link  slice ","r (send\n  (send nil :Array\n    (lvar :scope)) :+\n  (send nil :Array\n    (lvar :key))) join  ","r  resolve_link  ","Translation  locale lookup all  inject ","(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (send nil :Array\n    (lvar :key))) join  size + "," resolve_link  size + ","(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (send nil :Array\n    (lvar :key))) join  size "," resolve_link  size ","Translation  locale lookup all  first value ","Translation  locale lookup all  first ","Translation  locale lookup all  first key == ","result first (send\n  (send nil :Array\n    (lvar :scope)) :+\n  (send nil :Array\n    (lvar :key))) join  == ","result first  resolve_link  == ","Translation  locale lookup all  first key ","result first (send\n  (send nil :Array\n    (lvar :scope)) :+\n  (send nil :Array\n    (lvar :key))) join  ","result first  resolve_link  ","Translation  locale lookup all  empty? ","(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (send nil :Array\n    (lvar :(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (send nil :Array\n    (lvar :key))) join ))) join ","(send\n  (send nil :Array\n    (lvar :scope)) :+\n  (send nil :Array\n    (lvar : resolve_link ))) join "]}," I18n Backend ActiveRecord available_locales":{"type":"method","name":"available_locales","children":[],"call":["Translation  available_locales "]}," I18n Backend ActiveRecord store_translations":{"type":"method","name":"store_translations","children":[],"call":["Translation  create ","key to_s ","locale to_s ","Translation  locale lookup delete_all ","Translation  locale lookup "," expand_keys ","Translation  locale "," store_link ","value is_a? "," wind_keys each "," wind_keys ","I18n  default_separator ","options [] "]}," I18n Backend ActiveRecord reload!":{"type":"method","name":"reload!","children":[],"call":[]}," String also_html_safe?":{"type":"method","name":"also_html_safe?","children":[],"call":["other html_safe? ","other respond_to? "]}," String concat_with_safety":{"type":"method","name":"concat_with_safety","children":[],"call":[" remove_instance_variable "," also_html_safe? "," html_safe? "," concat_without_safety "]}," String add_with_safety":{"type":"method","name":"add_with_safety","children":[],"call":["result html_safe! "," also_html_safe? "," html_safe? "," add_without_safety "," add_without_safety  html_safe! "]}," String html_safe!":{"type":"method","name":"html_safe!","children":[],"call":["ActiveSupport Deprecation  warn "," caller "," raise "]}," ActiveSupport SafeBuffer concat":{"type":"method","name":"concat","children":[],"call":["ERB Util  h ","value html_safe? "," dirty? "," html_safe? ! "," html_safe? "," html_escape_interpolated_argument "," implicit_html_escape_interpolated_argument ","value nil? "]}," ERB set_eoutvar":{"type":"method","name":"set_eoutvar","children":[],"call":["compiler post_cmd= ","cmd push ","compiler pre_cmd= ","compiler insert_cmd= ","compiler put_cmd= "]}," setup_active_record":{"type":"method","name":"setup_active_record","children":[],"call":[" puts ","t boolean ","t string "," create_table ","ActiveRecord Schema  define ","ActiveRecord Migration  verbose= ","ActiveRecord Base  establish_connection ","I18n Backend Simple  send ","I18n Backend Simple  method_defined? "," require "]}," TestCase can_store_procs?":{"type":"method","name":"can_store_procs?","children":[],"call":["I18n Backend ActiveRecord  included_modules include? ","I18n Backend ActiveRecord  included_modules ","I18n Backend ActiveRecord  === ","I18n  backend "]}," TestCase euc_jp":{"type":"method","name":"euc_jp","children":[],"call":["string encode! "]}," TestCase locales_dir":{"type":"method","name":"locales_dir","children":[],"call":["File  dirname + ","File  dirname "]}," TestCase store_translations":{"type":"method","name":"store_translations","children":[],"call":["I18n  backend store_translations ","I18n  backend ","args pop "]}," TestCase translations":{"type":"method","name":"translations","children":[],"call":["I18n  backend instance_variable_get ","I18n  backend "]}," TestCase teardown":{"type":"method","name":"teardown","children":[],"call":["I18n  backend= ","I18n  available_locales= ","I18n  load_path= ","I18n  default_locale= ","I18n  locale= "]}," TestCase with_mocha":{"type":"method","name":"with_mocha","children":[],"call":[]}," TestCase test":{"type":"method","name":"test","children":[],"call":[]}," I18nLocaleTagSubtagsTest setup":{"type":"method","name":"setup","children":[],"call":["Tag Rfc4646  new "]}," I18nFallbacksComputationTest setup":{"type":"method","name":"setup","children":[],"call":["Fallbacks  new "]}," I18nFallbacksDefaultsTest teardown":{"type":"method","name":"teardown","children":[],"call":["I18n  default_locale= "]}," I18nTest test_class_exception_handler":{"type":"method","name":"test_class_exception_handler","children":[{"type":"method","name":"call","children":[],"asgn":[],"call":[]}],"call":["I18n  exception_handler= "," assert_equal ","I18n  translate ","(send\n  (const nil :Class) :new) new ","Class  new "]}," I18nTest test_proc_exception_handler":{"type":"method","name":"test_proc_exception_handler","children":[],"call":["I18n  exception_handler= "," assert_equal ","I18n  translate ","Proc  new "]}," I18nTest test_uses_passed_separator_to_normalize_keys":{"type":"method","name":"test_uses_passed_separator_to_normalize_keys","children":[],"call":[" assert_equal ","I18n  send "]}," I18nTest test_normalize_keys_should_not_attempt_to_sym_on_empty_string":{"type":"method","name":"test_normalize_keys_should_not_attempt_to_sym_on_empty_string","children":[],"call":[" assert_equal ","I18n  send "]}," I18nTest test_normalize_keys":{"type":"method","name":"test_normalize_keys","children":[],"call":[" assert_equal ","I18n  send "]}," I18nTest test_can_set_default_separator":{"type":"method","name":"test_can_set_default_separator","children":[],"call":["I18n  default_separator= "," assert_nothing_raised "]}," I18nTest test_defaults_to_dot_as_separator":{"type":"method","name":"test_defaults_to_dot_as_separator","children":[],"call":[" assert_equal ","I18n  default_separator "]}," I18nLoadPathTest test_adding_arrays_of_filenames_to_load_path_do_not_break_locale_loading":{"type":"method","name":"test_adding_arrays_of_filenames_to_load_path_do_not_break_locale_loading","children":[],"call":[" assert_equal ","I18n  t ","I18n  load_path << ","Dir  [] "," locales_dir + "," locales_dir ","I18n  load_path "]}," I18nLoadPathTest test_nested_load_paths_do_not_break_locale_loading":{"type":"method","name":"test_nested_load_paths_do_not_break_locale_loading","children":[],"call":[" assert_equal ","I18n  t ","I18n  load_path= "," locales_dir + "," locales_dir "]}," I18nLoadPathTest setup":{"type":"method","name":"setup","children":[],"call":[" store_translations ","I18n  backend= ","I18n Backend Simple  new ","I18n  locale= "]}," I18nGettextBackendTest test_ngettextpluralizes_entry_with_dots":{"type":"method","name":"test_ngettextpluralizes_entry_with_dots","children":[],"call":[" assert_equal "," n_ ","I18n  locale= "]}," I18nGettextBackendTest test_pluralizes_namespaced_entry_with_alternative_syntax":{"type":"method","name":"test_pluralizes_namespaced_entry_with_alternative_syntax","children":[],"call":[" assert_equal "," npgettext "," nsgettext ","I18n  locale= "]}," I18nGettextBackendTest test_pluralizes_namespaced_default_entry":{"type":"method","name":"test_pluralizes_namespaced_default_entry","children":[],"call":[" assert_equal "," npgettext "," nsgettext "]}," I18nGettextBackendTest test_pluralizes_namespaced_entry":{"type":"method","name":"test_pluralizes_namespaced_entry","children":[],"call":[" assert_equal "," npgettext "," nsgettext ","I18n  locale= "]}," I18nGettextBackendTest test_pluralizes_default_entry":{"type":"method","name":"test_pluralizes_default_entry","children":[],"call":[" assert_equal "," ngettext "]}," I18nGettextBackendTest test_pluralizes_entry":{"type":"method","name":"test_pluralizes_entry","children":[],"call":[" assert_equal "," ngettext ","I18n  locale= "]}," I18nGettextBackendTest test_uses_namespaced_default_translation":{"type":"method","name":"test_uses_namespaced_default_translation","children":[],"call":[" assert_equal "," pgettext "," sgettext "]}," I18nGettextBackendTest test_looks_up_a_namespaced_translation":{"type":"method","name":"test_looks_up_a_namespaced_translation","children":[],"call":[" assert_equal "," pgettext "," sgettext ","I18n  locale= "]}," I18nGettextBackendTest test_uses_default_translation":{"type":"method","name":"test_uses_default_translation","children":[],"call":[" assert_equal "," gettext "]}," I18nGettextBackendTest test_looks_up_a_translation":{"type":"method","name":"test_looks_up_a_translation","children":[],"call":[" assert_equal "," gettext ","I18n  locale= "]}," I18nGettextBackendTest test_backend_loads_po_file":{"type":"method","name":"test_backend_loads_po_file","children":[],"call":[" assert ","I18n  backend send [] [] ","I18n  backend send [] ","I18n  backend send ","I18n  backend "]}," I18nGettextBackendTest teardown":{"type":"method","name":"teardown","children":[],"call":["I18n  backend= ","I18n  load_path= "]}," I18nGettextBackendTest setup":{"type":"method","name":"setup","children":[],"call":["I18n  load_path= "," locales_dir ","I18n  locale= ","I18n  backend= ","Backend  new "]}," I18nGettextApiTest test_npgettext_looks_up_a_plural_with_alternative_syntax":{"type":"method","name":"test_npgettext_looks_up_a_plural_with_alternative_syntax","children":[],"call":[" assert_equal "," np_ "," npgettext ","I18n  locale= "]}," I18nGettextApiTest test_npgettext_looks_up_a_singular_with_alternative_syntax":{"type":"method","name":"test_npgettext_looks_up_a_singular_with_alternative_syntax","children":[],"call":[" assert_equal "," np_ "," npgettext ","I18n  locale= "]}," I18nGettextApiTest test_npgettext_looks_up_msg_id_plural_as_default_plural_with_alternative_syntax":{"type":"method","name":"test_npgettext_looks_up_msg_id_plural_as_default_plural_with_alternative_syntax","children":[],"call":[" assert_equal "," np_ "," npgettext "]}," I18nGettextApiTest test_npgettext_looks_up_msg_id_as_default_singular_with_alternative_syntax":{"type":"method","name":"test_npgettext_looks_up_msg_id_as_default_singular_with_alternative_syntax","children":[],"call":[" assert_equal "," np_ "," npgettext "]}," I18nGettextApiTest test_npgettext_looks_up_a_plural":{"type":"method","name":"test_npgettext_looks_up_a_plural","children":[],"call":[" assert_equal "," np_ "," npgettext ","I18n  locale= "]}," I18nGettextApiTest test_npgettext_looks_up_a_singular":{"type":"method","name":"test_npgettext_looks_up_a_singular","children":[],"call":[" assert_equal "," np_ "," npgettext ","I18n  locale= "]}," I18nGettextApiTest test_npgettext_looks_up_msg_id_plural_as_default_plural":{"type":"method","name":"test_npgettext_looks_up_msg_id_plural_as_default_plural","children":[],"call":[" assert_equal "," np_ "," npgettext "]}," I18nGettextApiTest test_npgettext_looks_up_msg_id_as_default_singular":{"type":"method","name":"test_npgettext_looks_up_msg_id_as_default_singular","children":[],"call":[" assert_equal "," np_ "," npgettext "]}," I18nGettextApiTest test_nsgettext_looks_up_a_plural_with_alternative_syntax":{"type":"method","name":"test_nsgettext_looks_up_a_plural_with_alternative_syntax","children":[],"call":[" assert_equal "," ns_ "," nsgettext ","I18n  locale= "]}," I18nGettextApiTest test_nsgettext_looks_up_a_singular_with_alternative_syntax":{"type":"method","name":"test_nsgettext_looks_up_a_singular_with_alternative_syntax","children":[],"call":[" assert_equal "," ns_ "," nsgettext ","I18n  locale= "]}," I18nGettextApiTest test_nsgettext_looks_up_msg_id_plural_as_default_plural_with_alternative_syntax":{"type":"method","name":"test_nsgettext_looks_up_msg_id_plural_as_default_plural_with_alternative_syntax","children":[],"call":[" assert_equal "," ns_ "," nsgettext "]}," I18nGettextApiTest test_nsgettext_looks_up_msg_id_as_default_singular_with_alternative_syntax":{"type":"method","name":"test_nsgettext_looks_up_msg_id_as_default_singular_with_alternative_syntax","children":[],"call":[" assert_equal "," ns_ "," nsgettext "]}," I18nGettextApiTest test_nsgettext_looks_up_a_plural":{"type":"method","name":"test_nsgettext_looks_up_a_plural","children":[],"call":[" assert_equal "," ns_ "," nsgettext ","I18n  locale= "]}," I18nGettextApiTest test_nsgettext_looks_up_a_singular":{"type":"method","name":"test_nsgettext_looks_up_a_singular","children":[],"call":[" assert_equal "," ns_ "," nsgettext ","I18n  locale= "]}," I18nGettextApiTest test_nsgettext_looks_up_msg_id_plural_as_default_plural":{"type":"method","name":"test_nsgettext_looks_up_msg_id_plural_as_default_plural","children":[],"call":[" assert_equal "," ns_ "," nsgettext "]}," I18nGettextApiTest test_nsgettext_looks_up_msg_id_as_default_singular":{"type":"method","name":"test_nsgettext_looks_up_msg_id_as_default_singular","children":[],"call":[" assert_equal "," ns_ "," nsgettext "]}," I18nGettextApiTest test_ngettext_looks_up_a_plural_with_alternative_syntax":{"type":"method","name":"test_ngettext_looks_up_a_plural_with_alternative_syntax","children":[],"call":[" assert_equal "," n_ "," ngettext ","I18n  locale= "]}," I18nGettextApiTest test_ngettext_looks_up_a_singular_with_alternative_syntax":{"type":"method","name":"test_ngettext_looks_up_a_singular_with_alternative_syntax","children":[],"call":[" assert_equal "," n_ "," ngettext ","I18n  locale= "]}," I18nGettextApiTest test_ngettext_looks_up_msg_id_plural_as_default_plural_with_alternative_syntax":{"type":"method","name":"test_ngettext_looks_up_msg_id_plural_as_default_plural_with_alternative_syntax","children":[],"call":[" assert_equal "," n_ "," ngettext "]}," I18nGettextApiTest test_ngettext_looks_up_msg_id_as_default_singular_with_alternative_syntax":{"type":"method","name":"test_ngettext_looks_up_msg_id_as_default_singular_with_alternative_syntax","children":[],"call":[" assert_equal "," n_ "," ngettext "]}," I18nGettextApiTest test_ngettext_looks_up_a_plural":{"type":"method","name":"test_ngettext_looks_up_a_plural","children":[],"call":[" assert_equal "," n_ "," ngettext ","I18n  locale= "]}," I18nGettextApiTest test_ngettext_looks_up_a_singular":{"type":"method","name":"test_ngettext_looks_up_a_singular","children":[],"call":[" assert_equal "," n_ "," ngettext ","I18n  locale= "]}," I18nGettextApiTest test_ngettext_looks_up_msg_id_plural_as_default_plural":{"type":"method","name":"test_ngettext_looks_up_msg_id_plural_as_default_plural","children":[],"call":[" assert_equal "," n_ "," ngettext "]}," I18nGettextApiTest test_ngettext_looks_up_msg_id_as_default_singular":{"type":"method","name":"test_ngettext_looks_up_msg_id_as_default_singular","children":[],"call":[" assert_equal "," n_ "," ngettext "]}," I18nGettextApiTest test_pgettext_looks_up_a_scoped_translation":{"type":"method","name":"test_pgettext_looks_up_a_scoped_translation","children":[],"call":[" assert_equal "," p_ "," pgettext ","I18n  locale= "]}," I18nGettextApiTest test_pgettext_defaults_to_msgid":{"type":"method","name":"test_pgettext_defaults_to_msgid","children":[],"call":[" assert_equal "," p_ "," pgettext "]}," I18nGettextApiTest test_sgettext_looks_up_a_scoped_translation":{"type":"method","name":"test_sgettext_looks_up_a_scoped_translation","children":[],"call":[" assert_equal "," s_ "," sgettext ","I18n  locale= "]}," I18nGettextApiTest test_sgettext_defaults_to_the_last_token_of_a_scoped_msgid":{"type":"method","name":"test_sgettext_defaults_to_the_last_token_of_a_scoped_msgid","children":[],"call":[" assert_equal "," s_ "," sgettext "]}," I18nGettextApiTest test_gettext_uses_msg_containing_dots_as_key":{"type":"method","name":"test_gettext_uses_msg_containing_dots_as_key","children":[],"call":[" assert_equal "," _ "," gettext ","I18n  locale= "]}," I18nGettextApiTest test_gettext_uses_msg_containing_dots_as_default":{"type":"method","name":"test_gettext_uses_msg_containing_dots_as_default","children":[],"call":[" assert_equal "," _ "," gettext "]}," I18nGettextApiTest test_gettext_uses_msg_as_key":{"type":"method","name":"test_gettext_uses_msg_as_key","children":[],"call":[" assert_equal "," _ "," gettext ","I18n  locale= "]}," I18nGettextApiTest test_gettext_uses_msg_as_default":{"type":"method","name":"test_gettext_uses_msg_as_default","children":[],"call":[" assert_equal "," _ "]}," I18nGettextApiTest setup":{"type":"method","name":"setup","children":[],"call":["I18n  backend store_translations ","I18n  backend ","I18n  locale= "]}," I18nCoreExtStringInterpolationTest test_string_interpolation_raises_an_argument_error_when_mixing_named_and_unnamed_placeholders":{"type":"method","name":"test_string_interpolation_raises_an_argument_error_when_mixing_named_and_unnamed_placeholders","children":[],"call":["%{name} %f % "," assert_raises "]}," I18nCoreExtStringInterpolationTest test_sprintf_mix_unformatted_and_formatted_named_placeholders":{"type":"method","name":"test_sprintf_mix_unformatted_and_formatted_named_placeholders","children":[],"call":[" assert_equal ","%{name} %<num>f % "]}," I18nBackendSimpleTest setup":{"type":"method","name":"setup","children":[],"call":["I18n  load_path= "," locales_dir + "," locales_dir ","I18n  backend= ","I18n Backend Simple  new "]}," I18nBackendPluralizationTest setup":{"type":"method","name":"setup","children":[],"call":[" store_translations ","(irange\n  (int 11)\n  (int 19)) include? ","n % ","(irange\n  (int 2)\n  (int 10)) include? ","n == "," lambda ","I18n  backend= ","Backend  new "]}," I18nBackendMetadataTest store_metadata":{"type":"method","name":"store_metadata","children":[],"call":[" translations [] [] translation_metadata []= "," translations [] [] translation_metadata "," translations [] [] "," translations [] "," translations "]}," I18nBackendMetadataTest translations":{"type":"method","name":"translations","children":[],"call":["I18n  backend instance_variable_get ","I18n  backend "]}," I18nBackendMetadataTest setup":{"type":"method","name":"setup","children":[],"call":[" store_translations ","I18n  backend= ","Backend  new "]}," I18nBackendInterpolationCompilerTest interpolate":{"type":"method","name":"interpolate","children":[],"call":["I18n Backend InterpolationCompiler Compiler  compile_if_an_interpolation ","options [] ","args last ","args last kind_of? ","args last  [] "]}," I18nBackendInterpolationCompilerTest setup":{"type":"method","name":"setup","children":[],"call":["I18n  backend= ","Backend  new "]}," InterpolationCompilerTest test_handles_weired_strings":{"type":"method","name":"test_handles_weired_strings","children":[],"call":[" assert_equal "," compile_and_interpolate "]}," InterpolationCompilerTest test_str_containing_only_escaped_interpolation_is_handled_correctly":{"type":"method","name":"test_str_containing_only_escaped_interpolation_is_handled_correctly","children":[],"call":[" assert_equal "," compile_and_interpolate "]}," InterpolationCompilerTest test_compiles_fancy_keys":{"type":"method","name":"test_compiles_fancy_keys","children":[],"call":[" assert_handles_key "]}," InterpolationCompilerTest assert_handles_key":{"type":"method","name":"assert_handles_key","children":[],"call":[" assert_equal "," compile_and_interpolate "]}," InterpolationCompilerTest test_interpolated_string_gets_compiled":{"type":"method","name":"test_interpolated_string_gets_compiled","children":[],"call":[" assert_equal "," compile_and_interpolate "]}," InterpolationCompilerTest test_non_interpolated_strings_or_arrays_dont_get_compiled":{"type":"method","name":"test_non_interpolated_strings_or_arrays_dont_get_compiled","children":[],"call":[" assert_equal ","obj respond_to? ","Compiler  compile_if_an_interpolation ","(str \"abc\") each "]}," InterpolationCompilerTest test_escape_plain_string_properly_escapes":{"type":"method","name":"test_escape_plain_string_properly_escapes","children":[],"call":[" assert_escapes_plain_string "]}," InterpolationCompilerTest assert_escapes_plain_string":{"type":"method","name":"assert_escapes_plain_string","children":[],"call":[" assert_equal ","Compiler  send "]}," InterpolationCompilerTest test_escape_key_properly_escapes":{"type":"method","name":"test_escape_key_properly_escapes","children":[],"call":[" assert_escapes_interpolation_key "]}," InterpolationCompilerTest assert_escapes_interpolation_key":{"type":"method","name":"assert_escapes_interpolation_key","children":[],"call":[" assert_equal ","Compiler  send "]}," InterpolationCompilerTest compile_and_interpolate":{"type":"method","name":"compile_and_interpolate","children":[],"call":["Compiler  compile_if_an_interpolation i18n_interpolate ","Compiler  compile_if_an_interpolation "]}," I18nBackendHelpersTest test_deep_symbolize_keys":{"type":"method","name":"test_deep_symbolize_keys","children":[],"call":[" assert_equal ","@backend deep_symbolize_keys "]}," I18nBackendHelpersTest test_unwind_keys":{"type":"method","name":"test_unwind_keys","children":[],"call":[" assert_equal ","@backend unwind_keys "]}," I18nBackendHelpersTest test_wind_keys":{"type":"method","name":"test_wind_keys","children":[],"call":[" assert_equal ","@backend wind_keys "]}," I18nBackendHelpersTest setup":{"type":"method","name":"setup","children":[],"call":["I18n Backend Simple  new "]}," I18nBackendFastSpecificTest test_translation_subtree_retrieval":{"type":"method","name":"test_translation_subtree_retrieval","children":[],"call":[" assert_equal ","@backend translate ","@backend store_translations "]}," I18nBackendFastSpecificTest test_pluralization_logic_and_lookup_works":{"type":"method","name":"test_pluralization_logic_and_lookup_works","children":[],"call":[" assert_equal ","@backend translate ","@backend store_translations "]}," I18nBackendFastSpecificTest test_hash_flattening_works":{"type":"method","name":"test_hash_flattening_works","children":[],"call":[" assert_flattens "]}," I18nBackendFastSpecificTest assert_flattens":{"type":"method","name":"assert_flattens","children":[],"call":[" assert_equal ","@backend send "]}," I18nBackendFastSpecificTest setup":{"type":"method","name":"setup","children":[],"call":["FastBackend  new "]}," I18nBackendFastTest setup":{"type":"method","name":"setup","children":[],"call":["I18n  backend= ","FastBackend  new "]}," I18nBackendFallbacksWithChainTest setup":{"type":"method","name":"setup","children":[],"call":["I18n  backend= ","I18n Backend Chain  new ","I18n Backend Simple  new ","backend store_translations ","Backend  new ","I18n  Backend  new = ","Backend  new  store_translations "]}," I18nBackendFallbacksTest setup":{"type":"method","name":"setup","children":[],"call":[" store_translations ","I18n  backend= ","Backend  new "]}," I18nBackendChainTest backend":{"type":"method","name":"backend","children":[],"call":["backend store_translations ","translations each ","I18n Backend Simple  new ","I18n Backend Simple  new  store_translations "]}," I18nBackendChainTest setup":{"type":"method","name":"setup","children":[],"call":["I18n  backend= ","I18n Backend Chain  new "," backend "]}," I18nBackendCascadeTest setup":{"type":"method","name":"setup","children":[],"call":[" store_translations ","I18n  backend= ","Backend  new "]}," I18nBackendCacheTest with_cache_namespace":{"type":"method","name":"with_cache_namespace","children":[],"call":["I18n  cache_namespace= "]}," I18nBackendCacheTest test_uses_cache":{"type":"method","name":"test_uses_cache","children":[],"call":[" assert ","I18n  cache_store is_a? ","I18n  cache_store "]}," I18nBackendCacheTest teardown":{"type":"method","name":"teardown","children":[],"call":["I18n  cache_store= "]}," I18nBackendCacheTest setup":{"type":"method","name":"setup","children":[],"call":["I18n  cache_store= ","ActiveSupport Cache  lookup_store ","I18n  backend= ","Backend  new "]}," I18nBackendActiveRecordTest test_expand_keys":{"type":"method","name":"test_expand_keys","children":[],"call":[" assert_equal ","I18n  backend send ","I18n  backend "]}," I18nBackendActiveRecordTest test_missing_translations_table_does_not_cause_available_locales_to_error":{"type":"method","name":"test_missing_translations_table_does_not_cause_available_locales_to_error","children":[],"call":[" assert_equal ","I18n  backend available_locales ","I18n  backend ","I18n Backend ActiveRecord Translation  expects raises ","I18n Backend ActiveRecord Translation  expects "]}," I18nBackendActiveRecordTest test_store_translations_does_not_allow_ambigous_keys_2":{"type":"method","name":"test_store_translations_does_not_allow_ambigous_keys_2","children":[],"call":[" assert_equal ","I18n  t ","translations map ","I18n Backend ActiveRecord Translation  locale lookup all ","I18n Backend ActiveRecord Translation  locale lookup ","I18n Backend ActiveRecord Translation  locale ","I18n  backend store_translations ","I18n  backend ","I18n Backend ActiveRecord Translation  delete_all ","I18n Backend ActiveRecord Translation  locale lookup all  map ","I18n  backend store_I18n Backend ActiveRecord Translation  locale lookup all  "]}," I18nBackendActiveRecordTest test_store_translations_does_not_allow_ambigous_keys_1":{"type":"method","name":"test_store_translations_does_not_allow_ambigous_keys_1","children":[],"call":[" assert_equal ","I18n  t ","translations map ","I18n Backend ActiveRecord Translation  locale lookup all ","I18n Backend ActiveRecord Translation  locale lookup ","I18n Backend ActiveRecord Translation  locale ","I18n  backend store_translations ","I18n  backend ","I18n Backend ActiveRecord Translation  delete_all ","I18n Backend ActiveRecord Translation  locale lookup all  map ","I18n  backend store_I18n Backend ActiveRecord Translation  locale lookup all  "]}," I18nBackendActiveRecordTest teardown":{"type":"method","name":"teardown","children":[],"call":["I18n Backend ActiveRecord Translation  destroy_all "]}," I18nBackendActiveRecordTest setup":{"type":"method","name":"setup","children":[],"call":[" store_translations ","I18n  backend= ","I18n Backend ActiveRecord  new "]}," I18nActiveRecordMissingTest test_creates_no_stub_for_base_key_in_pluralization":{"type":"method","name":"test_creates_no_stub_for_base_key_in_pluralization","children":[],"call":[" assert ","I18n Backend ActiveRecord Translation  locale find_by_key ! ","I18n Backend ActiveRecord Translation  locale find_by_key ","I18n Backend ActiveRecord Translation  locale ","I18n  t "]}," I18nActiveRecordMissingTest test_creates_one_stub_per_pluralization":{"type":"method","name":"test_creates_one_stub_per_pluralization","children":[],"call":[" assert_equal ","translations length ","I18n Backend ActiveRecord Translation  locale find_all_by_key ","I18n Backend ActiveRecord Translation  locale ","I18n  t ","I18n Backend ActiveRecord Translation  locale find_all_by_key  length "]}," I18nActiveRecordMissingTest test_persists_interpolation_keys_when_looked_up_directly":{"type":"method","name":"test_persists_interpolation_keys_when_looked_up_directly","children":[],"call":[" assert ","translation_stub interpolates? ","I18n Backend ActiveRecord Translation  locale lookup first ","I18n Backend ActiveRecord Translation  locale lookup ","I18n Backend ActiveRecord Translation  locale ","I18n  t ","I18n Backend ActiveRecord Translation  locale lookup first  interpolates? "]}," I18nActiveRecordMissingTest test_lookup_does_not_persist_key_twice":{"type":"method","name":"test_lookup_does_not_persist_key_twice","children":[],"call":[" assert_equal ","I18n Backend ActiveRecord Translation  count ","I18n  t ","2 times "]}," I18nActiveRecordMissingTest test_lookup_persists_key":{"type":"method","name":"test_lookup_persists_key","children":[],"call":[" assert_equal ","I18n Backend ActiveRecord Translation  count ","I18n  t "]}," I18nActiveRecordMissingTest test_can_persist_interpolations":{"type":"method","name":"test_can_persist_interpolations","children":[],"call":[" assert ","translation valid? ","translation save ","translation interpolations= ","I18n Backend ActiveRecord Translation  new ","I18n Backend ActiveRecord Translation  new  valid? ","I18n Backend ActiveRecord Translation  new  save ","I18n Backend ActiveRecord Translation  new  interpolations= "]}," I18nActiveRecordMissingTest setup":{"type":"method","name":"setup","children":[],"call":["I18n Backend ActiveRecord Translation  delete_all ","I18n  backend meta_class send ","I18n  backend meta_class ","I18n  backend ","I18n  backend= ","I18n Backend Chain  new "," store_translations "]}," I18nPluralizationApiTest setup":{"type":"method","name":"setup","children":[],"call":["I18n  backend= ","Backend  new "]}," I18nFastBackendApiTest setup":{"type":"method","name":"setup","children":[],"call":["I18n  backend= ","FastBackend  new "]}," I18nFallbacksApiTest setup":{"type":"method","name":"setup","children":[],"call":["I18n  backend= ","Backend  new "]}," I18nApiChainTest setup":{"type":"method","name":"setup","children":[],"call":["I18n  backend= ","I18n Backend Chain  new ","I18n  backend ","I18n Backend Simple  new "]}," I18nCascadeApiTest setup":{"type":"method","name":"setup","children":[],"call":["I18n  backend= ","Backend  new "]}," I18nAllFeaturesApiTest setup":{"type":"method","name":"setup","children":[],"call":["I18n  backend= ","I18n Backend Chain  new ","I18n Backend Simple  new ","Backend  new "]}," I18nActiveRecordApiTest setup":{"type":"method","name":"setup","children":[],"call":["I18n  backend= ","I18n Backend ActiveRecord  new "]}," Tests Api Lookup setup":{"type":"method","name":"setup","children":[],"call":[" store_translations "]}," Tests Api Localization Time setup_time_translations":{"type":"method","name":"setup_time_translations","children":[],"call":[" store_translations ","args inspect "," lambda "]}," Tests Api Localization Time setup":{"type":"method","name":"setup","children":[],"call":[" Time  parse "," setup_time_translations "]}," Tests Api Localization Procs setup_time_proc_translations":{"type":"method","name":"setup_time_proc_translations","children":[],"call":[" store_translations ","(str \"янв.\") unshift ","options [] =~ ","options [] "," lambda ","(str \"Январь\") unshift ","(str \"января\") unshift "]}," Tests Api Localization DateTime setup_datetime_translations":{"type":"method","name":"setup_datetime_translations","children":[],"call":[" store_translations ","date day ","options [] "," lambda ","I18n  t "]}," Tests Api Localization DateTime setup":{"type":"method","name":"setup","children":[],"call":[" DateTime  new "," setup_datetime_translations "]}," Tests Api Localization Date setup_date_translations":{"type":"method","name":"setup_date_translations","children":[],"call":[" store_translations ","(str \"Jan\") unshift ","(str \"Januar\") unshift ","args inspect "," lambda "]}," Tests Api Localization Date setup":{"type":"method","name":"setup","children":[],"call":[" Date  new "," setup_date_translations "]}," Tests Api Interpolation interpolate":{"type":"method","name":"interpolate","children":[],"call":["I18n  backend translate ","I18n  backend ","args pop ","args last is_a? ","args last "]}," Tests Api Defaults setup":{"type":"method","name":"setup","children":[],"call":[" store_translations "]}," Tests Api Basics test_available_locales":{"type":"method","name":"test_available_locales","children":[],"call":[" assert ","I18n  available_locales include? ","I18n  available_locales "," store_translations "]}," I18n default_separator=":{"type":"method","name":"default_separator=","children":[],"call":[]}," I18n default_separator":{"type":"method","name":"default_separator","children":[],"call":[]}," I18n available_locales=":{"type":"method","name":"available_locales=","children":[],"call":[]}," I18n Backend Helpers hash_lookup":{"type":"method","name":"hash_lookup","children":[],"call":["result [] ","result has_key? ","result respond_to? ","key to_sym ","keys to_s split inject ","keys to_s split ","keys to_s ","result has_key to_sym ? ","key to_sym  to_sym ","key to_sym s to_s split inject ","key to_sym s to_s split ","key to_sym s to_s "]}," I18n Backend Fast flatten_hash":{"type":"method","name":"flatten_hash","children":[],"call":[" wind_keys "]}," Benchmark ms":{"type":"method","name":"ms","children":[],"call":[]}," create_backend":{"type":"method","name":"create_backend","children":[],"call":[" include ","I18n Backend  const_get ","modules each ","modules unshift ","Class  new "]}," ActiveSupport on_load_all":{"type":"method","name":"on_load_all","children":[],"call":[" load_all_hooks << "," load_all_hooks "]}," ActiveSupport XmlMini _parse_file":{"type":"method","name":"_parse_file","children":[],"call":["f content_type= ","entity [] ","f original_filename= ","f extend ","StringIO  new ","ActiveSupport Base64  decode64 "," Base64  decode64 ","StringIO  new  content_type= ","StringIO  new  original_StringIO  new ilename= ","StringIO  new  extend "]}," ActiveSupport XmlMini _parse_binary":{"type":"method","name":"_parse_binary","children":[],"call":["ActiveSupport Base64  decode64 ","entity [] "," Base64  decode64 "]}," ActiveSupport XmlMini _dasherize":{"type":"method","name":"_dasherize","children":[],"call":["key gsub ","middle tr ","(str \"\\\\A(_*)(.*?)(_*)\\\\Z\") match [] ","(str \"\\\\A(_*)(.*?)(_*)\\\\Z\") match ","key strip "]}," ActiveSupport XmlMini rename_key":{"type":"method","name":"rename_key","children":[],"call":[" _dasherize ","key camelize ","options [] ","options has_key? ! ","options has_key? ","key dasherize "," == "," _dasherize  camelize ","key camelize  camelize ","key dasherize  camelize ","key options []  ","options has_ _dasherize ? ! ","options has_key camelize ? ! ","options has_key dasherize ? ! ","options has_ _dasherize ? ","options has_key camelize ? ","options has_key dasherize ? "," _dasherize  dasherize ","key camelize  dasherize ","key dasherize  dasherize "]}," ActiveSupport XmlMini to_tag":{"type":"method","name":"to_tag","children":[],"call":["options [] tag! ","options [] ","FORMATTING  [] call ","FORMATTING  [] ","value nil? ! ","value nil? ","attributes []= ","DEFAULT_ENCODINGS  [] ","type_name nil? "," rename_key ","key to_s ","type_name to_s ","value class name ","value class ","value respond_to? ! ","value respond_to? ","TYPE_NAMES  [] ","value to_xml ","value call ","key to_s singularize ","value arity == ","value arity ","value is_a? ","options merge ","options delete ","type_name == ","type_name to_s  nil? ","options delete  nil? "," rename_ rename_key  "," rename_key  to_s ","type_name to_s  to_s ","options delete  to_s "," rename_key  to_s singularize ","type_name to_s  == ","options delete  == "]}," ActiveSupport XmlMini FileLike content_type":{"type":"method","name":"content_type","children":[],"call":[]}," ActiveSupport XmlMini FileLike original_filename":{"type":"method","name":"original_filename","children":[],"call":[]}," NilClass add_whiner":{"type":"method","name":"add_whiner","children":[],"call":[]}," ActiveSupport TimeWithZone name":{"type":"method","name":"name","children":[],"call":[]}," ActiveSupport Testing SetupAndTeardown ForClassicTestUnit retrieve_mocha_counter":{"type":"method","name":"retrieve_mocha_counter","children":[],"call":["Mocha Integration TestUnit AssertionCounter  new ","Mocha TestCaseAdapter AssertionCounter  new "," respond_to? ","Mocha Integration AssertionCounter  new ","Mocha MonkeyPatching TestUnit AssertionCounter  new "]}," ActiveSupport Testing SetupAndTeardown ClassMethods teardown":{"type":"method","name":"teardown","children":[],"call":[" set_callback "]}," ActiveSupport Testing SetupAndTeardown ClassMethods setup":{"type":"method","name":"setup","children":[],"call":[" set_callback "]}," ActiveSupport Testing Pending pending":{"type":"method","name":"pending","children":[],"call":[" puts ","@@pending_cases each "," at_exit "," print ","@@pending_cases << "," caller [] =~ "," caller [] "," caller "," flunk ","block call "," block_given? ","$tags [] ","description is_a? "," skip ","description blank? ","ActiveSupport Deprecation  warn "]}," ObjectSpace include?":{"type":"method","name":"include?","children":[],"call":["test method_name == ","ENV  [] ","test method_name "]}," ActiveSupport Testing Isolation Subprocess run_in_isolation":{"type":"method","name":"run_in_isolation","children":[],"call":["tmpfile read unpack [] ","tmpfile read unpack ","tmpfile read ","ENV  delete "," class ","ORIG_ARGV  join ","Gem  ruby ","(send\n  (gvar :$-I) :map) join ","File  expand_path ","$-I map ","ENV  []= ","tmpfile path ","Tempfile  open "," exit! ","file puts ","(send\n  (const nil :Marshal) :dump\n  (array\n    (lvar :retval)\n    (lvar :proxy))) pack ","Marshal  dump ","File  open ","ENV  [] ","ProxyTestResult  new "," require ","(send\n  (const nil :Marshal) :dump\n  (lvar :proxy)) pack "," class name ","(send\n  (const nil :Marshal) :dump\n  (send\n    (self) :dup)) pack "," dup ","Process  wait ","child pid ","IO  popen "," name ","load_path_args << ","$-I each ","(send\n  (const nil :Marshal) :dump\n  (send nil :dup)) pack ","(send\n  (const nil :Marshal) :dump\n  (lvar :test_result)) pack ","Minitest Result  from ","tmpfile read unpack1 ","(send\n  (const nil :Marshal) :dump\n  (array\n    (lvar :retval)\n    (lvar :ProxyTestResult  new ))) pack ","(send\n  (const nil :Marshal) :dump\n  (lvar :ProxyTestResult  new )) pack ","IO  popen  pid ","(send\n  (const nil :Marshal) :dump\n  (lvar : dup )) pack ","(send\n  (const nil :Marshal) :dump\n  (lvar :Minitest Result  from )) pack "]}," ActiveSupport Testing Isolation Forking run_in_isolation":{"type":"method","name":"run_in_isolation","children":[],"call":["result unpack [] ","result unpack ","Process  wait2 ","read read ","write close "," exit! ","write puts ","(send\n  (const nil :Marshal) :dump\n  (array\n    (lvar :retval)\n    (lvar :proxy))) pack ","Marshal  dump ","ProxyTestResult  new ","read close "," fork ","IO  pipe ","(send\n  (const nil :Marshal) :dump\n  (lvar :proxy)) pack ","(send\n  (const nil :Marshal) :dump\n  (send\n    (self) :dup)) pack "," dup ","write binmode ","read binmode ","(lvar :result) pack ","Minitest UnexpectedError  new ","ex set_backtrace ","e backtrace ","Exception  new ","e message "," failures map! "," failures "," error? ","Minitest Result  from ","result unpack1 ","read read  unpack [] ","Marshal  dump  unpack [] ","read read  unpack ","Marshal  dump  unpack "," Exception  new it! ","(send\n  (const nil :Marshal) :dump\n  (array\n    (lvar :retval)\n    (lvar :ProxyTestResult  new ))) pack ","(send\n  (const nil :Marshal) :dump\n  (lvar :ProxyTestResult  new )) pack ","(lvar :read read ) pack ","(lvar :Marshal  dump ) pack ","Minitest UnException  new pectedError  new ","Exception  new  set_backtrace ","read read  unpack1 ","Marshal  dump  unpack1 "]}," ActiveSupport Testing Isolation MiniTest run":{"type":"method","name":"run","children":[],"call":["proxy __replay__ ","Marshal  load "," run_in_isolation "," _run_class_setup "," class setup "," class "," class respond_to? "]}," ActiveSupport Testing Isolation TestUnit run":{"type":"method","name":"run","children":[],"call":[" name ","proxy __replay__ ","Marshal  load ","proxy add_error ","Test Unit Error  new "," run_in_isolation "," _run_class_setup "," class setup "," class "," class respond_to? "]}," ActiveSupport Testing Isolation _run_class_setup":{"type":"method","name":"_run_class_setup","children":[],"call":[" class setup "," class "," class respond_to? ","ENV  [] ","@@class_setup_mutex synchronize "]}," ActiveSupport Testing Isolation included":{"type":"method","name":"included","children":[],"call":[]}," ActiveSupport Testing Isolation forking_env?":{"type":"method","name":"forking_env?","children":[],"call":[]}," ActiveSupport Testing ProxyTestResult method_missing":{"type":"method","name":"method_missing","children":[],"call":["@calls << "]}," ActiveSupport Testing ProxyTestResult __replay__":{"type":"method","name":"__replay__","children":[],"call":["result send ","@calls each "]}," ActiveSupport Testing ProxyTestResult add_error":{"type":"method","name":"add_error","children":[],"call":["@calls << ","Test Unit Error  new ","RemoteError  new ","e exception ","e test_name ","TTest Unit Error  new st Unit Error  nTest Unit Error  new w ","RTest Unit Error  new motTest Unit Error  new Error  nTest Unit Error  new w ","Test Unit Error  new  Test Unit Error  new xcTest Unit Error  new ption ","Test Unit Error  new  tTest Unit Error  new st_namTest Unit Error  new  "]}," ActiveSupport Testing ProxyTestResult initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Testing RemoteError initialize":{"type":"method","name":"initialize","children":[],"call":["exception backtrace ","exception message ","exception class name ","exception class "]}," ActiveSupport Testing Declarative extended":{"type":"method","name":"extended","children":[{"type":"method","name":"describe","children":[],"asgn":[],"call":[]}],"call":[]}," ActiveSupport TestCase for_tag":{"type":"method","name":"for_tag","children":[],"call":[]}," ActiveSupport InheritableOptions initialize":{"type":"method","name":"initialize","children":[],"call":["parent [] ","parent _get ","parent kind_of? "]}," ActiveSupport Notifications instrumenter":{"type":"method","name":"instrumenter","children":[],"call":["Instrumenter  new "," notifier ","Thread  current [] "," notifier object_id ","Thread  current "," publisher ","InstrumentationRegistry  instrumenter_for ","InstrumentationRegistry  instance instrumenter_for ","InstrumentationRegistry  instance "," registry [] "," registry "]}," ActiveSupport Notifications notifier":{"type":"method","name":"notifier","children":[],"call":["Fanout  new ","Notifier  new "]}," ActiveSupport Notifications unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":["@instrumenters clear "," notifier unsubscribe "," notifier "]}," ActiveSupport Notifications subscribe":{"type":"method","name":"subscribe","children":[],"call":["@instrumenters clear "," notifier subscribe tap "," notifier subscribe "," notifier ","Subscriber  new bind subscribe ","Subscriber  new bind ","Subscriber  new "," queue "]}," ActiveSupport Notifications instrument":{"type":"method","name":"instrument","children":[],"call":[" block_given? "," instrumenter instrument "," instrumenter ","@instrumenters [] "," notifier listening? "," notifier "]}," ActiveSupport Notifications Event parent_of?":{"type":"method","name":"parent_of?","children":[],"call":["start + >= ","event duration ","start + "," duration ","start <= ","(send\n  (send nil :time) :-\n  (send\n    (lvar :event) :time)) * "," time - ","event time "," time ","(send\n  (send\n    (self) :time) :-\n  (send\n    (lvar :event) :time)) * ","@children include? ","ActiveSupport  deprecator warn ","ActiveSupport  deprecator ","(send\n  (send nil :time) :-\n  (send\n    (lvar :event) :time)) *  + >= ","(send\n  (send\n    (self) :time) :-\n  (send\n    (lvar :event) :time)) *  + >= ","(send\n  (send nil :time) :-\n  (send\n    (lvar :event) :time)) *  + ","(send\n  (send\n    (self) :time) :-\n  (send\n    (lvar :event) :time)) *  + ","(send\n  (send nil :time) :-\n  (send\n    (lvar :event) :time)) *  <= ","(send\n  (send\n    (self) :time) :-\n  (send\n    (lvar :event) :time)) *  <= "]}," ActiveSupport Notifications Event initialize":{"type":"method","name":"initialize","children":[],"call":["1000.0 * ","@end - ","payload dup ","@payload delete ","ending to_f * ","ending to_f ","start to_f * ","start to_f ","ending to_f *  - ","payload dup  delete "]}," ActiveSupport Notifications Instrumenter unique_id":{"type":"method","name":"unique_id","children":[],"call":["SecureRandom  hex "," SecureRandom  hex "]}," ActiveSupport Notifications Instrumenter instrument":{"type":"method","name":"instrument","children":[],"call":["@notifier publish ","Time  now "," raise ","payload []= ","e message ","e class name ","e class "," block_given? ","@publisher publish ","1000 * ","Time  now to_f - ","payload [] to_f ","payload [] ","Time  now to_f ","Thread  current object_id ","Thread  current "," finish "," start "," finish_with_state ","handle finish ","handle start "," build_handle "," build_handle  finish "," build_handle  start "," build_ build_handle  "]}," ActiveSupport Notifications Instrumenter initialize":{"type":"method","name":"initialize","children":[],"call":[" unique_id ","LegacyHandle Wrapper  new ","notifier respond_to? ","LegacyHandle Wrapper  new  respond_to? "]}," ActiveSupport Notifications Fanout Subscriber matches?":{"type":"method","name":"matches?","children":[],"call":["@pattern === "," === ","@pattern =~ ","name to_s ","@pattern ! "]}," ActiveSupport Notifications Fanout Subscriber subscribed_to?":{"type":"method","name":"subscribed_to?","children":[],"call":["@pattern === ","name to_s ","@pattern ! ","@pattern =~ "]}," ActiveSupport Notifications Fanout Subscriber publish":{"type":"method","name":"publish","children":[],"call":["@delegate call "," push "," matches? ","args first "," subscribed_to? "]}," ActiveSupport Notifications Fanout Subscriber initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Notifications Fanout wait":{"type":"method","name":"wait","children":[],"call":[]}," ActiveSupport Notifications Fanout listening?":{"type":"method","name":"listening?","children":[],"call":[" listeners_for any? "," listeners_for ","s silenced? ! ","s silenced? "," all_listeners_for any? "," all_listeners_for "]}," ActiveSupport Notifications Fanout listeners_for":{"type":"method","name":"listeners_for","children":[],"call":["s subscribed_to? ","@subscribers select ","@listeners_for [] "," synchronize ","@string_subscribers [] + ","@other_subscribers select ","@string_subscribers [] ","s silenced? "," all_listeners_for reject "," all_listeners_for "]}," ActiveSupport Notifications Fanout publish":{"type":"method","name":"publish","children":[],"call":["s publish "," listeners_for each "," listeners_for ","@subscribers each ","@listeners_for []= ","@subscribers select ","listeners each ","@listeners_for [] "," iterate_guarding_exceptions "," @listeners_for [] _for each "," @listeners_for [] _for ","@@listeners_for [] _for []= ","@listeners_for []  each ","@@listeners_for [] _for [] "]}," ActiveSupport Notifications Fanout unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":["@listeners_for clear ","s matches? ","@subscribers reject! ","@subscribers delete "," synchronize ","@other_subscribers delete ","@listeners_for delete ","@string_subscribers [] delete ","@string_subscribers [] ","String  === ","subscriber_or_name try ","sub unsubscribe! ","@other_subscribers each ","@string_subscribers [] clear "," clear_cache "]}," ActiveSupport Notifications Fanout subscribe":{"type":"method","name":"subscribe","children":[],"call":["@listeners_for clear ","@subscribers << ","Subscriber  new tap ","Subscriber  new ","@subscribers last "," synchronize ","Subscribers  new ","@other_subscribers << ","@listeners_for delete ","@string_subscribers [] << ","@string_subscribers [] ","String  === "," raise "," clear_cache ","@Subscribers  new s << ","@Subscribers  new s last ","@other_Subscribers  new s << ","@string_Subscribers  new s [] << ","@string_Subscribers  new s [] "]}," ActiveSupport Notifications Fanout initialize":{"type":"method","name":"initialize","children":[],"call":["ThreadSafe Cache  new ","Concurrent Map  new ","h []= ","Hash  new ","h compute_if_absent "]}," ActiveSupport Multibyte Unicode database":{"type":"method","name":"database","children":[],"call":["UnicodeDatabase  new "]}," ActiveSupport Multibyte Unicode tidy_byte":{"type":"method","name":"tidy_byte","children":[],"call":["byte - ","byte < ","(or\n  (send\n    (send\n      (send nil :database) :cp1252) :[]\n    (lvar :byte))\n  (lvar :byte)) pack unpack ","(or\n  (send\n    (send\n      (send nil :database) :cp1252) :[]\n    (lvar :byte))\n  (lvar :byte)) pack "," database cp1252 [] "," database cp1252 "," database "]}," ActiveSupport Multibyte Unicode UnicodeDatabase filename":{"type":"method","name":"filename","children":[],"call":[]}," ActiveSupport Multibyte Unicode UnicodeDatabase dirname":{"type":"method","name":"dirname","children":[],"call":[]}," ActiveSupport Multibyte Unicode UnicodeDatabase load":{"type":"method","name":"load","children":[{"type":"method","name":"===","children":[],"asgn":[],"call":["i === "," detect "]}],"call":[" attr_reader ","i === "," detect ","@boundary [] instance_eval ","@boundary [] ","@boundary [] kind_of? ","@boundary each "," raise ","IOError  new ","e message ","Marshal  load ","f read ","File  open "," class filename "," class ","@boundary each_key "]}," ActiveSupport Multibyte Unicode UnicodeDatabase initialize":{"type":"method","name":"initialize","children":[],"call":["Hash  new ","Codepoint  new "]}," ActiveSupport Multibyte Unicode apply_mapping":{"type":"method","name":"apply_mapping","children":[],"call":["(send\n  (send nil :u_unpack\n    (lvar :string)) :map) pack ","ncp > ","cp send "," database codepoints [] "," database codepoints "," database "," u_unpack map "," u_unpack ","(send\n  (send\n    (lvar :string) :each_codepoint) :map) pack ","string each_codepoint map ","string each_codepoint ","cp send  > ","n database codepoints []  > "," database codepoints []  send "]}," ActiveSupport Multibyte Unicode normalize":{"type":"method","name":"normalize","children":[],"call":["(lvar :form) pack "," raise "," caller "," compose_codepoints "," reorder_characters "," decompose_codepoints "," u_unpack "," compose "," decompose ","string codepoints to_a ","string codepoints ","U* freeze ","ActiveSupport Deprecation  warn ","(str \"            ActiveSupport::Multibyte::Unicode#normalize is deprecated and will be\\n\") squish ","string unicode_normalize ","NORMALIZATION_FORM_ALIASES  [] "," compose_ u_unpack  "," compose_string codepoints to_a  "," decompose_ u_unpack  "," decompose_string codepoints to_a  ","string  u_unpack  to_a ","string string codepoints to_a  to_a ","string  u_unpack  ","string string codepoints to_a  "]}," ActiveSupport Multibyte Unicode tidy_bytes":{"type":"method","name":"tidy_bytes","children":[],"call":["bytes flatten compact pack unpack pack ","bytes flatten compact pack unpack ","bytes flatten compact pack ","bytes flatten compact ","bytes flatten ","bytes empty? ","byte < ","bytes []= "," tidy_byte ","bytes last ","i == ","bytes length - ","bytes length ","bytes [] ","i - ","(irange\n  (int 1)\n  (begin\n    (send\n      (lvar :i) :-\n      (lvar :last_lead)))) each ","conts_expected > ","conts_expected == ","byte > ","bytes each_index ","string unpack ","(send\n  (send\n    (lvar :string) :unpack\n    (str \"C*\")) :map) flatten compact pack unpack pack ","(send\n  (send\n    (lvar :string) :unpack\n    (str \"C*\")) :map) flatten compact pack unpack ","(send\n  (send\n    (lvar :string) :unpack\n    (str \"C*\")) :map) flatten compact pack ","(send\n  (send\n    (lvar :string) :unpack\n    (str \"C*\")) :map) flatten compact ","(send\n  (send\n    (lvar :string) :unpack\n    (str \"C*\")) :map) flatten ","string unpack map ","out encode! ","reader finish ","out << ","error_bytes encode ","error_bytes nil? ","reader primitive_errinfo ","reader primitive_convert "," loop "," force_encoding ","string dup ","Encoding Converter  new "," recode_windows1252_chars ","string empty? ","string scrub ","string encode ","string ascii_only? ","bytes [] s flatten compact pack unpack pack ","string unpack  flatten compact pack unpack pack ","bytes [] s flatten compact pack unpack ","string unpack  flatten compact pack unpack ","bytes [] s flatten compact pack ","string unpack  flatten compact pack ","bytes [] s flatten compact ","string unpack  flatten compact ","bytes [] s flatten ","string unpack  flatten ","bytes [] s empty? ","string unpack  empty? ","bytes []  < ","bytes [] s []= ","string unpack  []= "," tidy_bytes []  ","bytes [] s last ","string unpack  last ","bytes [] s length - ","string unpack  length - ","bytes [] s length ","string unpack  length ","bytes [] s [] ","string unpack  [] ","bytes []  > ","bytes [] s each_index ","string unpack  each_index "," force_encoding  encode! ","Encoding Converter  new  finish "," force_encoding  << ","error_bytes [] s encode ","error_string unpack  encode ","error_bytes [] s nil? ","error_string unpack  nil? ","Encoding Converter  new  primitive_errinfo ","Encoding Converter  new  primitive_convert "]}," ActiveSupport Multibyte Unicode compose_codepoints":{"type":"method","name":"compose_codepoints","children":[],"call":["codepoints [] ","current combining_class == ","current combining_class ","codepoints delete_at ","codepoints []= ","composition nil? ","ref [] "," database composition_map [] "," database composition_map "," database ","current combining_class > "," database codepoints [] "," database codepoints ","(send\n  (send\n    (lvar :lindex) :*\n    (const nil :HANGUL_VCOUNT)) :+\n  (lvar :vindex)) * + + ","(send\n  (send\n    (lvar :lindex) :*\n    (const nil :HANGUL_VCOUNT)) :+\n  (lvar :vindex)) * + ","(send\n  (send\n    (lvar :lindex) :*\n    (const nil :HANGUL_VCOUNT)) :+\n  (lvar :vindex)) * ","lindex * + ","lindex * ","starter_pos + ","tindex < ","0 <= ","codepoints [] - ","vindex < ","lindex < ","starter_char - ","pos < ","codepoints length - ","codepoints length "," database codepoints []  combining_class == "," database codepoints []  combining_class ","ref []  nil? "," database composition_map []  [] "," database ref [] _map [] "," database ref [] _map "," database codepoints []  combining_class > ","(send\n  (send\n    (lvar :starter_char - ) :*\n    (const nil :HANGUL_VCOUNT)) :+\n  (lvar :vindex)) * + + ","(send\n  (send\n    (lvar :starter_char - ) :*\n    (const nil :HANGUL_VCOUNT)) :+\n  (lvar :vindex)) * + ","(send\n  (send\n    (lvar :starter_char - ) :*\n    (const nil :HANGUL_VCOUNT)) :+\n  (lvar :vindex)) * ","starter_char -  * + ","starter_char -  * ","starter_char -  < ","codepoints []  - "]}," ActiveSupport Multibyte Unicode decompose_codepoints":{"type":"method","name":"decompose_codepoints","children":[],"call":["decomposed << ","decomposed concat "," decompose_codepoints ","ncp dup ","type == "," database codepoints [] decomp_type ! "," database codepoints [] decomp_type "," database codepoints [] "," database codepoints "," database "," database codepoints [] decomp_mapping ","ncp << ","HANGUL_TBASE  + ","tindex == ","sindex % ","HANGUL_VBASE  + ","(send\n  (lvar :sindex) :%\n  (const nil :HANGUL_NCOUNT)) / ","HANGUL_LBASE  + ","sindex / ","cp - ","cp < ","HANGUL_SBASE  <= ","codepoints inject "," database codepoints [] decomp_mapping  dup "," database codepoints [] decomp_mapping  << ","sindex %  == ","cp -  % ","(send\n  (lvar :cp - ) :%\n  (const nil :HANGUL_NCOUNT)) / ","cp -  / "]}," ActiveSupport Multibyte Unicode reorder_characters":{"type":"method","name":"reorder_characters","children":[],"call":["pos > ","codepoints []= ","cp1 code ","cp2 code ","pos + ","cp2 combining_class > ","cp2 combining_class ","cp1 combining_class > ","cp1 combining_class "," database codepoints [] ","codepoints [] "," database codepoints "," database ","pos < ","codepoints length - ","codepoints length ","codepoints codepoints length -  - ","codepoints codepoints length -  "]}," ActiveSupport Multibyte Unicode g_pack":{"type":"method","name":"g_pack","children":[],"call":["(send\n  (lvar :unpacked) :flatten) pack ","unpacked flatten "]}," ActiveSupport Multibyte Unicode g_unpack":{"type":"method","name":"g_unpack","children":[],"call":["unpacked << ","codepoints [] ","pos - "," database boundary [] === "," database boundary [] "," database boundary "," database "," in_char_class? ","current == ","previous == ","pos < ","codepoints length "," u_unpack "," u_unpack  [] ","codepoints []  == "," u_unpack  length "]}," ActiveSupport Multibyte Unicode in_char_class?":{"type":"method","name":"in_char_class?","children":[],"call":[" database boundary [] === "," database boundary [] "," database boundary "," database ","classes detect "]}," ActiveSupport Multibyte Unicode u_unpack":{"type":"method","name":"u_unpack","children":[],"call":[" raise ","string unpack "]}," ActiveSupport Multibyte Unicode codepoints_to_pattern":{"type":"method","name":"codepoints_to_pattern","children":[],"call":[]}," ActiveSupport Multibyte Chars chars":{"type":"method","name":"chars","children":[],"call":[" class new "," class "]}," ActiveSupport Multibyte Chars padding":{"type":"method","name":"padding","children":[],"call":[" chars slice "," chars ","padstr * ","(send\n  (lvar :padsize) :/\n  (send\n    (send\n      (const nil :Unicode) :u_unpack\n      (lvar :padstr)) :size)) + ","padsize / ","Unicode  u_unpack size ","Unicode  u_unpack ","padsize != "," new slice "," new ","(send\n  (lvar :padsize) :/\n  (send\n    (send nil :u_unpack\n      (lvar :padstr)) :size)) + "," u_unpack size "," u_unpack "]}," ActiveSupport Multibyte Chars justify":{"type":"method","name":"justify","children":[],"call":[" chars ","@wrapped_string dup insert insert ","@wrapped_string dup insert ","@wrapped_string dup "," padding ","(send\n  (lvar :padsize) :/\n  (float 2.0)) ceil ","padsize / ","(send\n  (lvar :padsize) :/\n  (float 2.0)) floor ","padsize > ","integer - "," size "," raise ","padstr length == ","padstr length "," class padding "," class ","(send\n  (lvar :integer - ) :/\n  (float 2.0)) ceil ","integer -  / ","(send\n  (lvar :integer - ) :/\n  (float 2.0)) floor ","integer -  > "]}," ActiveSupport Multibyte Chars translate_offset":{"type":"method","name":"translate_offset","children":[],"call":["@wrapped_string [] unpack length ","@wrapped_string [] unpack ","@wrapped_string [] ","@wrapped_string dup force_encoding ","@wrapped_string dup ","@wrapped_string respond_to? ","@wrapped_string == ","byte_offset nil? ","@wrapped_string byteslice unpack length ","@wrapped_string byteslice unpack ","@wrapped_string byteslice ","@wrapped_string dup force_encoding  [] unpack length ","@wrapped_string dup force_encoding  [] unpack ","@wrapped_string dup force_encoding  [] ","@wrapped_string dup force_encoding  dup force_encoding ","@wrapped_string dup force_encoding  dup ","@wrapped_string dup force_encoding  respond_to? ","@wrapped_string dup force_encoding  == ","@wrapped_string dup force_encoding  byteslice unpack length ","@wrapped_string dup force_encoding  byteslice unpack ","@wrapped_string dup force_encoding  byteslice "]}," ActiveSupport Multibyte Chars tidy_bytes":{"type":"method","name":"tidy_bytes","children":[],"call":[" chars ","Unicode  tidy_bytes ","bytes flatten compact pack unpack pack ","bytes flatten compact pack unpack ","bytes flatten compact pack ","bytes flatten compact ","bytes flatten ","bytes empty? ","byte < ","bytes []= "," tidy_byte ","bytes last ","i == ","bytes length - ","bytes length ","bytes [] ","i - ","(irange\n  (int 1)\n  (begin\n    (send\n      (lvar :i) :-\n      (lvar :last_lead)))) each ","conts_expected > ","conts_expected == ","byte > ","bytes each_index ","string unpack ","(send\n  (send\n    (lvar :string) :unpack\n    (str \"C*\")) :map) flatten compact pack unpack pack ","(send\n  (send\n    (lvar :string) :unpack\n    (str \"C*\")) :map) flatten compact pack unpack ","(send\n  (send\n    (lvar :string) :unpack\n    (str \"C*\")) :map) flatten compact pack ","(send\n  (send\n    (lvar :string) :unpack\n    (str \"C*\")) :map) flatten compact ","(send\n  (send\n    (lvar :string) :unpack\n    (str \"C*\")) :map) flatten ","string unpack map "," class tidy_bytes "," class ","Unicode  tidy_bytes [] s ","Unicode  tidy_string unpack  ","bytes [] s flatten compact pack unpack pack ","string unpack  flatten compact pack unpack pack ","bytes [] s flatten compact pack unpack ","string unpack  flatten compact pack unpack ","bytes [] s flatten compact pack ","string unpack  flatten compact pack ","bytes [] s flatten compact ","string unpack  flatten compact ","bytes [] s flatten ","string unpack  flatten ","bytes [] s empty? ","string unpack  empty? ","bytes []  < ","bytes [] s []= ","string unpack  []= "," tidy_bytes []  ","bytes [] s last ","string unpack  last ","bytes [] s length - ","string unpack  length - ","bytes [] s length ","string unpack  length ","bytes [] s [] ","string unpack  [] ","bytes []  > ","bytes [] s each_index ","string unpack  each_index "," class tidy_bytes [] s "," class tidy_string unpack  "]}," ActiveSupport Multibyte Chars g_length":{"type":"method","name":"g_length","children":[],"call":["Unicode  g_unpack length ","Unicode  g_unpack "," class g_unpack length "," class g_unpack "," class "]}," ActiveSupport Multibyte Chars compose":{"type":"method","name":"compose","children":[],"call":[" chars ","Unicode  compose_codepoints pack ","Unicode  compose_codepoints ","Unicode  u_unpack "," class compose_codepoints pack "," class compose_codepoints "," class u_unpack "," class ","Unicode  compose pack ","Unicode  compose ","@wrapped_string codepoints to_a ","@wrapped_string codepoints "]}," ActiveSupport Multibyte Chars decompose":{"type":"method","name":"decompose","children":[],"call":[" chars ","Unicode  decompose_codepoints pack ","Unicode  decompose_codepoints ","Unicode  u_unpack "," class decompose_codepoints pack "," class decompose_codepoints "," class u_unpack "," class ","Unicode  decompose pack ","Unicode  decompose ","@wrapped_string codepoints to_a ","@wrapped_string codepoints "]}," ActiveSupport Multibyte Chars normalize":{"type":"method","name":"normalize","children":[],"call":[" chars ","Unicode  normalize ","(lvar :form) pack "," raise "," caller "," class compose_codepoints "," class reorder_characters "," class decompose_codepoints "," class "," class u_unpack ","ActiveSupport Deprecation  warn ","(str \"            ActiveSupport::Multibyte::Chars#normalize is deprecated and will be\\n\") squish "," send ","Unicode NORMALIZATION_FORM_ALIASES  [] ","Unicode  default_normalization_form "," class compose_ class u_unpack  "," class decompose_ class u_unpack  "]}," ActiveSupport Multibyte Chars titleize":{"type":"method","name":"titleize","children":[],"call":[" chars ","Unicode  apply_mapping "," downcase to_s gsub "," downcase to_s "," downcase ","Unicode  upcase ","1 upcase "]}," ActiveSupport Multibyte Chars capitalize":{"type":"method","name":"capitalize","children":[],"call":["(or\n  (send nil :slice\n    (int 0))\n  (send nil :chars\n    (str \"\"))) upcase + ","(or\n  (send nil :slice\n    (irange\n      (int 1)\n      (int -1)))\n  (send nil :chars\n    (str \"\"))) downcase "," chars "," slice ","(or\n  (send nil :slice\n    (int 0))\n  (send nil :chars\n    (str \"\"))) upcase "]}," ActiveSupport Multibyte Chars downcase":{"type":"method","name":"downcase","children":[],"call":[" chars ","Unicode  apply_mapping "," apply_mapping ","Unicode  downcase "]}," ActiveSupport Multibyte Chars upcase":{"type":"method","name":"upcase","children":[],"call":[" chars ","Unicode  apply_mapping "," apply_mapping ","Unicode  upcase "]}," ActiveSupport Multibyte Chars limit":{"type":"method","name":"limit","children":[],"call":[" slice "," translate_offset "," truncate_bytes "," chars ","@wrapped_string truncate_bytes "]}," ActiveSupport Multibyte Chars slice":{"type":"method","name":"slice","children":[],"call":[" chars ","cps pack ","Unicode  u_unpack slice ","Unicode  u_unpack ","(lvar :character) pack ","Unicode  u_unpack [] ","args [] ","args [] kind_of? ","args size == ","args size ","@wrapped_string slice ","cps nil? "," raise ","args [] class ","args [] is_a? ! ","args [] is_a? ","args first class ","args first ","(or\n  (send\n    (send\n      (lvar :args) :first) :is_a?\n    (const nil :Numeric))\n  (send\n    (send\n      (lvar :args) :first) :is_a?\n    (const nil :Regexp))) ! ","args first is_a? ","args size > ","result nil? "," class u_unpack slice pack "," class u_unpack slice "," class u_unpack "," class ","character nil? "," class u_unpack [] ","Unicode  u_unpack slice pack ","Unicode  u_unpack slice  pack "," class u_unpack slice  pack ","(lvar :Unicode  u_unpack [] ) pack ","(lvar : class u_unpack [] ) pack ","Unicode  u_unpack slice  nil? "," class u_unpack slice  nil? ","@wrapped_string slice  nil? ","cps pack  nil? "," class u_unpack slice pack  nil? ","(lvar :character) pack  nil? ","Unicode  u_unpack slice pack  nil? ","Unicode  u_unpack []  nil? "," class u_unpack []  nil? "]}," ActiveSupport Multibyte Chars reverse":{"type":"method","name":"reverse","children":[],"call":[" chars ","Unicode  g_unpack reverse flatten pack ","Unicode  g_unpack reverse flatten ","Unicode  g_unpack reverse ","Unicode  g_unpack "," class g_unpack reverse flatten pack "," class g_unpack reverse flatten "," class g_unpack reverse "," class g_unpack "," class ","Unicode  unpack_graphemes reverse flatten pack ","Unicode  unpack_graphemes reverse flatten ","Unicode  unpack_graphemes reverse ","Unicode  unpack_graphemes ","@wrapped_string scan reverse join ","@wrapped_string scan reverse ","@wrapped_string scan ","@wrapped_string grapheme_clusters reverse join ","@wrapped_string grapheme_clusters reverse ","@wrapped_string grapheme_clusters "]}," ActiveSupport Multibyte Chars []=":{"type":"method","name":"[]=","children":[],"call":["@wrapped_string replace ","result pack ","result []= ","Unicode  u_unpack ","Range  new ","min + - ","min + ","Unicode  u_unpack length "," index ","args [] to_s ","args [] "," raise ","args [] min >= ","result length ","args [] min ","args first is_a? ","args first ","(lvar :replace_by) pack ","replace_by is_a? ","args [] nil? ","args [] >= ","args [] is_a? ","@wrapped_string []= ","args pop "," class u_unpack "," class "," class u_unpack length ","Unicode  u_unpack  pack "," class u_unpack  pack ","Unicode  u_unpack  []= "," class u_unpack  []= "," index  + - ","args []  + - "," index  + ","args []  + ","args []  index  >= ","args [] args []  >= ","Unicode  u_unpack  length "," class u_unpack  length ","args []  index  ","args [] args []  ","(lvar :(lvar :replace_by) pack ) pack ","(lvar :args pop ) pack ","(lvar :replace_by) pack  is_a? ","args pop  is_a? "]}," ActiveSupport Multibyte Chars split":{"type":"method","name":"split","children":[],"call":["i mb_chars ","@wrapped_string split map ","@wrapped_string split "," class new "," class "]}," ActiveSupport Multibyte Chars =~":{"type":"method","name":"=~","children":[],"call":["@wrapped_string =~ "," translate_offset "]}," ActiveSupport Multibyte Chars center":{"type":"method","name":"center","children":[],"call":[" justify "]}," ActiveSupport Multibyte Chars ljust":{"type":"method","name":"ljust","children":[],"call":[" justify "]}," ActiveSupport Multibyte Chars rjust":{"type":"method","name":"rjust","children":[],"call":[" justify "]}," ActiveSupport Multibyte Chars ord":{"type":"method","name":"ord","children":[],"call":["Unicode  u_unpack [] ","Unicode  u_unpack "," class u_unpack [] "," class u_unpack "," class "]}," ActiveSupport Multibyte Chars strip":{"type":"method","name":"strip","children":[],"call":[" rstrip lstrip "," rstrip "]}," ActiveSupport Multibyte Chars lstrip":{"type":"method","name":"lstrip","children":[],"call":[" chars ","@wrapped_string gsub "]}," ActiveSupport Multibyte Chars rstrip":{"type":"method","name":"rstrip","children":[],"call":[" chars ","@wrapped_string gsub "]}," ActiveSupport Multibyte Chars size":{"type":"method","name":"size","children":[],"call":["Unicode  u_unpack size ","Unicode  u_unpack "," class u_unpack size "," class u_unpack "," class "]}," ActiveSupport Multibyte Chars rindex":{"type":"method","name":"rindex","children":[],"call":["Unicode  u_unpack size ","Unicode  u_unpack ","@wrapped_string slice ","@wrapped_string rindex "," first wrapped_string length "," first wrapped_string "," first "," length "," class u_unpack size "," class u_unpack "," class ","@wrapped_string r@wrapped_string rindex  "]}," ActiveSupport Multibyte Chars index":{"type":"method","name":"index","children":[],"call":["Unicode  u_unpack size ","Unicode  u_unpack ","@wrapped_string slice ","@wrapped_string index "," first wrapped_string length "," first wrapped_string "," first "," class u_unpack size "," class u_unpack "," class ","@wrapped_string @wrapped_string index  "]}," ActiveSupport Multibyte Chars include?":{"type":"method","name":"include?","children":[],"call":["@wrapped_string include? "]}," ActiveSupport Multibyte Chars insert":{"type":"method","name":"insert","children":[],"call":["@wrapped_string replace ","Unicode  u_unpack insert pack ","Unicode  u_unpack insert ","Unicode  u_unpack "," raise ","offset > ","unpacked length "," class u_unpack insert pack "," class u_unpack insert "," class u_unpack "," class ","Unicode  u_unpack  length "," class u_unpack  length "]}," ActiveSupport Multibyte Chars +":{"type":"method","name":"+","children":[],"call":[" chars ","@wrapped_string + "," << "]}," ActiveSupport Multibyte Chars wants?":{"type":"method","name":"wants?","children":[],"call":[]}," ActiveSupport Multibyte Chars <=>":{"type":"method","name":"<=>","children":[],"call":["@wrapped_string <=> ","other to_s "]}," ActiveSupport Multibyte Chars consumes?":{"type":"method","name":"consumes?","children":[],"call":[]}," ActiveSupport Multibyte Chars acts_like_string?":{"type":"method","name":"acts_like_string?","children":[],"call":[]}," ActiveSupport Multibyte Chars respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["@wrapped_string respond_to? "]}," ActiveSupport Multibyte Chars method_missing":{"type":"method","name":"method_missing","children":[],"call":[" chars ","result kind_of? ","@wrapped_string __send__ ","method to_s =~ ","method to_s ","(str \"!$\") match? ","method end_with? ","@wrapped_string __send__  kind_of? "]}," ActiveSupport Multibyte Chars initialize":{"type":"method","name":"initialize","children":[],"call":["@wrapped_string force_encoding ","@wrapped_string frozen? "]}," ActiveSupport LogSubscriber color":{"type":"method","name":"color","children":[],"call":[" class const_get ","color to_s upcase ","color to_s "," class ","color is_a? "," colorize_logging ","color upcase ","MODES  [] "," mode_from "," class const_get  to_s upcase "," class const_get  to_s "," class const_get  is_a? ","  class const_get ize_logging "," class const_get  upcase ","  mode_from _from "]}," ActiveSupport LogSubscriber call":{"type":"method","name":"call","children":[],"call":[" logger error ","e message ","e class ","message inspect "," logger "," send ","ActiveSupport Notifications Event  new ","message split first ","message split "," log_exception ","event name "]}," ActiveSupport LogSubscriber flush_all!":{"type":"method","name":"flush_all!","children":[],"call":[" flushable_loggers each "," flushable_loggers ","log flush "," logger flush "," logger "," logger respond_to? "]}," ActiveSupport LogSubscriber flushable_loggers":{"type":"method","name":"flushable_loggers","children":[],"call":["l respond_to? ","loggers select ","loggers uniq! "," log_subscribers map "," log_subscribers "," log_subscribers map  select "," log_subscribers map  uniq! "]}," ActiveSupport LogSubscriber log_subscribers":{"type":"method","name":"log_subscribers","children":[],"call":[" subscribers "]}," ActiveSupport LogSubscriber attach_to":{"type":"method","name":"attach_to","children":[],"call":["notifier subscribe ","call == ","event to_s ","log_subscriber public_methods each ","log_subscriber public_methods "," log_subscribers << "," log_subscribers "," new ","(str \"start\") include? "," set_event_levels "]}," ActiveSupport LogSubscriber logger":{"type":"method","name":"logger","children":[],"call":["Rails  logger ","LogSubscriber  logger ","Rails  respond_to? "]}," ActiveSupport LogSubscriber TestHelper set_logger":{"type":"method","name":"set_logger","children":[],"call":["ActiveSupport LogSubscriber  logger= "]}," ActiveSupport LogSubscriber TestHelper wait":{"type":"method","name":"wait","children":[],"call":["@notifier wait "]}," ActiveSupport LogSubscriber TestHelper MockLogger flush":{"type":"method","name":"flush","children":[],"call":[]}," ActiveSupport LogSubscriber TestHelper MockLogger logged":{"type":"method","name":"logged","children":[],"call":["l to_s strip ","l to_s ","@logged [] compact map ","@logged [] compact ","@logged [] "]}," ActiveSupport LogSubscriber TestHelper MockLogger method_missing":{"type":"method","name":"method_missing","children":[],"call":["@logged [] << ","@logged [] "," block_given? "]}," ActiveSupport LogSubscriber TestHelper MockLogger initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","Hash  new "]}," ActiveSupport LogSubscriber TestHelper teardown":{"type":"method","name":"teardown","children":[],"call":["ActiveSupport Notifications  notifier= "," set_logger "]}," ActiveSupport LogSubscriber TestHelper setup":{"type":"method","name":"setup","children":[],"call":["ActiveSupport Notifications  notifier= "," set_logger ","ActiveSupport LogSubscriber  colorize_logging= ","ActiveSupport Notifications Fanout  new ","MockLogger  new ","ActiveSupport Notifications  notifier "]}," ActiveSupport run_load_hooks":{"type":"method","name":"run_load_hooks","children":[],"call":[]}," ActiveSupport execute_hook":{"type":"method","name":"execute_hook","children":[],"call":[]}," ActiveSupport on_load":{"type":"method","name":"on_load","children":[],"call":[]}," ActiveSupport JSON Variable encode_json":{"type":"method","name":"encode_json","children":[],"call":[]}," ActiveSupport JSON Variable as_json":{"type":"method","name":"as_json","children":[],"call":[]}," Hash encode_json":{"type":"method","name":"encode_json","children":[],"call":["(send nil :map) * ","encoder encode ","k to_s "," map "]}," Array encode_json":{"type":"method","name":"encode_json","children":[],"call":["(send nil :map) * ","encoder encode "," map ","v encode_json "]}," BigDecimal as_json":{"type":"method","name":"as_json","children":[],"call":[" to_s ","ActiveSupport  encode_big_decimal_as_string "," finite? "]}," Numeric encode_json":{"type":"method","name":"encode_json","children":[],"call":[" to_s "]}," String encode_json":{"type":"method","name":"encode_json","children":[],"call":["encoder escape "]}," ActiveSupport JSON Encoding Encoder check_for_circular_references":{"type":"method","name":"check_for_circular_references","children":[],"call":["@seen shift ","@seen unshift "," raise ","object equal? ","@seen any? ","@seen delete ","value __id__ ","@seen add? "]}," ActiveSupport JSON Encoding Encoder escape":{"type":"method","name":"escape","children":[],"call":["Encoding  escape "]}," ActiveSupport JSON Encoding Encoder encode":{"type":"method","name":"encode","children":[],"call":["value as_json encode_json ","value as_json "," options "," check_for_circular_references ","jsonified encode_json "," options_for ","value as_json  encode_json "]}," ActiveSupport JSON Encoding Encoder initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new "]}," ActiveSupport Inflector Inflections instance":{"type":"method","name":"instance","children":[],"call":[]}," I18n Railtie validate_fallbacks":{"type":"method","name":"validate_fallbacks","children":[],"call":[" raise ","fallbacks inspect ","fallbacks empty? ! ","fallbacks empty? "]}," I18n Railtie init_fallbacks":{"type":"method","name":"init_fallbacks","children":[],"call":["I18n  fallbacks= ","I18n Locale Fallbacks  new ","Array  wrap ","(splat\n  (send\n    (begin\n      (or\n        (send\n          (lvar :fallbacks) :[]\n          (sym :defaults))\n        (array))) :<<\n    (send\n      (lvar :fallbacks) :[]\n      (sym :map)))) compact ","(or\n  (send\n    (lvar :fallbacks) :[]\n    (sym :defaults))\n  (array)) << ","fallbacks [] "," include_fallbacks_module "]}," I18n Railtie include_fallbacks_module":{"type":"method","name":"include_fallbacks_module","children":[],"call":["I18n  backend class send ","I18n  backend class ","I18n  backend "]}," I18n Railtie reloader":{"type":"method","name":"reloader","children":[],"call":[]}," ActiveSupport HashWithIndifferentAccess convert_value":{"type":"method","name":"convert_value","children":[],"call":[" class new_from_hash_copying_default "," class ","e is_a? ","value collect ","e with_indifferent_access ","value with_indifferent_access ","value dup replace "," convert_value ","value map ","value dup ","value is_a? ","value class == ","value class ","value nested_under_indifferent_access ","value map! ","options [] == ","options [] ","value to_hash ","value frozen? ","options [] != ","conversion != ","conversion == ","value dup  collect ","value dup  with_indifferent_access ","value dup  dup replace "," convert_value dup  ","value dup  map ","value dup  dup ","value dup  is_a? ","value dup  class == ","value dup  class ","value dup  nested_under_indifferent_access ","value dup  map! ","value dup  to_hash ","value dup  frozen? "]}," ActiveSupport HashWithIndifferentAccess convert_key":{"type":"method","name":"convert_key","children":[],"call":["key to_s ","key kind_of? ","key name "]}," ActiveSupport HashWithIndifferentAccess to_hash":{"type":"method","name":"to_hash","children":[],"call":["Hash  new merge! ","Hash  new "," default ","_new_hash []= "," convert_value "," convert_key "," each "," set_defaults ","Hash  new  []= "]}," ActiveSupport HashWithIndifferentAccess to_options!":{"type":"method","name":"to_options!","children":[],"call":[]}," ActiveSupport HashWithIndifferentAccess symbolize_keys":{"type":"method","name":"symbolize_keys","children":[],"call":[" to_hash symbolize_keys "," to_hash "," to_hash symbolize_keys! "]}," ActiveSupport HashWithIndifferentAccess stringify_keys":{"type":"method","name":"stringify_keys","children":[],"call":[" dup "]}," ActiveSupport HashWithIndifferentAccess stringify_keys!":{"type":"method","name":"stringify_keys!","children":[],"call":[]}," ActiveSupport HashWithIndifferentAccess delete":{"type":"method","name":"delete","children":[],"call":[" convert_key "]}," ActiveSupport HashWithIndifferentAccess reverse_merge!":{"type":"method","name":"reverse_merge!","children":[],"call":[" replace "," reverse_merge "," class new "," class "]}," ActiveSupport HashWithIndifferentAccess reverse_merge":{"type":"method","name":"reverse_merge","children":[],"call":[" class new_from_hash_copying_default "," class ","other_hash with_indifferent_access "," class new "]}," ActiveSupport HashWithIndifferentAccess merge":{"type":"method","name":"merge","children":[],"call":[" dup update "," dup "]}," ActiveSupport HashWithIndifferentAccess dup":{"type":"method","name":"dup","children":[],"call":["HashWithIndifferentAccess  new ","new_hash default= "," default "," class new tap "," class new "," class "," set_defaults "]}," ActiveSupport HashWithIndifferentAccess values_at":{"type":"method","name":"values_at","children":[],"call":[" [] "," convert_key ","indices collect ","keys map ","keys map! "]}," ActiveSupport HashWithIndifferentAccess fetch":{"type":"method","name":"fetch","children":[],"call":[" convert_key "]}," ActiveSupport HashWithIndifferentAccess key?":{"type":"method","name":"key?","children":[],"call":[" convert_key "]}," ActiveSupport HashWithIndifferentAccess update":{"type":"method","name":"update","children":[],"call":[" regular_writer "," convert_value "," convert_key ","other_hash each_pair ","other_hash is_a? "," [] "," key? "," block_given? ","other_hash to_hash each_pair ","other_hash to_hash "," update_with_single_argument ","other_hashes each ","other_hashes first ","other_hashes size == ","other_hashes size "]}," ActiveSupport HashWithIndifferentAccess []=":{"type":"method","name":"[]=","children":[],"call":[" regular_writer "," convert_value "," convert_key "]}," ActiveSupport HashWithIndifferentAccess new_from_hash_copying_default":{"type":"method","name":"new_from_hash_copying_default","children":[],"call":[]}," ActiveSupport HashWithIndifferentAccess default":{"type":"method","name":"default","children":[],"call":[" [] "," include? ","key to_s ","key is_a? "," convert_key ","args first ","args []= ","args map ","key to_s  to_s "," convert_key  to_s ","args first  to_s ","key to_s  is_a? "," convert_key  is_a? ","args first  is_a? "," convert_key to_s  "," convert_ convert_key  "," convert_args first  "]}," ActiveSupport HashWithIndifferentAccess initialize":{"type":"method","name":"initialize","children":[],"call":[" update ","constructor is_a? ","constructor respond_to? "," default_proc= ","hash default_proc "," default= ","hash default ","constructor to_hash ","constructor nil? ","constructor to_hash  default_proc ","constructor to_hash  default ","constructor to_constructor to_hash  "]}," ActiveSupport HashWithIndifferentAccess extractable_options?":{"type":"method","name":"extractable_options?","children":[],"call":[]}," ActiveSupport FileUpdateChecker execute_if_updated":{"type":"method","name":"execute_if_updated","children":[],"call":["@block call ","@last_update_at != "," updated_at "," execute "," updated? "," block_given? "]}," ActiveSupport FileUpdateChecker updated_at":{"type":"method","name":"updated_at","children":[],"call":["(send\n  (send nil :paths) :map) max ","File  stat mtime ","File  stat "," paths map "," paths ","Time  at ","(send\n  (lvar :all) :map) max ","File  mtime ","all map ","all concat ","Dir  [] ","File  exists? ","@files select "," max_mtime "]}," ActiveSupport FileUpdateChecker initialize":{"type":"method","name":"initialize","children":[],"call":[" updated_at "," compile_glob "," watched ","files freeze "," raise "]}," ActiveSupport DescendantsTracker descendants":{"type":"method","name":"descendants","children":[],"call":["DescendantsTracker  descendants "," accumulate_descendants ","@@excluded_descendants [] ","descendants reject! ","klass descendants "," subclasses concat "," subclasses flat_map "," subclasses ","subclasses concat "," descendants ","subclasses flat_map ","DescendantsTracker  reject! ","  subclasses  concat "," DescendantsTracker  reject!  concat ","  subclasses  flat_map "," DescendantsTracker  reject!  flat_map ","  subclasses  "," DescendantsTracker  reject!  "," subclasses  concat ","DescendantsTracker  reject!  concat "," subclasses  flat_map ","DescendantsTracker  reject!  flat_map "]}," ActiveSupport DescendantsTracker direct_descendants":{"type":"method","name":"direct_descendants","children":[],"call":["DescendantsTracker  direct_descendants ","@@direct_descendants [] ","descendants to_a ","DescendantsTracker  subclasses ","ActiveSupport Deprecation  warn "," subclasses ","DescendantsTracker  direct_@@direct_descendants []  ","@@direct_@@direct_descendants []  [] ","@@direct_descendants []  to_a "]}," ActiveSupport DescendantsTracker inherited":{"type":"method","name":"inherited","children":[],"call":[" direct_descendants << "," direct_descendants ","DescendantsTracker  store_inherited "]}," ActiveSupport DescendantsTracker clear":{"type":"method","name":"clear","children":[],"call":["@@direct_descendants clear ","ActiveSupport Dependencies  autoloaded? ","descendants reject! ","@@direct_descendants delete ","@@direct_descendants each ","Dependencies  autoloaded? ","classes member? ","direct_descendants_of_klass reject! "," raise ","@@excluded_descendants []= ","klass descendants each ","klass descendants ","classes each ","only member? ","only nil? ","@excluded_descendants << "]}," ActiveSupport Deprecation deprecated_method_warning":{"type":"method","name":"deprecated_method_warning","children":[],"call":[" deprecation_horizon "]}," ActiveSupport deprecate_methods":{"type":"method","name":"deprecate_methods","children":[],"call":["target_module module_eval ","14 + ","options [] inspect ","options [] ","target_module alias_method_chain ","method_names each ","options keys ","method_names extract_options! ","13 + ","method_names extract_options!  [] inspect ","method_names extract_options!  [] ","method_names extract_options!  keys ","method_names extract_method_names extract_options! ! "]}," ActiveSupport Deprecation behavior=":{"type":"method","name":"behavior=","children":[],"call":["DEFAULT_BEHAVIORS  [] ","Array  wrap map ","Array  wrap "]}," ActiveSupport Deprecation behavior":{"type":"method","name":"behavior","children":[],"call":["DEFAULT_BEHAVIORS  [] "," default_behavior "]}," ActiveSupport Dependencies constantize":{"type":"method","name":"constantize","children":[],"call":[" ref get "," ref ","Reference  get "]}," ActiveSupport Dependencies ref":{"type":"method","name":"ref","children":[],"call":["Reference  new "," references [] "," references "]}," ActiveSupport Dependencies Reference clear!":{"type":"method","name":"clear!","children":[],"call":[]}," ActiveSupport Dependencies Reference get":{"type":"method","name":"get","children":[],"call":["@@constants [] "]}," ActiveSupport Dependencies Reference initialize":{"type":"method","name":"initialize","children":[],"call":["@@constants []= ","name respond_to? ","name to_s "]}," ActiveSupport Dependencies local_const_defined?":{"type":"method","name":"local_const_defined?","children":[],"call":["mod const_defined? "]}," ActiveSupport Dependencies Loadable load":{"type":"method","name":"load","children":[],"call":[" load_dependency "]}," ActiveSupport Dependencies Loadable load_dependency":{"type":"method","name":"load_dependency","children":[],"call":[" raise ","exception blame_file! ","(send\n  (const nil :Dependencies) :new_constants_in\n  (const nil :Object)) presence ","Dependencies  new_constants_in ","Dependencies  load? ","ActiveSupport Dependencies  constant_watch_stack watching? ","ActiveSupport Dependencies  constant_watch_stack ","exception respond_to? ","Dependencies  constant_watch_stack watching? ","Dependencies  constant_watch_stack ","Dependencies  constant_watch_stack watching flatten uniq ","Dependencies  constant_watch_stack watching flatten ","Dependencies  constant_watch_stack watching "]}," ActiveSupport Dependencies Loadable exclude_from":{"type":"method","name":"exclude_from","children":[],"call":[]}," ActiveSupport Dependencies ModuleConstMissing const_missing":{"type":"method","name":"const_missing","children":[],"call":[" raise ","Dependencies  load_missing_constant ","Inflector  constantize ","nesting each ","nesting unshift ","klass_name to_s scan ","klass_name to_s ","nesting ! "," name presence "," name ","namespace constantize "," anonymous? "," guess_for_anonymous "]}," ActiveSupport Dependencies ModuleConstMissing exclude_from":{"type":"method","name":"exclude_from","children":[],"call":[]}," ActiveSupport Dependencies ModuleConstMissing append_features":{"type":"method","name":"append_features","children":[],"call":[]}," ActiveSupport Dependencies WatchStack pop_modules":{"type":"method","name":"pop_modules","children":[],"call":[" [] pop "," [] ","modules each ","@stack [] pop ","@stack [] "]}," ActiveSupport Dependencies WatchStack watch_namespaces":{"type":"method","name":"watch_namespaces","children":[],"call":["@watching << "," [] << "," [] ","watching << ","Inflector  constantize local_constant_names ","Inflector  constantize ","Dependencies  qualified_const_defined? ","Dependencies  to_constant_name ","namespaces map ","@stack [] << ","@stack [] ","Inflector  constantize local_constants ","Inflector  constantize constants "]}," ActiveSupport Dependencies WatchStack new_constants":{"type":"method","name":"new_constants","children":[],"call":[" pop_modules ","@watching pop ","constants << ","(send\n  (array\n    (lvar :namespace)\n    (lvar :suffix)) :-\n  (array\n    (str \"Object\"))) join ","(lvar :namespace) - ","new_constants each ","namespace_constants concat "," [] each "," [] ","mod local_constant_names - ","mod local_constant_names ","mod is_a? ","Inflector  constantize ","Dependencies  qualified_const_defined? "," [] last ","@watching last each ","@watching last ","@stack [] each ","@stack [] ","@stack [] last ","mod local_constants - ","mod local_constants ",":: freeze ","mod constants - ","mod constants "," pop_Inflector  constantize ules ","mod local_constant_names -  each ","mod local_constants -  each ","mod constants -  each ","Inflector  constantize  local_constant_names - ","Inflector  constantize  local_constant_names ","Inflector  constantize  is_a? ","Inflector  constantize  local_constants - ","Inflector  constantize  local_constants ","Inflector  constantize  constants - ","Inflector  constantize  constants "]}," ActiveSupport Dependencies WatchStack initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","Mutex  new ","Hash  new "]}," ActiveSupport Autoload autoloads":{"type":"method","name":"autoloads","children":[],"call":[]}," ActiveSupport Autoload eager_autoload!":{"type":"method","name":"eager_autoload!","children":[],"call":[]}," ActiveSupport Autoload eager_autoload":{"type":"method","name":"eager_autoload","children":[],"call":[]}," ActiveSupport Autoload autoload_at":{"type":"method","name":"autoload_at","children":[],"call":[]}," ActiveSupport Autoload autoload_under":{"type":"method","name":"autoload_under","children":[],"call":[]}," ActiveSupport Autoload autoload":{"type":"method","name":"autoload","children":[],"call":["@@autoloads []= ","Inflector  underscore ","(send\n  (self) :name) compact join ","(send\n  (self) :name) compact ","const_name to_s "," name ","@_autoloads []= ","(send nil :name) compact join ","(send nil :name) compact ","@_eagerloaded_constants << "]}," Time in_time_zone":{"type":"method","name":"in_time_zone","children":[],"call":["ActiveSupport TimeWithZone  new "," Time  __send__ "," getutc "," utc? "," Time  find_zone! "]}," Time get_zone":{"type":"method","name":"get_zone","children":[],"call":["ActiveSupport TimeZone  create ","time_zone name ","time_zone is_a? ","TZInfo Timezone  get ","ActiveSupport TimeZone  [] ","time_zone respond_to? ","time_zone nil? "]}," Time use_zone":{"type":"method","name":"use_zone","children":[],"call":[" Time  zone= "," get_zone "," Time  zone "," find_zone! "]}," Time zone=":{"type":"method","name":"zone=","children":[],"call":["Thread  current []= "," get_zone ","Thread  current "," find_zone! "," ActiveSupport IsolatedExecutionState  []= "]}," Time zone":{"type":"method","name":"zone","children":[],"call":[" zone_default ","Thread  current [] ","Thread  current "," ActiveSupport IsolatedExecutionState  [] "]}," Time to_datetime":{"type":"method","name":"to_datetime","children":[],"call":[" DateTime  civil "," Rational "," utc_offset "," sec "," min "," hour "," day "," month "," year "]}," Time to_time":{"type":"method","name":"to_time","children":[],"call":[" getlocal "," preserve_timezone "]}," Time to_date":{"type":"method","name":"to_date","children":[],"call":[" Date  new "," day "," month "," year "]}," Time formatted_offset":{"type":"method","name":"formatted_offset","children":[],"call":["ActiveSupport TimeZone  seconds_to_utc_offset "," utc_offset "," utc? "]}," Time to_formatted_s":{"type":"method","name":"to_formatted_s","children":[],"call":[" to_default_s "," strftime ","formatter call to_s ","formatter call ","formatter respond_to? ","DATE_FORMATS  [] ","DATE_FORMATS  []  call to_s ","DATE_FORMATS  []  call ","DATE_FORMATS  []  respond_to? "]}," Time compare_with_coercion":{"type":"method","name":"compare_with_coercion","children":[],"call":[" compare_without_coercion "," to_datetime compare_without_coercion "," to_datetime ","other acts_like? ","other comparable_time ","other respond_to? "," to_datetime <=> ","other to_time ","other is_a? ","other class == ","other class ","other comparable_time  acts_like? ","other comparable_time  comparable_time ","other comparable_time  respond_to? ","other comparable_time  to_time ","other comparable_time  is_a? ","other comparable_time  class == ","other comparable_time  class "]}," Time minus_with_coercion":{"type":"method","name":"minus_with_coercion","children":[],"call":[" minus_without_coercion "," to_f - ","other to_f "," to_f ","other is_a? ","other comparable_time ","other respond_to? ","other comparable_time  to_f ","other comparable_time  is_a? ","other comparable_time  comparable_time ","other comparable_time  respond_to? "]}," Time minus_with_duration":{"type":"method","name":"minus_with_duration","children":[],"call":[" minus_without_duration ","other until ","ActiveSupport Duration  === "]}," Time plus_with_duration":{"type":"method","name":"plus_with_duration","children":[],"call":[" plus_without_duration ","other since ","ActiveSupport Duration  === "]}," Time tomorrow":{"type":"method","name":"tomorrow","children":[],"call":[" advance "]}," Time yesterday":{"type":"method","name":"yesterday","children":[],"call":[" advance "]}," Time end_of_year":{"type":"method","name":"end_of_year","children":[],"call":[" change "," Rational "]}," Time beginning_of_year":{"type":"method","name":"beginning_of_year","children":[],"call":[" change "]}," Time end_of_quarter":{"type":"method","name":"end_of_quarter","children":[],"call":[" beginning_of_month change end_of_month "," beginning_of_month change ","m >= "," month ","(int 3) detect "," beginning_of_month "]}," Time beginning_of_quarter":{"type":"method","name":"beginning_of_quarter","children":[],"call":[" beginning_of_month change ","m <= "," month ","(int 10) detect "," beginning_of_month "]}," Time end_of_month":{"type":"method","name":"end_of_month","children":[],"call":[" change "," Time  days_in_month "," year "," month "," Rational "]}," Time beginning_of_month":{"type":"method","name":"beginning_of_month","children":[],"call":[" change "]}," Time end_of_day":{"type":"method","name":"end_of_day","children":[],"call":[" change "," Rational "]}," Time beginning_of_day":{"type":"method","name":"beginning_of_day","children":[],"call":[" change "]}," Time next_week":{"type":"method","name":"next_week","children":[],"call":[" since beginning_of_week since change "," since beginning_of_week since ","DAYS_INTO_WEEK  [] day ","DAYS_INTO_WEEK  [] "," since beginning_of_week "," since ","1 week "]}," Time end_of_week":{"type":"method","name":"end_of_week","children":[],"call":["(send\n  (self) :+\n  (send\n    (lvar :days_to_sunday) :days)) end_of_day "," + ","days_to_sunday days ","7 - "," wday "," wday != ","(send\n  (self) :+\n  (send\n    (lvar :days_to_end) :days)) end_of_day ","days_to_end days ","6 - "," days_to_week_start ","(send\n  (self) :+\n  (send\n    (lvar :7 - ) :days)) end_of_day ","7 -  days ","(send\n  (self) :+\n  (send\n    (lvar :6 - ) :days)) end_of_day ","6 -  days "]}," Time beginning_of_week":{"type":"method","name":"beginning_of_week","children":[],"call":["(send\n  (self) :-\n  (send\n    (lvar :days_to_monday) :days)) midnight "," - ","days_to_monday days "," wday - "," wday "," wday != ","(send\n  (self) :-\n  (send\n    (lvar :days_to_start) :days)) midnight ","days_to_start days "," days_to_week_start ","(send\n  (self) :-\n  (send\n    (lvar : wday - ) :days)) midnight "," wday -  days ","(send\n  (self) :-\n  (send\n    (lvar : days_to_week_start ) :days)) midnight "," days_to_week_start  days "]}," Time next_month":{"type":"method","name":"next_month","children":[],"call":[" months_since "," advance "]}," Time prev_month":{"type":"method","name":"prev_month","children":[],"call":[" months_ago "," advance ","months -@ "]}," Time next_year":{"type":"method","name":"next_year","children":[],"call":[" years_since "," advance "]}," Time prev_year":{"type":"method","name":"prev_year","children":[],"call":[" years_ago "," advance ","years -@ "]}," Time years_since":{"type":"method","name":"years_since","children":[],"call":[" advance "]}," Time years_ago":{"type":"method","name":"years_ago","children":[],"call":[" advance ","years -@ "]}," Time months_since":{"type":"method","name":"months_since","children":[],"call":[" advance "]}," Time months_ago":{"type":"method","name":"months_ago","children":[],"call":[" advance ","months -@ "]}," Time since":{"type":"method","name":"since","children":[],"call":[" to_datetime since "," to_datetime "," + "]}," Time ago":{"type":"method","name":"ago","children":[],"call":[" since ","seconds -@ "]}," Time advance":{"type":"method","name":"advance","children":[],"call":["time_advanced_by_date since ","seconds_to_advance == ","(or\n  (send\n    (lvar :options) :[]\n    (sym :seconds))\n  (int 0)) + + ","(or\n  (send\n    (lvar :options) :[]\n    (sym :hours))\n  (int 0)) * ","options [] ","(or\n  (send\n    (lvar :options) :[]\n    (sym :seconds))\n  (int 0)) + ","(or\n  (send\n    (lvar :options) :[]\n    (sym :minutes))\n  (int 0)) * "," change ","d day ","d month ","d year "," to_date advance "," to_date ","options []= ","(or\n  (send\n    (lvar :options) :[]\n    (sym :hours))\n  (int 0)) + ","24 * ","options [] divmod ","options [] nil? ","(or\n  (send\n    (lvar :options) :[]\n    (sym :days))\n  (int 0)) + ","7 * ","seconds_to_advance zero? ","options fetch + + ","options fetch * ","options fetch ","options fetch + ","d gregorian ","d julian? "," to_date gregorian advance "," to_date gregorian "," change  since ","time_a to_date advance vance to_date advance _by_ to_date advance ate since ","time_ad gregorian vanced gregorian _by_d gregorian ate since ","time_a to_date gregorian advance vance to_date gregorian advance _by_ to_date gregorian advance ate since ","(or\n  (send\n    (lvar :options) :[]\n    (sym :seconds))\n  (int 0)) + +  == ","options fetch + +  == ","secon to_date advance s_to_a to_date advance vance == ","second gregorian s_to_ad gregorian vance == ","secon to_date gregorian advance s_to_a to_date gregorian advance vance == ","(or\n  (sen to_date advance \n    (lvar :options) :[]\n    (sym :secon to_date advance s))\n  (int 0)) + + ","(or\n  (send gregorian \n    (lvar :options) :[]\n    (sym :second gregorian s))\n  (int 0)) + + ","(or\n  (sen to_date gregorian advance \n    (lvar :options) :[]\n    (sym :secon to_date gregorian advance s))\n  (int 0)) + + ","(or\n  (sen to_date advance \n    (lvar :options) :[]\n    (sym :hours))\n  (int 0)) * ","(or\n  (send gregorian \n    (lvar :options) :[]\n    (sym :hours))\n  (int 0)) * ","(or\n  (sen to_date gregorian advance \n    (lvar :options) :[]\n    (sym :hours))\n  (int 0)) * ","(or\n  (sen to_date advance \n    (lvar :options) :[]\n    (sym :secon to_date advance s))\n  (int 0)) + ","(or\n  (send gregorian \n    (lvar :options) :[]\n    (sym :second gregorian s))\n  (int 0)) + ","(or\n  (sen to_date gregorian advance \n    (lvar :options) :[]\n    (sym :secon to_date gregorian advance s))\n  (int 0)) + ","(or\n  (sen to_date advance \n    (lvar :options) :[]\n    (sym :minutes))\n  (int 0)) * ","(or\n  (send gregorian \n    (lvar :options) :[]\n    (sym :minutes))\n  (int 0)) * ","(or\n  (sen to_date gregorian advance \n    (lvar :options) :[]\n    (sym :minutes))\n  (int 0)) * "," to_date advance   to_date advance ay ","d gregorian  d gregorian ay "," to_date gregorian advance   to_date gregorian advance ay "," to_date advance  month ","d gregorian  month "," to_date gregorian advance  month "," to_date advance  year ","d gregorian  year "," to_date gregorian advance  year "," to_ to_date advance ate a to_date advance vance "," to_d gregorian ate ad gregorian vance "," to_ to_date gregorian advance ate a to_date gregorian advance vance "," to_ to_date advance ate "," to_d gregorian ate "," to_ to_date gregorian advance ate ","(or\n  (sen to_date advance \n    (lvar :options) :[]\n    (sym :hours))\n  (int 0)) + ","(or\n  (send gregorian \n    (lvar :options) :[]\n    (sym :hours))\n  (int 0)) + ","(or\n  (sen to_date gregorian advance \n    (lvar :options) :[]\n    (sym :hours))\n  (int 0)) + ","options []  to_date advance ivmo to_date advance  ","options [] d gregorian ivmod gregorian  ","options []  to_date gregorian advance ivmo to_date gregorian advance  ","(or\n  (sen to_date advance \n    (lvar :options) :[]\n    (sym : to_date advance ays))\n  (int 0)) + ","(or\n  (send gregorian \n    (lvar :options) :[]\n    (sym :d gregorian ays))\n  (int 0)) + ","(or\n  (sen to_date gregorian advance \n    (lvar :options) :[]\n    (sym : to_date gregorian advance ays))\n  (int 0)) + ","(or\n  (send\n    (lvar :options) :[]\n    (sym :seconds))\n  (int 0)) + +  zero? ","options fetch + +  zero? ","secon to_date advance s_to_a to_date advance vance zero? ","second gregorian s_to_ad gregorian vance zero? ","secon to_date gregorian advance s_to_a to_date gregorian advance vance zero? "," to_date advance  gregorian ","d gregorian  gregorian "," to_date gregorian advance  gregorian "," to_date advance  julian? ","d gregorian  julian? "," to_date gregorian advance  julian? "," to_ to_date advance ate gregorian a to_date advance vance "," to_d gregorian ate gregorian ad gregorian vance "," to_ to_date gregorian advance ate gregorian a to_date gregorian advance vance "," to_ to_date advance ate gregorian "," to_d gregorian ate gregorian "," to_ to_date gregorian advance ate gregorian "]}," Time change":{"type":"method","name":"change","children":[],"call":[" Time  send "," usec ","options [] "," sec "," min "," hour "," day "," month "," year "," utc? "," Time  new "," utc_offset ","new_sec + ","new_usec to_r / ","new_usec to_r "," Time  local "," zone "," Time  utc ","options fetch "," Rational "," nsec "," raise ","new_usec > ","options inspect ","new_usec >= "," isdst ","(lvasgn :new_time_2\n  (send\n    (lvar :new_time) :+\n    (lvar :offset_difference))) utc_offset == ","(lvasgn :new_time_2\n  (send\n    (lvar :new_time) :+\n    (lvar :offset_difference))) utc_offset ","new_time + ","offset_difference > ","new_time utc_offset - ","new_time utc_offset ","options fetch  + ","options fetch  to_r / "," Rational  to_r / ","options fetch  to_r "," Rational  to_r ","options fetch  > "," Rational  > ","options fetch  >= "," Rational  >= ","(lvasgn :new_time + \n  (send\n    (lvar :new_time) :+\n    (lvar :offset_difference))) utc_offset == ","(lvasgn :new_time_2\n  (send\n    (lvar :new_time) :+\n    (lvar :new_time utc_offset - ))) utc_offset == ","(lvasgn : Time  new _2\n  (send\n    (lvar : Time  new ) :+\n    (lvar :offset_difference))) utc_offset == ","(lvasgn :new_time + \n  (send\n    (lvar :new_time) :+\n    (lvar :offset_difference))) utc_offset ","(lvasgn :new_time_2\n  (send\n    (lvar :new_time) :+\n    (lvar :new_time utc_offset - ))) utc_offset ","(lvasgn : Time  new _2\n  (send\n    (lvar : Time  new ) :+\n    (lvar :offset_difference))) utc_offset "," Time  new  + ","new_time utc_offset -  > "," Time  new  utc_offset - "," Time  new  utc_offset "]}," Time seconds_since_midnight":{"type":"method","name":"seconds_since_midnight","children":[],"call":[" to_i - + "," usec / "," usec "," to_i - "," change to_i "," change "," to_i "]}," Time future?":{"type":"method","name":"future?","children":[],"call":[" > "," Time  current "]}," Time today?":{"type":"method","name":"today?","children":[],"call":[" to_date == "," Date  current "," to_date "]}," Time past?":{"type":"method","name":"past?","children":[],"call":[" < "," Time  current "]}," Time current":{"type":"method","name":"current","children":[],"call":[" Time  now "," Time  zone now "," Time  zone "," Time  zone_default "]}," Time local_time":{"type":"method","name":"local_time","children":[],"call":[" time_with_datetime_fallback ","ActiveSupport Deprecation  warn "," caller "]}," Time utc_time":{"type":"method","name":"utc_time","children":[],"call":[" time_with_datetime_fallback ","ActiveSupport Deprecation  warn "," caller "]}," Time time_with_datetime_fallback":{"type":"method","name":"time_with_datetime_fallback","children":[],"call":[" DateTime  civil_from_format ","time year == ","time year "," Time  send "," DateTime  civil "," DateTime  local_offset ","utc_or_local to_sym == ","utc_or_local to_sym ","ActiveSupport Deprecation  warn "," caller "," Time  send  year == "," Time  send  year "," DateTime  local_ DateTime  local_offset  "]}," Time days_in_month":{"type":"method","name":"days_in_month","children":[],"call":["COMMON_YEAR_DAYS_IN_MONTH  [] "," Date  gregorian_leap? ","month == "]}," Time ===":{"type":"method","name":"===","children":[],"call":["other is_a? "," == "]}," Time acts_like_time?":{"type":"method","name":"acts_like_time?","children":[],"call":[]}," String strip_heredoc":{"type":"method","name":"strip_heredoc","children":[],"call":[" gsub "," chomp scan min size "," chomp scan min "," chomp scan "," chomp "," scan min try "," scan min "," scan "," freeze ","stripped freeze "," frozen? "," gsub tap "]}," String is_utf8?":{"type":"method","name":"is_utf8?","children":[],"call":["ActiveSupport Multibyte Chars  consumes? "," dup force_encoding valid_encoding? "," dup force_encoding "," dup "," valid_encoding? "," encoding "]}," String mb_chars":{"type":"method","name":"mb_chars","children":[],"call":["ActiveSupport Multibyte  proxy_class new ","ActiveSupport Multibyte  proxy_class ","ActiveSupport Multibyte  proxy_class wants? ","ActiveSupport Multibyte  proxy_class consumes? "]}," String foreign_key":{"type":"method","name":"foreign_key","children":[],"call":["ActiveSupport Inflector  foreign_key "]}," String humanize":{"type":"method","name":"humanize","children":[],"call":["ActiveSupport Inflector  humanize "]}," String classify":{"type":"method","name":"classify","children":[],"call":["ActiveSupport Inflector  classify "]}," String tableize":{"type":"method","name":"tableize","children":[],"call":["ActiveSupport Inflector  tableize "]}," String parameterize":{"type":"method","name":"parameterize","children":[],"call":["ActiveSupport Inflector  parameterize ","ActiveSupport Deprecation  warn ","sep == "]}," String demodulize":{"type":"method","name":"demodulize","children":[],"call":["ActiveSupport Inflector  demodulize "]}," String dasherize":{"type":"method","name":"dasherize","children":[],"call":["ActiveSupport Inflector  dasherize "]}," String underscore":{"type":"method","name":"underscore","children":[],"call":["ActiveSupport Inflector  underscore "]}," String titleize":{"type":"method","name":"titleize","children":[],"call":["ActiveSupport Inflector  titleize "]}," String camelize":{"type":"method","name":"camelize","children":[],"call":["ActiveSupport Inflector  camelize "," raise "]}," String constantize":{"type":"method","name":"constantize","children":[],"call":["ActiveSupport Inflector  constantize "]}," String singularize":{"type":"method","name":"singularize","children":[],"call":["ActiveSupport Inflector  singularize "]}," String pluralize":{"type":"method","name":"pluralize","children":[],"call":["ActiveSupport Inflector  pluralize ","count == ","count is_a? "," dup "]}," String truncate":{"type":"method","name":"truncate","children":[],"call":["(if\n  (send\n    (send\n      (lvar :chars) :length) :>\n    (lvar :length))\n  (send\n    (send\n      (lvar :chars) :[]\n      (erange\n        (int 0)\n        (lvar :stop))) :+\n    (send\n      (lvar :options) :[]\n      (sym :omission)))\n  (lvar :text)) to_s ","chars [] + ","options [] ","chars [] ","chars length > ","chars length ","chars rindex ","options [] mb_chars ","text mb_chars ","length - ","options [] mb_chars length "," dup "," [] "," rindex ","truncate_at - ","options [] length "," length > "," length "," [] + ","omission length ","(begin\n  (send\n    (self) :[]\n    (int 0)\n    (lvar :stop))) +@ ","truncate_to - ","(if\n  (send\n    (send\n      (lvar :text mb_chars ) :length) :>\n    (lvar :length))\n  (send\n    (send\n      (lvar :text mb_chars ) :[]\n      (erange\n        (int 0)\n        (lvar :stop))) :+\n    (send\n      (lvar :options) :[]\n      (sym :omission)))\n  (lvar :text)) to_s ","(if\n  (send\n    (send\n      (lvar :chars) :length) :>\n    (lvar :length))\n  (send\n    (send\n      (lvar :chars) :[]\n      (erange\n        (int 0)\n        (lvar :stop))) :+\n    (send\n      (lvar :options) :[]\n      (sym :omission)))\n  (lvar : dup )) to_s ","text mb_chars  [] + ","text mb_chars  [] ","text mb_chars  length > ","text mb_chars  length ","text mb_chars  rindex ","options [] mb_text mb_chars  ","text mb_text mb_chars  "," dup  mb_chars ","options [] mb_text mb_chars  length "]}," String squish!":{"type":"method","name":"squish!","children":[],"call":[" gsub! "," strip! "]}," String squish":{"type":"method","name":"squish","children":[],"call":[" dup squish! "," dup "]}," String exclude?":{"type":"method","name":"exclude?","children":[],"call":[" include? ! "," include? "]}," String encoding_aware?":{"type":"method","name":"encoding_aware?","children":[],"call":["ActiveSupport Deprecation  warn "]}," String to_datetime":{"type":"method","name":"to_datetime","children":[],"call":[" DateTime  civil ","d pop ","d [] "," Date  _parse values_at map "," Date  _parse values_at "," Date  _parse "," blank? "," DateTime  parse "]}," String to_date":{"type":"method","name":"to_date","children":[],"call":[" Date  new "," Date  _parse values_at "," Date  _parse "," blank? "," Date  parse "]}," String to_time":{"type":"method","name":"to_time","children":[],"call":[" Time  send ","d [] "," Date  _parse values_at map "," Date  _parse values_at "," Date  _parse "," blank? "," Time  send - ","time getlocal ","time utc ","form == ","Time  new ","parts fetch ","parts fetch + ","now day ","now month ","now year ","Time  now ","parts empty? ","Date  _parse ","Time  send - ","Time  send ","offset - ","now utc_offset ","parts [] ","time to_time ","(send\n  (send\n    (lvar :parts) :keys) :&\n  (lvar :used_keys)) empty? ","parts keys & ","parts keys ","Time  new  getlocal ","Time  new  utc ","Date  _parse  fetch ","Date  _parse  fetch + ","Time  now  day ","Time  now  month ","Time  now  year ","Time  Time  now  ","Date  _parse  empty? ","parts []  - ","Time  now  utc_offset ","now now utc_offset  ","now utc_parts []  ","Date  _parse  [] ","Time  new  to_Time  new  ","(send\n  (send\n    (lvar :Date  _parse ) :keys) :&\n  (lvar :used_keys)) empty? ","Date  _parse  keys & ","Date  _parse  keys "]}," String ord":{"type":"method","name":"ord","children":[],"call":[" [] "]}," String acts_like_string?":{"type":"method","name":"acts_like_string?","children":[],"call":[]}," String last":{"type":"method","name":"last","children":[],"call":[" mb_chars [] to_s "," mb_chars [] ","limit -@ "," mb_chars ","limit >= "," size ","limit == "," from "," dup ","ActiveSupport Deprecation  warn ","limit < "," raise "," [] ","(send\n  (send nil :length) :-\n  (lvar :limit)) max "," length - "," length "]}," String first":{"type":"method","name":"first","children":[],"call":[" mb_chars [] to_s "," mb_chars [] "," mb_chars ","limit >= "," size ","limit == "," to ","limit - "," dup ","ActiveSupport Deprecation  warn ","limit < "," raise "," [] "]}," String to":{"type":"method","name":"to","children":[],"call":[" mb_chars [] to_s "," mb_chars [] "," mb_chars "," [] ","position + "," +@ "," size ","position < "]}," String from":{"type":"method","name":"from","children":[],"call":[" mb_chars [] to_s "," mb_chars [] "," mb_chars "," [] "," length "]}," String at":{"type":"method","name":"at","children":[],"call":[" mb_chars [] to_s "," mb_chars [] "," mb_chars "," [] "]}," Regexp multiline?":{"type":"method","name":"multiline?","children":[],"call":[" options & == "," options & "," options "]}," Range overlaps?":{"type":"method","name":"overlaps?","children":[],"call":["other include? "," first "," include? ","other first ","other cover? "," cover? "," begin ","other begin ","other begin == "]}," Range include_with_range?":{"type":"method","name":"include_with_range?","children":[],"call":[" include_without_range? ","(send\n  (send\n    (lvar :value) :last) :<=>\n  (lvar :end_value)) send ","value last <=> ","value last ","value first "," last "," last succ ","value exclude_end? "," exclude_end? ","value is_a? ","value last send ","value exclude_end? ! ","(send\n  (send\n    (lvar :value) :last) :<=>\n  (lvar : last )) send ","(send\n  (send\n    (lvar :value) :last) :<=>\n  (lvar : last succ )) send "]}," Range to_formatted_s":{"type":"method","name":"to_formatted_s","children":[],"call":[" to_default_s ","formatter call "," last "," first ","RANGE_FORMATS  [] ","RANGE_FORMATS  []  call "]}," Range step_with_blockless":{"type":"method","name":"step_with_blockless","children":[],"call":[" step_without_blockless to_a "," step_without_blockless "," block_given? ","array << "]}," Hash to_param":{"type":"method","name":"to_param","children":[],"call":["(send nil :collect) * ","value to_query "," collect ","(send nil :collect) sort * ","(send nil :collect) sort ","(send nil :collect) sort! * ","(send nil :collect) sort! "," to_query "," empty? ","(send nil :collect) compact sort! * ","(send nil :collect) compact sort! ","(send nil :collect) compact ","value empty? ","value is_a? "]}," Array to_param":{"type":"method","name":"to_param","children":[],"call":["(send nil :collect) join ","e to_param "," collect "," collect join "]}," FalseClass to_param":{"type":"method","name":"to_param","children":[],"call":[]}," TrueClass to_param":{"type":"method","name":"to_param","children":[],"call":[]}," NilClass to_param":{"type":"method","name":"to_param","children":[],"call":[]}," Module duplicable?":{"type":"method","name":"duplicable?","children":[],"call":[]}," Numeric since":{"type":"method","name":"since","children":[],"call":["time + ","ActiveSupport Deprecation  warn "]}," Numeric ago":{"type":"method","name":"ago","children":[],"call":["time - ","ActiveSupport Deprecation  warn "]}," Numeric fortnights":{"type":"method","name":"fortnights","children":[],"call":["ActiveSupport Duration  new "," * ","2 weeks ","ActiveSupport Duration  weeks "]}," Numeric weeks":{"type":"method","name":"weeks","children":[],"call":["ActiveSupport Duration  new "," * ","7 days ","ActiveSupport Duration  weeks "]}," Numeric days":{"type":"method","name":"days","children":[],"call":["ActiveSupport Duration  new "," * ","24 hours ","ActiveSupport Duration  days "]}," Numeric hours":{"type":"method","name":"hours","children":[],"call":["ActiveSupport Duration  new "," * ","ActiveSupport Duration  hours "]}," Numeric minutes":{"type":"method","name":"minutes","children":[],"call":["ActiveSupport Duration  new "," * ","ActiveSupport Duration  minutes "]}," Numeric seconds":{"type":"method","name":"seconds","children":[],"call":["ActiveSupport Duration  new ","ActiveSupport Duration  seconds "]}," Numeric exabytes":{"type":"method","name":"exabytes","children":[],"call":[" * "]}," Numeric petabytes":{"type":"method","name":"petabytes","children":[],"call":[" * "]}," Numeric terabytes":{"type":"method","name":"terabytes","children":[],"call":[" * "]}," Numeric gigabytes":{"type":"method","name":"gigabytes","children":[],"call":[" * "]}," Numeric megabytes":{"type":"method","name":"megabytes","children":[],"call":[" * "]}," Numeric kilobytes":{"type":"method","name":"kilobytes","children":[],"call":[" * "]}," Numeric bytes":{"type":"method","name":"bytes","children":[],"call":[]}," Module redefine_method":{"type":"method","name":"redefine_method","children":[],"call":[" define_method "," remove_possible_method "," send "," method_visibility "," silence_redefinition_of_method "," method_ method_visibility  "]}," Module reachable?":{"type":"method","name":"reachable?","children":[],"call":[" name constantize equal? "," name constantize "," name "," anonymous? ! "," anonymous? "," name safe_constantize equal? "," name safe_constantize "]}," Module method_names":{"type":"method","name":"method_names","children":[],"call":[" methods map "," methods "]}," Module instance_method_names":{"type":"method","name":"instance_method_names","children":[],"call":[" instance_methods map "," instance_methods "]}," Module parent_name":{"type":"method","name":"parent_name","children":[],"call":["$` freeze "," name =~ "," name "," frozen? "," module_parent_name ","ActiveSupport Deprecation  warn ","(str \"      `Module#parent_name` has been renamed to `module_parent_name`.\\n\") squish "," module_$` freeze  ","(str \"      `Module#$` freeze ` has been renamed to `module_$` freeze `.\\n\") squish "]}," Module deprecate":{"type":"method","name":"deprecate","children":[],"call":["ActiveSupport Deprecation  deprecate_methods ","ActiveSupport Deprecation  _instance deprecate_methods ","ActiveSupport Deprecation  _instance ","ActiveSupport  deprecator warn ","ActiveSupport  deprecator ","ActiveSupport  deprecator deprecate_methods ","deprecator deprecate_methods ","deprecator is_a? "]}," Module anonymous?":{"type":"method","name":"anonymous?","children":[],"call":[" name blank? "," name "," name nil? "]}," LoadError is_missing?":{"type":"method","name":"is_missing?","children":[],"call":["location sub == "," path sub "," path ","location sub "," freeze "," path to_s sub "," path to_s ","location delete_suffix == "," path to_s delete_suffix ","location delete_suffix "]}," LoadError path":{"type":"method","name":"path","children":[],"call":[" message =~ "," message ","REGEXPS  find "]}," Kernel with_warnings":{"type":"method","name":"with_warnings","children":[],"call":[]}," Integer years":{"type":"method","name":"years","children":[],"call":["ActiveSupport Duration  new "," * ","365.25 days ","365.25 days to_i ","ActiveSupport Duration  years "]}," Integer months":{"type":"method","name":"months","children":[],"call":["ActiveSupport Duration  new "," * ","30 days ","ActiveSupport Duration  months "]}," Integer multiple_of?":{"type":"method","name":"multiple_of?","children":[],"call":[" zero? "," % == "," % ","number != "," == ","number == "]}," Integer ordinalize":{"type":"method","name":"ordinalize","children":[],"call":["ActiveSupport Inflector  ordinalize "]}," Hash extract!":{"type":"method","name":"extract!","children":[],"call":["result []= "," delete ","keys each "," has_key? ","keys each_with_object "," class new "," class "]}," Hash slice!":{"type":"method","name":"slice!","children":[],"call":[" replace "," slice "," keys - "," keys "," convert_key ","keys map! "," respond_to? ","hash default_proc= "," default_proc ","hash default= "," default "," slice  default_proc= "," slice  default= "]}," Hash reverse_merge!":{"type":"method","name":"reverse_merge!","children":[],"call":[" merge! "," replace "," reverse_merge "]}," Hash reverse_merge":{"type":"method","name":"reverse_merge","children":[],"call":["other_hash merge "]}," Hash assert_valid_keys":{"type":"method","name":"assert_valid_keys","children":[],"call":[" raise ","unknown_keys join ","unknown_keys empty? "," keys - ","(lvar :valid_keys) flatten "," keys ","valid_keys include? "," each_key ","valid_keys flatten! ","ArgumentError  new ","valid_keys map join ","valid_keys map ","k inspect "," keys -  join "," keys -  empty? "]}," Hash symbolize_keys!":{"type":"method","name":"symbolize_keys!","children":[],"call":[" []= "," delete ","key to_sym "," keys each "," keys "," replace "," symbolize_keys "," transform_keys! "]}," Hash symbolize_keys":{"type":"method","name":"symbolize_keys","children":[],"call":[" dup symbolize_keys! "," dup ","options []= ","key to_sym "," inject "," transform_keys "]}," Hash stringify_keys!":{"type":"method","name":"stringify_keys!","children":[],"call":[" []= "," delete ","key to_s "," keys each "," keys "," transform_keys! "]}," Hash stringify_keys":{"type":"method","name":"stringify_keys","children":[],"call":[" dup stringify_keys! "," dup ","options []= ","key to_s "," inject "," transform_keys "]}," Hash with_indifferent_access":{"type":"method","name":"with_indifferent_access","children":[],"call":["ActiveSupport HashWithIndifferentAccess  new_from_hash_copying_default ","hash default= "," default ","ActiveSupport HashWithIndifferentAccess  new ","ActiveSupport HashWithIndifferentAccess  new_from_ActiveSupport HashWithIndifferentAccess  new _copying_default ","ActiveSupport HashWithIndifferentAccess  new  default= "]}," Hash except!":{"type":"method","name":"except!","children":[],"call":[" delete ","keys each "," convert_key ","keys map! "," respond_to? "]}," Hash diff":{"type":"method","name":"diff","children":[],"call":["(send\n  (send nil :dup) :delete_if) merge! "," has_key? ","h2 dup delete_if ","h2 dup ","h2 [] == ","h2 [] "," dup delete_if "," dup ","other dup delete_if ","other dup ","other [] == ","other [] ","ActiveSupport Deprecation  warn "]}," Hash deep_merge":{"type":"method","name":"deep_merge","children":[],"call":[" dup deep_merge! "," dup ","target []= ","tv deep_merge ","v is_a? ","tv is_a? ","target [] ","other_hash each_pair "," dup  []= ","target []  deep_merge ","target []  is_a? "," dup  [] "]}," Hash unrename_keys":{"type":"method","name":"unrename_keys","children":[],"call":[" unrename_keys ","params map ","h []= ","k to_s tr ","k to_s ","params inject ","params class to_s ","params class ","Hash  [] "]}," Hash typecast_xml_value":{"type":"method","name":"typecast_xml_value","children":[],"call":[" raise ","value inspect ","value class name ","value class ","value first ","value length > ","value length "," typecast_xml_value ","value map! ","xml_value [] ","xml_value [] is_a? ","h []= ","value inject ","value [] is_a? ! ","value [] is_a? ","value [] ","value size == ","value size ","value [] == ","value blank? ","value [] != ","parser call ","parser arity == ","parser arity ","ActiveSupport XmlMini PARSING  [] ","value has_key? ","entries inspect ","entries collect ","entries class to_s ","entries class ","c blank? ","entries nil? ","Array  wrap ","k != ","value detect ","value class to_s ","XML_PARSING  [] call ","XML_PARSING  [] ","value [] present? ","value keys size == ","value keys size ","value keys ","disallowed_types include? ","value include? ","Hash  [] ","value map ","v is_a? ! ","v is_a? "," typecast_Hash  []  ","Hash  []  [] ","Hash  []  [] is_a? ","ActiveSupport XmlMini PARSING  []  call ","XML_PARSING  []  call ","ActiveSupport XmlMini PARSING  []  arity == ","XML_PARSING  []  arity == ","ActiveSupport XmlMini PARSING  []  arity ","XML_PARSING  []  arity "]}," Hash from_xml":{"type":"method","name":"from_xml","children":[],"call":[" typecast_xml_value "," unrename_keys ","ActiveSupport XmlMini  parse ","ActiveSupport XMLConverter  new to_h ","ActiveSupport XMLConverter  new "]}," Hash to_xml":{"type":"method","name":"to_xml","children":[],"call":[" block_given? ","ActiveSupport XmlMini  to_tag "," each ","builder __send__ ","ActiveSupport XmlMini  rename_key ","options [] to_s ","options [] ","builder instruct! ","options delete ","Builder XmlMarkup  new ","options dup "," require ","options [] tag! ","XML_FORMATTING  [] call ","XML_FORMATTING  [] ","attributes []= ","value nil? ","type_name nil? "," rename_key ","key to_s ","XML_TYPE_NAMES  [] ","value class name ","value class ","value to_xml ","options merge ","value respond_to? ","value call ","key to_s singularize ","1 == ","value arity ","options [] __send__ ","options [] instruct! ","options reverse_merge! ","builder tag! ","options []  __send__ ","ActiveSupport XmlMini  rename_ rename_key  ","options dup  [] to_s ","options dup  [] ","options []  instruct! ","options dup  delete ","options dup  dup ","options dup  [] tag! ","XML_TYPE_NAMES  []  nil? "," rename_ rename_key  "," rename_key  to_s ","options dup  merge "," rename_key  to_s singularize ","options dup  [] __send__ ","options dup  [] instruct! ","options dup  reverse_merge! ","options []  tag! "]}," Float round":{"type":"method","name":"round","children":[],"call":[" precisionless_round ","(send\n  (self) :*\n  (lvar :magnitude)) round / ","(send\n  (self) :*\n  (lvar :magnitude)) round "," * ","10.0 ** ","(send\n  (self) :*\n  (lvar :10.0 ** )) round / ","(send\n  (self) :*\n  (lvar :10.0 ** )) round "]}," File atomic_write":{"type":"method","name":"atomic_write","children":[],"call":["Dir  tmpdir "," dirname "]}," Range sum":{"type":"method","name":"sum","children":[],"call":["(send\n  (send\n    (lvar :actual_last) :-\n    (send nil :first)) :+\n  (int 1)) * / ","(send\n  (send\n    (lvar :actual_last) :-\n    (send nil :first)) :+\n  (int 1)) * ","actual_last + "," first ","actual_last - + ","actual_last - "," last "," last - "," exclude_end? ","(and\n  (send\n    (send nil :first) :instance_of?\n    (const nil :Integer))\n  (send\n    (send nil :last) :instance_of?\n    (const nil :Integer))) ! "," last instance_of? "," first instance_of? "," block_given? ","actual_last >= ","(and\n  (send\n    (send nil :first) :is_a?\n    (const nil :Integer))\n  (send\n    (send nil :last) :is_a?\n    (const nil :Integer))) ! "," last is_a? "," first is_a? ","sum + ","(send\n  (send\n    (lvar : last ) :-\n    (send nil :first)) :+\n  (int 1)) * / ","(send\n  (send\n    (lvar : last ) :-\n    (send nil :first)) :+\n  (int 1)) * "," last  + "," last  - + "," last  - "," last  >= "]}," DateTime in_time_zone":{"type":"method","name":"in_time_zone","children":[],"call":["ActiveSupport TimeWithZone  new "," Time  __send__ "," getutc "," utc? "," Time  find_zone! "]}," DateTime seconds_since_unix_epoch":{"type":"method","name":"seconds_since_unix_epoch","children":[],"call":["(send\n  (self) :-\n  (send\n    (const\n      (cbase) :DateTime) :civil\n    (int 1970))) * "," - "," DateTime  civil ","(send\n  (send nil :jd) :-\n  (int 2440588)) * - + "," seconds_since_midnight ","(send\n  (send nil :jd) :-\n  (int 2440588)) * - "," offset_in_seconds ","(send\n  (send nil :jd) :-\n  (int 2440588)) * "," jd - "," jd "]}," DateTime to_i":{"type":"method","name":"to_i","children":[],"call":[" seconds_since_unix_epoch to_i "," seconds_since_unix_epoch "]}," DateTime to_f":{"type":"method","name":"to_f","children":[],"call":[" seconds_since_unix_epoch to_f "," seconds_since_unix_epoch ","(send\n  (lvar :days_since_unix_epoch) :*\n  (int 86400)) to_f ","days_since_unix_epoch * "," - "," DateTime  civil "," seconds_since_unix_epoch to_f + "," sec_fraction ","(send\n  (lvar : - ) :*\n  (int 86400)) to_f "," -  * "]}," DateTime xmlschema":{"type":"method","name":"xmlschema","children":[],"call":[" strftime "]}," DateTime civil_from_format":{"type":"method","name":"civil_from_format","children":[],"call":[]}," DateTime to_datetime":{"type":"method","name":"to_datetime","children":[],"call":[]}," DateTime to_time":{"type":"method","name":"to_time","children":[],"call":[" Time  utc_time "," sec "," min "," hour "," day "," month "," year "," offset == "," offset "," sec_fraction * ","RUBY_VERSION  < "," sec_fraction "," getlocal "," utc_offset "," preserve_timezone "]}," DateTime to_date":{"type":"method","name":"to_date","children":[],"call":[" Date  new "," day "," month "," year "]}," DateTime readable_inspect":{"type":"method","name":"readable_inspect","children":[],"call":[" to_s "," to_formatted_s "," to_fs "]}," DateTime formatted_offset":{"type":"method","name":"formatted_offset","children":[],"call":["ActiveSupport TimeZone  seconds_to_utc_offset "," utc_offset "," utc? "]}," DateTime to_formatted_s":{"type":"method","name":"to_formatted_s","children":[],"call":[" to_default_s "," strftime ","formatter call to_s ","formatter call ","formatter respond_to? "," Time DATE_FORMATS  [] "," Time DATE_FORMATS  []  call to_s "," Time DATE_FORMATS  []  call "," Time DATE_FORMATS  []  respond_to? "]}," DateTime compare_with_coercion":{"type":"method","name":"compare_with_coercion","children":[],"call":[" compare_without_coercion ","other to_datetime ","other acts_like? ","other comparable_time ","other respond_to? ","other to_datetime  to_datetime ","other comparable_time  to_datetime ","other to_datetime  acts_like? ","other comparable_time  acts_like? ","other to_datetime  comparable_time ","other comparable_time  comparable_time ","other to_datetime  respond_to? ","other comparable_time  respond_to? "]}," DateTime utc_offset":{"type":"method","name":"utc_offset","children":[],"call":["(send\n  (send nil :offset) :*\n  (int 86400)) to_i "," offset * "," offset "]}," DateTime utc?":{"type":"method","name":"utc?","children":[],"call":[" offset == "," offset "]}," DateTime utc":{"type":"method","name":"utc","children":[],"call":[" new_offset ","Time  utc ","utc sec + ","utc sec_fraction ","utc sec ","utc min ","utc hour ","utc day ","utc month ","utc year ","Time   new_offset  "," new_offset  sec + "," new_offset  sec_fraction "," new_offset  sec "," new_offset  min "," new_offset  hour "," new_offset  day "," new_offset  month "," new_offset  year "]}," DateTime end_of_day":{"type":"method","name":"end_of_day","children":[],"call":[" change "," Rational "]}," DateTime beginning_of_day":{"type":"method","name":"beginning_of_day","children":[],"call":[" change "]}," DateTime since":{"type":"method","name":"since","children":[],"call":[" + "," Rational ","seconds round "]}," DateTime ago":{"type":"method","name":"ago","children":[],"call":[" since ","seconds -@ "]}," DateTime advance":{"type":"method","name":"advance","children":[],"call":["datetime_advanced_by_date since ","seconds_to_advance == ","(or\n  (send\n    (lvar :options) :[]\n    (sym :seconds))\n  (int 0)) + + ","(or\n  (send\n    (lvar :options) :[]\n    (sym :hours))\n  (int 0)) * ","options [] ","(or\n  (send\n    (lvar :options) :[]\n    (sym :seconds))\n  (int 0)) + ","(or\n  (send\n    (lvar :options) :[]\n    (sym :minutes))\n  (int 0)) * "," change ","d day ","d month ","d year "," to_date advance "," to_date ","seconds_to_advance zero? ","options fetch + + ","options fetch * ","options fetch ","options fetch + ","options []= ","24 * ","options [] divmod ","options [] nil? ","7 * "," change  since "," to_date advance atetime_a to_date advance vance to_date advance _by_ to_date advance ate since ","(or\n  (send\n    (lvar :options) :[]\n    (sym :seconds))\n  (int 0)) + +  == ","options fetch + +  == ","secon to_date advance s_to_a to_date advance vance == ","(or\n  (sen to_date advance \n    (lvar :options) :[]\n    (sym :secon to_date advance s))\n  (int 0)) + + ","(or\n  (sen to_date advance \n    (lvar :options) :[]\n    (sym :hours))\n  (int 0)) * ","(or\n  (sen to_date advance \n    (lvar :options) :[]\n    (sym :secon to_date advance s))\n  (int 0)) + ","(or\n  (sen to_date advance \n    (lvar :options) :[]\n    (sym :minutes))\n  (int 0)) * "," to_date advance   to_date advance ay "," to_date advance  month "," to_date advance  year "," to_ to_date advance ate a to_date advance vance "," to_ to_date advance ate ","(or\n  (send\n    (lvar :options) :[]\n    (sym :seconds))\n  (int 0)) + +  zero? ","options fetch + +  zero? ","secon to_date advance s_to_a to_date advance vance zero? ","options []  to_date advance ivmo to_date advance  "]}," DateTime change":{"type":"method","name":"change","children":[],"call":[" DateTime  civil "," start ","options [] "," offset "," sec "," min "," hour "," day "," month "," year ","options fetch "," sec + "," sec_fraction ","options fetch + "," raise ","new_fraction >= "," Rational "," nsec ","options inspect "," Rational  >= "]}," DateTime seconds_since_midnight":{"type":"method","name":"seconds_since_midnight","children":[],"call":[" sec + + "," hour * "," hour "," sec + "," min * "," min "," sec "]}," DateTime future?":{"type":"method","name":"future?","children":[],"call":[" > "," DateTime  current "]}," DateTime past?":{"type":"method","name":"past?","children":[],"call":[" < "," DateTime  current "]}," DateTime current":{"type":"method","name":"current","children":[],"call":[" Time  now to_datetime "," Time  now "," Time  zone now to_datetime "," Time  zone now "," Time  zone "," Time  zone_default "]}," DateTime local_offset":{"type":"method","name":"local_offset","children":[],"call":[" Time  local utc_offset to_r / "," Time  local utc_offset to_r "," Time  local utc_offset "," Time  local ","ActiveSupport Deprecation  warn "]}," DateTime acts_like_time?":{"type":"method","name":"acts_like_time?","children":[],"call":[]}," DateTime acts_like_date?":{"type":"method","name":"acts_like_date?","children":[],"call":[]}," Date to_time_in_current_zone":{"type":"method","name":"to_time_in_current_zone","children":[],"call":[" to_time "," Time  zone local "," day "," month "," year "," Time  zone "," Time  zone_default ","ActiveSupport Deprecation  warn "," caller "]}," Date freeze":{"type":"method","name":"freeze","children":[],"call":[" instance_variable_set "," send ","m to_s =~ ","m to_s "," class private_instance_methods each "," class private_instance_methods "," class "," frozen? "]}," Date xmlschema":{"type":"method","name":"xmlschema","children":[],"call":[" to_time_in_current_zone xmlschema "," to_time_in_current_zone "," to_time xmlschema "," to_time "," in_time_zone xmlschema "," in_time_zone "]}," Date to_datetime":{"type":"method","name":"to_datetime","children":[],"call":[" DateTime  civil "," day "," month "," year "]}," Date to_time":{"type":"method","name":"to_time","children":[],"call":[" Time  send "," day "," month "," year "," raise ","form inspect ","(sym :local) include? "," Time  public_send "]}," Date to_date":{"type":"method","name":"to_date","children":[],"call":[]}," Date readable_inspect":{"type":"method","name":"readable_inspect","children":[],"call":[" strftime "]}," Date to_formatted_s":{"type":"method","name":"to_formatted_s","children":[],"call":[" to_default_s "," strftime ","formatter call to_s ","formatter call ","formatter respond_to? ","DATE_FORMATS  [] ","DATE_FORMATS  []  call to_s ","DATE_FORMATS  []  call ","DATE_FORMATS  []  respond_to? "]}," Date tomorrow":{"type":"method","name":"tomorrow","children":[],"call":[" + "," Date  current tomorrow "," Date  current "," Date  today tomorrow "," Date  today "]}," Date yesterday":{"type":"method","name":"yesterday","children":[],"call":[" - "," Date  current yesterday "," Date  current "," Date  today yesterday "," Date  today "]}," Date end_of_year":{"type":"method","name":"end_of_year","children":[],"call":[" change "," acts_like? "]}," Date beginning_of_year":{"type":"method","name":"beginning_of_year","children":[],"call":[" change "," acts_like? "]}," Date end_of_quarter":{"type":"method","name":"end_of_quarter","children":[],"call":[" beginning_of_month change end_of_month "," beginning_of_month change ","m >= "," month ","(int 3) detect "," beginning_of_month "]}," Date beginning_of_quarter":{"type":"method","name":"beginning_of_quarter","children":[],"call":[" beginning_of_month change ","m <= "," month ","(int 10) detect "," beginning_of_month "]}," Date end_of_month":{"type":"method","name":"end_of_month","children":[],"call":[" change "," acts_like? "," Time  days_in_month "," year "," month "]}," Date beginning_of_month":{"type":"method","name":"beginning_of_month","children":[],"call":[" change "," acts_like? "]}," Date next_week":{"type":"method","name":"next_week","children":[],"call":["result change "," acts_like? ","(send\n  (self) :+\n  (int 7)) beginning_of_week + ","days_into_week [] ","(send\n  (self) :+\n  (int 7)) beginning_of_week "," + ","DAYS_INTO_WEEK  [] ","(send\n  (self) :+\n  (int 7)) beginning_of_week +  change "]}," Date end_of_week":{"type":"method","name":"end_of_week","children":[],"call":["result end_of_day "," acts_like? "," + ","days_to_sunday days ","7 - "," wday "," wday != ","days_to_end days ","6 - "," days_to_week_start "," +  end_of_day ","7 -  days ","6 -  days "]}," Date beginning_of_week":{"type":"method","name":"beginning_of_week","children":[],"call":["result midnight "," acts_like? "," - "," wday - "," wday "," wday != "," days_to_week_start "," beginning_of_week_default ","Thread  current [] ","Thread  current "," ActiveSupport IsolatedExecutionState  [] "," -  midnight "]}," Date next_month":{"type":"method","name":"next_month","children":[],"call":[" months_since "]}," Date prev_month":{"type":"method","name":"prev_month","children":[],"call":[" months_ago "]}," Date next_year":{"type":"method","name":"next_year","children":[],"call":[" years_since "]}," Date prev_year":{"type":"method","name":"prev_year","children":[],"call":[" years_ago "]}," Date years_since":{"type":"method","name":"years_since","children":[],"call":[" advance "]}," Date years_ago":{"type":"method","name":"years_ago","children":[],"call":[" advance ","years -@ "]}," Date months_since":{"type":"method","name":"months_since","children":[],"call":[" advance "]}," Date months_ago":{"type":"method","name":"months_ago","children":[],"call":[" advance ","months -@ "]}," Date change":{"type":"method","name":"change","children":[],"call":[" Date  new "," day ","options [] "," month "," year ","options fetch "]}," Date advance":{"type":"method","name":"advance","children":[],"call":["d + ","options delete ","options [] ","options delete * ","d >> ","options dup ","options [] * ","d +  + ","d >>  + ","options d + elete ","options d >> elete ","options dup  delete ","options dup  [] ","options d + elete * ","options d >> elete * ","options dup  delete * ","d +  >> ","d >>  >> ","options d + up ","options d >> up ","options dup  dup ","options dup  [] * "]}," Date minus_with_duration":{"type":"method","name":"minus_with_duration","children":[],"call":[" minus_without_duration "," plus_with_duration ","other -@ ","ActiveSupport Duration  === "]}," Date plus_with_duration":{"type":"method","name":"plus_with_duration","children":[],"call":[" plus_without_duration ","other since ","ActiveSupport Duration  === "]}," Date end_of_day":{"type":"method","name":"end_of_day","children":[],"call":[" to_time_in_current_zone end_of_day "," to_time_in_current_zone "," to_time end_of_day "," to_time "," in_time_zone end_of_day "," in_time_zone "]}," Date beginning_of_day":{"type":"method","name":"beginning_of_day","children":[],"call":[" to_time_in_current_zone "," to_time "," in_time_zone "]}," Date since":{"type":"method","name":"since","children":[],"call":[" to_time_in_current_zone since "," to_time_in_current_zone "," to_time since "," to_time "," in_time_zone since "," in_time_zone "]}," Date ago":{"type":"method","name":"ago","children":[],"call":[" to_time_in_current_zone since ","seconds -@ "," to_time_in_current_zone "," to_time since "," to_time "," in_time_zone since "," in_time_zone "]}," Date future?":{"type":"method","name":"future?","children":[],"call":[" > "," Date  current "]}," Date today?":{"type":"method","name":"today?","children":[],"call":[" to_date == "," Date  current "," to_date "]}," Date past?":{"type":"method","name":"past?","children":[],"call":[" < "," Date  current "]}," Date current":{"type":"method","name":"current","children":[],"call":[" Date  today "," Time  zone today "," Time  zone "," Time  zone_default "]}," Date >>":{"type":"method","name":">>","children":[],"call":[" + ","jd2 - "," jd "," raise ","d > "," class valid_civil? "," start "," class "," mday ","(send\n  (lvar :m) :+\n  (int 1)) divmod ","m + ","(send\n  (send\n    (send\n      (send nil :year) :*\n      (int 12)) :+\n    (begin\n      (send\n        (send nil :mon) :-\n        (int 1)))) :+\n  (lvar :n)) divmod "," year * + + "," year * + "," mon - "," mon "," year * "," year "," class valid_civil?  - ","j mday 2 - "," j mday  "," mday  > "," class vali mday _civil? "," m mday ay ","(sen mday \n  (lvar :m) :+\n  (int 1))  mday ivmo mday  ","(sen mday \n  (sen mday \n    (sen mday \n      (sen mday  nil :year) :*\n      (int 12)) :+\n    (begin\n      (sen mday \n        (sen mday  nil :mon) :-\n        (int 1)))) :+\n  (lvar :n))  mday ivmo mday  "]}," Date acts_like_date?":{"type":"method","name":"acts_like_date?","children":[],"call":[]}," Class descendants":{"type":"method","name":"descendants","children":[],"call":["descendants uniq! ","descendants unshift ","k < ","ObjectSpace  each_object ","k == ","descendants concat ","k descendants ","descendants << "," __subclasses__ each "," __subclasses__ "," singleton_class ","k singleton_class? ","ObjectSpace  each_object reject "," subclasses concat "," subclasses flat_map "," subclasses "]}," Class extlib_inheritable_accessor":{"type":"method","name":"extlib_inheritable_accessor","children":[],"call":[" extlib_inheritable_writer "," extlib_inheritable_reader "]}," Class extlib_inheritable_writer":{"type":"method","name":"extlib_inheritable_writer","children":[],"call":[" send "," block_given? "," class_eval ","232 + ","options [] == ","options [] ","226 + ","ivars each ","ivars extract_options! ","207 + ","201 + ","210 + ","204 + ","instance_writer == ","195 + ","ivars pop [] ","ivars pop ","ivars last is_a? ","ivars last ","ivars extract_options!  [] == ","ivars extract_options!  [] ","ivars extract_ivars extract_options! ! ","ivars pop []  == "]}," Class extlib_inheritable_reader":{"type":"method","name":"extlib_inheritable_reader","children":[],"call":[" instance_variable_set "," block_given? "," class_eval ","200 + ","options [] == ","options [] ","191 + "," object_id ","ivars each ","ivars extract_options! ","175 + ","166 + ","178 + ","169 + ","171 + ","instance_reader == ","162 + ","ivars pop [] ","ivars pop ","ivars last is_a? ","ivars last ","ivars extract_options!  [] == ","ivars extract_options!  [] ","ivars extract_ivars extract_options! ! ","ivars pop []  == "]}," Class _superclass_delegating_accessor":{"type":"method","name":"_superclass_delegating_accessor","children":[],"call":[" send "," _stash_object_in_method ","options [] != ","options [] "," singleton_class send "," singleton_class "," metaclass send "," metaclass "]}," Class _stash_object_in_method":{"type":"method","name":"_stash_object_in_method","children":[],"call":[" define_method "," remove_possible_method "," singleton_class send "," singleton_class "," singleton_class remove_possible_method "," metaclass send "," metaclass "]}," CGI escape_skipping_slashes":{"type":"method","name":"escape_skipping_slashes","children":[],"call":[]}," BigDecimal to_formatted_s":{"type":"method","name":"to_formatted_s","children":[],"call":[" _original_to_s ","args [] ","args [] is_a? "]}," BigDecimal to_yaml":{"type":"method","name":"to_yaml","children":[],"call":["out scalar ","YAML_MAPPING  [] "," to_s ","YAML  quick_emit ","YAML ENGINE  syck? ! ","YAML ENGINE  syck? ","YAML  == "]}," Array wrap":{"type":"method","name":"wrap","children":[],"call":[]}," Array uniq_by!":{"type":"method","name":"uniq_by!","children":[],"call":[" replace "," uniq_by "," uniq! ","ActiveSupport Deprecation  warn "]}," Array uniq_by":{"type":"method","name":"uniq_by","children":[],"call":["array << ","hash [] "," each "," uniq ","ActiveSupport Deprecation  warn "]}," Array sample":{"type":"method","name":"sample","children":[],"call":["result []= "," size ","result [] ","i + ","Kernel  rand "," size - ","n times ","Array  new ","n > "," raise ","n < ","n class ","n kind_of? ","e message ","n inspect ","n to_int "," [] ","n nil? ","i + esult []= ","Array  new  []= ","i + esult [] ","Array  new  [] ","Kei + nel  i + and ","Ker size el  ra size d ","Kern to_int el  ran to_int d "," size  times ","n to_int  times ","Ai + i + ay  new ","Array   size ew ","Array  n to_int ew "," size  > ","n to_int  > "," i + aise "," size  < ","n to_int  < "," size  class ","n to_int  class "," size  ki size d_of? ","n to_int  kin to_int d_of? "," size  i size spect ","n to_int  in to_int spect "," size  to_i size t ","n to_int  to_in to_int t "," size   size il? ","n to_int  n to_int il? "]}," Array split":{"type":"method","name":"split","children":[],"call":["results last << ","results last ","results << ","value == "," inject "," block_given? ","block call ","results last concat ","arr shift ","arr size ","arr index ","arr empty? "," dup ","result << "," dup  shift "," dup  size "," dup  index "," dup  empty? "]}," Array in_groups":{"type":"method","name":"in_groups","children":[],"call":["groups each "," block_given? ","groups << "," slice concat ","(lvar :fill_with) * "," slice ","length == ","modulo > ","fill_with != ","division + ","number times "," size % "," size "," size / ","last_group << "," size div ","division +  == "," size %  > "," size /  + "," size div  + "," slice  << "]}," Array extract_options!":{"type":"method","name":"extract_options!","children":[],"call":[" pop "," last extractable_options? "," last "," last is_a? "]}," Hash extractable_options?":{"type":"method","name":"extractable_options?","children":[],"call":[" instance_of? "]}," Array to_xml":{"type":"method","name":"to_xml","children":[],"call":[" block_given? ","ActiveSupport XmlMini  to_tag "," each ","builder __send__ ","builder tag! "," empty? ","options [] ","root singularize ","options delete ","ActiveSupport XmlMini  rename_key ","options [] to_s ","builder instruct! ","ActiveSupport Inflector  pluralize tr ","ActiveSupport Inflector  pluralize ","ActiveSupport Inflector  underscore "," first class name "," first class "," first ","e is_a? "," all? "," first class to_s != "," first class to_s ","Builder XmlMarkup  new ","options dup "," require ","e to_xml ","opts merge ","xml tag! ","options merge ","options [] instruct! ","root dasherize ","options has_key? ! ","options has_key? ","options delete to_s ","options [] singularize "," raise ","e respond_to? "," first class != ","options []  __send__ ","options []  tag! ","options dup  [] ","ActiveSupport XmlMini  rename_key  singularize ","root dasherize  singularize ","options delete to_s  singularize ","options dup  delete ","options dup  [] to_s ","options []  instruct! ","options dup  dup ","e to_options []  ","options merge  merge ","options dup  merge ","options dup  [] instruct! ","ActiveSupport XmlMini  rename_key  dasherize ","root dasherize  dasherize ","options delete to_s  dasherize ","options dup  has_key? ! ","options dup  has_key? ","options dup  delete to_s ","options dup  [] singularize "]}," Array to_formatted_s":{"type":"method","name":"to_formatted_s","children":[],"call":[" to_default_s ","(send nil :collect) join ","element id "," collect "," empty? "," respond_to? "," collect join "]}," Array to_sentence":{"type":"method","name":"to_sentence","children":[],"call":[" [] ","options [] "," [] join "," [] to_s dup "," [] to_s "," length ","options reverse_merge! ","options assert_valid_keys ","I18n  translate ","options delete "," ActiveSupport Deprecation  warn "," caller ","options has_key? ","default_connectors merge! ","(begin\n  (send\n    (send\n      (self) :[]\n      (erange\n        (int 0)\n        (int -1))) :join\n    (send\n      (lvar :options) :[]\n      (sym :words_connector)))) +@ ","(begin\n  (send\n    (self) :[]\n    (int 0))) +@ "," +@ ","options [] != ","default_connectors merge!  [] ","default_connectors merge!  reverse_merge! ","default_connectors merge!  assert_valid_keys ","default_connectors merge!  delete ","default_connectors merge!  has_key? ","default_options delete s merge! ","(begin\n  (send\n    (send\n      (self) :[]\n      (erange\n        (int 0)\n        (int -1))) :join\n    (send\n      (lvar :options) :[]\n      (sym :words_options delete )))) +@ ","(begin\n  (send\n    (send\n      (self) :[]\n      (erange\n        (int 0)\n        (int -1))) :join\n    (send\n      (lvar :default_connectors merge! ) :[]\n      (sym :words_connector)))) +@ ","default_connectors merge!  [] != "]}," Array forty_two":{"type":"method","name":"forty_two","children":[],"call":[" [] "]}," Array fifth":{"type":"method","name":"fifth","children":[],"call":[" [] "]}," Array fourth":{"type":"method","name":"fourth","children":[],"call":[" [] "]}," Array third":{"type":"method","name":"third","children":[],"call":[" [] "]}," Array second":{"type":"method","name":"second","children":[],"call":[" [] "]}," Array to":{"type":"method","name":"to","children":[],"call":[" [] "," first ","position + ","position >= "," take "]}," Array from":{"type":"method","name":"from","children":[],"call":[" [] "," length "]}," ActiveSupport Configurable config":{"type":"method","name":"config","children":[],"call":["ActiveSupport InheritableOptions  new "," class config "," class "," class config inheritable_copy "]}," ActiveSupport Configurable ClassMethods config_accessor":{"type":"method","name":"config_accessor","children":[],"call":[" class_eval "," singleton_class class_eval "," singleton_class ","21 + ","names each ","33 + ","options [] == ","options [] ","names extract_options! ","55 + "," send "," block_given? "," raise ","NameError  new ","name =~ ","(str \"\\\\A[_A-Za-z]\\\\w*\\\\z\") match? ","names extract_options!  [] == ","names extract_options!  [] ","names extract_names extract_options! ! "]}," ActiveSupport Configurable ClassMethods configure":{"type":"method","name":"configure","children":[],"call":[" config "]}," ActiveSupport Configurable ClassMethods config":{"type":"method","name":"config","children":[],"call":["ActiveSupport InheritableOptions  new "," superclass config "," superclass "," superclass respond_to? "," config= "," get_config ","Class  new new ","Class  new "," superclass config inheritable_copy "," respond_to? "]}," ActiveSupport Concern included":{"type":"method","name":"included","children":[],"call":["base nil? "," raise "," instance_variable_defined? ","@_included_block source_location != ","block source_location ","@_included_block source_location "]}," ActiveSupport Concern append_features":{"type":"method","name":"append_features","children":[],"call":["base class_eval "," instance_variable_defined? ","base send "," const_get "," const_defined? ","base extend ","@_dependencies each ","base < ","base instance_variable_get << ","base instance_variable_get ","base instance_variable_defined? ","ActiveSupport Deprecation  warn "," caller ","base include "]}," ActiveSupport Concern extended":{"type":"method","name":"extended","children":[],"call":[]}," ActiveSupport Callbacks ClassMethods reset_callbacks":{"type":"method","name":"reset_callbacks","children":[],"call":[" __define_runner ","callbacks clear ","target __define_runner ","chain delete ","callbacks each ","target send ","ActiveSupport DescendantsTracker  descendants each ","ActiveSupport DescendantsTracker  descendants "," send "," send concat "," send clear ","callbacks dup clear ","callbacks dup ","target send dup "," __reset_runner ","target __reset_runner "," set_callbacks ","target set_callbacks ","target get_callbacks dup ","target get_callbacks "," get_callbacks "," descendants each "," descendants "," send  clear "," get_callbacks  clear ","target send  delete ","target send dup  delete ","target get_callbacks dup  delete "," send  each "," get_callbacks  each "," send  dup clear "," get_callbacks  dup clear "," send  dup "," get_callbacks  dup "," set_ send  "," set_ get_callbacks  ","target set_ send  ","target set_ get_callbacks  ","target get_ send  dup ","target get_ get_callbacks  dup ","target get_ send  ","target get_ get_callbacks  "," get_ send  "," get_ get_callbacks  "]}," ActiveSupport Callbacks ClassMethods skip_callback":{"type":"method","name":"skip_callback","children":[],"call":["chain delete ","new_filter recompile! ","options [] ","chain insert ","chain index ","filter clone ","options any? ","c matches? ","chain find ","filters each "," __update_callbacks "," send << "," send ","filter recompile! ","chain clone ","target send ","target set_callbacks ","filter merge "," normalize_callback_params ","callback merge_conditional_options ","options key? "," raise ","filter inspect ","type to_s capitalize ","type to_s ","callback ! ","options []= ","ActiveSupport Deprecation  warn ","(str \"              Passing string to :if and :unless conditional options is deprecated\\n\") squish ","options [] is_a? "," send  delete ","filter clone  recompile! ","filter merge  recompile! "," send  insert "," send  index "," send  find "," send  clone "]}," ActiveSupport Callbacks ClassMethods set_callback":{"type":"method","name":"set_callback","children":[],"call":["chain push ","chain unshift ","options [] ","c matches? ","chain delete_if ","filters each ","Callback  new ","options dup ","filters map "," __update_callbacks "," send push "," send ","filters map! ","mapped reverse ","target send ","chain append ","chain prepend ","target set_callbacks ","Callback  build "," get_callbacks "," normalize_callback_params ","ActiveSupport Deprecation  warn ","(str \"              Passing string to :if and :unless conditional options is deprecated\\n\") squish ","options [] is_a? ","(str \"              Passing string to be evaluated in :if and :unless conditional\\n\") squish "]}," ActiveSupport Callbacks ClassMethods __update_callbacks":{"type":"method","name":"__update_callbacks","children":[],"call":["target __define_runner ","target send ","(send\n  (array\n    (self)) :+\n  (send\n    (const\n      (const nil :ActiveSupport) :DescendantsTracker) :descendants\n    (self))) each ","(self) + ","ActiveSupport DescendantsTracker  descendants ","filters unshift ","filters pop ","filters last is_a? ","filters last ","filters shift ","(sym :before) include? ","filters first "," __define_runner "," block_given? "," send ","chain dup ","(send\n  (array\n    (self)) :+\n  (send\n    (const\n      (const nil :ActiveSupport) :DescendantsTracker) :descendants\n    (self))) reverse each ","(send\n  (array\n    (self)) :+\n  (send\n    (const\n      (const nil :ActiveSupport) :DescendantsTracker) :descendants\n    (self))) reverse ","filters first in? ","target __reset_runner ","CALLBACK_FILTER_TYPES  include? ","target get_callbacks ","(send\n  (array\n    (self)) :+\n  (send\n    (const\n      (const nil :ActiveSupport) :DescendantsTracker) :descendants\n    (self))) reverse_each ","(send\n  (array\n    (self)) :+\n  (send\n    (self) :descendants)) reverse_each "," descendants "," descendants prepend reverse_each "," descendants prepend ","target send  dup "," send  dup ","target get_callbacks  dup "]}," ActiveSupport Callbacks ClassMethods __create_keyed_callback":{"type":"method","name":"__create_keyed_callback","children":[],"call":[" class_eval ","427 + "," send compile "," send ","@_keyed_callbacks [] ","428 + ","404 + "]}," ActiveSupport Callbacks ClassMethods __define_runner":{"type":"method","name":"__define_runner","children":[],"call":[" class_eval ","400 + "," undef_method "," method_defined? "," silence_warnings "," send compile "," send ","symbol inspect ","390 + ","391 + ","395 + ","401 + ","377 + ","383 + "," private_method_defined? ","386 + "]}," ActiveSupport Callbacks CallbackChain compile":{"type":"method","name":"compile","children":[],"call":["method compact join ","method compact ","method << "," config [] "," config ","callback end "," reverse_each ","callback start "," each ","method join ","callback apply ","@chain reverse inject ","@chain reverse ","@mutex synchronize ","Filters ENDING  call ","CallbackSequence  new ","type == ","callback kind ","@single_callbacks [] ","type nil? ","@single_callback apply  [] "]}," ActiveSupport Callbacks CallbackChain initialize":{"type":"method","name":"initialize","children":[],"call":["(pair\n  (sym :terminator)\n  (str \"false\")) merge ","(pair\n  (sym :terminator)\n  (str \"false\")) merge! ","Mutex  new ","(pair\n  (sym :scope)\n  (array\n    (sym :kind))) merge! "," default_terminator "]}," ActiveSupport Callbacks Callback _normalize_legacy_filter":{"type":"method","name":"_normalize_legacy_filter","children":[{"type":"method","name":"around","children":[],"asgn":[],"call":[]}],"call":[" after "," before ","kind == ","filter respond_to? ","filter singleton_class class_eval ","324 + ","filter singleton_class ","filter respond_to? ! ","filter metaclass class_eval ","317 - ","filter metaclass ","314 + ","319 + ","325 + ","316 - ","312 + ","320 + ","ActiveSupport Deprecation  warn ","296 + ","293 + ","315 + "]}," ActiveSupport Callbacks Callback _compile_filter":{"type":"method","name":"_compile_filter","children":[],"call":["@klass class_eval ","312 + ","(send\n  (lvar :scopes) :map) join "," send ","s is_a? ","scopes map ","Array  wrap "," chain config [] "," chain config "," chain "," _normalize_legacy_filter "," kind ","@klass send ","method_name << ","filter arity == ","filter arity ","filter arity <= "," _compile_filter ","filter map "," next_id ","303 + ","302 + ","307 + ","313 + ","300 + ","308 + ","281 + "," Array ","278 + "," _method_name_for_object_filter ","(send\n  (lvar :Array  wrap ) :map) join ","(send\n  (lvar : Array ) :map) join ","Array  wrap  map "," Array  map "," _method_name_for_object_filter  << "," _ _method_name_for_object_filter _for_object_filter "]}," ActiveSupport Callbacks Callback _compile_options":{"type":"method","name":"_compile_options","children":[],"call":["conditions flatten join ","conditions flatten ","conditions << ","Array  wrap map ","Array  wrap "," _compile_filter ","options [] ","options [] empty? "]}," ActiveSupport Callbacks Callback end":{"type":"method","name":"end","children":[],"call":["(send\n  (ivar :@compiled_options) :[]\n  (int 0)) compact join ","(send\n  (ivar :@compiled_options) :[]\n  (int 0)) compact ","@compiled_options [] ","@kind == ","object send ! ","object send "]}," ActiveSupport Callbacks Callback start":{"type":"method","name":"start","children":[],"call":["@klass class_eval ","216 + ","@compiled_options [] "," next_id ","(send\n  (ivar :@compiled_options) :[]\n  (int 0)) compact join ","(send\n  (ivar :@compiled_options) :[]\n  (int 0)) compact "," chain config [] "," chain config "," chain ","@kind == ","object send ! ","object send ","206 + ","211 + ","217 + ","205 + ","203 + ","@raw_filter inspect inspect ","@raw_filter inspect "]}," ActiveSupport Callbacks Callback _compile_per_key_options":{"type":"method","name":"_compile_per_key_options","children":[],"call":["@klass class_eval ","171 + ","key_options [] "," _compile_options ","161 + ","166 + ","172 + ","160 + ","154 + ","162 + "," _compile_options  [] "]}," ActiveSupport Callbacks Callback recompile!":{"type":"method","name":"recompile!","children":[],"call":[" _compile_per_key_options "," _compile_options "," _compile_filter "," next_id "," _update_filter "," per_key "," options "," recompile_options! "," deprecate_per_key_option "]}," ActiveSupport Callbacks Callback _update_filter":{"type":"method","name":"_update_filter","children":[],"call":["filter_options [] push ","new_options [] ","filter_options [] ","new_options key? ","filter_options [] concat "," Array "]}," ActiveSupport Callbacks Callback matches?":{"type":"method","name":"matches?","children":[],"call":["@filter == ","@kind == ","@filter to_s start_with? "," _method_name_for_object_filter ","@filter to_s "," filter == "," filter "]}," ActiveSupport Callbacks Callback next_id":{"type":"method","name":"next_id","children":[],"call":[]}," ActiveSupport Callbacks Callback name":{"type":"method","name":"name","children":[],"call":[" chain name "," chain "]}," ActiveSupport Callbacks Callback normalize_options!":{"type":"method","name":"normalize_options!","children":[],"call":["options [] []= ","Array  wrap ","options [] [] ","options [] ","options []= "," Array "]}," ActiveSupport Callbacks Callback clone":{"type":"method","name":"clone","children":[],"call":["obj options []= ","@options [] dup ","@options [] ","obj options ","obj per_key []= ","@per_key [] dup ","@per_key [] ","obj per_key ","obj options= ","@options dup ","obj per_key= ","@per_key dup ","obj klass= ","obj chain= "]}," ActiveSupport Callbacks callback":{"type":"method","name":"callback","children":[],"call":[" send ","ActiveSupport Deprecation  warn "]}," ActiveSupport Cache Entry should_compress?":{"type":"method","name":"should_compress?","children":[],"call":["serialized_value size >= ","serialized_value size ","Marshal  dump ","value is_a? ","options [] ","serialized_value_size >= ","(if\n  (send\n    (lvar :value) :is_a?\n    (const nil :String))\n  (lvar :value)\n  (send\n    (const nil :Marshal) :dump\n    (lvar :value))) bytesize ","(if\n  (send\n    (ivar :@value) :is_a?\n    (const nil :String))\n  (ivar :@value)\n  (send nil :marshaled_value)) bytesize "," marshaled_value ","@value is_a? ","options fetch ","Marshal  dump  size >= ","Marshal  dump  size ","Marshal  dump _size >= ","(if\n  (send\n    (lvar :value) :is_a?\n    (const nil :String))\n  (lvar :value)\n  (send\n    (const nil :Marshal) :dump\n    (lvar :value))) bytesize  >= ","(if\n  (send\n    (ivar :@value) :is_a?\n    (const nil :String))\n  (ivar :@value)\n  (send nil :marshaled_value)) bytesize  >= "]}," ActiveSupport Cache Entry size":{"type":"method","name":"size","children":[],"call":["Marshal  dump bytesize ","Marshal  dump ","@value bytesize ","@value respond_to? ","@value nil? "," value ","@v bytesize "]}," ActiveSupport Cache Entry expires_at":{"type":"method","name":"expires_at","children":[],"call":["@created_at + ","Time  at "]}," ActiveSupport Cache Entry expires_at=":{"type":"method","name":"expires_at=","children":[],"call":["time to_f - ","time to_f ","value to_f - ","value to_f ","value to_i "]}," ActiveSupport Cache Entry expired?":{"type":"method","name":"expired?","children":[],"call":["@created_at + <= ","Time  now to_f ","Time  now ","@created_at + "," convert_version_4beta1_entry! ","@x < ","Time  now to_i "," convert_version_3_entry! "]}," ActiveSupport Cache Entry compressed?":{"type":"method","name":"compressed?","children":[],"call":[]}," ActiveSupport Cache Entry value":{"type":"method","name":"value","children":[],"call":["val freeze ","val frozen? ","Marshal  load ","Zlib Inflate  inflate "," compressed? ","@value nil? "," uncompress "," convert_version_4beta1_entry! "," convert_version_3_entry! ","Marshal  load  freeze ","Marshal  load  frozen? ","@Marshal  load ue nil? "]}," ActiveSupport Cache Entry raw_value":{"type":"method","name":"raw_value","children":[],"call":[]}," ActiveSupport Cache Entry initialize":{"type":"method","name":"initialize","children":[],"call":["Zlib Deflate  deflate ","Marshal  dump "," should_compress? ","Time  now to_f ","Time  now ","@expires_in to_f ","options [] ","value nil? "," compress ","(send\n  (send\n    (const nil :Time) :now) :+\n  (lvar :expires_in)) to_i ","Time  now + "," compress! ","expires_in to_f ","expires_in to_f + ","@expires_in to_f  to_f ","options []  to_f ","@options []  to_f ","(send\n  (send\n    (const nil :Time) :now) :+\n  (lvar :options [] )) to_i ","options []  to_f + "]}," ActiveSupport Cache Entry create":{"type":"method","name":"create","children":[],"call":["entry instance_variable_set ","options [] ","options [] ! ! ","options [] ! ","created_at to_f "," new "," new  instance_variable_set "]}," ActiveSupport Cache Store instrument":{"type":"method","name":"instrument","children":[],"call":["ActiveSupport Notifications  instrument ","payload merge! ","options is_a? "," class instrument "," class "," log ","options inspect ","options blank? "," normalize_key "," class name "," logger debug "," logger "," silence? ! "," silence? "," logger debug? "," _instrument "]}," ActiveSupport Cache Store namespaced_key":{"type":"method","name":"namespaced_key","children":[],"call":["namespace call ","namespace is_a? ","options [] "," expanded_key "," normalize_key ","ActiveSupport Deprecation  warn ","(str \"            `namespaced_key` is deprecated and will be removed from Rails 5.1.\\n\") strip_heredoc ","options []  call ","options []  is_a? "," expanded_ expanded_key  "," normalize_ expanded_key  ","(str \"            `options [] d_key` is deprecated and will be removed from Rails 5.1.\\n\") strip_heredoc ","(str \"            `namespaced_ expanded_key ` is deprecated and will be removed from Rails 5.1.\\n\") strip_heredoc "]}," ActiveSupport Cache Store expanded_key":{"type":"method","name":"expanded_key","children":[],"call":["key to_param ","(send\n  (block\n    (send\n      (send\n        (lvar :key) :to_a) :sort)\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (send\n        (send\n          (lvar :a) :first) :to_s) :<=>\n      (send\n        (send\n          (lvar :b) :first) :to_s))) :collect) to_param ","(send\n  (send\n    (lvar :key) :to_a) :sort) collect ","a first to_s <=> ","b first to_s ","b first ","a first to_s ","a first ","key to_a sort ","key to_a ","key is_a? ","key first to_param ","key first ","(send\n  (lvar :key) :collect) to_param "," expanded_key ","key collect ","key size > ","key size ","key cache_key to_s ","key cache_key ","key respond_to? ","(send\n  (lvar :key) :sort_by) collect ","k to_s ","key sort_by ","(lvar :key) to_param ","(send\n  (lvar :key) :collect) sort! ","key to_param  to_param ","(send\n  (block\n    (send\n      (send\n        (lvar :key) :to_a) :sort)\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (send\n        (send\n          (lvar :a) :first) :to_s) :<=>\n      (send\n        (send\n          (lvar :b) :first) :to_s))) :collect) to_param  to_param ","key cache_key to_s  to_param ","key first  to_param "," expanded_key  to_param ","(send\n  (block\n    (send\n      (send\n        (lvar :key to_param ) :to_a) :sort)\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (send\n        (send\n          (lvar :a) :first) :to_s) :<=>\n      (send\n        (send\n          (lvar :b) :first) :to_s))) :collect) to_param ","(send\n  (block\n    (send\n      (send\n        (lvar :(send\n  (block\n    (send\n      (send\n        (lvar :key) :to_a) :sort)\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (send\n        (send\n          (lvar :a) :first) :to_s) :<=>\n      (send\n        (send\n          (lvar :b) :first) :to_s))) :collect) to_param ) :to_a) :sort)\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (send\n        (send\n          (lvar :a) :first) :to_s) :<=>\n      (send\n        (send\n          (lvar :b) :first) :to_s))) :collect) to_param ","(send\n  (block\n    (send\n      (send\n        (lvar :key cache_key to_s ) :to_a) :sort)\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (send\n        (send\n          (lvar :a) :first) :to_s) :<=>\n      (send\n        (send\n          (lvar :b) :first) :to_s))) :collect) to_param ","(send\n  (block\n    (send\n      (send\n        (lvar :key first ) :to_a) :sort)\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (send\n        (send\n          (lvar :a) :first) :to_s) :<=>\n      (send\n        (send\n          (lvar :b) :first) :to_s))) :collect) to_param ","(send\n  (block\n    (send\n      (send\n        (lvar : expanded_key ) :to_a) :sort)\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (send\n        (send\n          (lvar :a) :first) :to_s) :<=>\n      (send\n        (send\n          (lvar :b) :first) :to_s))) :collect) to_param ","(send\n  (send\n    (lvar :key to_param ) :to_a) :sort) collect ","(send\n  (send\n    (lvar :(send\n  (block\n    (send\n      (send\n        (lvar :key) :to_a) :sort)\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (send\n        (send\n          (lvar :a) :first) :to_s) :<=>\n      (send\n        (send\n          (lvar :b) :first) :to_s))) :collect) to_param ) :to_a) :sort) collect ","(send\n  (send\n    (lvar :key cache_key to_s ) :to_a) :sort) collect ","(send\n  (send\n    (lvar :key first ) :to_a) :sort) collect ","(send\n  (send\n    (lvar : expanded_key ) :to_a) :sort) collect ","key to_param  to_a sort ","(send\n  (block\n    (send\n      (send\n        (lvar :key) :to_a) :sort)\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (send\n        (send\n          (lvar :a) :first) :to_s) :<=>\n      (send\n        (send\n          (lvar :b) :first) :to_s))) :collect) to_param  to_a sort ","key cache_key to_s  to_a sort ","key first  to_a sort "," expanded_key  to_a sort ","key to_param  to_a ","(send\n  (block\n    (send\n      (send\n        (lvar :key) :to_a) :sort)\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (send\n        (send\n          (lvar :a) :first) :to_s) :<=>\n      (send\n        (send\n          (lvar :b) :first) :to_s))) :collect) to_param  to_a ","key cache_key to_s  to_a ","key first  to_a "," expanded_key  to_a ","key to_param  is_a? ","(send\n  (block\n    (send\n      (send\n        (lvar :key) :to_a) :sort)\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (send\n        (send\n          (lvar :a) :first) :to_s) :<=>\n      (send\n        (send\n          (lvar :b) :first) :to_s))) :collect) to_param  is_a? ","key cache_key to_s  is_a? ","key first  is_a? "," expanded_key  is_a? ","key to_param  first to_param ","(send\n  (block\n    (send\n      (send\n        (lvar :key) :to_a) :sort)\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (send\n        (send\n          (lvar :a) :first) :to_s) :<=>\n      (send\n        (send\n          (lvar :b) :first) :to_s))) :collect) to_param  first to_param ","key cache_key to_s  first to_param ","key first  first to_param "," expanded_key  first to_param ","key to_param  first ","(send\n  (block\n    (send\n      (send\n        (lvar :key) :to_a) :sort)\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (send\n        (send\n          (lvar :a) :first) :to_s) :<=>\n      (send\n        (send\n          (lvar :b) :first) :to_s))) :collect) to_param  first ","key cache_key to_s  first ","key first  first "," expanded_key  first ","(send\n  (lvar :key to_param ) :collect) to_param ","(send\n  (lvar :(send\n  (block\n    (send\n      (send\n        (lvar :key) :to_a) :sort)\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (send\n        (send\n          (lvar :a) :first) :to_s) :<=>\n      (send\n        (send\n          (lvar :b) :first) :to_s))) :collect) to_param ) :collect) to_param ","(send\n  (lvar :key cache_key to_s ) :collect) to_param ","(send\n  (lvar :key first ) :collect) to_param ","(send\n  (lvar : expanded_key ) :collect) to_param "," expanded_key to_param  "," expanded_(send\n  (block\n    (send\n      (send\n        (lvar :key) :to_a) :sort)\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (send\n        (send\n          (lvar :a) :first) :to_s) :<=>\n      (send\n        (send\n          (lvar :b) :first) :to_s))) :collect) to_param  "," expanded_key cache_key to_s  "," expanded_key first  "," expanded_ expanded_key  ","key to_param  collect ","(send\n  (block\n    (send\n      (send\n        (lvar :key) :to_a) :sort)\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (send\n        (send\n          (lvar :a) :first) :to_s) :<=>\n      (send\n        (send\n          (lvar :b) :first) :to_s))) :collect) to_param  collect ","key cache_key to_s  collect ","key first  collect "," expanded_key  collect ","key to_param  size > ","(send\n  (block\n    (send\n      (send\n        (lvar :key) :to_a) :sort)\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (send\n        (send\n          (lvar :a) :first) :to_s) :<=>\n      (send\n        (send\n          (lvar :b) :first) :to_s))) :collect) to_param  size > ","key cache_key to_s  size > ","key first  size > "," expanded_key  size > ","key to_param  size ","(send\n  (block\n    (send\n      (send\n        (lvar :key) :to_a) :sort)\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (send\n        (send\n          (lvar :a) :first) :to_s) :<=>\n      (send\n        (send\n          (lvar :b) :first) :to_s))) :collect) to_param  size ","key cache_key to_s  size ","key first  size "," expanded_key  size ","key to_param  cache_key to_param  to_s ","(send\n  (block\n    (send\n      (send\n        (lvar :key) :to_a) :sort)\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (send\n        (send\n          (lvar :a) :first) :to_s) :<=>\n      (send\n        (send\n          (lvar :b) :first) :to_s))) :collect) to_param  cache_(send\n  (block\n    (send\n      (send\n        (lvar :key) :to_a) :sort)\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (send\n        (send\n          (lvar :a) :first) :to_s) :<=>\n      (send\n        (send\n          (lvar :b) :first) :to_s))) :collect) to_param  to_s ","key cache_key to_s  cache_key cache_key to_s  to_s ","key first  cache_key first  to_s "," expanded_key  cache_ expanded_key  to_s ","key to_param  cache_key to_param  ","(send\n  (block\n    (send\n      (send\n        (lvar :key) :to_a) :sort)\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (send\n        (send\n          (lvar :a) :first) :to_s) :<=>\n      (send\n        (send\n          (lvar :b) :first) :to_s))) :collect) to_param  cache_(send\n  (block\n    (send\n      (send\n        (lvar :key) :to_a) :sort)\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (send\n        (send\n          (lvar :a) :first) :to_s) :<=>\n      (send\n        (send\n          (lvar :b) :first) :to_s))) :collect) to_param  ","key cache_key to_s  cache_key cache_key to_s  ","key first  cache_key first  "," expanded_key  cache_ expanded_key  ","key to_param  respond_to? ","(send\n  (block\n    (send\n      (send\n        (lvar :key) :to_a) :sort)\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (send\n        (send\n          (lvar :a) :first) :to_s) :<=>\n      (send\n        (send\n          (lvar :b) :first) :to_s))) :collect) to_param  respond_to? ","key cache_key to_s  respond_to? ","key first  respond_to? "," expanded_key  respond_to? ","(send\n  (lvar :key to_param ) :sort_by) collect ","(send\n  (lvar :(send\n  (block\n    (send\n      (send\n        (lvar :key) :to_a) :sort)\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (send\n        (send\n          (lvar :a) :first) :to_s) :<=>\n      (send\n        (send\n          (lvar :b) :first) :to_s))) :collect) to_param ) :sort_by) collect ","(send\n  (lvar :key cache_key to_s ) :sort_by) collect ","(send\n  (lvar :key first ) :sort_by) collect ","(send\n  (lvar : expanded_key ) :sort_by) collect ","key to_param  sort_by ","(send\n  (block\n    (send\n      (send\n        (lvar :key) :to_a) :sort)\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (send\n        (send\n          (lvar :a) :first) :to_s) :<=>\n      (send\n        (send\n          (lvar :b) :first) :to_s))) :collect) to_param  sort_by ","key cache_key to_s  sort_by ","key first  sort_by "," expanded_key  sort_by ","(lvar :key to_param ) to_param ","(lvar :(send\n  (block\n    (send\n      (send\n        (lvar :key) :to_a) :sort)\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (send\n        (send\n          (lvar :a) :first) :to_s) :<=>\n      (send\n        (send\n          (lvar :b) :first) :to_s))) :collect) to_param ) to_param ","(lvar :key cache_key to_s ) to_param ","(lvar :key first ) to_param ","(lvar : expanded_key ) to_param ","(send\n  (lvar :key to_param ) :collect) sort! ","(send\n  (lvar :(send\n  (block\n    (send\n      (send\n        (lvar :key) :to_a) :sort)\n    (args\n      (arg :a)\n      (arg :b))\n    (send\n      (send\n        (send\n          (lvar :a) :first) :to_s) :<=>\n      (send\n        (send\n          (lvar :b) :first) :to_s))) :collect) to_param ) :collect) sort! ","(send\n  (lvar :key cache_key to_s ) :collect) sort! ","(send\n  (lvar :key first ) :collect) sort! ","(send\n  (lvar : expanded_key ) :collect) sort! "]}," ActiveSupport Cache Store merged_options":{"type":"method","name":"merged_options","children":[],"call":[" options dup "," options "," options merge "," options empty? "," normalize_options "," handle_invalid_expires_in ","call_options delete ","call_options [] "," raise ","ArgumentError  new ","call_options [] is_a? ","call_options []= ","expires_at - ","Time  now ","call_options key? "," handle_invalid_call_options delete  "," handle_invalid_call_options []  "," normalize_options  delete "," normalize_options  [] "," normalize_options  [] is_a? "," normalize_options  []= ","call_options delete  - "," normalize_options  key? "]}," ActiveSupport Cache Store delete_entry":{"type":"method","name":"delete_entry","children":[],"call":[" raise ","NotImplementedError  new "]}," ActiveSupport Cache Store write_entry":{"type":"method","name":"write_entry","children":[],"call":[" raise ","NotImplementedError  new "]}," ActiveSupport Cache Store read_entry":{"type":"method","name":"read_entry","children":[],"call":[" raise ","NotImplementedError  new "]}," ActiveSupport Cache Store key_matcher":{"type":"method","name":"key_matcher","children":[],"call":["Regexp  new ","pattern options ","Regexp  escape ","source [] ","source length ","source start_with? ","pattern source ","options [] ","options [] call ","options [] is_a? ","source []  [] ","pattern source  [] ","source []  length ","pattern source  length ","source []  start_with? ","pattern source  start_with? ","pattern source []  ","pattern pattern source  "]}," ActiveSupport Cache Store clear":{"type":"method","name":"clear","children":[],"call":[" raise ","NotImplementedError  new "," class name "," class "]}," ActiveSupport Cache Store cleanup":{"type":"method","name":"cleanup","children":[],"call":[" raise ","NotImplementedError  new "," class name "," class "]}," ActiveSupport Cache Store read_multi":{"type":"method","name":"read_multi","children":[],"call":["results []= ","entry value "," delete_entry ","entry expired? "," read_entry "," namespaced_key ","names each "," merged_options ","names extract_options! "," normalize_key "," instrument_multi ","payload []= ","results keys "," read_multi_entries tap "," read_multi_entries "," instrument ","entry mismatched? "," normalize_version ","names empty? "," read_entry  value "," delete_ read_entry  "," read_entry  expired? "," read_ read_entry  "," namespaced_ namespaced_key  "," namespaced_ normalize_key  "," merged_ merged_options  "," merged_names extract_options!  ","names extract_ merged_options ! ","names extract_names extract_options! ! "," normalize_ namespaced_key  "," normalize_ normalize_key  ","results  namespaced_key s ","results  normalize_key s "," read_entry  mismatched? "," normalize_ normalize_version  "]}," ActiveSupport Cache Store instrument=":{"type":"method","name":"instrument=","children":[],"call":[]}," ActiveSupport Cache Strategy LocalCache bypass_local_cache":{"type":"method","name":"bypass_local_cache","children":[],"call":["Thread  current []= "," thread_local_key ","Thread  current ","Thread  current [] "," use_temporary_local_cache "]}," ActiveSupport Cache Strategy LocalCache delete_entry":{"type":"method","name":"delete_entry","children":[],"call":[" local_cache delete_entry "," local_cache "]}," ActiveSupport Cache Strategy LocalCache write_entry":{"type":"method","name":"write_entry","children":[],"call":[" local_cache write_entry "," local_cache "," local_cache delete_entry ","options [] "]}," ActiveSupport Cache Strategy LocalCache read_entry":{"type":"method","name":"read_entry","children":[],"call":[" local_cache write_entry "," local_cache "," local_cache read_entry ","cache fetch_entry ","options [] []= ","cache class name ","cache class ","options [] "," local_cache write_ local_cache read_entry  "," local_ local_cache  write_entry "," local_ local_cache  "," local_cache read_ local_cache read_entry  "," local_ local_cache  read_entry ","cache fetch_ local_cache read_entry  "," local_cache  fetch_entry "," local_cache  class name "," local_cache  class "]}," ActiveSupport Cache Strategy LocalCache cleanup":{"type":"method","name":"cleanup","children":[],"call":[" local_cache clear "," local_cache ","cache clear "," local_ local_cache  clear "," local_ local_cache  "," local_cache  clear "]}," ActiveSupport Cache Strategy LocalCache LocalStore delete_entry":{"type":"method","name":"delete_entry","children":[],"call":["@data delete ! ! ","@data delete ! ","@data delete "]}," ActiveSupport Cache Strategy LocalCache LocalStore write_entry":{"type":"method","name":"write_entry","children":[],"call":["@data []= ","entry dup_value! "]}," ActiveSupport Cache Strategy LocalCache LocalStore read_entry":{"type":"method","name":"read_entry","children":[],"call":["@data [] "]}," ActiveSupport Cache Strategy LocalCache LocalStore clear":{"type":"method","name":"clear","children":[],"call":["@data clear "]}," ActiveSupport Cache Strategy LocalCache LocalStore synchronize":{"type":"method","name":"synchronize","children":[],"call":[]}," ActiveSupport Cache Strategy LocalCache LocalStore initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Cache MemoryStore delete_entry":{"type":"method","name":"delete_entry","children":[],"call":["entry ! ! ","entry ! ","entry size ","@data delete ","@key_access delete "," synchronize "," cached_size ","payload ! ! ","payload ! ","@data delete  ! ! ","@data delete  ! ","@data delete  size "]}," ActiveSupport Cache MemoryStore write_entry":{"type":"method","name":"write_entry","children":[],"call":[" prune ","@max_size * ","@cache_size > ","@data []= ","@key_access []= ","Time  now to_f ","Time  now ","entry size ","old_entry size ","@data [] "," synchronize ","options [] ","@data key? ","entry dup_value! "," cached_size ","old_entry size - ","old_payload bytesize - ","payload bytesize ","old_payload bytesize "," serialize_entry "," exist? ","@data []  size ","@data []  size - ","@data []  bytesize - ","old_ serialize_entry  bytesize - "," serialize_entry  bytesize ","@data []  bytesize ","old_ serialize_entry  bytesize "]}," ActiveSupport Cache MemoryStore read_entry":{"type":"method","name":"read_entry","children":[],"call":["@key_access delete ","@key_access []= ","Time  now to_f ","Time  now "," synchronize ","@data [] ","entry dup_value! ","entry dup "," deserialize_entry ","@data []= ","@data delete ","@data []  dup_value! ","entry dup  dup_value! "," deserialize_entry  dup_value! ","@data []  dup ","entry dup  dup "," deserialize_entry  dup "," deserialize_@data []  "," deserialize_entry dup  "," deserialize_ deserialize_entry  "]}," ActiveSupport Cache MemoryStore synchronize":{"type":"method","name":"synchronize","children":[],"call":["@monitor synchronize "]}," ActiveSupport Cache MemoryStore inspect":{"type":"method","name":"inspect","children":[],"call":["@options inspect ","@data size "," class name "," class "]}," ActiveSupport Cache MemoryStore decrement":{"type":"method","name":"decrement","children":[],"call":[" write ","num to_i - ","num to_i "," read "," merged_options "," synchronize "," modify_value ","amount -@ ","num to_i -  to_i - "," read  to_i - ","num to_i -  to_i "," read  to_i "," merged_ merged_options  "]}," ActiveSupport Cache MemoryStore increment":{"type":"method","name":"increment","children":[],"call":[" write ","num to_i + ","num to_i "," read "," merged_options "," synchronize "," modify_value ","num to_i +  to_i + "," read  to_i + ","num to_i +  to_i "," read  to_i "," merged_ merged_options  "]}," ActiveSupport Cache MemoryStore pruning?":{"type":"method","name":"pruning?","children":[],"call":[]}," ActiveSupport Cache MemoryStore prune":{"type":"method","name":"prune","children":[],"call":["Time  now - > ","Time  now - ","Time  now ","@cache_size <= "," delete_entry "," options ","keys each ","@key_access [] to_f <=> ","@key_access [] to_f ","@key_access [] ","@key_access keys sort ","@key_access keys "," synchronize "," instrument "," cleanup "," pruning? ","Concurrent  monotonic_time - > ","Concurrent  monotonic_time - ","Concurrent  monotonic_time ","@data keys ","Process  clock_gettime - > ","Process  clock_gettime - ","Process  clock_gettime "]}," ActiveSupport Cache MemoryStore cleanup":{"type":"method","name":"cleanup","children":[],"call":[" delete_entry ","entry expired? ","@data [] ","keys each ","@data keys "," synchronize "," instrument ","@data size "," merged_options "," _instrument "," delete_@data []  ","@data []  expired? "," merged_ merged_options  "]}," ActiveSupport Cache FileStore delete_empty_directories":{"type":"method","name":"delete_empty_directories","children":[],"call":[" delete_empty_directories ","File  dirname ","File  delete ","(send\n  (send\n    (const nil :Dir) :entries\n    (lvar :dir)) :reject) empty? ","(str \".\") include? ","Dir  entries reject ","Dir  entries ","dir == "," cache_path ","f in? ","Dir  delete ","EXCLUDED_DIRS  include? ","File  realpath == ","File  realpath "," exclude_from empty? "," exclude_from ","Dir  children empty? ","Dir  children "]}," ActiveSupport Cache FileStore file_path_key":{"type":"method","name":"file_path_key","children":[],"call":["1 ord to_s ","1 ord ","fname gsub ","path [] split last ","path [] split ","path [] ","path size "," cache_path size "," cache_path ","Rack Utils  unescape ","URI  decode_www_form_component "," cache_path to_s size "," cache_path to_s ","path [] split last delete ","path [] split last  gsub ","path [] split last delete  gsub "]}," ActiveSupport Cache FileStore key_file_path":{"type":"method","name":"key_file_path","children":[],"call":["File  join ","DIR_FORMATTER  % "," cache_path ","fname [] "," fname_path << "," fname_path ","fname size <= ","fname size ","fname_paths << ","hash modulo ","hash divmod ","Zlib  adler32 ","match ord to_s upcase ","match ord to_s ","match ord ","key to_s gsub ","key to_s ","Rack Utils  escape ","fname blank? ","URI  encode_www_form_component ","Digest MD5  hexdigest ","key size > ","key size ","ActiveSupport Deprecation  warn ","(str \"            `key_file_path` is deprecated and will be removed from Rails 5.1.\\n\") strip_heredoc ","fname []  [] ","Rack Utils  escape  [] ","URI  encode_www_form_component  [] "," fname [] _path << "," Rack Utils  escape _path << "," URI  encode_www_form_component _path << "," fname [] _path "," Rack Utils  escape _path "," URI  encode_www_form_component _path ","fname []  size <= ","Rack Utils  escape  size <= ","URI  encode_www_form_component  size <= ","fname []  size ","Rack Utils  escape  size ","URI  encode_www_form_component  size ","fname [] _paths << ","Rack Utils  escape _paths << ","URI  encode_www_form_component _paths << ","Zlib  adler32  modulo ","Zlib  adler32  divmod ","Digest MD5  hexdigest  to_s gsub ","Digest MD5  hexdigest  to_s ","fname []  blank? ","Rack Utils  escape  blank? ","URI  encode_www_form_component  blank? ","Digest MD5  hexdigest  size > ","Digest MD5  hexdigest  size ","(str \"            `Digest MD5  hexdigest _file_path` is deprecated and will be removed from Rails 5.1.\\n\") strip_heredoc "]}," ActiveSupport Cache FileStore lock_file":{"type":"method","name":"lock_file","children":[],"call":["f flock ","File  open ","File  exist? "]}," ActiveSupport Cache FileStore delete_entry":{"type":"method","name":"delete_entry","children":[],"call":[" raise ","File  exist? "," delete_empty_directories ","File  dirname ","File  delete "," key_file_path "]}," ActiveSupport Cache FileStore write_entry":{"type":"method","name":"write_entry","children":[],"call":["Marshal  dump ","File  atomic_write "," cache_path "," ensure_cache_path ","File  dirname "," key_file_path ","File  exist? ","options [] ","f write "," serialize_entry "," write_serialized_entry "]}," ActiveSupport Cache FileStore read_entry":{"type":"method","name":"read_entry","children":[],"call":[" delete_entry ","entry created_at + <= ","Time  now to_f ","Time  now ","entry created_at + ","deprecated_expires_in to_f ","entry created_at ","ActiveSupport Deprecation  warn "," caller ","options [] "," options [] ! "," options [] "," options ","entry expires_in ! ","entry expires_in ","entry expired? ! ","entry expired? ","Marshal  load ","File  open ","File  exist? "," key_file_path "," logger error ","e message "," logger ","entry is_a? "," deserialize_entry ","f read "," read_serialized_entry "," delete_ deserialize_entry  "," deserialize_entry  created_at + <= "," deserialize_entry  created_at + ","options []  to_f "," deserialize_entry  created_at "," deserialize_entry  expires_in ! "," deserialize_entry  expires_in "," deserialize_entry  expired? ! "," deserialize_entry  expired? "," deserialize_entry  is_a? "," deserialize_ deserialize_entry  "," read_serialized_ deserialize_entry  "]}," ActiveSupport Cache FileStore decrement":{"type":"method","name":"decrement","children":[],"call":[" write ","num to_i - ","num to_i "," read "," merged_options "," lock_file "," key_file_path "," namespaced_key "," modify_value ","amount -@ ","num to_i -  to_i - "," read  to_i - ","num to_i -  to_i "," read  to_i "," merged_ merged_options  "]}," ActiveSupport Cache FileStore increment":{"type":"method","name":"increment","children":[],"call":[" write ","num to_i + ","num to_i "," read "," merged_options "," lock_file "," key_file_path "," namespaced_key "," modify_value ","num to_i +  to_i + "," read  to_i + ","num to_i +  to_i "," read  to_i "," merged_ merged_options  "]}," ActiveSupport Cache FileStore cleanup":{"type":"method","name":"cleanup","children":[],"call":[" delete_entry ","entry expired? "," read_entry "," each_key "," merged_options "," file_path_key "," search_dir "," cache_path "," delete_ read_entry  "," read_entry  expired? "," read_ read_entry  "," each_ file_path_key  "," merged_ merged_options  "," file_path_ file_path_key  "]}," ActiveSupport Cache FileStore clear":{"type":"method","name":"clear","children":[],"call":["FileUtils  rm_r ","File  join "," cache_path ","root_dirs collect ","(str \".\") include? ","Dir  entries reject ","Dir  entries ","f in? ","(send\n  (const nil :EXCLUDED_DIRS) :+\n  (array\n    (str \".gitkeep\"))) include? ","EXCLUDED_DIRS  + "," exclude_from ","Dir  children - ","Dir  children "," exclude_from  collect "]}," ActiveSupport Cache CompressedMemCacheStore initialize":{"type":"method","name":"initialize","children":[],"call":["addresses + ","options merge ","addresses extract_options! ","args dup ","ActiveSupport Deprecation  warn "," caller ","args dup  + ","addresses extract_options!  merge ","addresses extract_addresses extract_options! ! ","args dup  extract_options! ","addresses +  dup "]}," ActiveSupport Benchmarkable silence":{"type":"method","name":"silence","children":[],"call":[" logger level= "," logger "," logger level ","ActiveSupport Deprecation  warn "]}," ActiveSupport Benchmarkable benchmark":{"type":"method","name":"benchmark","children":[],"call":[" logger send ","%s (%.1fms) % ","options [] "," logger "," logger silence ","Benchmark  ms ","options assert_valid_keys ","ActiveSupport Deprecation  warn "," caller ","options is_a? "," silence "," logger public_send "]}," ActiveSupport encode64s":{"type":"method","name":"encode64s","children":[],"call":[]}," ActiveSupport BacktraceCleaner noise":{"type":"method","name":"noise","children":[],"call":["s call ","backtrace select ","@silencers each ","backtrace - "," silence ","@silencers any? ","line to_s "]}," ActiveSupport BacktraceCleaner remove_filters!":{"type":"method","name":"remove_filters!","children":[],"call":[]}," ActiveSupport Notifications Notifier wait":{"type":"method","name":"wait","children":[],"call":["@queue wait "]}," ActiveSupport Notifications Notifier subscribe":{"type":"method","name":"subscribe","children":[],"call":["@queue bind subscribe ","@queue bind "]}," ActiveSupport Notifications Notifier publish":{"type":"method","name":"publish","children":[],"call":["@queue publish "]}," ActiveSupport Notifications Notifier initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Notifications Event duration":{"type":"method","name":"duration","children":[],"call":["1000.0 * ","@end - "," end - "," time "," end "]}," ActiveSupport Notifications Fanout Subscriber push":{"type":"method","name":"push","children":[],"call":["@block call "]}," ActiveSupport Notifications Fanout Subscriber drained?":{"type":"method","name":"drained?","children":[],"call":[]}," ActiveSupport Notifications Fanout Binding subscribe":{"type":"method","name":"subscribe","children":[],"call":["@queue subscribe "]}," ActiveSupport Notifications Fanout Binding initialize":{"type":"method","name":"initialize","children":[],"call":["Regexp  escape ","pattern to_s "]}," ActiveSupport Notifications Fanout bind":{"type":"method","name":"bind","children":[],"call":["Binding  new "]}," ActiveSupport JSON Variable rails_to_json":{"type":"method","name":"rails_to_json","children":[],"call":[]}," Regexp encode_json":{"type":"method","name":"encode_json","children":[],"call":[" inspect "]}," Variable encode_json":{"type":"method","name":"encode_json","children":[],"call":[]}," Variable as_json":{"type":"method","name":"as_json","children":[],"call":[]}," ActiveSupport HashWithIndifferentAccess symbolize_keys!":{"type":"method","name":"symbolize_keys!","children":[],"call":[]}," Time last_month":{"type":"method","name":"last_month","children":[],"call":[" months_ago "]}," Time last_year":{"type":"method","name":"last_year","children":[],"call":[" years_ago "]}," ActiveSupport SafeBuffer <<":{"type":"method","name":"<<","children":[],"call":[" concat "]}," String chars":{"type":"method","name":"chars","children":[],"call":[" mb_chars ","ActiveSupport Deprecation  warn "," caller "]}," Hash rename_key":{"type":"method","name":"rename_key","children":[],"call":["key dasherize ","key camelize ","options [] ","options has_key? ! ","options has_key? ","key camelize  dasherize ","key camelize  camelize ","options has_key camelize ? ! ","options has_key camelize ? "]}," Hash FileLike content_type":{"type":"method","name":"content_type","children":[],"call":[]}," Hash FileLike original_filename":{"type":"method","name":"original_filename","children":[],"call":[]}," Date last_month":{"type":"method","name":"last_month","children":[],"call":[" months_ago "]}," Date last_year":{"type":"method","name":"last_year","children":[],"call":[" years_ago "]}," Array rand":{"type":"method","name":"rand","children":[],"call":[" [] ","Kernel  rand "," length "]}," ActiveSupport Configurable ClassMethods config=":{"type":"method","name":"config=","children":[],"call":["@config []= ","hash each ","ActiveSupport OrderedOptions  new ","ActiveSupport OrderedOptions  new  []= "]}," ActiveSupport Configurable ClassMethods get_config":{"type":"method","name":"get_config","children":[],"call":["mod const_get "," const_defined? ","modules reverse_each ","modules push ","modules last const_get ","modules last ","module_parts each "," name split "," name "," name split  each "]}," ActiveSupport Notifications Notifier unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":["@queue unsubscribe "]}," ActiveSupport Dependencies WatchStack lock":{"type":"method","name":"lock","children":[],"call":["@mutex synchronize "]}," ActiveSupport Dependencies WatchStack add_modules":{"type":"method","name":"add_modules","children":[],"call":[" concat ","Inflector  constantize local_constant_names ","Inflector  constantize ","Dependencies  qualified_const_defined? ","Dependencies  to_constant_name ","modules map ","Inflector  constantize local_constant_Dependencies  to_constant_name s ","Dependencies  to_constant_Dependencies  to_constant_name  "]}," ActiveSupport Dependencies WatchStack new_constants_for":{"type":"method","name":"new_constants_for","children":[],"call":["constants << ","(send\n  (array\n    (lvar :mod_name)\n    (lvar :suffix)) :-\n  (array\n    (str \"Object\"))) join ","(lvar :mod_name) - ","new_constants each "," get concat "," get ","mod local_constant_names - ","mod local_constant_names ","mod is_a? ","Inflector  constantize ","Dependencies  qualified_const_defined? ","frames each ","value concat ","key == "," each ","(send\n  (array\n    (lvar :Inflector  constantize _name)\n    (lvar :suffix)) :-\n  (array\n    (str \"Object\"))) join ","(lvar :Inflector  constantize _name) - ","mod local_constant_names -  each ","Inflector  constantize  local_constant_names - ","Inflector  constantize  local_constant_names ","Inflector  constantize  is_a? "]}," ActiveSupport Dependencies WatchStack get":{"type":"method","name":"get","children":[],"call":["val [] "," assoc "," assoc  [] "]}," ActiveSupport Dependencies WatchStack locked":{"type":"method","name":"locked","children":[],"call":[]}," Class subclasses_of":{"type":"method","name":"subclasses_of","children":[],"call":[]}," Class descendents":{"type":"method","name":"descendents","children":[],"call":["subclasses uniq! ","subclasses << ","k < ","ObjectSpace  each_object ","k == ","subclasses concat ","k descendents "," __subclasses__ each "," __subclasses__ "]}," ActiveSupport Multibyte Chars apply_mapping":{"type":"method","name":"apply_mapping","children":[],"call":[" chars ","(send\n  (send\n    (send\n      (self) :class) :u_unpack\n    (ivar :@wrapped_string)) :map) pack ","ncp > ","cp send ","UCD  codepoints [] ","UCD  codepoints "," class u_unpack map "," class u_unpack "," class ","cp send  > ","nUCD  codepoints []  > ","UCD  codepoints []  send "]}," ActiveSupport Multibyte Chars tidy_byte":{"type":"method","name":"tidy_byte","children":[],"call":["byte - ","byte < ","(or\n  (send\n    (send\n      (const nil :UCD) :cp1252) :[]\n    (lvar :byte))\n  (lvar :byte)) pack unpack ","(or\n  (send\n    (send\n      (const nil :UCD) :cp1252) :[]\n    (lvar :byte))\n  (lvar :byte)) pack ","UCD  cp1252 [] ","UCD  cp1252 "]}," ActiveSupport Multibyte Chars compose_codepoints":{"type":"method","name":"compose_codepoints","children":[],"call":["codepoints [] ","current combining_class == ","current combining_class ","codepoints delete_at ","codepoints []= ","composition nil? ","ref [] ","UCD  composition_map [] ","UCD  composition_map ","current combining_class > ","UCD  codepoints [] ","UCD  codepoints ","(send\n  (send\n    (lvar :lindex) :*\n    (const nil :HANGUL_VCOUNT)) :+\n  (lvar :vindex)) * + + ","(send\n  (send\n    (lvar :lindex) :*\n    (const nil :HANGUL_VCOUNT)) :+\n  (lvar :vindex)) * + ","(send\n  (send\n    (lvar :lindex) :*\n    (const nil :HANGUL_VCOUNT)) :+\n  (lvar :vindex)) * ","lindex * + ","lindex * ","starter_pos + ","tindex < ","0 <= ","codepoints [] - ","vindex < ","lindex < ","starter_char - ","pos < ","codepoints length - ","codepoints length ","UCD  codepoints []  combining_class == ","UCD  codepoints []  combining_class ","ref []  nil? ","UCD  composition_map []  [] ","UCD  ref [] _map [] ","UCD  ref [] _map ","UCD  codepoints []  combining_class > ","(send\n  (send\n    (lvar :starter_char - ) :*\n    (const nil :HANGUL_VCOUNT)) :+\n  (lvar :vindex)) * + + ","(send\n  (send\n    (lvar :starter_char - ) :*\n    (const nil :HANGUL_VCOUNT)) :+\n  (lvar :vindex)) * + ","(send\n  (send\n    (lvar :starter_char - ) :*\n    (const nil :HANGUL_VCOUNT)) :+\n  (lvar :vindex)) * ","starter_char -  * + ","starter_char -  * ","starter_char -  < ","codepoints []  - "]}," ActiveSupport Multibyte Chars decompose_codepoints":{"type":"method","name":"decompose_codepoints","children":[],"call":["decomposed << ","decomposed concat "," decompose_codepoints ","ncp dup ","type == ","UCD  codepoints [] decomp_type ! ","UCD  codepoints [] decomp_type ","UCD  codepoints [] ","UCD  codepoints ","UCD  codepoints [] decomp_mapping ","ncp << ","HANGUL_TBASE  + ","tindex == ","sindex % ","HANGUL_VBASE  + ","(send\n  (lvar :sindex) :%\n  (const nil :HANGUL_NCOUNT)) / ","HANGUL_LBASE  + ","sindex / ","cp - ","cp < ","HANGUL_SBASE  <= ","codepoints inject ","UCD  codepoints [] decomp_mapping  dup ","UCD  codepoints [] decomp_mapping  << ","sindex %  == ","cp -  % ","(send\n  (lvar :cp - ) :%\n  (const nil :HANGUL_NCOUNT)) / ","cp -  / "]}," ActiveSupport Multibyte Chars reorder_characters":{"type":"method","name":"reorder_characters","children":[],"call":["pos > ","codepoints []= ","cp1 code ","cp2 code ","pos + ","cp2 combining_class > ","cp2 combining_class ","cp1 combining_class > ","cp1 combining_class ","UCD  codepoints [] ","codepoints [] ","UCD  codepoints ","pos < ","codepoints length - ","codepoints length ","codepoints codepoints length -  - ","codepoints codepoints length -  "]}," ActiveSupport Multibyte Chars g_pack":{"type":"method","name":"g_pack","children":[],"call":["(send\n  (lvar :unpacked) :flatten) pack ","unpacked flatten "]}," ActiveSupport Multibyte Chars g_unpack":{"type":"method","name":"g_unpack","children":[],"call":["unpacked << ","codepoints [] ","pos - ","UCD  boundary [] === ","UCD  boundary [] ","UCD  boundary "," in_char_class? ","current == ","previous == ","pos < ","codepoints length "," u_unpack "," u_unpack  [] ","codepoints []  == "," u_unpack  length "]}," ActiveSupport Multibyte Chars in_char_class?":{"type":"method","name":"in_char_class?","children":[],"call":["UCD  boundary [] === ","UCD  boundary [] ","UCD  boundary ","classes detect "]}," ActiveSupport Multibyte Chars u_unpack":{"type":"method","name":"u_unpack","children":[],"call":[" raise ","string unpack "]}," ActiveSupport Multibyte Chars slice!":{"type":"method","name":"slice!","children":[],"call":[" []= "," [] "," chars ","@wrapped_string slice! ","@wrapped_string  [] ! "]}," ActiveSupport Multibyte Chars codepoints_to_pattern":{"type":"method","name":"codepoints_to_pattern","children":[],"call":[]}," ActiveSupport Cache Store options":{"type":"method","name":"options","children":[],"call":[]}," ActiveSupport XmlMini_JDOM delete_empty":{"type":"method","name":"delete_empty","children":[],"call":["hash delete ","hash [] == ","hash [] "]}," ActiveSupport TimeWithZone encode_with":{"type":"method","name":"encode_with","children":[],"call":["coder represent_scalar "," utc strftime "," utc ","coder represent_object ","coder respond_to? ","coder map= "," time "," time_zone ","coder tag= "]}," ActiveSupport OrderedHash encode_with":{"type":"method","name":"encode_with","children":[],"call":["coder represent_seq "," map "]}," ActiveSupport JSON Encoding Encoder options_for":{"type":"method","name":"options_for","children":[],"call":[" options ","(or\n  (send nil :options)\n  (hash)) merge ","value is_a? "," options merge "," options dup "]}," ActiveSupport JSON Encoding Encoder as_json":{"type":"method","name":"as_json","children":[],"call":["value as_json "," options_for "," check_for_circular_references "]}," ActiveSupport JSON Backends Yaml valid_date?":{"type":"method","name":"valid_date?","children":[],"call":["DateTime  parse ","date_string =~ "]}," I18n Railtie initialize_i18n":{"type":"method","name":"initialize_i18n","children":[],"call":[]}," ActiveSupport Gzip Stream initialize":{"type":"method","name":"initialize","children":[],"call":[" set_encoding "," encoding_aware? "]}," ActiveSupport SafeBuffer dirty?":{"type":"method","name":"dirty?","children":[],"call":[]}," ActiveSupport SafeBuffer to_param":{"type":"method","name":"to_param","children":[],"call":[" to_str "]}," ActiveSupport SafeBuffer initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["other dirty? ","other html_safe? "]}," ActiveSupport SafeBuffer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport SafeBuffer safe_concat":{"type":"method","name":"safe_concat","children":[],"call":[" original_concat "," raise "," dirty? "," html_safe? "]}," ActiveSupport SafeBuffer SafeConcatError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," BigDecimal to_d":{"type":"method","name":"to_d","children":[],"call":[]}," BigDecimal encode_with":{"type":"method","name":"encode_with","children":[],"call":["coder represent_scalar ","YAML_MAPPING  [] "," to_s "]}," ActiveSupport Cache MemCacheStore LocalCacheWithRaw write_entry":{"type":"method","name":"write_entry","children":[],"call":[" local_cache write_entry "," local_cache ","raw_entry expires_at= ","entry expires_at ","Entry  new ","entry value to_s ","entry value ","options [] ","Entry  new  expires_at= "]}," ActiveSupport Cache MemCacheStore deserialize_entry":{"type":"method","name":"deserialize_entry","children":[],"call":["Entry  new ","entry is_a? ","Marshal  load ","entry is_a? ! ","entry nil? ","Entry  new  is_a? ","Entry  new  is_a? ! ","Entry  new  nil? "]}," ActiveSupport Cache MemCacheStore escape_key":{"type":"method","name":"escape_key","children":[],"call":["Digest MD5  hexdigest ","key [] ","key size > ","key size ","match getbyte to_s upcase ","match getbyte to_s ","match getbyte ","key to_s gsub ","key to_s ","key gsub ","key force_encoding ","key encoding_aware? ","key to_s dup ","ActiveSupport Deprecation  warn ","(str \"            `escape_key` is deprecated and will be removed from Rails 5.1.\\n\") strip_heredoc ","key force_encoding  [] ","key to_s dup  [] ","key force_encoding  size > ","key to_s dup  size > ","key force_encoding  size ","key to_s dup  size ","key force_encoding  to_s gsub ","key to_s dup  to_s gsub ","key force_encoding  to_s ","key to_s dup  to_s ","key force_encoding  gsub ","key to_s dup  gsub ","key force_encoding  force_encoding ","key to_s dup  force_encoding ","key force_encoding  encoding_aware? ","key to_s dup  encoding_aware? ","key force_encoding  to_s dup ","key to_s dup  to_s dup ","(str \"            `escape_key force_encoding ` is deprecated and will be removed from Rails 5.1.\\n\") strip_heredoc ","(str \"            `escape_key to_s dup ` is deprecated and will be removed from Rails 5.1.\\n\") strip_heredoc "]}," ActiveSupport Cache MemCacheStore delete_entry":{"type":"method","name":"delete_entry","children":[],"call":[" logger error ","e message "," logger ","response == ","@data delete "," escape_key "," rescue_error_with ","c delete ","@data with ","@data delete  == "]}," ActiveSupport Cache MemCacheStore write_entry":{"type":"method","name":"write_entry","children":[],"call":[" logger error ","e message "," logger ","response == ","@data send ","options [] "," escape_key ","5 minutes ","options [] ! ","expires_in > ","options [] to_i ","entry value to_s ","entry value "," rescue_error_with ","c send ","@data with "," serialize_entry "," write_serialized_entry ","@data send  == ","options [] to_i  > ","entry entry value to_s  to_s ","entry  serialize_entry  to_s ","entry entry value to_s  ","entry  serialize_entry  "]}," ActiveSupport Cache MemCacheStore read_entry":{"type":"method","name":"read_entry","children":[],"call":[" logger error ","e message "," logger "," deserialize_entry ","@data get "," escape_key "," rescue_error_with ","c get ","@data with "," read_serialized_entry "]}," ActiveSupport BufferedLogger open_log":{"type":"method","name":"open_log","children":[],"call":["log sync= ","log set_encoding ","log respond_to? "," open tap "," open ","open_log sync= ","open_log set_encoding ","open_log respond_to? "]}," ActiveSupport SafeBuffer clone_empty":{"type":"method","name":"clone_empty","children":[],"call":["new_safe_buffer instance_variable_set "," [] ","ActiveSupport  deprecator warn ","ActiveSupport  deprecator "," []  instance_variable_set "]}," ActiveSupport SafeBuffer []":{"type":"method","name":"[]","children":[],"call":[" to_str [] "," to_str ","new_safe_buffer instance_eval "," html_safe? ","args size < ","args size ","new_safe_buffer instance_variable_set ","SafeBuffer  new ","new_string is_a? "," string_into_safe_buffer ","SafeBuffer  new  instance_eval ","SafeBuffer  new  instance_variable_set "]}," Hash from_trusted_xml":{"type":"method","name":"from_trusted_xml","children":[],"call":[" from_xml "]}," Hash DisallowedType initialize":{"type":"method","name":"initialize","children":[],"call":["type inspect "]}," requirable?":{"type":"method","name":"requirable?","children":[],"call":[]}," ActiveSupport Testing Isolation run":{"type":"method","name":"run","children":[],"call":[" name ","proxy __replay__ ","Marshal  load ","proxy add_error ","Test Unit Error  new "," run_in_isolation "," class setup "," class "," class respond_to? "," _run_class_setup ","Marshal  load  __replay__ ","Marshal  load  add_error "]}," ActiveSupport Notifications LittleFanout Listener consume":{"type":"method","name":"consume","children":[],"call":["@subscriber call ","@queue shift "]}," ActiveSupport Notifications LittleFanout Listener publish":{"type":"method","name":"publish","children":[],"call":["@queue << ","(send\n  (ivar :@pattern) :===\n  (send\n    (lvar :name) :to_s)) ! ","@pattern === ","name to_s "]}," ActiveSupport Notifications LittleFanout Listener initialize":{"type":"method","name":"initialize","children":[],"call":[" consume ","Thread  new ","Queue  new "]}," ActiveSupport Notifications LittleFanout consume":{"type":"method","name":"consume","children":[],"call":["l publish ","@listeners each ","@stream shift "]}," ActiveSupport Notifications LittleFanout subscribe":{"type":"method","name":"subscribe","children":[],"call":["@listeners << ","Listener  new "]}," ActiveSupport Notifications LittleFanout publish":{"type":"method","name":"publish","children":[],"call":["@stream push "]}," ActiveSupport Notifications LittleFanout initialize":{"type":"method","name":"initialize","children":[],"call":[" consume ","Thread  new ","Queue  new "]}," ActiveSupport Notifications Subscriber subscribe":{"type":"method","name":"subscribe","children":[],"call":["Event  new ","@queue subscribe "]}," ActiveSupport Notifications Subscriber bind":{"type":"method","name":"bind","children":[],"call":[]}," ActiveSupport Notifications Subscriber initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Notifications Publisher publish":{"type":"method","name":"publish","children":[],"call":["@queue publish "]}," ActiveSupport Notifications Publisher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Notifications publisher":{"type":"method","name":"publisher","children":[],"call":["Publisher  new "," queue "]}," ActiveSupport DeprecatedCallbacks run_callbacks":{"type":"method","name":"run_callbacks","children":[],"call":[" class send run "," class send "," class "]}," ActiveSupport DeprecatedCallbacks ClassMethods define_callbacks":{"type":"method","name":"define_callbacks","children":[],"call":[" class_eval ","211 + ","callbacks each ","ActiveSupport Deprecation  warn "," caller "]}," ActiveSupport DeprecatedCallbacks included":{"type":"method","name":"included","children":[],"call":[]}," ActiveSupport DeprecatedCallbacks Callback should_run_callback?":{"type":"method","name":"should_run_callback?","children":[],"call":["(send\n  (send\n    (send\n      (array\n        (send\n          (send nil :options) :[]\n          (sym :unless))) :flatten) :compact) :any?) ! "," evaluate_method ","(send\n  (send nil :options) :[]\n  (sym :unless)) flatten compact any? ","(send\n  (send nil :options) :[]\n  (sym :unless)) flatten compact ","(send\n  (send nil :options) :[]\n  (sym :unless)) flatten "," options [] "," options ","(send\n  (send nil :options) :[]\n  (sym :if)) flatten compact all? ","(send\n  (send nil :options) :[]\n  (sym :if)) flatten compact ","(send\n  (send nil :options) :[]\n  (sym :if)) flatten "]}," ActiveSupport DeprecatedCallbacks Callback evaluate_method":{"type":"method","name":"evaluate_method","children":[],"call":[" raise ","Callbacks must be a symbol denoting the method to call, a string to be evaluated,  + ","method send "," kind ","method respond_to? ","method call "," eval "," binding ","args first instance_eval ","args first ","object send ","args shift ","args shift  send "]}," ActiveSupport DeprecatedCallbacks Callback call":{"type":"method","name":"call","children":[],"call":[" raise ","Cannot yield from a Proc type filter. The Proc must take two  + "," evaluate_method "," method "," should_run_callback? "]}," ActiveSupport DeprecatedCallbacks Callback hash":{"type":"method","name":"hash","children":[],"call":["@method hash ","@identifier hash "]}," ActiveSupport DeprecatedCallbacks Callback dup":{"type":"method","name":"dup","children":[],"call":[" class new ","@options dup "," class "]}," ActiveSupport DeprecatedCallbacks Callback eql?":{"type":"method","name":"eql?","children":[],"call":[" == "]}," ActiveSupport DeprecatedCallbacks Callback ==":{"type":"method","name":"==","children":[],"call":[" method == "," method "," identifier == "," identifier ","other method ","other identifier "]}," ActiveSupport DeprecatedCallbacks Callback initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," ActiveSupport DeprecatedCallbacks CallbackChain extract_options":{"type":"method","name":"extract_options","children":[],"call":[" class extract_options "," class "]}," ActiveSupport DeprecatedCallbacks CallbackChain delete":{"type":"method","name":"delete","children":[],"call":[" find ","callback is_a? "]}," ActiveSupport DeprecatedCallbacks CallbackChain find":{"type":"method","name":"find","children":[],"call":["(send nil :select) first "," block_given? ! "," block_given? ","c == "," select "]}," ActiveSupport DeprecatedCallbacks CallbackChain replace_or_append!":{"type":"method","name":"replace_or_append!","children":[],"call":[" << "," []= "," index ","  index  "]}," ActiveSupport DeprecatedCallbacks CallbackChain run":{"type":"method","name":"run","children":[],"call":["callback call "," send ","terminator call "," block_given? ","options [] "]}," ActiveSupport DeprecatedCallbacks CallbackChain build":{"type":"method","name":"build","children":[],"call":[]}," String end_with?":{"type":"method","name":"end_with?","children":[],"call":[" [] == "," [] ","suffix length ","suffix length -@ ","suffix to_s ","suffix to_s  length ","suffix to_s  length -@ ","suffix to_s  to_s "]}," String start_with?":{"type":"method","name":"start_with?","children":[],"call":[" [] == "," [] ","prefix length ","prefix to_s ","prefix to_s  length ","prefix to_s  to_s "]}," String concat":{"type":"method","name":"concat","children":[],"call":[" << "]}," String <<":{"type":"method","name":"<<","children":[],"call":[" also_html_safe? "," html_safe? "," original_concat "]}," String +":{"type":"method","name":"+","children":[],"call":["result html_safe! "," also_html_safe? "," html_safe? "," original_plus "," original_plus  html_safe! "]}," String each_char":{"type":"method","name":"each_char","children":[],"call":["scanner scan "," StringScanner  new "," require ","sscanner scan anner sscanner scan an "," StringSscanner scan anner  new "]}," Regexp unoptionalize":{"type":"method","name":"unoptionalize","children":[],"call":["regexp =~ ","(regexp\n  (str \"\\\\A\\\\(\\\\?:(.*)\\\\)\\\\?\\\\Z\")\n  (regopt)) each "]}," Regexp optionalize":{"type":"method","name":"optionalize","children":[],"call":[" unoptionalize ","pattern == "]}," Regexp number_of_captures":{"type":"method","name":"number_of_captures","children":[],"call":["Regexp  new match captures length ","Regexp  new match captures ","Regexp  new match ","Regexp  new "," source "]}," LoadError new":{"type":"method","name":"new","children":[],"call":[]}," Integer odd?":{"type":"method","name":"odd?","children":[],"call":[" even? ! "," even? "]}," Integer even?":{"type":"method","name":"even?","children":[],"call":[" multiple_of? "]}," Hash to_query":{"type":"method","name":"to_query","children":[],"call":["(send nil :collect) sort * ","(send nil :collect) sort ","value to_query "," collect ","(send nil :collect) compact sort! * ","(send nil :collect) compact sort! ","(send nil :collect) compact ","value empty? ","value is_a? ","query join ","query sort! ","namespace to_s include? ","namespace to_s "," filter_map ","value to_(send nil :collect) compact  ","(send nil :collect) compact  join ","(send nil :collect) compact  sort! "]}," Exception clean_paths":{"type":"method","name":"clean_paths","children":[],"call":[]}," ActiveSupport Callbacks CallbackChain clone":{"type":"method","name":"clone","children":[],"call":["chain push ","c clone "," map ","CallbackChain  new ","@config dup ","CallbackChain  new  push "]}," ActiveSupport Testing Performance Metrics DigitalInformationUnit format":{"type":"method","name":"format","children":[],"call":[" number_to_human_size "]}," ActiveSupport Testing Performance Metrics Amount format":{"type":"method","name":"format","children":[],"call":[" number_with_delimiter ","measurement floor "]}," ActiveSupport Testing Performance Benchmarker initialize":{"type":"method","name":"initialize","children":[],"call":["@metric respond_to? "]}," ActiveSupport Testing Performance Profiler time_with_block":{"type":"method","name":"time_with_block","children":[],"call":["Time  now - ","Time  now "]}," ActiveSupport Testing Performance run_gc":{"type":"method","name":"run_gc","children":[],"call":["GC  start ","GC  run ","ManagementFactory  memory_mx_bean gc ","ManagementFactory  memory_mx_bean "]}," ActiveSupport Testing Performance ForClassicTestUnit run_test":{"type":"method","name":"run_test","children":[],"call":[" add_error "," add_failure ","e backtrace ","e message "," run_callbacks "," teardown "," __send__ ","metric send "," setup "]}," ActiveSupport Testing Performance ForClassicTestUnit run":{"type":"method","name":"run","children":[],"call":[" name "," class "," puts ","%20s: unsupported % ","result add_run "," run_profile ","klass new ","Metrics  [] ","metric_name to_sym ","metrics each "," full_profile_options [] "," full_profile_options "," run_warmup "," method_name =~ "," method_name ","Metrics  []  new "," full_profile_options []  each "]}," ActiveSupport Testing Performance ForMiniTest run_test":{"type":"method","name":"run_test","children":[],"call":["@runner puke "," method_name "," class "," run_callbacks "," teardown "," __send__ ","metric send "," setup "]}," ActiveSupport Testing Performance ForMiniTest run":{"type":"method","name":"run","children":[],"call":[" run_profile ","klass new ","Metrics  [] ","metric_name to_sym ","metrics each "," full_profile_options [] "," full_profile_options "," run_warmup ","Metrics  []  new "," full_profile_options []  each "]}," ActiveSupport Testing Performance full_profile_options":{"type":"method","name":"full_profile_options","children":[],"call":["DEFAULTS  merge "," profile_options "]}," ActiveSupport Testing Performance Profiler create_path_and_open_file":{"type":"method","name":"create_path_and_open_file","children":[],"call":["File  open ","FileUtils  mkdir_p ","File  dirname "," output_filename "]}," ActiveSupport Testing Performance Metrics UserTime measure":{"type":"method","name":"measure","children":[],"call":["ManagementFactory  thread_mx_bean get_current_thread_user_time / / / ","ManagementFactory  thread_mx_bean get_current_thread_user_time / / ","ManagementFactory  thread_mx_bean get_current_thread_user_time / ","ManagementFactory  thread_mx_bean get_current_thread_user_time ","ManagementFactory  thread_mx_bean "]}," ActiveSupport InheritableOptions inheritable_copy":{"type":"method","name":"inheritable_copy","children":[],"call":[" class new "," class "]}," ActiveSupport OrderedOptions respond_to?":{"type":"method","name":"respond_to?","children":[],"call":[]}," ActiveSupport OrderedHash nested_under_indifferent_access":{"type":"method","name":"nested_under_indifferent_access","children":[],"call":[]}," ActiveSupport Notifications publish":{"type":"method","name":"publish","children":[],"call":[" notifier publish "," notifier "]}," Struct as_json":{"type":"method","name":"as_json","children":[],"call":["Hash  [] "," members zip "," values "," members ","Hash  [] as_json "," to_h as_json "," to_h "]}," ActiveSupport JSON convert_dates_from":{"type":"method","name":"convert_dates_from","children":[],"call":["data []= "," convert_dates_from ","data each ","data map! ","DateTime  parse ","Time  zone parse ","Time  zone ","Date  parse ","data transform_values! "]}," ActiveSupport JSON parse_error":{"type":"method","name":"parse_error","children":[],"call":[]}," ActiveSupport JSON engine=":{"type":"method","name":"engine=","children":[],"call":["MultiJson  engine= ","MultiJson  use ","MultiJson  respond_to? "]}," ActiveSupport JSON engine":{"type":"method","name":"engine","children":[],"call":["MultiJson  engine ","MultiJson  adapter ","MultiJson  respond_to? "]}," ActiveSupport HashWithIndifferentAccess with_indifferent_access":{"type":"method","name":"with_indifferent_access","children":[],"call":[" dup "]}," ActiveSupport FileWatcher trigger":{"type":"method","name":"trigger","children":[],"call":["block call ","trigger_files each ","trigger_files [] [] << ","trigger_files [] [] ","trigger_files [] ","pattern === ","@regex_matchers each ","files each ","h []= ","h2 []= ","Hash  new "]}," ActiveSupport FileWatcher watch":{"type":"method","name":"watch","children":[],"call":["@regex_matchers []= "]}," ActiveSupport FileWatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport FileWatcher Backend trigger":{"type":"method","name":"trigger","children":[],"call":["@watcher trigger "]}," ActiveSupport FileWatcher Backend initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Duration as_json":{"type":"method","name":"as_json","children":[],"call":[" to_i "]}," ActiveSupport Dependencies log_activity?":{"type":"method","name":"log_activity?","children":[],"call":[" log_activity "," logger "]}," ActiveSupport Dependencies reference":{"type":"method","name":"reference","children":[],"call":["Reference  store "]}," ActiveSupport Dependencies ClassCache clear!":{"type":"method","name":"clear!","children":[],"call":["@store clear "]}," ActiveSupport Dependencies ClassCache store":{"type":"method","name":"store","children":[],"call":[" []= ","@store []= ","klass name "," raise ","klass name empty? ","klass respond_to? "]}," ActiveSupport Dependencies ClassCache new":{"type":"method","name":"new","children":[],"call":["Getter  new "," []= "]}," ActiveSupport Dependencies ClassCache Getter get":{"type":"method","name":"get","children":[],"call":["Reference  get "]}," ActiveSupport Dependencies ClassCache Getter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Dependencies ClassCache []":{"type":"method","name":"[]","children":[],"call":["@store [] ","key name ","key respond_to? ","key name  name ","key name  respond_to? "]}," ActiveSupport Dependencies ClassCache []=":{"type":"method","name":"[]=","children":[],"call":["@store []= ","key name "," raise ","key name blank? ","key respond_to? "]}," ActiveSupport Dependencies ClassCache key?":{"type":"method","name":"key?","children":[],"call":["@store key? "]}," ActiveSupport Dependencies ClassCache empty?":{"type":"method","name":"empty?","children":[],"call":["@store empty? "]}," ActiveSupport Dependencies ClassCache initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","Inflector  constantize ","Hash  new ","ThreadSafe Cache  new ","Concurrent Map  new "]}," URI parser":{"type":"method","name":"parser","children":[],"call":["URI Parser  new ","URI  const_defined? ","ActiveSupport Deprecation  warn ","(str \"        URI.parser is deprecated and will be removed in Rails 6.2.\\n\") squish ","(str \"        URI.parser is deprecated and will be removed in Rails 7.0.\\n\") squish "]}," Time find_zone":{"type":"method","name":"find_zone","children":[],"call":[" find_zone! "]}," Time find_zone!":{"type":"method","name":"find_zone!","children":[],"call":[" raise ","ActiveSupport TimeZone  create ","time_zone name ","time_zone is_a? ","TZInfo Timezone  get ","ActiveSupport TimeZone  [] ","time_zone respond_to? ","time_zone nil? ","time_zone ! "]}," Time prev_week":{"type":"method","name":"prev_week","children":[],"call":[" ago beginning_of_week since change "," ago beginning_of_week since ","DAYS_INTO_WEEK  [] day ","DAYS_INTO_WEEK  [] "," ago beginning_of_week "," ago ","1 week "]}," Time weeks_ago":{"type":"method","name":"weeks_ago","children":[],"call":[" advance ","weeks -@ "]}," ActiveSupport SafeBuffer encode_with":{"type":"method","name":"encode_with","children":[],"call":["coder represent_scalar "," to_str ","coder represent_object "]}," Numeric html_safe?":{"type":"method","name":"html_safe?","children":[],"call":[]}," String inquiry":{"type":"method","name":"inquiry","children":[],"call":["ActiveSupport StringInquirer  new "]}," Object in?":{"type":"method","name":"in?","children":[],"call":[" raise ","ArgumentError  new ","another_object include? ","another_object respond_to? ","args first ","args include? ","args length > ","args length ","ActiveSupport Deprecation  warn ","another_object cover? ","args first  include? ","args first  respond_to? ","args first  cover? "]}," Module attr_internal_define":{"type":"method","name":"attr_internal_define","children":[],"call":[" remove_method "," alias_method ","type == "," send "," class_eval "," attr_internal_ivar_name sub "," attr_internal_ivar_name "," public_send "," attr_internal_ivar_name delete_prefix "]}," Logger initialize":{"type":"method","name":"initialize","children":[],"call":[" formatter= ","SimpleFormatter  new "," old_initialize "]}," Kernel quietly":{"type":"method","name":"quietly","children":[],"call":[" silence_stream ","ActiveSupport Deprecation  warn "]}," Kernel capture":{"type":"method","name":"capture","children":[],"call":[" eval ","stream upcase "," eval string ","stream to_s ","stream_io reopen ","captured_stream unlink ","captured_stream read ","stream_io rewind ","stream_io dup ","Tempfile  new ","captured_stream close ","ActiveSupport Deprecation  warn ","stream to_s  upcase ","stream to_s  to_s ","stream to_s _io reopen "," eval  reopen ","captured_stream to_s  unlink ","Tempfile  new  unlink ","captured_stream to_s  read ","Tempfile  new  read ","stream to_s _io rewind "," eval  rewind ","stream to_s _io dup "," eval  dup ","captured_stream to_s  close ","Tempfile  new  close "]}," Hash deep_dup":{"type":"method","name":"deep_dup","children":[],"call":["duplicate []= ","tv deep_dup ","v is_a? ","tv is_a? ","duplicate [] ","duplicate each_pair "," dup ","hash []= ","value deep_dup ","key deep_dup "," each_with_object ","hash delete "," String  === ","key frozen? "," each_pair "," Symbol  === "," dup  []= ","duplicate []  deep_dup ","duplicate []  is_a? "," dup  [] "," dup  each_pair "," dup  delete "]}," DateTime <=>":{"type":"method","name":"<=>","children":[],"call":["other to_datetime ","other kind_of? ","other respond_to? "]}," DateTime minus_with_duration":{"type":"method","name":"minus_with_duration","children":[],"call":[" minus_without_duration "," plus_with_duration ","other -@ ","ActiveSupport Duration  === "]}," DateTime plus_with_duration":{"type":"method","name":"plus_with_duration","children":[],"call":[" plus_without_duration ","other since ","ActiveSupport Duration  === "]}," Date iso8601":{"type":"method","name":"iso8601","children":[],"call":[" strftime "]}," Date prev_week":{"type":"method","name":"prev_week","children":[],"call":["result change "," acts_like? ","(send\n  (self) :-\n  (int 7)) beginning_of_week + ","DAYS_INTO_WEEK  [] ","(send\n  (self) :-\n  (int 7)) beginning_of_week "," - ","(send\n  (self) :-\n  (int 7)) beginning_of_week +  change "]}," Date weeks_ago":{"type":"method","name":"weeks_ago","children":[],"call":[" advance ","weeks -@ "]}," Class singleton_class?":{"type":"method","name":"singleton_class?","children":[],"call":[" == "," name "," name ! ","allocate bind call class != ","allocate bind call class ","allocate bind call ","allocate bind ","Class  instance_method "," ancestors first != "," ancestors first "," ancestors ","Class  instance_method  bind call class != ","Class  instance_method  bind call class ","Class  instance_method  bind call ","Class  instance_method  bind "]}," ActiveSupport Configurable Configuration compile_methods!":{"type":"method","name":"compile_methods!","children":[],"call":[" class compile_methods! "," keys "," class "," respond_to? "," keys reject "]}," ActiveSupport Cache Strategy LocalCache Middleware call":{"type":"method","name":"call","children":[],"call":["Thread  current []= "," thread_local_key ","Thread  current ","@app call ","LocalStore  new ","LocalCacheRegistry  set_cache_for "," local_cache_key "," raise ","response []= "," Rack BodyProxy  new ","response [] ","@app call  []= ","@app call  [] "]}," ActiveSupport Cache Strategy LocalCache Middleware new":{"type":"method","name":"new","children":[],"call":[]}," ActiveSupport Cache Strategy LocalCache Middleware initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport OrderedHash extractable_options?":{"type":"method","name":"extractable_options?","children":[],"call":[]}," ActiveSupport TimeWithZone hash":{"type":"method","name":"hash","children":[],"call":[" utc hash "," utc "]}," ActiveSupport TaggedLogging current_tags":{"type":"method","name":"current_tags","children":[],"call":["@tags [] ","Thread  current ","Thread  current [] "]}," ActiveSupport TaggedLogging tags_text":{"type":"method","name":"tags_text","children":[],"call":["(send\n  (lvar :tags) :collect) join + ","(send\n  (lvar :tags) :collect) join ","tags collect ","tags any? "," current_tags ","(send\n  (lvar : current_tags ) :collect) join + ","(send\n  (lvar : current_tags ) :collect) join "," current_tags  collect "," current_tags  any? "," current_ current_tags  "]}," ActiveSupport TaggedLogging method_missing":{"type":"method","name":"method_missing","children":[],"call":["@logger send "]}," ActiveSupport TaggedLogging flush":{"type":"method","name":"flush","children":[],"call":["@logger flush ","@logger respond_to? ","@tags delete ","Thread  current "," clear_tags! "]}," ActiveSupport TaggedLogging add":{"type":"method","name":"add","children":[],"call":["@logger add "," tags_text ","block call "," block_given? ","message nil? ","block call  nil? "]}," ActiveSupport TaggedLogging silence":{"type":"method","name":"silence","children":[],"call":["@logger silence "]}," ActiveSupport TaggedLogging tagged":{"type":"method","name":"tagged","children":[],"call":["tags pop ","new_tags size times ","new_tags size ","tags concat ","Array  wrap flatten reject ","Array  wrap flatten ","Array  wrap "," current_tags "," pop_tags "," push_tags "," formatter tagged "," formatter ","logger push_tags "," formatter current_tags ","logger formatter extend ","logger formatter ","ActiveSupport TaggedLogging  new "," block_given? "," current_tags  pop ","Array  wrap flatten reject  size times "," push_tags  size times ","new_ current_tags  size times ","Array  wrap flatten reject  size "," push_tags  size ","new_ current_tags  size "," current_tags  concat "," current_ current_tags  "," pop_ current_tags  "," push_ current_tags  ","logger push_ current_tags  ","ActiveSupport TaggedLogging  new  push_tags "," formatter current_ current_tags  ","ActiveSupport TaggedLogging  new  formatter extend ","ActiveSupport TaggedLogging  new  formatter "]}," ActiveSupport TaggedLogging initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","Hash  new "]}," ActiveSupport OrderedHash each_pair":{"type":"method","name":"each_pair","children":[],"call":[" [] ","@keys each "," to_enum "," block_given? "]}," ActiveSupport Notifications subscribed":{"type":"method","name":"subscribed","children":[],"call":[" unsubscribe "," subscribe "," notifier subscribe "," notifier "]}," ActiveSupport MessageEncryptor _decrypt":{"type":"method","name":"_decrypt","children":[],"call":[" raise ","@serializer load ","decrypted_data << ","cipher final ","cipher update ","cipher iv= ","cipher key= ","cipher decrypt "," Base64  decode64 ","encrypted_message split map ","encrypted_message split "," new_cipher ","ActiveSupport Base64  decode64 "," Base64  strict_decode64 ","-- freeze ","cipher auth_data= ","cipher auth_tag= "," aead_mode? ","auth_tag bytes length != ","auth_tag bytes length ","auth_tag bytes ","auth_tag nil? ","Messages Metadata  verify ","cipher update  << "," new_cipher  final "," new_cipher  update "," new_cipher  iv= "," new_cipher  key= "," new_cipher  decrypt ","encrypted_Messages Metadata  verify  split map ","encrypted_Messages Metadata  verify  split "," new_ new_cipher  "," new_cipher  auth_data= "," new_cipher  auth_tag= "]}," ActiveSupport MessageEncryptor _encrypt":{"type":"method","name":"_encrypt","children":[],"call":["(send\n  (array\n    (lvar :encrypted_data)\n    (lvar :iv)) :map) join "," Base64  strict_encode64 ","(lvar :encrypted_data) map ","encrypted_data << ","cipher final ","cipher update ","@serializer dump ","cipher iv= ","cipher key= ","cipher encrypt ","cipher random_iv "," new_cipher ","ActiveSupport Base64  encode64s ","blob << ","cipher auth_tag "," aead_mode? ","cipher auth_data= ","Messages Metadata  wrap ","(send\n  (array\n    (lvar :cipher update )\n    (lvar :iv)) :map) join ","(send\n  (array\n    (lvar :encrypted_data)\n    (lvar :cipher random_iv )) :map) join ","(lvar :cipher update ) map ","cipher update  << "," new_cipher  final "," new_cipher  update ","cipher cipher random_iv = "," new_cipher  iv= "," new_cipher  key= "," new_cipher  encrypt ","cipher random_cipher random_iv  "," new_cipher  random_iv "," new_ new_cipher  ","Actcipher random_iv eSupport Base64  encode64s "," new_cipher  auth_tag "," new_cipher  auth_data= "]}," ActiveSupport MessageEncryptor NullSerializer dump":{"type":"method","name":"dump","children":[],"call":[]}," ActiveSupport MessageEncryptor NullSerializer load":{"type":"method","name":"load","children":[],"call":[]}," ActiveSupport Memoizable extended":{"type":"method","name":"extended","children":[],"call":[]}," ActiveSupport Inflector apply_inflections":{"type":"method","name":"apply_inflections","children":[],"call":["result gsub! ","rules each ","result =~ "," inflections uncountables any? "," inflections uncountables "," inflections ","word empty? ","word to_s dup ","word to_s ","result sub! "," inflections uncountables include? ","result downcase [] ","result downcase "," inflections uncountables uncountable? ","word to_s dup  gsub! ","word to_s dup  =~ ","word to_s dup  sub! ","word to_s dup  downcase [] ","word to_s dup  downcase "]}," ActiveSupport Inflector const_regexp":{"type":"method","name":"const_regexp","children":[],"call":["part empty? ","parts reverse inject ","parts reverse ","parts pop ","camel_cased_word split ","Regexp  escape ","parts blank? ",":: freeze ","parts reverse! inject ","parts reverse! ","parts empty? ","camel_cased_word split  reverse inject ","camel_cased_word split  reverse ","camel_cased_word split  pop ","camel_cased_word split  blank? ","camel_cased_word split  reverse! inject ","camel_cased_word split  reverse! ","camel_cased_word split  empty? "]}," ActiveSupport Inflector safe_constantize":{"type":"method","name":"safe_constantize","children":[],"call":[" raise ","e message =~ "," const_regexp ","e message ","e name to_s == ","camel_cased_word to_s ","e name to_s ","e name "," constantize ","(or\n  (send\n    (send\n      (send\n        (lvar :camel_cased_word) :to_s) :split\n      (str \"::\")) :include?\n    (send\n      (send\n        (lvar :e) :name) :to_s))\n  (send\n    (send\n      (send\n        (lvar :e) :name) :to_s) :==\n    (send\n      (lvar :camel_cased_word) :to_s))) ! ","camel_cased_word to_s split include? ","camel_cased_word to_s split ","(str \"not missing constant \") match? ","(str \"Unable to autoload constant \") match? ","e original_message ","e respond_to? ","e e message  =~ ","e e original_message  =~ ","e e message  ","e e original_message  ","e original_e message  ","e original_e original_message  "]}," ActiveSupport Inflector deconstantize":{"type":"method","name":"deconstantize","children":[],"call":["path to_s [] ","path rindex ","path to_s "]}," ActiveSupport Inflector Inflections acronym":{"type":"method","name":"acronym","children":[],"call":["@acronyms values join ","@acronyms values ","@acronyms []= ","word downcase "," define_acronym_regex_patterns "]}," I18n Railtie reloader_paths":{"type":"method","name":"reloader_paths","children":[],"call":[]}," ActiveSupport HashWithIndifferentAccess nested_under_indifferent_access":{"type":"method","name":"nested_under_indifferent_access","children":[],"call":[]}," ActiveSupport FileUpdateChecker compile_ext":{"type":"method","name":"compile_ext","children":[],"call":["array join ","array empty? ","Array  wrap "," Array ","Array  wrap  join "," Array  join ","Array  wrap  empty? "," Array  empty? "]}," ActiveSupport FileUpdateChecker compile_glob":{"type":"method","name":"compile_glob","children":[],"call":["globs join ","globs << "," compile_ext ","hash each ","hash empty? ","hash freeze "," escape ","hash map "]}," ActiveSupport FileUpdateChecker execute":{"type":"method","name":"execute","children":[],"call":["@block call "," updated_at "," watched "]}," ActiveSupport FileUpdateChecker updated?":{"type":"method","name":"updated?","children":[],"call":[" updated_at ","@last_update_at < ","@last_watched size != ","current_watched size ","@last_watched size "," watched "," watched  size "]}," ActiveSupport Dependencies safe_constantize":{"type":"method","name":"safe_constantize","children":[],"call":["Reference  safe_get "]}," ActiveSupport Dependencies ClassCache safe_get":{"type":"method","name":"safe_get","children":[],"call":["@store []= ","Inflector  safe_constantize ","@store [] ","key name ","key respond_to? ","key name  name ","key name  respond_to? "]}," ActiveSupport Dependencies ClassCache get":{"type":"method","name":"get","children":[],"call":["Inflector  constantize ","@store [] ","key name ","key respond_to? ","key name  name ","key name  respond_to? "]}," ActiveSupport Dependencies WatchStack watching?":{"type":"method","name":"watching?","children":[],"call":["@watching empty? ! ","@watching empty? "]}," ActiveSupport Dependencies WatchStack each":{"type":"method","name":"each","children":[],"call":["@stack each "]}," Time eql_with_coercion":{"type":"method","name":"eql_with_coercion","children":[],"call":[" eql_without_coercion ","other comparable_time ","other respond_to? ","other comparable_time  comparable_time ","other comparable_time  respond_to? "]}," Time all_year":{"type":"method","name":"all_year","children":[],"call":[" end_of_year "," beginning_of_year "]}," Time all_quarter":{"type":"method","name":"all_quarter","children":[],"call":[" end_of_quarter "," beginning_of_quarter "]}," Time all_month":{"type":"method","name":"all_month","children":[],"call":[" end_of_month "," beginning_of_month "]}," Time all_week":{"type":"method","name":"all_week","children":[],"call":[" end_of_week "," beginning_of_week "]}," Time all_day":{"type":"method","name":"all_day","children":[],"call":[" end_of_day "," beginning_of_day "]}," Time sunday":{"type":"method","name":"sunday","children":[],"call":[" end_of_week "]}," Time monday":{"type":"method","name":"monday","children":[],"call":[" beginning_of_week "]}," Time days_to_week_start":{"type":"method","name":"days_to_week_start","children":[],"call":["7 + ","days_span >= ","current_day_number - "," wday - "," wday "," wday != ","DAYS_INTO_WEEK  [] ","current_day_number -  >= "," wday -  - "]}," String deconstantize":{"type":"method","name":"deconstantize","children":[],"call":["ActiveSupport Inflector  deconstantize "]}," String safe_constantize":{"type":"method","name":"safe_constantize","children":[],"call":["ActiveSupport Inflector  safe_constantize "]}," to_json":{"type":"method","name":"to_json","children":[],"call":["ActiveSupport JSON  encode "]}," Module qualified_const_set":{"type":"method","name":"qualified_const_set","children":[],"call":["mod const_set "," qualified_const_get ","mod_name empty? ","path deconstantize ","path demodulize ","QualifiedConstUtils  raise_if_absolute "," const_get ","ActiveSupport QualifiedConstUtils  raise_if_absolute ","ActiveSupport Deprecation  warn ","(str \"      Module#qualified_const_set is deprecated in favour of the builtin\\n\") squish "," qualified_const_get  const_set "," const_get  const_set "," qualified_const_get _name empty? "," const_get _name empty? ","path deconstantize  empty? ","path de qualified_const_get ulize ","path de const_get ulize "]}," Module qualified_const_get":{"type":"method","name":"qualified_const_get","children":[],"call":["mod const_get ","QualifiedConstUtils  names inject ","QualifiedConstUtils  names ","QualifiedConstUtils  raise_if_absolute ","ActiveSupport QualifiedConstUtils  names inject ","ActiveSupport QualifiedConstUtils  names ","ActiveSupport QualifiedConstUtils  raise_if_absolute ","ActiveSupport Deprecation  warn ","(str \"      Module#qualified_const_get is deprecated in favour of the builtin\\n\") squish "]}," Module qualified_const_defined?":{"type":"method","name":"qualified_const_defined?","children":[],"call":["mod const_get ","mod const_defined? ","QualifiedConstUtils  names inject ","QualifiedConstUtils  names ","QualifiedConstUtils  raise_if_absolute ","ActiveSupport QualifiedConstUtils  names inject ","ActiveSupport QualifiedConstUtils  names ","ActiveSupport QualifiedConstUtils  raise_if_absolute ","ActiveSupport Deprecation  warn ","(str \"      Module#qualified_const_defined? is deprecated in favour of the builtin\\n\") squish "]}," QualifiedConstUtils names":{"type":"method","name":"names","children":[],"call":[]}," QualifiedConstUtils raise_if_absolute":{"type":"method","name":"raise_if_absolute","children":[],"call":[]}," IO binread":{"type":"method","name":"binread","children":[],"call":[]}," Date sunday":{"type":"method","name":"sunday","children":[],"call":[" end_of_week "]}," Date monday":{"type":"method","name":"monday","children":[],"call":[" beginning_of_week "]}," Date days_to_week_start":{"type":"method","name":"days_to_week_start","children":[],"call":["(send\n  (lvar :current_day_number) :-\n  (lvar :start_day_number)) % ","current_day_number - "," wday - "," wday "," wday != ","DAYS_INTO_WEEK  [] ","(send\n  (lvar : wday - ) :-\n  (lvar :start_day_number)) % ","(send\n  (lvar :current_day_number) :-\n  (lvar :DAYS_INTO_WEEK  [] )) % "," wday -  - "]}," ActiveSupport Callbacks ClassMethods __callback_runner_name":{"type":"method","name":"__callback_runner_name","children":[],"call":["key hash abs ","key hash "," name hash abs "," name hash "," name "," __callback_runner_name_cache [] "," __callback_runner_name_cache "]}," ActiveSupport Callbacks ClassMethods __reset_runner":{"type":"method","name":"__reset_runner","children":[],"call":[" undef_method "," method_defined? "," __callback_runner_name "," __callback_runner_ __callback_runner_name  "]}," ActiveSupport Callbacks ClassMethods __run_callback":{"type":"method","name":"__run_callback","children":[],"call":["object send "," class_eval ","400 + "," send compile "," send ","object respond_to? "," __callback_runner_name ","object send compile "," __callback_runner_ __callback_runner_name  "]}," ActiveSupport Callbacks halted_callback_hook":{"type":"method","name":"halted_callback_hook","children":[],"call":[]}," ActiveSupport Cache retrieve_cache_key":{"type":"method","name":"retrieve_cache_key","children":[],"call":[" to_s ","key to_param ","(str \"Array\") to_param "," retrieve_cache_key ","key map ","key is_a? ","key cache_key ","key respond_to? ","(send\n  (lvar :key) :map) to_param ","key to_a ","key cache_key_with_version ","(send\n  (send\n    (lvar :key) :to_a) :collect) to_param ","key to_a collect ","(send\n  (block\n    (send\n      (lvar :key) :sort_by)\n    (args\n      (arg :k)\n      (arg :_))\n    (send\n      (lvar :k) :to_s)) :collect) to_param ","(send\n  (lvar :key) :sort_by) collect ","k to_s ","key sort_by "]}," ActiveSupport Cache NullStore delete_entry":{"type":"method","name":"delete_entry","children":[],"call":[]}," ActiveSupport Cache NullStore write_entry":{"type":"method","name":"write_entry","children":[],"call":[" write_serialized_entry "," serialize_entry "]}," ActiveSupport Cache NullStore read_entry":{"type":"method","name":"read_entry","children":[],"call":[" deserialize_entry "," read_serialized_entry "]}," ActiveSupport Cache NullStore delete_matched":{"type":"method","name":"delete_matched","children":[],"call":[]}," ActiveSupport Cache NullStore decrement":{"type":"method","name":"decrement","children":[],"call":[]}," ActiveSupport Cache NullStore increment":{"type":"method","name":"increment","children":[],"call":[]}," ActiveSupport Cache NullStore cleanup":{"type":"method","name":"cleanup","children":[],"call":[]}," ActiveSupport Cache NullStore clear":{"type":"method","name":"clear","children":[],"call":[]}," ActiveSupport Cache NullStore initialize":{"type":"method","name":"initialize","children":[],"call":[" extend "]}," ActiveSupport Cache MemCacheStore LocalCacheWithRaw read_entry":{"type":"method","name":"read_entry","children":[],"call":[" deserialize_entry ","entry value "," local_cache ","options [] "," deserialize_ deserialize_entry  "," deserialize_entry  value "]}," ActiveSupport BufferedLogger open_logfile":{"type":"method","name":"open_logfile","children":[],"call":["Logger  new "]}," ActiveSupport BufferedLogger respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["method to_s == ","method to_s "]}," ActiveSupport BufferedLogger level=":{"type":"method","name":"level=","children":[],"call":["@log level= "]}," ActiveSupport BufferedLogger level":{"type":"method","name":"level","children":[],"call":["@log level "]}," ActiveSupport Base64 encode64s":{"type":"method","name":"encode64s","children":[],"call":[]}," strict_encode64":{"type":"method","name":"strict_encode64","children":[],"call":[]}," Base64 decode64":{"type":"method","name":"decode64","children":[],"call":[]}," Base64 encode64":{"type":"method","name":"encode64","children":[],"call":[]}," Enumerable pluck":{"type":"method","name":"pluck","children":[],"call":["element send "," collect ","element [] ","keys first "," map ","keys map ","keys many? ","keys first s first ","keys first s map ","keys first s many? "]}," ActiveSupport Callbacks ClassMethods __run_keyed_callback":{"type":"method","name":"__run_keyed_callback","children":[],"call":["object send "," class_eval ","407 + "," send compile "," send ","object respond_to? ","key hash abs ","key hash "," name hash abs "," name hash "," name "]}," ActiveSupport TaggedLogging clear_tags!":{"type":"method","name":"clear_tags!","children":[],"call":[" current_tags clear "," current_tags "]}," ActiveSupport TaggedLogging pop_tags":{"type":"method","name":"pop_tags","children":[],"call":[" current_tags pop "," current_tags "]}," ActiveSupport TaggedLogging push_tags":{"type":"method","name":"push_tags","children":[],"call":[" current_tags concat "," current_tags ","tags flatten reject tap ","tags flatten reject ","tags flatten "]}," NilClass encode_json":{"type":"method","name":"encode_json","children":[],"call":[]}," FalseClass encode_json":{"type":"method","name":"encode_json","children":[],"call":[" to_s "]}," TrueClass encode_json":{"type":"method","name":"encode_json","children":[],"call":[" to_s "]}," Time end_of_hour":{"type":"method","name":"end_of_hour","children":[],"call":[" change "," Rational "]}," Time beginning_of_hour":{"type":"method","name":"beginning_of_hour","children":[],"call":[" change "]}," BigDecimal duplicable?":{"type":"method","name":"duplicable?","children":[],"call":[]}," DateTime end_of_hour":{"type":"method","name":"end_of_hour","children":[],"call":[" change "," Rational "]}," DateTime beginning_of_hour":{"type":"method","name":"beginning_of_hour","children":[],"call":[" change "]}," ActiveSupport TimeWithZone wrap_with_time_zone":{"type":"method","name":"wrap_with_time_zone","children":[],"call":[" wrap_with_time_zone ","time end ","time begin ","time is_a? "," class new "," time_zone "," class ","time acts_like? "," period ","periods include? "," time_zone periods_for_local "," time_zone periods_for_local  include? "," time_zone  time_zone periods_for_local _for_local "]}," ActiveSupport Testing ProxyTestResult marshal_load":{"type":"method","name":"marshal_load","children":[],"call":[" initialize "]}," ActiveSupport Testing ProxyTestResult marshal_dump":{"type":"method","name":"marshal_dump","children":[],"call":[]}," Time at_with_coercion":{"type":"method","name":"at_with_coercion","children":[],"call":[" at_without_coercion "," at_without_coercion getlocal ","time_or_number to_f ","time_or_number is_a? ","args first ","args size != ","args size ","args first to_i ","args first acts_like? ","args size == ","time_or_number to_r ","kwargs empty? ","kwargs empty? ! ","args first  to_f ","args first  is_a? ","args first  to_r "]}," ActiveSupport TaggedLogging respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["@logger respond_to? "]}," ActiveSupport TaggedLogging respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["@logger respond_to? "]}," ActiveSupport LogSubscriber format_duration":{"type":"method","name":"format_duration","children":[],"call":["%.1fms % "]}," ActiveSupport TimeZone lazy_zones_map":{"type":"method","name":"lazy_zones_map","children":[],"call":["hash []= "," create ","MAPPING  has_key? ","Hash  new "," require_tzinfo "]}," ActiveSupport TimeZone lookup":{"type":"method","name":"lookup","children":[],"call":[" create ","tzinfo name freeze ","tzinfo name "," find_tzinfo "," find_tzinfo  name freeze "," find_tzinfo  name "," find_ find_tzinfo  "]}," ActiveSupport TimeZone require_tzinfo":{"type":"method","name":"require_tzinfo","children":[],"call":[" raise ","$stderr puts "," require "]}," ActiveSupport TimeZone us_zones":{"type":"method","name":"us_zones","children":[],"call":["z name =~ ","z name "," all find_all "," all "," country_zones "]}," ActiveSupport TimeZone []":{"type":"method","name":"[]","children":[],"call":[" raise ","arg inspect ","z utc_offset == ","arg to_i ","z utc_offset "," all find "," all ","arg abs <= ","arg abs ","tz utc_offset "," lookup tap "," lookup "," lazy_zones_map [] "," lazy_zones_map "," create tap "," create ","@lazy_zones_map [] ","arg name "]}," ActiveSupport TimeZone zones_map":{"type":"method","name":"zones_map","children":[],"call":[" lazy_zones_map merge "," lazy_zones_map ","Hash  [] "," create ","new_zones_names map ","MAPPING  keys - "," lazy_zones_map keys ","MAPPING  keys "," [] ","MAPPING  each_key ","zones []= ","MAPPING  each_with_object ","Hash  [] _names map ","MAPPING  keys -  map "]}," ActiveSupport TimeZone all":{"type":"method","name":"all","children":[],"call":[" zones_map values sort "," zones_map values "," zones_map "]}," ActiveSupport TimeZone new":{"type":"method","name":"new","children":[],"call":[" [] "]}," ActiveSupport TimeZone find_tzinfo":{"type":"method","name":"find_tzinfo","children":[],"call":["TZInfo TimezoneProxy  new ","MAPPING  [] ","TZInfo Timezone  new ","TZInfo Timezone  get "]}," ActiveSupport TimeZone period_for_local":{"type":"method","name":"period_for_local","children":[],"call":[" tzinfo period_for_local "," tzinfo ","periods last "]}," ActiveSupport TimeZone period_for_utc":{"type":"method","name":"period_for_utc","children":[],"call":[" tzinfo period_for_utc "," tzinfo "]}," ActiveSupport TimeZone local_to_utc":{"type":"method","name":"local_to_utc","children":[],"call":[" tzinfo local_to_utc "," tzinfo "]}," ActiveSupport TimeZone utc_to_local":{"type":"method","name":"utc_to_local","children":[],"call":[" tzinfo utc_to_local "," tzinfo ","Time  utc ","t sec_fraction ","t sec ","t min ","t hour ","t day ","t month ","t year ","ActiveSupport  utc_to_local_returns_utc_offset_times "," tzinfo utc_to_local yield_self ","t sec_fraction * "]}," ActiveSupport TimeZone today":{"type":"method","name":"today","children":[],"call":[" tzinfo now to_date "," tzinfo now "," tzinfo "]}," ActiveSupport TimeZone now":{"type":"method","name":"now","children":[],"call":["Time  now utc in_time_zone ","Time  now utc ","Time  now "," time_now utc in_time_zone "," time_now utc "," time_now "]}," ActiveSupport TimeZone parse":{"type":"method","name":"parse","children":[],"call":["TimeWithZone  new ","time - ","parts [] ","Time  utc ","parts fetch * ","parts fetch ","now day ","now month ","now year ","parts empty? ","Date  _parse ","time utc ","Time  new ","parts fetch + "," parts_to_time ","Time  utc  - ","Time  new  - ","Date  _parse  [] ","Date  _parse  fetch * ","Date  _parse  fetch ","Date  _parse  empty? ","Time  utc  utc ","Time  new  utc ","Date  _parse  fetch + "," parts_to_Time  utc  "," parts_to_Time  new  "," Date  _parse _to_time "]}," ActiveSupport TimeZone at":{"type":"method","name":"at","children":[],"call":["utc in_time_zone ","DateTime  civil since ","DateTime  civil ","Time  at utc ","Time  at ","Time  at utc in_time_zone "]}," ActiveSupport TimeZone local":{"type":"method","name":"local","children":[],"call":["ActiveSupport TimeWithZone  new ","Time  utc_time ","Time  utc ","Time  utc_Time  utc_time  ","Time  utc_Time  utc  "]}," ActiveSupport TimeZone to_s":{"type":"method","name":"to_s","children":[],"call":[" name "," formatted_offset "]}," ActiveSupport TimeZone =~":{"type":"method","name":"=~","children":[],"call":["MAPPING  [] =~ ","MAPPING  [] "," name "," name =~ ","re === "]}," ActiveSupport TimeZone <=>":{"type":"method","name":"<=>","children":[],"call":[" name <=> ","zone name "," name ","result == "," utc_offset <=> ","zone utc_offset "," utc_offset ","zone respond_to? "]}," ActiveSupport TimeZone formatted_offset":{"type":"method","name":"formatted_offset","children":[],"call":[" class seconds_to_utc_offset "," utc_offset "," class "," utc_offset == "]}," ActiveSupport TimeZone utc_offset":{"type":"method","name":"utc_offset","children":[],"call":["@current_period try "," tzinfo try "," tzinfo ","@current_period utc_offset "," tzinfo current_period "," tzinfo current_period utc_offset "]}," ActiveSupport TimeZone initialize":{"type":"method","name":"initialize","children":[],"call":["TimeZone  find_tzinfo "," class send "," class "]}," ActiveSupport TimeZone seconds_to_utc_offset":{"type":"method","name":"seconds_to_utc_offset","children":[],"call":["format % ","(send\n  (send\n    (lvar :seconds) :abs) :%\n  (int 3600)) / ","seconds abs % ","seconds abs ","seconds abs / ","seconds < "]}," ActiveSupport SecurityUtils variable_size_secure_compare":{"type":"method","name":"variable_size_secure_compare","children":[],"call":[" secure_compare "," Digest SHA256  hexdigest "]}," ActiveSupport SecurityUtils secure_compare":{"type":"method","name":"secure_compare","children":[],"call":["res == ","byte ^ ","l shift ","b each_byte ","a unpack ","a bytesize ","a bytesize == ","b bytesize ","a == "," fixed_length_secure_compare "," Digest SHA256  hexdigest "," Digest SHA256  digest ","a length == ","b length ","a length ","a unpack  shift "," fixed_a unpack ength_secure_compare ","a a unpack ength == ","b a unpack ength ","a a unpack ength "]}," ActiveSupport JSON Variable initialize":{"type":"method","name":"initialize","children":[],"call":["ActiveSupport Deprecation  warn "]}," ActiveSupport XmlMini cast_backend_name_to_module":{"type":"method","name":"cast_backend_name_to_module","children":[],"call":["ActiveSupport  const_get "," require ","name downcase ","name is_a? "]}," ActiveSupport XmlMini current_thread_backend=":{"type":"method","name":"current_thread_backend=","children":[],"call":["Thread  current []= "," cast_backend_name_to_module ","Thread  current ","IsolatedExecutionState  []= "]}," ActiveSupport XmlMini current_thread_backend":{"type":"method","name":"current_thread_backend","children":[],"call":["Thread  current [] ","Thread  current ","IsolatedExecutionState  [] "]}," ActiveSupport XmlMini backend":{"type":"method","name":"backend","children":[],"call":[" current_thread_backend "]}," ActiveSupport version":{"type":"method","name":"version","children":[],"call":[]}," ActiveSupport TimeWithZone respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":[" time respond_to? "," time ","sym to_sym == ","sym to_sym "]}," ActiveSupport TimeWithZone to_r":{"type":"method","name":"to_r","children":[],"call":[" utc to_r "," utc "]}," ActiveSupport Testing TaggedLogging tagged_logger":{"type":"method","name":"tagged_logger","children":[],"call":["Rails  logger "]}," ActiveSupport Testing TaggedLogging before_setup":{"type":"method","name":"before_setup","children":[],"call":[" tagged_logger info "," tagged_logger ","- * ","heading size "," __name__ "," class "," name "," tagged_logger info? "]}," ActiveSupport Testing SetupAndTeardown after_teardown":{"type":"method","name":"after_teardown","children":[],"call":[" run_callbacks "," raise "," failures << ","Minitest UnexpectedError  new "," failures "]}," ActiveSupport Testing SetupAndTeardown before_setup":{"type":"method","name":"before_setup","children":[],"call":[" run_callbacks "]}," ActiveSupport Testing ProxyTestResult info_signal":{"type":"method","name":"info_signal","children":[],"call":["Signal  list [] ","Signal  list "]}," ActiveSupport Testing ConstantLookup ClassMethods determine_constant_from_test_name":{"type":"method","name":"determine_constant_from_test_name","children":[],"call":["names pop "," raise ","names join constantize ","names join ","names last sub! ","names last ","names size > ","names size ","test_name split ","names join safe_constantize ","test_name split  pop ","names join names join constantize ize ","names join names join safe_constantize ize ","test_name split  join constantize ","test_name split  join ","test_name split  last sub! ","test_name split  last ","test_name split  size > ","test_name split  size ","names join safe_names join constantize ize ","names join safe_names join safe_constantize ize ","test_name split  join safe_constantize "]}," ActiveSupport Testing Assertions assert_not":{"type":"method","name":"assert_not","children":[],"call":[" assert ","object ! "," mu_pp "]}," ActiveSupport TestCase assert_nothing_raised":{"type":"method","name":"assert_nothing_raised","children":[],"call":["ActiveSupport Deprecation  warn ","args present? "]}," ActiveSupport TestCase test_order":{"type":"method","name":"test_order","children":[],"call":[" test_order= ","ActiveSupport Deprecation  warn ","test_order nil? ","ActiveSupport  test_order "," ActiveSupport  test_order = ","ActiveSupport  test_order  nil? ","ActiveSupport  ActiveSupport  test_order  "]}," ActiveSupport TaggedLogging new":{"type":"method","name":"new","children":[],"call":[]}," ActiveSupport TaggedLogging Formatter tags_text":{"type":"method","name":"tags_text","children":[],"call":["(send\n  (lvar :tags) :collect) join ","tags collect ","tags any? "," current_tags ","tags [] ","tags one? "," tag_stack format_message "," tag_stack ","(send\n  (lvar : current_tags ) :collect) join "," current_tags  collect "," current_tags  any? "," current_ current_tags  "," current_tags  [] "," current_tags  one? "]}," ActiveSupport TaggedLogging Formatter current_tags":{"type":"method","name":"current_tags","children":[],"call":["Thread  current [] ","Thread  current ","(str \"activesupport_tagged_logging_tags:\") freeze "," object_id ","IsolatedExecutionState  [] "," tag_stack tags "," tag_stack "]}," ActiveSupport TaggedLogging Formatter clear_tags!":{"type":"method","name":"clear_tags!","children":[],"call":[" current_tags clear "," current_tags "," tag_stack clear "," tag_stack "]}," ActiveSupport TaggedLogging Formatter pop_tags":{"type":"method","name":"pop_tags","children":[],"call":[" current_tags pop "," current_tags "," tag_stack pop_tags "," tag_stack "]}," ActiveSupport TaggedLogging Formatter push_tags":{"type":"method","name":"push_tags","children":[],"call":[" current_tags concat "," current_tags ","tags flatten reject tap ","tags flatten reject ","tags flatten ","tags reject! ","tags flatten! "," tag_stack push_tags "," tag_stack "]}," ActiveSupport TaggedLogging Formatter tagged":{"type":"method","name":"tagged","children":[],"call":[" pop_tags ","new_tags size "," push_tags "," tag_stack push_tags size "," tag_stack push_tags "," tag_stack "," push_tags  size "]}," ActiveSupport TaggedLogging Formatter call":{"type":"method","name":"call","children":[],"call":[" tags_text "," tag_stack format_message "," tag_stack "]}," ActiveSupport SubscriberQueueRegistry get_queue":{"type":"method","name":"get_queue","children":[],"call":["@registry [] "]}," ActiveSupport SubscriberQueueRegistry initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Subscriber event_stack":{"type":"method","name":"event_stack","children":[],"call":["SubscriberQueueRegistry  get_queue ","SubscriberQueueRegistry  instance get_queue ","SubscriberQueueRegistry  instance ","registry [] ","ActiveSupport IsolatedExecutionState  [] "]}," ActiveSupport Subscriber finish":{"type":"method","name":"finish","children":[],"call":[" send ","name split first ","name split ","event payload merge! ","event payload ","event end= "," event_stack pop "," event_stack ","Time  now ",". freeze "," now ","event finish! "," event_stack pop  payload merge! "," event_stack pop  payload "," event_stack pop  end= ","  event_stack pop _stack pop ","  event_stack pop _stack "," event_stack pop  finish! "]}," ActiveSupport Subscriber start":{"type":"method","name":"start","children":[],"call":[" event_stack push "," event_stack ","parent << "," event_stack last ","ActiveSupport Notifications Event  new ","Time  now "," now ","event start! "," ActiveSupport Notifications Event  new vActiveSupport Notifications Event  new nt_stack push "," ActiveSupport Notifications Event  new _stack push "," ActiveSupport Notifications Event  new vActiveSupport Notifications Event  new nt_stack "," ActiveSupport Notifications Event  new _stack "," event_stack last  << ","parActiveSupport Notifications Event  new nt << "," ActiveSupport Notifications Event  new vActiveSupport Notifications Event  new nt_stack last "," ActiveSupport Notifications Event  new _stack last ","ActivActiveSupport Notifications Event  new Support Notifications EvActiveSupport Notifications Event  new nt  nActiveSupport Notifications Event  new w ","TimActiveSupport Notifications Event  new   now ","ActiveSupport Notifications Event  new vActiveSupport Notifications Event  new nt start! ","ActiveSupport Notifications Event  new  start! "]}," ActiveSupport Subscriber initialize":{"type":"method","name":"initialize","children":[],"call":["(send\n  (send\n    (self) :class) :name) join "," object_id "," class name "," class "]}," ActiveSupport Subscriber subscribers":{"type":"method","name":"subscribers","children":[],"call":[]}," ActiveSupport Subscriber attach_to":{"type":"method","name":"attach_to","children":[],"call":["notifier subscribe ","(str \"start\") include? ","event to_s ","subscriber public_methods each ","subscriber public_methods "," subscribers << "," subscribers "," add_event_subscriber "," fetch_public_methods each "," fetch_public_methods "]}," ActiveSupport StringInquirer respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["method_name [] == ","method_name [] ","method_name end_with? "]}," ActiveSupport ProxyObject raise":{"type":"method","name":"raise","children":[],"call":[" Object  send "]}," ActiveSupport PerThreadRegistry per_thread_registry_instance":{"type":"method","name":"per_thread_registry_instance","children":[],"call":[" new ","Thread  current [] "," name ","Thread  current "]}," ActiveSupport PerThreadRegistry method_missing":{"type":"method","name":"method_missing","children":[],"call":[" send "," per_thread_registry_instance public_send "," per_thread_registry_instance "," define_singleton_method "," instance public_send "," instance "," singleton_class delegate "," singleton_class "]}," ActiveSupport OrderedOptions respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":[]}," ActiveSupport NumberHelper valid_float?":{"type":"method","name":"valid_float?","children":[],"call":[" Float "]}," ActiveSupport NumberHelper translate_number_value_with_default":{"type":"method","name":"translate_number_value_with_default","children":[],"call":["I18n  translate ","(pair\n  (sym :default)\n  (lvar :default)) merge! ","defaults [] ","k to_sym ","key split reduce ","key split "]}," ActiveSupport NumberHelper i18n_format_options":{"type":"method","name":"i18n_format_options","children":[],"call":["options merge! ","I18n  translate ","I18n  translate dup ","I18n  translate dup  merge! "]}," ActiveSupport NumberHelper default_format_options":{"type":"method","name":"default_format_options","children":[],"call":["options merge! ","DEFAULTS  [] [] ","DEFAULTS  [] ","DEFAULTS  [] dup ","DEFAULTS  [] dup  merge! "]}," ActiveSupport NumberHelper format_options":{"type":"method","name":"format_options","children":[],"call":[" default_format_options merge! "," i18n_format_options "," default_format_options "]}," ActiveSupport NumberHelper private_module_and_instance_method":{"type":"method","name":"private_module_and_instance_method","children":[],"call":[]}," ActiveSupport NumberHelper number_to_human":{"type":"method","name":"number_to_human","children":[],"call":["decimal_format gsub gsub strip ","decimal_format gsub gsub ","decimal_format gsub "," number_to_rounded "," translate_number_value_with_default ","options [] ","number to_i ","DECIMAL_UNITS  [] ","I18n  translate ","units [] ","10 ** ","number_exponent >= ","unit_exponents find ","Math  log10 floor ","Math  log10 ","number abs ","number != ","e -@ ","(send\n  (send\n    (case\n      (lvar :units)\n      (when\n        (const nil :Hash)\n        (lvar :units))\n      (when\n        (const nil :String)\n        (const nil :Symbol)\n        (send\n          (const nil :I18n) :translate\n          (dsym\n            (begin\n              (lvar :units)))\n          (hash\n            (pair\n              (sym :locale)\n              (send\n                (lvar :options) :[]\n                (sym :locale)))\n            (pair\n              (sym :raise)\n              (true)))))\n      (when\n        (nil)\n        (send nil :translate_number_value_with_default\n          (str \"human.decimal_units.units\")\n          (hash\n            (pair\n              (sym :locale)\n              (send\n                (lvar :options) :[]\n                (sym :locale)))\n            (pair\n              (sym :raise)\n              (true)))))\n      (send nil :raise\n        (const nil :ArgumentError)\n        (str \":units must be a Hash or String translation scope.\"))) :keys) :map) sort_by ","inverted_du [] ","(lvar :units) keys map ","(lvar :units) keys "," raise ","options delete ","DECIMAL_UNITS  invert ","options []= ","options key? ! ","options key? ","defaults merge! "," format_options "," Float "," valid_float? ","options symbolize_keys ","NumberToHumanConverter  convert ","  Float _to_rounded "," translate_ Float _value_with_default ","defaults merge!  [] ","options symbolize_keys  [] "," Float  to_i ","options delete  [] ","Math  log10 floor  >= "," Float _exponent >= "," Float  abs "," Float  != ","(send\n  (send\n    (case\n      (lvar :options delete )\n      (when\n        (const nil :Hash)\n        (lvar :options delete ))\n      (when\n        (const nil :String)\n        (const nil :Symbol)\n        (send\n          (const nil :I18n) :translate\n          (dsym\n            (begin\n              (lvar :options delete )))\n          (hash\n            (pair\n              (sym :locale)\n              (send\n                (lvar :options) :[]\n                (sym :locale)))\n            (pair\n              (sym :raise)\n              (true)))))\n      (when\n        (nil)\n        (send nil :translate_number_value_with_default\n          (str \"human.decimal_options delete .options delete \")\n          (hash\n            (pair\n              (sym :locale)\n              (send\n                (lvar :options) :[]\n                (sym :locale)))\n            (pair\n              (sym :raise)\n              (true)))))\n      (send nil :raise\n        (const nil :ArgumentError)\n        (str \":options delete  must be a Hash or String translation scope.\"))) :keys) :map) sort_by ","(send\n  (send\n    (case\n      (lvar :units)\n      (when\n        (const nil :Hash)\n        (lvar :units))\n      (when\n        (const nil :String)\n        (const nil :Symbol)\n        (send\n          (const nil :I18n) :translate\n          (dsym\n            (begin\n              (lvar :units)))\n          (hash\n            (pair\n              (sym :locale)\n              (send\n                (lvar :defaults merge! ) :[]\n                (sym :locale)))\n            (pair\n              (sym :raise)\n              (true)))))\n      (when\n        (nil)\n        (send nil :translate_number_value_with_default\n          (str \"human.decimal_units.units\")\n          (hash\n            (pair\n              (sym :locale)\n              (send\n                (lvar :defaults merge! ) :[]\n                (sym :locale)))\n            (pair\n              (sym :raise)\n              (true)))))\n      (send nil :raise\n        (const nil :ArgumentError)\n        (str \":units must be a Hash or String translation scope.\"))) :keys) :map) sort_by ","(send\n  (send\n    (case\n      (lvar :units)\n      (when\n        (const nil :Hash)\n        (lvar :units))\n      (when\n        (const nil :String)\n        (const nil :Symbol)\n        (send\n          (const nil :I18n) :translate\n          (dsym\n            (begin\n              (lvar :units)))\n          (hash\n            (pair\n              (sym :locale)\n              (send\n                (lvar :options symbolize_keys ) :[]\n                (sym :locale)))\n            (pair\n              (sym :raise)\n              (true)))))\n      (when\n        (nil)\n        (send nil :translate_number_value_with_default\n          (str \"human.decimal_units.units\")\n          (hash\n            (pair\n              (sym :locale)\n              (send\n                (lvar :options symbolize_keys ) :[]\n                (sym :locale)))\n            (pair\n              (sym :raise)\n              (true)))))\n      (send nil :raise\n        (const nil :ArgumentError)\n        (str \":units must be a Hash or String translation scope.\"))) :keys) :map) sort_by ","(send\n  (send\n    (case\n      (lvar :units)\n      (when\n        (const nil :Hash)\n        (lvar :units))\n      (when\n        (const nil :String)\n        (const nil :Symbol)\n        (send\n          (const nil :I18n) :translate\n          (dsym\n            (begin\n              (lvar :units)))\n          (hash\n            (pair\n              (sym :locale)\n              (send\n                (lvar :options) :[]\n                (sym :locale)))\n            (pair\n              (sym :raise)\n              (true)))))\n      (when\n        (nil)\n        (send nil :translate_ Float _value_with_default\n          (str \"human.decimal_units.units\")\n          (hash\n            (pair\n              (sym :locale)\n              (send\n                (lvar :options) :[]\n                (sym :locale)))\n            (pair\n              (sym :raise)\n              (true)))))\n      (send nil :raise\n        (const nil :ArgumentError)\n        (str \":units must be a Hash or String translation scope.\"))) :keys) :map) sort_by ","DECIMAL_UNITS  invert  [] ","(lvar :options delete ) keys map ","(lvar :options delete ) keys ","defaults merge!  delete ","options symbolize_keys  delete ","defaults merge!  []= ","options symbolize_keys  []= ","defaults merge!  key? ! ","options symbolize_keys  key? ! ","defaults merge!  key? ","options symbolize_keys  key? "," format_options  merge! "," format_defaults merge!  "," format_options symbolize_keys  ","defaults merge!  symbolize_keys ","options symbolize_keys  symbolize_keys "]}," ActiveSupport NumberHelper number_to_human_size":{"type":"method","name":"number_to_human_size","children":[],"call":["storage_units_format gsub gsub ","storage_units_format gsub "," number_to_rounded "," translate_number_value_with_default ","options [] ","STORAGE_UNITS  [] ","base ** ","exponent > ","(send\n  (send\n    (const nil :Math) :log\n    (lvar :number)) :/\n  (send\n    (const nil :Math) :log\n    (lvar :base))) to_i ","Math  log / ","Math  log ","STORAGE_UNITS  size - ","STORAGE_UNITS  size ","number to_i to_s ","number to_i ","number to_i < ","options [] == ","options []= ","options key? ! ","options key? ","defaults merge! "," format_options "," Float "," valid_float? ","options symbolize_keys ","NumberToHumanSizeConverter  convert ","storage_ translate_number_value_with_default s_format gsub gsub "," translate_number_value_with_default  gsub gsub ","storage_ translate_number_value_with_default s_format gsub "," translate_number_value_with_default  gsub ","  Float _to_rounded "," translate_ Float _value_with_default ","defaults merge!  [] ","options symbolize_keys  [] ","(send\n  (send\n    (const nil :Math) :log\n    (lvar :number)) :/\n  (send\n    (const nil :Math) :log\n    (lvar :base))) to_i  > ","(send\n  (send\n    (const nil :Math) :log\n    (lvar : Float )) :/\n  (send\n    (const nil :Math) :log\n    (lvar :base))) to_i "," Float  to_i to_s "," Float  to_i "," Float  to_i < ","defaults merge!  [] == ","options symbolize_keys  [] == ","defaults merge!  []= ","options symbolize_keys  []= ","defaults merge!  key? ! ","options symbolize_keys  key? ! ","defaults merge!  key? ","options symbolize_keys  key? "," format_options  merge! "," format_defaults merge!  "," format_options symbolize_keys  ","defaults merge!  symbolize_keys ","options symbolize_keys  symbolize_keys "]}," ActiveSupport NumberHelper number_to_rounded":{"type":"method","name":"number_to_rounded","children":[],"call":["formatted_number sub sub ","formatted_number sub ","Regexp  escape ","options [] "," number_to_delimited ","(str \"%01.\") % ","rounded_number abs ","rounded_number zero? ","BigDecimal  new round to_f ","BigDecimal  new round ","BigDecimal  new ","number to_s ","precision < ","(send\n  (send\n    (const nil :Math) :log10\n    (send\n      (lvar :rounded_number) :abs)) :+\n  (int 1)) floor ","Math  log10 + ","Math  log10 ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar :number) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (lvar :multiplier) :to_f) :to_s))) round to_f * ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar :number) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (lvar :multiplier) :to_f) :to_s))) round to_f ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar :number) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (lvar :multiplier) :to_f) :to_s))) round ","BigDecimal  new / ","multiplier to_f to_s ","multiplier to_f ","10 ** ","digits - ","(send\n  (send\n    (const nil :Math) :log10\n    (send\n      (lvar :number) :abs)) :+\n  (int 1)) floor ","number abs ","number == ","precision > ","options delete ","defaults merge! "," format_options ","options symbolize_keys "," Float "," valid_float? ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar :number) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (begin\n          (send\n            (int 10) :**\n            (begin\n              (send\n                (lvar :digits) :-\n                (lvar :precision))))) :to_f) :to_s))) round to_f * ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar :number) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (begin\n          (send\n            (int 10) :**\n            (begin\n              (send\n                (lvar :digits) :-\n                (lvar :precision))))) :to_f) :to_s))) round to_f ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar :number) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (begin\n          (send\n            (int 10) :**\n            (begin\n              (send\n                (lvar :digits) :-\n                (lvar :precision))))) :to_f) :to_s))) round ","(send\n  (int 10) :**\n  (begin\n    (send\n      (lvar :digits) :-\n      (lvar :precision)))) to_f to_s ","(send\n  (int 10) :**\n  (begin\n    (send\n      (lvar :digits) :-\n      (lvar :precision)))) to_f ","NumberToRoundedConverter  convert "," number_to_delimited  sub sub ","formatted_ Float  sub sub "," number_to_delimited  sub ","formatted_ Float  sub ","defaults merge!  [] ","options symbolize_keys  [] ","  Float _to_delimited ","rounded_number abs  abs ","BigDecimal  new round to_f  abs ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar :number) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (lvar :multiplier) :to_f) :to_s))) round to_f *  abs ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar :number) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (begin\n          (send\n            (int 10) :**\n            (begin\n              (send\n                (lvar :digits) :-\n                (lvar :precision))))) :to_f) :to_s))) round to_f *  abs ","rounded_ Float  abs ","rounded_number abs  zero? ","BigDecimal  new round to_f  zero? ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar :number) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (lvar :multiplier) :to_f) :to_s))) round to_f *  zero? ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar :number) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (begin\n          (send\n            (int 10) :**\n            (begin\n              (send\n                (lvar :digits) :-\n                (lvar :precision))))) :to_f) :to_s))) round to_f *  zero? ","rounded_ Float  zero? "," Float  to_s ","options delete  < ","(send\n  (send\n    (const nil :Math) :log10\n    (send\n      (lvar :rounded_number abs ) :abs)) :+\n  (int 1)) floor ","(send\n  (send\n    (const nil :Math) :log10\n    (send\n      (lvar :BigDecimal  new round to_f ) :abs)) :+\n  (int 1)) floor ","(send\n  (send\n    (const nil :Math) :log10\n    (send\n      (lvar :(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar :number) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (lvar :multiplier) :to_f) :to_s))) round to_f * ) :abs)) :+\n  (int 1)) floor ","(send\n  (send\n    (const nil :Math) :log10\n    (send\n      (lvar :(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar :number) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (begin\n          (send\n            (int 10) :**\n            (begin\n              (send\n                (lvar :digits) :-\n                (lvar :precision))))) :to_f) :to_s))) round to_f * ) :abs)) :+\n  (int 1)) floor ","(send\n  (send\n    (const nil :Math) :log10\n    (send\n      (lvar :rounded_ Float ) :abs)) :+\n  (int 1)) floor ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar :number) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (lvar :10 ** ) :to_f) :to_s))) round to_f * ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar : Float ) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (lvar :multiplier) :to_f) :to_s))) round to_f * ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar :number) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (lvar :10 ** ) :to_f) :to_s))) round to_f ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar : Float ) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (lvar :multiplier) :to_f) :to_s))) round to_f ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar :number) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (lvar :10 ** ) :to_f) :to_s))) round ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar : Float ) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (lvar :multiplier) :to_f) :to_s))) round ","10 **  to_f to_s ","10 **  to_f ","(send\n  (send\n    (const nil :Math) :log10\n    (send\n      (lvar :rounded_number) :abs)) :+\n  (int 1)) floor  - ","(send\n  (send\n    (const nil :Math) :log10\n    (send\n      (lvar :number) :abs)) :+\n  (int 1)) floor  - ","(send\n  (send\n    (const nil :Math) :log10\n    (send\n      (lvar : Float ) :abs)) :+\n  (int 1)) floor "," Float  abs "," Float  == ","options delete  > ","defaults merge!  delete ","options symbolize_keys  delete "," format_options  merge! "," format_defaults merge!  "," format_options symbolize_keys  ","defaults merge!  symbolize_keys ","options symbolize_keys  symbolize_keys ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar :number) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (begin\n          (send\n            (int 10) :**\n            (begin\n              (send\n                (lvar :(send\n  (send\n    (const nil :Math) :log10\n    (send\n      (lvar :rounded_number) :abs)) :+\n  (int 1)) floor ) :-\n                (lvar :precision))))) :to_f) :to_s))) round to_f * ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar :number) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (begin\n          (send\n            (int 10) :**\n            (begin\n              (send\n                (lvar :(send\n  (send\n    (const nil :Math) :log10\n    (send\n      (lvar :number) :abs)) :+\n  (int 1)) floor ) :-\n                (lvar :precision))))) :to_f) :to_s))) round to_f * ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar :number) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (begin\n          (send\n            (int 10) :**\n            (begin\n              (send\n                (lvar :digits) :-\n                (lvar :options delete ))))) :to_f) :to_s))) round to_f * ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar : Float ) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (begin\n          (send\n            (int 10) :**\n            (begin\n              (send\n                (lvar :digits) :-\n                (lvar :precision))))) :to_f) :to_s))) round to_f * ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar :number) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (begin\n          (send\n            (int 10) :**\n            (begin\n              (send\n                (lvar :(send\n  (send\n    (const nil :Math) :log10\n    (send\n      (lvar :rounded_number) :abs)) :+\n  (int 1)) floor ) :-\n                (lvar :precision))))) :to_f) :to_s))) round to_f ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar :number) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (begin\n          (send\n            (int 10) :**\n            (begin\n              (send\n                (lvar :(send\n  (send\n    (const nil :Math) :log10\n    (send\n      (lvar :number) :abs)) :+\n  (int 1)) floor ) :-\n                (lvar :precision))))) :to_f) :to_s))) round to_f ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar :number) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (begin\n          (send\n            (int 10) :**\n            (begin\n              (send\n                (lvar :digits) :-\n                (lvar :options delete ))))) :to_f) :to_s))) round to_f ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar : Float ) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (begin\n          (send\n            (int 10) :**\n            (begin\n              (send\n                (lvar :digits) :-\n                (lvar :precision))))) :to_f) :to_s))) round to_f ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar :number) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (begin\n          (send\n            (int 10) :**\n            (begin\n              (send\n                (lvar :(send\n  (send\n    (const nil :Math) :log10\n    (send\n      (lvar :rounded_number) :abs)) :+\n  (int 1)) floor ) :-\n                (lvar :precision))))) :to_f) :to_s))) round ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar :number) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (begin\n          (send\n            (int 10) :**\n            (begin\n              (send\n                (lvar :(send\n  (send\n    (const nil :Math) :log10\n    (send\n      (lvar :number) :abs)) :+\n  (int 1)) floor ) :-\n                (lvar :precision))))) :to_f) :to_s))) round ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar :number) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (begin\n          (send\n            (int 10) :**\n            (begin\n              (send\n                (lvar :digits) :-\n                (lvar :options delete ))))) :to_f) :to_s))) round ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (lvar : Float ) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (begin\n          (send\n            (int 10) :**\n            (begin\n              (send\n                (lvar :digits) :-\n                (lvar :precision))))) :to_f) :to_s))) round ","(send\n  (int 10) :**\n  (begin\n    (send\n      (lvar :(send\n  (send\n    (const nil :Math) :log10\n    (send\n      (lvar :rounded_number) :abs)) :+\n  (int 1)) floor ) :-\n      (lvar :precision)))) to_f to_s ","(send\n  (int 10) :**\n  (begin\n    (send\n      (lvar :(send\n  (send\n    (const nil :Math) :log10\n    (send\n      (lvar :number) :abs)) :+\n  (int 1)) floor ) :-\n      (lvar :precision)))) to_f to_s ","(send\n  (int 10) :**\n  (begin\n    (send\n      (lvar :digits) :-\n      (lvar :options delete )))) to_f to_s ","(send\n  (int 10) :**\n  (begin\n    (send\n      (lvar :(send\n  (send\n    (const nil :Math) :log10\n    (send\n      (lvar :rounded_number) :abs)) :+\n  (int 1)) floor ) :-\n      (lvar :precision)))) to_f ","(send\n  (int 10) :**\n  (begin\n    (send\n      (lvar :(send\n  (send\n    (const nil :Math) :log10\n    (send\n      (lvar :number) :abs)) :+\n  (int 1)) floor ) :-\n      (lvar :precision)))) to_f ","(send\n  (int 10) :**\n  (begin\n    (send\n      (lvar :digits) :-\n      (lvar :options delete )))) to_f "]}," ActiveSupport NumberHelper number_to_delimited":{"type":"method","name":"number_to_delimited","children":[],"call":["parts join ","options [] ","parts [] gsub! ","parts [] ","number to_s split ","number to_s "," format_options merge! "," format_options "," valid_float? ","options symbolize_keys ","number to_s to_str split ","number to_s to_str ","NumberToDelimitedConverter  convert ","number to_s split  join ","number to_s to_str split  join "," format_options merge!  [] ","options symbolize_keys  [] ","number to_s split  [] gsub! ","number to_s to_str split  [] gsub! ","number to_s split  [] ","number to_s to_str split  [] "," format_ format_options merge!  merge! "," format_options symbolize_keys  merge! "," format_ format_options merge!  "," format_options symbolize_keys  "," format_options merge!  symbolize_keys ","options symbolize_keys  symbolize_keys "]}," ActiveSupport NumberHelper number_to_percentage":{"type":"method","name":"number_to_percentage","children":[],"call":["format gsub "," number_to_rounded ","options [] ","defaults merge! "," format_options ","options symbolize_keys ","NumberToPercentageConverter  convert ","defaults merge!  [] ","options symbolize_keys  [] "," format_options  merge! "," format_defaults merge!  "," format_options symbolize_keys  ","defaults merge!  symbolize_keys ","options symbolize_keys  symbolize_keys "]}," ActiveSupport NumberHelper number_to_currency":{"type":"method","name":"number_to_currency","children":[],"call":["format gsub gsub ","format gsub "," number_to_rounded ","number sub ","number abs ","number respond_to? ","options delete ","number to_f phase != ","number to_f phase ","number to_f ","defaults merge! ","defaults []= ","- + ","options [] "," default_format_options merge! "," default_format_options ","currency [] "," i18n_format_options ","options symbolize_keys ","NumberToCurrencyConverter  convert ","options delete  gsub gsub ","options delete  gsub "," number sub _to_rounded "," number abs _to_rounded ","number sub  sub ","number abs  sub ","number sub  abs ","number abs  abs ","number sub  respond_to? ","number abs  respond_to? ","defaults merge!  delete ","options symbolize_keys  delete ","number sub  to_f phase != ","number abs  to_f phase != ","number sub  to_f phase ","number abs  to_f phase ","number sub  to_f ","number abs  to_f "," default_format_options merge!  merge! "," default_format_options merge!  []= ","defaults merge!  [] ","options symbolize_keys  [] "," default_options delete _options merge! "," default_format_defaults merge!  merge! "," default_format_options symbolize_keys  merge! "," default_options delete _options "," default_format_defaults merge!  "," default_format_options symbolize_keys  "," i18n_format_options  [] "," i18n_options delete _options "," i18n_format_defaults merge!  "," i18n_format_options symbolize_keys  ","defaults merge!  symbolize_keys ","options symbolize_keys  symbolize_keys "]}," ActiveSupport NumberHelper number_to_phone":{"type":"method","name":"number_to_phone","children":[],"call":["str << ","extension blank? ","country_code blank? ","number slice! ","delimiter blank? ! ","delimiter blank? ","number start_with? ","number gsub! ","options [] ","number to_s strip ","number to_s ","options symbolize_keys ","NumberToPhoneConverter  convert ","options []  blank? ","number to_s strip  slice! ","number to_s strip  start_with? ","number to_s strip  gsub! ","options symbolize_keys  [] ","number to_s strip  to_s strip ","number to_s strip  to_s ","options symbolize_keys  symbolize_keys "]}," ActiveSupport Notifications InstrumentationRegistry instrumenter_for":{"type":"method","name":"instrumenter_for","children":[],"call":["Instrumenter  new ","@registry [] "]}," ActiveSupport Notifications InstrumentationRegistry initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Notifications Event <<":{"type":"method","name":"<<","children":[],"call":["@children << "]}," ActiveSupport Notifications Instrumenter finish":{"type":"method","name":"finish","children":[],"call":["@notifier finish "]}," ActiveSupport Notifications Instrumenter start":{"type":"method","name":"start","children":[],"call":["@notifier start "]}," ActiveSupport Notifications Fanout Subscribers AllMessages subscribed_to?":{"type":"method","name":"subscribed_to?","children":[],"call":[]}," ActiveSupport Notifications Fanout Subscribers AllMessages publish":{"type":"method","name":"publish","children":[],"call":["@delegate publish "]}," ActiveSupport Notifications Fanout Subscribers AllMessages finish":{"type":"method","name":"finish","children":[],"call":["@delegate finish "]}," ActiveSupport Notifications Fanout Subscribers AllMessages start":{"type":"method","name":"start","children":[],"call":["@delegate start "]}," ActiveSupport Notifications Fanout Subscribers AllMessages initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Notifications Fanout Subscribers Timed finish":{"type":"method","name":"finish","children":[],"call":["@delegate call ","Time  now ","@timestack pop ","timestack pop ","Thread  current [] ","Thread  current ","Concurrent  monotonic_time ","IsolatedExecutionState  [] ","@Thread  current []  pop ","@IsolatedExecutionState  []  pop ","Thread  current []  pop ","IsolatedExecutionState  []  pop "]}," ActiveSupport Notifications Fanout Subscribers Timed start":{"type":"method","name":"start","children":[],"call":["@timestack push ","Time  now ","timestack push ","Thread  current [] ","Thread  current ","Concurrent  monotonic_time ","IsolatedExecutionState  [] "]}," ActiveSupport Notifications Fanout Subscribers Timed publish":{"type":"method","name":"publish","children":[],"call":["@delegate call "]}," ActiveSupport Notifications Fanout Subscribers Timed initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Notifications Fanout Subscribers Evented matches?":{"type":"method","name":"matches?","children":[],"call":["@pattern === "," === "," pattern === "," pattern "]}," ActiveSupport Notifications Fanout Subscribers Evented subscribed_to?":{"type":"method","name":"subscribed_to?","children":[],"call":["@pattern === ","name to_s "," pattern === "," pattern "]}," ActiveSupport Notifications Fanout Subscribers Evented finish":{"type":"method","name":"finish","children":[],"call":["@delegate finish "]}," ActiveSupport Notifications Fanout Subscribers Evented start":{"type":"method","name":"start","children":[],"call":["@delegate start "]}," ActiveSupport Notifications Fanout Subscribers Evented publish":{"type":"method","name":"publish","children":[],"call":["@delegate publish "]}," ActiveSupport Notifications Fanout Subscribers Evented initialize":{"type":"method","name":"initialize","children":[],"call":["delegate respond_to? ","Matcher  wrap "]}," ActiveSupport Notifications Fanout Subscribers new":{"type":"method","name":"new","children":[],"call":[]}," ActiveSupport Notifications Fanout finish":{"type":"method","name":"finish","children":[],"call":["s finish "," listeners_for each "," listeners_for ","listeners each "," iterate_guarding_exceptions ","handle finish_with_values ","handle_stack pop ","IsolatedExecutionState  [] ","handle_stack pop  finish_with_values ","handle_stack pop _stack pop ","IsolatedExecutionState  []  pop "]}," ActiveSupport Notifications Fanout start":{"type":"method","name":"start","children":[],"call":["s start "," listeners_for each "," listeners_for "," iterate_guarding_exceptions ","handle start ","handle_stack << "," build_handle ","IsolatedExecutionState  [] "," build_handle  start "," build_handle _stack << "," build_ build_handle  "]}," ActiveSupport Multibyte Unicode Codepoint swapcase_mapping":{"type":"method","name":"swapcase_mapping","children":[],"call":[" lowercase_mapping "," uppercase_mapping "," uppercase_mapping > "]}," ActiveSupport Multibyte Unicode swapcase":{"type":"method","name":"swapcase","children":[],"call":[" apply_mapping "]}," ActiveSupport Multibyte Unicode upcase":{"type":"method","name":"upcase","children":[],"call":[" apply_mapping "]}," ActiveSupport Multibyte Unicode downcase":{"type":"method","name":"downcase","children":[],"call":[" apply_mapping "]}," ActiveSupport Multibyte Unicode compose":{"type":"method","name":"compose","children":[],"call":["codepoints [] ","current combining_class == ","current combining_class ","codepoints delete_at ","codepoints []= ","composition nil? ","ref [] "," database composition_map [] "," database composition_map "," database ","current combining_class > "," database codepoints [] "," database codepoints ","(send\n  (send\n    (lvar :lindex) :*\n    (const nil :HANGUL_VCOUNT)) :+\n  (lvar :vindex)) * + + ","(send\n  (send\n    (lvar :lindex) :*\n    (const nil :HANGUL_VCOUNT)) :+\n  (lvar :vindex)) * + ","(send\n  (send\n    (lvar :lindex) :*\n    (const nil :HANGUL_VCOUNT)) :+\n  (lvar :vindex)) * ","lindex * + ","lindex * ","starter_pos + ","tindex < ","0 <= ","codepoints [] - ","vindex < ","lindex < ","starter_char - ","pos < ","codepoints length - ","codepoints length ","codepoints pack unicode_normalize codepoints ","codepoints pack unicode_normalize ","codepoints pack "," database codepoints []  combining_class == "," database codepoints []  combining_class ","ref []  nil? "," database composition_map []  [] "," database ref [] _map [] "," database ref [] _map "," database codepoints []  combining_class > ","(send\n  (send\n    (lvar :starter_char - ) :*\n    (const nil :HANGUL_VCOUNT)) :+\n  (lvar :vindex)) * + + ","(send\n  (send\n    (lvar :starter_char - ) :*\n    (const nil :HANGUL_VCOUNT)) :+\n  (lvar :vindex)) * + ","(send\n  (send\n    (lvar :starter_char - ) :*\n    (const nil :HANGUL_VCOUNT)) :+\n  (lvar :vindex)) * ","starter_char -  * + ","starter_char -  * ","starter_char -  < ","codepoints []  - "]}," ActiveSupport Multibyte Unicode decompose":{"type":"method","name":"decompose","children":[],"call":["decomposed << ","decomposed concat "," decompose ","ncp dup ","type == "," database codepoints [] decomp_type ! "," database codepoints [] decomp_type "," database codepoints [] "," database codepoints "," database "," database codepoints [] decomp_mapping ","ncp << ","HANGUL_TBASE  + ","tindex == ","sindex % ","HANGUL_VBASE  + ","(send\n  (lvar :sindex) :%\n  (const nil :HANGUL_NCOUNT)) / ","HANGUL_LBASE  + ","sindex / ","cp - ","cp < ","HANGUL_SBASE  <= ","codepoints inject ","codepoints pack unicode_normalize codepoints ","codepoints pack unicode_normalize ","codepoints pack "," database codepoints [] decomp_mapping  dup "," database codepoints [] decomp_mapping  << ","sindex %  == ","cp -  % ","(send\n  (lvar :cp - ) :%\n  (const nil :HANGUL_NCOUNT)) / ","cp -  / "]}," ActiveSupport Multibyte Unicode pack_graphemes":{"type":"method","name":"pack_graphemes","children":[],"call":["unpacked flatten pack ","unpacked flatten ","ActiveSupport Deprecation  warn ","(str \"          ActiveSupport::Multibyte::Unicode#pack_graphemes is deprecated and will be\\n\") squish "]}," ActiveSupport Multibyte Unicode unpack_graphemes":{"type":"method","name":"unpack_graphemes","children":[],"call":["unpacked << ","codepoints [] ","pos - "," database boundary [] === "," database boundary [] "," database boundary "," database "," in_char_class? ","current == ","previous == ","pos < ","codepoints length ","string codepoints to_a ","string codepoints ","(send\n  (send\n    (lvar :codepoints) :[]\n    (irange\n      (lvar :marker)\n      (lvar :pos))) :count) even? ","codepoints [] count ","codepoints [] all? ","i + ","(erange\n  (lvar :marker)\n  (lvar :pos)) any? ","pos == ","string scan map ","string scan ","ActiveSupport Deprecation  warn ","(str \"          ActiveSupport::Multibyte::Unicode#unpack_graphemes is deprecated and will be\\n\") squish ","string codepoints to_a  [] ","codepoints []  == ","string codepoints to_a  length ","string string codepoints to_a  to_a ","string string codepoints to_a  ","(send\n  (send\n    (lvar :string codepoints to_a ) :[]\n    (irange\n      (lvar :marker)\n      (lvar :pos))) :count) even? ","string codepoints to_a  [] count ","string codepoints to_a  [] all? "]}," ActiveSupport Multibyte Chars as_json":{"type":"method","name":"as_json","children":[],"call":[" to_s as_json "," to_s "]}," ActiveSupport Multibyte Chars grapheme_length":{"type":"method","name":"grapheme_length","children":[],"call":["Unicode  unpack_graphemes length ","Unicode  unpack_graphemes ","@wrapped_string scan length ","@wrapped_string scan ","@wrapped_string grapheme_clusters length ","@wrapped_string grapheme_clusters "]}," ActiveSupport Multibyte Chars swapcase":{"type":"method","name":"swapcase","children":[],"call":[" chars ","Unicode  swapcase "]}," ActiveSupport Multibyte Chars respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["@wrapped_string respond_to? "]}," LoggerSilence silence":{"type":"method","name":"silence","children":[],"call":[" level= "," level "," silencer "," local_levels delete "," local_log_id "," local_levels "," local_levels []= "," local_levels [] "," local_level= "," local_level "]}," ActiveSupport Logger SimpleFormatter call":{"type":"method","name":"call","children":[],"call":["msg inspect ","String  === "]}," ActiveSupport Logger initialize":{"type":"method","name":"initialize","children":[],"call":["SimpleFormatter  new "," after_initialize "," respond_to? "]}," ActiveSupport Logger broadcast":{"type":"method","name":"broadcast","children":[],"call":[]}," ActiveSupport LogSubscriber finish":{"type":"method","name":"finish","children":[],"call":[" logger error ","e backtrace ","e message ","e class ","name inspect "," logger "," send ","name split first ","name split ","event payload merge! ","event payload ","event end= "," event_stack pop "," event_stack ","Time  now "," log_exception "," event_stack pop  payload merge! "," event_stack pop  payload "," event_stack pop  end= ","  event_stack pop _stack pop ","  event_stack pop _stack "]}," ActiveSupport LogSubscriber start":{"type":"method","name":"start","children":[],"call":[" logger "," event_stack push "," event_stack ","parent << "," event_stack last ","ActiveSupport Notifications Event  new ","Time  now "," loggActiveSupport Notifications Event  new r "," ActiveSupport Notifications Event  new vActiveSupport Notifications Event  new nt_stack push "," ActiveSupport Notifications Event  new vActiveSupport Notifications Event  new nt_stack "," event_stack last  << ","parActiveSupport Notifications Event  new nt << "," ActiveSupport Notifications Event  new vActiveSupport Notifications Event  new nt_stack last ","ActivActiveSupport Notifications Event  new Support Notifications EvActiveSupport Notifications Event  new nt  nActiveSupport Notifications Event  new w ","TimActiveSupport Notifications Event  new   now "]}," ActiveSupport LegacyKeyGenerator ensure_secret_secure":{"type":"method","name":"ensure_secret_secure","children":[],"call":[" raise ","Secret should be something secure,  + + + ","Secret should be something secure,  + + ","Secret should be something secure,  + ","SecureRandom  hex ","secret length < ","secret length ","A secret is required to generate an  + + + + ","A secret is required to generate an  + + + ","A secret is required to generate an  + + ","A secret is required to generate an  + ","secret blank? "]}," ActiveSupport LegacyKeyGenerator generate_key":{"type":"method","name":"generate_key","children":[],"call":[]}," ActiveSupport LegacyKeyGenerator initialize":{"type":"method","name":"initialize","children":[],"call":[" ensure_secret_secure "]}," ActiveSupport CachingKeyGenerator generate_key":{"type":"method","name":"generate_key","children":[],"call":["@key_generator generate_key ","@cache_keys [] ","args join "]}," ActiveSupport CachingKeyGenerator initialize":{"type":"method","name":"initialize","children":[],"call":["ThreadSafe Cache  new ","Concurrent Map  new "]}," ActiveSupport KeyGenerator generate_key":{"type":"method","name":"generate_key","children":[],"call":["OpenSSL PKCS5  pbkdf2_hmac_sha1 ","OpenSSL PKCS5  pbkdf2_hmac ","@hash_digest_class new "]}," ActiveSupport KeyGenerator initialize":{"type":"method","name":"initialize","children":[],"call":["2 ** ","options [] "," class hash_digest_class "," class "]}," Range as_json":{"type":"method","name":"as_json","children":[],"call":[" to_s "]}," Float as_json":{"type":"method","name":"as_json","children":[],"call":[" finite? "]}," ActiveSupport Inflector ordinal":{"type":"method","name":"ordinal","children":[],"call":["abs_number % ","(irange\n  (int 11)\n  (int 13)) include? ","number to_i abs ","number to_i ","I18n  translate ","number to_i abs  % "]}," ActiveSupport Inflector Inflections initialize_dup":{"type":"method","name":"initialize_dup","children":[],"call":[" instance_variable_set ","orig send dup ","orig send ","(str \"plurals\") each "," define_acronym_regex_patterns ","orig public_send dup ","orig public_send "]}," ActiveSupport HashWithIndifferentAccess deep_symbolize_keys":{"type":"method","name":"deep_symbolize_keys","children":[],"call":[" to_hash deep_symbolize_keys "," to_hash "," to_hash deep_symbolize_keys! "]}," ActiveSupport HashWithIndifferentAccess deep_stringify_keys":{"type":"method","name":"deep_stringify_keys","children":[],"call":[" dup "]}," ActiveSupport HashWithIndifferentAccess deep_stringify_keys!":{"type":"method","name":"deep_stringify_keys!","children":[],"call":[]}," ActiveSupport HashWithIndifferentAccess replace":{"type":"method","name":"replace","children":[],"call":[" class new_from_hash_copying_default "," class "," class new "]}," ActiveSupport HashWithIndifferentAccess []":{"type":"method","name":"[]","children":[],"call":[" convert_key "]}," ActiveSupport FileUpdateChecker escape":{"type":"method","name":"escape","children":[],"call":["key gsub "]}," ActiveSupport FileUpdateChecker max_mtime":{"type":"method","name":"max_mtime","children":[],"call":["(send\n  (block\n    (send\n      (lvar :paths) :map)\n    (args\n      (arg :path))\n    (send\n      (const nil :File) :mtime\n      (lvar :path))) :reject) max ","time_now < ","(send\n  (lvar :paths) :map) reject ","File  mtime ","paths map ","Time  now ","max_mtime compare_without_coercion < ","max_mtime compare_without_coercion ","max_mtime nil? ","time_now compare_without_coercion < ","time_now compare_without_coercion ","paths each ","(send\n  (block\n    (send\n      (lvar :paths) :map)\n    (args\n      (arg :path))\n    (send\n      (const nil :File) :File  mtime \n      (lvar :path))) :reject) max ","Time  now  < ","File  File  mtime  ","max_File  mtime  compare_without_coercion < ","max_File  mtime  compare_without_coercion ","max_File  mtime  nil? ","Time  now  compare_without_coercion < ","Time  now  compare_without_coercion "]}," ActiveSupport FileUpdateChecker watched":{"type":"method","name":"watched","children":[],"call":["all concat ","Dir  [] ","File  exists? ","@files select ","File  exist? "]}," ActiveSupport DescendantsTracker accumulate_descendants":{"type":"method","name":"accumulate_descendants","children":[],"call":[" accumulate_descendants ","direct_descendants each ","acc concat ","@@direct_descendants [] ","acc << ","@@direct_descendants []  each ","@@@@direct_descendants []  [] "]}," ActiveSupport DescendantsTracker store_inherited":{"type":"method","name":"store_inherited","children":[],"call":["(or-asgn\n  (send\n    (cvar :@@direct_descendants) :[]\n    (lvar :klass))\n  (array)) << ","@@direct_descendants [] ","(or-asgn\n  (send\n    (cvar :@@direct_descendants) :[]\n    (lvar :klass))\n  (send\n    (const nil :DescendantsArray) :new)) << ","DescendantsArray  new ","(or-asgn\n  (send\n    (ivar :@direct_descendants) :[]\n    (lvar :klass))\n  (send\n    (const nil :DescendantsArray) :new)) << ","@direct_descendants [] "]}," ActiveSupport Deprecation initialize":{"type":"method","name":"initialize","children":[],"call":[" debug= "," silenced= "," deprecation_horizon= "," gem_name= ","Concurrent ThreadLocalVar  new "]}," ActiveSupport Deprecation Reporting extract_callstack":{"type":"method","name":"extract_callstack","children":[],"call":["md captures ","offending_line match ","callstack first ","line start_with? ! ","line start_with? ","callstack find ","File  expand_path + ","File  expand_path ","offending_line label ","offending_line lineno ","offending_line path "," ignored_callstack ! "," ignored_callstack ","frame absolute_path "," _extract_callstack ","callstack first is_a? ","frame absolute_path start_with? ! ","frame absolute_path start_with? ","callstack empty? ","offending_line match  captures "]}," ActiveSupport Deprecation Reporting deprecation_caller_message":{"type":"method","name":"deprecation_caller_message","children":[],"call":[" extract_callstack "]}," ActiveSupport Deprecation Reporting deprecation_message":{"type":"method","name":"deprecation_message","children":[],"call":[" deprecation_caller_message ","message =~ "]}," ActiveSupport Deprecation Reporting deprecated_method_warning":{"type":"method","name":"deprecated_method_warning","children":[],"call":[" deprecation_horizon "," gem_name "]}," ActiveSupport Deprecation Reporting deprecation_warning":{"type":"method","name":"deprecation_warning","children":[],"call":[" warn "," deprecated_method_warning tap "," deprecated_method_warning "," caller "," caller_locations "]}," ActiveSupport Deprecation Reporting silence":{"type":"method","name":"silence","children":[],"call":["@silenced_thread bind "," end_silence ","block call "," begin_silence "]}," ActiveSupport Deprecation Reporting warn":{"type":"method","name":"warn","children":[],"call":["b call "," behavior each "," behavior "," deprecation_message tap "," deprecation_message "," caller "," silenced "," caller_locations "," gem_name "," deprecation_horizon "," disallowed_behavior each "," disallowed_behavior "," deprecation_disallowed? "]}," ActiveSupport Deprecation MethodWrapper deprecate_methods":{"type":"method","name":"deprecate_methods","children":[],"call":[" send ","deprecator deprecation_warning ","options [] ","target_module send ","target_module alias_method_chain ","method_names each ","options keys ","ActiveSupport Deprecation  instance ","options delete ","method_names extract_options! ","target_module prepend "," define_method ","Module  new "," private ","target_module private_method_defined? "," protected ","target_module protected_method_defined? ","method_name to_s sub ","method_name to_s ","mod instance_methods empty? ","mod instance_methods ","mod send ","target_module method_defined? ","mod define_method ","method bind call ","method bind ","target_module redefine_method ","target_module instance_method ","target_module alias_method ","target_module define_method "," ruby2_keywords "," respond_to? ","mod module_eval "," redefine_method ","target_module module_eval ","method bind_call ","method_names extract_options!  [] ","target_Module  new ule send ","target_Module  new ule alias_method_chain ","target_module alias_target_module instance_method _chain ","target_module instance_method _names each ","method_names extract_options!  keys ","method_names extract_options!  delete ","method_names extract_method_names extract_options! ! ","target_module instance_method _names extract_options! ","target_Module  new ule prepend "," define_target_module instance_method  ","target_Module  new ule private_method_defined? ","target_module private_target_module instance_method _defined? ","target_Module  new ule protected_method_defined? ","target_module protected_target_module instance_method _defined? ","target_module instance_method _name to_s sub ","target_module instance_method _name to_s ","Module  new  instance_methods empty? ","mod instance_target_module instance_method s empty? ","Module  new  instance_methods ","mod instance_target_module instance_method s ","Module  new  send ","target_Module  new ule method_defined? ","target_module target_module instance_method _defined? ","Module  new  define_method ","mod define_target_module instance_method  ","target_module instance_method  bind call ","target_module instance_method  bind ","target_Module  new ule redefine_method ","target_module redefine_target_module instance_method  ","target_Module  new ule instance_method ","target_module instance_target_module instance_method  ","target_Module  new ule alias_method ","target_module alias_target_module instance_method  ","target_Module  new ule define_method ","target_module define_target_module instance_method  ","Module  new  Module  new ule_eval "," redefine_target_module instance_method  ","target_Module  new ule Module  new ule_eval ","target_module instance_method  bind_call "]}," ActiveSupport Deprecation InstanceDelegator ClassMethods method_added":{"type":"method","name":"method_added","children":[],"call":[" singleton_class delegate "," singleton_class "," singleton_class module_eval ","33 + ","(str \"[^\\\\]]=\\\\z\") match? "]}," ActiveSupport Deprecation InstanceDelegator ClassMethods include":{"type":"method","name":"include","children":[],"call":[" method_added ","included_module instance_methods each ","included_module instance_methods "]}," ActiveSupport Deprecation InstanceDelegator included":{"type":"method","name":"included","children":[],"call":[]}," ActiveSupport Deprecation Behavior behavior=":{"type":"method","name":"behavior=","children":[],"call":["DEFAULT_BEHAVIORS  [] "," Array map "," Array "," arity_coerce "]}," ActiveSupport Deprecation Behavior behavior":{"type":"method","name":"behavior","children":[],"call":["DEFAULT_BEHAVIORS  [] "]}," ActiveSupport Autoload eager_load!":{"type":"method","name":"eager_load!","children":[],"call":[" require ","@_autoloads values each ","@_autoloads values ","@_autoloads each_value "," const_get ","@_eagerloaded_constants each "]}," ActiveSupport Autoload extended":{"type":"method","name":"extended","children":[],"call":[]}," Time end_of_minute":{"type":"method","name":"end_of_minute","children":[],"call":[" change "," Rational "]}," Time beginning_of_minute":{"type":"method","name":"beginning_of_minute","children":[],"call":[" change "]}," Time seconds_until_end_of_day":{"type":"method","name":"seconds_until_end_of_day","children":[],"call":[" end_of_day to_i - "," to_i "," end_of_day to_i "," end_of_day "]}," Thread locals":{"type":"method","name":"locals","children":[],"call":["LOCK  synchronize "]}," Thread thread_variable?":{"type":"method","name":"thread_variable?","children":[],"call":[" locals has_key? ","key to_sym "," locals "," _locals has_key? "," _locals "]}," Thread thread_variables":{"type":"method","name":"thread_variables","children":[],"call":[" locals keys "," locals "," _locals keys "," _locals "]}," Thread thread_variable_set":{"type":"method","name":"thread_variable_set","children":[],"call":[" locals []= ","key to_sym "," locals "," _locals []= "," _locals "]}," Thread thread_variable_get":{"type":"method","name":"thread_variable_get","children":[],"call":[" locals [] ","key to_sym "," locals "," _locals [] "," _locals "]}," Struct to_h":{"type":"method","name":"to_h","children":[],"call":["Hash  [] "," members zip "," values "," members "]}," String in_time_zone":{"type":"method","name":"in_time_zone","children":[],"call":[" to_time "," Time  find_zone! parse "," Time  find_zone! "]}," ActiveSupport SafeBuffer %":{"type":"method","name":"%","children":[],"call":[" class new "," class ","ERB Util  h ","arg html_safe? "," html_safe? ! "," html_safe? "," Array map "," Array "," html_escape_interpolated_argument ","Hash  [] ","args map ","args transform_values "," explicit_html_escape_interpolated_argument "]}," ERB Util html_escape_once":{"type":"method","name":"html_escape_once","children":[],"call":["result html_safe ","s html_safe? ","s to_s gsub ","s to_s ","HTML_ESCAPE  [] ","ActiveSupport Multibyte Unicode  tidy_bytes gsub ","ActiveSupport Multibyte Unicode  tidy_bytes ","ActiveSupport Multibyte Unicode  tidy_bytes gsub html_safe ","s to_s gsub  html_safe ","ActiveSupport Multibyte Unicode  tidy_bytes gsub  html_safe "]}," String indent":{"type":"method","name":"indent","children":[],"call":["_ indent! "," dup tap "," dup "]}," String indent!":{"type":"method","name":"indent!","children":[],"call":[" gsub! ","indent_string * "," [] "]}," NilClass try!":{"type":"method","name":"try!","children":[],"call":[]}," Object try!":{"type":"method","name":"try!","children":[],"call":[" public_send "," block_given? ","a empty? "," instance_eval ","b arity zero? ","b arity ","b arity == "]}," Process Status as_json":{"type":"method","name":"as_json","children":[],"call":[" pid "," exitstatus "]}," Array deep_dup":{"type":"method","name":"deep_dup","children":[],"call":["it deep_dup "," map "]}," Object deep_dup":{"type":"method","name":"deep_dup","children":[],"call":[" dup "," duplicable? "]}," Numeric to_formatted_s":{"type":"method","name":"to_formatted_s","children":[],"call":[" to_default_s ","ActiveSupport NumberHelper  number_to_human_size ","ActiveSupport NumberHelper  number_to_human ","ActiveSupport NumberHelper  number_to_rounded ","ActiveSupport NumberHelper  number_to_delimited ","ActiveSupport NumberHelper  number_to_percentage ","ActiveSupport NumberHelper  number_to_currency ","ActiveSupport NumberHelper  number_to_phone "]}," Marshal load_with_autoloading":{"type":"method","name":"load_with_autoloading","children":[],"call":[" raise ","source rewind ","source respond_to? ","1 constantize ","exc message match ","exc message "," load_without_autoloading ","1 == ","loaded name ","1 constantize  name "]}," Integer ordinal":{"type":"method","name":"ordinal","children":[],"call":["ActiveSupport Inflector  ordinal "]}," Hash deep_symbolize_keys!":{"type":"method","name":"deep_symbolize_keys!","children":[],"call":["key to_sym "," deep_transform_keys! "]}," Hash deep_stringify_keys!":{"type":"method","name":"deep_stringify_keys!","children":[],"call":["key to_s "," deep_transform_keys! "]}," Hash deep_stringify_keys":{"type":"method","name":"deep_stringify_keys","children":[],"call":["key to_s "," deep_transform_keys "]}," Hash deep_transform_keys!":{"type":"method","name":"deep_transform_keys!","children":[],"call":[" []= ","value deep_transform_keys! ","value is_a? "," delete "," keys each "," keys "," _deep_transform_keys_in_object! "," delete  deep_transform_keys! "," delete  is_a? "]}," Hash deep_transform_keys":{"type":"method","name":"deep_transform_keys","children":[],"call":["result []= ","value deep_transform_keys ","value is_a? "," each "," _deep_transform_keys_in_object "]}," Hash transform_keys!":{"type":"method","name":"transform_keys!","children":[],"call":[" []= "," delete "," keys each "," keys "," enum_for "," block_given? "," size "]}," Hash transform_keys":{"type":"method","name":"transform_keys","children":[],"call":["result []= "," [] "," each_key "," class new "," class "," enum_for "," block_given? "," size "," class new  []= "]}," ActiveSupport XMLConverter process_array":{"type":"method","name":"process_array","children":[],"call":["value first ","value length > ","value length "," deep_to_h ","value map! "]}," ActiveSupport XMLConverter process_content":{"type":"method","name":"process_content","children":[],"call":["parser call ","parser arity == ","parser arity ","ActiveSupport XmlMini PARSING  [] ","value [] ","ActiveSupport XmlMini PARSING  []  call ","ActiveSupport XmlMini PARSING  []  arity == ","ActiveSupport XmlMini PARSING  []  arity "]}," ActiveSupport XMLConverter garbage?":{"type":"method","name":"garbage?","children":[],"call":["value size == ","value size ","value [] is_a? ! ","value [] is_a? ","value [] "]}," ActiveSupport XMLConverter nothing?":{"type":"method","name":"nothing?","children":[],"call":["value [] == ","value [] ","value blank? "]}," ActiveSupport XMLConverter become_hash?":{"type":"method","name":"become_hash?","children":[],"call":[" garbage? ! "," garbage? "," nothing? ! "," nothing? "]}," ActiveSupport XMLConverter become_empty_string?":{"type":"method","name":"become_empty_string?","children":[],"call":["value [] != ","value [] ","value [] == "]}," ActiveSupport XMLConverter become_array?":{"type":"method","name":"become_array?","children":[],"call":["value [] == ","value [] "]}," ActiveSupport XMLConverter become_content?":{"type":"method","name":"become_content?","children":[],"call":["value [] present? ","value [] ","value keys size == ","value keys size ","value keys ","value [] == "]}," ActiveSupport XMLConverter process_hash":{"type":"method","name":"process_hash","children":[],"call":["xml_value [] ","xml_value [] is_a? ","Hash  [] "," deep_to_h ","value map "," become_hash? "," become_empty_string? "," process_content "," become_content? "," raise ","entries inspect ","entries collect ","value [] try ","value [] ","entries nil? ","Array  wrap ","v is_a? ! ","v is_a? ","value detect "," become_array? ","@disallowed_types include? ","value [] is_a? ! ","value [] is_a? ","value include? ","value transform_values ","Hash  []  [] ","Hash  []  [] is_a? "]}," ActiveSupport XMLConverter deep_to_h":{"type":"method","name":"deep_to_h","children":[],"call":[" raise ","value inspect ","value class name ","value class "," process_array "," process_hash "]}," ActiveSupport XMLConverter normalize_keys":{"type":"method","name":"normalize_keys","children":[],"call":[" normalize_keys ","params map ","Hash  [] ","k to_s tr ","k to_s "]}," ActiveSupport XMLConverter to_h":{"type":"method","name":"to_h","children":[],"call":[" deep_to_h "]}," ActiveSupport XMLConverter initialize":{"type":"method","name":"initialize","children":[],"call":[" normalize_keys ","XmlMini  parse "]}," ActiveSupport XMLConverter DisallowedType initialize":{"type":"method","name":"initialize","children":[],"call":["type inspect "]}," File probe_stat_in":{"type":"method","name":"probe_stat_in","children":[],"call":[]}," DateTime offset_in_seconds":{"type":"method","name":"offset_in_seconds","children":[],"call":["(send\n  (send nil :offset) :*\n  (int 86400)) to_i "," offset * "," offset "]}," DateTime end_of_minute":{"type":"method","name":"end_of_minute","children":[],"call":[" change "," Rational "]}," DateTime beginning_of_minute":{"type":"method","name":"beginning_of_minute","children":[],"call":[" change "]}," DateTime seconds_until_end_of_day":{"type":"method","name":"seconds_until_end_of_day","children":[],"call":[" end_of_day to_i - "," to_i "," end_of_day to_i "," end_of_day "]}," DateAndTime Calculations days_span":{"type":"method","name":"days_span","children":[],"call":["(send\n  (send\n    (const nil :DAYS_INTO_WEEK) :[]\n    (lvar :day)) :-\n  (send\n    (const nil :DAYS_INTO_WEEK) :[]\n    (send\n      (const nil :Date) :beginning_of_week))) % ","DAYS_INTO_WEEK  [] - ","DAYS_INTO_WEEK  [] ","Date  beginning_of_week ","(send\n  (send\n    (const nil :DAYS_INTO_WEEK) :fetch\n    (lvar :day)) :-\n  (send\n    (const nil :DAYS_INTO_WEEK) :fetch\n    (send\n      (const nil :Date) :beginning_of_week))) % ","DAYS_INTO_WEEK  fetch - ","DAYS_INTO_WEEK  fetch "]}," DateAndTime Calculations last_hour":{"type":"method","name":"last_hour","children":[],"call":["result end_of_day "," acts_like? ","date_or_time end_of_day ","date_or_time acts_like? "]}," DateAndTime Calculations first_hour":{"type":"method","name":"first_hour","children":[],"call":["result change "," acts_like? ","date_or_time beginning_of_day ","date_or_time acts_like? "]}," DateAndTime Calculations end_of_year":{"type":"method","name":"end_of_year","children":[],"call":[" change end_of_month "," change "]}," DateAndTime Calculations end_of_month":{"type":"method","name":"end_of_month","children":[],"call":[" days_since ","last_day - "," day "," last_hour "," Time  days_in_month "," year "," month "," Time  days_in_month  - "]}," DateAndTime Calculations sunday":{"type":"method","name":"sunday","children":[],"call":[" end_of_week "]}," DateAndTime Calculations end_of_week":{"type":"method","name":"end_of_week","children":[],"call":[" days_since ","6 - "," days_to_week_start "," last_hour "]}," DateAndTime Calculations monday":{"type":"method","name":"monday","children":[],"call":[" beginning_of_week "]}," DateAndTime Calculations beginning_of_week":{"type":"method","name":"beginning_of_week","children":[],"call":["result midnight "," acts_like? "," days_ago "," days_to_week_start "," days_ago  midnight "]}," DateAndTime Calculations days_to_week_start":{"type":"method","name":"days_to_week_start","children":[],"call":["(send\n  (lvar :current_day_number) :-\n  (lvar :start_day_number)) % ","current_day_number - "," wday - "," wday "," wday != ","DAYS_INTO_WEEK  [] ","(send\n  (send nil :wday) :-\n  (lvar :start_day_number)) % ","DAYS_INTO_WEEK  fetch ","(send\n  (lvar : wday - ) :-\n  (lvar :start_day_number)) % ","(send\n  (lvar :current_day_number) :-\n  (lvar :DAYS_INTO_WEEK  [] )) % ","(send\n  (lvar :current_day_number) :-\n  (lvar :DAYS_INTO_WEEK  fetch )) % "," wday -  - ","(send\n  (send nil :wday) :-\n  (lvar :DAYS_INTO_WEEK  [] )) % ","(send\n  (send nil :wday) :-\n  (lvar :DAYS_INTO_WEEK  fetch )) % "]}," DateAndTime Calculations prev_year":{"type":"method","name":"prev_year","children":[],"call":[" years_ago "," advance ","years -@ "]}," DateAndTime Calculations prev_quarter":{"type":"method","name":"prev_quarter","children":[],"call":[" months_ago "]}," DateAndTime Calculations prev_month":{"type":"method","name":"prev_month","children":[],"call":[" months_ago "," advance ","months -@ "]}," DateAndTime Calculations prev_week":{"type":"method","name":"prev_week","children":[],"call":[" weeks_ago beginning_of_week days_since "," days_span "," weeks_ago beginning_of_week "," weeks_ago "," first_hour "," copy_time_to "]}," DateAndTime Calculations next_year":{"type":"method","name":"next_year","children":[],"call":[" years_since "," advance "]}," DateAndTime Calculations next_quarter":{"type":"method","name":"next_quarter","children":[],"call":[" months_since "]}," DateAndTime Calculations next_month":{"type":"method","name":"next_month","children":[],"call":[" months_since "," advance "]}," DateAndTime Calculations next_week":{"type":"method","name":"next_week","children":[],"call":[" weeks_since beginning_of_week days_since "," days_span "," weeks_since beginning_of_week "," weeks_since "," first_hour "," copy_time_to "]}," DateAndTime Calculations beginning_of_year":{"type":"method","name":"beginning_of_year","children":[],"call":[" change beginning_of_month "," change "]}," DateAndTime Calculations end_of_quarter":{"type":"method","name":"end_of_quarter","children":[],"call":[" beginning_of_month change end_of_month "," beginning_of_month change "," beginning_of_month ","m >= "," month ","(int 3) detect "," month + ","(send\n  (int 12) :-\n  (send nil :month)) % ","12 - "]}," DateAndTime Calculations beginning_of_quarter":{"type":"method","name":"beginning_of_quarter","children":[],"call":[" beginning_of_month change "," beginning_of_month ","m <= "," month ","(int 10) detect "," month - ","(send\n  (int 2) :+\n  (send nil :month)) % ","2 + "]}," DateAndTime Calculations beginning_of_month":{"type":"method","name":"beginning_of_month","children":[],"call":[" change "," first_hour "]}," DateAndTime Calculations years_since":{"type":"method","name":"years_since","children":[],"call":[" advance "]}," DateAndTime Calculations years_ago":{"type":"method","name":"years_ago","children":[],"call":[" advance ","years -@ "]}," DateAndTime Calculations months_since":{"type":"method","name":"months_since","children":[],"call":[" advance "]}," DateAndTime Calculations months_ago":{"type":"method","name":"months_ago","children":[],"call":[" advance ","months -@ "]}," DateAndTime Calculations weeks_since":{"type":"method","name":"weeks_since","children":[],"call":[" advance "]}," DateAndTime Calculations weeks_ago":{"type":"method","name":"weeks_ago","children":[],"call":[" advance ","weeks -@ "]}," DateAndTime Calculations days_since":{"type":"method","name":"days_since","children":[],"call":[" advance "]}," DateAndTime Calculations days_ago":{"type":"method","name":"days_ago","children":[],"call":[" advance ","days -@ "]}," DateAndTime Calculations future?":{"type":"method","name":"future?","children":[],"call":[" > "," class current "," class "]}," DateAndTime Calculations past?":{"type":"method","name":"past?","children":[],"call":[" < "," class current "," class "]}," DateAndTime Calculations today?":{"type":"method","name":"today?","children":[],"call":[" to_date == "," Date  current "," to_date "]}," DateAndTime Calculations tomorrow":{"type":"method","name":"tomorrow","children":[],"call":[" advance "]}," DateAndTime Calculations yesterday":{"type":"method","name":"yesterday","children":[],"call":[" advance "]}," Date in_time_zone":{"type":"method","name":"in_time_zone","children":[],"call":[" to_time "," Time  find_zone! local "," day "," month "," year "," Time  find_zone! "]}," Date compare_with_coercion":{"type":"method","name":"compare_with_coercion","children":[],"call":[" compare_without_coercion "," to_datetime <=> "," to_datetime ","other is_a? "]}," Date find_beginning_of_week!":{"type":"method","name":"find_beginning_of_week!","children":[],"call":[" raise "," Date DAYS_INTO_WEEK  key? "]}," Date beginning_of_week=":{"type":"method","name":"beginning_of_week=","children":[],"call":["Thread  current []= "," find_beginning_of_week! ","Thread  current "," ActiveSupport IsolatedExecutionState  []= "]}," ActiveSupport Concurrency Latch await":{"type":"method","name":"await","children":[],"call":["@count > ","@cv wait_while ","@lock synchronize "," wait ","@inner wait "]}," ActiveSupport Concurrency Latch release":{"type":"method","name":"release","children":[],"call":["@cv broadcast ","@count zero? ","@count > ","@lock synchronize ","@inner count_down "]}," ActiveSupport Concurrency Latch initialize":{"type":"method","name":"initialize","children":[],"call":["@lock new_cond ","Monitor  new ","ActiveSupport Deprecation  warn ","Concurrent CountDownLatch  new ","count == ","Monitor  new  new_cond "]}," ActiveSupport Callbacks ClassMethods __generate_callback_runner_name":{"type":"method","name":"__generate_callback_runner_name","children":[],"call":[" name hash abs "," name hash "," name "]}," ActiveSupport Callbacks ClassMethods __callback_runner_name_cache":{"type":"method","name":"__callback_runner_name_cache","children":[],"call":["cache []= "," __generate_callback_runner_name ","ThreadSafe Cache  new "]}," ActiveSupport Callbacks ClassMethods __define_callbacks":{"type":"method","name":"__define_callbacks","children":[],"call":[" class_eval ","370 + ","object send compile ","object send ","object respond_to? "," __callback_runner_name ","389 + "," __callback_runner_ __callback_runner_name  "]}," ActiveSupport Callbacks CallbackChain remove_duplicates":{"type":"method","name":"remove_duplicates","children":[],"call":["callback duplicates? "," delete_if ","@chain delete_if ","@single_callbacks clear "]}," ActiveSupport Callbacks CallbackChain prepend_one":{"type":"method","name":"prepend_one","children":[],"call":[" unshift "," remove_duplicates ","@chain unshift ","@single_callbacks clear "]}," ActiveSupport Callbacks CallbackChain append_one":{"type":"method","name":"append_one","children":[],"call":[" push "," remove_duplicates ","@chain push ","@single_callbacks clear "]}," ActiveSupport Callbacks CallbackChain prepend":{"type":"method","name":"prepend","children":[],"call":[" prepend_one ","callbacks each "]}," ActiveSupport Callbacks CallbackChain append":{"type":"method","name":"append","children":[],"call":[" append_one ","callbacks each "]}," ActiveSupport Callbacks Callback recompile_options!":{"type":"method","name":"recompile_options!","children":[],"call":["conditions flatten join ","conditions flatten ","conditions << "," Array map "," Array "," _compile_filter "," options [] "," options "," options [] empty? "]}," ActiveSupport Callbacks Callback define_conditional_callback":{"type":"method","name":"define_conditional_callback","children":[],"call":["@klass class_eval ","208 + "," next_id ","206 + ","214 + "]}," ActiveSupport Callbacks Callback apply":{"type":"method","name":"apply","children":[],"call":[" define_conditional_callback "," chain config [] ! "," chain config [] "," chain config "," chain ","@raw_filter inspect inspect ","@raw_filter inspect ","Filters Around  build "," chain_config ","Filters After  build ","Filters Before  build "," kind "," make_lambda "," conditions_lambdas ","callback_sequence around ","user_callback make_lambda ","CallTemplate  build "," name "," make_lambda  make_lambda ","CallTemplate  build  make_lambda ","  define_conditional_callback  "]}," ActiveSupport Callbacks Callback duplicates?":{"type":"method","name":"duplicates?","children":[],"call":[" matches? ","other filter ","other kind "]}," ActiveSupport Callbacks Callback deprecate_per_key_option":{"type":"method","name":"deprecate_per_key_option","children":[],"call":[" raise ","options [] "]}," ActiveSupport Cache Entry convert_version_4beta1_entry!":{"type":"method","name":"convert_version_4beta1_entry!","children":[],"call":[" remove_instance_variable ","@x - ","Time  now to_f ","Time  now "]}," ActiveSupport Cache Entry uncompress":{"type":"method","name":"uncompress","children":[],"call":["Marshal  load ","Zlib Inflate  inflate "," marshal_load "]}," ActiveSupport Cache Entry compress":{"type":"method","name":"compress","children":[],"call":["Zlib Deflate  deflate ","Marshal  dump "]}," ActiveSupport Cache Entry dup_value!":{"type":"method","name":"dup_value!","children":[],"call":["Marshal  load ","Marshal  dump ","@value dup ","@value is_a? ","(or\n  (or\n    (send\n      (ivar :@value) :is_a?\n      (const nil :Numeric))\n    (send\n      (ivar :@value) :==\n      (true)))\n  (send\n    (ivar :@value) :==\n    (false))) ! ","@value == "," compressed? ! "," compressed? "," convert_version_4beta1_entry! ","@v dup ","@v is_a? ","(or\n  (or\n    (send\n      (ivar :@v) :is_a?\n      (const nil :Numeric))\n    (send\n      (ivar :@v) :==\n      (true)))\n  (send\n    (ivar :@v) :==\n    (false))) ! ","@v == "," convert_version_3_entry! ","Marshal  load  dup ","@value dup  dup ","Marshal  load alue dup ","@v dup alue dup ","Marshal  load  is_a? ","@value dup  is_a? ","Marshal  load alue is_a? ","@v dup alue is_a? ","(or\n  (or\n    (send\n      (ivar :Marshal  load ) :is_a?\n      (const nil :Numeric))\n    (send\n      (ivar :Marshal  load ) :==\n      (true)))\n  (send\n    (ivar :Marshal  load ) :==\n    (false))) ! ","(or\n  (or\n    (send\n      (ivar :@value dup ) :is_a?\n      (const nil :Numeric))\n    (send\n      (ivar :@value dup ) :==\n      (true)))\n  (send\n    (ivar :@value dup ) :==\n    (false))) ! ","(or\n  (or\n    (send\n      (ivar :Marshal  load alue) :is_a?\n      (const nil :Numeric))\n    (send\n      (ivar :Marshal  load alue) :==\n      (true)))\n  (send\n    (ivar :Marshal  load alue) :==\n    (false))) ! ","(or\n  (or\n    (send\n      (ivar :@v dup alue) :is_a?\n      (const nil :Numeric))\n    (send\n      (ivar :@v dup alue) :==\n      (true)))\n  (send\n    (ivar :@v dup alue) :==\n    (false))) ! ","Marshal  load  == ","@value dup  == ","Marshal  load alue == ","@v dup alue == ","@v dup  dup ","@v dup  is_a? ","(or\n  (or\n    (send\n      (ivar :@v dup ) :is_a?\n      (const nil :Numeric))\n    (send\n      (ivar :@v dup ) :==\n      (true)))\n  (send\n    (ivar :@v dup ) :==\n    (false))) ! ","@v dup  == "]}," ActiveSupport Cache Store save_block_result_to_cache":{"type":"method","name":"save_block_result_to_cache","children":[],"call":[" write "," instrument ","options [] ","result nil? ","WriteOptions  new ","options dup ","options dup  [] ","options dup  dup "]}," ActiveSupport Cache Store get_entry_value":{"type":"method","name":"get_entry_value","children":[],"call":["entry value "," instrument "]}," ActiveSupport Cache Store handle_expired_entry":{"type":"method","name":"handle_expired_entry","children":[],"call":[" delete_entry "," write_entry ","race_ttl * ","entry expires_at= ","Time  now + ","Time  now ","Time  now to_f - <= ","Time  now to_f - ","entry expires_at ","Time  now to_f ","options [] to_i ","options [] ","entry expired? ","Time  now - <= ","Time  now - ","race_ttl > ","Time  now to_f + ","options [] to_i  * ","options [] to_i  > "]}," ActiveSupport Cache Store find_cached_entry":{"type":"method","name":"find_cached_entry","children":[],"call":[" read_entry ","payload []= "," instrument "]}," ActiveSupport Cache retrieve_store_class":{"type":"method","name":"retrieve_store_class","children":[],"call":["ActiveSupport Cache  const_get ","store to_s camelize ","store to_s "," raise "," require "]}," ActiveSupport Cache Strategy LocalCache use_temporary_local_cache":{"type":"method","name":"use_temporary_local_cache","children":[],"call":["LocalCacheRegistry  set_cache_for "," local_cache_key ","LocalCacheRegistry  cache_for "]}," ActiveSupport Cache Strategy LocalCache local_cache_key":{"type":"method","name":"local_cache_key","children":[],"call":["(begin\n  (send\n    (send\n      (send\n        (self) :class) :name) :underscore)) gsub to_sym ","(begin\n  (send\n    (send\n      (send\n        (self) :class) :name) :underscore)) gsub "," object_id "," class name underscore "," class name "," class "]}," ActiveSupport Cache Strategy LocalCache increment_or_decrement":{"type":"method","name":"increment_or_decrement","children":[],"call":[" local_cache delete "," local_cache "," local_cache write "," local_cache mute "]}," ActiveSupport Cache Strategy LocalCache LocalCacheRegistry set_cache_for":{"type":"method","name":"set_cache_for","children":[],"call":["@registry []= ","registry []= ","ActiveSupport IsolatedExecutionState  [] "]}," ActiveSupport Cache Strategy LocalCache LocalCacheRegistry cache_for":{"type":"method","name":"cache_for","children":[],"call":["@registry [] ","registry [] ","ActiveSupport IsolatedExecutionState  [] "]}," ActiveSupport Cache Strategy LocalCache LocalCacheRegistry initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport BufferedLogger _deprecation_warning":{"type":"method","name":"_deprecation_warning","children":[],"call":[]}," ActiveSupport BufferedLogger inherited":{"type":"method","name":"inherited","children":[],"call":[]}," ActiveSupport BasicObject inherited":{"type":"method","name":"inherited","children":[],"call":[]}," ActiveSupport BacktraceCleaner filter_backtrace":{"type":"method","name":"filter_backtrace","children":[],"call":["f call ","backtrace map ","@filters each ","line to_s "]}," ActiveSupport LogSubscriber event_stack":{"type":"method","name":"event_stack","children":[],"call":["Thread  current [] ","Thread  current "]}," ActiveSupport LogSubscriber initialize":{"type":"method","name":"initialize","children":[],"call":["(send\n  (send\n    (self) :class) :name) join "," object_id "," class name "," class "]}," ActiveSupport DummyKeyGenerator ensure_secret_secure":{"type":"method","name":"ensure_secret_secure","children":[],"call":[" raise ","Secret should be something secure,  + + + ","Secret should be something secure,  + + ","Secret should be something secure,  + ","SecureRandom  hex ","secret length < ","secret length ","A secret is required to generate an  + + + + ","A secret is required to generate an  + + + ","A secret is required to generate an  + + ","A secret is required to generate an  + ","secret blank? "]}," ActiveSupport DummyKeyGenerator generate_key":{"type":"method","name":"generate_key","children":[],"call":[]}," ActiveSupport DummyKeyGenerator initialize":{"type":"method","name":"initialize","children":[],"call":[" ensure_secret_secure "]}," ActiveSupport Cache Entry convert_version_3_entry!":{"type":"method","name":"convert_version_3_entry!","children":[],"call":[" remove_instance_variable ","(send\n  (ivar :@created_at) :+\n  (ivar :@expires_in)) to_i ","@created_at + "]}," ActiveSupport Callbacks Callback _method_name_for_object_filter":{"type":"method","name":"_method_name_for_object_filter","children":[],"call":["method_name << "," next_id ","class_name gsub! ","filter class to_s ","filter class ","filter to_s ","filter kind_of? ","filter class to_s  gsub! ","filter to_s  gsub! "]}," Thread _locals":{"type":"method","name":"_locals","children":[],"call":["LOCK  synchronize "]}," Thread freeze":{"type":"method","name":"freeze","children":[],"call":[" _locals freeze "," _locals "]}," Range ensure_iteration_allowed":{"type":"method","name":"ensure_iteration_allowed","children":[],"call":[" raise "," first class "," first "," first acts_like? "," first is_a? "]}," Range step_with_time_with_zone":{"type":"method","name":"step_with_time_with_zone","children":[],"call":[" step_without_time_with_zone "," ensure_iteration_allowed "]}," Range each_with_time_with_zone":{"type":"method","name":"each_with_time_with_zone","children":[],"call":[" each_without_time_with_zone "," ensure_iteration_allowed "]}," DateTime nsec":{"type":"method","name":"nsec","children":[],"call":["(send\n  (send nil :sec_fraction) :*\n  (int 1000000000)) to_i "," sec_fraction * "," sec_fraction "]}," DateTime usec":{"type":"method","name":"usec","children":[],"call":["(send\n  (send nil :sec_fraction) :*\n  (int 1000000)) to_i "," sec_fraction * "," sec_fraction "]}," ActiveSupport Cache MemoryStore cached_size":{"type":"method","name":"cached_size","children":[],"call":["key to_s bytesize + + ","key to_s bytesize + ","entry size ","key to_s bytesize ","key to_s ","payload bytesize "]}," ActiveSupport TimeZone time_now":{"type":"method","name":"time_now","children":[],"call":["Time  now "]}," ActiveSupport OrderedHash select":{"type":"method","name":"select","children":[],"call":["hash select! "," dup tap "," dup "]}," ActiveSupport HashWithIndifferentAccess reject":{"type":"method","name":"reject","children":[],"call":["hash reject! "," dup tap "," dup "," to_enum "," block_given? "]}," ActiveSupport HashWithIndifferentAccess select":{"type":"method","name":"select","children":[],"call":["hash select! "," dup tap "," dup "," to_enum "," block_given? "]}," Hash _deep_transform_keys_in_object!":{"type":"method","name":"_deep_transform_keys_in_object!","children":[],"call":[" _deep_transform_keys_in_object! ","object map! ","object []= ","object delete ","object keys each ","object keys "]}," Hash _deep_transform_keys_in_object":{"type":"method","name":"_deep_transform_keys_in_object","children":[],"call":[" _deep_transform_keys_in_object ","object map ","result []= ","object each_with_object "," class new "," class "]}," ActiveSupport eager_load!":{"type":"method","name":"eager_load!","children":[],"call":[]}," ActiveSupport Testing TimeHelpers simple_stubs":{"type":"method","name":"simple_stubs","children":[],"call":["SimpleStubs  new "]}," ActiveSupport Testing TimeHelpers travel_back":{"type":"method","name":"travel_back","children":[],"call":[" simple_stubs unstub_all! "," simple_stubs "," travel_to "," block_given? ","Time  current "," simple_stubs stubbed? "]}," ActiveSupport Testing TimeHelpers travel_to":{"type":"method","name":"travel_to","children":[],"call":[" travel_back ","block call "," block_given? "," simple_stubs stub_object ","now to_date "," simple_stubs ","date_or_time to_time ","date_or_time midnight to_time ","date_or_time midnight ","date_or_time is_a? ! ","date_or_time is_a? ","Date  unstub ","Time  unstub ","Date  stubs ","date_or_time to_date ","Time  stubs ","date_or_time to_time change "," jd "," Rational ","now utc_offset ","now sec ","now min ","now hour ","now to_date jd "," at ","now to_i ","now to_datetime "," raise ","(str \"\\n\") strip_heredoc "," simple_stubs stubbing "," in_block= "," travel_to ","Time  now ","Time  zone parse ","Time  zone "," in_block ","stubs stub_object ","Time  send ","stub original_method ","stubs stubbing ","options empty? ","args empty? "," simple_stubs stubbing s stubs stubbing _object "," simple_ simple_stubs  stub_object ","date_or_time to_time  to_date ","date_or_time midnight to_time  to_date ","date_or_time to_time change  to_date ","Time  zone parse  to_date "," simple_stubs stubbing s "," simple_ simple_stubs  ","Date  unstubs stubbing  ","Time  unstubs stubbing  ","Date  stubs stubbing s ","Date   simple_stubs  ","Time  stubs stubbing s ","Time   simple_stubs  ","date_or_time to_time  utc_offset ","date_or_time midnight to_time  utc_offset ","date_or_time to_time change  utc_offset ","Time  zone parse  utc_offset ","date_or_time to_time  sec ","date_or_time midnight to_time  sec ","date_or_time to_time change  sec ","Time  zone parse  sec ","date_or_time to_time  min ","date_or_time midnight to_time  min ","date_or_time to_time change  min ","Time  zone parse  min ","date_or_time to_time  hour ","date_or_time midnight to_time  hour ","date_or_time to_time change  hour ","Time  zone parse  hour ","date_or_time to_time  to_date jd ","date_or_time midnight to_time  to_date jd ","date_or_time to_time change  to_date jd ","Time  zone parse  to_date jd ","date_or_time to_time  to_i ","date_or_time midnight to_time  to_i ","date_or_time to_time change  to_i ","Time  zone parse  to_i ","date_or_time to_time  to_datetime ","date_or_time midnight to_time  to_datetime ","date_or_time to_time change  to_datetime ","Time  zone parse  to_datetime "," simple_stubs stubbing s stubs stubbing bing "," simple_ simple_stubs  stubbing ","Time  date_or_time to_time  ","Time  date_or_time midnight to_time  ","Time  date_or_time to_time change  ","Time  Time  zone parse  ","stubs stubbing s stubs stubbing _object "," simple_stubs  stub_object ","stubs stubbing  original_method ","stubs stubbing s stubs stubbing bing "," simple_stubs  stubbing "]}," ActiveSupport Testing TimeHelpers travel":{"type":"method","name":"travel","children":[],"call":[" travel_to ","Time  now + ","Time  now "]}," ActiveSupport Testing SimpleStubs unstub_object":{"type":"method","name":"unstub_object","children":[],"call":["singleton_class send ","stub original_method ","stub method_name ","stub object singleton_class ","stub object ","singleton_class undef_method ","singleton_class alias_method ","singleton_class silence_redefinition_of_method ","stub object singleton_class  send ","stub object stub object singleton_class  ","stub object singleton_class  undef_method ","stub object singleton_class  alias_method ","stub object singleton_class  silence_redefinition_of_method "]}," ActiveSupport Testing SimpleStubs unstub_all!":{"type":"method","name":"unstub_all!","children":[],"call":[" unstub_object ","@stubs each_value ","@stubs clear ","object_stubs each_value "]}," ActiveSupport Testing SimpleStubs stub_object":{"type":"method","name":"stub_object","children":[],"call":["object define_singleton_method ","object singleton_class send ","object singleton_class ","@stubs []= ","Stub  new "," unstub_object ","@stubs [] ","object object_id ","@stubs [] []= "," stubbing ","object singleton_class alias_method "," object_id ","@@stubs [] s []= ","@ stubbing s []= "," un@stubs [] _object "," un stubbing _object ","@@stubs [] s [] ","@ stubbing s [] ","@@stubs [] s [] []= ","@ stubbing s [] []= "," @stubs [] bing ","  stubbing bing "]}," ActiveSupport Testing SimpleStubs initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","Concurrent Map  new ","Hash  new "]}," ActiveSupport Subscriber add_event_subscriber":{"type":"method","name":"add_event_subscriber","children":[],"call":[" notifier subscribe "," subscriber "," namespace "," notifier ","(str \"start\") include? ","event to_s "," subscriber patterns << "," subscriber patterns "," subscriber patterns include? "," subscriber patterns []= "," pattern_subscribed? "," prepare_pattern "," invalid_event? "," subscriber  prepare_pattern s << "," subscriber  prepare_pattern s "," subscriber  prepare_pattern s include? "," subscriber  prepare_pattern s []= ","  prepare_pattern _subscribed? "," prepare_ prepare_pattern  "]}," ActiveSupport Subscriber method_added":{"type":"method","name":"method_added","children":[],"call":[" add_event_subscriber "," notifier "," public_method_defined? "]}," ActiveSupport PerThreadRegistry instance":{"type":"method","name":"instance","children":[],"call":[" new ","Thread  current [] ","Thread  current "]}," ActiveSupport PerThreadRegistry extended":{"type":"method","name":"extended","children":[],"call":[]}," ActiveSupport NumberHelper NumberToRoundedConverter zero?":{"type":"method","name":"zero?","children":[],"call":[" number to_d zero? "," number to_d "," number "," number zero? "," number respond_to? "]}," ActiveSupport NumberHelper NumberToRoundedConverter absolute_number":{"type":"method","name":"absolute_number","children":[],"call":["number to_d abs ","number to_d ","number abs ","number respond_to? "]}," ActiveSupport NumberHelper NumberToRoundedConverter format_number":{"type":"method","name":"format_number","children":[],"call":["number sub sub ","number sub ","Regexp  escape "," options [] "," options "," strip_insignificant_zeros "]}," ActiveSupport NumberHelper NumberToRoundedConverter strip_insignificant_zeros":{"type":"method","name":"strip_insignificant_zeros","children":[],"call":[" options [] "," options "]}," ActiveSupport NumberHelper NumberToRoundedConverter digit_count":{"type":"method","name":"digit_count","children":[],"call":["(send\n  (send\n    (const nil :Math) :log10\n    (send nil :absolute_number\n      (lvar :number))) :+\n  (int 1)) floor ","Math  log10 + ","Math  log10 "," absolute_number ","(send\n  (send\n    (const nil :Math) :log10\n    (send\n      (lvar :number) :abs)) :+\n  (int 1)) floor ","number abs ","number zero? "]}," ActiveSupport NumberHelper NumberToRoundedConverter calculate_rounded_number":{"type":"method","name":"calculate_rounded_number","children":[],"call":["(send\n  (send nil :number) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (lvar :multiplier) :to_f) :to_s))) round * ","(send\n  (send nil :number) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (lvar :multiplier) :to_f) :to_s))) round "," number / ","BigDecimal  new ","multiplier to_f to_s ","multiplier to_f "," number ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send nil :number) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (lvar :multiplier) :to_f) :to_s))) round to_f * ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send nil :number) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (lvar :multiplier) :to_f) :to_s))) round to_f ","(send\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send nil :number) :to_s)) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (lvar :multiplier) :to_f) :to_s))) round ","BigDecimal  new / "," number to_s "]}," ActiveSupport NumberHelper NumberToRoundedConverter digits_and_rounded_number":{"type":"method","name":"digits_and_rounded_number","children":[],"call":[" digit_count "," calculate_rounded_number ","10 ** ","digits - "," number "," zero? "," number zero? "," calculate_ calculate_rounded_number  "," digit_count  - "]}," ActiveSupport NumberHelper NumberToRoundedConverter convert":{"type":"method","name":"convert","children":[],"call":[" format_number ","NumberToDelimitedConverter  convert "," options ","(str \"%01.\") % ","a + + ","b [] ","a + ","s split ","rounded_number to_s + ","0 * ","rounded_number to_s ","rounded_number finite? ","BigDecimal  === ","rounded_number abs ","rounded_number zero? ","rounded_number to_i ","precision == "," number round "," number ","precision < "," digits_and_rounded_number ","precision > "," number to_d "," BigDecimal "," digit_count + "," digit_count "," number to_i "," number to_s "," options delete ","BigDecimal  new round to_f ","BigDecimal  new round ","BigDecimal  new "," Float ","(str \"%00.\") % ","a << ",". freeze ","s << ","0 freeze * ","0 freeze ","helper digit_count "," options [] ","helper round ","RoundingHelper  new ","rounded_number == ","rounded_number infinite? ","rounded_number nan? ","%f % ","b << ","precision != "," optionrounded_number to_s +  "," optionrounded_number to_s  ","(rounded_number to_s + tr \"%01.\") % ","(rounded_number to_s tr \"%01.\") % ","rounded_number to_s +  rounded_number to_s + plit ","rounded_number to_s  rounded_number to_s plit ","rounded_number to_rounded_number to_s +  + ","rounded_number to_rounded_number to_s  + ","rounded_number abs  to_s + ","rounded_number to_i  to_s + "," number round  to_s + ","BigDecimal  new round to_f  to_s + ","helper round  to_s + ","rounded_number to_rounded_number to_s +  ","rounded_number to_rounded_number to_s  ","rounded_number abs  to_s ","rounded_number to_i  to_s "," number round  to_s ","BigDecimal  new round to_f  to_s ","helper round  to_s ","rounded_number abs  finite? ","rounded_number to_i  finite? "," number round  finite? ","BigDecimal  new round to_f  finite? ","helper round  finite? ","rounded_number abrounded_number to_s +  ","rounded_number abrounded_number to_s  ","rounded_number abs  abs ","rounded_number to_i  abs "," number round  abs ","BigDecimal  new round to_f  abs ","helper round  abs ","rounded_number abs  zero? ","rounded_number to_i  zero? "," number round  zero? ","BigDecimal  new round to_f  zero? ","helper round  zero? ","rounded_number abs  to_i ","rounded_number to_i  to_i "," number round  to_i ","BigDecimal  new round to_f  to_i ","helper round  to_i ","precirounded_number to_s + ion == ","precirounded_number to_s ion == "," options delete  == "," options []  == ","precirounded_number to_s + ion < ","precirounded_number to_s ion < "," options delete  < "," options []  < "," digitrounded_number to_s + _and_rounded_number "," digitrounded_number to_s _and_rounded_number "," digits_and_rounded_number abs  "," digits_and_rounded_number to_i  "," digits_and_ number round  "," digits_and_BigDecimal  new round to_f  "," digits_and_helper round  "," helper digit_count _and_rounded_number ","precirounded_number to_s + ion > ","precirounded_number to_s ion > "," options delete  > "," options []  > "," number to_rounded_number to_s +  "," number to_rounded_number to_s  "," optionrounded_number to_s +  delete "," optionrounded_number to_s  delete ","(rounded_number to_s + tr \"%00.\") % ","(rounded_number to_s tr \"%00.\") % ","rounded_number to_s +  << ","rounded_number to_s  << ","RoundingHelper  new  digit_count "," optionrounded_number to_s +  [] "," optionrounded_number to_s  [] ","RoundingHelper  new  round ","rounded_number abs  == ","rounded_number to_i  == "," number round  == ","BigDecimal  new round to_f  == ","helper round  == ","rounded_number abs  infinite? ","rounded_number to_i  infinite? "," number round  infinite? ","BigDecimal  new round to_f  infinite? ","helper round  infinite? ","rounded_number abs  nan? ","rounded_number to_i  nan? "," number round  nan? ","BigDecimal  new round to_f  nan? ","helper round  nan? ","precirounded_number to_s + ion != ","precirounded_number to_s ion != "," options delete  != "," options []  != "]}," ActiveSupport NumberHelper NumberToPhoneConverter phone_ext":{"type":"method","name":"phone_ext","children":[],"call":["ext blank? "]}," ActiveSupport NumberHelper NumberToPhoneConverter country_code":{"type":"method","name":"country_code","children":[],"call":[" delimiter ","code blank? "]}," ActiveSupport NumberHelper NumberToPhoneConverter delimiter":{"type":"method","name":"delimiter","children":[],"call":[" opts [] "," opts "]}," ActiveSupport NumberHelper NumberToPhoneConverter start_with_delimiter?":{"type":"method","name":"start_with_delimiter?","children":[],"call":["number start_with? "," delimiter "," delimiter present? "]}," ActiveSupport NumberHelper NumberToPhoneConverter convert_without_area_code":{"type":"method","name":"convert_without_area_code","children":[],"call":["number slice! "," start_with_delimiter? ","number gsub! "," delimiter "," regexp_pattern "]}," ActiveSupport NumberHelper NumberToPhoneConverter convert_with_area_code":{"type":"method","name":"convert_with_area_code","children":[],"call":["number gsub! "," delimiter "," regexp_pattern "]}," ActiveSupport NumberHelper NumberToPhoneConverter convert_to_phone_number":{"type":"method","name":"convert_to_phone_number","children":[],"call":[" convert_without_area_code "," convert_with_area_code "," opts [] "," opts "]}," ActiveSupport NumberHelper NumberToPhoneConverter convert":{"type":"method","name":"convert","children":[],"call":["str << "," phone_ext "," opts [] "," opts "," convert_to_phone_number "," number to_s strip "," number to_s "," number "," country_code "," country_code dup "," country_code  << "," country_code dup  << "," number to_s  country_code ip "," number to_s  country_code dup ip "]}," ActiveSupport NumberHelper NumberToPercentageConverter convert":{"type":"method","name":"convert","children":[],"call":[" options [] gsub "," options [] "," options ","NumberToRoundedConverter  convert "," number ","%n freeze "]}," ActiveSupport NumberHelper NumberToHumanSizeConverter base":{"type":"method","name":"base","children":[],"call":[" opts [] == "," opts [] "," opts "]}," ActiveSupport NumberHelper NumberToHumanSizeConverter smaller_than_base?":{"type":"method","name":"smaller_than_base?","children":[],"call":[" number to_i < "," base "," number to_i "," number "," number to_i abs < "," number to_i abs "]}," ActiveSupport NumberHelper NumberToHumanSizeConverter exponent":{"type":"method","name":"exponent","children":[],"call":["exp > ","(send\n  (send\n    (const nil :Math) :log\n    (send nil :number)) :/\n  (send\n    (const nil :Math) :log\n    (send nil :base))) to_i ","Math  log / ","Math  log "," base "," number ","STORAGE_UNITS  size - ","STORAGE_UNITS  size ","(send\n  (send\n    (const nil :Math) :log\n    (send\n      (send nil :number) :abs)) :/\n  (send\n    (const nil :Math) :log\n    (send nil :base))) to_i "," number abs ","(send\n  (send\n    (const nil :Math) :log\n    (send nil :number)) :/\n  (send\n    (const nil :Math) :log\n    (send nil :base))) to_i  > ","(send\n  (send\n    (const nil :Math) :log\n    (send\n      (send nil :number) :abs)) :/\n  (send\n    (const nil :Math) :log\n    (send nil :base))) to_i  > "]}," ActiveSupport NumberHelper NumberToHumanSizeConverter storage_unit_key":{"type":"method","name":"storage_unit_key","children":[],"call":["STORAGE_UNITS  [] "," exponent "," smaller_than_base? "]}," ActiveSupport NumberHelper NumberToHumanSizeConverter unit":{"type":"method","name":"unit","children":[],"call":[" translate_number_value_with_default "," number to_i "," number "," options [] "," options "," storage_unit_key "]}," ActiveSupport NumberHelper NumberToHumanSizeConverter conversion_format":{"type":"method","name":"conversion_format","children":[],"call":[" translate_number_value_with_default "," options [] "," options "]}," ActiveSupport NumberHelper NumberToHumanSizeConverter convert":{"type":"method","name":"convert","children":[],"call":[" conversion_format gsub gsub "," unit "," conversion_format gsub "," conversion_format ","NumberToRoundedConverter  convert "," options "," number / "," base ** "," exponent "," base "," number "," number to_i to_s "," number to_i "," smaller_than_base? "," options []= "," options key? "," Float ","%u freeze ","%n freeze ","ActiveSupport Deprecation  warn "," opts key? "," opts "]}," ActiveSupport NumberHelper NumberToHumanConverter unit_exponents":{"type":"method","name":"unit_exponents","children":[],"call":["e -@ ","(send\n  (send\n    (case\n      (lvar :units)\n      (when\n        (const nil :Hash)\n        (lvar :units))\n      (when\n        (const nil :String)\n        (const nil :Symbol)\n        (send\n          (const nil :I18n) :translate\n          (send\n            (lvar :units) :to_s)\n          (hash\n            (pair\n              (sym :locale)\n              (send\n                (send nil :options) :[]\n                (sym :locale)))\n            (pair\n              (sym :raise)\n              (true)))))\n      (when\n        (nil)\n        (send nil :translate_in_locale\n          (str \"human.decimal_units.units\")\n          (hash\n            (pair\n              (sym :raise)\n              (true)))))\n      (send nil :raise\n        (const nil :ArgumentError)\n        (str \":units must be a Hash or String translation scope.\"))) :keys) :map) sort_by ","INVERTED_DECIMAL_UNITS  [] ","(lvar :units) keys map ","(lvar :units) keys "," raise "," translate_in_locale ","I18n  translate "," options [] "," options ","units to_s "]}," ActiveSupport NumberHelper NumberToHumanConverter calculate_exponent":{"type":"method","name":"calculate_exponent","children":[],"call":["exponent >= "," unit_exponents find "," unit_exponents ","Math  log10 floor ","Math  log10 "," number abs "," number "," number != ","Math  log10 floor  >= "," unit_Math  log10 floor s find "," unit_Math  log10 floor s "]}," ActiveSupport NumberHelper NumberToHumanConverter determine_unit":{"type":"method","name":"determine_unit","children":[],"call":[" translate_in_locale "," number to_i "," number ","I18n  translate "," options [] "," options ","units [] ","DECIMAL_UNITS  [] "]}," ActiveSupport NumberHelper NumberToHumanConverter format":{"type":"method","name":"format","children":[],"call":[" translate_in_locale "," options [] "," options "]}," ActiveSupport NumberHelper NumberToHumanConverter convert":{"type":"method","name":"convert","children":[],"call":[" format gsub gsub strip "," format gsub gsub "," format gsub "," format ","NumberToRoundedConverter  convert "," options "," number "," determine_unit "," number / ","10 ** "," calculate_exponent "," opts [] "," opts "," options []= "," options key? "," Float ","%u freeze ","%n freeze ","(lvasgn :rounded_number\n  (send\n    (const nil :NumberToRoundedConverter) :convert\n    (send nil :number)\n    (send nil :options))) != ","RoundingHelper  new round ","RoundingHelper  new "," determine_ determine_unit  "," calculate_ calculate_exponent  ","(lvasgn :NumberToRoundedConverter  convert \n  (send\n    (const nil :NumberToRoundedConverter) :convert\n    (send nil :number)\n    (send nil :options))) != "]}," ActiveSupport NumberHelper NumberToDelimitedConverter parts":{"type":"method","name":"parts","children":[],"call":["(lvar :left) compact "," options [] "," options ","left gsub! "," number to_s split "," number to_s "," number "," delimiter_pattern ",". freeze "]}," ActiveSupport NumberHelper NumberToDelimitedConverter convert":{"type":"method","name":"convert","children":[],"call":[" parts join "," options [] "," options "," parts "]}," ActiveSupport NumberHelper NumberToCurrencyConverter i18n_opts":{"type":"method","name":"i18n_opts","children":[],"call":["i18n [] "," i18n_format_options "," i18n_format_options  [] ","  i18n_format_options _format_options "]}," ActiveSupport NumberHelper NumberToCurrencyConverter options":{"type":"method","name":"options","children":[],"call":["defaults merge! "," opts ","defaults []= "," opts [] "," default_format_options merge "," i18n_opts "," default_format_options "," default_format_options merge  merge! "," default_format_options merge  []= "]}," ActiveSupport NumberHelper NumberToCurrencyConverter absolute_value":{"type":"method","name":"absolute_value","children":[],"call":["number sub ","number abs ","number respond_to? "]}," ActiveSupport NumberHelper NumberToCurrencyConverter is_negative?":{"type":"method","name":"is_negative?","children":[],"call":["number to_f phase != ","number to_f phase ","number to_f "]}," ActiveSupport NumberHelper NumberToCurrencyConverter convert":{"type":"method","name":"convert","children":[],"call":["format gsub gsub "," options [] "," options ","format gsub ","NumberToRoundedConverter  convert "," absolute_value "," is_negative? "," number to_s strip "," number to_s "," number ","%u freeze ","%n freeze ","number to_f negative? ","number to_f ","number < "," options [] == ","number_f abs ","number_f negative? ","number to_f > "," options [] != ","number sub! ","number_s sub! ","(send\n  (lvar :number_f) :*\n  (send\n    (int 10) :**\n    (send\n      (send nil :options) :[]\n      (sym :precision)))) >= ","number_f * ","10 ** "," valid_float? ","(send\n  (lvar :number_d) :*\n  (send\n    (int 10) :**\n    (send\n      (send nil :options) :[]\n      (sym :precision)))) >= ","number_d * ","number_d abs ","number_d negative? "," valid_bigdecimal "," options []  gsub gsub "," options []  gsub ","  absolute_value  to_s strip ","  number to_s strip  to_s strip "," number_f abs  to_s strip ","  absolute_value  to_s ","  number to_s strip  to_s "," number_f abs  to_s ","  absolute_value  ","  number to_s strip  "," number_f abs  "," absolute_value  to_f negative? "," number to_s strip  to_f negative? ","number_f abs  to_f negative? "," absolute_value  to_f "," number to_s strip  to_f ","number_f abs  to_f "," absolute_value  < "," number to_s strip  < ","number_f abs  < "," absolute_value _f abs "," number to_s strip _f abs ","number_f abs _f abs ","number to_f  abs ","number_f abs  abs "," valid_float?  abs "," absolute_value _f negative? "," number to_s strip _f negative? ","number_f abs _f negative? ","number to_f  negative? ","number_f abs  negative? "," valid_float?  negative? "," absolute_value  to_f > "," number to_s strip  to_f > ","number_f abs  to_f > "," absolute_value  sub! "," number to_s strip  sub! ","number_f abs  sub! "," absolute_value _s sub! "," number to_s strip _s sub! ","number_f abs _s sub! ","NumberToRoundedConverter  convert  sub! ","(send\n  (lvar : absolute_value _f) :*\n  (send\n    (int 10) :**\n    (send\n      (send nil :options) :[]\n      (sym :precision)))) >= ","(send\n  (lvar : number to_s strip _f) :*\n  (send\n    (int 10) :**\n    (send\n      (send nil :options) :[]\n      (sym :precision)))) >= ","(send\n  (lvar :number_f abs _f) :*\n  (send\n    (int 10) :**\n    (send\n      (send nil :options) :[]\n      (sym :precision)))) >= ","(send\n  (lvar :number to_f ) :*\n  (send\n    (int 10) :**\n    (send\n      (send nil :options) :[]\n      (sym :precision)))) >= ","(send\n  (lvar :number_f abs ) :*\n  (send\n    (int 10) :**\n    (send\n      (send nil :options) :[]\n      (sym :precision)))) >= ","(send\n  (lvar : valid_float? ) :*\n  (send\n    (int 10) :**\n    (send\n      (send nil :options) :[]\n      (sym :precision)))) >= "," absolute_value _f * "," number to_s strip _f * ","number_f abs _f * ","number to_f  * ","number_f abs  * "," valid_float?  * ","(send\n  (lvar : absolute_value _d) :*\n  (send\n    (int 10) :**\n    (send\n      (send nil :options) :[]\n      (sym :precision)))) >= ","(send\n  (lvar : number to_s strip _d) :*\n  (send\n    (int 10) :**\n    (send\n      (send nil :options) :[]\n      (sym :precision)))) >= ","(send\n  (lvar :number_f abs _d) :*\n  (send\n    (int 10) :**\n    (send\n      (send nil :options) :[]\n      (sym :precision)))) >= ","(send\n  (lvar :number_d abs ) :*\n  (send\n    (int 10) :**\n    (send\n      (send nil :options) :[]\n      (sym :precision)))) >= ","(send\n  (lvar : valid_bigdecimal ) :*\n  (send\n    (int 10) :**\n    (send\n      (send nil :options) :[]\n      (sym :precision)))) >= "," absolute_value _d * "," number to_s strip _d * ","number_f abs _d * ","number_d abs  * "," valid_bigdecimal  * "," absolute_value _d abs "," number to_s strip _d abs ","number_f abs _d abs ","number_d abs  abs "," valid_bigdecimal  abs "," absolute_value _d negative? "," number to_s strip _d negative? ","number_f abs _d negative? ","number_d abs  negative? "," valid_bigdecimal  negative? "]}," ActiveSupport NumberHelper NumberConverter valid_float?":{"type":"method","name":"valid_float?","children":[],"call":[" Float "," number "]}," ActiveSupport NumberHelper NumberConverter default_value":{"type":"method","name":"default_value","children":[],"call":["defaults [] ","k to_sym ","key split reduce ","key split "]}," ActiveSupport NumberHelper NumberConverter translate_in_locale":{"type":"method","name":"translate_in_locale","children":[],"call":[" translate_number_value_with_default ","(pair\n  (sym :locale)\n  (send\n    (send nil :options) :[]\n    (sym :locale))) merge "," options [] "," options "]}," ActiveSupport NumberHelper NumberConverter translate_number_value_with_default":{"type":"method","name":"translate_number_value_with_default","children":[],"call":["I18n  translate ","(pair\n  (sym :default)\n  (send nil :default_value\n    (lvar :key))) merge! "," default_value "]}," ActiveSupport NumberHelper NumberConverter i18n_format_options":{"type":"method","name":"i18n_format_options","children":[],"call":["options merge! ","I18n  translate "," namespace ","I18n  translate dup "," opts [] "," opts ","I18n  translate dup  merge! "]}," ActiveSupport NumberHelper NumberConverter default_format_options":{"type":"method","name":"default_format_options","children":[],"call":["options merge! ","DEFAULTS  [] [] ","DEFAULTS  [] "," namespace ","DEFAULTS  [] dup ","DEFAULTS  [] dup  merge! "]}," ActiveSupport NumberHelper NumberConverter format_options":{"type":"method","name":"format_options","children":[],"call":[" default_format_options merge! "," i18n_format_options "," default_format_options "]}," ActiveSupport NumberHelper NumberConverter options":{"type":"method","name":"options","children":[],"call":[" format_options merge "," opts "," format_options "]}," ActiveSupport NumberHelper NumberConverter execute":{"type":"method","name":"execute","children":[],"call":[" convert "," number "," valid_float? ! "," valid_float? "," validate_float? "," number ! "," valid_bigdecimal ! "," valid_bigdecimal "]}," ActiveSupport NumberHelper NumberConverter initialize":{"type":"method","name":"initialize","children":[],"call":["options symbolize_keys "]}," ActiveSupport NumberHelper NumberConverter convert":{"type":"method","name":"convert","children":[],"call":[]}," ActiveSupport Multibyte Unicode recode_windows1252_chars":{"type":"method","name":"recode_windows1252_chars","children":[],"call":["string encode "]}," ActiveSupport Multibyte Unicode Codepoint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport JSON Encoding const_missing":{"type":"method","name":"const_missing","children":[],"call":["ActiveSupport Deprecation  warn ","name == "]}," ActiveSupport JSON Encoding encode_big_decimal_as_string":{"type":"method","name":"encode_big_decimal_as_string","children":[],"call":["ActiveSupport Deprecation  warn "]}," ActiveSupport JSON Encoding encode_big_decimal_as_string=":{"type":"method","name":"encode_big_decimal_as_string=","children":[],"call":[" raise "]}," ActiveSupport JSON Encoding JSONGemEncoder stringify":{"type":"method","name":"stringify","children":[],"call":[" JSON  generate "]}," ActiveSupport JSON Encoding JSONGemEncoder jsonify":{"type":"method","name":"jsonify","children":[],"call":[" jsonify ","value as_json ","value map ","Hash  [] ","EscapedString  new ","result []= ","value each ","k to_s ","String  === ","Symbol  === ","k to_s  to_s "]}," ActiveSupport JSON Encoding JSONGemEncoder EscapedString to_json":{"type":"method","name":"to_json","children":[],"call":[" gsub ","Encoding  escape_html_entities_in_json ","s gsub! "]}," ActiveSupport JSON Encoding JSONGemEncoder encode":{"type":"method","name":"encode","children":[],"call":[" stringify "," jsonify ","value as_json "," options dup "," options ","json gsub! ","Encoding  escape_html_entities_in_json "," options empty? ","  stringify ify ","value as_ stringify  ","value as_json  as_json "," stringify  gsub! ","Encoding  escape_html_entities_in_ stringify  "]}," ActiveSupport JSON Encoding JSONGemEncoder initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport gem_version":{"type":"method","name":"gem_version","children":[],"call":[]}," ActiveSupport Dependencies ModuleConstMissing guess_for_anonymous":{"type":"method","name":"guess_for_anonymous","children":[],"call":[" raise ","Object  const_defined? ","NameError  new "]}," Time middle_of_day":{"type":"method","name":"middle_of_day","children":[],"call":[" change "]}," ActiveSupport SafeBuffer html_escape_interpolated_argument":{"type":"method","name":"html_escape_interpolated_argument","children":[],"call":["ERB Util  h ","arg html_safe? "," html_safe? ! "," html_safe? ","arg to_s gsub ","arg to_s ","CGI  escapeHTML "]}," String remove!":{"type":"method","name":"remove!","children":[],"call":[" gsub! ","patterns each "]}," String remove":{"type":"method","name":"remove","children":[],"call":[" gsub "," dup remove! "," dup "]}," Status as_json":{"type":"method","name":"as_json","children":[],"call":[" pid "," exitstatus "]}," to_json_with_active_support_encoder":{"type":"method","name":"to_json_with_active_support_encoder","children":[],"call":["ActiveSupport JSON  encode "," to_json_without_active_support_encoder ","options is_a? "]}," Object presence_in":{"type":"method","name":"presence_in","children":[],"call":[" in? "]}," Numeric in_milliseconds":{"type":"method","name":"in_milliseconds","children":[],"call":[" * "]}," Module methods_transplantable?":{"type":"method","name":"methods_transplantable?","children":[{"type":"method","name":"foo","children":[],"asgn":[],"call":[]}],"call":[" define_method ","x instance_method ","Module  new "]}," Module Concerning concern":{"type":"method","name":"concern","children":[],"call":[" const_set "," module_eval "," extend ","Module  new "]}," Module Concerning concerning":{"type":"method","name":"concerning","children":[],"call":[" include "," concern "," __send__ "]}," Hash compact!":{"type":"method","name":"compact!","children":[],"call":["value nil? "," reject! "]}," Hash compact":{"type":"method","name":"compact","children":[],"call":["value nil? ! ","value nil? "," select "]}," DateTime middle_of_day":{"type":"method","name":"middle_of_day","children":[],"call":[" change "]}," DateAndTime Zones time_with_zone":{"type":"method","name":"time_with_zone","children":[],"call":["ActiveSupport TimeWithZone  new "," to_time ","time getutc ","time utc? "]}," DateAndTime Zones in_time_zone":{"type":"method","name":"in_time_zone","children":[],"call":[" to_time "," time_with_zone "," acts_like? "," Time  find_zone! "]}," DateAndTime Calculations all_year":{"type":"method","name":"all_year","children":[],"call":[" end_of_year "," beginning_of_year "]}," DateAndTime Calculations all_quarter":{"type":"method","name":"all_quarter","children":[],"call":[" end_of_quarter "," beginning_of_quarter "]}," DateAndTime Calculations all_month":{"type":"method","name":"all_month","children":[],"call":[" end_of_month "," beginning_of_month "]}," DateAndTime Calculations all_week":{"type":"method","name":"all_week","children":[],"call":[" end_of_week "," beginning_of_week "]}," Date middle_of_day":{"type":"method","name":"middle_of_day","children":[],"call":[" in_time_zone middle_of_day "," in_time_zone "]}," ActiveSupport Concern MultipleIncludedBlocks initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Callbacks ClassMethods set_callbacks":{"type":"method","name":"set_callbacks","children":[],"call":[" send "," __callbacks= "," __callbacks merge ","name to_sym "," __callbacks "," __callbacks []= "," __callbacks dup "," singleton_class method_defined? "," singleton_class "]}," ActiveSupport Callbacks ClassMethods get_callbacks":{"type":"method","name":"get_callbacks","children":[],"call":[" send "," __callbacks [] ","name to_sym "," __callbacks "]}," ActiveSupport Callbacks ClassMethods normalize_callback_params":{"type":"method","name":"normalize_callback_params","children":[],"call":["options dup ","filters unshift ","filters extract_options! ","filters shift ","CALLBACK_FILTER_TYPES  include? ","filters first ","filters extract_options!  dup ","filters extract_filters extract_options! ! "]}," ActiveSupport Callbacks CallbackChain chain":{"type":"method","name":"chain","children":[],"call":[]}," ActiveSupport Callbacks CallbackChain initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["Mutex  new ","other chain dup ","other chain "]}," ActiveSupport Callbacks CallbackChain clear":{"type":"method","name":"clear","children":[],"call":["@chain clear ","@single_callbacks clear "]}," ActiveSupport Callbacks CallbackChain insert":{"type":"method","name":"insert","children":[],"call":["@chain insert ","@single_callbacks clear "]}," ActiveSupport Callbacks CallbackChain empty?":{"type":"method","name":"empty?","children":[],"call":["@chain empty? "]}," ActiveSupport Callbacks CallbackChain index":{"type":"method","name":"index","children":[],"call":["@chain index "]}," ActiveSupport Callbacks CallbackChain each":{"type":"method","name":"each","children":[],"call":["@chain each "]}," ActiveSupport Callbacks Callback conditions_lambdas":{"type":"method","name":"conditions_lambdas","children":[],"call":["(send\n  (ivar :@if) :map) + "," invert_lambda "," make_lambda ","@unless map ","@if map ","CallTemplate  build inverted_lambda ","CallTemplate  build ","CallTemplate  build make_lambda "]}," ActiveSupport Callbacks Callback compute_identifier":{"type":"method","name":"compute_identifier","children":[],"call":["filter object_id "]}," ActiveSupport Callbacks Callback make_lambda":{"type":"method","name":"make_lambda","children":[],"call":["filter public_send "," lambda ","(send\n  (lvar :scopes) :map) join "," public_send ","scopes map "," Array "," chain_config [] "," chain_config ","target instance_exec ","filter arity <= ","filter arity "," raise ","filter arity > "," eval ","target send ","fi eval ter pub eval ic_send ","  eval ambda ","(send\n  (lvar : Array ) :map) join ","(send\n  ( eval var :scopes) :map) join "," pub eval ic_send "," Array  map ","fi eval ter arity <= ","fi eval ter arity ","fi eval ter arity > "," eva eval  "]}," ActiveSupport Callbacks Callback invert_lambda":{"type":"method","name":"invert_lambda","children":[],"call":["l call ! ","l call "," lambda "]}," ActiveSupport Callbacks Callback merge":{"type":"method","name":"merge","children":[],"call":[" class build "," class ","options [] concat "," Array ","new_options fetch ","options [] ","@unless dup ","@if dup "]}," ActiveSupport Callbacks Callback raw_filter":{"type":"method","name":"raw_filter","children":[],"call":[]}," ActiveSupport Callbacks Callback filter":{"type":"method","name":"filter","children":[],"call":[]}," ActiveSupport Callbacks Callback build":{"type":"method","name":"build","children":[],"call":[]}," ActiveSupport Callbacks Filters Around simple":{"type":"method","name":"simple","children":[],"call":[]}," ActiveSupport Callbacks Filters Around conditional":{"type":"method","name":"conditional","children":[],"call":[]}," ActiveSupport Callbacks Filters Around halting":{"type":"method","name":"halting","children":[],"call":[]}," ActiveSupport Callbacks Filters Around halting_and_conditional":{"type":"method","name":"halting_and_conditional","children":[],"call":[]}," ActiveSupport Callbacks Filters Around build":{"type":"method","name":"build","children":[],"call":[]}," ActiveSupport Callbacks Filters After simple":{"type":"method","name":"simple","children":[],"call":[]}," ActiveSupport Callbacks Filters After conditional":{"type":"method","name":"conditional","children":[],"call":[]}," ActiveSupport Callbacks Filters After halting":{"type":"method","name":"halting","children":[],"call":[]}," ActiveSupport Callbacks Filters After halting_and_conditional":{"type":"method","name":"halting_and_conditional","children":[],"call":[]}," ActiveSupport Callbacks Filters After build":{"type":"method","name":"build","children":[],"call":[]}," ActiveSupport Callbacks Filters Before simple":{"type":"method","name":"simple","children":[],"call":[]}," ActiveSupport Callbacks Filters Before conditional":{"type":"method","name":"conditional","children":[],"call":[]}," ActiveSupport Callbacks Filters Before halting":{"type":"method","name":"halting","children":[],"call":[]}," ActiveSupport Callbacks Filters Before halting_and_conditional":{"type":"method","name":"halting_and_conditional","children":[],"call":[]}," ActiveSupport Callbacks Filters Before build":{"type":"method","name":"build","children":[],"call":[]}," ActiveSupport Callbacks Filters End call":{"type":"method","name":"call","children":[],"call":["env value= ","block call ","block ! ","env halted ! ","env halted ","env run_block ","env run_block  call ","env run_block  ! ","env run_env run_block  "]}," ActiveSupport Callbacks Conditionals Value call":{"type":"method","name":"call","children":[],"call":["@block call "]}," ActiveSupport Callbacks Conditionals Value initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Cache Store fetch_multi":{"type":"method","name":"fetch_multi","children":[],"call":[" write ","results fetch ","names map "," read_multi "," merged_options ","names extract_options! ","memo []= ","names each_with_object "," raise "," block_given? "," write_multi ","results []= ","writes []= ","(send\n  (lvar :names) :-\n  (send\n    (lvar :results) :keys)) each ","names - ","results keys ","payload []= "," read_multi_entries tap "," read_multi_entries "," instrument "," read_multi tap ","reads keys ","hash []= ","reads fetch ","names index_with ","writes compact! ","options [] "," instrument_multi ","names empty? "," read_multi  fetch "," merged_ merged_options  "," merged_names extract_options!  ","names extract_ merged_options ! ","names extract_names extract_options! ! "," read_multi  []= ","(send\n  (lvar :names) :-\n  (send\n    (lvar : read_multi ) :keys)) each "," read_multi  keys "," read_multi_entries  keys "," read_multi_entries  fetch "," merged_options  [] ","names extract_options!  [] "]}," ActiveSupport Cache FileStore modify_value":{"type":"method","name":"modify_value","children":[],"call":[" write ","num to_i + ","num to_i "," read "," merged_options "," lock_file "," key_file_path "," namespaced_key "," normalize_key "," Integer ","num to_i +  to_i + "," read  to_i + ","num to_i +  to_i "," read  to_i "," merged_ merged_options  "]}," Object present_in":{"type":"method","name":"present_in","children":[],"call":[" in? "]}," ActiveSupport TimeZone periods_for_local":{"type":"method","name":"periods_for_local","children":[],"call":[" tzinfo periods_for_local "," tzinfo "]}," ActiveSupport TimeZone yesterday":{"type":"method","name":"yesterday","children":[],"call":[" today - "," today "]}," ActiveSupport TimeZone tomorrow":{"type":"method","name":"tomorrow","children":[],"call":[" today + "," today "]}," ActiveSupport Duration eql?":{"type":"method","name":"eql?","children":[],"call":[" == ","other is_a? ","other value eql? "," value ","other value ","Duration  === "]}," Method duplicable?":{"type":"method","name":"duplicable?","children":[],"call":[]}," ActiveSupport Callbacks CallbackSequence call":{"type":"method","name":"call","children":[],"call":["a call ","@after each ","@call call ","b call ","@before each "]}," ActiveSupport Callbacks CallbackSequence around":{"type":"method","name":"around","children":[],"call":[" call ","around call ","CallbackSequence  new "]}," ActiveSupport Callbacks CallbackSequence after":{"type":"method","name":"after","children":[],"call":["@after push "]}," ActiveSupport Callbacks CallbackSequence before":{"type":"method","name":"before","children":[],"call":["@before unshift "]}," ActiveSupport Callbacks CallbackSequence initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport JSON Encoding JSONGemEncoder EscapedString to_s":{"type":"method","name":"to_s","children":[],"call":[]}," LoggerSilence level":{"type":"method","name":"level","children":[],"call":[" local_levels [] "," local_log_id "," local_levels "]}," LoggerSilence local_log_id":{"type":"method","name":"local_log_id","children":[],"call":["Thread  current __id__ ","Thread  current "]}," LoggerSilence after_initialize":{"type":"method","name":"after_initialize","children":[],"call":["ThreadSafe Cache  new ","Concurrent Map  new "]}," ActiveSupport Logger add":{"type":"method","name":"add","children":[],"call":["(or\n  (lvar :severity)\n  (const nil :UNKNOWN)) < "," level ","@logdev nil? "]}," ActiveSupport test_order":{"type":"method","name":"test_order","children":[],"call":[]}," ActiveSupport test_order=":{"type":"method","name":"test_order=","children":[],"call":[]}," ActiveSupport TestCase test_order=":{"type":"method","name":"test_order=","children":[],"call":["ActiveSupport  test_order= "]}," ActiveSupport MessageVerifier decode":{"type":"method","name":"decode","children":[],"call":[" Base64  strict_decode64 "]}," ActiveSupport MessageVerifier encode":{"type":"method","name":"encode","children":[],"call":[" Base64  strict_encode64 "]}," ActiveSupport Duration respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["@value respond_to? "," value respond_to? "," value "]}," ActiveSupport Duration hash":{"type":"method","name":"hash","children":[],"call":["@value hash "]}," ActiveSupport Duration to_s":{"type":"method","name":"to_s","children":[],"call":["@value to_s "]}," ActiveSupport Duration instance_of?":{"type":"method","name":"instance_of?","children":[],"call":[" value instance_of? "," value ","Duration  == "]}," ActiveSupport SafeBuffer prepend!":{"type":"method","name":"prepend!","children":[],"call":[" prepend ","ActiveSupport Deprecation  deprecation_warning "]}," ActiveSupport SafeBuffer prepend":{"type":"method","name":"prepend","children":[],"call":[" html_escape_interpolated_argument "," implicit_html_escape_interpolated_argument "]}," ERB Util unwrapped_html_escape":{"type":"method","name":"unwrapped_html_escape","children":[],"call":["s gsub ","s html_safe? ","s to_s ","CGI  escapeHTML ","ActiveSupport Multibyte Unicode  tidy_bytes ","ActiveSupport Multibyte Unicode  tidy_bytes gsub ","s to_s  gs to_s ub ","s to_s  html_s to_s afe? ","s to_s  to_s to_s  ","CGI  es to_s capeHTML ","ActiveSupport Multibyte Unicode  tidy_bytes to_s  ","ActiveSupport Multibyte Unicode  tidy_bytes to_s  gs to_s ub "]}," String truncate_words":{"type":"method","name":"truncate_words","children":[],"call":[" dup ","1 + ","options [] "," =~ ","words_count - ","Regexp  escape ","sep to_s ","Regexp  === ","Regexp  escape  to_s "]}," Object itself":{"type":"method","name":"itself","children":[],"call":[]}," Kernel concern":{"type":"method","name":"concern","children":[],"call":["Object  concern "]}," Hash transform_values!":{"type":"method","name":"transform_values!","children":[],"call":[" []= "," each "," enum_for "," block_given? "," size "]}," Hash transform_values":{"type":"method","name":"transform_values","children":[],"call":["result []= "," each "," class new "," class "," enum_for "," block_given? "," empty? "," size "," class new  []= "]}," ActiveSupport Concern class_methods":{"type":"method","name":"class_methods","children":[],"call":["mod module_eval "," const_set ","Module  new "," const_get "," const_defined? "," const_set   const_set ule_eval "," const_get   const_get ule_eval "]}," ActiveSupport Callbacks _run_callbacks":{"type":"method","name":"_run_callbacks","children":[],"call":["runner call value ","runner call ","Filters Environment  new ","callbacks compile ","block call ","callbacks empty? ","runnFilters Environment  new r call valuFilters Environment  new  ","callbacks compile  call value ","runnFilters Environment  new r call ","callbacks compile  call ","FiltFilters Environment  new rs EnvironmFilters Environment  new nt  nFilters Environment  new w ","callbacks compilFilters Environment  new  ","callbacks Filters Environment  new mpty? "]}," ActiveSupport Cache Strategy LocalCache set_cache_value":{"type":"method","name":"set_cache_value","children":[],"call":[" local_cache delete "," local_cache "," local_cache write "," local_cache mute "," write_cache_value ","ActiveSupport Deprecation  warn ","(str \"              `set_cache_value` is deprecated and will be removed from Rails 5.1.\\n\") strip_heredoc "]}," ActiveSupport to_time_preserves_timezone=":{"type":"method","name":"to_time_preserves_timezone=","children":[],"call":[]}," ActiveSupport to_time_preserves_timezone":{"type":"method","name":"to_time_preserves_timezone","children":[],"call":[]}," ActiveSupport TimeZone init_with":{"type":"method","name":"init_with","children":[],"call":[" initialize ","coder [] "]}," ActiveSupport TimeWithZone init_with":{"type":"method","name":"init_with","children":[],"call":[" initialize ","coder [] "]}," ActiveSupport MessageEncryptor key_len":{"type":"method","name":"key_len","children":[],"call":[" default_cipher "]}," ActiveSupport LoggerThreadSafeLevel level":{"type":"method","name":"level","children":[],"call":[" local_level "]}," ActiveSupport LoggerThreadSafeLevel local_level=":{"type":"method","name":"local_level=","children":[],"call":["@local_levels delete "," local_log_id ","@local_levels []= "," class local_levels delete "," class local_levels "," class "," class local_levels []= "," raise ","level inspect ","Logger Severity  const_get ","level to_s upcase ","level to_s ","IsolatedExecutionState  []= ","Thread  current []= ","Thread  current "," local_level_key ","IsolatedExecutionState  delete ","level nil? ","@local_Logger Severity  const_get s delete ","@local_Logger Severity  const_get s []= "," class local_Logger Severity  const_get s delete "," class local_Logger Severity  const_get s "," class local_Logger Severity  const_get s []= ","Logger Severity  const_get  inspect ","Logger Severity  const_get  to_s upcase ","Logger Severity  const_get  to_s "," local_Logger Severity  const_get _key ","Logger Severity  const_get  nil? "]}," ActiveSupport LoggerThreadSafeLevel local_level":{"type":"method","name":"local_level","children":[],"call":["@local_levels [] "," local_log_id "," class local_levels [] "," class local_levels "," class ","IsolatedExecutionState  [] ","Thread  current [] ","Thread  current "," local_level_key "]}," ActiveSupport LoggerThreadSafeLevel local_log_id":{"type":"method","name":"local_log_id","children":[],"call":["Thread  current __id__ ","Thread  current ","Fiber  current __id__ ","Fiber  current "]}," ActiveSupport LoggerThreadSafeLevel after_initialize":{"type":"method","name":"after_initialize","children":[],"call":["ThreadSafe Cache  new ","Concurrent Map  new ","ActiveSupport Deprecation  warn "]}," ActiveSupport Logger logger_outputs_to?":{"type":"method","name":"logger_outputs_to?","children":[],"call":[]}," ActiveSupport HashWithIndifferentAccess set_defaults":{"type":"method","name":"set_defaults","children":[],"call":["target default= "," default ","target default_proc= "," default_proc dup "," default_proc "]}," ActiveSupport HashWithIndifferentAccess compact":{"type":"method","name":"compact","children":[],"call":[" dup tap "," dup "," dup compact! "]}," ActiveSupport HashWithIndifferentAccess transform_values":{"type":"method","name":"transform_values","children":[],"call":["hash transform_values! "," dup tap "," dup "," to_enum "," block_given? "]}," ActiveSupport Duration to_i":{"type":"method","name":"to_i","children":[],"call":["@value to_i "]}," Time sec_fraction":{"type":"method","name":"sec_fraction","children":[],"call":[" subsec "]}," Array sum":{"type":"method","name":"sum","children":[],"call":[" orig_sum "," first is_a? "," first ","init is_a? "]}," DateTime localtime":{"type":"method","name":"localtime","children":[],"call":["Time  utc getlocal ","Time  utc ","utc sec + ","utc sec_fraction ","utc sec ","utc min ","utc hour ","utc day ","utc month ","utc year "," new_offset ","Time   new_offset  getlocal ","Time   new_offset  "," new_offset  sec + "," new_offset  sec_fraction "," new_offset  sec "," new_offset  min "," new_offset  hour "," new_offset  day "," new_offset  month "," new_offset  year "]}," DateTime subsec":{"type":"method","name":"subsec","children":[],"call":[" sec_fraction "]}," ActiveSupport Callbacks __run_callbacks__":{"type":"method","name":"__run_callbacks__","children":[],"call":["runner call value ","runner call ","Filters Environment  new ","callbacks compile "," block_given? ","callbacks empty? ","runnFilters Environment  new r call valuFilters Environment  new  ","callbacks compile  call value ","runnFilters Environment  new r call ","callbacks compile  call ","FiltFilters Environment  new rs EnvironmFilters Environment  new nt  nFilters Environment  new w ","callbacks compilFilters Environment  new  "," block_givFilters Environment  new n? ","callbacks Filters Environment  new mpty? "]}," DateAndTime Compatibility included":{"type":"method","name":"included","children":[{"type":"method","name":"to_time","children":[],"asgn":[null,null],"call":[" getlocal "," getlocal "," utc_offset "," preserve_timezone "]}],"call":[]}," ActiveSupport halt_callback_chains_on_return_false=":{"type":"method","name":"halt_callback_chains_on_return_false=","children":[],"call":[]}," ActiveSupport halt_callback_chains_on_return_false":{"type":"method","name":"halt_callback_chains_on_return_false","children":[],"call":[]}," ActiveSupport TimeZone parts_to_time":{"type":"method","name":"parts_to_time","children":[],"call":["TimeWithZone  new ","time utc ","parts [] ","Time  new ","parts fetch ","parts fetch + ","now day ","now month ","now year ","parts empty? "," raise ","parts nil? ","Time  at ","Time  new  utc ","Time  at  utc "]}," ActiveSupport TimeZone encode_with":{"type":"method","name":"encode_with","children":[],"call":["coder map= "," tzinfo name "," tzinfo ","coder tag= "," class "]}," ActiveSupport TimeZone strptime":{"type":"method","name":"strptime","children":[],"call":[" parts_to_time ","DateTime  _strptime "]}," ActiveSupport TimeZone country_zones":{"type":"method","name":"country_zones","children":[],"call":["(send\n  (send\n    (send\n      (const\n        (const nil :TZInfo) :Country) :get\n      (lvar :code)) :zone_identifiers) :map) compact sort! ","(send\n  (send\n    (send\n      (const\n        (const nil :TZInfo) :Country) :get\n      (lvar :code)) :zone_identifiers) :map) compact "," [] ","MAPPING  key ","TZInfo Country  get zone_identifiers map ","TZInfo Country  get zone_identifiers ","TZInfo Country  get ","@country_zones [] ","country_code to_s upcase ","country_code to_s "," load_country_zones ","(send\n  (send\n    (send\n      (const\n        (const nil :TZInfo) :Country) :get\n      (lvar :country_code to_s upcase )) :zone_identifiers) :map) compact sort! ","(send\n  (send\n    (send\n      (const\n        (const nil :TZInfo) :Country) :get\n      (lvar :country_code to_s upcase )) :zone_identifiers) :map) compact ","country_country_code to_s upcase  to_s upcase ","country_country_code to_s upcase  to_s "]}," ActiveSupport TimeWithZone blank?":{"type":"method","name":"blank?","children":[],"call":[]}," ActiveSupport Testing Stream capture":{"type":"method","name":"capture","children":[],"call":["stream_io reopen ","captured_stream unlink ","captured_stream close ","captured_stream read ","stream_io rewind ","stream_io dup "," eval ","Tempfile  new ","stream to_s "," binding "," eval  reopen ","stream to_s _io reopen ","Tempfile  new  unlink ","captured_stream to_s  unlink ","Tempfile  new  close ","captured_stream to_s  close ","Tempfile  new  read ","captured_stream to_s  read "," eval  rewind ","stream to_s _io rewind "," eval  dup ","stream to_s _io dup ","stream to_s  to_s "]}," ActiveSupport Testing Stream quietly":{"type":"method","name":"quietly","children":[],"call":[" silence_stream "]}," ActiveSupport Testing Stream silence_stream":{"type":"method","name":"silence_stream","children":[],"call":["old_stream close ","stream reopen ","stream sync= ","stream dup ","stream dup  close "]}," ActiveSupport Testing MethodCallAssertions stub_any_instance":{"type":"method","name":"stub_any_instance","children":[],"call":["klass stub "]}," ActiveSupport Testing MethodCallAssertions assert_not_called":{"type":"method","name":"assert_not_called","children":[],"call":[" assert_called "]}," ActiveSupport Testing MethodCallAssertions assert_called_with":{"type":"method","name":"assert_called_with","children":[],"call":["mock verify ","object stub ","mock expect ","args each ","arg is_a? ","args all? ","Minitest Mock  new "," assert_mock "," expect_called_with ","Minitest Mock  new  verify ","Minitest Mock  new  expect "," assert_Minitest Mock  new  "]}," ActiveSupport Testing MethodCallAssertions assert_called":{"type":"method","name":"assert_called","children":[],"call":[" assert_equal ","object stub "," proc "]}," ActiveSupport Testing FileFixtures file_fixture":{"type":"method","name":"file_fixture","children":[],"call":[" raise ","msg % "," file_fixture_path ","path exist? ","Pathname  new ","File  join "," file_fixture_Pathname  new  ","Pathname  new  exist? "]}," ActiveSupport Rescuable ClassMethods constantize_rescue_handler_class":{"type":"method","name":"constantize_rescue_handler_class","children":[],"call":["class_or_name safe_constantize "," const_get "]}," ActiveSupport Rescuable ClassMethods find_rescue_handler":{"type":"method","name":"find_rescue_handler","children":[],"call":[" find_rescue_handler ","exception cause ","klass === "," constantize_rescue_handler_class "," rescue_handlers reverse_each detect "," rescue_handlers reverse_each "," rescue_handlers "," constantize_rescue_handler_class  === "]}," ActiveSupport Rescuable ClassMethods handler_for_rescue":{"type":"method","name":"handler_for_rescue","children":[],"call":["object instance_exec "," lambda ","rescuer arity == ","rescuer arity ","method call ","method arity == ","method arity ","object method "," find_rescue_handler "," find_rescue_handler  arity == "," find_rescue_handler  arity ","object method  call ","object method  arity == ","object method  arity ","object object method  "]}," ActiveSupport Rescuable ClassMethods rescue_with_handler":{"type":"method","name":"rescue_with_handler","children":[],"call":["handler call "," handler_for_rescue "," rescue_with_handler ","exception cause ","visited_exceptions include? ","visited_exceptions << "," handler_for_rescue  call ","  handler_for_rescue _for_rescue "," rescue_with_ handler_for_rescue  "]}," ActiveSupport Reloader complete!":{"type":"method","name":"complete!","children":[],"call":[" release_unload_lock! "," class reloaded! "," class "]}," ActiveSupport Reloader class_unload!":{"type":"method","name":"class_unload!","children":[],"call":[" run_callbacks "," require_unload_lock! "]}," ActiveSupport Reloader run!":{"type":"method","name":"run!","children":[],"call":[" release_unload_lock! "]}," ActiveSupport Reloader release_unload_lock!":{"type":"method","name":"release_unload_lock!","children":[],"call":["ActiveSupport Dependencies  interlock done_unloading ","ActiveSupport Dependencies  interlock "]}," ActiveSupport Reloader require_unload_lock!":{"type":"method","name":"require_unload_lock!","children":[],"call":["ActiveSupport Dependencies  interlock start_unloading ","ActiveSupport Dependencies  interlock "]}," ActiveSupport Reloader initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Reloader prepare!":{"type":"method","name":"prepare!","children":[],"call":[]}," ActiveSupport Reloader reloaded!":{"type":"method","name":"reloaded!","children":[],"call":[]}," ActiveSupport Reloader check!":{"type":"method","name":"check!","children":[],"call":[]}," ActiveSupport Reloader wrap":{"type":"method","name":"wrap","children":[],"call":[]}," ActiveSupport Reloader reload!":{"type":"method","name":"reload!","children":[],"call":[]}," ActiveSupport Reloader after_class_unload":{"type":"method","name":"after_class_unload","children":[],"call":[]}," ActiveSupport Reloader before_class_unload":{"type":"method","name":"before_class_unload","children":[],"call":[]}," ActiveSupport Reloader to_prepare":{"type":"method","name":"to_prepare","children":[],"call":[]}," ActiveSupport NumberHelper NumberToPhoneConverter regexp_pattern":{"type":"method","name":"regexp_pattern","children":[],"call":[" opts fetch "," opts "]}," ActiveSupport NumberHelper NumberToDelimitedConverter delimiter_pattern":{"type":"method","name":"delimiter_pattern","children":[],"call":[" options fetch "," options "]}," ActiveSupport Notifications Instrumenter finish_with_state":{"type":"method","name":"finish_with_state","children":[],"call":["@notifier finish "]}," ActiveSupport MessageVerifier verified":{"type":"method","name":"verified","children":[],"call":[" raise ","argument_error message =~ ","argument_error message ","@serializer load "," decode ","signed_message split [] ","signed_message split ","-- freeze "," valid_message? ","argument_error message include? ","Messages Metadata  verify "," digest_matches_data? "," get_data_and_digest_from "," read_message "," catch_and_ignore "," catch_and_raise ","argument_error Messages Metadata  verify  =~ ","argument_error Messages Metadata  verify  ","signed_Messages Metadata  verify  split [] ","signed_Messages Metadata  verify  split "," valid_Messages Metadata  verify ? ","argument_error Messages Metadata  verify  include? ","Messages Metasigned_message split []   verify "," digest_matches_signed_message split [] ? "," get_signed_message split [] _and_digest_from "," read_Messages Metadata  verify  "]}," ActiveSupport MessageVerifier valid_message?":{"type":"method","name":"valid_message?","children":[],"call":["ActiveSupport SecurityUtils  secure_compare "," generate_digest ","digest present? ","data present? ","signed_message split ","-- freeze ","signed_message blank? ","signed_message valid_encoding? ! ","signed_message valid_encoding? ","signed_message nil? "," digest_matches_data? "," get_data_and_digest_from ","(send nil :catch_and_ignore\n  (sym :invalid_message_format)) ! ! ","(send nil :catch_and_ignore\n  (sym :invalid_message_format)) ! "," extract_encoded "," catch_and_ignore "]}," ActiveSupport Inflector upcase_first":{"type":"method","name":"upcase_first","children":[],"call":["string [] upcase concat ","string [] ","string [] upcase ","string length > ","string length "," +@ "]}," ActiveSupport Inflector Inflections Uncountables to_regex":{"type":"method","name":"to_regex","children":[],"call":[" Regexp  escape "]}," ActiveSupport Inflector Inflections Uncountables uncountable?":{"type":"method","name":"uncountable?","children":[],"call":["regex === ","@regex_array any? ","regex match? "]}," ActiveSupport Inflector Inflections Uncountables add":{"type":"method","name":"add","children":[],"call":[" to_regex "," map "," concat ","words flatten map ","words flatten ","words map ","words flatten map  flatten map ","words flatten map  flatten ","words flatten map  map "]}," ActiveSupport Inflector Inflections Uncountables <<":{"type":"method","name":"<<","children":[],"call":[" add "]}," ActiveSupport Inflector Inflections Uncountables delete":{"type":"method","name":"delete","children":[],"call":["@regex_array delete "," to_regex "]}," ActiveSupport Inflector Inflections Uncountables initialize":{"type":"method","name":"initialize","children":[],"call":[]}," I18n Railtie watched_dirs_with_extensions":{"type":"method","name":"watched_dirs_with_extensions","children":[],"call":[]}," ActiveSupport ExecutionWrapper hook_state":{"type":"method","name":"hook_state","children":[],"call":[]}," ActiveSupport ExecutionWrapper complete!":{"type":"method","name":"complete!","children":[],"call":[" class active delete ","Thread  current "," class active "," class "," run_callbacks ","IsolatedExecutionState  unique_id "," complete ","IsolatedExecutionState  delete "," class active_key "]}," ActiveSupport ExecutionWrapper run!":{"type":"method","name":"run!","children":[],"call":[" run_callbacks "," class active []= ","Thread  current "," class active "," class "," run ","IsolatedExecutionState  unique_id ","IsolatedExecutionState  []= "," class active_key "]}," ActiveSupport ExecutionWrapper active?":{"type":"method","name":"active?","children":[],"call":[]}," ActiveSupport ExecutionWrapper inherited":{"type":"method","name":"inherited","children":[],"call":[]}," ActiveSupport ExecutionWrapper wrap":{"type":"method","name":"wrap","children":[],"call":[]}," ActiveSupport ExecutionWrapper register_hook":{"type":"method","name":"register_hook","children":[],"call":[]}," ActiveSupport ExecutionWrapper to_complete":{"type":"method","name":"to_complete","children":[],"call":[]}," ActiveSupport ExecutionWrapper to_run":{"type":"method","name":"to_run","children":[],"call":[]}," ActiveSupport EventedFileUpdateChecker PathHelper ascendant_of?":{"type":"method","name":"ascendant_of?","children":[],"call":["base == ","other ascend ","base != "," == "," != "]}," ActiveSupport EventedFileUpdateChecker PathHelper filter_out_descendants":{"type":"method","name":"filter_out_descendants","children":[],"call":["dirs - ","descendants << "," ascendant_of? ","dirs_sorted_by_nparts reject! ","dirs_sorted_by_nparts shift ","dirs_sorted_by_nparts empty? ","dir each_filename to_a length ","dir each_filename to_a ","dir each_filename ","dirs sort_by ","dirs length < ","dirs length ","dir ascendant_of? ","dirs_sorted_by_nparts shift s - ","dirs_sorted_by_nparts shift s_sorted_by_nparts reject! ","dirs_sorted_by_nparts shift s_sorted_by_nparts shift ","dirs_sorted_by_nparts shift s_sorted_by_nparts empty? ","dirs_sorted_by_nparts shift  each_filename to_a length ","dirs_sorted_by_nparts shift  each_filename to_a ","dirs_sorted_by_nparts shift  each_filename ","dirs_sorted_by_nparts shift s sort_by ","dirs_sorted_by_nparts shift s length < ","dirs_sorted_by_nparts shift s length ","dirs_sorted_by_nparts shift  ascendant_of? "]}," ActiveSupport EventedFileUpdateChecker PathHelper existing_parent":{"type":"method","name":"existing_parent","children":[],"call":["ascendant directory? ","dir ascend "]}," ActiveSupport EventedFileUpdateChecker PathHelper longest_common_subpath":{"type":"method","name":"longest_common_subpath","children":[],"call":["lcsp parent ","lcsp root? "," ascendant_of? ","paths [] each ","paths [] ","Pathname  new ","paths empty? ","lcsp ascendant_of? ","lcsp parent  parent ","Pathname  new  parent ","lcsp parent  root? ","Pathname  new  root? ","lcsp parent  ascendant_of? ","Pathname  new  ascendant_of? "]}," ActiveSupport EventedFileUpdateChecker PathHelper normalize_extension":{"type":"method","name":"normalize_extension","children":[],"call":["ext to_s sub ","ext to_s "]}," ActiveSupport EventedFileUpdateChecker PathHelper xpath":{"type":"method","name":"xpath","children":[],"call":["Pathname  new expand_path ","Pathname  new "]}," ActiveSupport EventedFileUpdateChecker directories_to_watch":{"type":"method","name":"directories_to_watch","children":[],"call":["@ph filter_out_descendants ","dtw uniq! ","dtw compact! ","@ph existing_parent ","(send\n  (ivar :@files) :+\n  (send\n    (ivar :@dirs) :keys)) map ","@files + ","@dirs keys ","path to_s start_with? ","path to_s ","normalized_gem_paths any? ","dtw reject ","File  join ","Gem  path map ","Gem  path ","@files map + ","@files map ","@files map +  uniq! ","@files map +  compact! ","@files map +  reject "]}," ActiveSupport EventedFileUpdateChecker watching?":{"type":"method","name":"watching?","children":[],"call":["dir root? ","dir == ","@dirs fetch include? ","@dirs fetch ","file dirname ascend ","file dirname ","@ph normalize_extension ","file extname ","file directory? ","@files member? ","@ph xpath ","matching include? ","matching empty? ","@dirs [] ","@ph xpath  dirname ascend ","@ph xpath  dirname ","@ph normalize_@ph normalize_extension ension ","file @ph normalize_extension name ","@ph xpath  extname ","@ph xpath  directory? ","@@ph xpath s member? ","@dirs []  include? ","@dirs []  empty? "]}," ActiveSupport EventedFileUpdateChecker changed":{"type":"method","name":"changed","children":[],"call":["@updated make_true "," watching? ","(send\n  (send\n    (lvar :modified) :+\n    (lvar :added)) :+\n  (lvar :removed)) any? ","modified + + ","modified + "," updated? "]}," ActiveSupport EventedFileUpdateChecker boot!":{"type":"method","name":"boot!","children":[],"call":["Listen  to start ","Listen  to "," method ","@dtw empty? "," normalize_dirs! "]}," ActiveSupport EventedFileUpdateChecker execute_if_updated":{"type":"method","name":"execute_if_updated","children":[],"call":[" execute "," block_given? "," updated? "]}," ActiveSupport EventedFileUpdateChecker execute":{"type":"method","name":"execute","children":[],"call":["@block call ","@updated make_false ","@core updated make_false ","@core updated "]}," ActiveSupport EventedFileUpdateChecker updated?":{"type":"method","name":"updated?","children":[],"call":["@updated true? ","@updated make_true ","Process  pid "," boot! ","@pid != ","@boot_mutex synchronize "," shutdown! ","@missing partition ","@missing any? ","@core updated true? ","@core updated ","@core updated make_true ","@core thread_safely ","@core restart? ","Process  pid  != "]}," ActiveSupport EventedFileUpdateChecker initialize":{"type":"method","name":"initialize","children":[],"call":[" boot! "," raise ","e backtrace "," require "," silence_warnings ","(ivasgn :@dtw\n  (send nil :directories_to_watch)) any? "," directories_to_watch ","Mutex  new ","Process  pid ","@ph longest_common_subpath ","@dirs keys ","Concurrent AtomicBoolean  new ","@dirs []= ","@ph normalize_extension "," Array map "," Array ","@ph xpath ","dirs each ","(send\n  (lvar :files) :map) to_set ","files map ","PathHelper  new ","Listen  to start ","Listen  to "," method ","(lvasgn :dtw\n  (send nil :directories_to_watch)) any? ","@dtw any? ","dtw partition ","ObjectSpace  define_finalizer ","@core finalizer ","Core  new ","(ivasgn : directories_to_watch \n  (send nil :directories_to_watch)) any? ","(ivasgn :@ directories_to_watch \n  (send nil :directories_to_watch)) any? ","PathHelper  new  longest_common_subpath ","PathHelper  new  normalize_extension ","PathHelper  new  xpath ","(lvasgn : directories_to_watch \n  (send nil :directories_to_watch)) any? "," directories_to_watch  any? ","@ directories_to_watch  any? "," directories_to_watch  partition ","Core  new  finalizer "]}," ActiveSupport Duration iso8601":{"type":"method","name":"iso8601","children":[],"call":["ISO8601Serializer  new serialize ","ISO8601Serializer  new "]}," ActiveSupport Duration parse":{"type":"method","name":"parse","children":[],"call":[" new "," calculate_total_seconds ","ISO8601Parser  new parse! ","ISO8601Parser  new "]}," ActiveSupport Duration ISO8601Serializer normalize":{"type":"method","name":"normalize","children":[],"call":["parts transform_values! ","v < ","parts values all? ","parts values ","p [] ","v zero? ","@duration parts each_with_object ","Hash  new ","@duration parts ","parts delete * / ","parts delete * ","parts delete ","parts [] "," week_mixed_with_date? "]}," ActiveSupport Duration ISO8601Serializer serialize":{"type":"method","name":"serialize","children":[],"call":["output << ","time present? ","time << "," sprintf ","parts [] ","parts key? "," normalize ","time empty? ","PT0S freeze ","parts empty? "," dup ","P dup "," +@ ","P +@ "," format_seconds ","P dup  << ","P +@  << "," dup  present? "," +@  present? "," dup  << "," +@  << "," normalize  [] "," normalize  key? "," dup  empty? "," +@  empty? "," normalize  empty? "]}," ActiveSupport Duration ISO8601Serializer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Duration ISO8601Parser validate!":{"type":"method","name":"validate!","children":[],"call":[" raise_parsing_error ","fractions last == ","@parts values reject last ","@parts values reject ","@parts values ","fractions last ","fractions size == ","fractions size ","fractions empty? ","(send\n  (lvar :a) :%\n  (int 1)) != ","a % "," parts values reject select "," parts values reject "," parts values "," parts ","(send\n  (send\n    (send nil :parts) :keys) :&\n  (const nil :TIME_COMPONENTS)) empty? "," parts keys & "," parts keys "," mode == "," mode ","(send\n  (send\n    (send nil :parts) :keys) :&\n  (const nil :DATE_COMPONENTS)) any? "," parts key? "," parts empty? "]}," ActiveSupport Duration ISO8601Parser raise_parsing_error":{"type":"method","name":"raise_parsing_error","children":[],"call":[" raise ","(str \"Invalid ISO 8601 duration: \") strip "," scanner string inspect "," scanner string "," scanner "]}," ActiveSupport Duration ISO8601Parser scan":{"type":"method","name":"scan","children":[],"call":[" scanner scan "," scanner "]}," ActiveSupport Duration ISO8601Parser number":{"type":"method","name":"number","children":[],"call":[" scanner [] to_i "," scanner [] "," scanner "," scanner [] tr to_f "," scanner [] tr "," scanner [] =~ ","PERIOD_OR_COMMA  match? "]}," ActiveSupport Duration ISO8601Parser finished?":{"type":"method","name":"finished?","children":[],"call":[" scanner eos? "," scanner "]}," ActiveSupport Duration ISO8601Parser parse!":{"type":"method","name":"parse!","children":[],"call":[" parts "," validate! "," raise_parsing_error "," parts []= "," number * "," sign "," number ","TIME_TO_PART  [] "," scanner [] "," scanner "," scan ","DATE_TO_PART  [] "," mode= "," sign= "," scanner matched == "," scanner matched "," mode "," finished? ! "," finished? "]}," ActiveSupport Duration ISO8601Parser initialize":{"type":"method","name":"initialize","children":[],"call":["StringScanner  new "]}," ActiveSupport Deprecation Reporting ignored_callstack":{"type":"method","name":"ignored_callstack","children":[],"call":["path start_with? ","RbConfig CONFIG  [] "]}," ActiveSupport Deprecation Reporting _extract_callstack":{"type":"method","name":"_extract_callstack","children":[],"call":["md captures ","offending_line match ","callstack first "," ignored_callstack ! "," ignored_callstack ","callstack find "," warn ","line start_with? ! ","line start_with? ","File  expand_path + ","File  expand_path ","offending_line match  captures "]}," ActiveSupport Dependencies unload_interlock":{"type":"method","name":"unload_interlock","children":[],"call":[]}," ActiveSupport Dependencies load_interlock":{"type":"method","name":"load_interlock","children":[],"call":[]}," ActiveSupport Dependencies run_interlock":{"type":"method","name":"run_interlock","children":[],"call":[]}," ActiveSupport Dependencies Interlock permit_concurrent_loads":{"type":"method","name":"permit_concurrent_loads","children":[],"call":["@lock yield_shares "]}," ActiveSupport Dependencies Interlock running":{"type":"method","name":"running","children":[],"call":["@lock sharing "]}," ActiveSupport Dependencies Interlock done_running":{"type":"method","name":"done_running","children":[],"call":["@lock stop_sharing "]}," ActiveSupport Dependencies Interlock start_running":{"type":"method","name":"start_running","children":[],"call":["@lock start_sharing "]}," ActiveSupport Dependencies Interlock done_unloading":{"type":"method","name":"done_unloading","children":[],"call":["@lock stop_exclusive "]}," ActiveSupport Dependencies Interlock start_unloading":{"type":"method","name":"start_unloading","children":[],"call":["@lock start_exclusive "]}," ActiveSupport Dependencies Interlock unloading":{"type":"method","name":"unloading","children":[],"call":["@lock exclusive "]}," ActiveSupport Dependencies Interlock loading":{"type":"method","name":"loading","children":[],"call":["@lock exclusive "]}," ActiveSupport Dependencies Interlock initialize":{"type":"method","name":"initialize","children":[],"call":["ActiveSupport Concurrency ShareLock  new "]}," Time days_in_year":{"type":"method","name":"days_in_year","children":[],"call":[" days_in_month + "," days_in_month "]}," String upcase_first":{"type":"method","name":"upcase_first","children":[],"call":["ActiveSupport Inflector  upcase_first "]}," SecureRandom base58":{"type":"method","name":"base58","children":[],"call":[]}," ActiveSupport IncludeWithRange include?":{"type":"method","name":"include?","children":[],"call":["value last send "," last ","value last ","value first ","value exclude_end? ! ","value exclude_end? "," exclude_end? ","value is_a? "]}," ActiveSupport EachTimeWithZone ensure_iteration_allowed":{"type":"method","name":"ensure_iteration_allowed","children":[],"call":[" raise "," first class "," first "," first is_a? "]}," ActiveSupport EachTimeWithZone step":{"type":"method","name":"step","children":[],"call":[" ensure_iteration_allowed "]}," ActiveSupport EachTimeWithZone each":{"type":"method","name":"each","children":[],"call":[" ensure_iteration_allowed "]}," RangeWithFormat to_s":{"type":"method","name":"to_s","children":[],"call":["formatter call "," last "," first ","RANGE_FORMATS  [] ","RANGE_FORMATS  []  call "]}," ActiveSupport Tryable try!":{"type":"method","name":"try!","children":[],"call":[" public_send "," instance_eval ","b arity == ","b arity "," block_given? ","a empty? ","method_name nil? ","block arity == ","block arity ","args empty? "]}," ActiveSupport Tryable try":{"type":"method","name":"try","children":[],"call":[" try! "," respond_to? ","a first ","a empty? "," public_send "," instance_eval ","b arity == ","b arity "," block_given? ","method_name nil? ","args first ","block arity == ","block arity ","args empty? "]}," Exception as_json":{"type":"method","name":"as_json","children":[],"call":[" to_s "]}," ActiveSupport ToJsonWithActiveSupportEncoder to_json":{"type":"method","name":"to_json","children":[],"call":["ActiveSupport JSON  encode ","options is_a? "]}," Time blank?":{"type":"method","name":"blank?","children":[],"call":[]}," Numeric negative?":{"type":"method","name":"negative?","children":[],"call":[" < "]}," Numeric positive?":{"type":"method","name":"positive?","children":[],"call":[" > "]}," NumericWithFormat to_formatted_s":{"type":"method","name":"to_formatted_s","children":[],"call":[" to_s "]}," NumericWithFormat to_s":{"type":"method","name":"to_s","children":[],"call":["format is_a? "," is_a? ","ActiveSupport NumberHelper  number_to_human_size ","ActiveSupport NumberHelper  number_to_human ","ActiveSupport NumberHelper  number_to_rounded ","ActiveSupport NumberHelper  number_to_delimited ","ActiveSupport NumberHelper  number_to_percentage ","ActiveSupport NumberHelper  number_to_currency ","ActiveSupport NumberHelper  number_to_phone "]}," Module method_visibility":{"type":"method","name":"method_visibility","children":[],"call":[" protected_method_defined? "," private_method_defined? "]}," Module remove_possible_singleton_method":{"type":"method","name":"remove_possible_singleton_method","children":[],"call":[" remove_possible_method "," singleton_class instance_eval "," singleton_class "," singleton_class remove_possible_method "]}," ActiveSupport QualifiedConstUtils names":{"type":"method","name":"names","children":[],"call":[]}," ActiveSupport QualifiedConstUtils raise_if_absolute":{"type":"method","name":"raise_if_absolute","children":[],"call":[]}," Module thread_mattr_accessor":{"type":"method","name":"thread_mattr_accessor","children":[],"call":[" thread_mattr_writer "," thread_mattr_reader "]}," Module thread_mattr_writer":{"type":"method","name":"thread_mattr_writer","children":[],"call":[" class_eval ","87 + "," name ","options [] == ","options [] ","80 + "," raise ","NameError  new ","sym =~ ","syms each ","syms extract_options! "," class name "," class ","94 + ","(str \"^[_A-Za-z]\\\\w*$\") match? ","96 + ","89 + ","90 + ","83 + "," public_send ","default nil? ","92 + ","85 + ","99 + ","91 + ","115 + ","107 + ","syms extract_options!  [] == ","syms extract_options!  [] ","syms extract_syms extract_options! ! "]}," Module thread_mattr_reader":{"type":"method","name":"thread_mattr_reader","children":[],"call":[" class_eval ","48 + "," name ","options [] == ","options [] ","41 + "," raise ","NameError  new ","sym =~ ","syms each ","syms extract_options! "," class name "," class ","52 + ","45 + ","(str \"^[_A-Za-z]\\\\w*$\") match? ","54 + ","47 + ","49 + ","42 + ","Thread  current []= ","attr_ + + ","attr_ + ","Thread  current ","default nil? "," ActiveSupport IsolatedExecutionState  []= ","55 + ","73 + ","58 + "," singleton_class define_method "," singleton_class ","default dup freeze ","default dup ","default frozen? ","syms extract_options!  [] == ","syms extract_options!  [] ","syms extract_syms extract_options! ! ","default dup freeze  nil? ","default dup freeze  dup freeze ","default dup freeze  dup ","default dup freeze  frozen? "]}," ActiveSupport MarshalWithAutoloading load":{"type":"method","name":"load","children":[],"call":[" raise ","source rewind ","source respond_to? ","1 == ","loaded name ","1 constantize ","exc message match ","exc message ","1 constantize  name "]}," Enumerable without":{"type":"method","name":"without","children":[],"call":["elements include? "," reject "," excluding "]}," DateTime blank?":{"type":"method","name":"blank?","children":[],"call":[]}," DateAndTime Compatibility to_time":{"type":"method","name":"to_time","children":[],"call":[" getlocal "," utc_offset "," preserve_timezone "]}," DateAndTime Calculations copy_time_to":{"type":"method","name":"copy_time_to","children":[],"call":["other change "," try "," sec "," min "," hour "]}," DateAndTime Calculations prev_weekday":{"type":"method","name":"prev_weekday","children":[],"call":[" prev_day "," copy_time_to "," beginning_of_week "," prev_day on_weekend? "]}," DateAndTime Calculations next_weekday":{"type":"method","name":"next_weekday","children":[],"call":[" next_day "," next_week "," next_day on_weekend? "]}," DateAndTime Calculations on_weekday?":{"type":"method","name":"on_weekday?","children":[],"call":["WEEKEND_DAYS  include? ! ","WEEKEND_DAYS  include? "," wday "]}," DateAndTime Calculations on_weekend?":{"type":"method","name":"on_weekend?","children":[],"call":["WEEKEND_DAYS  include? "," wday "]}," DateAndTime Calculations next_day":{"type":"method","name":"next_day","children":[],"call":[" advance "]}," DateAndTime Calculations prev_day":{"type":"method","name":"prev_day","children":[],"call":[" advance ","days -@ "]}," Date blank?":{"type":"method","name":"blank?","children":[],"call":[]}," ActiveSupport BigDecimalWithDefaultFormat to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Array inquiry":{"type":"method","name":"inquiry","children":[],"call":["ActiveSupport ArrayInquirer  new "]}," Array second_to_last":{"type":"method","name":"second_to_last","children":[],"call":[" [] "]}," Array third_to_last":{"type":"method","name":"third_to_last","children":[],"call":[" [] "]}," Array without":{"type":"method","name":"without","children":[],"call":[" - "," excluding "]}," ActiveSupport Concurrency ShareLock eligible_waiters?":{"type":"method","name":"eligible_waiters?","children":[],"call":["c2 include? ","t == ","@waiting all? ","compatible include? ","@waiting any? "]}," ActiveSupport Concurrency ShareLock busy_for_sharing?":{"type":"method","name":"busy_for_sharing?","children":[],"call":["c include? ! ","c include? ","t != ","Thread  current ","@waiting any? ","@exclusive_thread != "]}," ActiveSupport Concurrency ShareLock busy_for_exclusive?":{"type":"method","name":"busy_for_exclusive?","children":[],"call":["@sharing size > ","@sharing [] > ","@sharing [] ","Thread  current ","@sharing size "," busy_for_sharing? "]}," ActiveSupport Concurrency ShareLock yield_shares":{"type":"method","name":"yield_shares","children":[],"call":["@sharing []= ","Thread  current ","@waiting delete ","@waiting []= ","@exclusive_thread != ","@cv wait_while "," synchronize ","@cv broadcast ","previous_wait [] ","purpose == ","@waiting [] ","@sharing delete "," wait_for ","@waiting []  [] "]}," ActiveSupport Concurrency ShareLock sharing":{"type":"method","name":"sharing","children":[],"call":[" stop_sharing "," start_sharing "]}," ActiveSupport Concurrency ShareLock exclusive":{"type":"method","name":"exclusive","children":[],"call":[" stop_exclusive "," start_exclusive "]}," ActiveSupport Concurrency ShareLock stop_sharing":{"type":"method","name":"stop_sharing","children":[],"call":["@cv broadcast ","@sharing delete ","Thread  current ","@sharing [] ","@sharing [] > "," synchronize "]}," ActiveSupport Concurrency ShareLock start_sharing":{"type":"method","name":"start_sharing","children":[],"call":["@sharing [] ","Thread  current "," busy_for_sharing? ","@cv wait_while ","@waiting [] ","@exclusive_thread == ","@sharing [] > "," synchronize ","@exclusive_thread != ","@sharing [] == "," wait_for "]}," ActiveSupport Concurrency ShareLock stop_exclusive":{"type":"method","name":"stop_exclusive","children":[],"call":["@cv broadcast "," eligible_waiters? ","@cv wait_while "," yield_shares ","@exclusive_depth == "," raise ","@exclusive_thread != ","Thread  current "," synchronize "," wait_for "]}," ActiveSupport Concurrency ShareLock start_exclusive":{"type":"method","name":"start_exclusive","children":[],"call":["Thread  current "," busy_for_exclusive? ","@cv wait_while "," yield_shares ","@exclusive_thread == "," synchronize ","@sharing []= ","@waiting delete "," busy? ","@waiting []= ","@sharing delete "," wait_for ","Thread  current  == "]}," ActiveSupport Concurrency ShareLock initialize":{"type":"method","name":"initialize","children":[],"call":["Hash  new "," new_cond "]}," ActiveSupport Callbacks ClassMethods display_deprecation_warning_for_false_terminator":{"type":"method","name":"display_deprecation_warning_for_false_terminator","children":[],"call":["ActiveSupport Deprecation  warn ","(str \"          Returning `false` in Active Record and Active Model callbacks will not implicitly halt a callback chain in Rails 5.1.\\n\") squish ","(str \"          Returning `false` in Active Record and Active Model callbacks will not implicitly halt a callback chain in the next release of Rails.\\n\") squish "]}," ActiveSupport Callbacks ClassMethods deprecated_false_terminator":{"type":"method","name":"deprecated_false_terminator","children":[],"call":[" display_deprecation_warning_for_false_terminator ","result == ","Callbacks  halt_and_display_warning_on_return_false ","result_lambda call ","result_lambda is_a? "," catch ","Proc  new ","result_lambda call  == ","result_lambda call _lambda call ","result_lambda call _lambda is_a? "]}," ActiveSupport Callbacks CallbackChain default_terminator":{"type":"method","name":"default_terminator","children":[],"call":["result_lambda call ","result_lambda is_a? "," catch ","Proc  new "]}," ActiveSupport Callbacks Callback merge_conditional_options":{"type":"method","name":"merge_conditional_options","children":[],"call":[" class build "," class ","options [] concat "," Array ","options [] ","@unless dup ","@if dup "]}," ActiveSupport Cache Store normalize_key":{"type":"method","name":"normalize_key","children":[],"call":["namespace call ","namespace is_a? ","options [] "," expanded_key "," namespace_key ","Cache  expand_cache_key "," raise ","str_key empty? ","str_key ! ","options []  call ","options []  is_a? "," expanded_ expanded_key  "," options [] _key "," namespace_ expanded_key  ","Cache  expand_cache_ expanded_key  ","str_ expanded_key  empty? "," expanded_key  empty? ","str_ expanded_key  ! "," expanded_key  ! "]}," ActiveSupport Cache Strategy LocalCache write_cache_value":{"type":"method","name":"write_cache_value","children":[],"call":["cache delete ","cache write ","cache mute "," local_cache "," normalize_key ","cache delete_entry ","cache write_entry "," serialize_entry "," new_entry "," local_cache  delete "," local_cache  write "," local_cache  mute "," local_ local_cache  "," local_cache  delete_entry "," local_cache  write_entry "]}," ActiveSupport Cache Strategy LocalCache LocalStore fetch_entry":{"type":"method","name":"fetch_entry","children":[],"call":["@data []= ","@data fetch ","entry dup "]}," ActiveSupport Cache MemoryStore modify_value":{"type":"method","name":"modify_value","children":[],"call":[" write ","num to_i + ","num to_i "," read "," merged_options "," synchronize "," write_entry ","Entry  new ","entry version ","entry expires_at ","entry value to_i + ","entry value to_i ","entry value "," Integer ","entry mismatched? ","entry expired? ","entry ! "," read_entry "," normalize_version "," normalize_key ","num to_i +  to_i + "," read  to_i + ","entry value to_i +  to_i + ","num to_i +  to_i "," read  to_i ","entry value to_i +  to_i "," merged_ merged_options  "," write_Entry  new  "," write_ read_entry  ","Entry  new  version "," read_entry  version ","entry  normalize_version  ","Entry  new  expires_at "," read_entry  expires_at ","Entry  new  value to_i + "," read_entry  value to_i + ","Entry  new  value to_i "," read_entry  value to_i ","Entry  new  value "," read_entry  value ","Entry  new  mismatched? "," read_entry  mismatched? ","Entry  new  expired? "," read_entry  expired? ","Entry  new  ! "," read_entry  ! "," read_Entry  new  "," read_ read_entry  "," normalize_ normalize_version  "," normalize_ normalize_key  "]}," ActiveSupport Cache MemCacheStore rescue_error_with":{"type":"method","name":"rescue_error_with","children":[],"call":[" logger error ","e message "," logger ","error message ","ActiveSupport  error_reporter "]}," ActiveSupport Cache MemCacheStore normalize_key":{"type":"method","name":"normalize_key","children":[],"call":["Digest MD5  hexdigest ","key [] ","key size > ","key size ","match getbyte to_s upcase ","match getbyte to_s ","match getbyte ","key gsub ","key force_encoding "," dup ","ActiveSupport Digest  hexdigest ","key dup force_encoding ","key dup ","KEY_MAX_SIZE  - - ","key_hash size ","KEY_MAX_SIZE  - ","key_separator size ","key force_encoding  [] "," dup  [] ","key dup force_encoding  [] ","key force_encoding  size > "," dup  size > ","key dup force_encoding  size > ","key force_encoding  size "," dup  size ","key dup force_encoding  size ","key force_encoding  gsub "," dup  gsub ","key dup force_encoding  gsub ","key force_encoding  force_encoding "," dup  force_encoding ","key dup force_encoding  force_encoding ","key force_encoding  dup force_encoding "," dup  dup force_encoding ","key dup force_encoding  dup force_encoding ","key force_encoding  dup "," dup  dup ","key dup force_encoding  dup ","key force_encoding _hash size "," dup _hash size ","key dup force_encoding _hash size ","ActiveSupport Digest  hexdigest  size ","key force_encoding _separator size "," dup _separator size ","key dup force_encoding _separator size "]}," ActiveSupport Cache FileStore exclude_from":{"type":"method","name":"exclude_from","children":[],"call":["excludes include? ","Dir  entries reject ","Dir  entries "]}," ActiveSupport Cache FileStore normalize_key":{"type":"method","name":"normalize_key","children":[],"call":["File  join ","DIR_FORMATTER  % "," cache_path ","fname [] ","fname_paths << ","fname blank? ","hash modulo ","hash divmod ","Zlib  adler32 ","Digest MD5  hexdigest ","fname size > ","fname size ","URI  encode_www_form_component ","ActiveSupport Digest  hexdigest ","fname length < ","fname length ","fname []  [] ","Digest MD5  hexdigest  [] ","URI  encode_www_form_component  [] ","ActiveSupport Digest  hexdigest  [] ","fname [] _paths << ","Digest MD5  hexdigest _paths << ","URI  encode_www_form_component _paths << ","ActiveSupport Digest  hexdigest _paths << ","fname []  blank? ","Digest MD5  hexdigest  blank? ","URI  encode_www_form_component  blank? ","ActiveSupport Digest  hexdigest  blank? ","Zlib  adler32  modulo ","Zlib  adler32  divmod ","fname []  size > ","Digest MD5  hexdigest  size > ","URI  encode_www_form_component  size > ","ActiveSupport Digest  hexdigest  size > ","fname []  size ","Digest MD5  hexdigest  size ","URI  encode_www_form_component  size ","ActiveSupport Digest  hexdigest  size ","fname []  length < ","Digest MD5  hexdigest  length < ","URI  encode_www_form_component  length < ","ActiveSupport Digest  hexdigest  length < ","fname []  length ","Digest MD5  hexdigest  length ","URI  encode_www_form_component  length ","ActiveSupport Digest  hexdigest  length "]}," ActiveSupport ArrayInquirer method_missing":{"type":"method","name":"method_missing","children":[],"call":[" any? ","name [] ","name [] == ","name end_with? "]}," ActiveSupport ArrayInquirer respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["name [] == ","name [] ","name end_with? "]}," ActiveSupport ArrayInquirer any?":{"type":"method","name":"any?","children":[],"call":[" include? ","candidate to_s ","candidate to_sym ","candidates any? ","candidates none? "]}," ActiveSupport Testing CompositeFilter Filter definition_for":{"type":"method","name":"definition_for","children":[],"call":["method source count + - ","method source count + ","method source count ","method source ","method source_location "]}," ActiveSupport Testing CompositeFilter Filter ===":{"type":"method","name":"===","children":[],"call":["@runnable instance_method source_location first == ","@runnable instance_method source_location first ","@runnable instance_method source_location ","@runnable instance_method ","test_range include? ","test_file == "," definition_for ","@runnable method_defined? "]}," ActiveSupport Testing CompositeFilter Filter initialize":{"type":"method","name":"initialize","children":[],"call":["line to_i ","File  expand_path "]}," ActiveSupport Testing CompositeFilter derive_line_filters":{"type":"method","name":"derive_line_filters","children":[],"call":["Filter  new ","file_and_line split ","patterns map "]}," ActiveSupport Testing CompositeFilter derive_regexp":{"type":"method","name":"derive_regexp","children":[],"call":["Regexp  new ","filter =~ "]}," ActiveSupport Testing CompositeFilter ===":{"type":"method","name":"===","children":[],"call":["filter === ","@filters any? "]}," ActiveSupport Testing CompositeFilter initialize":{"type":"method","name":"initialize","children":[],"call":["(send nil :derive_regexp\n  (lvar :filter)) compact "," derive_line_filters "," derive_regexp "]}," ActiveSupport TestCase run":{"type":"method","name":"run","children":[],"call":["options []= ","Testing CompositeFilter  new ","options [] ","p =~ ","options [] any? "]}," ActiveSupport Dependencies Interlock attempt_unloading":{"type":"method","name":"attempt_unloading","children":[],"call":["@lock exclusive "]}," ActiveSupport Concurrency ShareLock busy?":{"type":"method","name":"busy?","children":[],"call":["@sharing size > ","@sharing [] > ","@sharing [] ","Thread  current ","@sharing size ","v include? ! ","v include? ","k != ","@waiting any? ","@exclusive_thread != "]}," ActiveSupport Cache Store instrument_multi":{"type":"method","name":"instrument_multi","children":[],"call":["ActiveSupport Notifications  instrument ","payload merge! ","options is_a? ","options inspect ","options blank? ","(send\n  (lvar :keys) :map) join ","keys map "," log "," _instrument "]}," ActiveSupport Rescuable index_of_handler_for_rescue":{"type":"method","name":"index_of_handler_for_rescue","children":[],"call":["klass === ","klass_name constantize "," class const_get "," class ","handlers detect "," class rescue_handlers reverse_each with_index "," class rescue_handlers reverse_each "," class rescue_handlers "," class rescue_handlers reverse_each with_index  detect "," class rescue_ class rescue_handlers reverse_each with_index  reverse_each with_index "," class rescue_ class rescue_handlers reverse_each with_index  reverse_each "," class rescue_ class rescue_handlers reverse_each with_index  "]}," ActiveSupport LazyLoadHooks run_load_hooks":{"type":"method","name":"run_load_hooks","children":[],"call":[" execute_hook ","@load_hooks [] each ","@load_hooks [] ","@loaded [] << ","@loaded [] "]}," ActiveSupport LazyLoadHooks execute_hook":{"type":"method","name":"execute_hook","children":[],"call":["base instance_eval ","block call ","options [] "," with_execution_control ","base class_eval ","base is_a? "]}," ActiveSupport LazyLoadHooks on_load":{"type":"method","name":"on_load","children":[],"call":["@load_hooks [] << ","@load_hooks [] "," execute_hook ","@loaded [] each ","@loaded [] "]}," ActiveSupport LazyLoadHooks extended":{"type":"method","name":"extended","children":[],"call":[]}," ActiveSupport ExecutionWrapper CompleteHook before":{"type":"method","name":"before","children":[],"call":[" hook complete ","hook_state [] "," hook ","hook_state key? ","target send ","target send  [] ","target send  key? "]}," ActiveSupport ExecutionWrapper RunHook before":{"type":"method","name":"before","children":[],"call":["hook_state []= "," hook run "," hook ","target send ","target send  []= "]}," ActiveSupport Deprecation InstanceDelegator OverrideDelegators deprecation_warning":{"type":"method","name":"deprecation_warning","children":[],"call":[" caller_locations "]}," ActiveSupport Deprecation InstanceDelegator OverrideDelegators warn":{"type":"method","name":"warn","children":[],"call":[" caller_locations "]}," ActiveSupport Dependencies Interlock raw_state":{"type":"method","name":"raw_state","children":[],"call":["@lock raw_state "]}," ActiveSupport Concurrency ShareLock wait_for":{"type":"method","name":"wait_for","children":[],"call":["@sleeping delete ","Thread  current ","@cv wait_while ","@sleeping []= "]}," ActiveSupport Concurrency ShareLock raw_state":{"type":"method","name":"raw_state","children":[],"call":["data []= ","@sleeping [] ","@waiting [] ! ! ","@waiting [] ! ","@waiting [] ","@exclusive_thread == ","@sharing [] ","threads each ","@sleeping keys | | ","@waiting keys ","@sleeping keys | ","@sharing keys ","@sleeping keys "," synchronize ","@sleeping keys | |  each "]}," ActiveSupport TimeZone load_country_zones":{"type":"method","name":"load_country_zones","children":[],"call":["(send\n  (send\n    (lvar :country) :zone_identifiers) :map) sort! "," create ","TZInfo Timezone  new "," [] ","MAPPING  key ","MAPPING  value? ","country zone_identifiers map ","country zone_identifiers ","TZInfo Country  get ","(send\n  (send\n    (lvar :country) :zone_identifiers) :map) flatten sort! ","(send\n  (send\n    (lvar :country) :zone_identifiers) :map) flatten ","memo << ","value == ","MAPPING  inject ","(send\n  (send\n    (lvar :country) :zone_identifiers) :flat_map) sort! ","country zone_identifiers flat_map ","TZInfo Timezone  get ","(send\n  (send\n    (lvar :TZInfo Country  get ) :zone_identifiers) :map) sort! ","TZInfo Country  get  zone_identifiers map ","TZInfo Country  get  zone_identifiers ","(send\n  (send\n    (lvar :TZInfo Country  get ) :zone_identifiers) :map) flatten sort! ","(send\n  (send\n    (lvar :TZInfo Country  get ) :zone_identifiers) :map) flatten ","(send\n  (send\n    (lvar :TZInfo Country  get ) :zone_identifiers) :flat_map) sort! ","TZInfo Country  get  zone_identifiers flat_map "]}," ActiveSupport Duration calculate_total_seconds":{"type":"method","name":"calculate_total_seconds","children":[],"call":["total + ","value * ","PARTS_IN_SECONDS  [] ","parts inject "]}," ActiveSupport Duration years":{"type":"method","name":"years","children":[],"call":[" new ","value * "]}," ActiveSupport Duration months":{"type":"method","name":"months","children":[],"call":[" new ","value * "]}," ActiveSupport Duration weeks":{"type":"method","name":"weeks","children":[],"call":[" new ","value * "]}," ActiveSupport Duration days":{"type":"method","name":"days","children":[],"call":[" new ","value * "]}," ActiveSupport Duration hours":{"type":"method","name":"hours","children":[],"call":[" new ","value * "]}," ActiveSupport Duration minutes":{"type":"method","name":"minutes","children":[],"call":[" new ","value * "]}," ActiveSupport Duration seconds":{"type":"method","name":"seconds","children":[],"call":[" new "]}," ActiveSupport LazyLoadHooks with_execution_control":{"type":"method","name":"with_execution_control","children":[],"call":["@run_once [] << ","@run_once [] ","@run_once [] include? "]}," ActiveSupport TimeZone rfc3339":{"type":"method","name":"rfc3339","children":[],"call":["TimeWithZone  new ","time utc ","Time  new ","parts fetch ","parts fetch + "," raise ","parts empty? ","Date  _rfc3339 ","Time  new  utc ","Date  _rfc3339  fetch ","Date  _rfc3339  fetch + ","Date  _rfc3339  empty? "]}," ActiveSupport TimeZone iso8601":{"type":"method","name":"iso8601","children":[],"call":["TimeWithZone  new ","time utc ","parts [] ","Time  new ","parts fetch ","parts fetch + "," raise ","parts empty? ","Date  _iso8601 ","str nil? ","ordinal_date day ","ordinal_date month ","Date  ordinal ","parts key? ","Time  new  utc ","Date  _iso8601  [] ","Date  _iso8601  fetch ","Date  _iso8601  fetch + ","Date  _iso8601  empty? ","ordinal_date parts fetch  ","ordinal_date ordinal_date day  ","Date  ordinal  day ","ordinal_date ordinal_date month  ","Date  ordinal  month ","Date  _iso8601  key? "]}," ActiveSupport Testing SimpleStubs stubbing":{"type":"method","name":"stubbing","children":[],"call":["@stubs [] [] ","@stubs [] ","object object_id "]}," ActiveSupport Testing Assertions assert_no_changes":{"type":"method","name":"assert_no_changes","children":[],"call":[" assert_equal ","expression inspect ","exp call "," eval ","block binding ","expression to_s "," lambda ","expression respond_to? "," assert ","before == "," assert_nil ","before nil? "," assert_nothing_raised ","from === ","from inspect ","from == "," _assert_nothing_raised_or_warn ","exp call  == ","exp call  nil? "]}," ActiveSupport Testing Assertions assert_changes":{"type":"method","name":"assert_changes","children":[],"call":[" assert ","to === ","expression inspect "," assert_not_equal ","to == ","exp call ","from === ","from inspect ","from == "," eval ","block binding ","expression to_s "," lambda ","expression respond_to? ","before != ","before == ","after inspect ","to inspect "," assert_nothing_raised "," refute_equal "," _assert_nothing_raised_or_warn ","exp call  != ","exp call  == ","exp call  inspect "]}," ActiveSupport Testing Assertions assert_nothing_raised":{"type":"method","name":"assert_nothing_raised","children":[],"call":[" raise ","Minitest UnexpectedError  new "," assert "," tap "]}," ActiveSupport MessageEncryptor resolve_verifier":{"type":"method","name":"resolve_verifier","children":[],"call":["MessageVerifier  new "," aead_mode? "]}," ActiveSupport MessageEncryptor aead_mode?":{"type":"method","name":"aead_mode?","children":[],"call":[" new_cipher authenticated? "," new_cipher "]}," ActiveSupport MessageEncryptor NullVerifier generate":{"type":"method","name":"generate","children":[],"call":[]}," ActiveSupport MessageEncryptor NullVerifier verify":{"type":"method","name":"verify","children":[],"call":[]}," ActiveSupport ExecutionWrapper before":{"type":"method","name":"before","children":[],"call":[" hook complete ","hook_state [] "," hook ","hook_state key? ","target send ","hook_state []= "," hook run ","target send  [] ","target send  key? ","target send  []= "]}," ActiveSupport Duration raise_type_error":{"type":"method","name":"raise_type_error","children":[],"call":[" raise "," class ","other class "]}," ActiveSupport Duration /":{"type":"method","name":"/","children":[],"call":[" raise_type_error ","Duration  new ","number / "," parts map "," parts "," value / "," value ","Numeric  === ","other value ","Duration  === ","Scalar  === "," parts transform_values ","@parts transform_values "]}," ActiveSupport Duration *":{"type":"method","name":"*","children":[],"call":[" raise_type_error ","Duration  new ","number * "," parts map "," parts "," value * "," value ","Numeric  === ","other value ","Duration  === ","Scalar  === "," parts transform_values ","@parts transform_values ","other variable? "]}," ActiveSupport Duration <=>":{"type":"method","name":"<=>","children":[],"call":[" value <=> "," value ","Numeric  === ","other value ","Duration  === "]}," ActiveSupport Duration coerce":{"type":"method","name":"coerce","children":[],"call":["Scalar  new ","Scalar  === ","other value "]}," ActiveSupport Duration Scalar raise_type_error":{"type":"method","name":"raise_type_error","children":[],"call":[" raise "," class ","other class "]}," ActiveSupport Duration Scalar calculate":{"type":"method","name":"calculate","children":[],"call":[" raise_type_error ","Scalar  new "," value public_send "," value ","Numeric  === ","Duration  seconds public_send ","Duration  seconds ","Duration  === ","other value ","Scalar  === "]}," ActiveSupport Duration Scalar /":{"type":"method","name":"/","children":[],"call":[" calculate ","Duration  new ","total + ","value * ","Duration PARTS_IN_SECONDS  [] ","new_parts inject ","(send\n  (send\n    (lvar :other) :parts) :map) to_h "," value / "," value ","other parts map ","other parts ","Duration  === ","other value ","(send\n  (send\n    (lvar :other) :parts) :map) to_h  inject "]}," ActiveSupport Duration Scalar *":{"type":"method","name":"*","children":[],"call":[" calculate ","Duration  new "," value * ","other value "," value ","(send\n  (send\n    (lvar :other) :parts) :map) to_h ","other parts map ","other parts ","Duration  === ","other parts transform_values ","other variable? ","other _parts transform_values ","other _parts "]}," ActiveSupport Duration Scalar -":{"type":"method","name":"-","children":[],"call":[" calculate ","Duration  new "," value - ","other value "," value ","new_parts merge ","(send\n  (send\n    (lvar :other) :parts) :map) to_h ","other_value -@ ","other parts map ","other parts ","other parts [] ","Duration  === ","other parts transform_values ","other parts fetch ","other variable? ","other _parts transform_values ","other _parts ","other _parts fetch ","new_parts merge  merge ","(send\n  (send\n    (lvar :other) :parts) :map) to_h  merge ","other parts transform_values  merge ","other _parts transform_values  merge "]}," ActiveSupport Duration Scalar +":{"type":"method","name":"+","children":[],"call":[" calculate ","Duration  new "," value + ","other value "," value ","other parts merge ","other parts ","other parts [] ","Duration  === ","other parts fetch ","other variable? ","other _parts merge ","other _parts ","other _parts fetch "]}," ActiveSupport Duration Scalar <=>":{"type":"method","name":"<=>","children":[],"call":[" value <=> "," value ","Numeric  === ","other value ","Duration  === ","Scalar  === "]}," ActiveSupport Duration Scalar -@":{"type":"method","name":"-@","children":[],"call":["Scalar  new "," value -@ "," value "]}," ActiveSupport Duration Scalar coerce":{"type":"method","name":"coerce","children":[],"call":["Scalar  new "]}," ActiveSupport Duration Scalar initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Deprecation DeprecatedConstantAccessor included":{"type":"method","name":"included","children":[{"type":"method","name":"const_missing","children":[],"asgn":[{"type":"local","name":"replacement","value":" class_variable_get [] "},[" class_variable_get [] "]],"call":["ActiveSupport Inflector  constantize ","replacement [] to_s ","replacement [] ","replacement [] warn "," caller_locations ","replacement [] "," name ","replacement [] ","replacement [] "," class_variable_get [] ","missing_const_name to_s "," class_variable_get "," class_variable_defined? "]},{"type":"method","name":"deprecate_constant","children":[],"asgn":[],"call":[" class_variable_get []= ","const_name to_s "," class_variable_get "," class_variable_set "," class_variable_defined? "]}],"call":[]}," Time rfc3339":{"type":"method","name":"rfc3339","children":[],"call":["Time  new ","parts fetch ","parts fetch + "," raise ","parts empty? ","Date  _rfc3339 ","Date  _rfc3339  fetch ","Date  _rfc3339  fetch + ","Date  _rfc3339  empty? "]}," Regexp match?":{"type":"method","name":"match?","children":[],"call":[" match ! ! "," match ! "," match "]}," Pathname as_json":{"type":"method","name":"as_json","children":[],"call":[" to_s "]}," Generic as_json":{"type":"method","name":"as_json","children":[],"call":[" to_s "]}," Rational duplicable?":{"type":"method","name":"duplicable?","children":[],"call":[]}," Complex duplicable?":{"type":"method","name":"duplicable?","children":[],"call":[]}," Module delegate_missing_to":{"type":"method","name":"delegate_missing_to","children":[],"call":[" module_eval ","268 + ","DELEGATION_RESERVED_METHOD_NAMES  include? ","target to_s ","262 + ","265 + ","287 + ","282 + ","293 + ","299 + ","allow_nil == ","322 + ","target to_s  to_s "]}," DateAndTime Calculations all_day":{"type":"method","name":"all_day","children":[],"call":[" end_of_day "," beginning_of_day "]}," ActiveSupport Callbacks CallbackSequence invoke_after":{"type":"method","name":"invoke_after","children":[],"call":["a call ","@after each "]}," ActiveSupport Callbacks CallbackSequence invoke_before":{"type":"method","name":"invoke_before","children":[],"call":["b call ","@before each "]}," ActiveSupport Callbacks CallbackSequence expand_call_template":{"type":"method","name":"expand_call_template","children":[],"call":["@call_template expand ","arg value ","arg target "]}," ActiveSupport Callbacks CallbackSequence final?":{"type":"method","name":"final?","children":[],"call":["@call_template ! "]}," ActiveSupport Callbacks CallbackSequence nested":{"type":"method","name":"nested","children":[],"call":[]}," ActiveSupport Callbacks CallbackSequence skip?":{"type":"method","name":"skip?","children":[],"call":["(send\n  (ivar :@user_conditions) :all?) ! ","c call ","arg value ","arg target ","@user_conditions all? ","arg halted "]}," ActiveSupport Callbacks CallTemplate compile_lambda":{"type":"method","name":"compile_lambda","children":[],"call":[]}," ActiveSupport Callbacks CallTemplate build":{"type":"method","name":"build","children":[],"call":[]}," ActiveSupport Callbacks CallTemplate inverted_lambda":{"type":"method","name":"inverted_lambda","children":[],"call":["target send ! ","target send "," expand "," lambda "]}," ActiveSupport Callbacks CallTemplate make_lambda":{"type":"method","name":"make_lambda","children":[],"call":["target send "," expand "," lambda "]}," ActiveSupport Callbacks CallTemplate expand":{"type":"method","name":"expand","children":[],"call":["result unshift "," raise ","@arguments map ","expanded << ","@arguments each "]}," ActiveSupport Callbacks CallTemplate initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Callbacks Callback current_scopes":{"type":"method","name":"current_scopes","children":[],"call":[" public_send "," Array map "," Array "," chain_config [] "," chain_config "]}," ActiveSupport NumberHelper RoundingHelper absolute_number":{"type":"method","name":"absolute_number","children":[],"call":["number to_d abs ","number to_d ","number abs ","number respond_to? "]}," ActiveSupport NumberHelper RoundingHelper significant":{"type":"method","name":"significant","children":[],"call":[" options [] "," options "]}," ActiveSupport NumberHelper RoundingHelper precision":{"type":"method","name":"precision","children":[],"call":[" options [] "," options "]}," ActiveSupport NumberHelper RoundingHelper convert_to_decimal":{"type":"method","name":"convert_to_decimal","children":[],"call":["number to_d "," BigDecimal "," digit_count + "," precision "," digit_count ","number to_i ","number to_s "," options [] "," options ","number to_d  to_d "," BigDecimal  to_d ","number to_d  to_i "," BigDecimal  to_i ","number to_d  to_s "," BigDecimal  to_s "]}," ActiveSupport NumberHelper RoundingHelper round_significant":{"type":"method","name":"round_significant","children":[],"call":["(send\n  (lvar :number) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (lvar :multiplier) :to_f) :to_s))) round * ","(send\n  (lvar :number) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (lvar :multiplier) :to_f) :to_s))) round ","number / ","BigDecimal  new ","multiplier to_f to_s ","multiplier to_f ","10 ** ","digits - "," precision "," digit_count ","number zero? ","(send\n  (lvar :number) :/\n  (send nil :BigDecimal\n    (send\n      (send\n        (lvar :multiplier) :to_f) :to_s))) round * ","(send\n  (lvar :number) :/\n  (send nil :BigDecimal\n    (send\n      (send\n        (lvar :multiplier) :to_f) :to_s))) round "," BigDecimal ","(send\n  (lvar :number) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (lvar :10 ** ) :to_f) :to_s))) round * ","(send\n  (lvar :number) :/\n  (send\n    (const nil :BigDecimal) :new\n    (send\n      (send\n        (lvar :10 ** ) :to_f) :to_s))) round ","10 **  to_f to_s ","10 **  to_f "," digit_count  - ","(send\n  (lvar :number) :/\n  (send nil :BigDecimal\n    (send\n      (send\n        (lvar :10 ** ) :to_f) :to_s))) round * ","(send\n  (lvar :number) :/\n  (send nil :BigDecimal\n    (send\n      (send\n        (lvar :10 ** ) :to_f) :to_s))) round "]}," ActiveSupport NumberHelper RoundingHelper round_without_significant":{"type":"method","name":"round_without_significant","children":[],"call":["number abs ","number zero? ","number to_i ","number finite? "," precision == "," precision ","number round ","BigDecimal  mode ","number abs  abs ","number to_i  abs ","number round  abs ","number abs  zero? ","number to_i  zero? ","number round  zero? ","number abs  to_i ","number to_i  to_i ","number round  to_i ","number abs  finite? ","number to_i  finite? ","number round  finite? ","number abs  round ","number to_i  round ","number round  round "]}," ActiveSupport NumberHelper RoundingHelper digit_count":{"type":"method","name":"digit_count","children":[],"call":["(send\n  (send\n    (const nil :Math) :log10\n    (send nil :absolute_number\n      (lvar :number))) :+\n  (int 1)) floor ","Math  log10 + ","Math  log10 "," absolute_number ","number zero? ","(send\n  (send\n    (const nil :Math) :log10\n    (send\n      (lvar :number) :abs)) :+\n  (int 1)) floor ","number abs "]}," ActiveSupport NumberHelper RoundingHelper round":{"type":"method","name":"round","children":[],"call":[" round_without_significant "," round_significant "," precision > "," precision "," significant "," convert_to_decimal ","rounded_number abs ","rounded_number zero? "," convert_to_decimal round "," options fetch "," options "," absolute_precision "," options fetch to_sym ","  absolute_precision  > ","  absolute_precision  ","rounded_ convert_to_decimal  abs "," convert_to_decimal round  abs ","rounded_ convert_to_decimal  zero? "," convert_to_decimal round  zero? "," absolute_ absolute_precision  "]}," ActiveSupport NumberHelper RoundingHelper initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport HashWithIndifferentAccess dig":{"type":"method","name":"dig","children":[],"call":["args []= "," convert_key ","args [] ","args size > ","args size "]}," ActiveSupport Duration %":{"type":"method","name":"%","children":[],"call":[" raise_type_error ","Duration  build "," value % "," value ","Numeric  === ","other value ","Scalar  === ","Duration  === "]}," ActiveSupport Duration build":{"type":"method","name":"build","children":[],"call":[" new ","v zero? ","parts reject! ","parts []= ","(send\n  (lvar :remainder) :%\n  (lvar :part_in_seconds)) round ","remainder % ","remainder div ","PARTS_IN_SECONDS  [] ","part == ","PARTS  each ","value to_f ","value == ","value round "," raise ","value class name ","value class "," name ","value is_a? ","remainder * ","remainder div * ","value round abs ","value <=> ","VARIABLE_PARTS  include? ","parts [] zero? ","parts [] ","(send\n  (lvar :(send\n  (lvar :remainder) :%\n  (lvar :part_in_seconds)) round ) :%\n  (lvar :part_in_seconds)) round ","(send\n  (lvar :value to_f ) :%\n  (lvar :part_in_seconds)) round ","(send\n  (lvar :value round ) :%\n  (lvar :part_in_seconds)) round ","(send\n  (lvar :value round abs ) :%\n  (lvar :part_in_seconds)) round ","(send\n  (lvar :remainder) :%\n  (lvar :PARTS_IN_SECONDS  [] )) round ","(send\n  (lvar :remainder) :%\n  (lvar :part_in_seconds)) round  % ","value to_f  % ","value round  % ","value round abs  % ","(send\n  (lvar :remainder) :%\n  (lvar :part_in_seconds)) round  div ","value to_f  div ","value round  div ","value round abs  div ","(send\n  (lvar :remainder) :%\n  (lvar :part_in_seconds)) round  * ","value to_f  * ","value round  * ","value round abs  * ","(send\n  (lvar :remainder) :%\n  (lvar :part_in_seconds)) round  div * ","value to_f  div * ","value round  div * ","value round abs  div * "]}," ActiveSupport Duration Scalar %":{"type":"method","name":"%","children":[],"call":[" calculate ","Duration  build "," value % ","other value "," value ","Duration  === "]}," ActiveSupport Concurrency LoadInterlockAwareMonitor mon_enter":{"type":"method","name":"mon_enter","children":[],"call":["ActiveSupport Dependencies  interlock permit_concurrent_loads ","ActiveSupport Dependencies  interlock "," mon_try_enter "]}," ActiveSupport Duration encode_with":{"type":"method","name":"encode_with","children":[],"call":["coder map= "]}," ActiveSupport Duration init_with":{"type":"method","name":"init_with","children":[],"call":[" initialize ","coder [] "]}," ActiveSupport TimeZone clear":{"type":"method","name":"clear","children":[],"call":["Concurrent Map  new "]}," ActiveSupport TimeWithZone change":{"type":"method","name":"change","children":[],"call":[" class new "," period ","periods include? "," class ","new_zone periods_for_local "," time_zone "," Time  find_zone ","new_time utc_offset ","options [] "," time change "," time "," raise ","options inspect ","new_zone periods_for_local  include? ","new_zone new_zone periods_for_local _for_local "," Time  find_zone  periods_for_local "," time change  utc_offset "]}," ActiveSupport Testing TimeHelpers freeze_time":{"type":"method","name":"freeze_time","children":[],"call":[" travel_to ","Time  now "]}," ActiveSupport Testing TimeHelpers after_teardown":{"type":"method","name":"after_teardown","children":[],"call":[" travel_back "]}," ActiveSupport SecurityUtils fixed_length_secure_compare":{"type":"method","name":"fixed_length_secure_compare","children":[],"call":["res == ","byte ^ ","l shift ","b each_byte ","a unpack ","a bytesize "," raise ","a bytesize == ","b bytesize ","OpenSSL  fixed_length_secure_compare ","a unpack  shift ","OpenSSL  fixed_a unpack ength_secure_compare "]}," ActiveSupport Messages Rotator run_rotations":{"type":"method","name":"run_rotations","children":[],"call":["on_rotation call ","@rotations find "]}," ActiveSupport Messages Rotator Verifier build_rotation":{"type":"method","name":"build_rotation","children":[],"call":[" class new "," class "]}," ActiveSupport Messages Rotator Verifier verified":{"type":"method","name":"verified","children":[],"call":["verifier verified "," run_rotations "]}," ActiveSupport Messages Rotator Encryptor build_rotation":{"type":"method","name":"build_rotation","children":[],"call":[" class new "," class "]}," ActiveSupport Messages Rotator Encryptor decrypt_and_verify":{"type":"method","name":"decrypt_and_verify","children":[],"call":[" raise ","encryptor decrypt_and_verify "," run_rotations "]}," ActiveSupport Messages Rotator rotate":{"type":"method","name":"rotate","children":[],"call":["@rotations << "," build_rotation ","@options merge "," fall_back_to "]}," ActiveSupport Messages Rotator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Messages RotationConfiguration rotate":{"type":"method","name":"rotate","children":[],"call":["@encrypted << ","@signed << ","args << ","options empty? "]}," ActiveSupport Messages RotationConfiguration initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Messages Metadata fresh?":{"type":"method","name":"fresh?","children":[],"call":["Time  now utc < ","Time  iso8601 ","Time  now utc ","Time  now ","@expires_at nil? "]}," ActiveSupport Messages Metadata match?":{"type":"method","name":"match?","children":[],"call":["@purpose to_s == ","purpose to_s ","@purpose to_s "]}," ActiveSupport Messages Metadata verify":{"type":"method","name":"verify","children":[],"call":[" fresh? "," match? "," extract_metadata verify "," extract_metadata "]}," ActiveSupport Messages Metadata decode":{"type":"method","name":"decode","children":[],"call":[" Base64  strict_decode64 "]}," ActiveSupport Messages Metadata encode":{"type":"method","name":"encode","children":[],"call":[" Base64  strict_encode64 "]}," ActiveSupport Messages Metadata extract_metadata":{"type":"method","name":"extract_metadata","children":[],"call":[" new ","data [] [] ","data [] "," decode ","data key? ","data is_a? ","JSON  decode "]}," ActiveSupport Messages Metadata pick_expiry":{"type":"method","name":"pick_expiry","children":[],"call":["Time  now utc advance iso8601 ","Time  now utc advance ","Time  now utc ","Time  now ","expires_at utc iso8601 ","expires_at utc ","Metadata TIMESTAMP_SERIALIZERS  include? "," serializer "]}," ActiveSupport Messages Metadata wrap":{"type":"method","name":"wrap","children":[],"call":["JSON  encode "," new "," pick_expiry "," encode "]}," ActiveSupport Messages Metadata as_json":{"type":"method","name":"as_json","children":[],"call":[]}," ActiveSupport Messages Metadata initialize":{"type":"method","name":"initialize","children":[],"call":["Time  iso8601 ","expires_at is_a? "," parse_expires_at "]}," ActiveSupport MessageEncryptor default_cipher":{"type":"method","name":"default_cipher","children":[],"call":[" use_authenticated_message_encryption "]}," ActiveSupport Inflector Inflections define_acronym_regex_patterns":{"type":"method","name":"define_acronym_regex_patterns","children":[],"call":["@acronyms values join ","@acronyms values ","@acronyms empty? "]}," ActiveSupport HashWithIndifferentAccess slice!":{"type":"method","name":"slice!","children":[],"call":[" convert_key ","keys map! "]}," ActiveSupport HashWithIndifferentAccess slice":{"type":"method","name":"slice","children":[],"call":[" class new "," class "," convert_key ","keys map! "]}," ActiveSupport HashWithIndifferentAccess transform_keys!":{"type":"method","name":"transform_keys!","children":[],"call":[" []= "," delete "," keys each "," keys "," size "," enum_for "," block_given? ","hash [] ","NOT_GIVEN  equal? ","hash nil? "," to_enum "," block_given? ! "]}," ActiveSupport HashWithIndifferentAccess transform_keys":{"type":"method","name":"transform_keys","children":[],"call":["hash transform_keys! "," dup tap "," dup "," to_enum "," block_given? ","h transform_keys! "," block_given? ! ","NOT_GIVEN  equal? "]}," ActiveSupport HashWithIndifferentAccess fetch_values":{"type":"method","name":"fetch_values","children":[],"call":[" fetch ","indices collect "," convert_key ","indices map ","indices map! "]}," ActiveSupport EncryptedFile handle_missing_key":{"type":"method","name":"handle_missing_key","children":[],"call":[" raise "," env_key "," key_path "," raise_if_missing_key ","MissingKeyError  new "]}," ActiveSupport EncryptedFile read_key_file":{"type":"method","name":"read_key_file","children":[],"call":[" key_path binread strip "," key_path binread "," key_path "," key_path exist? "]}," ActiveSupport EncryptedFile read_env_key":{"type":"method","name":"read_env_key","children":[],"call":["ENV  [] "," env_key ","ENV  [] presence "]}," ActiveSupport EncryptedFile encryptor":{"type":"method","name":"encryptor","children":[],"call":["ActiveSupport MessageEncryptor  new ","(send nil :key) pack "," key "]}," ActiveSupport EncryptedFile decrypt":{"type":"method","name":"decrypt","children":[],"call":[" encryptor decrypt_and_verify "," encryptor "]}," ActiveSupport EncryptedFile encrypt":{"type":"method","name":"encrypt","children":[],"call":[" encryptor encrypt_and_sign "," encryptor "," check_key_length "]}," ActiveSupport EncryptedFile writing":{"type":"method","name":"writing","children":[],"call":["FileUtils  rm ","tmp_path exist? "," write ","updated_contents != ","tmp_path binread ","tmp_path binwrite ","Pathname  new ","File  join ","Dir  tmpdir ","Process  pid "," content_path basename "," content_path "," content_path basename to_s chomp "," content_path basename to_s ","Tempfile  create ","- + ","Pathname  new  exist? ","tmp_path binread  != ","Pathname  new  binread ","Pathname  new  binwrite "]}," ActiveSupport EncryptedFile change":{"type":"method","name":"change","children":[],"call":[" writing "," read "]}," ActiveSupport EncryptedFile write":{"type":"method","name":"write","children":[],"call":["FileUtils  mv "," content_path ","IO  binwrite "," encrypt "]}," ActiveSupport EncryptedFile read":{"type":"method","name":"read","children":[],"call":[" raise "," content_path "," decrypt "," content_path binread "," content_path exist? "," key nil? ! "," key nil? "," key "]}," ActiveSupport EncryptedFile key":{"type":"method","name":"key","children":[],"call":[" handle_missing_key "," read_key_file "," read_env_key "]}," ActiveSupport EncryptedFile initialize":{"type":"method","name":"initialize","children":[],"call":["Pathname  new ","path realpath ","path symlink? ","Pathname  new yield_self "]}," ActiveSupport EncryptedFile generate_key":{"type":"method","name":"generate_key","children":[],"call":[]}," ActiveSupport EncryptedFile MissingKeyError initialize":{"type":"method","name":"initialize","children":[],"call":["Missing encryption key to decrypt file with.  + "]}," ActiveSupport EncryptedFile MissingContentError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport EncryptedConfiguration deserialize":{"type":"method","name":"deserialize","children":[],"call":["YAML  load "," content_path ","config present? ","YAML  load presence ","doc presence ","YAML  unsafe_load ","YAML  respond_to? "," raise ","InvalidContentError  new ","config presence ","YAML  load  present? ","YAML  unsafe_load  present? ","YAML  load  presence ","YAML  unsafe_load  presence "]}," ActiveSupport EncryptedConfiguration serialize":{"type":"method","name":"serialize","children":[],"call":["YAML  dump ","config present? "]}," ActiveSupport EncryptedConfiguration options":{"type":"method","name":"options","children":[],"call":["ActiveSupport InheritableOptions  new "," config "," deep_transform "]}," ActiveSupport EncryptedConfiguration config":{"type":"method","name":"config","children":[],"call":[" deserialize deep_symbolize_keys "," deserialize "," read "]}," ActiveSupport EncryptedConfiguration write":{"type":"method","name":"write","children":[],"call":[" deserialize "]}," ActiveSupport EncryptedConfiguration read":{"type":"method","name":"read","children":[],"call":[]}," ActiveSupport EncryptedConfiguration initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Digest hexdigest":{"type":"method","name":"hexdigest","children":[],"call":[" hash_digest_class hexdigest [] "," hash_digest_class hexdigest "," hash_digest_class "]}," ActiveSupport Digest hash_digest_class=":{"type":"method","name":"hash_digest_class=","children":[],"call":[" raise ","klass respond_to? "]}," ActiveSupport Digest hash_digest_class":{"type":"method","name":"hash_digest_class","children":[],"call":[]}," ActiveSupport Deprecation Behavior arity_coerce":{"type":"method","name":"arity_coerce","children":[],"call":["behavior call "," lambda ","behavior arity == ","behavior arity "," raise ","behavior inspect ","behavior respond_to? ","deprecator gem_name ","deprecator deprecation_horizon "," arity_of_callable "]}," ActiveSupport CurrentAttributes compute_attributes":{"type":"method","name":"compute_attributes","children":[],"call":["(send\n  (lvar :keys) :collect) to_h "," public_send ","keys collect ","keys index_with "]}," ActiveSupport CurrentAttributes assign_attributes":{"type":"method","name":"assign_attributes","children":[],"call":[" public_send ","new_attributes each "]}," ActiveSupport CurrentAttributes reset":{"type":"method","name":"reset","children":[],"call":[" attributes= "," run_callbacks "]}," ActiveSupport CurrentAttributes set":{"type":"method","name":"set","children":[],"call":[" assign_attributes "," compute_attributes ","set_attributes keys "]}," ActiveSupport CurrentAttributes initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport CurrentAttributes method_missing":{"type":"method","name":"method_missing","children":[],"call":[" send "," singleton_class delegate "," singleton_class "]}," ActiveSupport CurrentAttributes current_instances":{"type":"method","name":"current_instances","children":[],"call":["Thread  current [] ","Thread  current ","IsolatedExecutionState  [] ","Thread  current thread_variable_set ","Thread  current thread_variable_get "]}," ActiveSupport CurrentAttributes generated_attribute_methods":{"type":"method","name":"generated_attribute_methods","children":[],"call":[" include ","Module  new tap ","Module  new "]}," ActiveSupport CurrentAttributes clear_all":{"type":"method","name":"clear_all","children":[],"call":[" current_instances clear "," current_instances "," reset_all "]}," ActiveSupport CurrentAttributes reset_all":{"type":"method","name":"reset_all","children":[],"call":[" current_instances each_value "," current_instances "]}," ActiveSupport CurrentAttributes resets":{"type":"method","name":"resets","children":[],"call":[" set_callback "]}," ActiveSupport CurrentAttributes attribute":{"type":"method","name":"attribute","children":[],"call":[" instance public_send "," instance "," define_singleton_method ","names each "," attributes []= ","name to_sym "," attributes "," define_method "," attributes [] "," generated_attribute_methods module_eval "," generated_attribute_methods ","batch << << << ","batch << << ","batch << ","owner define_cached_method ","ActiveSupport CodeGenerator  batch "," singleton_class "," raise ","invalid_attribute_names join ","invalid_attribute_names any? ","names map & ","names map ","names map &  join ","names map &  any? "]}," ActiveSupport CurrentAttributes instance":{"type":"method","name":"instance","children":[],"call":[" new "," current_instances [] "," name "," current_instances "," current_instances_key "]}," ActiveSupport IncludeTimeWithZone include?":{"type":"method","name":"include?","children":[],"call":[" cover? "," last is_a? "," last "," first is_a? "," first "," end is_a? "," end "," begin is_a? "," begin ","ActiveSupport Deprecation  warn ","(str \"          Using `Range#include?` to check the inclusion of a value in\\n\") squish "]}," IO as_json":{"type":"method","name":"as_json","children":[],"call":[" to_s "]}," Module redefine_singleton_method":{"type":"method","name":"redefine_singleton_method","children":[],"call":[" singleton_class redefine_method "," singleton_class "]}," Module silence_redefinition_of_method":{"type":"method","name":"silence_redefinition_of_method","children":[],"call":[" remove_method "," alias_method "," private_method_defined? "," method_defined? "]}," DateAndTime Calculations prev_occurring":{"type":"method","name":"prev_occurring","children":[],"call":[" advance ","ago -@ ","ago > ","current_day_number - ","DAYS_INTO_WEEK  fetch "," wday - "," wday "," wday != "," ago ","ago days ","current_day_number -  -@ "," wday -  -@ ","current_day_number -  > "," wday -  > "," wday -  - "," current_day_number -  ","  wday -  ","current_day_number -  days "," wday -  days "]}," DateAndTime Calculations next_occurring":{"type":"method","name":"next_occurring","children":[],"call":[" advance ","from_now > ","DAYS_INTO_WEEK  fetch - ","DAYS_INTO_WEEK  fetch "," wday - "," wday "," wday != "," since ","from_now days ","DAYS_INTO_WEEK  fetch -  > ","DAYS_INTO_WEEK  fetch -  days "]}," DateAndTime Calculations last_year":{"type":"method","name":"last_year","children":[],"call":[" years_ago "]}," DateAndTime Calculations last_month":{"type":"method","name":"last_month","children":[],"call":[" months_ago "]}," ActiveSupport Callbacks Callback check_conditionals":{"type":"method","name":"check_conditionals","children":[],"call":[" raise ","(str \"                Passing string to be evaluated in :if and :unless conditional\\n\") squish ","c is_a? ","conditionals any? ","conditionals freeze "," Array ","conditionals blank? "," Array  any? "," Array  freeze "," Array  blank? "]}," ActiveSupport Cache Entry marshaled_value":{"type":"method","name":"marshaled_value","children":[],"call":["Marshal  dump "]}," ActiveSupport Cache Entry compress!":{"type":"method","name":"compress!","children":[],"call":["Zlib Deflate  deflate "," marshaled_value ","compressed bytesize < ","compressed bytesize ","Marshal  dump ","uncompressed_size >= ","serialized bytesize ","@value bytesize ","Zlib Deflate  deflate  bytesize < ","Zlib Deflate  deflate  bytesize ","unZlib Deflate  deflate _size >= ","serialized bytesize  >= ","@value bytesize  >= ","Marshal  dump  bytesize "]}," ActiveSupport Cache Entry mismatched?":{"type":"method","name":"mismatched?","children":[],"call":["@version != "]}," ActiveSupport Cache Store expanded_version":{"type":"method","name":"expanded_version","children":[],"call":[" expanded_version ","key to_a ","key respond_to? ","(send\n  (lvar :key) :map) compact to_param ","(send\n  (lvar :key) :map) compact ","key map ","key is_a? ","key cache_version to_param ","key cache_version ","(send\n  (lvar :key) :map) tap to_param ","(send\n  (lvar :key) :map) tap "]}," ActiveSupport Cache Store normalize_version":{"type":"method","name":"normalize_version","children":[],"call":[" expanded_version ","options [] try ","options [] "]}," ActiveSupport Cache Store namespace_key":{"type":"method","name":"namespace_key","children":[],"call":["namespace call ","namespace respond_to? ","options [] "," merged_options ","key dup force_encoding ","key dup ","key encoding != ","key encoding ","namespace call  call ","options []  call ","namespace call  respond_to? ","options []  respond_to? "," merged_options  [] "," merged_ merged_options  ","key dup force_encoding  dup force_encoding ","key dup force_encoding  dup ","key dup force_encoding  encoding != ","key dup force_encoding  encoding "]}," ActiveSupport Cache Store write_multi_entries":{"type":"method","name":"write_multi_entries","children":[],"call":[" write_entry ","hash each "]}," ActiveSupport Cache Store read_multi_entries":{"type":"method","name":"read_multi_entries","children":[],"call":["results []= ","entry value ","entry mismatched? "," delete_entry ","entry expired? "," read_entry "," normalize_version "," normalize_key ","names each ","entry mismatched? ! ","names each_with_object "," read_entry  value "," read_entry  mismatched? "," delete_ read_entry  "," read_entry  expired? "," read_ read_entry  "," normalize_ normalize_version  "," normalize_ normalize_key  "," read_entry  mismatched? ! "]}," ActiveSupport Cache Store write_multi":{"type":"method","name":"write_multi","children":[],"call":[" write_multi_entries ","memo []= ","Entry  new ","options merge "," normalize_version "," normalize_key ","hash each_with_object "," instrument "," merged_options "," instrument_multi ","hash empty? "," merged_options  merge "," merged_ merged_options  "]}," ActiveSupport Cache Store ensure_connection_pool_added!":{"type":"method","name":"ensure_connection_pool_added!","children":[],"call":[" raise ","$stderr puts "," require "]}," ActiveSupport Cache Store retrieve_pool_options":{"type":"method","name":"retrieve_pool_options","children":[],"call":["pool_options []= ","options delete ","options [] "," tap ","pool_options empty? "," raise ","pool_options inspect ","DEFAULT_POOL_OPTIONS  merge "," Float ","pool_options [] ","pool_options key? "," Integer ","ActiveSupport  deprecator warn ","options [] inspect ","ActiveSupport  deprecator ","options key? ","DEFAULT_POOL_OPTIONS  merge  []= ","options delete  []= ","DEFAULT_POOL_OPTIONS  merge  empty? ","options delete  empty? ","DEFAULT_POOL_OPTIONS  merge  inspect ","options delete  inspect ","DEFAULT_POOL_OPTIONS  merge  [] ","options delete  [] ","DEFAULT_POOL_OPTIONS  merge  key? ","options delete  key? "]}," ActiveSupport Cache Strategy LocalCache read_multi_entries":{"type":"method","name":"read_multi_entries","children":[],"call":["local_entries merge! ","missed_keys any? ","keys - ","local_entries keys "," local_cache read_multi_entries "," local_cache "," deserialize_entry value "," deserialize_entry ","local_entries transform_values! "," local_cache read_multi_entries  merge! ","keys -  any? "," local_cache read_multi_entries  keys "," local_cache read_multi_entries  transform_values! "]}," ActiveSupport Cache Strategy LocalCache LocalStore read_multi_entries":{"type":"method","name":"read_multi_entries","children":[],"call":["values []= ","entry value "," read_entry ","keys each ","Hash  [] ","(send\n  (lvar :keys) :map) keep_if ","keys map ","@data slice "," read_entry  value "," read_ read_entry  "]}," ActiveSupport Cache RedisCacheStore handle_exception":{"type":"method","name":"handle_exception","children":[],"call":[" warn ","failsafe backtrace join ","failsafe backtrace ","failsafe message ","failsafe class ","@error_handler call "]}," ActiveSupport Cache RedisCacheStore failsafe":{"type":"method","name":"failsafe","children":[],"call":[" handle_exception ","ActiveSupport  error_reporter "]}," ActiveSupport Cache RedisCacheStore serialize_entries":{"type":"method","name":"serialize_entries","children":[],"call":[" serialize_entry ","entries transform_values "]}," ActiveSupport Cache RedisCacheStore serialize_entry":{"type":"method","name":"serialize_entry","children":[],"call":["Marshal  dump ","entry value to_s ","entry value "]}," ActiveSupport Cache RedisCacheStore deserialize_entry":{"type":"method","name":"deserialize_entry","children":[],"call":["Entry  new ","entry is_a? ","Marshal  load ","ActiveSupport Deprecation  warn ","(str \"                Using a different value for the raw option when reading and writing\\n\") squish ","raw != ","serialized_entry equal? ","payload nil? ! ","payload nil? "]}," ActiveSupport Cache RedisCacheStore truncate_key":{"type":"method","name":"truncate_key","children":[],"call":["key byteslice "," max_key_bytesize - ","suffix bytesize "," max_key_bytesize "," Digest SHA2  hexdigest ","key bytesize > ","key bytesize ","Digest SHA2  hexdigest ","ActiveSupport Digest  hexdigest "]}," ActiveSupport Cache RedisCacheStore normalize_key":{"type":"method","name":"normalize_key","children":[],"call":[" truncate_key "," b "]}," ActiveSupport Cache RedisCacheStore write_multi_entries":{"type":"method","name":"write_multi_entries","children":[],"call":["c mapped_mset "," serialize_entries ","options [] "," redis with "," redis "," failsafe ","expires_in nil? "," mset_capable? ","entries any? "," redis mapped_mset "," write_entry ","sharded_entries each ","options []= ","options dup "," pipeline_entries ","entries empty? ","options dup  [] ","options dup  []= ","options dup  dup "]}," ActiveSupport Cache RedisCacheStore delete_entry":{"type":"method","name":"delete_entry","children":[],"call":["c del "," redis with "," redis "," failsafe "," redis del ","c del == "," redis then "]}," ActiveSupport Cache RedisCacheStore write_entry":{"type":"method","name":"write_entry","children":[],"call":["c set "," redis with "," redis ","modifiers []= ","(send\n  (int 1000) :*\n  (send\n    (lvar :expires_in) :to_f)) ceil ","1000 * ","expires_in to_f "," failsafe ","5 minutes ","raw ! ","expires_in > "," serialize_entry "," redis set ","entry value to_s ","entry value "," write_serialized_entry ","entry  serialize_entry  to_s ","entry entry value to_s  to_s ","entry  serialize_entry  ","entry entry value to_s  "," write_ serialize_entry  "]}," ActiveSupport Cache RedisCacheStore read_multi_mget":{"type":"method","name":"read_multi_mget","children":[],"call":["results []= ","entry value ","entry mismatched? "," normalize_version ","entry expired? ","entry nil? "," deserialize_entry ","names zip each_with_object ","names zip ","c mget "," redis with "," redis "," failsafe "," normalize_key ","names map "," merged_options ","names extract_options! "," redis mget ","options fetch ","names == "," deserialize_entry  value "," deserialize_entry  mismatched? "," deserialize_entry  expired? "," deserialize_entry  nil? "," deserialize_ deserialize_entry  "," merged_ merged_options  "," merged_names extract_options!  ","names extract_ merged_options ! ","names extract_names extract_options! ! "," merged_options  fetch ","names extract_options!  fetch "]}," ActiveSupport Cache RedisCacheStore read_multi_entries":{"type":"method","name":"read_multi_entries","children":[],"call":[" read_multi_mget "," mget_capable? ","results []= ","entry value ","entry mismatched? "," normalize_version ","entry expired? ","entry nil? "," deserialize_entry ","names zip each_with_object ","names zip ","c mget "," redis then "," redis "," failsafe "," normalize_key ","names map ","names == "," merged_options "," deserialize_entry  value "," deserialize_entry  mismatched? "," deserialize_entry  expired? "," deserialize_entry  nil? "," deserialize_ deserialize_entry  "," merged_ merged_options  "]}," ActiveSupport Cache RedisCacheStore read_entry":{"type":"method","name":"read_entry","children":[],"call":[" deserialize_entry ","c get "," redis with "," redis "," failsafe "," redis get ","options fetch "," read_serialized_entry "]}," ActiveSupport Cache RedisCacheStore set_redis_capabilities":{"type":"method","name":"set_redis_capabilities","children":[],"call":[" redis "," redis with "]}," ActiveSupport Cache RedisCacheStore mset_capable?":{"type":"method","name":"mset_capable?","children":[],"call":[" set_redis_capabilities "]}," ActiveSupport Cache RedisCacheStore mget_capable?":{"type":"method","name":"mget_capable?","children":[],"call":[" set_redis_capabilities "]}," ActiveSupport Cache RedisCacheStore clear":{"type":"method","name":"clear","children":[],"call":["c flushdb "," redis with "," redis "," delete_matched "," merged_options [] "," merged_options "," failsafe "," redis flushdb "," redis then "]}," ActiveSupport Cache RedisCacheStore cleanup":{"type":"method","name":"cleanup","children":[],"call":[]}," ActiveSupport Cache RedisCacheStore decrement":{"type":"method","name":"decrement","children":[],"call":["c decrby "," normalize_key "," redis with "," redis "," failsafe "," instrument "," redis decrby "," write_key_expiry ","c decrby tap "," merged_options "," change_counter ","amount -@ "," normalize_ normalize_key  "," write_ normalize_key _expiry "," merged_ merged_options  "]}," ActiveSupport Cache RedisCacheStore increment":{"type":"method","name":"increment","children":[],"call":["c incrby "," normalize_key "," redis with "," redis "," failsafe "," instrument "," redis incrby "," write_key_expiry ","c incrby tap "," merged_options "," change_counter "," normalize_ normalize_key  "," write_ normalize_key _expiry "," merged_ merged_options  "]}," ActiveSupport Cache RedisCacheStore delete_matched":{"type":"method","name":"delete_matched","children":[],"call":[" raise ","matcher inspect ","c eval "," namespace_key "," redis with "," redis "," instrument "," redis eval ","c del ","keys empty? ","c scan ","cursor == ","String  === ","node del ","node scan ","nodes each ","c nodes ","c respond_to? "," redis then ","c nodes  each ","c c nodes  "]}," ActiveSupport Cache RedisCacheStore read_multi":{"type":"method","name":"read_multi","children":[],"call":["payload []= ","results keys "," read_multi_mget tap "," read_multi_mget "," instrument "," options "," mget_capable? "," read_multi_entries tap "," read_multi_entries "," instrument_multi ","names extract_options! ","names empty? "," names extract_options!  ","names extract_names extract_options! ! "]}," ActiveSupport Cache RedisCacheStore inspect":{"type":"method","name":"inspect","children":[],"call":["instance inspect "," options inspect "," options "," class "," redis inspect "," redis "]}," ActiveSupport Cache RedisCacheStore redis":{"type":"method","name":"redis","children":[],"call":[" class build_redis "," redis_options "," class "," ConnectionPool  new "," class send ","pool_options any? "," wrap_in_connection_pool "," class send  any? "]}," ActiveSupport Cache RedisCacheStore initialize":{"type":"method","name":"initialize","children":[],"call":[" class build_redis "," class "," ConnectionPool  new "," class send ","redis_options extract! "]}," ActiveSupport Cache RedisCacheStore build_redis_client":{"type":"method","name":"build_redis_client","children":[],"call":[" Redis  new ","DEFAULT_REDIS_OPTIONS  merge ","redis_options merge "]}," ActiveSupport Cache RedisCacheStore build_redis_distributed_client":{"type":"method","name":"build_redis_distributed_client","children":[],"call":["dist add_node ","urls each "," Redis Distributed  new tap "," Redis Distributed  new ","DEFAULT_REDIS_OPTIONS  merge ","RedisDistributedWithConnectionPool  new tap ","RedisDistributedWithConnectionPool  new "]}," ActiveSupport Cache RedisCacheStore build_redis":{"type":"method","name":"build_redis","children":[],"call":[" build_redis_client ","urls first "," build_redis_distributed_client ","urls size > ","urls size ","redis call ","redis is_a? "," Array ","redis respond_to? ","urls empty? "," Array  first "," Array  size > "," Array  size "," Array  empty? "]}," ActiveSupport Cache RedisCacheStore LocalCacheWithRaw write_multi_entries":{"type":"method","name":"write_multi_entries","children":[],"call":["(send\n  (lvar :entries) :map) to_h ","raw_entry expires_at= ","entry expires_at ","Entry  new "," serialize_entry ","entries map "," local_cache ","options [] ","entry value to_s ","entry value ","Entry  new  expires_at= "]}," ActiveSupport Cache RedisCacheStore LocalCacheWithRaw write_entry":{"type":"method","name":"write_entry","children":[],"call":["raw_entry expires_at= ","entry expires_at ","Entry  new "," serialize_entry "," local_cache ","options [] ","entry value to_s ","entry value ","Entry  new  expires_at= "]}," ActiveSupport Cache RedisCacheStore LocalCacheWithRaw read_entry":{"type":"method","name":"read_entry","children":[],"call":[" deserialize_entry ","entry value "," local_cache ","options [] "," deserialize_ deserialize_entry  "," deserialize_entry  value "]}," ActiveSupport Cache ConnectionPoolLike with":{"type":"method","name":"with","children":[],"call":[]}," ActiveSupport Cache MemCacheStore read_multi_entries":{"type":"method","name":"read_multi_entries","children":[],"call":["values []= ","entry value ","keys_to_names [] ","entry mismatched? "," normalize_version ","entry expired? "," deserialize_entry ","raw_values each ","c get_multi ","keys_to_names keys ","@data with ","Hash  [] "," normalize_key ","names map ","names index_by ","options [] ","entry nil? "," deserialize_entry  value ","Hash  []  [] "," deserialize_entry  mismatched? "," deserialize_entry  expired? "," deserialize_ deserialize_entry  ","Hash  []  keys "," deserialize_entry  nil? "]}," ActiveSupport Cache RedisCacheStore wrap_in_connection_pool":{"type":"method","name":"wrap_in_connection_pool","children":[],"call":["ConnectionPool  new "," class send "," class ","pool_options empty? "," redis_options ","redis_connection is_a? "," class send  empty? "]}," ActiveSupport Cache RedisDistributedWithConnectionPool add_node":{"type":"method","name":"add_node","children":[],"call":["@ring add_node "," Redis  new ","ConnectionPool  new ","@default_options merge ","options is_a? ","pool_options empty? ","pool_options []= ","options [] ","@default_@default_options merge  merge ","@default_options merge  is_a? ","pool_@default_options merge  empty? ","pool_@default_options merge  []= ","@default_options merge  [] "]}," ActiveSupport Testing SetupAndTeardown prepended":{"type":"method","name":"prepended","children":[],"call":[]}," ActiveSupport Subscriber now":{"type":"method","name":"now","children":[],"call":["Process  clock_gettime "]}," ActiveSupport HashWithIndifferentAccess assoc":{"type":"method","name":"assoc","children":[],"call":[" convert_key "]}," ActiveSupport CompareWithRange cover?":{"type":"method","name":"cover?","children":[],"call":["value last send "," last ","value last ","value first ","value exclude_end? ! ","value exclude_end? "," exclude_end? ","value is_a? ","value_max send ","value max "," exclude_end? ! "," end nil? "," end ","value_max public_send ","value begin public_send ","value end ","value begin ","value last  send ","value max  send ","value last  public_send ","value max  public_send "]}," ActiveSupport CompareWithRange include?":{"type":"method","name":"include?","children":[],"call":["value last send "," last ","value last ","value first ","value exclude_end? ! ","value exclude_end? "," exclude_end? ","value is_a? ","value_max send ","value max "," exclude_end? ! "," end nil? "," end ","value_max public_send ","value begin public_send ","value end ","value begin ","value last  send ","value max  send ","value last  public_send ","value max  public_send "]}," ActiveSupport CompareWithRange ===":{"type":"method","name":"===","children":[],"call":["value last send "," last ","value last ","value first ","value exclude_end? ! ","value exclude_end? "," exclude_end? ","value is_a? ","value_max send ","value max "," exclude_end? ! "," end nil? "," end ","value_max public_send ","value begin public_send ","value end ","value begin ","value last  send ","value max  send ","value last  public_send ","value max  public_send "]}," ERB Util xml_name_escape":{"type":"method","name":"xml_name_escape","children":[],"call":["starting_char + ","name [] gsub ","name [] ","name size == ","name size ","name blank? ","name to_s ","starting_char << ","following_chars gsub! ","starting_char gsub! ","name match? ","name [] gsub  + ","name []  + ","name to_s  [] gsub ","name to_s  [] ","name to_s  size == ","name to_s  size ","name to_s  blank? ","name to_s  to_s ","name [] gsub  << ","name []  << ","name [] gsub  gsub! ","name []  gsub! ","name to_s  match? "]}," ActiveSupport Concurrency LoadInterlockAwareMonitor synchronize":{"type":"method","name":"synchronize","children":[],"call":[" mon_exit ","Thread  handle_interrupt "," mon_enter "]}," ActiveSupport Testing Parallelization add_setup_exception":{"type":"method","name":"add_setup_exception","children":[],"call":["result failures prepend ","Minitest UnexpectedError  new ","result failures "]}," ActiveSupport Testing Parallelization shutdown":{"type":"method","name":"shutdown","children":[],"call":[" raise ","@queue length ","@queue length > ","Process  waitpid ","@pool each ","@queue << ","@queue_size times ","@worker_pool each ","@queue_server shutdown "]}," ActiveSupport Testing Parallelization <<":{"type":"method","name":"<<","children":[],"call":["@queue << ","@queue_server << "]}," ActiveSupport Testing Parallelization start":{"type":"method","name":"start","children":[],"call":[" run_cleanup ","queue record ","failure exception= ","DRb DRbRemoteError  new ","failure exception ","result failures each ","result failures "," add_setup_exception ","Minitest  run_one_method ","klass with_info_handler ","job [] ","queue pop ","DRbObject  new_with_uri "," after_fork ","DRb  stop_service "," fork ","@queue_size times map ","@queue_size times ","Minitest UnexpectedError  new ","failure error ","failure respond_to? ","result failures map! ","Worker  new start ","Worker  new ","@worker_count times map ","@worker_count times ","DRbObject  new_with_uri  record ","Minitest  run_one_method  failures each ","Minitest  run_one_method  failures ","Minitest  run_one_job []  ","job []  with_info_handler ","queue pop  [] ","DRbObject  new_with_uri  pop ","@DRbObject  new_with_uri _size times map ","@DRbObject  new_with_uri _size times ","failure DRb DRbRemoteError  new  ","Minitest  run_one_method  failures map! "]}," ActiveSupport Testing Parallelization run_cleanup":{"type":"method","name":"run_cleanup","children":[],"call":["cb call "," class run_cleanup_hooks each "," class run_cleanup_hooks "," class "]}," ActiveSupport Testing Parallelization after_fork":{"type":"method","name":"after_fork","children":[],"call":["cb call "," class after_fork_hooks each "," class after_fork_hooks "," class "]}," ActiveSupport Testing Parallelization initialize":{"type":"method","name":"initialize","children":[],"call":["DRb  start_service uri ","DRb  start_service ","Server  new "]}," ActiveSupport Testing Parallelization run_cleanup_hook":{"type":"method","name":"run_cleanup_hook","children":[],"call":[]}," ActiveSupport Testing Parallelization after_fork_hook":{"type":"method","name":"after_fork_hook","children":[],"call":[]}," ActiveSupport Testing Parallelization Server pop":{"type":"method","name":"pop","children":[],"call":["@queue pop ","@in_flight []= ","test [] ","test [] to_s ","@queue pop  [] ","@queue pop  [] to_s "]}," ActiveSupport Testing Parallelization Server length":{"type":"method","name":"length","children":[],"call":["@queue length "]}," ActiveSupport Testing Parallelization Server <<":{"type":"method","name":"<<","children":[],"call":["@queue << ","o []= ","DRbObject  new ","o [] "]}," ActiveSupport Testing Parallelization Server record":{"type":"method","name":"record","children":[],"call":["reporter record ","reporter synchronize "," raise ","result is_a? ","@in_flight delete ","result name ","result klass "]}," ActiveSupport Testing Parallelization Server initialize":{"type":"method","name":"initialize","children":[],"call":["Queue  new ","Concurrent Map  new "]}," ActiveSupport Testing MethodCallAssertions assert_not_called_on_instance_of":{"type":"method","name":"assert_not_called_on_instance_of","children":[],"call":[" assert_called_on_instance_of "]}," ActiveSupport Testing MethodCallAssertions assert_called_on_instance_of":{"type":"method","name":"assert_called_on_instance_of","children":[],"call":["klass undef_method ","klass alias_method "," assert_equal ","klass define_method "]}," ActiveSupport TestCase parallelize_teardown":{"type":"method","name":"parallelize_teardown","children":[],"call":["ActiveSupport Testing Parallelization  run_cleanup_hook "]}," ActiveSupport TestCase parallelize_setup":{"type":"method","name":"parallelize_setup","children":[],"call":["ActiveSupport Testing Parallelization  after_fork_hook "]}," ActiveSupport TestCase parallelize":{"type":"method","name":"parallelize","children":[],"call":[" parallelize_me! ","Minitest  parallel_executor= "," lock_threads= ","with == "," lock_threads "," raise ","Minitest Parallel Executor  new ","Testing Parallelization  new ","workers <= ","ENV  [] to_i ","ENV  [] ","Concurrent  physical_processor_count ","workers == ","ActiveSupport Testing ParallelizeExecutor  new ","ENV  [] to_i  <= ","Concurrent  physical_processor_count  <= ","ENV  [] to_i  == ","Concurrent  physical_processor_count  == "]}," ActiveSupport Subscriber pattern_subscribed?":{"type":"method","name":"pattern_subscribed?","children":[],"call":[" subscriber patterns key? "," subscriber patterns "," subscriber "]}," ActiveSupport Subscriber prepare_pattern":{"type":"method","name":"prepare_pattern","children":[],"call":[" namespace "]}," ActiveSupport Subscriber invalid_event?":{"type":"method","name":"invalid_event?","children":[],"call":["(str \"start\") include? ","event to_s ","(sym :start) include? ","event to_sym "]}," ActiveSupport Subscriber find_attached_subscriber":{"type":"method","name":"find_attached_subscriber","children":[],"call":["attached_subscriber instance_of? "," subscribers find "," subscribers "]}," ActiveSupport Subscriber remove_event_subscriber":{"type":"method","name":"remove_event_subscriber","children":[],"call":[" subscriber patterns delete "," subscriber patterns "," subscriber "," notifier unsubscribe "," subscriber patterns [] "," notifier "," pattern_subscribed? "," prepare_pattern "," invalid_event? ","event to_s "," subscriber  prepare_pattern s delete "," subscriber  prepare_pattern s "," subscriber  prepare_pattern s [] ","  prepare_pattern _subscribed? "," prepare_ prepare_pattern  "]}," ActiveSupport Subscriber detach_from":{"type":"method","name":"detach_from","children":[],"call":[" remove_event_subscriber "," subscriber public_methods each "," subscriber public_methods "," subscriber "," subscribers delete "," subscribers "," find_attached_subscriber "," fetch_public_methods each "," fetch_public_methods "]}," ActiveSupport ParameterFilter CompiledFilter value_for_key":{"type":"method","name":"value_for_key","children":[],"call":["parents pop "," deep_regexps ","b call ","b arity == ","b arity "," blocks each "," blocks ","value dup ","value duplicable? ","key dup ","key duplicable? "," blocks any? ","parents push "," value_for_key ","value map ","value is_a? "," call ","r match? "," deep_regexps any? ","parents join "," regexps any? "," regexps ","v is_a? ","key to_s ","value dup  dup "," call  dup ","value dup  duplicable? "," call  duplicable? ","key dup  dup ","key dup  duplicable? "," value dup _for_key ","  call _for_key "," value_for_key dup  ","value dup  map "," call  map ","value dup  is_a? "," call  is_a? ","key dup  to_s "]}," ActiveSupport ParameterFilter CompiledFilter call":{"type":"method","name":"call","children":[],"call":["filtered_params []= "," value_for_key ","params each ","params class new ","params class ","params class new  []= "]}," ActiveSupport ParameterFilter CompiledFilter initialize":{"type":"method","name":"initialize","children":[],"call":["deep_regexps any? "]}," ActiveSupport ParameterFilter CompiledFilter compile":{"type":"method","name":"compile","children":[],"call":[]}," ActiveSupport ParameterFilter compiled_filter":{"type":"method","name":"compiled_filter","children":[],"call":["CompiledFilter  compile "]}," ActiveSupport ParameterFilter filter_param":{"type":"method","name":"filter_param","children":[],"call":[" compiled_filter value_for_key "," compiled_filter ","@filters empty? "," value_for_key "]}," ActiveSupport ParameterFilter filter":{"type":"method","name":"filter","children":[],"call":[" compiled_filter call "," compiled_filter "," call ","params dup "]}," ActiveSupport ParameterFilter initialize":{"type":"method","name":"initialize","children":[],"call":[" compile_filters! "]}," ActiveSupport Notifications Event now_allocations":{"type":"method","name":"now_allocations","children":[],"call":["GC  stat "]}," ActiveSupport Notifications Event now_cpu":{"type":"method","name":"now_cpu","children":[],"call":["Process  clock_gettime "]}," ActiveSupport Notifications Event now":{"type":"method","name":"now","children":[],"call":["Concurrent  monotonic_time ","Process  clock_gettime "]}," ActiveSupport Notifications Event allocations":{"type":"method","name":"allocations","children":[],"call":["@allocation_count_finish - "]}," ActiveSupport Notifications Event idle_time":{"type":"method","name":"idle_time","children":[],"call":[" duration - "," cpu_time "," duration ","diff > "," duration -  > "]}," ActiveSupport Notifications Event cpu_time":{"type":"method","name":"cpu_time","children":[],"call":["(send\n  (ivar :@cpu_time_finish) :-\n  (ivar :@cpu_time_start)) * ","@cpu_time_finish - "]}," ActiveSupport Notifications Event end=":{"type":"method","name":"end=","children":[],"call":["ActiveSupport Deprecation  deprecation_warning "]}," ActiveSupport Notifications Event finish!":{"type":"method","name":"finish!","children":[],"call":[" now_allocations "," now "," now_cpu "]}," ActiveSupport Notifications Event start!":{"type":"method","name":"start!","children":[],"call":[" now_allocations "," now_cpu "," now "]}," ActiveSupport Notifications Event clock_gettime_supported?":{"type":"method","name":"clock_gettime_supported?","children":[],"call":[]}," ActiveSupport Notifications Fanout Subscribers AllMessages unsubscribe!":{"type":"method","name":"unsubscribe!","children":[],"call":[]}," ActiveSupport Notifications Fanout Subscribers EventObject build_event":{"type":"method","name":"build_event","children":[],"call":["ActiveSupport Notifications Event  new "]}," ActiveSupport Notifications Fanout Subscribers EventObject finish":{"type":"method","name":"finish","children":[],"call":["@delegate call ","event finish! ","stack pop ","Thread  current [] ","Thread  current ","event payload= ","IsolatedExecutionState  [] ","stack pop  finish! ","Thread  current []  pop ","IsolatedExecutionState  []  pop ","stack pop  payload= "]}," ActiveSupport Notifications Fanout Subscribers EventObject start":{"type":"method","name":"start","children":[],"call":["stack push ","event start! "," build_event ","Thread  current [] ","Thread  current ","IsolatedExecutionState  [] "," build_event  start! "," build_ build_event  "]}," ActiveSupport Notifications Fanout Subscribers Evented unsubscribe!":{"type":"method","name":"unsubscribe!","children":[],"call":[" pattern unsubscribe! "," pattern "]}," ActiveSupport Notifications Fanout Subscribers Matcher ===":{"type":"method","name":"===","children":[],"call":[" exclusions include? ! "," exclusions include? "," exclusions "," pattern === "," pattern "]}," ActiveSupport Notifications Fanout Subscribers Matcher unsubscribe!":{"type":"method","name":"unsubscribe!","children":[],"call":[" exclusions << ","name -@ "," exclusions "," pattern === "," pattern "]}," ActiveSupport Notifications Fanout Subscribers Matcher initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new "]}," ActiveSupport Notifications Fanout Subscribers Matcher wrap":{"type":"method","name":"wrap","children":[],"call":[]}," ActiveSupport Notifications Fanout Subscribers wrap_all":{"type":"method","name":"wrap_all","children":[],"call":[]}," ActiveSupport Notifications Fanout Subscribers event_object_subscriber":{"type":"method","name":"event_object_subscriber","children":[],"call":[]}," ActiveSupport LoggerThreadSafeLevel add":{"type":"method","name":"add","children":[],"call":["(or\n  (lvar :severity)\n  (const nil :UNKNOWN)) < "," level ","@logdev nil? ","@logdev write "," format_message ","Time  now "," format_severity "," block_given? ","message nil? ","severity < "]}," ActiveSupport LoggerSilence silence":{"type":"method","name":"silence","children":[],"call":[" local_level= "," local_level "," silencer "," log_at "]}," ActiveSupport HashWithIndifferentAccess except":{"type":"method","name":"except","children":[],"call":[" slice "," keys - "," convert_key ","keys map "," keys "," dup except! "," dup "]}," ActiveSupport EventedFileUpdateChecker normalize_dirs!":{"type":"method","name":"normalize_dirs!","children":[],"call":["dir realpath ","dir exist? ","@dirs transform_keys! "]}," ActiveSupport EventedFileUpdateChecker shutdown!":{"type":"method","name":"shutdown!","children":[],"call":["Listen  stop "]}," ActiveSupport DescendantsTracker DescendantsArray reject!":{"type":"method","name":"reject!","children":[],"call":["ref __getobj__ ","@refs reject! "]}," ActiveSupport DescendantsTracker DescendantsArray cleanup!":{"type":"method","name":"cleanup!","children":[],"call":["ref weakref_alive? ! ","ref weakref_alive? ","@refs delete_if "]}," ActiveSupport DescendantsTracker DescendantsArray refs_size":{"type":"method","name":"refs_size","children":[],"call":["@refs size "]}," ActiveSupport DescendantsTracker DescendantsArray each":{"type":"method","name":"each","children":[],"call":["ref __getobj__ ","@refs each ","@refs reject! "]}," ActiveSupport DescendantsTracker DescendantsArray <<":{"type":"method","name":"<<","children":[],"call":["@refs << ","WeakRef  new "," cleanup! "]}," ActiveSupport DescendantsTracker DescendantsArray initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["@refs dup ","@refs dup  dup "]}," ActiveSupport DescendantsTracker DescendantsArray initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Deprecation DeprecatedConstantProxy method_missing":{"type":"method","name":"method_missing","children":[],"call":[" target __send__ "," target ","@deprecator warn "," caller_locations "]}," ActiveSupport Deprecation DeprecatedConstantProxy const_missing":{"type":"method","name":"const_missing","children":[],"call":[" target const_get "," target ","@deprecator warn "," caller_locations "]}," ActiveSupport Deprecation DeprecatedConstantProxy inspect":{"type":"method","name":"inspect","children":[],"call":[" target inspect "," target "]}," ActiveSupport Deprecation DeprecatedConstantProxy new":{"type":"method","name":"new","children":[],"call":[]}," ActiveSupport Dependencies real_mod_name":{"type":"method","name":"real_mod_name","children":[],"call":["UNBOUND_METHOD_MODULE_NAME  bind call ","UNBOUND_METHOD_MODULE_NAME  bind "]}," ActiveSupport Dependencies Loadable include_into":{"type":"method","name":"include_into","children":[],"call":[]}," ActiveSupport Dependencies ModuleConstMissing include_into":{"type":"method","name":"include_into","children":[],"call":[]}," ActiveSupport Dependencies ZeitwerkIntegration decorate_dependencies":{"type":"method","name":"decorate_dependencies","children":[],"call":["Object  prepend ","Dependencies  singleton_class prepend ","Dependencies  singleton_class ","Dependencies  unhook! "," alias_method ","Object  class_eval "]}," ActiveSupport Dependencies ZeitwerkIntegration freeze_paths":{"type":"method","name":"freeze_paths","children":[],"call":["Dependencies  _eager_load_paths freeze ","Dependencies  _eager_load_paths ","Dependencies  autoload_once_paths freeze ","Dependencies  autoload_once_paths ","Dependencies  autoload_paths freeze ","Dependencies  autoload_paths "]}," ActiveSupport Dependencies ZeitwerkIntegration eager_load?":{"type":"method","name":"eager_load?","children":[],"call":["Dependencies  _eager_load_paths member? ","Dependencies  _eager_load_paths "]}," ActiveSupport Dependencies ZeitwerkIntegration autoload_once?":{"type":"method","name":"autoload_once?","children":[],"call":["Dependencies  autoload_once_paths include? ","Dependencies  autoload_once_paths ","autoload_path to_s start_with? ","autoload_path to_s ","Gem  path any? ","Gem  path "]}," ActiveSupport Dependencies ZeitwerkIntegration setup_autoloaders":{"type":"method","name":"setup_autoloaders","children":[],"call":["Rails  autoloaders each ","Rails  autoloaders ","Rails  autoloaders main enable_reloading ","Rails  autoloaders main ","autoloader do_not_eager_load "," eager_load? ","autoloader push_dir ","Rails  autoloaders once "," autoload_once? ","File  directory? ","Dependencies  autoload_paths each ","Dependencies  autoload_paths ","Rails  autoloaders main push_dir ","Rails  autoloaders once push_dir ","autoloader inflector= ","Rails  autoloaders main setup ","Rails  autoloaders once setup ","Rails  Rails  autoloaders main s each ","Rails  Rails  autoloaders once s each ","Rails  Rails  autoloaders main s ","Rails  Rails  autoloaders once s ","Rails  Rails  autoloaders main s main enable_reloading ","Rails  Rails  autoloaders once s main enable_reloading ","Rails  Rails  autoloaders main s main ","Rails  Rails  autoloaders once s main ","Rails  autoloaders main  do_not_eager_load ","Rails  autoloaders once  do_not_eager_load ","Rails  autoloaders main  push_dir ","Rails  autoloaders once  push_dir ","Rails  Rails  autoloaders main s once ","Rails  Rails  autoloaders once s once ","Rails  Rails  autoloaders main s main push_dir ","Rails  Rails  autoloaders once s main push_dir ","Rails  Rails  autoloaders main s once push_dir ","Rails  Rails  autoloaders once s once push_dir ","Rails  autoloaders main  inflector= ","Rails  autoloaders once  inflector= ","Rails  Rails  autoloaders main s main setup ","Rails  Rails  autoloaders once s main setup ","Rails  Rails  autoloaders main s once setup ","Rails  Rails  autoloaders once s once setup "]}," ActiveSupport Dependencies ZeitwerkIntegration take_over":{"type":"method","name":"take_over","children":[],"call":[" decorate_dependencies "," freeze_paths "," setup_autoloaders "," freeze_autoload_paths "]}," ActiveSupport Dependencies ZeitwerkIntegration Inflector camelize":{"type":"method","name":"camelize","children":[],"call":[]}," ActiveSupport Dependencies ZeitwerkIntegration RequireDependency require_dependency":{"type":"method","name":"require_dependency","children":[],"call":[" require ","ActiveSupport Dependencies  search_for_file ","filename to_path ","filename respond_to? ","filename to_path  to_path ","filename to_path  respond_to? "]}," ActiveSupport Dependencies ZeitwerkIntegration Decorations unhook!":{"type":"method","name":"unhook!","children":[],"call":[]}," ActiveSupport Dependencies ZeitwerkIntegration Decorations verbose=":{"type":"method","name":"verbose=","children":[],"call":["autoloader logger= ","Rails  autoloaders each ","Rails  autoloaders ","Rails  logger "," logger "]}," ActiveSupport Dependencies ZeitwerkIntegration Decorations autoloaded?":{"type":"method","name":"autoloaded?","children":[],"call":["Rails  autoloaders main unloadable_cpath? ","Rails  autoloaders main ","Rails  autoloaders ","object to_s "," real_mod_name ","object is_a? ","autoloader loaded? ","Rails  autoloaders any? ","object name ","Rails  autoloaders main unloadable_object to_s ? ","Rails  autoloaders main unloadable_ real_mod_name ? ","Rails  autoloaders main unloadable_object name ? "]}," ActiveSupport Dependencies ZeitwerkIntegration Decorations autoloaded_constants":{"type":"method","name":"autoloaded_constants","children":[],"call":["Rails  autoloaders main unloadable_cpaths ","Rails  autoloaders main ","Rails  autoloaders ","(send\n  (send\n    (send\n      (send\n        (const nil :Rails) :autoloaders) :main) :loaded) :+\n  (send\n    (send\n      (send\n        (const nil :Rails) :autoloaders) :once) :loaded)) to_a ","Rails  autoloaders main loaded + ","Rails  autoloaders once loaded ","Rails  autoloaders once ","Rails  autoloaders main loaded "]}," ActiveSupport Dependencies ZeitwerkIntegration Decorations safe_constantize":{"type":"method","name":"safe_constantize","children":[],"call":["ActiveSupport Inflector  safe_constantize "]}," ActiveSupport Dependencies ZeitwerkIntegration Decorations constantize":{"type":"method","name":"constantize","children":[],"call":["ActiveSupport Inflector  constantize "]}," ActiveSupport Dependencies ZeitwerkIntegration Decorations clear":{"type":"method","name":"clear","children":[],"call":[" raise ","Rails  autoloaders main reload ","Rails  autoloaders main ","Rails  autoloaders ","Dependencies  unload_interlock "]}," ActiveSupport CurrentAttributes before_reset":{"type":"method","name":"before_reset","children":[],"call":[" set_callback "]}," Time next_day":{"type":"method","name":"next_day","children":[],"call":[" advance "]}," Time prev_day":{"type":"method","name":"prev_day","children":[],"call":[" advance ","days -@ "]}," ActiveSupport SafeBuffer set_block_back_references":{"type":"method","name":"set_block_back_references","children":[],"call":["block binding eval call ","block binding eval ","block binding "]}," ActiveSupport SafeBuffer *":{"type":"method","name":"*","children":[],"call":["new_safe_buffer instance_variable_set ","SafeBuffer  new ","new_string is_a? ","SafeBuffer  new  instance_variable_set "]}," ActiveSupport SafeBuffer []=":{"type":"method","name":"[]=","children":[],"call":[" html_escape_interpolated_argument ","args [] ","args count == ","args count ","args length == ","args length "," implicit_html_escape_interpolated_argument "]}," ActiveSupport SafeBuffer replace":{"type":"method","name":"replace","children":[],"call":[" html_escape_interpolated_argument "," implicit_html_escape_interpolated_argument "]}," ActiveSupport SafeBuffer insert":{"type":"method","name":"insert","children":[],"call":[" html_escape_interpolated_argument "," implicit_html_escape_interpolated_argument "]}," String truncate_bytes":{"type":"method","name":"truncate_bytes","children":[],"call":["cut << ","cut bytesize + <= ","cut bytesize + ","grapheme bytesize ","cut bytesize "," scan ","truncate_at - ","omission bytesize "," class new tap "," class new "," class ","omission dup ","omission bytesize == "," raise ","omission inspect ","omission bytesize > "," dup "," bytesize <= "," bytesize "," each_grapheme_cluster ","truncate_to - "]}," SecureRandom base36":{"type":"method","name":"base36","children":[],"call":[]}," ActiveSupport RangeWithFormat to_s":{"type":"method","name":"to_s","children":[],"call":["formatter call "," last "," first ","RANGE_FORMATS  [] ","RANGE_FORMATS  []  call "]}," UnboundMethod duplicable?":{"type":"method","name":"duplicable?","children":[],"call":[]}," ActiveSupport NumericWithFormat to_s":{"type":"method","name":"to_s","children":[],"call":["ActiveSupport NumberHelper  number_to_human_size ","ActiveSupport NumberHelper  number_to_human ","ActiveSupport NumberHelper  number_to_rounded ","ActiveSupport NumberHelper  number_to_delimited ","ActiveSupport NumberHelper  number_to_percentage ","ActiveSupport NumberHelper  number_to_currency ","ActiveSupport NumberHelper  number_to_phone ","format nil? "]}," Module module_parents":{"type":"method","name":"module_parents","children":[],"call":["parents << ","parents include? ","parts pop ","ActiveSupport Inflector  constantize ","parts * ","parts empty? "," module_parent_name split "," module_parent_name "," module_parent_name split  pop "," module_parent_name split  * "," module_parent_name split  empty? "]}," Module module_parent":{"type":"method","name":"module_parent","children":[],"call":["ActiveSupport Inflector  constantize "," module_parent_name "]}," Module module_parent_name":{"type":"method","name":"module_parent_name","children":[],"call":[" frozen? ","$` freeze "," name =~ "," name ","$` -@ "]}," Hash _deep_transform_values_in_object!":{"type":"method","name":"_deep_transform_values_in_object!","children":[],"call":[" _deep_transform_values_in_object! ","object map! ","object transform_values! "]}," Hash _deep_transform_values_in_object":{"type":"method","name":"_deep_transform_values_in_object","children":[],"call":[" _deep_transform_values_in_object ","object map ","object transform_values "]}," Hash deep_transform_values!":{"type":"method","name":"deep_transform_values!","children":[],"call":[" _deep_transform_values_in_object! "]}," Hash deep_transform_values":{"type":"method","name":"deep_transform_values","children":[],"call":[" _deep_transform_values_in_object "]}," Enumerable excluding":{"type":"method","name":"excluding","children":[],"call":["elements include? "," reject ","elements flatten! "]}," Enumerable including":{"type":"method","name":"including","children":[],"call":[" to_a including "," to_a "]}," Enumerable index_with":{"type":"method","name":"index_with","children":[],"call":[" size "," respond_to? "," to_enum ","result []= "," each ","default != "," block_given? "]}," DateAndTime Calculations after?":{"type":"method","name":"after?","children":[],"call":[" > "]}," DateAndTime Calculations before?":{"type":"method","name":"before?","children":[],"call":[" < "]}," Array extract!":{"type":"method","name":"extract!","children":[],"call":["extracted_elements << "," reject! "," size "," to_enum "," block_given? "]}," Array excluding":{"type":"method","name":"excluding","children":[],"call":[" - ","elements flatten "]}," Array including":{"type":"method","name":"including","children":[],"call":[" + ","elements flatten "]}," ActiveSupport Cache RedisCacheStore write_key_expiry":{"type":"method","name":"write_key_expiry","children":[],"call":["client expire ","options [] to_i ","options [] ","client ttl negative? ","client ttl "]}," ActiveSupport Cache RedisCacheStore supports_cache_versioning?":{"type":"method","name":"supports_cache_versioning?","children":[],"call":[]}," ActiveSupport Cache NullStore supports_cache_versioning?":{"type":"method","name":"supports_cache_versioning?","children":[],"call":[]}," ActiveSupport Cache MemoryStore supports_cache_versioning?":{"type":"method","name":"supports_cache_versioning?","children":[],"call":[]}," ActiveSupport Cache MemCacheStore supports_cache_versioning?":{"type":"method","name":"supports_cache_versioning?","children":[],"call":[]}," ActiveSupport Cache FileStore supports_cache_versioning?":{"type":"method","name":"supports_cache_versioning?","children":[],"call":[]}," ActiveSupport BacktraceCleaner add_stdlib_silencer":{"type":"method","name":"add_stdlib_silencer","children":[],"call":["line start_with? ","RbConfig CONFIG  [] "," add_silencer "]}," ActiveSupport BacktraceCleaner add_gem_silencer":{"type":"method","name":"add_gem_silencer","children":[],"call":["FORMATTED_GEMS_PATTERN  match? "," add_silencer "]}," ActiveSupport BacktraceCleaner add_gem_filter":{"type":"method","name":"add_gem_filter","children":[],"call":["line sub "," add_filter ","gems_paths join ","gems_paths empty? ","Regexp  escape ","(send\n  (send\n    (const nil :Gem) :path) :|\n  (array\n    (send\n      (const nil :Gem) :default_dir))) map ","Gem  path | ","Gem  default_dir ","Gem  path "]}," ActiveSupport ActionableError ClassMethods action":{"type":"method","name":"action","children":[],"call":[" _actions []= "," _actions "]}," ActiveSupport ActionableError dispatch":{"type":"method","name":"dispatch","children":[],"call":[]}," ActiveSupport ActionableError actions":{"type":"method","name":"actions","children":[],"call":[]}," ActiveSupport Dependencies ZeitwerkIntegration freeze_autoload_paths":{"type":"method","name":"freeze_autoload_paths","children":[],"call":["Dependencies  autoload_once_paths freeze ","Dependencies  autoload_once_paths ","Dependencies  autoload_paths freeze ","Dependencies  autoload_paths "]}," ActiveSupport Dependencies ZeitwerkIntegration Inflector inflect":{"type":"method","name":"inflect","children":[],"call":[]}," ActiveSupport OrderedOptions extractable_options?":{"type":"method","name":"extractable_options?","children":[],"call":[]}," ActiveSupport OptionMerger invoke_method":{"type":"method","name":"invoke_method","children":[],"call":["@context __send__ ","arguments << ","options dup "]}," ActiveSupport Messages Metadata parse_expires_at":{"type":"method","name":"parse_expires_at","children":[],"call":["Time  parse ","Time  iso8601 ","ActiveSupport  use_standard_json_time_format "]}," ActiveSupport utc_to_local_returns_utc_offset_times=":{"type":"method","name":"utc_to_local_returns_utc_offset_times=","children":[],"call":[]}," ActiveSupport utc_to_local_returns_utc_offset_times":{"type":"method","name":"utc_to_local_returns_utc_offset_times","children":[],"call":[]}," ActiveSupport XmlMini_REXML require_rexml":{"type":"method","name":"require_rexml","children":[],"call":[" raise ","$stderr puts "," require "," silence_warnings "," warn "]}," ActiveSupport TimeZone match?":{"type":"method","name":"match?","children":[],"call":["re match? ","MAPPING  [] "," name ","Regexp  === ","re == "]}," ActiveSupport TimeWithZone incorporate_utc_offset":{"type":"method","name":"incorporate_utc_offset","children":[],"call":["time + "," Rational ","time kind_of? "]}," ActiveSupport TimeWithZone yesterday?":{"type":"method","name":"yesterday?","children":[],"call":[" time yesterday? "," time "]}," ActiveSupport TimeWithZone tomorrow?":{"type":"method","name":"tomorrow?","children":[],"call":[" time tomorrow? "," time "]}," ActiveSupport Testing SimpleStubs stubbed?":{"type":"method","name":"stubbed?","children":[],"call":["@stubs empty? ! ","@stubs empty? "]}," ActiveSupport Testing Parallelization Worker set_process_title":{"type":"method","name":"set_process_title","children":[],"call":["Process  setproctitle "]}," ActiveSupport Testing Parallelization Worker add_setup_exception":{"type":"method","name":"add_setup_exception","children":[],"call":["result failures prepend ","Minitest UnexpectedError  new ","result failures "]}," ActiveSupport Testing Parallelization Worker run_cleanup":{"type":"method","name":"run_cleanup","children":[],"call":["cb call ","Parallelization  run_cleanup_hooks each ","Parallelization  run_cleanup_hooks "]}," ActiveSupport Testing Parallelization Worker after_fork":{"type":"method","name":"after_fork","children":[],"call":["cb call ","Parallelization  after_fork_hooks each ","Parallelization  after_fork_hooks "]}," ActiveSupport Testing Parallelization Worker safe_record":{"type":"method","name":"safe_record","children":[],"call":[" set_process_title ","@queue record ","Minitest UnexpectedError  new ","DRb DRbRemoteError  new ","failure exception ","failure error ","failure respond_to? ","result failures map! ","result failures "," add_setup_exception "," raise ","@queue interrupt ","failure DRb DRbRemoteError  new  "]}," ActiveSupport Testing Parallelization Worker perform_job":{"type":"method","name":"perform_job","children":[],"call":[" safe_record ","Minitest  run_one_method ","klass with_info_handler "," set_process_title ","job [] ","Minitest  run_one_job []  ","job []  with_info_handler "]}," ActiveSupport Testing Parallelization Worker work_from_queue":{"type":"method","name":"work_from_queue","children":[],"call":[" perform_job ","@queue pop "," perform_@queue pop  "]}," ActiveSupport Testing Parallelization Worker start":{"type":"method","name":"start","children":[],"call":["@queue stop_worker "," run_cleanup "," set_process_title "," work_from_queue "," after_fork ","@queue start_worker ","DRbObject  new_with_uri ","DRb  stop_service "," fork ","DRbObject  new_with_uri  stop_worker ","DRbObject  new_with_uri  start_worker "]}," ActiveSupport Testing Parallelization Worker initialize":{"type":"method","name":"initialize","children":[],"call":["SecureRandom  uuid "]}," ActiveSupport Testing Parallelization Server shutdown":{"type":"method","name":"shutdown","children":[],"call":["reporter record ","reporter synchronize ","result failures << ","Minitest UnexpectedError  new ","result failures ","error set_backtrace ","RuntimeError  new ","Minitest Result  from ","klass new ","@in_flight values each ","@in_flight values "," sleep "," active_workers? ","@queue close ","@queue length != ","@queue length ","Minitest Result  from  failures << ","Minitest Result  from  failures ","RuntimeError  new  set_backtrace "]}," ActiveSupport Testing Parallelization Server active_workers?":{"type":"method","name":"active_workers?","children":[],"call":["@active_workers size > ","@active_workers size "]}," ActiveSupport Testing Parallelization Server stop_worker":{"type":"method","name":"stop_worker","children":[],"call":["@active_workers delete "]}," ActiveSupport Testing Parallelization Server start_worker":{"type":"method","name":"start_worker","children":[],"call":["@active_workers []= "]}," ActiveSupport TaggedLogging LocalTagStorage extended":{"type":"method","name":"extended","children":[],"call":[]}," ActiveSupport Subscriber fetch_public_methods":{"type":"method","name":"fetch_public_methods","children":[],"call":["subscriber public_methods - ","Subscriber  public_instance_methods ","subscriber public_methods "]}," ActiveSupport SecureCompareRotator build_rotation":{"type":"method","name":"build_rotation","children":[],"call":[" class new "," class "]}," ActiveSupport SecureCompareRotator secure_compare!":{"type":"method","name":"secure_compare!","children":[],"call":[" raise ","wrapper secure_compare! "," run_rotations "," secure_compare ","@rotate_values any? "]}," ActiveSupport SecureCompareRotator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport OrderedOptions inspect":{"type":"method","name":"inspect","children":[],"call":[" class name "," class "]}," ActiveSupport NumberHelper RoundingHelper absolute_precision":{"type":"method","name":"absolute_precision","children":[],"call":[" options [] "," options "," options [] - "," digit_count "," convert_to_decimal "," options [] > "," significant "]}," ActiveSupport Notifications monotonic_subscribe":{"type":"method","name":"monotonic_subscribe","children":[],"call":[" notifier subscribe "," notifier "]}," ActiveSupport Notifications Fanout Subscribers MonotonicTimed finish":{"type":"method","name":"finish","children":[],"call":["@delegate call ","Concurrent  monotonic_time ","timestack pop ","Thread  current [] ","Thread  current ","Process  clock_gettime ","IsolatedExecutionState  [] ","Thread  current []  pop ","IsolatedExecutionState  []  pop "]}," ActiveSupport Notifications Fanout Subscribers MonotonicTimed start":{"type":"method","name":"start","children":[],"call":["timestack push ","Concurrent  monotonic_time ","Thread  current [] ","Thread  current ","Process  clock_gettime ","IsolatedExecutionState  [] "]}," ActiveSupport Notifications Fanout Subscribers MonotonicTimed publish":{"type":"method","name":"publish","children":[],"call":["@delegate call "]}," ActiveSupport Multibyte Unicode default_normalization_form=":{"type":"method","name":"default_normalization_form=","children":[],"call":["ActiveSupport Deprecation  warn "]}," ActiveSupport Multibyte Unicode default_normalization_form":{"type":"method","name":"default_normalization_form","children":[],"call":["ActiveSupport Deprecation  warn "]}," ActiveSupport LoggerThreadSafeLevel log_at":{"type":"method","name":"log_at","children":[],"call":[" local_level= "," local_level "]}," ActiveSupport LogSubscriber fetch_public_methods":{"type":"method","name":"fetch_public_methods","children":[],"call":["subscriber public_methods - ","LogSubscriber  public_instance_methods ","subscriber public_methods "]}," I18n Railtie forward_raise_on_missing_translations_config":{"type":"method","name":"forward_raise_on_missing_translations_config","children":[],"call":[]}," ActiveSupport HashWithIndifferentAccess update_with_single_argument":{"type":"method","name":"update_with_single_argument","children":[],"call":[" regular_writer "," convert_value "," convert_key ","block call "," [] "," key? ","other_hash to_hash each_pair ","other_hash to_hash "," regular_update ","other_hash is_a? "," convert_block call  "]}," ActiveSupport ForkTracker unregister":{"type":"method","name":"unregister","children":[],"call":["@callbacks delete "]}," ActiveSupport ForkTracker after_fork":{"type":"method","name":"after_fork","children":[],"call":["@callbacks << "]}," ActiveSupport ForkTracker hook!":{"type":"method","name":"hook!","children":[],"call":[" Process  singleton_class prepend "," Process  singleton_class "," Kernel  singleton_class prepend "," Kernel  singleton_class "," Kernel  prepend "," Object  prepend ","Process  respond_to? ","RUBY_VERSION  < "]}," ActiveSupport ForkTracker check!":{"type":"method","name":"check!","children":[],"call":["Process  pid ","@callbacks each ","@pid != ","Process  pid  != "]}," ActiveSupport ForkTracker CoreExtPrivate fork":{"type":"method","name":"fork","children":[],"call":[]}," ActiveSupport ForkTracker CoreExt fork":{"type":"method","name":"fork","children":[],"call":["ForkTracker  check! "," block_given? "]}," ActiveSupport EventedFileUpdateChecker Core common_path":{"type":"method","name":"common_path","children":[],"call":["(send\n  (lvar :paths) :map) reduce ","path ascend to_a ","path ascend ","paths map "]}," ActiveSupport EventedFileUpdateChecker Core directories_to_watch":{"type":"method","name":"directories_to_watch","children":[],"call":["accounted_for include? ","dir ascend drop any? ","dir ascend drop ","dir ascend ","dtw reject ","dtw to_set + "," Pathname ","Gem  path map ","Gem  path ","dtw to_set ","@dirs keys | ","@files map ","@dirs keys ","dtw to_set +  include? ","@dirs keys |  reject ","@dirs keys |  to_set + ","@dirs keys |  to_set "]}," ActiveSupport EventedFileUpdateChecker Core watching?":{"type":"method","name":"watching?","children":[],"call":["dir root? ","dir == ","matching include? ","matching empty? ","@dirs [] ","file dirname ascend ","file dirname ","file extname ","file directory? ","@files member? "," Pathname ","@dirs []  include? ","@dirs []  empty? "," Pathname  dirname ascend "," Pathname  dirname ","file file extname name "," Pathname  extname "," Pathname  directory? ","@ Pathname s member? "]}," ActiveSupport EventedFileUpdateChecker Core changed":{"type":"method","name":"changed","children":[],"call":["@updated make_true "," watching? ","(send\n  (send\n    (lvar :modified) :+\n    (lvar :added)) :+\n  (lvar :removed)) any? ","modified + + ","modified + ","@updated true? "]}," ActiveSupport EventedFileUpdateChecker Core normalize_dirs!":{"type":"method","name":"normalize_dirs!","children":[],"call":["dir realpath ","dir exist? ","@dirs transform_keys! "]}," ActiveSupport EventedFileUpdateChecker Core restart?":{"type":"method","name":"restart?","children":[],"call":["@missing any? "]}," ActiveSupport EventedFileUpdateChecker Core restart":{"type":"method","name":"restart","children":[],"call":[" start "," stop "]}," ActiveSupport EventedFileUpdateChecker Core stop":{"type":"method","name":"stop","children":[],"call":[]}," ActiveSupport EventedFileUpdateChecker Core start":{"type":"method","name":"start","children":[],"call":["Listen  to "," method ","@dtw any? ","(splat\n  (ivar :@dtw)) partition "," normalize_dirs! "]}," ActiveSupport EventedFileUpdateChecker Core thread_safely":{"type":"method","name":"thread_safely","children":[],"call":["@mutex synchronize "]}," ActiveSupport EventedFileUpdateChecker Core finalizer":{"type":"method","name":"finalizer","children":[],"call":["ActiveSupport ForkTracker  unregister "," stop "," proc "]}," ActiveSupport EventedFileUpdateChecker Core initialize":{"type":"method","name":"initialize","children":[],"call":[" start ","ActiveSupport ForkTracker  after_fork ","Mutex  new ","Concurrent AtomicBoolean  new "," directories_to_watch "," common_path ","@dirs keys ","hash []= ","(send\n  (send nil :Array\n    (lvar :exts)) :map) to_set ","ext to_s sub ","ext to_s "," Array map "," Array "," Pathname expand_path "," Pathname ","dirs each_with_object ","(send\n  (lvar :files) :map) to_set ","files map "]}," ActiveSupport EnvironmentInquirer initialize":{"type":"method","name":"initialize","children":[],"call":[" instance_variable_set ","env == ","DEFAULT_ENVIRONMENTS  each "," in? "," raise "]}," ActiveSupport EncryptedFile check_key_length":{"type":"method","name":"check_key_length","children":[],"call":[" raise ","(send nil :key) != "," class expected_key_length "," class "," key "]}," ActiveSupport EncryptedFile expected_key_length":{"type":"method","name":"expected_key_length","children":[],"call":[]}," ActiveSupport EncryptedFile InvalidKeyLengthError initialize":{"type":"method","name":"initialize","children":[],"call":["EncryptedFile  expected_key_length "]}," ActiveSupport Duration in_years":{"type":"method","name":"in_years","children":[],"call":[" in_seconds / ","SECONDS_PER_YEAR  to_f "," in_seconds "]}," ActiveSupport Duration in_months":{"type":"method","name":"in_months","children":[],"call":[" in_seconds / ","SECONDS_PER_MONTH  to_f "," in_seconds "]}," ActiveSupport Duration in_weeks":{"type":"method","name":"in_weeks","children":[],"call":[" in_seconds / ","SECONDS_PER_WEEK  to_f "," in_seconds "]}," ActiveSupport Duration in_days":{"type":"method","name":"in_days","children":[],"call":[" in_seconds / ","SECONDS_PER_DAY  to_f "," in_seconds "]}," ActiveSupport Duration in_hours":{"type":"method","name":"in_hours","children":[],"call":[" in_seconds / ","SECONDS_PER_HOUR  to_f "," in_seconds "]}," ActiveSupport Duration in_minutes":{"type":"method","name":"in_minutes","children":[],"call":[" in_seconds / ","SECONDS_PER_MINUTE  to_f "," in_seconds "]}," ActiveSupport Duration +@":{"type":"method","name":"+@","children":[],"call":[]}," ActiveSupport Duration ISO8601Serializer week_mixed_with_date?":{"type":"method","name":"week_mixed_with_date?","children":[],"call":["(send\n  (send\n    (lvar :parts) :keys) :&\n  (const nil :DATE_COMPONENTS)) any? ","parts keys & ","parts keys ","parts key? "]}," ActiveSupport Deprecation Reporting silenced":{"type":"method","name":"silenced","children":[],"call":["@silenced_thread value ","@silence_counter value nonzero? ","@silence_counter value "]}," ActiveSupport Deprecation Reporting allow":{"type":"method","name":"allow","children":[],"call":["@explicitly_allowed_warnings bind ","conditional call ","conditional respond_to? "," binding local_variable_get "," binding ","conditional call  call "," binding local_variable_get  call ","conditional call  respond_to? "," binding local_variable_get  respond_to? "]}," ActiveSupport Deprecation Disallowed explicitly_allowed?":{"type":"method","name":"explicitly_allowed?","children":[],"call":["rule match? ","message include? ","rule to_s ","allowances any? ","allowances kind_of? ","allowances == ","@explicitly_allowed_warnings value "," Array any? "," Array ","@explicitly_allowed_warnings value  any? ","@explicitly_allowed_warnings value  kind_of? ","@explicitly_allowed_warnings value  == "]}," ActiveSupport Deprecation Disallowed deprecation_disallowed?":{"type":"method","name":"deprecation_disallowed?","children":[],"call":["rule match? ","message include? ","rule to_s ","disallowed any? ","disallowed == "," explicitly_allowed? ","ActiveSupport Deprecation  disallowed_warnings "," disallowed_warnings any? "," disallowed_warnings "," disallowed_warnings == ","ActiveSupport Deprecation  disallowed_warnings  any? ","ActiveSupport Deprecation  disallowed_warnings  == ","ActiveSupport Deprecation  ActiveSupport Deprecation  disallowed_warnings _warnings "," ActiveSupport Deprecation  disallowed_warnings _warnings any? "," ActiveSupport Deprecation  disallowed_warnings _warnings "," ActiveSupport Deprecation  disallowed_warnings _warnings == "]}," ActiveSupport Deprecation Disallowed disallowed_warnings":{"type":"method","name":"disallowed_warnings","children":[],"call":[]}," ActiveSupport Deprecation Behavior disallowed_behavior=":{"type":"method","name":"disallowed_behavior=","children":[],"call":[" arity_coerce ","DEFAULT_BEHAVIORS  [] "," Array map "," Array "]}," ActiveSupport Deprecation Behavior disallowed_behavior":{"type":"method","name":"disallowed_behavior","children":[],"call":["DEFAULT_BEHAVIORS  [] "]}," ActiveSupport Dependencies uninitialized_constant":{"type":"method","name":"uninitialized_constant","children":[],"call":["NameError  new "]}," ActiveSupport CurrentAttributes current_instances_key":{"type":"method","name":"current_instances_key","children":[],"call":[" name to_sym "," name "]}," TestHelper after_teardown":{"type":"method","name":"after_teardown","children":[],"call":["ActiveSupport CurrentAttributes  reset_all ","ActiveSupport ExecutionContext  clear "]}," TestHelper before_setup":{"type":"method","name":"before_setup","children":[],"call":["ActiveSupport CurrentAttributes  reset_all ","ActiveSupport ExecutionContext  clear "]}," Time ceil":{"type":"method","name":"ceil","children":[],"call":[" change + "," subsec ceil "," subsec "," change "]}," Time floor":{"type":"method","name":"floor","children":[],"call":[" change + "," subsec floor "," subsec "," change "]}," Symbol end_with?":{"type":"method","name":"end_with?","children":[],"call":[" to_s end_with? "," to_s "]}," Symbol start_with?":{"type":"method","name":"start_with?","children":[],"call":[" to_s start_with? "," to_s "]}," NameError real_mod_name":{"type":"method","name":"real_mod_name","children":[],"call":["UNBOUND_METHOD_MODULE_NAME  bind call ","UNBOUND_METHOD_MODULE_NAME  bind ","UNBOUND_METHOD_MODULE_NAME  bind_call "]}," Array compact_blank!":{"type":"method","name":"compact_blank!","children":[],"call":[" delete_if "]}," Hash compact_blank!":{"type":"method","name":"compact_blank!","children":[],"call":["v blank? "," delete_if "]}," Hash compact_blank":{"type":"method","name":"compact_blank","children":[],"call":["v blank? "," reject "]}," Enumerable compact_blank":{"type":"method","name":"compact_blank","children":[],"call":[" reject "]}," Enumerable pick":{"type":"method","name":"pick","children":[],"call":[" first [] ","keys first "," first ","keys map ","keys many? "," none? "]}," DateAndTime Calculations yesterday?":{"type":"method","name":"yesterday?","children":[],"call":[" to_date == "," Date  current yesterday "," Date  current "," to_date "]}," DateAndTime Calculations tomorrow?":{"type":"method","name":"tomorrow?","children":[],"call":[" to_date == "," Date  current tomorrow "," Date  current "," to_date "]}," ActiveSupport ConfigurationFile render":{"type":"method","name":"render","children":[],"call":["erb result ","e filename= ","ERB  new tap ","ERB  new "]}," ActiveSupport ConfigurationFile read":{"type":"method","name":"read","children":[],"call":[" warn ","content include? ","File  read tap ","File  read "," require "]}," ActiveSupport ConfigurationFile parse":{"type":"method","name":"parse","children":[],"call":[" raise ","error message ","YAML  load "," render ","YAML  unsafe_load ","YAML  respond_to? "]}," ActiveSupport ConfigurationFile initialize":{"type":"method","name":"initialize","children":[],"call":[" read ","content_path to_s "]}," ActiveSupport Concern prepended":{"type":"method","name":"prepended","children":[],"call":[" raise ","@_prepended_block source_location != ","block source_location ","@_prepended_block source_location "," instance_variable_defined? ","base nil? "]}," ActiveSupport Concern prepend_features":{"type":"method","name":"prepend_features","children":[],"call":["base class_eval "," instance_variable_defined? ","base singleton_class prepend "," const_get ","base singleton_class "," const_defined? ","base prepend ","@_dependencies each ","base < ","base instance_variable_get unshift ","base instance_variable_get ","base instance_variable_defined? "]}," ActiveSupport Concern MultiplePrependBlocks initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Cache Entry bytesize":{"type":"method","name":"bytesize","children":[],"call":["Marshal  dump bytesize ","Marshal  dump ","@value bytesize "," value "]}," ActiveSupport Cache NullCoder dump":{"type":"method","name":"dump","children":[],"call":[]}," ActiveSupport Cache NullCoder load":{"type":"method","name":"load","children":[],"call":[]}," ActiveSupport Cache Store delete_multi_entries":{"type":"method","name":"delete_multi_entries","children":[],"call":[" delete_entry ","entries count "]}," ActiveSupport Cache Store deserialize_entry":{"type":"method","name":"deserialize_entry","children":[],"call":["@coder load ","payload nil? "]}," ActiveSupport Cache Store serialize_entry":{"type":"method","name":"serialize_entry","children":[],"call":["@coder dump ","@coder dump_compressed ","options [] "," merged_options "," merged_options  [] "," merged_ merged_options  "]}," ActiveSupport Cache Store delete_multi":{"type":"method","name":"delete_multi","children":[],"call":[" delete_multi_entries "," instrument "," normalize_key ","names map! "," merged_options "," instrument_multi ","names empty? "," merged_ merged_options  "]}," ActiveSupport Cache Strategy LocalCache delete_matched":{"type":"method","name":"delete_matched","children":[],"call":["cache clear "," local_cache "," local_cache  clear "," local_ local_cache  "]}," ActiveSupport Cache RedisCacheStore delete_multi_entries":{"type":"method","name":"delete_multi_entries","children":[],"call":["c del "," redis with "," redis "," redis then "," failsafe "]}," ActiveSupport Cache MemoryStore DupCoder dump":{"type":"method","name":"dump","children":[],"call":["entry dup_value! ","entry compressed? ","Cache Entry  new ","entry version ","entry expires_at "," dump_value ","entry value ","entry value is_a? ! ","entry value is_a? ","entry value != "]}," ActiveSupport Cache MemoryStore DupCoder load":{"type":"method","name":"load","children":[],"call":["entry dup_value! ","entry dup ","Cache Entry  new ","entry version ","entry expires_at "," load_value ","entry value ","entry value is_a? ","entry compressed? ! ","entry compressed? ","entry dup  dup_value! ","entry dup  dup ","entry dup  version ","entry dup  expires_at ","entry dup  value ","entry dup  value is_a? ","entry dup  compressed? ! ","entry dup  compressed? "]}," TestHelper before_teardown":{"type":"method","name":"before_teardown","children":[],"call":["ActiveSupport CurrentAttributes  reset_all "]}," IPAddr as_json":{"type":"method","name":"as_json","children":[],"call":[" to_s "]}," ActiveSupport SafeBuffer bytesplice":{"type":"method","name":"bytesplice","children":[],"call":[" implicit_html_escape_interpolated_argument "]}," ActiveSupport cache_format_version=":{"type":"method","name":"cache_format_version=","children":[],"call":[]}," ActiveSupport cache_format_version":{"type":"method","name":"cache_format_version","children":[],"call":[]}," ActiveSupport TimeWithZone to_formatted_s":{"type":"method","name":"to_formatted_s","children":[],"call":[" formatted_offset "," time strftime "," time "," strftime ","formatter call to_s ","formatter call ","formatter respond_to? "," Time DATE_FORMATS  [] "," utc to_formatted_s "," utc ","format == "," Time DATE_FORMATS  []  call to_s "," Time DATE_FORMATS  []  call "," Time DATE_FORMATS  []  respond_to? "]}," ActiveSupport Testing ParallelizeExecutor execution_info":{"type":"method","name":"execution_info","children":[],"call":[" threshold "," tests_count "," parallelize_with "," parallel_executor size "," parallel_executor "," parallelized? "," many_workers? "]}," ActiveSupport Testing ParallelizeExecutor show_execution_info":{"type":"method","name":"show_execution_info","children":[],"call":[" puts "," execution_info "]}," ActiveSupport Testing ParallelizeExecutor tests_count":{"type":"method","name":"tests_count","children":[],"call":["runnable runnable_methods size ","runnable runnable_methods ","Minitest Runnable  runnables sum ","Minitest Runnable  runnables "]}," ActiveSupport Testing ParallelizeExecutor should_parallelize?":{"type":"method","name":"should_parallelize?","children":[],"call":[" tests_count > "," threshold "," tests_count ","ENV  [] "," many_workers? "]}," ActiveSupport Testing ParallelizeExecutor parallelized?":{"type":"method","name":"parallelized?","children":[],"call":[]}," ActiveSupport Testing ParallelizeExecutor parallelize":{"type":"method","name":"parallelize","children":[],"call":["Minitest Test  parallelize_me! "]}," ActiveSupport Testing ParallelizeExecutor build_parallel_executor":{"type":"method","name":"build_parallel_executor","children":[],"call":[" raise "," parallelize_with ","Minitest Parallel Executor  new "," size ","ActiveSupport TestCase  lock_threads= ","ActiveSupport TestCase  lock_threads ","Testing Parallelization  new "]}," ActiveSupport Testing ParallelizeExecutor parallel_executor":{"type":"method","name":"parallel_executor","children":[],"call":[" build_parallel_executor "]}," ActiveSupport Testing ParallelizeExecutor shutdown":{"type":"method","name":"shutdown","children":[],"call":[" parallel_executor shutdown "," parallel_executor "," parallelized? "]}," ActiveSupport Testing ParallelizeExecutor <<":{"type":"method","name":"<<","children":[],"call":[" parallel_executor << "," parallel_executor "," parallelized? "]}," ActiveSupport Testing ParallelizeExecutor start":{"type":"method","name":"start","children":[],"call":[" parallel_executor start "," parallel_executor "," parallelized? "," show_execution_info "," parallelize "," should_parallelize? "]}," ActiveSupport Testing ParallelizeExecutor initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Testing Parallelization size":{"type":"method","name":"size","children":[],"call":[]}," ActiveSupport Testing Parallelization Server interrupt":{"type":"method","name":"interrupt","children":[],"call":["@queue clear "]}," ActiveSupport Testing Assertions _assert_nothing_raised_or_warn":{"type":"method","name":"_assert_nothing_raised_or_warn","children":[],"call":[" raise "," tagged_logger warn "," tagged_logger ","e error class ","e error "," name "," class "," tagged_logger warn? "," assert_nothing_raised "]}," ActiveSupport Subscriber publish_event":{"type":"method","name":"publish_event","children":[],"call":[" send ","event name split first ","event name split ","event name ","event name [] ","event name index "]}," ActiveSupport OptionMerger respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["@context respond_to? "]}," ActiveSupport Notifications registry":{"type":"method","name":"registry","children":[],"call":["ActiveSupport IsolatedExecutionState  [] "]}," ActiveSupport Notifications publish_event":{"type":"method","name":"publish_event","children":[],"call":[" notifier publish_event "," notifier "]}," ActiveSupport Notifications Event record":{"type":"method","name":"record","children":[],"call":[" finish! "," raise "," payload []= "," payload ","e message ","e class name ","e class "," block_given? "," start! "]}," ActiveSupport Notifications Instrumenter new_event":{"type":"method","name":"new_event","children":[],"call":["Event  new "]}," ActiveSupport Notifications Fanout Subscribers EventObject publish_event":{"type":"method","name":"publish_event","children":[],"call":["@delegate call "]}," ActiveSupport Notifications Fanout Subscribers Evented publish_event":{"type":"method","name":"publish_event","children":[],"call":[" publish ","event payload ","event transaction_id ","event end ","event time ","event name ","@delegate publish_event "]}," ActiveSupport Notifications Fanout Subscribers Matcher AllMessages unsubscribe!":{"type":"method","name":"unsubscribe!","children":[],"call":[]}," ActiveSupport Notifications Fanout Subscribers Matcher AllMessages ===":{"type":"method","name":"===","children":[],"call":[]}," ActiveSupport Notifications Fanout iterate_guarding_exceptions":{"type":"method","name":"iterate_guarding_exceptions","children":[],"call":[" raise ","exceptions first ","InstrumentationSubscriberError  new ","exceptions size == ","exceptions size ","exceptions << ","listeners each "]}," ActiveSupport Notifications Fanout publish_event":{"type":"method","name":"publish_event","children":[],"call":["s publish_event "," iterate_guarding_exceptions "," listeners_for ","event name "," listeners_for each "]}," ActiveSupport Notifications InstrumentationSubscriberError initialize":{"type":"method","name":"initialize","children":[],"call":["exception_class_names join ","e class name ","e class ","exceptions map "]}," ActiveSupport MessageVerifier digest_matches_data?":{"type":"method","name":"digest_matches_data?","children":[],"call":["ActiveSupport SecurityUtils  secure_compare "," generate_digest ","digest present? ","data present? "]}," ActiveSupport MessageVerifier get_data_and_digest_from":{"type":"method","name":"get_data_and_digest_from","children":[],"call":["signed_message [] ","separator_index + ","separator_index nil? "," separator_index_for ","signed_message empty? ","signed_message valid_encoding? ! ","signed_message valid_encoding? ","signed_message nil? "," separator_index_for  + "," separator_index_for  nil? ","  separator_index_for _for "]}," ActiveSupport MessageVerifier separator_index_for":{"type":"method","name":"separator_index_for","children":[],"call":["signed_message [] != ","signed_message [] ","index negative? ","signed_message length - - ","signed_message length - "," digest_length_in_hex ","signed_message length "," separator_at? ! "," separator_at? ","signed_message length - -  negative? "]}," ActiveSupport MessageVerifier digest_length_in_hex":{"type":"method","name":"digest_length_in_hex","children":[],"call":["OpenSSL Digest  new digest_length * ","OpenSSL Digest  new digest_length ","OpenSSL Digest  new "]}," ActiveSupport LogSubscriber log_exception":{"type":"method","name":"log_exception","children":[],"call":[" logger error ","e backtrace ","e message ","e class ","name inspect "," logger "]}," ActiveSupport LogSubscriber publish_event":{"type":"method","name":"publish_event","children":[],"call":[" log_exception ","event name "," logger "]}," ActiveSupport KeyGenerator hash_digest_class":{"type":"method","name":"hash_digest_class","children":[],"call":[]}," ActiveSupport KeyGenerator hash_digest_class=":{"type":"method","name":"hash_digest_class=","children":[],"call":[" raise ","klass < ","klass kind_of? "]}," ActiveSupport IsolatedExecutionState current_fiber":{"type":"method","name":"current_fiber","children":[],"call":["Fiber  current active_support_execution_state ","Fiber  current "]}," ActiveSupport IsolatedExecutionState current_thread":{"type":"method","name":"current_thread","children":[],"call":["Thread  current active_support_execution_state ","Thread  current "]}," ActiveSupport IsolatedExecutionState clear":{"type":"method","name":"clear","children":[],"call":[" current clear "," current "," state clear "," state "]}," ActiveSupport IsolatedExecutionState []=":{"type":"method","name":"[]=","children":[],"call":[" current []= "," current "," state []= "," state "]}," ActiveSupport IsolatedExecutionState []":{"type":"method","name":"[]","children":[],"call":[" current [] "," current "," state [] "," state "]}," ActiveSupport IsolatedExecutionState unique_id":{"type":"method","name":"unique_id","children":[],"call":["Object  new "," [] "]}," ActiveSupport IsolatedExecutionState isolation_level=":{"type":"method","name":"isolation_level=","children":[],"call":[" singleton_class send "," singleton_class "," singleton_class alias_method "," clear ","level != "," isolation_level "," raise ","level inspect ","(sym :thread) include? ","level == "]}," ActiveSupport Inflector Inflections instance_or_fallback":{"type":"method","name":"instance_or_fallback","children":[],"call":[]}," ActiveSupport HtmlSafeTranslation html_safe_translation":{"type":"method","name":"html_safe_translation","children":[],"call":["translation html_safe ","translation respond_to? ","element html_safe ","element respond_to? ","translation map "]}," ActiveSupport HtmlSafeTranslation i18n_option?":{"type":"method","name":"i18n_option?","children":[],"call":["(or-asgn\n  (ivasgn :@i18n_option_names)\n  (send\n    (const\n      (const nil :I18n) :RESERVED_KEYS) :to_set)) include? ","I18n RESERVED_KEYS  to_set "]}," ActiveSupport HtmlSafeTranslation html_escape_translation_options":{"type":"method","name":"html_escape_translation_options","children":[],"call":["options []= ","ERB Util  html_escape ","value to_s ","value is_a? ","name == "," i18n_option? ","options each "]}," ActiveSupport HtmlSafeTranslation html_safe_translation_key?":{"type":"method","name":"html_safe_translation_key?","children":[],"call":["(str \"(?:_|\\\\b)html\\\\z\") match? "]}," ActiveSupport HtmlSafeTranslation translate":{"type":"method","name":"translate","children":[],"call":["I18n  translate "," html_safe_translation "," html_escape_translation_options "," html_safe_translation_key? "," html_safe_I18n  translate  "," html_escape_I18n  translate _options "," html_safe_I18n  translate _key? "]}," ActiveSupport ForkTracker ModernCoreExt _fork":{"type":"method","name":"_fork","children":[],"call":["ForkTracker  check! ","pid == ","ForkTracker  after_fork_callback "]}," TestHelper run":{"type":"method","name":"run","children":[],"call":["Rails  application executor perform ","Rails  application executor ","Rails  application "]}," ActiveSupport ExecutionWrapper complete":{"type":"method","name":"complete","children":[],"call":[" run_callbacks "]}," ActiveSupport ExecutionWrapper run":{"type":"method","name":"run","children":[],"call":[" run_callbacks "]}," ActiveSupport ExecutionWrapper error_reporter":{"type":"method","name":"error_reporter","children":[],"call":[]}," ActiveSupport ExecutionWrapper perform":{"type":"method","name":"perform","children":[],"call":[]}," ActiveSupport ExecutionContext store":{"type":"method","name":"store","children":[],"call":["IsolatedExecutionState  [] "]}," ActiveSupport ExecutionContext clear":{"type":"method","name":"clear","children":[],"call":[" store clear "," store "]}," ActiveSupport ExecutionContext to_h":{"type":"method","name":"to_h","children":[],"call":[" store dup "," store "]}," ActiveSupport ExecutionContext []=":{"type":"method","name":"[]=","children":[],"call":["@after_change_callbacks each "," store []= ","key to_sym "," store "]}," ActiveSupport ExecutionContext set":{"type":"method","name":"set","children":[],"call":["@after_change_callbacks each ","store merge! "," block_given? ","keys zip to_h ","keys zip ","store values_at "," store ","options keys ","options symbolize_keys! "," store  merge! ","options keys  zip to_h ","options keys  zip "," store  values_at ","  store  ","options options keys  ","options symbolize_options keys ! "]}," ActiveSupport ExecutionContext after_change":{"type":"method","name":"after_change","children":[],"call":["@after_change_callbacks << "]}," ActiveSupport ErrorReporter report":{"type":"method","name":"report","children":[],"call":[" raise "," logger fatal ","(str \"Error subscriber raised an error: \") + ","subscriber_error backtrace join ","subscriber_error backtrace ","subscriber_error class ","subscriber_error message "," logger ","subscriber report ","@subscribers each ","ActiveSupport ExecutionContext  to_h merge ","ActiveSupport ExecutionContext  to_h ","severity inspect ","SEVERITIES  map join ","SEVERITIES  map ","SEVERITIES  include? ","error instance_variable_set ","error frozen? ","s === ","ActiveSupport IsolatedExecutionState  [] ","error instance_variable_defined? "]}," ActiveSupport ErrorReporter set_context":{"type":"method","name":"set_context","children":[],"call":["ActiveSupport ExecutionContext  set "]}," ActiveSupport ErrorReporter subscribe":{"type":"method","name":"subscribe","children":[],"call":["@subscribers << "," raise ","subscriber respond_to? "]}," ActiveSupport ErrorReporter record":{"type":"method","name":"record","children":[],"call":[" raise "," report ","error_classes blank? "]}," ActiveSupport ErrorReporter handle":{"type":"method","name":"handle","children":[],"call":["fallback call "," report ","error_classes blank? "]}," ActiveSupport ErrorReporter initialize":{"type":"method","name":"initialize","children":[],"call":["subscribers flatten "]}," ActiveSupport EncryptedConfiguration deep_transform":{"type":"method","name":"deep_transform","children":[],"call":["h []= "," deep_transform ","hash each ","ActiveSupport InheritableOptions  new ","hash is_a? ","ActiveSupport OrderedOptions  new ","ActiveSupport InheritableOptions  new  []= ","ActiveSupport OrderedOptions  new  []= ","ActiveSupport InheritableOptions  new asActiveSupport InheritableOptions  new  eacActiveSupport InheritableOptions  new  ","ActiveSupport OrderedOptions  new asActiveSupport OrderedOptions  new  eacActiveSupport OrderedOptions  new  ","ActiveSupport InActiveSupport InheritableOptions  new eritableOptions  new ","ActiveSupport InActiveSupport OrderedOptions  new eritableOptions  new ","ActiveSupport InheritableOptions  new asActiveSupport InheritableOptions  new  is_a? ","ActiveSupport OrderedOptions  new asActiveSupport OrderedOptions  new  is_a? "]}," ActiveSupport Duration _parts":{"type":"method","name":"_parts","children":[],"call":[]}," ActiveSupport Duration variable?":{"type":"method","name":"variable?","children":[],"call":[]}," ActiveSupport Duration parts":{"type":"method","name":"parts","children":[],"call":["@parts dup "]}," ActiveSupport Duration Scalar variable?":{"type":"method","name":"variable?","children":[],"call":[]}," ActiveSupport Duration ISO8601Serializer format_seconds":{"type":"method","name":"format_seconds","children":[],"call":["seconds to_s "," sprintf "]}," ActiveSupport DescendantsTracker subclasses":{"type":"method","name":"subclasses","children":[],"call":["DescendantsTracker  subclasses ","descendants to_a ","@@direct_descendants [] ","@@excluded_descendants [] ","subclasses reject! ","klass subclasses ","DescendantsTracker  reject! ","@direct_descendants [] ","@@direct_descendants []  to_a ","@direct_descendants []  to_a ","@@direct_@@direct_descendants []  [] ","@@direct_@direct_descendants []  [] ","@@excluded_@@direct_descendants []  [] ","@@excluded_@direct_descendants []  [] ","@direct_@@direct_descendants []  [] ","@direct_@direct_descendants []  [] "]}," ActiveSupport DescendantsTracker native?":{"type":"method","name":"native?","children":[],"call":[]}," ActiveSupport DescendantsTracker disable_clear!":{"type":"method","name":"disable_clear!","children":[],"call":[" remove_method ","ReloadedClassesFiltering  remove_method "]}," ActiveSupport DescendantsTracker WeakSet []=":{"type":"method","name":"[]=","children":[],"call":["@map []= ","object object_id "," object_id "]}," ActiveSupport DescendantsTracker WeakSet []":{"type":"method","name":"[]","children":[],"call":["@map key? ","object object_id "]}," ActiveSupport DescendantsTracker WeakSet initialize":{"type":"method","name":"initialize","children":[],"call":["ObjectSpace WeakMap  new "]}," ActiveSupport Dependencies eager_load?":{"type":"method","name":"eager_load?","children":[],"call":[]}," RequireDependency require_dependency":{"type":"method","name":"require_dependency","children":[],"call":[" require ","ActiveSupport Dependencies  search_for_file "," raise ","filename inspect ","filename is_a? ","filename to_path ","filename respond_to? ","filename to_path  inspect ","filename to_path  is_a? ","filename to_path  to_path ","filename to_path  respond_to? "]}," ActiveSupport CurrentAttributes respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":[" instance respond_to? "," instance "]}," Time to_s":{"type":"method","name":"to_s","children":[],"call":[" to_default_s ","ActiveSupport Deprecation  warn ","format inspect ","format == "," strftime ","formatter call to_s ","formatter call ","formatter respond_to? ","DATE_FORMATS  [] "," Time DATE_FORMATS  [] ","(str \"          Using a :default format for Time#to_s is deprecated. Please use Time#to_fs instead. If you fixed all places\\n\") squish ","DATE_FORMATS  []  call to_s "," Time DATE_FORMATS  []  call to_s ","DATE_FORMATS  []  call "," Time DATE_FORMATS  []  call ","DATE_FORMATS  []  respond_to? "," Time DATE_FORMATS  []  respond_to? "]}," ActiveSupport SafeBuffer implicit_html_escape_interpolated_argument":{"type":"method","name":"implicit_html_escape_interpolated_argument","children":[],"call":["CGI  escapeHTML "," raise ","ActiveSupport Deprecation  warn ","(str \"Implicit conversion of \") squish ","arg class ","arg to_s ","error name == ","error name ","arg to_str ","arg html_safe? "," html_safe? ! "," html_safe? ","(arg to_s  \"Implicit conversion of \") squish ","arg to_arg to_s  "]}," ActiveSupport SafeBuffer explicit_html_escape_interpolated_argument":{"type":"method","name":"explicit_html_escape_interpolated_argument","children":[],"call":["CGI  escapeHTML ","arg to_s ","arg html_safe? "," html_safe? ! "," html_safe? "]}," ActiveSupport DeprecatedRangeWithFormat to_s":{"type":"method","name":"to_s","children":[],"call":["ActiveSupport Deprecation  warn ","format inspect ","format == ","formatter call "," last "," first ","RangeWithFormat RANGE_FORMATS  [] ","(str \"            Using a :default format for Range#to_s is deprecated. Please use Range#to_fs instead. If you fixed all\\n\") squish ","RangeWithFormat RANGE_FORMATS  []  call "]}," ActiveSupport RangeWithFormat to_formatted_s":{"type":"method","name":"to_formatted_s","children":[],"call":[" to_s ","formatter call "," last "," first ","RANGE_FORMATS  [] ","RANGE_FORMATS  []  call "]}," Pathname existence":{"type":"method","name":"existence","children":[],"call":[" exist? "]}," Module as_json":{"type":"method","name":"as_json","children":[],"call":[" name "]}," Singleton duplicable?":{"type":"method","name":"duplicable?","children":[],"call":[]}," ActiveSupport DeprecatedNumericWithFormat to_s":{"type":"method","name":"to_s","children":[],"call":["ActiveSupport Deprecation  warn ","format inspect "," class ","ActiveSupport NumberHelper  number_to_human_size ","ActiveSupport NumberHelper  number_to_human ","ActiveSupport NumberHelper  number_to_rounded ","ActiveSupport NumberHelper  number_to_delimited ","ActiveSupport NumberHelper  number_to_percentage ","ActiveSupport NumberHelper  number_to_currency ","ActiveSupport NumberHelper  number_to_phone ","format nil? "]}," ActiveSupport NumericWithFormat to_formatted_s":{"type":"method","name":"to_formatted_s","children":[],"call":[" to_s ","ActiveSupport NumberHelper  number_to_human_size ","ActiveSupport NumberHelper  number_to_human ","ActiveSupport NumberHelper  number_to_rounded ","ActiveSupport NumberHelper  number_to_delimited ","ActiveSupport NumberHelper  number_to_percentage ","ActiveSupport NumberHelper  number_to_currency ","ActiveSupport NumberHelper  number_to_phone ","format nil? "]}," Enumerable sole":{"type":"method","name":"sole","children":[],"call":[" raise "," first "," count "]}," Enumerable in_order_of":{"type":"method","name":"in_order_of","children":[],"call":[" index_by values_at compact "," index_by values_at "," index_by "," group_by values_at flatten compact "," group_by values_at flatten "," group_by values_at "," group_by "]}," Enumerable maximum":{"type":"method","name":"maximum","children":[],"call":[" map max "," map "]}," Enumerable minimum":{"type":"method","name":"minimum","children":[],"call":[" map min "," map "]}," DateTime to_s":{"type":"method","name":"to_s","children":[],"call":[" to_default_s ","ActiveSupport Deprecation  warn ","format inspect ","format == "," strftime ","formatter call to_s ","formatter call ","formatter respond_to? "," Time DATE_FORMATS  [] ","(str \"          Using a :default format for DateTime#to_s is deprecated. Please use DateTime#to_fs instead. If you fixed all\\n\") squish "," Time DATE_FORMATS  []  call to_s "," Time DATE_FORMATS  []  call "," Time DATE_FORMATS  []  respond_to? "]}," Date to_s":{"type":"method","name":"to_s","children":[],"call":[" to_default_s ","ActiveSupport Deprecation  warn ","format inspect ","format == "," strftime ","formatter call to_s ","formatter call ","formatter respond_to? ","DATE_FORMATS  [] ","(str \"          Using a :default format for Date#to_s is deprecated. Please use Date#to_fs instead. If you fixed all places\\n\") squish ","DATE_FORMATS  []  call to_s ","DATE_FORMATS  []  call ","DATE_FORMATS  []  respond_to? "]}," Array to_s":{"type":"method","name":"to_s","children":[],"call":[" to_default_s ","ActiveSupport Deprecation  warn ","format inspect "," collect join "," collect "," empty? "]}," ActiveSupport CodeGenerator execute":{"type":"method","name":"execute","children":[],"call":["method_set apply ","@line - ","@namespaces each_value "]}," ActiveSupport CodeGenerator define_cached_method":{"type":"method","name":"define_cached_method","children":[],"call":["@namespaces [] define_cached_method ","@namespaces [] "]}," ActiveSupport CodeGenerator initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","MethodSet  new ","Hash  new "]}," ActiveSupport CodeGenerator batch":{"type":"method","name":"batch","children":[],"call":["instance execute "," new ","owner is_a? "," new  execute "]}," ActiveSupport CodeGenerator MethodSet apply":{"type":"method","name":"apply","children":[],"call":["owner define_method ","@cache instance_method ","@methods each ","@cache module_eval ","# frozen_string_literal: true\n + ","@sources join ","@sources empty? "]}," ActiveSupport CodeGenerator MethodSet define_cached_method":{"type":"method","name":"define_cached_method","children":[],"call":["@methods []= ","@cache method_defined? ","@methods fetch ","as to_sym ","name to_sym ","as to_sym  to_sym ","name to_sym  to_sym "]}," ActiveSupport CodeGenerator MethodSet initialize":{"type":"method","name":"initialize","children":[],"call":["METHOD_CACHES  [] "]}," ActiveSupport Callbacks CallTemplate ProcCall inverted_lambda":{"type":"method","name":"inverted_lambda","children":[],"call":["(or\n  (ivar :@override_target)\n  (lvar :target)) call ! ","(or\n  (ivar :@override_target)\n  (lvar :target)) call "," lambda "]}," ActiveSupport Callbacks CallTemplate ProcCall make_lambda":{"type":"method","name":"make_lambda","children":[],"call":["(or\n  (ivar :@override_target)\n  (lvar :target)) call "," lambda "]}," ActiveSupport Callbacks CallTemplate ProcCall expand":{"type":"method","name":"expand","children":[],"call":[]}," ActiveSupport Callbacks CallTemplate ProcCall initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Callbacks CallTemplate InstanceExec2 inverted_lambda":{"type":"method","name":"inverted_lambda","children":[],"call":["target instance_exec ! ","target instance_exec "," raise "," lambda "]}," ActiveSupport Callbacks CallTemplate InstanceExec2 make_lambda":{"type":"method","name":"make_lambda","children":[],"call":["target instance_exec "," raise "," lambda "]}," ActiveSupport Callbacks CallTemplate InstanceExec2 expand":{"type":"method","name":"expand","children":[],"call":[" raise "]}," ActiveSupport Callbacks CallTemplate InstanceExec2 initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Callbacks CallTemplate InstanceExec1 inverted_lambda":{"type":"method","name":"inverted_lambda","children":[],"call":["target instance_exec ! ","target instance_exec "," lambda "]}," ActiveSupport Callbacks CallTemplate InstanceExec1 make_lambda":{"type":"method","name":"make_lambda","children":[],"call":["target instance_exec "," lambda "]}," ActiveSupport Callbacks CallTemplate InstanceExec1 expand":{"type":"method","name":"expand","children":[],"call":[]}," ActiveSupport Callbacks CallTemplate InstanceExec1 initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Callbacks CallTemplate InstanceExec0 inverted_lambda":{"type":"method","name":"inverted_lambda","children":[],"call":["target instance_exec ! ","target instance_exec "," lambda "]}," ActiveSupport Callbacks CallTemplate InstanceExec0 make_lambda":{"type":"method","name":"make_lambda","children":[],"call":["target instance_exec "," lambda "]}," ActiveSupport Callbacks CallTemplate InstanceExec0 expand":{"type":"method","name":"expand","children":[],"call":[]}," ActiveSupport Callbacks CallTemplate InstanceExec0 initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Callbacks CallTemplate ObjectCall inverted_lambda":{"type":"method","name":"inverted_lambda","children":[],"call":["(or\n  (ivar :@override_target)\n  (lvar :target)) send ! ","(or\n  (ivar :@override_target)\n  (lvar :target)) send "," lambda "]}," ActiveSupport Callbacks CallTemplate ObjectCall make_lambda":{"type":"method","name":"make_lambda","children":[],"call":["(or\n  (ivar :@override_target)\n  (lvar :target)) send "," lambda "]}," ActiveSupport Callbacks CallTemplate ObjectCall expand":{"type":"method","name":"expand","children":[],"call":[]}," ActiveSupport Callbacks CallTemplate ObjectCall initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Callbacks CallTemplate MethodCall inverted_lambda":{"type":"method","name":"inverted_lambda","children":[],"call":["target send ! ","target send "," lambda "]}," ActiveSupport Callbacks CallTemplate MethodCall make_lambda":{"type":"method","name":"make_lambda","children":[],"call":["target send "," lambda "]}," ActiveSupport Callbacks CallTemplate MethodCall expand":{"type":"method","name":"expand","children":[],"call":[]}," ActiveSupport Callbacks CallTemplate MethodCall initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Cache Entry pack":{"type":"method","name":"pack","children":[],"call":["members pop ","members last nil? ","members last ","members empty? ! ","members empty? "," version "," expires_at "," value "]}," ActiveSupport Cache Entry local?":{"type":"method","name":"local?","children":[],"call":[]}," ActiveSupport Cache Entry compressed":{"type":"method","name":"compressed","children":[],"call":["Entry  new "," version "," expires_at ","compressed bytesize < ","compressed bytesize ","Zlib Deflate  deflate ","Marshal  dump ","uncompressed_size >= ","serialized bytesize ","@value bytesize "," compressed? ","Zlib Deflate  deflate  bytesize < ","Zlib Deflate  deflate  bytesize ","unZlib Deflate  deflate _size >= ","serialized bytesize  >= ","@value bytesize  >= ","Marshal  dump  bytesize "," Zlib Deflate  deflate ? "]}," ActiveSupport Cache Entry unpack":{"type":"method","name":"unpack","children":[],"call":[" new ","members [] "]}," ActiveSupport Cache Coders Rails70Coder dump_compressed":{"type":"method","name":"dump_compressed","children":[],"call":["MARK_70_UNCOMPRESSED  + ","MARK_70_COMPRESSED  + ","compressed_payload bytesize < ","payload bytesize ","compressed_payload bytesize ","Zlib Deflate  deflate ","payload bytesize >= ","Marshal  dump ","entry pack ","Zlib Deflate  deflate  bytesize < ","compressed_Marshal  dump  bytesize < ","Marshal  dump  bytesize ","Zlib Deflate  deflate  bytesize ","compressed_Marshal  dump  bytesize ","Marshal  dump  bytesize >= "]}," ActiveSupport Cache Coders Rails70Coder dump":{"type":"method","name":"dump","children":[],"call":["MARK_70_UNCOMPRESSED  + ","Marshal  dump ","entry pack "]}," ActiveSupport Cache Coders Rails61Coder dump_compressed":{"type":"method","name":"dump_compressed","children":[],"call":["Marshal  dump ","entry compressed "]}," ActiveSupport Cache Coders Rails61Coder dump":{"type":"method","name":"dump","children":[],"call":["Marshal  dump "]}," ActiveSupport Cache Coders Loader load":{"type":"method","name":"load","children":[],"call":["Entry  unpack ","payload byteslice inspect ","payload byteslice ","ActiveSupport Cache Store  logger ","Marshal  load ","payload start_with? ","Zlib Inflate  inflate ","payload class name ","payload class ","payload is_a? ! ","payload is_a? "]}," ActiveSupport Cache Coders []":{"type":"method","name":"[]","children":[],"call":[" raise ","Cache  format_version inspect ","Cache  format_version "]}," ActiveSupport Cache NullCoder dump_compressed":{"type":"method","name":"dump_compressed","children":[],"call":["entry compressed "]}," ActiveSupport Cache Store normalize_options":{"type":"method","name":"normalize_options","children":[],"call":["options except! ","options [] ","options key? ","aliases detect ","OPTION_ALIASES  each ","options dup ","options dup  except! ","options dup  [] ","options dup  key? ","options dup  dup "]}," ActiveSupport Cache Store default_coder":{"type":"method","name":"default_coder","children":[],"call":["Coders  [] ","Cache  format_version "]}," ActiveSupport Cache Store new_entry":{"type":"method","name":"new_entry","children":[],"call":["Entry  new "," merged_options "]}," ActiveSupport Cache Strategy LocalCache write_serialized_entry":{"type":"method","name":"write_serialized_entry","children":[],"call":[" local_cache delete_entry "," local_cache "," local_cache write_entry "]}," ActiveSupport Cache Strategy LocalCache read_serialized_entry":{"type":"method","name":"read_serialized_entry","children":[],"call":["options [] []= ","cache class name ","cache class ","options [] ","cache fetch_entry "," local_cache "," local_cache  class name "," local_cache  class "," local_cache  fetch_entry "," local_ local_cache  "]}," ActiveSupport Cache RedisCacheStore write_serialized_entry":{"type":"method","name":"write_serialized_entry","children":[],"call":["c set "," redis with "," redis "," failsafe ","modifiers []= ","(send\n  (int 1000) :*\n  (send\n    (lvar :expires_in) :to_f)) ceil ","1000 * ","expires_in to_f ","5 minutes ","raw ! ","expires_in > "," redis then ","pipeline set "]}," ActiveSupport Cache RedisCacheStore read_serialized_entry":{"type":"method","name":"read_serialized_entry","children":[],"call":["c get "," redis with "," redis "," failsafe "," redis then "]}," ActiveSupport Cache RedisCacheStore stats":{"type":"method","name":"stats","children":[],"call":["c info "," redis with "," redis "," redis then "]}," ActiveSupport Cache NullStore write_serialized_entry":{"type":"method","name":"write_serialized_entry","children":[],"call":[]}," ActiveSupport Cache NullStore read_serialized_entry":{"type":"method","name":"read_serialized_entry","children":[],"call":[]}," ActiveSupport Cache MemoryStore default_coder":{"type":"method","name":"default_coder","children":[],"call":[]}," ActiveSupport Cache MemoryStore DupCoder dump_compressed":{"type":"method","name":"dump_compressed","children":[],"call":["entry dup_value! ","entry compressed? ","entry compressed "," dump ","compressed_entry compressed? ","entry compressed  dup_value! ","entry compressed  compressed? ","entry compressed  compressed ","compressed_entry compressed  compressed? "]}," ActiveSupport Cache MemCacheStore serialize_entry":{"type":"method","name":"serialize_entry","children":[],"call":["entry value to_s ","entry value "]}," ActiveSupport Cache MemCacheStore write_serialized_entry":{"type":"method","name":"write_serialized_entry","children":[],"call":["c send ","@data with ","options delete "," rescue_error_with ","5 minutes ","options [] ! ","options [] ","expires_in > ","options [] to_i ","options [] to_i  > "]}," ActiveSupport Cache MemCacheStore read_serialized_entry":{"type":"method","name":"read_serialized_entry","children":[],"call":["c get ","@data with "," rescue_error_with "]}," ActiveSupport Cache MemCacheStore default_coder":{"type":"method","name":"default_coder","children":[],"call":["Coders  [] ","Cache  format_version "]}," ActiveSupport Cache MemCacheStore Coders Rails61Coder dump_compressed":{"type":"method","name":"dump_compressed","children":[],"call":["entry compressed "]}," ActiveSupport Cache MemCacheStore Coders Rails61Coder dump":{"type":"method","name":"dump","children":[],"call":[]}," ActiveSupport Cache MemCacheStore Coders Loader load":{"type":"method","name":"load","children":[],"call":["Cache Coders Loader  load ","payload is_a? "]}," ActiveSupport Cache MemCacheStore Coders []":{"type":"method","name":"[]","children":[],"call":[" raise ","Cache  format_version inspect ","Cache  format_version "]}," ActiveSupport Cache MemCacheStore DupLocalCache local_cache":{"type":"method","name":"local_cache","children":[],"call":["DupLocalStore  new ","ActiveSupport Cache  format_version == ","ActiveSupport Cache  format_version "]}," ActiveSupport Cache MemCacheStore DupLocalCache DupLocalStore fetch_entry":{"type":"method","name":"fetch_entry","children":[],"call":["entry dup_value! ","entry is_a? ","entry dup ","new_entry dup_value! ","entry dup  dup_value! ","entry dup  is_a? ","entry dup  dup ","new_entry dup  dup_value! "]}," ActiveSupport Cache MemCacheStore DupLocalCache DupLocalStore write_entry":{"type":"method","name":"write_entry","children":[],"call":["entry dup_value! ","entry is_a? "]}," ActiveSupport Cache FileStore write_serialized_entry":{"type":"method","name":"write_serialized_entry","children":[],"call":["f write ","File  atomic_write "," cache_path "," ensure_cache_path ","File  dirname ","File  exist? ","options [] "]}," ActiveSupport Cache FileStore read_serialized_entry":{"type":"method","name":"read_serialized_entry","children":[],"call":[" logger error ","error message "," logger ","File  binread ","File  exist? "]}," ActiveSupport current_attributes_use_thread_variables=":{"type":"method","name":"current_attributes_use_thread_variables=","children":[],"call":[]}," ActiveSupport CurrentAttributes _use_thread_variables=":{"type":"method","name":"_use_thread_variables=","children":[],"call":[" clear_all "]}," ActiveSupport TimeWithZone to_fs":{"type":"method","name":"to_fs","children":[],"call":[" formatted_offset "," time strftime "," time "," strftime ","formatter call to_s ","formatter call ","formatter respond_to? "," Time DATE_FORMATS  [] "," utc to_fs "," utc ","format == "," Time DATE_FORMATS  []  call to_s "," Time DATE_FORMATS  []  call "," Time DATE_FORMATS  []  respond_to? "]}," Time to_fs":{"type":"method","name":"to_fs","children":[],"call":[" to_default_s "," strftime ","formatter call to_s ","formatter call ","formatter respond_to? ","DATE_FORMATS  [] "," to_s ","DATE_FORMATS  []  call to_s ","DATE_FORMATS  []  call ","DATE_FORMATS  []  respond_to? "]}," ActiveSupport RangeWithFormat to_fs":{"type":"method","name":"to_fs","children":[],"call":[" to_s ","formatter call "," last "," first ","RANGE_FORMATS  [] "," end "," begin ","RANGE_FORMATS  []  call "]}," ActiveSupport NumericWithFormat to_fs":{"type":"method","name":"to_fs","children":[],"call":[" to_s ","ActiveSupport NumberHelper  number_to_human_size ","ActiveSupport NumberHelper  number_to_human ","ActiveSupport NumberHelper  number_to_rounded ","ActiveSupport NumberHelper  number_to_delimited ","ActiveSupport NumberHelper  number_to_percentage ","ActiveSupport NumberHelper  number_to_currency ","ActiveSupport NumberHelper  number_to_phone ","format nil? "]}," DateTime to_fs":{"type":"method","name":"to_fs","children":[],"call":[" to_default_s "," strftime ","formatter call to_s ","formatter call ","formatter respond_to? "," Time DATE_FORMATS  [] "," to_s "," Time DATE_FORMATS  []  call to_s "," Time DATE_FORMATS  []  call "," Time DATE_FORMATS  []  respond_to? "]}," Date to_fs":{"type":"method","name":"to_fs","children":[],"call":[" to_default_s "," strftime ","formatter call to_s ","formatter call ","formatter respond_to? ","DATE_FORMATS  [] "," to_s ","DATE_FORMATS  []  call to_s ","DATE_FORMATS  []  call ","DATE_FORMATS  []  respond_to? "]}," Array to_fs":{"type":"method","name":"to_fs","children":[],"call":[" to_default_s "," collect join "," collect "," empty? "," to_s "]}," ActiveSupport IsolatedExecutionState delete":{"type":"method","name":"delete","children":[],"call":[" state delete "," state "," current delete "," current "]}," ActiveSupport IsolatedExecutionState key?":{"type":"method","name":"key?","children":[],"call":[" state key? "," state "," current key? "," current "]}," ActiveSupport ExecutionWrapper active_key":{"type":"method","name":"active_key","children":[],"call":[]}," ActiveSupport TaggedLogging broadcast_to":{"type":"method","name":"broadcast_to","children":[],"call":[" formatter= "," formatter clone "," formatter ","formatter current_tags ","other_logger formatter singleton_class redefine_method ","other_logger formatter singleton_class ","other_logger formatter "," define_singleton_method "]}," ActiveSupport IsolatedExecutionState share_with":{"type":"method","name":"share_with","children":[],"call":["context active_support_execution_state= ","other active_support_execution_state dup ","other active_support_execution_state ","Fiber  current ","Thread  current ","@isolation_level == "," context active_support_execution_state= "," context ","Fiber  current  active_support_execution_state= ","Thread  current  active_support_execution_state= "," Fiber  current  active_support_execution_state= "," Thread  current  active_support_execution_state= "," Fiber  current  "," Thread  current  "]}," ActiveSupport EnumerableCoreExt Constants const_missing":{"type":"method","name":"const_missing","children":[],"call":["name == "]}," ActiveSupport TestCase inspect":{"type":"method","name":"inspect","children":[],"call":["Object  instance_method bind_call ","Object  instance_method "]}," ActiveSupport EventedFileUpdateChecker inspect":{"type":"method","name":"inspect","children":[],"call":["@core files to_a inspect ","@core files to_a ","@core files "," object_id "]}," ActiveSupport RaiseWarnings warn":{"type":"method","name":"warn","children":[],"call":[" raise ","ENV  [] ","ALLOWED_WARNINGS  match? ","message include? ","SUPPRESSED_WARNINGS  match? "]}," ActiveSupport Testing ParallelizeExecutor many_workers?":{"type":"method","name":"many_workers?","children":[],"call":[" size > "," size "]}," ActiveSupport Testing MethodCallAssertions expect_called_with":{"type":"method","name":"expect_called_with","children":[],"call":["mock expect ","kwargs empty? ! ","kwargs empty? "]}," ActiveSupport Testing ErrorReporterAssertions assert_error_reported":{"type":"method","name":"assert_error_reported","children":[],"call":[" assert ","(send\n  (lvar :reports) :map) join ","r error class name ","r error class ","r error ","reports map ","reports size ","error_class name "," assertions ","error_class === ","reports find ","reports empty? "," _assert_nothing_raised_or_warn ","ErrorCollector  record "]}," ActiveSupport Testing ErrorReporterAssertions assert_no_error_reported":{"type":"method","name":"assert_no_error_reported","children":[],"call":[" assert_predicate "," _assert_nothing_raised_or_warn ","ErrorCollector  record "]}," ActiveSupport Testing ErrorReporterAssertions ErrorCollector subscribe":{"type":"method","name":"subscribe","children":[],"call":[" raise ","ActiveSupport  error_reporter subscribe ","ActiveSupport  error_reporter ","@mutex synchronize "]}," ActiveSupport Testing ErrorReporterAssertions ErrorCollector report":{"type":"method","name":"report","children":[],"call":["reports << ","ActiveSupport IsolatedExecutionState  [] ","Report  new ","Report  new s << "]}," ActiveSupport Testing ErrorReporterAssertions ErrorCollector record":{"type":"method","name":"record","children":[],"call":["reports equal? ","recorders delete_if ","recorders << ","ActiveSupport IsolatedExecutionState  [] "," subscribe "]}," ActiveSupport Testing ConstantStubbing stub_const":{"type":"method","name":"stub_const","children":[],"call":["mod const_set ","mod send ","mod const_get "]}," ActiveSupport Testing Assertions assert_raises":{"type":"method","name":"assert_raises","children":[],"call":[" assert_match ","error message "]}," ActiveSupport TaggedLogging TagStack format_message":{"type":"method","name":"format_message","children":[],"call":["@tags join ","@tags [] ","@tags size == ","@tags size ","@tags empty? "]}," ActiveSupport TaggedLogging TagStack clear":{"type":"method","name":"clear","children":[],"call":["@tags clear "]}," ActiveSupport TaggedLogging TagStack pop_tags":{"type":"method","name":"pop_tags","children":[],"call":["@tags pop "]}," ActiveSupport TaggedLogging TagStack push_tags":{"type":"method","name":"push_tags","children":[],"call":["@tags concat ","tags reject! ","tags flatten! "]}," ActiveSupport TaggedLogging TagStack initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport TaggedLogging Formatter tag_stack":{"type":"method","name":"tag_stack","children":[],"call":["TagStack  new ","IsolatedExecutionState  [] "," object_id "]}," ActiveSupport SyntaxErrorProxy parse_message_for_trace":{"type":"method","name":"parse_message_for_trace","children":[],"call":[" __getobj__ to_s split "," __getobj__ to_s "," __getobj__ "]}," ActiveSupport SyntaxErrorProxy backtrace_locations":{"type":"method","name":"backtrace_locations","children":[],"call":["(send\n  (send nil :parse_message_for_trace) :map) + ","BacktraceLocationProxy  new "," map ","BacktraceLocation  new ","line to_i ","trace match "," parse_message_for_trace map "," parse_message_for_trace "]}," ActiveSupport SyntaxErrorProxy BacktraceLocationProxy spot":{"type":"method","name":"spot","children":[],"call":["@ex __getobj__ "]}," ActiveSupport SyntaxErrorProxy BacktraceLocationProxy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport SyntaxErrorProxy BacktraceLocation label":{"type":"method","name":"label","children":[],"call":[]}," ActiveSupport SyntaxErrorProxy BacktraceLocation spot":{"type":"method","name":"spot","children":[],"call":[]}," ActiveSupport SyntaxErrorProxy backtrace":{"type":"method","name":"backtrace","children":[],"call":[" parse_message_for_trace + "," parse_message_for_trace "]}," ActiveSupport Subscriber call":{"type":"method","name":"call","children":[],"call":[" send ","event name [] ","event name index ","event name "]}," ActiveSupport SecureCompareRotator rotate":{"type":"method","name":"rotate","children":[],"call":["@rotate_values << "]}," ActiveSupport ParameterFilter value_for_key":{"type":"method","name":"value_for_key","children":[],"call":["b call ","b arity == ","b arity ","@blocks each ","value dup ","value duplicable? ","key dup ","key duplicable? "," value_for_key ","value map ","value is_a? "," call ","r match? ","key to_s ","@regexps any? ","value dup  dup "," call  dup ","value dup  duplicable? "," call  duplicable? ","key dup  dup ","key dup  duplicable? "," value dup _for_key ","  call _for_key "," value_for_key dup  ","value dup  map "," call  map ","value dup  is_a? "," call  is_a? ","key dup  to_s "]}," ActiveSupport ParameterFilter call":{"type":"method","name":"call","children":[],"call":["filtered_params []= "," value_for_key ","params each ","params class new ","params class ","params class new  []= "]}," ActiveSupport ParameterFilter compile_filters!":{"type":"method","name":"compile_filters!","children":[],"call":["(or-asgn\n  (ivasgn :@deep_regexps)\n  (array)) << ","Regexp  new ","deep_strings join ","@regexps << ","strings join ","strings empty? ","strings << ","(or-asgn\n  (lvasgn :deep_strings)\n  (array)) << ","s include? ","Regexp  escape ","item to_s ","item to_s include? ","(or-asgn\n  (ivasgn :@blocks)\n  (array)) << ","filters each ","filters empty? ","(or-aRegexp  escape gn\n  (ivaRegexp  escape gn :@deep_regexpRegexp  escape )\n  (array)) << ","deep_Regexp  escape tringRegexp  escape  join ","@regexpRegexp  escape  << ","Regexp  escape tringRegexp  escape  join ","Regexp  escape tringRegexp  escape  empty? ","Regexp  escape tringRegexp  escape  << ","(or-aRegexp  escape gn\n  (lvaRegexp  escape gn :deep_Regexp  escape tringRegexp  escape )\n  (array)) << ","Regexp  escape  include? ","Regexp  eRegexp  escape cape ","item to_Regexp  escape  ","item to_Regexp  escape  include? ","(or-aRegexp  escape gn\n  (ivaRegexp  escape gn :@blockRegexp  escape )\n  (array)) << ","filterRegexp  escape  each ","filterRegexp  escape  empty? "]}," ActiveSupport ParameterFilter precompile_filters":{"type":"method","name":"precompile_filters","children":[],"call":[]}," ActiveSupport OrderedOptions dig":{"type":"method","name":"dig","children":[],"call":["keys flatten map ","keys flatten ","key to_sym "]}," ActiveSupport NumberHelper NumberConverter valid_bigdecimal":{"type":"method","name":"valid_bigdecimal","children":[],"call":[" BigDecimal "," number "," number to_d "]}," ActiveSupport Notifications Event children":{"type":"method","name":"children","children":[],"call":["ActiveSupport  deprecator warn ","ActiveSupport  deprecator "]}," ActiveSupport Notifications Instrumenter build_handle":{"type":"method","name":"build_handle","children":[],"call":["@notifier build_handle "]}," ActiveSupport Notifications Instrumenter LegacyHandle finish":{"type":"method","name":"finish","children":[],"call":["@notifier finish "]}," ActiveSupport Notifications Instrumenter LegacyHandle start":{"type":"method","name":"start","children":[],"call":["@notifier start "]}," ActiveSupport Notifications Instrumenter LegacyHandle initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Notifications Instrumenter LegacyHandle Wrapper build_handle":{"type":"method","name":"build_handle","children":[],"call":["LegacyHandle  new "]}," ActiveSupport Notifications Instrumenter LegacyHandle Wrapper initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Notifications Fanout Subscribers EventObject group_class":{"type":"method","name":"group_class","children":[],"call":[]}," ActiveSupport Notifications Fanout Subscribers MonotonicTimed group_class":{"type":"method","name":"group_class","children":[],"call":[]}," ActiveSupport Notifications Fanout Subscribers Timed group_class":{"type":"method","name":"group_class","children":[],"call":[]}," ActiveSupport Notifications Fanout Subscribers Evented silenced?":{"type":"method","name":"silenced?","children":[],"call":["@delegate silenced? "]}," ActiveSupport Notifications Fanout Subscribers Evented group_class":{"type":"method","name":"group_class","children":[],"call":[]}," ActiveSupport Notifications Fanout all_listeners_for":{"type":"method","name":"all_listeners_for","children":[],"call":["@string_subscribers [] + ","s subscribed_to? ","@other_subscribers select ","@string_subscribers [] ","@all_listeners_for [] "," synchronize "]}," ActiveSupport Notifications Fanout build_handle":{"type":"method","name":"build_handle","children":[],"call":["Handle  new "]}," ActiveSupport Notifications Fanout Handle ensure_state!":{"type":"method","name":"ensure_state!","children":[],"call":[" raise ","@state inspect ","expected inspect ","@state != "]}," ActiveSupport Notifications Fanout Handle finish_with_values":{"type":"method","name":"finish_with_values","children":[],"call":["group finish ","@groups each "," ensure_state! "," iterate_guarding_exceptions "]}," ActiveSupport Notifications Fanout Handle finish":{"type":"method","name":"finish","children":[],"call":[" finish_with_values "]}," ActiveSupport Notifications Fanout Handle start":{"type":"method","name":"start","children":[],"call":["group start ","@groups each "," ensure_state! "," iterate_guarding_exceptions "]}," ActiveSupport Notifications Fanout Handle initialize":{"type":"method","name":"initialize","children":[],"call":["group_klass new ","notifier groups_for map ","notifier groups_for "]}," ActiveSupport Notifications Fanout groups_for":{"type":"method","name":"groups_for","children":[],"call":["groups []= ","(or\n  (send\n    (lvar :groups) :[]\n    (lvar :group_class))\n  (array)) + ","groups [] ","active_subscriptions empty? ","s silenced? ","subscriptions reject ","silenceable_groups each ","groups dup ","silenceable_groups empty? ","s map "," all_listeners_for select group_by transform_values "," all_listeners_for select group_by "," all_listeners_for select "," all_listeners_for ","@silenceable_groups_for compute_if_absent "," all_listeners_for reject group_by transform_values "," all_listeners_for reject group_by "," all_listeners_for reject ","@groups_for compute_if_absent ","groups dup  []= ","(or\n  (send\n    (lvar :groups dup ) :[]\n    (lvar :group_class))\n  (array)) + ","groups dup  [] ","silenceable_groups dup  each ","groups dup  dup ","silenceable_groups dup  empty? ","@silenceable_groups dup _for compute_if_absent ","@groups dup _for compute_if_absent "]}," ActiveSupport Notifications Fanout EventObjectGroup build_event":{"type":"method","name":"build_event","children":[],"call":["ActiveSupport Notifications Event  new "]}," ActiveSupport Notifications Fanout EventObjectGroup finish":{"type":"method","name":"finish","children":[],"call":["s call "," each ","@event finish! ","@event payload= "]}," ActiveSupport Notifications Fanout EventObjectGroup start":{"type":"method","name":"start","children":[],"call":["@event start! "," build_event "," build_event  start! "]}," ActiveSupport Notifications Fanout EventedGroup finish":{"type":"method","name":"finish","children":[],"call":["s finish "," each "]}," ActiveSupport Notifications Fanout EventedGroup start":{"type":"method","name":"start","children":[],"call":["s start "," each "]}," ActiveSupport Notifications Fanout TimedGroup now":{"type":"method","name":"now","children":[],"call":["Time  now "]}," ActiveSupport Notifications Fanout MonotonicTimedGroup now":{"type":"method","name":"now","children":[],"call":["Process  clock_gettime "]}," ActiveSupport Notifications Fanout BaseTimeGroup finish":{"type":"method","name":"finish","children":[],"call":["listener call "," each "," now "]}," ActiveSupport Notifications Fanout BaseTimeGroup start":{"type":"method","name":"start","children":[],"call":[" now "]}," ActiveSupport Notifications Fanout BaseGroup each":{"type":"method","name":"each","children":[],"call":[" iterate_guarding_exceptions "]}," ActiveSupport Notifications Fanout BaseGroup initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Notifications Fanout clear_cache":{"type":"method","name":"clear_cache","children":[],"call":["@silenceable_groups_for clear ","@groups_for clear ","@all_listeners_for clear ","@silenceable_groups_for delete ","@groups_for delete ","@all_listeners_for delete "]}," ActiveSupport Notifications Fanout inspect":{"type":"method","name":"inspect","children":[],"call":[" class ","@string_subscribers size + ","@other_subscribers size ","@string_subscribers size "]}," ActiveSupport Notifications FanoutIteration iterate_guarding_exceptions":{"type":"method","name":"iterate_guarding_exceptions","children":[],"call":[" raise ","exceptions first ","InstrumentationSubscriberError  new ","exceptions size == ","exceptions size ","exceptions << ","listeners each ","exception exceptions ","exception is_a? ","exceptions flat_map ","collection each "]}," ActiveSupport Messages SerializerWithFallback MessagePackWithFallback available?":{"type":"method","name":"available?","children":[],"call":[" require "," silence_warnings "]}," ActiveSupport Messages SerializerWithFallback MessagePackWithFallback dumped?":{"type":"method","name":"dumped?","children":[],"call":["ActiveSupport MessagePack  signature? "," available? "]}," ActiveSupport Messages SerializerWithFallback MessagePackWithFallback _load":{"type":"method","name":"_load","children":[],"call":["ActiveSupport MessagePack  load "]}," ActiveSupport Messages SerializerWithFallback MessagePackWithFallback dump":{"type":"method","name":"dump","children":[],"call":["ActiveSupport MessagePack  dump "]}," ActiveSupport Messages SerializerWithFallback MessagePackWithFallback format":{"type":"method","name":"format","children":[],"call":[]}," ActiveSupport Messages SerializerWithFallback JsonWithFallback detect_format":{"type":"method","name":"detect_format","children":[],"call":[]}," ActiveSupport Messages SerializerWithFallback JsonWithFallback dumped?":{"type":"method","name":"dumped?","children":[],"call":["JSON_START_WITH  match? "]}," ActiveSupport Messages SerializerWithFallback JsonWithFallback _load":{"type":"method","name":"_load","children":[],"call":["ActiveSupport JSON  decode "]}," ActiveSupport Messages SerializerWithFallback JsonWithFallback dump":{"type":"method","name":"dump","children":[],"call":["ActiveSupport JSON  encode "]}," ActiveSupport Messages SerializerWithFallback JsonWithFallback format":{"type":"method","name":"format","children":[],"call":[]}," ActiveSupport Messages SerializerWithFallback MarshalWithFallback dumped?":{"type":"method","name":"dumped?","children":[],"call":["dumped start_with? "]}," ActiveSupport Messages SerializerWithFallback MarshalWithFallback _load":{"type":"method","name":"_load","children":[],"call":["Marshal  load "]}," ActiveSupport Messages SerializerWithFallback MarshalWithFallback dump":{"type":"method","name":"dump","children":[],"call":["Marshal  dump "]}," ActiveSupport Messages SerializerWithFallback MarshalWithFallback format":{"type":"method","name":"format","children":[],"call":[]}," ActiveSupport Messages SerializerWithFallback AllowMarshal fallback?":{"type":"method","name":"fallback?","children":[],"call":["format == "]}," ActiveSupport Messages SerializerWithFallback fallback?":{"type":"method","name":"fallback?","children":[],"call":["format != "]}," ActiveSupport Messages SerializerWithFallback detect_format":{"type":"method","name":"detect_format","children":[],"call":["JsonWithFallback  dumped? ","MarshalWithFallback  dumped? ","MessagePackWithFallback  dumped? "]}," ActiveSupport Messages SerializerWithFallback load":{"type":"method","name":"load","children":[],"call":[" raise ","payload []= ","SERIALIZERS  [] _load ","SERIALIZERS  [] ","ActiveSupport Notifications  instrument ","SERIALIZERS  key "," fallback? "," _load ","format == "," format "," detect_format "," detect_format  == ","  detect_format  "," detect_ detect_format  "]}," ActiveSupport Messages SerializerWithFallback []":{"type":"method","name":"[]","children":[],"call":[]}," ActiveSupport Messages Rotator catch_rotation_error":{"type":"method","name":"catch_rotation_error","children":[],"call":["block call "," catch "]}," ActiveSupport Messages Rotator build_rotation":{"type":"method","name":"build_rotation","children":[],"call":[" class new ","@args drop ","args length "," class "]}," ActiveSupport Messages Rotator read_message":{"type":"method","name":"read_message","children":[],"call":[" throw ","rotation read_message "," catch_rotation_error ","@rotations each ","@rotations empty? "]}," ActiveSupport Messages Rotator fall_back_to":{"type":"method","name":"fall_back_to","children":[],"call":["@rotations << "]}," ActiveSupport Messages RotationCoordinator build":{"type":"method","name":"build","children":[],"call":[" raise "]}," ActiveSupport Messages RotationCoordinator build_with_rotations":{"type":"method","name":"build_with_rotations","children":[],"call":["(send\n  (lvar :rotate_options) :map) reduce "," build ","salt to_s ","rotate_options map "," raise ","rotate_options empty? ","(send\n  (lvar :rotate_options) :map) uniq "," normalize_options ","rotate_options []= ","rotate_options [] reverse ","rotate_options [] ","rotate_options compact! ","rotate_options first "," transitional ","options call ","options is_a? ","@rotate_options map ","(send\n  (lvar :(send\n  (lvar :rotate_options) :map) uniq ) :map) reduce ","(send\n  (lvar :rotate_options) :map) uniq  map ","(send\n  (lvar :rotate_options) :map) uniq  empty? ","(send\n  (lvar :(send\n  (lvar :rotate_options) :map) uniq ) :map) uniq ","(send\n  (lvar :rotate_options) :map) uniq  []= ","(send\n  (lvar :rotate_options) :map) uniq  [] reverse ","(send\n  (lvar :rotate_options) :map) uniq  [] ","(send\n  (lvar :rotate_options) :map) uniq  compact! ","(send\n  (lvar :rotate_options) :map) uniq  first ","@(send\n  (lvar :rotate_options) :map) uniq  map "]}," ActiveSupport Messages RotationCoordinator normalize_options":{"type":"method","name":"normalize_options","children":[],"call":["options []= ","options extract! ","type == ","options [] parameters filter_map ","options [] parameters ","options [] ","options dup ","options dup  []= ","options dup  extract! ","options dup  [] parameters filter_map ","options dup  [] parameters ","options dup  [] ","options dup  dup "]}," ActiveSupport Messages RotationCoordinator changing_configuration!":{"type":"method","name":"changing_configuration!","children":[],"call":[" raise ","(send\n  (send\n    (ivar :@codecs) :keys) :map) join ","salt inspect ","@codecs keys map ","@codecs keys "," class ","@codecs any? "]}," ActiveSupport Messages RotationCoordinator on_rotation":{"type":"method","name":"on_rotation","children":[],"call":[" changing_configuration! "]}," ActiveSupport Messages RotationCoordinator clear_rotations":{"type":"method","name":"clear_rotations","children":[],"call":["@rotate_options clear "," changing_configuration! "]}," ActiveSupport Messages RotationCoordinator rotate_defaults":{"type":"method","name":"rotate_defaults","children":[],"call":[" rotate "]}," ActiveSupport Messages RotationCoordinator rotate":{"type":"method","name":"rotate","children":[],"call":["@rotate_options << "," changing_configuration! "," raise ","options empty? ! ","options empty? "]}," ActiveSupport Messages RotationCoordinator []=":{"type":"method","name":"[]=","children":[],"call":["@codecs []= "]}," ActiveSupport Messages RotationCoordinator []":{"type":"method","name":"[]","children":[],"call":[" build_with_rotations ","@codecs [] "]}," ActiveSupport Messages RotationCoordinator initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "]}," ActiveSupport Messages Metadata deserialize_from_json_safe_string":{"type":"method","name":"deserialize_from_json_safe_string","children":[],"call":[" deserialize "," decode "]}," ActiveSupport Messages Metadata serialize_to_json_safe_string":{"type":"method","name":"serialize_to_json_safe_string","children":[],"call":[" encode "," serialize "]}," ActiveSupport Messages Metadata deserialize_from_json":{"type":"method","name":"deserialize_from_json","children":[],"call":[" throw ","ActiveSupport JSON  decode "]}," ActiveSupport Messages Metadata serialize_to_json":{"type":"method","name":"serialize_to_json","children":[],"call":["ActiveSupport JSON  encode "]}," ActiveSupport Messages Metadata parse_expiry":{"type":"method","name":"parse_expiry","children":[],"call":["Time  parse ","Time  iso8601 ","ActiveSupport  use_standard_json_time_format ","expires_at is_a? ! ","expires_at is_a? "]}," ActiveSupport Messages Metadata dual_serialized_metadata_envelope_json?":{"type":"method","name":"dual_serialized_metadata_envelope_json?","children":[],"call":["string start_with? "]}," ActiveSupport Messages Metadata metadata_envelope?":{"type":"method","name":"metadata_envelope?","children":[],"call":["object key? ","object is_a? "]}," ActiveSupport Messages Metadata extract_from_metadata_envelope":{"type":"method","name":"extract_from_metadata_envelope","children":[],"call":[" throw ","hash [] != ","hash [] ","Time  now utc >= "," parse_expiry ","Time  now utc ","Time  now ","envelope [] ","hash [] to_s != ","purpose to_s ","hash [] to_s ","envelope []  [] != ","envelope []  [] ","envelope []  [] to_s != ","envelope []  [] to_s "]}," ActiveSupport Messages Metadata wrap_in_metadata_legacy_envelope":{"type":"method","name":"wrap_in_metadata_legacy_envelope","children":[],"call":["hash []= "," pick_expiry "," pick_ pick_expiry  "]}," ActiveSupport Messages Metadata wrap_in_metadata_envelope":{"type":"method","name":"wrap_in_metadata_envelope","children":[],"call":["hash []= ","purpose to_s "," pick_expiry "," pick_ pick_expiry  "]}," ActiveSupport Messages Metadata use_message_serializer_for_metadata?":{"type":"method","name":"use_message_serializer_for_metadata?","children":[],"call":["Metadata ENVELOPE_SERIALIZERS  include? "," serializer ","Metadata  use_message_serializer_for_metadata "]}," ActiveSupport Messages Metadata deserialize_with_metadata":{"type":"method","name":"deserialize_with_metadata","children":[],"call":[" throw ","expected_metadata none? "," extract_from_metadata_envelope [] "," extract_from_metadata_envelope "," metadata_envelope? "," deserialize "," deserialize_from_json_safe_string ","extracted [] "," deserialize_from_json "," dual_serialized_metadata_envelope_json? "," extract_from_metadata_ deserialize_from_json  [] "," extract_from_metadata_ deserialize_from_json  "," metadata_ deserialize_from_json ? "," extract_from_metadata_envelope  [] "," dual_serialized_metadata_ deserialize_from_json _json? "]}," ActiveSupport Messages Metadata serialize_with_metadata":{"type":"method","name":"serialize_with_metadata","children":[],"call":[" serialize "," wrap_in_metadata_envelope "," serialize_to_json "," wrap_in_metadata_legacy_envelope "," serialize_to_json_safe_string "," use_message_serializer_for_metadata? ! "," use_message_serializer_for_metadata? ","metadata any? "," wrap_in_meta wrap_in_metadata_envelope _envelope "," wrap_in_metadata_ wrap_in_metadata_legacy_envelope  "," wrap_in_meta wrap_in_metadata_envelope _legacy_envelope "," wrap_in_metadata_legacy_ wrap_in_metadata_legacy_envelope  "," use_message_serializer_for_meta wrap_in_metadata_envelope ? ! "," use_message_serializer_for_meta wrap_in_metadata_envelope ? ","meta wrap_in_metadata_envelope  any? "]}," ActiveSupport Messages Codec use_message_serializer_for_metadata?":{"type":"method","name":"use_message_serializer_for_metadata?","children":[],"call":["@force_legacy_metadata_serializer ! "]}," ActiveSupport Messages Codec catch_and_raise":{"type":"method","name":"catch_and_raise","children":[],"call":[" raise ","as new ","error to_s ","block call "," catch ","as new  to_s "]}," ActiveSupport Messages Codec catch_and_ignore":{"type":"method","name":"catch_and_ignore","children":[],"call":["block call "," catch "]}," ActiveSupport Messages Codec deserialize":{"type":"method","name":"deserialize","children":[],"call":[" throw "," serializer load "," serializer "]}," ActiveSupport Messages Codec serialize":{"type":"method","name":"serialize","children":[],"call":[" serializer dump "," serializer "]}," ActiveSupport Messages Codec decode":{"type":"method","name":"decode","children":[],"call":[" throw "," Base64  strict_decode64 "," Base64  urlsafe_decode64 "]}," ActiveSupport Messages Codec encode":{"type":"method","name":"encode","children":[],"call":[" Base64  strict_encode64 "," Base64  urlsafe_encode64 "]}," ActiveSupport Messages Codec initialize":{"type":"method","name":"initialize","children":[],"call":["options [] ","SerializerWithFallback  [] ","@serializer is_a? "," class default_serializer "," class ","SerializerWithFallback  []  is_a? "]}," ActiveSupport MessageVerifiers build":{"type":"method","name":"build","children":[],"call":["MessageVerifier  new ","secret_generator call "]}," ActiveSupport MessageVerifier separator_at?":{"type":"method","name":"separator_at?","children":[],"call":["signed_message [] == ","signed_message [] "]}," ActiveSupport MessageVerifier extract_encoded":{"type":"method","name":"extract_encoded","children":[],"call":[" throw "," digest_matches_data? ","signed [] "," digest_length_in_hex ","separator_index + "," separator_index_for ","signed valid_encoding? ! ","signed valid_encoding? ","signed nil? "," signed [] _matches_data? "," signed [] _length_in_hex "," separator_index_for  + ","  separator_index_for _for "]}," ActiveSupport MessageVerifier sign_encoded":{"type":"method","name":"sign_encoded","children":[],"call":["encoded << << ","encoded << "," generate_digest "," generate_ generate_digest  "]}," ActiveSupport MessageVerifier inspect":{"type":"method","name":"inspect","children":[],"call":["%#016x % "," object_id << "," object_id "," class name "," class "]}," ActiveSupport MessageVerifier read_message":{"type":"method","name":"read_message","children":[],"call":[" deserialize_with_metadata "," decode "," extract_encoded "]}," ActiveSupport MessageVerifier create_message":{"type":"method","name":"create_message","children":[],"call":[" sign_encoded "," encode "," serialize_with_metadata "]}," ActiveSupport MessagePack Serializer install_unregistered_type_handler":{"type":"method","name":"install_unregistered_type_handler","children":[],"call":["Extensions  install_unregistered_type_error "," message_pack_factory "]}," ActiveSupport MessagePack Serializer message_pack_pool":{"type":"method","name":"message_pack_pool","children":[],"call":[" message_pack_factory pool ","ENV  fetch to_i ","ENV  fetch "," message_pack_factory "," message_pack_factory freeze "," install_unregistered_type_handler ","Extensions  install "," message_pack_factory frozen? "]}," ActiveSupport MessagePack Serializer warmup":{"type":"method","name":"warmup","children":[],"call":[" message_pack_pool "]}," ActiveSupport MessagePack Serializer message_pack_factory=":{"type":"method","name":"message_pack_factory=","children":[],"call":[]}," ActiveSupport MessagePack Serializer message_pack_factory":{"type":"method","name":"message_pack_factory","children":[],"call":[" MessagePack Factory  new "]}," ActiveSupport MessagePack Serializer signature?":{"type":"method","name":"signature?","children":[],"call":["dumped getbyte == ","SIGNATURE  getbyte ","dumped getbyte "]}," ActiveSupport MessagePack Serializer load":{"type":"method","name":"load","children":[],"call":["unpacker full_unpack "," raise ","unpacker read == ","unpacker read ","unpacker feed_reference "," message_pack_pool unpacker "," message_pack_pool "]}," ActiveSupport MessagePack Serializer dump":{"type":"method","name":"dump","children":[],"call":["packer full_pack ","packer write "," message_pack_pool packer "," message_pack_pool "]}," ActiveSupport MessagePack Extensions read_object":{"type":"method","name":"read_object","children":[],"call":[" raise_invalid_format "," read_class json_create ","unpacker read "," read_class "," read_class from_msgpack_ext "]}," ActiveSupport MessagePack Extensions write_object":{"type":"method","name":"write_object","children":[],"call":[" raise_unserializable ","packer write ","object as_json "," write_class ","object class ","object class respond_to? ","object to_msgpack_ext "]}," ActiveSupport MessagePack Extensions read_class":{"type":"method","name":"read_class","children":[],"call":[" load_class ","unpacker read "]}," ActiveSupport MessagePack Extensions write_class":{"type":"method","name":"write_class","children":[],"call":["packer write "," dump_class "]}," ActiveSupport MessagePack Extensions load_class":{"type":"method","name":"load_class","children":[],"call":[" raise ","error name to_s == ","error name to_s ","error name ","Object  const_get "]}," ActiveSupport MessagePack Extensions dump_class":{"type":"method","name":"dump_class","children":[],"call":["klass name "," raise "]}," ActiveSupport MessagePack Extensions raise_invalid_format":{"type":"method","name":"raise_invalid_format","children":[],"call":[" raise "]}," ActiveSupport MessagePack Extensions raise_unserializable":{"type":"method","name":"raise_unserializable","children":[],"call":[" raise ","object inspect ","object class "]}," ActiveSupport MessagePack Extensions read_hash_with_indifferent_access":{"type":"method","name":"read_hash_with_indifferent_access","children":[],"call":["ActiveSupport HashWithIndifferentAccess  new ","unpacker read "]}," ActiveSupport MessagePack Extensions write_hash_with_indifferent_access":{"type":"method","name":"write_hash_with_indifferent_access","children":[],"call":["packer write ","hwia to_h "]}," ActiveSupport MessagePack Extensions read_set":{"type":"method","name":"read_set","children":[],"call":["Set  new ","unpacker read "]}," ActiveSupport MessagePack Extensions write_set":{"type":"method","name":"write_set","children":[],"call":["packer write ","set to_a "]}," ActiveSupport MessagePack Extensions read_range":{"type":"method","name":"read_range","children":[],"call":["Range  new ","unpacker read "]}," ActiveSupport MessagePack Extensions write_range":{"type":"method","name":"write_range","children":[],"call":["packer write ","range exclude_end? ","range end ","range begin "]}," ActiveSupport MessagePack Extensions read_duration":{"type":"method","name":"read_duration","children":[],"call":["ActiveSupport Duration  new ","parts compact! ","ActiveSupport Duration PARTS  zip to_h ","ActiveSupport Duration PARTS  zip ","unpacker read ","ActiveSupport Duration PARTS  zip to_h  compact! "]}," ActiveSupport MessagePack Extensions write_duration":{"type":"method","name":"write_duration","children":[],"call":["packer write ","duration _parts values_at ","duration _parts ","duration value "]}," ActiveSupport MessagePack Extensions read_time_zone":{"type":"method","name":"read_time_zone","children":[],"call":[" load_time_zone ","unpacker read "]}," ActiveSupport MessagePack Extensions write_time_zone":{"type":"method","name":"write_time_zone","children":[],"call":["packer write "," dump_time_zone "]}," ActiveSupport MessagePack Extensions load_time_zone":{"type":"method","name":"load_time_zone","children":[],"call":["ActiveSupport TimeZone  [] "]}," ActiveSupport MessagePack Extensions dump_time_zone":{"type":"method","name":"dump_time_zone","children":[],"call":["time_zone name "]}," ActiveSupport MessagePack Extensions read_time_with_zone":{"type":"method","name":"read_time_with_zone","children":[],"call":["ActiveSupport TimeWithZone  new "," read_time_zone "," read_time "]}," ActiveSupport MessagePack Extensions write_time_with_zone":{"type":"method","name":"write_time_with_zone","children":[],"call":[" write_time_zone ","twz time_zone "," write_time ","twz utc "]}," ActiveSupport MessagePack Extensions read_time":{"type":"method","name":"read_time","children":[],"call":["Time  at_without_coercion ","unpacker read "]}," ActiveSupport MessagePack Extensions write_time":{"type":"method","name":"write_time","children":[],"call":["packer write ","time utc_offset ","time tv_nsec ","time tv_sec "]}," ActiveSupport MessagePack Extensions read_date":{"type":"method","name":"read_date","children":[],"call":["Date  jd ","unpacker read "]}," ActiveSupport MessagePack Extensions write_date":{"type":"method","name":"write_date","children":[],"call":["packer write ","date jd "]}," ActiveSupport MessagePack Extensions read_datetime":{"type":"method","name":"read_datetime","children":[],"call":["DateTime  jd "," read_rational ","unpacker read + ","unpacker read "]}," ActiveSupport MessagePack Extensions write_datetime":{"type":"method","name":"write_datetime","children":[],"call":[" write_rational ","datetime offset ","datetime sec_fraction ","packer write ","datetime sec ","datetime min ","datetime hour ","datetime jd "]}," ActiveSupport MessagePack Extensions read_complex":{"type":"method","name":"read_complex","children":[],"call":[" Complex ","unpacker read "]}," ActiveSupport MessagePack Extensions write_complex":{"type":"method","name":"write_complex","children":[],"call":["packer write ","complex imaginary ","complex real "]}," ActiveSupport MessagePack Extensions read_rational":{"type":"method","name":"read_rational","children":[],"call":[" Rational ","unpacker read ","numerator zero? ","unpacker read  zero? "]}," ActiveSupport MessagePack Extensions write_rational":{"type":"method","name":"write_rational","children":[],"call":["packer write ","rational denominator ","rational numerator zero? ","rational numerator "]}," ActiveSupport MessagePack Extensions install_unregistered_type_fallback":{"type":"method","name":"install_unregistered_type_fallback","children":[],"call":["registry register_type "," method "]}," ActiveSupport MessagePack Extensions install_unregistered_type_error":{"type":"method","name":"install_unregistered_type_error","children":[],"call":["registry register_type "," method "]}," ActiveSupport MessagePack Extensions install":{"type":"method","name":"install","children":[],"call":["registry register_type "," method ","URI  method "," MessagePack Bigint  method "]}," ActiveSupport MessagePack CacheSerializer install_unregistered_type_handler":{"type":"method","name":"install_unregistered_type_handler","children":[],"call":["Extensions  install_unregistered_type_fallback "," message_pack_factory "]}," ActiveSupport MessagePack CacheSerializer load":{"type":"method","name":"load","children":[],"call":[]}," ActiveSupport MessageEncryptors build":{"type":"method","name":"build","children":[],"call":["MessageEncryptor  new "," Array ","secret_generator call ","MessageEncryptor  key_len ","options [] ","secret_generator call _generator call "]}," ActiveSupport MessageEncryptor extract_parts":{"type":"method","name":"extract_parts","children":[],"call":[" decode ","parts reverse! map! ","parts reverse! ","parts << ","encrypted_message [] ","SEPARATOR  length + "," length_of_encoded_iv ","SEPARATOR  length "," extract_part "," length_of_encoded_auth_tag "," aead_mode? ","encrypted_message length "]}," ActiveSupport MessageEncryptor extract_part":{"type":"method","name":"extract_part","children":[],"call":[" throw ","encrypted_message [] ","encrypted_message [] == ","SEPARATOR  length ","index - ","rindex - ","rindex -  - ","rrindex -  - "]}," ActiveSupport MessageEncryptor join_parts":{"type":"method","name":"join_parts","children":[],"call":["(send\n  (lvar :parts) :map!) join "," encode ","parts map! "]}," ActiveSupport MessageEncryptor length_of_encoded_auth_tag":{"type":"method","name":"length_of_encoded_auth_tag","children":[],"call":[" length_after_encode "]}," ActiveSupport MessageEncryptor length_of_encoded_iv":{"type":"method","name":"length_of_encoded_iv","children":[],"call":[" length_after_encode "," new_cipher iv_len "," new_cipher "]}," ActiveSupport MessageEncryptor length_after_encode":{"type":"method","name":"length_after_encode","children":[],"call":["4 * ","(send\n  (lvar :length_before_encode) :/\n  (float 3.0)) ceil ","length_before_encode / ","(send\n  (send\n    (int 4) :*\n    (lvar :length_before_encode)) :/\n  (float 3.0)) ceil ","4 * / "]}," ActiveSupport MessageEncryptor verify":{"type":"method","name":"verify","children":[],"call":["@verifier read_message "]}," ActiveSupport MessageEncryptor sign":{"type":"method","name":"sign","children":[],"call":["@verifier create_message "]}," ActiveSupport MessageEncryptor inspect":{"type":"method","name":"inspect","children":[],"call":["%#016x % "," object_id << "," object_id "," class name "," class "]}," ActiveSupport MessageEncryptor read_message":{"type":"method","name":"read_message","children":[],"call":[" deserialize_with_metadata "," decrypt "," verify "]}," ActiveSupport MessageEncryptor create_message":{"type":"method","name":"create_message","children":[],"call":[" sign "," encrypt "," serialize_with_metadata "]}," ActiveSupport LoggerThreadSafeLevel local_level_key":{"type":"method","name":"local_level_key","children":[],"call":[" object_id "]}," ActiveSupport LogSubscriber mode_from":{"type":"method","name":"mode_from","children":[],"call":["modes join ","modes any? ","MODES  values_at ","options compact_blank keys ","options compact_blank ","ActiveSupport  deprecator warn ","(str \"Bolding log text with a positional boolean is deprecated and will be removed\\n\") squish ","ActiveSupport  deprecator ","options is_a? ","MODES  values_at  join ","MODES  values_at  any? "]}," ActiveSupport LogSubscriber silenced?":{"type":"method","name":"silenced?","children":[],"call":[" logger level > ","@event_levels fetch "," logger level "," logger "," logger nil? ","@event_levels [] "]}," ActiveSupport LogSubscriber subscribe_log_level":{"type":"method","name":"subscribe_log_level","children":[],"call":[" set_event_levels "," log_levels= "," log_levels merge "," Logger  const_get ","level upcase "," log_levels ","LEVEL_CHECKS  fetch "]}," ActiveSupport LogSubscriber set_event_levels":{"type":"method","name":"set_event_levels","children":[],"call":[" subscriber event_levels= "," namespace "," log_levels transform_keys "," log_levels "," subscriber "]}," ActiveSupport KeyGenerator inspect":{"type":"method","name":"inspect","children":[],"call":["%#016x % "," object_id << "," object_id "," class name "," class "]}," ActiveSupport IsolatedExecutionState state":{"type":"method","name":"state","children":[],"call":[" context active_support_execution_state "," context "]}," ActiveSupport IsolatedExecutionState context":{"type":"method","name":"context","children":[],"call":[" scope current "," scope "]}," ActiveSupport Inflector downcase_first":{"type":"method","name":"downcase_first","children":[],"call":["string [] downcase concat ","string [] ","string [] downcase ","string length > ","string length "," +@ "]}," I18n Railtie setup_raise_on_missing_translations_config":{"type":"method","name":"setup_raise_on_missing_translations_config","children":[],"call":[]}," ActiveSupport ForkTracker after_fork_callback":{"type":"method","name":"after_fork_callback","children":[],"call":["@callbacks each ","@pid != ","Process  pid "]}," ActiveSupport ErrorReporter disable":{"type":"method","name":"disable","children":[],"call":["disabled_subscribers delete ","disabled_subscribers << ","ActiveSupport IsolatedExecutionState  [] "]}," ActiveSupport ErrorReporter unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":["subscriber === ","@subscribers delete_if "]}," TestHelper ErrorSubscriber report":{"type":"method","name":"report","children":[],"call":["@events << "]}," TestHelper ErrorSubscriber initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport EnvironmentInquirer local?":{"type":"method","name":"local?","children":[],"call":[]}," ActiveSupport EncryptedFile key?":{"type":"method","name":"key?","children":[],"call":[" read_key_file "," read_env_key "]}," ActiveSupport EncryptedConfiguration inspect":{"type":"method","name":"inspect","children":[],"call":["%#016x % "," object_id << "," object_id "," class name "," class "]}," ActiveSupport EncryptedConfiguration validate!":{"type":"method","name":"validate!","children":[],"call":[" deserialize "," read "]}," ActiveSupport EncryptedConfiguration InvalidContentError message":{"type":"method","name":"message","children":[],"call":[" cause message "," cause "," cause is_a? "]}," ActiveSupport EncryptedConfiguration InvalidContentError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport DescendantsTracker reject!":{"type":"method","name":"reject!","children":[],"call":["@excluded_descendants include? ","classes reject! "]}," ActiveSupport DescendantsTracker ReloadedClassesFiltering descendants":{"type":"method","name":"descendants","children":[],"call":["DescendantsTracker  reject! "]}," ActiveSupport DescendantsTracker ReloadedClassesFiltering subclasses":{"type":"method","name":"subclasses","children":[],"call":["DescendantsTracker  reject! "]}," ActiveSupport DescendantsTracker WeakSet <<":{"type":"method","name":"<<","children":[],"call":[" []= "]}," ActiveSupport DescendantsTracker WeakSet to_a":{"type":"method","name":"to_a","children":[],"call":["@map values "]}," ActiveSupport deprecator":{"type":"method","name":"deprecator","children":[],"call":[]}," ActiveSupport Deprecation Reporting end_silence":{"type":"method","name":"end_silence","children":[],"call":["@silence_counter value "]}," ActiveSupport Deprecation Reporting begin_silence":{"type":"method","name":"begin_silence","children":[],"call":["@silence_counter value "]}," ActiveSupport Deprecation DeprecatedConstantProxy extended":{"type":"method","name":"extended","children":[],"call":["base extend "," target ","@deprecator warn "," caller_locations "]}," ActiveSupport Deprecation DeprecatedConstantProxy prepend_features":{"type":"method","name":"prepend_features","children":[],"call":["base prepend "," target ","@deprecator warn "," caller_locations "]}," ActiveSupport Deprecation DeprecatedConstantProxy append_features":{"type":"method","name":"append_features","children":[],"call":["base include "," target ","@deprecator warn "," caller_locations "]}," ActiveSupport Deprecation InstanceDelegator ClassMethods _instance":{"type":"method","name":"_instance","children":[],"call":[" new ","MUTEX  synchronize "]}," ActiveSupport Deprecation InstanceDelegator ClassMethods instance":{"type":"method","name":"instance","children":[],"call":[" _instance ","ActiveSupport  deprecator warn ","ActiveSupport  deprecator "]}," ActiveSupport Deprecation Deprecators apply_options":{"type":"method","name":"apply_options","children":[],"call":["deprecator public_send ","@options each "]}," ActiveSupport Deprecation Deprecators set_option":{"type":"method","name":"set_option","children":[],"call":["deprecator public_send "," each ","@options []= "]}," ActiveSupport Deprecation Deprecators silence":{"type":"method","name":"silence","children":[],"call":["deprecator end_silence "," each ","block call ","deprecator begin_silence "]}," ActiveSupport Deprecation Deprecators disallowed_warnings=":{"type":"method","name":"disallowed_warnings=","children":[],"call":[" set_option "]}," ActiveSupport Deprecation Deprecators disallowed_behavior=":{"type":"method","name":"disallowed_behavior=","children":[],"call":[" set_option "]}," ActiveSupport Deprecation Deprecators behavior=":{"type":"method","name":"behavior=","children":[],"call":[" set_option "]}," ActiveSupport Deprecation Deprecators debug=":{"type":"method","name":"debug=","children":[],"call":[" set_option "]}," ActiveSupport Deprecation Deprecators silenced=":{"type":"method","name":"silenced=","children":[],"call":[" set_option "]}," ActiveSupport Deprecation Deprecators each":{"type":"method","name":"each","children":[],"call":["@deprecators each_value "," to_enum "," __method__ "]}," ActiveSupport Deprecation Deprecators []=":{"type":"method","name":"[]=","children":[],"call":["@deprecators []= "," apply_options "]}," ActiveSupport Deprecation Deprecators []":{"type":"method","name":"[]","children":[],"call":["@deprecators [] "]}," ActiveSupport Deprecation Deprecators initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Deprecation Behavior arity_of_callable":{"type":"method","name":"arity_of_callable","children":[],"call":["callable method arity ","callable method ","callable arity ","callable respond_to? "]}," ActiveSupport DeepMergeable deep_merge?":{"type":"method","name":"deep_merge?","children":[],"call":["other is_a? "," class "]}," ActiveSupport DeepMergeable deep_merge!":{"type":"method","name":"deep_merge!","children":[],"call":["block call "," block_given? ","this_val deep_merge ","this_val deep_merge? ","this_val is_a? "," merge! "]}," ActiveSupport DeepMergeable deep_merge":{"type":"method","name":"deep_merge","children":[],"call":[" dup deep_merge! "," dup "]}," Location spot":{"type":"method","name":"spot","children":[],"call":["ErrorHighlight  spot "]}," ActiveSupport SafeBuffer string_into_safe_buffer":{"type":"method","name":"string_into_safe_buffer","children":[],"call":["new_safe_buffer instance_variable_set ","SafeBuffer  new ","new_string is_a? ","SafeBuffer  new  instance_variable_set "]}," ActiveSupport SafeBuffer chr":{"type":"method","name":"chr","children":[],"call":[" string_into_safe_buffer "," html_safe? "]}," ActiveSupport SafeBuffer slice!":{"type":"method","name":"slice!","children":[],"call":[" string_into_safe_buffer ","new_string nil? "," html_safe? ! "," html_safe? "]}," String downcase_first":{"type":"method","name":"downcase_first","children":[],"call":["ActiveSupport Inflector  downcase_first "]}," Range _empty_range?":{"type":"method","name":"_empty_range?","children":[],"call":["comp == ","comp > ","comp nil? ","b <=> ","e nil? ","b nil? ","b <=>  == ","b <=>  > ","b <=>  nil? "]}," Range overlap?":{"type":"method","name":"overlap?","children":[],"call":[" _empty_range? ","self_begin == "," exclude_end? "," end ","other begin ","other exclude_end? ","other end "," begin "," raise ","other is_a? ","other cover? "," cover? ","other begin == "," begin  == "]}," Pathname blank?":{"type":"method","name":"blank?","children":[],"call":[" to_s empty? "," to_s "]}," Object with":{"type":"method","name":"with","children":[],"call":[" public_send ","old_values each ","old_values []= ","attributes each "]}," Data as_json":{"type":"method","name":"as_json","children":[],"call":[" to_h as_json "," to_h "]}," Module deep_dup":{"type":"method","name":"deep_dup","children":[],"call":[" name nil? "," name "]}," Numeric zettabytes":{"type":"method","name":"zettabytes","children":[],"call":[" * "]}," Hash deep_merge?":{"type":"method","name":"deep_merge?","children":[],"call":["other is_a? "]}," ERB Util tokenize":{"type":"method","name":"tokenize","children":[],"call":[]}," ActiveSupport CoreExt ERBUtil html_escape":{"type":"method","name":"html_escape","children":[],"call":[" unwrapped_html_escape html_safe "," unwrapped_html_escape ","ActiveSupport Multibyte Unicode  tidy_bytes ","s html_safe? ","s to_s "," unwrapped_html_es to_s cape html_s to_s afe "," unwrapped_html_es to_s cape ","ActiveSupport Multibyte Unicode  tidy_bytes to_s  ","s to_s  html_s to_s afe? ","s to_s  to_s to_s  "]}," DateAndTime Calculations quarter":{"type":"method","name":"quarter","children":[],"call":["(send\n  (send nil :month) :/\n  (float 3.0)) ceil "," month / "," month "]}," ActiveSupport Configurable ClassMethods inherited":{"type":"method","name":"inherited","children":[],"call":["subclass class_eval "]}," ActiveSupport Concurrency NullLock synchronize":{"type":"method","name":"synchronize","children":[],"call":[]}," ActiveSupport Concurrency ThreadLoadInterlockAwareMonitor mon_exit":{"type":"method","name":"mon_exit","children":[],"call":["@mutex unlock ","@count == "," raise ","@owner == ","Thread  current "]}," ActiveSupport Concurrency ThreadLoadInterlockAwareMonitor mon_enter":{"type":"method","name":"mon_enter","children":[],"call":["Thread  current ","@mutex lock ","@owner != ","Thread  current  != "]}," ActiveSupport Concurrency ThreadLoadInterlockAwareMonitor mon_try_enter":{"type":"method","name":"mon_try_enter","children":[],"call":["Thread  current ","@mutex try_lock ","@owner != ","Thread  current  != "]}," ActiveSupport Concurrency ThreadLoadInterlockAwareMonitor initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "]}," ActiveSupport Concurrency LoadInterlockAwareMonitorMixin synchronize":{"type":"method","name":"synchronize","children":[],"call":[" mon_exit ","Thread  handle_interrupt "," mon_enter "]}," ActiveSupport Concurrency LoadInterlockAwareMonitorMixin mon_enter":{"type":"method","name":"mon_enter","children":[],"call":["ActiveSupport Dependencies  interlock permit_concurrent_loads ","ActiveSupport Dependencies  interlock "," mon_try_enter "]}," ActiveSupport Cache WriteOptions expires_at=":{"type":"method","name":"expires_at=","children":[],"call":["@options []= ","@options delete "]}," ActiveSupport Cache WriteOptions expires_at":{"type":"method","name":"expires_at","children":[],"call":["@options [] "]}," ActiveSupport Cache WriteOptions expires_in=":{"type":"method","name":"expires_in=","children":[],"call":["@options []= ","@options delete "]}," ActiveSupport Cache WriteOptions expires_in":{"type":"method","name":"expires_in","children":[],"call":["@options [] "]}," ActiveSupport Cache WriteOptions version=":{"type":"method","name":"version=","children":[],"call":["@options []= "]}," ActiveSupport Cache WriteOptions version":{"type":"method","name":"version","children":[],"call":["@options [] "]}," ActiveSupport Cache WriteOptions initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Cache Store _instrument":{"type":"method","name":"_instrument","children":[],"call":["ActiveSupport Notifications  instrument ","payload merge! ","options is_a? ","payload []= "," class name "," class "," logger debug "," logger ","options inspect ","options blank? "," normalize_key ","payload [] ","payload [] size "," silence? ! "," silence? "," logger debug? "]}," ActiveSupport Cache Store validate_options":{"type":"method","name":"validate_options","children":[],"call":[" raise ","options [] ","options [] ! ","Cache  format_version < ","Cache  format_version ","options key? "]}," ActiveSupport Cache Store handle_invalid_expires_in":{"type":"method","name":"handle_invalid_expires_in","children":[],"call":[" logger error ","error message ","error class "," logger ","ActiveSupport  error_reporter "," raise ","ActiveSupport Cache Store  raise_on_invalid_cache_expiration_time ","ArgumentError  new "," logger ArgumentError  new  ","ArgumentError  new  message ","ArgumentError  new  class ","ActiveSupport  ArgumentError  new _reporter "]}," ActiveSupport Cache Store default_serializer":{"type":"method","name":"default_serializer","children":[],"call":[" raise ","Cache  format_version inspect ","Cache  format_version ","Cache SerializerWithFallback  [] ","ActiveSupport  deprecator warn ","ActiveSupport  deprecator "]}," ActiveSupport Cache SerializerWithFallback MessagePackWithFallback available?":{"type":"method","name":"available?","children":[],"call":[" require "," silence_warnings "]}," ActiveSupport Cache SerializerWithFallback MessagePackWithFallback dumped?":{"type":"method","name":"dumped?","children":[],"call":["ActiveSupport MessagePack  signature? "," available? "]}," ActiveSupport Cache SerializerWithFallback MessagePackWithFallback _load":{"type":"method","name":"_load","children":[],"call":["ActiveSupport MessagePack CacheSerializer  load "]}," ActiveSupport Cache SerializerWithFallback MessagePackWithFallback dump":{"type":"method","name":"dump","children":[],"call":["ActiveSupport MessagePack CacheSerializer  dump "]}," ActiveSupport Cache SerializerWithFallback Marshal71WithFallback dumped?":{"type":"method","name":"dumped?","children":[],"call":["dumped start_with? "]}," ActiveSupport Cache SerializerWithFallback Marshal71WithFallback _load":{"type":"method","name":"_load","children":[],"call":[" marshal_load "]}," ActiveSupport Cache SerializerWithFallback Marshal71WithFallback dump":{"type":"method","name":"dump","children":[],"call":["Marshal  dump "]}," ActiveSupport Cache SerializerWithFallback Marshal70WithFallback dumped?":{"type":"method","name":"dumped?","children":[],"call":["dumped start_with? "]}," ActiveSupport Cache SerializerWithFallback Marshal70WithFallback _load":{"type":"method","name":"_load","children":[],"call":["Cache Entry  unpack "," marshal_load ","Zlib Inflate  inflate ","marked start_with? ","marked byteslice "]}," ActiveSupport Cache SerializerWithFallback Marshal70WithFallback dump_compressed":{"type":"method","name":"dump_compressed","children":[],"call":["MARK_UNCOMPRESSED  + ","MARK_COMPRESSED  + ","compressed bytesize < ","dumped bytesize ","compressed bytesize ","Zlib Deflate  deflate ","dumped bytesize >= ","Marshal  dump ","entry pack ","Zlib Deflate  deflate  bytesize < ","Marshal  dump  bytesize ","Zlib Deflate  deflate  bytesize ","Marshal  dump  bytesize >= "]}," ActiveSupport Cache SerializerWithFallback Marshal70WithFallback dump":{"type":"method","name":"dump","children":[],"call":["MARK_UNCOMPRESSED  + ","Marshal  dump ","entry pack "]}," ActiveSupport Cache SerializerWithFallback Marshal61WithFallback dumped?":{"type":"method","name":"dumped?","children":[],"call":["dumped start_with? "]}," ActiveSupport Cache SerializerWithFallback Marshal61WithFallback dump_compressed":{"type":"method","name":"dump_compressed","children":[],"call":["Marshal  dump ","entry compressed "]}," ActiveSupport Cache SerializerWithFallback Marshal61WithFallback dump":{"type":"method","name":"dump","children":[],"call":["Marshal  dump "]}," ActiveSupport Cache SerializerWithFallback PassthroughWithFallback dumped?":{"type":"method","name":"dumped?","children":[],"call":["dumped is_a? "]}," ActiveSupport Cache SerializerWithFallback PassthroughWithFallback _load":{"type":"method","name":"_load","children":[],"call":[]}," ActiveSupport Cache SerializerWithFallback PassthroughWithFallback dump_compressed":{"type":"method","name":"dump_compressed","children":[],"call":["entry compressed "]}," ActiveSupport Cache SerializerWithFallback PassthroughWithFallback dump":{"type":"method","name":"dump","children":[],"call":[]}," ActiveSupport Cache SerializerWithFallback marshal_load":{"type":"method","name":"marshal_load","children":[],"call":[" raise ","error message ","Marshal  load "]}," ActiveSupport Cache SerializerWithFallback load":{"type":"method","name":"load","children":[],"call":["dumped class ","Cache Store  logger ","PassthroughWithFallback  _load ","PassthroughWithFallback  dumped? ","dumped byteslice inspect ","dumped byteslice ","Marshal70WithFallback  _load ","Marshal70WithFallback  dumped? ","Marshal71WithFallback  _load ","Marshal71WithFallback  dumped? ","MessagePackWithFallback  _load ","MessagePackWithFallback  dumped? ","dumped is_a? "]}," ActiveSupport Cache SerializerWithFallback []":{"type":"method","name":"[]","children":[],"call":[]}," ActiveSupport Cache RedisCacheStore supports_expire_nx?":{"type":"method","name":"supports_expire_nx?","children":[],"call":["Gem Version  new >= ","Gem Version  new ","redis_versions all? ","Array  wrap pluck ","Array  wrap ","c info "," redis then "," redis "]}," ActiveSupport Cache RedisCacheStore change_counter":{"type":"method","name":"change_counter","children":[],"call":["c expire ","options [] to_i ","options [] ","c ttl < ","c ttl ","count != ","c incrby ","(send\n  (lvar :c) :pipelined) first ","pipeline call ","pipeline incrby ","c pipelined "," supports_expire_nx? ","c node_for ","c is_a? "," redis then "," redis ","expires_in to_i ","ttl < ","pipeline ttl ","c node_for  expire ","c node_for  ttl < ","c node_for  ttl ","c incrby  != ","c node_for ount != ","c node_for  inc node_for rby ","(send\n  (lvar :c node_for ) :pipelined) first ","pipeline c node_for all ","pipeline inc node_for rby ","c node_for  pipelined ","c node_for  node_for ","c node_for  is_a? ","options []  to_i "]}," ActiveSupport Cache RedisCacheStore pipeline_entries":{"type":"method","name":"pipeline_entries","children":[],"call":["c pipelined ","node pipelined ","(send\n  (lvar :entries) :group_by) each ","c node_for ","entries group_by ","c is_a? "," redis then "," redis "]}," ActiveSupport Cache NullStore inspect":{"type":"method","name":"inspect","children":[],"call":["@options inspect "," class name "," class "]}," ActiveSupport Cache MemoryStore DupCoder load_value":{"type":"method","name":"load_value","children":[],"call":["string dup ","Marshal  load ","string start_with? "]}," ActiveSupport Cache MemoryStore DupCoder dump_value":{"type":"method","name":"dump_value","children":[],"call":["Marshal  dump ","value dup ","value start_with? ! ","value start_with? ","value is_a? "]}," ActiveSupport Cache MemCacheStore default_serializer":{"type":"method","name":"default_serializer","children":[],"call":["Cache SerializerWithFallback  [] ","ActiveSupport  deprecator warn ","ActiveSupport  deprecator ","Cache  format_version == ","Cache  format_version "]}," ActiveSupport Cache MemCacheStore inspect":{"type":"method","name":"inspect","children":[],"call":["instance inspect "," options inspect "," options "," class "]}," ActiveSupport Cache FileStore inspect":{"type":"method","name":"inspect","children":[],"call":["@options inspect "," class name "," class "]}," ActiveSupport Cache Coder load_version":{"type":"method","name":"load_version","children":[],"call":["dumped_version force_encoding ","Marshal  load ","dumped_version start_with? "]}," ActiveSupport Cache Coder dump_version":{"type":"method","name":"dump_version","children":[],"call":["version b ","Marshal  dump ","version start_with? ","version encoding != ","version encoding "]}," ActiveSupport Cache Coder try_compress":{"type":"method","name":"try_compress","children":[],"call":["compressed bytesize < ","string bytesize ","compressed bytesize ","@compressor deflate ","string bytesize >= ","@compressor deflate  bytesize < ","@compressor deflate  bytesize "]}," ActiveSupport Cache Coder type_for_string":{"type":"method","name":"type_for_string","children":[],"call":["STRING_ENCODINGS  key ","value encoding ","value instance_of? "]}," ActiveSupport Cache Coder signature?":{"type":"method","name":"signature?","children":[],"call":["dumped start_with? ","dumped is_a? "]}," ActiveSupport Cache Coder LazyEntry mismatched?":{"type":"method","name":"mismatched?","children":[],"call":[" value ","mismatched ! "," tap "]}," ActiveSupport Cache Coder LazyEntry value":{"type":"method","name":"value","children":[],"call":["@serializer load ","@compressor inflate ","@resolved ! "]}," ActiveSupport Cache Coder LazyEntry initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Cache Coder StringDeserializer load":{"type":"method","name":"load","children":[],"call":["payload force_encoding "]}," ActiveSupport Cache Coder StringDeserializer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport Cache Coder load":{"type":"method","name":"load","children":[],"call":["LazyEntry  new ","STRING_DESERIALIZERS  [] ","type & ","COMPRESSED_FLAG  ~ ","type & > ","dumped byteslice ","PACKED_VERSION_INDEX  + ","(lvar :version_length) max "," load_version ","version_length >= ","expires_at < ","dumped unpack1 ","@serializer load "," signature? ! "," signature? ","dumped unpack1  & ","dumped unpack1  & > ","(lvar : load_version _length) max ","(lvar :dumped unpack1 ) max "," load_ load_version  "," load_version _length >= ","dumped unpack1  >= ","dumped unpack1  < "]}," ActiveSupport Cache Coder dump_compressed":{"type":"method","name":"dump_compressed","children":[],"call":["packed << ","(lvar :type) pack ","SIGNATURE  b "," dump_version ","entry version ","entry expires_at ","type | "," try_compress ","@serializer dump ","entry value ","entry value b "," type_for_string ","@serializer dump_compressed ","SIGNATURE  b  << ","(lvar :type | ) pack ","(lvar : type_for_string ) pack "," dump_ dump_version  ","entry  dump_version  ","type |  | "," type_for_string  | "," type | _for_string ","  type_for_string _for_string ","@serializer dump_ try_compress  "]}," ActiveSupport Cache Coder dump":{"type":"method","name":"dump","children":[],"call":[" dump_compressed ","@serializer dump "]}," ActiveSupport Cache Coder initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveSupport BroadcastLogger respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["logger respond_to? ","@broadcasts any? "]}," ActiveSupport BroadcastLogger method_missing":{"type":"method","name":"method_missing","children":[],"call":["logger send ","loggers map ","loggers first send ","loggers first ","loggers one? ","loggers none? ","logger respond_to? ","@broadcasts select "]}," ActiveSupport BroadcastLogger dispatch":{"type":"method","name":"dispatch","children":[],"call":["block call ","@broadcasts each "]}," ActiveSupport BroadcastLogger fatal!":{"type":"method","name":"fatal!","children":[],"call":["logger fatal! "," dispatch "]}," ActiveSupport BroadcastLogger fatal?":{"type":"method","name":"fatal?","children":[],"call":["logger fatal? ","@broadcasts any? "]}," ActiveSupport BroadcastLogger error!":{"type":"method","name":"error!","children":[],"call":["logger error! "," dispatch "]}," ActiveSupport BroadcastLogger error?":{"type":"method","name":"error?","children":[],"call":["logger error? ","@broadcasts any? "]}," ActiveSupport BroadcastLogger warn!":{"type":"method","name":"warn!","children":[],"call":["logger warn! "," dispatch "]}," ActiveSupport BroadcastLogger warn?":{"type":"method","name":"warn?","children":[],"call":["logger warn? ","@broadcasts any? "]}," ActiveSupport BroadcastLogger info!":{"type":"method","name":"info!","children":[],"call":["logger info! "," dispatch "]}," ActiveSupport BroadcastLogger info?":{"type":"method","name":"info?","children":[],"call":["logger info? ","@broadcasts any? "]}," ActiveSupport BroadcastLogger debug!":{"type":"method","name":"debug!","children":[],"call":["logger debug! "," dispatch "]}," ActiveSupport BroadcastLogger debug?":{"type":"method","name":"debug?","children":[],"call":["logger debug? ","@broadcasts any? "]}," ActiveSupport BroadcastLogger close":{"type":"method","name":"close","children":[],"call":["logger close "," dispatch "]}," ActiveSupport BroadcastLogger local_level=":{"type":"method","name":"local_level=","children":[],"call":["logger local_level= ","logger respond_to? "," dispatch "]}," ActiveSupport BroadcastLogger level=":{"type":"method","name":"level=","children":[],"call":["logger level= "," dispatch "]}," ActiveSupport BroadcastLogger formatter=":{"type":"method","name":"formatter=","children":[],"call":["logger formatter= "," dispatch "]}," ActiveSupport BroadcastLogger unknown":{"type":"method","name":"unknown","children":[],"call":["logger unknown "," dispatch "]}," ActiveSupport BroadcastLogger fatal":{"type":"method","name":"fatal","children":[],"call":["logger fatal "," dispatch "]}," ActiveSupport BroadcastLogger error":{"type":"method","name":"error","children":[],"call":["logger error "," dispatch "]}," ActiveSupport BroadcastLogger warn":{"type":"method","name":"warn","children":[],"call":["logger warn "," dispatch "]}," ActiveSupport BroadcastLogger info":{"type":"method","name":"info","children":[],"call":["logger info "," dispatch "]}," ActiveSupport BroadcastLogger debug":{"type":"method","name":"debug","children":[],"call":["logger debug "," dispatch "]}," ActiveSupport BroadcastLogger add":{"type":"method","name":"add","children":[],"call":["logger add "," dispatch "]}," ActiveSupport BroadcastLogger <<":{"type":"method","name":"<<","children":[],"call":["logger << "," dispatch "]}," ActiveSupport BroadcastLogger level":{"type":"method","name":"level","children":[],"call":["@broadcasts map min ","@broadcasts map "]}," ActiveSupport BroadcastLogger stop_broadcasting_to":{"type":"method","name":"stop_broadcasting_to","children":[],"call":["@broadcasts delete "]}," ActiveSupport BroadcastLogger broadcast_to":{"type":"method","name":"broadcast_to","children":[],"call":["@broadcasts concat "]}," ActiveSupport BroadcastLogger initialize":{"type":"method","name":"initialize","children":[],"call":[" broadcast_to "]}," ActiveSupport BacktraceCleaner clean_frame":{"type":"method","name":"clean_frame","children":[],"call":["s call ","@silencers any? ","f call ","frame to_s ","@filters each ","f call  to_s ","frame to_s  to_s "]}," ActiveSupport Cache Entry marshal_load":{"type":"method","name":"marshal_load","children":[],"call":[" raise ","error message ","Marshal  load "]}," ActiveSupport BroadcastLogger initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":[" broadcast_to ","other broadcasts map ","other broadcasts ","other formatter dup ","other formatter ","other progname dup ","other progname "]}}