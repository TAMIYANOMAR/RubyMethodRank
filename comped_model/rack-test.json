{" Rack Test Session params_to_string":{"type":"method","name":"params_to_string","children":[],"call":[" requestify "," build_nested_query "]}," Rack Test Session default_env":{"type":"method","name":"default_env","children":[],"call":["(pair\n  (str \"rack.test\")\n  (true)) merge "," headers_for_env ","(pair\n  (str \"rack.test\")\n  (true)) merge merge "]}," Rack Test Session process_request":{"type":"method","name":"process_request","children":[],"call":[" block_given? "," cookie_jar merge "," last_response headers [] "," last_response headers "," last_response "," cookie_jar ","Rack Response  new ","@app call ","@last_request env ","Rack Request  new ","uri host ","URI  parse "," process_request ","uri path ","auth_env delete ","env merge "," digest_auth_header "," retry_with_digest_auth? ","MockResponse  new ","env [] ","@rack_mock_session request ","uri scheme ","env [] == ","@last_response finish ","@after_request each "," close_body ","env [] flush ","@app call to_a "," cookie_jar for ","Rack Request  new  env ","URI  parse  host ","URI  parse  path ","env merge  delete ","URI  parse  scheme ","Rack Response  new  finish ","MockResponse  new  finish "]}," Rack Test Session cookie_jar":{"type":"method","name":"cookie_jar","children":[],"call":["Rack Test CookieJar  new "]}," Rack Test Session env_for":{"type":"method","name":"env_for","children":[],"call":["Rack MockRequest  env_for ","uri to_s ","env []= "," cookie_jar for "," cookie_jar "," cookie_jar merge for "," cookie_jar merge ","env delete ","env has_key? ","uri query= "," requestify ","params update "," parse_query ","uri query ","env [] "," params_to_string ","env has_key? ! ","env [] == ","env update ","URI HTTPS  === "," default_env merge "," default_env ","uri host ","URI  parse ","env [] length to_s ","env [] length "," multipart_body ","UploadedFile  === ","(or\n  (send\n    (lvar :env) :[]\n    (sym :params))\n  (hash)) any? "," set_cookie ","env [] any? ","Hash  === ","data length to_s ","data length "," build_multipart ","env [] is_a? "," build_nested_query "," parse_nested_query ","params is_a? ","env [] to_s upcase ","env [] to_s ","uri path= ","uri path ","uri path [] == ","uri path [] ","(send\n  (lvar :uri) :host) compact join ","(send\n  (lvar :uri) :host) compact ","uri port ","uri port != ","uri default_port ","(send\n  (send\n    (array\n      (send\n        (lvar :uri) :query)\n      (send nil :build_nested_query\n        (lvar :params))) :compact) :reject) join ","v == ","(send\n  (lvar :uri) :query) compact reject ","(send\n  (lvar :uri) :query) compact ","(str \"GET\") include? ","env key? ","env key? ! ","params nil? ","query_array join ","query_array reject! ","query_array compact! "," append_query_params "," multipart_content_type ","env [] start_with? ","DEFAULT_ENV  merge merge! ","DEFAULT_ENV  merge ","params empty? ! ","params empty? ","Rack MockRequest   default_env merge _for ","Rack MockRequest  DEFAULT_ENV  merge merge! _for ","URI  parse  to_s "," default_env merge  []= ","DEFAULT_ENV  merge merge!  []= "," default_env merge  delete ","DEFAULT_ENV  merge merge!  delete "," default_env merge  has_key? ","DEFAULT_ENV  merge merge!  has_key? ","URI  parse  query= "," parse_nested_query  update ","env []  update ","env delete  update ","URI  parse  query "," default_env merge  [] ","DEFAULT_ENV  merge merge!  [] ","  parse_nested_query _to_string "," env [] _to_string "," env delete _to_string "," default_env merge  has_key? ! ","DEFAULT_ENV  merge merge!  has_key? ! "," default_env merge  [] == ","DEFAULT_ENV  merge merge!  [] == "," default_env merge  update ","DEFAULT_ENV  merge merge!  update "," default_ default_env merge  merge "," default_DEFAULT_ENV  merge merge!  merge "," default_ default_env merge  "," default_DEFAULT_ENV  merge merge!  ","URI  parse  host "," default_env merge  [] length to_s ","DEFAULT_ENV  merge merge!  [] length to_s "," default_env merge  [] length ","DEFAULT_ENV  merge merge!  [] length "," env [] start_with? _body "," env delete _body ","(or\n  (send\n    (lvar : default_env merge ) :[]\n    (sym :params))\n  (hash)) any? ","(or\n  (send\n    (lvar :DEFAULT_ENV  merge merge! ) :[]\n    (sym :params))\n  (hash)) any? ","(or\n  (send\n    (lvar :env) :[]\n    (sym : parse_nested_query ))\n  (hash)) any? ","(or\n  (send\n    (lvar :env) :[]\n    (sym :env [] ))\n  (hash)) any? ","(or\n  (send\n    (lvar :env) :[]\n    (sym :env delete ))\n  (hash)) any? "," default_env merge  [] any? ","DEFAULT_ENV  merge merge!  [] any? "," build_multipart  length to_s "," build_multipart  length "," build_env [] start_with?  "," build_env delete  "," default_env merge  [] is_a? ","DEFAULT_ENV  merge merge!  [] is_a? "," parse_nested_query  is_a? ","env []  is_a? ","env delete  is_a? "," default_env merge  [] to_s upcase ","DEFAULT_ENV  merge merge!  [] to_s upcase "," default_env merge  [] to_s ","DEFAULT_ENV  merge merge!  [] to_s ","URI  parse  path= ","URI  parse  path ","URI  parse  path [] == ","URI  parse  path [] ","(send\n  (lvar :URI  parse ) :host) compact join ","(send\n  (lvar :URI  parse ) :host) compact ","URI  parse  port ","URI  parse  port != ","URI  parse  default_port ","(send\n  (send\n    (array\n      (send\n        (lvar :URI  parse ) :query)\n      (send nil :build_nested_query\n        (lvar :params))) :compact) :reject) join ","(send\n  (send\n    (array\n      (send\n        (lvar :uri) :query)\n      (send nil :build_nested_query\n        (lvar : parse_nested_query ))) :compact) :reject) join ","(send\n  (send\n    (array\n      (send\n        (lvar :uri) :query)\n      (send nil :build_nested_query\n        (lvar :env [] ))) :compact) :reject) join ","(send\n  (send\n    (array\n      (send\n        (lvar :uri) :query)\n      (send nil :build_nested_query\n        (lvar :env delete ))) :compact) :reject) join ","(send\n  (lvar :URI  parse ) :query) compact reject ","(send\n  (lvar :URI  parse ) :query) compact "," default_env merge  key? ","DEFAULT_ENV  merge merge!  key? "," default_env merge  key? ! ","DEFAULT_ENV  merge merge!  key? ! "," parse_nested_query  nil? ","env []  nil? ","env delete  nil? "," append_query_ parse_nested_query  "," append_query_env []  "," append_query_env delete  "," append_env delete  "," env [] start_with? _content_type "," env delete _content_type "," default_env merge  [] start_with? ","DEFAULT_ENV  merge merge!  [] start_with? "," parse_nested_query  empty? ! ","env []  empty? ! ","env delete  empty? ! "," parse_nested_query  empty? ","env []  empty? ","env delete  empty? "]}," Rack Test Session last_response":{"type":"method","name":"last_response","children":[],"call":[" raise ","Error  new "]}," Rack Test Session last_request":{"type":"method","name":"last_request","children":[],"call":[" raise ","Error  new "]}," Rack Test Session follow_redirect!":{"type":"method","name":"follow_redirect!","children":[],"call":[" get "," last_response [] "," last_response "," raise ","Error  new "," last_response redirect? "," last_request url "," last_request "," send "," last_request params "," last_request request_method downcase to_sym "," last_request request_method downcase "," last_request request_method "," last_response status == "," last_response status "," last_request session "," last_request session_options ","next_location to_s ","URI  parse + ","URI  parse "," custom_request "," last_request  last_request params  "," last_request  last_request request_method  downcase to_sym "," last_request  last_request request_method  downcase "," last_request  last_request request_method  ","URI  parse +  to_s "]}," Rack Test Session authorize":{"type":"method","name":"authorize","children":[],"call":[" header ","(dstr\n  (begin\n    (lvar :username))\n  (str \":\")\n  (begin\n    (lvar :password))) pack "]}," Rack Test Session header":{"type":"method","name":"header","children":[],"call":["@headers []= ","@headers delete ","value nil? "," env ","name == ","name tr! ","name upcase ","name upcase  == ","name upcase  tr! ","name upcase  upcase "]}," Rack Test Session request":{"type":"method","name":"request","children":[],"call":[" process_request "," env_for "," parse_uri ","  env_for _for "," parse_ parse_uri  "]}," Rack Test Session head":{"type":"method","name":"head","children":[],"call":[" process_request "," env_for ","env merge "," custom_request ","  env_for _for "," env_for  merge "]}," Rack Test Session delete":{"type":"method","name":"delete","children":[],"call":[" process_request "," env_for ","env merge "," custom_request ","  env_for _for "," env_for  merge "]}," Rack Test Session put":{"type":"method","name":"put","children":[],"call":[" process_request "," env_for ","env merge "," custom_request ","  env_for _for "," env_for  merge "]}," Rack Test Session post":{"type":"method","name":"post","children":[],"call":[" process_request "," env_for ","env merge "," custom_request ","  env_for _for "," env_for  merge "]}," Rack Test Session get":{"type":"method","name":"get","children":[],"call":[" process_request "," env_for ","env merge "," custom_request ","  env_for _for "," env_for  merge "]}," Rack Test Session initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","ArgumentError  new ","app respond_to? ","Rack MockSession  new ","mock_session default_host ","@rack_mock_session default_host ","MockSession  new ","mock_session is_a? "," clear_cookies ","Rack MockSession  new  default_host ","MockSession  new  default_host "]}," Rack Test Utils requestify":{"type":"method","name":"requestify","children":[],"call":[" escape ","(send\n  (lvar :value) :map) join "," requestify ","value map "]}," Rack Test Methods rack_test_session":{"type":"method","name":"rack_test_session","children":[],"call":["Rack Test Session  new "," app "," build_rack_test_session ","@_rack_test_sessions [] "]}," Rack Test Methods delegate_to_rack_test_session":{"type":"method","name":"delegate_to_rack_test_session","children":[],"call":[]}," Rack Test CookieJar for":{"type":"method","name":"for","children":[],"call":["cookies values join ","cookies values ","cookies []= ","cookie raw ","cookie name ","cookie matches? ","@jar each ","(send\n  (send\n    (send nil :hash_for\n      (lvar :uri)) :values) :map) join ","c raw "," hash_for values map "," hash_for values "," hash_for "," hash_for values map join ","buf << "," each_cookie_for ","String  new ","String  new  << "]}," Rack Test CookieJar merge":{"type":"method","name":"merge","children":[],"call":[" class new "," class ","new_jar concat ","(send\n  (lvar :c) :name) == ","existing path ","existing domain ","existing name ","c path ","c domain ","c name ","cookies find ","@jar reject ","cookies << ","c valid? ","Cookie  new ","uri host ","raw_cookies each "," << ","cookie valid? ","raw_cookies each_line "," Array join split each "," Array join split "," Array join "," Array ","raw_cookies split ","raw_cookies is_a? ","c empty? ","raw_cookies reject! "," Cookie  new lass new "," Cookie  new lass ","new_jar Cookie  new onCookie  new at ","(send\n  (lvar :Cookie  new ) :name) == ","Cookie  new  path ","Cookie  new  domain ","Cookie  new  name ","Cookie  new ookies find ","Cookie  new s find ","@jar rejeCookie  new t ","Cookie  new ookies << ","Cookie  new s << ","Cookie  new  valid? ","raw_Cookie  new ookies eaCookie  new h ","raw_Cookie  new s each ","raw_cookies split  each ","Cookie  new ookie valid? ","raw_Cookie  new ookies eaCookie  new h_line ","raw_Cookie  new s each_line ","raw_cookies split  each_line "," Array join split eaCookie  new h ","raw_Cookie  new ookies split ","raw_Cookie  new s split ","raw_cookies split  split ","raw_Cookie  new ookies is_a? ","raw_Cookie  new s is_a? ","raw_cookies split  is_a? ","Cookie  new  empty? ","raw_Cookie  new ookies rejeCookie  new t! ","raw_Cookie  new s reject! ","raw_cookies split  reject! "]}," Rack Test CookieJar initialize":{"type":"method","name":"initialize","children":[],"call":["@jar sort! ","@cookies sort! ","cookies sort! ","cookies sort!  sort! "]}," Rack Test Cookie <=>":{"type":"method","name":"<=>","children":[],"call":["(send nil :name) <=> ","other domain reverse ","other domain ","other path ","other name "," domain reverse "," domain "," path "," name "]}," Rack Test Cookie matches?":{"type":"method","name":"matches?","children":[],"call":[" valid? "," expired? ! "," expired? ","uri path start_with? "," path ","uri path "]}," Rack Test Cookie valid?":{"type":"method","name":"valid?","children":[],"call":["uri path =~ ","Regexp  new ","Regexp  escape "," path ","uri path ","uri host =~ "," domain ","uri host ","uri scheme == ","uri scheme "," secure? "," secure? ! ","uri host= ","uri host nil? "," default_uri "," domain [] "," domain =~ ","(and\n  (and\n    (begin\n      (or\n        (send\n          (send nil :secure?) :!)\n        (begin\n          (and\n            (send nil :secure?)\n            (send\n              (send\n                (lvar :uri) :scheme) :==\n              (str \"https\"))))))\n    (send\n      (send\n        (lvar :uri) :host) :=~\n      (send\n        (const nil :Regexp) :new\n        (dstr\n          (begin\n            (if\n              (ivar :@exact_domain_match)\n              (str \"^\") nil))\n          (begin\n            (send\n              (const nil :Regexp) :escape\n              (lvar :real_domain)))\n          (str \"$\"))\n        (const\n          (const nil :Regexp) :IGNORECASE))))\n  (send\n    (send\n      (lvar :uri) :path) :=~\n    (send\n      (const nil :Regexp) :new\n      (dstr\n        (str \"^\")\n        (begin\n          (send\n            (const nil :Regexp) :escape\n            (send nil :path))))))) ! ! ","(and\n  (and\n    (begin\n      (or\n        (send\n          (send nil :secure?) :!)\n        (begin\n          (and\n            (send nil :secure?)\n            (send\n              (send\n                (lvar :uri) :scheme) :==\n              (str \"https\"))))))\n    (send\n      (send\n        (lvar :uri) :host) :=~\n      (send\n        (const nil :Regexp) :new\n        (dstr\n          (begin\n            (if\n              (ivar :@exact_domain_match)\n              (str \"^\") nil))\n          (begin\n            (send\n              (const nil :Regexp) :escape\n              (lvar :real_domain)))\n          (str \"$\"))\n        (const\n          (const nil :Regexp) :IGNORECASE))))\n  (send\n    (send\n      (lvar :uri) :path) :=~\n    (send\n      (const nil :Regexp) :new\n      (dstr\n        (str \"^\")\n        (begin\n          (send\n            (const nil :Regexp) :escape\n            (send nil :path))))))) ! ","(and\n  (begin\n    (or\n      (send\n        (send nil :secure?) :!)\n      (begin\n        (and\n          (send nil :secure?)\n          (send\n            (send\n              (lvar :uri) :scheme) :==\n            (str \"https\"))))))\n  (send\n    (send\n      (lvar :uri) :host) :=~\n    (send\n      (const nil :Regexp) :new\n      (dstr\n        (begin\n          (if\n            (ivar :@exact_domain_match)\n            (str \"^\") nil))\n        (begin\n          (send\n            (const nil :Regexp) :escape\n            (lvar :real_domain)))\n        (str \"$\"))\n      (const\n        (const nil :Regexp) :IGNORECASE)))) ! ! ","(and\n  (begin\n    (or\n      (send\n        (send nil :secure?) :!)\n      (begin\n        (and\n          (send nil :secure?)\n          (send\n            (send\n              (lvar :uri) :scheme) :==\n            (str \"https\"))))))\n  (send\n    (send\n      (lvar :uri) :host) :=~\n    (send\n      (const nil :Regexp) :new\n      (dstr\n        (begin\n          (if\n            (ivar :@exact_domain_match)\n            (str \"^\") nil))\n        (begin\n          (send\n            (const nil :Regexp) :escape\n            (lvar :real_domain)))\n        (str \"$\"))\n      (const\n        (const nil :Regexp) :IGNORECASE)))) ! ","(and\n  (and\n    (begin\n      (or\n        (send\n          (send nil :secure?) :!)\n        (begin\n          (and\n            (send nil :secure?)\n            (send\n              (send\n                (lvar :uri) :scheme) :==\n              (str \"https\"))))))\n    (send\n      (send\n        (lvar :uri) :host) :=~\n      (send\n        (const nil :Regexp) :new\n        (dstr\n          (begin\n            (if\n              (ivar :@exact_domain_match)\n              (str \"^\") nil))\n          (begin\n            (send\n              (const nil :Regexp) :escape\n              (lvar : domain )))\n          (str \"$\"))\n        (const\n          (const nil :Regexp) :IGNORECASE))))\n  (send\n    (send\n      (lvar :uri) :path) :=~\n    (send\n      (const nil :Regexp) :new\n      (dstr\n        (str \"^\")\n        (begin\n          (send\n            (const nil :Regexp) :escape\n            (send nil :path))))))) ! ! ","(and\n  (and\n    (begin\n      (or\n        (send\n          (send nil :secure?) :!)\n        (begin\n          (and\n            (send nil :secure?)\n            (send\n              (send\n                (lvar :uri) :scheme) :==\n              (str \"https\"))))))\n    (send\n      (send\n        (lvar :uri) :host) :=~\n      (send\n        (const nil :Regexp) :new\n        (dstr\n          (begin\n            (if\n              (ivar :@exact_domain_match)\n              (str \"^\") nil))\n          (begin\n            (send\n              (const nil :Regexp) :escape\n              (lvar : domain [] )))\n          (str \"$\"))\n        (const\n          (const nil :Regexp) :IGNORECASE))))\n  (send\n    (send\n      (lvar :uri) :path) :=~\n    (send\n      (const nil :Regexp) :new\n      (dstr\n        (str \"^\")\n        (begin\n          (send\n            (const nil :Regexp) :escape\n            (send nil :path))))))) ! ! ","(and\n  (and\n    (begin\n      (or\n        (send\n          (send nil :secure?) :!)\n        (begin\n          (and\n            (send nil :secure?)\n            (send\n              (send\n                (lvar :uri) :scheme) :==\n              (str \"https\"))))))\n    (send\n      (send\n        (lvar :uri) :host) :=~\n      (send\n        (const nil :Regexp) :new\n        (dstr\n          (begin\n            (if\n              (ivar :@exact_domain_match)\n              (str \"^\") nil))\n          (begin\n            (send\n              (const nil :Regexp) :escape\n              (lvar : domain )))\n          (str \"$\"))\n        (const\n          (const nil :Regexp) :IGNORECASE))))\n  (send\n    (send\n      (lvar :uri) :path) :=~\n    (send\n      (const nil :Regexp) :new\n      (dstr\n        (str \"^\")\n        (begin\n          (send\n            (const nil :Regexp) :escape\n            (send nil :path))))))) ! ","(and\n  (and\n    (begin\n      (or\n        (send\n          (send nil :secure?) :!)\n        (begin\n          (and\n            (send nil :secure?)\n            (send\n              (send\n                (lvar :uri) :scheme) :==\n              (str \"https\"))))))\n    (send\n      (send\n        (lvar :uri) :host) :=~\n      (send\n        (const nil :Regexp) :new\n        (dstr\n          (begin\n            (if\n              (ivar :@exact_domain_match)\n              (str \"^\") nil))\n          (begin\n            (send\n              (const nil :Regexp) :escape\n              (lvar : domain [] )))\n          (str \"$\"))\n        (const\n          (const nil :Regexp) :IGNORECASE))))\n  (send\n    (send\n      (lvar :uri) :path) :=~\n    (send\n      (const nil :Regexp) :new\n      (dstr\n        (str \"^\")\n        (begin\n          (send\n            (const nil :Regexp) :escape\n            (send nil :path))))))) ! ","(and\n  (begin\n    (or\n      (send\n        (send nil :secure?) :!)\n      (begin\n        (and\n          (send nil :secure?)\n          (send\n            (send\n              (lvar :uri) :scheme) :==\n            (str \"https\"))))))\n  (send\n    (send\n      (lvar :uri) :host) :=~\n    (send\n      (const nil :Regexp) :new\n      (dstr\n        (begin\n          (if\n            (ivar :@exact_domain_match)\n            (str \"^\") nil))\n        (begin\n          (send\n            (const nil :Regexp) :escape\n            (lvar : domain )))\n        (str \"$\"))\n      (const\n        (const nil :Regexp) :IGNORECASE)))) ! ! ","(and\n  (begin\n    (or\n      (send\n        (send nil :secure?) :!)\n      (begin\n        (and\n          (send nil :secure?)\n          (send\n            (send\n              (lvar :uri) :scheme) :==\n            (str \"https\"))))))\n  (send\n    (send\n      (lvar :uri) :host) :=~\n    (send\n      (const nil :Regexp) :new\n      (dstr\n        (begin\n          (if\n            (ivar :@exact_domain_match)\n            (str \"^\") nil))\n        (begin\n          (send\n            (const nil :Regexp) :escape\n            (lvar : domain [] )))\n        (str \"$\"))\n      (const\n        (const nil :Regexp) :IGNORECASE)))) ! ! ","(and\n  (begin\n    (or\n      (send\n        (send nil :secure?) :!)\n      (begin\n        (and\n          (send nil :secure?)\n          (send\n            (send\n              (lvar :uri) :scheme) :==\n            (str \"https\"))))))\n  (send\n    (send\n      (lvar :uri) :host) :=~\n    (send\n      (const nil :Regexp) :new\n      (dstr\n        (begin\n          (if\n            (ivar :@exact_domain_match)\n            (str \"^\") nil))\n        (begin\n          (send\n            (const nil :Regexp) :escape\n            (lvar : domain )))\n        (str \"$\"))\n      (const\n        (const nil :Regexp) :IGNORECASE)))) ! ","(and\n  (begin\n    (or\n      (send\n        (send nil :secure?) :!)\n      (begin\n        (and\n          (send nil :secure?)\n          (send\n            (send\n              (lvar :uri) :scheme) :==\n            (str \"https\"))))))\n  (send\n    (send\n      (lvar :uri) :host) :=~\n    (send\n      (const nil :Regexp) :new\n      (dstr\n        (begin\n          (if\n            (ivar :@exact_domain_match)\n            (str \"^\") nil))\n        (begin\n          (send\n            (const nil :Regexp) :escape\n            (lvar : domain [] )))\n        (str \"$\"))\n      (const\n        (const nil :Regexp) :IGNORECASE)))) ! "]}," Rack Test Cookie expired?":{"type":"method","name":"expired?","children":[],"call":[" expires < ","Time  now "," expires "]}," Rack Test Cookie expires":{"type":"method","name":"expires","children":[],"call":["Time  parse ","@options [] "]}," Rack Test Cookie path":{"type":"method","name":"path","children":[],"call":["@options [] ","@options [] strip ","(or\n  (send\n    (send\n      (send\n        (array\n          (splat\n            (send\n              (ivar :@options) :[]\n              (str \"path\")))) :first) :split\n      (str \",\")) :first)\n  (str \"/\")) strip ","(splat\n  (send\n    (ivar :@options) :[]\n    (str \"path\"))) first split first ","(splat\n  (send\n    (ivar :@options) :[]\n    (str \"path\"))) first split ","(splat\n  (send\n    (ivar :@options) :[]\n    (str \"path\"))) first "]}," Rack Test Cookie domain":{"type":"method","name":"domain","children":[],"call":["@options [] "]}," Rack Test Cookie empty?":{"type":"method","name":"empty?","children":[],"call":["@value empty? ","@value nil? "]}," Rack Test Cookie raw":{"type":"method","name":"raw","children":[],"call":[]}," Rack Test Cookie initialize":{"type":"method","name":"initialize","children":[],"call":["@options [] ","v empty? ","v ! ","@options delete_if "," parse_query "," parse_query to_a first "," parse_query to_a ","raw split ","uri path sub ","uri path ","uri host "," default_uri ","@options []= ","domain []= ","domain [] == ","domain [] "," parse_query  [] "," parse_query  delete_if "," parse_query  []= ","@options []  []= ","@options []  [] == ","@options []  [] "]}," Rack Test Session digest_auth_configured?":{"type":"method","name":"digest_auth_configured?","children":[],"call":[]}," Rack Test Session retry_with_digest_auth?":{"type":"method","name":"retry_with_digest_auth?","children":[],"call":["env [] ! ","env [] "," digest_auth_configured? ","@last_response status == ","@last_response status "," last_response status == "," last_response status "," last_response "]}," Rack Test Session digest_auth_header":{"type":"method","name":"digest_auth_header","children":[],"call":["params []= ","MockDigestRequest  new response ","MockDigestRequest  new ","params merge! ","@last_request env [] ","@last_request env ","@last_request path_info ","Rack Auth Digest Params  parse ","@last_response [] split last ","@last_response [] split ","@last_response [] "," last_request env [] "," last_request env "," last_request "," last_request path_info "," last_response [] split last "," last_response [] split "," last_response [] "," last_response "," last_request fullpath ","MockDigestRequest_  new response ","MockDigestRequest_  new "," require_relative ","Rack Auth Digest Params  parse  []= ","Rack Auth Digest Params  parse  merge! "]}," Rack Test Session digest_authorize":{"type":"method","name":"digest_authorize","children":[],"call":[" _digest_authorize "," warn "]}," Rack Test MockDigestRequest response":{"type":"method","name":"response","children":[],"call":["Rack Auth Digest MD5  new send ","Rack Auth Digest MD5  new "]}," Rack Test MockDigestRequest method":{"type":"method","name":"method","children":[],"call":["@params [] "]}," Rack Test MockDigestRequest method_missing":{"type":"method","name":"method_missing","children":[],"call":["@params [] ","@params has_key? ","sym to_s ","@params key? ","@params has_sym to_s ey? ","@params sym to_s ey? "]}," Rack Test MockDigestRequest initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rack Test Utils multipart_body":{"type":"method","name":"multipart_body","children":[],"call":["(send\n  (send nil :multipart_requestify\n    (lvar :params)) :map) join + ","(send\n  (send nil :multipart_requestify\n    (lvar :params)) :map) join ","f read "," File  stat size "," File  stat ","value path ","value content_type "," escape ","value original_filename ","f set_encoding ","f respond_to? "," File  open ","value respond_to? "," multipart_requestify map "," multipart_requestify "]}," Rack Test Utils multipart_requestify":{"type":"method","name":"multipart_requestify","children":[],"call":["p []= ","k + "," multipart_requestify each "," multipart_requestify ","Hash  === ","key to_s ","params each ","Hash  new ","Hash  new  []= ","key to_s  + "," multiHash  new art_requestify each "," multiHash  new art_requestify ","key to_s ey to_s ","Hash  new arams each "]}," Rack Test UploadedFile method_missing":{"type":"method","name":"method_missing","children":[],"call":["@tempfile __send__ "," tempfile public_send "," tempfile "]}," Rack Test UploadedFile path":{"type":"method","name":"path","children":[],"call":["@tempfile path "," tempfile path "," tempfile "]}," Rack Test UploadedFile initialize":{"type":"method","name":"initialize","children":[],"call":["FileUtils  copy_file ","@tempfile path ","@tempfile binmode ","@tempfile set_encoding ","@tempfile respond_to? ","Tempfile  new "," File  basename "," raise "," File  exist? ","ObjectSpace  define_finalizer "," class finalize "," class "," File  extname "," initialize_from_file_path "," initialize_from_io ","content respond_to? ","content is_a? "," initialize_from_stringio ","Tempfile  new  path ","Tempfile  new  binmode ","Tempfile  new  set_encoding ","Tempfile  new  respond_to? "]}," Rack Test Session basic_authorize":{"type":"method","name":"basic_authorize","children":[],"call":[" header ","(dstr\n  (begin\n    (lvar :username))\n  (str \":\")\n  (begin\n    (lvar :password))) pack "]}," Rack Test Methods rack_mock_session":{"type":"method","name":"rack_mock_session","children":[],"call":["Rack MockSession  new "," app "," build_rack_mock_session ","@_rack_mock_sessions [] "]}," Rack Test CookieJar hash_for":{"type":"method","name":"hash_for","children":[],"call":["cookies []= ","cookie name ","cookie matches? ","@cookies each ","uri ! "]}," Rack Test CookieJar to_hash":{"type":"method","name":"to_hash","children":[],"call":["cookies []= ","cookie value "," hash_for each "," hash_for ","cookie name ","@cookies each "]}," Rack Test CookieJar <<":{"type":"method","name":"<<","children":[],"call":["@cookies sort! ","@cookies << ","new_cookie replaces? ","@cookies reject! "]}," Rack Test CookieJar []=":{"type":"method","name":"[]=","children":[],"call":[" merge ","Rack Utils  escape "]}," Rack Test CookieJar []":{"type":"method","name":"[]","children":[],"call":["cookies [] value ","cookies [] "," hash_for ","name to_s ","cookie value ","cookie name == ","cookie name ","@cookies each "," hash_for  [] value "," hash_for  [] ","name to_s  to_s ","cookie name to_s  == ","cookie name to_s  ","@ hash_for  each "]}," Rack Test Cookie default_uri":{"type":"method","name":"default_uri","children":[],"call":["URI  parse ","// + + ","// + "]}," Rack Test Cookie secure?":{"type":"method","name":"secure?","children":[],"call":["@options has_key? ","@options key? "]}," Rack Test Cookie replaces?":{"type":"method","name":"replaces?","children":[],"call":["(send\n  (send nil :name) :downcase) == ","other path ","other domain ","other name downcase ","other name "," path "," domain "," name downcase "," name "]}," Rack MockSession cookie_jar":{"type":"method","name":"cookie_jar","children":[],"call":["Rack Test CookieJar  new "]}," Rack MockSession last_response":{"type":"method","name":"last_response","children":[],"call":[" raise ","Rack Test Error  new "]}," Rack MockSession last_request":{"type":"method","name":"last_request","children":[],"call":[" raise ","Rack Test Error  new "]}," Rack MockSession request":{"type":"method","name":"request","children":[],"call":[" cookie_jar merge "," last_response headers [] "," last_response headers "," last_response "," cookie_jar ","MockResponse  new ","env [] flush ","env [] ","@app call ","@last_request env ","Rack Request  new "," cookie_jar for ","hook call ","@after_request each ","body close ","body respond_to? ","@last_response finish ","@last_response respond_to? ","Rack Request  new  env ","MockResponse  new  finish ","MockResponse  new  respond_to? "]}," Rack MockSession set_cookie":{"type":"method","name":"set_cookie","children":[],"call":[" cookie_jar merge "," cookie_jar "]}," Rack MockSession clear_cookies":{"type":"method","name":"clear_cookies","children":[],"call":["Rack Test CookieJar  new "]}," Rack MockSession initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rack Test Methods _current_session_names":{"type":"method","name":"_current_session_names","children":[],"call":[]}," Rack Test Methods with_session":{"type":"method","name":"with_session","children":[],"call":[" _current_session_names pop "," _current_session_names "," rack_test_session "," _current_session_names push "," _rack_test_current_session "," _current_ _rack_test_current_session _names pop "," _current_ _rack_test_current_session _names "," rack_test_ _rack_test_current_session  "," _current_ _rack_test_current_session _names push "," _rack_test_current_ _rack_test_current_session  "]}," Rack Test Methods current_session":{"type":"method","name":"current_session","children":[],"call":[" rack_test_session "," _current_session_names last "," _current_session_names "]}," Rack Test Methods build_rack_test_session":{"type":"method","name":"build_rack_test_session","children":[],"call":["Rack Test Session  new "," rack_mock_session ","Session  new "," app "," build_rack_mock_session "," respond_to? "," default_host "]}," Rack Test Methods build_rack_mock_session":{"type":"method","name":"build_rack_mock_session","children":[],"call":["Rack MockSession  new "," app "]}," Rack MockSession after_request":{"type":"method","name":"after_request","children":[],"call":["@after_request << "]}," Rack Test Utils build_multipart":{"type":"method","name":"build_multipart","children":[],"call":["(send\n  (lvar :flattened_params) :map) join + ","(send\n  (lvar :flattened_params) :map) join ","f read "," File  stat size "," File  stat ","file path ","file content_type "," escape ","file original_filename ","f set_encoding ","f respond_to? "," File  open ","file respond_to? ","flattened_params map ","flattened_params []= ","k + "," build_multipart each "," build_multipart ","value map ","key to_s ","params each ","Hash  new ","params values each ","params values ","value values each ","value values ","value each "," lambda "," raise ","params is_a? "," build_parts ","v is_a? ","flattened_params [] << ","flattened_params [] ","nested_params []= ","buffer force_encoding ","Rack Test  encoding_aware_strings? ","String  new "," normalize_multipart_params ","(send\n  (lvar :Hash  new ) :map) join + ","(send\n  (lvar :flattened_ normalize_multipart_params ) :map) join + ","(send\n  (lvar :Hash  new ) :map) join ","(send\n  (lvar :flattened_ normalize_multipart_params ) :map) join ","Hash  new  map ","flattened_ normalize_multipart_params  map ","Hash  new  []= ","flattened_ normalize_multipart_params  []= ","key to_s  + ","key to_s ey to_s "," normalize_multipart_params  each "," normalize_multipart_params  values each "," normalize_multipart_params  values "," normalize_multipart_params  is_a? ","Hash  new  [] << ","flattened_ normalize_multipart_params  [] << ","Hash  new  [] ","flattened_ normalize_multipart_params  [] ","nested_ normalize_multipart_params  []= ","String  new  force_encoding ","Rackey to_s  Test  encoding_aware_strings? "," normalize_multipart_ normalize_multipart_params  "]}," Rack Test Utils build_nested_query":{"type":"method","name":"build_nested_query","children":[],"call":[" escape ","prefix to_s ","(send\n  (lvar :value) :map) join "," build_nested_query ","value map "," unescape =~ "," unescape ","value empty? "," unescape end_with? "]}," Rack Test Session headers_for_env":{"type":"method","name":"headers_for_env","children":[],"call":["converted_headers []= ","HTTP_ + ","name upcase gsub ","name upcase ","@headers each ","CONTENT_TYPE == ","env_key == ","name upcase tr ","HTTP_ +  == ","name upcase gsub  == ","name upcase tr  == "]}," Rack Test Utils build_file_part":{"type":"method","name":"build_file_part","children":[],"call":["physical_file read "," File  stat size "," File  stat ","uploaded_file path ","uploaded_file content_type "," escape ","uploaded_file original_filename ","physical_file set_encoding ","physical_file respond_to? "," File  open ","uploaded_file read ","uploaded_file size ","uploaded_file set_encoding ","uploaded_file respond_to? ","buffer << ","uploaded_file append_to ","buffer << << << << << << << << << << ","buffer << << << << << << << << << ","uploaded_file size to_s ","buffer << << << << << << << << ","buffer << << << << << << << ","uploaded_file content_type to_s ","buffer << << << << << << ","buffer << << << << << "," escape_path ","buffer << << << << ","buffer << << << ","parameter_name to_s ","buffer << << ","buffer force_encoding ","uploaded_file size to_s b ","uploaded_file content_type to_s b "," escape_path b ","parameter_name to_s b "]}," Rack Test Utils build_primitive_part":{"type":"method","name":"build_primitive_part","children":[],"call":["(send\n  (lvar :value) :map) join ","value map ","value is_a? ","buffer << << << << << << ","buffer << << << << << ","value to_s ","buffer << << << << ","buffer << << << ","parameter_name to_s ","buffer << << ","buffer << ","buffer force_encoding ","value to_s b ","parameter_name to_s b "]}," Rack Test Utils build_parts":{"type":"method","name":"build_parts","children":[],"call":["(send\n  (lvar :parameters) :map) join + ","(send\n  (lvar :parameters) :map) join "," build_primitive_part ","(send\n  (lvar :value) :map) join "," build_file_part ","value map ","v respond_to? ","value all? ","value is_a? ","value respond_to? ","parameters map ","primitive_part force_encoding ","primitive_part encoding_aware? ","Rack Test  encoding_aware_strings? "," get_parts join + "," get_parts join "," get_parts ","buffer << "," _build_parts "," build_ build_primitive_part  "," build_primitive_part  force_encoding "," build_primitive_part  encoding_aware? "]}," Rack Test encoding_aware_strings?":{"type":"method","name":"encoding_aware_strings?","children":[],"call":[]}," Rack Test Session options":{"type":"method","name":"options","children":[],"call":[" process_request "," env_for ","env merge "," custom_request ","  env_for _for "," env_for  merge "]}," Rack Test UploadedFile respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["@tempfile respond_to? "]}," Rack Test Session patch":{"type":"method","name":"patch","children":[],"call":[" process_request "," env_for ","env merge "," custom_request ","  env_for _for "," env_for  merge "]}," Rack Test CookieJar delete":{"type":"method","name":"delete","children":[],"call":["cookie name == ","cookie name ","@cookies reject! "]}," Rack Test Session env":{"type":"method","name":"env","children":[],"call":["@env []= ","@env delete ","value nil? "]}," Rack Test Utils get_parts":{"type":"method","name":"get_parts","children":[],"call":["primitive_part force_encoding ","Rack Test  encoding_aware_strings? "," build_primitive_part ","(send\n  (lvar :value) :map) join "," build_file_part ","value map ","v respond_to? ","value all? ","value is_a? ","value respond_to? "," get_parts join "," get_parts ","new_value []= ","name + ","hash each ","v is_a? ","name =~ ","parameters map "," build_primitive_part  force_encoding "," build_ build_primitive_part  "]}," Rack Test UploadedFile actually_finalize":{"type":"method","name":"actually_finalize","children":[],"call":[]}," Rack Test UploadedFile finalize":{"type":"method","name":"finalize","children":[],"call":[]}," Rack Test CookieJar get_cookie":{"type":"method","name":"get_cookie","children":[],"call":[" hash_for fetch "," hash_for ","cookie name == ","cookie name ","@cookies each "]}," Rack Test Cookie to_h":{"type":"method","name":"to_h","children":[],"call":["@options merge "," secure? "," http_only? "]}," Rack Test Cookie http_only?":{"type":"method","name":"http_only?","children":[],"call":["@options has_key? ","@options key? "]}," Rack Test Session parse_uri":{"type":"method","name":"parse_uri","children":[],"call":["uri scheme ","env [] == ","env [] ","uri host ","uri path= ","uri path ","uri path [] == ","uri path [] ","URI  parse tap ","URI  parse ","uri path start_with? ","URI  parse  scheme ","URI  parse  host ","URI  parse  path= ","URI  parse  path ","URI  parse  path [] == ","URI  parse  path [] ","URI  parse  path start_with? "]}," Rack Test Session custom_request":{"type":"method","name":"custom_request","children":[],"call":[" process_request "," env_for ","env merge ","verb to_s upcase ","verb to_s "," parse_uri ","  env_for _for "," env_for  merge "," parse_ parse_uri  "]}," Rack Test UploadedFile initialize_from_file_path":{"type":"method","name":"initialize_from_file_path","children":[],"call":["FileUtils  copy_file ","@tempfile path ","ObjectSpace  define_finalizer "," class finalize "," class ","@tempfile set_encoding ","@tempfile respond_to? ","Tempfile  new "," File  extname "," File  basename "," raise "," File  exist? ","Tempfile  new  path ","Tempfile  new  set_encoding ","Tempfile  new  respond_to? "]}," Rack Test UploadedFile initialize_from_io":{"type":"method","name":"initialize_from_io","children":[],"call":[" raise "]}," Rack Test UploadedFile respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":[" tempfile respond_to? "," tempfile "]}," Rack Test UploadedFile initialize_from_stringio":{"type":"method","name":"initialize_from_stringio","children":[],"call":[" raise "]}," Rack Test Session multipart_content_type":{"type":"method","name":"multipart_content_type","children":[],"call":["requested_content_type start_with? ","env [] ","env []  start_with? "]}," Rack Test Session append_query_params":{"type":"method","name":"append_query_params","children":[],"call":["query_array << "," build_nested_query "," parse_nested_query ","query_params is_a? "," parse_nested_query  is_a? "]}," Rack Test Session close_body":{"type":"method","name":"close_body","children":[],"call":["body close ","body respond_to? "]}," Rack Test Session _digest_authorize":{"type":"method","name":"_digest_authorize","children":[],"call":[]}," Rack Test Session set_cookie":{"type":"method","name":"set_cookie","children":[],"call":[" cookie_jar merge "," cookie_jar "]}," Rack Test Session clear_cookies":{"type":"method","name":"clear_cookies","children":[],"call":["CookieJar  new "]}," Rack Test Session after_request":{"type":"method","name":"after_request","children":[],"call":["@after_request << "]}," Rack Test Session new":{"type":"method","name":"new","children":[],"call":[]}," Rack Test Utils _build_parts":{"type":"method","name":"_build_parts","children":[],"call":[" build_primitive_part "," build_file_part ","v respond_to? ","(lvar :value) flatten map ","(lvar :value) flatten "," _build_parts ","new_value []= ","name + ","hash each ","value each ","v is_a? ","value all? ","value is_a? ","name =~ ","parameters map "]}," Rack Test Utils normalize_multipart_params":{"type":"method","name":"normalize_multipart_params","children":[],"call":["flattened_params []= ","k + "," normalize_multipart_params each "," normalize_multipart_params ","(or-asgn\n  (send\n    (lvar :flattened_params) :[]\n    (dstr\n      (begin\n        (lvar :k))\n      (str \"[]\")))\n  (array)) << ","flattened_params [] ","nested_params []= ","v is_a? ","value map ","key to_s ","params each ","key to_s  + ","(or-asgn\n  (send\n    (lvar :flattened_params) :[]\n    (dstr\n      (begin\n        (lvar :key to_s ))\n      (str \"[]\")))\n  (array)) << ","key to_s ey to_s "]}," Rack Test UploadedFile append_to":{"type":"method","name":"append_to","children":[],"call":[" tempfile rewind "," tempfile ","buffer << "," tempfile readpartial "," tempfile eof? ","String  new ","String  new fer << "]}," Rack Test MockDigestRequest_ response":{"type":"method","name":"response","children":[],"call":["Rack Auth Digest MD5  new send ","Rack Auth Digest MD5  new "]}," Rack Test MockDigestRequest_ method":{"type":"method","name":"method","children":[],"call":["@params [] "]}," Rack Test MockDigestRequest_ method_missing":{"type":"method","name":"method_missing","children":[],"call":["@params [] ","@params key? ","sym to_s ","@params sym to_s ey? "]}," Rack Test MockDigestRequest_ initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rack Test Methods digest_authorize":{"type":"method","name":"digest_authorize","children":[],"call":[" current_session _digest_authorize "," current_session "," warn "]}," Rack Test CookieJar each_cookie_for":{"type":"method","name":"each_cookie_for","children":[],"call":["cookie matches? ","uri ! ","@cookies each "]}," Rack Test Session restore_state":{"type":"method","name":"restore_state","children":[],"call":["@after_request dup ","@cookie_jar dup ","@@after_request dup  dup ","@@cookie_jar dup  dup "]}," Rack Test CookieJar initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["@cookies dup ","@cookies dup  dup "]}}