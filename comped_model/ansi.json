{" ANSI Terminal terminal_height":{"type":"method","name":"terminal_height","children":[],"call":[" terminal_size [] "," terminal_size "," terminal_size last "]}," ANSI Terminal terminal_width":{"type":"method","name":"terminal_width","children":[],"call":[" terminal_size [] "," terminal_size "," terminal_size first "]}," ANSI Terminal GetConsoleScreenBufferInfo":{"type":"method","name":"GetConsoleScreenBufferInfo","children":[],"call":["buf unpack ","@@apiGetConsoleScreenBufferInfo call ","(send\n  (array\n    (int 0)) :*\n  (send\n    (lvar :format) :size)) pack ","(int 0) * ","format size ","Win32API  new ","(send\n  (array\n    (int 0)) :*\n  (send\n    (lvar :format) :size)) pack  unpack "]}," ANSI Terminal SetConsoleMode":{"type":"method","name":"SetConsoleMode","children":[],"call":["@@apiSetConsoleMode call != ","@@apiSetConsoleMode call ","Win32API  new "]}," ANSI Terminal GetConsoleMode":{"type":"method","name":"GetConsoleMode","children":[],"call":["mode unpack [] ","mode unpack ","@@apiGetConsoleMode call ","  * ","Win32API  new ","  *  unpack [] ","  *  unpack "]}," ANSI Terminal GetStdHandle":{"type":"method","name":"GetStdHandle","children":[],"call":["@@apiGetStdHandle call ","Win32API  new "]}," ANSI Terminal SetConsoleEcho":{"type":"method","name":"SetConsoleEcho","children":[],"call":[" SetConsoleMode ","ENABLE_ECHO_INPUT  ~ "," GetConsoleMode "]}," ANSI Terminal terminal_size":{"type":"method","name":"terminal_size","children":[],"call":["bottom - + ","bottom - ","right - + ","right - "," GetConsoleScreenBufferInfo "," GetStdHandle ","(send\n  (send\n    (xstr\n      (str \"stty size\")) :split) :map) reverse ","x to_i ","(str \"stty size\") split map ","(str \"stty size\") split "," x to_i "," x ","(nth-ref 2) map ","(str \"stty\") =~ ","Curses  close_screen ","Curses  rows ","Curses  cols ","Curses  init_screen ","r to_i ","w to_i ","(str \"stty size\") split reverse ","Curses  lines ","r to_i ight - + ","r to_i ight - "," GetConsoleScr to_i eenBuffer to_i Info ","(send\n  (send\n    (xstr to_i \n      (str to_i  \"stty size\")) :split) :map) r to_i ever to_i se ","(str to_i  \"stty size\") split map ","(str to_i  \"stty size\") split ","(nth-r to_i ef 2) map ","(str to_i  \"stty\") =~ ","Cur to_i ses  close_scr to_i een ","Cur to_i ses  r to_i ows ","Curses  row to_i s ","Cur to_i ses  cols ","Cur to_i ses  init_scr to_i een ","r to_i  to_i ","w to_i  to_i ","(str to_i  \"stty size\") split r to_i ever to_i se ","Cur to_i ses  lines "]}," ANSI Terminal get_character":{"type":"method","name":"get_character","children":[],"call":[" SetConsoleEcho ","input getc "," GetStdHandle ","Termios  setattr ","new_settings c_cc []= ","new_settings c_cc ","(send\n  (const\n    (const nil :Termios) :ECHO) :|\n  (const\n    (const nil :Termios) :ICANON)) ~ ","Termios ECHO  | ","new_settings c_lflag ","old_settings dup ","Termios  getattr "," restore_mode "," raw_no_echo_mode ","Curses  getch ","old_settings dup  c_cc []= ","old_settings dup  c_cc ","old_settings dup  c_lflag ","Termios  getattr  dup "]}," ANSI Terminal screen_width":{"type":"method","name":"screen_width","children":[],"call":["cols >= ","data unpack ","out ioctl >= ","out ioctl ","(int 0) pack ","ENV  [] ","(int 0) pack  unpack "]}," ANSI Terminal restore_mode":{"type":"method","name":"restore_mode","children":[],"call":[" system "]}," ANSI Terminal raw_no_echo_mode":{"type":"method","name":"raw_no_echo_mode","children":[],"call":[" system "]}," String shift_marks!":{"type":"method","name":"shift_marks!","children":[],"call":["@marks replace "," shift_marks "]}," String shift_marks":{"type":"method","name":"shift_marks","children":[],"call":["new_marks << ","i + ","i <=> ","(or\n  (lvar :marks)\n  (ivar :@marks)) each "]}," String underline!":{"type":"method","name":"underline!","children":[],"call":[" ansi! "]}," String bold!":{"type":"method","name":"bold!","children":[],"call":[" ansi! "]}," String cyan!":{"type":"method","name":"cyan!","children":[],"call":[" color! "]}," String yellow!":{"type":"method","name":"yellow!","children":[],"call":[" color! "]}," String magenta!":{"type":"method","name":"magenta!","children":[],"call":[" color! "]}," String black!":{"type":"method","name":"black!","children":[],"call":[" color! "]}," String blue!":{"type":"method","name":"blue!","children":[],"call":[" color! "]}," String green!":{"type":"method","name":"green!","children":[],"call":[" color! "]}," String red!":{"type":"method","name":"red!","children":[],"call":[" color! "]}," String underline":{"type":"method","name":"underline","children":[],"call":[" ansi "]}," String bold":{"type":"method","name":"bold","children":[],"call":[" ansi "]}," String cyan":{"type":"method","name":"cyan","children":[],"call":[" color "]}," String yellow":{"type":"method","name":"yellow","children":[],"call":[" color "]}," String magenta":{"type":"method","name":"magenta","children":[],"call":[" color "]}," String black":{"type":"method","name":"black","children":[],"call":[" color "]}," String blue":{"type":"method","name":"blue","children":[],"call":[" color "]}," String green":{"type":"method","name":"green","children":[],"call":[" color "]}," String red":{"type":"method","name":"red","children":[],"call":[" color "]}," String ansi!":{"type":"method","name":"ansi!","children":[],"call":[" marks push "," size "," marks "," marks unshift "," ansicolor "," replace "," ansi "]}," String ansi":{"type":"method","name":"ansi","children":[],"call":[" class new "," text "," class ","m push "," size ","m unshift "," marks dup "," marks ","ANSI Code  style ","ANSI Code  ansi ","ANSI Chain  new ","codes empty? "," marks dup  push "," marks dup  unshift ","  marks dup arks dup ","  marks dup arks ","codes e marks dup pty? "]}," String gsub":{"type":"method","name":"gsub","children":[],"call":[" dup gsub! "," dup "]}," String gsub!":{"type":"method","name":"gsub!","children":[],"call":["marks concat "," shift_marks ","mark_changes each ","mark_changes << ","replacement size - ","s size ","replacement size ","replacement text ","mark_additions concat ","i + ","replacement marks map ","replacement marks "," class === "," class ","block call "," class new "," block_given? ","$~ begin ","@text gsub "," shift_marks  concat "," shift_ shift_marks  ","replacement text  size - ","block call  size - ","replacement text  size ","block call  size ","replacement text  text ","block call  text ","replacement  shift_marks  map ","replacement text  marks map ","block call  marks map ","replacement  shift_marks  ","replacement text  marks ","block call  marks "]}," String sub":{"type":"method","name":"sub","children":[],"call":[" dup sub! "," dup "]}," String sub!":{"type":"method","name":"sub!","children":[],"call":[" shift_marks ","mark_changes each ","mark_changes << ","replacement size - ","s size ","replacement size ","block call "," block_given? ","$~ begin ","@text sub "," shift_ shift_marks  ","block call  size - ","block call  size "]}," String slice":{"type":"method","name":"slice","children":[],"call":[" raise "," class new "," text [] "," text "," class ","(sym :clear) include? "," marks [] "," marks "," marks [] == ","rng + "," marks select ","new_marks << ","i < ","i >= "," marks each ","rng end ","rng begin ","args first ","args size == ","args size ","index + ","i == ","args first  + ","args first  end ","args first  begin "]}," String +":{"type":"method","name":"+","children":[],"call":[" class new "," class "," marks dup "," marks "," text + ","other to_s "," text ","nmarks << ","omarks each "," shift_marks ","other marks "," text size ","other text "," marks dup  << "," shift_marks  each "]}," String downcase!":{"type":"method","name":"downcase!","children":[],"call":[" text upcase! "," text "]}," String downcase":{"type":"method","name":"downcase","children":[],"call":[" class new "," marks "," text upcase "," text "," class "," text downcase "]}," String upcase!":{"type":"method","name":"upcase!","children":[],"call":[" text upcase! "," text "]}," String upcase":{"type":"method","name":"upcase","children":[],"call":[" class new "," marks "," text upcase "," text "," class "]}," String size":{"type":"method","name":"size","children":[],"call":[" text size "," text "]}," String to_s":{"type":"method","name":"to_s","children":[],"call":["s insert ","ANSICode  __send__ ","m each ","b [] == ","b [] ","v == ","b [] <=> ","a [] "," marks sort "," marks "," text dup "," text ","ANSI Code  __send__ "," text dup  in text dup ert ","ANSICode  __ text dup end__ ","b [] <=>  == "," mark text dup   text dup ort "," mark text dup  ","ANSI Code  __ text dup end__ "]}," String initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? ","(or\n  (lvar :text)\n  (str \"\")) to_s "]}," string":{"type":"method","name":"string","children":[],"call":[]}," Progressbar colorize":{"type":"method","name":"colorize","children":[],"call":["ANSI Code  send ","(lvar :style) flatten inject ","(lvar :style) flatten "]}," Progressbar show_progress":{"type":"method","name":"show_progress","children":[],"call":[" show ","cur_percentage > ","(send\n  (send\n    (ivar :@previous) :*\n    (int 100)) :/\n  (ivar :@total)) to_i ","@previous * / ","@previous * ","(send\n  (send\n    (ivar :@current) :*\n    (int 100)) :/\n  (ivar :@total)) to_i ","@current * / ","@current * ","@total zero? ","(send\n  (send\n    (ivar :@current) :*\n    (int 100)) :/\n  (ivar :@total)) to_i  > "]}," Progressbar show":{"type":"method","name":"show","children":[],"call":[" show ","width - + ","width - ","@out print ","line + "," eol ","@bar_length == ","(send\n  (ivar :@bar_length) :-\n  (begin\n    (send\n      (send\n        (lvar :length) :-\n        (lvar :width)) :+\n      (int 1)))) max ","@bar_length - ","length - + ","length - ","length >= ","length == ","ANSI Code  uncolored length ","ANSI Code  uncolored "," get_width "," sprintf "," colorize "," styles [] "," styles "," send ","@format_arguments map "," get_width  - + "," get_width  - "," sprintf  + ","(send\n  (ivar :@bar_length) :-\n  (begin\n    (send\n      (send\n        (lvar :length) :-\n        (lvar :width)) :+\n      (int 1)))) max  == ","@bar_ANSI Code  uncolored length  == ","(send\n  (ivar :(send\n  (ivar :@bar_length) :-\n  (begin\n    (send\n      (send\n        (lvar :length) :-\n        (lvar :width)) :+\n      (int 1)))) max ) :-\n  (begin\n    (send\n      (send\n        (lvar :length) :-\n        (lvar :width)) :+\n      (int 1)))) max ","(send\n  (ivar :@bar_ANSI Code  uncolored length ) :-\n  (begin\n    (send\n      (send\n        (lvar :ANSI Code  uncolored length ) :-\n        (lvar :width)) :+\n      (int 1)))) max ","(send\n  (ivar :@bar_length) :-\n  (begin\n    (send\n      (send\n        (lvar :length) :-\n        (lvar : get_width )) :+\n      (int 1)))) max ","(send\n  (ivar :@bar_length) :-\n  (begin\n    (send\n      (send\n        (lvar :length) :-\n        (lvar :width)) :+\n      (int 1)))) max  - ","@bar_ANSI Code  uncolored length  - ","ANSI Code  uncolored length  - + ","ANSI Code  uncolored length  - ","ANSI Code  uncolored length  >= ","ANSI Code  uncolored length  == ","ANSI Code  uncolored ANSI Code  uncolored length  "," get_ get_width  "]}," Progressbar get_width":{"type":"method","name":"get_width","children":[],"call":["cols >= ","data unpack ","@out ioctl >= ","@out ioctl ","(int 0) pack ","(int 0) pack  unpack "]}," Progressbar title":{"type":"method","name":"title","children":[],"call":["@title [] + ","@title [] "]}," Progressbar percentage":{"type":"method","name":"percentage","children":[],"call":["@current * / ","@current * ","@total zero? "]}," Progressbar bar":{"type":"method","name":"bar","children":[],"call":[" sprintf ","  * ","@bar_length - ","@bar_mark * "," percentage * / "," percentage * "," percentage ","@bar_ percentage * / gth - "]}," Progressbar eol":{"type":"method","name":"eol","children":[],"call":[]}," Progressbar stat_for_file_transfer":{"type":"method","name":"stat_for_file_transfer","children":[],"call":[" sprintf "," eta "," transfer_rate "," bytes "," elapsed "]}," Progressbar stat":{"type":"method","name":"stat","children":[],"call":[" eta "," elapsed "]}," Progressbar elapsed":{"type":"method","name":"elapsed","children":[],"call":[" sprintf "," format_time ","Time  now - ","Time  now "]}," Progressbar eta":{"type":"method","name":"eta","children":[],"call":[" sprintf "," format_time ","elapsed * / - ","elapsed * / ","elapsed * ","Time  now - ","Time  now ","@current == ","Time  now -  * / - ","Time  now -  * / ","Time  now -  * "]}," Progressbar format_time":{"type":"method","name":"format_time","children":[],"call":[" sprintf ","t / ","(send\n  (lvar :t) :/\n  (int 60)) % ","t % ","t to_i "," sprint to_i f ","t to_i  / ","(send\n  (lvar :t to_i ) :/\n  (int to_i  60)) % ","t to_i  % ","t to_i  t to_i o_i "]}," Progressbar bytes":{"type":"method","name":"bytes","children":[],"call":[" convert_bytes "]}," Progressbar transfer_rate":{"type":"method","name":"transfer_rate","children":[],"call":[" sprintf "," convert_bytes ","@current to_f / ","Time  now - ","Time  now ","@current to_f "]}," Progressbar convert_bytes":{"type":"method","name":"convert_bytes","children":[],"call":[" sprintf ","bytes to_f / / / ","bytes to_f / / ","bytes to_f / ","bytes to_f ","bytes < ","1024 * * ","1024 * "]}," Progressbar inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Progressbar inc":{"type":"method","name":"inc","children":[],"call":[" show_progress ","@current > "]}," Progressbar reset":{"type":"method","name":"reset","children":[],"call":[]}," Progressbar set":{"type":"method","name":"set","children":[],"call":[" show_progress "," raise ","count + ","count > ","count < "]}," Progressbar halt":{"type":"method","name":"halt","children":[],"call":[" show_progress "]}," Progressbar flush":{"type":"method","name":"flush","children":[],"call":["@out flush "]}," Progressbar finish":{"type":"method","name":"finish","children":[],"call":[" show_progress "]}," Progressbar transfer_mode":{"type":"method","name":"transfer_mode","children":[],"call":[]}," Progressbar standard_mode":{"type":"method","name":"standard_mode","children":[],"call":[]}," Progressbar style":{"type":"method","name":"style","children":[],"call":[]}," Progressbar format":{"type":"method","name":"format","children":[],"call":["arguments empty? "]}," Progressbar total_overflow=":{"type":"method","name":"total_overflow=","children":[],"call":[]}," Progressbar bar_mark=":{"type":"method","name":"bar_mark=","children":[],"call":[" String [] "," String "]}," Progressbar title=":{"type":"method","name":"title=","children":[],"call":[]}," Progressbar initialize":{"type":"method","name":"initialize","children":[],"call":[" show_progress "," block_given? ","Time  now "]}," Logger fatal_with_color":{"type":"method","name":"fatal_with_color","children":[],"call":[" << ","ANSI Code  clear ","ANSI Code  send "," styles [] each "," styles [] "," styles "]}," Logger debug_with_color":{"type":"method","name":"debug_with_color","children":[],"call":[" << ","ANSI Code  clear ","ANSI Code  send "," styles [] each "," styles [] "," styles "]}," Logger error_with_color":{"type":"method","name":"error_with_color","children":[],"call":[" << ","ANSI Code  clear ","ANSI Code  send "," styles [] each "," styles [] "," styles "]}," Logger warn_with_color":{"type":"method","name":"warn_with_color","children":[],"call":[" << ","ANSI Code  clear ","ANSI Code  send "," styles [] each "," styles [] "," styles "]}," Logger info_with_color":{"type":"method","name":"info_with_color","children":[],"call":[" << ","ANSI Code  clear ","ANSI Code  send "," styles [] each "," styles [] "," styles "]}," Logger fatal":{"type":"method","name":"fatal","children":[],"call":[" fatal_with_color ","@logdev ansicolor? "," error? "]}," Logger error":{"type":"method","name":"error","children":[],"call":[" error_with_color ","@logdev ansicolor? "," error? "]}," Logger debug":{"type":"method","name":"debug","children":[],"call":[" debug_with_color ","@logdev ansicolor? "," debug? "]}," Logger warn":{"type":"method","name":"warn","children":[],"call":[" warn_with_color ","@logdev ansicolor? "," warn? "]}," Logger info":{"type":"method","name":"info","children":[],"call":[" info_with_color ","@logdev ansicolor? "," info? "]}," Logger styles":{"type":"method","name":"styles","children":[],"call":["@styles merge! "]}," Logger formatter":{"type":"method","name":"formatter","children":[],"call":[" formatter= "]}," Logger ansicolor=":{"type":"method","name":"ansicolor=","children":[],"call":["@logdev ansicolor= "]}," Logger ansicolor?":{"type":"method","name":"ansicolor?","children":[],"call":["@logdev ansicolor? "]}," Logger LogDevice ansicolor?":{"type":"method","name":"ansicolor?","children":[],"call":["@ansicolor nil? "]}," ANSI Code colors":{"type":"method","name":"colors","children":[],"call":["c [] ","@@colors map "]}," ANSI Code uncolored":{"type":"method","name":"uncolored","children":[],"call":[" gsub "," respond_to? ","string gsub "," block_given? "]}," ANSI Code define_ansicolor_method":{"type":"method","name":"define_ansicolor_method","children":[],"call":[]}," ANSI Code display":{"type":"method","name":"display","children":[],"call":["result << "," respond_to? "," block_given? ","column to_i ","line to_i "]}," ANSI Code right":{"type":"method","name":"right","children":[],"call":["spaces to_i "]}," ANSI Code left":{"type":"method","name":"left","children":[],"call":["spaces to_i "]}," ANSI Code down":{"type":"method","name":"down","children":[],"call":["spaces to_i "]}," ANSI Code up":{"type":"method","name":"up","children":[],"call":["spaces to_i "]}," ANSI Code move":{"type":"method","name":"move","children":[],"call":["column to_i ","line to_i "]}," ANSI Code clear_line":{"type":"method","name":"clear_line","children":[],"call":[]}," ANSI Code clear_screen":{"type":"method","name":"clear_screen","children":[],"call":[]}," ANSI Code restore":{"type":"method","name":"restore","children":[],"call":[]}," ANSI Code save":{"type":"method","name":"save","children":[],"call":[]}," Logger Logger LogDevice ansicolor?":{"type":"method","name":"ansicolor?","children":[],"call":["@ansicolor nil? "]}," ANSI BBCode html_to_ansi":{"type":"method","name":"html_to_ansi","children":[],"call":[]}," ANSI BBCode ansi_to_html":{"type":"method","name":"ansi_to_html","children":[],"call":[]}," ANSI BBCode bbcode_to_html":{"type":"method","name":"bbcode_to_html","children":[],"call":[]}," ANSI BBCode html_to_bbcode":{"type":"method","name":"html_to_bbcode","children":[],"call":[]}," ANSI BBCode bbcode_to_ansi":{"type":"method","name":"bbcode_to_ansi","children":[],"call":[]}," ANSI BBCode ansi_to_bbcode":{"type":"method","name":"ansi_to_bbcode","children":[],"call":[]}," ANSI BBCode strip_bbcode":{"type":"method","name":"strip_bbcode","children":[],"call":[]}," ANSI BBCode ansi":{"type":"method","name":"ansi","children":[],"call":[]}," ANSI ProgressBar colorize":{"type":"method","name":"colorize","children":[],"call":["ANSI Code  send ","(lvar :style) flatten inject ","(lvar :style) flatten ","ANSI Code  ansi "]}," ANSI ProgressBar show_progress":{"type":"method","name":"show_progress","children":[],"call":[" show ","cur_percentage > ","(send\n  (send\n    (ivar :@previous) :*\n    (int 100)) :/\n  (ivar :@total)) to_i ","@previous * / ","@previous * ","(send\n  (send\n    (ivar :@current) :*\n    (int 100)) :/\n  (ivar :@total)) to_i ","@current * / ","@current * ","@total zero? ","(send\n  (send\n    (ivar :@current) :*\n    (int 100)) :/\n  (ivar :@total)) to_i  > "]}," ANSI ProgressBar show":{"type":"method","name":"show","children":[],"call":[" show ","width - + ","width - ","@out print ","line + "," eol ","@bar_length == ","(send\n  (ivar :@bar_length) :-\n  (begin\n    (send\n      (send\n        (lvar :length) :-\n        (lvar :width)) :+\n      (int 1)))) max ","@bar_length - ","length - + ","length - ","length >= ","length == ","(send\n  (const\n    (const nil :ANSI) :Code) :uncolor) length ","ANSI Code  uncolor "," get_width "," sprintf "," colorize "," styles [] "," styles "," send ","@format_arguments map "," get_width  - + "," get_width  - "," sprintf  + ","(send\n  (ivar :@bar_length) :-\n  (begin\n    (send\n      (send\n        (lvar :length) :-\n        (lvar :width)) :+\n      (int 1)))) max  == ","@bar_(send\n  (const\n    (const nil :ANSI) :Code) :uncolor) length  == ","(send\n  (ivar :(send\n  (ivar :@bar_length) :-\n  (begin\n    (send\n      (send\n        (lvar :length) :-\n        (lvar :width)) :+\n      (int 1)))) max ) :-\n  (begin\n    (send\n      (send\n        (lvar :length) :-\n        (lvar :width)) :+\n      (int 1)))) max ","(send\n  (ivar :@bar_(send\n  (const\n    (const nil :ANSI) :Code) :uncolor) length ) :-\n  (begin\n    (send\n      (send\n        (lvar :(send\n  (const\n    (const nil :ANSI) :Code) :uncolor) length ) :-\n        (lvar :width)) :+\n      (int 1)))) max ","(send\n  (ivar :@bar_length) :-\n  (begin\n    (send\n      (send\n        (lvar :length) :-\n        (lvar : get_width )) :+\n      (int 1)))) max ","(send\n  (ivar :@bar_length) :-\n  (begin\n    (send\n      (send\n        (lvar :length) :-\n        (lvar :width)) :+\n      (int 1)))) max  - ","@bar_(send\n  (const\n    (const nil :ANSI) :Code) :uncolor) length  - ","(send\n  (const\n    (const nil :ANSI) :Code) :uncolor) length  - + ","(send\n  (const\n    (const nil :ANSI) :Code) :uncolor) length  - ","(send\n  (const\n    (const nil :ANSI) :Code) :uncolor) length  >= ","(send\n  (const\n    (const nil :ANSI) :Code) :uncolor) length  == ","(send\n  (const\n    (const nil :ANSI) :Code) :uncolor) (send\n  (const\n    (const nil :ANSI) :Code) :uncolor) length  "," get_ get_width  "]}," ANSI ProgressBar get_width":{"type":"method","name":"get_width","children":[],"call":["cols >= ","data unpack ","@out ioctl >= ","@out ioctl ","(int 0) pack ","data unpack [] ","data unpack []  >= ","(int 0) pack  unpack ","(int 0) pack  unpack [] "]}," ANSI ProgressBar title":{"type":"method","name":"title","children":[],"call":["@title [] + ","@title [] "]}," ANSI ProgressBar percentage":{"type":"method","name":"percentage","children":[],"call":["@current * / ","@current * ","@total zero? "]}," ANSI ProgressBar bar":{"type":"method","name":"bar","children":[],"call":[" sprintf ","  * ","@bar_length - ","@bar_mark * "," percentage * / "," percentage * "," percentage ","@bar_ percentage * / gth - "]}," ANSI ProgressBar eol":{"type":"method","name":"eol","children":[],"call":[]}," ANSI ProgressBar stat_for_file_transfer":{"type":"method","name":"stat_for_file_transfer","children":[],"call":[" sprintf "," eta "," transfer_rate "," bytes "," elapsed "]}," ANSI ProgressBar stat":{"type":"method","name":"stat","children":[],"call":[" eta "," elapsed "]}," ANSI ProgressBar elapsed":{"type":"method","name":"elapsed","children":[],"call":[" sprintf "," format_time ","Time  now - ","Time  now "]}," ANSI ProgressBar eta":{"type":"method","name":"eta","children":[],"call":[" sprintf "," format_time ","elapsed * / - ","elapsed * / ","elapsed * ","Time  now - ","Time  now ","@current == ","Time  now -  * / - ","Time  now -  * / ","Time  now -  * "]}," ANSI ProgressBar format_time":{"type":"method","name":"format_time","children":[],"call":[" sprintf ","t / ","(send\n  (lvar :t) :/\n  (int 60)) % ","t % ","t to_i "," sprint to_i f ","t to_i  / ","(send\n  (lvar :t to_i ) :/\n  (int to_i  60)) % ","t to_i  % ","t to_i  t to_i o_i "]}," ANSI ProgressBar bytes":{"type":"method","name":"bytes","children":[],"call":[" convert_bytes "]}," ANSI ProgressBar transfer_rate":{"type":"method","name":"transfer_rate","children":[],"call":[" sprintf "," convert_bytes ","@current to_f / ","Time  now - ","Time  now ","@current to_f "]}," ANSI ProgressBar convert_bytes":{"type":"method","name":"convert_bytes","children":[],"call":[" sprintf ","bytes to_f / / / ","bytes to_f / / ","bytes to_f / ","bytes to_f ","bytes < ","1024 * * ","1024 * "]}," ANSI ProgressBar inspect":{"type":"method","name":"inspect","children":[],"call":[]}," ANSI ProgressBar inc":{"type":"method","name":"inc","children":[],"call":[" show_progress ","@current > "]}," ANSI ProgressBar reset":{"type":"method","name":"reset","children":[],"call":[]}," ANSI ProgressBar set":{"type":"method","name":"set","children":[],"call":[" show_progress "," raise ","count + ","count > ","count < "]}," ANSI ProgressBar halt":{"type":"method","name":"halt","children":[],"call":[" show_progress "]}," ANSI ProgressBar flush":{"type":"method","name":"flush","children":[],"call":["@out flush "]}," ANSI ProgressBar finish":{"type":"method","name":"finish","children":[],"call":[" show_progress "]}," ANSI ProgressBar transfer_mode":{"type":"method","name":"transfer_mode","children":[],"call":[]}," ANSI ProgressBar standard_mode":{"type":"method","name":"standard_mode","children":[],"call":[]}," ANSI ProgressBar style":{"type":"method","name":"style","children":[],"call":[]}," ANSI ProgressBar format":{"type":"method","name":"format","children":[],"call":["arguments empty? "]}," ANSI ProgressBar total_overflow=":{"type":"method","name":"total_overflow=","children":[],"call":[]}," ANSI ProgressBar bar_mark=":{"type":"method","name":"bar_mark=","children":[],"call":[" String [] "," String "]}," ANSI ProgressBar title=":{"type":"method","name":"title=","children":[],"call":[]}," ANSI ProgressBar initialize":{"type":"method","name":"initialize","children":[],"call":[" show_progress "," block_given? ","Time  now "]}," ANSI Mixin white_on_cyan":{"type":"method","name":"white_on_cyan","children":[],"call":[" to_s ","ANSI Code  white_on_cyan "]}," ANSI Mixin white_on_magenta":{"type":"method","name":"white_on_magenta","children":[],"call":[" to_s ","ANSI Code  white_on_magenta "]}," ANSI Mixin white_on_blue":{"type":"method","name":"white_on_blue","children":[],"call":[" to_s ","ANSI Code  white_on_blue "]}," ANSI Mixin white_on_yellow":{"type":"method","name":"white_on_yellow","children":[],"call":[" to_s ","ANSI Code  white_on_yellow "]}," ANSI Mixin white_on_green":{"type":"method","name":"white_on_green","children":[],"call":[" to_s ","ANSI Code  white_on_green "]}," ANSI Mixin white_on_red":{"type":"method","name":"white_on_red","children":[],"call":[" to_s ","ANSI Code  white_on_red "]}," ANSI Mixin white_on_black":{"type":"method","name":"white_on_black","children":[],"call":[" to_s ","ANSI Code  white_on_black "]}," ANSI Mixin cyan_on_white":{"type":"method","name":"cyan_on_white","children":[],"call":[" to_s ","ANSI Code  cyan_on_white "]}," ANSI Mixin cyan_on_magenta":{"type":"method","name":"cyan_on_magenta","children":[],"call":[" to_s ","ANSI Code  cyan_on_magenta "]}," ANSI Mixin cyan_on_blue":{"type":"method","name":"cyan_on_blue","children":[],"call":[" to_s ","ANSI Code  cyan_on_blue "]}," ANSI Mixin cyan_on_yellow":{"type":"method","name":"cyan_on_yellow","children":[],"call":[" to_s ","ANSI Code  cyan_on_yellow "]}," ANSI Mixin cyan_on_green":{"type":"method","name":"cyan_on_green","children":[],"call":[" to_s ","ANSI Code  cyan_on_green "]}," ANSI Mixin cyan_on_red":{"type":"method","name":"cyan_on_red","children":[],"call":[" to_s ","ANSI Code  cyan_on_red "]}," ANSI Mixin cyan_on_black":{"type":"method","name":"cyan_on_black","children":[],"call":[" to_s ","ANSI Code  cyan_on_black "]}," ANSI Mixin magenta_on_white":{"type":"method","name":"magenta_on_white","children":[],"call":[" to_s ","ANSI Code  magenta_on_white "]}," ANSI Mixin magenta_on_cyan":{"type":"method","name":"magenta_on_cyan","children":[],"call":[" to_s ","ANSI Code  magenta_on_cyan "]}," ANSI Mixin magenta_on_blue":{"type":"method","name":"magenta_on_blue","children":[],"call":[" to_s ","ANSI Code  magenta_on_blue "]}," ANSI Mixin magenta_on_yellow":{"type":"method","name":"magenta_on_yellow","children":[],"call":[" to_s ","ANSI Code  magenta_on_yellow "]}," ANSI Mixin magenta_on_green":{"type":"method","name":"magenta_on_green","children":[],"call":[" to_s ","ANSI Code  magenta_on_green "]}," ANSI Mixin magenta_on_red":{"type":"method","name":"magenta_on_red","children":[],"call":[" to_s ","ANSI Code  magenta_on_red "]}," ANSI Mixin magenta_on_black":{"type":"method","name":"magenta_on_black","children":[],"call":[" to_s ","ANSI Code  magenta_on_black "]}," ANSI Mixin blue_on_white":{"type":"method","name":"blue_on_white","children":[],"call":[" to_s ","ANSI Code  blue_on_white "]}," ANSI Mixin blue_on_cyan":{"type":"method","name":"blue_on_cyan","children":[],"call":[" to_s ","ANSI Code  blue_on_cyan "]}," ANSI Mixin blue_on_magenta":{"type":"method","name":"blue_on_magenta","children":[],"call":[" to_s ","ANSI Code  blue_on_magenta "]}," ANSI Mixin blue_on_yellow":{"type":"method","name":"blue_on_yellow","children":[],"call":[" to_s ","ANSI Code  blue_on_yellow "]}," ANSI Mixin blue_on_green":{"type":"method","name":"blue_on_green","children":[],"call":[" to_s ","ANSI Code  blue_on_green "]}," ANSI Mixin blue_on_red":{"type":"method","name":"blue_on_red","children":[],"call":[" to_s ","ANSI Code  blue_on_red "]}," ANSI Mixin blue_on_black":{"type":"method","name":"blue_on_black","children":[],"call":[" to_s ","ANSI Code  blue_on_black "]}," ANSI Mixin yellow_on_white":{"type":"method","name":"yellow_on_white","children":[],"call":[" to_s ","ANSI Code  yellow_on_white "]}," ANSI Mixin yellow_on_cyan":{"type":"method","name":"yellow_on_cyan","children":[],"call":[" to_s ","ANSI Code  yellow_on_cyan "]}," ANSI Mixin yellow_on_magenta":{"type":"method","name":"yellow_on_magenta","children":[],"call":[" to_s ","ANSI Code  yellow_on_magenta "]}," ANSI Mixin yellow_on_blue":{"type":"method","name":"yellow_on_blue","children":[],"call":[" to_s ","ANSI Code  yellow_on_blue "]}," ANSI Mixin yellow_on_green":{"type":"method","name":"yellow_on_green","children":[],"call":[" to_s ","ANSI Code  yellow_on_green "]}," ANSI Mixin yellow_on_red":{"type":"method","name":"yellow_on_red","children":[],"call":[" to_s ","ANSI Code  yellow_on_red "]}," ANSI Mixin yellow_on_black":{"type":"method","name":"yellow_on_black","children":[],"call":[" to_s ","ANSI Code  yellow_on_black "]}," ANSI Mixin green_on_white":{"type":"method","name":"green_on_white","children":[],"call":[" to_s ","ANSI Code  green_on_white "]}," ANSI Mixin green_on_cyan":{"type":"method","name":"green_on_cyan","children":[],"call":[" to_s ","ANSI Code  green_on_cyan "]}," ANSI Mixin green_on_magenta":{"type":"method","name":"green_on_magenta","children":[],"call":[" to_s ","ANSI Code  green_on_magenta "]}," ANSI Mixin green_on_blue":{"type":"method","name":"green_on_blue","children":[],"call":[" to_s ","ANSI Code  green_on_blue "]}," ANSI Mixin green_on_yellow":{"type":"method","name":"green_on_yellow","children":[],"call":[" to_s ","ANSI Code  green_on_yellow "]}," ANSI Mixin green_on_red":{"type":"method","name":"green_on_red","children":[],"call":[" to_s ","ANSI Code  green_on_red "]}," ANSI Mixin green_on_black":{"type":"method","name":"green_on_black","children":[],"call":[" to_s ","ANSI Code  green_on_black "]}," ANSI Mixin red_on_white":{"type":"method","name":"red_on_white","children":[],"call":[" to_s ","ANSI Code  red_on_white "]}," ANSI Mixin red_on_cyan":{"type":"method","name":"red_on_cyan","children":[],"call":[" to_s ","ANSI Code  red_on_cyan "]}," ANSI Mixin red_on_magenta":{"type":"method","name":"red_on_magenta","children":[],"call":[" to_s ","ANSI Code  red_on_magenta "]}," ANSI Mixin red_on_blue":{"type":"method","name":"red_on_blue","children":[],"call":[" to_s ","ANSI Code  red_on_blue "]}," ANSI Mixin red_on_yellow":{"type":"method","name":"red_on_yellow","children":[],"call":[" to_s ","ANSI Code  red_on_yellow "]}," ANSI Mixin red_on_green":{"type":"method","name":"red_on_green","children":[],"call":[" to_s ","ANSI Code  red_on_green "]}," ANSI Mixin red_on_black":{"type":"method","name":"red_on_black","children":[],"call":[" to_s ","ANSI Code  red_on_black "]}," ANSI Mixin black_on_white":{"type":"method","name":"black_on_white","children":[],"call":[" to_s ","ANSI Code  black_on_white "]}," ANSI Mixin black_on_cyan":{"type":"method","name":"black_on_cyan","children":[],"call":[" to_s ","ANSI Code  black_on_cyan "]}," ANSI Mixin black_on_magenta":{"type":"method","name":"black_on_magenta","children":[],"call":[" to_s ","ANSI Code  black_on_magenta "]}," ANSI Mixin black_on_blue":{"type":"method","name":"black_on_blue","children":[],"call":[" to_s ","ANSI Code  black_on_blue "]}," ANSI Mixin black_on_yellow":{"type":"method","name":"black_on_yellow","children":[],"call":[" to_s ","ANSI Code  black_on_yellow "]}," ANSI Mixin black_on_green":{"type":"method","name":"black_on_green","children":[],"call":[" to_s ","ANSI Code  black_on_green "]}," ANSI Mixin black_on_red":{"type":"method","name":"black_on_red","children":[],"call":[" to_s ","ANSI Code  black_on_red "]}," ANSI Mixin on_white":{"type":"method","name":"on_white","children":[],"call":[" to_s ","ANSI Code  on_white "]}," ANSI Mixin on_cyan":{"type":"method","name":"on_cyan","children":[],"call":[" to_s ","ANSI Code  on_cyan "]}," ANSI Mixin on_magenta":{"type":"method","name":"on_magenta","children":[],"call":[" to_s ","ANSI Code  on_magenta "]}," ANSI Mixin on_blue":{"type":"method","name":"on_blue","children":[],"call":[" to_s ","ANSI Code  on_blue "]}," ANSI Mixin on_yellow":{"type":"method","name":"on_yellow","children":[],"call":[" to_s ","ANSI Code  on_yellow "]}," ANSI Mixin on_green":{"type":"method","name":"on_green","children":[],"call":[" to_s ","ANSI Code  on_green "]}," ANSI Mixin on_red":{"type":"method","name":"on_red","children":[],"call":[" to_s ","ANSI Code  on_red "]}," ANSI Mixin on_black":{"type":"method","name":"on_black","children":[],"call":[" to_s ","ANSI Code  on_black "]}," ANSI Mixin white":{"type":"method","name":"white","children":[],"call":[" to_s ","ANSI Code  white "]}," ANSI Mixin cyan":{"type":"method","name":"cyan","children":[],"call":[" to_s ","ANSI Code  cyan "]}," ANSI Mixin magenta":{"type":"method","name":"magenta","children":[],"call":[" to_s ","ANSI Code  magenta "]}," ANSI Mixin blue":{"type":"method","name":"blue","children":[],"call":[" to_s ","ANSI Code  blue "]}," ANSI Mixin yellow":{"type":"method","name":"yellow","children":[],"call":[" to_s ","ANSI Code  yellow "]}," ANSI Mixin green":{"type":"method","name":"green","children":[],"call":[" to_s ","ANSI Code  green "]}," ANSI Mixin red":{"type":"method","name":"red","children":[],"call":[" to_s ","ANSI Code  red "]}," ANSI Mixin black":{"type":"method","name":"black","children":[],"call":[" to_s ","ANSI Code  black "]}," ANSI Mixin strike":{"type":"method","name":"strike","children":[],"call":[" to_s ","ANSI Code  strike "]}," ANSI Mixin concealed":{"type":"method","name":"concealed","children":[],"call":[" to_s ","ANSI Code  concealed "]}," ANSI Mixin negative":{"type":"method","name":"negative","children":[],"call":[" to_s ","ANSI Code  negative "]}," ANSI Mixin reverse":{"type":"method","name":"reverse","children":[],"call":[" to_s ","ANSI Code  reverse "]}," ANSI Mixin rapid":{"type":"method","name":"rapid","children":[],"call":[" to_s ","ANSI Code  rapid "]}," ANSI Mixin blink":{"type":"method","name":"blink","children":[],"call":[" to_s ","ANSI Code  blink "]}," ANSI Mixin underscore":{"type":"method","name":"underscore","children":[],"call":[" to_s ","ANSI Code  underscore "]}," ANSI Mixin underline":{"type":"method","name":"underline","children":[],"call":[" to_s ","ANSI Code  underline "]}," ANSI Mixin italic":{"type":"method","name":"italic","children":[],"call":[" to_s ","ANSI Code  italic "]}," ANSI Mixin dark":{"type":"method","name":"dark","children":[],"call":[" to_s ","ANSI Code  dark "]}," ANSI Mixin bold":{"type":"method","name":"bold","children":[],"call":[" to_s ","ANSI Code  bold "]}," ANSI Code uncolered":{"type":"method","name":"uncolered","children":[],"call":["string gsub "," gsub "," block_given? "," warn "]}," ANSI Code unstyle":{"type":"method","name":"unstyle","children":[],"call":[" gsub "," block_given? "]}," ANSI Code style":{"type":"method","name":"style","children":[],"call":["s << ","TABLE  [] ","codes each "," to_s "]}," ANSI Code cls":{"type":"method","name":"cls","children":[],"call":[]}," ANSI Code clr":{"type":"method","name":"clr","children":[],"call":[]}," ANSI Code reset":{"type":"method","name":"reset","children":[],"call":[]}," ANSI Code clear":{"type":"method","name":"clear","children":[],"call":[]}," ANSI Code styles":{"type":"method","name":"styles","children":[],"call":[]}," ANSI Mixin display":{"type":"method","name":"display","children":[],"call":["result << "," to_s ","column to_i ","line to_i "]}," String unansi!":{"type":"method","name":"unansi!","children":[],"call":[" replace "," unansi "]}," String unansi":{"type":"method","name":"unansi","children":[],"call":["ANSI Code  unansi "]}," ANSI Code unansi":{"type":"method","name":"unansi","children":[],"call":["string gsub ","string to_s "," to_s "," block_given? ","string to_s  gsub "," to_s  gsub ","string to_s  to_s "," to_s  to_s "]}," ANSI Code ansi":{"type":"method","name":"ansi","children":[],"call":["s << ","TABLE  [] ","codes each "," code + + "," code + "," code ","codes shift to_s ","codes shift "," to_s "," block_given? ","c + + ","c + ","string gsub ","ENDCODE  + "," code odes ea code h ","  code ode + + ","  code ode + ","  code ode "," code odes shift to_s "," code odes shift "," blo code k_given? "," code  + + "," code  + ","codes shift to_s  gsub "," to_s  gsub "]}," ANSI Table dividing_line":{"type":"method","name":"dividing_line","children":[],"call":["(send\n  (lvar :tmp) :%\n  (begin\n    (send\n      (array\n        (str \"-\")) :*\n      (send nil :column_size)))) gsub gsub ","(send\n  (lvar :tmp) :%\n  (begin\n    (send\n      (array\n        (str \"-\")) :*\n      (send nil :column_size)))) gsub ","tmp % ","(str \"-\") * "," column_size ","(send\n  (send nil :max_columns\n    (send nil :fit)) :map) join "," max_columns map "," max_columns "," fit ","(send\n  (lvar :(send\n  (send nil :max_columns\n    (send nil :fit)) :map) join ) :%\n  (begin\n    (send\n      (array\n        (str \"-\")) :*\n      (send nil :column_size)))) gsub gsub ","(send\n  (lvar :(send\n  (send nil :max_columns\n    (send nil :fit)) :map) join ) :%\n  (begin\n    (send\n      (array\n        (str \"-\")) :*\n      (send nil :column_size)))) gsub ","(send\n  (send nil :max_columns\n    (send nil :fit)) :map) join  % "]}," ANSI Table ansi_formating":{"type":"method","name":"ansi_formating","children":[],"call":["(lvar :f) flatten compact ","(lvar :f) flatten ","@format [] ","@format arity ","(lvar :@format [] ) @format [] latten compact ","(lvar :@format [] ) @format [] latten ","@@format [] ormat [] ","@@format [] ormat arity "]}," ANSI Table cell_template":{"type":"method","name":"cell_template","children":[],"call":[" align "]}," ANSI Table column_size":{"type":"method","name":"column_size","children":[],"call":[" table first size "," table first "," table "]}," ANSI Table max_columns":{"type":"method","name":"max_columns","children":[],"call":["max []= ","(send\n  (lvar :max) :[]\n  (lvar :index)) max ","col size ","max [] "," fit_width ","col to_s ","row each_with_index "," table each "," table ","Array  new "," column_size ","col unansi ","Array  new  []= ","(send\n  (lvar :Array  new ) :[]\n  (lvar :index)) Array  new  ","col to_s  size ","col unansi  size ","Array  new  [] ","col to_s  to_s ","col unansi  to_s "," col to_s umn_size "," col unansi umn_size ","col to_s  unansi ","col unansi  unansi "]}," ANSI Table fit_width":{"type":"method","name":"fit_width","children":[],"call":["(send\n  (begin\n    (send\n      (send\n        (lvar :width) :to_f) :/\n      (send nil :column_size))) :-\n  (begin\n    (send\n      (send nil :padding) :+\n      (int 3)))) to_i ","(send\n  (send\n    (lvar :width) :to_f) :/\n  (send nil :column_size)) - "," padding + "," padding ","width to_f / "," column_size ","width to_f ","Terminal  terminal_width ","(send\n  (begin\n    (send\n      (send\n        (lvar :Terminal  terminal_width ) :to_f) :/\n      (send nil :column_size))) :-\n  (begin\n    (send\n      (send nil :padding) :+\n      (int 3)))) to_i ","(send\n  (send\n    (lvar :Terminal  terminal_width ) :to_f) :/\n  (send nil :column_size)) - ","Terminal  terminal_width  to_f / ","Terminal  terminal_width  to_f ","Terminal  terminal_Terminal  terminal_width  "]}," ANSI Table to_s":{"type":"method","name":"to_s","children":[],"call":["body join "," border ","body << ","|  + + ","|  + ","body_row join ","body_row << ","(send\n  (lvar :t) :%\n  (send\n    (lvar :cell) :to_s)) ansi "," ansi_formating ","t % ","cell to_s "," cell_template ","max [] ","row each_with_index "," table each_with_index "," table "," dividing_line "," max_columns "," fit "," table [] size "," table [] "," table size "," apply_format ","body join  join ","body join  << ","body join _row join ","body join _row << ","(send\n  (lvar : cell_template ) :%\n  (send\n    (lvar :cell) : cell_template o_s)) ansi ","(t % end\n  (lvar :t) :%\n  (t % end\n    (lvar :cell) :to_t % )) ant % i "," ansi_forma cell_template ing "," ant % i_formating "," cell_template  % ","cell  cell_template o_s ","cell to_t %  "," cell_ cell_template empla cell_template e "," max_columns  [] ","row each_wi cell_template h_index ","  cell_template able each_wi cell_template h_index ","  cell_template able ","  dividing_line iding_line ","  max_columns _columns "," max_columnt %  "," fi cell_template  ","  cell_template able [] size "," table [] t % ize ","  cell_template able [] ","  cell_template able size "," table t % ize "," apply_forma cell_template  "]}," ANSI Table initialize":{"type":"method","name":"initialize","children":[],"call":["  * ","options [] "]}," ANSI ProgressBar clear":{"type":"method","name":"clear","children":[],"call":["@out print ","  * + "," eol ","  * "," get_width "]}," ANSI Columns ansi_formating":{"type":"method","name":"ansi_formating","children":[],"call":["(lvar :f) flatten compact ","(lvar :f) flatten ","@format [] ","@format arity ","(lvar :@format [] ) @format [] latten compact ","(lvar :@format [] ) @format [] latten ","@@format [] ormat [] ","@@format [] ormat arity "]}," ANSI Columns template":{"type":"method","name":"template","children":[],"call":[" align ","  * ","max / "]}," ANSI Columns to_s_auto":{"type":"method","name":"to_s_auto","children":[],"call":["Terminal  terminal_width ","Terminal  terminal_Terminal  terminal_width  "]}," ANSI Columns to_s_columns":{"type":"method","name":"to_s_columns","children":[],"call":["str << ","(send\n  (lvar :tmp) :%\n  (lvar :cell)) ansi "," ansi_formating ","tmp % ","row each_with_index ","cols each_with_index "," template ","  * "," padding ","(send\n  (lvar :lines) :map) max ","l size ","lines map ","(or-asgn\n  (send\n    (lvar :cols) :[]\n    (send\n      (lvar :index) :%\n      (lvar :mod)))\n  (array)) << ","line strip ","cols [] ","index % ","lines each_with_index ","(send\n  (lvar :count) :/\n  (send\n    (lvar :columns) :to_f)) to_i + ","(send\n  (lvar :count) :/\n  (send\n    (lvar :columns) :to_f)) to_i ","count / ","columns to_f ","lines size "," string lines to_a "," string lines "," string ","str rstrip! ","ansi_codes empty? ","count % != ","count % ","(send\n  (lvar :width) :/\n  (begin\n    (send\n      (lvar :max) :+\n      (send nil :padding)))) to_i ","width / ","max + ","Terminal  terminal_width ","columns nil? "," list to_a "," list ","rows each_with_index ","(or-asgn\n  (send\n    (lvar :rows) :[]\n    (send\n      (lvar :index) :%\n      (lvar :mod)))\n  (array)) << ","rows [] "," ansi_formatting ","(send\n  (lvar :width) :/\n  (begin\n    (send\n      (lvar :max) :+\n      (send\n        (send nil :padding) :size)))) to_i "," padding size ","(send\n  (lvar : template ) :%\n  (lvar :cell)) ansi "," template  % ","   * ding ","  padding ding ","(send\n  (lvar :lines) :map) (send\n  (lvar :lines) :map) max  ","(send\n  (lvar : string lines to_a ) :map) max ","(send\n  (lvar : list to_a ) :map) max "," string lines to_a  map "," list to_a  map ","(or-asgn\n  (send\n    (lvar :cols) :[]\n    (send\n      (lvar :index) :%\n      (lvar :(send\n  (lvar :count) :/\n  (send\n    (lvar :columns) :to_f)) to_i + )))\n  (array)) << ","(or-asgn\n  (send\n    (lvar :cols) :[]\n    (send\n      (lvar :index) :%\n      (lvar :(send\n  (lvar :count) :/\n  (send\n    (lvar :columns) :to_f)) to_i )))\n  (array)) << "," string lines to_a  each_with_index "," list to_a  each_with_index ","(send\n  (lvar :lines size ) :/\n  (send\n    (lvar :columns) :to_f)) to_i + ","(send\n  (lvar :count) :/\n  (send\n    (lvar :(send\n  (lvar :width) :/\n  (begin\n    (send\n      (lvar :max) :+\n      (send nil :padding)))) to_i ) :to_f)) to_i + ","(send\n  (lvar :count) :/\n  (send\n    (lvar :(send\n  (lvar :width) :/\n  (begin\n    (send\n      (lvar :max) :+\n      (send\n        (send nil :padding) :size)))) to_i ) :to_f)) to_i + ","(send\n  (lvar :lines size ) :/\n  (send\n    (lvar :columns) :to_f)) to_i ","(send\n  (lvar :count) :/\n  (send\n    (lvar :(send\n  (lvar :width) :/\n  (begin\n    (send\n      (lvar :max) :+\n      (send nil :padding)))) to_i ) :to_f)) to_i ","(send\n  (lvar :count) :/\n  (send\n    (lvar :(send\n  (lvar :width) :/\n  (begin\n    (send\n      (lvar :max) :+\n      (send\n        (send nil :padding) :size)))) to_i ) :to_f)) to_i ","lines size  / ","(send\n  (lvar :width) :/\n  (begin\n    (send\n      (lvar :max) :+\n      (send nil :padding)))) to_i  to_f ","(send\n  (lvar :width) :/\n  (begin\n    (send\n      (lvar :max) :+\n      (send\n        (send nil :padding) :size)))) to_i  to_f "," string lines to_a  size "," list to_a  size "," string  string lines to_a  to_a "," string  list to_a  to_a "," string  string lines to_a  "," string  list to_a  "," ansi_formating  empty? "," ansi_formatting  empty? ","lines size  % != ","lines size  % ","(send\n  (lvar :width) :/\n  (begin\n    (send\n      (lvar :max) :+\n      (send nil :  * ding)))) to_i ","(send\n  (lvar :width) :/\n  (begin\n    (send\n      (lvar :max) :+\n      (send nil : padding ding)))) to_i ","(send\n  (lvar :width) :/\n  (begin\n    (send\n      (lvar :(send\n  (lvar :lines) :map) max ) :+\n      (send nil :padding)))) to_i ","(send\n  (lvar :Terminal  terminal_width ) :/\n  (begin\n    (send\n      (lvar :max) :+\n      (send nil :padding)))) to_i ","Terminal  terminal_width  / ","(send\n  (lvar :lines) :map) max  + ","Terminal  terminal_Terminal  terminal_width  ","(send\n  (lvar :width) :/\n  (begin\n    (send\n      (lvar :max) :+\n      (send nil :padding)))) to_i  nil? ","(send\n  (lvar :width) :/\n  (begin\n    (send\n      (lvar :max) :+\n      (send\n        (send nil :padding) :size)))) to_i  nil? ","(or-asgn\n  (send\n    (lvar :rows) :[]\n    (send\n      (lvar :index) :%\n      (lvar :(send\n  (lvar :count) :/\n  (send\n    (lvar :columns) :to_f)) to_i + )))\n  (array)) << ","(or-asgn\n  (send\n    (lvar :rows) :[]\n    (send\n      (lvar :index) :%\n      (lvar :(send\n  (lvar :count) :/\n  (send\n    (lvar :columns) :to_f)) to_i )))\n  (array)) << ","(send\n  (lvar :width) :/\n  (begin\n    (send\n      (lvar :max) :+\n      (send\n        (send nil :  * ding) :size)))) to_i ","(send\n  (lvar :width) :/\n  (begin\n    (send\n      (lvar :max) :+\n      (send\n        (send nil : padding ding) :size)))) to_i ","(send\n  (lvar :width) :/\n  (begin\n    (send\n      (lvar :(send\n  (lvar :lines) :map) max ) :+\n      (send\n        (send nil :padding) :size)))) to_i ","(send\n  (lvar :Terminal  terminal_width ) :/\n  (begin\n    (send\n      (lvar :max) :+\n      (send\n        (send nil :padding) :size)))) to_i ","   * ding size ","  padding ding size "]}," ANSI Columns to_s":{"type":"method","name":"to_s","children":[],"call":[" to_s_auto "," to_s_columns "," columns "]}," ANSI Columns initialize":{"type":"method","name":"initialize","children":[],"call":["options [] ","@columns == "," list= "," format= "," align= "," padding= "," columns= ","options []  == "]}," ANSI const_missing":{"type":"method","name":"const_missing","children":[],"call":[]}," ANSI meta":{"type":"method","name":"meta","children":[],"call":[]}," ANSI Columns list=":{"type":"method","name":"list=","children":[],"call":["e to_s ","list map ","e chomp ","list lines to_a map ","list lines to_a ","list lines "]}," ANSI Diff convert":{"type":"method","name":"convert","children":[],"call":["object inspect ","object to_str ","object respond_to? ","String  === "]}," ANSI Diff color2":{"type":"method","name":"color2","children":[],"call":["ANSI  color "]}," ANSI Diff color1":{"type":"method","name":"color1","children":[],"call":["ANSI  color "]}," ANSI Diff red":{"type":"method","name":"red","children":[],"call":["ANSI  color "]}," ANSI Diff diff_string":{"type":"method","name":"diff_string","children":[],"call":["t2 == ","s2 << "," red ","t1 == ","s1 << ","i2 >= ","str2 size ","i1 >= ","str1 size ","m1 == ","t2 << ","str2 [] to_s ","str2 [] ","t1 << ","str1 [] to_s ","str1 [] "," color2 ","str1 [] == "," color1 "," loop "," compare "]}," ANSI Diff to_s":{"type":"method","name":"to_s","children":[],"call":[]}," ANSI Diff diff2":{"type":"method","name":"diff2","children":[],"call":[]}," ANSI Diff diff1":{"type":"method","name":"diff1","children":[],"call":[]}," ANSI Diff initialize":{"type":"method","name":"initialize","children":[],"call":[" diff_string "," convert "]}," ansi":{"type":"method","name":"ansi","children":[],"call":["ANSI Code  ansi "]}," ANSI Diff lcs":{"type":"method","name":"lcs","children":[],"call":["num [] []= ","num [] ","s1 [] ","(send\n  (lvar :i) :+\n  (int 1)) - ","i + ","lastsub == ","num [] [] ","j - ","i - ","num [] [] nil? ","num [] [] > ","1 + ","j == ","i == ","l1 == ","s2 scan each_with_index ","s2 scan ","s1 scan each_with_index ","s1 scan ","Array  new ","s2 size ","s1 size "]}," ANSI Diff lcs_size":{"type":"method","name":"lcs_size","children":[],"call":["num [] []= ","num [] ","num [] [] ","num [] [] > ","1 + ","j - ","i - ","j == ","i == ","l1 == ","s2 scan each_with_index ","s2 scan ","s1 scan each_with_index ","s1 scan ","Array  new ","s2 size ","s1 size "]}," ANSI Diff common":{"type":"method","name":"common","children":[],"call":["s empty? ","(lvar :l) flatten reject ","(lvar :l) flatten "," common ","y [] ","x [] ","y size - ","y size ","ix == ","x size - ","x size ","j == ","i == ","j + ","c size ","i + ","y index ","x index "," lcs ","(lva common  :l) flatten  common eject ","(lvax []  :l) flatten x [] eject ","(lvay []  :l) flatten y [] eject ","( common var : common ) f common atten reject ","(x [] var :x [] ) fx [] atten reject ","(y [] var :y [] ) fy [] atten reject ","(lvar :l) flatten rey index ect ","(lvar :l) flatten reje lcs t ","(lva common  :l) flatten ","(lvax []  :l) flatten ","(lvay []  :l) flatten ","( common var : common ) f common atten ","(x [] var :x [] ) fx [] atten ","(y [] var :y [] ) fy [] atten ","  lcs ommon ","y sx index ze - ","y sx index ze ","i +  == ","x index x == ","x sx index ze - ","x sx index ze ","y index  == ","x index  == ","y index  + ","c sx index ze "," lcs  size ","x index  + ","y x index ndex ","x x index ndex ","  common cs "," x [] cs "," y [] cs "," l lcs s "]}," ANSI Diff compare":{"type":"method","name":"compare","children":[],"call":["j + ","m size ","i + ","b []= ","ANSI  ansi ","COLORS  [] ","q % ","a []= ","b index ","a index ","c each_with_index ","y dup ","x dup "," common ","b index  + ","m sa index ze ","a index  + ","y dup  []= ","ANSI  ansa index  ","ANSI  x dup nsi ","x dup  []= ","b a index ndex ","y dup  index ","a a index ndex ","x dup  index ","c each_wa index th_a index ndex ","c ex dup ch_with_index "," common  ea common h_with_index ","  common ommon "]}," ANSI Code rgb_256":{"type":"method","name":"rgb_256","children":[],"call":[" raise ","v > ","(send\n  (send\n    (send\n      (send\n        (lvar :r) :*\n        (int 36)) :+\n      (send\n        (lvar :g) :*\n        (int 6))) :+\n    (lvar :b)) :+\n  (int 16)) abs ","r * + + + ","r * + + ","r * + ","g * ","r * ","(send\n  (int 6) :*\n  (begin\n    (send\n      (send\n        (lvar :c) :to_f) :/\n      (float 256.0)))) to_i ","6 * ","c to_f / ","c to_f "," rgb_valid ","(lvar :r) map ","(send\n  (send\n    (send\n      (send\n        (lvar :r) :*\n        (int 36)) :+\n      (send\n        (lvar :g) :*\n        (int 6))) :+\n    (lvar :b)) :+\n  (int 16)) abs  > ","(send\n  (send\n    (send\n      (send\n        (l(send\n  (send\n    (send\n      (send\n        (lvar :r) :*\n        (int 36)) :+\n      (send\n        (lvar :g) :*\n        (int 6))) :+\n    (lvar :b)) :+\n  (int 16)) abs ar :r) :*\n        (int 36)) :+\n      (send\n        (l(send\n  (send\n    (send\n      (send\n        (lvar :r) :*\n        (int 36)) :+\n      (send\n        (lvar :g) :*\n        (int 6))) :+\n    (lvar :b)) :+\n  (int 16)) abs ar :g) :*\n        (int 6))) :+\n    (l(send\n  (send\n    (send\n      (send\n        (lvar :r) :*\n        (int 36)) :+\n      (send\n        (lvar :g) :*\n        (int 6))) :+\n    (lvar :b)) :+\n  (int 16)) abs ar :b)) :+\n  (int 16)) abs ","(send\n  (int 6) :*\n  (begin\n    (send\n      (send\n        (l(send\n  (send\n    (send\n      (send\n        (lvar :r) :*\n        (int 36)) :+\n      (send\n        (lvar :g) :*\n        (int 6))) :+\n    (lvar :b)) :+\n  (int 16)) abs ar :c) :to_f) :/\n      (float 256.0)))) to_i "," rgb_(send\n  (send\n    (send\n      (send\n        (lvar :r) :*\n        (int 36)) :+\n      (send\n        (lvar :g) :*\n        (int 6))) :+\n    (lvar :b)) :+\n  (int 16)) abs alid ","(l(send\n  (send\n    (send\n      (send\n        (lvar :r) :*\n        (int 36)) :+\n      (send\n        (lvar :g) :*\n        (int 6))) :+\n    (lvar :b)) :+\n  (int 16)) abs ar :r) map "]}," ANSI Code hex":{"type":"method","name":"hex","children":[],"call":[" rgb ","string [] to_i ","string [] ","i * ","(int 0) map ","string size == ","string size ","string tr! "]}," ANSI Code rgb":{"type":"method","name":"rgb","children":[],"call":[" rgb_value "," to_s "," block_given? "," raise ","\u001b[ + + ","\u001b[ + "," rgb_code "," hex_code ","args size "]}," ANSI Code random":{"type":"method","name":"random","children":[],"call":["(if\n  (lvar :background)\n  (int 40)\n  (int 30)) + "," rand "]}," ANSI Code code":{"type":"method","name":"code","children":[],"call":["\u001b[ + + ","\u001b[ + ","list * ","list << ","CHART  [] ","code to_sym "," random "," rgb ","codes each "," hex_code ","code start_with? "," rgb_code "]}," ANSI Code method_missing":{"type":"method","name":"method_missing","children":[],"call":[" block_given? ","args first ","SPECIAL_CHART  [] ","SPECIAL_CHART  key? ","CHART  [] ","CHART  key? "]}," ANSI Code []":{"type":"method","name":"[]","children":[],"call":[" code "]}," ANSI Table apply_format":{"type":"method","name":"apply_format","children":[],"call":["str ansi "," ansi_formating "]}," ANSI HexDump template":{"type":"method","name":"template","children":[],"call":["Code CYAN  + + + + + + + + + + ","Code CYAN  + + + + + + + + + ","Code CYAN  + + + + + + + + ","Code CYAN  + + + + + + + ","Code CYAN  + + + + + + ","Code CYAN  + + + + + ","Code CYAN  + + + + ","Code CYAN  + + + ","Code CYAN  + + ","Code CYAN  + "," color "]}," ANSI HexDump index?":{"type":"method","name":"index?","children":[],"call":[]}," ANSI HexDump dump_random":{"type":"method","name":"dump_random","children":[],"call":[" dump ","(send\n  (begin\n    (irange\n      (int 0)\n      (lvar :size))) :map) join "," rand chr "," rand ","(irange\n  (int 0)\n  (lvar :size)) map "]}," ANSI HexDump dump":{"type":"method","name":"dump","children":[],"call":[" puts ","out % ","hex ljust ","offset to_s rjust ","offset to_s ","(send\n  (lvar :bytes) :map) join ","Code WHITE  + + + ","Code WHITE  + + ","Code WHITE  + "," color ","c chr ","ASCII_PRINTABLE  include? ","bytes map ","(send\n  (lvar :bytes) :map) insert join ","(send\n  (lvar :bytes) :map) insert ","%0.2x % ","line unpack ","off + ","n * ","lines each_with_index ","(send\n  (str \" \") :*\n  (lvar :max_offset_width)) + ","  * "," index? "," offset "," template ","max_offset to_s size + ","max_offset to_s size ","max_offset to_s ","(send\n  (send nil :offset) :+\n  (send\n    (lvar :data) :size)) / "," offset + ","data size ","data to_s scan ","data to_s "," template  % ","(send\n  (lvar :bytes) :map) insert join  ljust ","off +  to_s rjust "," offset set to_s rjust ","off +  to_s "," offset set to_s ","(send\n  (lvar :line unpack ) :map) join "," c chr olor ","c chr  c chr hr ","ASCII_PRINTABLE  inc chr lude? ","line unpack  map ","(send\n  (lvar :line unpack ) :map) insert join ","(send\n  (lvar :line unpack ) :map) insert ","line unpac chr k "," offset  + ","lines eac chr h_with_index ","data to_s scan  each_with_index ","(send\n  (str \" \") :*\n  (lvar :max_off + _width)) + ","(send\n  (str \" \") :*\n  (lvar :max_ offset set_width)) + ","(send\n  (str \" \") :*\n  (lvar :max_offset to_s size + )) + ","(send\n  (str \" \") :*\n  (lvar :(send\n  (send nil :offset) :+\n  (send\n    (lvar :data) :size)) / _width)) + "," off +  ","  offset set ","max_off +  to_s size + ","max_ offset set to_s size + ","(send\n  (send nil :offset) :+\n  (send\n    (lvar :data) :size)) /  to_s size + ","max_off +  to_s size ","max_ offset set to_s size ","(send\n  (send nil :offset) :+\n  (send\n    (lvar :data) :size)) /  to_s size ","max_off +  to_s ","max_ offset set to_s ","(send\n  (send nil :offset) :+\n  (send\n    (lvar :data) :size)) /  to_s ","(send\n  (send nil :off + ) :+\n  (send\n    (lvar :data) :size)) / ","(send\n  (send nil : offset set) :+\n  (send\n    (lvar :data) :size)) / "," off +  + ","  offset set + ","data to_s sc chr an "]}," ANSI HexDump initialize":{"type":"method","name":"initialize","children":[],"call":[" color nil? "," color "," __send__ ","options each "]}," ANSI metadata":{"type":"method","name":"metadata","children":[],"call":[]}," ANSI Diff to_a":{"type":"method","name":"to_a","children":[],"call":[" diff2 "," diff1 "]}," ANSI Diff join":{"type":"method","name":"join","children":[],"call":[]}," ANSI Diff diff":{"type":"method","name":"diff","children":[],"call":[]}," ANSI Columns ansi_formatting":{"type":"method","name":"ansi_formatting","children":[],"call":["(lvar :f) flatten compact ","(lvar :f) flatten ","@format [] ","@format arity ","(lvar :@format [] ) @format [] latten compact ","(lvar :@format [] ) @format [] latten ","@@format [] ormat [] ","@@format [] ormat arity "]}," ANSI Columns join":{"type":"method","name":"join","children":[],"call":[" to_s_columns "," columns "]}," ANSI Columns format=":{"type":"method","name":"format=","children":[],"call":["procedure to_proc "]}," ANSI Columns align=":{"type":"method","name":"align=","children":[],"call":[" raise ","symbol inspect ","(sym :left) include? ","symbol to_sym ","symbol to_sym  inspect ","symbol to_sym  to_sym "]}," ANSI Columns padding=":{"type":"method","name":"padding=","children":[],"call":["pad to_s ","  * ","pad to_i "]}," ANSI Columns columns=":{"type":"method","name":"columns=","children":[],"call":["integer zero? ","integer to_i ","integer to_i  zero? ","integer to_i  to_i "]}," ANSI Columns inspect":{"type":"method","name":"inspect","children":[],"call":[" columns "," list inspect "," list "," object_id "," class "]}," ANSI Chain to_str":{"type":"method","name":"to_str","children":[],"call":[" to_s "]}," ANSI Chain to_s":{"type":"method","name":"to_s","children":[],"call":[" codes clear "," codes ","Code  ansi "," codes empty? "]}," ANSI Chain method_missing":{"type":"method","name":"method_missing","children":[],"call":["@codes << ","ANSI CHART  key? "]}," ANSI Chain initialize":{"type":"method","name":"initialize","children":[],"call":["string to_s "]}," ANSI Code hex_code":{"type":"method","name":"hex_code","children":[],"call":[" rgb_code ","string [] to_i ","string [] ","i * ","(int 0) map ","string size == ","string size ","string tr! "]}," ANSI Code rgb_code":{"type":"method","name":"rgb_code","children":[],"call":[" rgb_256 "]}}