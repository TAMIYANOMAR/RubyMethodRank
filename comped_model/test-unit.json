{" Test Unit run?":{"type":"method","name":"run?","children":[],"call":["AutoRunner  need_auto_run? ! ","AutoRunner  need_auto_run? "]}," Test Unit run=":{"type":"method","name":"run=","children":[],"call":["AutoRunner  need_auto_run= ","have_run ! "]}," Test Unit Util ProcWrapper to_proc":{"type":"method","name":"to_proc","children":[],"call":[]}," Test Unit Util ProcWrapper ==":{"type":"method","name":"==","children":[],"call":["@a_proc == ","other to_proc "]}," Test Unit Util ProcWrapper hash":{"type":"method","name":"hash","children":[],"call":[]}," Test Unit Util ProcWrapper initialize":{"type":"method","name":"initialize","children":[],"call":["(send\n  (block\n    (send\n      (send\n        (lvar :a_proc) :inspect) :sub\n      (regexp\n        (str \"^(#<\")\n        (begin\n          (send\n            (lvar :a_proc) :class))\n        (str \":)\")\n        (regopt)))\n    (args)\n    (str \"\")) :sub\n  (regexp\n    (str \"(>)$\")\n    (regopt))) hex ","(send\n  (send\n    (lvar :a_proc) :inspect) :sub\n  (regexp\n    (str \"^(#<\")\n    (begin\n      (send\n        (lvar :a_proc) :class))\n    (str \":)\")\n    (regopt))) sub ","a_proc inspect sub ","a_proc class ","a_proc inspect "]}," Test Unit Util Observable channels":{"type":"method","name":"channels","children":[],"call":[]}," Test Unit Util Observable notify_listeners":{"type":"method","name":"notify_listeners","children":[],"call":["listeners size ","listener call ","listeners each ","channel values "," channels [] "," channels ","channel values  size ","channel values  each "," channels []  values ","  channels [] s [] ","  channels [] s "]}," Test Unit Util Observable remove_listener":{"type":"method","name":"remove_listener","children":[],"call":["channel delete ","channel has_key? ","ProcWrapper  new ","listener_key instance_of? "," channels [] "," channels "," channels []  delete ","channel has_ProcWrapper  new ? "," channels []  has_key? ","listener_ProcWrapper  new  instance_of? ","  channels [] s [] ","  channels [] s "]}," Test Unit Util Observable add_listener":{"type":"method","name":"add_listener","children":[],"call":[" channels [] []= "," channels [] "," channels ","ProcWrapper  new ","listener_key == "," raise ","ArgumentError  new "," block_given? ","listener_ProcWrapper  new  == "]}," Test Unit Util BacktraceFilter filter_backtrace":{"type":"method","name":"filter_backtrace","children":[],"call":["new_backtrace empty? ","new_backtrace reject ","(send\n  (send\n    (lvar :backtrace) :reverse) :reject) reverse ","match [] ","backtrace reverse reject ","backtrace reverse ","backtrace detect ","split_e [] sub == ","split_p [] ","split_e [] sub ","split_e [] ","split_e [] == ","e split [] ","split_p size ","e split "," proc ","prefix split ","ENV  [] ","jruby_internal_p call ","test_unit_internal_p call ","backtrace reject "," lambda ","split_entry [] sub == ","split_prefix [] ","split_entry [] sub ","split_entry [] ","split_entry [] == ","components [] ","split_prefix size ","entry split ","entry start_with? ","rubinius_internal_p call ","in_user_code ! ","split_prefixes any? ","(const nil :TESTUNIT_PREFIX) compact ","new_backtrace reject  empty? ","(send\n  (send\n    (lvar :backtrace) :reverse) :reject) reverse  empty? ","new_backtrace reject  reject ","(send\n  (send\n    (lvar :backtrace) :reverse) :reject) reverse  reject ","e split []  [] sub == ","prefix split  [] ","e split []  [] sub ","e split []  [] ","e split []  [] == ","prefix split  size ","e split [] ntry [] sub == ","components []  [] sub == ","prefix split refix [] ","e split [] ntry [] sub ","components []  [] sub ","e split [] ntry [] ","components []  [] ","e split [] ntry [] == ","components []  [] == ","entry split  [] ","prefix split refix size ","prefix split refixes any? ","prefix split es any? ","(const nil :TESTUNIT_PREFIX) compact  any? "]}," Test Unit UI Tk TestRunner create_count_label":{"type":"method","name":"create_count_label","children":[],"call":["TkLabel  new pack ","TkLabel  new ","TkVariable  new "]}," Test Unit UI Tk TestRunner setup_ui":{"type":"method","name":"setup_ui","children":[],"call":["paned_frame bind ","paned_frame sash_place ","paned_frame sash_coord [] * / ","paned_frame sash_coord [] * ","paned_frame sash_coord [] ","paned_frame sash_coord "," proc ","paned_frame winfo_height "," Tk  update "," Tk  grid ","@detail_text xscrollbar ","@detail_text yscrollbar "," bindtags "," bindtags - ","TkText  new ","TkScrollbar  new ","TkGrid  columnconfigure ","TkGrid  rowconfigure ","@fault_list xscrollbar ","@fault_list yscrollbar ","TkListbox  new ","TkFrame  new pack ","TkFrame  new ","paned_frame add ","TkPanedWindow  new pack ","TkPanedWindow  new "," Tk  info != "," Tk  info ","TkPanedWindow TkCommandNames  [] "," create_count_label ","TkFrame  new place ","l pack ","TkLabel  new ","TkVariable  new ","TkLabel  new pack ","@run_button pack ","TkButton  new ","TkPanedWindow  new pack  bind ","paned_TkFrame  new pack rame bind ","TkPanedWindow  new pack  sash_place ","paned_TkFrame  new pack rame sash_place ","paned_frame sash_pTkLabel  new ace ","TkPanedWindow  new pack  sash_coord [] * / ","paned_TkFrame  new pack rame sash_coord [] * / ","TkPanedWindow  new pack  sash_coord [] * ","paned_TkFrame  new pack rame sash_coord [] * ","TkPanedWindow  new pack  sash_coord [] ","paned_TkFrame  new pack rame sash_coord [] ","TkPanedWindow  new pack  sash_coord ","paned_TkFrame  new pack rame sash_coord ","TkPanedWindow  new pack  winfo_height ","paned_TkFrame  new pack rame winTkFrame  new pack o_height ","@detaiTkLabel  new _text xscroTkLabel  new TkLabel  new bar ","@detaiTkLabel  new _text yscroTkLabel  new TkLabel  new bar ","TkScroTkLabel  new TkLabel  new bar  new ","TkGrid  columnconTkFrame  new pack igure ","TkGrid  coTkLabel  new umnconfigure ","TkGrid  rowconTkFrame  new pack igure ","TkListbox  new  xscrollbar ","@TkFrame  new pack ault_list xscrollbar ","@fauTkLabel  new t_TkLabel  new ist xscroTkLabel  new TkLabel  new bar ","TkListbox  new  yscrollbar ","@TkFrame  new pack ault_list yscrollbar ","@fauTkLabel  new t_TkLabel  new ist yscroTkLabel  new TkLabel  new bar ","TkPanedWindow  new pack  add ","paned_TkFrame  new pack rame add "," Tk  inTkFrame  new pack o != "," Tk  inTkFrame  new pack o "," create_count_TkLabel  new abeTkLabel  new  ","TkFrame  new pTkLabel  new ace ","TkLabel  new  pack ","TkLabeTkLabel  new   new ","TkVariabTkLabel  new e  new ","TkLabeTkLabel  new   new pack ","TkButton  new  pack "]}," Test Unit UI Tk TestRunner output_status":{"type":"method","name":"output_status","children":[],"call":["@status_entry value= "]}," Test Unit UI Tk TestRunner finished":{"type":"method","name":"finished","children":[],"call":[" output_status "]}," Test Unit UI Tk TestRunner test_started":{"type":"method","name":"test_started","children":[],"call":[" output_status "]}," Test Unit UI Tk TestRunner started":{"type":"method","name":"started","children":[],"call":[" output_status "]}," Test Unit UI Tk TestRunner result_changed":{"type":"method","name":"result_changed","children":[],"call":["@error_count_label value= ","result error_count ","@failure_count_label value= ","result failure_count ","@assertion_count_label value= ","result assertion_count ","@test_progress_bar place ","result run_count / ","result run_count ","@test_count_label value= "]}," Test Unit UI Tk TestRunner clear_fault":{"type":"method","name":"clear_fault","children":[],"call":[" raw_show_fault "]}," Test Unit UI Tk TestRunner raw_show_fault":{"type":"method","name":"raw_show_fault","children":[],"call":["@detail_text value= "]}," Test Unit UI Tk TestRunner show_fault":{"type":"method","name":"show_fault","children":[],"call":[" raw_show_fault ","fault long_display "]}," Test Unit UI Tk TestRunner add_fault":{"type":"method","name":"add_fault","children":[],"call":["@fault_list insert ","fault short_display ","@fault_detail_list push ","@test_progress_bar configure ","@red ! "]}," Test Unit UI Tk TestRunner reset_ui":{"type":"method","name":"reset_ui","children":[],"call":[" clear_fault ","@fault_list delete ","@error_count_label value= ","@failure_count_label value= ","@assertion_count_label value= ","@test_count_label value= ","@test_progress_bar place ","0 / ","count zero? ","@test_progress_bar configure ","count to_f "]}," Test Unit UI Tk TestRunner stop":{"type":"method","name":"stop","children":[],"call":[" Tk  exit "]}," Test Unit UI Tk TestRunner start_ui":{"type":"method","name":"start_ui","children":[],"call":["@viewer join ","@run_button configure ","@mediator run_suite "," loop ","@viewer run "]}," Test Unit UI Tk TestRunner run_test":{"type":"method","name":"run_test","children":[],"call":["@runner raise "]}," Test Unit UI Tk TestRunner attach_to_mediator":{"type":"method","name":"attach_to_mediator","children":[],"call":["@mediator add_listener "," method ","@fault_list bind "," show_fault ","@fault_detail_list [] ","@fault_list nearest "," proc ","@run_button command ","@@fault_detail_list [] _list bind "," show_@fault_detail_list []  ","@@fault_detail_list [] _detail_list [] ","@@fault_detail_list [] _list nearest "]}," Test Unit UI Tk TestRunner setup_mediator":{"type":"method","name":"setup_mediator","children":[],"call":["@suite_name_entry value= ","@suite name ","@suite kind_of? ","@suite to_s ","TestRunnerMediator  new ","@@suite name _entry value= ","@@suite to_s _entry value= "]}," Test Unit UI Tk TestRunner start":{"type":"method","name":"start","children":[],"call":[" start_ui "," attach_to_mediator "," setup_mediator "," setup_ui "]}," Test Unit UI Tk TestRunner initialize":{"type":"method","name":"initialize","children":[],"call":["@viewer join "," Tk  mainloop ","@runner run ","@runner join ","Thread  start ","Class  new ","Thread  current ","suite suite ","suite respond_to? ","Thread  current  run ","Thread  current  join "]}," Test Unit UI TestRunnerUtilities start_command_line_test":{"type":"method","name":"start_command_line_test","children":[],"call":[" new start "," new "," eval ","ARGV  [] "," require ","ARGV  [] gsub "," exit "," puts ","ARGV  empty? "]}," Test Unit UI TestRunnerUtilities run":{"type":"method","name":"run","children":[],"call":[" new start "," new "]}," Test Unit UI TestRunnerMediator create_result":{"type":"method","name":"create_result","children":[],"call":["TestResult  new "]}," Test Unit UI TestRunnerMediator run_suite":{"type":"method","name":"run_suite","children":[],"call":[" notify_listeners ","end_time - ","Time  now ","result remove_listener ","@suite run ","result add_listener "," create_result ","@suite size ","Unit  run= ","Time  now - "," run ","result nil? ","Time  now  - "," create_result  remove_listener "," create_result  add_listener "," create_ create_result  "," create_result  nil? "]}," Test Unit UI TestRunnerMediator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Test Unit UI GTK2 TestRunner initialize":{"type":"method","name":"initialize","children":[],"call":["@viewer join ","Gtk  main ","@runner run ","@runner join ","Thread  start ","Class  new ","Thread  current ","suite suite ","suite respond_to? ","Thread  current  run ","Thread  current  join "]}," Test Unit UI GTK2 TestRunner start":{"type":"method","name":"start","children":[],"call":[" start_ui "," attach_to_mediator "," setup_ui "," setup_mediator "]}," Test Unit UI GTK2 TestRunner setup_mediator":{"type":"method","name":"setup_mediator","children":[],"call":[" suite_name_entry set_text "," suite_name_entry ","@suite name ","@suite kind_of? ","@suite to_s ","TestRunnerMediator  new "," @suite name _entry set_text "," @suite to_s _entry set_text "," @suite name _entry "," @suite to_s _entry "]}," Test Unit UI GTK2 TestRunner attach_to_mediator":{"type":"method","name":"attach_to_mediator","children":[],"call":["@mediator add_listener "," method "," run_test "," run_button signal_connect "," run_button "]}," Test Unit UI GTK2 TestRunner start_ui":{"type":"method","name":"start_ui","children":[],"call":["@viewer join "," run_button child text= "," run_button child "," run_button ","@mediator run_suite "," loop ","@viewer run "]}," Test Unit UI GTK2 TestRunner run_test":{"type":"method","name":"run_test","children":[],"call":["@runner raise "]}," Test Unit UI GTK2 TestRunner stop":{"type":"method","name":"stop","children":[],"call":["Gtk  main_quit "]}," Test Unit UI GTK2 TestRunner reset_ui":{"type":"method","name":"reset_ui","children":[],"call":[" fault_list clear "," fault_list "," error_count_label set_text "," error_count_label "," failure_count_label set_text "," failure_count_label "," assertion_count_label set_text "," assertion_count_label "," run_count_label set_text "," run_count_label ","count + "," test_progress_bar fraction= "," test_progress_bar "," test_progress_bar style= "," green_style "]}," Test Unit UI GTK2 TestRunner add_fault":{"type":"method","name":"add_fault","children":[],"call":[" fault_list add_fault "," fault_list "," test_progress_bar style= "," red_style "," test_progress_bar ","@red ! "]}," Test Unit UI GTK2 TestRunner show_fault":{"type":"method","name":"show_fault","children":[],"call":[" raw_show_fault ","fault long_display "]}," Test Unit UI GTK2 TestRunner raw_show_fault":{"type":"method","name":"raw_show_fault","children":[],"call":[" outer_detail_sub_panel queue_resize "," outer_detail_sub_panel "," fault_detail_label set_text "," fault_detail_label "]}," Test Unit UI GTK2 TestRunner clear_fault":{"type":"method","name":"clear_fault","children":[],"call":[" raw_show_fault "]}," Test Unit UI GTK2 TestRunner result_changed":{"type":"method","name":"result_changed","children":[],"call":[" error_count_label label= ","result error_count to_s ","result error_count "," error_count_label "," failure_count_label label= ","result failure_count to_s ","result failure_count "," failure_count_label "," assertion_count_label label= ","result assertion_count to_s ","result assertion_count "," assertion_count_label "," run_count_label label= ","result run_count to_s ","result run_count "," run_count_label "]}," Test Unit UI GTK2 TestRunner test_finished":{"type":"method","name":"test_finished","children":[],"call":["1.0 / "," test_progress_bar fraction "," test_progress_bar "]}," Test Unit UI GTK2 TestRunner started":{"type":"method","name":"started","children":[],"call":[" output_status "]}," Test Unit UI GTK2 TestRunner test_started":{"type":"method","name":"test_started","children":[],"call":[" output_status "]}," Test Unit UI GTK2 TestRunner finished":{"type":"method","name":"finished","children":[],"call":[" output_status "," test_progress_bar fraction= "," test_progress_bar "]}," Test Unit UI GTK2 TestRunner output_status":{"type":"method","name":"output_status","children":[],"call":[" status_entry set_text "," status_entry "]}," Test Unit UI GTK2 TestRunner setup_ui":{"type":"method","name":"setup_ui","children":[],"call":[" clear_fault "," show_fault "," fault_list get_fault ","selection selected "," fault_list "," fault_list selection signal_connect "," fault_list selection "," main_window show_all "," main_window "," stop "," main_window signal_connect "]}," Test Unit UI GTK2 TestRunner main_window":{"type":"method","name":"main_window","children":[],"call":["@main_window add "," main_panel ","@main_window set_resizable ","@main_window set_default_size ","@main_window set_title ","Gtk Window  new "," lazy_initialize ","Gtk Window  new  add ","Gtk Window  new  set_resizable ","Gtk Window  new  set_default_size ","Gtk Window  new  set_title "]}," Test Unit UI GTK2 TestRunner main_panel":{"type":"method","name":"main_panel","children":[],"call":["@main_panel pack_start "," status_panel "," detail_panel "," list_panel "," info_panel "," progress_panel "," suite_panel ","Gtk VBox  new "," lazy_initialize ","Gtk VBox  new  pack_start "]}," Test Unit UI GTK2 TestRunner suite_panel":{"type":"method","name":"suite_panel","children":[],"call":["@suite_panel pack_start "," run_button "," suite_name_entry ","Gtk Label  new ","@suite_panel border_width= ","Gtk HBox  new "," lazy_initialize ","Gtk HBox  new  pack_start ","Gtk HBox  new  border_width= "]}," Test Unit UI GTK2 TestRunner suite_name_entry":{"type":"method","name":"suite_name_entry","children":[],"call":["@suite_name_entry editable= ","Gtk Entry  new "," lazy_initialize ","Gtk Entry  new  editable= "]}," Test Unit UI GTK2 TestRunner run_button":{"type":"method","name":"run_button","children":[],"call":["Gtk Button  new "," lazy_initialize "]}," Test Unit UI GTK2 TestRunner progress_panel":{"type":"method","name":"progress_panel","children":[],"call":["@progress_panel pack_start "," test_progress_bar ","@progress_panel border_width= ","Gtk HBox  new "," lazy_initialize ","Gtk HBox  new  pack_start ","Gtk HBox  new  border_width= "]}," Test Unit UI GTK2 TestRunner test_progress_bar":{"type":"method","name":"test_progress_bar","children":[],"call":["@test_progress_bar style= "," green_style ","@test_progress_bar set_size_request "," info_panel size_request [] "," info_panel size_request "," info_panel ","@test_progress_bar allocation width ","@test_progress_bar allocation ","@test_progress_bar fraction= ","Gtk ProgressBar  new "," lazy_initialize ","Gtk ProgressBar  new  style= ","Gtk ProgressBar  new  set_size_request ","Gtk ProgressBar  new  allocation width ","Gtk ProgressBar  new  allocation ","Gtk ProgressBar  new  fraction= "]}," Test Unit UI GTK2 TestRunner red_style":{"type":"method","name":"red_style","children":[],"call":["@red_style set_bg ","Gtk Style  new "," lazy_initialize ","Gtk Style  new  set_bg "]}," Test Unit UI GTK2 TestRunner green_style":{"type":"method","name":"green_style","children":[],"call":["@green_style set_bg ","Gtk Style  new "," lazy_initialize ","Gtk Style  new  set_bg "]}," Test Unit UI GTK2 TestRunner info_panel":{"type":"method","name":"info_panel","children":[],"call":["@info_panel pack_start "," error_count_label ","Gtk Label  new "," failure_count_label "," assertion_count_label "," run_count_label ","@info_panel border_width= ","Gtk HBox  new "," lazy_initialize ","Gtk HBox  new  pack_start ","Gtk HBox  new  border_width= "]}," Test Unit UI GTK2 TestRunner run_count_label":{"type":"method","name":"run_count_label","children":[],"call":["@run_count_label justify= ","Gtk Label  new "," lazy_initialize ","Gtk Label  new  justify= "]}," Test Unit UI GTK2 TestRunner assertion_count_label":{"type":"method","name":"assertion_count_label","children":[],"call":["@assertion_count_label justify= ","Gtk Label  new "," lazy_initialize ","Gtk Label  new  justify= "]}," Test Unit UI GTK2 TestRunner failure_count_label":{"type":"method","name":"failure_count_label","children":[],"call":["@failure_count_label justify= ","Gtk Label  new "," lazy_initialize ","Gtk Label  new  justify= "]}," Test Unit UI GTK2 TestRunner error_count_label":{"type":"method","name":"error_count_label","children":[],"call":["@error_count_label justify= ","Gtk Label  new "," lazy_initialize ","Gtk Label  new  justify= "]}," Test Unit UI GTK2 TestRunner list_panel":{"type":"method","name":"list_panel","children":[],"call":["@list_panel pack_start "," list_scrolled_window ","@list_panel border_width= ","Gtk HBox  new "," lazy_initialize ","Gtk HBox  new  pack_start ","Gtk HBox  new  border_width= "]}," Test Unit UI GTK2 TestRunner list_scrolled_window":{"type":"method","name":"list_scrolled_window","children":[],"call":["@list_scrolled_window add_with_viewport "," fault_list ","@list_scrolled_window set_size_request ","@list_scrolled_window allocation width ","@list_scrolled_window allocation ","@list_scrolled_window set_policy ","Gtk ScrolledWindow  new "," lazy_initialize ","Gtk ScrolledWindow  new  add_with_viewport ","Gtk ScrolledWindow  new  set_size_request ","Gtk ScrolledWindow  new  allocation width ","Gtk ScrolledWindow  new  allocation ","Gtk ScrolledWindow  new  set_policy "]}," Test Unit UI GTK2 TestRunner fault_list":{"type":"method","name":"fault_list","children":[],"call":["FaultList  new "," lazy_initialize "]}," Test Unit UI GTK2 TestRunner detail_panel":{"type":"method","name":"detail_panel","children":[],"call":["@detail_panel pack_start "," detail_scrolled_window ","@detail_panel border_width= ","Gtk HBox  new "," lazy_initialize ","Gtk HBox  new  pack_start ","Gtk HBox  new  border_width= "]}," Test Unit UI GTK2 TestRunner detail_scrolled_window":{"type":"method","name":"detail_scrolled_window","children":[],"call":["@detail_scrolled_window add_with_viewport "," outer_detail_sub_panel ","@detail_scrolled_window set_size_request ","@detail_scrolled_window allocation height ","@detail_scrolled_window allocation ","@detail_scrolled_window set_policy ","Gtk ScrolledWindow  new "," lazy_initialize ","Gtk ScrolledWindow  new  add_with_viewport ","Gtk ScrolledWindow  new  set_size_request ","Gtk ScrolledWindow  new  allocation height ","Gtk ScrolledWindow  new  allocation ","Gtk ScrolledWindow  new  set_policy "]}," Test Unit UI GTK2 TestRunner outer_detail_sub_panel":{"type":"method","name":"outer_detail_sub_panel","children":[],"call":["@outer_detail_sub_panel pack_start "," inner_detail_sub_panel ","Gtk VBox  new "," lazy_initialize ","Gtk VBox  new  pack_start "]}," Test Unit UI GTK2 TestRunner inner_detail_sub_panel":{"type":"method","name":"inner_detail_sub_panel","children":[],"call":["@inner_detail_sub_panel pack_start "," fault_detail_label ","Gtk HBox  new "," lazy_initialize ","Gtk HBox  new  pack_start "]}," Test Unit UI GTK2 TestRunner fault_detail_label":{"type":"method","name":"fault_detail_label","children":[],"call":["@fault_detail_label wrap= ","@fault_detail_label justify= ","EnhancedLabel  new "," lazy_initialize ","EnhancedLabel  new  wrap= ","EnhancedLabel  new  justify= "]}," Test Unit UI GTK2 TestRunner status_panel":{"type":"method","name":"status_panel","children":[],"call":["@status_panel pack_start "," status_entry ","@status_panel border_width= ","Gtk HBox  new "," lazy_initialize ","Gtk HBox  new  pack_start ","Gtk HBox  new  border_width= "]}," Test Unit UI GTK2 TestRunner status_entry":{"type":"method","name":"status_entry","children":[],"call":["@status_entry editable= ","Gtk Entry  new "," lazy_initialize ","Gtk Entry  new  editable= "]}," Test Unit UI GTK2 TestRunner lazy_initialize":{"type":"method","name":"lazy_initialize","children":[],"call":[" instance_eval "," instance_eval ! "]}," Test Unit UI GTK2 FaultList clear":{"type":"method","name":"clear","children":[],"call":[" model clear "," model "]}," Test Unit UI GTK2 FaultList get_fault":{"type":"method","name":"get_fault","children":[],"call":["@faults [] ","iter get_value to_i ","iter get_value "]}," Test Unit UI GTK2 FaultList add_fault":{"type":"method","name":"add_fault","children":[],"call":["iter set_value ","fault short_display ","(send\n  (send\n    (ivar :@faults) :length) :-\n  (int 1)) to_s ","@faults length - ","@faults length ","@model append ","@faults push ","@model append  set_value "]}," Test Unit UI GTK2 FaultList initialize":{"type":"method","name":"initialize","children":[],"call":[" set_headers_visible "," set_rules_hint "," selection mode= "," selection "," append_column ","Gtk TreeViewColumn  new ","Gtk CellRendererText  new ","column visible= ","Gtk ListStore  new "," append_Gtk TreeViewColumn  new  ","Gtk TreeViewColumn  new  visible= "]}," Test Unit UI GTK2 EnhancedLabel set_text":{"type":"method","name":"set_text","children":[],"call":["text gsub "]}," Test Unit UI GTK FaultListItem initialize":{"type":"method","name":"initialize","children":[],"call":["fault short_display "]}," Test Unit UI GTK EnhancedLabel set_text":{"type":"method","name":"set_text","children":[],"call":["text gsub ","\n + ","  * "]}," Test Unit UI GTK EnhancedProgressBar set_style":{"type":"method","name":"set_style","children":[],"call":[" show "," hide "]}," Test Unit UI GTK TestRunner lazy_initialize":{"type":"method","name":"lazy_initialize","children":[],"call":[" instance_eval ","@ + ","symbol to_s "," instance_eval ! "]}," Test Unit UI GTK TestRunner status_entry":{"type":"method","name":"status_entry","children":[],"call":["@status_entry set_editable ","Gtk Entry  new "," lazy_initialize ","Gtk Entry  new  set_editable "]}," Test Unit UI GTK TestRunner status_panel":{"type":"method","name":"status_panel","children":[],"call":["@status_panel pack_start "," status_entry ","@status_panel border_width ","Gtk HBox  new "," lazy_initialize ","Gtk HBox  new  pack_start ","Gtk HBox  new  border_width "]}," Test Unit UI GTK TestRunner fault_detail_label":{"type":"method","name":"fault_detail_label","children":[],"call":["@fault_detail_label set_line_wrap ","@fault_detail_label set_justify ","@fault_detail_label set_style ","style set_font ","Gdk Font  font_load ","Gtk Style  new ","EnhancedLabel  new "," lazy_initialize ","EnhancedLabel  new  set_line_wrap ","EnhancedLabel  new  set_justify ","@fault_detail_label set_Gtk Style  new  ","EnhancedLabel  new  set_style ","style set_Gdk Font  font_load  ","Gtk Style  new  set_font ","Gdk Font  Gdk Font  font_load _load "]}," Test Unit UI GTK TestRunner inner_detail_sub_panel":{"type":"method","name":"inner_detail_sub_panel","children":[],"call":["@inner_detail_sub_panel pack_start "," fault_detail_label ","Gtk HBox  new "," lazy_initialize ","Gtk HBox  new  pack_start "]}," Test Unit UI GTK TestRunner outer_detail_sub_panel":{"type":"method","name":"outer_detail_sub_panel","children":[],"call":["@outer_detail_sub_panel pack_start "," inner_detail_sub_panel ","Gtk VBox  new "," lazy_initialize ","Gtk VBox  new  pack_start "]}," Test Unit UI GTK TestRunner detail_scrolled_window":{"type":"method","name":"detail_scrolled_window","children":[],"call":["@detail_scrolled_window add_with_viewport "," outer_detail_sub_panel ","@detail_scrolled_window set_usize ","@detail_scrolled_window allocation height ","@detail_scrolled_window allocation ","@detail_scrolled_window set_policy ","Gtk ScrolledWindow  new "," lazy_initialize ","Gtk ScrolledWindow  new  add_with_viewport ","Gtk ScrolledWindow  new  set_usize ","Gtk ScrolledWindow  new  allocation height ","Gtk ScrolledWindow  new  allocation ","Gtk ScrolledWindow  new  set_policy "]}," Test Unit UI GTK TestRunner detail_panel":{"type":"method","name":"detail_panel","children":[],"call":["@detail_panel pack_start "," detail_scrolled_window ","@detail_panel border_width ","Gtk HBox  new "," lazy_initialize ","Gtk HBox  new  pack_start ","Gtk HBox  new  border_width "]}," Test Unit UI GTK TestRunner fault_list":{"type":"method","name":"fault_list","children":[],"call":["Gtk List  new "," lazy_initialize "]}," Test Unit UI GTK TestRunner list_scrolled_window":{"type":"method","name":"list_scrolled_window","children":[],"call":["@list_scrolled_window add_with_viewport "," fault_list ","@list_scrolled_window set_usize ","@list_scrolled_window allocation width ","@list_scrolled_window allocation ","@list_scrolled_window set_policy ","Gtk ScrolledWindow  new "," lazy_initialize ","Gtk ScrolledWindow  new  add_with_viewport ","Gtk ScrolledWindow  new  set_usize ","Gtk ScrolledWindow  new  allocation width ","Gtk ScrolledWindow  new  allocation ","Gtk ScrolledWindow  new  set_policy "]}," Test Unit UI GTK TestRunner list_panel":{"type":"method","name":"list_panel","children":[],"call":["@list_panel pack_start "," list_scrolled_window ","@list_panel border_width ","Gtk HBox  new "," lazy_initialize ","Gtk HBox  new  pack_start ","Gtk HBox  new  border_width "]}," Test Unit UI GTK TestRunner error_count_label":{"type":"method","name":"error_count_label","children":[],"call":["@error_count_label set_justify ","Gtk Label  new "," lazy_initialize ","Gtk Label  new  set_justify "]}," Test Unit UI GTK TestRunner failure_count_label":{"type":"method","name":"failure_count_label","children":[],"call":["@failure_count_label set_justify ","Gtk Label  new "," lazy_initialize ","Gtk Label  new  set_justify "]}," Test Unit UI GTK TestRunner assertion_count_label":{"type":"method","name":"assertion_count_label","children":[],"call":["@assertion_count_label set_justify ","Gtk Label  new "," lazy_initialize ","Gtk Label  new  set_justify "]}," Test Unit UI GTK TestRunner run_count_label":{"type":"method","name":"run_count_label","children":[],"call":["@run_count_label set_justify ","Gtk Label  new "," lazy_initialize ","Gtk Label  new  set_justify "]}," Test Unit UI GTK TestRunner info_panel":{"type":"method","name":"info_panel","children":[],"call":["@info_panel pack_start "," error_count_label ","Gtk Label  new "," failure_count_label "," assertion_count_label "," run_count_label ","@info_panel border_width ","Gtk HBox  new "," lazy_initialize ","Gtk HBox  new  pack_start ","Gtk HBox  new  border_width "]}," Test Unit UI GTK TestRunner red_style":{"type":"method","name":"red_style","children":[],"call":["@red_style set_bg ","Gtk Style  new "," lazy_initialize ","Gtk Style  new  set_bg "]}," Test Unit UI GTK TestRunner green_style":{"type":"method","name":"green_style","children":[],"call":["@green_style set_bg ","Gtk Style  new "," lazy_initialize ","Gtk Style  new  set_bg "]}," Test Unit UI GTK TestRunner test_progress_bar":{"type":"method","name":"test_progress_bar","children":[],"call":["@test_progress_bar set_style "," green_style ","@test_progress_bar set_usize "," info_panel size_request height "," info_panel size_request "," info_panel ","@test_progress_bar allocation width ","@test_progress_bar allocation ","EnhancedProgressBar  new "," lazy_initialize ","EnhancedProgressBar  new  set_style ","EnhancedProgressBar  new  set_usize ","EnhancedProgressBar  new  allocation width ","EnhancedProgressBar  new  allocation "]}," Test Unit UI GTK TestRunner progress_panel":{"type":"method","name":"progress_panel","children":[],"call":["@progress_panel pack_start "," test_progress_bar ","@progress_panel border_width ","Gtk HBox  new "," lazy_initialize ","Gtk HBox  new  pack_start ","Gtk HBox  new  border_width "]}," Test Unit UI GTK TestRunner run_button":{"type":"method","name":"run_button","children":[],"call":["Gtk Button  new "," lazy_initialize "]}," Test Unit UI GTK TestRunner suite_name_entry":{"type":"method","name":"suite_name_entry","children":[],"call":["@suite_name_entry set_editable ","Gtk Entry  new "," lazy_initialize ","Gtk Entry  new  set_editable "]}," Test Unit UI GTK TestRunner suite_panel":{"type":"method","name":"suite_panel","children":[],"call":["@suite_panel pack_start "," run_button "," suite_name_entry ","Gtk Label  new ","@suite_panel border_width ","Gtk HBox  new "," lazy_initialize ","Gtk HBox  new  pack_start ","Gtk HBox  new  border_width "]}," Test Unit UI GTK TestRunner main_panel":{"type":"method","name":"main_panel","children":[],"call":["@main_panel pack_start "," status_panel "," detail_panel "," list_panel "," info_panel "," progress_panel "," suite_panel ","Gtk VBox  new "," lazy_initialize ","Gtk VBox  new  pack_start "]}," Test Unit UI GTK TestRunner main_window":{"type":"method","name":"main_window","children":[],"call":["@main_window add "," main_panel ","@main_window set_policy ","@main_window set_uposition ","@main_window set_usize ","@main_window set_title ","Gtk Window  new "," lazy_initialize ","Gtk Window  new  add ","Gtk Window  new  set_policy ","Gtk Window  new  set_uposition ","Gtk Window  new  set_usize ","Gtk Window  new  set_title "]}," Test Unit UI GTK TestRunner setup_ui":{"type":"method","name":"setup_ui","children":[],"call":[" clear_fault "," fault_list signal_connect "," fault_list "," show_fault ","item fault "," main_window show_all "," main_window "," main_window signal_connect "," method "]}," Test Unit UI GTK TestRunner output_status":{"type":"method","name":"output_status","children":[],"call":[" status_entry set_text "," status_entry "]}," Test Unit UI GTK TestRunner finished":{"type":"method","name":"finished","children":[],"call":[" output_status "]}," Test Unit UI GTK TestRunner test_finished":{"type":"method","name":"test_finished","children":[],"call":[" test_progress_bar set_value "," test_progress_bar get_value + "," test_progress_bar get_value "," test_progress_bar "]}," Test Unit UI GTK TestRunner test_started":{"type":"method","name":"test_started","children":[],"call":[" output_status "]}," Test Unit UI GTK TestRunner started":{"type":"method","name":"started","children":[],"call":[" output_status "]}," Test Unit UI GTK TestRunner result_changed":{"type":"method","name":"result_changed","children":[],"call":[" error_count_label set_text ","result error_count to_s ","result error_count "," error_count_label "," failure_count_label set_text ","result failure_count to_s ","result failure_count "," failure_count_label "," assertion_count_label set_text ","result assertion_count to_s ","result assertion_count "," assertion_count_label "," run_count_label set_text ","result run_count to_s ","result run_count "," run_count_label "]}," Test Unit UI GTK TestRunner clear_fault":{"type":"method","name":"clear_fault","children":[],"call":[" raw_show_fault "]}," Test Unit UI GTK TestRunner raw_show_fault":{"type":"method","name":"raw_show_fault","children":[],"call":[" outer_detail_sub_panel queue_resize "," outer_detail_sub_panel "," fault_detail_label set_text "," fault_detail_label "]}," Test Unit UI GTK TestRunner show_fault":{"type":"method","name":"show_fault","children":[],"call":[" raw_show_fault ","fault long_display "]}," Test Unit UI GTK TestRunner add_fault":{"type":"method","name":"add_fault","children":[],"call":[" fault_list append_items "," fault_list ","item show ","FaultListItem  new "," test_progress_bar set_style "," red_style "," test_progress_bar ","@red ! "," fault_list append_FaultListItem  new s ","FaultListItem  new  show "]}," Test Unit UI GTK TestRunner reset_ui":{"type":"method","name":"reset_ui","children":[],"call":[" fault_list remove_items "," fault_list children "," fault_list "," error_count_label set_text "," error_count_label "," failure_count_label set_text "," failure_count_label "," assertion_count_label set_text "," assertion_count_label "," run_count_label set_text "," run_count_label "," test_progress_bar configure "," test_progress_bar "," test_progress_bar set_style "," green_style "]}," Test Unit UI GTK TestRunner stop":{"type":"method","name":"stop","children":[],"call":["Gtk  main_quit "]}," Test Unit UI GTK TestRunner start_ui":{"type":"method","name":"start_ui","children":[],"call":["@viewer join "," run_button child text= "," run_button child "," run_button ","@mediator run_suite "," loop ","@viewer run "]}," Test Unit UI GTK TestRunner run_test":{"type":"method","name":"run_test","children":[],"call":["@runner raise "]}," Test Unit UI GTK TestRunner attach_to_mediator":{"type":"method","name":"attach_to_mediator","children":[],"call":["@mediator add_listener "," method "," run_button signal_connect "," run_button "]}," Test Unit UI GTK TestRunner setup_mediator":{"type":"method","name":"setup_mediator","children":[],"call":[" suite_name_entry set_text "," suite_name_entry ","@suite name ","@suite kind_of? ","@suite to_s ","TestRunnerMediator  new "," @suite name _entry set_text "," @suite to_s _entry set_text "," @suite name _entry "," @suite to_s _entry "]}," Test Unit UI GTK TestRunner start":{"type":"method","name":"start","children":[],"call":[" start_ui "," attach_to_mediator "," setup_ui "," setup_mediator "]}," Test Unit UI GTK TestRunner initialize":{"type":"method","name":"initialize","children":[],"call":["@viewer join ","Gtk  main ","@runner run ","@runner join ","Thread  start ","Class  new ","Thread  current ","suite suite ","suite respond_to? ","Thread  current  run ","Thread  current  join "]}," Test Unit UI Fox FaultListItem initialize":{"type":"method","name":"initialize","children":[],"call":["fault short_display "]}," Test Unit UI Fox TestRunner create_entry":{"type":"method","name":"create_entry","children":[],"call":["entry disable ","FXTextField  new ","TEXTFIELD_NORMAL  | | ","TEXTFIELD_NORMAL  | ","FXTextField  new  disable "]}," Test Unit UI Fox TestRunner create_text":{"type":"method","name":"create_text","children":[],"call":["FXText  new ","TEXT_READONLY  | | ","TEXT_READONLY  | "]}," Test Unit UI Fox TestRunner create_detail_panel":{"type":"method","name":"create_detail_panel","children":[],"call":["FXHorizontalFrame  new ","LAYOUT_FILL_X  | | | ","LAYOUT_FILL_X  | | ","LAYOUT_FILL_X  | "]}," Test Unit UI Fox TestRunner create_fault_list":{"type":"method","name":"create_fault_list","children":[],"call":[" clear_fault "," show_fault ","sender retrieveItem fault ","sender retrieveItem ","sender currentItem ","sender retrieveItem selected? ","list connect ","FXList  new ","LIST_SINGLESELECT  | ","FXList  new  connect "]}," Test Unit UI Fox TestRunner create_list_panel":{"type":"method","name":"create_list_panel","children":[],"call":["FXHorizontalFrame  new ","LAYOUT_FILL_X  | | ","LAYOUT_FILL_X  | "]}," Test Unit UI Fox TestRunner create_label":{"type":"method","name":"create_label","children":[],"call":["FXLabel  new ","JUSTIFY_CENTER_X  | "]}," Test Unit UI Fox TestRunner create_info_panel":{"type":"method","name":"create_info_panel","children":[],"call":["FXMatrix  new ","MATRIX_BY_ROWS  | "]}," Test Unit UI Fox TestRunner create_progress_bar":{"type":"method","name":"create_progress_bar","children":[],"call":["FXProgressBar  new ","PROGRESSBAR_NORMAL  | "]}," Test Unit UI Fox TestRunner create_button":{"type":"method","name":"create_button","children":[],"call":["FXButton  new connect ","FXButton  new "]}," Test Unit UI Fox TestRunner create_suite_panel":{"type":"method","name":"create_suite_panel","children":[],"call":["FXHorizontalFrame  new ","LAYOUT_SIDE_LEFT  | "]}," Test Unit UI Fox TestRunner create_main_panel":{"type":"method","name":"create_main_panel","children":[],"call":["panel vSpacing= ","FXVerticalFrame  new ","LAYOUT_FILL_X  | ","FXVerticalFrame  new  vSpacing= "]}," Test Unit UI Fox TestRunner create_tooltip":{"type":"method","name":"create_tooltip","children":[],"call":["FXTooltip  new "]}," Test Unit UI Fox TestRunner create_window":{"type":"method","name":"create_window","children":[],"call":["FXMainWindow  new "]}," Test Unit UI Fox TestRunner create_application":{"type":"method","name":"create_application","children":[],"call":["app init ","FXApp  new ","FXApp  new  init "]}," Test Unit UI Fox TestRunner setup_ui":{"type":"method","name":"setup_ui","children":[],"call":[" create_text "," create_detail_panel "," create_fault_list "," create_list_panel "," create_label "," create_info_panel "," create_progress_bar "," create_button ","@mediator run_suite "," proc "," create_entry "," create_suite_panel "," create_main_panel "," create_window "," create_tooltip "," create_application "," create_ create_detail_panel  "," create_ create_list_panel  "," create_ create_suite_panel  "," create_ create_main_panel  "]}," Test Unit UI Fox TestRunner output_status":{"type":"method","name":"output_status","children":[],"call":["@status_entry repaint ","@status_entry text= "]}," Test Unit UI Fox TestRunner finished":{"type":"method","name":"finished","children":[],"call":[" output_status "]}," Test Unit UI Fox TestRunner test_started":{"type":"method","name":"test_started","children":[],"call":[" output_status "]}," Test Unit UI Fox TestRunner started":{"type":"method","name":"started","children":[],"call":[" output_status "]}," Test Unit UI Fox TestRunner result_changed":{"type":"method","name":"result_changed","children":[],"call":["@application flush ","@info_panel repaint ","@error_count_label text= ","result error_count to_s ","result error_count ","@failure_count_label text= ","result failure_count to_s ","result failure_count ","@assertion_count_label text= ","result assertion_count to_s ","result assertion_count ","@test_count_label text= ","result run_count to_s ","result run_count ","@test_progress_bar progress= "]}," Test Unit UI Fox TestRunner clear_fault":{"type":"method","name":"clear_fault","children":[],"call":[" raw_show_fault "]}," Test Unit UI Fox TestRunner raw_show_fault":{"type":"method","name":"raw_show_fault","children":[],"call":["@detail_text setText "]}," Test Unit UI Fox TestRunner show_fault":{"type":"method","name":"show_fault","children":[],"call":[" raw_show_fault ","fault long_display "]}," Test Unit UI Fox TestRunner add_fault":{"type":"method","name":"add_fault","children":[],"call":["@fault_list appendItem ","FaultListItem  new ","@test_progress_bar barColor= ","@red ! "]}," Test Unit UI Fox TestRunner reset_ui":{"type":"method","name":"reset_ui","children":[],"call":["@fault_list clearItems ","@error_count_label text= ","@failure_count_label text= ","@assertion_count_label text= ","@test_count_label text= ","@test_progress_bar progress= ","@test_progress_bar total= ","@test_progress_bar barColor= "]}," Test Unit UI Fox TestRunner stop":{"type":"method","name":"stop","children":[],"call":["@application exit "]}," Test Unit UI Fox TestRunner start_ui":{"type":"method","name":"start_ui","children":[],"call":["@application run ","@mediator run_suite ","@application addTimeout ","@window show ","@application create "]}," Test Unit UI Fox TestRunner attach_to_mediator":{"type":"method","name":"attach_to_mediator","children":[],"call":["@mediator add_listener "," method "]}," Test Unit UI Fox TestRunner setup_mediator":{"type":"method","name":"setup_mediator","children":[],"call":["@suite_name_entry text= ","@suite name ","@suite kind_of? ","@suite to_s ","TestRunnerMediator  new ","@@suite name _entry text= ","@@suite to_s _entry text= "]}," Test Unit UI Fox TestRunner start":{"type":"method","name":"start","children":[],"call":[" start_ui "," attach_to_mediator "," setup_mediator "," setup_ui "]}," Test Unit UI Fox TestRunner initialize":{"type":"method","name":"initialize","children":[],"call":["suite suite ","suite respond_to? "]}," Test Unit UI Console TestRunner output?":{"type":"method","name":"output?","children":[],"call":["level <= ","(or\n  (lvar :level)\n  (ivar :@current_output_level)) <= "]}," Test Unit UI Console TestRunner output_single":{"type":"method","name":"output_single","children":[],"call":["@io flush ","@io write "," output? ","@output flush ","@output write ","%s%s%s % ","@reset_color escape_sequence ","color escape_sequence ","something to_s each_line ","something to_s ","%s%s%s %  to_s each_line ","something to_s each_%s%s%s %  ","%s%s%s %  to_s "]}," Test Unit UI Console TestRunner output":{"type":"method","name":"output","children":[],"call":["@io flush ","@io puts "," output? ","@output puts "," output_single "]}," Test Unit UI Console TestRunner nl":{"type":"method","name":"nl","children":[],"call":[" output "]}," Test Unit UI Console TestRunner test_finished":{"type":"method","name":"test_finished","children":[],"call":[" nl "," output_single ","@color_scheme [] "," output_progress "," color "," output ",": (%f) % ","Time  now - ","Time  now "," output? ","(send\n  (ivar :@progress_mark_index) :+\n  (int 1)) % ","@progress_marks size ","@progress_mark_index + ","@progress_marks [] ","(send\n  (ivar :(send\n  (ivar :@progress_mark_index) :+\n  (int 1)) % ) :+\n  (int 1)) % ","(send\n  (ivar :@progress_@progress_marks [] _index) :+\n  (int 1)) % ","@progress_@progress_marks [] s size ","(send\n  (ivar :@progress_mark_index) :+\n  (int 1)) %  + ","@progress_@progress_marks [] _index + ","@progress_@progress_marks [] s [] "]}," Test Unit UI Console TestRunner test_started":{"type":"method","name":"test_started","children":[],"call":[" output_single ","name + ","Time  now "," indent ","\t * ","(send\n  (lvar :left_space) :-\n  (int 1)) / ","left_space - ","left_space - - ","name size "," indent size ","@progress_row_max - ","8 * ","name sub "," output? ","(send\n  (lvar :left_space) :-\n  (int 1)) max / ","(send\n  (lvar :left_space) :-\n  (int 1)) max ","test name sub ","test name ","test local_name ","(lvar :left_space) max / ","(lvar :left_space) max ","(send\n  (begin\n    (send\n      (lvar :left_used) :/\n      (lvar :tab_width))) :+\n  (int 1)) * ","(send\n  (lvar :left_used) :/\n  (lvar :tab_width)) + ","left_used / ","(send\n  (lvar :left_used) :%\n  (lvar :tab_width)) zero? ","left_used % ","tab_width * "," indent size + + ","separator size "," indent size + ","name sub  + ","test name sub  + ","test local_name  + ","(send\n  (lvar :left_space - - ) :-\n  (int 1)) / ","(send\n  (lvar :@progress_row_max - ) :-\n  (int 1)) / ","left_space - -  - ","@progress_row_max -  - ","left_space - -  - - ","@progress_row_max -  - - ","name sub  size ","test name sub  size ","test local_name  size ","name sub  sub ","test name sub  sub ","test local_name  sub ","(send\n  (lvar :left_space - - ) :-\n  (int 1)) max / ","(send\n  (lvar :@progress_row_max - ) :-\n  (int 1)) max / ","(send\n  (lvar :left_space - - ) :-\n  (int 1)) max ","(send\n  (lvar :@progress_row_max - ) :-\n  (int 1)) max ","test test name sub  sub ","test test local_name  sub ","test name sub  ","test test name sub  ","test test local_name  ","test local_name sub  ","test local_test name sub  ","test local_test local_name  ","(lvar :left_space - - ) max / ","(lvar :@progress_row_max - ) max / ","(lvar :left_space - - ) max ","(lvar :@progress_row_max - ) max ","(send\n  (begin\n    (send\n      (lvar : indent size + + ) :/\n      (lvar :tab_width))) :+\n  (int 1)) * ","(send\n  (lvar : indent size + + ) :/\n  (lvar :tab_width)) + "," indent size + +  / ","(send\n  (lvar : indent size + + ) :%\n  (lvar :tab_width)) zero? "," indent size + +  % "]}," Test Unit UI Console TestRunner finished":{"type":"method","name":"finished","children":[],"call":[" output "," nl ","%3d) %s % ","fault long_display ","index + ","@faults each_with_index "," result_color "," fault_color "," format_fault split "," format_fault "," output_single ","%3d)  % "," output? ! "," output? ","%g%% passed % ","100.0 * ","@n_successes / ","n_tests to_f ","n_tests zero? ","@result run_count "," output_fault ","@result run_count - ","@result pass_percentage ","throuputs join ","%.2f assertions/s % ","@result assertion_count / ","@result assertion_count ","%.2f tests/s % ","@result run_count / ","elapsed_time zero? "," output_statistics "," change_output_level "," output_faults ","@result run_count  to_f ","@result run_count -  to_f ","@result run_count  zero? ","@result run_count -  zero? ","@result 100.0 *  "]}," Test Unit UI Console TestRunner started":{"type":"method","name":"started","children":[],"call":[" output "," output_started "]}," Test Unit UI Console TestRunner add_fault":{"type":"method","name":"add_fault","children":[],"call":[" output_single ","fault single_character_display ","@faults << "," fault_color "," output_progress ","fault critical? ","fault is_a? "," output_progress_in_detail "," fault_marker_color "]}," Test Unit UI Console TestRunner start_mediator":{"type":"method","name":"start_mediator","children":[],"call":["@mediator run_suite "]}," Test Unit UI Console TestRunner attach_to_mediator":{"type":"method","name":"attach_to_mediator","children":[],"call":["@mediator add_listener "," method "]}," Test Unit UI Console TestRunner create_mediator":{"type":"method","name":"create_mediator","children":[],"call":["TestRunnerMediator  new "]}," Test Unit UI Console TestRunner setup_mediator":{"type":"method","name":"setup_mediator","children":[],"call":[" output ","@suite name ","@suite kind_of? ","@suite to_s "," create_mediator "," output_setup_end "]}," Test Unit UI Console TestRunner start":{"type":"method","name":"start","children":[],"call":[" start_mediator "," attach_to_mediator "," setup_mediator "]}," Test Unit UI Console TestRunner initialize":{"type":"method","name":"initialize","children":[],"call":["suite suite ","suite respond_to? ","Color  new ","COLOR_SCHEMES  [] "," guess_color_availability ","@use_color nil? ","@options [] "," guess_progress_row_max ","ColorScheme  default ","@show_detail_immediately nil? ","CodeSnippetFetcher  new ","@output tty? ","@reverse_output nil? "," guess_progress_style "," guess_output_level "," guess_color_availability  nil? ","@options []  nil? ","@output tty?  nil? "]}," Test Unit TestSuite ==":{"type":"method","name":"==","children":[],"call":["@tests == ","other tests ","@name == ","other name ","other kind_of? "," class "]}," Test Unit TestSuite to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Test Unit TestSuite empty?":{"type":"method","name":"empty?","children":[],"call":[" tests empty? "," tests "," size zero? "," size "]}," Test Unit TestSuite size":{"type":"method","name":"size","children":[],"call":["test size ","@tests each "]}," Test Unit TestSuite delete":{"type":"method","name":"delete","children":[],"call":["@tests delete "]}," Test Unit TestSuite <<":{"type":"method","name":"<<","children":[],"call":["@tests << "]}," Test Unit TestSuite run":{"type":"method","name":"run","children":[],"call":[" name ","test run ","@tests each "," run_shutdown "," run_startup ","test size ","@tests shift ","Time  now - ","Time  now ","test passed? "," run_test ","@tests shift  run ","@@tests shift s each ","@tests shift  size ","@@tests shift s shift ","@tests shift  passed? "," run_@tests shift  "]}," Test Unit TestSuite initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Test Unit TestResult error_count":{"type":"method","name":"error_count","children":[],"call":["@errors size "]}," Test Unit TestResult failure_count":{"type":"method","name":"failure_count","children":[],"call":["@failures size "]}," Test Unit TestResult passed?":{"type":"method","name":"passed?","children":[],"call":["@errors empty? ","@failures empty? "," send ! "," send ","@problem_checkers all? "," __send__ ! "," __send__ "]}," Test Unit TestResult to_s":{"type":"method","name":"to_s","children":[],"call":[" error_count "," failure_count "," assertion_count "," run_count "," summary "]}," Test Unit TestResult add_assertion":{"type":"method","name":"add_assertion","children":[],"call":[" notify_listeners "," notify_changed "]}," Test Unit TestResult add_error":{"type":"method","name":"add_error","children":[],"call":[" notify_listeners ","@errors << "]}," Test Unit TestResult add_failure":{"type":"method","name":"add_failure","children":[],"call":[" notify_listeners ","@failures << "]}," Test Unit TestResult add_run":{"type":"method","name":"add_run","children":[],"call":[" notify_listeners "," notify_changed "]}," Test Unit TestResult initialize":{"type":"method","name":"initialize","children":[],"call":["Array  new "," initialize_containers "]}," Test Unit TestCase ==":{"type":"method","name":"==","children":[],"call":[" class == ","other class "," class ","@method_name == ","other method_name ","other kind_of? "," data_label == ","other data_label "," data_label "]}," Test Unit TestCase to_s":{"type":"method","name":"to_s","children":[],"call":[" name "]}," Test Unit TestCase name":{"type":"method","name":"name","children":[],"call":[" class name "," class "," data_label ","@internal_data have_test_data? "," local_name "]}," Test Unit TestCase add_error":{"type":"method","name":"add_error","children":[],"call":["@_result add_error ","Error  new "," name "]}," Test Unit TestCase add_failure":{"type":"method","name":"add_failure","children":[],"call":["@_result add_failure ","Failure  new "," filter_backtrace "," name "]}," Test Unit TestCase add_assertion":{"type":"method","name":"add_assertion","children":[],"call":["@_result add_assertion "," current_result add_assertion "," current_result "]}," Test Unit TestCase size":{"type":"method","name":"size","children":[],"call":[]}," Test Unit TestCase passed?":{"type":"method","name":"passed?","children":[],"call":["@internal_data passed? "]}," Test Unit TestCase default_test":{"type":"method","name":"default_test","children":[],"call":[" flunk "]}," Test Unit TestCase teardown":{"type":"method","name":"teardown","children":[],"call":[]}," Test Unit TestCase setup":{"type":"method","name":"setup","children":[],"call":[]}," Test Unit TestCase run":{"type":"method","name":"run","children":[],"call":[" name ","result add_run "," add_error "," raise ","PASSTHROUGH_EXCEPTIONS  include? ","$! class "," add_failure ","e backtrace ","e message "," teardown "," __send__ "," setup "," handle_exception "," run_teardown "," run_setup "," run_test ","@internal_data test_finished ","@internal_data interrupted "," add_pass "," run_cleanup ","@internal_data test_started "," throw "," catch "]}," Test Unit TestCase suite":{"type":"method","name":"suite","children":[],"call":["suite << "," new "," catch ","suite empty? ","tests sort each ","tests sort ","TestSuite  new "," name ","method_name !~ ","method_names delete_if ","name to_s "," public_instance_methods collect "," public_instance_methods "," collect_test_names each "," collect_test_names ","suite_creator create ","TestSuiteCreator  new ","TestSuite  new  << ","TestSuite  new  empty? ","TestSuite  new _creator create ","TestSuiteCreator  new  create "]}," Test Unit TestCase initialize":{"type":"method","name":"initialize","children":[],"call":[" throw "," method arity == "," method arity "," method "," respond_to? "," method arity > "," class != ","test_method owner "," class ","test_method owner class != ","test_method owner class ","test_method respond_to? ","test_method arity > ","test_method arity ","owner class != ","owner class ","Util MethodOwnerFinder  find ","InternalData  new "," method  owner ","test_method Util MethodOwnerFinder  find  "," method  owner class != ","test_method Util MethodOwnerFinder  find  class != "," method  owner class ","test_method Util MethodOwnerFinder  find  class "," method  respond_to? "," method  arity > "," method  arity ","Util MethodOwnerFinder  find  class != ","Util MethodOwnerFinder  find  class "]}," Test Unit Failure to_s":{"type":"method","name":"to_s","children":[],"call":[" long_display "]}," Test Unit Failure long_display":{"type":"method","name":"long_display","children":[],"call":[" location join "," location "," location [] sub "," location [] "," location size == "," location size "," label "]}," Test Unit Failure short_display":{"type":"method","name":"short_display","children":[],"call":["@message split [] ","@message split "]}," Test Unit Failure single_character_display":{"type":"method","name":"single_character_display","children":[],"call":[]}," Test Unit Failure initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," Test Unit Error to_s":{"type":"method","name":"to_s","children":[],"call":[" long_display "]}," Test Unit Error long_display":{"type":"method","name":"long_display","children":[],"call":[" message "," filter_backtrace join "," filter_backtrace ","@exception backtrace "," label "," backtrace join "," backtrace "," location join "," location "," filter_ filter_backtrace join  join "," filter_ filter_backtrace join  ","@exception  filter_backtrace join  ","  filter_backtrace join  join ","  filter_backtrace join  "]}," Test Unit Error short_display":{"type":"method","name":"short_display","children":[],"call":[" message split [] "," message split "," message "]}," Test Unit Error message":{"type":"method","name":"message","children":[],"call":["@exception message ","@exception class name ","@exception class "]}," Test Unit Error single_character_display":{"type":"method","name":"single_character_display","children":[],"call":[]}," Test Unit Error initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," Test Unit Collector sort":{"type":"method","name":"sort","children":[],"call":["s name ","suites sort_by ","suite to_s ","suite name ","suite priority "]}," Test Unit Collector include?":{"type":"method","name":"include?","children":[],"call":["result ! ","result nil? ","filter [] ","@filters each ","@filters empty? ","filter [] == ","filter []  ! ","filter []  nil? "]}," Test Unit Collector add_suite":{"type":"method","name":"add_suite","children":[],"call":["destination << ","suite size == ","suite size ","suite delete ","to_delete each "," include? ! "," include? ","suite tests find_all ","suite tests ","suite empty? ","test is_a? ","suite delete_tests "]}," Test Unit Collector filter=":{"type":"method","name":"filter=","children":[],"call":[]}," Test Unit Collector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Test Unit Collector ObjectSpace collect":{"type":"method","name":"collect","children":[],"call":["suite << "," sort each "," sort "," add_suite ","klass suite ","Test Unit TestCase  > ","@source each_object ","TestSuite  new "," adjust_ractor_tests ","TestSuite  new  << "," add_TestSuite  new  ","klass TestSuite  new  "]}," Test Unit Collector ObjectSpace initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Test Unit Collector Dir realdir":{"type":"method","name":"realdir","children":[],"call":["@file join "]}," Test Unit Collector Dir collect_file":{"type":"method","name":"collect_file","children":[],"call":["$: delete_at ","$: rindex "," add_suite ","t suite "," find_test_cases each "," find_test_cases "," require ","@req require ","$: unshift ","@file dirname ","@file expand_path ","@file @file dirname name "]}," Test Unit Collector Dir recursive_collect":{"type":"method","name":"recursive_collect","children":[],"call":["suite << "," sort each "," sort ","TestSuite  new ","@file basename "," collect_file ","pat =~ ","@exclude any? ","@exclude empty? ! ","@exclude empty? ","@pattern any? ","@pattern empty? ! ","@pattern empty? ","sub_suites << ","sub_suite empty? "," recursive_collect ","@file directory? "," realdir ","@file join ","e == ","@dir entries each ","@dir entries ","name == ","TestSuite  new  << ","sub_TestSuite  new s << "," recursive_collect s << ","sub_TestSuite  new  empty? "," recursive_collect  empty? "]}," Test Unit Collector Dir find_test_cases":{"type":"method","name":"find_test_cases","children":[],"call":["ignore concat ","cases << ","ignore include? ! ","ignore include? ","c < ","@object_space each_object "]}," Test Unit Collector Dir collect":{"type":"method","name":"collect","children":[],"call":["$: delete_at ","$: rindex ","suite << "," sort each "," sort ","TestSuite  new ","from join ","suites << ","suite tests empty? ","suite tests "," recursive_collect "," find_test_cases ","from each ","from first ","from size == ","from size ","from empty? ","$: push "," adjust_ractor_tests ","TestSuite  new  << "," recursive_collect  << ","TestSuite  new s << "," recursive_collect s << ","TestSuite  new  tests empty? "," recursive_collect  tests empty? ","TestSuite  new  tests "," recursive_collect  tests "]}," Test Unit Collector Dir initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Test Unit AutoRunner run":{"type":"method","name":"run","children":[],"call":["result run passed? ","result run ","Dir  chdir ","@runner [] ","@collector [] ","runner run passed? ","runner run ","runner nil? ","suite nil? ","@runner_options [] ","@runner_options [] concat ","suite empty? "," change_work_directory "," class need_auto_run= "," class ","r run ","r process_args ","r prepare ","r base= "," new "," standalone? ","@runner_options [] << ","StopOnFailureListener  new ","@runner []  run passed? "," new esult  new un passed? ","@runner []  run "," new esult  new un ","Di new   chdi new  ","@@runner []  [] ","@ new unne new  [] ","@collecto new  [] "," new unne new   new un passed? "," new unne new   new un ","@runner []  nil? "," new unne new  nil? ","@collector []  nil? ","@@runner [] _options [] ","@ new unne new _options [] ","@@runner [] _options [] concat ","@ new unne new _options [] concat ","@collector []  empty? "," change_wo new k_di new ecto new y "," class need_auto_ new un= "," new   new un "," new  p new ocess_a new gs "," new  p new epa new e "," new  base= ","@@runner [] _options [] << ","@ new unne new _options [] << ","StopOnFailu new eListene new   new "]}," Test Unit AutoRunner keyword_display":{"type":"method","name":"keyword_display","children":[],"call":["(send\n  (lvar :list) :collect) join ","e sub ","list collect ","list sort! ","Array  === ","e to_s ","array collect ","(send\n  (send\n    (send\n      (block\n        (send\n          (lvar :keywords) :collect)\n        (args\n          (arg :keyword)\n          (arg :_))\n        (send\n          (lvar :keyword) :to_s)) :uniq) :sort) :collect) join ","keyword sub ","(send\n  (lvar :keywords) :collect) uniq sort collect ","(send\n  (lvar :keywords) :collect) uniq sort ","(send\n  (lvar :keywords) :collect) uniq ","keyword to_s ","keywords collect ","(send\n  (lvar :keywords) :collect) join ","keyword [] == ","keywords [] [] ","keywords [] ","i + ","keyword [] ","i < ","keywords size - ","keywords size ","i - ","i > ","(send\n  (send\n    (send\n      (block\n        (send\n          (lvar :(send\n  (lvar :keywords) :collect) uniq sort ) :collect)\n        (args\n          (arg :keyword)\n          (arg :_))\n        (send\n          (lvar :keyword) :to_s)) :uniq) :sort) :collect) join ","(send\n  (lvar :(send\n  (lvar :keywords) :collect) uniq sort ) :collect) uniq sort collect ","(send\n  (lvar :(send\n  (lvar :keywords) :collect) uniq sort ) :collect) uniq sort ","(send\n  (lvar :(send\n  (lvar :keywords) :collect) uniq sort ) :collect) uniq ","(send\n  (lvar :keywords) :collect) uniq sort  collect ","(send\n  (lvar :(send\n  (lvar :keywords) :collect) uniq sort ) :collect) join ","(send\n  (lvar :keywords) :collect) uniq sort  [] [] ","(send\n  (lvar :keywords) :collect) uniq sort  [] ","(send\n  (lvar :keywords) :collect) uniq sort  size - ","(send\n  (lvar :keywords) :collect) uniq sort  size "]}," Test Unit AutoRunner options":{"type":"method","name":"options","children":[],"call":["o on_tail ","RUNNERS  [] "," warn "," exit "," puts ","o on ","o terminate ","( + + ","( + "," keyword_display ","$LOAD_PATH concat ","dirs split ","@filters << ","n == ","t class name ","t class "," proc ","n =~ ","Regexp  new ","t method_name ","@exclude << ","@pattern << ","@to_run concat ","o banner << ","o banner ","o banner= ","OptionParser  new ","option_builder call ","ADDITIONAL_OPTIONS  each ","Priority Checker  new need_to_run? ","Priority Checker  new ","Proc  new "," class runner "," class "," load_config ","ColorScheme  all ","@filters size > ","@filters size ","Priority  disable ","Priority  enable ","TestCase  test_order= ","Priority  default= ","Priority  available_values ","@filters == ","n != ","assertion_message_class max_diff_target_string_size= ","assertion_message_class max_diff_target_string_size ","Shows diff if both expected result string size and  + + ","Shows diff if both expected result string size and  + ","name === ","test_name_without_class_name != ","test method_name ","test name gsub ","test name "," lambda ","test class test_defined? ","test class ","line to_i ","line nil? ","location split ","location to_i ","matcher match? ","AttributeMatcher  new "," match_test_case_name ! "," match_test_case_name "," add_location_filter "," add_test_path ","paths each ","@default_test_paths << ","test local_name ","1 to_i "," prepare_name "," match_test_name ! "," match_test_name ","AssertionFailedError  debug_on_failure= ","AssertionFailedError  debug_on_failure? ","t class  prepare_name  ","t method_ prepare_name  "," prepare_name  === ","test name gsub  != ","test_ prepare_name _without_class_ prepare_name  != ","test method_ prepare_name  ","test  prepare_name  gsub ","test  prepare_name  ","line to_i  to_i ","location to_i  to_i ","1 to_i  to_i ","line to_i  nil? ","location to_i  nil? ","1 to_i  nil? ","AttributeMatcher  new  match? "," match_test_case_ prepare_name  ! "," match_test_case_ prepare_name  ","test local_ prepare_name  "," prepare_ prepare_name  "," match_test_ prepare_name  ! "," match_test_ prepare_name  "]}," Test Unit AutoRunner process_args":{"type":"method","name":"process_args","children":[],"call":["@to_run empty? ! ","@to_run empty? ","@filters << "," proc ","@filters empty? "," abort "," puts "," options ","@to_run << "," options order! "," exit ","@default_arguments concat ","@default_arguments dup ","args unshift ","args dup "," add_test_path ","@@default_arguments dup  concat ","@@default_arguments dup  dup ","args dup  unshift ","args dup  dup "]}," Test Unit AutoRunner initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? ","COLLECTORS  [] ","RUNNERS  [] ","Unit  run= "," default_collector "," default_runner "," load_config ","File  exist? ","ColorScheme  default ","File  expand_path "," load_global_config "]}," Test Unit AutoRunner standalone?":{"type":"method","name":"standalone?","children":[],"call":["klass < ","ObjectSpace  each_object ","-e == "]}," Test Unit Assertions AssertionMessage to_s":{"type":"method","name":"to_s","children":[],"call":["message_parts join ","message_parts << ","tail empty? "," template result "," convert ","@parameters collect "," template "," add_period ","head empty? ","@head to_s ","head to_s ","head call ","head respond_to? ","head empty? ! "," user_message "," template result  empty? ","@head to_s  empty? ","head to_s  empty? ","head call  empty? "," user_message  empty? ","@@head to_s  to_s ","@head to_s  to_s ","@head call  to_s ","@ user_message  to_s ","head to_s  to_s ","head call  to_s "," user_message  to_s ","@head to_s  call ","head to_s  call ","head call  call "," user_message  call ","@head to_s  respond_to? ","head to_s  respond_to? ","head call  respond_to? "," user_message  respond_to? ","@head to_s  empty? ! ","head to_s  empty? ! ","head call  empty? ! "," user_message  empty? ! "]}," Test Unit Assertions AssertionMessage add_period":{"type":"method","name":"add_period","children":[],"call":["string + ","string =~ "]}," Test Unit Assertions AssertionMessage template":{"type":"method","name":"template","children":[],"call":["Template  create "]}," Test Unit Assertions AssertionMessage convert":{"type":"method","name":"convert","children":[],"call":["object inspect ","PP  pp chomp ","PP  pp "," class use_pp= "," class "," require "," class use_pp ","(str \"Class: <\") chop "," filter_backtrace join "," filter_backtrace ","object backtrace "," convert ","object message ","object class "," class convert "," use_pp= "," use_pp ","Util BacktraceFilter  filter_backtrace join ","Util BacktraceFilter  filter_backtrace ","HashInspector  new ","HashInspector  target? ","inspector inspect ","Inspector  new ","AssertExceptionHelper WrappedException  new ","object is_a? ","String  new ","AssertExceptionHelper WrappedException  new  inspect ","AssertExceptionHelper WrappedException  new  backtrace ","AssertExceptionHelper WrappedException  new  message ","AssertExceptionHelper WrappedException  new  class ","Inspector  new  inspect ","AssertExceptionHelper WrappedException  new  is_a? "]}," Test Unit Assertions AssertionMessage initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Test Unit Assertions AssertionMessage literal":{"type":"method","name":"literal","children":[],"call":["Literal  new "]}," Test Unit Assertions AssertionMessage Template result":{"type":"method","name":"result","children":[],"call":["(send\n  (ivar :@parts) :collect) join ","e gsub ","params shift ","e == ","@parts collect ","parameters dup "," raise ","parameters size != "," count ","parameters size ","expanded_template << ","part gsub "," encoding_safe_concat ","part == ","@parts each "," concatenatable ","expanded_template encoding ","Object  const_defined? ","parameters dup  shift ","params shift s shift ","params shift eters dup ","params shift eters size != ","params shift eters size "]}," Test Unit Assertions AssertionMessage Template initialize":{"type":"method","name":"initialize","children":[],"call":["(send\n  (lvar :parts) :find_all) size ","e == ","parts find_all "]}," Test Unit Assertions AssertionMessage Template create":{"type":"method","name":"create","children":[],"call":[]}," Test Unit Assertions AssertionMessage Literal inspect":{"type":"method","name":"inspect","children":[],"call":["@value to_s "]}," Test Unit Assertions AssertionMessage Literal initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Test Unit Assertions use_pp=":{"type":"method","name":"use_pp=","children":[],"call":[]}," Test Unit Assertions add_assertion":{"type":"method","name":"add_assertion","children":[],"call":[]}," Test Unit Assertions _wrap_assertion":{"type":"method","name":"_wrap_assertion","children":[],"call":[" add_assertion ","block call "]}," Test Unit Assertions build_message":{"type":"method","name":"build_message","children":[],"call":["AssertionMessage  new ","template chomp "]}," Test Unit Assertions assert_send":{"type":"method","name":"assert_send","children":[],"call":["send_array [] __send__ ","send_array [] "," assert_block "," build_message ","AssertionMessage  literal ","send_array [] to_s "," assert ","send_array size >= ","send_array size "," assert_instance_of "," _wrap_assertion ","receiver __send__ ","AssertionMessage  delayed_literal ","message_name to_s "," assert_operator ","assert_send requires at least a receiver  + ","assert_send requires an array  + "]}," Test Unit Assertions assert_in_delta":{"type":"method","name":"assert_in_delta","children":[],"call":["(send\n  (send\n    (lvar :expected_float) :to_f) :-\n  (send\n    (lvar :actual_float) :to_f)) abs <= ","delta to_f ","(send\n  (send\n    (lvar :expected_float) :to_f) :-\n  (send\n    (lvar :actual_float) :to_f)) abs ","expected_float to_f - ","actual_float to_f ","expected_float to_f "," assert_block "," build_message "," assert_operator "," assert_respond_to ","(pair\n  (lvar :expected_float)\n  (str \"first float\")) each "," _wrap_assertion "," _assert_in_delta_message "," _assert_in_delta_validate_arguments ","(send\n  (lvar :normalized_expected) :-\n  (lvar :normalized_actual)) abs <= ","(send\n  (lvar :normalized_expected) :-\n  (lvar :normalized_actual)) abs ","normalized_expected - "," raise ","delta >= ","(send\n  (lvar :expected_float) :-\n  (lvar :actual_float)) abs ","expected_float - ","(send\n  (lvar :normalized_expected) :-\n  (lvar :actual_float to_f )) abs <= ","(send\n  (lvar :expected_float to_f ) :-\n  (lvar :normalized_actual)) abs <= ","(send\n  (lvar :normalized_expected) :-\n  (lvar :actual_float to_f )) abs ","(send\n  (lvar :expected_float to_f ) :-\n  (lvar :normalized_actual)) abs ","expected_float to_f  - "]}," Test Unit Assertions assert_nothing_thrown":{"type":"method","name":"assert_nothing_thrown","children":[],"call":[" assert "," flunk "," build_message ","1 intern "," raise ","UncaughtThrow  [] !~ ","error message ","UncaughtThrow  [] ","error class ","proc call "," block_given? "," _wrap_assertion ","tag [] intern ","tag [] ","tag [] == ","UncaughtThrow  [] =~ ","AssertionMessage  normalize_tag ","tag nil? ","extractor extract_tag ","ThrowTagExtractor  new ","tag [] intern  [] intern ","AssertionMessage  normalize_tag  [] intern ","extractor extract_tag  [] intern ","tag [] intern  [] ","AssertionMessage  normalize_tag  [] ","extractor extract_tag  [] ","tag [] intern  [] == ","AssertionMessage  normalize_tag  [] == ","extractor extract_tag  [] == ","AssertionMessage  normalize_tag [] intern  ","AssertionMessage  normalize_AssertionMessage  normalize_tag  ","AssertionMessage  normalize_extractor extract_tag  ","tag [] intern  nil? ","AssertionMessage  normalize_tag  nil? ","extractor extract_tag  nil? ","extractor extract_tag [] intern  ","extractor extract_AssertionMessage  normalize_tag  ","extractor extract_extractor extract_tag  ","ThrowTagExtractor  new  extract_tag "]}," Test Unit Assertions assert_throws":{"type":"method","name":"assert_throws","children":[],"call":[" flunk "," build_message ","1 intern "," raise ","UncaughtThrow  [] !~ ","error message ","UncaughtThrow  [] ","error class "," assert_block ","proc call "," catch "," block_given? "," assert_instance_of "," _wrap_assertion ","<?> expected to be thrown but\n + ","tag [] intern ","tag [] ","tag [] == ","UncaughtThrow  [] =~ "," assert_throw ","tag [] intern  [] intern ","tag [] intern  [] ","tag [] intern  [] == "]}," Test Unit Assertions assert_no_match":{"type":"method","name":"assert_no_match","children":[],"call":["regexp !~ "," assert_block "," build_message "," assert_instance_of "," _wrap_assertion "," assert_not_match ","The first argument to assert_no_match  + "]}," Test Unit Assertions assert_not_nil":{"type":"method","name":"assert_not_nil","children":[],"call":["object nil? ! ","object nil? "," assert_block "," build_message "]}," Test Unit Assertions assert_not_equal":{"type":"method","name":"assert_not_equal","children":[],"call":["expected != "," assert_block "," build_message "]}," Test Unit Assertions assert_not_same":{"type":"method","name":"assert_not_same","children":[],"call":["actual equal? ! ","actual equal? "," assert_block "," build_message ","actual __id__ ","expected __id__ "]}," Test Unit Assertions flunk":{"type":"method","name":"flunk","children":[],"call":[" assert_block "," build_message "]}," Test Unit Assertions assert_nothing_raised":{"type":"method","name":"assert_nothing_raised","children":[],"call":[" raise "," assert_block "," build_message "," _expected_exception? ","e instance_of? ! ","e instance_of? ","args empty? "," _check_exception_class ","args pop ","Module  === ","args last "," _wrap_assertion ","assert_exception_helper expected? ","AssertExceptionHelper  new ","args last is_a? "," build_args pop  ","AssertExceptionHelper  new  expected? "]}," Test Unit Assertions assert_operator":{"type":"method","name":"assert_operator","children":[],"call":["object1 __send__ "," assert_block "," build_message ","AssertionMessage  literal ","operator respond_to? ","operator kind_of? "," _wrap_assertion "]}," Test Unit Assertions assert_same":{"type":"method","name":"assert_same","children":[],"call":["actual equal? "," assert_block "," build_message ","actual __id__ ","expected __id__ "]}," Test Unit Assertions assert_match":{"type":"method","name":"assert_match","children":[],"call":["string =~ "," assert_block "," build_message ","Regexp  new ","Regexp  escape "," _wrap_assertion ","pattern =~ ","pattern is_a? ","Regexp  new  =~ ","Regexp  new  is_a? "]}," Test Unit Assertions assert_respond_to":{"type":"method","name":"assert_respond_to","children":[],"call":["object respond_to? "," assert_block "," build_message ","object class ","method respond_to? ","method kind_of? "," _wrap_assertion ","<?>.respond_to\\?(?) expected\n + ","<?>.kind_of\\?(Symbol) or\n + "]}," Test Unit Assertions assert_kind_of":{"type":"method","name":"assert_kind_of","children":[],"call":["object kind_of? "," assert_block "," build_message ","object class "," assert ","klass kind_of? "," _wrap_assertion ","klasses any? ","<?> expected to be kind_of\\?\n + + ","<?> expected to be kind_of\\?\n + ","AssertionMessage  maybe_container ","k kind_of? ","klasses all? ","The first parameter to assert_kind_of should be  + ","klass is_a? ","<?> was expected to be kind_of\\?\n + + ","<?> was expected to be kind_of\\?\n + "]}," Test Unit Assertions assert_nil":{"type":"method","name":"assert_nil","children":[],"call":[" assert_equal ","object nil? "," assert_block "," build_message "]}," Test Unit Assertions assert_instance_of":{"type":"method","name":"assert_instance_of","children":[],"call":["object instance_of? "," assert_block "," build_message ","object class "," assert_equal ","klass class "," _wrap_assertion ","klasses any? ","AssertionMessage  maybe_container ","klass is_a? ","k is_a? ","klasses all? ","The first parameter to assert_instance_of should be  + "]}," Test Unit Assertions assert_raises":{"type":"method","name":"assert_raises","children":[],"call":[" assert_raise "]}," Test Unit Assertions assert_raise":{"type":"method","name":"assert_raise","children":[],"call":[" _expected_exception? "," assert_block "," build_message ","args first ","args size == ","args size "," _check_exception_class ","args pop ","Module  === ","args last "," _wrap_assertion "," _assert_raise ","assert_exception_helper expected? ","expected == ","assert_exception_helper expected_exceptions ","Proc  new "," raise "," _set_failed_information ","AssertionMessage  delayed_diff "," _args first _exception? "," _assert_exception_helper expected_exceptions _exception? "," build_args pop  ","assert_exception_helper args first ? ","assert_exception_helper assert_exception_helper expected_exceptions ? ","args first  == ","assert_exception_helper expected_exceptions  == ","assert_exception_helper args first _exceptions ","assert_exception_helper assert_exception_helper expected_exceptions _exceptions ","AssertionMessage  delayed_AssertionMessage  delayed_diff  "]}," Test Unit Assertions _expected_exception?":{"type":"method","name":"_expected_exception?","children":[],"call":["actual_exception is_a? ","modules any? ","exceptions include? ","actual_exception class "]}," Test Unit Assertions _check_exception_class":{"type":"method","name":"_check_exception_class","children":[],"call":[" assert ","Exception  >= ","klass instance_of? ","args partition "]}," Test Unit Assertions assert_equal":{"type":"method","name":"assert_equal","children":[],"call":["expected == "," assert_block "," build_message ","(str \"^[-+]\") !~ ","Diff  readable ","AssertionMessage  convert ","actual is_a? ! ","actual is_a? ","expected is_a? ! ","expected is_a? ","AssertionMessage  delayed_literal ","AssertionMessage  delayed_diff "," raise ","failure user_message= ","failure inspected_actual= ","failure inspected_expected= ","failure actual= ","failure expected= ","actual encoding name ","actual encoding ","expected encoding name ","expected encoding ","expected encoding != ","actual respond_to? ","expected respond_to? "," _set_failed_information ","AssertionMessage  convert  == ","AssertionMessage  convert  is_a? ! ","AssertionMessage  convert  is_a? ","AssertionMessage  delayed_Diff  readable  ","AssertionMessage  delayed_AssertionMessage  delayed_diff  ","failure inspected_AssertionMessage  convert = ","failure AssertionMessage  convert = ","AssertionMessage  convert  encoding name ","AssertionMessage  convert  encoding ","AssertionMessage  convert  encoding != ","AssertionMessage  convert  respond_to? "]}," Test Unit Assertions assert":{"type":"method","name":"assert","children":[],"call":[" assert_block "," build_message "," block_given? ! "," block_given? "," _wrap_assertion "," raise "," filter_backtrace "," caller ","error_message << ","message class ","message inspect "," assert ","pa yield ","AssertionMessage  delayed_literal ","pa message_proc ","PowerAssert  start "," __callee__ ","object != ","NOT_SPECIFIED  equal? ! ","NOT_SPECIFIED  equal? "]}," Test Unit Assertions assert_block":{"type":"method","name":"assert_block","children":[],"call":[" raise ","AssertionFailedError  new ","message to_s "," ! "," _wrap_assertion ","options []= ","message user_message ","message respond_to? "]}," Test Unit UI TestRunnerMediator measure_time":{"type":"method","name":"measure_time","children":[],"call":["Time  now - ","Time  now "]}," Test Unit UI TestRunner initialize":{"type":"method","name":"initialize","children":[],"call":["suite suite ","suite respond_to? ","@options [] "]}," Test Unit UI Emacs TestRunner format_fault_error":{"type":"method","name":"format_fault_error","children":[],"call":["result << ","error backtrace join ","error backtrace ","error message ","error test_name ","error label "]}," Test Unit UI Emacs TestRunner format_fault_failure":{"type":"method","name":"format_fault_failure","children":[],"call":["result << ","failure message ","failure test_name ","failure label ","\n + ","failure location join ","failure location ","location sub ","failure location [] ","failure location size == ","failure location size ","failure failure location []  join ","failure failure location []  ","failure location []  sub ","failure failure location []  [] ","failure failure location []  size == ","failure failure location []  size "]}," Test Unit UI Emacs TestRunner format_fault":{"type":"method","name":"format_fault","children":[],"call":[" send "," respond_to? ","fault label downcase ","fault label ","fault respond_to? "," __send__ "]}," Test Unit UI Emacs TestRunner output_started":{"type":"method","name":"output_started","children":[],"call":[]}," Test Unit UI Emacs TestRunner output_setup_end":{"type":"method","name":"output_setup_end","children":[],"call":[]}," Test Unit UI Console TestRunner guess_color_availability":{"type":"method","name":"guess_color_availability","children":[],"call":["ENV  [] == ","ENV  [] ","term == ","@output tty? "," ruby_2_0_or_later? "," windows? ","ENV  []  == "]}," Test Unit UI Console TestRunner result_color":{"type":"method","name":"result_color","children":[],"call":["@color_scheme [] ","@result failure_count > ","@result failure_count ","@result error_count > ","@result error_count ","@result notification_count > ","@result notification_count ","@result omission_count > ","@result omission_count ","@result pending_count > ","@result pending_count ","@result passed? "," color ","@result status "]}," Test Unit UI Console TestRunner fault_color":{"type":"method","name":"fault_color","children":[],"call":["@color_scheme [] ","fault class name split last downcase ","fault class name split last ","fault class name split ","fault class name ","fault class "," color "," fault_class_color "," fault_class_color_name "]}," Test Unit UI Console TestRunner format_fault":{"type":"method","name":"format_fault","children":[],"call":["fault long_display "]}," Test Unit UI Console TestRunner output_started":{"type":"method","name":"output_started","children":[],"call":[" output "]}," Test Unit UI Console TestRunner output_setup_end":{"type":"method","name":"output_setup_end","children":[],"call":[" output ","@suite name ","@suite kind_of? ","@suite to_s "]}," Test Unit TestSuite handle_exception":{"type":"method","name":"handle_exception","children":[],"call":["result add_error ","Error  new ","@test_case name "]}," Test Unit TestSuite run_shutdown":{"type":"method","name":"run_shutdown","children":[],"call":[" raise "," handle_exception ","@test_case shutdown ","@test_case respond_to? ! ","@test_case respond_to? ","@test_case nil? "]}," Test Unit TestSuite run_startup":{"type":"method","name":"run_startup","children":[],"call":[" raise "," handle_exception ","@test_case startup ","@test_case respond_to? ! ","@test_case respond_to? ","@test_case nil? "]}," Test Unit TestResult notify_fault":{"type":"method","name":"notify_fault","children":[],"call":[" notify_listeners ","@faults << "]}," Test Unit TestResult notify_changed":{"type":"method","name":"notify_changed","children":[],"call":[" notify_listeners "]}," Test Unit TestResult summary":{"type":"method","name":"summary","children":[],"call":["(dstr\n  (begin\n    (send nil :run_count))\n  (str \" tests\")) join "," send ","@summary_generators collect "," assertion_count "," run_count "," __send__ "]}," Test Unit NullResultContainerInitializer initialize_containers":{"type":"method","name":"initialize_containers","children":[],"call":[]}," Test Unit TestCase problem_occurred":{"type":"method","name":"problem_occurred","children":[],"call":["@internal_data problem_occurred "]}," Test Unit TestCase handle_exception":{"type":"method","name":"handle_exception","children":[],"call":[" send "," class exception_handlers each "," class exception_handlers "," class ","handler call ","handler respond_to? "," __send__ "]}," Test Unit TestCase current_result":{"type":"method","name":"current_result","children":[],"call":[]}," Test Unit TestCase interrupted?":{"type":"method","name":"interrupted?","children":[],"call":["@internal_data interrupted? "]}," Test Unit TestCase inherited":{"type":"method","name":"inherited","children":[],"call":["DESCENDANTS  << "," require "]}," Test Unit Priority priority_teardown":{"type":"method","name":"priority_teardown","children":[],"call":["Checker  new teardown ","Checker  new ","Priority  enabled? "]}," Test Unit Priority priority_setup":{"type":"method","name":"priority_setup","children":[],"call":["Checker  new setup ","Checker  new ","Priority  enabled? "]}," Test Unit Priority ClassMethods priority":{"type":"method","name":"priority","children":[],"call":[" attribute "," raise ","Checker  have_priority? "]}," Test Unit Priority Checker escaped_method_name":{"type":"method","name":"escaped_method_name","children":[],"call":["@method_name to_s gsub ","@method_name to_s ","@test method_name to_s gsub ","@test method_name to_s ","@test method_name "," escape_name "]}," Test Unit Priority Checker passed_file":{"type":"method","name":"passed_file","children":[],"call":["File  join "," result_dir "]}," Test Unit Priority Checker result_dir":{"type":"method","name":"result_dir","children":[],"call":[" raise ","parent_directories join ","FileUtils  mkdir_p ","File  expand_path ","File  join ","parent_directories each ","parent_directories << ","Process  uid to_s ","Process  uid ","Dir  tmpdir ","Process  respond_to? ","Dir  pwd ","File  dirname ","@test method_name to_s ","@test method_name ","@test class name ","@test class "," escaped_method_name "," escape_class_name ","parent_File  expand_path ectories join ","FileUtils  mkFile  expand_path _p ","parent_File  expand_path ectories each ","parent_File  expand_path ectories << ","Dir  tmpFile  expand_path  ","File  File  expand_path name "]}," Test Unit Priority Checker previous_test_success?":{"type":"method","name":"previous_test_success?","children":[],"call":["File  exist? "," passed_file "]}," Test Unit Priority Checker need_to_run?":{"type":"method","name":"need_to_run?","children":[],"call":[" class need_to_run? "," class "," previous_test_success? ! "," previous_test_success? "," send "," priority_check_method_name "," have_priority? ","test [] ","Priority  default "," __send__ "]}," Test Unit Priority Checker teardown":{"type":"method","name":"teardown","children":[],"call":["FileUtils  rm_f "," passed_file ","FileUtils  touch ","@test send ","@test __send__ "]}," Test Unit Priority Checker setup":{"type":"method","name":"setup","children":[],"call":["FileUtils  rm_f "," passed_file "]}," Test Unit Priority Checker initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Test Unit Priority Checker priority_check_method_name":{"type":"method","name":"priority_check_method_name","children":[],"call":[]}," Test Unit Priority Checker run_priority_never?":{"type":"method","name":"run_priority_never?","children":[],"call":[]}," Test Unit Priority Checker run_priority_low?":{"type":"method","name":"run_priority_low?","children":[],"call":[" rand > "," rand "]}," Test Unit Priority Checker run_priority_normal?":{"type":"method","name":"run_priority_normal?","children":[],"call":[" rand > "," rand "]}," Test Unit Priority Checker run_priority_high?":{"type":"method","name":"run_priority_high?","children":[],"call":[" rand > "," rand "]}," Test Unit Priority Checker run_priority_important?":{"type":"method","name":"run_priority_important?","children":[],"call":[" rand > "," rand "]}," Test Unit Priority Checker run_priority_must?":{"type":"method","name":"run_priority_must?","children":[],"call":[]}," Test Unit Priority Checker have_priority?":{"type":"method","name":"have_priority?","children":[],"call":["singleton_class method_defined? "," priority_check_method_name "]}," Test Unit Priority included":{"type":"method","name":"included","children":[],"call":[" teardown "," setup ","base class_eval ","base extend "]}," Test Unit TestResultPendingSupport pending_summary":{"type":"method","name":"pending_summary","children":[],"call":[" pending_count "]}," Test Unit TestResultPendingSupport initialize_containers":{"type":"method","name":"initialize_containers","children":[],"call":["@summary_generators << "]}," Test Unit TestResultPendingSupport pending_count":{"type":"method","name":"pending_count","children":[],"call":["@pendings size "]}," Test Unit TestResultPendingSupport add_pending":{"type":"method","name":"add_pending","children":[],"call":[" notify_changed "," notify_fault ","@pendings << "]}," Test Unit PendingHandler handle_pended_error":{"type":"method","name":"handle_pended_error","children":[],"call":[" add_pending ","Pending  new ","exception message "," filter_backtrace ","exception backtrace "," name ","exception is_a? "," add_Pending  new  "]}," Test Unit PendingHandler included":{"type":"method","name":"included","children":[],"call":["base exception_handler "]}," Test Unit TestCasePendingSupport add_pending":{"type":"method","name":"add_pending","children":[],"call":[" current_result add_pending "," current_result "," problem_occurred "]}," Test Unit TestCasePendingSupport pend":{"type":"method","name":"pend","children":[],"call":[" raise ","PendedError  new "," flunk "," add_pending ","Pending  new "," filter_backtrace "," caller "," name "," block_given? "," add_Pending  new  "]}," Test Unit TestCasePendingSupport included":{"type":"method","name":"included","children":[],"call":[" include ","base class_eval "]}," Test Unit Pending to_s":{"type":"method","name":"to_s","children":[],"call":[" long_display "]}," Test Unit Pending long_display":{"type":"method","name":"long_display","children":[],"call":[" label "," filter_backtrace join "," filter_backtrace "," location "," filter_ filter_backtrace join  join "," filter_ filter_backtrace join  "]}," Test Unit Pending short_display":{"type":"method","name":"short_display","children":[],"call":["@message split [] ","@message split "]}," Test Unit Pending label":{"type":"method","name":"label","children":[],"call":[]}," Test Unit Pending single_character_display":{"type":"method","name":"single_character_display","children":[],"call":[]}," Test Unit Pending initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," Test Unit TestResultOmissionSupport omission_summary":{"type":"method","name":"omission_summary","children":[],"call":[" omission_count "]}," Test Unit TestResultOmissionSupport initialize_containers":{"type":"method","name":"initialize_containers","children":[],"call":["@summary_generators << "]}," Test Unit TestResultOmissionSupport omission_count":{"type":"method","name":"omission_count","children":[],"call":["@omissions size "]}," Test Unit TestResultOmissionSupport add_omission":{"type":"method","name":"add_omission","children":[],"call":[" notify_changed "," notify_fault ","@omissions << "]}," Test Unit OmissionHandler handle_omitted_error":{"type":"method","name":"handle_omitted_error","children":[],"call":[" add_omission ","Omission  new ","exception message "," filter_backtrace ","exception backtrace "," name ","exception is_a? "," add_Omission  new  "]}," Test Unit OmissionHandler included":{"type":"method","name":"included","children":[],"call":["base exception_handler "]}," Test Unit TestCaseOmissionSupport add_omission":{"type":"method","name":"add_omission","children":[],"call":[" current_result add_omission "," current_result "]}," Test Unit TestCaseOmissionSupport omit_unless":{"type":"method","name":"omit_unless","children":[],"call":[" omit ","block call "]}," Test Unit TestCaseOmissionSupport omit_if":{"type":"method","name":"omit_if","children":[],"call":[" omit ","block call "]}," Test Unit TestCaseOmissionSupport omit":{"type":"method","name":"omit","children":[],"call":[" raise ","OmittedError  new "," add_omission ","Omission  new "," filter_backtrace "," caller "," name "," block_given? "," add_Omission  new  "]}," Test Unit TestCaseOmissionSupport included":{"type":"method","name":"included","children":[],"call":[" include ","base class_eval "]}," Test Unit Omission to_s":{"type":"method","name":"to_s","children":[],"call":[" long_display "]}," Test Unit Omission long_display":{"type":"method","name":"long_display","children":[],"call":[" label "," filter_backtrace join "," filter_backtrace "," location "," filter_ filter_backtrace join  join "," filter_ filter_backtrace join  "]}," Test Unit Omission short_display":{"type":"method","name":"short_display","children":[],"call":["@message split [] ","@message split "]}," Test Unit Omission label":{"type":"method","name":"label","children":[],"call":[]}," Test Unit Omission single_character_display":{"type":"method","name":"single_character_display","children":[],"call":[]}," Test Unit Omission initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," Test Unit TestResultNotificationSupport notification_summary":{"type":"method","name":"notification_summary","children":[],"call":[" notification_count "]}," Test Unit TestResultNotificationSupport initialize_containers":{"type":"method","name":"initialize_containers","children":[],"call":["@summary_generators << "]}," Test Unit TestResultNotificationSupport notification_count":{"type":"method","name":"notification_count","children":[],"call":["@notifications size "]}," Test Unit TestResultNotificationSupport add_notification":{"type":"method","name":"add_notification","children":[],"call":[" notify_changed "," notify_fault ","@notifications << "]}," Test Unit NotificationHandler handle_Notified_error":{"type":"method","name":"handle_Notified_error","children":[],"call":[" add_notification ","Notification  new ","exception message "," filter_backtrace ","exception backtrace "," name ","exception is_a? "," add_Notification  new  "]}," Test Unit NotificationHandler included":{"type":"method","name":"included","children":[],"call":["base exception_handler "]}," Test Unit TestCaseNotificationSupport add_notification":{"type":"method","name":"add_notification","children":[],"call":[" current_result add_notification "," current_result "]}," Test Unit TestCaseNotificationSupport notify":{"type":"method","name":"notify","children":[],"call":[" add_notification ","Notification  new "," filter_backtrace "," caller "," name ","options [] "," add_Notification  new  "," filter_ filter_backtrace  "]}," Test Unit TestCaseNotificationSupport included":{"type":"method","name":"included","children":[],"call":[" include ","base class_eval "]}," Test Unit Notification to_s":{"type":"method","name":"to_s","children":[],"call":[" long_display "]}," Test Unit Notification long_display":{"type":"method","name":"long_display","children":[],"call":[" label "," filter_backtrace join "," filter_backtrace "," location "," filter_ filter_backtrace join  join "," filter_ filter_backtrace join  "]}," Test Unit Notification short_display":{"type":"method","name":"short_display","children":[],"call":["@message split [] ","@message split "]}," Test Unit Notification label":{"type":"method","name":"label","children":[],"call":[]}," Test Unit Notification single_character_display":{"type":"method","name":"single_character_display","children":[],"call":[]}," Test Unit Notification initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," Test Unit Fixture run_teardown":{"type":"method","name":"run_teardown","children":[],"call":[" run_fixture "]}," Test Unit Fixture run_setup":{"type":"method","name":"run_setup","children":[],"call":[" run_fixture "]}," Test Unit Fixture run_fixture":{"type":"method","name":"run_fixture","children":[],"call":[" send "," respond_to? ","(send\n  (send\n    (self) :class) :send\n  (dstr\n    (str \"before_\")\n    (begin\n      (lvar :fixture))\n    (str \"_methods\"))) flatten each ","(send\n  (send\n    (self) :class) :send\n  (dstr\n    (str \"before_\")\n    (begin\n      (lvar :fixture))\n    (str \"_methods\"))) flatten "," class send "," class "," raise "," handle_exception ","options [] "," run_fixture_callback ","(send\n  (send\n    (self) :class) :send\n  (dstr\n    (str \"before_\")\n    (begin\n      (lvar :fixture))\n    (str \"_callbacks\"))) flatten each ","(send\n  (send\n    (self) :class) :send\n  (dstr\n    (str \"before_\")\n    (begin\n      (lvar :fixture))\n    (str \"_callbacks\"))) flatten ","(send\n  (send\n    (send\n      (self) :class) :fixture) :before_callbacks\n  (lvar :type)) flatten each ","(send\n  (send\n    (send\n      (self) :class) :fixture) :before_callbacks\n  (lvar :type)) flatten "," class fixture after_callbacks "," class fixture "," class fixture before_callbacks ","fixtures each ","runner call "," create_fixtures_runner ","(send\n  (send\n    (send\n      (self) :class) :fixture) :before_callbacks\n  (lvar :type)) flatten  each "," create_fixtures_runner  call "," create_fixtures_ create_fixtures_runner  "," create_(send\n  (send\n    (send\n      (self) :class) :fixture) :before_callbacks\n  (lvar :type)) flatten _runner "]}," Test Unit Fixture ClassMethods collect_fixture_methods":{"type":"method","name":"collect_fixture_methods","children":[],"call":["result + - ","result + "," instance_variable_get "," instance_variable_defined? ","ancestor class_eval ","ancestor is_a? ","interested_ancestors inject "," ancestors [] reverse "," ancestors [] "," ancestors "," ancestors index "," unregistered_methods_variable_name "," registered_methods_variable_name ","(send\n  (lvar :result) :|\n  (lvar :methods)) - ","result | "," instance_eval "," ancestors [] reverse  inject ","  instance_variable_get _variable_name ","  instance_eval _variable_name "," unregistered_ instance_variable_get _variable_name "," unregistered_ instance_eval _variable_name ","  unregistered_methods_variable_name _name "," unregistered_ registered_methods_variable_name _name "," registered_ instance_variable_get _variable_name "," registered_ instance_eval _variable_name "," registered_ registered_methods_variable_name _name ","(send\n  (lvar :result) :|\n  (lvar : instance_variable_get )) - ","(send\n  (lvar :result) :|\n  (lvar : instance_eval )) - "]}," Test Unit Fixture ClassMethods unregister_fixture_method":{"type":"method","name":"unregister_fixture_method","children":[],"call":[" add_fixture_method_name "," unregistered_methods_variable_name "," unregistered_methods_ unregistered_methods_variable_name  "]}," Test Unit Fixture ClassMethods register_fixture_method":{"type":"method","name":"register_fixture_method","children":[],"call":[" add_fixture_method_name "," registered_methods_variable_name ","options to_a first ","options to_a ","options empty? "," raise ","must be {:before => :prepend},  + + ","options inspect ","must be {:before => :prepend},  + "," valid_register_fixture_options? "," registered_methods_ registered_methods_variable_name  "]}," Test Unit Fixture ClassMethods unregistered_methods_variable_name":{"type":"method","name":"unregistered_methods_variable_name","children":[],"call":[]}," Test Unit Fixture ClassMethods registered_methods_variable_name":{"type":"method","name":"registered_methods_variable_name","children":[],"call":[]}," Test Unit Fixture ClassMethods add_fixture_method_name":{"type":"method","name":"add_fixture_method_name","children":[],"call":[" instance_variable_set ","methods | ","(lvar :method_name) | ","how == "," instance_variable_get "," instance_variable_defined? "," instance_eval ","methods |  | ","(lvar :method_name) |  | "," instance_variable_get  | "," instance_eval  | "]}," Test Unit Fixture ClassMethods valid_register_fixture_options?":{"type":"method","name":"valid_register_fixture_options?","children":[],"call":["(sym :prepend) include? ","options [] ","(sym :before) include? ","options keys first ","options keys ","options size > ","options size ","options empty? ","options options keys first s first ","options options keys first s "]}," Test Unit Fixture ClassMethods unregister_fixture":{"type":"method","name":"unregister_fixture","children":[],"call":[" attribute "]}," Test Unit Fixture ClassMethods register_fixture":{"type":"method","name":"register_fixture","children":[],"call":[" attribute ","method_names pop ","method_names last is_a? ","method_names last ","callbacks << "]}," Test Unit Fixture ClassMethods after_teardown_methods":{"type":"method","name":"after_teardown_methods","children":[],"call":[" collect_fixture_methods "]}," Test Unit Fixture ClassMethods before_teardown_methods":{"type":"method","name":"before_teardown_methods","children":[],"call":[" collect_fixture_methods "]}," Test Unit Fixture ClassMethods after_setup_methods":{"type":"method","name":"after_setup_methods","children":[],"call":[" collect_fixture_methods "]}," Test Unit Fixture ClassMethods before_setup_methods":{"type":"method","name":"before_setup_methods","children":[],"call":[" collect_fixture_methods "]}," Test Unit Fixture ClassMethods unregister_teardown_method":{"type":"method","name":"unregister_teardown_method","children":[],"call":[" unregister_fixture_method "]}," Test Unit Fixture ClassMethods register_teardown_method":{"type":"method","name":"register_teardown_method","children":[],"call":[" register_fixture_method "]}," Test Unit Fixture ClassMethods unregister_setup_method":{"type":"method","name":"unregister_setup_method","children":[],"call":[" unregister_fixture_method "]}," Test Unit Fixture ClassMethods register_setup_method":{"type":"method","name":"register_setup_method","children":[],"call":[" register_fixture_method "]}," Test Unit Fixture ClassMethods unregister_teardown":{"type":"method","name":"unregister_teardown","children":[],"call":[" unregister_fixture "]}," Test Unit Fixture ClassMethods teardown":{"type":"method","name":"teardown","children":[],"call":[" register_fixture "]}," Test Unit Fixture ClassMethods unregister_setup":{"type":"method","name":"unregister_setup","children":[],"call":[" unregister_fixture "]}," Test Unit Fixture ClassMethods setup":{"type":"method","name":"setup","children":[],"call":[" register_fixture "]}," Test Unit Fixture included":{"type":"method","name":"included","children":[],"call":["base register_attribute_observer ","test_case send ","value nil? ","Proc  new ","(sym :setup) each ","base extend "," lambda ","test_case fixture [] register ","test_case fixture [] ","test_case fixture ","test_case fixture [] unregister "]}," Test Unit TestResultFailureSupport failure_summary":{"type":"method","name":"failure_summary","children":[],"call":[" failure_count "]}," Test Unit TestResultFailureSupport initialize_containers":{"type":"method","name":"initialize_containers","children":[],"call":["@problem_checkers << ","@summary_generators << "]}," Test Unit TestResultFailureSupport failure_occurred?":{"type":"method","name":"failure_occurred?","children":[],"call":["@failures empty? ! ","@failures empty? "]}," Test Unit TestResultFailureSupport failure_count":{"type":"method","name":"failure_count","children":[],"call":["@failures size "]}," Test Unit TestResultFailureSupport add_failure":{"type":"method","name":"add_failure","children":[],"call":[" notify_changed "," notify_fault ","@failures << "]}," Test Unit FailureHandler add_failure":{"type":"method","name":"add_failure","children":[],"call":[" current_result add_failure "," current_result ","Failure  new "," filter_backtrace "," name ","default_options merge "," [] "," current_result add_Failure  new  "]}," Test Unit FailureHandler handle_assertion_failed_error":{"type":"method","name":"handle_assertion_failed_error","children":[],"call":[" add_failure ","exception backtrace ","exception message "," problem_occurred ","exception is_a? ","exception user_message ","exception inspected_actual ","exception inspected_expected ","exception actual ","exception expected "]}," Test Unit FailureHandler included":{"type":"method","name":"included","children":[],"call":["base exception_handler "]}," Test Unit Failure label":{"type":"method","name":"label","children":[],"call":[]}," Test Unit ExceptionHandler ClassMethods unregister_exception_handler":{"type":"method","name":"unregister_exception_handler","children":[],"call":[" attribute "," exception_handlers delete "," exception_handlers ","method_name_or_handler respond_to? ","method_name_or_handlers each "]}," Test Unit ExceptionHandler ClassMethods exception_handler":{"type":"method","name":"exception_handler","children":[],"call":[" attribute "," exception_handlers unshift "," exception_handlers ","method_name_or_handler respond_to? ","method_name_or_handlers each "," block_given? "]}," Test Unit ExceptionHandler ClassMethods exception_handlers":{"type":"method","name":"exception_handlers","children":[],"call":["ExceptionHandler  exception_handlers "]}," Test Unit ExceptionHandler included":{"type":"method","name":"included","children":[],"call":["base register_attribute_observer ","@@exception_handlers unshift ","Proc  new ","base extend ","@@exception_handlers delete "]}," Test Unit ExceptionHandler exception_handlers":{"type":"method","name":"exception_handlers","children":[],"call":[]}," Test Unit TestResultErrorSupport error_summary":{"type":"method","name":"error_summary","children":[],"call":[" error_count "]}," Test Unit TestResultErrorSupport initialize_containers":{"type":"method","name":"initialize_containers","children":[],"call":["@problem_checkers << ","@summary_generators << "]}," Test Unit TestResultErrorSupport error_occurred?":{"type":"method","name":"error_occurred?","children":[],"call":["@errors empty? ! ","@errors empty? "]}," Test Unit TestResultErrorSupport error_count":{"type":"method","name":"error_count","children":[],"call":["@errors size "]}," Test Unit TestResultErrorSupport add_error":{"type":"method","name":"add_error","children":[],"call":[" notify_changed "," notify_fault ","@errors << "]}," Test Unit ErrorHandler add_error":{"type":"method","name":"add_error","children":[],"call":[" current_result add_error ","Error  new "," name "," current_result "," current_result add_Error  new  "]}," Test Unit ErrorHandler handle_all_exception":{"type":"method","name":"handle_all_exception","children":[],"call":[" add_error "," problem_occurred "," pass_through_exception? "]}," Test Unit ErrorHandler included":{"type":"method","name":"included","children":[],"call":["base exception_handler "]}," Test Unit Error backtrace":{"type":"method","name":"backtrace","children":[],"call":[" filter_backtrace ","@exception backtrace "]}," Test Unit Error label":{"type":"method","name":"label","children":[],"call":[]}," Test Unit Diff diff":{"type":"method","name":"diff","children":[],"call":["differ diff join ","differ diff ","differ_class new ","to split ","from split ","lines join ","(send\n  (lvar :lines) :collect) join ","line force_encoding ","lines collect ","Object  const_defined? ","to dup force_encoding ","to dup ","to valid_encoding? ! ","to valid_encoding? ","to respond_to? ","from dup force_encoding ","from dup ","from valid_encoding? ! ","from valid_encoding? ","from respond_to? ","differ_class new  diff join ","differ_class new  diff ","differ_class new _class new ","to dup force_encoding  split ","from dup force_encoding  split ","differ diff  join ","(send\n  (lvar :differ diff ) :collect) join ","differ diff  collect ","to dup force_encoding  dup force_encoding ","to dup force_encoding  dup ","to dup force_encoding  valid_encoding? ! ","to dup force_encoding  valid_encoding? ","to dup force_encoding  respond_to dup force_encoding ? ","from dup force_encoding  dup force_encoding ","from dup force_encoding  dup ","from dup force_encoding  valid_encoding? ! ","from dup force_encoding  valid_encoding? ","from respond_to dup force_encoding ? ","from dup force_encoding  respond_to? "]}," Test Unit Diff unified":{"type":"method","name":"unified","children":[],"call":[" diff "]}," Test Unit Diff readable":{"type":"method","name":"readable","children":[],"call":[" diff "]}," Test Unit Diff UnifiedDiffer define_line?":{"type":"method","name":"define_line?","children":[],"call":[]}," Test Unit Diff UnifiedDiffer find_interesting_line":{"type":"method","name":"find_interesting_line","children":[],"call":[" send ","(send\n  (ivar :@from) :[]\n  (lvar :from_index)) each ","@to [] ","@from [] ","to_index >= ","from_index >= "," __send__ "]}," Test Unit Diff UnifiedDiffer format_summary":{"type":"method","name":"format_summary","children":[],"call":["summary << "," find_interesting_line ","@@ -%d,%d +%d,%d @@ % ","last_to_end - ","first_to_start + ","last_from_end - ","first_from_start + ","operations [] ","@@ -%d,%d +%d,%d @@ %  << "," find_ find_interesting_line  "]}," Test Unit Diff UnifiedDiffer same_content?":{"type":"method","name":"same_content?","children":[],"call":["(lvar :from_start) == ","tag == ","group [] ","group size != ","group size ","groups [] ","groups size != ","groups size ","groups []  [] ","groups []  size != ","groups []  size ","groups [] s [] ","groups [] s size != ","groups [] s size "]}," Test Unit Diff UnifiedDiffer diff":{"type":"method","name":"diff","children":[],"call":["result concat "," tag ","@from [] ","@to [] ","operations each ","result << "," format_summary ","groups each ","(str \"+++ \") rstrip ","options [] ","(str \"--- \") rstrip ","show_context nil? "," same_content? ","groups empty? ","SequenceMatcher  new grouped_operations ","SequenceMatcher  new ","SequenceMatcher  new grouped_operations  each ","options []  nil? ","SequenceMatcher  new grouped_operations  empty? "]}," Test Unit Diff ReadableDiffer space_character?":{"type":"method","name":"space_character?","children":[],"call":["(send\n  (str \" \") :[]\n  (int 0)) include? ","\t [] ","  [] "]}," Test Unit Diff ReadableDiffer n_leading_characters":{"type":"method","name":"n_leading_characters","children":[],"call":["string [] == ","string [] "]}," Test Unit Diff ReadableDiffer format_diff_point":{"type":"method","name":"format_diff_point","children":[],"call":["result concat "," tag_difference ","\t * ","to_tags empty? "," tag_inserted ","from_tags empty? "," tag_deleted ","to_tags [] rstrip ","to_tags [] ","from_tags [] rstrip ","from_tags [] ","(lvar :common) min "," n_leading_characters ","  [] ","(send nil :n_leading_characters\n  (lvar :from_line)\n  (str \"\\t\")) min "," tag_deleted  concat ","to_tags [] rstrip  empty? ","from_tags [] rstrip  empty? ","to_tags [] rstrip  [] rstrip ","to_tags [] rstrip  [] ","from_tags [] rstrip  [] rstrip ","from_tags [] rstrip  [] ","(lvar :(lvar :common) min ) min ","(lvar :(send nil :n_leading_characters\n  (lvar :from_line)\n  (str \"\\t\")) min ) min "]}," Test Unit Diff ReadableDiffer diff_line":{"type":"method","name":"diff_line","children":[],"call":[" format_diff_point "," raise ","to_tags << ","  * ","from_tags << ","+ * ","- * ","^ * ","to_end - ","from_end - ","operations each ","matcher operations ","SequenceMatcher  new "," method "," compute_width ","_operations each "," line_operations ","matcher operations  each ","matcher matcher operations  ","SequenceMatcher  new  operations ","_matcher operations  each "," line_matcher operations  "]}," Test Unit Diff ReadableDiffer _diff_lines":{"type":"method","name":"_diff_lines","children":[],"call":[" tag_inserted ","@to [] "," tag_deleted ","@from [] "," diff_lines ","to_start < ","from_start < "]}," Test Unit Diff ReadableDiffer diff_lines":{"type":"method","name":"diff_lines","children":[],"call":[" _diff_lines + + "," _diff_lines ","to_best_index + ","from_best_index + "," _diff_lines + "," diff_line ","@to [] ","@from [] ","tagged_from + ","tagged_to + ","to_end - < ","from_end - ","to_end - "," tag_inserted "," tag_deleted ","from_equal_index nil? ","best_ratio < "," find_diff_line_info "," cut_off_ratio "," tag_deleted  + "," tag_inserted  + "," find_diff_line_ find_diff_line_info  "]}," Test Unit Diff ReadableDiffer find_diff_line_info":{"type":"method","name":"find_diff_line_info","children":[],"call":["matcher ratio ","matcher ratio > ","SequenceMatcher  new "," method ","@to [] ","@from [] ","@from [] == ","from_start upto ","from_end - ","to_start upto ","to_end - "," default_ratio ","SequenceMatcher  new  ratio ","SequenceMatcher  new  ratio > "]}," Test Unit Diff ReadableDiffer tag_difference":{"type":"method","name":"tag_difference","children":[],"call":[" tag "]}," Test Unit Diff ReadableDiffer tag_equal":{"type":"method","name":"tag_equal","children":[],"call":[" tag "]}," Test Unit Diff ReadableDiffer tag_inserted":{"type":"method","name":"tag_inserted","children":[],"call":[" tag "]}," Test Unit Diff ReadableDiffer tag_deleted":{"type":"method","name":"tag_deleted","children":[],"call":[" tag "]}," Test Unit Diff ReadableDiffer diff":{"type":"method","name":"diff","children":[],"call":[" raise ","result concat "," tag_equal ","@from [] "," tag_inserted ","@to [] "," tag_deleted "," diff_lines ","matcher operations each ","matcher operations ","SequenceMatcher  new "," operations each "," operations ","SequenceMatcher  new  operations each ","SequenceMatcher  new  operations "]}," Test Unit Diff Differ tag":{"type":"method","name":"tag","children":[],"call":["contents collect ","mark + "]}," Test Unit Diff Differ initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Test Unit Diff SequenceMatcher expand_edge_equal_operations!":{"type":"method","name":"expand_edge_equal_operations!","children":[],"call":["_operations []= ","(lvar :to_end) min ","to_start + ","(lvar :from_end) min ","from_start + ","tag == ","_operations [] ","(lvar :to_start) max ","to_end - ","(lvar :from_start) max ","from_end - "]}," Test Unit Diff SequenceMatcher determine_tag":{"type":"method","name":"determine_tag","children":[],"call":["to_index < ","from_index < "]}," Test Unit Diff SequenceMatcher compute_ratio":{"type":"method","name":"compute_ratio","children":[],"call":["2.0 * / ","2.0 * ","length zero? ","@from length + ","@to length ","@from length ","result + ","block [] "," blocks inject "," blocks ","@from length +  zero? ","@from @from length +  + ","@to @from length +  ","@from @from length +  "]}," Test Unit Diff SequenceMatcher compute_operations":{"type":"method","name":"compute_operations","children":[],"call":["operations << ","size > ","match_to_index + ","match_from_index + ","tag != "," determine_tag "," blocks each "," blocks "," determine_tag  != "," determine_ determine_tag  "]}," Test Unit Diff SequenceMatcher compute_blocks":{"type":"method","name":"compute_blocks","children":[],"call":["blocks << ","@to size ","@from size ","current_size zero? ","current_to_index + == ","current_to_index + ","current_from_index + == ","current_from_index + "," matches each "," matches "]}," Test Unit Diff SequenceMatcher compute_matches":{"type":"method","name":"compute_matches","children":[],"call":["matches sort_by ","queue push ","match_to_index + ","match_from_index + ","match_to_index + < ","match_from_index + < ","matches << ","to_start < ","from_start < ","size zero? "," longest_match ","to_end - ","from_end - ","queue pop ","queue empty? ","@to size ","@from size "," longest_match es sort_by "," longest_match _to_index + "," longest_match _from_index + "," longest_match _to_index + < "," longest_match _from_index + < "," longest_match es << "," longest_ longest_match  "]}," Test Unit Diff SequenceMatcher matches":{"type":"method","name":"matches","children":[],"call":[" compute_matches "]}," Test Unit Diff SequenceMatcher adjust_best_info_with_junk_predicate":{"type":"method","name":"adjust_best_info_with_junk_predicate","children":[],"call":["@from [] == ","@to [] ","best_to + ","@from [] ","best_from + ","@junks has_key? ! ","@junks has_key? ","best_to + < ","best_from + < ","best_to - ","best_from - ","best_to > ","best_from > "]}," Test Unit Diff SequenceMatcher find_best_match_position":{"type":"method","name":"find_best_match_position","children":[],"call":["to_index - + ","to_index - ","from_index - + ","from_index - ","size > ","_sizes []= ","(or\n  (send\n    (lvar :sizes) :[]\n    (send\n      (lvar :to_index) :-\n      (int 1)))\n  (int 0)) + ","sizes [] ","to_index > ","to_index < ","(or\n  (send\n    (ivar :@to_indexes) :[]\n    (send\n      (ivar :@from) :[]\n      (lvar :from_index)))\n  (array)) each ","@to_indexes [] ","@from [] ","from_start upto ","_sizes []=  > ","__sizes []= s []= ","(or\n  (send\n    (lvar :_sizes []= s) :[]\n    (send\n      (lvar :to_index) :-\n      (int 1)))\n  (int 0)) + ","_sizes []= s [] "]}," Test Unit Diff SequenceMatcher update_to_indexes":{"type":"method","name":"update_to_indexes","children":[],"call":["@junks []= ","@junk_predicate call ","@to_indexes reject ","@junk_predicate nil? ","@to_indexes [] << ","@to_indexes [] ","@to send ","  [] is_a? ","  [] ","@to is_a? ","@to __send__ ","@@junk_predicate call s []= ","@@junk_predicate call _predicate call ","@@junk_predicate call _predicate nil? "]}," Test Unit Diff SequenceMatcher ratio":{"type":"method","name":"ratio","children":[],"call":[" compute_ratio "]}," Test Unit Diff SequenceMatcher grouped_operations":{"type":"method","name":"grouped_operations","children":[],"call":["groups << ","group empty? ","group << ","(lvar :to_start) max ","to_end - ","(lvar :from_start) max ","from_end - ","(lvar :to_end) min ","to_start + ","(lvar :from_end) min ","from_start + ","from_end - > ","tag == ","_operations each ","context_size * "," expand_edge_equal_operations! ","_operations empty? "," operations "," operations dup ","(lvar :(lvar :to_start) max ) max ","(lvar :(lvar :from_start) max ) max ","(lvar :to_start) max  + ","(lvar :from_start) max  + "," operations  each "," operations dup  each "," expand_edge_equal operations ! "," expand_edge_equal operations dup ! "," operations  empty? "," operations dup  empty? "]}," Test Unit Diff SequenceMatcher operations":{"type":"method","name":"operations","children":[],"call":[" compute_operations "]}," Test Unit Diff SequenceMatcher blocks":{"type":"method","name":"blocks","children":[],"call":[" compute_blocks "]}," Test Unit Diff SequenceMatcher longest_match":{"type":"method","name":"longest_match","children":[],"call":[" adjust_best_info_with_junk_predicate ","@junks empty? "," find_best_match_position "," adjust_ adjust_best_info_with_junk_predicate _with_junk_predicate "," adjust_ find_best_match_position _with_junk_predicate "]}," Test Unit Diff SequenceMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[" update_to_indexes "]}," Test Unit MixColor +":{"type":"method","name":"+","children":[],"call":[" class new "," class "]}," Test Unit MixColor escape_sequence":{"type":"method","name":"escape_sequence","children":[],"call":[" sequence join "," sequence "]}," Test Unit MixColor sequence":{"type":"method","name":"sequence","children":[],"call":["result + ","color sequence ","@colors inject "]}," Test Unit MixColor initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Test Unit Color +":{"type":"method","name":"+","children":[],"call":["MixColor  new "]}," Test Unit Color escape_sequence":{"type":"method","name":"escape_sequence","children":[],"call":[" sequence join "," sequence "]}," Test Unit Color sequence":{"type":"method","name":"sequence","children":[],"call":["sequence << ","NAMES  index ","@name == "," underline? "," italic? "," bold? "," intensity? "," foreground? "," class parse_256_color to_s "," class parse_256_color "," class ","NAMES  include? "," class parse_256_NAMES  index  to_s "," class parse_256_NAMES  index  "]}," Test Unit Color initialize":{"type":"method","name":"initialize","children":[],"call":["options [] ","@foreground nil? ","options [] ! ","options [] nil? ","options has_key? ","options []  nil? "]}," Test Unit Collector Load excluded_file?":{"type":"method","name":"excluded_file?","children":[],"call":["pattern =~ ","excludes any? ","excludes empty? ","patterns any? ","patterns empty? ","@system_excludes any? "]}," Test Unit Collector Load excluded_directory?":{"type":"method","name":"excluded_directory?","children":[],"call":["pattern =~ ","@system_directory_excludes any? "]}," Test Unit Collector Load add_load_path":{"type":"method","name":"add_load_path","children":[],"call":["$LOAD_PATH delete_at ","$LOAD_PATH rindex ","path to_s ","$LOAD_PATH push ","$LOAD_PATH index ","$LOAD_PATH unshift ","path nil? ","$LOAD_PATH r$LOAD_PATH index  ","path to_s  to_s ","$LOAD_PATH $LOAD_PATH index  ","path to_s  nil? "]}," Test Unit Collector Load resolve_path":{"type":"method","name":"resolve_path","children":[],"call":[" Pathname ","@base + "]}," Test Unit Collector Load collect_file":{"type":"method","name":"collect_file","children":[],"call":[" add_suite ","test_case suite "," find_test_cases each "," find_test_cases "," require ","path to_s "," add_load_path ","path expand_path dirname ","path expand_path ","@program_file == ","File  expand_path ","path expand_path to_s ","@require_failed_infos << ","expanded_path dirname ","expanded_path to_s ","path basename to_s ","path basename "," add_test_cases ","path expand_path  dirname ","path expand_path  to_s "]}," Test Unit Collector Load collect_recursive":{"type":"method","name":"collect_recursive","children":[],"call":["test_suite << "," sort each "," sort ","TestSuite  new ","path basename to_s ","path basename "," collect_file ","sub_test_suites << ","sub_test_suite empty? "," collect_recursive "," excluded_directory? ","child basename to_s ","child basename ","directories each "," excluded_file? ","files each ","child directory? ","path children partition ","path children ","path directory? "," resolve_path ","TestSuite  new  << "," resolve_path  basename to_s "," resolve_path  basename ","sub_TestSuite  new s << "," collect_recursive s << ","sub_TestSuite  new  empty? "," collect_recursive  empty? "," resolve_path  children partition "," resolve_path  children "," resolve_path  directory? "," resolve_ resolve_path  "]}," Test Unit Collector Load find_test_cases":{"type":"method","name":"find_test_cases","children":[],"call":["ignore concat ","test_cases << ","ignore include? ","TestCase DESCENDANTS  each ","already_gathered []= ","already_gathered key? "]}," Test Unit Collector Load collect":{"type":"method","name":"collect","children":[],"call":["test_suites first ","test_suite << "," sort each "," sort ","TestSuite  new ","froms join ","test_suites size > ","test_suites size ","(send\n  (lvar :froms) :collect) compact ","test_suite tests empty? ","test_suite tests "," collect_recursive "," find_test_cases ","froms collect ","froms empty? "," add_load_path "," resolve_path "," collect_file ","test_suites << ","from directory? ","froms each "," add_require_failed_test_suite "," adjust_ractor_tests ","TestSuite  new s first "," collect_recursive s first ","test_suites first s first ","(send\n  (lvar :froms) :collect) compact  first ","TestSuite  new  << "," collect_recursive  << ","test_suites first  << "," resolve_path s join ","TestSuite  new s size > "," collect_recursive s size > ","test_suites first s size > ","(send\n  (lvar :froms) :collect) compact  size > ","TestSuite  new s size "," collect_recursive s size ","test_suites first s size ","(send\n  (lvar :froms) :collect) compact  size ","(send\n  (lvar : resolve_path s) :collect) compact ","TestSuite  new  tests empty? "," collect_recursive  tests empty? ","test_suites first  tests empty? ","TestSuite  new  tests "," collect_recursive  tests ","test_suites first  tests "," resolve_path s collect "," resolve_path s empty? ","TestSuite  new s << "," collect_recursive s << ","test_suites first s << ","(send\n  (lvar :froms) :collect) compact  << "," resolve_path  directory? "," resolve_path s each "," add_require_failed_TestSuite  new  "," add_require_failed_ collect_recursive  "," add_require_failed_test_suites first  "]}," Test Unit Collector Load base=":{"type":"method","name":"base=","children":[],"call":[" Pathname ","base nil? "," Pathname  nil? "]}," Test Unit Collector Load initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Test Unit Collector Descendant collect":{"type":"method","name":"collect","children":[],"call":["suite << "," sort each "," sort "," add_suite ","descendant_test_case suite ","TestCase DESCENDANTS  each ","TestSuite  new "," add_test_cases "," adjust_ractor_tests ","TestSuite  new  << "," add_TestSuite  new  ","descendant_test_case TestSuite  new  "]}," Test Unit AutoRunner default_collector":{"type":"method","name":"default_collector","children":[],"call":["COLLECTORS  [] "," class collector "," class "]}," Test Unit AutoRunner default_runner":{"type":"method","name":"default_runner","children":[],"call":["RUNNERS  [] ","ENV  [] == ","ENV  [] "," class runner "," class "," class default_runner "," runner "," class  class default_runner  "," class default_ class default_runner  ","  class default_runner  "]}," Test Unit AutoRunner setup_option":{"type":"method","name":"setup_option","children":[],"call":["ADDITIONAL_OPTIONS  << ","Proc  new "]}," Test Unit AutoRunner register_collector":{"type":"method","name":"register_collector","children":[],"call":["COLLECTORS  []= ","id to_s ","Proc  new "]}," Test Unit AutoRunner register_runner":{"type":"method","name":"register_runner","children":[],"call":["RUNNERS  []= ","id to_s ","Proc  new "]}," Test Unit Attribute []":{"type":"method","name":"[]","children":[],"call":[" class get_attribute "," class "," attributes [] "," attributes "," class find_attribute "]}," Test Unit Attribute attributes":{"type":"method","name":"attributes","children":[],"call":[" class attributes "," class ","StringifyKeyHash  new "]}," Test Unit Attribute ClassMethods normalize_method_name":{"type":"method","name":"normalize_method_name","children":[],"call":["name to_s "]}," Test Unit Attribute ClassMethods normalize_attribute_name":{"type":"method","name":"normalize_attribute_name","children":[],"call":["name to_s "]}," Test Unit Attribute ClassMethods attribute_observers":{"type":"method","name":"attribute_observers","children":[],"call":["@@attribute_observers [] "," normalize_attribute_name "," normalize_ normalize_attribute_name  "]}," Test Unit Attribute ClassMethods register_attribute_observer":{"type":"method","name":"register_attribute_observer","children":[],"call":["@@attribute_observers [] << ","@@attribute_observers [] "," normalize_attribute_name ","Proc  new "," normalize_ normalize_attribute_name  "]}," Test Unit Attribute ClassMethods get_attribute":{"type":"method","name":"get_attribute","children":[],"call":["(or\n  (send nil :attributes\n    (lvar :method_name))\n  (hash)) [] "," attributes "," normalize_attribute_name "," normalize_ normalize_attribute_name  "]}," Test Unit Attribute ClassMethods attributes":{"type":"method","name":"attributes","children":[],"call":["(or\n  (lvar :parent_attributes)\n  (hash)) merge ","ancestor attributes ","ancestor < ","ancestor is_a? "," ancestors [] each "," ancestors [] "," ancestors "," attributes_table [] "," attributes_table "," normalize_method_name ","StringifyKeyHash  new ","ancestor == "," ancestors each ","(or\n  (lvar :parent_(or\n  (lvar :parent_attributes)\n  (hash)) merge )\n  (hash)) merge ","(or\n  (lvar :parent_ attributes_table [] )\n  (hash)) merge ","(or\n  (lvar :ancestor attributes )\n  (hash)) merge ","ancestor (or\n  (lvar :parent_attributes)\n  (hash)) merge  ","ancestor  attributes_table []  "," (or\n  (lvar :parent_attributes)\n  (hash)) merge _table [] ","  attributes_table [] _table [] "," (or\n  (lvar :parent_attributes)\n  (hash)) merge _table ","  attributes_table [] _table "," normalize_ normalize_method_name  "]}," Test Unit Attribute ClassMethods set_attributes":{"type":"method","name":"set_attributes","children":[],"call":["current_attributes []= ","observer call ","(or\n  (send nil :attributes\n    (lvar :method_name))\n  (hash)) [] "," attributes ","observers each "," attribute_observers "," normalize_attribute_name ","new_attributes each ","@attributes_table [] "," normalize_method_name ","new_attributes empty? ","StringifyKeyHash  stringify ","StringifyKeyHash  new ","@attributes_table []  []= ","(or\n  (send nil :attributes\n    (lvar : normalize_method_name ))\n  (hash)) [] "," normalize_ normalize_method_name  "]}," Test Unit Attribute ClassMethods attributes_table":{"type":"method","name":"attributes_table","children":[],"call":[" merge ","StringifyKeyHash  new "]}," Test Unit Attribute ClassMethods attribute":{"type":"method","name":"attribute","children":[],"call":[" set_attributes ","method_names each ","@current_attributes []= ","options merge ","method_names empty? ","method_names << ","options is_a? "," current_attributes []= "," current_attributes "]}," Test Unit Attribute ClassMethods method_added":{"type":"method","name":"method_added","children":[],"call":[" set_attributes ","kept_attributes []= ","attribute [] ","attributes []= ","@current_attributes each ","StringifyKeyHash  new ","keep_hook call "," set_keep_hook call s ","StringifyKeyHash  new  []= ","kept_keep_hook call s []= ","keep_hook call  [] ","keep_hook call s []= ","@current_keep_hook call s each ","attribute []  call "]}," Test Unit Attribute BaseClassMethods attributes_table":{"type":"method","name":"attributes_table","children":[],"call":[]}," Test Unit Attribute included":{"type":"method","name":"included","children":[],"call":["base extend "]}," Test Unit Assertions AssertionMessage DelayedLiteral inspect":{"type":"method","name":"inspect","children":[],"call":["@value call to_s ","@value call "]}," Test Unit Assertions AssertionMessage DelayedLiteral initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Test Unit Assertions AssertionMessage delayed_literal":{"type":"method","name":"delayed_literal","children":[],"call":["DelayedLiteral  new "]}," Test Unit Assertions assert_false":{"type":"method","name":"assert_false","children":[],"call":["actual == "," assert_block "," build_message "," _wrap_assertion "," == "]}," Test Unit Assertions assert_true":{"type":"method","name":"assert_true","children":[],"call":["actual == "," assert_block "," build_message "," _wrap_assertion "," == "]}," Test Unit Assertions assert_boolean":{"type":"method","name":"assert_boolean","children":[],"call":["(true) include? "," assert_block "," build_message "," _wrap_assertion "," == "]}," Test Unit UI Console TestRunner guess_term_width":{"type":"method","name":"guess_term_width","children":[],"call":[" Integer ","ENV  [] "," guess_term_width_from_env "," guess_term_width_from_io "]}," Test Unit UI Console TestRunner guess_progress_row_max":{"type":"method","name":"guess_progress_row_max","children":[],"call":["ENV  [] == ","ENV  [] ","term_width zero? "," guess_term_width "," guess_term_width  zero? "," guess_ guess_term_width  "]}," Test Unit UI Console TestRunner color":{"type":"method","name":"color","children":[],"call":["ColorScheme  default [] ","ColorScheme  default ","@color_scheme [] ","name == "]}," Test Unit UI Console TestRunner output_progress":{"type":"method","name":"output_progress","children":[],"call":[" nl ","@output_level == ","@progress_row >= ","mark size ","@progress_row_max > "," output_single "," output? ","@progress_style == "]}," Test Unit TestCase run_test":{"type":"method","name":"run_test","children":[],"call":[" __send__ "," notify "," class "," class get_attribute "," add_pass ","@internal_data test_data ","@internal_data have_test_data? "," [] ","redefined_info [] ","location [] ","locations collect "," class find_locations ","test_method arity < ","test_method arity ","test_method arity == "," method ","arity zero? "," omit ","(const\n  (cbase) :Ractor) ! "," []  [] "," class find_locations  collect "," class find_ class find_locations  "," method  arity < ","test_method test_method arity  < "," method  arity ","test_method test_method arity  "," method  arity == ","test_method test_method arity  == ","test_method arity  zero? "]}," Test Unit TestCase shutdown":{"type":"method","name":"shutdown","children":[],"call":[]}," Test Unit TestCase startup":{"type":"method","name":"startup","children":[],"call":[]}," Test Unit Diff folded_readable":{"type":"method","name":"folded_readable","children":[],"call":[" readable "," fold "]}," Test Unit Diff fold":{"type":"method","name":"fold","children":[],"call":["(send\n  (send\n    (lvar :string) :split\n    (regexp\n      (str \"\\\\r?\\\\n\")\n      (regopt))) :collect) join ","line gsub ","string split collect ","string split "]}," Test Unit Diff need_fold?":{"type":"method","name":"need_fold?","children":[],"call":[]}," Test Unit MixColor ==":{"type":"method","name":"==","children":[],"call":[" colors == ","other colors "," colors "," class === "," class "]}," Test Unit Color ==":{"type":"method","name":"==","children":[],"call":["(send nil :name) == ","other underline? ","other italic? ","other bold? ","other intensity? ","other foreground? ","other name "," underline? "," italic? "," bold? "," intensity? "," foreground? "," name "," class === "," class ","other background? "," background? "]}," Test Unit Color underline?":{"type":"method","name":"underline?","children":[],"call":[]}," Test Unit Color italic?":{"type":"method","name":"italic?","children":[],"call":[]}," Test Unit Color bold?":{"type":"method","name":"bold?","children":[],"call":[]}," Test Unit Color intensity?":{"type":"method","name":"intensity?","children":[],"call":[]}," Test Unit Color foreground?":{"type":"method","name":"foreground?","children":[],"call":[" background? ! "," background? "]}," Test Unit ColorScheme make_color":{"type":"method","name":"make_color","children":[],"call":["Color  new ","normalized_color_spec []= ","key == ","key to_sym ","color_spec each ","color_spec is_a? ","key to_sym  == ","key to_sym  to_sym "]}," Test Unit ColorScheme to_hash":{"type":"method","name":"to_hash","children":[],"call":["hash []= ","@scheme each "]}," Test Unit ColorScheme each":{"type":"method","name":"each","children":[],"call":["@scheme each "]}," Test Unit ColorScheme []=":{"type":"method","name":"[]=","children":[],"call":["@scheme []= "," make_color ","name to_s ","@@schemes []= ","id to_s "," new ","scheme_or_spec is_a? ","@ new  []= ","@@ new s []= "," new _or_spec is_a? "]}," Test Unit ColorScheme []":{"type":"method","name":"[]","children":[],"call":["@scheme [] ","name to_s ","@@schemes [] ","id to_s "]}," Test Unit ColorScheme initialize":{"type":"method","name":"initialize","children":[],"call":[" []= ","scheme_spec each "]}," Test Unit ColorScheme all":{"type":"method","name":"all","children":[],"call":["@@schemes merge "," default "]}," Test Unit ColorScheme default":{"type":"method","name":"default","children":[],"call":[" new ","Color  new ","Color  new + "," default_for_8_colors "," default_for_256_colors "," available_colors == "," available_colors "," available_colors >= "]}," Test Unit AutoRunner load_config":{"type":"method","name":"load_config","children":[],"call":["@runner_options merge ","runner_options []= ","key to_sym ","ColorScheme  [] ","key == ","(or\n  (send\n    (lvar :config) :[]\n    (dstr\n      (begin\n        (lvar :runner_name))\n      (str \"_options\")))\n  (hash)) each ","config [] ","ColorScheme  []= ","(or\n  (send\n    (lvar :config) :[]\n    (str \"color_schemes\"))\n  (hash)) each "," class collector "," class "," class runner ","YAML  load ","File  read "," require ","@default_arguments concat ","value split ","@runner_options merge  merge ","key to_sym  to_sym ","key to_sym  == ","(or\n  (send\n    (lvar :config) :[]\n    (dstr\n      (begin\n        (lvar :config [] ))\n      (str \"_options\")))\n  (hash)) each ","(or\n  (send\n    (lvar :YAML  load ) :[]\n    (dstr\n      (begin\n        (lvar :runner_name))\n      (str \"_options\")))\n  (hash)) each ","YAML  load  [] ","(or\n  (send\n    (lvar :YAML  load ) :[]\n    (str \"color_schemes\"))\n  (hash)) each ","ColorScheme  []  split "]}," Test Unit AutoRunner register_color_scheme":{"type":"method","name":"register_color_scheme","children":[],"call":["ColorScheme  []= "]}," Test Unit AutoRunner collector":{"type":"method","name":"collector","children":[],"call":["COLLECTORS  [] ","id to_s "]}," Test Unit AutoRunner runner":{"type":"method","name":"runner","children":[],"call":["RUNNERS  [] ","id to_s "]}," Test Unit Assertions AssertExceptionHelper expected_object?":{"type":"method","name":"expected_object?","children":[],"call":["expected_object == ","expected_object message == ","actual_exception message ","expected_object message ","expected_object class == ","actual_exception class ","expected_object class ","equal_method owner == ","equal_method owner ","equal_method respond_to? ","expected_object method ","@expected_objects any? "," fallback_exception_object_equal ","expected_object method  owner == ","expected_object method  owner ","expected_object method  respond_to? "]}," Test Unit Assertions AssertExceptionHelper expected_module?":{"type":"method","name":"expected_module?","children":[],"call":["actual_exception is_a? ","@expected_modules any? "]}," Test Unit Assertions AssertExceptionHelper expected_class?":{"type":"method","name":"expected_class?","children":[],"call":["actual_exception send ","@expected_classes any? ","actual_exception __send__ "]}," Test Unit Assertions AssertExceptionHelper split_expected_exceptions":{"type":"method","name":"split_expected_exceptions","children":[],"call":["exception_classes << ","@test_case send ","Should expect a class of exception,  + ","Exception  >= ","exception_objects << ","exception_type is_a? ","exception_modules << ","exception_type instance_of? ","expected_exceptions each ","@test_case __send__ ","@test_case flunk ","<?> must be  + + + ","<?> must be  + + ","<?> must be  + "," exception_class? "," exception_object? "]}," Test Unit Assertions AssertExceptionHelper expected?":{"type":"method","name":"expected?","children":[],"call":[" expected_object? "," expected_module? "," expected_class? "]}," Test Unit Assertions AssertExceptionHelper expected_exceptions":{"type":"method","name":"expected_exceptions","children":[],"call":["exceptions [] ","exceptions size == ","exceptions size ","WrappedException  new ","exception is_a? ","@expected_exceptions collect "]}," Test Unit Assertions AssertExceptionHelper initialize":{"type":"method","name":"initialize","children":[],"call":[" split_expected_exceptions "]}," Test Unit Assertions AssertExceptionHelper WrappedException method_missing":{"type":"method","name":"method_missing","children":[],"call":["@exception send ","@exception __send__ "]}," Test Unit Assertions AssertExceptionHelper WrappedException inspect":{"type":"method","name":"inspect","children":[],"call":["@exception inspect ","@exception message inspect ","@exception message ","@exception class inspect ","@exception class ","inspect_method owner == ","inspect_method owner ","inspect_method respond_to? ","@exception method "," default_inspect? ","inspected << ","@exception backtrace each ","@exception backtrace ","(or\n  (send\n    (ivar :@exception) :backtrace)\n  (array)) empty? ","@exception method  owner == ","@exception method  owner ","@exception method  respond_to? "]}," Test Unit Assertions AssertExceptionHelper WrappedException initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Test Unit Assertions AssertionMessage delayed_diff":{"type":"method","name":"delayed_diff","children":[],"call":["diff << ","Diff  folded_readable ","Diff  need_fold? ","(str \"^[-+]\") !~ ","Diff  readable "," convert ","to is_a? ! ","to is_a? ","from is_a? ! ","from is_a? "," delayed_literal "," diff_target_string? ! "," diff_target_string? ","to nil? ","from nil? "," prepare_for_diff ","Diff  readable  << "," convert  is_a? ! "," convert  is_a? "," Diff  readable _target_string? ! "," Diff  readable _target_string? "," convert  nil? "," prepare_for_Diff  readable  "]}," Test Unit Assertions _assert_raise":{"type":"method","name":"_assert_raise","children":[],"call":["assert_expected_exception call "," assert_block "," build_message ","<?> exception expected  + ","assert_exception_helper expected_exceptions ","AssertExceptionHelper  new ","args pop ","args last is_a? ","args last "," _wrap_assertion ","<?> exception was expected  + ","assert_assert_exception_helper expected_exceptions _exception call "," build_args pop  ","<?> exception assert_exception_helper expected_exceptions   + ","assert_exception_helper assert_exception_helper expected_exceptions _exceptions ","AssertExceptionHelper  new  expected_exceptions ","<?> exception was assert_exception_helper expected_exceptions   + "]}," Test Unit Assertions assert_not_const_defined":{"type":"method","name":"assert_not_const_defined","children":[],"call":["object const_defined? ! ","object const_defined? "," assert_block "," build_message "," _wrap_assertion "]}," Test Unit Assertions assert_const_defined":{"type":"method","name":"assert_const_defined","children":[],"call":["object const_defined? "," assert_block "," build_message "," _wrap_assertion "]}," Test Unit Assertions assert_raise_message":{"type":"method","name":"assert_raise_message","children":[],"call":["expected == ","expected =~ ","expected is_a? "," assert_block "," build_message ","<?> exception message expected but was\n + ","AssertionMessage  delayed_diff ","exception message ","<?> exception message expected  + "," _wrap_assertion ","<?> exception message was expected  + ","AssertionMessage  delayed_AssertionMessage  delayed_diff  "]}," Test Unit Assertions assert_fail_assertion":{"type":"method","name":"assert_fail_assertion","children":[],"call":[" assert_block "," build_message "," _wrap_assertion "]}," Test Unit Assertions assert_compare":{"type":"method","name":"assert_compare","children":[],"call":["expected send "," assert_block "," build_message ","operator to_s "," assert_send "," _wrap_assertion ","expected __send__ "]}," Test Unit Assertions assert_throw":{"type":"method","name":"assert_throw","children":[],"call":[" flunk "," build_message ","<?> expected to be thrown but\n + ","tag [] intern ","tag [] ","tag [] == "," raise ","UncaughtThrow  [] =~ ","error message ","UncaughtThrow  [] ","error class "," assert_block ","proc call "," catch "," block_given? "," assert_instance_of "," _wrap_assertion ","AssertionMessage  normalize_tag ","tag nil? ","extractor extract_tag ","ThrowTagExtractor  new ","<?> was expected to be thrown but\n + ","tag [] intern  [] intern ","AssertionMessage  normalize_tag  [] intern ","extractor extract_tag  [] intern ","tag [] intern  [] ","AssertionMessage  normalize_tag  [] ","extractor extract_tag  [] ","tag [] intern  [] == ","AssertionMessage  normalize_tag  [] == ","extractor extract_tag  [] == ","AssertionMessage  normalize_tag [] intern  ","AssertionMessage  normalize_AssertionMessage  normalize_tag  ","AssertionMessage  normalize_extractor extract_tag  ","tag [] intern  nil? ","AssertionMessage  normalize_tag  nil? ","extractor extract_tag  nil? ","extractor extract_tag [] intern  ","extractor extract_AssertionMessage  normalize_tag  ","extractor extract_extractor extract_tag  ","ThrowTagExtractor  new  extract_tag "]}," Test Unit Assertions assert_raise_kind_of":{"type":"method","name":"assert_raise_kind_of","children":[],"call":[" _assert_raise ","assert_exception_helper expected? "," assert_block "," build_message ","<?> family exception expected  + ","assert_exception_helper expected_exceptions ","Proc  new ","assert_exception_helper assert_exception_helper expected_exceptions ? ","<?> family exception assert_exception_helper expected_exceptions   + ","assert_exception_helper assert_exception_helper expected_exceptions _exceptions "]}," Test Unit Util MethodOwnerFinder find":{"type":"method","name":"find","children":[],"call":["object class ","parent const_get ","owner_name split inject ","owner_name split ","mod to_s == ","mod to_s ","ObjectSpace  each_object ","method to_s ","method owner ","method respond_to? ","object method ","object method  to_s ","object method  owner ","object method  respond_to? ","object object method  "]}," Test Unit Priority disable":{"type":"method","name":"disable","children":[],"call":[]}," Test Unit Priority enable":{"type":"method","name":"enable","children":[],"call":[" require "]}," Test Unit Priority enabled?":{"type":"method","name":"enabled?","children":[],"call":[]}," Test Unit Assertions AssertExceptionHelper fallback_exception_object_equal":{"type":"method","name":"fallback_exception_object_equal","children":[],"call":["expected_object message == ","actual_exception message ","expected_object message ","expected_object class == ","actual_exception class ","expected_object class ","owner == ","Util MethodOwnerFinder  find ","Util MethodOwnerFinder  find  == "]}," Test Unit Assertions AssertExceptionHelper WrappedException default_inspect?":{"type":"method","name":"default_inspect?","children":[],"call":["default_inspect_method bind call == ","@exception inspect ","default_inspect_method bind call ","default_inspect_method bind ","Exception  instance_method ","inspect_method owner == ","inspect_method owner ","inspect_method respond_to? ","@exception method ","Exception  instance_method  bind call == ","default_@exception method  bind call == ","Exception  instance_method  bind call ","default_@exception method  bind call ","Exception  instance_method  bind ","default_@exception method  bind ","@exception method  owner == ","@exception method  owner ","@exception method  respond_to? "]}," Test Unit TestCase sort_test_names_in_defined_order":{"type":"method","name":"sort_test_names_in_defined_order","children":[],"call":["test1 <=> ","test1_defined_order <=> ","@@added_methods index ","test_names sort ","added_methods index ","@@added_methods [] ","@@added_methods index  <=> ","added_methods index  <=> ","@@@@added_methods []  index ","@@added_methods []  index ","@@@@added_methods []  [] "]}," Test Unit TestCase sort_test_names_in_random_order":{"type":"method","name":"sort_test_names_in_random_order","children":[],"call":[" rand ","test_names size ","test_names sort_by "]}," Test Unit TestCase sort_test_names_in_alphabetic_order":{"type":"method","name":"sort_test_names_in_alphabetic_order","children":[],"call":["test_names sort "]}," Test Unit TestCase collect_test_names":{"type":"method","name":"collect_test_names","children":[],"call":[" send "," test_order ","method_name =~ ","method_names find_all ","name to_s "," public_instance_methods collect "," public_instance_methods "]}," Test Unit TestCase test_order=":{"type":"method","name":"test_order=","children":[],"call":["@@test_orders []= "]}," Test Unit TestCase test_order":{"type":"method","name":"test_order","children":[],"call":["AVAILABLE_ORDERS  first ","@@test_orders [] "," ancestors each "," ancestors ","@@test_@@test_orders [] s [] "]}," Test Unit TestCase method_added":{"type":"method","name":"method_added","children":[],"call":["@@added_methods << ","name to_s ","added_methods << "," attribute ","added_methods include? ","@@added_methods [] ","_added_methods << ","_added_methods include? "," added_methods "," caller "," method_locations << "," method_locations ","line to_i "," caller [] split "," caller [] ","_attributes [] "," attributes_table [] "," attributes_table ","added_method_names []= "," find_attribute ","added_method_names key? ","@@added_method_names [] ","File  expand_path ","AutoRunnerLoader  check ","location lineno ","location path ","location absolute_path "," caller_locations [] "," caller_locations "," respond_to? "," add_method_location "," added_methods  << "," added_methods  include? "," method_ caller_locations [] s << "," method_ caller_locations [] s ","line to_i  to_i ","location lineno  to_i ","location line to_i no ","location location lineno no "," caller_locations []  lineno "," caller_locations []  path "," caller_locations []  absolute_path "," caller_ caller_locations [] s [] "," caller_ caller_locations [] s "," add_method_ caller_locations []  "]}," Test Unit Priority Checker available_priorities":{"type":"method","name":"available_priorities","children":[],"call":["(send\n  (send nil :methods\n    (false)) :collect) compact ","name to_s "," methods collect "," methods "]}," Test Unit Priority available_values":{"type":"method","name":"available_values","children":[],"call":["Checker  available_priorities "]}," Test Unit Priority default=":{"type":"method","name":"default=","children":[],"call":[]}," Test Unit Priority default":{"type":"method","name":"default","children":[],"call":[]}," Test Unit Assertions AssertionMessage MaybeContainer inspect":{"type":"method","name":"inspect","children":[],"call":["@formatter call ","AssertionMessage  convert ","values join ","@value collect ","@value is_a? "]}," Test Unit Assertions AssertionMessage MaybeContainer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Test Unit Assertions AssertionMessage diff_target_string?":{"type":"method","name":"diff_target_string?","children":[],"call":["string size < ","string size ","string bytesize < ","string bytesize ","string respond_to? "," max_diff_target_string_size "]}," Test Unit Assertions AssertionMessage maybe_container":{"type":"method","name":"maybe_container","children":[],"call":["MaybeContainer  new "]}," Test Unit Assertions assert_not_predicate":{"type":"method","name":"assert_not_predicate","children":[],"call":["actual ! "," assert_block "," build_message ","AssertionMessage  literal ","<?>.? is false value expected but was\n + ","object send "," assert_respond_to "," _wrap_assertion ","object __send__ ","object send  ! ","object __send__  ! "]}," Test Unit Assertions assert_predicate":{"type":"method","name":"assert_predicate","children":[],"call":[" assert_block "," build_message ","AssertionMessage  literal ","<?>.? is true value expected but was\n + ","object send "," assert_respond_to "," _wrap_assertion ","object __send__ "]}," Test Unit UI TestRunner prepare_for_diff":{"type":"method","name":"prepare_for_diff","children":[],"call":["Assertions AssertionMessage  prepare_for_diff "]}," Test Unit UI TestRunner diff_target_string?":{"type":"method","name":"diff_target_string?","children":[],"call":["Assertions AssertionMessage  diff_target_string? "]}," Test Unit UI Tap TestRunner puts":{"type":"method","name":"puts","children":[],"call":["@output flush ","@output puts "]}," Test Unit UI Tap TestRunner test_finished":{"type":"method","name":"test_finished","children":[],"call":[" puts "]}," Test Unit UI Tap TestRunner test_started":{"type":"method","name":"test_started","children":[],"call":[]}," Test Unit UI Tap TestRunner finished":{"type":"method","name":"finished","children":[],"call":[" puts ","@result to_s each_line ","@result to_s "]}," Test Unit UI Tap TestRunner started":{"type":"method","name":"started","children":[],"call":[" puts ","@suite size "]}," Test Unit UI Tap TestRunner add_fault":{"type":"method","name":"add_fault","children":[],"call":[" puts ","fault long_display each_line ","fault long_display ","fault short_display "]}," Test Unit UI Tap TestRunner start_mediator":{"type":"method","name":"start_mediator","children":[],"call":["@mediator run_suite "]}," Test Unit UI Tap TestRunner attach_to_mediator":{"type":"method","name":"attach_to_mediator","children":[],"call":["@mediator add_listener "," method "]}," Test Unit UI Tap TestRunner setup_mediator":{"type":"method","name":"setup_mediator","children":[],"call":[" attach_to_mediator ","TestRunnerMediator  new "]}," Test Unit UI Tap TestRunner start":{"type":"method","name":"start","children":[{"type":"method","name":"passed?","children":[],"asgn":[],"call":[]}],"call":[" start_mediator "," setup_mediator "]}," Test Unit UI Tap TestRunner initialize":{"type":"method","name":"initialize","children":[],"call":["@options [] "]}," Test Unit UI Emacs TestRunner output_fault_backtrace":{"type":"method","name":"output_fault_backtrace","children":[],"call":[" output ","backtrace each ","fault test_name ","fault test_name + + ","fault test_name + ","backtrace [] sub ","backtrace [] ","backtrace size == ","backtrace size ","fault location ","fault location  each ","fault location  [] sub ","fault location  [] ","fault location  size == ","fault location  size "]}," Test Unit UI Console ColorizedReadableDiffer diff_line":{"type":"method","name":"diff_line","children":[],"call":[" output ","operation call ","to_operations each "," output_single "," color ","to_operations empty? "," raise ","to_operations << ","  * ","Proc  new ","from_line [] ","to_line [] ","from_width - ","to_width < ","to_width - ","from_width < "," compute_width ","_operations each ","tag == "," line_operations ","mark_operations each ","mark_operations empty? ","mark_operations << ","+ * ","- * ","? * "," compute_width  - "," compute_width  < "]}," Test Unit UI Console ColorizedReadableDiffer tag_difference":{"type":"method","name":"tag_difference","children":[],"call":[" tag "]}," Test Unit UI Console ColorizedReadableDiffer tag_equal":{"type":"method","name":"tag_equal","children":[],"call":[" tag "]}," Test Unit UI Console ColorizedReadableDiffer tag_inserted":{"type":"method","name":"tag_inserted","children":[],"call":[" tag "]}," Test Unit UI Console ColorizedReadableDiffer tag_deleted":{"type":"method","name":"tag_deleted","children":[],"call":[" tag "]}," Test Unit UI Console ColorizedReadableDiffer tag":{"type":"method","name":"tag","children":[],"call":[" output "," output_single ","contents each "," color "]}," Test Unit UI Console ColorizedReadableDiffer default_ratio":{"type":"method","name":"default_ratio","children":[],"call":[]}," Test Unit UI Console ColorizedReadableDiffer cut_off_ratio":{"type":"method","name":"cut_off_ratio","children":[],"call":[]}," Test Unit UI Console ColorizedReadableDiffer color":{"type":"method","name":"color","children":[],"call":["@runner send ","@runner __send__ "]}," Test Unit UI Console ColorizedReadableDiffer output":{"type":"method","name":"output","children":[],"call":["@runner send ","@runner __send__ "]}," Test Unit UI Console ColorizedReadableDiffer output_single":{"type":"method","name":"output_single","children":[],"call":["@runner send ","@runner __send__ "]}," Test Unit UI Console ColorizedReadableDiffer need_diff?":{"type":"method","name":"need_diff?","children":[],"call":["(sym :replace) include? "," operations each "," operations "," one_line_all_change? "]}," Test Unit UI Console ColorizedReadableDiffer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Test Unit UI Console TestRunner indent":{"type":"method","name":"indent","children":[],"call":["  * "," output? "]}," Test Unit UI Console TestRunner test_suite_finished":{"type":"method","name":"test_suite_finished","children":[],"call":["@test_suites pop "]}," Test Unit UI Console TestRunner test_suite_started":{"type":"method","name":"test_suite_started","children":[],"call":[" output "," output_single "," color "," indent ","suite name ","suite test_case nil? ","suite test_case ","suite name sub ","Regexp  escape ","last_test_suite name ","@test_suites << ","@test_suites last "," suite_name ","@test_suites last  name "," suite name sub  "]}," Test Unit UI Console TestRunner output_fault_message":{"type":"method","name":"output_fault_message","children":[],"call":["differ diff "," output ","differ need_diff? ","ColorizedReadableDiffer  new ","to split ","from split "," prepare_for_diff ","fault actual ","fault expected "," output_single "," color ","fault inspected_actual ","fault inspected_expected ","fault user_message ","to_lines << ","fault actual encoding name ","fault actual encoding ","from_lines << ","fault expected encoding name ","fault expected encoding ","fault expected encoding != ","fault actual respond_to? ","fault expected respond_to? ","line chomp ","fault message each_line ","fault message ","message each_line ","message include? ","message nil? ","ColorizedReadableDiffer  new  diff ","ColorizedReadableDiffer  new  need_diff? ","fault user_fault message  ","to split  << ","from split  << ","fault fault message  each_line ","fault fault message  ","fault message  each_line ","fault message  include? ","fault message  nil? "]}," Test Unit UI Console TestRunner output_fault_backtrace":{"type":"method","name":"output_fault_backtrace","children":[],"call":[" output ","i == ","backtrace size - ","backtrace size ","i zero? ","backtrace each_with_index ","fault test_name ","fault test_name + + ","fault test_name + ","backtrace [] sub ","backtrace [] ","backtrace size == ","fault location "," output_code_snippet "," fault_color ","detector split_backtrace_entry ","detector target? ","FaultLocationDetector  new ","backtrace reverse ","backtrace each_with_index reverse_each ","lines empty? "," fetch_code_snippet ","fault location  size - ","backtrace reverse  size - ","fault location  size ","backtrace reverse  size ","fault location  each_with_index ","backtrace reverse  each_with_index ","fault location  [] sub ","backtrace reverse  [] sub ","fault location  [] ","backtrace reverse  [] ","fault location  size == ","backtrace reverse  size == ","detector split_fault location _entry ","detector split_backtrace reverse _entry ","FaultLocationDetector  new  split_backtrace_entry ","FaultLocationDetector  new  target? ","fault location  reverse ","backtrace reverse  reverse ","fault location  each_with_index reverse_each ","backtrace reverse  each_with_index reverse_each "," fetch_code_snippet  empty? "]}," Test Unit UI Console TestRunner output_fault":{"type":"method","name":"output_fault","children":[],"call":[" output "," fault_color "," format_fault split "," format_fault "," output_fault_message "," output_fault_backtrace "," output_single ","fault label ","fault inspected_actual ","fault inspected_expected ","fault is_a? "]}," Test Unit Failure compute_diff":{"type":"method","name":"compute_diff","children":[],"call":["Assertions AssertionMessage  delayed_diff inspect ","Assertions AssertionMessage  delayed_diff "]}," Test Unit Failure diff":{"type":"method","name":"diff","children":[],"call":[" compute_diff "]}," Test Unit Diff ReadableDiffer compute_width":{"type":"method","name":"compute_width","children":[],"call":["_end - ","line compute_width ","line is_a? ","UTF8Line  wide_character? ","utf8_line each_codepoint ","line [] encode ","line [] ","Encoding  compatible? ","line encoding ","line respond_to? ","line [] encode  each_codepoint "]}," Test Unit Diff ReadableDiffer line_operations":{"type":"method","name":"line_operations","children":[],"call":["matcher operations ","SequenceMatcher  new "," method ","UTF8Line  new ","$KCODE == ","from_line respond_to? ! ","from_line respond_to? ","SequenceMatcher  new  operations ","UTF8Line  new  respond_to? ! ","UTF8Line  new  respond_to? "]}," Test Unit Diff ReadableDiffer tag":{"type":"method","name":"tag","children":[],"call":["@result << ","contents each ","mark + "]}," Test Unit Diff ReadableDiffer cut_off_ratio":{"type":"method","name":"cut_off_ratio","children":[],"call":[]}," Test Unit Diff ReadableDiffer default_ratio":{"type":"method","name":"default_ratio","children":[],"call":[]}," Test Unit Diff ReadableDiffer operations":{"type":"method","name":"operations","children":[],"call":["matcher operations ","SequenceMatcher  new ","@operations nil? ","SequenceMatcher  new  operations ","matcher operations  nil? "]}," Test Unit Diff UTF8Line compute_width":{"type":"method","name":"compute_width","children":[],"call":[" class wide_character? ","@characters [] "," class ","start upto ","_end - "]}," Test Unit Diff UTF8Line to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Test Unit Diff UTF8Line size":{"type":"method","name":"size","children":[],"call":["@characters size "]}," Test Unit Diff UTF8Line each":{"type":"method","name":"each","children":[],"call":["@characters each "]}," Test Unit Diff UTF8Line []":{"type":"method","name":"[]","children":[],"call":["result pack ","result respond_to? ","@characters [] ","@characters []  pack ","@characters []  respond_to? "]}," Test Unit Diff UTF8Line initialize":{"type":"method","name":"initialize","children":[],"call":["@line unpack "]}," Test Unit Diff UTF8Line binary_search_ranges":{"type":"method","name":"binary_search_ranges","children":[],"call":[" binary_search_ranges ","ranges [] ","half + ","character < ","range begin ","range include? ","ranges size / ","ranges size ","ranges [] include? ","ranges size == ","ranges size zero? "," binary_search_ranges [] s ","ranges [] s [] ","ranges size /  + ","ranges []  begin ","ranges []  include? ","ranges [] s size / ","ranges [] s size ","ranges [] s [] include? ","ranges [] s size == ","ranges [] s size zero? "]}," Test Unit Diff UTF8Line wide_character?":{"type":"method","name":"wide_character?","children":[],"call":[" binary_search_ranges "]}," Test Unit AutoRunner default_runner=":{"type":"method","name":"default_runner=","children":[],"call":[]}," Test Unit Assertions AssertionMessage prepare_for_diff":{"type":"method","name":"prepare_for_diff","children":[],"call":[" diff_target_string? "," convert ","to is_a? ! ","to is_a? ","from is_a? ! ","from is_a? "," ensure_diffable_string "," convert  is_a? ! "," ensure_diffable_string  is_a? ! "," convert  is_a? "," ensure_diffable_string  is_a? "]}," Test Unit AssertionFailedError initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "," debug_on_failure "]}," Test Unit TestCase description":{"type":"method","name":"description","children":[],"call":[" name "," [] "," attribute ","(lvar :target) compact "]}," Test Unit TestCase test":{"type":"method","name":"test","children":[],"call":[" description "," define_method ","(str \"test_\") to_sym ","test_description gsub "," attribute "," raise ","n_arguments > ","test_description_or_targets size ","test_description nil? ","test_description_or_targets first "," block_given? ","block source_location ","block respond_to? ","AutoRunnerLoader  check ","targets each ","test_description_or_targets first  gsub ","test_description_or_targets size  > ","test_description_or_targets first _or_targets size ","test_description_or_targets first  nil? ","test_description_or_targets first _or_targets first "]}," Test Unit Assertions AssertionMessage max_diff_target_string_size":{"type":"method","name":"max_diff_target_string_size","children":[],"call":[" Integer ","ENV  [] "]}," Test Unit Assertions assert_alias_method":{"type":"method","name":"assert_alias_method","children":[],"call":["alias_method == "," assert_block "," build_message ","<?> is alias of\n + ","object method ","find_method_failure_message call ","object class ","AssertionMessage  literal ","<?>.? doesn't exist\n + ","Proc  new "," _wrap_assertion ","object method  == "]}," Test Unit Pending critical?":{"type":"method","name":"critical?","children":[],"call":[]}," Test Unit Omission critical?":{"type":"method","name":"critical?","children":[],"call":[]}," Test Unit NotificationHandler handle_notified_error":{"type":"method","name":"handle_notified_error","children":[],"call":[" add_notification ","Notification  new ","exception message "," filter_backtrace ","exception backtrace "," name ","exception is_a? "," add_Notification  new  "]}," Test Unit Notification critical?":{"type":"method","name":"critical?","children":[],"call":[]}," Test Unit Failure critical?":{"type":"method","name":"critical?","children":[],"call":[]}," Test Unit Error critical?":{"type":"method","name":"critical?","children":[],"call":[]}," Test Unit AutoRunner load_global_config":{"type":"method","name":"load_global_config","children":[],"call":[" load_config ","File  exist? "," global_config_file "," global_config_ global_config_file  "]}," Test Unit AutoRunner global_config_file":{"type":"method","name":"global_config_file","children":[],"call":["File  expand_path "]}," Test Unit Assertions _assert_in_delta_message":{"type":"method","name":"_assert_in_delta_message","children":[],"call":[" build_message ","arguments concat ","format << ","expected_float + ","expected_float - ","normalized_expected - < ","normalized_expected - ","normalized_actual < ","delta to_f ","actual_float to_f ","expected_float to_f ","normalized_expected + ","normalized_actual <= ","options [] ","expected_float to_f  - < ","expected_float to_f  - ","actual_float to_f  < ","expected_float to_f  + ","actual_float to_f  <= "]}," Test Unit Assertions _assert_in_delta_validate_arguments":{"type":"method","name":"_assert_in_delta_validate_arguments","children":[],"call":[" assert_operator "," assert_respond_to ","The arguments must respond to to_f;  + ","(pair\n  (lvar :expected_float)\n  (str \"first float\")) each ","delta to_f ","delta to_f  to_f "]}," Test Unit Util Output capture_output":{"type":"method","name":"capture_output","children":[],"call":["error string ","output string ","StringIO  new "," require ","StringIO  new  string "]}," Test Unit UI TestRunner start_mediator":{"type":"method","name":"start_mediator","children":[],"call":["@mediator run_suite ","@mediator run "]}," Test Unit UI TestRunner attach_listeners":{"type":"method","name":"attach_listeners","children":[],"call":["listener attach_to_mediator ","@listeners each "]}," Test Unit UI TestRunner setup_mediator":{"type":"method","name":"setup_mediator","children":[],"call":["TestRunnerMediator  new "]}," Test Unit UI TestRunner start":{"type":"method","name":"start","children":[],"call":[" start_mediator "," attach_listeners "," attach_to_mediator "," setup_mediator "]}," Test Unit TestResult pass_percentage":{"type":"method","name":"pass_percentage","children":[],"call":["100.0 * ","@pass_count / ","n_tests to_f ","n_tests zero? ","@run_count - "," omission_count ","@run_count -  to_f ","@run_count -  zero? "]}," Test Unit TestResult status":{"type":"method","name":"status","children":[],"call":[" failure_count > "," failure_count "," error_count > "," error_count "," notification_count > "," notification_count "," omission_count > "," omission_count "," pending_count > "," pending_count "," passed? "]}," Test Unit TestResult add_pass":{"type":"method","name":"add_pass","children":[],"call":[]}," Test Unit TestCase add_pass":{"type":"method","name":"add_pass","children":[],"call":[" current_result add_pass "," current_result "]}," Test Unit Assertions assert_path_not_exist":{"type":"method","name":"assert_path_not_exist","children":[],"call":["File  exist? ! ","File  exist? "," assert_block "," build_message "," _wrap_assertion "]}," Test Unit Assertions assert_path_exist":{"type":"method","name":"assert_path_exist","children":[],"call":["File  exist? "," assert_block "," build_message "," _wrap_assertion "]}," Test Unit AutoRunner prepare":{"type":"method","name":"prepare","children":[],"call":["handler call ","PREPARE_HOOKS  each ","PREPARE_HOOKS  << ","Proc  new "]}," Test Unit Collector Load add_require_failed_test_suite":{"type":"method","name":"add_require_failed_test_suite","children":[{"type":"method","name":"name","children":[],"asgn":[],"call":[]},{"type":"method","name":"priority","children":[],"asgn":[],"call":[]},{"type":"method","name":"filter_backtrace","children":[],"asgn":[],"call":["@require_failed_exception backtrace "]}],"call":[" add_suite ","require_failed_omissions suite ","@require_failed_exception backtrace "," omit ","exception message "," define_method ","info [] ","normalized_path gsub ","path to_s gsub ","path to_s ","require_failed_infos each ","require_failed_omissions class_eval ","Class  new ","@require_failed_infos empty? ","require_failed_errors suite "," raise ","exception backtrace ","exception class ","require_failed_errors class_eval ","Class  new  suite ","@require_failed_info []  backtrace ","info []  message ","normalized_path gsub  gsub ","path to_s gsub  gsub ","normalized_info []  gsub ","info []  to_s gsub ","info []  to_s ","Class  new  class_eval ","info []  backtrace ","info []  class "]}," Test Unit Assertions AssertionMessage HashInspector each_pair":{"type":"method","name":"each_pair","children":[],"call":[" class normalize ","@hash [] "," class ","@hash keys sort each ","@hash keys sort ","@hash keys ","Inspector  new ","keys each ","keys sort ","@hash keys sort  sort each ","@hash @hash keys  sort each ","@hash keys sort  sort ","@hash @hash keys  sort ","@hash keys sort  ","@hash @hash keys  ","keys sort  each ","@hash keys  each ","keys sort  sort ","@hash keys  sort "]}," Test Unit Assertions AssertionMessage HashInspector pretty_print_cycle":{"type":"method","name":"pretty_print_cycle","children":[],"call":["q text ","@hash empty? ","@hash pretty_print_cycle "]}," Test Unit Assertions AssertionMessage HashInspector pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp ","q breakable ","q group ","q text ","q seplist "]}," Test Unit Assertions AssertionMessage HashInspector inspect":{"type":"method","name":"inspect","children":[],"call":["@hash inspect "]}," Test Unit Assertions AssertionMessage HashInspector initialize":{"type":"method","name":"initialize","children":[],"call":["@hash []= ","Inspector  cached_new ","hash each "]}," Test Unit Assertions AssertionMessage HashInspector normalize":{"type":"method","name":"normalize","children":[],"call":[" new "," target? "]}," Test Unit Assertions AssertionMessage HashInspector target?":{"type":"method","name":"target?","children":[],"call":["object == ","object is_a? ","ENV  equal? "]}," Test Unit Assertions AssertionMessage ensure_diffable_string":{"type":"method","name":"ensure_diffable_string","children":[],"call":["string dup force_encoding ","string dup ","string encoding ascii_compatible? ! ","string encoding ascii_compatible? ","string encoding ","string respond_to? ","string dup force_encoding  dup force_encoding ","string dup force_encoding  dup ","string dup force_encoding  encoding ascii_compatible? ! ","string dup force_encoding  encoding ascii_compatible? ","string dup force_encoding  encoding ","string dup force_encoding  respond_to? "]}," Test Unit Assertions assert_not_empty":{"type":"method","name":"assert_not_empty","children":[],"call":["object empty? ! ","object empty? "," assert_block "," build_message "," assert_respond_to "," _wrap_assertion "]}," Test Unit Assertions assert_empty":{"type":"method","name":"assert_empty","children":[],"call":["object empty? "," assert_block "," build_message "," assert_respond_to "," _wrap_assertion "]}," Test Unit Assertions assert_not_include":{"type":"method","name":"assert_not_include","children":[],"call":["collection include? ! ","collection include? "," assert_block "," build_message "," assert_respond_to "," _wrap_assertion "]}," Test Unit Assertions assert_include":{"type":"method","name":"assert_include","children":[],"call":["collection include? "," assert_block "," build_message "," assert_respond_to "," _wrap_assertion "]}," Test Unit Assertions assert_not_send":{"type":"method","name":"assert_not_send","children":[],"call":["result ! ","receiver __send__ "," assert_block "," build_message ","AssertionMessage  delayed_literal ","AssertionMessage  literal ","message_name to_s "," assert_operator ","assert_not_send requires at least a receiver  + ","send_array size "," assert_instance_of ","assert_not_send requires an array  + "," _wrap_assertion ","receiver __send__  ! "]}," Test Unit Assertions _assert_in_epsilon_message":{"type":"method","name":"_assert_in_epsilon_message","children":[],"call":[" build_message ","arguments concat ","format << ","normalized_expected + ","normalized_expected - ","normalized_actual <= ","normalized_actual < ","options [] ","normalized_expected * ","epsilon to_f ","actual_float to_f ","expected_float to_f ","expected_float to_f  + ","expected_float to_f  - ","actual_float to_f  <= ","actual_float to_f  < ","expected_float to_f  * "]}," Test Unit Assertions _assert_in_epsilon_validate_arguments":{"type":"method","name":"_assert_in_epsilon_validate_arguments","children":[],"call":[" assert_operator ","epsilon to_f "," assert_respond_to ","The arguments must respond to to_f;  + ","(pair\n  (lvar :expected_float)\n  (str \"first float\")) each ","epsilon to_f  to_f "]}," Test Unit Assertions assert_not_in_epsilon":{"type":"method","name":"assert_not_in_epsilon","children":[],"call":["(send\n  (lvar :normalized_expected_float) :-\n  (send\n    (lvar :actual_float) :to_f)) abs > ","(send\n  (lvar :normalized_expected_float) :-\n  (send\n    (lvar :actual_float) :to_f)) abs ","normalized_expected_float - ","actual_float to_f ","normalized_expected_float * ","epsilon to_f ","expected_float to_f "," assert_block "," _assert_in_epsilon_message "," _assert_in_epsilon_validate_arguments "," _wrap_assertion ","(send\n  (lvar :normalized_expected) :-\n  (lvar :normalized_actual)) abs > ","(send\n  (lvar :normalized_expected) :-\n  (lvar :normalized_actual)) abs ","normalized_expected - ","normalized_expected * "," raise "," assert_operator ","(send\n  (lvar :expected_float) :-\n  (lvar :actual_float)) abs > ","(send\n  (lvar :expected_float) :-\n  (lvar :actual_float)) abs ","expected_float - ","expected_float * ","(send\n  (lvar :expected_float to_f ) :-\n  (send\n    (lvar :actual_float) :to_f)) abs > ","(send\n  (lvar :expected_float to_f _float) :-\n  (send\n    (lvar :actual_float) :to_f)) abs > ","(send\n  (lvar :expected_float to_f ) :-\n  (send\n    (lvar :actual_float) :to_f)) abs ","(send\n  (lvar :expected_float to_f _float) :-\n  (send\n    (lvar :actual_float) :to_f)) abs ","expected_float to_f  - ","expected_float to_f _float - ","expected_float to_f  * ","expected_float to_f _float * ","(send\n  (lvar :normalized_expected) :-\n  (lvar :actual_float to_f )) abs > ","(send\n  (lvar :expected_float to_f ) :-\n  (lvar :normalized_actual)) abs > ","(send\n  (lvar :normalized_expected) :-\n  (lvar :actual_float to_f )) abs ","(send\n  (lvar :expected_float to_f ) :-\n  (lvar :normalized_actual)) abs "]}," Test Unit Assertions assert_in_epsilon":{"type":"method","name":"assert_in_epsilon","children":[],"call":["(send\n  (lvar :normalized_expected_float) :-\n  (send\n    (lvar :actual_float) :to_f)) abs <= ","(send\n  (lvar :normalized_expected_float) :-\n  (send\n    (lvar :actual_float) :to_f)) abs ","normalized_expected_float - ","actual_float to_f ","normalized_expected_float * ","epsilon to_f ","expected_float to_f "," assert_block "," _assert_in_epsilon_message "," _assert_in_epsilon_validate_arguments "," _wrap_assertion ","epsilon to_f ** ","normalized_expected_float zero? ","delta abs ","(send\n  (lvar :normalized_expected) :-\n  (lvar :normalized_actual)) abs <= ","(send\n  (lvar :normalized_expected) :-\n  (lvar :normalized_actual)) abs ","normalized_expected - ","normalized_expected * ","normalized_epsilon ** ","normalized_expected zero? "," raise "," assert_operator ","(send\n  (lvar :expected_float) :-\n  (lvar :actual_float)) abs <= ","(send\n  (lvar :expected_float) :-\n  (lvar :actual_float)) abs ","expected_float - ","expected_float * ","epsilon ** ","expected_float == ","expected_float zero? ","(send\n  (lvar :expected_float to_f ) :-\n  (send\n    (lvar :actual_float) :to_f)) abs <= ","(send\n  (lvar :expected_float to_f _float) :-\n  (send\n    (lvar :actual_float) :to_f)) abs <= ","(send\n  (lvar :expected_float to_f ) :-\n  (send\n    (lvar :actual_float) :to_f)) abs ","(send\n  (lvar :expected_float to_f _float) :-\n  (send\n    (lvar :actual_float) :to_f)) abs ","expected_float to_f  - ","expected_float to_f _float - ","expected_float to_f  * ","expected_float to_f _float * ","expected_float to_f  zero? ","expected_float to_f _float zero? ","normalized_expected_float *  abs ","epsilon to_f **  abs ","delta abs  abs ","normalized_expected *  abs ","normalized_epsilon **  abs ","expected_float *  abs ","epsilon **  abs ","(send\n  (lvar :normalized_expected) :-\n  (lvar :actual_float to_f )) abs <= ","(send\n  (lvar :expected_float to_f ) :-\n  (lvar :normalized_actual)) abs <= ","(send\n  (lvar :normalized_expected) :-\n  (lvar :actual_float to_f )) abs ","(send\n  (lvar :expected_float to_f ) :-\n  (lvar :normalized_actual)) abs ","epsilon to_f  ** "]}," Test Unit Assertions assert_not_in_delta":{"type":"method","name":"assert_not_in_delta","children":[],"call":["(send\n  (send\n    (lvar :expected_float) :to_f) :-\n  (send\n    (lvar :actual_float) :to_f)) abs > ","delta to_f ","(send\n  (send\n    (lvar :expected_float) :to_f) :-\n  (send\n    (lvar :actual_float) :to_f)) abs ","expected_float to_f - ","actual_float to_f ","expected_float to_f "," assert_block "," _assert_in_delta_message "," _assert_in_delta_validate_arguments "," _wrap_assertion ","(send\n  (lvar :normalized_expected) :-\n  (lvar :normalized_actual)) abs > ","(send\n  (lvar :normalized_expected) :-\n  (lvar :normalized_actual)) abs ","normalized_expected - ","(send\n  (lvar :expected_float) :-\n  (lvar :actual_float)) abs > ","(send\n  (lvar :expected_float) :-\n  (lvar :actual_float)) abs ","expected_float - ","(send\n  (lvar :normalized_expected) :-\n  (lvar :actual_float to_f )) abs > ","(send\n  (lvar :expected_float to_f ) :-\n  (lvar :normalized_actual)) abs > ","(send\n  (lvar :normalized_expected) :-\n  (lvar :actual_float to_f )) abs ","(send\n  (lvar :expected_float to_f ) :-\n  (lvar :normalized_actual)) abs ","expected_float to_f  - "]}," Test Unit Assertions assert_not_match":{"type":"method","name":"assert_not_match","children":[],"call":["regexp !~ "," assert_block "," build_message "," assert_instance_of ","<REGEXP> in assert_not_match(<REGEXP>, ...)  + "," _wrap_assertion ","pattern !~ ","Regexp  new ","Regexp  escape ","pattern is_a? ","Regexp  new  !~ ","Regexp  new  is_a? "]}," Test Unit Assertions assert_not_respond_to":{"type":"method","name":"assert_not_respond_to","children":[],"call":["object respond_to? ! ","object respond_to? "," assert_block "," build_message ","object class ","!<?>.respond_to\\?(?) expected\n + ","method respond_to? ","method kind_of? ","<?>.kind_of\\?(Symbol) or\n + "," _wrap_assertion "]}," Test Unit UI XML TestRunner output_test_suite":{"type":"method","name":"output_test_suite","children":[],"call":[" add_content ","test_suite elapsed_time ","test_suite start_time ","test_suite name "," open_tag ","test_case nil? ","test_suite test_case ","test_suite test_case  nil? ","test_suite test_suite test_case  "]}," Test Unit UI XML TestRunner output_test":{"type":"method","name":"output_test","children":[],"call":[" add_content ","test elapsed_time ","test start_time ","test method_name "," open_tag "]}," Test Unit UI XML TestRunner close_tag":{"type":"method","name":"close_tag","children":[],"call":["@output puts "," indent "]}," Test Unit UI XML TestRunner add_content":{"type":"method","name":"add_content","children":[],"call":["@output puts "," h "," indent ","content iso8601 ","content nil? ","content iso8601  iso8601 ","content iso8601  nil? "]}," Test Unit UI XML TestRunner open_tag":{"type":"method","name":"open_tag","children":[],"call":[" close_tag "," block_given? ","@output puts "," indent "]}," Test Unit UI XML TestRunner indent":{"type":"method","name":"indent","children":[],"call":["  * "]}," Test Unit UI XML TestRunner test_suite_finished":{"type":"method","name":"test_suite_finished","children":[],"call":[" add_content ","suite passed? "," output_test_suite "," open_tag ","suite test_case nil? ","suite test_case "]}," Test Unit UI XML TestRunner test_suite_started":{"type":"method","name":"test_suite_started","children":[],"call":[" output_test_suite "," open_tag "," add_content ","suite size ","suite test_case nil? ","suite test_case "]}," Test Unit UI XML TestRunner test_finished":{"type":"method","name":"test_finished","children":[],"call":[" add_content ","test passed? "," output_test "," open_tag "," output_test_suite "]}," Test Unit UI XML TestRunner test_started":{"type":"method","name":"test_started","children":[],"call":[" output_test "," open_tag "]}," Test Unit UI XML TestRunner finished":{"type":"method","name":"finished","children":[],"call":[" close_tag "," add_content ","@result passed? "]}," Test Unit UI XML TestRunner output_started":{"type":"method","name":"output_started","children":[],"call":[" open_tag "]}," Test Unit UI XML TestRunner started":{"type":"method","name":"started","children":[],"call":[" output_started "]}," Test Unit UI XML TestRunner result_fault":{"type":"method","name":"result_fault","children":[],"call":["fault critical? "," add_content ","fault label downcase ","fault label ","fault message ","fault actual ","fault respond_to? ","fault expected "," open_tag ","entry split ","fault location each ","fault location "," output_test "," output_test_suite "]}," Test Unit UI XML TestRunner result_pass_assertion":{"type":"method","name":"result_pass_assertion","children":[],"call":[" output_test "," open_tag "]}," Test Unit UI XML TestRunner attach_to_mediator":{"type":"method","name":"attach_to_mediator","children":[],"call":["@mediator add_listener "," method "]}," Test Unit UI XML TestRunner initialize":{"type":"method","name":"initialize","children":[],"call":["IO  new ","@options [] "]}," Test Unit TestSuiteCreator sort_test_names_in_defined_order":{"type":"method","name":"sort_test_names_in_defined_order","children":[],"call":["test1 <=> ","test1_defined_order <=> ","added_methods index ","test_names sort ","@test_case added_methods ","added_method_names index ","@test_case added_method_names ","added_methods index  <=> ","added_method_names index  <=> ","@test_case added_methods  index ","@test_case @test_case added_methods  ","@test_case added_method_names  index ","@test_case @test_case added_method_names  "]}," Test Unit TestSuiteCreator sort_test_names_in_random_order":{"type":"method","name":"sort_test_names_in_random_order","children":[],"call":[" rand ","test_names size ","test_names sort_by "]}," Test Unit TestSuiteCreator sort_test_names_in_alphabetic_order":{"type":"method","name":"sort_test_names_in_alphabetic_order","children":[],"call":["test_names sort "]}," Test Unit TestSuiteCreator collect_test_names":{"type":"method","name":"collect_test_names","children":[],"call":[" send ","@test_case test_order ","@test_case attributes [] ","@test_case attributes ","method_name =~ ","method_names find_all ","name to_s ","@test_case public_instance_methods collect ","@test_case public_instance_methods ","methods collect ","super_test_case public_instance_methods ","@test_case superclass "," __send__ ","@test_case find_attribute "," class test_method? "," class ","methods collect  find_all ","@test_case public_instance_@test_case public_instance_methods  collect ","@test_case public_instance_@test_case public_instance_methods  ","@test_case public_instance_methods  collect ","@test_case superclass  public_instance_methods ","super_test_case public_instance_@test_case public_instance_methods  "]}," Test Unit TestSuiteCreator append_test":{"type":"method","name":"append_test","children":[],"call":["suite << ","test valid? "," block_given? ","@test_case new ","@test_case new  valid? ","@@test_case new _case new "]}," Test Unit TestSuiteCreator create":{"type":"method","name":"create","children":[],"call":[" append_test ","suite empty? ","test assign_test_data ","data_set each ","data_set call ","data_set respond_to? ","data_sets each ","@test_case attributes [] ","@test_case attributes "," collect_test_names each "," collect_test_names ","TestSuite  new ","@test_case name ","@test_case find_attribute "," extract_data_sets ","TestSuite  new  empty? ","data_set call  each ","data_set call  call ","data_set call  respond_to? ","data_set call s each ","@test_case attributes []  each ","@test_case find_attribute  each "," extract_data_sets  each "," extract_data_set call s "," extract_@test_case attributes []  "," extract_@test_case find_attribute  "," extract_ extract_data_sets  "]}," Test Unit TestSuiteCreator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Test Unit TestSuite passed?":{"type":"method","name":"passed?","children":[],"call":[]}," Test Unit TestCase InternalData interrupted":{"type":"method","name":"interrupted","children":[],"call":[]}," Test Unit TestCase InternalData problem_occurred":{"type":"method","name":"problem_occurred","children":[],"call":[]}," Test Unit TestCase InternalData test_finished":{"type":"method","name":"test_finished","children":[],"call":["Time  now - ","Time  now "]}," Test Unit TestCase InternalData test_started":{"type":"method","name":"test_started","children":[],"call":["Time  now "]}," Test Unit TestCase InternalData have_test_data?":{"type":"method","name":"have_test_data?","children":[],"call":["@test_data_label nil? ! ","@test_data_label nil? "]}," Test Unit TestCase InternalData assign_test_data":{"type":"method","name":"assign_test_data","children":[],"call":[]}," Test Unit TestCase InternalData interrupted?":{"type":"method","name":"interrupted?","children":[],"call":[]}," Test Unit TestCase InternalData passed?":{"type":"method","name":"passed?","children":[],"call":[]}," Test Unit TestCase InternalData initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Test Unit TestCase elapsed_time":{"type":"method","name":"elapsed_time","children":[],"call":["@internal_data elapsed_time "]}," Test Unit TestCase start_time":{"type":"method","name":"start_time","children":[],"call":["@internal_data start_time "]}," Test Unit TestCase data_label":{"type":"method","name":"data_label","children":[],"call":["@internal_data test_data_label "]}," Test Unit TestCase cleanup":{"type":"method","name":"cleanup","children":[],"call":[]}," Test Unit TestCase valid?":{"type":"method","name":"valid?","children":[],"call":[" class != "," class ","owner class != ","owner class ","Util MethodOwnerFinder  find ","test_method arity <= ","test_method arity ","test_method arity == ","@internal_data have_test_data? "," method "," respond_to? ","Util MethodOwnerFinder  find  class != ","Util MethodOwnerFinder  find  class "," method  arity <= "," method  arity "," method  arity == "]}," Test Unit TestCase assign_test_data":{"type":"method","name":"assign_test_data","children":[],"call":["@internal_data assign_test_data "]}," Test Unit TestCase added_methods":{"type":"method","name":"added_methods","children":[],"call":["@@added_methods [] "]}," Test Unit Fixture run_cleanup":{"type":"method","name":"run_cleanup","children":[],"call":[" run_fixture "]}," Test Unit Fixture ClassMethods after_cleanup_methods":{"type":"method","name":"after_cleanup_methods","children":[],"call":[" collect_fixture_methods "]}," Test Unit Fixture ClassMethods before_cleanup_methods":{"type":"method","name":"before_cleanup_methods","children":[],"call":[" collect_fixture_methods "]}," Test Unit Fixture ClassMethods unregister_cleanup_method":{"type":"method","name":"unregister_cleanup_method","children":[],"call":[" unregister_fixture_method "]}," Test Unit Fixture ClassMethods register_cleanup_method":{"type":"method","name":"register_cleanup_method","children":[],"call":[" register_fixture_method "]}," Test Unit Fixture ClassMethods unregister_cleanup":{"type":"method","name":"unregister_cleanup","children":[],"call":[" unregister_fixture "]}," Test Unit Fixture ClassMethods cleanup":{"type":"method","name":"cleanup","children":[],"call":[" register_fixture "]}," Test Unit Error location":{"type":"method","name":"location","children":[],"call":[" filter_backtrace ","@exception backtrace "]}," Test Unit Data ClassMethods CSVDataLoader normalize_value":{"type":"method","name":"normalize_value","children":[],"call":[" Float "," Integer "]}," Test Unit Data ClassMethods CSVDataLoader load":{"type":"method","name":"load","children":[],"call":["@test_case data ","data []= "," normalize_value ","row [] ","key == ","header each_with_index ","header nil? ","CSV  foreach "," require "]}," Test Unit Data ClassMethods CSVDataLoader initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Test Unit Data ClassMethods load_data":{"type":"method","name":"load_data","children":[],"call":[" raise ","loader load ","CSVDataLoader  new ","Loader  new ","CSVDataLoader  new  load ","Loader  new  load "]}," Test Unit Data ClassMethods data":{"type":"method","name":"data","children":[],"call":[" attribute ","current_data + "," current_attribute [] "," current_attribute "," raise ","arguments [] ","arguments size "," block_given? ","options merge ","attr merge ","attr [] keep ","attr [] "," lambda ","options [] ","data_sets add ","DataSets  new ","data_sets have_keep? ","options merge  merge ","arguments []  merge ","options merge  [] ","arguments []  [] ","arguments [] s add ","arguments [] s have_keep? "]}," Test Unit Data included":{"type":"method","name":"included","children":[],"call":["base extend "]}," Test Unit Collector XML Listener test_end":{"type":"method","name":"test_end","children":[],"call":[" add_omission ","Omission  new ","result [] "," add_assertion ","n_pass_assertions times "," define_method "," test ","@test_case module_eval ","@values [] "," parent_tag == "," parent_tag "]}," Test Unit Collector XML Listener test_case_end":{"type":"method","name":"test_case_end","children":[],"call":[" define_method ","Class  new ","@values [] "," parent_tag == "," parent_tag "]}," Test Unit Collector XML Listener test_suite_end":{"type":"method","name":"test_suite_end","children":[],"call":["@test_suites << ","suite instance_variable_set ","@values [] ","@values has_key? ","(str \"start_time\") each ","TestSuite  new "," parent_tag == "," parent_tag ","@test_TestSuite  new s << ","TestSuite  new  instance_variable_set "]}," Test Unit Collector XML Listener parent_tag":{"type":"method","name":"parent_tag","children":[],"call":["@tag_stack last [] ","@tag_stack last "]}," Test Unit Collector XML Listener normalize_local":{"type":"method","name":"normalize_local","children":[],"call":["local gsub "]}," Test Unit Collector XML Listener current_path":{"type":"method","name":"current_path","children":[],"call":["(str \"\") join ","@tag_stack collect "]}," Test Unit Collector XML Listener next_state":{"type":"method","name":"next_state","children":[],"call":[" raise "," current_path ","valid_elements include? ","local to_sym ","valid_elements nil? ","STATE_TABLE  [] "," normalize_local ","STATE_TABLE  []  include? "," normalize_local  to_sym ","STATE_TABLE  []  nil? "," normalize_ normalize_local  "]}," Test Unit Collector XML Listener split_name":{"type":"method","name":"split_name","children":[],"call":["name =~ "]}," Test Unit Collector XML Listener _ns":{"type":"method","name":"_ns","children":[],"call":["ns fetch "]}," Test Unit Collector XML Listener text":{"type":"method","name":"text","children":[],"call":["@text_stack last << ","@text_stack last "]}," Test Unit Collector XML Listener tag_end":{"type":"method","name":"tag_end","children":[],"call":["@ns_stack pop ","@values []= "," normalize_local ","@backtrace << ","@values [] "," test_end "," test_case_end ","@test_suites last << ","@test_case suite ","@test_suites last "," test_suite_end ","@tag_stack pop ","@text_stack pop ","@state_stack pop "," normalize_ normalize_local  ","@@text_stack pop _stack pop ","@@state_stack pop _stack pop "]}," Test Unit Collector XML Listener tag_start":{"type":"method","name":"tag_start","children":[],"call":["_parent_tag == ","@state_stack push "," next_state ","@state_stack last ","@tag_stack push "," _ns "," split_name "," parent_tag ","@ns_stack push ","attrs []= ","ns []= ","attributes each ","@ns_stack last dup ","@ns_stack last ","@text_stack push "," parent_tag  == ","@ next_state _stack push "," next_ next_state  ","@ next_state _stack last "," _@ns_stack last dup  ","@@ns_stack last dup _stack push ","@ns_stack last dup  []= ","@@ns_stack last dup _stack last dup ","@@ns_stack last dup _stack last "]}," Test Unit Collector XML Listener initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Test Unit Collector XML collect":{"type":"method","name":"collect","children":[],"call":[" add_suite "," sort each "," sort ","listener test_suites ","TestSuite  new ","parser parse ","REXML Parsers StreamParser  new ","File  open ","Listener  new "," add_TestSuite  new  ","listener test_listener test_suites  ","listener test_TestSuite  new s ","Listener  new  test_suites ","REXML Parsers StreamParser  new  parse "]}," Test Unit Attribute ClassMethods current_attribute":{"type":"method","name":"current_attribute","children":[],"call":["StringifyKeyHash  new "," current_attributes [] "," current_attributes "]}," Test Unit Attribute ClassMethods current_attributes":{"type":"method","name":"current_attributes","children":[],"call":["StringifyKeyHash  new "]}," Test Unit Attribute StringifyKeyHash []=":{"type":"method","name":"[]=","children":[],"call":[" class stringify "," class "]}," Test Unit Attribute StringifyKeyHash []":{"type":"method","name":"[]","children":[],"call":[" class stringify "," class "]}," Test Unit Attribute StringifyKeyHash stringify":{"type":"method","name":"stringify","children":[],"call":["object to_s "]}," Test Unit Assertions AssertionMessage ArrayInspector each":{"type":"method","name":"each","children":[],"call":["Inspector  new ","@array each "]}," Test Unit Assertions AssertionMessage ArrayInspector pretty_print_cycle":{"type":"method","name":"pretty_print_cycle","children":[],"call":["@array pretty_print_cycle "]}," Test Unit Assertions AssertionMessage ArrayInspector pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp ","q seplist ","q group "]}," Test Unit Assertions AssertionMessage ArrayInspector inspect":{"type":"method","name":"inspect","children":[],"call":["@array inspect "]}," Test Unit Assertions AssertionMessage ArrayInspector initialize":{"type":"method","name":"initialize","children":[],"call":["Inspector  cached_new ","array collect "]}," Test Unit Assertions AssertionMessage ArrayInspector target?":{"type":"method","name":"target?","children":[],"call":["object is_a? "]}," Test Unit Assertions AssertionMessage Inspector inspect_target":{"type":"method","name":"inspect_target","children":[],"call":["ArrayInspector  new ","ArrayInspector  target? ","HashInspector  new ","HashInspector  target? ","inspector_class new ","inspector_class target? "," class inspector_classes each "," class inspector_classes "," class "]}," Test Unit Assertions AssertionMessage Inspector pretty_print_cycle":{"type":"method","name":"pretty_print_cycle","children":[],"call":["@inspect_target pretty_print_cycle "]}," Test Unit Assertions AssertionMessage Inspector pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["@inspect_target pretty_print "]}," Test Unit Assertions AssertionMessage Inspector inspect":{"type":"method","name":"inspect","children":[],"call":["@inspect_target inspect "]}," Test Unit Assertions AssertionMessage Inspector initialize":{"type":"method","name":"initialize","children":[],"call":[" inspect_target ","@inspected_objects []= ","@object object_id "]}," Test Unit UI Console TestRunner fault_class_color":{"type":"method","name":"fault_class_color","children":[],"call":[" color ","fault_class name split last downcase ","fault_class name split last ","fault_class name split ","fault_class name "," fault_class_color_name "]}," Test Unit UI Console TestRunner output_progress_in_detail":{"type":"method","name":"output_progress_in_detail","children":[],"call":[" output_fault "," categorize_fault == "," categorize_fault ","@output_level == "," nl "," output_fault_in_short "," output_fault_in_detail "," output_progress_in_detail_marker "," change_output_level "]}," Test Unit UI Console TestRunner output_statistics":{"type":"method","name":"output_statistics","children":[],"call":[" output ","throughput join ","%.2f assertions/s % ","%.2f tests/s % ","@result assertion_count / ","@result assertion_count ","@result run_count / ","@result run_count "," nl ","elapsed_time zero? "," result_color ","%g%% passed % ","@result pass_percentage "," output_summary_marker "," change_output_level "]}," Test Unit UI Console TestRunner categorize_fault":{"type":"method","name":"categorize_fault","children":[],"call":[]}," Test Unit UI Console TestRunner categorize_faults":{"type":"method","name":"categorize_faults","children":[],"call":[" categorize_fault ","@faults group_by ","faults [] << ","faults [] ","@faults each "]}," Test Unit UI Console TestRunner output_faults_in_short":{"type":"method","name":"output_faults_in_short","children":[],"call":[" output ","fault location first ","fault location ","fault test_name "," output_single "," fault_color ","fault message ","(str \"%\") % ","index + ","faults each_with_index "," fault_class_color "," nl "," max_digit ","faults size ","faults nil? "," output_fault_in_short "," max_ max_digit  "]}," Test Unit UI Console TestRunner output_faults_in_detail":{"type":"method","name":"output_faults_in_detail","children":[],"call":[" output_fault "," output_single ","(str \"%\") % ","index + "," nl ","faults each_with_index "," max_digit ","faults size ","faults nil? "," output_fault_in_detail "," max_ max_digit  "]}," Test Unit UI Console TestRunner max_digit":{"type":"method","name":"max_digit","children":[],"call":["(send\n  (send\n    (const nil :Math) :log10\n    (lvar :max_number)) :+\n  (int 1)) truncate ","Math  log10 + ","Math  log10 "]}," Test Unit UI Console TestRunner output_faults":{"type":"method","name":"output_faults","children":[],"call":[" output_faults_in_short ","categorized_faults [] "," output_faults_in_detail "," change_output_level "," categorize_faults "," categorize_faults  [] "]}," Test Unit UI Console TestRunner change_output_level":{"type":"method","name":"change_output_level","children":[],"call":[]}," Test Unit Assertions AssertionMessage Inspector <=>":{"type":"method","name":"<=>","children":[],"call":["@object <=> ","other object ","other is_a? "," class "]}," Test Unit Assertions AssertionMessage Inspector cached_new":{"type":"method","name":"cached_new","children":[],"call":[" new ","inspected_objects [] ","object object_id "]}," Test Unit UI Console TestRunner output_fault_in_short":{"type":"method","name":"output_fault_in_short","children":[],"call":[" output ","fault location first ","fault location ","fault test_name "," output_single "," fault_color ","fault message ","fault label "]}," Test Unit UI Console TestRunner output_fault_in_detail":{"type":"method","name":"output_fault_in_detail","children":[],"call":[" output "," fault_color "," format_fault split "," format_fault "," output_fault_message "," output_fault_backtrace "," output_single ","fault label ","fault inspected_actual ","fault inspected_expected ","fault is_a? ","fault test_name ","fault message ","fault message include? "," output_failure_message "]}," Test Unit ErrorHandler pass_through_exception?":{"type":"method","name":"pass_through_exception?","children":[],"call":["exception class name ","exception class "]}," Test Unit Color parse_256_color":{"type":"method","name":"parse_256_color","children":[],"call":[" raise ","must be 'RGB' format and R, G and B  + ","string inspect ","red to_i * + + + ","red to_i * + + ","blue to_i ","red to_i * + ","green to_i * ","green to_i ","red to_i * ","red to_i "]}," Test Unit ColorScheme available_colors":{"type":"method","name":"available_colors","children":[],"call":["ENV  [] "," guess_available_colors_from_term_env "," guess_available_colors_from_colorterm_env "," guess_available_colors_from_vte_version_env "," guess_available_colors_from_github_actions_env "]}," Test Unit ColorScheme default_for_256_colors":{"type":"method","name":"default_for_256_colors","children":[],"call":[" new ","Color  new + ","Color  new "]}," Test Unit ColorScheme default_for_8_colors":{"type":"method","name":"default_for_8_colors","children":[],"call":[" new ","Color  new + ","Color  new "]}," Test Unit Assertions AssertionMessage max_diff_target_string_size=":{"type":"method","name":"max_diff_target_string_size=","children":[],"call":[]}," Test Unit UI Console TestRunner output_progress_in_detail_marker":{"type":"method","name":"output_progress_in_detail_marker","children":[],"call":[" nl "," output "," fault_color ","= * ","@progress_row_max > ","@progress_row_max <= "]}," Test Unit Fixture run_fixture_callback":{"type":"method","name":"run_fixture_callback","children":[],"call":[" raise "," handle_exception ","options [] ","callback call "," send "," lambda "," respond_to? "," instance_eval ","method_name_or_callback respond_to? "," __send__ "]}," Test Unit Fixture ClassMethods collect_fixture_callbacks":{"type":"method","name":"collect_fixture_callbacks","children":[],"call":["(send\n  (lvar :result) :|\n  (lvar :callbacks)) - ","result | "," instance_eval ","ancestor class_eval ","ancestor is_a? ","interested_ancestors inject "," ancestors [] reverse "," ancestors [] "," ancestors "," ancestors index "," unregistered_callbacks_variable_name "," registered_callbacks_variable_name ","(send\n  (lvar :result) :|\n  (lvar : instance_eval )) - "," ancestors [] reverse  inject ","  instance_eval _variable_name "," unregistered_ instance_eval _variable_name ","  unregistered_callbacks_variable_name _name "," unregistered_ registered_callbacks_variable_name _name "," registered_ instance_eval _variable_name "," registered_ registered_callbacks_variable_name _name "]}," Test Unit Fixture ClassMethods unregister_fixture_callback":{"type":"method","name":"unregister_fixture_callback","children":[],"call":[" add_fixture_callback "," unregistered_callbacks_variable_name "," unregistered_callbacks_ unregistered_callbacks_variable_name  "]}," Test Unit Fixture ClassMethods register_fixture_callback":{"type":"method","name":"register_fixture_callback","children":[],"call":[" add_fixture_callback "," registered_callbacks_variable_name ","options to_a first ","options to_a ","options empty? "," raise ","must be {:before => :prepend},  + + ","options inspect ","must be {:before => :prepend},  + "," valid_register_fixture_options? "," registered_callbacks_ registered_callbacks_variable_name  "]}," Test Unit Fixture ClassMethods unregistered_callbacks_variable_name":{"type":"method","name":"unregistered_callbacks_variable_name","children":[],"call":[]}," Test Unit Fixture ClassMethods registered_callbacks_variable_name":{"type":"method","name":"registered_callbacks_variable_name","children":[],"call":[]}," Test Unit Fixture ClassMethods add_fixture_callback":{"type":"method","name":"add_fixture_callback","children":[],"call":[" instance_variable_set ","callbacks | ","(lvar :method_name_or_callback) | ","how == "," instance_eval ","callbacks |  | ","(lvar :method_name_or_callback) |  | "," instance_eval  | "]}," Test Unit Fixture ClassMethods after_teardown_callbacks":{"type":"method","name":"after_teardown_callbacks","children":[],"call":[" collect_fixture_callbacks "]}," Test Unit Fixture ClassMethods before_teardown_callbacks":{"type":"method","name":"before_teardown_callbacks","children":[],"call":[" collect_fixture_callbacks "]}," Test Unit Fixture ClassMethods after_cleanup_callbacks":{"type":"method","name":"after_cleanup_callbacks","children":[],"call":[" collect_fixture_callbacks "]}," Test Unit Fixture ClassMethods before_cleanup_callbacks":{"type":"method","name":"before_cleanup_callbacks","children":[],"call":[" collect_fixture_callbacks "]}," Test Unit Fixture ClassMethods after_setup_callbacks":{"type":"method","name":"after_setup_callbacks","children":[],"call":[" collect_fixture_callbacks "]}," Test Unit Fixture ClassMethods before_setup_callbacks":{"type":"method","name":"before_setup_callbacks","children":[],"call":[" collect_fixture_callbacks "]}," Test Unit Fixture ClassMethods unregister_teardown_callback":{"type":"method","name":"unregister_teardown_callback","children":[],"call":[" unregister_fixture_callback "]}," Test Unit Fixture ClassMethods register_teardown_callback":{"type":"method","name":"register_teardown_callback","children":[],"call":[" register_fixture_callback "]}," Test Unit Fixture ClassMethods unregister_cleanup_callback":{"type":"method","name":"unregister_cleanup_callback","children":[],"call":[" unregister_fixture_callback "]}," Test Unit Fixture ClassMethods register_cleanup_callback":{"type":"method","name":"register_cleanup_callback","children":[],"call":[" register_fixture_callback "]}," Test Unit Fixture ClassMethods unregister_setup_callback":{"type":"method","name":"unregister_setup_callback","children":[],"call":[" unregister_fixture_callback "]}," Test Unit Fixture ClassMethods register_setup_callback":{"type":"method","name":"register_setup_callback","children":[],"call":[" register_fixture_callback "]}," Test Unit Assertions AssertionMessage Inspector unregister_inspector_class":{"type":"method","name":"unregister_inspector_class","children":[],"call":["@@inspector_classes delete "]}," Test Unit Assertions AssertionMessage Inspector register_inspector_class":{"type":"method","name":"register_inspector_class","children":[],"call":["@@inspector_classes << "]}," Test Unit Assertions AssertionMessage Inspector inspector_classes":{"type":"method","name":"inspector_classes","children":[],"call":[]}," Test Unit Assertions _set_failed_information":{"type":"method","name":"_set_failed_information","children":[],"call":["failure user_message= ","failure inspected_actual= ","AssertionMessage  convert ","failure inspected_expected= ","failure actual= ","failure expected= "]}," Test Unit UI Console TestRunner output_code_snippet":{"type":"method","name":"output_code_snippet","children":[],"call":[" nl "," output ","  %2s %*d: %s % ","attributes [] ","lines each ","(send\n  (send\n    (const nil :Math) :log10\n    (lvar :max_n)) :+\n  (int 1)) truncate ","Math  log10 + ","Math  log10 ","(send\n  (lvar :lines) :collect) max ","lines collect ","@code_snippet_fetcher fetch ","2 to_i ","lines empty? ","@code_snippet_fetcher fetch  each ","2 to_i s each ","(send\n  (send\n    (const nil :Math) :log10\n    (lvar :(send\n  (lvar :lines) :collect) max )) :+\n  (int 1)) truncate ","(send\n  (lvar :@code_snippet_fetcher fetch ) :collect) max ","(send\n  (lvar :2 to_i s) :collect) max ","@code_snippet_fetcher fetch  collect ","2 to_i s collect ","@code_snippet_fetcher fetch  empty? ","2 to_i s empty? "]}," Test Unit CodeSnippetFetcher read_source":{"type":"method","name":"read_source","children":[],"call":["File  readlines ","File  exist? ","lines concat ","file readlines ","lines << ","file set_encoding ","first_line force_encoding "," detect_encoding ","first_line nil? ","file gets ","File  open ","line force_encoding ","file each_line ","file set_ detect_encoding  ","first_line force_ detect_encoding  ","file gets  force_encoding "," detect_ detect_encoding  ","file gets  nil? ","line force_ detect_encoding  "]}," Test Unit CodeSnippetFetcher source":{"type":"method","name":"source","children":[],"call":[" read_source ","@sources [] "]}," Test Unit CodeSnippetFetcher fetch":{"type":"method","name":"fetch","children":[],"call":["lines [] chomp ","lines [] ","n - ","n == ","window collect ","(send\n  (lvar :line) :+\n  (lvar :n_context_line)) min ","lines length ","line + ","(send\n  (lvar :line) :-\n  (lvar :n_context_line)) max ","line - ","lines nil? "," source ","options [] "," source  [] chomp "," source  [] "," source  length "," source  nil? "]}," Test Unit CodeSnippetFetcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," run":{"type":"method","name":"run","children":[],"call":[" require "," class send "," class "]}," Test Unit UI TestRunnerMediator run":{"type":"method","name":"run","children":[],"call":[" notify_listeners ","result remove_listener ","Time  now - ","Time  now "," run_suite ","@suite size ","result add_listener "," create_result ","AutoRunner  need_auto_run= ","@suite run "," with_listener ","Test Unit  run_at_exit_hooks ","Test Unit  run_at_start_hooks ","result stop_tag= "," catch "," create_result  remove_listener "," create_result  add_listener "," create_ create_result  "," create_result  stop_tag= "]}," Test Unit AutoRunner change_work_directory":{"type":"method","name":"change_work_directory","children":[],"call":["Dir  chdir "]}," Test Unit AutoRunner need_auto_run=":{"type":"method","name":"need_auto_run=","children":[],"call":[]}," Test Unit AutoRunner need_auto_run?":{"type":"method","name":"need_auto_run?","children":[],"call":[]}," Test Unit Assertions AssertionMessage Template encoding_safe_concat":{"type":"method","name":"encoding_safe_concat","children":[],"call":["buffer << ","parameter dup force_encoding ","buffer encoding ","parameter dup ","Encoding  compatible? ","parameter encoding "]}," Test Unit UI TestRunnerMediator with_listener":{"type":"method","name":"with_listener","children":[],"call":["result remove_listener "," notify_listeners ","result add_listener "]}," Test Unit UI Console TestRunner output_failure_message":{"type":"method","name":"output_failure_message","children":[],"call":["differ diff "," output ","differ need_diff? ","ColorizedReadableDiffer  new ","to_lines << ","failure actual encoding name ","failure actual encoding ","failure actual ","from_lines << ","failure expected encoding name ","failure expected encoding ","failure expected ","to split ","from split "," prepare_for_diff "," output_single "," color ","failure inspected_actual ","failure inspected_expected ","failure user_message ","failure expected encoding != ","failure actual respond_to? ","failure expected respond_to? ","to dup force_encoding ","to dup ","to valid_encoding? ","from dup force_encoding ","from dup ","from valid_encoding? ","ColorizedReadableDiffer  new  diff ","ColorizedReadableDiffer  new  need_diff? ","to split  << ","to dup force_encoding _lines << ","from split  << ","from dup force_encoding _lines << ","to dup force_encoding  split ","from dup force_encoding  split ","failure actual respond_to dup force_encoding ? ","failure expected respond_to dup force_encoding ? ","to dup force_encoding  dup force_encoding ","to dup force_encoding  dup ","to dup force_encoding  valid_encoding? ","from dup force_encoding  dup force_encoding ","from dup force_encoding  dup ","from dup force_encoding  valid_encoding? "]}," Test Unit TestSuite run_test":{"type":"method","name":"run_test","children":[],"call":["finished_object_is_yielded ! ","event_name != ","test run "]}," Test Unit run_at_exit_hooks":{"type":"method","name":"run_at_exit_hooks","children":[],"call":["hook call ","@@at_exit_hooks each "]}," Test Unit at_exit":{"type":"method","name":"at_exit","children":[],"call":["@@at_exit_hooks << "]}," Test Unit run_at_start_hooks":{"type":"method","name":"run_at_start_hooks","children":[],"call":["hook call ","@@at_start_hooks each "]}," Test Unit at_start":{"type":"method","name":"at_start","children":[],"call":["@@at_start_hooks << "]}," Test Unit TestCase method_locations":{"type":"method","name":"method_locations","children":[],"call":["@@method_locations [] "]}," Test Unit TestCase test_defined?":{"type":"method","name":"test_defined?","children":[],"call":["available_locations empty? ! ","available_locations empty? ","available_location nil? ","query_method_name == ","location [] ","available_locations find ","query_line >= ","available_locations reverse find ","available_locations reverse ","location [] end_with? ","available_locations find_all "," method_locations ","query [] ","available_location [] != ","available_location [] ","location [] -@ ","available_locations sort_by "," target_method_locations ","locations empty? ! ","locations empty? "," find_locations "," method_locations  empty? ! "," target_method_locations  empty? ! ","available_ find_locations  empty? ! "," method_locations  empty? "," target_method_locations  empty? ","available_ find_locations  empty? ","query []  == "," method_locations  find "," target_method_locations  find ","available_ find_locations  find ","query []  >= "," method_locations  reverse find "," target_method_locations  reverse find ","available_ find_locations  reverse find "," method_locations  reverse "," target_method_locations  reverse ","available_ find_locations  reverse "," method_locations  find_all "," target_method_locations  find_all ","available_ find_locations  find_all "," method_ find_locations  "," method_locations  sort_by "," target_method_locations  sort_by ","available_ find_locations  sort_by "," target_method_ find_locations  "," find_locations  empty? ! "," find_locations  empty? "," find_ find_locations  "]}," Test Unit TestCase sub_test_case":{"type":"method","name":"sub_test_case","children":[],"call":["sub_test_case class_eval ","singleton_class send ","Class  new ","(send\n  (lvar :parent_test_case) :name) compact join ","(send\n  (lvar :parent_test_case) :name) compact ","parent_test_case name ","singleton_class __send__ "," sub_test_case_class "," sub_test_case_class  class_eval ","  sub_test_case_class _class "]}," Test Unit FaultLocationDetector extract_fault_information":{"type":"method","name":"extract_fault_information","children":[],"call":["@fault method_name ","@fault respond_to? ","@fault source_location "]}," Test Unit FaultLocationDetector guess_indent_level":{"type":"method","name":"guess_indent_level","children":[],"call":["1 sub count ","1 sub ","  * "]}," Test Unit FaultLocationDetector target_method?":{"type":"method","name":"target_method?","children":[],"call":["@fault_method_name == "]}," Test Unit FaultLocationDetector target_source_location?":{"type":"method","name":"target_source_location?","children":[],"call":["current_indent_level == ","current_line_number == "," guess_indent_level ","lines [] ","current_line_number - ","fault_line_number step ","lines size ","lines nil? ","@code_snippet_fetcher source ","line_number < ","file end_with? "," guess_indent_level  == ","current_lines [] _number == ","lines [] s [] ","@code_snippet_fetcher source  [] ","current_lines [] _number - ","fault_lines [] _number step ","lines [] s size ","@code_snippet_fetcher source  size ","lines [] s nil? ","@code_snippet_fetcher source  nil? ","lines [] _number < "]}," Test Unit FaultLocationDetector target?":{"type":"method","name":"target?","children":[],"call":[" target_method? "," target_source_location? ","file nil? "," split_backtrace_entry "]}," Test Unit FaultLocationDetector split_backtrace_entry":{"type":"method","name":"split_backtrace_entry","children":[],"call":["line_number to_i ","match_data to_a [] ","match_data to_a ","match_data nil? ","(str \"\\\\A(.+):(\\\\d+)(?::(.*))?\\\\z\") match ","line_number to_i  to_i ","(str \"\\A(.+):(\\d+)(?::(.*))?\\z\") match  to_a [] ","(str \"\\A(.+):(\\d+)(?::(.*))?\\z\") match  to_a ","(str \"\\A(.+):(\\d+)(?::(.*))?\\z\") match  nil? "]}," Test Unit FaultLocationDetector initialize":{"type":"method","name":"initialize","children":[],"call":[" extract_fault_information "]}," Test Unit Color background?":{"type":"method","name":"background?","children":[],"call":[]}," Test Unit Collector add_test_case":{"type":"method","name":"add_test_case","children":[],"call":["suite << "," sort each "," sort "," add_suite "," add_test_case ","child suite ","children each ","children nil? ","children_map [] ","children_map []  each ","children_map []  nil? ","children_map [] _map [] "]}," Test Unit Collector add_test_cases":{"type":"method","name":"add_test_cases","children":[],"call":[" add_test_case ","root_test_cases each ","children_map keys - ","children_map keys ","children_map [] << ","children_map [] ","descendant_test_case ancestors [] ","descendant_test_case ancestors ","test_cases each ","ancestor_classes [] ","ancestor is_a? ","test_case ancestors find_all ","test_case ancestors ","children_map keys -  each "]}," Test Unit AttributeMatcher method_missing":{"type":"method","name":"method_missing","children":[],"call":["@test [] ","args empty? "]}," Test Unit AttributeMatcher match?":{"type":"method","name":"match?","children":[],"call":["matched nil? "," instance_eval "," instance_eval  nil? "]}," Test Unit AttributeMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Test Unit Assertions refute":{"type":"method","name":"refute","children":[],"call":["object ! "," assert_block "," build_message "," block_given? ! "," block_given? "," raise "," filter_backtrace "," caller ","error_message << ","message class ","message inspect "," _wrap_assertion "]}," Test Unit UI Console TestRunner suite_name":{"type":"method","name":"suite_name","children":[],"call":["name sub ","Regexp  escape ","name nil? ","suite name ","suite name  sub ","suite name  nil? ","suite suite name  "]}," Test Unit TestSuite delete_tests":{"type":"method","name":"delete_tests","children":[],"call":[]}," Test Unit Data ClassMethods Loader set_test_data":{"type":"method","name":"set_test_data","children":[],"call":["@test_case data "," normalize_value ","row collect ","data []= ","row [] ","header each_with_index ","row shift "]}," Test Unit Data ClassMethods Loader normalize_value":{"type":"method","name":"normalize_value","children":[],"call":[" Float "," Integer ","value == "]}," Test Unit Data ClassMethods Loader load_tsv":{"type":"method","name":"load_tsv","children":[],"call":[" set_test_data ","row [] ","row first == ","row first ","CSV  open ","CSV  foreach ","CSV  respond_to? "," require ","CSV  const_defined? "]}," Test Unit Data ClassMethods Loader load_csv":{"type":"method","name":"load_csv","children":[],"call":[" set_test_data ","row [] ","row first == ","row first ","CSV  foreach "," require "]}," Test Unit Data ClassMethods Loader load":{"type":"method","name":"load","children":[],"call":[" raise "," load_tsv "," load_csv ","File  extname downcase ","File  extname "]}," Test Unit Data ClassMethods Loader initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Test Unit AutoRunner match_test_case_name":{"type":"method","name":"match_test_case_name","children":[],"call":["pattern === ","test_class name ","test_class == ","test class ancestors each ","test class ancestors ","test class "]}," Test Unit Assertions AssertionMessage NumericInspector pretty_print_cycle":{"type":"method","name":"pretty_print_cycle","children":[],"call":["q text ","@numeric to_s "]}," Test Unit Assertions AssertionMessage NumericInspector pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q text ","@numeric to_s "]}," Test Unit Assertions AssertionMessage NumericInspector inspect":{"type":"method","name":"inspect","children":[],"call":["@numeric to_s "]}," Test Unit Assertions AssertionMessage NumericInspector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Test Unit Assertions AssertionMessage NumericInspector target?":{"type":"method","name":"target?","children":[],"call":["object is_a? "]}," Test Unit Assertions AssertionMessage normalize_tag":{"type":"method","name":"normalize_tag","children":[],"call":["tag intern ","1 intern ","tag [] intern ","tag [] "]}," Test Unit Assertions assert_not_operator":{"type":"method","name":"assert_not_operator","children":[],"call":["object1 __send__ ! ","object1 __send__ "," assert_block "," build_message ","AssertionMessage  literal ","operator respond_to? ","operator kind_of? "," _wrap_assertion "]}," Test Unit Assertions assert_not_kind_of":{"type":"method","name":"assert_not_kind_of","children":[],"call":["object kind_of? ","klasses none? "," assert_block "," build_message ","<?> expected to not be kind_of\\?\n + ","AssertionMessage  maybe_container ","k kind_of? ","klasses all? ","The first parameter to assert_not_kind_of should be  + ","klass is_a? "," _wrap_assertion ","<?> was expected to not be kind_of\\?\n + "]}," Test Unit Assertions assert_not_instance_of":{"type":"method","name":"assert_not_instance_of","children":[],"call":["object instance_of? ","klasses none? "," assert_block "," build_message ","<?> expected to not be instance_of\\?\n + ","AssertionMessage  maybe_container ","k is_a? ","klasses all? ","The first parameter to assert_not_instance_of should be  << ","klass is_a? "," _wrap_assertion ","<?> was expected to not be instance_of\\?\n + ","The first parameter to assert_not_instance_of should be  + "]}," Test Unit TestCase added_method_names":{"type":"method","name":"added_method_names","children":[],"call":["(or-asgn\n  (send\n    (cvar :@@added_method_names) :[]\n    (self))\n  (hash)) keys ","@@added_method_names [] "]}," Test Unit Fixture ClassMethods fixture":{"type":"method","name":"fixture","children":[],"call":["Fixture  new "]}," Test Unit Fixture HookPoint add_callback":{"type":"method","name":"add_callback","children":[],"call":["callbacks | ","(lvar :method_name_or_callback) | "]}," Test Unit Fixture HookPoint valid_register_options?":{"type":"method","name":"valid_register_options?","children":[],"call":["(sym :prepend) include? ","options [] ","(sym :before) include? ","options keys first ","options keys ","options size > ","options size ","options empty? ","options options keys first s first ","options options keys first s "]}," Test Unit Fixture HookPoint after_callbacks":{"type":"method","name":"after_callbacks","children":[],"call":["@after_callbacks - "]}," Test Unit Fixture HookPoint before_callbacks":{"type":"method","name":"before_callbacks","children":[],"call":["@before_callbacks - "]}," Test Unit Fixture HookPoint unregister":{"type":"method","name":"unregister","children":[],"call":["@unregistered_callbacks << "," callback_method_name ","method_name_or_callback respond_to? "," callback_ callback_method_name  "," callback_method_name _or_callback respond_to? "]}," Test Unit Fixture HookPoint register":{"type":"method","name":"register","children":[],"call":[" add_callback ","options [] ","options empty? "," raise ","must be {:before => :prepend},  + + ","options inspect ","must be {:before => :prepend},  + "," valid_register_options? ","@test_case __send__ "," callback_method_name ","method_name_or_callback respond_to? ","@test_case attribute ","callback source_location ","@callbacks []= "," callback_ callback_method_name  "," callback_method_name _or_callback respond_to? "]}," Test Unit Fixture HookPoint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Test Unit Fixture Fixture collect_target_test_cases":{"type":"method","name":"collect_target_test_cases","children":[],"call":["interested_ancestors reverse ","ancestor is_a? ","ancestors [] find_all ","ancestors [] ","ancestors index ","@test_case ancestors ","interested_@test_case ancestors  reverse ","@test_case ancestors  [] find_all ","@test_case ancestors  [] ","@test_case ancestors  index ","@test_case @test_case ancestors  "]}," Test Unit Fixture Fixture target_test_cases":{"type":"method","name":"target_test_cases","children":[],"call":[" collect_target_test_cases "]}," Test Unit Fixture Fixture after_callbacks":{"type":"method","name":"after_callbacks","children":[],"call":["callbacks | ","ancestor fixture [] after_callbacks ","ancestor fixture [] ","ancestor fixture "," target_test_cases inject "," target_test_cases "," merge_callbacks ","append_callbacks << ","ancestor fixture [] after_append_callbacks ","prepend_callbacks << ","ancestor fixture [] after_prepend_callbacks "," target_test_cases each "," collect_after_callbacks ","@cached_after_callbacks [] "]}," Test Unit Fixture Fixture before_callbacks":{"type":"method","name":"before_callbacks","children":[],"call":["callbacks | ","ancestor fixture [] before_callbacks ","ancestor fixture [] ","ancestor fixture "," target_test_cases inject "," target_test_cases "," merge_callbacks ","append_callbacks << ","ancestor fixture [] before_append_callbacks ","prepend_callbacks << ","ancestor fixture [] before_prepend_callbacks "," target_test_cases each "," collect_before_callbacks ","@cached_before_callbacks [] "]}," Test Unit Fixture Fixture []":{"type":"method","name":"[]","children":[],"call":[]}," Test Unit Fixture Fixture initialize":{"type":"method","name":"initialize","children":[],"call":["HookPoint  new "]}," Test Unit Attribute ClassMethods find_attribute":{"type":"method","name":"find_attribute","children":[],"call":["@cached_parent_test_case find_attribute ","ancestor < ","ancestor is_a? ","ancestor != "," ancestors find "," ancestors "," == ","attributes [] ","attributes key? ","@attributes_table [] ","@attributes_table key? ","StringifyKeyHash  new ","recursive_p nil? ","options [] ","@cached_parent_test nil? ","@cached_parent_test_case nil? ","@attributes_table []  [] ","@attributes_table []  key? ","@@attributes_table [] _table [] ","@@attributes_table [] _table key? ","options []  nil? "]}," Test Unit Attribute StringifyKeyHash key?":{"type":"method","name":"key?","children":[],"call":[" class stringify "," class "]}," Test Unit Fixture HookPoint after_append_callbacks":{"type":"method","name":"after_append_callbacks","children":[],"call":["@after_append_callbacks - "]}," Test Unit Fixture HookPoint after_prepend_callbacks":{"type":"method","name":"after_prepend_callbacks","children":[],"call":["@after_prepend_callbacks - "]}," Test Unit Fixture HookPoint before_append_callbacks":{"type":"method","name":"before_append_callbacks","children":[],"call":["@before_append_callbacks - "]}," Test Unit Fixture HookPoint before_prepend_callbacks":{"type":"method","name":"before_prepend_callbacks","children":[],"call":["@before_prepend_callbacks - "]}," Test Unit Fixture Fixture merge_callbacks":{"type":"method","name":"merge_callbacks","children":[],"call":["all_callbacks concat ","append_callbacks each ","prepend_callbacks reverse_each "]}," Test Unit CodeSnippetFetcher detect_encoding":{"type":"method","name":"detect_encoding","children":[],"call":["Encoding  find ","first_line ascii_only? ","first_line respond_to? "]}," Test Unit Assertions ThrowTagExtractor normalize_tag":{"type":"method","name":"normalize_tag","children":[],"call":["tag intern ","1 intern ","tag [] intern ","tag [] "]}," Test Unit Assertions ThrowTagExtractor extract_tag":{"type":"method","name":"extract_tag","children":[],"call":[" normalize_tag ","pattern =~ ","@error message ","pattern nil? ","UncaughtThrowPatterns  [] ","@error class ","@error tag ","@error is_a? "," normalize_@error tag  ","UncaughtThrowPatterns  []  =~ ","UncaughtThrowPatterns  []  nil? ","@error @error tag  "]}," Test Unit Assertions ThrowTagExtractor initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Test Unit UI Console ColorizedReadableDiffer one_line_all_change?":{"type":"method","name":"one_line_all_change?","children":[],"call":["_line_operations size == ","_line_operations size "," line_operations ","@to first ","@from first ","(lvar :from_start) != ","tag != "," operations first "," operations "," operations size != "," operations size "]}," Test Unit UI Console TestRunner guess_term_width_from_env":{"type":"method","name":"guess_term_width_from_env","children":[],"call":[" Integer ","env nil? ","ENV  [] "]}," Test Unit UI Console TestRunner guess_term_width_from_io":{"type":"method","name":"guess_term_width_from_io","children":[],"call":["@output winsize [] ","@output winsize ","@output respond_to? "]}," Test Unit UI Console TestRunner ruby_2_0_or_later?":{"type":"method","name":"ruby_2_0_or_later?","children":[],"call":["RUBY_VERSION  >= "]}," Test Unit UI Console TestRunner windows?":{"type":"method","name":"windows?","children":[],"call":["(str \"mswin|mingw\") === "]}," Test Unit UI Console TestRunner summary_marker_color":{"type":"method","name":"summary_marker_color","children":[],"call":[" color ","@result status "]}," Test Unit UI Console TestRunner fault_marker_color":{"type":"method","name":"fault_marker_color","children":[],"call":[" color "," fault_class_color_name ","fault class "]}," Test Unit UI Console TestRunner fault_class_color_name":{"type":"method","name":"fault_class_color_name","children":[],"call":["fault_class name split last downcase ","fault_class name split last ","fault_class name split ","fault_class name "]}," Test Unit UI Console TestRunner output_summary_marker":{"type":"method","name":"output_summary_marker","children":[],"call":[" output "," summary_marker_color ","- * ","term_width zero? "," guess_term_width "," nl ","@progress_row_max > ","@progress_row_max <= "," guess_term_width  zero? "," guess_ guess_term_width  "]}," Test Unit ColorScheme guess_available_colors_from_term_env":{"type":"method","name":"guess_available_colors_from_term_env","children":[],"call":["ENV  [] ","2 ** "]}," Test Unit ColorScheme guess_available_colors_from_colorterm_env":{"type":"method","name":"guess_available_colors_from_colorterm_env","children":[],"call":["ENV  [] "]}," Test Unit ColorScheme guess_available_colors_from_vte_version_env":{"type":"method","name":"guess_available_colors_from_vte_version_env","children":[],"call":["vte_version to_i >= ","vte_version to_i ","major * + + ","major * + ","minor * ","major * ","vte_version nil? ","ENV  [] ","ENV  []  to_i >= ","ENV  []  to_i ","ENV  []  nil? "]}," Test Unit Priority Checker escape_class_name":{"type":"method","name":"escape_class_name","children":[],"call":["class_name gsub "," escape_name "]}," Test Unit TestCase target_method_locations":{"type":"method","name":"target_method_locations","children":[],"call":["target_locations << ","location merge ","location [] end_with? ","location [] ","locations each ","@@method_locations each ","path nil? ","self_location [] "," method_locations first "," method_locations ","location_basename == ","location_path == ","File  basename ","File  expand_path ","@@method_location_mutex synchronize ","self_location []  nil? "," method_locations first  [] ","File  basename  == ","location_self_location []  == ","location []  == ","File  expand_self_location []  "]}," run_test":{"type":"method","name":"run_test","children":[],"call":[" require "," class send "," class "]}," Test Unit TestSuiteCreator test_method?":{"type":"method","name":"test_method?","children":[],"call":["test_case find_attribute ","method_name to_s "]}," Test Unit Fixture create_fixtures_runner":{"type":"method","name":"create_fixtures_runner","children":[],"call":["block call "," run_fixture_callback "," create_fixtures_runner ","fixtures pop ","fixtures empty? "]}," Test Unit Fixture HookPoint callback_method_name":{"type":"method","name":"callback_method_name","children":[],"call":["callback object_id "]}," Test Unit Fixture Fixture collect_after_callbacks":{"type":"method","name":"collect_after_callbacks","children":[],"call":[" merge_callbacks ","append_callbacks << ","ancestor fixture [] after_append_callbacks ","ancestor fixture [] ","ancestor fixture ","prepend_callbacks << ","ancestor fixture [] after_prepend_callbacks "," target_test_cases each "," target_test_cases "]}," Test Unit Fixture Fixture collect_before_callbacks":{"type":"method","name":"collect_before_callbacks","children":[],"call":[" merge_callbacks ","append_callbacks << ","ancestor fixture [] before_append_callbacks ","ancestor fixture [] ","ancestor fixture ","prepend_callbacks << ","ancestor fixture [] before_prepend_callbacks "," target_test_cases each "," target_test_cases "]}," Test Unit Collector Load default_test_paths=":{"type":"method","name":"default_test_paths=","children":[],"call":[" Pathname ","paths collect "]}," Test Unit AutoRunner add_location_filter":{"type":"method","name":"add_location_filter","children":[],"call":["@filters << ","test class test_defined? ","test method_name ","test class "," lambda "]}," Test Unit AutoRunner add_test_path":{"type":"method","name":"add_test_path","children":[],"call":["@to_run << "," add_location_filter ","1 to_i "]}," Test Unit AutoRunnerLoader check":{"type":"method","name":"check","children":[],"call":[" require ","TestSuiteCreator  test_method? "]}," Test Unit TestResult stop":{"type":"method","name":"stop","children":[],"call":[" throw "]}," Test Unit AutoRunner StopOnFailureListener attach_to_mediator":{"type":"method","name":"attach_to_mediator","children":[],"call":["result stop ","result passed? ","mediator add_listener "]}," Test Unit AutoRunner stop_on_failure?":{"type":"method","name":"stop_on_failure?","children":[],"call":[]}," Test Unit TestCase find_locations":{"type":"method","name":"find_locations","children":[],"call":["available_location nil? ","query_method_name == ","location [] ","available_locations find ","available_location [] != ","available_location [] ","query_line >= ","location [] -@ ","available_locations sort_by "," target_method_locations ","query [] ","location [] == ","query []  == "," target_method_locations  find ","query []  >= "," target_method_locations  sort_by "]}," Test Unit Assertions AssertExceptionHelper exception_class?":{"type":"method","name":"exception_class?","children":[],"call":["exception_type <= ","Object  const_defined? "]}," Test Unit Assertions AssertExceptionHelper exception_object?":{"type":"method","name":"exception_object?","children":[],"call":["exception_type is_a? ","Object  const_defined? "]}," Test Unit TestCase local_name":{"type":"method","name":"local_name","children":[],"call":["@method_name to_s "," data_label ","@internal_data have_test_data? "]}," Test Unit Assertions AssertionMessage Template concatenatable":{"type":"method","name":"concatenatable","children":[],"call":["text dup force_encoding ","text dup ","Encoding  compatible? "]}," Test Unit UI Console TestRunner fetch_code_snippet":{"type":"method","name":"fetch_code_snippet","children":[],"call":["@code_snippet_fetcher fetch "]}," Test Unit TestCase data":{"type":"method","name":"data","children":[],"call":["@internal_data test_data "]}," Test Unit TestSuiteCreator extract_data_sets":{"type":"method","name":"extract_data_sets","children":[],"call":["data_sets << ","DataSets  new ","data_method arity <= ","data_method arity ","test method ","test respond_to? ","@test_case new ","@test_case find_attribute ","@test_case find_attribute  << ","test method  arity <= ","test method  arity ","@test_case new  method ","@test_case new  respond_to? ","@@test_case new _case new ","@@test_case new _case find_attribute "]}," Test Unit DataSets each_raw_pattern":{"type":"method","name":"each_raw_pattern","children":[],"call":["all_patterns [] product ","all_patterns [] ","patterns collect ","sorted_variables collect ","variables sort_by ","variables empty? ","pattern inspect ","patterns is_a? "]}," Test Unit DataSets each_pattern":{"type":"method","name":"each_pattern","children":[],"call":["data []= ","label << ","pattern inspect ","label empty? ","cell each ","group inspect ","group nil? ","String  new "," each_raw_pattern ","grouped_variables each ","options [] ","variables group_by ","String  new  << ","String  new  empty? "]}," Test Unit DataSets hash":{"type":"method","name":"hash","children":[],"call":["(ivar :@variables) hash "]}," Test Unit DataSets eql?":{"type":"method","name":"eql?","children":[],"call":[" == "]}," Test Unit DataSets ==":{"type":"method","name":"==","children":[],"call":["@value_sets == ","other instance_variable_get ","@procs == ","@variables == "]}," Test Unit DataSets each":{"type":"method","name":"each","children":[],"call":[" each_pattern ","values each ","value_sets each ","proc call ","@procs each "]}," Test Unit DataSets keep":{"type":"method","name":"keep","children":[],"call":["new_data_sets add ","options [] ","options nil? ","all_data_sets each ","@value_sets each ","@variables each ","@procs each ","yielder << "," lambda ","Enumerator  new "," class new "," class "," each_data_set "," class new  add "]}," Test Unit DataSets <<":{"type":"method","name":"<<","children":[],"call":[" add "]}," Test Unit DataSets add":{"type":"method","name":"add","children":[],"call":["@value_sets << ","@variables << ","data_set is_a? ","@procs << ","data_set respond_to? "]}," Test Unit DataSets initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Test Unit TestCase add_method_location":{"type":"method","name":"add_method_location","children":[],"call":[" method_locations << "," method_locations ","@@method_location_mutex synchronize "]}," Test Unit TestCase include":{"type":"method","name":"include","children":[],"call":["AutoRunnerLoader  check ","method_name to_s ","mod public_instance_methods each ","mod public_instance_methods ","modules each "]}," Test Unit Assertions AssertionMessage user_message":{"type":"method","name":"user_message","children":[],"call":["message to_s ","message call ","message respond_to? ","message call  to_s ","message call  call ","message call  respond_to? "]}," Test Unit Priority Checker escape_name":{"type":"method","name":"escape_name","children":[],"call":["name gsub "]}," Test Unit AutoRunner match_test_name":{"type":"method","name":"match_test_name","children":[],"call":["pattern === ","test local_name ","test class ","test method_name ","pattern is_a? "]}," Test Unit AutoRunner prepare_name":{"type":"method","name":"prepare_name","children":[],"call":["Regexp  new ","options_raw include? "]}," Test Unit Assertions assert_all?":{"type":"method","name":"assert_all?","children":[],"call":["failed ! "," assert_block "," build_message ","result []= ","collection each "," _wrap_assertion "]}," Test Unit Assertions assert_raise_with_message":{"type":"method","name":"assert_raise_with_message","children":[],"call":[" _assert_raise ","args << "," raise "," _set_failed_information ","expected_message === ","actual_exception message ","assert_exception_helper expected? "," assert_block "," build_message ","actual_exception class ","<?>(<?>) exception expected but was\n + ","AssertionMessage  delayed_diff ","Proc  new ","AssertionMessage  delayed_AssertionMessage  delayed_diff  "]}," Test Unit Assertions assert_all":{"type":"method","name":"assert_all","children":[],"call":["failed ! "," assert_block "," build_message ","result []= ","collection each "," _wrap_assertion "]}," Test Unit Util MemoryUsage collect_data_proc":{"type":"method","name":"collect_data_proc","children":[],"call":[" collected? "," Integer * "," Integer ","data each_line ","File  binread ","File  exist? ","File  binread  each_line "]}," Test Unit Util MemoryUsage collect_data":{"type":"method","name":"collect_data","children":[],"call":[" collect_data_proc "]}," Test Unit Util MemoryUsage collected?":{"type":"method","name":"collected?","children":[],"call":["@physical nil? ","@virtual nil? "]}," Test Unit Util MemoryUsage initialize":{"type":"method","name":"initialize","children":[],"call":[" collect_data "]}," Test Unit Assertions assert_nothing_leaked_memory":{"type":"method","name":"assert_nothing_leaked_memory","children":[],"call":["actual_increased_size < "," assert_block "," build_message ","after_value - ","after __send__ ","before __send__ ","Util MemoryUsage  new ","GC  start "," omit ","before collected? "," _wrap_assertion ","after_value -  < ","after __send__  - ","Util MemoryUsage  new _value - ","Util MemoryUsage  new  __send__ ","Util MemoryUsage  new  collected? "]}," Test Unit TestCase ractor":{"type":"method","name":"ractor","children":[],"call":[" attribute "]}," Test Unit Collector extract_ractor_tests":{"type":"method","name":"extract_ractor_tests","children":[],"call":["ractor_suites << ","ractor_suite << ","ractor_tests each ","TestSuite  new ","suite test_case ","suite name ","suite delete_tests ","ractor_tests empty? ","ractor_tests << ","test [] ","ractor_suites concat "," extract_ractor_tests ","suite tests each ","suite tests ","TestSuite  new s << ","TestSuite  new  << ","TestSuite  new s concat "]}," Test Unit Collector adjust_ractor_tests":{"type":"method","name":"adjust_ractor_tests","children":[],"call":["suite << ","ractor_suites each "," extract_ractor_tests ","suite nil? "," extract_ractor_tests  each "]}," Test Unit AutoRunner debug_on_failure?":{"type":"method","name":"debug_on_failure?","children":[],"call":[]}," Test Unit AssertionFailedError debug_on_failure":{"type":"method","name":"debug_on_failure","children":[],"call":[" binding break "," binding ","frame_index nil? ","frames index ","Util BacktraceFilter  filter_backtrace each ","Util BacktraceFilter  filter_backtrace "," caller "," binding respond_to? "," require "," class debug_on_failure? "," class ","frames index  nil? "," caller  index "]}," Test Unit AssertionFailedError debug_on_failure?":{"type":"method","name":"debug_on_failure?","children":[],"call":[]}," Test Unit AssertionFailedError debug_on_failure=":{"type":"method","name":"debug_on_failure=","children":[],"call":[]}," Test Unit DataSets each_data_set":{"type":"method","name":"each_data_set","children":[],"call":["@value_sets each ","@variables each ","@procs each "]}," Test Unit DataSets have_keep?":{"type":"method","name":"have_keep?","children":[],"call":["options [] "," each_data_set "]}," Test Unit TestCase sub_test_case_class":{"type":"method","name":"sub_test_case_class","children":[],"call":["(send\n  (lvar :parent_test_case) :name) compact join ","(send\n  (lvar :parent_test_case) :name) compact ","parent_test_case name ","singleton_class __send__ ","Class  new "]}," Test Unit ColorScheme guess_available_colors_from_github_actions_env":{"type":"method","name":"guess_available_colors_from_github_actions_env","children":[],"call":["2 ** ","ENV  [] == ","ENV  [] "]}," Test Unit UI Console TestRunner guess_progress_style":{"type":"method","name":"guess_progress_style","children":[],"call":["ENV  [] == ","ENV  [] ","@output_level >= ","@output tty? "]}," Test Unit UI Console TestRunner guess_output_level":{"type":"method","name":"guess_output_level","children":[],"call":["ENV  [] == ","ENV  [] "]}}