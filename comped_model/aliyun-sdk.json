{" Hash symbolize_keys!":{"type":"method","name":"symbolize_keys!","children":[],"call":["v symbolize_keys! ","v is_a? "," values each "," values "," []= "," delete ","k to_sym "," keys each "," keys "]}," Array symbolize_keys!":{"type":"method","name":"symbolize_keys!","children":[],"call":["v symbolize_keys! ","v is_a? "," each "]}," String to_bool":{"type":"method","name":"to_bool","children":[],"call":[" =~ "]}," Aliyun OSS Util get_content_md5":{"type":"method","name":"get_content_md5","children":[],"call":["Base64  strict_encode64 ","OpenSSL Digest MD5  digest "]}," Aliyun OSS Util sign":{"type":"method","name":"sign","children":[],"call":["Base64  strict_encode64 ","OpenSSL HMAC  digest "," logger debug "," logger "]}," Aliyun OSS Util get_signature":{"type":"method","name":"get_signature","children":[],"call":["Util  sign "," logger debug "," logger ","(begin\n  (lvar :verb)) + ","sub_res empty? ","(send\n  (send\n    (begin\n      (or\n        (send\n          (lvar :resources) :[]\n          (sym :sub_res))\n        (hash))) :sort) :map) join ","(lvar :k) join ","(or\n  (send\n    (lvar :resources) :[]\n    (sym :sub_res))\n  (hash)) sort map ","(or\n  (send\n    (lvar :resources) :[]\n    (sym :sub_res))\n  (hash)) sort ","resources [] ","(send\n  (send\n    (block\n      (send\n        (block\n          (send\n            (lvar :headers) :select)\n          (args\n            (arg :k)\n            (arg :v))\n          (send\n            (lvar :k) :start_with?\n            (const nil :HEADER_PREFIX))) :map)\n      (args\n        (arg :k)\n        (arg :v))\n      (array\n        (send\n          (send\n            (lvar :k) :downcase) :strip)\n        (send\n          (lvar :v) :strip))) :sort) :map) join ","(lvar :k) join + ","(send\n  (block\n    (send\n      (lvar :headers) :select)\n    (args\n      (arg :k)\n      (arg :v))\n    (send\n      (lvar :k) :start_with?\n      (const nil :HEADER_PREFIX))) :map) sort map ","(send\n  (block\n    (send\n      (lvar :headers) :select)\n    (args\n      (arg :k)\n      (arg :v))\n    (send\n      (lvar :k) :start_with?\n      (const nil :HEADER_PREFIX))) :map) sort ","v strip ","k downcase strip ","k downcase ","(send\n  (lvar :headers) :select) map ","k start_with? ","headers select ","headers [] ","(send\n  (send\n    (begin\n      (or\n        (send\n          (lvar :resources) :[]\n          (sym :sub_res))\n        (hash))) :sort) :map) join  empty? ","(send\n  (send\n    (begin\n      (or\n        (send\n          (lvar :resources) :[]\n          (sym :(send\n  (send\n    (begin\n      (or\n        (send\n          (lvar :resources) :[]\n          (sym :sub_res))\n        (hash))) :sort) :map) join ))\n        (hash))) :sort) :map) join ","(or\n  (send\n    (lvar :resources) :[]\n    (sym :(send\n  (send\n    (begin\n      (or\n        (send\n          (lvar :resources) :[]\n          (sym :sub_res))\n        (hash))) :sort) :map) join ))\n  (hash)) sort map ","(or\n  (send\n    (lvar :resources) :[]\n    (sym :(send\n  (send\n    (begin\n      (or\n        (send\n          (lvar :resources) :[]\n          (sym :sub_res))\n        (hash))) :sort) :map) join ))\n  (hash)) sort "]}," Aliyun OSS Multipart Upload ensure_file_not_changed":{"type":"method","name":"ensure_file_not_changed","children":[],"call":[" fail ","@file_meta [] != "," get_file_md5 ","@file_meta [] ","File  mtime == ","File  mtime "]}," Aliyun OSS Multipart Upload divide_parts":{"type":"method","name":"divide_parts","children":[],"call":[" logger info "," logger "," checkpoint ","(send\n  (lvar :i) :*\n  (lvar :part_size)) min ","i * ","(send\n  (lvar :i) :-\n  (int 1)) * ","i - ","(irange\n  (int 1)\n  (lvar :num_parts)) map ","(send\n  (lvar :file_size) :-\n  (int 1)) / + ","(send\n  (lvar :file_size) :-\n  (int 1)) / ","file_size - ","(or\n  (send\n    (ivar :@options) :[]\n    (sym :part_size))\n  (const nil :PART_SIZE)) max ","file_size / ","@options [] ","File  size ","(send\n  (lvar :i) :*\n  (lvar :(or\n  (send\n    (ivar :@options) :[]\n    (sym :part_size))\n  (const nil :PART_SIZE)) max )) min ","(irange\n  (int 1)\n  (lvar :(send\n  (lvar :file_size) :-\n  (int 1)) / + )) map ","(send\n  (lvar :File  size ) :-\n  (int 1)) / + ","(send\n  (lvar :File  size ) :-\n  (int 1)) / ","File  size  - ","(or\n  (send\n    (ivar :@options) :[]\n    (sym :(or\n  (send\n    (ivar :@options) :[]\n    (sym :part_size))\n  (const nil :PART_SIZE)) max ))\n  (const nil :PART_SIZE)) max ","File  size  / "]}," Aliyun OSS Multipart Upload upload_part":{"type":"method","name":"upload_part","children":[],"call":[" logger debug "," logger "," checkpoint ","p []= ","result etag ","sw << ","f read ","(const nil :READ_SIZE) min ","range at - ","range at ","pos < ","@protocol upload_part ","p [] "," id "," object "," bucket ","f seek ","range first ","File  open "," sync_update_part ","p merge ","p []  at - ","p []  at ","range first  < ","p []  first "]}," Aliyun OSS Multipart Upload initiate":{"type":"method","name":"initiate","children":[],"call":[" logger info "," id "," logger "," checkpoint "," get_file_md5 ","File  mtime ","@protocol initiate_multipart_upload "," options "," object "," bucket "]}," Aliyun OSS Multipart Upload rebuild":{"type":"method","name":"rebuild","children":[],"call":[" logger info "," logger "," initiate ","states [] "," fail ","FileInconsistentError  new ","states [] != ","@file_meta [] "," load_checkpoint "," options [] ! "," options [] "," options ","File  exists? ","File  exists? ! "," load_checkpoint  [] "," load_checkpoint  [] != ","states []  [] "]}," Aliyun OSS Multipart Upload commit":{"type":"method","name":"commit","children":[],"call":[" logger info "," id "," logger ","File  delete "," options [] "," options ","@protocol complete_multipart_upload "," object "," bucket ","Part  new ","p [] ","@parts map "," sync_get_all_parts map "," sync_get_all_parts ","@options [] "]}," Aliyun OSS Multipart Upload checkpoint":{"type":"method","name":"checkpoint","children":[],"call":[" logger debug "," logger "," write_checkpoint "," options [] "," options ","@progress call ","done to_f / ","@parts size ","done to_f ","done > ","p [] ","@parts count "," id "," ensure_file_not_changed ","parts size ","parts count "," sync_get_all_parts "," options [] == ","@ sync_get_all_parts  size ","@ sync_get_all_parts  count "," sync_get_all_parts  size "," sync_get_all_parts  count "," sync_get_all_ sync_get_all_parts  "]}," Aliyun OSS Multipart Upload run":{"type":"method","name":"run","children":[],"call":[" logger info "," logger "," commit "," upload_part ","(send\n  (ivar :@parts) :reject) each ","p [] ","@parts reject "," divide_parts ","@parts empty? "," rebuild ","(send\n  (begin\n    (irange\n      (int 1)\n      (ivar :@num_threads))) :map) map "," sync_get_todo_part "," loop ","Thread  new ","(irange\n  (int 1)\n  (ivar :@num_threads)) map "," u sync_get_todo_part load_ sync_get_todo_part art ","(send\n  (ivar :@ sync_get_todo_part arts) :reject) each "," sync_get_todo_part  [] ","@ sync_get_todo_part arts reject "," divide_ sync_get_todo_part arts ","@ sync_get_todo_part arts em sync_get_todo_part ty? ","(send\n  (begin\n    (irange\n      (int 1)\n      (ivar :@num_threads))) :ma sync_get_todo_part ) ma sync_get_todo_part  "," sync_get_todo_ sync_get_todo_part art "," loo sync_get_todo_part  ","(irange\n  (int 1)\n  (ivar :@num_threads)) ma sync_get_todo_part  "]}," Aliyun OSS Multipart Upload initialize":{"type":"method","name":"initialize","children":[],"call":["args delete ","opts dup ","Mutex  new "," options [] "," options ","opts dup  delete "]}," Aliyun OSS LifeCycleRule enabled?":{"type":"method","name":"enabled?","children":[],"call":[" enable == "," enable "]}," Aliyun OSS BucketReferer allow_empty?":{"type":"method","name":"allow_empty?","children":[],"call":[" allow_empty == "," allow_empty "]}," Aliyun OSS BucketWebsite enabled?":{"type":"method","name":"enabled?","children":[],"call":[" enable == "," enable "]}," Aliyun OSS BucketLogging enabled?":{"type":"method","name":"enabled?","children":[],"call":[" enable == "," enable "]}," Aliyun OSS Struct Base to_s":{"type":"method","name":"to_s","children":[],"call":["(send\n  (send nil :attrs) :map) join ","attr to_s "," instance_variable_get "," attrs map "," attrs "," instance_ instance_variable_get ariable_get "]}," Aliyun OSS Struct Base initialize":{"type":"method","name":"initialize","children":[],"call":[" instance_variable_set ","opts [] "," attrs each "," attrs "," fail ","extra_keys join ","extra_keys empty? ","opts keys - ","opts keys ","opts keys -  join ","opts keys -  empty? "]}," Aliyun OSS Struct Base AttrHelper attrs":{"type":"method","name":"attrs","children":[],"call":[" attr_reader "," define_method "]}," Aliyun OSS KeyEncoding all":{"type":"method","name":"all","children":[],"call":[]}," Aliyun OSS KeyEncoding include?":{"type":"method","name":"include?","children":[],"call":[]}," Aliyun OSS Protocol update_if_exists":{"type":"method","name":"update_if_exists","children":[],"call":["hash []= ","v call ","hash [] ","hash key? ","kv each "]}," Aliyun OSS Protocol get_bytes_range":{"type":"method","name":"get_bytes_range","children":[],"call":["range at - ","range at "," fail ","range at is_a? ! ","range at is_a? ","range size != ","range size ","range is_a? ! ","range is_a? "]}," Aliyun OSS Protocol get_copy_conditions":{"type":"method","name":"get_copy_conditions","children":[],"call":["(send\n  (hash\n    (pair\n      (sym :if_modified_since)\n      (str \"x-oss-copy-source-if-modified-since\"))\n    (pair\n      (sym :if_unmodified_since)\n      (str \"x-oss-copy-source-if-unmodified-since\"))) :reduce\n  (hash)) merge ","h merge ","conditions [] ","conditions key? ","(pair\n  (sym :if_match_etag)\n  (str \"x-oss-copy-source-if-match\")) reduce ","conditions [] httpdate ","(pair\n  (sym :if_modified_since)\n  (str \"x-oss-copy-source-if-modified-since\")) reduce "]}," Aliyun OSS Protocol get_conditions":{"type":"method","name":"get_conditions","children":[],"call":["(send\n  (hash\n    (pair\n      (sym :if_modified_since)\n      (str \"If-Modified-Since\"))\n    (pair\n      (sym :if_unmodified_since)\n      (str \"If-Unmodified-Since\"))) :reduce\n  (hash)) merge ","h merge ","conditions [] ","conditions key? ","(pair\n  (sym :if_match_etag)\n  (str \"If-Match\")) reduce ","conditions [] httpdate ","(pair\n  (sym :if_modified_since)\n  (str \"If-Modified-Since\")) reduce ","(send\n  (hash\n    (pair\n      (sym :if_modified_since)\n      (str \"if-modified-since\"))\n    (pair\n      (sym :if_unmodified_since)\n      (str \"if-unmodified-since\"))) :reduce\n  (hash)) merge ","(pair\n  (sym :if_match_etag)\n  (str \"if-match\")) reduce ","(pair\n  (sym :if_modified_since)\n  (str \"if-modified-since\")) reduce "]}," Aliyun OSS Protocol wrap":{"type":"method","name":"wrap","children":[],"call":[]}," Aliyun OSS Protocol decode_key":{"type":"method","name":"decode_key","children":[],"call":["CGI  unescape ","encoding == "," fail ","KeyEncoding  include? "]}," Aliyun OSS Protocol get_node_text":{"type":"method","name":"get_node_text","children":[],"call":["n text ","node at_css ","node at_css  text ","node at_css ode at_css "]}," Aliyun OSS Protocol parse_xml":{"type":"method","name":"parse_xml","children":[],"call":["config options ","Nokogiri  XML "]}," Aliyun OSS Protocol sign":{"type":"method","name":"sign","children":[],"call":["Util  sign ","@config access_key_secret "]}," Aliyun OSS Protocol get_access_key_id":{"type":"method","name":"get_access_key_id","children":[],"call":["@config access_key_id "]}," Aliyun OSS Protocol get_request_url":{"type":"method","name":"get_request_url","children":[],"call":["@http get_request_url "]}," Aliyun OSS Protocol list_parts":{"type":"method","name":"list_parts","children":[],"call":[" logger debug "," logger "," update_if_exists ","x to_bool "," lambda ","x to_i ","h merge ","value nil? "," get_node_text ","doc root ","(pair\n  (sym :limit)\n  (str \"MaxParts\")) reduce ","Multipart Part  new ","Time  parse ","doc css map ","doc css "," parse_xml ","@http get ","v nil? ","(pair\n  (str \"part-number-marker\")\n  (send\n    (lvar :opts) :[]\n    (sym :marker))) reject ","opts [] ","r body "," logge@http get  debug "," logge@http get  ","h me@http get ge "," get_node_text  nil? "," parse_xml  root ","doc @http get oot ","(pai@http get \n  (sym :limit)\n  (st@http get  \"MaxPa@http get ts\")) @http get educe ","Multipa@http get t Pa@http get t  new ","Time  pa@http get se "," parse_xml  css map "," parse_xml  css "," pa@http get se_xml ","(pai@http get \n  (st@http get  \"pa@http get t-numbe@http get -ma@http get ke@http get \")\n  (send\n    (lva@http get  :opts) :[]\n    (sym :ma@http get ke@http get ))) @http get eject ","@http get  body "]}," Aliyun OSS Protocol list_multipart_uploads":{"type":"method","name":"list_multipart_uploads","children":[],"call":[" logger debug "," logger "," update_if_exists "," decode_key "," lambda ","x to_bool ","x to_i ","h merge ","value nil? "," get_node_text ","doc root ","(pair\n  (sym :prefix)\n  (str \"Prefix\")) reduce ","Multipart Transaction  new ","Time  parse ","doc css map ","doc css "," parse_xml ","@http get ","v nil? ","(pair\n  (str \"prefix\")\n  (send\n    (lvar :opts) :[]\n    (sym :prefix))) reject ","opts [] ","r body "," logge@http get  debug "," logge@http get  ","h me@http get ge "," get_node_text  nil? "," parse_xml  root ","doc @http get oot ","(pai@http get \n  (sym :p@http get efix)\n  (st@http get  \"P@http get efix\")) @http get educe ","Multipa@http get t T@http get ansaction  new ","Time  pa@http get se "," parse_xml  css map "," parse_xml  css "," pa@http get se_xml ","(pai@http get \n  (st@http get  \"p@http get efix\")\n  (send\n    (lva@http get  :opts) :[]\n    (sym :p@http get efix))) @http get eject ","@http get  body "]}," Aliyun OSS Protocol abort_multipart_upload":{"type":"method","name":"abort_multipart_upload","children":[],"call":[" logger debug "," logger ","@http delete "]}," Aliyun OSS Protocol complete_multipart_upload":{"type":"method","name":"complete_multipart_upload","children":[],"call":[" logger debug "," logger ","@http post ","(send\n  (const\n    (const\n      (const nil :Nokogiri) :XML) :Builder) :new) to_xml ","xml ETag ","p etag ","xml PartNumber ","p number ","xml Part ","parts each ","xml CompleteMultipartUpload ","Nokogiri XML Builder  new ","parts map "," raise "," logger error ","e to_s ","CallbackError  new ","r code == ","r code ","headers []= ","callback serialize "," loggCallbackError  new r dCallbackError  new bug "," logge@http post  debug "," loggCallbackError  new r "," logge@http post  ","(sCallbackError  new nd\n  (const\n    (const\n      (const nil :Nokogiri) :XML) :BuildCallbackError  new r) :nCallbackError  new w) to_xml ","(send\n  (const\n    (const\n      (const nil :Nokogi@http post i) :XML) :Builde@http post ) :new) to_xml ","p CallbackError  new tag ","xml PartNumbCallbackError  new r ","xml Pa@http post tNumbe@http post  ","p numbCallbackError  new r ","p numbe@http post  ","xml Pa@http post t ","parts CallbackError  new ach ","pa@http post ts each ","xml ComplCallbackError  new tCallbackError  new MultipartUpload ","xml CompleteMultipa@http post tUpload ","Nokogiri XML BuildCallbackError  new r  nCallbackError  new w ","Nokogi@http post i XML Builde@http post   new ","pa@http post ts map "," raisCallbackError  new  "," @http post aise "," loggCallbackError  new r CallbackError  new rror "," logge@http post  e@http post @http post o@http post  ","CallbackError  new  to_s ","CallbackError  nCallbackError  new w ","CallbackE@http post @http post o@http post   new ","r codCallbackError  new  == ","@http post  code == ","r codCallbackError  new  ","@http post  code ","hCallbackError  new adCallbackError  new rs []= ","heade@http post s []= ","callback sCallbackError  new rializCallbackError  new  ","callback se@http post ialize "]}," Aliyun OSS Protocol upload_part_by_copy":{"type":"method","name":"upload_part_by_copy","children":[],"call":["Multipart Part  new ","headers [] "," logger debug "," logger ","@http put ","headers merge! "," get_copy_conditions ","headers []= "," get_bytes_range ","@http get_resource_path "," fail ","range size != ","range size ","range is_a? ! ","range is_a? ","opts [] ","r headers [] ","r headers ","Multipa@http put t Pa@http put t  new ","heade@http put s [] "," logge@http put  debug "," logge@http put  ","heade@http put s me@http put ge! "," get_copy_opts []  ","heade@http put s []= "," get_bytes_opts []  "," get_bytes_@http put ange ","@http get_@http put esou@http put ce_path ","opts []  size != ","@http put ange size != ","opts []  size ","@http put ange size ","opts []  is_a? ! ","@http put ange is_a? ! ","opts []  is_a? ","@http put ange is_a? ","@http put  heade@http put s [] ","@http put  heade@http put s "]}," Aliyun OSS Protocol upload_part":{"type":"method","name":"upload_part","children":[],"call":["Multipart Part  new ","headers [] "," logger debug "," logger ","@http put ","HTTP StreamPayload  new ","r headers [] ","r headers ","Aliyun OSS Util  crc_check ","payload read data_crc ","payload read ","r headers [] nil? ! ","r headers [] nil? ","@config upload_crc_enable ","payload data_crc ","HTTP StreamWriter  new ","Multipa@http put t Pa@http put t  new ","heade@http put s [] "," logge@http put  debug "," logge@http put  ","HTTP St@http put eamPayload  new ","@http put  heade@http put s [] ","@http put  heade@http put s ","Aliyun OSS Util  c@http put c_check ","payload @http put ead data_c@http put c ","payload read payload read data_crc  ","payload read payload data_crc  ","HTTP StreamPayload  new  read data_crc ","HTTP StreamWriter  new  read data_crc ","payload @http put ead ","HTTP StreamPayload  new  read ","HTTP StreamWriter  new  read ","@http put  heade@http put s [] nil? ! ","@http put  heade@http put s [] nil? ","@config upload_c@http put c_enable ","payload data_c@http put c ","payload payload read data_crc  ","payload payload data_crc  ","HTTP StreamPayload  new  data_crc ","HTTP StreamWriter  new  data_crc ","HTTP St@http put eamW@http put ite@http put   new "]}," Aliyun OSS Protocol initiate_multipart_upload":{"type":"method","name":"initiate_multipart_upload","children":[],"call":[" logger info "," logger "," get_node_text ","doc root "," parse_xml ","@http post ","headers []= ","v to_s ","k to_s ","(or\n  (send\n    (lvar :opts) :[]\n    (sym :metas))\n  (hash)) each ","opts [] ","r body ","headers merge! "," to_lower_case ","opts key? "," to_lower_case each "," logge@http post  info "," logge@http post  "," parse_xml  root ","doc @http post oot "," pa@http post se_xml ","heade@http post s []= ","(o@http post \n  (send\n    (lva@http post  :opts) :[]\n    (sym :metas))\n  (hash)) each ","@http post  body ","heade@http post s me@http post ge! "," to_lowe@http post _case "," to_lowe@http post _case each "]}," Aliyun OSS Protocol get_object_cors":{"type":"method","name":"get_object_cors","children":[],"call":["CORSRule  new ","return_headers [] "," logger debug "," logger ","@http options ","headers join ","r headers [] ","r headers ","@http options etu@http options n_heade@http options s [] "," logge@http options  debug "," logge@http options  ","heade@http options s join ","@http options  heade@http options s [] ","@http options  heade@http options s "]}," Aliyun OSS Protocol get_object_acl":{"type":"method","name":"get_object_acl","children":[],"call":[" logger debug "," logger "," get_node_text ","doc at_css "," parse_xml ","@http get ","r body "," logge@http get  debug "," logge@http get  "," parse_xml  at_css "," pa@http get se_xml ","@http get  body "]}," Aliyun OSS Protocol put_object_acl":{"type":"method","name":"put_object_acl","children":[],"call":[" logger debug "," logger ","@http put "]}," Aliyun OSS Protocol batch_delete_objects":{"type":"method","name":"batch_delete_objects","children":[],"call":[" logger debug "," logger ","deleted << "," decode_key "," get_node_text ","doc css map ","doc css ","doc root "," parse_xml ","opts [] ","@http post ","query []= ","(send\n  (const\n    (const\n      (const nil :Nokogiri) :XML) :Builder) :new) to_xml ","xml Key ","xml Object ","object_names each ","xml Quiet ","xml Delete ","Nokogiri XML Builder  new ","body << ","body << << << ","body << << ","(if\n  (send\n    (lvar :opts) :[]\n    (sym :quiet))\n  (true)\n  (false)) to_s ","r body ","CGI  escapeHTML "," logge@http post  debug "," logge@http post  "," parse_xml  css map "," parse_xml  css "," parse_xml  root ","doc @http post oot "," pa@http post se_xml ","que@http post y []= ","(send\n  (const\n    (const\n      (const nil :Nokogi@http post i) :XML) :Builde@http post ) :new) to_xml ","Nokogi@http post i XML Builde@http post   new ","(send\n  (const\n    (const\n      (const nil :Nokogiri) :XML) :Builder) :new) to_xml  << ","(send\n  (const\n    (const\n      (const nil :Nokogiri) :XML) :Builder) :new) to_xml  << << << ","(send\n  (const\n    (const\n      (const nil :Nokogiri) :XML) :Builder) :new) to_xml  << << ","(if\n  (send\n    (lva@http post  :opts) :[]\n    (sym :quiet))\n  (t@http post ue)\n  (false)) to_s ","r (send\n  (const\n    (const\n      (const nil :Nokogiri) :XML) :Builder) :new) to_xml  ","@http post  body "]}," Aliyun OSS Protocol delete_object":{"type":"method","name":"delete_object","children":[],"call":[" logger debug "," logger ","@http delete "]}," Aliyun OSS Protocol copy_object":{"type":"method","name":"copy_object","children":[],"call":[" logger debug "," logger ","v nil? ","(pair\n  (sym :last_modified)\n  (block\n    (send nil :get_node_text\n      (send\n        (lvar :doc) :root)\n      (str \"LastModified\"))\n    (args\n      (arg :x))\n    (send\n      (const nil :Time) :parse\n      (lvar :x)))) reject "," get_node_text ","doc root ","Time  parse "," parse_xml ","@http put ","headers merge! "," get_copy_conditions ","opts [] ","headers []= ","(pair\n  (sym :acl)\n  (str \"x-oss-object-acl\")) each ","v to_s ","k to_s ","(or\n  (send\n    (lvar :opts) :[]\n    (sym :metas))\n  (hash)) each ","@http get_resource_path ","r body "," logge@http put  debug "," logge@http put  ","(pair\n  (sym :last_modified)\n  (block\n    (send nil :get_node_text\n      (send\n        (lvar : parse_xml ) :root)\n      (str \"LastModified\"))\n    (args\n      (arg :x))\n    (send\n      (const nil :Time) :parse\n      (lvar :x)))) reject ","(pai@http put \n  (sym :last_modified)\n  (block\n    (send nil :get_node_text\n      (send\n        (lva@http put  :doc) :@http put oot)\n      (st@http put  \"LastModified\"))\n    (a@http put gs\n      (a@http put g :x))\n    (send\n      (const nil :Time) :pa@http put se\n      (lva@http put  :x)))) @http put eject "," parse_xml  root ","doc @http put oot ","Time  pa@http put se "," pa@http put se_xml ","heade@http put s me@http put ge! ","heade@http put s []= ","(pai@http put \n  (sym :acl)\n  (st@http put  \"x-oss-object-acl\")) each ","(o@http put \n  (send\n    (lva@http put  :opts) :[]\n    (sym :metas))\n  (hash)) each ","@http get_@http put esou@http put ce_path ","@http put  body "]}," Aliyun OSS Protocol get_object_meta":{"type":"method","name":"get_object_meta","children":[],"call":[" logger debug "," logger ","Object  new ","Time  parse "," wrap ","h [] ","metas []= ","v to_s ","k to_s sub ","k to_s ","(send\n  (lvar :h) :select) each ","k to_s start_with? ","h select ","@http head ","headers merge! "," get_conditions ","opts [] ","r headers "," logge@http head  debug "," logge@http head  ","Time  pa@http head se "," w@http head ap ","r headers  [] ","(send\n  (lvar :r headers ) :select) eacr headers  ","(send\n  (lva@http head  :h) :select) each ","k to_s start_witr headers ? ","k to_s sta@http head t_with? ","r headers  select ","@r headers ttp r headers ead ","r headers eaders merge! ","heade@http head s me@http head ge! ","r r headers eaders ","@http head  heade@http head s "]}," Aliyun OSS Protocol get_object":{"type":"method","name":"get_object","children":[],"call":[" logger debug "," logger ","Object  new ","Time  parse "," wrap ","h [] ","metas []= ","v to_s ","k to_s sub ","k to_s ","(send\n  (lvar :h) :select) each ","k to_s start_with? ","h select "," block_given? ","@http get ","sub_res []= ","rewrites [] httpdate ","rewrites [] ","rewrites key? ","(sym :content_type) each ","headers merge! "," get_conditions ","headers []= "," get_bytes_range ","opts [] ","r headers "," to_lower_case ","opts key? ","Aliyun OSS Util  crc_check ","r headers [] ","r headers [] nil? ! ","r headers [] nil? ","range nil? ","@config download_crc_enable ","Aliyun OSS Util  crc ","opts [] nil? ","r headers  [] ","(send\n  (lvar :r headers ) :select) eacr headers  ","k to_s start_witr headers ? ","r headers  select ","@r headers ttp get ","opts []  [] httpdate ","rewrites [] r headers ttpdate ","opts []  [] ","opts []  key? ","(sym :content_type) eacr headers  ","r headers eaders merge! "," get_opts []  ","r headers eaders []= "," get_bytes_opts []  ","r r headers eaders ","Aliyun OSS Util  crc_cr headers eck ","r r headers eaders [] ","r r headers eaders [] nil? ! ","r r headers eaders [] nil? ","opts []  nil? "]}," Aliyun OSS Protocol list_objects":{"type":"method","name":"list_objects","children":[],"call":[" logger debug "," logger ","more []= ","common_prefixes empty? ","common_prefixes << "," decode_key ","node text ","doc css map ","doc css "," update_if_exists "," lambda ","x to_bool ","x to_i ","h merge ","value nil? "," get_node_text ","doc root ","(pair\n  (sym :prefix)\n  (str \"Prefix\")) reduce ","Object  new ","Time  parse "," parse_xml ","@http get ","v nil? ","(pair\n  (str \"prefix\")\n  (send\n    (lvar :opts) :[]\n    (sym :prefix))) reject ","opts [] ","r body "," logge@http get  debug "," logge@http get  ","mo@http get e []= ","common_p@http get efixes empty? ","common_p@http get efixes << "," parse_xml  css map "," parse_xml  css ","h me@http get ge "," get_node_text  nil? "," parse_xml  root ","doc @http get oot ","(pai@http get \n  (sym :p@http get efix)\n  (st@http get  \"P@http get efix\")) @http get educe ","Time  pa@http get se "," pa@http get se_xml ","(pai@http get \n  (st@http get  \"p@http get efix\")\n  (send\n    (lva@http get  :opts) :[]\n    (sym :p@http get efix))) @http get eject ","@http get  body "]}," Aliyun OSS Protocol append_object":{"type":"method","name":"append_object","children":[],"call":[" wrap ","h [] "," logger debug "," logger ","@http post ","HTTP StreamPayload  new ","headers []= ","v to_s ","k to_s ","(or\n  (send\n    (lvar :opts) :[]\n    (sym :metas))\n  (hash)) each ","opts [] ","r headers [] ","r headers ","headers merge! "," to_lower_case ","opts key? "," to_lower_case each ","Aliyun OSS Util  crc_check ","payload read data_crc ","payload read ","opts [] nil? ! ","opts [] nil? ","r headers [] nil? ! ","r headers [] nil? ","@config upload_crc_enable ","payload data_crc ","HTTP StreamWriter  new "," w@http post ap "," logge@http post  debug "," logge@http post  ","HTTP St@http post eamPayload  new ","heade@http post s []= ","(o@http post \n  (send\n    (lva@http post  :opts) :[]\n    (sym :metas))\n  (hash)) each ","@http post  heade@http post s [] ","@http post  heade@http post s ","heade@http post s me@http post ge! "," to_lowe@http post _case "," to_lowe@http post _case each ","Aliyun OSS Util  c@http post c_check ","payload @http post ead data_c@http post c ","payload read payload read data_crc  ","payload read payload data_crc  ","HTTP StreamPayload  new  read data_crc ","HTTP StreamWriter  new  read data_crc ","payload @http post ead ","HTTP StreamPayload  new  read ","HTTP StreamWriter  new  read ","@http post  heade@http post s [] nil? ! ","@http post  heade@http post s [] nil? ","@config upload_c@http post c_enable ","payload data_c@http post c ","payload payload read data_crc  ","payload payload data_crc  ","HTTP StreamPayload  new  data_crc ","HTTP StreamWriter  new  data_crc ","HTTP St@http post eamW@http post ite@http post   new "]}," Aliyun OSS Protocol put_object":{"type":"method","name":"put_object","children":[],"call":[" logger debug "," logger ","@http put ","HTTP StreamPayload  new ","headers []= ","v to_s ","k to_s ","(or\n  (send\n    (lvar :opts) :[]\n    (sym :metas))\n  (hash)) each ","opts [] "," raise "," logger error ","e to_s ","CallbackError  new ","r code == ","r code ","opts [] serialize ","opts key? ","headers merge! "," to_lower_case "," to_lower_case each ","Aliyun OSS Util  crc_check ","r headers [] ","r headers ","payload read data_crc ","payload read ","r headers [] nil? ! ","r headers [] nil? ","@config upload_crc_enable ","payload data_crc ","HTTP StreamWriter  new "," loggCallbackError  new r dCallbackError  new bug "," logge@http put  debug "," loggCallbackError  new r "," logge@http put  ","HTTP StrCallbackError  new amPayload  nCallbackError  new w ","HTTP St@http put eamPayload  new ","hCallbackError  new adCallbackError  new rs []= ","heade@http put s []= ","(or\n  (sCallbackError  new nd\n    (lvar :opts) :[]\n    (sym :mCallbackError  new tas))\n  (hash)) CallbackError  new ach ","(o@http put \n  (send\n    (lva@http put  :opts) :[]\n    (sym :metas))\n  (hash)) each "," raisCallbackError  new  "," @http put aise "," loggCallbackError  new r CallbackError  new rror "," logge@http put  e@http put @http put o@http put  ","CallbackError  new  to_s ","CallbackError  nCallbackError  new w ","CallbackE@http put @http put o@http put   new ","r codCallbackError  new  == ","@http put  code == ","r codCallbackError  new  ","@http put  code ","opts [] sCallbackError  new rializCallbackError  new  ","opts [] se@http put ialize ","opts kCallbackError  new y? ","hCallbackError  new adCallbackError  new rs mCallbackError  new rgCallbackError  new ! ","heade@http put s me@http put ge! "," to_lowCallbackError  new r_casCallbackError  new  "," to_lowe@http put _case "," to_lowCallbackError  new r_casCallbackError  new  CallbackError  new ach "," to_lowe@http put _case each ","Aliyun OSS Util  crc_chCallbackError  new ck ","Aliyun OSS Util  c@http put c_check ","r hCallbackError  new adCallbackError  new rs [] ","@http put  heade@http put s [] ","r hCallbackError  new adCallbackError  new rs ","@http put  heade@http put s ","payload rCallbackError  new ad data_crc ","payload @http put ead data_c@http put c ","payload read payload read data_crc  ","payload read payload data_crc  ","HTTP StreamPayload  new  read data_crc ","HTTP StreamWriter  new  read data_crc ","payload rCallbackError  new ad ","payload @http put ead ","HTTP StreamPayload  new  read ","HTTP StreamWriter  new  read ","r hCallbackError  new adCallbackError  new rs [] nil? ! ","@http put  heade@http put s [] nil? ! ","r hCallbackError  new adCallbackError  new rs [] nil? ","@http put  heade@http put s [] nil? ","@config upload_crc_CallbackError  new nablCallbackError  new  ","@config upload_c@http put c_enable ","payload data_c@http put c ","payload payload read data_crc  ","payload payload data_crc  ","HTTP StreamPayload  new  data_crc ","HTTP StreamWriter  new  data_crc ","HTTP StrCallbackError  new amWritCallbackError  new r  nCallbackError  new w ","HTTP St@http put eamW@http put ite@http put   new "]}," Aliyun OSS Protocol delete_bucket":{"type":"method","name":"delete_bucket","children":[],"call":[" logger info "," logger ","@http delete "]}," Aliyun OSS Protocol delete_bucket_cors":{"type":"method","name":"delete_bucket_cors","children":[],"call":[" logger info "," logger ","@http delete "]}," Aliyun OSS Protocol get_bucket_cors":{"type":"method","name":"get_bucket_cors","children":[],"call":[" logger info "," logger ","rules << ","CORSRule  new "," get_node_text ","n css map ","n css ","doc css map ","doc css "," parse_xml ","@http get ","r body "," logge@http get  info "," logge@http get  ","@http get ules << "," parse_xml  css map "," parse_xml  css "," pa@http get se_xml ","@http get  body "]}," Aliyun OSS Protocol set_bucket_cors":{"type":"method","name":"set_bucket_cors","children":[],"call":[" logger info "," logger ","@http put ","(send\n  (const\n    (const\n      (const nil :Nokogiri) :XML) :Builder) :new) to_xml ","xml MaxAgeSeconds ","r max_age_seconds ","xml ExposeHeader ","r expose_headers each ","r expose_headers ","xml AllowedHeader ","r allowed_headers each ","r allowed_headers ","xml AllowedMethod ","r allowed_methods each ","r allowed_methods ","xml AllowedOrigin ","r allowed_origins each ","r allowed_origins ","xml CORSRule ","rules each ","xml CORSConfiguration ","Nokogiri XML Builder  new ","(send\n  (lvar :rules) :map) join ","r to_s ","rules map "]}," Aliyun OSS Protocol delete_bucket_lifecycle":{"type":"method","name":"delete_bucket_lifecycle","children":[],"call":[" logger info "," logger ","@http delete "]}," Aliyun OSS Protocol get_bucket_lifecycle":{"type":"method","name":"get_bucket_lifecycle","children":[],"call":[" logger info "," logger ","LifeCycleRule  new ","Date  parse ","date text ","days text to_i ","days text ","x == "," get_node_text "," fail ","date ! ","days ! ","n at_css ","doc css map ","doc css "," parse_xml ","@http get ","r body "," logge@http get  info "," logge@http get  ","Date  pa@http get se ","n at_css  text ","n at_css  text to_i ","n at_css  ! "," parse_xml  css map "," parse_xml  css "," pa@http get se_xml ","@http get  body "]}," Aliyun OSS Protocol put_bucket_lifecycle":{"type":"method","name":"put_bucket_lifecycle","children":[],"call":[" logger info "," logger ","@http put ","(send\n  (const\n    (const\n      (const nil :Nokogiri) :XML) :Builder) :new) to_xml "," fail ","xml Days ","r expiry ","r expiry is_a? ","xml Date ","Time  utc iso8601 sub ","Time  utc iso8601 ","Time  utc ","r expiry day ","r expiry month ","r expiry year ","xml Expiration ","xml Prefix ","r prefix ","xml Status ","r enabled? ","xml ID ","r id ","xml Rule ","rules each ","xml LifecycleConfiguration ","Nokogiri XML Builder  new ","r to_s ","rules map "]}," Aliyun OSS Protocol get_bucket_referer":{"type":"method","name":"get_bucket_referer","children":[],"call":["BucketReferer  new "," logger info "," logger ","doc css map ","doc css "," get_node_text ","doc root "," parse_xml ","@http get ","r body ","BucketRefe@http get e@http get   new "," logge@http get  info "," logge@http get  "," parse_xml  css map "," parse_xml  css "," parse_xml  root ","doc @http get oot "," pa@http get se_xml ","@http get  body "]}," Aliyun OSS Protocol put_bucket_referer":{"type":"method","name":"put_bucket_referer","children":[],"call":[" logger info "," logger ","@http put ","(send\n  (const\n    (const\n      (const nil :Nokogiri) :XML) :Builder) :new) to_xml ","xml Referer ","(or\n  (send\n    (lvar :referer) :whitelist)\n  (array)) each ","referer whitelist ","xml RefererList ","xml AllowEmptyReferer ","referer allow_empty? ","xml RefererConfiguration ","Nokogiri XML Builder  new "]}," Aliyun OSS Protocol delete_bucket_website":{"type":"method","name":"delete_bucket_website","children":[],"call":[" logger info "," logger ","@http delete "]}," Aliyun OSS Protocol get_bucket_website":{"type":"method","name":"get_bucket_website","children":[],"call":["BucketWebsite  new "," logger info "," logger ","opts update "," get_node_text ","doc at_css "," parse_xml ","@http get ","r body "," logge@http get  info "," logge@http get  "," parse_xml  at_css "," pa@http get se_xml ","@http get  body "]}," Aliyun OSS Protocol put_bucket_website":{"type":"method","name":"put_bucket_website","children":[],"call":[" logger info "," logger ","@http put ","(send\n  (const\n    (const\n      (const nil :Nokogiri) :XML) :Builder) :new) to_xml ","xml Key ","website error ","xml ErrorDocument ","xml Suffix ","website index ","xml IndexDocument ","xml WebsiteConfiguration ","Nokogiri XML Builder  new "," fail "]}," Aliyun OSS Protocol delete_bucket_logging":{"type":"method","name":"delete_bucket_logging","children":[],"call":[" logger info "," logger ","@http delete "]}," Aliyun OSS Protocol get_bucket_logging":{"type":"method","name":"get_bucket_logging","children":[],"call":["BucketLogging  new "," logger info "," logger ","opts []= ","opts [] ","opts update "," get_node_text ","doc at_css "," parse_xml ","@http get ","r body "," logge@http get  info "," logge@http get  "," parse_xml  at_css "," pa@http get se_xml ","@http get  body "]}," Aliyun OSS Protocol put_bucket_logging":{"type":"method","name":"put_bucket_logging","children":[],"call":[" logger info "," logger ","@http put ","(send\n  (const\n    (const\n      (const nil :Nokogiri) :XML) :Builder) :new) to_xml ","xml TargetPrefix ","logging target_prefix ","xml TargetBucket ","logging target_bucket ","xml LoggingEnabled ","logging enabled? ","xml BucketLoggingStatus ","Nokogiri XML Builder  new "," fail ","logging target_bucket ! "]}," Aliyun OSS Protocol get_bucket_acl":{"type":"method","name":"get_bucket_acl","children":[],"call":[" logger info "," logger "," get_node_text ","doc at_css "," parse_xml ","@http get ","r body "," logge@http get  info "," logge@http get  "," parse_xml  at_css "," pa@http get se_xml ","@http get  body "]}," Aliyun OSS Protocol put_bucket_acl":{"type":"method","name":"put_bucket_acl","children":[],"call":[" logger info "," logger ","@http put "]}," Aliyun OSS Protocol create_bucket":{"type":"method","name":"create_bucket","children":[],"call":[" logger info "," logger ","@http put ","builder to_xml ","xml LocationConstraint ","xml CreateBucketConfiguration ","Nokogiri XML Builder  new ","opts [] "]}," Aliyun OSS Protocol list_buckets":{"type":"method","name":"list_buckets","children":[],"call":[" logger info "," logger "," update_if_exists ","x to_bool "," lambda ","x to_i ","h merge ","value nil? "," get_node_text ","doc root ","(pair\n  (sym :prefix)\n  (str \"Prefix\")) reduce ","Bucket  new ","Time  parse ","doc css map ","doc css "," parse_xml ","@http get ","v nil? ","(pair\n  (str \"prefix\")\n  (send\n    (lvar :opts) :[]\n    (sym :prefix))) reject ","opts [] ","r body "," logge@http get  info "," logge@http get  ","h me@http get ge "," get_node_text  nil? "," parse_xml  root ","doc @http get oot ","(pai@http get \n  (sym :p@http get efix)\n  (st@http get  \"P@http get efix\")) @http get educe ","Time  pa@http get se "," parse_xml  css map "," parse_xml  css "," pa@http get se_xml ","(pai@http get \n  (st@http get  \"p@http get efix\")\n  (send\n    (lva@http get  :opts) :[]\n    (sym :p@http get efix))) @http get eject ","@http get  body "]}," Aliyun OSS Protocol initialize":{"type":"method","name":"initialize","children":[],"call":["HTTP  new "]}," Aliyun OSS Multipart Transaction get_file_md5":{"type":"method","name":"get_file_md5","children":[],"call":["Digest MD5  file to_s ","Digest MD5  file "]}," Aliyun OSS Multipart Transaction load_checkpoint":{"type":"method","name":"load_checkpoint","children":[],"call":[" fail ","md5 == ","Util  get_content_md5 ","states to_json ","states delete ","states symbolize_keys! ","JSON  load ","File  read ","@mutex synchronize ","Util  symbolize ","states delete  == ","Util  get_content_states delete  ","JSON  load  to_json ","Util  symbolize  to_json ","JSON  load  delete ","Util  symbolize  delete ","JSON  load  symbolize_keys! ","Util  symbolize  symbolize_keys! "]}," Aliyun OSS Multipart Transaction write_checkpoint":{"type":"method","name":"write_checkpoint","children":[],"call":["f write ","states to_json ","File  open ","states []= ","Util  get_content_md5 ","states merge to_json ","states merge ","@mutex synchronize ","Util  get_content_Util  get_content_md5  "]}," Aliyun OSS Logging logger":{"type":"method","name":"logger","children":[],"call":["Logging  logger "]}," Aliyun OSS Logging set_log_file":{"type":"method","name":"set_log_file","children":[],"call":[]}," Aliyun OSS Logging set_log_level":{"type":"method","name":"set_log_level","children":[],"call":[]}," Aliyun OSS Iterator Objects fetch":{"type":"method","name":"fetch","children":[],"call":["@more []= ","cont [] ","cont [] + ","@protocol list_objects "]}," Aliyun OSS Iterator Objects initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Aliyun OSS Iterator Buckets fetch":{"type":"method","name":"fetch","children":[],"call":["@more []= ","cont [] ","@protocol list_buckets "]}," Aliyun OSS Iterator Base fetch_more":{"type":"method","name":"fetch_more","children":[],"call":[" fetch ","@more [] == ","@more [] "]}," Aliyun OSS Iterator Base to_enum":{"type":"method","name":"to_enum","children":[],"call":[" enum_for "]}," Aliyun OSS Iterator Base next":{"type":"method","name":"next","children":[],"call":["@results shift "," fetch_more ","@results empty? "," loop ","@@results shift esults shift "," fetch_mo@results shift e ","@@results shift esults empty? "]}," Aliyun OSS Iterator Base initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RestClient Payload Base headers":{"type":"method","name":"headers","children":[],"call":[" size to_s "," size "]}," Aliyun OSS HTTP get_user_agent":{"type":"method","name":"get_user_agent","children":[],"call":[]}," Aliyun OSS HTTP do_request":{"type":"method","name":"do_request","children":[],"call":["r body ","r headers "," logger debug ","r code "," logger ","r return! ","RestClient Response  create "," raise "," logger error ","e to_s ","ServerError  new ","RestClient Request  decode ","r [] ","r code to_i >= ","r code to_i ","r is_a? ","response return! ","response code >= ","response code ","RestClient Request  execute ","http_options [] "," get_request_url "," handle_response "," lambda ","headers []= ","(or\n  (lvar :sub_res)\n  (hash)) merge ","@config access_key_id ","Util  get_signature ","@config access_key_secret "," get_resource_path ","body respond_to? ","headers [] ","Time  now httpdate ","Time  now "," get_user_agent ","resources [] ","Util  get_content_md5 ","@config read_timeout ","@config open_timeout ","@config sts_token ","response body ","response headers ","response [] ","response code to_i >= ","response code to_i ","response is_a? ","resp return! ","resp code >= ","resp code ","request execute ","RestClient Request  new ","RestClient  version < ","RestClient  version ","RestClient Response  create  body ","r http_options []  ","r RestClient Request  decode  ","r response body  ","RestClient Response  create  headeRestClient Response  create s ","r hServerError  new adServerError  new rs "," loggeRestClient Response  create  debug "," loggServerError  new r dServerError  new bug ","RestClient Response  create  code ","r codServerError  new  "," loggeRestClient Response  create  "," loggServerError  new r ","RestClient Response  create  RestClient Response  create etuRestClient Response  create n! ","r rServerError  new turn! ","RestClient Response  cRestClient Response  create eate ","RServerError  new stCliServerError  new nt RServerError  new sponsServerError  new   crServerError  new atServerError  new  "," RestClient Response  create aise "," raisServerError  new  "," loggeRestClient Response  create  eRestClient Response  create RestClient Response  create oRestClient Response  create  "," loggServerError  new r ServerError  new rror ","ServerError  new  to_s ","SeRestClient Response  create veRestClient Response  create ERestClient Response  create RestClient Response  create oRestClient Response  create   new ","SServerError  new rvServerError  new rError  nServerError  new w ","RServerError  new stCliServerError  new nt RServerError  new quServerError  new st  dServerError  new codServerError  new  ","RestClient Response  create  [] ","RestClient Response  create  code to_i >= ","r codServerError  new  to_i >= ","RestClient Response  create  code to_i ","r codServerError  new  to_i ","RestClient Response  create  is_a? ","RestClient Response  create esponse RestClient Response  create etuRestClient Response  create n! ","rServerError  new sponsServerError  new  rServerError  new turn! ","RestClient Response  create  return! ","RestClient Response  create esponse code >= ","rServerError  new sponsServerError  new  codServerError  new  >= ","RestClient Response  create  code >= ","RestClient Response  create esponse code ","rServerError  new sponsServerError  new  codServerError  new  ","RServerError  new stCliServerError  new nt RServerError  new quServerError  new st  ServerError  new xServerError  new cutServerError  new  "," get_RestClient Response  create equest_uRestClient Response  create l "," gServerError  new t_rServerError  new quServerError  new st_url "," get_RestClient Request  new _url "," handle_RestClient Response  create esponse "," handlServerError  new _rServerError  new sponsServerError  new  "," handle_RestClient Response  create  ","headeRestClient Response  create s []= ","hServerError  new adServerError  new rs []= ","(oRestClient Response  create \n  (lvaRestClient Response  create  :sub_RestClient Response  create es)\n  (hash)) meRestClient Response  create ge ","(or\n  (lvar :sub_rServerError  new s)\n  (hash)) mServerError  new rgServerError  new  ","(or\n  (lvar :resources [] )\n  (hash)) merge ","@config accServerError  new ss_kServerError  new y_id ","Util  get_signatuRestClient Response  create e ","Util  gServerError  new t_signaturServerError  new  ","Util  get_Util  get_signature nature ","@config access_key_secRestClient Response  create et ","@config accServerError  new ss_kServerError  new y_sServerError  new crServerError  new t "," get_RestClient Response  create esouRestClient Response  create ce_path "," gServerError  new t_rServerError  new sourcServerError  new _path ","body RestClient Response  create espond_to? ","body rServerError  new spond_to? ","http_options []  respond_to? ","RestClient Request  decode  respond_to? ","response body  respond_to? ","headeRestClient Response  create s [] ","hServerError  new adServerError  new rs [] ","TimServerError  new   now httpdatServerError  new  ","TimServerError  new   now "," get_useRestClient Response  create _agent "," gServerError  new t_usServerError  new r_agServerError  new nt ","RestClient Response  create esouRestClient Response  create ces [] ","rServerError  new sourcServerError  new s [] ","Util  gServerError  new t_contServerError  new nt_md5 ","@config RestClient Response  create ead_timeout ","@config rServerError  new ad_timServerError  new out ","@config opServerError  new n_timServerError  new out ","@config sts_tokServerError  new n ","RestClient Response  create esponse body ","rServerError  new sponsServerError  new  body ","response http_options []  ","response RestClient Request  decode  ","response response body  ","RestClient Response  create esponse headeRestClient Response  create s ","rServerError  new sponsServerError  new  hServerError  new adServerError  new rs ","RestClient Response  create  headers ","RestClient Response  create esponse [] ","rServerError  new sponsServerError  new  [] ","RestClient Response  create esponse code to_i >= ","rServerError  new sponsServerError  new  codServerError  new  to_i >= ","RestClient Response  create esponse code to_i ","rServerError  new sponsServerError  new  codServerError  new  to_i ","RestClient Response  create esponse is_a? ","rServerError  new sponsServerError  new  is_a? ","RestClient Response  create esp RestClient Response  create etuRestClient Response  create n! ","rServerError  new sp rServerError  new turn! ","RestClient Response  create esp code >= ","rServerError  new sp codServerError  new  >= ","RestClient Response  create esp code ","rServerError  new sp codServerError  new  ","RestClient Response  create equest execute ","rServerError  new quServerError  new st ServerError  new xServerError  new cutServerError  new  ","RestClient Request  new  execute ","RServerError  new stCliServerError  new nt RServerError  new quServerError  new st  nServerError  new w ","RestClient  veRestClient Response  create sion < ","RServerError  new stCliServerError  new nt  vServerError  new rsion < ","RestClient  veRestClient Response  create sion ","RServerError  new stCliServerError  new nt  vServerError  new rsion "]}," Aliyun OSS HTTP options":{"type":"method","name":"options","children":[],"call":[" do_request "]}," Aliyun OSS HTTP head":{"type":"method","name":"head","children":[],"call":[" do_request "]}," Aliyun OSS HTTP delete":{"type":"method","name":"delete","children":[],"call":[" do_request "]}," Aliyun OSS HTTP post":{"type":"method","name":"post","children":[],"call":[" do_request "]}," Aliyun OSS HTTP put":{"type":"method","name":"put","children":[],"call":[" do_request "]}," Aliyun OSS HTTP get":{"type":"method","name":"get","children":[],"call":[" do_request "]}," Aliyun OSS HTTP handle_response":{"type":"method","name":"handle_response","children":[],"call":["RestClient Request  decode ","r [] ","r read_body ","r code to_i >= ","r code to_i ","r code ","stream finish ","stream << ","Zlib Inflate  new ","Zlib MAX_WBITS  -@ ","encoding == ","reader read ","16 * ","reader eof? ","Zlib GzipReader  new ","s << ","StreamWriter  new ","stream inflate ","RUBY_VERSION  < ","Zlib Inflate  new  finish ","Zlib Inflate  new  << ","r []  == ","Zlib GzipReader  new  read ","Zlib GzipReader  new  eof? ","Zlib Inflate  new  inflate "]}," Aliyun OSS HTTP get_resource_path":{"type":"method","name":"get_resource_path","children":[],"call":["res << "]}," Aliyun OSS HTTP get_request_url":{"type":"method","name":"get_request_url","children":[],"call":["CGI  escape ","@config endpoint host ","@config endpoint ","@config cname ! ","@config cname ","@config endpoint scheme ","url to_s ","url path << ","url path ","url path= ","url host= ","(begin\n  (lvar :bucket)) + ","url host ","isIP ! ","(send\n  (send\n    (lvar :url) :host) :=~\n  (const\n    (const\n      (const nil :Resolv) :IPv4) :Regex)) ! ! ","(send\n  (send\n    (lvar :url) :host) :=~\n  (const\n    (const\n      (const nil :Resolv) :IPv4) :Regex)) ! ","url host =~ ","@config endpoint dup ","url query= ","(send\n  (send\n    (lvar :query) :split\n    (str \"&\")) :map) join ","v to_s ","k to_s ","kv split ","query split map ","query split ","(send\n  (send\n    (lvar :path) :split\n    (str \"/\")) :map) join ","path split map ","path split ","object split ","url fragment= ","@config endpoint dup  to_s ","@config endpoint dup  path << ","@config endpoint dup  path ","@config endpoint dup  path= ","@config endpoint dup  host= ","@config endpoint dup  host ","(send\n  (send\n    (lvar :url) :host) :=~\n  (const\n    (const\n      (const nil :Resolv) :IPv4) :Regex)) ! !  ! ","(send\n  (send\n    (lvar :@config endpoint dup ) :host) :=~\n  (const\n    (const\n      (const nil :Resolv) :IPv4) :Regex)) ! ! ","(send\n  (send\n    (lvar :@config endpoint dup ) :host) :=~\n  (const\n    (const\n      (const nil :Resolv) :IPv4) :Regex)) ! ","@config endpoint dup  host =~ ","@config endpoint dup  query= ","@config endpoint dup  fragment= "]}," Aliyun OSS HTTP initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Aliyun OSS HTTP StreamPayload closed?":{"type":"method","name":"closed?","children":[],"call":[]}," Aliyun OSS HTTP StreamPayload close":{"type":"method","name":"close","children":[],"call":[]}," Aliyun OSS HTTP StreamPayload read":{"type":"method","name":"read","children":[],"call":[]}," Aliyun OSS HTTP StreamPayload initialize":{"type":"method","name":"initialize","children":[],"call":["StreamWriter  new "]}," Aliyun OSS HTTP StreamWriter inspect":{"type":"method","name":"inspect","children":[],"call":["@chunks:  + ","(send\n  (ivar :@chunks) :map) join ","c [] ","@chunks map ","c [] inspect ","@buffer:  + + ","@buffer size ","@buffer:  + ","@buffer [] inspect ","@buffer [] "]}," Aliyun OSS HTTP StreamWriter closed?":{"type":"method","name":"closed?","children":[],"call":[]}," Aliyun OSS HTTP StreamWriter write":{"type":"method","name":"write","children":[],"call":["Fiber  yield ","@chunks << ","@buffer << ","chunk to_s force_encoding ","chunk to_s "]}," Aliyun OSS HTTP StreamWriter read":{"type":"method","name":"read","children":[],"call":["ret empty? ","outbuf << ","outbuf clear ","@producer resume ","@producer alive? ","ret size >= ","ret size ","ret << ","c empty? ! ","c empty? ","@chunks shift "," loop ","bytes > ","bytes nil? ! ","bytes nil? ","@buffer clear ","@buffer slice! ","bytes == ","piece size "," fail ","bytes < ","Aliyun OSS Util  crc ","outbuf @chunks shift lear ","@produ@chunks shift er resume ","@produ@chunks shift er alive? ","@chunks shift  empty? ! ","@chunks shift  empty? ","@@chunks shift hunks shift ","@buffer @chunks shift lear ","@buffer sli@chunks shift e! ","pie@chunks shift e size ","@buffer slice!  size ","Aliyun OSS Util  @chunks shift r@chunks shift  "]}," Aliyun OSS HTTP StreamWriter initialize":{"type":"method","name":"initialize","children":[],"call":["@producer resume "," block_given? ","Fiber  new ","init_crc to_i "]}," Aliyun OSS ClientError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Aliyun OSS ServerError get_request_id":{"type":"method","name":"get_request_id","children":[],"call":["r to_s ","response headers [] ","response headers ","response headers []  to_s ","response headers [] esponse headeresponse headers [] s [] ","response headers [] esponse headeresponse headers [] s "]}," Aliyun OSS ServerError to_s":{"type":"method","name":"to_s","children":[],"call":["(send\n  (send\n    (ivar :@attrs) :merge\n    (hash\n      (pair\n        (str \"HTTPCode\")\n        (ivar :@http_code)))) :map) join ","(lvar :k) join ","@attrs merge map ","@attrs merge "]}," Aliyun OSS ServerError message":{"type":"method","name":"message","children":[],"call":[" http_code ","@attrs [] "," request_id "]}," Aliyun OSS ServerError initialize":{"type":"method","name":"initialize","children":[],"call":["@attrs [] ","@attrs []= ","n text ","n name ","doc root children each ","doc root children ","doc root ","config options ","Nokogiri  XML ","response body "," get_request_id ","response code "]}," Aliyun OSS Multipart Download get_part_file":{"type":"method","name":"get_part_file","children":[],"call":["p [] "]}," Aliyun OSS Multipart Download generate_download_id":{"type":"method","name":"generate_download_id","children":[],"call":["Time  now to_i ","Time  now "," object "," bucket "]}," Aliyun OSS Multipart Download ensure_object_not_changed":{"type":"method","name":"ensure_object_not_changed","children":[],"call":[" fail "," object ","obj etag == ","@object_meta [] ","obj etag ","@protocol get_object_meta "," bucket "," @protocol get_object_meta ect ","@protocol get_object_meta  etag == ","@@protocol get_object_meta ect_meta [] ","@protocol get_object_meta  etag ","@protocol get_@protocol get_object_meta ect_meta "]}," Aliyun OSS Multipart Download divide_parts":{"type":"method","name":"divide_parts","children":[],"call":[" logger info "," logger "," checkpoint ","(send\n  (lvar :i) :*\n  (lvar :part_size)) min ","i * ","(send\n  (lvar :i) :-\n  (int 1)) * ","i - ","(irange\n  (int 1)\n  (lvar :num_parts)) map ","(send\n  (lvar :object_size) :-\n  (int 1)) / + ","(send\n  (lvar :object_size) :-\n  (int 1)) / ","object_size - ","(or\n  (send\n    (ivar :@options) :[]\n    (sym :part_size))\n  (const nil :PART_SIZE)) max ","object_size / ","@options [] ","@object_meta [] ","(send\n  (lvar :i) :*\n  (lvar :(or\n  (send\n    (ivar :@options) :[]\n    (sym :part_size))\n  (const nil :PART_SIZE)) max )) min ","(irange\n  (int 1)\n  (lvar :(send\n  (lvar :object_size) :-\n  (int 1)) / + )) map ","(send\n  (lvar :@object_meta [] ) :-\n  (int 1)) / + ","(send\n  (lvar :@object_meta [] ) :-\n  (int 1)) / ","@object_meta []  - ","(or\n  (send\n    (ivar :@options) :[]\n    (sym :(or\n  (send\n    (ivar :@options) :[]\n    (sym :part_size))\n  (const nil :PART_SIZE)) max ))\n  (const nil :PART_SIZE)) max ","@object_meta []  / "]}," Aliyun OSS Multipart Download download_part":{"type":"method","name":"download_part","children":[],"call":[" logger debug "," logger "," checkpoint ","p []= "," get_file_md5 ","w write ","@protocol get_object ","p [] "," object "," bucket ","File  open "," get_part_file "," sync_update_part ","p merge ","@options merge "," get_ get_part_file  "]}," Aliyun OSS Multipart Download initiate":{"type":"method","name":"initiate","children":[],"call":[" logger info "," id "," logger "," checkpoint ","obj size ","obj etag ","@protocol get_object_meta "," object "," bucket "," generate_download_id ","@protocol get_object_meta  size ","@protocol get_object_meta  etag ","@protocol get_@protocol get_object_meta ect_meta "," @protocol get_object_meta ect "]}," Aliyun OSS Multipart Download rebuild":{"type":"method","name":"rebuild","children":[],"call":[" logger info "," logger "," initiate ","states [] "," fail ","p [] != "," get_file_md5 ","p [] ","File  exist? "," get_part_file ","(send\n  (send\n    (lvar :states) :[]\n    (sym :parts)) :select) each ","states [] select "," load_checkpoint "," options [] ! "," options [] "," options ","File  exists? ","File  exists? ! "," load_checkpoint  [] "," get_ get_part_file  ","(send\n  (send\n    (lvar : load_checkpoint ) :[]\n    (sym :parts)) :select) each "," load_checkpoint  [] select "]}," Aliyun OSS Multipart Download commit":{"type":"method","name":"commit","children":[],"call":[" logger info "," id "," logger ","File  delete "," get_part_file ","p [] ","@parts each "," options [] "," options ","w write ","r read ","r eof? ","File  open ","(send\n  (ivar :@parts) :sort) each ","x [] <=> ","y [] ","x [] ","@parts sort ","parts each ","(send\n  (lvar :parts) :sort) each ","parts sort "," sync_get_all_parts ","@ sync_get_all_parts  each ","(send\n  (ivar :@ sync_get_all_parts ) :sort) each ","@ sync_get_all_parts  sort "," sync_get_all_parts  each ","(send\n  (lvar : sync_get_all_parts ) :sort) each "," sync_get_all_parts  sort "," sync_get_all_ sync_get_all_parts  "]}," Aliyun OSS Multipart Download checkpoint":{"type":"method","name":"checkpoint","children":[],"call":[" logger debug "," logger "," write_checkpoint "," options [] "," options ","@progress call ","done to_f / ","@parts size ","done to_f ","done > ","p [] ","@parts count "," id "," ensure_object_not_changed ","parts size ","parts count "," sync_get_all_parts "," options [] == ","@ sync_get_all_parts  size ","@ sync_get_all_parts  count "," sync_get_all_parts  size "," sync_get_all_parts  count "," sync_get_all_ sync_get_all_parts  "]}," Aliyun OSS Multipart Download run":{"type":"method","name":"run","children":[],"call":[" logger info "," logger "," commit "," download_part ","(send\n  (ivar :@parts) :reject) each ","p [] ","@parts reject "," divide_parts ","@parts empty? "," rebuild ","(send\n  (begin\n    (irange\n      (int 1)\n      (ivar :@num_threads))) :map) map "," sync_get_todo_part "," loop ","Thread  new ","(irange\n  (int 1)\n  (ivar :@num_threads)) map "," download_ sync_get_todo_part art ","(send\n  (ivar :@ sync_get_todo_part arts) :reject) each "," sync_get_todo_part  [] ","@ sync_get_todo_part arts reject "," divide_ sync_get_todo_part arts ","@ sync_get_todo_part arts em sync_get_todo_part ty? ","(send\n  (begin\n    (irange\n      (int 1)\n      (ivar :@num_threads))) :ma sync_get_todo_part ) ma sync_get_todo_part  "," sync_get_todo_ sync_get_todo_part art "," loo sync_get_todo_part  ","(irange\n  (int 1)\n  (ivar :@num_threads)) ma sync_get_todo_part  "]}," Aliyun OSS Multipart Download initialize":{"type":"method","name":"initialize","children":[],"call":["args delete ","opts dup ","Mutex  new "," options [] "," options ","opts dup  delete "]}," Aliyun OSS Config normalize_endpoint":{"type":"method","name":"normalize_endpoint","children":[],"call":[" fail ","uri scheme != ","uri scheme ","URI  parse "," endpoint ","URI  parse  scheme != ","URI  parse  scheme "]}," Aliyun OSS Config initialize":{"type":"method","name":"initialize","children":[],"call":[" normalize_endpoint "," endpoint ","@access_key_secret strip! ","@access_key_id strip! ","@access_key_secret strip ","@access_key_id strip ","@download_crc_enable == ","@upload_crc_enable == ","@access_key_secret strip  strip! ","@access_key_id strip  strip! ","@access_key_secret strip  strip ","@access_key_id strip  strip "]}," Aliyun OSS Client get_bucket":{"type":"method","name":"get_bucket","children":[],"call":["Bucket  new ","Util  ensure_bucket_name_valid "]}," Aliyun OSS Client bucket_exists?":{"type":"method","name":"bucket_exists?","children":[],"call":[" raise ","e http_code == ","e http_code ","@protocol get_bucket_acl ","Util  ensure_bucket_name_valid "]}," Aliyun OSS Client delete_bucket":{"type":"method","name":"delete_bucket","children":[],"call":["@protocol delete_bucket ","Util  ensure_bucket_name_valid "]}," Aliyun OSS Client create_bucket":{"type":"method","name":"create_bucket","children":[],"call":["@protocol create_bucket ","Util  ensure_bucket_name_valid "]}," Aliyun OSS Client list_buckets":{"type":"method","name":"list_buckets","children":[],"call":["Iterator Buckets  new to_enum ","Iterator Buckets  new "," fail ","@config cname "]}," Aliyun OSS Client initialize":{"type":"method","name":"initialize","children":[],"call":["Protocol  new ","Config  new "," fail ","opts [] "]}," Aliyun OSS Bucket get_cpt_file":{"type":"method","name":"get_cpt_file","children":[],"call":["File  expand_path "]}," Aliyun OSS Bucket get_content_type":{"type":"method","name":"get_content_type","children":[],"call":["t first content_type ","t first ","t empty? ","MIME Types  of ","MIME Types  of  firsMIME Types  of  conMIME Types  of enMIME Types  of _MIME Types  of ype ","MIME Types  of  firsMIME Types  of  ","MIME Types  of  empMIME Types  of y? "]}," Aliyun OSS Bucket sign":{"type":"method","name":"sign","children":[],"call":["@protocol sign "]}," Aliyun OSS Bucket access_key_id":{"type":"method","name":"access_key_id","children":[],"call":["@protocol get_access_key_id "]}," Aliyun OSS Bucket object_url":{"type":"method","name":"object_url","children":[],"call":["(lvar :url) join ","(send\n  (hash\n    (pair\n      (str \"Expires\")\n      (send\n        (lvar :expires) :to_s))\n    (pair\n      (str \"OSSAccessKeyId\")\n      (send\n        (const nil :CGI) :escape\n        (send nil :access_key_id)))\n    (pair\n      (str \"Signature\")\n      (send\n        (const nil :CGI) :escape\n        (lvar :signature)))) :map) join ","(pair\n  (str \"Expires\")\n  (send\n    (lvar :expires) :to_s)) map ","CGI  escape "," access_key_id ","expires to_s "," sign ","GET\n + + + "," name ","GET\n + + ","GET\n + ","Time  now to_i + ","Time  now to_i ","Time  now ","@protocol get_request_url ","(send\n  (send\n    (lvar :query) :merge\n    (hash\n      (pair\n        (str \"Signature\")\n        (send\n          (const nil :CGI) :escape\n          (lvar :signature))))) :map) join ","query merge map ","query merge "," << << << << << "," << << << << "," << << << "," << << "," << ","resource << ","sub_res join ","sub_res empty? ","query []= ","@protocol get_sts_token ","sub_res << ","url include? ","resource include? ","query_string empty? ","(send\n  (lvar :query) :map) join ","(lvar :k) join ","query map ","@protocol get_access_key_id ","Util  get_signature ","@protocol get_access_key_secret ","@protocol get_resource_path ","parameters dup ","@protocol get_request_url gsub ","(lvar :@protocol get_request_url ) join ","(lvar :@protocol get_request_url gsub ) join ","(send\n  (hash\n    (pair\n      (str \"Expires\")\n      (send\n        (lvar :expires) :to_s))\n    (pair\n      (str \"OSSAccessKeyId\")\n      (send\n        (const nil :CGI) :escape\n        (send nil :access_key_id)))\n    (pair\n      (str \"Signature\")\n      (send\n        (const nil :CGI) :escape\n        (lvar : sign )))) :map) join ","(send\n  (hash\n    (pair\n      (str \"Expires\")\n      (send\n        (lvar :expires) :to_s))\n    (pair\n      (str \"OSSAccessKeyId\")\n      (send\n        (const nil :CGI) :escape\n        (send nil :access_key_id)))\n    (pair\n      (str \"Signature\")\n      (send\n        (const nil :CGI) :escape\n        (lvar :Util  get_signature )))) :map) join ","(send\n  (hash\n    (pair\n      (str \"Expires\")\n      (send\n        (lvar :Time  now to_i + ) :to_s))\n    (pair\n      (str \"OSSAccessKeyId\")\n      (send\n        (const nil :CGI) :escape\n        (send nil :access_key_id)))\n    (pair\n      (str \"Signature\")\n      (send\n        (const nil :CGI) :escape\n        (lvar :signature)))) :map) join ","(pair\n  (str \"Expires\")\n  (send\n    (lvar :Time  now to_i + ) :to_s)) map ","Time  now to_i +  to_s ","@protocol get_request_@protocol get_request_url  ","@protocol get_request_@protocol get_request_url gsub  ","(send\n  (send\n    (lvar :query) :merge\n    (hash\n      (pair\n        (str \"Signature\")\n        (send\n          (const nil :CGI) :escape\n          (lvar : sign ))))) :map) join ","(send\n  (send\n    (lvar :query) :merge\n    (hash\n      (pair\n        (str \"Signature\")\n        (send\n          (const nil :CGI) :escape\n          (lvar :Util  get_signature ))))) :map) join ","(send\n  (send\n    (lvar :parameters dup ) :merge\n    (hash\n      (pair\n        (str \"Signature\")\n        (send\n          (const nil :CGI) :escape\n          (lvar :signature))))) :map) join ","parameters dup  merge map ","parameters dup  merge ","parameters dup  []= ","@protocol get_request_url  include? ","@protocol get_request_url gsub  include? ","(send\n  (hash\n    (pair\n      (str \"Expires\")\n      (send\n        (lvar :expires) :to_s))\n    (pair\n      (str \"OSSAccessKeyId\")\n      (send\n        (const nil :CGI) :escape\n        (send nil :access_key_id)))\n    (pair\n      (str \"Signature\")\n      (send\n        (const nil :CGI) :escape\n        (lvar :signature)))) :map) join  empty? ","(send\n  (send\n    (lvar :query) :merge\n    (hash\n      (pair\n        (str \"Signature\")\n        (send\n          (const nil :CGI) :escape\n          (lvar :signature))))) :map) join  empty? ","(send\n  (lvar :query) :map) join  empty? ","parameters dup _string empty? ","(send\n  (lvar :parameters dup ) :map) join ","parameters dup  map ","Util  get_ sign  ","Util  get_Util  get_signature  ","@protocol get_request_@protocol get_request_url  gsub ","@protocol get_request_@protocol get_request_url gsub  gsub "]}," Aliyun OSS Bucket bucket_url":{"type":"method","name":"bucket_url","children":[],"call":["@protocol get_request_url "," name "]}," Aliyun OSS Bucket resumable_download":{"type":"method","name":"resumable_download","children":[],"call":["Multipart Download  new run ","Multipart Download  new ","File  expand_path ","Time  now "," name "," get_cpt_file ","opts [] ","args [] "," get_content_type ","opts dup "," get_ get_cpt_file  "," get_opts []  "," get_args []  ","opts dup  [] "]}," Aliyun OSS Bucket resumable_upload":{"type":"method","name":"resumable_upload","children":[],"call":["Multipart Upload  new run ","Multipart Upload  new ","File  expand_path ","Time  now "," name "," get_cpt_file ","opts [] ","args [] "," get_content_type ","opts dup "," get_ get_cpt_file  "," get_opts []  "," get_args []  ","opts dup  [] "]}," Aliyun OSS Bucket get_object_cors":{"type":"method","name":"get_object_cors","children":[],"call":["@protocol get_object_cors "," name "]}," Aliyun OSS Bucket get_object_acl":{"type":"method","name":"get_object_acl","children":[],"call":["@protocol get_object_acl "," name "]}," Aliyun OSS Bucket set_object_acl":{"type":"method","name":"set_object_acl","children":[],"call":["@protocol put_object_acl "," name "]}," Aliyun OSS Bucket batch_delete_objects":{"type":"method","name":"batch_delete_objects","children":[],"call":["@protocol batch_delete_objects "," name ","opts merge "]}," Aliyun OSS Bucket delete_object":{"type":"method","name":"delete_object","children":[],"call":["@protocol delete_object "," name "]}," Aliyun OSS Bucket copy_object":{"type":"method","name":"copy_object","children":[],"call":["@protocol copy_object "," name "," get_content_type ","args [] ","opts dup ","opts dup  [] "]}," Aliyun OSS Bucket append_object":{"type":"method","name":"append_object","children":[],"call":["@protocol append_object "," name ","sw << ","f read ","f eof? ","File  open ","File  expand_path ","opts []= "," get_content_type ","opts [] ","args [] ","opts dup ","opts dup  [] "]}," Aliyun OSS Bucket object_exists?":{"type":"method","name":"object_exists?","children":[],"call":[" raise ","e http_code == ","e http_code "," get_object "]}," Aliyun OSS Bucket update_object_metas":{"type":"method","name":"update_object_metas","children":[],"call":["@protocol copy_object "," name "]}," Aliyun OSS Bucket get_object":{"type":"method","name":"get_object","children":[],"call":["@protocol get_object_meta "," name ","@protocol get_object ","f write ","File  open ","File  expand_path ","opts [] ","@protocol get_@protocol get_object_meta ect_meta ","@protocol get_@protocol get_object ect_meta ","@protocol get_@protocol get_object_meta ect ","@protocol get_@protocol get_object ect "]}," Aliyun OSS Bucket put_object":{"type":"method","name":"put_object","children":[],"call":["@protocol put_object "," name ","sw << ","f read ","f eof? ","File  open ","File  expand_path ","opts []= "," get_content_type ","opts [] ","args [] ","opts dup ","opts dup  [] "]}," Aliyun OSS Bucket list_objects":{"type":"method","name":"list_objects","children":[],"call":["Iterator Objects  new to_enum ","Iterator Objects  new "," name ","opts merge "]}," Aliyun OSS Bucket cors=":{"type":"method","name":"cors=","children":[],"call":["@protocol set_bucket_cors "," name ","@protocol delete_bucket_cors ","rules empty? "]}," Aliyun OSS Bucket cors":{"type":"method","name":"cors","children":[],"call":[" raise ","e http_code == ","e http_code ","@protocol get_bucket_cors "," name "," @protocol get_bucket_cors aise ","@p@protocol get_bucket_cors otocol get_bucket_co@protocol get_bucket_cors s "]}," Aliyun OSS Bucket lifecycle=":{"type":"method","name":"lifecycle=","children":[],"call":["@protocol put_bucket_lifecycle "," name ","@protocol delete_bucket_lifecycle ","rules empty? "]}," Aliyun OSS Bucket lifecycle":{"type":"method","name":"lifecycle","children":[],"call":[" raise ","e http_code == ","e http_code ","@protocol get_bucket_lifecycle "," name "," @protocol get_bucket_lifecycle aise ","@p@protocol get_bucket_lifecycle otocol get_bucket_lifecycle "]}," Aliyun OSS Bucket referer=":{"type":"method","name":"referer=","children":[],"call":["@protocol put_bucket_referer "," name "]}," Aliyun OSS Bucket referer":{"type":"method","name":"referer","children":[],"call":["@protocol get_bucket_referer "," name "]}," Aliyun OSS Bucket website=":{"type":"method","name":"website=","children":[],"call":["@protocol delete_bucket_website "," name ","@protocol put_bucket_website ","website enabled? "]}," Aliyun OSS Bucket website":{"type":"method","name":"website","children":[],"call":["BucketWebsite  new "," raise ","e http_code == ","e http_code ","@protocol get_bucket_website "," name ","BucketWebsite  ne@protocol get_bucket_website  ","@protocol get_bucket_@protocol get_bucket_website ebsite "]}," Aliyun OSS Bucket logging=":{"type":"method","name":"logging=","children":[],"call":["@protocol delete_bucket_logging "," name ","@protocol put_bucket_logging ","logging enabled? "]}," Aliyun OSS Bucket logging":{"type":"method","name":"logging","children":[],"call":["@protocol get_bucket_logging "," name "]}," Aliyun OSS Bucket acl=":{"type":"method","name":"acl=","children":[],"call":["@protocol put_bucket_acl "," name "]}," Aliyun OSS Bucket acl":{"type":"method","name":"acl","children":[],"call":["@protocol get_bucket_acl "," name "]}," Aliyun OSS Bucket initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Aliyun OSS Multipart Upload sync_get_all_parts":{"type":"method","name":"sync_get_all_parts","children":[],"call":["@parts dup ","@all_mutex synchronize "]}," Aliyun OSS Multipart Upload sync_update_part":{"type":"method","name":"sync_update_part","children":[],"call":["@parts []= ","p [] - ","p [] ","@all_mutex synchronize "]}," Aliyun OSS Multipart Upload sync_get_todo_part":{"type":"method","name":"sync_get_todo_part","children":[],"call":["@todo_parts shift ","@todo_mutex synchronize "]}," Aliyun OSS Iterator Uploads fetch":{"type":"method","name":"fetch","children":[],"call":["@more []= ","cont [] ","cont [] + ","@protocol list_multipart_uploads "]}," Aliyun OSS Iterator Uploads initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Aliyun OSS Multipart Download sync_get_all_parts":{"type":"method","name":"sync_get_all_parts","children":[],"call":["@parts dup ","@all_mutex synchronize "]}," Aliyun OSS Multipart Download sync_update_part":{"type":"method","name":"sync_update_part","children":[],"call":["@parts []= ","p [] - ","p [] ","@all_mutex synchronize "]}," Aliyun OSS Multipart Download sync_get_todo_part":{"type":"method","name":"sync_get_todo_part","children":[],"call":["@todo_parts shift ","@todo_mutex synchronize "]}," Aliyun OSS Bucket abort_upload":{"type":"method","name":"abort_upload","children":[],"call":["@protocol abort_multipart_upload "," name "]}," Aliyun OSS Bucket list_uploads":{"type":"method","name":"list_uploads","children":[],"call":["Iterator Uploads  new to_enum ","Iterator Uploads  new ","opts merge "," name "]}," Aliyun OSS Multipart Transaction initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "]}," Aliyun STS Util sign":{"type":"method","name":"sign","children":[],"call":["Base64  strict_encode64 ","OpenSSL HMAC  digest "]}," Aliyun STS Util get_signature":{"type":"method","name":"get_signature","children":[],"call":["Util  sign ","key + "," logger debug "," logger ","verb + + + + ","CGI  escape ","verb + + + ","verb + + ","verb + ","(send\n  (send\n    (lvar :params) :sort) :map) join ","(send\n  (const nil :CGI) :escape\n  (lvar :k)) join ","params sort map ","params sort "]}," Aliyun STS Policy add_rule":{"type":"method","name":"add_rule","children":[],"call":["@rules << "]}," Aliyun STS Policy serialize":{"type":"method","name":"serialize","children":[],"call":["(pair\n  (str \"Version\")\n  (const nil :VERSION)) to_json "]}," Aliyun STS Policy deny":{"type":"method","name":"deny","children":[],"call":[" add_rule "]}," Aliyun STS Policy allow":{"type":"method","name":"allow","children":[],"call":[" add_rule "]}," Aliyun STS Protocol get_node_text":{"type":"method","name":"get_node_text","children":[],"call":["n text ","node at_css ","node at_css  text ","node at_css ode at_css "]}," Aliyun STS Protocol parse_xml":{"type":"method","name":"parse_xml","children":[],"call":["config options ","Nokogiri  XML "]}," Aliyun STS Protocol do_request":{"type":"method","name":"do_request","children":[],"call":["r body "," logger debug ","r headers ","r code "," logger ","response return! "," raise "," logger error ","e to_s ","ServerError  new ","response code >= ","response code ","RestClient Request  execute ","query merge! ","Util  get_signature ","@config access_key_secret ","params merge ","Time  now utc iso8601 ","Time  now utc ","Time  now "," signature_nonce ","@config access_key_id ","@config endpoint "," loggServerError  new r dServerError  new bug ","r hServerError  new adServerError  new rs ","r codServerError  new  "," loggServerError  new r ","rServerError  new sponsServerError  new  rServerError  new turn! "," raisServerError  new  "," loggServerError  new r ServerError  new rror ","ServerError  new  to_s ","SServerError  new rvServerError  new rError  nServerError  new w ","rServerError  new sponsServerError  new  codServerError  new  >= ","rServerError  new sponsServerError  new  codServerError  new  ","RServerError  new stCliServerError  new nt RServerError  new quServerError  new st  ServerError  new xServerError  new cutServerError  new  ","quServerError  new ry mServerError  new rgServerError  new ! ","params merge  merge! ","Util  gServerError  new t_signaturServerError  new  ","Util  get_Util  get_signature  ","@config accServerError  new ss_kServerError  new y_sServerError  new crServerError  new t ","params mServerError  new rgServerError  new  ","TimServerError  new   now utc iso8601 ","TimServerError  new   now utc ","TimServerError  new   now "," signaturServerError  new _noncServerError  new  "," Util  get_signature _nonce ","@config accServerError  new ss_kServerError  new y_id ","@config ServerError  new ndpoint "]}," Aliyun STS Protocol signature_nonce":{"type":"method","name":"signature_nonce","children":[],"call":["(send\n  (send nil :rand) :*\n  (int 1000000000)) to_s "," rand * "," rand "]}," Aliyun STS Protocol assume_role":{"type":"method","name":"assume_role","children":[],"call":["Token  new "," logger info "," logger ","Time  parse "," get_node_text ","doc at_css "," parse_xml "," do_request ","params merge! ","policy serialize ","duration to_s "," parse_xml  at_css "]}," Aliyun STS Protocol initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Aliyun STS ServerError to_s":{"type":"method","name":"to_s","children":[],"call":["(send\n  (send\n    (ivar :@attrs) :merge\n    (hash\n      (pair\n        (str \"HTTPCode\")\n        (ivar :@http_code)))) :map) join ","(lvar :k) join ","@attrs merge map ","@attrs merge "]}," Aliyun STS ServerError message":{"type":"method","name":"message","children":[],"call":[" request_id "," http_code ","@attrs [] "]}," Aliyun STS ServerError initialize":{"type":"method","name":"initialize","children":[],"call":["@attrs [] ","@attrs []= ","n text ","n name ","doc root children each ","doc root children ","doc root ","config options ","Nokogiri  XML ","response body ","response code "]}," Aliyun STS Config initialize":{"type":"method","name":"initialize","children":[],"call":["@access_key_secret strip! ","@access_key_id strip! ","@access_key_secret strip ","@access_key_id strip ","@endpoint strip ","@access_key_secret strip  strip! ","@access_key_id strip  strip! ","@access_key_secret strip  strip ","@access_key_id strip  strip ","@endpoint strip  strip "]}," Aliyun STS Client assume_role":{"type":"method","name":"assume_role","children":[],"call":["@protocol assume_role "]}," Aliyun STS Client initialize":{"type":"method","name":"initialize","children":[],"call":["Protocol  new ","Config  new "]}," Aliyun Common Struct Base to_s":{"type":"method","name":"to_s","children":[],"call":["(send\n  (send nil :attrs) :map) join ","attr to_s "," instance_variable_get "," attrs map "," attrs "," instance_ instance_variable_get ariable_get "]}," Aliyun Common Struct Base initialize":{"type":"method","name":"initialize","children":[],"call":[" instance_variable_set ","opts [] "," attrs each "," attrs "," fail ","extra_keys join ","extra_keys empty? ","opts keys - ","opts keys ","opts keys -  join ","opts keys -  empty? "]}," Aliyun Common Struct Base AttrHelper attrs":{"type":"method","name":"attrs","children":[],"call":[" attr_reader "," define_method "]}," Aliyun Common Logging logger":{"type":"method","name":"logger","children":[],"call":["Logging  logger "]}," Aliyun Common Logging set_log_file":{"type":"method","name":"set_log_file","children":[],"call":[]}," Aliyun Common Logging set_log_level":{"type":"method","name":"set_log_level","children":[],"call":[]}," Aliyun Common Exception initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Aliyun OSS Callback default_content_type":{"type":"method","name":"default_content_type","children":[],"call":[]}," Aliyun OSS Callback normalize_url":{"type":"method","name":"normalize_url","children":[],"call":["uri to_s "," fail ","uri query nil? ","uri query ","uri scheme != ","uri scheme ","URI  parse ","URI  parse  to_s ","URI  parse  query nil? ","URI  parse  query ","URI  parse  scheme != ","URI  parse  scheme "]}," Aliyun OSS Callback serialize":{"type":"method","name":"serialize","children":[],"call":["Base64  strict_encode64 ","cb to_json "," logger debug "," logger ","cb []= "," host "," default_content_type "," content_type "," body "," normalize_url "," url ","(send\n  (begin\n    (or\n      (send nil :query)\n      (hash))) :map) join ","(send\n  (const nil :CGI) :escape\n  (send\n    (lvar :k) :to_s)) join ","CGI  escape ","v to_s ","k to_s ","(or\n  (send nil :query)\n  (hash)) map "," query "]}," Aliyun OSS Protocol to_lower_case":{"type":"method","name":"to_lower_case","children":[],"call":["result []= ","k to_s downcase ","k to_s ","hash reduce "]}," Aliyun OSS Util symbolize":{"type":"method","name":"symbolize","children":[],"call":["result << "," symbolize ","v each ","v is_a? ","result []= ","v [] ","k to_sym ","v each_key "]}," Aliyun OSS Protocol get_sts_token":{"type":"method","name":"get_sts_token","children":[],"call":["@config sts_token "]}," Aliyun OSS Util crc_check":{"type":"method","name":"crc_check","children":[],"call":[" fail ","CrcInconsistentError  new "," logger error "," logger ","crc_a to_i != ","crc_b to_i ","crc_a to_i ","crc_b nil? ","crc_a nil? "]}," Aliyun OSS Util crc_combine":{"type":"method","name":"crc_combine","children":[],"call":["CrcX  crc64_combine "]}," Aliyun OSS Util crc":{"type":"method","name":"crc","children":[],"call":["CrcX  crc64 ","data size "]}," Aliyun OSS Protocol upload_crc_enable":{"type":"method","name":"upload_crc_enable","children":[],"call":["@config upload_crc_enable "]}," Aliyun OSS Protocol download_crc_enable":{"type":"method","name":"download_crc_enable","children":[],"call":["@config download_crc_enable "]}," Aliyun OSS Bucket upload_crc_enable":{"type":"method","name":"upload_crc_enable","children":[],"call":["@protocol upload_crc_enable "]}," Aliyun OSS Bucket download_crc_enable":{"type":"method","name":"download_crc_enable","children":[],"call":["@protocol download_crc_enable "]}," Aliyun OSS HTTP StreamWriter close":{"type":"method","name":"close","children":[],"call":[]}," Aliyun OSS Util ensure_bucket_name_valid":{"type":"method","name":"ensure_bucket_name_valid","children":[],"call":[" fail ","name =~ "]}," Aliyun OSS Protocol get_access_key_secret":{"type":"method","name":"get_access_key_secret","children":[],"call":["@config access_key_secret "]}," Aliyun OSS Protocol get_resource_path":{"type":"method","name":"get_resource_path","children":[],"call":["@http get_resource_path "]}," Aliyun OSS BucketEncryption enabled?":{"type":"method","name":"enabled?","children":[],"call":[" enable == "," enable "]}," Aliyun OSS Protocol delete_bucket_encryption":{"type":"method","name":"delete_bucket_encryption","children":[],"call":[" logger info "," logger ","@http delete "]}," Aliyun OSS Protocol get_bucket_encryption":{"type":"method","name":"get_bucket_encryption","children":[],"call":["BucketEncryption  new "," logger info "," logger "," get_node_text ","doc at_css "," parse_xml ","r body ","@http get ","BucketEnc@http get yption  new "," logge@http get  info "," logge@http get  "," parse_xml  at_css "," pa@http get se_xml ","@http get  body "]}," Aliyun OSS Protocol put_bucket_encryption":{"type":"method","name":"put_bucket_encryption","children":[],"call":[" logger info "," logger ","@http put ","(send\n  (const\n    (const\n      (const nil :Nokogiri) :XML) :Builder) :new) to_xml ","xml KMSMasterKeyID ","encryption kms_master_key_id ","xml SSEAlgorithm ","encryption sse_algorithm ","xml ApplyServerSideEncryptionByDefault ","xml ServerSideEncryptionRule ","Nokogiri XML Builder  new "]}," Aliyun OSS Protocol get_bucket_versioning":{"type":"method","name":"get_bucket_versioning","children":[],"call":["BucketVersioning  new "," logger info "," logger "," get_node_text ","doc at_css "," parse_xml ","r body ","@http get ","BucketVe@http get sioning  new "," logge@http get  info "," logge@http get  "," parse_xml  at_css "," pa@http get se_xml ","@http get  body "]}," Aliyun OSS Protocol put_bucket_versioning":{"type":"method","name":"put_bucket_versioning","children":[],"call":[" logger info "," logger ","@http put ","(send\n  (const\n    (const\n      (const nil :Nokogiri) :XML) :Builder) :new) to_xml ","xml Status ","versioning status ","xml VersioningConfiguration ","Nokogiri XML Builder  new "]}," Aliyun OSS Bucket encryption=":{"type":"method","name":"encryption=","children":[],"call":["@protocol delete_bucket_encryption "," name ","@protocol put_bucket_encryption ","encryption enabled? "]}," Aliyun OSS Bucket encryption":{"type":"method","name":"encryption","children":[],"call":["@protocol get_bucket_encryption "," name "]}," Aliyun OSS Bucket versioning=":{"type":"method","name":"versioning=","children":[],"call":["@protocol put_bucket_versioning "," name "]}," Aliyun OSS Bucket versioning":{"type":"method","name":"versioning","children":[],"call":["@protocol get_bucket_versioning "," name "]}," Aliyun Common Logging get_env_log_level":{"type":"method","name":"get_env_log_level","children":[],"call":[]}}