{" TokenStream pop_token":{"type":"method","name":"pop_token","children":[],"call":["@token_stream pop "]}," TokenStream add_tokens":{"type":"method","name":"add_tokens","children":[],"call":[" add_token ","tks each ","@token_stream << ","tokens flatten each ","tokens flatten ","@token_stream concat "]}," TokenStream add_token":{"type":"method","name":"add_token","children":[],"call":["@token_stream << ","@token_stream push "]}," TokenStream start_collecting_tokens":{"type":"method","name":"start_collecting_tokens","children":[],"call":[]}," TokenStream token_stream":{"type":"method","name":"token_stream","children":[],"call":[]}," TemplatePage write_html_on":{"type":"method","name":"write_html_on","children":[],"call":["io write ","ERB  new result ","ERB  new ","@templates reverse_each "," binding ","template result ","@compiled_templates reverse_each ","@templates map ","  binding inding "]}," TemplatePage href":{"type":"method","name":"href","children":[],"call":[]}," TemplatePage initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Stats print":{"type":"method","name":"print","children":[],"call":[" puts ","Elapsed:  + "," sprintf ","Time  now - ","Time  now ","Elapsed: %0.1fs % ","%6.2f%% documented % ","Methods:   %5d (%5d undocumented) % ","Modules:   %5d (%5d undocumented) % ","Constants: %5d (%5d undocumented) % ","Classes:   %5d (%5d undocumented) % ","Files:     %5d % ","doc_items to_f / * ","doc_items to_f / ","doc_items to_f ","items - - - - ","items - - - ","items - - ","items - ","num_classes + + + ","num_classes + + ","num_classes + ","(send\n  (lvar :modules) :select) length ","mod comment empty? ","mod comment ","mod document_self ","modules select ","modules length ","RDoc TopLevel  modules ","(send\n  (lvar :classes) :select) length ","klass comment empty? ","klass comment ","klass document_self ","classes select ","classes length ","RDoc TopLevel  classes ","items - - - -  to_f / * ","doc_num_classes + + +  to_f / * ","items - - - -  to_f / ","doc_num_classes + + +  to_f / ","items - - - -  to_f ","doc_num_classes + + +  to_f ","num_classes + + +  - - - - ","num_classes + + +  - - - ","num_classes + + +  - - ","num_classes + + +  - ","classes length  + + + ","num_RDoc TopLevel  classes  + + + ","classes length  + + ","num_RDoc TopLevel  classes  + + ","classes length  + ","num_RDoc TopLevel  classes  + ","(send\n  (lvar :RDoc TopLevel  modules ) :select) length ","RDoc TopLevel  modules  select ","RDoc TopLevel  modules  length ","RDoc TopLevel  RDoc TopLevel  modules  ","(send\n  (lvar :RDoc TopLevel  classes ) :select) length ","RDoc TopLevel  classes  select ","RDoc TopLevel  classes  length ","RDoc TopLevel  RDoc TopLevel  classes  "]}," Stats initialize":{"type":"method","name":"initialize","children":[],"call":["Time  now ","Verbose  new ","Normal  new ","Quiet  new ","Mutex  new "]}," Writer path_to_dir":{"type":"method","name":"path_to_dir","children":[],"call":["File  join ","class_name split "]}," Writer add_method":{"type":"method","name":"add_method","children":[],"call":["f write ","method_desc serialize ","File  open ","method_desc is_singleton ","File  join "," class internal_to_external ","method_desc name "," class "," path_to_dir ","class_desc full_name "," path_to_ path_to_dir  "]}," Writer add_class":{"type":"method","name":"add_class","children":[],"call":["f write ","class_desc serialize ","File  open "," class class_desc_path "," class ","FileUtils  mkdir_p "," path_to_dir ","class_desc full_name ","FileUtils  mk path_to_dir _p "," path_to_ path_to_dir  "]}," Writer remove_class":{"type":"method","name":"remove_class","children":[],"call":["FileUtils  rm_rf "," path_to_dir ","class_desc full_name "]}," Writer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Writer external_to_internal":{"type":"method","name":"external_to_internal","children":[],"call":[]}," Writer internal_to_external":{"type":"method","name":"internal_to_external","children":[],"call":[]}," Writer class_desc_path":{"type":"method","name":"class_desc_path","children":[],"call":[]}," NameDescriptor full_class_name":{"type":"method","name":"full_class_name","children":[],"call":["@class_names join "]}," NameDescriptor initialize":{"type":"method","name":"initialize","children":[],"call":["separator == ","separator != "," raise ","RDoc RI Error  new ","tokens empty? ! ","tokens empty? ","@method_name =~ ","@method_name << ","tokens shift ","tokens [] =~ ","tokens [] ","@class_names << ","arg split ","tokens shift  == ","tokens shift  != ","arg split  empty? ! ","arg split  empty? ","tokens shift  =~ ","tokens shift  << ","arg split  shift ","arg split  [] =~ ","arg split  [] "]}," Reader find_names_in":{"type":"method","name":"find_names_in","children":[],"call":[" find_names_in ","res concat ","c all_method_names ","res << ","c full_name ","klass classes_and_modules ","klass klass classes_and_modules _and_modules "]}," Reader find_classes_in":{"type":"method","name":"find_classes_in","children":[],"call":[" find_classes_in ","res << ","c full_name ","klass classes_and_modules "," find_klass classes_and_modules _in ","klass klass classes_and_modules _and_modules "]}," Reader all_names":{"type":"method","name":"all_names","children":[],"call":[" find_names_in ","@cache toplevel "]}," Reader full_class_names":{"type":"method","name":"full_class_names","children":[],"call":[" find_classes_in ","@cache toplevel "]}," Reader get_class":{"type":"method","name":"get_class","children":[],"call":["result merge_in ","RI Description  deserialize ","File  open ","RiWriter  class_desc_path ","class_entry path_names ","RDoc RI Description  deserialize ","RDoc RI Writer  class_desc_path ","RiWriter  class_desc_RiWriter  class_desc_path  ","RiWriter  class_desc_RDoc RI Writer  class_desc_path  ","class_entry RiWriter  class_desc_path _names ","class_entry RDoc RI Writer  class_desc_path _names ","RDoc RI Writer  class_desc_RiWriter  class_desc_path  ","RDoc RI Writer  class_desc_RDoc RI Writer  class_desc_path  "]}," Reader get_method":{"type":"method","name":"get_method","children":[],"call":["RI Description  deserialize ","File  open ","method_entry path_name ","RDoc RI Description  deserialize ","method_entry method_entry path_name _name "]}," Reader find_methods":{"type":"method","name":"find_methods","children":[],"call":["result concat ","ns methods_matching ","namespaces each "]}," Reader find_class_by_name":{"type":"method","name":"find_class_by_name","children":[],"call":[" get_class ","ns nil? ","ns contained_class_named ","@cache toplevel ","full_name split ","ns contained_class_named  nil? ","@cache toplevel  nil? ","ns contained_class_named  contained_class_named ","@cache toplevel  contained_class_named "]}," Reader lookup_namespace_in":{"type":"method","name":"lookup_namespace_in","children":[],"call":["result concat ","n contained_modules_matching "]}," Reader top_level_namespace":{"type":"method","name":"top_level_namespace","children":[],"call":["@cache toplevel "]}," Reader initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Paths raw_path":{"type":"method","name":"raw_path","children":[],"call":[]}," Paths path":{"type":"method","name":"path","children":[],"call":[]}," SimpleFormatter display_heading":{"type":"method","name":"display_heading","children":[],"call":["@output print ","@output puts ","--  + ","=  + ","text upcase "," strip_attributes "," strip_attributes  upcase "]}," SimpleFormatter draw_line":{"type":"method","name":"draw_line","children":[],"call":["@output puts "," bold_print ","label nil? "]}," SimpleFormatter blankline":{"type":"method","name":"blankline","children":[],"call":[]}," HtmlFormatter escape":{"type":"method","name":"escape","children":[],"call":["str gsub! ","str gsub ","str gsub  gsub! ","str gsub  gsub "]}," HtmlFormatter tag":{"type":"method","name":"tag","children":[],"call":["@output print "]}," HtmlFormatter update_attributes":{"type":"method","name":"update_attributes","children":[],"call":["@output print ","str << << ","ATTR_MAP  [] ","str << ","(send\n  (lvar :wanted) :&\n  (lvar :quality)) zero? ","wanted & ","</ + ","(send\n  (lvar :off) :&\n  (lvar :quality)) > ","off & ","current & ","wanted ~ ","(send\n  (lvar :current & ) :&\n  (lvar :quality)) > ","current &  & "]}," HtmlFormatter display_verbatim_flow_item":{"type":"method","name":"display_verbatim_flow_item","children":[],"call":["@output puts "," conv_html ","item body split each ","item body split ","item body ","@output print "," escape "]}," HtmlFormatter display_list":{"type":"method","name":"display_list","children":[],"call":["@output print "," display_flow_item ","prefixer call ","item kind_of? ","list contents each ","list contents "," fail ","li label gsub ","li label "," proc ","<dt><b> + + ","<dt><b> + "," escape ","list type ","prefixer call er call "]}," HtmlFormatter display_heading":{"type":"method","name":"display_heading","children":[],"call":["@output puts "," tag ","level > "]}," HtmlFormatter break_to_newline":{"type":"method","name":"break_to_newline","children":[],"call":["@output puts "]}," HtmlFormatter blankline":{"type":"method","name":"blankline","children":[],"call":["@output puts "]}," HtmlFormatter bold_print":{"type":"method","name":"bold_print","children":[],"call":[" tag "]}," HtmlFormatter draw_line":{"type":"method","name":"draw_line","children":[],"call":["@output puts "," bold_print ","label != "]}," HtmlFormatter write_attribute_text":{"type":"method","name":"write_attribute_text","children":[],"call":[" update_attributes ","curr_attr zero? ","@output print "," escape ","achar char ","achar attr ","achar attr != ","line each "," update_achar attr ibutes ","achar attr  zero? ","curr_achar attr  zero? ","achar achar attr  ","achar achar attr  != "]}," AnsiFormatter update_attributes":{"type":"method","name":"update_attributes","children":[],"call":["@output print ","str << ","ATTR_MAP  [] ","(send\n  (lvar :attr) :&\n  (lvar :quality)) zero? ","attr & "]}," AnsiFormatter display_heading":{"type":"method","name":"display_heading","children":[],"call":["@output puts ","heading [] ","@output print "," strip_attributes ","HEADINGS  [] ","level > ","HEADINGS  []  [] "]}," AnsiFormatter bold_print":{"type":"method","name":"bold_print","children":[],"call":["@output print "]}," AnsiFormatter write_attribute_text":{"type":"method","name":"write_attribute_text","children":[],"call":["@output puts "," update_attributes ","curr_attr zero? ","@output print ","achar char ","achar attr ","achar attr != ","line each "," update_achar attr ibutes ","achar attr  zero? ","curr_achar attr  zero? ","achar achar attr  ","achar achar attr  != "]}," AnsiFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["@output print "]}," OverstrikeFormatter bold_print":{"type":"method","name":"bold_print","children":[],"call":["@output print ","text split each ","text split "]}," OverstrikeFormatter write_attribute_text":{"type":"method","name":"write_attribute_text","children":[],"call":["@output puts ","@output print ","achar char ","(send\n  (lvar :attr) :&\n  (const nil :BOLD)) != ","attr & ","(send\n  (lvar :attr) :&\n  (begin\n    (send\n      (const nil :ITALIC) :+\n      (const nil :CODE)))) != ","ITALIC  + ","achar attr ","line each ","(send\n  (lvar :achar attr ) :&\n  (const nil :BOLD)) != ","achar attr  & ","(send\n  (lvar :achar attr ) :&\n  (begin\n    (send\n      (const nil :ITALIC) :+\n      (const nil :CODE)))) != ","achar achar attr  "]}," AttributeFormatter add_attributes_to":{"type":"method","name":"add_attributes_to","children":[],"call":["text << ","AttrChar  new ","tok split each ","tok split ","ATTR_MAP  [] ","(or\n  (send\n    (const nil :ATTR_MAP) :[]\n    (nth-ref 1))\n  (int 0)) ~ ","tokens each ","AttributeString  new ","txt split ","AttributeString  new  << ","txt split  each "]}," AttributeFormatter bold_print":{"type":"method","name":"bold_print","children":[],"call":["@output print "]}," AttributeFormatter write_attribute_text":{"type":"method","name":"write_attribute_text","children":[],"call":["@output puts ","@output print ","achar char ","line each "]}," AttributeFormatter wrap":{"type":"method","name":"wrap","children":[],"call":[" write_attribute_text ","line length > ","line length ","line concat ","word size + > ","word size + ","line size ","word size ","txt next_word ","txt empty? ","prefix size ","prefix tr "," add_attributes_to ","txt empty? ! ","txt next_word  size + > ","txt next_word  size + ","txt next_word  size ","txt next_txt next_word  "," add_attributes_to  next_word "," add_attributes_to  empty? "," add_attributes_to  empty? ! "]}," AttributeFormatter AttributeString next_word":{"type":"method","name":"next_word","children":[],"call":["@txt [] ","@txt [] char == ","@txt [] char ","@optr < ","@txt [] char != ","@txt length ","@txt @txt length gth "]}," AttributeFormatter AttributeString empty?":{"type":"method","name":"empty?","children":[],"call":["@optr >= ","@txt length "]}," AttributeFormatter AttributeString <<":{"type":"method","name":"<<","children":[],"call":["@txt << "]}," AttributeFormatter AttributeString initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Formatter strip_attributes":{"type":"method","name":"strip_attributes","children":[],"call":["text gsub "]}," Formatter display_flow":{"type":"method","name":"display_flow","children":[],"call":[" display_flow_item ","flow each "]}," Formatter display_heading":{"type":"method","name":"display_heading","children":[],"call":["@output puts ","@output print ","- * ","text length ","text upcase ","= * "," strip_attributes "," strip_attributes  length "," strip_attributes  upcase "]}," Formatter display_verbatim_flow_item":{"type":"method","name":"display_verbatim_flow_item","children":[],"call":[" blankline ","@output print "," conv_html ","item body split each ","item body split ","item body "]}," Formatter display_flow_item":{"type":"method","name":"display_flow_item","children":[],"call":[" raise ","item class "," draw_line "," display_heading ","item level "," conv_html ","item text "," display_verbatim_flow_item "," display_list "," blankline "," wrap ","item body "]}," Formatter display_list":{"type":"method","name":"display_list","children":[],"call":[" display_flow_item ","prefixer call ","RDoc Markup Flow LI  === ","list contents each ","list contents "," raise ","list type ","@indent + ","li label ljust ","li label "," proc ","item label length ","item label ","item label length > ","start succ ","(begin\n  (lvar :start)) ljust ","prefixer call er call ","start succ  succ ","(begin\n  (lvar :start succ )) ljust "]}," Formatter conv_markup":{"type":"method","name":"conv_markup","children":[],"call":["txt gsub! ","txt gsub ","txt gsub  gsub! ","txt gsub  gsub "]}," Formatter conv_html":{"type":"method","name":"conv_html","children":[],"call":["txt gsub! ","txt gsub ","txt gsub  gsub! ","txt gsub  gsub "]}," Formatter raw_print_line":{"type":"method","name":"raw_print_line","children":[],"call":["@output puts ","@output print "]}," Formatter bold_print":{"type":"method","name":"bold_print","children":[],"call":["@output print "]}," Formatter break_to_newline":{"type":"method","name":"break_to_newline","children":[],"call":[]}," Formatter blankline":{"type":"method","name":"blankline","children":[],"call":["@output puts "]}," Formatter wrap":{"type":"method","name":"wrap","children":[],"call":["@output puts ","prefix + ","res join ","\n + ","res << ","work length nonzero? ","work length ","work slice! ","$& length ","work =~ ","work length > ","prefix tr ","Regexp  new ","linelen - ","prefix length "," conv_markup ","txt empty? ! ","txt empty? "," conv_markup  length nonzero? "," conv_markup  length "," conv_markup  slice! "," conv_markup  =~ "," conv_markup  length > "]}," Formatter indent":{"type":"method","name":"indent","children":[],"call":["@indent dup "," block_given? ","@@indent dup  dup "]}," Formatter draw_line":{"type":"method","name":"draw_line","children":[],"call":["@output puts ","@output print ","- * "," bold_print ","len > ","label size + ","label size "]}," Formatter initialize":{"type":"method","name":"initialize","children":[],"call":["indent dup ","RDoc Markup  new ","RDoc Markup Attribute  bitmap_for ","@markup attribute_manager ","@attributes bitmap_for ","@am attributes ","@am add_special ","@am add_regexp_handling ","RDoc Markup  new  attribute_manager ","@am attributes  bitmap_for ","@markup attribute_manager  attributes ","@markup attribute_manager  add_special ","@markup attribute_manager  add_regexp_handling "]}," Formatter list":{"type":"method","name":"list","children":[],"call":[]}," Formatter for":{"type":"method","name":"for","children":[],"call":[]}," Hash merge_enums":{"type":"method","name":"merge_enums","children":[],"call":[" []= "," [] merge! "," [] "," [] empty? ","String  === ","other each "]}," Hash method_missing":{"type":"method","name":"method_missing","children":[],"call":[" [] ","method to_s "]}," Driver write_cache":{"type":"method","name":"write_cache","children":[],"call":["Marshal  dump ","File  open "]}," Driver select_methods":{"type":"method","name":"select_methods","children":[],"call":["methods << "," load_cache_for [] ","klass + + ","klass + "," load_cache_for ","(send\n  (send\n    (send\n      (send nil :class_cache) :[]\n      (lvar :klass)) :[]\n    (str \"class_methods\")) :map) grep ","h [] "," class_cache [] [] map "," class_cache [] [] "," class_cache [] "," class_cache ","(send\n  (send\n    (send\n      (send nil :class_cache) :[]\n      (lvar :klass)) :[]\n    (str \"instance_methods\")) :map) grep "," class_cache keys sort each "," class_cache keys sort "," class_cache keys "," load_cache_for [] s << ","(send\n  (send\n    (send\n      (send nil :class_cache) :[]\n      (lvar :klass)) :[]\n    (str \"class_ load_cache_for [] s\")) :map) grep ","(send\n  (send\n    (send\n      (send nil :class_cache) :[]\n      (lvar :klass)) :[]\n    (str \"instance_ load_cache_for [] s\")) :map) grep "]}," Driver run":{"type":"method","name":"run","children":[],"call":["@display display_method_list ","@display display_method_info ","methods first ","methods size == ","methods size "," abort "," select_methods "," display_class "," class_cache key? "," class_cache ","cache [] ","name gsub "," load_cache_for ","parts join ","parts pop ","parts last =~ ","parts last ","name split ","@names each ","@display list_known_classes "," class_cache keys sort "," class_cache keys ","@names empty? ","e message "," raise ","name sub "," lookup_ancestor "," lookup_method ","klass == "," parse_name ","@display display_method_list_choice "," display_method ","methods [] "," loop ","name =~ ","method_name != ","@display get_class_method_choice "," puts ","@doc_dirs join "," display_name "," interactive "," display_names "," list_known_classes "," start_server ","@display display_cache [] _list ","@display display_ lookup_method _list ","@display display_parts pop od_list ","@display display_cache [] _info ","@display display_ lookup_method _info ","@display display_parts pop od_info "," select_methods  first ","cache [] s first "," lookup_method s first ","parts pop ods first "," select_methods  size == ","cache [] s size == "," lookup_method s size == ","parts pop ods size == "," select_methods  size ","cache [] s size "," lookup_method s size ","parts pop ods size "," select_ select_methods  "," select_cache [] s "," select_ lookup_method s "," select_parts pop ods "," class_ load_cache_for  key? "," class_ load_cache_for  "," load_cache_for  [] ","name sub  gsub "," load_ load_cache_for _for ","name split  join ","name split  pop ","name split  last =~ ","name split  last ","name sub  split ","@name sub s each "," class_ load_cache_for  keys sort "," class_ load_cache_for  keys ","@name sub s empty? ","name sub  sub "," lookup_ lookup_ancestor  "," lookup_cache []  "," lookup_ lookup_method  "," lookup_parts pop od ","parts join  == "," parse_name sub  ","@display display_cache [] _list_choice ","@display display_ lookup_method _list_choice ","@display display_parts pop od_list_choice "," display_cache []  "," display_ lookup_method  "," display_parts pop od "," select_methods  [] ","cache [] s [] "," lookup_method s [] ","parts pop ods [] ","name sub  =~ ","cache [] _name != "," lookup_method _name != ","parts pop od_name != ","method_name sub  != ","@display get_class_method_choice  != ","@display get_class_cache [] _choice ","@display get_class_ lookup_method _choice ","@display get_class_parts pop od_choice "," display_name sub  "," display_name sub s "]}," Driver get_info_for":{"type":"method","name":"get_info_for","children":[],"call":[" run "]}," Driver read_yaml":{"type":"method","name":"read_yaml","children":[],"call":["YAML  load ","data gsub ","File  read ","OpenStructHash  convert ","data gsub  gsub ","File  read  gsub "]}," Driver populate_class_cache":{"type":"method","name":"populate_class_cache","children":[],"call":["class_cache []= ","desc []= ","klass [] << ","klass [] ","klass merge_enums ","desc delete ","class_cache [] ","class_cache has_key? ","desc [] "," read_yaml ","classes each ","RDoc RI Driver Hash  convert "," read_yaml  []= ","class_cache []  [] << ","RDoc RI Driver Hash  convert  [] << ","class_cache []  [] ","RDoc RI Driver Hash  convert  [] ","class_cache []  merge_enums ","RDoc RI Driver Hash  convert  merge_enums "," read_yaml  delete "," read_yaml  [] "]}," Driver map_dirs":{"type":"method","name":"map_dirs","children":[],"call":["(send\n  (lvar :dirs) :map) flatten compact ","(send\n  (lvar :dirs) :map) flatten ","File  join ","dirs map ","@all_dirs - ","system == ","(send\n  (ivar :@doc_dirs) :map) flatten compact ","(send\n  (ivar :@doc_dirs) :map) flatten ","@doc_dirs map "]}," Driver load_cache_for":{"type":"method","name":"load_cache_for","children":[],"call":[" write_cache ","cache []= ","method []= ","f =~ ","method [] "," read_yaml ","yaml =~ ","Dir  [] each ","Dir  [] ","File  join ","File  dirname ","f index == ","f index ","method_files each ","@sys_dirs first ","klass [] ","class_cache [] ","Marshal  load ","fp read ","File  open "," class_cache_file_path ","File  mtime >= ","File  mtime ","File  exist? "," cache_file_for ","RDoc RI Driver Hash  convert ","RDoc RI Driver Hash  new "," open "," create_cache_for ","$stderr puts "," write_RDoc RI Driver Hash  new  "," write_Marshal  load  "," write_ create_cache_for  ","RDoc RI Driver Hash  new  []= ","Marshal  load  []= "," create_cache_for  []= "," read_yaml  []= "," read_yaml  [] ","File  dirmethod []  "," read_yaml _files each ","klass []  each ","@@sys_dirs first s first ","class_cache []  [] ","Marshal  load  [] ","class_RDoc RI Driver Hash  new  [] ","class_Marshal  load  [] ","class_ create_cache_for  [] "," Marshal  load _file_path "," class_cache_file_ cache_file_for  "," class_RDoc RI Driver Hash  new _file_path "," class_Marshal  load _file_path "," class_ create_cache_for _file_path "," RDoc RI Driver Hash  new _file_for "," Marshal  load _file_for ","  create_cache_for _file_for "," create_RDoc RI Driver Hash  new _for "," create_Marshal  load _for "," create_ create_cache_for _for "]}," Driver display_class":{"type":"method","name":"display_class","children":[],"call":["@display display_class_info "," class_cache "," class_cache [] ","RDoc RI Driver Hash  convert "," display "," add_also_in ","out << ","RDoc Markup BlankLine  new "," add_method_list ","list push ","RDoc Markup ListItem  new ","constant name ","parts << ","RDoc Markup Paragraph  new ","parts empty? ","constant comment parts ","constant comment ","constants map ","klass constants sort_by ","klass constants ","RDoc Markup List  new ","RDoc Markup Heading  new ","klass constants empty? ","RDoc Markup Rule  new ","klass constants empty? ! ","comment empty? "," add_from ","also_in << ","(or\n  (lvar :instance_methods)\n  (lvar :class_methods)) ! ","store attributes [] ","klass full_name ","store attributes ","store instance_methods [] ","store instance_methods ","store class_methods [] ","store class_methods ","klass comment ","found each "," add_includes "," add_class ","RDoc Markup Document  new ","modules empty? ","includes reject! ","found empty? ","(send\n  (ivar :@stores) :map) compact ","includes << ","klass includes ","klasses << ","store load_class ","@stores map ","name =~ "," class_document "," classes_and_includes_for "," classes_and_includes_and_extends_for ","RDoc Markup Document  new  << "," class_document  << "," add_method_RDoc Markup List  new  ","RDoc Markup List  new  push ","constant comment parts  << ","constant comment parts  empty? ","constant comment constant comment parts  ","constant klass comment  parts ","constant klass comment  "," class_cache []  constants sort_by ","RDoc RI Driver Hash  convert  constants sort_by ","store load_class  constants sort_by "," class_cache []  constants ","RDoc RI Driver Hash  convert  constants ","store load_class  constants "," class_cache []  constants empty? ","RDoc RI Driver Hash  convert  constants empty? ","store load_class  constants empty? "," class_cache []  constants empty? ! ","RDoc RI Driver Hash  convert  constants empty? ! ","store load_class  constants empty? ! ","klass comment  empty? ","(or\n  (lvar :store instance_methods [] )\n  (lvar :class_methods)) ! ","(or\n  (lvar :instance_methods)\n  (lvar :store class_methods [] )) ! ","store store attributes []  [] "," class_cache []  full_name ","RDoc RI Driver Hash  convert  full_name ","store load_class  full_name ","store store attributes []  ","store store instance_methods []  [] ","store store instance_methods []  ","store store class_methods []  [] ","store store class_methods []  "," class_cache []  comment ","RDoc RI Driver Hash  convert  comment ","store load_class  comment ","klass klass comment  ","(send\n  (ivar :@stores) :map) compact  each ","(send\n  (ivar :@stores) :map) compact  empty? "," class_cache []  includes ","RDoc RI Driver Hash  convert  includes ","store load_class  includes "," class_cache [] es << ","RDoc RI Driver Hash  convert es << ","store load_class es << "]}," Driver cache_file_path":{"type":"method","name":"cache_file_path","children":[],"call":["File  join "]}," Driver cache_file_for":{"type":"method","name":"cache_file_for","children":[],"call":["File  join ","klassname gsub "," cache_file_path "]}," Driver class_cache_file_path":{"type":"method","name":"class_cache_file_path","children":[],"call":["File  join "," cache_file_path "]}," Driver class_cache":{"type":"method","name":"class_cache","children":[],"call":[" write_cache "," class_cache_file_path "," populate_class_cache "," warn ","classes size ","Dir  [] "," map_dirs "," load_cache_for ","newest < ","File  mtime ","File  exist? ","(send nil :map_dirs\n  (str \"created.rid\")\n  (sym :all)) max "," test ","RDoc RI Driver Hash  convert ","RDoc RI Driver Hash  new "," create_class_cache ","$stderr puts ","Marshal  load ","fp read "," open ","cache_doc_dirs == ","(send nil :map_dirs\n  (str \"created.rid\")) max ","IO  read split ","IO  read ","File  readable? "," RDoc RI Driver Hash  new _file_path "," populate_RDoc RI Driver Hash  new  ","(send nil :map_dirs\n  (str \"created.rid\")\n  (sym :all)) max  < ","(send nil :map_dirs\n  (str \"created.rid\")) max  < "," create_RDoc RI Driver Hash  new  ","IO  read split  == "]}," Driver initialize":{"type":"method","name":"initialize","children":[],"call":["RDoc RI DefaultDisplay  new ","options [] ","FileUtils  mkdir_p "," cache_file_path ","File  directory? ","RDoc RI Paths  raw_path ","@homepath sub ","RDoc RI Paths  raw_path first ","RDoc RI Paths  path ","$stdout tty? ! ","$stdout tty? ","RDoc RI Formatter  for ","File  join "," class default_options update "," class default_options "," class ","@stores << ","store load_cache ","RDoc RI Store  new ","@doc_dirs << ","RDoc RI Paths  each "," require "," class default_options update  [] ","@homepath sub  sub ","RDoc RI Paths  raw_path first  sub "," class default_ class default_options update  update "," class default_ class default_options update  ","@RDoc RI Store  new s << ","RDoc RI Store  new  load_cache ","RDoc RI Paths  path  << "]}," Driver process_args":{"type":"method","name":"process_args","children":[],"call":[]}," DefaultDisplay warn_no_database":{"type":"method","name":"warn_no_database","children":[],"call":["output puts ","@formatter output ","@formatter output  puts ","@formatter @formatter output  "]}," DefaultDisplay setup_pager":{"type":"method","name":"setup_pager","children":[],"call":["IO  popen ","(send\n  (const nil :ENV) :[]\n  (str \"PAGER\")) compact uniq ","(send\n  (const nil :ENV) :[]\n  (str \"PAGER\")) compact ","ENV  [] "]}," DefaultDisplay page":{"type":"method","name":"page","children":[],"call":["pager close ","@formatter output= ","@formatter output "," setup_pager "," setup_pager  close "," setup_ setup_pager  "]}," DefaultDisplay list_known_classes":{"type":"method","name":"list_known_classes","children":[],"call":["@formatter wrap ","classes sort join ","classes sort ","@formatter blankline ","@formatter draw_line "," page "," warn_no_database ","classes empty? ","classes sort each "]}," DefaultDisplay display_params":{"type":"method","name":"display_params","children":[],"call":["@formatter wrap ","method source_path ","@formatter blankline ","@formatter break_to_newline ","params split each ","params split ","method name + ","method name ","method full_name + ","method full_name ","method is_singleton ","params [] == ","params [] ","method params ","method name +  split each ","method full_name +  split each ","method params  split each ","method name +  split ","method full_name +  split ","method params  split ","method name +  [] == ","method full_name +  [] == ","method params  [] == ","method name +  [] ","method full_name +  [] ","method params  [] ","method method name +  ","method method full_name +  ","method method params  "]}," DefaultDisplay display_method_list":{"type":"method","name":"display_method_list","children":[],"call":["@formatter wrap ","(send\n  (lvar :methods) :map) join ","m full_name ","methods map ","@formatter blankline "," page ","@formatter raw_print_line ","method source_path ","method full_name ","methods each "]}," DefaultDisplay display_method_info":{"type":"method","name":"display_method_info","children":[],"call":["@formatter wrap ","(send\n  (send\n    (lvar :method) :aliases) :map) join ","a name ","method aliases map ","method aliases ","@formatter blankline ","method aliases empty? ! ","method aliases empty? "," display_flow ","method comment ","@formatter draw_line "," display_params ","method full_name "," page "]}," DefaultDisplay display_flow":{"type":"method","name":"display_flow","children":[],"call":["@formatter wrap ","@formatter display_flow ","flow empty? ! ","flow empty? "]}," DefaultDisplay display_class_info":{"type":"method","name":"display_class_info","children":[],"call":["@formatter wrap ","attribute rw ","attribute name ","@formatter display_flow ","attribute comment ","@formatter indent ","attributes each ","klass attributes sort_by ","klass attributes ","@formatter display_heading ","@formatter blankline ","klass attributes empty? ","(send\n  (lvar :data) :map) sort join ","(send\n  (lvar :data) :map) sort ","item name ","data map ","data_type to_s split join capitalize << ","data_type to_s split join capitalize ","data_type to_s split join ","data_type to_s split ","data_type to_s ","data empty? ","klass send ","class_data each ","constant name ","constant comment ","constants each ","klass constants sort_by ","klass constants ","klass constants empty? ","incs sort join ","incs sort ","incs << ","inc name ","str << ","(send\n  (send\n    (lvar :inc_desc) :instance_methods) :map) join ","m name ","inc_desc instance_methods map ","inc_desc instance_methods ","inc name + ","ri_reader find_class_by_name ","klass includes each ","klass includes ","klass includes empty? ","@formatter draw_line "," display_flow ","klass comment ","klass display_name + + + ","klass display_name + + ","klass full_name ","klass display_name + ","klass display_name "," <  + ","klass superclass_string "," page "," display_class_method_list ","@formatter break_to_newline ","constant value ","klass superclass ","@formatter display_data_type to_s split join capitalize <<  ","(send\n  (lvar :(send\n  (lvar :data) :map) sort join ) :map) sort join ","(send\n  (lvar :klass send ) :map) sort join ","(send\n  (lvar :(send\n  (lvar :data) :map) sort join ) :map) sort ","(send\n  (lvar :klass send ) :map) sort ","(send\n  (lvar :data) :map) sort join  map ","klass send  map ","(send\n  (lvar :data) :map) sort join _type to_s split join capitalize << ","klass send _type to_s split join capitalize << ","(send\n  (lvar :data) :map) sort join _type to_s split join capitalize ","klass send _type to_s split join capitalize ","(send\n  (lvar :data) :map) sort join _type to_s split join ","klass send _type to_s split join ","(send\n  (lvar :data) :map) sort join _type to_s split ","klass send _type to_s split ","(send\n  (lvar :data) :map) sort join _type to_s ","klass send _type to_s ","(send\n  (lvar :data) :map) sort join  empty? ","klass send  empty? ","class_(send\n  (lvar :data) :map) sort join  each ","class_klass send  each ","inc name +  << ","(send\n  (send\n    (lvar :ri_reader find_class_by_name ) :instance_methods) :map) join ","ri_reader find_class_by_name  instance_methods map ","ri_reader find_class_by_name  instance_methods ","klass superclass_inc name + ing ","klass  <  + _string ","klass klass superclass_string _string ","klass klass superclass _string ","klass  <  +  ","klass klass superclass_string  ","klass klass superclass  "]}," DefaultDisplay initialize":{"type":"method","name":"initialize","children":[],"call":["formatter new "]}," Display new":{"type":"method","name":"new","children":[],"call":[]}," Display append_features":{"type":"method","name":"append_features","children":[],"call":[]}," ClassDescription superclass_string":{"type":"method","name":"superclass_string","children":[],"call":["@superclass != "]}," ClassDescription display_name":{"type":"method","name":"display_name","children":[],"call":[]}," ModuleDescription merge":{"type":"method","name":"merge","children":[],"call":["into replace ","names [] ","names keys sort map ","names keys sort ","names keys ","names []= ","i name ","from each ","into each "]}," ModuleDescription superclass_string":{"type":"method","name":"superclass_string","children":[],"call":[]}," ModuleDescription display_name":{"type":"method","name":"display_name","children":[],"call":[]}," ModuleDescription merge_in":{"type":"method","name":"merge_in","children":[],"call":["@comment concat ","old comment ","@comment << ","RDoc Markup Flow RULE  new ","old comment empty? ","old comment nil? ","@comment empty? ","@comment nil? "," merge ","old includes ","old constants ","old attributes ","old instance_methods ","old class_methods ","old comment  concat ","old comment  << ","old comment  empty? ","old comment  nil? "]}," Description <=>":{"type":"method","name":"<=>","children":[],"call":["@name <=> ","other name "]}," Description deserialize":{"type":"method","name":"deserialize","children":[],"call":[]}," Description serialize":{"type":"method","name":"serialize","children":[],"call":[" to_yaml "]}," MethodSummary initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Constant initialize":{"type":"method","name":"initialize","children":[],"call":[" comment= "]}," Attribute initialize":{"type":"method","name":"initialize","children":[],"call":[]}," NamedThing eql?":{"type":"method","name":"eql?","children":[],"call":["@name eql? "]}," NamedThing hash":{"type":"method","name":"hash","children":[],"call":["@name hash "]}," NamedThing <=>":{"type":"method","name":"<=>","children":[],"call":["@name <=> ","other name "]}," NamedThing initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Cache initialize":{"type":"method","name":"initialize","children":[],"call":["@toplevel load_from ","dirs each ","RDoc RI TopLevelEntry  new ","Mutex  new ","RDoc RI TopLevelEntry  new  load_from "]}," MethodEntry full_name":{"type":"method","name":"full_name","children":[],"call":["res << ","res empty? ","@in_class full_name ","@in_class full_name  << ","@in_class full_name  empty? "]}," MethodEntry initialize":{"type":"method","name":"initialize","children":[],"call":[]}," TopLevelEntry module_named":{"type":"method","name":"module_named","children":[],"call":[]}," TopLevelEntry full_name":{"type":"method","name":"full_name","children":[],"call":[]}," TopLevelEntry methods_matching":{"type":"method","name":"methods_matching","children":[],"call":[" recursively_find_methods_matching "]}," ClassEntry local_methods_matching":{"type":"method","name":"local_methods_matching","children":[],"call":["m name [] ","m name ","list find_all "," fail ","is_class_method inspect ","@class_methods + "]}," ClassEntry all_method_names":{"type":"method","name":"all_method_names","children":[],"call":["res << ","m full_name ","@instance_methods each ","@class_methods map "]}," ClassEntry full_name":{"type":"method","name":"full_name","children":[],"call":["res << ","res empty? ","@in_class full_name ","@in_class full_name  << ","@in_class full_name  empty? "]}," ClassEntry recursively_find_methods_matching":{"type":"method","name":"recursively_find_methods_matching","children":[],"call":["res concat ","c recursively_find_methods_matching ","@inferior_classes each "," local_methods_matching "," local_methods_matching  concat "]}," ClassEntry methods_matching":{"type":"method","name":"methods_matching","children":[],"call":[" local_methods_matching "]}," ClassEntry contained_class_named":{"type":"method","name":"contained_class_named","children":[],"call":["c name == ","c name ","@inferior_classes find "]}," ClassEntry classes_and_modules":{"type":"method","name":"classes_and_modules","children":[],"call":[]}," ClassEntry contained_modules_matching":{"type":"method","name":"contained_modules_matching","children":[],"call":["c name [] ","c name ","@inferior_classes find_all "]}," ClassEntry load_from":{"type":"method","name":"load_from","children":[],"call":["inf_class load_from ","@inferior_classes << ","ClassEntry  new ","inf_class add_path ","c name == ","c name ","@inferior_classes find ","File  directory? ","File  join ","list << ","MethodEntry  new ","RiWriter  external_to_internal ","2 == ","name =~ ","Dir  foreach ","RDoc RI ClassEntry  new ","RDoc RI MethodEntry  new ","RDoc RI Writer  external_to_internal ","File  exist? ","ClassEntry  new  load_from ","RDoc RI ClassEntry  new  load_from ","ClassEntry  new  add_path ","RDoc RI ClassEntry  new  add_path ","inf_class add_File  join  "]}," ClassEntry add_path":{"type":"method","name":"add_path","children":[],"call":["@path_names << "]}," ClassEntry initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RDoc RDoc document":{"type":"method","name":"document","children":[],"call":["@stats print "," puts ","@options quiet ","Dir  chdir "," update_output_dir ","gen generate ","Diagram  new draw ","Diagram  new ","@options diagram ","@options op_dir ","@options all_one_file ","Dir  pwd ","gen_class for "," RDoc Generator  const_get ","gen class_name "," require ","gen file_name ","$stderr puts ","gen key upcase ","gen key ","@options generator ","file_info empty? "," parse_files ","Time  now "," setup_output_dir ","@options force_update ","@options parse ","Options  new ","TopLevel  reset ","@gen generate ","@gen class_name ","@gen file_name ","@gen key upcase ","@gen key ","@options title= ","@stats ! ","generator for ","generator name sub ","generator name "," class current= "," class ","@generator generate ","gen_klass for ","gen_klass name sub ","gen_klass name ","Options  new  quiet ","gen_class for  gen_class for erate ","@options generator  @options generator erate ","Options  new  diagram ","Options  new  op_dir ","Options  new  all_one_file ","Dir  Dir  pwd  ","gen_class for _class for ","@options generator _class for "," RDoc Generator  const_get  for ","gen_class for  class_name ","@options generator  class_name ","gen_class for  file_name ","@options generator  file_name ","gen_class for  key upcase ","@options generator  key upcase ","gen_class for  key ","@options generator  key ","@options gen_class for erator ","@options @options generator erator ","Options  new  generator ","@options @options generator  "," parse_files  empty? ","Options  new  force_update ","Options  new  parse ","@gen_class for  gen_class for erate ","@@options generator  @options generator erate ","gen_class for  generate ","@options generator  generate ","generator for  generate ","@gen_class for  class_name ","@@options generator  class_name ","generator for  class_name ","@gen_class for  file_name ","@@options generator  file_name ","generator for  file_name ","@gen_class for  key upcase ","@@options generator  key upcase ","generator for  key upcase ","@gen_class for  key ","@@options generator  key ","generator for  key ","Options  new  title= ","gen_class for erator for ","@options generator erator for ","@options generator  for ","gen_class for erator name sub ","@options generator erator name sub ","@options generator  name sub ","gen_class for erator name ","@options generator erator name ","@options generator  name ","@gen_class for erator gen_class for erate ","@@options generator erator @options generator erate ","gen_class for erator generate ","@options generator erator generate ","generator for erator generate ","@@options generator  generate ","gen_klass for  generate ","gen_class for _klass for ","@options generator _klass for ","gen_class for _klass name sub ","@options generator _klass name sub ","gen_class for _klass name ","@options generator _klass name "]}," RDoc RDoc parse_files":{"type":"method","name":"parse_files","children":[],"call":["@stats num_files ","file_info << ","parser scan ","ParserFactory  parser_for ","TopLevel  new ","content force_encoding ","Encoding  find ","content [] ","File  read ","f read ","File  open ","RUBY_VERSION  >= ","$stderr printf ","options quiet ","file_list each ","(send\n  (lvar :file_list) :map) max + ","(send\n  (lvar :file_list) :map) max ","name length ","file_list map ","file_list empty? "," normalized_file_list ","files empty? ","options files "," RDoc Parser  for "," RDoc TopLevel  new "," Encoding  find ","@stats add_file ","Stats  new ","options verbosity ","options exclude ","@stats done_adding ","thread join ","workers each ","jobs << ","workers size times ","workers size ","workers << ","file_info_lock synchronize "," read_file_contents ","jobs pop ","Thread  new "," number_of_threads times "," number_of_threads ","@stats begin_adding ","file_list size ","Thread  abort_on_exception= ","Mutex  new ","SizedQueue  new "," number_of_threads * ","@options threads times ","@options threads ","@options threads * ","@stats num_options files  ","Stats  new  num_files ","ParserFactory  parser_for  scan "," RDoc Parser  for  scan ","ParserFactory  ParserFactory  parser_for _for ","ParserFactory   RDoc Parser  for _for ","content force_Encoding  find oding ","content force_ Encoding  find oding ","File  read  force_encoding "," read_file_contents  force_encoding ","File  read  [] "," read_file_contents  [] "," normalized_file_list  each ","(send\n  (lvar : normalized_file_list ) :map) max + ","(send\n  (lvar : normalized_file_list ) :map) max "," normalized_file_list  map "," normalized_file_list  empty? "," normalized_ normalized_file_list  ","options files  empty? ","options options files  ","Stats  new  add_file ","Stats  new  done_adding ","SizedQueue  new  << ","Mutex  new  synchronize "," read_file_File  read s "," read_file_ read_file_contents s ","SizedQueue  new  pop ","Stats  new  begin_adding "," normalized_file_list  size "]}," RDoc RDoc list_files_in_directory":{"type":"method","name":"list_files_in_directory","children":[],"call":[" normalized_file_list ","options exclude ","Dir  glob ","File  join "]}," RDoc RDoc normalized_file_list":{"type":"method","name":"normalized_file_list","children":[],"call":[" raise ","file_list concat "," list_files_in_directory "," parse_dot_doc_file ","File  file? ","File  join ","rel_file_name == ","file_list << ","rel_file_name sub ","ParserFactory  can_parse ","stat mtime < ","stat mtime ","stat ftype ","File  stat ","exclude_pattern =~ ","relative_files each "," RDoc Parser  can_parse "," parse_File  join _file ","File  stat  mtime < ","File  stat  mtime ","stat fstat ftype  ","File  stat  ftype ","File  File  stat  "]}," RDoc RDoc parse_dot_doc_file":{"type":"method","name":"parse_dot_doc_file","children":[],"call":["result concat "," normalized_file_list ","Dir  glob ","File  join ","patterns split each ","patterns split ","File  read gsub ","File  read ","File  read gsub  split each ","File  read gsub  split "]}," RDoc RDoc output_flag_file":{"type":"method","name":"output_flag_file","children":[],"call":["File  join "]}," RDoc RDoc update_output_dir":{"type":"method","name":"update_output_dir","children":[],"call":["f puts ","time rfc2822 ","File  open "," output_flag_file "]}," RDoc RDoc setup_output_dir":{"type":"method","name":"setup_output_dir","children":[],"call":["FileUtils  mkdir_p ","Time  parse "," error ","(str \"\\nDirectory \") + + + + ","(str \"\\nDirectory \") + + + ","(str \"\\nDirectory \") + + ","(str \"\\nDirectory \") + ","File  read ","File  directory? ","File  exist? "," output_flag_file "," output_ output_flag_file  "]}," RDoc RDoc error":{"type":"method","name":"error","children":[],"call":[" raise "]}," RDoc RDoc initialize":{"type":"method","name":"initialize","children":[],"call":["Stats  new "]}," RDoc ParserFactory parser_for":{"type":"method","name":"parser_for","children":[],"call":[]}," RDoc ParserFactory alias_extension":{"type":"method","name":"alias_extension","children":[],"call":[]}," RDoc ParserFactory can_parse":{"type":"method","name":"can_parse","children":[],"call":[]}," RDoc ParserFactory parse_files_matching":{"type":"method","name":"parse_files_matching","children":[],"call":["@@parsers unshift ","Parsers  new "]}," SimpleParser remove_private_comments":{"type":"method","name":"remove_private_comments","children":[],"call":["comment gsub sub ","comment gsub "]}," SimpleParser scan":{"type":"method","name":"scan","children":[],"call":["@top_level comment= "," remove_private_comments "]}," SimpleParser initialize":{"type":"method","name":"initialize","children":[],"call":[" warn ","preprocess handle ","RDoc Markup PreProcess  new ","options rdoc_include ","RDoc Markup PreProcess  new  handle "]}," RubyParser parse_symbol_in_arg":{"type":"method","name":"parse_symbol_in_arg","children":[],"call":[" warn ","tk inspect "," eval ","@read [] ","tk text sub ","tk text "," get_tk "," get_tk  inspect "," get_tk  text sub "," get_tk  text "," get_ get_tk  "]}," RubyParser parse_symbol_arg":{"type":"method","name":"parse_symbol_arg","children":[],"call":["args size >= ","args size ","args push "," parse_symbol_in_arg "," skip_tkspace_comment "," unget_tk ","tk1 kind_of? "," get_tk "," skip_tkspace "," loop "," warn ","tk2 inspect "," skip_ parse_symbol_in_arg space_comment "," skip_ get_tk space_comment "," unget_ parse_symbol_in_arg  "," unget_ get_tk  "," parse_symbol_in_arg 1 kind_of? "," get_tk 1 kind_of? "," get_tk  kind_of? "," parse_symbol_in_arg  kind_of? "," get_ parse_symbol_in_arg  "," get_ get_tk  "," skip_ parse_symbol_in_arg space "," skip_ get_tk space "," parse_symbol_in_arg 2 inspect "," get_tk 2 inspect "," get_tk  inspect "]}," RubyParser skip_tkspace_comment":{"type":"method","name":"skip_tkspace_comment","children":[],"call":[" get_tk "," peek_tk kind_of? "," peek_tk "," skip_tkspace "," loop "]}," RubyParser parse_attr_accessor":{"type":"method","name":"parse_attr_accessor","children":[],"call":["context add_attribute ","RDoc Attr  new "," get_tkread ","@options extra_accessor_flags [] ","tk name ","@options extra_accessor_flags ","tmp document_self "," read_documentation_modifiers ","RDoc CodeObject  new "," parse_symbol_arg ","context add_RDoc Attr  new ribute "," get_tk get_tkread  ","RDoc CodeObject  new  document_self ","  get_tkread _documentation_modifiers "]}," RubyParser parse_visibility":{"type":"method","name":"parse_visibility","children":[],"call":["container set_visibility_for "," parse_symbol_arg ","container ongoing_visibility= "," peek_tk "," skip_tkspace_comment "," raise ","tk name ","single == "]}," RubyParser parse_attr":{"type":"method","name":"parse_attr","children":[],"call":[" warn ","context add_attribute ","att document_self "," read_documentation_modifiers ","RDoc Attr  new "," get_tkread "," unget_tk "," get_bool ","tk kind_of? "," get_tk "," skip_tkspace ","args [] ","args size > ","args size "," parse_symbol_arg ","context add_RDoc Attr  new ribute ","RDoc Attr  new  document_self "," get_ get_tk read "," unget_ get_tk  "," get_tk  kind_of? "," get_ get_tk  "," skip_ get_tk space "," parse_symbol_arg  [] "," parse_symbol_arg  size > "," parse_symbol_arg  size "]}," RubyParser get_bool":{"type":"method","name":"get_bool","children":[],"call":[" unget_tk "," get_tk "," skip_tkspace "," unget_ get_tk  "," get_ get_tk  "," skip_ get_tk space "]}," RubyParser parse_include":{"type":"method","name":"parse_include","children":[],"call":[" get_tk "," peek_tk kind_of? "," peek_tk ","context add_include ","RDoc Include  new ","name empty? "," get_constant_with_optional_parens "," skip_tkspace_comment "," loop "," get_constant_with_optional_parens  empty? "]}," RubyParser parse_require":{"type":"method","name":"parse_require","children":[],"call":[" unget_tk ","context add_require ","RDoc Require  new "," warn ","tk text "," get_tk "," skip_tkspace_comment ","tk kind_of? "," unget_ get_tk  "," get_tk  text "," get_ get_tk  "," skip_ get_tk space_comment "," get_tk  kind_of? "]}," RubyParser parse_yield":{"type":"method","name":"parse_yield","children":[],"call":["method block_params= "," parse_yield_parameters ","@scanner instance_eval "," get_tkread ","method block_params nil? ","method block_params "]}," RubyParser parse_yield_parameters":{"type":"method","name":"parse_yield_parameters","children":[],"call":[" parse_method_or_yield_parameters "]}," RubyParser parse_alias":{"type":"method","name":"parse_alias","children":[],"call":["context add_alias ","al document_self "," read_documentation_modifiers ","RDoc Alias  new "," get_tkread "," get_symbol_or_name "," skip_tkspace "," get_tk "," peek_tk kind_of? "," peek_tk ","@scanner instance_eval ","context add_RDoc Alias  new ias ","RDoc Alias  new  document_self ","@scanner instance_evRDoc Alias  new  "]}," RubyParser get_symbol_or_name":{"type":"method","name":"get_symbol_or_name","children":[],"call":[" raise ","tk text ","tk name ","tk text sub "," get_tk "," get_tk  text "," get_tk  name "," get_tk  text sub "," get_ get_tk  "]}," RubyParser remove_private_comments":{"type":"method","name":"remove_private_comments","children":[],"call":["comment sub! ","comment gsub! "]}," RubyParser look_for_directives_in":{"type":"method","name":"look_for_directives_in","children":[],"call":[" remove_private_comments "," warn ","comment replace ","context set_current_section ","@options title= ","@options main_page= "," throw ","context force_documentation= ","context start_doc ","context stop_doc ","preprocess handle ","RDoc Markup PreProcess  new ","@options rdoc_include ","RDoc Markup PreProcess  new  handle "]}," RubyParser read_documentation_modifiers":{"type":"method","name":"read_documentation_modifiers","children":[],"call":["context params= ","dir [] ","context block_params= ","context params sub! ","context params ","context params nil? ","context force_documentation= ","context document_self= ","context document_children= ","dir [] downcase == ","dir [] downcase ","context dont_rename_initialize= "," read_directive "," read_directive  [] "," read_directive  [] downcase == "," read_directive  [] downcase "," read_ read_directive ective "]}," RubyParser read_directive":{"type":"method","name":"read_directive","children":[],"call":[" unget_tk ","allowed include? ","1 downcase ","tk text =~ ","tk text ","tk kind_of? "," puts ","tk text inspect "," get_tk "," unget_ get_tk  "," get_tk  text =~ "," get_tk  text "," get_tk  kind_of? "," get_tk  text inspect "," get_ get_tk  "]}," RubyParser get_constant_with_optional_parens":{"type":"method","name":"get_constant_with_optional_parens","children":[],"call":["tk kind_of? "," get_tk "," skip_tkspace ","nest > "," get_constant ","(lvasgn :tk\n  (send nil :peek_tk)) kind_of? "," peek_tk "," get_tk  kind_of? "," peek_tk  kind_of? "," get_ get_tk  "," get_ peek_tk  "," skip_ get_tk space "," skip_ peek_tk space ","(lvasgn : get_tk \n  (send nil :peek_ get_tk )) kind_of? ","(lvasgn : peek_tk \n  (send nil :peek_ peek_tk )) kind_of? "," peek_ get_tk  "," peek_ peek_tk  "]}," RubyParser get_constant":{"type":"method","name":"get_constant","children":[],"call":[" unget_tk "," get_tk ","tk text ","tk kind_of? "," skip_tkspace "," unget_ get_tk  "," get_ get_tk  "," get_tk  text "," get_tk  kind_of? "," skip_ get_tk space "]}," RubyParser parse_call_parameters":{"type":"method","name":"parse_call_parameters","children":[],"call":["res == "," get_tkread tr strip "," get_tkread tr "," get_tkread "," get_tk "," unget_tk ","@scanner continue ","nest <= ","@scanner lex_state == ","@scanner lex_state ","end_token == "," puts ","(str \"Call param: \") + "," loop "," get_tkread tr strip  == "," get_ get_tk read tr strip "," get_ get_tk read tr "," get_ get_tk read "," get_ get_tk  "," unget_ get_tk  "]}," RubyParser get_class_specification":{"type":"method","name":"get_class_specification","children":[],"call":[" parse_call_parameters "," unget_tk "," get_tk "," get_tkread "," skip_tkspace ","tk text ","tk kind_of? "," unget_ get_tk  "," get_ get_tk  "," get_ get_tk read "," skip_ get_tk space "," get_tk  text "," get_tk  kind_of? "]}," RubyParser skip_optional_do_after_expression":{"type":"method","name":"skip_optional_do_after_expression","children":[],"call":[" get_tk "," peek_tk kind_of? "," peek_tk "," skip_tkspace ","@scanner continue ","nest zero? ","@scanner lex_state == ","@scanner lex_state ","end_token == "," puts ","tk text inspect ","tk text "," loop ","@scanner instance_eval "," get_ get_tk  "," peek_ get_tk  kind_of? "," peek_ get_tk  "," skip_ get_tk space "," get_tk  text inspect "," get_tk  text "]}," RubyParser skip_for_variable":{"type":"method","name":"skip_for_variable","children":[],"call":[" unget_tk ","tk kind_of? "," get_tk "," skip_tkspace "," unget_ get_tk  "," get_tk  kind_of? "," get_ get_tk  "," skip_ get_tk space "]}," RubyParser parse_method_or_yield_parameters":{"type":"method","name":"parse_method_or_yield_parameters","children":[],"call":["res == "," get_tkread tr strip "," get_tkread tr "," get_tkread "," get_tk "," read_documentation_modifiers "," unget_tk ","method block_params nil? ","method block_params ","@scanner continue ","nest <= ","@scanner lex_state == ","@scanner lex_state ","end_token == ","nest zero? "," puts ","Param: %p, %s %s %s % ","tk text "," loop "," skip_tkspace "," get_tkread tr strip  == "," get_ get_tk read tr strip "," get_ get_tk read tr "," get_ get_tk read "," get_ get_tk  "," unget_ get_tk  "," get_tk  text "," skip_ get_tk space "]}," RubyParser parse_method_parameters":{"type":"method","name":"parse_method_parameters","children":[],"call":[" read_documentation_modifiers "," skip_tkspace ","method block_params nil? ","method block_params ","method params= ","method params ","( + + ","( + ","res [] == ","res [] "," parse_method_or_yield_parameters ","( + +  [] == "," parse_method_or_yield_parameters  [] == ","( + +  [] "," parse_method_or_yield_parameters  [] "]}," RubyParser skip_method":{"type":"method","name":"skip_method","children":[],"call":[" parse_statements "," parse_method_parameters ","RDoc AnyMethod  new "," parse_RDoc AnyMethod  new od_parameters "]}," RubyParser parse_method":{"type":"method","name":"parse_method","children":[],"call":["meth comment= ","meth call_seq= ","seq gsub! ","comment sub! "," remove_token_listener "," parse_statements ","meth visibility= ","meth name= ","meth singleton= ","meth dont_rename_initialize ","meth singleton ! ","meth singleton ","name == ","container document_self= ","container add_method ","meth document_self "," parse_method_parameters ","@scanner instance_eval "," add_token_listener ","meth add_tokens ","TkCOMMENT  new ","@top_level file_absolute_name ","indent set_text ","  * ","TkSPACE  new ","meth start_collecting_tokens ","single == ","RDoc AnyMethod  new "," get_tkread ","name_t name "," unget_tk ","back_tk reverse_each "," skip_method ","prev_container add_module ","prev_container add_class ","obj superclass name ","obj superclass ","type == "," warn ","(const nil :Class) include? ! ","(const nil :Class) include? ","obj class ","obj class == ","state const_get ","name_t name split inject ","name_t name split ","container ! ","container find_module_named ","name_t2 name "," get_tk "," skip_tkspace ","dot kind_of? "," add_token "," start_collecting_tokens ","tk char_no ","tk line_no ","@stats num_methods "," progress ","RDoc AnyMethod  new  comment= ","RDoc AnyMethod  new  call_seq= ","RDoc AnyMethod  new  visibility= ","RDoc AnyMethod  new  name= ","meth name_t name = ","meth name_t2 name = ","RDoc AnyMethod  new  singleton= ","RDoc AnyMethod  new  dont_rename_initialize ","meth dont_rename_t name _initialize ","meth dont_rename_t2 name _initialize ","RDoc AnyMethod  new  singleton ! ","RDoc AnyMethod  new  singleton ","name_t name  == ","name_t2 name  == ","prev_container add_module  document_self= ","prev_container add_class  document_self= ","container find_module_named  document_self= ","container add_RDoc AnyMethod  new od ","prev_container add_module  add_method ","prev_container add_class  add_method ","container find_module_named  add_method ","RDoc AnyMethod  new  document_self "," parse_RDoc AnyMethod  new od_parameters ","RDoc AnyMethod  new  add_tokens ","@top_level file_absolute_name_t name  ","@top_level file_absolute_name_t2 name  ","TkSPACE  new  set_text ","RDoc AnyMethod  new  start_collecting_tokens ","name_t name _t name_t name  ","name_t2 name _t name_t2 name  "," get_tk  name "," skip_tkspace  reverse_each "," skip_RDoc AnyMethod  new od ","prev_prev_container add_module  add_module ","prev_prev_container add_class  add_module ","prev_container find_module_named  add_module ","prev_prev_container add_module  add_class ","prev_prev_container add_class  add_class ","prev_container find_module_named  add_class ","obj superclass name_t name  ","obj superclass name_t2 name  ","name_t name _t name_t name  split inject ","name_t2 name _t name_t2 name  split inject "," get_tk  name split inject ","name_t name _t name_t name  split ","name_t2 name _t name_t2 name  split "," get_tk  name split ","prev_container add_module  ! ","prev_container add_class  ! ","container find_module_named  ! ","container find_module_name_t name d ","container find_module_name_t2 name d ","prev_container add_module  find_module_named ","prev_container add_class  find_module_named ","container find_module_named  find_module_named ","name_t name _t2 name_t name  ","name_t2 name _t2 name_t2 name  "," get_tk 2 name "," get_tk  kind_of? ","tk tk line_no  ","@stats num_RDoc AnyMethod  new ods "]}," RubyParser parse_constant":{"type":"method","name":"parse_constant","children":[],"call":["container add_constant ","con document_self "," read_documentation_modifiers ","RDoc Constant  new ","res == "," get_tkread tr strip "," get_tkread tr "," get_tkread "," get_tk "," unget_tk ","@scanner continue ! ","@scanner continue ","nest <= ","@scanner lex_state == ","@scanner lex_state "," puts ","Param: %p, %s %s %s % ","tk text "," loop ","tk kind_of? ","eq_tk kind_of? "," skip_tkspace ","tk name ","RDoc Constant  new tainer add_RDoc Constant  new stant ","RDoc Constant  new  document_self "," get_tkread tr strip  == "," get_ get_tk read tr strip "," get_ get_tk read tr "," get_ get_tk read "," get_ get_tk  "," unget_ get_tk  ","@scanner RDoc Constant  new tinue ! ","@scanner RDoc Constant  new tinue "," get_tk  text "," get_tk  kind_of? ","eq_ get_tk  kind_of? "," skip_ get_tk space "," get_tk  name ","tk tk name  "]}," RubyParser get_class_or_module":{"type":"method","name":"get_class_or_module","children":[],"call":[" skip_tkspace "," get_tk ","prev_container add_module ","name_t name ","container ! ","container find_module_named "," peek_tk kind_of? "," peek_tk ","name_t kind_of? ","prev_prev_container add_module  add_module ","prev_container find_module_named  add_module "," get_tk  name ","prev_container add_module  ! ","container find_module_named  ! ","prev_container add_module  find_module_named ","container find_module_named  find_module_named "," get_tk  kind_of? "]}," RubyParser parse_module":{"type":"method","name":"parse_module","children":[],"call":["mod comment= "," parse_statements "," read_documentation_modifiers ","mod record_location ","container add_module ","name_t name "," get_class_or_module ","@stats num_modules "," progress ","container add_module  comment= "," read_documentation_container add_module ifiers ","container add_module  record_location ","container add_container add_module ule ","name_t name _t name_t name  "," get_class_or_container add_module ule ","@stats num_container add_module ules "]}," RubyParser parse_class":{"type":"method","name":"parse_class","children":[],"call":[" warn ","name_t text inspect ","name_t text ","name_t class "," parse_statements "," read_documentation_modifiers ","RDoc NormalClass  new ","RDoc TopLevel  find_class_named ","container name "," get_class_specification ","cls comment= ","cls record_location ","container add_class ","single == ","superclass empty? "," skip_tkspace "," get_tk "," peek_tk kind_of? "," peek_tk ","name_t name "," get_class_or_module ","@stats num_classes "," progress "," get_class_specification _t text inspect ","name_t name _t text inspect "," get_class_specification _t text ","name_t name _t text "," get_class_specification _t class ","name_t name _t class ","RDoc TopLevel  find_class_ get_class_specification d ","RDoc TopLevel  find_class_name_t name d ","container  get_class_specification  ","container name_t name  ","container add_class  comment= ","container add_class  record_location "," get_class_specification  empty? "," get_class_specification _t  get_class_specification  ","name_t name _t name_t name  "]}," RubyParser parse_statements":{"type":"method","name":"parse_statements","children":[],"call":[" skip_tkspace "," get_tkread "," peek_tk == "," peek_tk ","container ongoing_visibility= "," read_documentation_modifiers ","nest == "," puts ","current_method name ","tk line_no ","container name "," parse_include "," parse_require ","tk name "," parse_alias ","container document_self "," parse_attr_accessor ","@options extra_accessors "," parse_attr "," parse_visibility ","current_method nil? ","(str \"Found \") + ","tk class "," skip_optional_do_after_expression "," skip_for_variable "," parse_yield "," warn "," parse_constant "," parse_method "," parse_module ","container document_children "," parse_class "," unget_tk ","container done_documenting "," look_for_directives_in ","comment empty? "," get_tk ","comment << << ","comment << ","tk text ","tk kind_of? ","container visibility "," skip_ get_tk space "," get_ get_tk read "," peek_ get_tk  == "," peek_ get_tk  "," get_tk  line_no "," get_tk  name "," get_tk  class "," unget_ get_tk  "," get_ get_tk  "," get_tk  text "," get_tk  kind_of? "]}," RubyParser parse_toplevel_statements":{"type":"method","name":"parse_toplevel_statements","children":[],"call":[" parse_statements ","container comment= ","comment empty? "," look_for_directives_in "," collect_first_comment ","container  collect_first_comment = "," collect_first_comment  empty? "," collect_first_ collect_first_comment  "]}," RubyParser collect_first_comment":{"type":"method","name":"collect_first_comment","children":[],"call":[" unget_tk "," get_tk "," skip_tkspace ","tk kind_of? ","res << << ","res << ","tk text ","tk text [] == ","tk text [] "," unget_ get_tk  "," get_ get_tk  "," skip_ get_tk space "," get_tk  kind_of? "," get_tk  text "," get_tk  text [] == "," get_tk  text [] "]}," RubyParser peek_read":{"type":"method","name":"peek_read","children":[],"call":["@read join "]}," RubyParser get_tkread":{"type":"method","name":"get_tkread","children":[],"call":["@read join ","@@read join  join "]}," RubyParser skip_tkspace":{"type":"method","name":"skip_tkspace","children":[],"call":[" unget_tk ","tokens push ","tk kind_of? ","(lvasgn :tk\n  (send nil :get_tk)) kind_of? "," get_tk "," unget_ get_tk  "," get_tk  kind_of? ","(lvasgn : get_tk \n  (send nil :get_ get_tk )) kind_of? "," get_ get_tk  "]}," RubyParser unget_tk":{"type":"method","name":"unget_tk","children":[],"call":["obj pop_token ","@token_listeners each ","@unget_read unshift ","@read pop ","@tokens unshift "]}," RubyParser peek_tk":{"type":"method","name":"peek_tk","children":[],"call":[" unget_tk "," get_tk "," unget_ get_tk  "," get_ get_tk  "]}," RubyParser get_tk":{"type":"method","name":"get_tk","children":[],"call":["obj add_token ","@token_listeners each "," warn ","obj pop_token "," Token set_text ",": + ","tk1 text "," Token ","tk1 name ","tk1 respond_to? ","tk1 kind_of? "," get_tk "," set_token_position ","tk char_no ","tk line_no ","tk kind_of? "," puts ","tk inspect ","@tokens shift ","@read push ","@unget_read shift ","@scanner get_read ","@scanner token ","@tokens empty? "," Token set_text 1 text ","@tokens shift 1 text ","@scanner token 1 text "," get_tk  text "," Token set_text 1 name ","@tokens shift 1 name ","@scanner token 1 name "," get_tk  name "," Token set_text 1 respond_to? ","@tokens shift 1 respond_to? ","@scanner token 1 respond_to? "," get_tk  respond_to? "," Token set_text 1 kind_of? ","@tokens shift 1 kind_of? ","@scanner token 1 kind_of? "," get_tk  kind_of? "," get_ Token set_text  "," get_@tokens shift  "," get_@scanner token  "," Token set_text  char_no ","@tokens shift  char_no ","@scanner token  char_no "," Token set_text  line_no ","@tokens shift  line_no ","@scanner token  line_no "," Token set_text  kind_of? ","@tokens shift  kind_of? ","@scanner token  kind_of? "," Token set_text  inspect ","@tokens shift  inspect ","@scanner token  inspect "]}," RubyParser remove_token_listener":{"type":"method","name":"remove_token_listener","children":[],"call":["@token_listeners delete "]}," RubyParser add_token_listener":{"type":"method","name":"add_token_listener","children":[],"call":["@token_listeners << "]}," RubyParser progress":{"type":"method","name":"progress","children":[],"call":["@progress flush ","@progress print ","@options quiet "]}," RubyParser error":{"type":"method","name":"error","children":[],"call":[" exit ","$stderr puts "," make_message "]}," RubyParser warn":{"type":"method","name":"warn","children":[],"call":["$stderr puts "," make_message ","@options quiet "]}," RubyParser make_message":{"type":"method","name":"make_message","children":[],"call":["prefix + ","prefix << ","@scanner char_no ","@scanner line_no ","\n + + ","\n + ","\n + +  + ","\n + +  << "]}," RubyParser scan":{"type":"method","name":"scan","children":[],"call":[" raise ","e set_backtrace ","e backtrace [] ","e backtrace ","$stderr puts ","(str \"RDoc failure in \") + ","@scanner char_no ","@scanner line_no "," parse_toplevel_statements "," catch "]}," RubyParser initialize":{"type":"method","name":"initialize","children":[],"call":["options quiet ","@scanner exception_on_syntax_error= ","RubyLex  new ","RubyLex  new  exception_on_syntax_error= "]}," RubyLex read_escape":{"type":"method","name":"read_escape","children":[],"call":["res << "," read_escape ","(lvasgn :ch\n  (send nil :getc)) == "," getc "," ungetc ","(lvasgn :ch\n  (send nil :getc)) != ","ch == ","2 times ","3 times ","escape << << ","escape << ","ch != ","(lvasgn : getc \n  (send nil :getc)) == ","(lvasgn : getc \n  (send nil :getc)) != "," getc  == "," getc  != "]}," RubyLex identify_comment":{"type":"method","name":"identify_comment","children":[],"call":[" Token set_text "," Token ","comment << "," ungetc ","ch == "," getc "," getc  == "]}," RubyLex skip_inner_expression":{"type":"method","name":"skip_inner_expression","children":[],"call":["ch == ","nest zero? ","res << "," getc "," getc  == "]}," RubyLex identify_string":{"type":"method","name":"identify_string","children":[],"call":["(lvar :subtype) set_text "," Token ","Ltype2Token  [] ","DLtype2Token  [] ","str << "," getc "," peek =~ "," peek ","@ltype == "," read_escape ","ch == "," ungetc ","str << << "," skip_inner_expression ","@ltype != ","opener == ","nest == ","@quoted == ","PERCENT_PAREN  [] == ","PERCENT_PAREN  [] ","PERCENT_PAREN  values include? ","PERCENT_PAREN  values ","@ltype dup ","PERCENT_PAREN_REV  [] ","ltype dup ","ltype == ","(str \"'\") include? ","nest <= ","PERCENT_LTYPE  key ","(str \"\\\"\") include? ","str concat ","@after_question ! ","EXPR_BEG == "," peek_match? ! "," peek_match? "," peek == ","type nil? ","@ltype dup  << ","ltype dup  << "," getc  == ","@ltype dup  << << ","ltype dup  << << ","(@ltype dup  \"'\") include? ","(ltype dup  \"'\") include? ","(@ltype dup  \"\\\"\") include? ","(ltype dup  \"\\\"\") include? ","@ltype dup  concat ","ltype dup  concat "," peek_mat getc ? ! "," peek_mat getc ? "]}," RubyLex identify_number":{"type":"method","name":"identify_number","children":[],"call":[" Token set_text "," Token "," ungetc ","str << "," getc "," peek =~ "," peek "," peek !~ ","ch !~ "," peek == ","start == ","start dup ","num []= "," raise ","num << ","ch == ","match =~ ","non_digit != ","start dup  << "," getc  !~ "," getc  == "," getc  dup ","mat getc  =~ "]}," RubyLex identify_quotation":{"type":"method","name":"identify_quotation","children":[],"call":[" identify_string ","PERCENT_PAREN  [] "," fail ","ch =~ "," getc ","PERCENT_LTYPE  [] "," raise ","ch inspect "," Token ","type =~ "," getc  =~ "," getc  inspect "]}," RubyLex identify_here_document":{"type":"method","name":"identify_here_document","children":[],"call":[" Token set_text ","str dump "," Token ","Ltype2Token  [] ","@reader divert_read_from ","str << << ","str << ","l chomp ","l == ","l strip! ","l chomp! "," gets ","ch == ","reserve << "," getc "," ungetc ","quoted concat ","c =~ ","ch dup ","c != ","reserve pop ","@here_readed concat ","doc << ","(if\n  (lvar :indent)\n  (send\n    (lvar :l) :strip)\n  (lvar :l)) == ","l strip ","l sub ","reserve push "," raise ","(if\n  (lvar :indent)\n  (send\n    (lvar :l) :strip)\n  (send\n    (lvar :l) :chomp)) == ","reserve join =~ ","reserve join ","@heredoc_queue << ","start_token concat "," gets  chomp ","l sub  chomp ","l  getc omp ","l reserve pop omp ","l  getc homp "," gets  == ","l sub  == "," gets  strip! ","l sub  strip! "," gets  chomp! ","l sub  chomp! ","l  getc omp! ","l reserve pop omp! ","l  getc homp! "," getc  == ","reserve pop  == "," getc h == "," get getc  "," unget getc  ","quoted  getc on getc at ","ch dup  concat "," getc  =~ "," getc  dup ","reserve pop  dup "," getc h dup "," getc  != ","@here_readed  getc on getc at ","do getc  << ","(if\n  ( gets var :indent)\n  (send\n    ( gets var : gets ) :strip)\n  ( gets var : gets )) == ","(if\n  (l sub var :indent)\n  (send\n    (l sub var :l sub ) :strip)\n  (l sub var :l sub )) == "," gets  strip ","l sub  strip "," gets  sub ","l sub  sub ","(if\n  ( gets var :indent)\n  (send\n    ( gets var : gets ) :strip)\n  (send\n    ( gets var : gets ) :chomp)) == ","(if\n  (l sub var :indent)\n  (send\n    (l sub var :l sub ) :strip)\n  (send\n    (l sub var :l sub ) :chomp)) == ","(if\n  (lvar :indent)\n  (send\n    (lvar :l) :strip)\n  (send\n    (lvar :l) : getc omp)) == ","(if\n  (lvar :indent)\n  (send\n    (lvar :l) :strip)\n  (send\n    (lvar :l) :reserve pop omp)) == ","(if\n  (lvar :indent)\n  (send\n    (lvar :l) :strip)\n  (send\n    (lvar :l) : getc homp)) == ","@heredo getc _queue << ","start_token  getc on getc at "]}," RubyLex identify_identifier":{"type":"method","name":"identify_identifier","children":[],"call":[" Token set_text "," Token ","token [] =~ ","token [] ","token size - ","token size ","@lex_state == ","token concat "," getc "," peek == "," peek ","trans [] ","DEINDENT_CLAUSE  include? ","ENINDENT_CLAUSE  include? ","@lex_state != ","TkSymbol2Token  [] ","TkReading2Token  [] "," print ","RubyLex  debug? ","ch == "," ungetc ","(lvasgn :ch\n  (send nil :getc)) =~ "," peek =~ ","RDoc RubyLex  debug? ","@indent_stack pop ","@indent_stack push ","(const nil :TkFOR) include? ! ","(const nil :TkFOR) include? ","@indent_stack last ","token == "," peek_match? "," peek != "," eval ","c == "," peek_match? ! ","token_c ancestors include? ","token_c ancestors ","trans []  == ","token  getc on getc at "," get getc  ","DEINDENT_CLAUSE  in getc lude? ","ENINDENT_CLAUSE  in getc lude? ","trans []  != "," getc  == "," getc h == "," unget getc  ","(lvasgn : getc \n  (send nil :getc)) =~ ","(lvasgn : getc h\n  (send nil :get getc )) =~ ","RDo getc  RubyLex  debug? ","@indent_sta getc k pop ","@indent_sta getc k push ","( getc onst nil :TkFOR) in getc lude? ! ","( getc onst nil :TkFOR) in getc lude? ","@indent_sta getc k last "," peek_mat getc ? "," peek_mat getc h? "," peek_mat getc ? ! "," peek_mat getc h? ! ","TkSymbol2Token  []  ancestors include? ","token_ getc  an getc estors in getc lude? ","TkSymbol2Token  []  ancestors ","token_ getc  an getc estors "]}," RubyLex identify_gvar":{"type":"method","name":"identify_gvar","children":[],"call":["tk set_text "," Token "," ungetc "," identify_identifier ","str << ","(lvasgn :ch\n  (send nil :getc)) =~ "," getc ","str << << ","ref << ","$ + ","$- + ","(lvasgn : getc \n  (send nil :getc)) =~ "]}," RubyLex lex_int2":{"type":"method","name":"lex_int2","children":[],"call":[" p ","RubyLex  debug? "," printf ","io inspect "," identify_identifier "," peek =~ "," peek "," identify_number ","@OP def_rule "," throw ","@prev_char_no == "," proc "," Token set_text "," Token "," ungetc "," identify_gvar "," identify_quotation "," peek !~ ","@lex_state == "," getc "," peek == "," getc == ","t set_text ","@lex_state != ","tk set_text ","@OP def_rules "," identify_string ","RDoc RubyLex  debug? "," peek_match? ","@indent_stack push ","@indent_stack pop ","(const nil :TkLPAREN) include? ","@indent_stack last ","@indent_stack empty? ","6 times ","EXPR_DOT == ","EXPR_FNAME == "," prin identify_identifier f "," prin identify_number f "," prin Token f ","io inspec identify_identifier  ","io inspec identify_number  ","io inspec Token  "," iden identify_identifier ify_iden identify_identifier ifier "," iden identify_number ify_iden identify_number ifier "," iden Token ify_iden Token ifier "," iden identify_identifier ify_number "," iden identify_number ify_number "," iden Token ify_number ","  identify_identifier hrow ","  identify_number hrow ","  Token hrow "," Token se identify_identifier _ identify_identifier ex identify_identifier  "," Token se identify_number _ identify_number ex identify_number  "," Token se Token _ Token ex Token  "," unge identify_identifier c "," unge identify_number c "," unge Token c "," iden identify_identifier ify_gvar "," iden identify_number ify_gvar "," iden Token ify_gvar "," iden identify_identifier ify_quo identify_identifier a identify_identifier ion "," iden identify_number ify_quo identify_number a identify_number ion "," iden Token ify_quo Token a Token ion ","@lex_s identify_identifier a identify_identifier e == ","@lex_s identify_number a identify_number e == ","@lex_s Token a Token e == "," ge identify_identifier c "," ge identify_number c "," ge Token c "," ge identify_identifier c == "," ge identify_number c == "," ge Token c == "," identify_identifier  se identify_identifier _ identify_identifier ex identify_identifier  "," identify_number  se identify_number _ identify_number ex identify_number  "," Token  se Token _ Token ex Token  ","@lex_s identify_identifier a identify_identifier e != ","@lex_s identify_number a identify_number e != ","@lex_s Token a Token e != "," identify_identifier k se identify_identifier _ identify_identifier ex identify_identifier  "," identify_number k se identify_number _ identify_number ex identify_number  "," Token k se Token _ Token ex Token  "," Token  set_text "," iden identify_identifier ify_s identify_identifier ring "," iden identify_number ify_s identify_number ring "," iden Token ify_s Token ring "," peek_ma identify_identifier ch? "," peek_ma identify_number ch? "," peek_ma Token ch? ","@inden identify_identifier _s identify_identifier ack push ","@inden identify_number _s identify_number ack push ","@inden Token _s Token ack push ","@inden identify_identifier _s identify_identifier ack pop ","@inden identify_number _s identify_number ack pop ","@inden Token _s Token ack pop ","(cons identify_identifier  nil :TkLPAREN) include? ","(cons identify_number  nil :TkLPAREN) include? ","(cons Token  nil :TkLPAREN) include? ","@inden identify_identifier _s identify_identifier ack las identify_identifier  ","@inden identify_number _s identify_number ack las identify_number  ","@inden Token _s Token ack las Token  ","@inden identify_identifier _s identify_identifier ack emp identify_identifier y? ","@inden identify_number _s identify_number ack emp identify_number y? ","@inden Token _s Token ack emp Token y? ","6  identify_identifier imes ","6  identify_number imes ","6  Token imes "]}," RubyLex lex_init":{"type":"method","name":"lex_init","children":[],"call":[" lex_int2 "," Token set_text "," Token ","@OP def_rules "," identify_number "," ungetc "," peek =~ "," peek ","@OP def_rule "," throw ","@lex_state != ","@lex_state == "," catch "," proc ","op =~ ","str << "," read_escape ","ch == ","ch !~ "," getc "," identify_string ","tk ! "," identify_here_document "," print ","RubyLex  debug? ","str sub! ","str =~ ","line << ","line =~ ","@prev_char_no == "," identify_comment ","chars << ","(lvasgn :ch\n  (send nil :getc)) =~ ","IRB SLex  new ","RDoc RubyLex  debug? ","ch [] ","ch ord ","ch respond_to? ","ch =~ ","c == ","@indent_stack pop ","(const nil :TkLPAREN) include? ","@indent_stack last ","@indent_stack empty? ","res << "," gets ","(lvasgn :ch\n  (send nil :getc)) == "," peek_equal? ","@here_readed clear "," getc == ","EXPR_DOT == ","EXPR_FNAME == ","ch << ","\\ == ","@heredoc_queue [] []= ","@heredoc_queue [] ","@heredoc_queue empty? ! ","@heredoc_queue empty? ","info [] ","@heredoc_queue shift ","info []= "," identify_here_document_body ","info [] nil? ","info [] ! ","IRB SLex  new  def_rules "," unget peek  ","IRB SLex  new  def_rule "," cat getc  ","  peek at peek h "," pro peek  "," read_es peek ape "," getc  == "," peek h == "," getc  !~ "," peek h !~ "," get peek  "," Token set_text  ! "," identify_here_document  ! "," Token  ! "," identify_here_do peek ument ","@prev_ getc ar_no == ","@prev_ peek har_no == "," identify_ peek omment "," getc ars << "," peek hars << ","(lvasgn : getc \n  (send nil :getc)) =~ ","(lvasgn : peek h\n  (send nil :get peek )) =~ ","RDo peek  RubyLex  debug? "," getc  [] "," peek h [] "," getc  ord "," peek h ord "," getc  respond_to? "," peek h respond_to? "," getc  =~ "," peek h =~ "," peek  == ","@indent_sta peek k pop ","( peek onst nil :TkLPAREN) in peek lude? ","@indent_sta peek k last ","@indent_sta peek k empty? ","(lvasgn : getc \n  (send nil :getc)) == ","(lvasgn : peek h\n  (send nil :get peek )) == ","@here_readed  peek lear "," get peek  == "," getc  << "," peek h << ","@heredo peek _queue [] []= ","@heredo peek _queue [] ","@heredo peek _queue empty? ! ","@heredo peek _queue empty? ","@heredoc_queue []  [] ","@heredo peek _queue shift ","@heredoc_queue []  []= "," identify_here_do peek ument_body ","@heredoc_queue []  [] nil? ","@heredoc_queue []  [] ! "]}," RubyLex token":{"type":"method","name":"token","children":[],"call":[" get_read ","TkError  new "," char_no "," line_no "," abort ","tk kind_of? ","@OP match "," set_token_position "," raise ","e message ","TkSPACE  === "," get_readed ","(send\n  (const nil :TkQUESTION) :===\n  (lvar :tk)) ! ","TkQUESTION  === "," Token ","tk text + ","tk1 text ","tk text ","tk1 class ","tk char_no ","tk line_no ","tk seek "," token "," peek =~ "," peek ","TkMINUS  === ","TkPLUS  === ",": + ","tk1 name ","tk1 respond_to? ","TkSYMBEG  === ","@space_seen ! ","TkError  new  kind_of? ","@OP match  kind_of? "," Token  kind_of? ","(send\n  (const nil :TkQUESTION) :===\n  (lvar :TkError  new )) ! ","(send\n  (const nil :TkQUESTION) :===\n  (lvar :@OP match )) ! ","(send\n  (const nil :TkQUESTION) :===\n  (lvar : Token )) ! ","TkError  new  text + ","@OP match  text + "," Token  text + ","TkError  new 1 text ","@OP match 1 text "," Token 1 text "," token  text ","TkError  new  text ","@OP match  text "," Token  text ","TkError  new 1 class ","@OP match 1 class "," Token 1 class "," token  class ","TkError  new  char_no ","@OP match  char_no "," Token  char_no ","TkError  new  line_no ","@OP match  line_no "," Token  line_no ","TkError  new  seek ","@OP match  seek "," Token  seek ","TkError  new 1 name ","@OP match 1 name "," Token 1 name "," token  name ","TkError  new 1 respond_to? ","@OP match 1 respond_to? "," Token 1 respond_to? "," token  respond_to? ","tk kind_of?  ! ","TkSPACE  ===  ! "]}," RubyLex lex":{"type":"method","name":"lex","children":[],"call":["tk nil? ","tk kind_of? ","line == "," get_read ","@continue ! ","(lvasgn :tk\n  (send nil :token)) kind_of? "," token ","TkEND_OF_SCRIPT  === ","TkNL  === "," get_readed "," token  nil? "," token  kind_of? "," get_read  == "," get_readed  == ","(lvasgn : token \n  (send nil :token)) kind_of? "]}," RubyLex peek":{"type":"method","name":"peek","children":[],"call":["@reader peek ","@rests [] "," buf_input ","@rests size <= ","@rests size "]}," RubyLex peek_equal?":{"type":"method","name":"peek_equal?","children":[],"call":["@reader peek_equal ","@rests [] == ","@rests [] ","chrs size "," buf_input ","@rests size >= ","@rests size ","str split ","str split  size "]}," RubyLex ungetc":{"type":"method","name":"ungetc","children":[],"call":["@reader ungetc ","@base_char_no + ","@readed size ","@readed size - ","@readed reverse index ","@readed reverse ","c == ","@rests unshift ","@here_readed pop ","@readed pop ","@here_readed empty? ","idx + ","@readed rindex ","@readed reverse index  + ","@readed rindex  + "]}," RubyLex gets":{"type":"method","name":"gets","children":[],"call":["c == ","l concat "," getc ","c nil? ","l == "," getc  == ","l  getc on getc at "," get getc  "," getc  nil? "]}," RubyLex getc_of_rests":{"type":"method","name":"getc_of_rests","children":[],"call":["@reader getc_already_read "," getc ","@rests empty? "]}," RubyLex getc":{"type":"method","name":"getc","children":[],"call":["@reader getc ","c == ","@readed push ","@here_readed push ","@rests shift ","@rests push "," buf_input ","@rests empty? ","\n freeze ","@current_readed push ","@reader get@rests shift  ","@rests shift  == ","@@rests shift urrent_readed push "]}," RubyLex get_read":{"type":"method","name":"get_read","children":[],"call":["@reader get_read "]}," RubyLex char_no":{"type":"method","name":"char_no","children":[],"call":["@reader column "]}," RubyLex line_no":{"type":"method","name":"line_no","children":[],"call":["@reader line_num "]}," RubyLex initialize":{"type":"method","name":"initialize","children":[],"call":["BufferedReader  new "," lex_init "," set_input ","StringIO  new ","content << ","content [] == ","content [] ","(send\n  (send\n    (lvar :content) :split\n    (regexp\n      (str \"\\\\n\")\n      (regopt))) :map) join ","  * ","tab_width * - ","$` length % ","$` length ","tab_width * ","$& length ","line gsub! ","content split map ","content split ","options tab_width ","(send\n  (send\n    (lvar :content) :split\n    (regexp\n      (str \"\\n\")\n      (regopt))) :map) join  << ","(send\n  (send\n    (lvar :content) :split\n    (regexp\n      (str \"\\n\")\n      (regopt))) :map) join  [] == ","(send\n  (send\n    (lvar :content) :split\n    (regexp\n      (str \"\\n\")\n      (regopt))) :map) join  [] ","(send\n  (send\n    (lvar :(send\n  (send\n    (lvar :content) :split\n    (regexp\n      (str \"\\n\")\n      (regopt))) :map) join ) :split\n    (regexp\n      (str \"\\\\n\")\n      (regopt))) :map) join ","options tab_width  * - ","options tab_width  * ","(send\n  (send\n    (lvar :content) :split\n    (regexp\n      (str \"\\n\")\n      (regopt))) :map) join  split map ","(send\n  (send\n    (lvar :content) :split\n    (regexp\n      (str \"\\n\")\n      (regopt))) :map) join  split ","options options tab_width  "]}," RubyLex debug?":{"type":"method","name":"debug?","children":[],"call":[]}," RubyLex BufferedReader divert_read_from":{"type":"method","name":"divert_read_from","children":[],"call":["@content size ","@content []= "]}," RubyLex BufferedReader peek_equal":{"type":"method","name":"peek_equal","children":[],"call":["@content [] == ","@content [] ","str length "]}," RubyLex BufferedReader peek":{"type":"method","name":"peek","children":[],"call":["@content [] ","pos >= ","@offset + ","@offset +  >= "]}," RubyLex BufferedReader get_read":{"type":"method","name":"get_read","children":[],"call":["@content [] "]}," RubyLex BufferedReader ungetc":{"type":"method","name":"ungetc","children":[],"call":["@content [] == ","@content [] "," raise ","@offset <= "]}," RubyLex BufferedReader getc_already_read":{"type":"method","name":"getc_already_read","children":[],"call":[" getc "]}," RubyLex BufferedReader getc":{"type":"method","name":"getc","children":[],"call":["ch == ","@offset - ","@hwm < ","@content [] ","@offset >= ","@content []  == "]}," RubyLex BufferedReader column":{"type":"method","name":"column","children":[],"call":["@offset - "]}," RubyLex BufferedReader initialize":{"type":"method","name":"initialize","children":[],"call":["@content size ","@content << ","@content [] == ","@content [] ","(send\n  (send\n    (lvar :content) :split\n    (regexp\n      (str \"\\\\n\")\n      (regopt))) :map) join ","  * ","tab_width * - ","$` length % ","$` length ","tab_width * ","$& length ","line gsub! ","content split map ","content split ","@options tab_width ","@(send\n  (send\n    (lvar :content) :split\n    (regexp\n      (str \"\\n\")\n      (regopt))) :map) join  size ","@(send\n  (send\n    (lvar :content) :split\n    (regexp\n      (str \"\\n\")\n      (regopt))) :map) join  << ","@(send\n  (send\n    (lvar :content) :split\n    (regexp\n      (str \"\\n\")\n      (regopt))) :map) join  [] == ","@(send\n  (send\n    (lvar :content) :split\n    (regexp\n      (str \"\\n\")\n      (regopt))) :map) join  [] ","(send\n  (send\n    (lvar :(send\n  (send\n    (lvar :content) :split\n    (regexp\n      (str \"\\n\")\n      (regopt))) :map) join ) :split\n    (regexp\n      (str \"\\\\n\")\n      (regopt))) :map) join ","@options tab_width  * - ","@options tab_width  * ","(send\n  (send\n    (lvar :content) :split\n    (regexp\n      (str \"\\n\")\n      (regopt))) :map) join  split map ","(send\n  (send\n    (lvar :content) :split\n    (regexp\n      (str \"\\n\")\n      (regopt))) :map) join  split ","@options @options tab_width  "]}," RubyToken def_token":{"type":"method","name":"def_token","children":[],"call":[]}," RubyToken Token":{"type":"method","name":"Token","children":[],"call":["token new ","(send\n  (send\n    (lvar :token) :ancestors) :&\n  (array\n    (const nil :TkId)\n    (const nil :TkVal)\n    (const nil :TkOPASGN)\n    (const nil :TkUnknownChar))) empty? ","token ancestors & ","token ancestors "," Token ","tk [] "," fail ","(lvasgn :tk\n  (send\n    (lvar :source) :[]\n    (lvar :token))) nil? ","source [] ","token kind_of? "," raise ","String  === ","tk set_text ","token instance_method arity == ","token instance_method arity ","token instance_method ","IRB  fail ","(lvasgn :tk\n  (send\n    (const nil :TkSymbol2Token) :[]\n    (lvar :token))) nil? ","TkSymbol2Token  [] ","tk name= ","tk kind_of? ","(lvasgn :tk\n  (send\n    (const nil :TkReading2Token) :[]\n    (lvar :token))) nil? ","TkReading2Token  [] ","TkToken2Reading  [] ","token new  [] "," Token  [] ","source []  [] ","TkSymbol2Token  []  [] ","TkReading2Token  []  [] ","(lvasgn :token new \n  (send\n    (lvar :source) :[]\n    (lvar :token))) nil? ","(lvasgn : Token \n  (send\n    (lvar :source) :[]\n    (lvar :token))) nil? ","(lvasgn :source [] \n  (send\n    (lvar :source) :[]\n    (lvar :token))) nil? ","(lvasgn :TkSymbol2Token  [] \n  (send\n    (lvar :source) :[]\n    (lvar :token))) nil? ","(lvasgn :TkReading2Token  [] \n  (send\n    (lvar :source) :[]\n    (lvar :token))) nil? ","token new  set_text "," Token  set_text ","source []  set_text ","TkSymbol2Token  []  set_text ","TkReading2Token  []  set_text ","(lvasgn :token new \n  (send\n    (const nil :TkSymbol2Token) :[]\n    (lvar :token))) nil? ","(lvasgn : Token \n  (send\n    (const nil :TkSymbol2Token) :[]\n    (lvar :token))) nil? ","(lvasgn :source [] \n  (send\n    (const nil :TkSymbol2Token) :[]\n    (lvar :token))) nil? ","(lvasgn :TkSymbol2Token  [] \n  (send\n    (const nil :TkSymbol2Token) :[]\n    (lvar :token))) nil? ","(lvasgn :TkReading2Token  [] \n  (send\n    (const nil :TkSymbol2Token) :[]\n    (lvar :token))) nil? ","token new  name= "," Token  name= ","source []  name= ","TkSymbol2Token  []  name= ","TkReading2Token  []  name= ","token new  kind_of? "," Token  kind_of? ","source []  kind_of? ","TkSymbol2Token  []  kind_of? ","TkReading2Token  []  kind_of? ","(lvasgn :token new \n  (send\n    (const nil :TkReading2Token) :[]\n    (lvar :token))) nil? ","(lvasgn : Token \n  (send\n    (const nil :TkReading2Token) :[]\n    (lvar :token))) nil? ","(lvasgn :source [] \n  (send\n    (const nil :TkReading2Token) :[]\n    (lvar :token))) nil? ","(lvasgn :TkSymbol2Token  [] \n  (send\n    (const nil :TkReading2Token) :[]\n    (lvar :token))) nil? ","(lvasgn :TkReading2Token  [] \n  (send\n    (const nil :TkReading2Token) :[]\n    (lvar :token))) nil? "]}," RubyToken set_token_position":{"type":"method","name":"set_token_position","children":[],"call":[]}," RubyToken TkUnknownChar initialize":{"type":"method","name":"initialize","children":[],"call":["char_no chr "," name "]}," RubyToken TkOPASGN initialize":{"type":"method","name":"initialize","children":[],"call":["TkReading2Token  [] ","op kind_of? ","Symbol  === ","TkReading2Token  [] [] ","TkReading2Token  []  kind_of? ","TkReading2Token  [] []  kind_of? "]}," RubyToken TkOp name":{"type":"method","name":"name","children":[],"call":[" class op_name "," class "]}," RubyToken TkVal initialize":{"type":"method","name":"initialize","children":[],"call":[" set_text "]}," RubyToken TkId initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RubyToken Token set_text":{"type":"method","name":"set_text","children":[],"call":[]}," RubyToken Token initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RDoc Fortran95parser definition_info":{"type":"method","name":"definition_info","children":[],"call":["defitem nodoc= ","defs [] collect! ","defs [] ","trailing_comment =~ ","defs << ","Fortran95Definition  new ","inivalue << ","arraysuffix << ","bracket > ","(lvar :dquote) ! ","(lvar :squote) ! ","trailing_comment << "," remove_header_marker ","comment << ","varname << ","(lvar :commentflag) ! ","(lvar :iniflag) ! ","bracket <= ","characters split each ","characters split ","defs size ","type << ","7 gsub gsub ","7 gsub ","line =~ ","defs [] comment << ","defs [] comment ","lines split each ","lines split ","Array  new ","Array  new  [] collect! ","Array  new  [] ","Array  new  << ","Array  new  size ","Array  new  [] comment << ","Array  new  [] comment "]}," RDoc Fortran95parser Fortran95Definition include_attr?":{"type":"method","name":"include_attr?","children":[],"call":["type strip chomp upcase == ","attr strip chomp upcase ","attr strip chomp ","attr strip ","type strip chomp upcase ","type strip chomp ","type strip ","@types split each ","@types split ","attr ! "]}," RDoc Fortran95parser Fortran95Definition to_s":{"type":"method","name":"to_s","children":[],"call":[" types "]}," RDoc Fortran95parser Fortran95Definition initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RDoc Fortran95parser remove_private_comments":{"type":"method","name":"remove_private_comments","children":[],"call":["body gsub! "]}," RDoc Fortran95parser remove_header_marker":{"type":"method","name":"remove_header_marker","children":[],"call":["text gsub "]}," RDoc Fortran95parser remove_empty_head_lines":{"type":"method","name":"remove_empty_head_lines","children":[],"call":["lines join ","lines delete_if ","text split ","text split  join ","text split  delete_if "]}," RDoc Fortran95parser remove_trailing_alias":{"type":"method","name":"remove_trailing_alias","children":[],"call":["comment_block join ","comment_block unshift ","(str \"^\\\\s?\") =~ ","checked ! ","lines each ","Array  new ","text split reverse ","text split ","text ! ","Array  new  join ","Array  new  unshift ","text split reverse  each "]}," RDoc Fortran95parser block_end?":{"type":"method","name":"block_end?","children":[],"call":["line =~ ","line ! "]}," RDoc Fortran95parser block_start?":{"type":"method","name":"block_start?","children":[],"call":["line =~ ","line ! "]}," RDoc Fortran95parser semicolon_to_linefeed":{"type":"method","name":"semicolon_to_linefeed","children":[],"call":["lines join ","words join ","(lvar :commentout) ! ","(lvar :dquote) ! ","(lvar :squote) ! ","words collect! ","line split ","lines collect! ","text split ","text split  join ","line split  join ","line split  collect! ","text split  collect! "]}," RDoc Fortran95parser comment_out?":{"type":"method","name":"comment_out?","children":[],"call":["(lvar :dquote) ! ","(lvar :squote) ! ","line split each ","line split "]}," RDoc Fortran95parser continuous_line?":{"type":"method","name":"continuous_line?","children":[],"call":[" comment_out? ","$~ pre_match "]}," RDoc Fortran95parser united_to_one_line":{"type":"method","name":"united_to_one_line","children":[],"call":["body << ","\n + ","words join ","brank_flag ! ","previous_continuing ! ","ignore ! ","(lvar :commentout) ! ","(lvar :dquote) ! ","(lvar :squote) ! ","brank_char + ","brank_char << ","words collect! ","words empty? ","line split ","lines each ","f90src split ","line split  join ","line split  collect! ","line split  empty? ","f90src split  each "]}," RDoc Fortran95parser check_public_methods":{"type":"method","name":"check_public_methods","children":[],"call":["alias_item [] add_method ","alias_item [] ","@stats num_methods "," progress ","new_meth name= "," initialize_public_method ","@options ignore_case ","method name upcase == ","alias_item [] upcase ","method name upcase ","method name ","method name == ","parent_is_used_module ! ","used_module upcase == ","parent upcase ","used_module upcase ","used_module == ","alias_item [] each ","@@public_methods each ","parent ! ","method ! "," initialize_public_method  name= "]}," RDoc Fortran95parser check_external_aliases":{"type":"method","name":"check_external_aliases","children":[],"call":["alias_item [] add_require ","Require  new ","alias_item [] ","alias_item [] include_requires? ! ","alias_item [] include_requires? ","@options ignore_case ","alias_item [] add_method ","@stats num_methods "," progress ","new_meth visibility= "," initialize_external_method ","subname upcase == ","alias_item [] upcase ","subname upcase ","subname == ","@@external_aliases each "," initialize_external_method  visibility= "]}," RDoc Fortran95parser find_visibility":{"type":"method","name":"find_visibility","children":[],"call":["info [] ","info [] == ","container name ","info [] upcase == ","subname upcase ","info [] upcase ","@options ignore_case ","visibility_info each ","visibility_info ! ","subname ! "]}," RDoc Fortran95parser set_visibility":{"type":"method","name":"set_visibility","children":[],"call":["container set_visibility_for ","info []= ","info [] ","info [] name == ","container name ","info [] name ","info [] upcase == ","subname upcase ","info [] upcase ","@options ignore_case ","info [] == ","visibility_info collect! "]}," RDoc Fortran95parser parse_visibility":{"type":"method","name":"parse_visibility","children":[],"call":["vis_info []= ","container name ","result each ","result << ","used_modules clone ","meth chomp strip ","meth chomp ","meth gsub! ","meth sub! ","methods split each ","methods split ","2 sub ","remaining_code split each ","remaining_code split ","code gsub ","used_modules << ","i name ","container includes each ","container includes ","2 sub  split each ","2 sub  split ","code gsub  split each ","code gsub  split "]}," RDoc Fortran95parser initialize_external_method":{"type":"method","name":"initialize_external_method","children":[],"call":["external_meth comment << ","external_meth comment ","external_meth add_token ","Token  new set_text ","Token  new ","external_meth start_collecting_tokens ","external_meth comment= "," remove_trailing_alias + "," remove_trailing_alias ","external_meth params= ","external_meth singleton= ","AnyMethod  new ","external_alias_header + + + ","external_alias_header + + ","external_alias_header + ","AnyMethod  new  comment << ","AnyMethod  new  comment ","AnyMethod  new  add_token ","AnyMethod  new  start_collecting_tokens ","AnyMethod  new  comment= ","AnyMethod  new  params= ","AnyMethod  new  singleton= "]}," RDoc Fortran95parser initialize_public_method":{"type":"method","name":"initialize_public_method","children":[],"call":["new_meth comment << ","method name ","parent strip chomp ","parent strip ","new_meth comment ","new_meth comment= "," remove_trailing_alias ","method comment clone ","method comment ","new_meth params= ","method params clone ","method params ","new_meth singleton= ","method singleton ","AnyMethod  new ","parent ! ","method ! ","AnyMethod  new  comment << ","AnyMethod  new  comment ","AnyMethod  new  comment= ","AnyMethod  new  params= ","AnyMethod  new  singleton= "]}," RDoc Fortran95parser progress":{"type":"method","name":"progress","children":[],"call":["@progress flush ","@progress print ","@options quiet "]}," RDoc Fortran95parser find_comments":{"type":"method","name":"find_comments","children":[],"call":["nice_lines shift ","nice_lines [] ","comment_block join split ","comment_block join ","comment_block push ","line sub ","comment_block unshift ","line =~ ","lines each ","Array  new ","lines reverse! ","text split ","comment_block join split  shift ","nice_text split  shift ","comment_block join split  [] ","nice_text split  [] ","Array  new  join split ","Array  new  join ","Array  new  push ","Array  new  unshift ","text split  each ","text split  reverse! "]}," RDoc Fortran95parser find_namelists":{"type":"method","name":"find_namelists","children":[],"call":["result << "," find_arguments ","(begin\n  (lvar :text)) + + ","(begin\n  (lvar :text)) + ","namelist  + ","lines split [] =~ ","lines split [] ","lines split ","nml_comment + ","\n\n=== NAMELIST <tt><b> + + ","\n\n=== NAMELIST <tt><b> + ","2 split "," find_comments ","$~ post_match ","$~ pre_match ","lines =~ ","before_contains ! ","text ! ","namelist  +  split [] =~ ","$~ post_match  split [] =~ ","namelist  +  split [] ","$~ post_match  split [] ","namelist  +  split ","$~ post_match  split "," find_comments  + ","namelist  +  =~ ","$~ post_match  =~ "]}," RDoc Fortran95parser find_arguments":{"type":"method","name":"find_arguments","children":[],"call":["params << ","defitem include_attr? ","args_rdocforms << ","comment chomp strip ","comment chomp ","comment << ","        + + ","        + ","defitem comment split each ","defitem comment split ","defitem comment ","defitem comment chomp strip empty? ! ","defitem comment chomp strip empty? ","defitem comment chomp strip ","defitem comment chomp ","defitem types chomp strip ","defitem types chomp ","defitem types ","defitem inivalue ","defitem arraysuffix ","defitem varname chomp strip ","defitem varname chomp ","defitem varname ","arg == ","defitem varname strip chomp ","defitem varname strip ","definitions each ","arg chomp! ","arg strip! ","args each "," definition_info "," definition_info  each "]}," RDoc Fortran95parser collect_first_comment":{"type":"method","name":"collect_first_comment","children":[],"call":["not_comment << ","comment << ","body split each ","body split "]}," RDoc Fortran95parser parse_subprogram":{"type":"method","name":"parse_subprogram","children":[],"call":["subprogram add_token ","Token  new set_text ","Token  new ","subprogram start_collecting_tokens ","subprogram comment << ","subprogram comment ","subprogram comment= "," find_comments "," find_namelists ","subprogram params= ","(  + + ","(  + "," find_arguments ","code sub ","params sub sub split ","params sub sub ","params sub ","prefix ! ","subprogram singleton= "," find_params sub sub split  "]}," RDoc Fortran95parser parse_program_or_module":{"type":"method","name":"parse_program_or_module","children":[],"call":["container add_method ","@stats num_methods "," progress ","new_meth name= ","pub_meth [] "," initialize_public_method ","modules name ","@options ignore_case ","meth name upcase == ","pub_meth [] upcase ","meth name upcase ","meth name ","meth name == ","modules method_list each ","modules method_list ","modules name upcase == ","used_mod upcase ","modules name upcase ","modules name == ","TopLevel  all_classes_and_modules each ","TopLevel  all_classes_and_modules ","pub_meth [] each ","pub_meth [] name == ","container name ","pub_meth [] name ","@@public_methods each ","method [] ","@@public_methods delete_if ","@@external_aliases << "," find_visibility "," check_public_methods ","container add_require ","Require  new ","container include_requires? ! ","container include_requires? "," set_visibility "," initialize_external_method ","indicated_method comment ","indicated_method params ","toplevel find_local_symbol ","TopLevel  all_files each ","TopLevel  all_files ","procedures_trailing =~ ","8 chomp strip ","8 chomp ","line =~ ","2 chomp strip ","2 chomp ","new_meth singleton= ","old_meth singleton ","old_meth clone token_stream [] text ","old_meth clone token_stream [] ","old_meth clone token_stream ","old_meth clone ","old_meth comment ","old_meth params ","@options show_all ","old_meth visibility == ","old_meth visibility ","old_meth ! ","container find_symbol ","generic_name ! ","generic_name == ","proc chomp! ","proc strip! ","procedures split each ","procedures split ","1 strip chomp ","1 strip ","interface_trailing =~ ","interface_code split each ","interface_code split ","remaining_lines join "," parse_program_or_module ","contains_lines join "," check_external_aliases ","subroutine_function comment ","subroutine_function params ","function add_token ","Token  new set_text ","Token  new ","function start_collecting_tokens ","function params << "," result( + + "," result( + ","function params ","function params sub! "," parse_subprogram ","AnyMethod  new ","function_params_org sub ","function_code << ","\n + + + ","\n + + ","\n + ","function_trailing + + ","function_code_org sub ","function_trailing + ","pre_comment join + + ","pre_comment join + ","pre_comment join ","block_searching_flag == ","subroutine_trailing + + ","subroutine_code sub ","subroutine_trailing + ","procedure_trailing =~ "," remove_empty_head_lines ","block_searching_lines join ","level_depth >= "," block_end? "," block_start? ","contains_lines << ","block_searching_lines << ","pre_comment << ","11 chomp strip ","11 chomp ","block_searching_flag ! ","remaining_lines collect! ","remaining_code split ","container set_visibility_for ","defitem varname ","defitem include_attr? ","const_or_var comment << ","const_or_var comment ","const_or_var comment= ","<b><em> + + ","<b><em> + "," find_arguments ","const_or_var params= ","const_or_var singleton= ","defitem nodoc ","const_var_defs each "," definition_info ","remaining_code << ","$~ post_match ","$~ pre_match ","interface_code << "," remove_empty_head_lines + ","remaining_code =~ ","container add_attribute ","Attr  new ","derived_types_comment empty? ! ","derived_types_comment empty? ","derived_types_comment << ","type visibility == ","type visibility ","type_visibility == ","type_visibility downcase! ","type_visibility gsub! ","type comment << ","type comment ","type comment= ","type params= ","type singleton= ","type_public_args_list << ","arg varname ","arg include_attr? ","type_args_info each ","type_code split each ","type_code split ","type_trailing + + "," find_comments ","type_code sub ","type_trailing + "," find_comments + + "," find_comments + ","type_trailing =~ ","3 chomp strip ","3 chomp ","indicated_mod parent file_relative_name ","indicated_mod parent ","toplevel find_symbol ","inc name ","container each_includes ","container add_include ","Include  new ","container include_includes? ! ","container include_includes? ","used_trailing =~ ","use_check_code << ","use_check_code =~ ","pub_meth []= ","local upcase == ","local upcase ","local == ","@@public_methods collect! ","used_elements split each ","used_elements split ","2 sub ","cascaded_modules_list join ","cascaded_modules_list empty? ! ","cascaded_modules_list empty? ","visibility_default == ","@@public_methods concat "," parse_visibility ","cascaded_modules_list << ","# + ","(send\n  (lvar :used_list) :=~\n  (regexp\n    (str \"\\\\,\\\\s*?only\\\\s*?:\")\n    (regopt :i))) ! ","used_list =~ ","before_contains_code gsub! ","before_contains_lines join ","before_contains_lines << ","level_depth < ","before_contains_flag ! ","remaining_lines each ","code split "," initialize_public_method  name= "," initialize_external_method  name= "," initialize_ initialize_external_method  ","toplevel find_local_symbol  comment ","toplevel find_local_symbol  params ","8 chomp strip edures_trailing =~ ","2 chomp strip edures_trailing =~ ","1 strip chomp _trailing =~ "," initialize_public_method  singleton= "," initialize_external_method  singleton= ","container find_symbol  singleton ","container find_symbol  clone token_stream [] text ","container find_symbol  clone token_stream [] ","container find_symbol  clone token_stream ","container find_symbol  clone ","container find_symbol  comment ","container find_symbol  params ","container find_symbol  visibility == ","container find_symbol  visibility ","container find_symbol  ! ","1 strip chomp  ! ","1 strip chomp  == ","8 chomp strip  chomp! ","2 chomp strip  chomp! ","8 chomp strip  strip! ","2 chomp strip  strip! ","8 chomp strip edures split each ","2 chomp strip edures split each ","1 strip chomp  split each ","8 chomp strip edures split ","2 chomp strip edures split ","1 strip chomp  split ","remaining_code split  join ","code split  join ","subroutine_AnyMethod  new  comment ","AnyMethod  new _function comment ","subroutine_AnyMethod  new  params ","AnyMethod  new _function params ","AnyMethod  new  add_token ","AnyMethod  new  start_collecting_tokens ","AnyMethod  new  params << ","AnyMethod  new  params ","AnyMethod  new  params sub! ","AnyMethod  new _params_org sub ","function_params_org sub _org sub ","AnyMethod  new _code << ","AnyMethod  new _trailing + + ","AnyMethod  new _code_org sub ","AnyMethod  new _trailing + ","AnyMethod  new _code sub ","8 chomp strip edure_trailing =~ ","2 chomp strip edure_trailing =~ ","remaining_code split  collect! ","code split  collect! ","remaining_lines join  split ","$~ pre_match  split ","AnyMethod  new  comment << ","AnyMethod  new  comment ","AnyMethod  new  comment= ","AnyMethod  new  params= ","AnyMethod  new  singleton= "," definition_info  each ","remaining_lines join  << ","$~ pre_match  << ","remaining_lines join  =~ ","$~ pre_match  =~ ","derived_AnyMethod  new s_comment empty? ! ","derived_AnyMethod  new s_comment empty? ","derived_AnyMethod  new s_comment << ","AnyMethod  new  visibility == ","AnyMethod  new  visibility ","AnyMethod  new _visibility == ","AnyMethod  new _visibility downcase! ","AnyMethod  new _visibility gsub! ","AnyMethod  new _public_args_list << ","AnyMethod  new _args_info each ","AnyMethod  new _code split each "," remove_empty_head_lines  split each ","AnyMethod  new _code split "," remove_empty_head_lines  split "," find_comments  + + "," remove_empty_head_lines  sub "," find_comments  + ","AnyMethod  new _trailing =~ "," find_comments  =~ ","toplevel find_symbol  parent file_relative_name ","toplevel find_symbol  parent ","2 sub  split each ","2 sub  split ","Attr  new _list join ","Attr  new _list empty? ! ","Attr  new _list empty? ","Attr  new _list << ","before_contains_lines join  gsub! ","remaining_code split  each ","code split  each "]}," RDoc Fortran95parser scan":{"type":"method","name":"scan","children":[],"call":[" parse_program_or_module ","remaining_lines join ","line == ","remaining_lines delete_if ","@top_level comment << ","@top_level comment ","(str \"\\n\\n= <i>Program</i> <tt>\") + ","program_trailing + + "," find_comments ","program_code sub ","program_trailing + "," find_comments + + "," find_comments + ","pre_comment join "," progress ","block_searching_flag == ","m add_require ","Require  new ","m include_requires? ! ","m include_requires? ","@options ignore_case ","m include_includes? ","toplevel each_classmodule ","toplevel add_require ","toplevel include_requires? ! ","toplevel include_requires? ","toplevel include_includes? ","TopLevel  all_files each ","TopLevel  all_files ","f9x_module comment= ","module_trailing + + ","module_code sub ","module_trailing + ","f9x_module record_location ","@top_level add_module ","@stats num_modules ","module_program_trailing =~ "," remove_empty_head_lines ","block_searching_lines join ","level_depth >= "," block_end? "," block_start? ","block_searching_lines << ","other_block_level_depth < ","pre_comment << ","line =~ "," block_start? ! ","other_block_searching_flag ! ","block_searching_flag ! ","remaining_lines collect! ","remaining_code split ","@top_level comment= "," collect_first_comment "," semicolon_to_linefeed "," united_to_one_line "," remove_private_comments ","remaining_code split  join ","remaining_code split  delete_if ","@top_level add_module  comment= ","@top_level add_module  record_location "," find_comments  =~ ","remaining_code split  collect! "," semicolon_to_linefeed  split "," united_to_one_line  split "," remove_private_comments  split "]}," RDoc Fortran95parser initialize":{"type":"method","name":"initialize","children":[],"call":["options quiet "]}," RDoc Token set_text":{"type":"method","name":"set_text","children":[],"call":[]}," RDoc Token initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RDoc C_Parser handle_ifdefs_in":{"type":"method","name":"handle_ifdefs_in","children":[],"call":["body gsub "]}," RDoc C_Parser handle_tab_width":{"type":"method","name":"handle_tab_width","children":[],"call":["(send\n  (send\n    (lvar :body) :split\n    (regexp\n      (str \"\\\\n\")\n      (regopt))) :map) join ","  * ","tab_width * - ","$` length % ","$` length ","tab_width * ","$& length ","line gsub! ","body split map ","body split ","@options tab_width ","@options tab_width  * - ","@options tab_width  * ","@options @options tab_width  "]}," RDoc C_Parser find_class":{"type":"method","name":"find_class","children":[],"call":["@classes [] ","@classes []= ","@top_level add_class ","@top_level add_module ","raw_name =~ "]}," RDoc C_Parser mangle_comment":{"type":"method","name":"mangle_comment","children":[],"call":["  * ","$& length ","comment gsub! ","comment sub! "]}," RDoc C_Parser do_includes":{"type":"method","name":"do_includes","children":[],"call":["cls add_include ","Include  new ","@known_classes [] ","@classes [] ","@body scan ","@classes []  add_include "]}," RDoc C_Parser find_override_comment":{"type":"method","name":"find_override_comment","children":[],"call":["@body =~ ","Regexp  escape "]}," RDoc C_Parser find_modifiers":{"type":"method","name":"find_modifiers","children":[],"call":["meth_obj call_seq= ","seq gsub! ","comment sub! ","meth_obj document_self= "]}," RDoc C_Parser find_body":{"type":"method","name":"find_body","children":[],"call":[" warn ","meth_obj comment= "," mangle_comment "," find_modifiers "," find_override_comment ","meth_obj name "," find_body "," mangle_comment + ","meth_obj comment ","meth_obj add_token ","RubyToken Token  new set_text ","RubyToken Token  new ","meth_obj start_collecting_tokens ","Regexp  new match ","Regexp  new ","Regexp  escape + ","Regexp  escape "," remove_private_comments ","meth_obj  find_override_comment = "," mangle_ find_override_comment  "," find_override_ find_override_comment  "," find_ find_override_comment  "," mangle_ find_override_comment  + ","meth_obj  find_override_comment  "," remove_private_ find_override_comment s "," Regexp  escape + move_private_comments "]}," RDoc C_Parser handle_method":{"type":"method","name":"handle_method","children":[],"call":["class_obj add_method ","meth_obj document_self "," find_body ","File  read ","@@known_bodies [] ","File  join ","meth_obj params= ","( + + ","( + ","(send\n  (begin\n    (irange\n      (int 1)\n      (lvar :p_count))) :map) join ","(irange\n  (int 1)\n  (lvar :p_count)) map ","p_count == ","p_count < "," Integer ","meth_obj singleton= ","(str \"singleton_method\") include? ","AnyMethod  new ","meth_name == "," find_class ","@known_classes [] ","@stats num_methods "," progress "," find_class  add_method ","AnyMethod  new  document_self ","AnyMethod  new  params= ","AnyMethod  new  singleton= "]}," RDoc C_Parser find_attr_comment":{"type":"method","name":"find_attr_comment","children":[],"call":["@body =~ "]}," RDoc C_Parser handle_attr":{"type":"method","name":"handle_attr","children":[],"call":["class_obj add_attribute ","Attr  new "," mangle_comment ","comment empty? "," find_attr_comment "," find_class ","@known_classes [] ","rw << ","class_obj add_Attr  new ribute "," find_class  add_attribute "," mangle_ mangle_comment  "," mangle_ find_attr_comment  "," mangle_comment  empty? "," find_attr_comment  empty? "," find_Attr  new r_comment "," find_attr_ mangle_comment  "," find_attr_ find_attr_comment  "]}," RDoc C_Parser find_const_comment":{"type":"method","name":"find_const_comment","children":[],"call":["@body =~ "]}," RDoc C_Parser handle_constants":{"type":"method","name":"handle_constants","children":[],"call":["class_obj add_constant ","Constant  new "," mangle_comment ","elements last lstrip ","elements last ","1 nil? ","new_definition sub! ","new_definition gsub! ","new_definition empty? ","elements [] join ","elements [] ","elements empty? ","elements nil? "," mangle_comment split ","type downcase == ","type downcase "," find_const_comment "," warn "," find_class ","@known_classes [] ","class_obj add_Constant  new stant "," find_class  add_constant "," mangle_ find_const_comment  "," mangle_comment split  last lstrip "," mangle_comment split  last ","elements [] join  sub! ","elements [] join  gsub! ","elements [] join  empty? "," mangle_comment split  [] join "," mangle_comment split  [] "," mangle_comment split  empty? "," mangle_comment split  nil? "," mangle_ find_const_comment  split "," find_Constant  new st_comment "," find_const_ find_const_comment  "]}," RDoc C_Parser do_aliases":{"type":"method","name":"do_aliases","children":[],"call":["class_obj add_alias ","Alias  new "," find_class ","@known_classes [] ","@stats num_methods ","@body scan "," find_class  add_alias "]}," RDoc C_Parser do_methods":{"type":"method","name":"do_methods","children":[],"call":[" handle_method ","@body scan "," handle_attr ","attr_writer to_i != ","attr_writer to_i ","attr_reader to_i != ","attr_reader to_i ","var_name == "]}," RDoc C_Parser do_constants":{"type":"method","name":"do_constants","children":[],"call":[" handle_constants ","var_name == ","var_name ! ","@body scan "]}," RDoc C_Parser do_classes":{"type":"method","name":"do_classes","children":[],"call":[" handle_class_module ","@body scan ","parent == "]}," RDoc C_Parser find_class_comment":{"type":"method","name":"find_class_comment","children":[],"call":["class_meth comment= "," mangle_comment ","comments [] ","index - ","chunk =~ ","comments []= ","@body split each_with_index ","@body split ","class_name split last ","class_name split ","@body =~ ","class_meth comments [] = "," mangle_comments []  ","comments [] s [] ","comments [] s []= ","class_name split last  split last ","class_name split last  split "]}," RDoc C_Parser handle_class_module":{"type":"method","name":"handle_class_module","children":[],"call":["@known_classes []= ","cm full_name ","@@enclosure_classes []= ","@classes []= "," find_class_comment ","cm record_location ","enclosure toplevel ","@stats num_modules ","enclosure add_module ","@stats num_classes ","enclosure add_class ","class_mod == "," warn ","(str \"Enclosing class/module '\") + ","@classes [] "," handle_class_module ","@known_classes [] ","@@enclosure_classes [] "," progress ","class_mod [] ","enclosure add_module  full_name ","enclosure add_class  full_name ","@@@classes [] _classes []= ","@@@known_classes [] _classes []= ","enclosure add_module  record_location ","enclosure add_class  record_location ","@classes []  toplevel ","@known_classes []  toplevel ","@classes []  add_module ","@known_classes []  add_module ","@classes []  add_class ","@known_classes []  add_class ","@@@classes [] _classes [] ","@@@known_classes [] _classes [] "]}," RDoc C_Parser remove_commented_out_lines":{"type":"method","name":"remove_commented_out_lines","children":[],"call":["@body gsub! "]}," RDoc C_Parser remove_private_comments":{"type":"method","name":"remove_private_comments","children":[],"call":["comment sub! ","comment gsub! "]}," RDoc C_Parser warn":{"type":"method","name":"warn","children":[],"call":["$stderr flush ","$stderr puts "]}," RDoc C_Parser progress":{"type":"method","name":"progress","children":[],"call":["@progress flush ","@progress print ","@options quiet "]}," RDoc C_Parser scan":{"type":"method","name":"scan","children":[],"call":[" do_aliases "," do_includes "," do_methods "," do_constants "," do_classes "," remove_commented_out_lines "]}," RDoc C_Parser initialize":{"type":"method","name":"initialize","children":[],"call":["@options quiet ","File  dirname ","Hash  new "," handle_tab_width "," handle_ifdefs_in ","KNOWN_CLASSES  dup "]}," Options check_files":{"type":"method","name":"check_files","children":[],"call":[" abort ","stat readable? ","File  stat ","@files each "," raise "," warn ","File  readable? ","File  exist? ","@files delete_if ","File  stat  readable? ","File  File  stat  "]}," Options check_diagram":{"type":"method","name":"check_diagram","children":[],"call":[" exit ","$stderr puts ","ver =~ ","2 to_i >= ","2 to_i ","1 to_i == ","1 to_i ","1 to_i > ","io read ","IO  popen ","RUBY_PLATFORM  =~ ","io read  =~ "]}," Options setup_generator":{"type":"method","name":"setup_generator","children":[],"call":["@generator_name == "," raise ","@generators [] ","@generator setup_options ","@generator respond_to? ","@generator_options << ","@generator_options include? ","OptionParser  new ","@generators [] _name == ","@generators [] s [] ","@generators []  setup_options ","@generators []  respond_to? ","@generators [] _options << ","@generators [] _options include? "]}," Options title=":{"type":"method","name":"title=","children":[],"call":[]}," Options parse":{"type":"method","name":"parse","children":[],"call":[" exit "," puts ","Regexp  new ","^( + + ","^( + ","(send\n  (lvar :accessors) :map) join ","Regexp  quote ","accessors map ","accessors empty? "," check_files ","@exclude join ","@exclude empty? ","@rdoc_include << ","@rdoc_include empty? ","argv dup ","opts parse! ","opt on ","opt separator "," setup_generator ","@rdoc_include concat ","dir strip ","value map ","image_formats join ","value downcase ","@generators keys "," raise ","RDoc ParserFactory  alias_extension ","value split ","@exclude << "," check_diagram ","@extra_accessor_flags []= ","accessors << ","accessor =~ ","value each ","opt banner= ","opt program_name ","opt summary_indent= ","  * ","opt version= ","opt program_name= ","File  basename ","OptionParser  new ","argv insert ","ENV  [] split ","ENV  [] ","opt release= ","(send\n  (send\n    (ivar :@generators) :keys) :map) sort ","@generators keys map "," warn ","$stderr puts "," quiet ! "," quiet ","RDoc Parser  alias_extension ","opt banner << ","regexp join ","opt banner ","parsers sort each ","parsers sort ","parsers [] << ","regexp source ","parsers [] ","parser name sub ","parser name ","RDoc Parser  parsers each ","RDoc Parser  parsers ","h []= ","Hash  new ","ignored join ","ignored empty? ","ignored << ","argv empty? ! ","argv empty? ","e args join ","e args "," template_dir_for ","invalid join ","invalid empty? ","option  << << << ","DEPRECATED  [] ","option  << << ","option  << ","deprecated each ","invalid << ","(str \"--format\") include? ","e args first ","deprecated << ","argv grep empty? ","argv grep ","opt help ","RDoc RDoc GENERATORS  each_key "," check_generator ","@encoding to_s ","Encoding  find ","e name ","Encoding  list map ","Encoding  list ","Object  const_defined? ","opt accept ","    %*1$2$s  %3$s\n % ","name_length -@ ","(send\n  (const nil :DEPRECATED) :sort_by) each ","DEPRECATED  sort_by ","(send\n  (send\n    (const nil :DEPRECATED) :keys) :sort_by) last length ","(send\n  (send\n    (const nil :DEPRECATED) :keys) :sort_by) last ","k length ","DEPRECATED  keys sort_by ","DEPRECATED  keys "," generator_descriptions "," write_options "," finish ","@static_path << ","value nil? ","markup_formats join ","RDoc Text MARKUP_FORMAT  keys sort ","RDoc Text MARKUP_FORMAT  keys ","File  exist? ","File  expand_path ","directories map ","d empty? ","directories split map ","directories split "," Pathname ","@encoding name ","paths map ","paths split map ","paths split ","File  directory? ","RDoc RI Paths  site_dir ","opt version ","@template_stylesheets << ","RDoc VISIBILITIES  + ","value <= ","option  + + + ","option  + + ","option  + ","@template_stylesheets concat ","Regexp  new  join ","Regexp  new  empty? ","Regexp  new  << ","opt ^( + + lease= ","^( + + gexp join ","^( + + gexp source ","igno^( + + d join ","igno^( + + d empty? ","igno^( + + d << ","  template_dir_for _for ","dep^( + + cated each ","dep^( + + cated << ","argv g^( + + p empty? ","argv g^( + + p ","Encoding  find  to_s ","(send\n  (send\n    (const nil :DEPRECATED) :keys) :sort_by) last length  -@ ","@static_File  expand_path  << ","RDoc Text MARKUP_FORMAT  keys sort  join ","File  expand_File  expand_path  ","di^( + + ctories map ","di^( + + ctories split map ","di^( + + ctories split ","Encoding  find  name ","File  expand_path s map ","File  expand_path s split map ","File  expand_path s split ","File  di^( + + ctory? ","File  File  expand_path ? "]}," Options initialize":{"type":"method","name":"initialize","children":[],"call":["@generators [] "," require ","Java java lang Runtime  getRuntime availableProcessors * ","Java java lang Runtime  getRuntime availableProcessors ","Java java lang Runtime  getRuntime ","Java  java lang ","Java  java ","RUBY_PLATFORM  == ","@encoding to_s ","Encoding  default_external ","Object  const_defined? "," init_ivars "," override ","@generators [] s [] ","Encoding  default_external  to_s "]}," Markup get_line_types":{"type":"method","name":"get_line_types","children":[],"call":["@lines line_types "]}," Markup content":{"type":"method","name":"content","children":[],"call":["@lines as_text "]}," Markup group_lines":{"type":"method","name":"group_lines","children":[],"call":["block normalize ","line level ","line param ","line type == ","line type ","block add ","block fragment_for ","group add_text ","line text ","line level == ","@lines next ","LineCollection  new ","@lines rewind ","LineCollection  new  normalize ","@lines next  level ","@lines next  param ","@lines next  type == ","@lines next  type ","LineCollection  new  add ","LineCollection  new  fragment_for ","block fragment_for  add_text ","@lines next  text ","@lines next  level == ","@@lines next s next ","@@lines next s rewind "]}," Markup handled_labeled_list":{"type":"method","name":"handled_labeled_list","children":[],"call":[" assign_types_to_lines ","level + ","text []= ","  * ","line stamp ","@lines delete ","line text= ","@lines unget ","text [] =~ ","text [] ","i >= ","text length ","text [] == ","text [] != ","line text ","@lines next ","text length <= "," raise "," inspect ","prefix chop! ","prefix [] ","prefix length - ","prefix length "," assign_types_to_@lines next s ","line text  []= ","@lines next  stamp ","@@lines next s delete ","line line text = ","@lines next  text= ","@@lines next s unget ","line text  [] =~ ","line text  [] ","line text  length ","line text  [] == ","line text  [] != ","line line text  ","@lines next  text ","@@lines next s next ","line text  length <= ","prefix []  chop! ","prefix []  [] ","prefix []  length - ","prefix []  length "]}," Markup assign_types_to_lines":{"type":"method","name":"assign_types_to_lines","children":[],"call":["line stamp ","line strip_leading ","margin > ","active_line [] == ","active_line [] ","margin + ","prefix_length > ","1 length ","active_line =~ "," handled_labeled_list ","prefix length ","LABEL_LIST_RE  =~ "," assign_types_to_lines ","level + ","text []= ","  * "," raise "," inspect ","SIMPLE_LIST_RE  =~ ","1 length - ","text [] ","@lines unget ","text [] != ","line text ","line blank? ","@lines next ","@lines next  stamp ","@lines next  strip_leading ","text []  [] == ","active_@lines next  [] == ","text []  [] ","active_@lines next  [] ","1 length  > ","prefix length  > ","text []  =~ ","active_@lines next  =~ "," assign_types_to_@lines next s ","line text  []= ","line text  [] ","@@lines next s unget ","line text  [] != ","line line text  ","@lines next  text ","@lines next  blank? ","@@lines next s next "]}," Markup convert":{"type":"method","name":"convert","children":[],"call":["group accept "," group_lines "," assign_types_to_lines ","@lines normalize ","@lines empty? ","Lines  new ","Line  new ","str split map ","str split ","document accept ","RDoc Markup Parser  parse "," group_lines  accept ","  group_lines _lines ","Lines  new  normalize ","Lines  new  empty? ","RDoc Markup Parser  parse  accept "]}," Markup add_special":{"type":"method","name":"add_special","children":[],"call":["@am add_special ","@attribute_manager add_special "]}," Markup add_html":{"type":"method","name":"add_html","children":[],"call":["@am add_html ","@attribute_manager add_html "]}," Markup add_word_pair":{"type":"method","name":"add_word_pair","children":[],"call":["@am add_word_pair ","@attribute_manager add_word_pair "]}," Markup initialize":{"type":"method","name":"initialize","children":[],"call":["RDoc Markup AttributeManager  new "]}," ToTest accept_rule":{"type":"method","name":"accept_rule","children":[],"call":["@res << ","fragment to_s ","- * ","rule weight "]}," ToTest accept_heading":{"type":"method","name":"accept_heading","children":[],"call":["@res << ","fragment to_s ","heading text ","= * ","heading level "]}," ToTest accept_blank_line":{"type":"method","name":"accept_blank_line","children":[],"call":["@res << ","fragment to_s "]}," ToTest accept_list_item":{"type":"method","name":"accept_list_item","children":[],"call":["@res << ","fragment to_s "]}," ToTest accept_list_end":{"type":"method","name":"accept_list_end","children":[],"call":["@res << ","fragment to_s ","@list pop "]}," ToTest accept_list_start":{"type":"method","name":"accept_list_start","children":[],"call":["@res << ","fragment to_s ","@list << ","list type "]}," ToTest accept_verbatim":{"type":"method","name":"accept_verbatim","children":[],"call":["@res << ","fragment to_s ","verbatim text ","verbatim text gsub "]}," ToTest accept_paragraph":{"type":"method","name":"accept_paragraph","children":[],"call":["@res << ","fragment to_s ","paragraph text "," convert_flow ","@am flow "]}," ToTest end_accepting":{"type":"method","name":"end_accepting","children":[],"call":[]}," ToTest start_accepting":{"type":"method","name":"start_accepting","children":[],"call":[]}," ToLaTeX list_end_for":{"type":"method","name":"list_end_for","children":[],"call":[" raise "]}," ToLaTeX list_item_start":{"type":"method","name":"list_item_start","children":[],"call":[" raise "," convert_flow + "," convert_flow ","am flow ","fragment param ","\\item[ + + ","\\item[ + ","fragment type "]}," ToLaTeX list_name":{"type":"method","name":"list_name","children":[],"call":["tags [] "," l + + "," l + "," l ","@prev_list_types []= "," raise ","@prev_list_types [] != ","@prev_list_types [] ","list_type inspect ","LIST_TYPE_TO_LATEX  [] "]}," ToLaTeX convert_heading":{"type":"method","name":"convert_heading","children":[],"call":["(lvar :level) + + ","(lvar :level) + "," convert_flow "]}," ToLaTeX convert_special":{"type":"method","name":"convert_special","children":[],"call":["special text "," raise ","special text= "," send "," respond_to? ","Attribute  each_name_of ","special type "]}," ToLaTeX convert_string":{"type":"method","name":"convert_string","children":[],"call":[" escape gsub gsub gsub gsub gsub gsub gsub gsub "," escape gsub gsub gsub gsub gsub gsub gsub "," escape gsub gsub gsub gsub gsub gsub "," escape gsub gsub gsub gsub gsub "," escape gsub gsub gsub gsub "," escape gsub gsub gsub "," escape gsub gsub "," escape gsub "," escape "]}," ToLaTeX convert_flow":{"type":"method","name":"convert_flow","children":[],"call":[" raise ","item inspect ","res << "," convert_special "," on_tags "," off_tags "," convert_string ","$stderr puts ","flow each "]}," ToLaTeX off_tags":{"type":"method","name":"off_tags","children":[],"call":["res << ","tag off ","attr_mask & != ","attr_mask & ","tag bit ","@attr_tags reverse_each ","attr_mask zero? ","item turn_off ","item turn_off  & != ","item turn_off  & ","item turn_off  zero? "]}," ToLaTeX on_tags":{"type":"method","name":"on_tags","children":[],"call":["res << ","tag on ","attr_mask & != ","attr_mask & ","tag bit ","@attr_tags each ","attr_mask zero? ","item turn_on ","item turn_on  & != ","item turn_on  & ","item turn_on  zero? "]}," ToLaTeX wrap":{"type":"method","name":"wrap","children":[],"call":["txt [] == ","txt [] ","sp < ","res << << ","res << ","txt [] != ","p < ","sp + ","p <= ","p > ","p >= ","sp + - ","txt length ","ssp +  < ","ssp + -  < ","sp +  < ","sp + -  < ","ssp +  + ","ssp + -  + ","sp +  <= ","sp + -  <= ","sp +  > ","sp + -  > ","sp +  >= ","sp + -  >= ","ssp +  + - ","ssp + -  + - "]}," ToLaTeX accept_heading":{"type":"method","name":"accept_heading","children":[],"call":["@res << "," convert_heading ","am flow ","fragment txt ","fragment head_level "]}," ToLaTeX accept_blank_line":{"type":"method","name":"accept_blank_line","children":[],"call":[]}," ToLaTeX accept_list_item":{"type":"method","name":"accept_list_item","children":[],"call":["@in_list_entry []= "," list_end_for ","fragment type ","@res << << ","@res << "," wrap "," convert_flow ","am flow ","fragment txt "," list_item_start ","@in_list_entry last "]}," ToLaTeX accept_list_end":{"type":"method","name":"accept_list_end","children":[],"call":["@res << << ","@res << "," list_name ","fragment type ","@in_list_entry pop "]}," ToLaTeX accept_list_start":{"type":"method","name":"accept_list_start","children":[],"call":["@in_list_entry push ","@res << << ","@res << "," list_name ","fragment type "]}," ToLaTeX accept_rule":{"type":"method","name":"accept_rule","children":[],"call":["@res << ","size > ","fragment param ","fragment param  > "]}," ToLaTeX accept_verbatim":{"type":"method","name":"accept_verbatim","children":[],"call":["@res << ","fragment txt sub ","fragment txt "]}," ToLaTeX accept_paragraph":{"type":"method","name":"accept_paragraph","children":[],"call":["@res << "," wrap "," convert_flow ","am flow ","fragment txt "]}," ToLaTeX end_accepting":{"type":"method","name":"end_accepting","children":[],"call":["@res tr tr tr tr ","@res tr tr tr ","@res tr tr ","@res tr "]}," ToLaTeX start_accepting":{"type":"method","name":"start_accepting","children":[],"call":[]}," ToLaTeX add_tag":{"type":"method","name":"add_tag","children":[],"call":["@attr_tags << ","InlineTag  new ","RDoc Markup Attribute  bitmap_for "]}," ToLaTeX escape":{"type":"method","name":"escape","children":[],"call":["$stderr print ","str sub gsub gsub gsub gsub gsub gsub gsub gsub ","str sub gsub gsub gsub gsub gsub gsub gsub ","str sub gsub gsub gsub gsub gsub gsub ","str sub gsub gsub gsub gsub gsub ","str sub gsub gsub gsub gsub ","str sub gsub gsub gsub ","str sub gsub gsub ","str sub gsub ","str sub ","$str sub gsub gsub gsub gsub gsub gsub gsub gsub tderr print ","str sub gsub gsub gsub gsub gsub gsub gsub gsub tr str sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub ","str sub gsub gsub gsub gsub gsub gsub gsub gsub tr str sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub ","str sub gsub gsub gsub gsub gsub gsub gsub gsub tr str sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub ","str sub gsub gsub gsub gsub gsub gsub gsub gsub tr str sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub ","str sub gsub gsub gsub gsub gsub gsub gsub gsub tr str sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub ","str sub gsub gsub gsub gsub gsub gsub gsub gsub tr str sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub ","str sub gsub gsub gsub gsub gsub gsub gsub gsub tr str sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub ","str sub gsub gsub gsub gsub gsub gsub gsub gsub tr str sub gsub gsub gsub gsub gsub gsub gsub gsub ub gstr sub gsub gsub gsub gsub gsub gsub gsub gsub ub ","str sub gsub gsub gsub gsub gsub gsub gsub gsub tr str sub gsub gsub gsub gsub gsub gsub gsub gsub ub "]}," ToLaTeX init_tags":{"type":"method","name":"init_tags","children":[],"call":["InlineTag  new "," l ","RDoc Markup Attribute  bitmap_for "]}," ToLaTeX initialize":{"type":"method","name":"initialize","children":[],"call":[" init_tags "]}," ToLaTeX l":{"type":"method","name":"l","children":[],"call":["RDoc Markup ToLaTeX  l "]}," ToHtmlCrossref handle_special_CROSSREF":{"type":"method","name":"handle_special_CROSSREF","children":[],"call":["@seen []= ","ref as_href ","ref document_self ","lookup =~ ","@context find_symbol ","name [] ","name [] == ","@seen [] ","@seen include? ","special text ","ref ! ","name =~ ","(begin\n  (const nil :CLASS_REGEXP_STR)) =~ ","lookup == ","type == ","RDoc Alias  === ","container find_ancestor_local_symbol ","RDoc TopLevel  === ","container find_local_symbol ","(str \"^([.#]|::)\") =~ ","@context find_symbol_module "," cross_reference ","@context find_symbol  as_h@context find_symbol  ","container find_ancestor_local_symbol  as_hcontainer find_ancestor_local_symbol  ","container find_local_symbol  as_hcontainer find_local_symbol  ","@context find_symbol  document_self ","container find_ancestor_local_symbol  document_self ","container find_local_symbol  document_self ","name []  =~ ","special text  [] ","name []  [] ","special text  [] == ","name []  [] == ","@context find_symbol  ! ","container find_ancestor_local_symbol  ! ","container find_local_symbol  ! ","special text  =~ ","name []  == ","@context find_symbol_module  find_ancestor_local_symbol ","@context find_symbol_module  find_local_symbol "," cross_@context find_symbol erence "," cross_container find_ancestor_local_symbol erence "," cross_container find_local_symbol erence "]}," ToHtmlCrossref initialize":{"type":"method","name":"initialize","children":[],"call":["@markup add_special "," raise ","from_path nil? ","RDoc CrossReference  new ","@options show_hash ","@options hyperlink_all ","@markup add_regexp_handling "]}," ToHtml list_end_for":{"type":"method","name":"list_end_for","children":[],"call":[" raise ","list_type inspect "]}," ToHtml list_item_start":{"type":"method","name":"list_item_start","children":[],"call":[" raise "," annotate + + + + "," annotate "," annotate + + + "," annotate + + "," convert_flow ","am flow ","fragment param "," annotate + ","fragment type ","list_type inspect ","@am flow ","list_item label "," to_html ","(send\n  (send nil :Array\n    (send\n      (lvar :list_item) :label)) :map) join << ","(send\n  (send nil :Array\n    (send\n      (lvar :list_item) :label)) :map) join "," Array map "," Array "]}," ToHtml html_list_name":{"type":"method","name":"html_list_name","children":[],"call":[" annotate ","tags [] "," raise ","list_type inspect ","LIST_TYPE_TO_HTML  [] ","LIST_TYPE_TO_HTML  []  [] "]}," ToHtml convert_heading":{"type":"method","name":"convert_heading","children":[],"call":[" annotate + + "," annotate "," annotate + "," convert_flow ","(send nil :annotate\n  (dstr\n    (str \"<h\")\n    (begin\n      (lvar :level))\n    (str \">\"))) join "]}," ToHtml convert_special":{"type":"method","name":"convert_special","children":[],"call":["special text "," raise ","special text= "," send "," respond_to? ","RDoc Markup Attribute  each_name_of ","special type "]}," ToHtml convert_string":{"type":"method","name":"convert_string","children":[],"call":["CGI  escapeHTML gsub gsub gsub gsub gsub gsub gsub gsub gsub gsub ","CGI  escapeHTML gsub gsub gsub gsub gsub gsub gsub gsub gsub ","CGI  escapeHTML gsub gsub gsub gsub gsub gsub gsub gsub ","CGI  escapeHTML gsub gsub gsub gsub gsub gsub gsub ","CGI  escapeHTML gsub gsub gsub gsub gsub gsub ","CGI  escapeHTML gsub gsub gsub gsub gsub ","CGI  escapeHTML gsub gsub gsub gsub ","CGI  escapeHTML gsub gsub gsub ","CGI  escapeHTML gsub gsub ","CGI  escapeHTML gsub ","CGI  escapeHTML "," convert_string_fancy "," convert_string_simple "," in_tt? "]}," ToHtml convert_flow":{"type":"method","name":"convert_flow","children":[],"call":[" raise ","item inspect ","res << "," convert_special "," on_tags "," off_tags "," convert_string ","flow each "]}," ToHtml off_tags":{"type":"method","name":"off_tags","children":[],"call":["res << "," annotate ","tag off ","attr_mask & != ","attr_mask & ","tag bit ","@attr_tags reverse_each ","attr_mask zero? ","item turn_off "," tt? ","item turn_off  & != ","item turn_off  & ","item turn_off  zero? "]}," ToHtml on_tags":{"type":"method","name":"on_tags","children":[],"call":["res << "," annotate ","tag on ","attr_mask & != ","attr_mask & ","tag bit ","@attr_tags each ","attr_mask zero? ","item turn_on "," tt? ","item turn_on  & != ","item turn_on  & ","item turn_on  zero? "]}," ToHtml wrap":{"type":"method","name":"wrap","children":[],"call":["txt [] == ","txt [] ","sp < ","res << << ","res << ","txt [] != ","p < ","sp + ","p <= ","p > ","p >= ","sp + - ","txt length ","res join ","res join strip ","ssp +  < ","ssp + -  < ","sp +  < ","sp + -  < ","ssp +  + ","ssp + -  + ","sp +  <= ","sp + -  <= ","sp +  > ","sp + -  > ","sp +  >= ","sp + -  >= ","ssp +  + - ","ssp + -  + - ","res join strisp +  ","res join strisp + -  "]}," ToHtml accept_heading":{"type":"method","name":"accept_heading","children":[],"call":["@res << "," convert_heading ","am flow ","fragment txt ","fragment head_level ","@am flow ","heading text ","heading level "," to_html ","(send\n  (ivar :@code_object) :aref) compact join ","(send\n  (ivar :@code_object) :aref) compact ","@code_object aref ","@code_object respond_to? ","heading aref ","(int 6) min ","heading label ","@options pipe ","@options output_decoration ","fragment head_(int 6) min  ","heading (int 6) min  ","heading (send\n  (ivar :@code_object) :aref) compact join  ","heading heading aref  ","heading heading label  "]}," ToHtml accept_blank_line":{"type":"method","name":"accept_blank_line","children":[],"call":[]}," ToHtml accept_list_item":{"type":"method","name":"accept_list_item","children":[],"call":["@in_list_entry []= "," list_end_for ","fragment type ","@res << << ","@res << "," wrap "," convert_flow ","am flow ","fragment txt "," list_item_start "," annotate ","@in_list_entry last "]}," ToHtml accept_list_end":{"type":"method","name":"accept_list_end","children":[],"call":["@res << << ","@res << "," html_list_name ","fragment type "," annotate ","@in_list_entry pop ","list type ","@list pop "]}," ToHtml accept_list_start":{"type":"method","name":"accept_list_start","children":[],"call":["@in_list_entry push ","@res << << ","@res << "," html_list_name ","fragment type ","list type ","@list << "]}," ToHtml accept_rule":{"type":"method","name":"accept_rule","children":[],"call":["@res << ","size > ","fragment param ","rule weight ","fragment param  > ","rule weight  > "]}," ToHtml accept_verbatim":{"type":"method","name":"accept_verbatim","children":[],"call":["@res << << ","@res << "," annotate ","CGI  escapeHTML ","fragment txt "," annotate + ","verbatim text ","verbatim text rstrip ","RDoc TokenStream  to_html ","RDoc RubyLex  tokenize ","RDoc RDoc  current options ","RDoc RDoc  current "," parseable? ","verbatim ruby? ","@options pipe ","result + ","\n == ","result [] ","RDoc RipperStateLex  parse ","RDoc Parser RipperStateLex  parse ","verbatim verbatim text rstrip  ","verbatim verbatim text rstrip  rstrip ","RDoc TokenStream  to_RDoc TokenStream  to_html  ","RDoc RDoc  current RDoc RDoc  current options  ","@RDoc RDoc  current options  pipe ","result +  + ","RDoc TokenStream  to_html  + ","result +  [] ","RDoc TokenStream  to_html  [] "]}," ToHtml accept_paragraph":{"type":"method","name":"accept_paragraph","children":[],"call":["@res << "," annotate + "," annotate "," wrap "," convert_flow ","am flow ","fragment txt ","@am flow ","paragraph text "," to_html ","text gsub ","paragraph paragraph text  ","paragraph text gsub  ","paragraph text  gsub ","text gsub  gsub "]}," ToHtml end_accepting":{"type":"method","name":"end_accepting","children":[],"call":["@res join "]}," ToHtml start_accepting":{"type":"method","name":"start_accepting","children":[],"call":[]}," ToHtml annotate":{"type":"method","name":"annotate","children":[],"call":[]}," ToHtml add_tag":{"type":"method","name":"add_tag","children":[],"call":["@attr_tags << ","InlineTag  new ","RDoc Markup Attribute  bitmap_for "]}," ToHtml init_tags":{"type":"method","name":"init_tags","children":[],"call":["InlineTag  new ","RDoc Markup Attribute  bitmap_for "," add_tag "]}," ToHtml handle_special_TIDYLINK":{"type":"method","name":"handle_special_TIDYLINK","children":[],"call":[" gen_url ","text =~ ","special text "," handle_RDOCLINK ","special text  =~ ","special special text  "]}," ToHtml handle_special_HYPERLINK":{"type":"method","name":"handle_special_HYPERLINK","children":[],"call":[" gen_url ","special text "," gen_special text  "]}," ToHtml gen_url":{"type":"method","name":"gen_url","children":[],"call":["text sub ","url =~ ","type == ","HTML  gen_url ","path [] == ","path [] "," class gen_relative_url "," class ","(str \"http\") include? "," parse_url ","2 tr ","url sub ","scheme != ","text sub  sub ","HTML  gen_url  =~ "," class gen_relative_url  =~ ","HTML  gen_HTML  gen_url  ","HTML  gen_ class gen_relative_url  "," class gen_relative_HTML  gen_url  "," class gen_relative_ class gen_relative_url  "," parse_HTML  gen_url  "," parse_ class gen_relative_url  ","HTML  gen_url  sub "," class gen_relative_url  sub "]}," ToHtml initialize":{"type":"method","name":"initialize","children":[],"call":[" init_tags ","@markup add_special ","RDoc Markup Attribute  bitmap_for "," add_special_TIDYLINK "," add_special_RDOCLINK "," add_regexp_handling_TIDYLINK "," add_regexp_handling_RDOCLINK ","@markup add_regexp_handling "," init_regexp_handlings "]}," Markup ToFlow convert_special":{"type":"method","name":"convert_special","children":[],"call":["special text "," raise ","special text= "," send "," respond_to? ","Attribute  each_name_of ","special type "]}," Markup ToFlow convert_string":{"type":"method","name":"convert_string","children":[],"call":["CGI  escapeHTML "]}," Markup ToFlow convert_flow":{"type":"method","name":"convert_flow","children":[],"call":[" raise ","item inspect ","res << "," convert_special "," on_tags "," off_tags "," convert_string ","flow each "]}," Markup ToFlow off_tags":{"type":"method","name":"off_tags","children":[],"call":["res << "," annotate ","tag off ","attr_mask & != ","attr_mask & ","tag bit ","@attr_tags reverse_each ","attr_mask zero? ","item turn_off ","item turn_off  & != ","item turn_off  & ","item turn_off  zero? "]}," Markup ToFlow on_tags":{"type":"method","name":"on_tags","children":[],"call":["res << "," annotate ","tag on ","attr_mask & != ","attr_mask & ","tag bit ","@attr_tags each ","attr_mask zero? ","item turn_on ","item turn_on  & != ","item turn_on  & ","item turn_on  zero? "]}," Markup ToFlow accept_heading":{"type":"method","name":"accept_heading","children":[],"call":["@res << ","Flow H  new "," convert_flow ","am flow ","fragment txt ","fragment head_level "]}," Markup ToFlow accept_blank_line":{"type":"method","name":"accept_blank_line","children":[],"call":[]}," Markup ToFlow accept_list_item":{"type":"method","name":"accept_list_item","children":[],"call":["@res << ","Flow LI  new "," convert_flow ","am flow ","fragment txt ","fragment param "]}," Markup ToFlow accept_list_end":{"type":"method","name":"accept_list_end","children":[],"call":["@list_stack pop "]}," Markup ToFlow accept_list_start":{"type":"method","name":"accept_list_start","children":[],"call":["@res << ","Flow LIST  new ","fragment type ","@list_stack push ","@Flow LIST  new _stack push "]}," Markup ToFlow accept_rule":{"type":"method","name":"accept_rule","children":[],"call":["@res << ","Flow RULE  new ","size > ","fragment param ","fragment param  > "]}," Markup ToFlow accept_verbatim":{"type":"method","name":"accept_verbatim","children":[],"call":["@res << ","Flow VERB  new "," convert_flow ","am flow ","fragment txt "]}," Markup ToFlow accept_paragraph":{"type":"method","name":"accept_paragraph","children":[],"call":["@res << ","Flow P  new "," convert_flow ","am flow ","fragment txt "]}," Markup ToFlow end_accepting":{"type":"method","name":"end_accepting","children":[],"call":[]}," Markup ToFlow start_accepting":{"type":"method","name":"start_accepting","children":[],"call":[]}," Markup ToFlow annotate":{"type":"method","name":"annotate","children":[],"call":[]}," Markup ToFlow add_tag":{"type":"method","name":"add_tag","children":[],"call":["@attr_tags << ","InlineTag  new ","RDoc Markup Attribute  bitmap_for "]}," Markup ToFlow init_tags":{"type":"method","name":"init_tags","children":[],"call":["InlineTag  new ","RDoc Markup Attribute  bitmap_for "]}," Markup ToFlow initialize":{"type":"method","name":"initialize","children":[],"call":[" init_tags "]}," Markup Flow LIST <<":{"type":"method","name":"<<","children":[],"call":["@contents << "]}," Markup Flow LIST initialize":{"type":"method","name":"initialize","children":[],"call":[]}," PreProcess find_include_file":{"type":"method","name":"find_include_file","children":[],"call":["stat readable? ","File  stat ","File  join ","to_search each ","(send\n  (const nil :File) :dirname\n  (ivar :@input_file_name)) concat ","File  dirname ","(send\n  (const nil :File) :dirname\n  (ivar :@input_file_name)) concat  each "]}," PreProcess include_file":{"type":"method","name":"include_file","children":[],"call":["$stderr puts ","content gsub ","content =~ ","f read ","File  open "," find_include_file ","File  read "," warn ","content sub lstrip ","content sub ","File  binread ","RDoc Encoding  read_file ","RDoc Encoding  remove_magic_comment ","File  read  gsub ","content sub lstrip  gsub ","File  binread  gsub ","RDoc Encoding  read_file  gsub ","RDoc Encoding  remove_magic_comment  gsub ","File  read  =~ ","content sub lstrip  =~ ","File  binread  =~ ","RDoc Encoding  read_file  =~ ","RDoc Encoding  remove_magic_comment  =~ ","File  read  sub lstrip ","content sub lstrip  sub lstrip ","File  binread  sub lstrip ","RDoc Encoding  read_file  sub lstrip ","RDoc Encoding  remove_magic_comment  sub lstrip ","File  read  sub ","content sub lstrip  sub ","File  binread  sub ","RDoc Encoding  read_file  sub ","RDoc Encoding  remove_magic_comment  sub "]}," PreProcess handle":{"type":"method","name":"handle","children":[],"call":[" include_file ","param split [] ","param split ","2 downcase ","text gsub! ","4 [] == ","4 [] ","3 empty? ","handler call ","RDoc Markup PreProcess  registered [] ","RDoc Markup PreProcess  registered ","RDoc Markup PreProcess  registered include? ","code_object metadata []= ","code_object metadata "," block_given? ","text encoding ","3 downcase ","2 empty? ","5 [] == ","5 [] ","4 empty? "," class post_processors each "," class post_processors "," class "," handle_directive ","1 strip ","comment format= ","5 downcase ","3 == ","text text ","RDoc Comment  === ","code_object temporary_section= ","code_object add_section ","RDoc Context  === ","comment text= ","text gsub ","text text  gsub! ","RDoc Markup PreProcess  registered []  call ","text text encoding  ","text text  encoding "," handle_2 downcase  "," handle_3 downcase  ","text text  text text  ","code_object temporary_code_object add_section = ","code_object add_code_object add_section  ","RDoc Context text   === ","comment text text = ","text text  gsub "]}," PreProcess initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Markup Lines line_types":{"type":"method","name":"line_types","children":[],"call":["l type ","@lines map "]}," Markup Lines as_text":{"type":"method","name":"as_text","children":[],"call":["(send\n  (ivar :@lines) :map) join ","l text ","@lines map "]}," Markup Lines normalize":{"type":"method","name":"normalize","children":[],"call":["line strip_leading ","@lines each ","margin > ","margin == ","(send\n  (ivar :@lines) :collect) min ","l leading_spaces ","@lines collect ","(send\n  (ivar :@lines) :collect) min  > ","(send\n  (ivar :@lines) :collect) min  == "]}," Markup Lines delete":{"type":"method","name":"delete","children":[],"call":["a_line deleted= "]}," Markup Lines unget":{"type":"method","name":"unget","children":[],"call":[]}," Markup Lines next":{"type":"method","name":"next","children":[],"call":["@nextline < ","@lines size ","@lines [] ","res deleted ","@lines []  deleted "]}," Markup Lines rewind":{"type":"method","name":"rewind","children":[],"call":[]}," Markup Lines each":{"type":"method","name":"each","children":[],"call":["line deleted ","@lines each "]}," Markup Lines empty?":{"type":"method","name":"empty?","children":[],"call":["@lines size zero? ","@lines size "]}," Markup Lines initialize":{"type":"method","name":"initialize","children":[],"call":[" rewind "]}," Markup Line to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Markup Line strip_leading":{"type":"method","name":"strip_leading","children":[],"call":["@text []= ","@text size > ","@text size "]}," Markup Line stamp":{"type":"method","name":"stamp","children":[],"call":[]}," Markup Line blank?":{"type":"method","name":"blank?","children":[],"call":["@text empty? "]}," Markup Line initialize":{"type":"method","name":"initialize","children":[],"call":["1 length ","@text =~ ","@text length > ","@text length ","@text sub! ","  * ","8 * - ","$` length % ","$` length ","8 * ","$& length ","@text gsub! ","text dup ","text dup  =~ ","text dup  length > ","text dup  length ","text dup  sub! ","text dup  gsub! "]}," Markup Special to_s":{"type":"method","name":"to_s","children":[],"call":[" text dump "," text ","RDoc Markup Attribute  as_string "," type "]}," Markup Special inspect":{"type":"method","name":"inspect","children":[],"call":["#<RDoc::Markup::Special:0x%x @type=%p, name=%p @text=%p> % "," text dump "," text ","RDoc Markup Attribute  as_string "," type "," object_id "]}," Markup Special ==":{"type":"method","name":"==","children":[],"call":[" type == ","o type "," type "," text == ","o text "," text "]}," Markup Special initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Markup AttrSpan []":{"type":"method","name":"[]","children":[],"call":["@attrs [] "]}," Markup AttrSpan set_attrs":{"type":"method","name":"set_attrs","children":[],"call":["@attrs [] ","start + "]}," Markup AttrSpan initialize":{"type":"method","name":"initialize","children":[],"call":["Array  new "]}," Markup AttrChanger to_s":{"type":"method","name":"to_s","children":[],"call":["Attribute  as_string "," turn_on "," turn_off "]}," Markup Attribute each_name_of":{"type":"method","name":"each_name_of","children":[],"call":[]}," Markup Attribute as_string":{"type":"method","name":"as_string","children":[],"call":[]}," Markup Attribute bitmap_for":{"type":"method","name":"bitmap_for","children":[],"call":[]}," Markup LineCollection tidy_blank_lines":{"type":"method","name":"tidy_blank_lines","children":[],"call":["@fragments compact! ","@fragments []= ","f kind_of? ","@fragments each_with_index ","@fragments [] ","i + ","ListEnd  === ","BlankLine  === ","(send\n  (send\n    (ivar :@fragments) :size) :-\n  (int 1)) times ","@fragments size - ","@fragments size "]}," Markup LineCollection add_list_breaks":{"type":"method","name":"add_list_breaks","children":[],"call":["@fragments << ","list_stack push ","list_stack pop ","ListStart  new ","fragment type ","fragment param ","l level ","ListEnd  new ","l type ","fragment type != ","list_stack last ","fragment type= ","start type ","res each ","list_stack last ist_stack push ","list_stack last ist_stack pop ","list_stack last  list_stack last evelist_stack last  ","list_stack last  type ","list_stack last ist_stack list_stack last ast ","ListStart  new  type ","list_stack pop  type "]}," Markup LineCollection add_list_start_and_ends":{"type":"method","name":"add_list_start_and_ends","children":[],"call":["res << ","ListEnd  new ","type_stack pop ","level downto ","fragment level ","level > ","type_stack push ","ListStart  new ","fragment param ","fragment type ","level < ","@fragments each ","type_stack pop _stack pop ","fragment type _stack pop ","fragment level  downto ","fragment fragment level  ","fragment level  > ","type_stack pop _stack push ","fragment type _stack push ","fragment type_stack pop  ","fragment fragment type  ","fragment level  < "]}," Markup LineCollection change_verbatim_blank_lines":{"type":"method","name":"change_verbatim_blank_lines","children":[],"call":["@fragments compact! ","@fragments []= ","frag_block add_text ","frag txt ","blank_count times ","Verbatim  === ","frag_block nil? ","@fragments each_with_index "]}," Markup LineCollection accept":{"type":"method","name":"accept","children":[],"call":["visitor end_accepting ","visitor accept_paragraph ","visitor accept_heading ","visitor accept_blank_line ","visitor accept_list_item ","visitor accept_list_end ","visitor accept_list_start ","visitor accept_rule ","visitor accept_verbatim ","@fragments each ","visitor start_accepting "]}," Markup LineCollection to_s":{"type":"method","name":"to_s","children":[],"call":["@fragments join "]}," Markup LineCollection normalize":{"type":"method","name":"normalize","children":[],"call":[" tidy_blank_lines "," add_list_breaks "," add_list_start_and_ends "," change_verbatim_blank_lines "]}," Markup LineCollection fragment_for":{"type":"method","name":"fragment_for","children":[],"call":["Fragment  for "]}," Markup LineCollection to_a":{"type":"method","name":"to_a","children":[],"call":["fragment to_s ","@fragments map "]}," Markup LineCollection each":{"type":"method","name":"each","children":[],"call":["@fragments each "]}," Markup LineCollection add":{"type":"method","name":"add","children":[],"call":["@fragments << "]}," Markup LineCollection initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Markup Verbatim add_text":{"type":"method","name":"add_text","children":[],"call":["@txt << << ","@txt << ","txt chomp "]}," Markup ListEnd initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Markup ListStart initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Markup ListItem to_s":{"type":"method","name":"to_s","children":[],"call":[" class name split [] "," class name split "," class name "," class "," type ","(sym :NOTE) include? "]}," Markup Heading head_level":{"type":"method","name":"head_level","children":[],"call":["@param to_i "]}," Markup Fragment to_s":{"type":"method","name":"to_s","children":[],"call":[" class name split [] "," class name split "," class name "," class "]}," Markup Fragment add_text":{"type":"method","name":"add_text","children":[],"call":["@txt << ","txt tr_s strip ","txt tr_s ","@txt length > ","@txt length "]}," Markup Fragment initialize":{"type":"method","name":"initialize","children":[],"call":[" add_text "]}," Markup Fragment for":{"type":"method","name":"for","children":[],"call":[]}," Markup Fragment type_name":{"type":"method","name":"type_name","children":[],"call":[]}," Formatter convert":{"type":"method","name":"convert","children":[],"call":["@markup convert "]}," AttributeManager split_into_flow":{"type":"method","name":"split_into_flow","children":[],"call":["res << "," change_attribute ","current_attr != "," copy_string ","start_pos < ","@str [] chr == ","@str [] chr ","@str [] ","i < ","RDoc Markup Special  new ","(send\n  (send\n    (ivar :@attrs) :[]\n    (lvar :i)) :&\n  (const\n    (const\n      (const\n        (const nil :RDoc) :Markup) :Attribute) :SPECIAL)) != ","@attrs [] & ","@attrs [] ","(send\n  (lvar :current_attr) :&\n  (const\n    (const\n      (const\n        (const nil :RDoc) :Markup) :Attribute) :SPECIAL)) != ","current_attr & ","i > ","new_attr != ","@str length "," display_attributes ","(send\n  (send\n    (ivar :@attrs) :[]\n    (lvar :i)) :&\n  (send\n    (ivar :@attributes) :special)) != ","@attributes special ","(send\n  (lvar :current_attr) :&\n  (send\n    (ivar :@attributes) :special)) != ","RDoc Markup RegexpHandling  new ","(send\n  (send\n    (ivar :@attrs) :[]\n    (lvar :i)) :&\n  (send\n    (ivar :@attributes) :regexp_handling)) != ","@attributes regexp_handling ","(send\n  (lvar :current_attr) :&\n  (send\n    (ivar :@attributes) :regexp_handling)) != ","@attrs []  != "]}," AttributeManager display_attributes":{"type":"method","name":"display_attributes","children":[],"call":[" puts ","line =~ ","line << ","%d % ","bno + ","bno zero? ","(send\n  (send\n    (ivar :@attrs) :[]\n    (lvar :i)) :&\n  (lvar :bit)) == ","@attrs [] & ","@attrs [] ","@str length times ","@str length ","16 times ","@str tr "]}," AttributeManager flow":{"type":"method","name":"flow","children":[],"call":[" split_into_flow "," puts ","@str dump "," unmask_protected_sequences "," convert_specials "," convert_html "," convert_attrs ","RDoc Markup AttrSpan  new ","@str length "," mask_protected_sequences ","str dup "," convert_regexp_handlings ","str dup  dump ","str dup  length "]}," AttributeManager add_special":{"type":"method","name":"add_special","children":[],"call":["SPECIAL  []= ","RDoc Markup Attribute  bitmap_for ","@special []= ","@special << ","@attributes bitmap_for "]}," AttributeManager add_html":{"type":"method","name":"add_html","children":[],"call":["HTML_TAGS  []= ","RDoc Markup Attribute  bitmap_for ","tag downcase ","@html_tags []= ","@attributes bitmap_for ","RDoc Markup Attribute  @attributes bitmap_for _for ","@attributes @attributes bitmap_for _for "]}," AttributeManager add_word_pair":{"type":"method","name":"add_word_pair","children":[],"call":["PROTECTABLE  uniq! ","PROTECTABLE  << ","start [] ","WORD_PAIR_MAP  []= ","Regexp  escape ","MATCHING_WORD_PAIRS  []= ","start == ","RDoc Markup Attribute  bitmap_for "," raise ","start [] == ","@protectable uniq! ","@protectable << ","@word_pair_map []= ","@matching_word_pairs []= ","@attributes bitmap_for ","RDoc Markup Attribute  RDoc Markup Attribute  bitmap_for _for ","RDoc Markup Attribute  @attributes bitmap_for _for ","@attributes RDoc Markup Attribute  bitmap_for _for ","@attributes @attributes bitmap_for _for "]}," AttributeManager initialize":{"type":"method","name":"initialize","children":[],"call":[" add_special "," add_html "," add_word_pair ","RDoc Markup Attributes  new "]}," AttributeManager unmask_protected_sequences":{"type":"method","name":"unmask_protected_sequences","children":[],"call":["@str gsub! "]}," AttributeManager mask_protected_sequences":{"type":"method","name":"mask_protected_sequences","children":[],"call":["@str gsub! ","Regexp  new ","Regexp  escape ","PROTECTABLE  join ","@protectable join "]}," AttributeManager convert_specials":{"type":"method","name":"convert_specials","children":[],"call":["attrs set_attrs ","attr | ","$& length ","$` length ","str scan ","SPECIAL  each ","SPECIAL  empty? ","@special each ","@special empty? ","attribute | ","@attributes special ","e - ","$~ offset ","$~ size == ","$~ size "]}," AttributeManager convert_html":{"type":"method","name":"convert_html","children":[],"call":["seq + + + ","seq + + ","seq + ","attrs set_attrs ","2 length ","$` length + ","$` length ","NULL  * ","1 length + ","1 length ","HTML_TAGS  [] ","1 downcase ","str gsub! ","HTML_TAGS  keys join ","HTML_TAGS  keys ","@html_tags [] ","@html_tags keys join ","@html_tags keys ","(send\n  (ivar :@html_tags) :select) keys join ","(send\n  (ivar :@html_tags) :select) keys "," exclusive? ! "," exclusive? ","exclusive ! ","@html_tags select ","$~ match_length ","$~ begin ","$~ match_length + ","exclusive == ","NULL  *  + + + ","NULL  *  + + ","NULL  *  + ","HTML_TAGS  [] s set_HTML_TAGS  [] s ","@html_tags [] s set_@html_tags [] s ","@html_HTML_TAGS  keys join  [] ","@html_@html_tags keys join  [] ","@html_(send\n  (ivar :@html_tags) :select) keys join  [] ","@html_HTML_TAGS  keys join  keys join ","@html_@html_tags keys join  keys join ","@html_(send\n  (ivar :@html_tags) :select) keys join  keys join ","@html_HTML_TAGS  keys join  keys ","@html_@html_tags keys join  keys ","@html_(send\n  (ivar :@html_tags) :select) keys join  keys ","(send\n  (ivar :@html_HTML_TAGS  keys join ) :select) keys join ","(send\n  (ivar :@html_@html_tags keys join ) :select) keys join ","(send\n  (ivar :@html_(send\n  (ivar :@html_tags) :select) keys join ) :select) keys join ","(send\n  (ivar :@html_HTML_TAGS  keys join ) :select) keys ","(send\n  (ivar :@html_@html_tags keys join ) :select) keys ","(send\n  (ivar :@html_(send\n  (ivar :@html_tags) :select) keys join ) :select) keys ","@html_HTML_TAGS  keys join  select ","@html_@html_tags keys join  select ","@html_(send\n  (ivar :@html_tags) :select) keys join  select "]}," AttributeManager convert_attrs":{"type":"method","name":"convert_attrs","children":[],"call":["NULL  * + + ","NULL  * ","3 length ","NULL  * + ","1 length ","attrs set_attrs ","2 length ","$` length + ","$` length ","str gsub! ","WORD_PAIR_MAP  each ","WORD_PAIR_MAP  empty? ","1 + + + + ","1 + + + ","1 + + ","1 + ","$` length + + ","MATCHING_WORD_PAIRS  [] ","MATCHING_WORD_PAIRS  keys join ","MATCHING_WORD_PAIRS  keys ","@word_pair_map each ","@word_pair_map empty? ","@matching_word_pairs [] ","@matching_word_pairs keys join ","@matching_word_pairs keys "," convert_attrs_word_pair_map "," convert_attrs_matching_word_pairs ","MATCHING_WORD_PAIRS  [] s set_MATCHING_WORD_PAIRS  [] s ","@matching_word_pairs [] s set_@matching_word_pairs [] s "," convert_MATCHING_WORD_PAIRS  [] s_word_pair_map "," convert_@matching_word_pairs [] s_word_pair_map "," convert_MATCHING_WORD_PAIRS  [] s_matching_word_pairs "," convert_@matching_word_pairs [] s_matching_word_pairs "]}," AttributeManager copy_string":{"type":"method","name":"copy_string","children":[],"call":["res gsub! ","@str [] ","@str []  gsub! "]}," AttributeManager changed_attribute_by_name":{"type":"method","name":"changed_attribute_by_name","children":[],"call":[" change_attribute ","RDoc Markup Attribute  bitmap_for ","new_set each ","current_set each ","@attributes bitmap_for "]}," AttributeManager change_attribute":{"type":"method","name":"change_attribute","children":[],"call":[" attribute ","current & ","new & ","current ^ "]}," AttributeManager attribute":{"type":"method","name":"attribute","children":[],"call":["RDoc Markup AttrChanger  new "]}," Generator Method find_symbol":{"type":"method","name":"find_symbol","children":[],"call":["res viewer ","@context parent find_symbol ","@context parent ","res viewer  viewer ","@context parent find_symbol  viewer "]}," Generator Method aliases":{"type":"method","name":"aliases","children":[],"call":["@context aliases "]}," Generator Method document_self":{"type":"method","name":"document_self","children":[],"call":["@context document_self "]}," Generator Method add_line_numbers":{"type":"method","name":"add_line_numbers","children":[],"call":[" sprintf ","src gsub! ","  * ","size + ","last to_s length ","last to_s ","first + ","src count ","1 to_i - ","1 to_i ","src =~ ","(str \"%\") % ","line == ","last to_s length  + ","first +  to_s length ","first +  to_s ","1 to_i -  + "]}," Generator Method markup_code":{"type":"method","name":"markup_code","children":[],"call":[" add_line_numbers ","@options include_line_numbers ","src << ","CGI  escapeHTML ","t text ","tokens each ","t CGI  escapeHTML  "]}," Generator Method <=>":{"type":"method","name":"<=>","children":[],"call":["@context <=> ","other context "]}," Generator Method create_source_code_file":{"type":"method","name":"create_source_code_file","children":[],"call":["RDoc Generator  gen_url "," path ","template write_html_on ","@options charset "," style_url ","@options css ","CGI  escapeHTML "," index_name "," open ","RDoc TemplatePage  new "," File  join ","FileUtils  mkdir_p ","@html_class path sub ","@html_class path ","RDoc Markup ToHtml  gen_relative_url ","RDoc TemplatePage  new  write_html_on "]}," Generator Method params":{"type":"method","name":"params","children":[],"call":["CGI  escapeHTML ","params << ","block strip ","block sub! sub! ","block sub! ","block [] == ","block [] ","block tr squeeze ","block tr ","block gsub! ","params sub! ","@context block_params ","( + + ","( + ","params [] == ","params [] ","params tr squeeze ","params tr ","@context params gsub ","@context params ","params !~ ","( + +  << ","params tr squeeze  << ","@context params gsub  << ","@context params  << ","block tr squeeze  strip ","@context block_params  strip ","block tr squeeze  sub! sub! ","@context block_params  sub! sub! ","block tr squeeze  sub! ","@context block_params  sub! ","block tr squeeze  [] == ","@context block_params  [] == ","block tr squeeze  [] ","@context block_params  [] ","block tr squeeze  tr squeeze ","@context block_params  tr squeeze ","block tr squeeze  tr ","@context block_params  tr ","block tr squeeze  gsub! ","@context block_params  gsub! ","( + +  sub! ","params tr squeeze  sub! ","@context params gsub  sub! ","@context params  sub! ","@context block tr squeeze _params ","@context @context block_params _params ","@context block_( + +  ","@context block_params tr squeeze  ","@context block_@context params gsub  ","@context block_@context params  ","( + +  [] == ","params tr squeeze  [] == ","@context params gsub  [] == ","@context params  [] == ","( + +  [] ","params tr squeeze  [] ","@context params gsub  [] ","@context params  [] ","( + +  tr squeeze ","params tr squeeze  tr squeeze ","@context params gsub  tr squeeze ","@context params  tr squeeze ","( + +  tr ","params tr squeeze  tr ","@context params gsub  tr ","@context params  tr ","@context ( + +  gsub ","@context params tr squeeze  gsub ","@context @context params gsub  gsub ","@context @context params  gsub ","@context ( + +  ","@context params tr squeeze  ","@context @context params gsub  ","@context @context params  ","( + +  !~ ","params tr squeeze  !~ ","@context params gsub  !~ ","@context params  !~ "]}," Generator Method call_seq":{"type":"method","name":"call_seq","children":[],"call":["cs gsub ","@context call_seq ","@context call_seq  gsub "]}," Generator Method singleton":{"type":"method","name":"singleton","children":[],"call":["@context singleton "]}," Generator Method visibility":{"type":"method","name":"visibility","children":[],"call":["@context visibility "]}," Generator Method description":{"type":"method","name":"description","children":[],"call":[" markup ","@context comment "]}," Generator Method path":{"type":"method","name":"path","children":[],"call":["@html_class path + + "," aref ","@html_class path + ","@html_class path ","@options all_one_file "]}," Generator Method aref":{"type":"method","name":"aref","children":[],"call":[]}," Generator Method parent_name":{"type":"method","name":"parent_name","children":[],"call":["@context parent parent full_name ","@context parent parent ","@context parent "]}," Generator Method index_name":{"type":"method","name":"index_name","children":[],"call":["@html_class name ","@context name "]}," Generator Method section":{"type":"method","name":"section","children":[],"call":["@context section "]}," Generator Method name":{"type":"method","name":"name","children":[],"call":["@context name "]}," Generator Method as_href":{"type":"method","name":"as_href","children":[],"call":["RDoc Generator  gen_url "," path ","# + ","@options all_one_file ","RDoc Markup ToHtml  gen_relative_url "]}," Generator Method initialize":{"type":"method","name":"initialize","children":[],"call":["AllReferences  add "," name ","RDoc Generator  gen_url "," path "," create_source_code_file ","@options inline_source "," markup_code ","@context token_stream ","context viewer= ","@@all_methods << ","@@seq succ ","options template_class ","RDoc Markup ToHtml  gen_relative_url ","@@seq succ  succ "]}," Generator Method reset":{"type":"method","name":"reset","children":[],"call":[]}," Generator Method all_methods":{"type":"method","name":"all_methods","children":[],"call":[]}," Generator File <=>":{"type":"method","name":"<=>","children":[],"call":[" name <=> ","other name "," name "]}," Generator File file_attribute_values":{"type":"method","name":"file_attribute_values","children":[],"call":["@values []= "," cvs_url ","@values [] ","@options webcvs ","@context file_stat mtime to_s ","@context file_stat mtime ","@context file_stat ","CGI  escapeHTML "," diagram_reference ","@context diagram "," File  basename ","@context file_absolute_name ","@options title "]}," Generator File write_on":{"type":"method","name":"write_on","children":[],"call":["template write_html_on ","RDoc TemplatePage  new "," value_hash ","@values update ","@values []= ","template_page write_html_on ","@template_cache cache ","RDoc TemplatePage  new  write_html_on ","RDoc TemplatePage  new _page write_html_on ","@RDoc TemplatePage  new _cache cache "]}," Generator File value_hash":{"type":"method","name":"value_hash","children":[],"call":["@values []= ","co empty? "," build_constants_summary_list ","secdata []= ","al empty? "," build_alias_summary_list ","mdl empty? "," build_method_detail_list ","cl empty? "," build_class_list "," markup ","section comment ","section sequence ","section title ","@context sections map ","@context sections ","@options promiscuous ","rl empty? "," build_requires_list ","il empty? "," build_include_list ","ml empty? "," build_method_summary_list ","d size > ","d size ","@context comment "," style_url ","@options css "," path ","@options charset "," add_table_of_sections "," file_attribute_values ","@context parser ","@v build_alias_summary_list ues []= "," build_constants_summary_list  empty? "," build_ build_constants_summary_list nstants_summary_list "," bu build_include_list d_constants_summary_list "," buil markup _constants_summary_list ","sec markup ata []= "," build_alias_summary_list  empty? "," build_ build_alias_summary_list ias_summary_list "," bu build_include_list d_alias_summary_list "," buil markup _alias_summary_list "," build_method_detail_list  empty? ","m markup l empty? "," bu build_include_list d_method_deta build_include_list _list "," buil markup _metho markup _ markup etail_list "," build_class_list  empty? "," build_ build_class_list ass_list "," bu build_include_list d_class_list "," buil markup _class_list ","section  build_constants_summary_list mment ","@ build_constants_summary_list ntext sections map ","@ build_constants_summary_list ntext sections "," build_requires_list  empty? "," bu build_include_list d_requires_list "," buil markup _requires_list "," build_include_list  empty? "," build_in build_class_list ude_list "," bu build_include_list d_include_list "," buil markup _inclu markup e_list "," build_method_summary_list  empty? "," bu build_include_list d_method_summary_list "," buil markup _metho markup _summary_list "," markup  size > "," markup  size ","@ build_constants_summary_list ntext  build_constants_summary_list mment "," style_u build_requires_list  "," a markup  markup _table_of_sections "," file_attribute_v build_alias_summary_list ues "," f build_include_list e_attribute_values ","@ build_constants_summary_list ntext parser "]}," Generator File parent_name":{"type":"method","name":"parent_name","children":[],"call":[]}," Generator File index_name":{"type":"method","name":"index_name","children":[],"call":[" name "]}," Generator File filename_to_label":{"type":"method","name":"filename_to_label","children":[],"call":["%%%x % ","$& [] unpack ","$& [] ","@context file_relative_name gsub ","@context file_relative_name ","(send\n  (str \"%%%x\") :%\n  (send\n    (back-ref :$&) :[]\n    (int 0))) unpack "]}," Generator File http_url":{"type":"method","name":"http_url","children":[],"call":[" File  join ","@context file_relative_name tr ","@context file_relative_name ","path compact "]}," Generator File initialize":{"type":"method","name":"initialize","children":[],"call":["context viewer= ","AllReferences  add "," name "," collect_methods ","@context file_relative_name "," http_url "," filename_to_label ","options all_one_file "]}," Generator Class <=>":{"type":"method","name":"<=>","children":[],"call":[" name <=> ","other name "," name "]}," Generator Class class_attribute_values":{"type":"method","name":"class_attribute_values","children":[],"call":["@values []= ","files << ","res []= "," cvs_url ","@options webcvs "," aref_to ","f viewer path ","f viewer ","f document_self ","CGI  escapeHTML ","f file_absolute_name ","@context in_files each ","@context in_files ","parent_url path ","parent_url document_self ","AllReferences  [] "," parent_name + + "," parent_name + "," parent_name ","@context superclass "," diagram_reference ","c diagram ","c parent ","c diagram ! ","@values [] "," name ","@context module? ! ","@context module? ","@options title "," c parent vs_url ","@options webc parent vs ","f doc parent ument_self ","CGI  esc parent apeHTML ","@c parent ontext in_files eac parent h ","@c parent ontext in_files ","parent_url doc parent ument_self ","AllReferenc parent es  [] ","@c parent ontext superc parent lass "," diagram_referenc parent e ","c parent  diagram ","c parent  parent ","c parent  diagram ! ","@c parent ontext module? ! ","@c parent ontext module? "]}," Generator Class build_attribute_list":{"type":"method","name":"build_attribute_list","children":[],"call":["res << ","entry [] << ","entry [] ","att visibility == ","att visibility "," markup ","att comment ","att rw ","CGI  escapeHTML ","att name ","@options show_all ","att section == ","att section ","atts each ","@context attributes sort ","@context attributes ","(send\n  (send\n    (send\n      (ivar :@context) :attributes) :sort) :map) compact ","@context attributes sort map ","@context attributes sort  each "]}," Generator Class value_hash":{"type":"method","name":"value_hash","children":[],"call":["@values []= ","secdata []= ","mdl empty? "," build_method_detail_list ","cl empty? "," build_class_list ","al empty? "," build_attribute_list ","co empty? "," build_constants_summary_list "," build_alias_summary_list "," markup ","section comment ","section sequence ","section title ","@context sections map ","@context sections ","il empty? "," build_include_list ","ml empty? "," build_method_summary_list ","d empty? ","@context comment "," style_url ","@options css "," path ","@options charset "," add_table_of_sections "," class_attribute_values ","@v build_attribute_list ues []= ","@v build_alias_summary_list ues []= ","sec markup ata []= "," build_method_detail_list  empty? ","m markup l empty? "," bu build_include_list d_method_deta build_include_list _list "," buil markup _metho markup _ markup etail_list "," build_class_list  empty? "," build_ build_class_list ass_list "," bu build_include_list d_class_list "," buil markup _class_list "," build_attribute_list  empty? "," build_alias_summary_list  empty? "," bu build_include_list d_attribute_list "," buil markup _attribute_list "," build_constants_summary_list  empty? "," build_ build_constants_summary_list nstants_summary_list "," bu build_include_list d_constants_summary_list "," buil markup _constants_summary_list "," build_ build_attribute_list ias_summary_list "," build_ build_alias_summary_list ias_summary_list "," bu build_include_list d_alias_summary_list "," buil markup _alias_summary_list ","section  build_constants_summary_list mment ","@ build_constants_summary_list ntext sections map ","@ build_constants_summary_list ntext sections "," build_include_list  empty? "," build_in build_class_list ude_list "," bu build_include_list d_include_list "," buil markup _inclu markup e_list "," build_method_summary_list  empty? "," bu build_include_list d_method_summary_list "," buil markup _metho markup _summary_list "," markup  empty? ","@ build_constants_summary_list ntext  build_constants_summary_list mment "," a markup  markup _table_of_sections ","  build_class_list ass_attribute_values "," class_attribute_v build_attribute_list ues "," class_attribute_v build_alias_summary_list ues "]}," Generator Class write_on":{"type":"method","name":"write_on","children":[],"call":["template write_html_on ","RDoc TemplatePage  new "," value_hash ","@values update ","@values []= ","template_page write_html_on ","@template_cache cache ","RDoc TemplatePage  new  write_html_on ","RDoc TemplatePage  new _page write_html_on ","@RDoc TemplatePage  new _cache cache "]}," Generator Class index_name":{"type":"method","name":"index_name","children":[],"call":[" name "]}," Generator Class parent_name":{"type":"method","name":"parent_name","children":[],"call":["@context parent full_name ","@context parent "]}," Generator Class name":{"type":"method","name":"name","children":[],"call":["@context full_name "]}," Generator Class http_url":{"type":"method","name":"http_url","children":[],"call":[" File  join + "," File  join ","path split ","path gsub! ","path [] ","full_name dup ","path compact ","(lvar :prefix) + ","full_name dup  split ","(lvar :prefix) +  split ","full_name dup  gsub! ","(lvar :prefix) +  gsub! ","full_name dup  [] ","(lvar :prefix) +  [] ","full_name dup  compact ","(lvar :prefix) +  compact "]}," Generator Class initialize":{"type":"method","name":"initialize","children":[],"call":["AllReferences  add "," name "," collect_methods "," http_url ","context full_name ","options all_one_file ","context viewer= ","context is_module? ","context module? "]}," Generator Context add_table_of_sections":{"type":"method","name":"add_table_of_sections","children":[],"call":["@values []= ","toc empty? ","toc << ","section sequence ","section title ","@context sections each ","@context sections "]}," Generator Context find_symbol":{"type":"method","name":"find_symbol","children":[],"call":["res viewer ","@context find_symbol ","res viewer  viewer ","@context find_symbol  viewer "]}," Generator Context diagram_reference":{"type":"method","name":"diagram_reference","children":[],"call":["1 + + ","1 + "," url ","diagram gsub "]}," Generator Context document_self":{"type":"method","name":"document_self","children":[],"call":["@context document_self "]}," Generator Context aref_to":{"type":"method","name":"aref_to","children":[],"call":[" url ","# + ","@options all_one_file "]}," Generator Context url":{"type":"method","name":"url","children":[],"call":["RDoc Generator  gen_url "," path ","RDoc Markup ToHtml  gen_relative_url "]}," Generator Context build_class_list":{"type":"method","name":"build_class_list","children":[],"call":["res << << << << << "," build_class_list ","level + ","res << << << << ","res << << << "," href ","cls full_name "," url ","cls viewer path ","cls viewer ","res << << ","res << ","cls document_self ","cls defined_in? ! ","cls defined_in? ","cls section == ","cls section ","from classes sort each ","from classes sort ","from classes ","mod full_name ","mod viewer path ","mod viewer ","mod document_self ","mod defined_in? ! ","mod defined_in? ","mod section == ","mod section ","from modules sort each ","from modules sort ","from modules ","&nbsp;&nbsp;:: * "]}," Generator Context build_method_detail_list":{"type":"method","name":"build_method_detail_list","children":[],"call":["outer << ","vis to_s capitalize ","vis to_s ","res size > ","res size ","res << ","row []= ","m img_url ","m src_url ","m source_code ","@options inline_source ","alias_names empty? ","alias_names << ","other viewer as_href "," path ","other viewer ","other name ","m aliases each ","m aliases ","m visibility to_s ","m visibility ","m aref ","desc empty? ","m description strip ","m description ","m params ","CGI  escapeHTML ","m name ","m call_seq gsub ","m call_seq ","m singleton == ","m singleton ","m visibility == ","m document_self ","m section == ","m section ","methods each ","@methods sort ","@methods sort select ","m source_m src_url  ","m source_m source_code  ","m description strip  empty? ","m m description strip ription strip ","m m description strip ription ","@methods sort  each ","@@methods sort  sort ","@@methods sort  sort select "]}," Generator Context potentially_referenced_list":{"type":"method","name":"potentially_referenced_list","children":[],"call":["res << "," url ","ref path ","ref document_self ","CGI  escapeHTML ","i name ","AllReferences  [] ","possibles shift ","possibles empty? ! ","possibles empty? ","ref ! "," block_given? ","ref viewer ","@context find_symbol ","array each ","ref  url  ","AllReferences  []  path ","ref viewer  path ","@context find_symbol  path ","AllReferences  []  document_self ","ref viewer  document_self ","@context find_symbol  document_self ","AllReferences  []  ! ","ref viewer  ! ","@context find_symbol  ! ","AllReferences  []  viewer ","ref viewer  viewer ","@context find_symbol  viewer "]}," Generator Context build_include_list":{"type":"method","name":"build_include_list","children":[],"call":[" potentially_referenced_list ","context includes "]}," Generator Context build_requires_list":{"type":"method","name":"build_requires_list","children":[],"call":["fn + "," potentially_referenced_list ","context requires "]}," Generator Context build_constants_summary_list":{"type":"method","name":"build_constants_summary_list","children":[],"call":["values << ","res []= "," markup ","co comment ","co comment empty? ! ","co comment empty? ","CGI  escapeHTML ","co value ","co name ","co section == ","co section ","@context constants each ","@context constants ","(send\n  (send\n    (ivar :@context) :constants) :map) compact ","@context constants map "]}," Generator Context build_alias_summary_list":{"type":"method","name":"build_alias_summary_list","children":[],"call":["values << ","res []= "," markup ","al comment ","al comment empty? ! ","al comment empty? ","al new_name ","al old_name ","al section == ","al section ","@context aliases each ","@context aliases ","(send\n  (send\n    (ivar :@context) :aliases) :map) compact ","@context aliases map "]}," Generator Context build_method_summary_list":{"type":"method","name":"build_method_summary_list","children":[],"call":["res << ","meth aref ","CGI  escapeHTML ","meth name ","meths each ","@methods sort "," collect_methods ","@methods sort map ","@methods sort  each "]}," Generator Context collect_methods":{"type":"method","name":"collect_methods","children":[],"call":["RDoc Generator Method  new ","list collect ","m force_documentation ","m visibility == ","m visibility ","list find_all ","@options show_all ","@context method_list ","list select ","@context method_list  collect ","@context method_list  find_all ","@context method_@context method_list  ","@context method_list  select "]}," Generator Context as_href":{"type":"method","name":"as_href","children":[],"call":["RDoc Generator  gen_url "," path ","# + ","@options all_one_file ","RDoc Markup ToHtml  gen_relative_url "]}," Generator Context href":{"type":"method","name":"href","children":[],"call":[]}," Generator Context initialize":{"type":"method","name":"initialize","children":[],"call":["options template_class "]}," Generator Context build_indicies":{"type":"method","name":"build_indicies","children":[],"call":[]}," Generator MarkUp cvs_url":{"type":"method","name":"cvs_url","children":[],"call":["url + "," sprintf "]}," Generator MarkUp style_url":{"type":"method","name":"style_url","children":[],"call":["RDoc Generator  gen_url ","RDoc Markup ToHtml  gen_relative_url "]}," Generator MarkUp markup":{"type":"method","name":"markup","children":[],"call":["res sub! ","@formatter convert ","1 tr ","str gsub ","str =~ ","RDoc Markup ToHtmlCrossref  new ","@options show_hash "," path "," formatter convert "," formatter ","@formatter convert  sub! "," formatter convert  sub! ","RDoc Markup ToHtmlCrossref  new  convert "]}," Generator AllReferences keys":{"type":"method","name":"keys","children":[],"call":[]}," Generator AllReferences []":{"type":"method","name":"[]","children":[],"call":[]}," Generator AllReferences add":{"type":"method","name":"add","children":[],"call":[]}," Generator AllReferences reset":{"type":"method","name":"reset","children":[],"call":[]}," Generator gen_url":{"type":"method","name":"gen_url","children":[],"call":[]}," XML gen_an_index":{"type":"method","name":"gen_an_index","children":[],"call":[" main_url ","res << ","f index_name ","f path ","f document_self ","collection sort each ","collection sort "]}," XML gen_method_index":{"type":"method","name":"gen_method_index","children":[],"call":[" gen_an_index ","RDoc Generator HtmlMethod  all_methods "]}," XML gen_class_index":{"type":"method","name":"gen_class_index","children":[],"call":[" gen_an_index "]}," XML gen_file_index":{"type":"method","name":"gen_file_index","children":[],"call":[" gen_an_index "]}," XML gen_into":{"type":"method","name":"gen_into","children":[],"call":["res << ","item value_hash ","list each "]}," XML generate_xml":{"type":"method","name":"generate_xml","children":[],"call":["template write_html_on ","File  open ","@options op_name ","RDoc TemplatePage  new "," write_extra_pages "," gen_into ","@options charset ","RDoc TemplatePage  new  write_html_on "]}," XML build_class_list":{"type":"method","name":"build_class_list","children":[],"call":[" build_class_list ","from each_classmodule ","@classes << ","RDoc Generator HtmlClass  new ","RDoc Generator Class  new "]}," XML build_indices":{"type":"method","name":"build_indices","children":[],"call":[" build_class_list ","@files [] ","RDoc TopLevel  all_classes_and_modules each ","RDoc TopLevel  all_classes_and_modules ","@files << ","RDoc Generator HtmlFile  new ","@info each ","RDoc Generator File  new ","RDoc Cache  instance "]}," XML generate":{"type":"method","name":"generate","children":[],"call":[" generate_xml "," build_indices "]}," XML initialize":{"type":"method","name":"initialize","children":[],"call":[]}," XML for":{"type":"method","name":"for","children":[],"call":[]}," RI update_or_replace":{"type":"method","name":"update_or_replace","children":[],"call":["@ri_writer add_class ","@ri_writer remove_class ","@generated []= ","cls_desc full_name ","cls_desc merge_in ","rdr get_class ","prev_cls ! ","@generated [] ","namespace [] "," exit ","$stderr puts ","cls_desc name ","namespace empty? ","rdr lookup_namespace_in ","rdr top_level_namespace ","RDoc RI Reader  new ","RDoc RI Cache  new ","@options op_dir ","@options merge ","RDoc RI Reader  new  get_class ","@generated []  ! ","rdr lookup_namespace_in  [] ","rdr top_level_namespace  [] ","rdr lookup_namespace_in  empty? ","rdr top_level_namespace  empty? ","rdr lookup_rdr lookup_namespace_in _in ","rdr lookup_rdr top_level_namespace _in ","RDoc RI Reader  new  lookup_namespace_in ","rdr top_level_rdr lookup_namespace_in  ","rdr top_level_rdr top_level_namespace  ","RDoc RI Reader  new  top_level_namespace "]}," RI markup":{"type":"method","name":"markup","children":[],"call":["@markup convert ","1 tr ","comment gsub ","comment =~ ","comment empty? ","comment ! "]}," RI params_of":{"type":"method","name":"params_of","children":[],"call":["p << ","block strip ","block sub! sub! ","block sub! ","block [] == ","block [] ","block tr squeeze ","block tr ","block gsub! ","method block_params ","( + + ","( + ","p [] == ","p [] ","p tr squeeze ","p tr ","params gsub ","method params ","method call_seq ","( + +  << ","p tr squeeze  << ","params gsub  << ","block tr squeeze  strip ","method block_params  strip ","block stri( + +  ","block strip tr squeeze  ","block striparams gsub  ","block tr squeeze  sub! sub! ","method block_params  sub! sub! ","block tr squeeze  sub! ","method block_params  sub! ","block tr squeeze  [] == ","method block_params  [] == ","block tr squeeze  [] ","method block_params  [] ","block tr squeeze  tr squeeze ","method block_params  tr squeeze ","block tr squeeze  tr ","method block_params  tr ","block tr squeeze  gsub! ","method block_params  gsub! ","method block tr squeeze _params ","method method block_params _params ","method block_( + + arams ","method block_p tr squeeze arams ","method block_params gsub arams ","( + +  [] == ","p tr squeeze  [] == ","params gsub  [] == ","( + +  [] ","p tr squeeze  [] ","params gsub  [] ","( + +  tr squeeze ","p tr squeeze  tr squeeze ","params gsub  tr squeeze ","( + +  tr ","p tr squeeze  tr ","params gsub  tr ","( + + arams gsub ","p tr squeeze arams gsub ","params gsub arams gsub ","method ( + + arams ","method p tr squeeze arams ","method params gsub arams "]}," RI method_list":{"type":"method","name":"method_list","children":[],"call":["i << ","c << ","m singleton ","list sort each ","list sort ","m force_documentation ","m visibility == ","m visibility ","list find_all ","@options show_all ","cls method_list ","cls method_list  sort each ","cls method_list  sort ","cls method_list  find_all ","cls method_cls method_list  "]}," RI generate_method_info":{"type":"method","name":"generate_method_info","children":[],"call":["@ri_writer add_method ","meth_desc aliases= ","RDoc RI AliasName  new ","a name ","method aliases map ","method aliases ","meth_desc block_params= ","method block_params ","meth_desc is_singleton= ","method singleton ","meth_desc visibility= ","method visibility to_s ","method visibility ","meth_desc params= "," params_of ","meth_desc comment= "," markup ","method comment ","meth_desc full_name << ","method name ","meth_desc full_name ","meth_desc full_name= ","cls_desc full_name ","meth_desc name= ","RDoc RI MethodDescription  new ","RDoc RI MethodDescription  new  aliases= ","RDoc RI MethodDescription  new  block_params= ","RDoc RI MethodDescription  new  is_singleton= ","RDoc RI MethodDescription  new  visibility= ","RDoc RI MethodDescription  new  params= ","RDoc RI MethodDescription  new  comment= ","RDoc RI MethodDescription  new  full_name << ","RDoc RI MethodDescription  new  full_name ","RDoc RI MethodDescription  new  full_name= ","RDoc RI MethodDescription  new  name= "]}," RI generate_class_info":{"type":"method","name":"generate_class_info","children":[],"call":[" generate_method_info ","instance_methods each ","class_methods each "," update_or_replace ","cls_desc instance_methods= ","RDoc RI MethodSummary  new ","m name ","instance_methods map ","cls_desc class_methods= ","class_methods map "," method_list ","cls_desc includes= ","RDoc RI IncludedModule  new ","i name ","cls includes map ","cls includes ","cls_desc constants= ","RDoc RI Constant  new "," markup ","c comment ","c value ","c name ","cls constants map ","cls constants ","cls_desc attributes= ","RDoc RI Attribute  new ","a comment ","a rw ","a name ","cls attributes sort map ","cls attributes sort ","cls attributes ","cls_desc comment= ","cls comment ","cls_desc full_name= ","cls full_name ","cls_desc name= ","cls name ","cls_desc superclass= ","cls superclass ","RDoc RI ClassDescription  new ","RDoc RI ModuleDescription  new ","cls === ","superclass full_name ","String  === ","RDoc RI ClassDescription  new  instance_methods= ","RDoc RI ModuleDescription  new  instance_methods= ","RDoc RI ClassDescription  new  class_methods= ","RDoc RI ModuleDescription  new  class_methods= ","RDoc RI ClassDescription  new  includes= ","RDoc RI ModuleDescription  new  includes= ","RDoc RI ClassDescription  new  constants= ","RDoc RI ModuleDescription  new  constants= ","RDoc RI ClassDescription  new  attributes= ","RDoc RI ModuleDescription  new  attributes= ","RDoc RI ClassDescription  new  comment= ","RDoc RI ModuleDescription  new  comment= ","RDoc RI ClassDescription  new  full_name= ","RDoc RI ModuleDescription  new  full_name= ","RDoc RI ClassDescription  new  name= ","RDoc RI ModuleDescription  new  name= ","RDoc RI ClassDescription  new  superclass= ","RDoc RI ModuleDescription  new  superclass= ","cls_desc superclass full_name = ","cls_desc cls superclass = ","cls superclass full_name  ","cls cls superclass  ","superclass full_name  full_name ","cls superclass  full_name "]}," RI process_class":{"type":"method","name":"process_class","children":[],"call":[" process_class ","from_class each_classmodule "," generate_class_info "]}," RI generate":{"type":"method","name":"generate","children":[],"call":[" process_class ","RDoc TopLevel  all_classes_and_modules each ","RDoc TopLevel  all_classes_and_modules "," remove_siginfo_handler ","@store save_cache ","@store save_method ","klass each_attribute ","method full_name ","method class ","klass each_method ","@store save_class ","klass full_name ","klass class "," install_siginfo_handler ","@store load_cache ","@store save "]}," RI initialize":{"type":"method","name":"initialize","children":[],"call":["RDoc Markup ToFlow  new ","RDoc Markup  new ","RDoc RI Writer  new ","RDoc RI Store  new ","@store dry_run= ","@options dry_run ","@store encoding= ","@options encoding ","@options respond_to? ","@store path= ","RDoc RI Store  new  dry_run= ","RDoc RI Store  new  encoding= ","RDoc RI Store  new  path= "]}," RI for":{"type":"method","name":"for","children":[],"call":[]}," HTMLInOne gen_an_index":{"type":"method","name":"gen_an_index","children":[],"call":[" main_url ","res << ","f index_name ","f path ","f document_self ","collection sort each ","collection sort "," index_to_links "]}," HTMLInOne gen_method_index":{"type":"method","name":"gen_method_index","children":[],"call":[" gen_an_index ","RDoc Generator Method  all_methods "]}," HTMLInOne gen_class_index":{"type":"method","name":"gen_class_index","children":[],"call":[" gen_an_index "]}," HTMLInOne gen_file_index":{"type":"method","name":"gen_file_index","children":[],"call":[" gen_an_index "]}," HTMLInOne gen_into":{"type":"method","name":"gen_into","children":[],"call":["res << ","item value_hash ","list each "]}," HTMLInOne generate_xml":{"type":"method","name":"generate_xml","children":[],"call":["template write_html_on "," open ","@options op_name ","RDoc TemplatePage  new "," write_extra_pages ","CGI  escapeHTML ","@options title "," gen_into ","@options charset ","RDoc TemplatePage  new  write_html_on "]}," HTMLInOne build_indices":{"type":"method","name":"build_indices","children":[],"call":["RDoc Generator Context  build_indices "]}," HTMLInOne generate":{"type":"method","name":"generate","children":[],"call":[" generate_xml "," build_indices "]}," HTMLInOne initialize":{"type":"method","name":"initialize","children":[],"call":[]}," HTML main_url":{"type":"method","name":"main_url","children":[],"call":[" exit ","$stderr puts ","file path ","context document_self ","@files find ","@main_page_ref path ","RDoc Generator AllReferences  [] ","@options main_page "," raise ","file document_self ","@files each ","file name =~ ","file name ","main_page_ref path ","RDoc Generator AllReferences  []  path ","@options main_page _ref path ","@RDoc Generator AllReferences  []  path ","@@options main_page _ref path ","@options @options main_page  "]}," HTML gen_main_index":{"type":"method","name":"gen_main_index","children":[],"call":["template write_html_on ","values []= ","@options inline_source ","@options charset ","CGI  escapeHTML ","@options title "," style_url ","@options css "," main_url ","klass value_hash ","@classes sort map ","@classes sort "," open ","RDoc TemplatePage  new ","main write_html_on ","main write_on ","main respond_to? "," main_page == ","klass context full_name ","klass context "," main_page ","@classes find ","main nil? ","@main_page == ","file name ","@files find ","@template const_defined? ","f puts ","RDoc TemplatePage  new  write_html_on ","  style_url  "," RDoc TemplatePage  new _url ","RDoc TemplatePage  new  write_on ","RDoc TemplatePage  new  respond_to? "," RDoc TemplatePage  new _page == "," RDoc TemplatePage  new _page ","RDoc TemplatePage  new  nil? ","@RDoc TemplatePage  new _page == ","@RDoc TemplatePage  new  const_defined? "]}," HTML gen_an_index":{"type":"method","name":"gen_an_index","children":[],"call":["template write_html_on "," open "," style_url ","@options css ","@options charset "," main_url ","CGI  escapeHTML ","res << ","f index_name ","f path ","f document_self ","collection sort each ","collection sort ","RDoc TemplatePage  new ","@options title ","RDoc TemplatePage  new  write_html_on "]}," HTML gen_method_index":{"type":"method","name":"gen_method_index","children":[],"call":[" gen_an_index ","RDoc Generator Method  all_methods "]}," HTML gen_class_index":{"type":"method","name":"gen_class_index","children":[],"call":[" gen_an_index "]}," HTML gen_file_index":{"type":"method","name":"gen_file_index","children":[],"call":[" gen_an_index "]}," HTML gen_into":{"type":"method","name":"gen_into","children":[],"call":["item write_on "," open ","FileUtils  mkdir_p ","File  dirname ","item path ","item document_self ","list each "," index_to_links ","RDoc Generator Method  all_methods ","op_dir != ","sorted_list each ","File  dirname <=> ","b path ","a path ","list sort ","File  dirname  != "]}," HTML generate_html":{"type":"method","name":"generate_html","children":[],"call":[" write_extra_pages "," gen_main_index "," gen_method_index "," gen_class_index "," gen_file_index "," gen_into ","@template write_extra_pages ","@template respond_to? "," style_url ","@options css ","@options charset ","CGI  escapeHTML ","@options title "," main_url ","RDoc Generator Method  all_methods sort ","RDoc Generator Method  all_methods ","@classes sort ","@files sort "]}," HTML build_indices":{"type":"method","name":"build_indices","children":[],"call":["RDoc Generator Context  build_indicies ","RDoc Generator Context  build_indices "]}," HTML gen_sub_directories":{"type":"method","name":"gen_sub_directories","children":[],"call":[" exit ","$stderr puts ","$! message ","FileUtils  mkdir_p "]}," HTML write_style_sheet":{"type":"method","name":"write_style_sheet","children":[],"call":["template write_html_on ","values []= ","@template constants include? ","@template constants "," open ","@options css ","RDoc TemplatePage  new ","RDoc TemplatePage  new  write_html_on ","@RDoc TemplatePage  new  constants include? ","@RDoc TemplatePage  new  constants "]}," HTML load_html_template":{"type":"method","name":"load_html_template","children":[],"call":[" exit ","$stderr puts ","@options template_class= "," class const_get ","@options template upcase ","@options template "," class "," require ","File  join ","@options generator key ","@options generator ","template =~ ","e message ","template != ","e message [] ","generator_name downcase ","@options generator name sub ","@options generator name ","@options File  join _class= ","@options @options template _class= ","@options File  join  upcase ","@options @options template  upcase ","@options File  join  ","@options @options template  ","File  join  =~ ","@options template  =~ ","File  join  != ","@options template  != ","@options generator name sub  downcase "]}," HTML generate":{"type":"method","name":"generate","children":[],"call":[" generate_html "," build_indices "," gen_sub_directories "," write_style_sheet ","RDoc Cache  instance "]}," HTML initialize":{"type":"method","name":"initialize","children":[],"call":[" load_html_template "]}," HTML for":{"type":"method","name":"for","children":[],"call":[]}," KILMER write_extra_pages":{"type":"method","name":"write_extra_pages","children":[],"call":["template write_html_on ","File  open ","TemplatePage  new ","TemplatePage  new  write_html_on "]}," HEFSS write_extra_pages":{"type":"method","name":"write_extra_pages","children":[],"call":["template write_html_on ","File  open ","TemplatePage  new ","TemplatePage  new  write_html_on "]}," CHM compile_project":{"type":"method","name":"compile_project","children":[],"call":[" system "]}," CHM create_contents_and_index":{"type":"method","name":"create_contents_and_index","children":[],"call":["template write_html_on ","File  open ","RDoc TemplatePage  new ","index concat ","contents << ","content_entry []= ","methods empty? ","entry build_method_summary_list ","entry path ","index << ","entry name ","(send\n  (ivar :@files) :+\n  (ivar :@classes)) sort each ","(send\n  (ivar :@files) :+\n  (ivar :@classes)) sort ","@files + ","RDoc TemplatePage  new  write_html_on ","entry build_method_summary_list  empty? "]}," CHM create_project_file":{"type":"method","name":"create_project_file","children":[],"call":["template write_html_on ","File  open ","values []= ","files << ","f path ","@files each ","@options title ","RDoc TemplatePage  new ","RDoc TemplatePage  new  write_html_on "]}," CHM create_help_project":{"type":"method","name":"create_help_project","children":[],"call":[" compile_project "," create_contents_and_index "," create_project_file "]}," CHM generate":{"type":"method","name":"generate","children":[],"call":[" create_help_project ","@op_name + "]}," CHM check_for_html_help_workshop":{"type":"method","name":"check_for_html_help_workshop","children":[],"call":["$stderr << << << << << << ","$stderr << << << << << ","$stderr << << << << ","$stderr << << << ","$stderr << << ","$stderr << ","File  stat ","File  File  stat  "]}," CHM initialize":{"type":"method","name":"initialize","children":[],"call":[" check_for_html_help_workshop ","@options op_name "]}," CHM for":{"type":"method","name":"for","children":[],"call":[]}," DOT Edge to_s":{"type":"method","name":"to_s","children":[],"call":["t + + + + + ","t + + + + ","t + + + ","t + + ","(send\n  (send\n    (ivar :@options) :to_a) :collect) compact join ","(send\n  (send\n    (ivar :@options) :to_a) :collect) compact ","i [] ","t + ","i [] != ","@options to_a collect ","@options to_a "," to "]}," DOT Edge initialize":{"type":"method","name":"initialize","children":[],"call":["params [] "]}," DOT Digraph initialize":{"type":"method","name":"initialize","children":[],"call":[]}," DOT Subgraph to_s":{"type":"method","name":"to_s","children":[],"call":["hdr + + + + ","hdr + + + ","hdr + + ","hdr + ","(send\n  (ivar :@nodes) :collect) join + ","(send\n  (ivar :@nodes) :collect) join ","i to_s ","t + ","@nodes collect ","(send\n  (send\n    (ivar :@options) :to_a) :collect) compact join + ","(send\n  (send\n    (ivar :@options) :to_a) :collect) compact join ","(send\n  (send\n    (ivar :@options) :to_a) :collect) compact ","t + + ","name != ","@options to_a collect ","@options to_a ","t +  + + + + ","t +  + + + ","t +  + + ","t +  + ","(send\n  (ivar :@(send\n  (ivar :@nodes) :collect) join + ) :collect) join + ","(send\n  (ivar :@(send\n  (ivar :@nodes) :collect) join + ) :collect) join ","@(send\n  (ivar :@nodes) :collect) join +  collect ","(send\n  (send\n    (ivar :@(send\n  (send\n    (ivar :@options) :to_a) :collect) compact join + ) :to_a) :collect) compact join + ","(send\n  (send\n    (ivar :@(send\n  (send\n    (ivar :@options) :to_a) :collect) compact join + ) :to_a) :collect) compact join ","(send\n  (send\n    (ivar :@(send\n  (send\n    (ivar :@options) :to_a) :collect) compact join + ) :to_a) :collect) compact ","@(send\n  (send\n    (ivar :@options) :to_a) :collect) compact join +  to_a collect ","@(send\n  (send\n    (ivar :@options) :to_a) :collect) compact join +  to_a "]}," DOT Subgraph pop":{"type":"method","name":"pop","children":[],"call":["@nodes pop "]}," DOT Subgraph push":{"type":"method","name":"push","children":[],"call":["@nodes push "]}," DOT Subgraph <<":{"type":"method","name":"<<","children":[],"call":["@nodes << "]}," DOT Subgraph each_node":{"type":"method","name":"each_node","children":[],"call":["@nodes each "]}," DOT Subgraph initialize":{"type":"method","name":"initialize","children":[],"call":["params [] "]}," DOT Node to_s":{"type":"method","name":"to_s","children":[],"call":["t + + + + + + ","t + + + + + ","t + + + + ","t + + + ","label != ","t + + ","(send\n  (send\n    (ivar :@options) :to_a) :collect) compact join ","(send\n  (send\n    (ivar :@options) :to_a) :collect) compact ","i [] ","t + ","i [] != ","@options to_a collect ","@options to_a ","t + + + + + + + + + + + + ","t + + + + + + + + + + + ","t + + + + + + + + + + ","t + + + + + + + + + ","t + + + + + + + + ","t + + + + + + + ","(send\n  (ivar :@ports) :collect) join ","i to_s ","@ports collect ","@options [] ","@ports length == ","@ports length ","@options [] != ","t + + + + + + + + + + + +  != "]}," DOT Node pop":{"type":"method","name":"pop","children":[],"call":["@ports pop "]}," DOT Node push":{"type":"method","name":"push","children":[],"call":["@ports push "]}," DOT Node <<":{"type":"method","name":"<<","children":[],"call":["@ports << "]}," DOT Node each_port":{"type":"method","name":"each_port","children":[],"call":["@ports each "]}," DOT Node initialize":{"type":"method","name":"initialize","children":[],"call":["params [] "]}," DOT Port to_s":{"type":"method","name":"to_s","children":[],"call":["(if\n  (and\n    (ivar :@name)\n    (send\n      (ivar :@name) :!=\n      (str \"\")))\n  (dstr\n    (str \"<\")\n    (begin\n      (ivar :@name))\n    (str \">\"))\n  (str \"\")) + ","@name != "]}," DOT Port initialize":{"type":"method","name":"initialize","children":[],"call":["params [] "]}," DOT Element each_option_pair":{"type":"method","name":"each_option_pair","children":[],"call":["@options each_pair "]}," DOT Element each_option":{"type":"method","name":"each_option","children":[],"call":["@options each "]}," DOT Element initialize":{"type":"method","name":"initialize","children":[],"call":["@options [] ","@name != ","@options []= ","params [] ","option_list each ","params []  != "]}," DOT SimpleElement to_s":{"type":"method","name":"to_s","children":[],"call":[]}," DOT SimpleElement initialize":{"type":"method","name":"initialize","children":[],"call":["params [] "]}," RDoc Diagram wrap_in_image_map":{"type":"method","name":"wrap_in_image_map","children":[],"call":["res << ","ys max ","xs max ","ys min ","xs min ","4 to_i ","2 to_i ","3 to_i ","1 to_i ","$stderr puts ","area =~ ","dot_map split each ","dot_map split ","dot_map empty? ! ","dot_map empty? "]}," RDoc Diagram convert_to_png":{"type":"method","name":"convert_to_png","children":[],"call":["@diagram_cache []= "," wrap_in_image_map "," system ","f << << ","f << ","File  open ","$stderr flush ","$stderr print ","@options quiet ","dotfile + + ","dotfile + ","File  join ","@options image_format ","@diagram_cache [] ","graph to_s ","dotfile + + file + + ","File  join  + + ","dotfile + + file + ","File  join  + "]}," RDoc Diagram add_classes":{"type":"method","name":"add_classes","children":[],"call":[" draw_module ","container modules each ","container modules ","@global_graph << ","DOT Edge  new ","cl full_name gsub ","cl full_name ","sclass_full_name gsub ","@global_names << ","DOT Node  new ","File  join + ","File  join ","sclass_full_name split ","@global_names include? ","@local_names include? "," find_full_name ","sclass == ","sclass nil? ","cl superclass ","m_full_name gsub ","m_full_name split ","m name ","cl includes each ","cl includes ","container classes each_with_index ","container classes ","container classes empty? ","graph << ","files each_value ","files [] push ","files [] ","label << ","\\n[ + + ","\\n[ + ","(send\n  (send\n    (lvar :cl) :in_files) :collect) sort join ","(send\n  (send\n    (lvar :cl) :in_files) :collect) sort ","i file_relative_name ","cl in_files collect ","cl in_files ","cl in_files length > ","cl in_files length ","cl name dup ","cl name ","cl http_url ","cl name [] == ","cl name [] ","cl name == ","files []= ","DOT Subgraph  new ","last_file == ","files include? ! ","files include? ","cl in_files [] file_relative_name ","cl in_files [] ","container modules empty? ","container full_name gsub ","container full_name ","@options fileboxes ","i relative_name ","cl in_files [] relative_name ","DOT Node  new ontainer modules eaDOT Node  new h ","DOT Node  new ontainer modules ","DOT Node  new l full_name gsub ","DOT Node  new l full_name "," find_full_name  gsub ","cl superclass _full_name gsub ","sDOT Node  new lass_full_name gsub "," find_full_name  split ","cl superclass _full_name split ","sDOT Node  new lass_full_name split ","@global_names inDOT Node  new lude? ","@loDOT Node  new al_names inDOT Node  new lude? ","cl superclass  == ","sDOT Node  new lass == ","cl superclass  nil? ","sDOT Node  new lass nil? ","DOT Node  new l superDOT Node  new lass ","DOT Node  new l inDOT Node  new ludes eaDOT Node  new h ","DOT Node  new l inDOT Node  new ludes ","DOT Node  new ontainer DOT Node  new lasses eaDOT Node  new h_with_index ","DOT Node  new ontainer DOT Node  new lasses ","DOT Node  new ontainer DOT Node  new lasses empty? ","files eaDOT Node  new h_value ","cl name dup  << ","(send\n  (send\n    (lvar :DOT Node  new l) :in_files) :DOT Node  new olleDOT Node  new t) sort join ","(send\n  (send\n    (lvar :DOT Node  new l) :in_files) :DOT Node  new olleDOT Node  new t) sort ","DOT Node  new l in_files DOT Node  new olleDOT Node  new t ","DOT Node  new l in_files ","DOT Node  new l in_files length > ","DOT Node  new l in_files length ","DOT Node  new l name dup ","DOT Node  new l name ","cl http_File  join +  ","cl http_cl http_url  ","DOT Node  new l http_url ","DOT Node  new l name [] == ","DOT Node  new l name [] ","DOT Node  new l name == ","cl in_files [] file_relative_name  == ","cl in_files [] relative_name  == ","files inDOT Node  new lude? ! ","files inDOT Node  new lude? ","DOT Node  new l in_files [] file_relative_name ","DOT Node  new l in_files [] ","DOT Node  new ontainer modules empty? ","DOT Node  new ontainer full_name gsub ","DOT Node  new ontainer full_name ","DOT Node  new l in_files [] relative_name "]}," RDoc Diagram draw_module":{"type":"method","name":"draw_module","children":[],"call":["@global_graph << ","DOT Edge  new ","mod full_name gsub ","mod full_name ","m_full_name gsub ","@global_names << ","DOT Node  new ","File  join + ","File  join ","m_full_name split ","@global_names include? ","@local_names include? "," find_full_name ","inc name ","mod includes each ","mod includes ","mod includes empty? ","graph << "," add_classes ","@done_modules []= ","DOT Subgraph  new ","mod name ","mod http_url ","toplevel ! ","@done_modules [] ","top_level ! ","DOT Subgraph  new od full_naDOT Subgraph  new e gsub ","DOT Subgraph  new od full_naDOT Subgraph  new e "," find_full_name  gsub ","DOT Subgraph  new _full_naDOT Subgraph  new e gsub ","@global_naDOT Subgraph  new es << "," find_full_name  split ","DOT Subgraph  new _full_naDOT Subgraph  new e split ","@global_naDOT Subgraph  new es include? ","@local_naDOT Subgraph  new es include? "," find_full_naDOT Subgraph  new e ","inc naDOT Subgraph  new e ","DOT Subgraph  new od includes each ","DOT Subgraph  new od includes ","DOT Subgraph  new od includes eDOT Subgraph  new pty? ","@done_DOT Subgraph  new odules []= ","DOT Subgraph  new od naDOT Subgraph  new e ","mod http_File  join +  ","mod http_mod http_url  ","DOT Subgraph  new od http_url ","@done_DOT Subgraph  new odules [] "]}," RDoc Diagram find_full_name":{"type":"method","name":"find_full_name","children":[],"call":["@local_names include? ","mod_path pop + + ","mod_path pop + ","mod_path pop ","mod_path empty? ","mod_path nil? ","mod full_name split [] ","mod full_name split ","mod full_name ","name dup ","mod full_name split []  pop + + ","mod full_name split []  pop + ","mod full_name split []  pop ","mod full_name split []  empty? ","mod full_name split []  nil? ","mod mod_path pop + +  split [] ","mod name dup  split [] ","mod mod_path pop + +  split ","mod name dup  split ","mod mod_path pop + +  ","mod name dup  "]}," RDoc Diagram find_names":{"type":"method","name":"find_names","children":[],"call":["(send\n  (lvar :mod) :full_name) + + ","(send\n  (send\n    (lvar :mod) :modules) :collect) flatten "," find_names ","mod modules collect ","mod modules ","(send\n  (lvar :mod) :full_name) + ","cl full_name ","mod classes collect ","mod classes ","mod full_name "]}," RDoc Diagram draw":{"type":"method","name":"draw","children":[],"call":["$stderr puts ","@options quiet ","mod diagram= "," convert_to_png "," draw_module ","graph << ","DOT Node  new ","DOT Digraph  new "," find_names ","i modules each_with_index ","i modules ","i diagram= "," add_classes ","i file_relative_name ","i modules each ","@info each_with_index ","$stderr flush ","$stderr print ","i relative_name ","DOT Digraph  new  << ","DOT DiDOT Digraph  new   new "]}," RDoc Diagram initialize":{"type":"method","name":"initialize","children":[],"call":["FileUtils  mkdir_p "]}," RDoc Include initialize":{"type":"method","name":"initialize","children":[],"call":[" comment= "]}," RDoc Require initialize":{"type":"method","name":"initialize","children":[],"call":[" comment= ","name gsub "]}," RDoc Attr <=>":{"type":"method","name":"<=>","children":[],"call":[" name <=> ","other name "," name "]}," RDoc Attr to_s":{"type":"method","name":"to_s","children":[],"call":[" comment "," rw "," name "]}," RDoc Attr initialize":{"type":"method","name":"initialize","children":[],"call":[" comment= "]}," RDoc Constant initialize":{"type":"method","name":"initialize","children":[],"call":[" comment= "]}," RDoc Alias to_s":{"type":"method","name":"to_s","children":[],"call":[" comment "," new_name "," old_name "]}," RDoc Alias initialize":{"type":"method","name":"initialize","children":[],"call":[" comment= "]}," RDoc AnyMethod add_alias":{"type":"method","name":"add_alias","children":[],"call":["@aliases << "]}," RDoc AnyMethod param_seq":{"type":"method","name":"param_seq","children":[],"call":["p << ","block sub! sub! ","block sub! ","block [] == ","block [] ","block tr squeeze ","block tr ","block gsub! ","$stderr puts ","p sub! "," block_params ","( + + ","( + ","p [] == ","p [] ","p tr squeeze ","p tr "," params gsub "," params ","params << ","params sub! "," p [] == "," p [] "," p ","params tr squeeze ","params tr ","params gsub ","( + +  << ","p tr squeeze  << "," params gsub  << ","block tr squeeze  sub! sub! "," block_params  sub! sub! ","block tr squeeze  sub! "," block_params  sub! ","block tr squeeze  [] == "," block_params  [] == ","block tr squeeze  [] "," block_params  [] ","block tr squeeze  tr squeeze "," block_params  tr squeeze ","block tr squeeze  tr "," block_params  tr ","block tr squeeze  gsub! "," block_params  gsub! ","$stderr ( + + uts ","$stderr p tr squeeze uts ","$stderr  params gsub uts ","( + +  sub! ","p tr squeeze  sub! "," params gsub  sub! "," block tr squeeze _params ","  block_params _params "," block_( + + arams "," block_p tr squeeze arams "," block_ params gsub arams "," block_params tr squeeze  "," block_params gsub  ","( + +  [] == ","p tr squeeze  [] == "," params gsub  [] == ","( + +  [] ","p tr squeeze  [] "," params gsub  [] ","( + +  tr squeeze ","p tr squeeze  tr squeeze "," params gsub  tr squeeze ","( + +  tr ","p tr squeeze  tr "," params gsub  tr "," ( + + arams gsub "," p tr squeeze arams gsub ","  params gsub arams gsub "," params tr squeeze  gsub "," params gsub  gsub "," ( + + arams "," p tr squeeze arams ","  params gsub arams "," params tr squeeze  "," params gsub  ","( + + arams << ","p tr squeeze arams << "," params gsub arams << ","params tr squeeze  << ","params gsub  << ","( + + arams sub! ","p tr squeeze arams sub! "," params gsub arams sub! ","params tr squeeze  sub! ","params gsub  sub! "," ( + +  [] == "," p tr squeeze  [] == ","  params gsub  [] == "," ( + +  [] "," p tr squeeze  [] ","  params gsub  [] "," ( + +  "," p tr squeeze  ","  params gsub  ","( + + arams tr squeeze ","p tr squeeze arams tr squeeze "," params gsub arams tr squeeze ","params tr squeeze  tr squeeze ","params gsub  tr squeeze ","( + + arams tr ","p tr squeeze arams tr "," params gsub arams tr ","params tr squeeze  tr ","params gsub  tr ","( + + arams gsub ","p tr squeeze arams gsub "," params gsub arams gsub ","params tr squeeze  gsub ","params gsub  gsub "]}," RDoc AnyMethod to_s":{"type":"method","name":"to_s","children":[],"call":["res << ","@comment to_s "," class name + + + + + "," class name + + + + "," class name + + + "," class name + + "," class name + "," class name "," class "," class name + + + + +  << "]}," RDoc AnyMethod <=>":{"type":"method","name":"<=>","children":[],"call":["@name <=> ","other name "]}," RDoc AnyMethod initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RDoc NormalModule is_module?":{"type":"method","name":"is_module?","children":[],"call":[]}," RDoc ClassModule find_class_named":{"type":"method","name":"find_class_named","children":[],"call":["c find_class_named ","@classes each_value "," full_name == "," full_name "]}," RDoc ClassModule to_s":{"type":"method","name":"to_s","children":[],"call":["res << ","@comment to_s "," class name + + "," class name + "," class name "," class "," class name + +  << "]}," RDoc ClassModule is_module?":{"type":"method","name":"is_module?","children":[],"call":[]}," RDoc ClassModule http_url":{"type":"method","name":"http_url","children":[],"call":["File  join + ","File  join "," full_name split "," full_name "]}," RDoc ClassModule full_name":{"type":"method","name":"full_name","children":[],"call":["@parent full_name + + ","@parent full_name + ","@parent full_name "]}," RDoc ClassModule initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RDoc TopLevel find_module_named":{"type":"method","name":"find_module_named","children":[],"call":[" find_enclosing_module_named "," find_class_or_module_named "]}," RDoc TopLevel find_class_or_module_named":{"type":"method","name":"find_class_or_module_named","children":[],"call":["m name == ","m name ","@@all_modules each_value ","c name == ","c name ","@@all_classes each_value ","@@lock synchronize "]}," RDoc TopLevel find_local_symbol":{"type":"method","name":"find_local_symbol","children":[],"call":[" find_class_or_module_named "]}," RDoc TopLevel find_class_named":{"type":"method","name":"find_class_named","children":[],"call":[]}," RDoc TopLevel all_classes_and_modules":{"type":"method","name":"all_classes_and_modules","children":[],"call":[]}," RDoc TopLevel add_class_or_module":{"type":"method","name":"add_class_or_module","children":[],"call":["cls parent= ","collection []= "," puts ","all []= ","class_type new ","cls ! ","all [] ","class_type == ","collection [] ","cls full_name ","cls superclass= ","cls module? ","cls superclass ! ","cls superclass ","@@lock synchronize ","class_type new  parent= ","all []  parent= ","collection []  parent= ","class_type new  ! ","all []  ! ","collection []  ! ","class_type new  full_name ","all []  full_name ","collection []  full_name ","class_type new  superclass= ","all []  superclass= ","collection []  superclass= ","class_type new  module? ","all []  module? ","collection []  module? ","class_type new  superclass ! ","all []  superclass ! ","collection []  superclass ! ","class_type new  superclass ","all []  superclass ","collection []  superclass "]}," RDoc TopLevel full_name":{"type":"method","name":"full_name","children":[],"call":[]}," RDoc TopLevel initialize":{"type":"method","name":"initialize","children":[],"call":["File  stat ","@@all_files []= ","@@lock synchronize "]}," RDoc TopLevel reset":{"type":"method","name":"reset","children":[],"call":[]}," RDoc Context find_attribute_named":{"type":"method","name":"find_attribute_named","children":[],"call":["m name == ","m name ","@attributes find "]}," RDoc Context find_constant_named":{"type":"method","name":"find_constant_named","children":[],"call":["m name == ","m name ","@constants find "]}," RDoc Context find_instance_method_named":{"type":"method","name":"find_instance_method_named","children":[],"call":["meth singleton ! ","meth singleton ","meth name == ","meth name ","@method_list find "]}," RDoc Context find_method_named":{"type":"method","name":"find_method_named","children":[],"call":["meth name == ","meth name ","@method_list find "]}," RDoc Context set_current_section":{"type":"method","name":"set_current_section","children":[],"call":["@sections << ","Section  new "]}," RDoc Context find_local_symbol":{"type":"method","name":"find_local_symbol","children":[],"call":[" find_module_named "," find_attribute_named "," find_constant_named "," find_method_named "," find_file_named "]}," RDoc Context find_symbol":{"type":"method","name":"find_symbol","children":[],"call":["result find_local_symbol "," fail ","result respond_to? ! ","result respond_to? ","result parent ","result name != ","result name "," parent ","symbol =~ ","result nil? "," find_local_symbol "," find_module_named ","result find_module_named ","modules each ","modules shift ","modules empty? ","symbol split "," toplevel find_symbol "," toplevel ","result find_local_symbol  find_local_symbol ","result parent  find_local_symbol "," parent  find_local_symbol "," find_local_symbol  find_local_symbol "," find_module_named  find_local_symbol ","result find_module_named  find_local_symbol "," toplevel find_symbol  find_local_symbol ","result find_local_symbol  respond_to? ! ","result parent  respond_to? ! "," parent  respond_to? ! "," find_local_symbol  respond_to? ! "," find_module_named  respond_to? ! ","result find_module_named  respond_to? ! "," toplevel find_symbol  respond_to? ! ","result find_local_symbol  respond_to? ","result parent  respond_to? "," parent  respond_to? "," find_local_symbol  respond_to? "," find_module_named  respond_to? ","result find_module_named  respond_to? "," toplevel find_symbol  respond_to? ","result find_local_symbol  parent ","result parent  parent "," parent  parent "," find_local_symbol  parent "," find_module_named  parent ","result find_module_named  parent "," toplevel find_symbol  parent ","result find_local_symbol  name != ","result parent  name != "," parent  name != "," find_local_symbol  name != "," find_module_named  name != ","result find_module_named  name != "," toplevel find_symbol  name != ","result find_local_symbol  name ","result parent  name "," parent  name "," find_local_symbol  name "," find_module_named  name ","result find_module_named  name "," toplevel find_symbol  name ","result find_local_symbol  nil? ","result parent  nil? "," parent  nil? "," find_local_symbol  nil? "," find_module_named  nil? ","result find_module_named  nil? "," toplevel find_symbol  nil? "," find_modules shift d ","result find_local_symbol  find_module_named ","result parent  find_module_named "," parent  find_module_named "," find_local_symbol  find_module_named "," find_module_named  find_module_named ","result find_module_named  find_module_named "," toplevel find_symbol  find_module_named ","result find_modules shift d ","symbol split  each ","symbol split  shift ","symbol split  empty? "]}," RDoc Context <=>":{"type":"method","name":"<=>","children":[],"call":[" name <=> ","other name "," name "]}," RDoc Context toplevel":{"type":"method","name":"toplevel","children":[],"call":["@toplevel parent ","TopLevel  === ","@toplevel parent  parent "]}," RDoc Context each_constant":{"type":"method","name":"each_constant","children":[],"call":["@constants each "]}," RDoc Context each_attribute":{"type":"method","name":"each_attribute","children":[],"call":["@attributes each "]}," RDoc Context each_method":{"type":"method","name":"each_method","children":[],"call":["@method_list each "]}," RDoc Context each_classmodule":{"type":"method","name":"each_classmodule","children":[],"call":["@classes each_value ","@modules each_value "]}," RDoc Context find_enclosing_module_named":{"type":"method","name":"find_enclosing_module_named","children":[],"call":[" parent find_module_named "," parent "]}," RDoc Context find_module_named":{"type":"method","name":"find_module_named","children":[],"call":[" find_enclosing_module_named ","@classes [] ","@modules [] "," name == "," name "]}," RDoc Context initialize_classes_and_modules":{"type":"method","name":"initialize_classes_and_modules","children":[],"call":[]}," RDoc Context remove_classes_and_modules":{"type":"method","name":"remove_classes_and_modules","children":[],"call":[" initialize_classes_and_modules "]}," RDoc Context initialize_methods_etc":{"type":"method","name":"initialize_methods_etc","children":[],"call":[]}," RDoc Context remove_methods_etc":{"type":"method","name":"remove_methods_etc","children":[],"call":[" initialize_methods_etc "]}," RDoc Context add_to":{"type":"method","name":"add_to","children":[],"call":["thing section= ","thing parent= ","array << ","@done_documenting ! "]}," RDoc Context add_class_or_module":{"type":"method","name":"add_class_or_module","children":[],"call":["cls section= ","cls parent= ","collection []= ","@done_documenting ! "," puts ","class_type new ","collection [] ","cls superclass= ","cls module? ","class_type new  section= ","collection []  section= ","class_type new  parent= ","collection []  parent= ","class_type new  superclass= ","collection []  superclass= ","class_type new  module? ","collection []  module? "]}," RDoc Context add_require":{"type":"method","name":"add_require","children":[],"call":[" parent add_require "," parent "," add_to "," kind_of? ","TopLevel  === "]}," RDoc Context add_constant":{"type":"method","name":"add_constant","children":[],"call":[" add_to "]}," RDoc Context add_include":{"type":"method","name":"add_include","children":[],"call":[" add_to "]}," RDoc Context add_alias":{"type":"method","name":"add_alias","children":[],"call":[" add_to "," add_method ","meth add_alias ","new_meth comment= ","meth name ","new_meth params= ","meth params ","new_meth singleton= ","meth singleton ","new_meth is_alias_for= ","AnyMethod  new ","an_alias new_name ","an_alias text "," find_instance_method_named ","an_alias old_name ","unmatched_alias_list push ","@unmatched_alias_lists [] "," add_alias_impl "," add_ find_instance_method_named od "," find_instance_method_named  add_alias ","AnyMethod  new  comment= ","new_ find_instance_method_named  comment= "," find_instance_method_named  name ","AnyMethod  new  params= ","new_ find_instance_method_named  params= "," find_instance_method_named  params ","AnyMethod  new  singleton= ","new_ find_instance_method_named  singleton= "," find_instance_method_named  singleton ","AnyMethod  new  is_alias_for= ","new_ find_instance_method_named  is_alias_for= "," find_instance_ find_instance_method_named od_named "]}," RDoc Context add_attribute":{"type":"method","name":"add_attribute","children":[],"call":[" add_to "]}," RDoc Context add_method":{"type":"method","name":"add_method","children":[],"call":[" add_to ","a_method visibility= "," puts ","a_method name ","@unmatched_alias_lists delete ","@aliases delete "," add_alias_impl ","unmatched_alias_list each ","@unmatched_alias_lists [] ","@@unmatched_alias_lists [] s delete ","@unmatched_alias_lists []  each ","@@unmatched_alias_lists [] s [] "]}," RDoc Context add_module":{"type":"method","name":"add_module","children":[],"call":[" add_class_or_module "]}," RDoc Context add_class":{"type":"method","name":"add_class","children":[],"call":[" add_class_or_module ","klass modules_hash update ","mod modules_hash ","klass modules_hash ","klass classes_hash update ","mod classes_hash ","klass classes_hash ","@modules delete ","klass method_list concat ","mod method_list ","klass method_list "," add_class_or_@modules delete ule ","klass @modules delete ules_hash update "," add_class_or_module  modules_hash update ","@modules delete  @modules delete ules_hash ","klass @modules delete ules_hash "," add_class_or_module  modules_hash "," add_class_or_module  classes_hash update ","@modules delete  classes_hash "," add_class_or_module  classes_hash ","@@modules delete ules delete "," add_class_or_module  method_list concat ","@modules delete  method_list "," add_class_or_module  method_list "]}," RDoc Context defined_in?":{"type":"method","name":"defined_in?","children":[],"call":["@in_files include? "]}," RDoc Context record_location":{"type":"method","name":"record_location","children":[],"call":["@in_files << ","@in_files include? "]}," RDoc Context set_visibility_for":{"type":"method","name":"set_visibility_for","children":[],"call":["a visibility= ","methods include? ","a name ","@attributes each ","count == ","methods size ","m visibility= ","m singleton == ","m singleton ","m name ","@method_list each "," methods_matching "]}," RDoc Context ongoing_visibility=":{"type":"method","name":"ongoing_visibility=","children":[],"call":[]}," RDoc Context modules":{"type":"method","name":"modules","children":[],"call":["@modules values "]}," RDoc Context classes":{"type":"method","name":"classes","children":[],"call":["@classes values "]}," RDoc Context initialize":{"type":"method","name":"initialize","children":[],"call":[" initialize_classes_and_modules "," initialize_methods_etc ","Section  new "]}," RDoc Context Section set_comment":{"type":"method","name":"set_comment","children":[],"call":["@comment empty? ","rest sub ","start chomp ","start empty? ","comment =~ ","rest sub  empty? "]}," RDoc Context Section initialize":{"type":"method","name":"initialize","children":[],"call":[" set_comment ","@@sequence dup ","@@sequence succ! ","@@sequence_lock synchronize ","@@@sequence dup  dup ","@@@sequence dup  succ! ","@@@sequence dup _lock synchronize "]}," RDoc CodeObject attr_overridable":{"type":"method","name":"attr_overridable","children":[],"call":[]}," RDoc CodeObject comment=":{"type":"method","name":"comment=","children":[],"call":["comment empty? "]}," RDoc CodeObject initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RDoc CodeObject remove_methods_etc":{"type":"method","name":"remove_methods_etc","children":[],"call":[]}," RDoc CodeObject remove_classes_and_modules":{"type":"method","name":"remove_classes_and_modules","children":[],"call":[]}," RDoc CodeObject document_children=":{"type":"method","name":"document_children=","children":[],"call":[" remove_classes_and_modules ","val ! "]}," RDoc CodeObject stop_doc":{"type":"method","name":"stop_doc","children":[],"call":[]}," RDoc CodeObject start_doc":{"type":"method","name":"start_doc","children":[],"call":[]}," RDoc CodeObject document_self=":{"type":"method","name":"document_self=","children":[],"call":[" remove_methods_etc ","val ! "]}," Stats Verbose print_module":{"type":"method","name":"print_module","children":[],"call":[" puts ","mod full_name "," nodoc "]}," Stats Verbose print_method":{"type":"method","name":"print_method","children":[],"call":[" puts ","method name ","method singleton "," nodoc "]}," Stats Verbose print_file":{"type":"method","name":"print_file","children":[],"call":[" puts "]}," Stats Verbose print_class":{"type":"method","name":"print_class","children":[],"call":[" puts ","klass full_name "," nodoc "]}," Stats Verbose print_alias":{"type":"method","name":"print_alias","children":[],"call":[" puts ","as old_name ","as new_name "," nodoc "]}," Stats Normal print_module":{"type":"method","name":"print_module","children":[],"call":[" print "]}," Stats Normal print_method":{"type":"method","name":"print_method","children":[],"call":[" print "]}," Stats Normal print_file":{"type":"method","name":"print_file","children":[],"call":[" print "," puts ","$stdout flush ","$stdout print ","line << ","  * ","padding > ","terminal_width - ","line size ","filename []= ","filename [] ","filename size - ","filename size ","filename size > ","progress_bar size ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"COLUMNS\"))\n  (int 80)) to_i ","ENV  [] ","$stdout tty? "," sprintf ","files_so_far + ","100 * / ","100 * ","$stdout puts ","terminal_width -  > ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"COLUMNS\"))\n  (int 80)) to_i  - ","filename []  []= ","filename []  [] ","filename []  size - ","filename []  size ","filename []  size > "," sprintf  size "]}," Stats Normal print_class":{"type":"method","name":"print_class","children":[],"call":[" print "]}," Stats Normal print_alias":{"type":"method","name":"print_alias","children":[],"call":[" print "]}," Stats Quiet print_module":{"type":"method","name":"print_module","children":[],"call":[]}," Stats Quiet print_method":{"type":"method","name":"print_method","children":[],"call":[]}," Stats Quiet print_file":{"type":"method","name":"print_file","children":[],"call":[]}," Stats Quiet print_class":{"type":"method","name":"print_class","children":[],"call":[]}," Stats Quiet print_alias":{"type":"method","name":"print_alias","children":[],"call":[]}," Stats add_module":{"type":"method","name":"add_module","children":[],"call":["@display print_module ","@lock synchronize "]}," Stats add_method":{"type":"method","name":"add_method","children":[],"call":["@display print_method ","@lock synchronize ","method comment empty? ","method comment ","method document_self "]}," Stats add_file":{"type":"method","name":"add_file","children":[],"call":["@display print_file ","@lock synchronize "]}," Stats add_class":{"type":"method","name":"add_class","children":[],"call":["@display print_class ","@lock synchronize "]}," Stats add_alias":{"type":"method","name":"add_alias","children":[],"call":["@display print_alias ","@lock synchronize ","as comment empty? ","as comment ","as document_self "]}," Driver parse_name":{"type":"method","name":"parse_name","children":[],"call":["parts join ","parts pop ","parts last !~ ","parts last ","parts [] != ","parts [] ","name split ","parts last =~ ","parts length == ","parts length ","parts first =~ ","parts first ","parts shift ","parts [] == ","name split  join ","name split  pop ","name split  last !~ ","name split  last ","name split  [] != ","name split  [] ","name split  last =~ ","name split  length == ","name split  length ","name split  first =~ ","name split  first ","name split  shift ","name split  [] == "]}," Driver lookup_method":{"type":"method","name":"lookup_method","children":[],"call":["cache [] ","name gsub "," load_cache_for "," filter_methods "," raise ","found empty? "," load_methods_matching ","NotFoundError  new ","DidYouMean SpellChecker  new correct ","DidYouMean SpellChecker  new ","methods uniq ","methods push ","store instance_methods [] ","store instance_methods ","(sym :instance) include? ","store class_methods [] ","store class_methods ","(sym :class) include? "," find_methods "," parse_name "," check_did_you_mean "," lambda "," load_cache_for  [] "," load_ load_cache_for _for "," filter_cache [] s "," filter_methods uniq  "," load_methods_matching  empty? "," load_cache [] s_matching "," load_methods uniq _matching ","cache [] s uniq ","methods uniq  uniq ","cache [] s push ","methods uniq  push ","store instance_cache [] s [] ","store instance_methods uniq  [] ","store instance_cache [] s ","store instance_methods uniq  ","store class_cache [] s [] ","store class_methods uniq  [] ","store class_cache [] s ","store class_methods uniq  "," find_cache [] s "," find_methods uniq  "]}," Driver lookup_ancestor":{"type":"method","name":"lookup_ancestor","children":[],"call":[" lookup_ancestor ","cache superclass ","ancestors [] ","ancestors index + ","ancestors index ","ancestors << ","ancestors push ","inc [] ","cache includes map ","cache includes "," class_cache [] "," class_cache ","klass == ","orig_klass == "," lookup_ancestors []  "," class_cache []  superclass ","ancestors [] s [] ","ancestors [] s index + ","ancestors [] s index ","ancestors [] s << ","ancestors [] s push "," class_cache []  includes map "," class_cache []  includes "," class_ class_cache []  [] "," class_ class_cache []  "]}," Driver NotFoundError message":{"type":"method","name":"message","children":[],"call":["@suggestions join ","@suggestions empty? ! ","@suggestions empty? ","suggestions join ","suggestions empty? ! ","suggestions empty? "]}," Driver Hash merge_enums":{"type":"method","name":"merge_enums","children":[],"call":[" []= "," [] update "," [] "," [] empty? ","String  === ","other each "]}," Driver Hash method_missing":{"type":"method","name":"method_missing","children":[],"call":[" [] ","method to_s "]}," Driver Hash convert":{"type":"method","name":"convert","children":[],"call":[]}," Parser initialize":{"type":"method","name":"initialize","children":[],"call":["@preprocess options= ","RDoc Markup PreProcess  new ","@options rdoc_include ","@top_level parser= "," class ","@top_level store "," respond_to? ","Object  const_defined? ","RDoc Markup PreProcess  new  options= "]}," Parser parse_files_matching":{"type":"method","name":"parse_files_matching","children":[],"call":[]}," Parser for":{"type":"method","name":"for","children":[],"call":[]}," Parser can_parse":{"type":"method","name":"can_parse","children":[],"call":[]}," Parser alias_extension":{"type":"method","name":"alias_extension","children":[],"call":[]}," Simple remove_private_comments":{"type":"method","name":"remove_private_comments","children":[],"call":["comment gsub sub ","comment gsub ","text gsub sub ","text gsub "]}," Simple scan":{"type":"method","name":"scan","children":[],"call":["@top_level comment= "," remove_private_comments ","@top_level parser= "," class "," remove_coding_comment ","RDoc Comment  new "," remove_private_comment ","@top_level  remove_private_comments = ","@top_level  remove_coding_comment = ","@top_level RDoc Comment  new = ","@top_level  remove_private_comment = "," remove_private_ remove_private_comments s "," remove_private_ remove_coding_comment s "," remove_private_RDoc Comment  new s "," remove_private_ remove_private_comment s "," remove_coding_ remove_private_comments  "," remove_coding_ remove_coding_comment  "," remove_coding_RDoc Comment  new  "," remove_coding_ remove_private_comment  "," remove_private_ remove_private_comments  "," remove_private_ remove_coding_comment  "," remove_private_RDoc Comment  new  "," remove_private_ remove_private_comment  "]}," Simple initialize":{"type":"method","name":"initialize","children":[],"call":[" warn ","preprocess handle ","RDoc Markup PreProcess  new ","@options rdoc_include ","top_level metadata []= ","top_level metadata ","RDoc Markup PreProcess  new  handle "]}," Ruby warn":{"type":"method","name":"warn","children":[],"call":["$stderr puts "," make_message ","@options quiet ","@options warn "]}," Ruby unget_tk":{"type":"method","name":"unget_tk","children":[],"call":["obj pop_token ","@token_listeners each ","@unget_read unshift ","@read pop ","@tokens unshift "]}," Ruby skip_tkspace_comment":{"type":"method","name":"skip_tkspace_comment","children":[],"call":[" get_tk ","TkCOMMENT  === "," peek_tk "," skip_tkspace "," loop ","on_embdoc != ","next_tk [] ","on_comment != ","next_tk nil? "," skip_tkspace_without_nl "," peek_tk  [] "," peek_tk  nil? "]}," Ruby skip_tkspace":{"type":"method","name":"skip_tkspace","children":[],"call":[" unget_tk ","tokens push ","TkNL  === ","TkSPACE  === "," get_tk "," unget_ get_tk  "," get_ get_tk  "]}," Ruby skip_method":{"type":"method","name":"skip_method","children":[],"call":[" parse_statements "," parse_method_parameters ","RDoc AnyMethod  new "," parse_RDoc AnyMethod  new od_parameters "]}," Ruby skip_for_variable":{"type":"method","name":"skip_for_variable","children":[],"call":[" unget_tk ","TkIN  === "," get_tk "," skip_tkspace ","in == ","tk [] ","on_kw == "," skip_tkspace_without_nl "," unget_ get_tk  "," get_ get_tk  "," skip_ get_tk space "," get_tk  [] "," skip_ get_tk space_without_nl "]}," Ruby skip_optional_do_after_expression":{"type":"method","name":"skip_optional_do_after_expression","children":[],"call":[" get_tk ","TkDO  === "," peek_tk "," skip_tkspace ","@scanner continue ","nest zero? ","@scanner lex_state == ","@scanner lex_state ","end_token == "," loop ","@scanner instance_eval ","b_nest zero? ","@scanner continue= "," get_end_token ","do == "," peek_tk [] ","on_kw == ","\n == ","tk [] [] ","tk [] "," skip_tkspace_without_nl "," get_ get_tk  "," peek_ get_tk  "," skip_ get_tk space "," get_end_token  == "," get_ get_end_token  "," peek_ get_tk  [] "," get_tk  [] [] "," get_tk  [] "," skip_ get_tk space_without_nl "]}," Ruby scan":{"type":"method","name":"scan","children":[],"call":[" raise ","e set_backtrace ","e backtrace [] ","e backtrace ","$stderr puts ","@scanner char_no ","@scanner line_no "," parse_toplevel_statements "," catch "," reset "," parse_top_level_statements ","bytes inspect ","bytes empty? "," class ","@scanner ungetc ","count times ","bytes << ","@scanner getc ","60 times ","20 times ","@scanner [] join ","@scanner [] ","(send\n  (ivar :@scanner) :find_index) - ","tk [] == ","now_line_no + ","tk [] ","@scanner find_index "," peek_tk [] "," peek_tk ","@scanner [] [] ","@scanner size - ","@scanner size ","@scanner_point >= ","@content include? ","code empty? ","(send\n  (send\n    (ivar :@scanner) :[]\n    (irange\n      (lvar :first_tk_index)\n      (lvar :last_tk_index))) :map) join ","t [] ","@scanner [] map ","last_tk_index - ","@scanner getc s inspect ","@scanner getc s empty? ","@scanner getc s << "," peek_tk []  + ","@scanner [] []  + ","(send\n  (send\n    (ivar :@scanner) :[]\n    (irange\n      (lvar :first_tk_index)\n      (lvar :last_tk_index))) :map) join  empty? ","(send\n  (send\n    (ivar :@scanner) :[]\n    (irange\n      (lvar :first_tk_index)\n      (lvar :@scanner size - ))) :map) join ","(send\n  (send\n    (ivar :@scanner) :[]\n    (irange\n      (lvar :first_tk_index)\n      (lvar :last_tk_index - ))) :map) join ","@scanner size -  - ","last_tk_index -  - "]}," Ruby reset":{"type":"method","name":"reset","children":[],"call":[]}," Ruby remove_token_listener":{"type":"method","name":"remove_token_listener","children":[],"call":["@token_listeners delete "]}," Ruby remove_private_comments":{"type":"method","name":"remove_private_comments","children":[],"call":["comment sub! ","comment gsub! ","comment remove_private ","empty force_encoding ","comment encoding ","Object  const_defined? "]}," Ruby read_documentation_modifiers":{"type":"method","name":"read_documentation_modifiers","children":[],"call":["context params= ","dir [] ","context block_params= ","context params sub! ","context params ","context params nil? ","context force_documentation= ","context document_self= ","context document_children= ","dir [] downcase == ","dir [] downcase ","context dont_rename_initialize= "," read_directive ","RDoc Parser  process_directive ","(str \"notnew\") include? ","@preprocess handle_directive "," skip_tkspace "," skip_tkspace_without_nl "," read_directive  [] "," read_directive  [] downcase == "," read_directive  [] downcase "," read_ read_directive ective ","RDoc Parser  process_ read_directive ective ","@preprocess handle_ read_directive ective "]}," Ruby read_directive":{"type":"method","name":"read_directive","children":[],"call":[" unget_tk ","allowed include? ","1 downcase ","tk text =~ ","tk text ","TkCOMMENT  === "," get_tk ","tokens reverse_each ","tokens first ","tokens length == ","tokens length ","tokens << ","on_embdoc == ","tokens first [] ","on_comment == ","tk [] =~ ","tk [] ","def == ","on_kw == ","on_nl == "," unget_ get_tk  "," get_tk  text =~ "," get_tk  text "," get_ get_tk  "," get_tk  [] =~ "," get_tk  [] "]}," Ruby peek_tk":{"type":"method","name":"peek_tk","children":[],"call":[" unget_tk "," get_tk "," unget_ get_tk  "," get_ get_tk  "]}," Ruby peek_read":{"type":"method","name":"peek_read","children":[],"call":["@read join "]}," Ruby parse_yield":{"type":"method","name":"parse_yield","children":[],"call":["method block_params= "," parse_yield_parameters ","@scanner instance_eval "," get_tkread ","method block_params nil? ","method block_params "," parse_method_or_yield_parameters ","@scanner continue= "]}," Ruby parse_yield_parameters":{"type":"method","name":"parse_yield_parameters","children":[],"call":[" parse_method_or_yield_parameters "]}," Ruby parse_visibility":{"type":"method","name":"parse_visibility","children":[],"call":["container set_visibility_for "," parse_symbol_arg ","container add_attribute ","container add_method ","module_functions each ","module_functions << ","s_m visibility= ","s_m singleton= ","RDoc AnyMethod  === ","m dup ","container methods_matching ","vis_type == ","container ongoing_visibility= "," peek_tk "," skip_tkspace_comment "," raise ","tk name ","single == ","s_m record_location ","method visibility= ","new_methods each ","m visibility= ","new_methods << ","m record_location ","m parent != ","m parent "," update_visibility "," get_visibility_information ","container current_line_visibility= ","def == ","ptk [] ","on_kw == ","(str \"if\") include? ","(sym :on_nl) include? "," parse_sym dup bol_arg ","container add_m dup ethod ","m dup odule_functions each ","m dup odule_functions << ","m dup  visibility= ","s_m dup  visibility= ","m dup  singleton= ","s_m dup  singleton= ","m dup  dup ","container methodm dup atching ","container m dup ethods_m dup atching ","tk name  == "," skip_tkspace_com dup m dup ent ","tk nam dup e ","m dup  record_location ","s_m dup  record_location ","m dup ethod visibility= ","new_m dup ethods each ","new_m dup ethods << ","m dup  parent != ","m dup  parent "," get_visibility_inform dup ation "," peek_tk  [] ","(sym dup  :on_nl) include? "]}," Ruby parse_toplevel_statements":{"type":"method","name":"parse_toplevel_statements","children":[],"call":[" parse_statements ","container comment= ","comment empty? "," look_for_directives_in "," collect_first_comment ","container  collect_first_comment = "," collect_first_comment  empty? "," collect_first_ collect_first_comment  "]}," Ruby parse_symbol_in_arg":{"type":"method","name":"parse_symbol_in_arg","children":[],"call":[" warn ","tk inspect "," eval ","@read [] ","tk text sub ","tk text "," get_tk ","on_ident == ","tk [] ","on_dstring == ","tk [] [] ","on_tstring == ","tk [] sub ","on_symbol == "," get_tk  inspect "," get_tk  text sub "," get_tk  text "," get_ get_tk  "," get_tk  [] "," get_tk  [] [] "," get_tk  [] sub "]}," Ruby parse_symbol_arg":{"type":"method","name":"parse_symbol_arg","children":[],"call":["args size >= ","args size ","args push "," parse_symbol_in_arg "," skip_tkspace_comment "," unget_tk ","TkCOMMA  === "," get_tk "," skip_tkspace "," loop "," warn ","tk2 inspect "," parse_symbol_arg_space "," parse_symbol_arg_paren ","tk [] == ","tk [] "," skip_ parse_symbol_in_arg space_comment "," skip_ get_tk space_comment "," unget_ parse_symbol_in_arg  "," unget_ get_tk  "," get_ parse_symbol_in_arg  "," get_ get_tk  "," skip_ parse_symbol_in_arg space "," skip_ get_tk space "," parse_symbol_in_arg 2 inspect "," get_tk 2 inspect "," get_tk  inspect "," parse_symbol_in_arg  [] == "," get_tk  [] == "," parse_symbol_in_arg  [] "," get_tk  [] "]}," Ruby parse_statements":{"type":"method","name":"parse_statements","children":[],"call":[" skip_tkspace "," get_tkread "," peek_tk == "," peek_tk ","container ongoing_visibility= "," read_documentation_modifiers ","nest == "," parse_include "," parse_require ","tk name "," parse_meta_method ","comment =~ ","container document_self "," parse_alias "," parse_attr_accessor ","@options extra_accessors "," parse_attr "," parse_visibility ","current_method nil? "," skip_optional_do_after_expression "," skip_for_variable "," parse_yield "," warn "," parse_constant "," parse_method "," parse_module ","container document_children "," parse_class "," unget_tk ","container done_documenting "," look_for_directives_in ","comment empty? "," get_tk ","comment << << ","comment << ","tk text ","TkCOMMENT  === "," parse_comment ","container visibility "," parse_meta_attr ","current_method ! ","comment force_encoding "," new_comment ","comment text ","comment text =~ ","TkNL  === "," raise ","RDoc Comment  === "," parse_constant ! ","container block_params= ","container params= "," parse_extend ","method block_params= ","container block_params ","method params= ","container params "," parse_rescue ","current_method calls_super= "," consume_trailing_spaces "," parse_extend_or_include "," parse_identifier "," throw ","RDoc TopLevel  === ","container current_line_visibility= ","RDoc Encoding  change_encoding ","tk [] ","(send\n  (send\n    (lvar :tk) :[]\n    (sym :state)) :&\n  (const\n    (const\n      (const nil :RDoc) :RipperStateLex) :EXPR_LABEL)) == ","tk [] & ","\n == ","tk [] chars to_a last ","tk [] chars to_a ","tk [] chars ","tk [] size > ","tk [] size ","on_embdoc == ","on_comment == ","c =~ ","past_tokens [] all? ","past_tokens [] ","(send\n  (begin\n    (send\n      (send\n        (lvar :past_tokens) :size) :-\n      (int 1))) :-\n  (lvar :i)) + ","(send\n  (send\n    (lvar :past_tokens) :size) :-\n  (int 1)) - ","past_tokens size - ","past_tokens size ","read_tk =~ ","past_tokens reverse each_with_index ","past_tokens reverse ","@read [] ","@read size > ","@read size ","on_ignored_nl == ","on_nl == ","(send\n  (const\n    (const\n      (const nil :RDoc) :RipperStateLex) :EXPR_LABEL) :&\n  (send\n    (lvar :tk) :[]\n    (sym :state))) == ","RDoc RipperStateLex EXPR_LABEL  & ","(send\n  (send\n    (lvar :tk) :[]\n    (sym :state)) :&\n  (const\n    (const\n      (const\n        (const nil :RDoc) :Parser) :RipperStateLex) :EXPR_LABEL)) == "," skip_tkspace_without_nl ","comment_body chars to_a last ","comment_body chars to_a ","comment_body chars ","comment_body size > ","comment_body size "," retrieve_comment_body ","comment_body =~ "," parse_included_with_activesupport_concern "," skip_ get_tk space "," get_ get_tk read "," peek_ get_tk  == "," peek_ get_tk  "," get_tk  name "," parse_meta_ parse_meta_method  "," new_comment  =~ ","RDoc Encoding  change_encoding  =~ ","current_ parse_meta_method  nil? "," parse_ parse_meta_method  "," unget_ get_tk  "," new_comment  empty? ","RDoc Encoding  change_encoding  empty? "," get_ get_tk  "," new_comment  << << ","RDoc Encoding  change_encoding  << << "," new_comment  << ","RDoc Encoding  change_encoding  << "," get_tk  text "," parse_ new_comment  "," parse_RDoc Encoding  change_encoding  ","current_ parse_meta_method  ! "," new_comment  force_encoding ","RDoc Encoding  change_encoding  force_encoding "," new_ new_comment  "," new_RDoc Encoding  change_encoding  "," new_comment  text ","RDoc Encoding  change_encoding  text "," new_comment  text =~ ","RDoc Encoding  change_encoding  text =~ "," parse_meta_method  block_params= "," parse_meta_method  params= ","current_ parse_meta_method  calls_super= "," get_tk  [] ","(send\n  (send\n    (lvar : get_tk ) :[]\n    (sym :state)) :&\n  (const\n    (const\n      (const nil :RDoc) :RipperStateLex) :EXPR_LABEL)) == "," get_tk  [] & "," get_tk  [] chars to_a last "," get_tk  [] chars to_a "," get_tk  [] chars "," get_tk  [] size > "," get_tk  [] size ","on_ new_comment  == ","on_RDoc Encoding  change_encoding  == ","@read []  [] all? ","@read []  [] ","(send\n  (begin\n    (send\n      (send\n        (lvar :@read [] ) :size) :-\n      (int 1))) :-\n  (lvar :i)) + ","(send\n  (send\n    (lvar :@read [] ) :size) :-\n  (int 1)) - ","@read []  size - ","@read []  size ","read_ get_tk  =~ ","@read []  reverse each_with_index ","@read []  reverse ","(send\n  (const\n    (const\n      (const nil :RDoc) :RipperStateLex) :EXPR_LABEL) :&\n  (send\n    (lvar : get_tk ) :[]\n    (sym :state))) == ","(send\n  (send\n    (lvar : get_tk ) :[]\n    (sym :state)) :&\n  (const\n    (const\n      (const\n        (const nil :RDoc) :Parser) :RipperStateLex) :EXPR_LABEL)) == "," skip_ get_tk space_without_nl "," new_comment _body chars to_a last ","RDoc Encoding  change_encoding _body chars to_a last "," retrieve_comment_body  chars to_a last "," new_comment _body chars to_a ","RDoc Encoding  change_encoding _body chars to_a "," retrieve_comment_body  chars to_a "," new_comment _body chars ","RDoc Encoding  change_encoding _body chars "," retrieve_comment_body  chars "," new_comment _body size > ","RDoc Encoding  change_encoding _body size > "," retrieve_comment_body  size > "," new_comment _body size ","RDoc Encoding  change_encoding _body size "," retrieve_comment_body  size "," retrieve_ new_comment _body "," retrieve_RDoc Encoding  change_encoding _body "," retrieve_ retrieve_comment_body  "," new_comment _body =~ ","RDoc Encoding  change_encoding _body =~ "," retrieve_comment_body  =~ "]}," Ruby parse_require":{"type":"method","name":"parse_require","children":[],"call":[" unget_tk ","context add_require ","RDoc Require  new "," warn ","tk text "," get_tk "," skip_tkspace_comment ","TkLPAREN  === ","TkSTRING  === ","@top_level add_require ","tk [] [] ","tk [] ","on_tstring == ","on_lparen == "," unget_ get_tk  "," get_tk  text "," get_ get_tk  "," skip_ get_tk space_comment "," get_tk  [] [] "," get_tk  [] "]}," Ruby parse_module":{"type":"method","name":"parse_module","children":[],"call":["mod comment= "," parse_statements "," read_documentation_modifiers ","@stats add_module ","mod record_location ","container add_module ","name_t name "," get_class_or_module ","@top_level add_to_classes_or_modules ","mod document_self ","mod add_comment ","mod ignore ","container document_children "," record_location ","name_t [] ","container add_module  comment= "," read_documentation_container add_module ifiers ","@stats add_container add_module ule ","container add_module  record_location ","container add_container add_module ule ","name_t name _t name_t name  ","name_t [] _t name_t []  "," get_class_or_container add_module ule ","@top_level add_to_classes_or_container add_module ules ","container add_module  document_self ","container add_module  add_comment ","container add_module  ignore ","name_t name _t [] ","name_t [] _t [] "]}," Ruby parse_method_parameters":{"type":"method","name":"parse_method_parameters","children":[],"call":[" read_documentation_modifiers "," skip_tkspace ","method block_params nil? ","method block_params ","method params= ","method params ","( + + ","( + ","res [] == ","res [] "," parse_method_or_yield_parameters ","res =~ "," skip_tkspace_without_nl ","( + +  [] == "," parse_method_or_yield_parameters  [] == ","( + +  [] "," parse_method_or_yield_parameters  [] ","( + +  =~ "," parse_method_or_yield_parameters  =~ "]}," Ruby parse_method_or_yield_parameters":{"type":"method","name":"parse_method_or_yield_parameters","children":[],"call":["res == "," get_tkread tr strip "," get_tkread tr "," get_tkread "," get_tk "," read_documentation_modifiers "," unget_tk ","method block_params nil? ","method block_params ","@scanner continue ","nest <= ","@scanner lex_state == ","@scanner lex_state ","end_token == ","nest zero? "," loop "," skip_tkspace "," get_tkread gsub strip "," get_tkread gsub ","@read pop ","nest < ","nest == "," get_tkread_clean "," get_end_token ","continue ! ","(send\n  (send\n    (lvar :tk) :[]\n    (sym :state)) :&\n  (const\n    (const\n      (const nil :RDoc) :RipperStateLex) :EXPR_LABEL)) != ","tk [] & ","tk [] ","\n == ","tk [] [] ","on_nl == ","end_token [] ","end_token [] == ","tk != ","@scanner first_in_method_statement= ","(send\n  (const\n    (const\n      (const nil :RDoc) :RipperStateLex) :EXPR_LABEL) :&\n  (send\n    (lvar :tk) :[]\n    (sym :state))) != ","RDoc RipperStateLex EXPR_LABEL  & ","(send\n  (send\n    (lvar :tk) :[]\n    (sym :state)) :&\n  (const\n    (const\n      (const\n        (const nil :RDoc) :Parser) :RipperStateLex) :EXPR_LABEL)) != "," skip_tkspace_without_nl "," get_tkread tr strip  == "," get_tkread gsub strip  == "," get_ get_tk read tr strip "," get_ get_tk read tr "," get_ get_tk read "," get_ get_tk  "," unget_ get_tk  "," get_end_token  == "," skip_ get_tk space "," get_ get_tk read gsub strip "," get_ get_tk read gsub "," get_ get_tk read_clean "," get_ get_end_token  ","(send\n  (send\n    (lvar : get_tk ) :[]\n    (sym :state)) :&\n  (const\n    (const\n      (const nil :RDoc) :RipperStateLex) :EXPR_LABEL)) != "," get_tk  [] & "," get_tk  [] "," get_tk  [] [] "," get_end_token  [] "," get_end_token  [] == "," get_tk  != ","(send\n  (const\n    (const\n      (const nil :RDoc) :RipperStateLex) :EXPR_LABEL) :&\n  (send\n    (lvar : get_tk ) :[]\n    (sym :state))) != ","(send\n  (send\n    (lvar : get_tk ) :[]\n    (sym :state)) :&\n  (const\n    (const\n      (const\n        (const nil :RDoc) :Parser) :RipperStateLex) :EXPR_LABEL)) != "," skip_ get_tk space_without_nl "]}," Ruby parse_method":{"type":"method","name":"parse_method","children":[],"call":["meth comment= "," extract_call_seq "," remove_token_listener "," parse_statements ","meth visibility= ","meth name= ","meth singleton= ","meth dont_rename_initialize ","meth singleton ! ","meth singleton ","name == ","container document_self= ","container add_method ","meth document_self "," parse_method_parameters ","@scanner instance_eval "," add_token_listener ","meth add_tokens ","TkCOMMENT  new ","@top_level file_absolute_name ","indent set_text ","  * ","TkSPACE  new ","meth start_collecting_tokens ","@stats add_method ","single == ","RDoc AnyMethod  new "," get_tkread ","name_t name "," unget_tk ","back_tk reverse_each "," skip_method ","container record_location ","prev_container add_module ","prev_container add_class ","obj superclass name ","obj superclass ","type == "," warn ","(const nil :Class) include? ","obj class ","obj class == ","state const_get ","name_t name split inject ","name_t name split ","container find_module_named ","name_t2 name "," get_tk "," skip_tkspace ","TkCOLON2  === ","TkDOT  === "," add_token "," start_collecting_tokens ","tk char_no ","tk line_no ","@top_level absolute_name ","name_t inspect ","name_t respond_to? ","name_t2 inspect "," token_listener ","token set_text ","name_t text ","dummy parent= ","RDoc Context  new ","meth record_location ","@top_level add_class ","RDoc TopLevel  find_class_named ","name_t name capitalize ","comment extract_call_seq ","comment normalize ","meth line= ","meth offset= ","tk seek ","@top_level relative_name ","@store find_class_named "," parse_method_dummy ","const name == ","const name ","prev_container constants find ","prev_container constants ","dummy store= ","container store "," parse_method_params_and_body "," record_location ","container != "," parse_method_name "," read_documentation_modifiers ","token []= "," look_for_directives_in ","tk [] ","RDoc Parser RipperStateLex Token  new ","RDoc AnyMethod  new  comment= "," remove_TkCOMMENT  new _listener "," remove_RDoc Parser RipperStateLex Token  new _listener ","RDoc AnyMethod  new  visibility= ","RDoc AnyMethod  new  name= ","meth name_t name = ","meth name_t2 name = ","RDoc AnyMethod  new  singleton= ","RDoc AnyMethod  new  dont_rename_initialize ","meth dont_rename_t name _initialize ","meth dont_rename_t2 name _initialize ","RDoc AnyMethod  new  singleton ! ","RDoc AnyMethod  new  singleton ","name_t name  == ","name_t2 name  == ","prev_container add_module  document_self= ","prev_container add_class  document_self= ","container find_module_named  document_self= ","RDoc TopLevel  find_class_named  document_self= ","@store find_class_named  document_self= ","container add_RDoc AnyMethod  new od ","prev_container add_module  add_method ","prev_container add_class  add_method ","container find_module_named  add_method ","RDoc TopLevel  find_class_named  add_method ","@store find_class_named  add_method ","RDoc AnyMethod  new  document_self "," parse_RDoc AnyMethod  new od_parameters "," add_TkCOMMENT  new _listener "," add_RDoc Parser RipperStateLex Token  new _listener ","meth add_TkCOMMENT  new s ","meth add_RDoc Parser RipperStateLex Token  new s ","RDoc AnyMethod  new  add_tokens ","@top_level file_absolute_name_t name  ","@top_level file_absolute_name_t2 name  ","TkSPACE  new  set_text ","RDoc Parser RipperStateLex Token  new  set_text ","meth start_collecting_TkCOMMENT  new s ","meth start_collecting_RDoc Parser RipperStateLex Token  new s ","RDoc AnyMethod  new  start_collecting_tokens ","@stats add_RDoc AnyMethod  new od ","name_t name _t name_t name  ","name_t2 name _t name_t2 name  "," get_tk  name "," skip_tkspace  reverse_each "," skip_RDoc AnyMethod  new od ","prev_container add_module  record_location ","prev_container add_class  record_location ","container find_module_named  record_location ","RDoc TopLevel  find_class_named  record_location ","@store find_class_named  record_location ","prev_prev_container add_module  add_module ","prev_prev_container add_class  add_module ","prev_container find_module_named  add_module ","prev_RDoc TopLevel  find_class_named  add_module ","prev_@store find_class_named  add_module ","prev_prev_container add_module  add_class ","prev_prev_container add_class  add_class ","prev_container find_module_named  add_class ","prev_RDoc TopLevel  find_class_named  add_class ","prev_@store find_class_named  add_class ","obj superclass name_t name  ","obj superclass name_t2 name  ","name_t name _t name_t name  split inject ","name_t2 name _t name_t2 name  split inject "," get_tk  name split inject ","name_t name _t name_t name  split ","name_t2 name _t name_t2 name  split "," get_tk  name split ","container find_module_name_t name d ","container find_module_name_t2 name d ","prev_container add_module  find_module_named ","prev_container add_class  find_module_named ","container find_module_named  find_module_named ","RDoc TopLevel  find_class_named  find_module_named ","@store find_class_named  find_module_named ","name_t name _t2 name_t name  ","name_t2 name _t2 name_t2 name  "," get_tk 2 name "," add_TkCOMMENT  new  "," add_RDoc Parser RipperStateLex Token  new  "," start_collecting_TkCOMMENT  new s "," start_collecting_RDoc Parser RipperStateLex Token  new s ","tk tk line_no  ","tk tk []  ","@top_level absolute_name_t name  ","@top_level absolute_name_t2 name  ","name_t name _t inspect ","name_t2 name _t inspect "," get_tk  inspect ","name_t name _t respond_to? ","name_t2 name _t respond_to? "," get_tk  respond_to? ","name_t name _t2 inspect ","name_t2 name _t2 inspect "," get_tk 2 inspect "," TkCOMMENT  new _listener "," RDoc Parser RipperStateLex Token  new _listener ","TkCOMMENT  new  set_text ","name_t name _t text ","name_t2 name _t text "," get_tk  text ","RDoc Context  new  parent= ","RDoc AnyMethod  new  record_location ","RDoc TopLevel  find_class_name_t name d ","RDoc TopLevel  find_class_name_t2 name d ","name_t name _t name_t name  capitalize ","name_t2 name _t name_t2 name  capitalize "," get_tk  name capitalize ","RDoc AnyMethod  new  line= ","RDoc AnyMethod  new  offset= ","meth tk seek = ","@top_level relative_name_t name  ","@top_level relative_name_t2 name  ","@store find_class_name_t name d ","@store find_class_name_t2 name d "," parse_RDoc AnyMethod  new od_dummy "," parse_method_RDoc Context  new  ","const name_t name  == ","const name_t2 name  == ","const name_t name  ","const name_t2 name  ","prev_prev_container add_module  constants find ","prev_prev_container add_class  constants find ","prev_container find_module_named  constants find ","prev_RDoc TopLevel  find_class_named  constants find ","prev_@store find_class_named  constants find ","prev_prev_container add_module  constants ","prev_prev_container add_class  constants ","prev_container find_module_named  constants ","prev_RDoc TopLevel  find_class_named  constants ","prev_@store find_class_named  constants ","RDoc Context  new  store= ","prev_container add_module  store ","prev_container add_class  store ","container find_module_named  store ","RDoc TopLevel  find_class_named  store ","@store find_class_named  store "," parse_RDoc AnyMethod  new od_params_and_body ","prev_container add_module  != ","prev_container add_class  != ","container find_module_named  != ","RDoc TopLevel  find_class_named  != ","@store find_class_named  != "," parse_RDoc AnyMethod  new od_name "," parse_method_name_t name  "," parse_method_name_t2 name  ","TkCOMMENT  new  []= ","RDoc Parser RipperStateLex Token  new  []= "]}," Ruby parse_meta_method":{"type":"method","name":"parse_meta_method","children":[],"call":["meth comment= "," remove_token_listener ","TkCOMMA  === "," get_tk ","container add_method ","meth document_self "," extract_call_seq ","meth params= "," add_token_listener ","meth add_tokens ","TkCOMMENT  new ","@top_level file_absolute_name ","indent set_text ","  * ","TkSPACE  new ","meth start_collecting_tokens ","@stats add_method ","meth singleton= ","RDoc MetaMethod  new "," get_tkread "," warn ","name_t inspect ","name_t line_no ","container top_level file_relative_name ","container top_level ","name_t text [] ","name_t text ","name nil? ","1 empty? ","comment sub! ","comment sub! ! ! ","comment sub! ! "," skip_tkspace "," add_token "," start_collecting_tokens ","tk char_no ","tk line_no ","tk name ","container toplevel file_relative_name ","container toplevel ","@top_level absolute_name "," token_listener ","position_comment value= ","name_t value [] ","name_t value ","meth record_location "," parse_statements "," unget_tk ","comment extract_call_seq ","comment normalize ","meth line= ","meth offset= ","comment text sub! ","comment text ","comment text sub! ! ! ","comment text sub! ! ","tk seek ","@top_level relative_name "," parse_meta_method_params "," record_location "," parse_meta_method_name ","position_comment []= ","$~ ! ! ","$~ ! ","comment text= ","comment text sub ","tk [] ","RDoc Parser RipperStateLex Token  new "," skip_tkspace_without_nl ","RDoc MetaMethod  new  comment= "," get_ get_tk  ","container add_RDoc MetaMethod  new od ","RDoc MetaMethod  new  document_self ","RDoc MetaMethod  new  params= ","RDoc MetaMethod  new  add_tokens ","@top_level file_absolute_name_t text []  ","@top_level file_absolute_name_t value []  ","@top_level file_absolute_ parse_meta_method_name  ","TkSPACE  new  set_text ","RDoc Parser RipperStateLex Token  new  set_text ","RDoc MetaMethod  new  start_collecting_tokens ","@stats add_RDoc MetaMethod  new od ","RDoc MetaMethod  new  singleton= ","meth comment sub! ! ! = ","meth comment text sub! ! ! = ","meth $~ ! ! = "," get_ get_tk read ","name_t text [] _t inspect ","name_t value [] _t inspect "," parse_meta_method_name _t inspect "," get_tk  inspect ","name_t text [] _t line_no ","name_t value [] _t line_no "," parse_meta_method_name _t line_no "," get_tk  line_no ","name_t tk line_no  ","name_t tk []  ","container top_level file_relative_name_t text []  ","container top_level file_relative_name_t value []  ","container top_level file_relative_ parse_meta_method_name  ","name_t text [] _t text [] ","name_t value [] _t text [] "," parse_meta_method_name _t text [] "," get_tk  text [] ","name_t text [] _t text ","name_t value [] _t text "," parse_meta_method_name _t text "," get_tk  text ","name_t text []  nil? ","name_t value []  nil? "," parse_meta_method_name  nil? "," skip_ get_tk space "," get_tk  char_no ","tk tk line_no  ","tk tk []  "," get_tk  name ","tk name_t text []  ","tk name_t value []  ","tk  parse_meta_method_name  ","container toplevel file_relative_name_t text []  ","container toplevel file_relative_name_t value []  ","container toplevel file_relative_ parse_meta_method_name  ","@top_level absolute_name_t text []  ","@top_level absolute_name_t value []  ","@top_level absolute_ parse_meta_method_name  ","TkCOMMENT  new  value= ","RDoc Parser RipperStateLex Token  new  value= ","name_t text [] _t value [] ","name_t value [] _t value [] "," parse_meta_method_name _t value [] "," get_tk  value [] ","name_t text [] _t value ","name_t value [] _t value "," parse_meta_method_name _t value "," get_tk  value ","RDoc MetaMethod  new  record_location "," unget_ get_tk  ","RDoc MetaMethod  new  line= ","RDoc MetaMethod  new  offset= ","meth tk seek = "," get_tk  seek ","@top_level relative_name_t text []  ","@top_level relative_name_t value []  ","@top_level relative_ parse_meta_method_name  "," parse_meta_RDoc MetaMethod  new od_params "," parse_meta_RDoc MetaMethod  new od_name "," parse_meta_method_name_t text []  "," parse_meta_method_name_t value []  "," parse_meta_method_ parse_meta_method_name  ","TkCOMMENT  new  []= ","RDoc Parser RipperStateLex Token  new  []= "," get_tk  [] "," skip_ get_tk space_without_nl "]}," Ruby parse_include":{"type":"method","name":"parse_include","children":[],"call":[" get_tk ","TkCOMMA  === "," peek_tk ","context add_include ","RDoc Include  new ","name empty? "," get_constant_with_optional_parens "," skip_tkspace_comment "," loop ","incl record_location ","context add_context add_include ude "," get_constant_with_optional_parens  empty? ","context add_include  record_location "]}," Ruby parse_comment":{"type":"method","name":"parse_comment","children":[],"call":["meth comment= ","container add_method ","meth document_self "," extract_call_seq ","meth params= ","meth add_tokens ","TkCOMMENT  new ","@top_level file_absolute_name ","indent set_text ","  * ","TkSPACE  new ","meth start_collecting_tokens ","@stats add_method ","meth singleton= ","RDoc GhostMethod  new "," get_tkread ","1 empty? ","comment sub! ","comment sub! ! ! ","comment sub! ! ","tk char_no ","tk line_no ","@top_level absolute_name ","container add_attribute ","RDoc Attr  new ","3 empty? ","meth name ","position_comment set_text ","@stats add_attribute ","att record_location ","meth record_location ","att line= ","att offset= ","text sub! ","comment extract_call_seq ","comment normalize ","meth line= ","meth offset= ","text sub! ! ! ","text sub! ! ","comment text ","tk seek "," parse_comment_tomdoc ","@markup == ","@top_level relative_name ","co line= ","co offset= ","co singleton= "," parse_comment_attr "," parse_comment_ghost ","$~ ! ! ","$~ ! ","comment text= ","comment text sub ","tk [] ","$` count ","comment line ","comment line nil? ","RDoc GhostMethod  new  comment= ","meth  parse_comment_ghost mment= ","container add_RDoc GhostMethod  new od "," parse_comment_ghost ntainer add_method ","RDoc GhostMethod  new  document_self ","RDoc GhostMethod  new  params= ","RDoc GhostMethod  new  add_tokens ","TkSPACE  new  set_text ","indent set_comment text  ","RDoc GhostMethod  new  start_collecting_tokens ","meth start_ parse_comment_ghost llecting_tokens ","@stats add_RDoc GhostMethod  new od ","RDoc GhostMethod  new  singleton= ","meth comment sub! ! ! = ","meth text sub! ! ! = ","meth $~ ! ! = "," parse_comment_ghost mment sub! "," parse_comment_ghost mment sub! ! ! "," parse_comment_ghost mment sub! ! ","tk tk line_no  ","tk tk []  ","tk comment line  ","container add_RDoc Attr  new ribute "," parse_comment_ghost ntainer add_attribute ","RDoc GhostMethod  new  name ","TkCOMMENT  new  set_text ","position_comment set_comment text  ","position_ parse_comment_ghost mment set_text ","@stats add_RDoc Attr  new ribute ","RDoc Attr  new  record_location ","att re parse_comment_ghost rd_location ","RDoc GhostMethod  new  record_location ","meth re parse_comment_ghost rd_location ","RDoc Attr  new  line= ","RDoc Attr  new  offset= ","att tk seek = ","comment text  sub! "," parse_comment_ghost mment extract_call_seq "," parse_comment_ghost mment normalize ","RDoc GhostMethod  new  line= ","RDoc GhostMethod  new  offset= ","meth tk seek = ","comment text  sub! ! ! ","comment text  sub! ! ","comment comment text  "," parse_comment_ghost mment text "," parse_ parse_comment_ghost mment_tomdoc "," parse_comment_ghost  line= ","co tk seek = "," parse_comment_ghost  offset= ","co comment sub! ! ! = ","co text sub! ! ! = ","co $~ ! ! = "," parse_comment_ghost  singleton= "," parse_comment_RDoc Attr  new r "," parse_ parse_comment_ghost mment_attr "," parse_ parse_comment_ghost mment_ghost ","comment comment text = "," parse_comment_ghost mment text= ","comment comment text  sub "," parse_comment_ghost mment text sub ","$`  parse_comment_ghost unt "," parse_comment_ghost mment line "," parse_comment_ghost mment line nil? "]}," Ruby parse_constant":{"type":"method","name":"parse_constant","children":[],"call":["container add_constant ","con document_self "," read_documentation_modifiers ","RDoc Constant  new ","res == "," get_tkread tr strip "," get_tkread tr "," get_tkread "," get_tk "," unget_tk ","@scanner continue ! ","@scanner continue ","nest <= ","@scanner lex_state == ","@scanner lex_state "," loop ","TkGT  === ","TkASSIGN  === "," skip_tkspace ","tk name ","@stats add_constant ","rhs_name << ","container add_module_alias ","container find_module_named ","RDoc TopLevel  find_class_or_module ","rhs_name =~ ","TkNL  === "," peek_tk ","con record_location "," get_tkread gsub strip "," get_tkread gsub ","name =~ ","con line= ","con offset= ","tk line_no ","tk seek ","value replace ","@store find_class_or_module ","name_t name "," get_class_or_module ","TkCOLON2  === "," record_location "," parse_constant_body "," suppress_parents ","con value= ","= == "," peek_tk [] ","on_op == ","nest == ","bracket_tk [] ","on_lbracket == ","name_t [] ",":: == ","tk [] ","eq_tk [] ","@top_level add_to_classes_or_modules ","new_module ignore ","prev_c document_children ","prev_c add_module_by_normal_module ","new_modules each "," skip_tkspace_without_nl ","RDoc Constant  new tainer add_RDoc Constant  new stant ","container add_constant tainer add_container add_constant stant ","RDoc Constant  new  document_self ","container add_constant  document_self "," read_documentation_container find_module_named ifiers "," read_documentation_RDoc TopLevel  find_class_or_module ifiers "," read_documentation_@store find_class_or_module ifiers "," get_tkread tr strip  == "," get_tkread gsub strip  == "," get_ get_tk read tr strip "," get_ get_tk read tr "," get_ get_tk read "," get_ get_tk  "," unget_ get_tk  ","@scanner RDoc Constant  new tinue ! ","@scanner container add_constant tinue ! ","@scanner RDoc Constant  new tinue ","@scanner container add_constant tinue "," skip_ get_tk space "," get_tk  name ","tk tk name  ","tk name_t name  ","tk name_t []  ","tk tk []  ","@stats add_RDoc Constant  new stant ","@stats add_container add_constant stant ","rhs_tk name  << ","rhs_name_t name  << ","rhs_name_t []  << ","rhs_tk []  << ","RDoc Constant  new tainer add_module_alias ","container add_constant tainer add_module_alias ","container add_container find_module_named ule_alias ","container add_RDoc TopLevel  find_class_or_module ule_alias ","container add_@store find_class_or_module ule_alias ","RDoc Constant  new tainer find_module_named ","container add_constant tainer find_module_named ","container find_module_tk name d ","container find_module_name_t name d ","container find_module_name_t [] d ","container find_module_tk [] d ","container find_container find_module_named ule_named ","container find_RDoc TopLevel  find_class_or_module ule_named ","container find_@store find_class_or_module ule_named ","RDoc TopLevel  find_class_or_container find_module_named ule ","RDoc TopLevel  find_class_or_RDoc TopLevel  find_class_or_module ule ","RDoc TopLevel  find_class_or_@store find_class_or_module ule ","rhs_tk name  =~ ","rhs_name_t name  =~ ","rhs_name_t []  =~ ","rhs_tk []  =~ "," peek_ get_tk  ","RDoc Constant  new  record_location ","container add_constant  record_location "," get_ get_tk read gsub strip "," get_ get_tk read gsub ","tk name  =~ ","name_t name  =~ ","name_t []  =~ ","tk []  =~ ","RDoc Constant  new  line= ","container add_constant  line= ","RDoc Constant  new  offset= ","container add_constant  offset= ","con tk seek = "," get_tk  line_no ","tk tk line_no  "," get_tk  seek ","@store find_class_or_container find_module_named ule ","@store find_class_or_RDoc TopLevel  find_class_or_module ule ","@store find_class_or_@store find_class_or_module ule ","tk name _t tk name  ","name_t name _t name_t name  ","name_t [] _t name_t []  ","tk [] _t tk []  "," get_class_or_container find_module_named ule "," get_class_or_RDoc TopLevel  find_class_or_module ule "," get_class_or_@store find_class_or_module ule "," parse_RDoc Constant  new stant_body "," parse_container add_constant stant_body "," parse_constant_ parse_constant_body  "," supp get_tkread tr strip s_parents "," supp get_tkread gsub strip s_parents ","RDoc Constant  new  value= ","container add_constant  value= "," peek_ get_tk  [] ","bracket_ get_tk  [] "," get_tk  [] ","tk name _t [] ","name_t name _t [] ","name_t [] _t [] ","tk [] _t [] ","eq_ get_tk  [] ","@top_level add_to_classes_or_container find_module_named ules ","@top_level add_to_classes_or_RDoc TopLevel  find_class_or_module ules ","@top_level add_to_classes_or_@store find_class_or_module ules ","new_container find_module_named ule ignore ","new_RDoc TopLevel  find_class_or_module ule ignore ","new_@store find_class_or_module ule ignore ","prev_c add_container find_module_named ule_by_normal_container find_module_named ule ","prev_c add_RDoc TopLevel  find_class_or_module ule_by_normal_RDoc TopLevel  find_class_or_module ule ","prev_c add_@store find_class_or_module ule_by_normal_@store find_class_or_module ule ","new_container find_module_named ules each ","new_RDoc TopLevel  find_class_or_module ules each ","new_@store find_class_or_module ules each "," skip_ get_tk space_without_nl "]}," Ruby parse_class":{"type":"method","name":"parse_class","children":[],"call":[" warn ","name_t text inspect ","name_t text ","name_t class "," parse_statements "," read_documentation_modifiers ","@stats add_class ","RDoc NormalClass  new ","RDoc TopLevel  find_class_named ","container name "," get_class_specification ","cls comment= ","cls record_location ","container add_class ","single == ","superclass empty? "," skip_tkspace "," get_tk ","TkLT  === "," peek_tk ","name_t name "," get_class_or_module ","other comment= ","other record_location ","container add_module ","@top_level add_to_classes_or_modules ","other clear_comment ","other document_children= ","other document_self= ","name =~ ","cls document_self ","declaration_context add_class ","other add_comment ","other line= ","other offset= ","cls add_comment ","cls line= ","cls offset= ","cls ignore ","container document_children ","tk line_no ","tk seek ","other ignore ","name empty? ","@store find_class_named ","given_name =~ "," parse_class_singleton "," parse_class_regular ","name_t [] inspect ","name_t [] ","name_t [] == ","tk [] "," skip_parentheses "," get_class_specification _t text inspect ","name_t name _t text inspect "," get_class_specification _t text ","name_t name _t text "," get_class_specification _t class ","name_t name _t class ","RDoc TopLevel  find_class_ get_class_specification d ","RDoc TopLevel  find_class_name_t name d ","container  get_class_specification  ","container name_t name  ","container add_class  comment= ","declaration_context add_class  comment= "," parse_class_singleton  comment= "," parse_class_regular  comment= ","container add_class  record_location ","declaration_context add_class  record_location "," parse_class_singleton  record_location "," parse_class_regular  record_location "," get_class_specification  empty? "," get_class_specification _t  get_class_specification  ","name_t name _t name_t name  ","RDoc NormalClass  new  comment= ","RDoc TopLevel  find_class_named  comment= ","container add_module  comment= ","@store find_class_named  comment= ","RDoc NormalClass  new  record_location ","RDoc TopLevel  find_class_named  record_location ","container add_module  record_location ","@store find_class_named  record_location ","RDoc NormalClass  new  clear_comment ","RDoc TopLevel  find_class_named  clear_comment ","container add_module  clear_comment ","@store find_class_named  clear_comment ","RDoc NormalClass  new  document_children= ","RDoc TopLevel  find_class_named  document_children= ","container add_module  document_children= ","@store find_class_named  document_children= ","RDoc NormalClass  new  document_self= ","RDoc TopLevel  find_class_named  document_self= ","container add_module  document_self= ","@store find_class_named  document_self= "," get_class_specification  =~ ","name_t name  =~ ","container add_class  document_self ","declaration_context add_class  document_self "," parse_class_singleton  document_self "," parse_class_regular  document_self ","RDoc NormalClass  new  add_comment ","RDoc TopLevel  find_class_named  add_comment ","container add_module  add_comment ","@store find_class_named  add_comment ","RDoc NormalClass  new  line= ","RDoc TopLevel  find_class_named  line= ","container add_module  line= ","@store find_class_named  line= ","RDoc NormalClass  new  offset= ","RDoc TopLevel  find_class_named  offset= ","container add_module  offset= ","@store find_class_named  offset= ","other tk seek = ","container add_class  add_comment ","declaration_context add_class  add_comment "," parse_class_singleton  add_comment "," parse_class_regular  add_comment ","container add_class  line= ","declaration_context add_class  line= "," parse_class_singleton  line= "," parse_class_regular  line= ","container add_class  offset= ","declaration_context add_class  offset= "," parse_class_singleton  offset= "," parse_class_regular  offset= ","cls tk seek = ","container add_class  ignore ","declaration_context add_class  ignore "," parse_class_singleton  ignore "," parse_class_regular  ignore ","tk tk line_no  ","tk tk []  ","RDoc NormalClass  new  ignore ","RDoc TopLevel  find_class_named  ignore ","container add_module  ignore ","@store find_class_named  ignore ","name_t name  empty? ","@store find_class_ get_class_specification d ","@store find_class_name_t name d ","given_ get_class_specification  =~ ","given_name_t name  =~ "," get_class_specification _t [] inspect ","name_t name _t [] inspect "," get_class_specification _t [] ","name_t name _t [] "," get_class_specification _t [] == ","name_t name _t [] == "]}," Ruby parse_call_parameters":{"type":"method","name":"parse_call_parameters","children":[],"call":["res == "," get_tkread tr strip "," get_tkread tr "," get_tkread "," get_tk "," unget_tk ","@scanner continue ","nest <= ","@scanner lex_state == ","@scanner lex_state ","end_token == "," loop "," get_tkread_clean ","tk [] =~ ","tk [] ","RDoc RipperStateLex  end? ","tk nil? ","RDoc Parser RipperStateLex  end? "," get_tkread tr strip  == "," get_ get_tk read tr strip "," get_ get_tk read tr "," get_ get_tk read "," get_ get_tk  "," unget_ get_tk  "," get_ get_tk read_clean "," get_tk  [] =~ "," get_tk  [] "," get_tk  nil? "]}," Ruby parse_alias":{"type":"method","name":"parse_alias","children":[],"call":["context add_alias ","al document_self "," read_documentation_modifiers ","RDoc Alias  new "," get_tkread "," get_symbol_or_name "," skip_tkspace "," get_tk ","TkCOMMA  === "," peek_tk ","@scanner instance_eval ","TkLPAREN  === ","@stats add_alias ","al singleton= ","SINGLE  == ","al record_location ","single == ","al line= ","al offset= ","tk line_no ","tk seek "," record_location ","@scanner lex_state= ","on_comma === "," peek_tk [] ","on_lparen === ","tk [] ","context add_RDoc Alias  new ias ","RDoc Alias  new  document_self ","@scanner instance_evRDoc Alias  new  ","@stats add_RDoc Alias  new ias ","RDoc Alias  new  singleton= ","RDoc Alias  new  record_location ","RDoc Alias  new  line= ","RDoc Alias  new  offset= ","al tk seek = ","tk tk line_no  ","tk tk []  "]}," Ruby parse_attr_accessor":{"type":"method","name":"parse_attr_accessor","children":[],"call":["context add_attribute ","RDoc Attr  new "," get_tkread ","rw nil? ","@options extra_accessor_flags [] ","tk name ","@options extra_accessor_flags ","tmp document_self "," read_documentation_modifiers ","RDoc CodeObject  new "," parse_symbol_arg ","@stats add_attribute ","att record_location ","single == ","att line= ","att offset= ","tk line_no ","tk seek "," create_attr ","tmp document_self ! ","tk [] ","context add_RDoc Attr  new ribute ","context add_ create_attr ribute "," get_tk get_tkread  ","@options extra_accessor_flags []  nil? ","RDoc CodeObject  new  document_self ","  get_tkread _documentation_modifiers ","@stats add_RDoc Attr  new ribute ","@stats add_ create_attr ribute ","RDoc Attr  new  record_location "," create_attr  record_location ","RDoc Attr  new  line= "," create_attr  line= ","RDoc Attr  new  offset= "," create_attr  offset= ","att tk seek = ","tk tk line_no  ","tk tk []  "," create_RDoc Attr  new r "," create_ create_attr r ","RDoc CodeObject  new  document_self ! "]}," Ruby parse_attr":{"type":"method","name":"parse_attr","children":[],"call":[" warn ","context add_attribute ","att document_self "," read_documentation_modifiers ","RDoc Attr  new "," get_tkread "," unget_tk "," get_bool ","TkCOMMA  === "," get_tk "," skip_tkspace ","args [] ","args size > ","args size "," parse_symbol_arg ","@stats add_attribute ","att record_location ","single == ","att line= ","att offset= ","tk line_no ","tk seek "," create_attr ","on_comma == ","tk [] "," skip_tkspace_without_nl ","context add_RDoc Attr  new ribute ","context add_ create_attr ribute ","RDoc Attr  new  document_self "," create_attr  document_self "," get_ get_tk read "," unget_ get_tk  "," get_ get_tk  "," skip_ get_tk space "," parse_symbol_arg  [] "," parse_symbol_arg  size > "," parse_symbol_arg  size ","@stats add_RDoc Attr  new ribute ","@stats add_ create_attr ribute ","RDoc Attr  new  record_location "," create_attr  record_location ","RDoc Attr  new  line= "," create_attr  line= ","RDoc Attr  new  offset= "," create_attr  offset= ","att tk seek = "," get_tk  line_no ","tk tk line_no  ","tk tk []  "," get_tk  seek "," create_RDoc Attr  new r "," create_ create_attr r "," get_tk  [] "," skip_ get_tk space_without_nl "]}," Ruby make_message":{"type":"method","name":"make_message","children":[],"call":["prefix + ","prefix << ","@scanner char_no ","@scanner line_no ","\n + + ","\n + ","tk [] "," peek_tk ","(begin\n  (ivar :@file_name)) dup ","\n + +  + ","(begin\n  (ivar :@file_name)) dup  + ","\n + +  << ","(begin\n  (ivar :@file_name)) dup  << "," peek_tk  [] "," peek_ peek_tk  "]}," Ruby look_for_directives_in":{"type":"method","name":"look_for_directives_in","children":[],"call":[" remove_private_comments "," warn ","@options title= ","context stop_doc ","context force_documentation= ","context start_doc ","comment replace ","context set_current_section ","@options main_page= "," throw ","preprocess handle ","RDoc Markup PreProcess  new ","@options rdoc_include ","@top_level metadata []= ","@top_level metadata ","@options default_title= ","@options respond_to? ","context done_documenting= ","comment text= ","comment dup ","@preprocess handle ","comment remove_private ","container set_current_section ","container kind_of? ","RDoc Markup PreProcess  new  handle ","@RDoc Markup PreProcess  new  handle "]}," Ruby get_tkread":{"type":"method","name":"get_tkread","children":[],"call":["@read join ","@@read join  join "]}," Ruby get_tk":{"type":"method","name":"get_tk","children":[],"call":["obj add_token ","@token_listeners each "," warn ","obj pop_token "," Token set_text ",": + ","tk1 text "," Token ","tk1 name ","tk1 respond_to? ","TkSTRING  === ","TkOp  === ","TkId  === "," get_tk "," set_token_position ","tk char_no ","tk line_no ","TkSYMBEG  === "," puts ","tk inspect ","@tokens shift ","@read push ","@unget_read shift ","@scanner get_read ","@scanner token ","@tokens empty? ","TkDSTRING  === "," Token set_text 1 text ","@tokens shift 1 text ","@scanner token 1 text "," get_tk  text "," Token set_text 1 name ","@tokens shift 1 name ","@scanner token 1 name "," get_tk  name "," Token set_text 1 respond_to? ","@tokens shift 1 respond_to? ","@scanner token 1 respond_to? "," get_tk  respond_to? "," get_ Token set_text  "," get_@tokens shift  "," get_@scanner token  "," Token set_text  char_no ","@tokens shift  char_no ","@scanner token  char_no "," Token set_text  line_no ","@tokens shift  line_no ","@scanner token  line_no "," Token set_text  inspect ","@tokens shift  inspect ","@scanner token  inspect "]}," Ruby get_symbol_or_name":{"type":"method","name":"get_symbol_or_name","children":[],"call":[" raise ","tk text ","tk name ","tk text sub "," get_tk ","text << ","TkASSIGN  === "," peek_tk ","tk [] [] ","tk [] ","= == ","next_tk [] ","on_op == ","tk [] sub "," get_tk  text ","tk tk text sub  ","tk tk [] sub  "," get_tk  name "," get_tk  text sub ","tk tk text sub  sub ","tk tk [] sub  sub "," get_ get_tk  ","tk text sub  << ","tk [] sub  << "," peek_ get_tk  "," get_tk  [] [] "," get_tk  [] ","next_ get_tk  [] "," peek_tk  [] "," get_tk  [] sub "]}," Ruby get_constant_with_optional_parens":{"type":"method","name":"get_constant_with_optional_parens","children":[],"call":["TkRPAREN  === "," get_tk "," skip_tkspace ","nest > "," get_constant ","TkfLPAREN  === ","TkLPAREN  === "," peek_tk ","on_rparen == ","tk [] ","on_lparen == ","(lvasgn :tk\n  (send nil :peek_tk)) [] "," get_ get_tk  "," get_ peek_tk  "," skip_ get_tk space "," skip_ peek_tk space "," peek_ get_tk  "," peek_ peek_tk  "," get_tk  [] "," peek_tk  [] ","(lvasgn : get_tk \n  (send nil :peek_ get_tk )) [] ","(lvasgn : peek_tk \n  (send nil :peek_ peek_tk )) [] "]}," Ruby get_constant":{"type":"method","name":"get_constant","children":[],"call":[" unget_tk "," get_tk ","tk text ","TkCONSTANT  === ","TkCOLON3  === ","TkCOLON2  === "," skip_tkspace ","tk name ","tk [] ","on_const == ",":: == ","on_op == "," skip_tkspace_without_nl "," unget_ get_tk  "," get_ get_tk  "," get_tk  text "," skip_ get_tk space "," get_tk  name "," get_tk  [] "," skip_ get_tk space_without_nl "]}," Ruby get_class_specification":{"type":"method","name":"get_class_specification","children":[],"call":[" parse_call_parameters "," unget_tk "," get_tk "," get_tkread "," skip_tkspace ","tk text ","TkCONSTANT  === ","TkCOLON3  === ","TkCOLON2  === ","TkSELF  === ","tk name ","TkGVAR  === "," get_constant "," peek_tk ","tk [] ","on_gvar == ","self == ","on_kw == ","tk nil? "," skip_tkspace_without_nl "," unget_ get_tk  "," unget_ peek_tk  "," get_ get_tk  "," get_ peek_tk  "," get_ get_tk read "," get_ peek_tk read "," skip_ get_tk space "," skip_ peek_tk space "," get_tk  text "," peek_tk  text "," get_tk  name "," peek_tk  name "," peek_ get_tk  "," peek_ peek_tk  "," get_tk  [] "," peek_tk  [] "," get_tk  nil? "," peek_tk  nil? "," skip_ get_tk space_without_nl "," skip_ peek_tk space_without_nl "]}," Ruby get_class_or_module":{"type":"method","name":"get_class_or_module","children":[],"call":[" skip_tkspace "," get_tk ","prev_container add_module ","name_t name ","container ! ","container find_module_named ","TkCOLON2  === "," peek_tk ","given_name << << ","given_name << ","container record_location ","c ignore ","prev_container document_children ","RDoc Context  new ","container ignore "," record_location ","@top_level add_to_classes_or_modules ",":: + ","name_t [] ","ignore_constants ! ","prev_container == "," raise ","on_ident == ","on_const == ",":: == ","tk [] ","on_op == ","is_self ! ","name_t [] == "," dup ","new_modules << ","RDoc NormalModule  new ","c store= "," skip_tkspace_without_nl "," parse_method_or_yield_parameters ","on_lparen == "," peek_tk [] "," skip_tkspaprev_container add_module e "," skip_tkspaRDoc NormalModule  new e "," skip_ peek_tk space "," get_ peek_tk  ","prev_prev_container add_module  add_module ","prev_container find_module_named  add_module ","prev_prev_container add_module ontainer add_module ","prev_RDoc NormalModule  new ontainer add_module "," get_tk  name ","prev_container add_module  ! ","container find_module_named  ! ","prev_container add_module ontainer ! ","RDoc NormalModule  new ontainer ! ","prev_container add_module  find_module_named ","container find_module_named  find_module_named ","prev_container add_module ontainer find_module_named ","RDoc NormalModule  new ontainer find_module_named "," peek_ peek_tk  ","name_t []  << << "," dup  << << ","name_t []  << "," dup  << ","prev_container add_module  record_location ","container find_module_named  record_location ","prev_container add_module ontainer reprev_container add_module ord_loprev_container add_module ation ","RDoc NormalModule  new ontainer reRDoc NormalModule  new ord_loRDoc NormalModule  new ation ","prev_container add_module  ignore ","RDoc NormalModule  new  ignore ","prev_prev_container add_module  document_children ","prev_container find_module_named  document_children ","prev_prev_container add_module ontainer doprev_container add_module ument_prev_container add_module hildren ","prev_RDoc NormalModule  new ontainer doRDoc NormalModule  new ument_RDoc NormalModule  new hildren ","RDoprev_container add_module  Context  new ","RDoRDoc NormalModule  new  Context  new ","container find_module_named  ignore ","prev_container add_module ontainer ignore ","RDoc NormalModule  new ontainer ignore "," reprev_container add_module ord_loprev_container add_module ation "," reRDoc NormalModule  new ord_loRDoc NormalModule  new ation ","@top_level add_to_prev_container add_module lasses_or_modules ","@top_level add_to_RDoc NormalModule  new lasses_or_modules "," get_tk  [] ","ignore_prev_container add_module onstants ! ","ignore_RDoc NormalModule  new onstants ! ","prev_prev_container add_module  == ","prev_container find_module_named  == ","prev_prev_container add_module ontainer == ","prev_RDoc NormalModule  new ontainer == ","on_prev_container add_module onst == ","on_RDoc NormalModule  new onst == "," peek_tk  [] "," get_tk  [] == ","RDoprev_container add_module  NormalModule  new ","RDoRDoc NormalModule  new  NormalModule  new ","prev_container add_module  store= ","RDoc NormalModule  new  store= "," skip_tkspaprev_container add_module e_without_nl "," skip_tkspaRDoc NormalModule  new e_without_nl "," skip_ peek_tk space_without_nl "," peek_ peek_tk  [] "]}," Ruby get_bool":{"type":"method","name":"get_bool","children":[],"call":[" unget_tk "," get_tk "," skip_tkspace ","nil == ","tk [] ","false == ","on_kw == ","true == "," unget_ get_tk  "," get_ get_tk  "," skip_ get_tk space "," get_tk  [] "]}," Ruby extract_call_seq":{"type":"method","name":"extract_call_seq","children":[],"call":["meth call_seq= ","seq gsub! ","comment sub! "]}," Ruby error":{"type":"method","name":"error","children":[],"call":[" exit ","$stderr puts "," make_message "," abort "]}," Ruby collect_first_comment":{"type":"method","name":"collect_first_comment","children":[],"call":[" unget_tk "," get_tk "," skip_tkspace ","TkNL  === ","res << << ","res << ","tk text ","tk text =~ ","TkCOMMENT  === ","comment << << ","comment << "," new_comment ","comment force_encoding ","tk class ","first_comment_tk_class === ! ","first_comment_tk_class === ","on_nl === ","tk [] ","first_comment_tk_kind === ! ","first_comment_tk_kind === ","tk [] =~ ","on_embdoc == ","on_comment == ","RDoc Encoding  change_encoding "," dup "," skip_tkspace_without_nl ","comment_body =~ "," retrieve_comment_body "," unget_ get_tk  "," get_ get_tk  "," skip_ get_tk space "," get_tk  text "," get_tk  text =~ ","RDoc Encoding  change_encoding  << << "," dup  << << ","RDoc Encoding  change_encoding  << "," dup  << "," new_RDoc Encoding  change_encoding  "," new_ dup  ","RDoc Encoding  change_encoding  force_encoding "," dup  force_encoding "," get_tk  class ","first_comment_ get_tk _class === ! ","tk class  === ! ","first_RDoc Encoding  change_encoding _tk_class === ! ","first_ dup _tk_class === ! ","first_comment_ get_tk _class === ","tk class  === ","first_RDoc Encoding  change_encoding _tk_class === ","first_ dup _tk_class === "," get_tk  [] ","first_comment_ get_tk _kind === ! ","tk []  === ! ","first_RDoc Encoding  change_encoding _tk_kind === ! ","first_ dup _tk_kind === ! ","first_comment_ get_tk _kind === ","tk []  === ","first_RDoc Encoding  change_encoding _tk_kind === ","first_ dup _tk_kind === "," get_tk  [] =~ ","on_RDoc Encoding  change_encoding  == ","on_ dup  == "," skip_ get_tk space_without_nl ","RDoc Encoding  change_encoding _body =~ "," dup _body =~ "," retrieve_comment_body  =~ "," retrieve_RDoc Encoding  change_encoding _body "," retrieve_ dup _body "," retrieve_ retrieve_comment_body  "]}," Ruby add_token_listener":{"type":"method","name":"add_token_listener","children":[],"call":["@token_listeners << "]}," Ruby initialize":{"type":"method","name":"initialize","children":[],"call":[" reset ","@scanner exception_on_syntax_error= ","RDoc RubyLex  new ","@options encoding ","Object  const_defined? ","@options markup ","nodoc != ","@options visibility ","RDoc RipperStateLex  parse ","(send\n  (send\n    (lvar :content) :split\n    (regexp\n      (str \"\\\\n\")\n      (regopt))) :map) join ","  * ","tab_width * - ","$` length % ","$` length ","tab_width * ","$& length ","line gsub! ","content split map ","content split ","@options tab_width ","RDoc Encoding  remove_magic_comment ","RDoc Parser RipperStateLex  parse "," handle_tab_width ","RDoc RubyLex  new  exception_on_syntax_error= ","RDoc RipperStateLex  parse  exception_on_syntax_error= ","RDoc Parser RipperStateLex  parse  exception_on_syntax_error= ","(send\n  (send\n    (lvar :(send\n  (send\n    (lvar :content) :split\n    (regexp\n      (str \"\\n\")\n      (regopt))) :map) join ) :split\n    (regexp\n      (str \"\\\\n\")\n      (regopt))) :map) join ","(send\n  (send\n    (lvar :RDoc Encoding  remove_magic_comment ) :split\n    (regexp\n      (str \"\\\\n\")\n      (regopt))) :map) join ","(send\n  (send\n    (lvar : handle_tab_width ) :split\n    (regexp\n      (str \"\\\\n\")\n      (regopt))) :map) join ","@options tab_width  * - ","@options tab_width  * ","(send\n  (send\n    (lvar :content) :split\n    (regexp\n      (str \"\\n\")\n      (regopt))) :map) join  split map ","RDoc Encoding  remove_magic_comment  split map "," handle_tab_width  split map ","(send\n  (send\n    (lvar :content) :split\n    (regexp\n      (str \"\\n\")\n      (regopt))) :map) join  split ","RDoc Encoding  remove_magic_comment  split "," handle_tab_width  split ","@options @options tab_width  "," handle_@options tab_width  "]}," RubyToken Token ==":{"type":"method","name":"==","children":[],"call":["other text == ","other text ","other char_no == ","other char_no ","other line_no == ","other line_no "," class == ","other class "," class "]}," F95 definition_info":{"type":"method","name":"definition_info","children":[],"call":["defitem nodoc= ","defs [] collect! ","defs [] ","trailing_comment =~ ","defs << ","Fortran95Definition  new ","inivalue << ","arraysuffix << ","bracket > ","(lvar :dquote) ! ","(lvar :squote) ! ","trailing_comment << "," remove_header_marker ","comment << ","varname << ","(lvar :commentflag) ! ","(lvar :iniflag) ! ","bracket <= ","characters split each ","characters split ","defs size ","type << ","7 gsub gsub ","7 gsub ","line =~ ","defs [] comment << ","defs [] comment ","lines split each ","lines split ","Array  new ","Array  new  [] collect! ","Array  new  [] ","Array  new  << ","Array  new  size ","Array  new  [] comment << ","Array  new  [] comment "]}," F95 Fortran95Definition include_attr?":{"type":"method","name":"include_attr?","children":[],"call":["type strip chomp upcase == ","attr strip chomp upcase ","attr strip chomp ","attr strip ","type strip chomp upcase ","type strip chomp ","type strip ","@types split each ","@types split ","attr ! "]}," F95 Fortran95Definition to_s":{"type":"method","name":"to_s","children":[],"call":[" types "]}," F95 Fortran95Definition initialize":{"type":"method","name":"initialize","children":[],"call":[]}," F95 remove_private_comments":{"type":"method","name":"remove_private_comments","children":[],"call":["body gsub! "]}," F95 remove_header_marker":{"type":"method","name":"remove_header_marker","children":[],"call":["text gsub "]}," F95 remove_empty_head_lines":{"type":"method","name":"remove_empty_head_lines","children":[],"call":["lines join ","lines delete_if ","text split ","text split  join ","text split  delete_if "]}," F95 remove_trailing_alias":{"type":"method","name":"remove_trailing_alias","children":[],"call":["comment_block join ","comment_block unshift ","(str \"^\\\\s?\") =~ ","checked ! ","lines each ","Array  new ","text split reverse ","text split ","text ! ","Array  new  join ","Array  new  unshift ","text split reverse  each "]}," F95 block_end?":{"type":"method","name":"block_end?","children":[],"call":["line =~ ","line ! "]}," F95 block_start?":{"type":"method","name":"block_start?","children":[],"call":["line =~ ","line ! "]}," F95 semicolon_to_linefeed":{"type":"method","name":"semicolon_to_linefeed","children":[],"call":["lines join ","words join ","(lvar :commentout) ! ","(lvar :dquote) ! ","(lvar :squote) ! ","words collect! ","line split ","lines collect! ","text split ","text split  join ","line split  join ","line split  collect! ","text split  collect! "]}," F95 comment_out?":{"type":"method","name":"comment_out?","children":[],"call":["(lvar :dquote) ! ","(lvar :squote) ! ","line split each ","line split "]}," F95 continuous_line?":{"type":"method","name":"continuous_line?","children":[],"call":[" comment_out? ","$~ pre_match "]}," F95 united_to_one_line":{"type":"method","name":"united_to_one_line","children":[],"call":["body << ","\n + ","words join ","brank_flag ! ","previous_continuing ! ","ignore ! ","(lvar :commentout) ! ","(lvar :dquote) ! ","(lvar :squote) ! ","brank_char + ","brank_char << ","words collect! ","words empty? ","line split ","lines each ","f90src split ","line split  join ","line split  collect! ","line split  empty? ","f90src split  each "]}," F95 check_public_methods":{"type":"method","name":"check_public_methods","children":[],"call":["alias_item [] add_method ","alias_item [] ","@stats add_method ","new_meth name= "," initialize_public_method ","@options ignore_case ","method name upcase == ","alias_item [] upcase ","method name upcase ","method name ","method name == ","parent_is_used_module ! ","used_module upcase == ","parent upcase ","used_module upcase ","used_module == ","alias_item [] each ","@@public_methods each ","parent ! ","method ! "," initialize_public_method  name= "]}," F95 check_external_aliases":{"type":"method","name":"check_external_aliases","children":[],"call":["alias_item [] add_require ","Require  new ","alias_item [] ","alias_item [] include_requires? ! ","alias_item [] include_requires? ","@options ignore_case ","alias_item [] add_method ","@stats add_method ","new_meth visibility= "," initialize_external_method ","subname upcase == ","alias_item [] upcase ","subname upcase ","subname == ","@@external_aliases each "," initialize_external_method  visibility= "]}," F95 find_visibility":{"type":"method","name":"find_visibility","children":[],"call":["info [] ","info [] == ","container name ","info [] upcase == ","subname upcase ","info [] upcase ","@options ignore_case ","visibility_info each ","visibility_info ! ","subname ! "]}," F95 set_visibility":{"type":"method","name":"set_visibility","children":[],"call":["container set_visibility_for ","info []= ","info [] ","info [] name == ","container name ","info [] name ","info [] upcase == ","subname upcase ","info [] upcase ","@options ignore_case ","info [] == ","visibility_info collect! "]}," F95 parse_visibility":{"type":"method","name":"parse_visibility","children":[],"call":["vis_info []= ","container name ","result each ","result << ","used_modules clone ","meth chomp strip ","meth chomp ","meth gsub! ","meth sub! ","methods split each ","methods split ","2 sub ","remaining_code split each ","remaining_code split ","code gsub ","used_modules << ","i name ","container includes each ","container includes ","2 sub  split each ","2 sub  split ","code gsub  split each ","code gsub  split "]}," F95 initialize_external_method":{"type":"method","name":"initialize_external_method","children":[],"call":["external_meth comment << ","external_meth comment ","external_meth add_token ","Token  new set_text ","Token  new ","external_meth start_collecting_tokens ","external_meth comment= "," remove_trailing_alias + "," remove_trailing_alias ","external_meth params= ","external_meth singleton= ","AnyMethod  new ","external_alias_header + + + ","external_alias_header + + ","external_alias_header + ","AnyMethod  new  comment << ","AnyMethod  new  comment ","AnyMethod  new  add_token ","AnyMethod  new  start_collecting_tokens ","AnyMethod  new  comment= ","AnyMethod  new  params= ","AnyMethod  new  singleton= "]}," F95 initialize_public_method":{"type":"method","name":"initialize_public_method","children":[],"call":["new_meth comment << ","method name ","parent strip chomp ","parent strip ","new_meth comment ","new_meth comment= "," remove_trailing_alias ","method comment clone ","method comment ","new_meth params= ","method params clone ","method params ","new_meth singleton= ","method singleton ","AnyMethod  new ","parent ! ","method ! ","AnyMethod  new  comment << ","AnyMethod  new  comment ","AnyMethod  new  comment= ","AnyMethod  new  params= ","AnyMethod  new  singleton= "]}," F95 find_comments":{"type":"method","name":"find_comments","children":[],"call":["nice_lines shift ","nice_lines [] ","comment_block join split ","comment_block join ","comment_block push ","line sub ","comment_block unshift ","line =~ ","lines each ","Array  new ","lines reverse! ","text split ","comment_block join split  shift ","nice_text split  shift ","comment_block join split  [] ","nice_text split  [] ","Array  new  join split ","Array  new  join ","Array  new  push ","Array  new  unshift ","text split  each ","text split  reverse! "]}," F95 find_namelists":{"type":"method","name":"find_namelists","children":[],"call":["result << "," find_arguments ","(begin\n  (lvar :text)) + + ","(begin\n  (lvar :text)) + ","namelist  + ","lines split [] =~ ","lines split [] ","lines split ","nml_comment + ","\n\n=== NAMELIST <tt><b> + + ","\n\n=== NAMELIST <tt><b> + ","2 split "," find_comments ","$~ post_match ","$~ pre_match ","lines =~ ","before_contains ! ","text ! ","namelist  +  split [] =~ ","$~ post_match  split [] =~ ","namelist  +  split [] ","$~ post_match  split [] ","namelist  +  split ","$~ post_match  split "," find_comments  + ","namelist  +  =~ ","$~ post_match  =~ "]}," F95 find_arguments":{"type":"method","name":"find_arguments","children":[],"call":["params << ","defitem include_attr? ","args_rdocforms << ","comment chomp strip ","comment chomp ","comment << ","        + + ","        + ","defitem comment split each ","defitem comment split ","defitem comment ","defitem comment chomp strip empty? ! ","defitem comment chomp strip empty? ","defitem comment chomp strip ","defitem comment chomp ","defitem types chomp strip ","defitem types chomp ","defitem types ","defitem inivalue ","defitem arraysuffix ","defitem varname chomp strip ","defitem varname chomp ","defitem varname ","arg == ","defitem varname strip chomp ","defitem varname strip ","definitions each ","arg chomp! ","arg strip! ","args each "," definition_info "," definition_info  each "]}," F95 collect_first_comment":{"type":"method","name":"collect_first_comment","children":[],"call":["not_comment << ","comment << ","body split each ","body split "]}," F95 parse_subprogram":{"type":"method","name":"parse_subprogram","children":[],"call":["subprogram add_token ","Token  new set_text ","Token  new ","subprogram start_collecting_tokens ","subprogram comment << ","subprogram comment ","subprogram comment= "," find_comments "," find_namelists ","subprogram params= ","(  + + ","(  + "," find_arguments ","code sub ","params sub sub split ","params sub sub ","params sub ","prefix ! ","subprogram singleton= "," find_params sub sub split  "]}," F95 parse_program_or_module":{"type":"method","name":"parse_program_or_module","children":[],"call":["container add_method ","@stats add_method ","new_meth name= ","pub_meth [] "," initialize_public_method ","modules name ","@options ignore_case ","meth name upcase == ","pub_meth [] upcase ","meth name upcase ","meth name ","meth name == ","modules method_list each ","modules method_list ","modules name upcase == ","used_mod upcase ","modules name upcase ","modules name == ","TopLevel  all_classes_and_modules each ","TopLevel  all_classes_and_modules ","pub_meth [] each ","pub_meth [] name == ","container name ","pub_meth [] name ","@@public_methods each ","method [] ","@@public_methods delete_if ","@@external_aliases << "," find_visibility "," check_public_methods ","container add_require ","Require  new ","container include_requires? ! ","container include_requires? "," set_visibility "," initialize_external_method ","indicated_method comment ","indicated_method params ","toplevel find_local_symbol ","TopLevel  all_files each ","TopLevel  all_files ","procedures_trailing =~ ","8 chomp strip ","8 chomp ","line =~ ","2 chomp strip ","2 chomp ","new_meth singleton= ","old_meth singleton ","old_meth clone token_stream [] text ","old_meth clone token_stream [] ","old_meth clone token_stream ","old_meth clone ","old_meth comment ","old_meth params ","@options show_all ","old_meth visibility == ","old_meth visibility ","old_meth ! ","container find_symbol ","generic_name ! ","generic_name == ","proc chomp! ","proc strip! ","procedures split each ","procedures split ","1 strip chomp ","1 strip ","interface_trailing =~ ","interface_code split each ","interface_code split ","remaining_lines join "," parse_program_or_module ","contains_lines join "," check_external_aliases ","subroutine_function comment ","subroutine_function params ","function add_token ","Token  new set_text ","Token  new ","function start_collecting_tokens ","function params << "," result( + + "," result( + ","function params ","function params sub! "," parse_subprogram ","AnyMethod  new ","function_params_org sub ","function_code << ","\n + + + ","\n + + ","\n + ","function_trailing + + ","function_code_org sub ","function_trailing + ","pre_comment join + + ","pre_comment join + ","pre_comment join ","block_searching_flag == ","subroutine_trailing + + ","subroutine_code sub ","subroutine_trailing + ","procedure_trailing =~ "," remove_empty_head_lines ","block_searching_lines join ","level_depth >= "," block_end? "," block_start? ","contains_lines << ","block_searching_lines << ","pre_comment << ","11 chomp strip ","11 chomp ","block_searching_flag ! ","remaining_lines collect! ","remaining_code split ","container set_visibility_for ","defitem varname ","defitem include_attr? ","const_or_var comment << ","const_or_var comment ","const_or_var comment= ","<b><em> + + ","<b><em> + "," find_arguments ","const_or_var params= ","const_or_var singleton= ","defitem nodoc ","const_var_defs each "," definition_info ","remaining_code << ","$~ post_match ","$~ pre_match ","interface_code << "," remove_empty_head_lines + ","remaining_code =~ ","container add_attribute ","Attr  new ","derived_types_comment empty? ! ","derived_types_comment empty? ","derived_types_comment << ","type visibility == ","type visibility ","type_visibility == ","type_visibility downcase! ","type_visibility gsub! ","type comment << ","type comment ","type comment= ","type params= ","type singleton= ","type_public_args_list << ","arg varname ","arg include_attr? ","type_args_info each ","type_code split each ","type_code split ","type_trailing + + "," find_comments ","type_code sub ","type_trailing + "," find_comments + + "," find_comments + ","type_trailing =~ ","3 chomp strip ","3 chomp ","indicated_mod parent file_relative_name ","indicated_mod parent ","toplevel find_symbol ","inc name ","container each_includes ","container add_include ","Include  new ","container include_includes? ! ","container include_includes? ","used_trailing =~ ","use_check_code << ","use_check_code =~ ","pub_meth []= ","local upcase == ","local upcase ","local == ","@@public_methods collect! ","used_elements split each ","used_elements split ","2 sub ","cascaded_modules_list join ","cascaded_modules_list empty? ! ","cascaded_modules_list empty? ","visibility_default == ","@@public_methods concat "," parse_visibility ","cascaded_modules_list << ","# + ","(send\n  (lvar :used_list) :=~\n  (regexp\n    (str \"\\\\,\\\\s*?only\\\\s*?:\")\n    (regopt :i))) ! ","used_list =~ ","before_contains_code gsub! ","before_contains_lines join ","before_contains_lines << ","level_depth < ","before_contains_flag ! ","remaining_lines each ","code split "," initialize_public_method  name= "," initialize_external_method  name= "," initialize_ initialize_external_method  ","toplevel find_local_symbol  comment ","toplevel find_local_symbol  params ","8 chomp strip edures_trailing =~ ","2 chomp strip edures_trailing =~ ","1 strip chomp _trailing =~ "," initialize_public_method  singleton= "," initialize_external_method  singleton= ","container find_symbol  singleton ","container find_symbol  clone token_stream [] text ","container find_symbol  clone token_stream [] ","container find_symbol  clone token_stream ","container find_symbol  clone ","container find_symbol  comment ","container find_symbol  params ","container find_symbol  visibility == ","container find_symbol  visibility ","container find_symbol  ! ","1 strip chomp  ! ","1 strip chomp  == ","8 chomp strip  chomp! ","2 chomp strip  chomp! ","8 chomp strip  strip! ","2 chomp strip  strip! ","8 chomp strip edures split each ","2 chomp strip edures split each ","1 strip chomp  split each ","8 chomp strip edures split ","2 chomp strip edures split ","1 strip chomp  split ","remaining_code split  join ","code split  join ","subroutine_AnyMethod  new  comment ","AnyMethod  new _function comment ","subroutine_AnyMethod  new  params ","AnyMethod  new _function params ","AnyMethod  new  add_token ","AnyMethod  new  start_collecting_tokens ","AnyMethod  new  params << ","AnyMethod  new  params ","AnyMethod  new  params sub! ","AnyMethod  new _params_org sub ","function_params_org sub _org sub ","AnyMethod  new _code << ","AnyMethod  new _trailing + + ","AnyMethod  new _code_org sub ","AnyMethod  new _trailing + ","AnyMethod  new _code sub ","8 chomp strip edure_trailing =~ ","2 chomp strip edure_trailing =~ ","remaining_code split  collect! ","code split  collect! ","remaining_lines join  split ","$~ pre_match  split ","AnyMethod  new  comment << ","AnyMethod  new  comment ","AnyMethod  new  comment= ","AnyMethod  new  params= ","AnyMethod  new  singleton= "," definition_info  each ","remaining_lines join  << ","$~ pre_match  << ","remaining_lines join  =~ ","$~ pre_match  =~ ","derived_AnyMethod  new s_comment empty? ! ","derived_AnyMethod  new s_comment empty? ","derived_AnyMethod  new s_comment << ","AnyMethod  new  visibility == ","AnyMethod  new  visibility ","AnyMethod  new _visibility == ","AnyMethod  new _visibility downcase! ","AnyMethod  new _visibility gsub! ","AnyMethod  new _public_args_list << ","AnyMethod  new _args_info each ","AnyMethod  new _code split each "," remove_empty_head_lines  split each ","AnyMethod  new _code split "," remove_empty_head_lines  split "," find_comments  + + "," remove_empty_head_lines  sub "," find_comments  + ","AnyMethod  new _trailing =~ "," find_comments  =~ ","toplevel find_symbol  parent file_relative_name ","toplevel find_symbol  parent ","2 sub  split each ","2 sub  split ","Attr  new _list join ","Attr  new _list empty? ! ","Attr  new _list empty? ","Attr  new _list << ","before_contains_lines join  gsub! ","remaining_code split  each ","code split  each "]}," F95 scan":{"type":"method","name":"scan","children":[],"call":[" parse_program_or_module ","remaining_lines join ","line == ","remaining_lines delete_if ","@top_level comment << ","@top_level comment ","(str \"\\n\\n= <i>Program</i> <tt>\") + ","program_trailing + + "," find_comments ","program_code sub ","program_trailing + "," find_comments + + "," find_comments + ","pre_comment join ","block_searching_flag == ","m add_require ","Require  new ","m include_requires? ! ","m include_requires? ","@options ignore_case ","m include_includes? ","toplevel each_classmodule ","toplevel add_require ","toplevel include_requires? ! ","toplevel include_requires? ","toplevel include_includes? ","TopLevel  all_files each ","TopLevel  all_files ","f9x_module comment= ","module_trailing + + ","module_code sub ","module_trailing + ","@stats add_module ","f9x_module record_location ","@top_level add_module ","module_program_trailing =~ "," remove_empty_head_lines ","block_searching_lines join ","level_depth >= "," block_end? "," block_start? ","block_searching_lines << ","other_block_level_depth < ","pre_comment << ","line =~ "," block_start? ! ","other_block_searching_flag ! ","block_searching_flag ! ","remaining_lines collect! ","remaining_code split ","@top_level comment= "," collect_first_comment "," semicolon_to_linefeed "," united_to_one_line "," remove_private_comments ","remaining_code split  join ","remaining_code split  delete_if ","@top_level add_module  comment= ","@top_level add_module  record_location "," find_comments  =~ ","remaining_code split  collect! "," semicolon_to_linefeed  split "," united_to_one_line  split "," remove_private_comments  split "]}," F95 Token set_text":{"type":"method","name":"set_text","children":[],"call":[]}," F95 Token initialize":{"type":"method","name":"initialize","children":[],"call":[]}," C warn":{"type":"method","name":"warn","children":[],"call":["$stderr flush ","$stderr puts "]}," C scan":{"type":"method","name":"scan","children":[],"call":[" do_aliases "," do_includes "," do_methods "," do_constants "," do_classes "," remove_commented_out_lines "," do_attrs ","@store add_c_variables "," do_missing "," do_modules "," deduplicate_call_seq "," do_classes_and_modules "]}," C remove_private_comments":{"type":"method","name":"remove_private_comments","children":[],"call":["comment sub! ","comment gsub! "]}," C remove_commented_out_lines":{"type":"method","name":"remove_commented_out_lines","children":[],"call":["@content gsub! ","@content gsub ","@content gsub  gsub! ","@content gsub  gsub "]}," C mangle_comment":{"type":"method","name":"mangle_comment","children":[],"call":["  * ","$& length ","comment gsub! ","comment sub! "]}," C handle_tab_width":{"type":"method","name":"handle_tab_width","children":[],"call":["(send\n  (send\n    (lvar :body) :split\n    (regexp\n      (str \"\\\\n\")\n      (regopt))) :map) join ","  * ","tab_width * - ","$` length % ","$` length ","tab_width * ","$& length ","line gsub! ","body split map ","body split ","@options tab_width ","@options tab_width  * - ","@options tab_width  * ","@options @options tab_width  "]}," C handle_method":{"type":"method","name":"handle_method","children":[],"call":["class_obj add_method ","meth_obj document_self "," find_body ","File  read ","@@known_bodies [] ","File  join ","meth_obj params= ","( + + ","( + ","(send\n  (begin\n    (irange\n      (int 1)\n      (lvar :p_count))) :map) join ","(irange\n  (int 1)\n  (lvar :p_count)) map ","p_count == ","p_count < "," Integer ","@stats add_method ","meth_obj singleton= ","(str \"singleton_method\") include? ","RDoc AnyMethod  new ","meth_name == "," find_class ","@known_classes [] ","meth_obj visibility= ","private_method == "," warn ","File  exist? ","@singleton_classes [] ","meth_obj record_location "," rb_scan_args ","@options warn ","meth_obj c_function= ","@singleton_classes key? ","@methods [] [] << ","@methods [] [] ","@methods [] "," add_alias ","existing_method comment ","existing_method name ","m c_function == ","m c_function ","class_obj method_list find ","class_obj method_list ","class_obj temporary_section= ","class_obj add_section ","meth_obj section_title ","args join "," find_class  add_method ","RDoc AnyMethod  new  document_self "," find_ find_body  ","RDoc AnyMethod  new  params= ","meth_obj (send\n  (begin\n    (irange\n      (int 1)\n      (lvar :p_count))) :map) join = ","RDoc AnyMethod  new  singleton= ","meth_obj @singleton_classes key? = ","(str \"@singleton_classes key? _method\") include? ","RDoc AnyMethod  new  visibility= ","@@singleton_classes key? _classes [] ","RDoc AnyMethod  new  record_location ","RDoc AnyMethod  new  c_function= ","@@singleton_classes key? _classes key? "," find_class  method_list find "," find_class  method_list "," find_class  temporary_section= "," find_class  add_section ","RDoc AnyMethod  new  section_title "]}," C handle_ifdefs_in":{"type":"method","name":"handle_ifdefs_in","children":[],"call":["body gsub "]}," C handle_constants":{"type":"method","name":"handle_constants","children":[],"call":["class_obj add_constant ","RDoc Constant  new "," mangle_comment ","elements last lstrip ","elements last ","1 nil? ","new_definition sub! ","new_definition gsub! ","new_definition empty? ","elements [] join ","elements [] ","elements empty? ","elements nil? "," mangle_comment split ","type downcase == ","type downcase "," find_const_comment "," warn "," find_class ","@known_classes [] ","@stats add_constant ","comment split "," normalize_comment "," strip_stars ","const_name inspect ","con record_location ","RDoc Comment  new ","comment text split ","comment text ","comment normalize ","@options warn ","new_comment lstrip ","no_match empty? ","Enclosing class or module %p is not known % ","new_definition gsub "," new_comment ","class_name [] ","class_obj add_RDoc Constant  new stant "," find_class  add_constant "," mangle_ find_const_comment  "," mangle_ normalize_comment  "," mangle_ strip_stars  "," mangle_comment split  last lstrip ","comment split  last lstrip ","comment text split  last lstrip "," mangle_comment split  last ","comment split  last ","comment text split  last ","elements [] join  sub! ","new_definition gsub  sub! ","elements [] join  gsub! ","new_definition gsub  gsub! ","elements [] join  empty? ","new_definition gsub  empty? "," mangle_comment split  [] join ","comment split  [] join ","comment text split  [] join "," mangle_comment split  [] ","comment split  [] ","comment text split  [] "," mangle_comment split  empty? ","comment split  empty? ","comment text split  empty? "," mangle_comment split  nil? ","comment split  nil? ","comment text split  nil? "," mangle_ find_const_comment  split "," mangle_ normalize_comment  split "," mangle_ strip_stars  split "," find_RDoc Constant  new st_comment "," find_const_ find_const_comment  "," find_const_ normalize_comment  "," find_const_ strip_stars  ","@stats add_RDoc Constant  new stant "," find_const_comment  split "," normalize_comment  split "," strip_stars  split "," normalize_ find_const_comment  "," normalize_ normalize_comment  "," normalize_ strip_stars  ","RDoc Constant  new st_name inspect ","RDoc Constant  new  record_location "," find_const_comment  text split "," normalize_comment  text split "," strip_stars  text split "," find_const_comment  text "," normalize_comment  text "," strip_stars  text "," find_const_comment  normalize "," normalize_comment  normalize "," strip_stars  normalize ","elements last  lstrip ","elements last lstrip  lstrip ","RDoc Comment  new  lstrip "," new_comment  lstrip ","new_ find_const_comment  lstrip ","new_ normalize_comment  lstrip ","new_ strip_stars  lstrip ","elements [] join  gsub ","new_definition gsub  gsub "," elements last  "," elements last lstrip  "," RDoc Comment  new  ","  new_comment  "," new_ find_const_comment  "," new_ normalize_comment  "," new_ strip_stars  ","@known_classes []  [] "]}," C handle_class_module":{"type":"method","name":"handle_class_module","children":[],"call":["@known_classes []= ","cm full_name ","@@enclosure_classes []= ","@classes []= "," find_class_comment ","cm record_location ","enclosure toplevel ","@stats add_module ","enclosure add_module ","@stats add_class ","enclosure add_class ","class_mod == "," warn ","(str \"Enclosing class/module '\") + ","@classes [] "," handle_class_module ","@known_classes [] ","@@enclosure_classes [] ","@content =~ ","enclosure full_name to_s + ","enclosure full_name to_s ","enclosure full_name ","enclosure top_level ","enclosure full_name + ","RDoc ClassModule  === ","type == ","enclosure nil? ","@options warn ","@store add_c_enclosure ","@missing_dependencies []= ","@enclosure_dependencies [] << ","@enclosure_dependencies [] ","@store find_c_enclosure ","@store c_enclosure_classes []= ","@store c_enclosure_classes ","@store c_enclosure_classes [] ","enclosure add_module  full_name ","enclosure add_class  full_name ","cm enclosure full_name to_s +  ","cm enclosure full_name +  ","@@@classes [] _classes []= ","@@@known_classes [] _classes []= ","enclosure add_module  record_location ","enclosure add_class  record_location ","@classes []  toplevel ","@known_classes []  toplevel ","@classes []  add_module ","@known_classes []  add_module ","@classes []  add_class ","@known_classes []  add_class ","@@@classes [] _classes [] ","@@@known_classes [] _classes [] ","@classes []  full_name to_s + ","@known_classes []  full_name to_s + ","enclosure enclosure full_name to_s +  to_s + ","enclosure enclosure full_name +  to_s + ","@classes []  full_name to_s ","@known_classes []  full_name to_s ","enclosure enclosure full_name to_s +  to_s ","enclosure enclosure full_name +  to_s ","@classes []  full_name ","@known_classes []  full_name ","enclosure enclosure full_name to_s +  ","enclosure enclosure full_name +  ","@classes []  top_level ","@known_classes []  top_level ","@classes []  full_name + ","@known_classes []  full_name + ","enclosure enclosure full_name to_s +  + ","enclosure enclosure full_name +  + ","@classes []  nil? ","@known_classes []  nil? ","@store add_c_@classes []  ","@store add_c_@known_classes []  ","@@classes [] _dependencies [] << ","@@known_classes [] _dependencies [] << ","@@classes [] _dependencies [] ","@@known_classes [] _dependencies [] ","@store find_c_@classes []  ","@store find_c_@known_classes []  ","@store c_@classes [] _classes []= ","@store c_@known_classes [] _classes []= ","@store c_@classes [] _classes ","@store c_@known_classes [] _classes ","@store c_@classes [] _classes [] ","@store c_@known_classes [] _classes [] "]}," C handle_attr":{"type":"method","name":"handle_attr","children":[],"call":["class_obj add_attribute ","RDoc Attr  new "," mangle_comment ","comment empty? "," find_attr_comment "," find_class ","@known_classes [] ","rw << ","@stats add_method "," strip_stars ","@stats add_attribute ","attr_name gsub ","1 == ","attr record_location ","comment normalize ","TRUE_VALUES  include? ","class_obj add_RDoc Attr  new ribute "," find_class  add_attribute ","class_obj add_RDoc Attr  new ibute "," mangle_ mangle_comment  "," mangle_ find_attr_comment  "," mangle_ strip_stars  "," mangle_comment  empty? "," find_attr_comment  empty? "," strip_stars  empty? "," find_RDoc Attr  new r_comment "," find_attr_ mangle_comment  "," find_attr_ find_attr_comment  "," find_attr_ strip_stars  "," find_RDoc Attr  new _comment ","@stats add_RDoc Attr  new ribute ","@stats add_RDoc Attr  new ibute ","RDoc Attr  new r_name gsub ","RDoc Attr  new _name gsub ","attr_attr_name gsub  gsub ","RDoc Attr  new r record_location ","RDoc Attr  new  record_location "," mangle_comment  normalize "," find_attr_comment  normalize "," strip_stars  normalize "]}," C find_override_comment":{"type":"method","name":"find_override_comment","children":[],"call":["@content =~ ","Regexp  escape ","RDoc Comment  new ","meth_obj name_prefix ","meth_obj name "," new_comment ","meth_obj Regexp  escape _prefix ","meth_obj name_Regexp  escape  ","meth_obj Regexp  escape  "]}," C find_modifiers":{"type":"method","name":"find_modifiers","children":[],"call":["meth_obj call_seq= ","seq gsub! ","comment sub! ","meth_obj document_self= ","RDoc Parser  process_directive ","1 strip ","comment slice! ","comment [] ","seq_stop + ","$~ offset last ","$~ offset ","comment [] =~ ","Regexp  escape ","1 =~ ","comment =~ "," look_for_directives_in ","comment extract_call_seq ","comment normalize ","meth_obj call_comment [] = ","comment []  gsub! ","comment [] _stop + ","seq_stop +  + ","comment extract_call_comment []  "]}," C find_const_comment":{"type":"method","name":"find_const_comment","children":[],"call":["@content =~ ","RDoc Comment  new ","table [] ","class_name + + ","class_name + ","@const_table [] "," gen_const_table "," new_comment ","@const_table []  [] ","@const_@const_table []  [] "," gen_const_@const_table []  "]}," C find_class_comment":{"type":"method","name":"find_class_comment","children":[],"call":["class_meth comment= "," mangle_comment ","comments [] ","index - ","chunk =~ ","comments []= ","@content split each_with_index ","@content split ","class_name split last ","class_name split ","@content =~ ","class_mod comment= "," strip_stars "," look_for_directives_in ","1 sub ","class_mod add_comment ","comment normalize ","RDoc Comment  new "," new_comment ","class_meth comments [] = ","class_meth  look_for_directives_in = ","class_meth  strip_stars = ","class_meth 1 sub = ","class_meth RDoc Comment  new = ","class_meth  new_comment = "," mangle_comments []  "," mangle_ look_for_directives_in  "," mangle_ strip_stars  "," mangle_1 sub  "," mangle_RDoc Comment  new  "," mangle_ new_comment  ","comments [] s [] "," look_for_directives_in s [] "," strip_stars s [] ","1 sub s [] ","RDoc Comment  new s [] "," new_comment s [] ","comments [] s []= "," look_for_directives_in s []= "," strip_stars s []= ","1 sub s []= ","RDoc Comment  new s []= "," new_comment s []= ","class_name split last  split last ","class_name split last  split ","class_mod comments [] = ","class_mod  look_for_directives_in = ","class_mod  strip_stars = ","class_mod 1 sub = ","class_mod RDoc Comment  new = ","class_mod  new_comment = ","class_mod add_comments []  ","class_mod add_ look_for_directives_in  ","class_mod add_ strip_stars  ","class_mod add_1 sub  ","class_mod add_RDoc Comment  new  ","class_mod add_ new_comment  ","comments []  normalize "," look_for_directives_in  normalize "," strip_stars  normalize ","1 sub  normalize ","RDoc Comment  new  normalize "," new_comment  normalize "," new_comments []  "," new_ look_for_directives_in  "," new_ strip_stars  "," new_1 sub  "," new_RDoc Comment  new  "," new_ new_comment  "]}," C find_class":{"type":"method","name":"find_class","children":[],"call":["@classes [] ","@classes []= ","container record_location ","@top_level add_class ","@top_level add_module ","raw_name =~ ","container name= ","@top_level add_class  record_location ","@top_level add_module  record_location ","@top_level add_class  name= ","@top_level add_module  name= "]}," C find_body":{"type":"method","name":"find_body","children":[],"call":[" warn ","@options quiet ","meth_obj comment= "," mangle_comment "," find_modifiers "," find_override_comment ","meth_obj name "," find_body "," mangle_comment + ","meth_obj comment ","meth_obj add_token ","RDoc RubyToken Token  new set_text ","RDoc RubyToken Token  new ","meth_obj start_collecting_tokens ","Regexp  new match ","Regexp  new ","Regexp  escape + ","Regexp  escape "," remove_private_comments ","(begin\n  (lvar :re)) =~ ","meth_obj comment to_s "," strip_stars "," strip_stars + ","tk set_text ","@options verbosity > ","@options verbosity ","@options warn ","comment normalize ","meth_obj line= ","file_content [] count + ","file_content [] count ","file_content [] ","meth_obj offset= ","$~ offset first ","$~ offset ","RDoc Comment  new ","(begin\n  (send\n    (const nil :Regexp) :escape\n    (lvar :body))) =~ ","comment remove_private ","args [] ","@body_table [] [] ","@body_table [] "," gen_body_table "," new_comment ","meth_obj  find_override_comment = ","meth_obj RDoc Comment  new = ","meth_obj  new_comment = "," mangle_ find_override_comment  "," mangle_RDoc Comment  new  "," mangle_ new_comment  "," find_override_ find_override_comment  "," find_override_RDoc Comment  new  "," find_override_ new_comment  "," find_ find_override_comment  "," find_ find_body  "," find_args []  "," mangle_ find_override_comment  + "," mangle_RDoc Comment  new  + "," mangle_ new_comment  + ","meth_obj  find_override_comment  ","meth_obj RDoc Comment  new  ","meth_obj  new_comment  "," remove_private_ find_override_comment s "," remove_private_RDoc Comment  new s "," remove_private_ new_comment s "," Regexp  escape + move_private_comments ","(begin\n  (lvar :Regexp  escape + )) =~ ","meth_obj  find_override_comment  to_s ","meth_obj RDoc Comment  new  to_s ","meth_obj  new_comment  to_s ","RDoc RubyToken Token  new  set_text "," find_override_comment  normalize ","RDoc Comment  new  normalize "," new_comment  normalize ","meth_obj $~ offset first = ","$~ $~ offset first  first ","$~ $~ offset first  ","(begin\n  (send\n    (const nil :Regexp) :escape\n    (lvar : find_body ))) =~ ","(begin\n  (send\n    (const nil :Regexp) :escape\n    (lvar :args [] ))) =~ "," find_override_comment  remove_private ","RDoc Comment  new  remove_private "," new_comment  remove_private ","comment Regexp  escape + move_private ","@ find_body _table [] [] ","@args [] _table [] [] ","@ find_body _table [] ","@args [] _table [] "," gen_ find_body _table "," gen_args [] _table "," new_ find_override_comment  "," new_RDoc Comment  new  "," new_ new_comment  "]}," C find_attr_comment":{"type":"method","name":"find_attr_comment","children":[],"call":["@content =~ ","Regexp  escape ","RDoc Comment  new "," new_comment "]}," C do_methods":{"type":"method","name":"do_methods","children":[],"call":[" handle_method ","@content scan "," handle_attr ","attr_writer to_i != ","attr_writer to_i ","attr_reader to_i != ","attr_reader to_i ","var_name == "]}," C do_includes":{"type":"method","name":"do_includes","children":[],"call":["cls add_include ","RDoc Include  new ","@known_classes [] ","@classes [] ","@content scan ","incl record_location ","RDoc Comment  new "," new_comment ","@classes []  add_include ","cls add_cls add_include ude ","cls add_include  record_location "," new_RDoc Comment  new  "," new_ new_comment  "]}," C do_constants":{"type":"method","name":"do_constants","children":[],"call":[" handle_constants ","var_name == ","var_name ! ","@content scan ","consts first "," handle_consts first ants ","consts first s first "]}," C do_classes":{"type":"method","name":"do_classes","children":[],"call":[" handle_class_module ","@content scan ","parent == "," handle_singleton "," do_struct_define_without_accessor "," do_singleton_class "," do_define_class_under "," do_define_class "," do_boot_defclass "]}," C do_aliases":{"type":"method","name":"do_aliases","children":[],"call":["@stats add_alias ","class_obj add_alias ","RDoc Alias  new "," find_class ","@known_classes [] ","@content scan ","al singleton= ","@singleton_classes key? ","al comment= "," strip_stars "," find_alias_comment ","al record_location ","comment normalize ","@options warn ","Enclosing class/module %p for alias %s %s not known % "," warn ","Enclosing class or module %p for alias %s %s is not known % "," add_alias ","existing_method comment ","m name == ","m name ","class_obj method_list find ","class_obj method_list ","comment to_s empty? ","comment to_s ","@stats add_aliclass_obj add_alias  ","@stats add_RDoc Alias  new ias ","clclass_obj add_alias s_obj add_aliclass_obj add_alias  "," find_class  add_alias ","class_obj add_RDoc Alias  new ias ","RDoc Aliclass_obj add_alias   new "," find_clclass_obj add_alias s ","@known_clclass_obj add_alias ses [] ","RDoc Alias  new  singleton= ","@singleton_clclass_obj add_alias ses key? ","RDoc Alias  new  comment= ","al  strip_stars = ","al  find_alias_comment = ","al existing_method comment = "," find_aliclass_obj add_alias _comment "," find_RDoc Alias  new ias_comment "," find_alias_ strip_stars  "," find_alias_ find_alias_comment  "," find_alias_existing_method comment  ","RDoc Alias  new  record_location ","comment normRDoc Alias  new ize "," strip_stars  normalize "," find_alias_comment  normalize ","existing_method comment  normalize ","Enclosing clclass_obj add_alias s/module %p for aliclass_obj add_alias  %s %s not known % ","Enclosing class/module %p for RDoc Alias  new ias %s %s not known % ","Enclosing clclass_obj add_alias s or module %p for aliclass_obj add_alias  %s %s is not known % ","Enclosing class or module %p for RDoc Alias  new ias %s %s is not known % "," add_aliclass_obj add_alias  "," add_RDoc Alias  new ias ","existing_method  strip_stars  ","existing_method  find_alias_comment  ","existing_method existing_method comment  ","clclass_obj add_alias s_obj method_list find "," find_class  method_list find ","clclass_obj add_alias s_obj method_list "," find_class  method_list "," strip_stars  to_s empty? "," find_alias_comment  to_s empty? ","existing_method comment  to_s empty? "," strip_stars  to_s "," find_alias_comment  to_s ","existing_method comment  to_s "]}," C initialize":{"type":"method","name":"initialize","children":[],"call":["File  dirname ","Hash  new "," handle_tab_width "," handle_ifdefs_in ","RDoc KNOWN_CLASSES  dup "," fetch each "," fetch "," warn ","(send\n  (send\n    (lvar :cycle_vars) :sort) :map) join ","@missing_dependencies [] "," delete ","cycle_vars sort map ","cycle_vars sort ","e message scan flatten ","e message scan ","e message "," each_key ","@enclosure_dependencies extend ","@enclosure_dependencies instance_variable_set ","h []= "," load_variable_map ","i []= ","@options markup ","(send\n  (send\n    (lvar :(send\n  (send\n    (lvar :cycle_vars) :sort) :map) join _vars) :sort) :map) join ","(send\n  (send\n    (lvar :e message scan flatten ) :sort) :map) join ","(send\n  (send\n    (lvar :cycle_vars) :sort) :map) join _vars sort map ","e message scan flatten  sort map ","(send\n  (send\n    (lvar :cycle_vars) :sort) :map) join _vars sort ","e message scan flatten  sort "]}," Options quiet=":{"type":"method","name":"quiet=","children":[],"call":[]}," Options quiet":{"type":"method","name":"quiet","children":[],"call":["@verbosity zero? "]}," ToTexInfo format":{"type":"method","name":"format","children":[],"call":["text txt gsub gsub gsub gsub gsub gsub gsub gsub gsub ","text txt gsub gsub gsub gsub gsub gsub gsub gsub ","text txt gsub gsub gsub gsub gsub gsub gsub ","text txt gsub gsub gsub gsub gsub gsub ","text txt gsub gsub gsub gsub gsub ","text txt gsub gsub gsub gsub ","text txt gsub gsub gsub ","text txt gsub gsub ","text txt gsub ","text txt "]}," ToTexInfo accept_rule":{"type":"method","name":"accept_rule","children":[],"call":["@text << "]}," ToTexInfo accept_blank_line":{"type":"method","name":"accept_blank_line","children":[],"call":["@text << "]}," ToTexInfo accept_list_item":{"type":"method","name":"accept_list_item","children":[],"call":["@text << "," format "]}," ToTexInfo accept_list_end":{"type":"method","name":"accept_list_end","children":[],"call":["@text << "]}," ToTexInfo accept_list_start":{"type":"method","name":"accept_list_start","children":[],"call":["@text << "]}," ToTexInfo accept_heading":{"type":"method","name":"accept_heading","children":[],"call":["@text << "," format ","(str \"@majorheading\") [] ","text head_level - ","text head_level "]}," ToTexInfo accept_verbatim":{"type":"method","name":"accept_verbatim","children":[],"call":["@text << "," format "]}," ToTexInfo accept_paragraph":{"type":"method","name":"accept_paragraph","children":[],"call":["@text << "," format "]}," ToTexInfo end_accepting":{"type":"method","name":"end_accepting","children":[],"call":["@text join "]}," ToTexInfo start_accepting":{"type":"method","name":"start_accepting","children":[],"call":[]}," ToHtml convert_string_fancy":{"type":"method","name":"convert_string_fancy","children":[],"call":["item gsub gsub gsub gsub gsub gsub gsub gsub gsub gsub ","item gsub gsub gsub gsub gsub gsub gsub gsub gsub ","item gsub gsub gsub gsub gsub gsub gsub gsub ","item gsub gsub gsub gsub gsub gsub gsub ","item gsub gsub gsub gsub gsub gsub ","item gsub gsub gsub gsub gsub ","item gsub gsub gsub gsub ","item gsub gsub gsub ","item gsub gsub ","item gsub ","item gsub gsub gsub gsub gsub gsub gsub gsub gsub gsub gsub "]}," ToHtml convert_string_simple":{"type":"method","name":"convert_string_simple","children":[],"call":["CGI  escapeHTML "]}," ToHtml tt?":{"type":"method","name":"tt?","children":[],"call":["tag bit == ","tag bit "]}," ToHtml in_tt?":{"type":"method","name":"in_tt?","children":[],"call":["@in_tt > "]}," ToHtml gen_relative_url":{"type":"method","name":"gen_relative_url","children":[],"call":[]}," Generator Method inspect":{"type":"method","name":"inspect","children":[],"call":["#<%s:0x%x %s%s%s (%s)%s> % ","@context visibility "," name ","@context singleton ","@context parent name ","@context parent "," object_id "," class ","@context is_alias_for "]}," Generator Method formatter":{"type":"method","name":"formatter","children":[],"call":["RDoc Markup ToHtmlCrossref  new ","@options show_hash "," path ","@options formatter "]}," Generator Context formatter":{"type":"method","name":"formatter","children":[],"call":["RDoc Markup ToHtmlCrossref  new ","@options show_hash "," path ","@options formatter "]}," RDoc Generator TexinfoTemplate method_prefix":{"type":"method","name":"method_prefix","children":[],"call":["(pair\n  (str \"Class\")\n  (str \".\")) [] ","section [] "]}," RDoc Generator TexinfoTemplate target":{"type":"method","name":"target","children":[],"call":[]}," RDoc Generator TexinfoTemplate href":{"type":"method","name":"href","children":[],"call":[]}," RDoc Generator TexinfoTemplate render":{"type":"method","name":"render","children":[],"call":["ERB  new result "," binding ","ERB  new "," template "]}," RDoc Generator TexinfoTemplate template":{"type":"method","name":"template","children":[],"call":[" File  read "," File  join "]}," RDoc Generator TexinfoTemplate initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RDoc Generator Texinfo generate":{"type":"method","name":"generate","children":[],"call":["f puts ","TexinfoTemplate  new render ","TexinfoTemplate  new ","@options title ","@options op_name gsub ","@options op_name "," open ","x value_hash ","(send\n  (ivar :@files) :+\n  (ivar :@classes)) each ","@files + "," RDoc Generator Context  build_indicies "]}," RDoc Generator Texinfo initialize":{"type":"method","name":"initialize","children":[],"call":["@options formatter= "," RDoc Markup ToTexInfo  new ","@options op_name ","@options inline_source= "]}," HTML index_to_links":{"type":"method","name":"index_to_links","children":[],"call":["(send\n  (send\n    (lvar :collection) :sort) :map) compact ","f index_name ","f path ","f document_self ","collection sort map ","collection sort ","RDoc Markup ToHtml  gen_relative_url ","result compact! ","sorted_collection map "]}," RDoc Include inspect":{"type":"method","name":"inspect","children":[],"call":["#<%s:0x%x %s.include %s> % "," parent_name "," object_id "," class "]}," RDoc Require inspect":{"type":"method","name":"inspect","children":[],"call":["#<%s:0x%x require '%s' in %s> % "," parent_file_name "," object_id "," class "]}," RDoc Attr inspect":{"type":"method","name":"inspect","children":[],"call":["#<%s:0x%x %s.%s :%s> % "," parent_name "," object_id "," class "," rw "]}," RDoc Alias inspect":{"type":"method","name":"inspect","children":[],"call":["#<%s:0x%x %s.alias_method %s, %s> % "," parent name "," parent "," object_id "," class "]}," RDoc AnyMethod inspect":{"type":"method","name":"inspect","children":[],"call":["#<%s:0x%x %s%s%s (%s)%s> % "," visibility "," name "," singleton "," parent_name "," object_id "," class ","@is_alias_for name "]}," RDoc NormalModule module?":{"type":"method","name":"module?","children":[],"call":[]}," RDoc NormalModule inspect":{"type":"method","name":"inspect","children":[],"call":["#<%s:0x%x module %s includes: %p attributes: %p methods: %p aliases: %p> % "," object_id "," class "]}," RDoc NormalModule comment=":{"type":"method","name":"comment=","children":[],"call":["@comment << << ","@comment << ","@comment empty? ","comment empty? ","@@comment << <<  << << ","@@comment << <<  << ","@@comment << <<  empty? ","@comment << <<  empty? "]}," RDoc NormalClass inspect":{"type":"method","name":"inspect","children":[],"call":["<%s:0x%x class %s%s includes: %p attributes: %p methods: %p aliases: %p> % "," object_id "," class "]}," RDoc ClassModule superclass=":{"type":"method","name":"superclass=","children":[],"call":["@superclass == ","@superclass nil? "," raise "," full_name "," module? "]}," RDoc ClassModule superclass":{"type":"method","name":"superclass","children":[],"call":["scope parent ","superclass full_name ","c name == ","c name ","scope classes find ","scope classes ","TopLevel  === ","scope nil? "," raise "," full_name "," module? ","scope parent  parent ","scope parent  classes find ","scope parent  classes ","scope parent  nil? "]}," RDoc ClassModule module?":{"type":"method","name":"module?","children":[],"call":[]}," RDoc TopLevel inspect":{"type":"method","name":"inspect","children":[],"call":["#<%s:0x%x %p modules: %p classes: %p> % ","@classes map ","@modules map "," file_base_name "," object_id "," class "]}," RDoc TopLevel find_file_named":{"type":"method","name":"find_file_named","children":[],"call":[]}," RDoc TopLevel file_base_name":{"type":"method","name":"file_base_name","children":[],"call":["File  basename "]}," RDoc Context find_file_named":{"type":"method","name":"find_file_named","children":[],"call":[" toplevel class find_file_named "," toplevel class "," toplevel "]}," RDoc Context methods_matching":{"type":"method","name":"methods_matching","children":[],"call":["methods include? ","a name ","@attributes each ","count == ","methods size ","m singleton == ","m singleton ","m name ","@method_list each "]}," RDoc Context Section inspect":{"type":"method","name":"inspect","children":[],"call":["#<%s:0x%x %s %p> % "," title "," object_id "," class "]}," RDoc Context Section ==":{"type":"method","name":"==","children":[],"call":["@sequence == ","other sequence "," class === "," class "]}," RDoc CodeObject parent_name":{"type":"method","name":"parent_name","children":[],"call":["@parent name "]}," RDoc CodeObject parent_file_name":{"type":"method","name":"parent_file_name","children":[],"call":["@parent file_base_name "]}," Driver create_cache_for":{"type":"method","name":"create_cache_for","children":[],"call":[" write_cache ","cache []= ","method [] ","method []= ","f =~ "," read_yaml ","yaml =~ ","Dir  [] each ","Dir  [] ","File  join ","File  dirname ","f index == ","f index ","method_files each ","OpenStructHash  new ","klass [] "," class_cache [] "," class_cache ","Regexp  escape ","Gem  path any? ","Gem  path "," write_OpenStructHash  new  ","OpenStructHash  new  []= "," read_yaml  [] "," read_yaml  []= ","File  dirmethod []  "," read_yaml _files each ","klass []  each "," class_cache []  [] "," class_OpenStructHash  new  [] "," class_OpenStructHash  new  "]}," Driver display_method":{"type":"method","name":"display_method","children":[],"call":["@display display_method_info "," display ","out << ","RDoc Markup BlankLine  new ","method comment ","RDoc Markup Rule  new ","method block_params ","method call_seq ","RDoc Markup Verbatim  new ","call_seq flatten ","call_seq map ","method call_seq chomp split ","method call_seq chomp ","RDoc Markup Heading  new ","method parent_name ","name =~ ","Regexp  escape ","RDoc Markup Paragraph  new ","store friendly_path ","methods each ","found each ","RDoc Markup Document  new "," raise ","found empty? "," load_methods_matching ","arglists flatten ","arglists map ","method arglists chomp split ","method arglists chomp ","method arglists ","line + "," method_document "," filter_methods ","filtered each "," add_method ","RDoc Markup Document  new  << "," method_document  << ","method method call_seq chomp split  ","method call_seq chomp split  flatten ","method call_seq chomp split  map ","method method call_seq chomp split  chomp split ","method method call_seq chomp split  chomp "," load_methods_matching  each "," load_methods_matching  empty? ","method arglists chomp split  flatten ","method arglists chomp split  map ","method method arglists chomp split  chomp split ","method method arglists chomp split  chomp ","method method arglists chomp split  "," filter_methods  each "]}," Driver create_class_cache":{"type":"method","name":"create_class_cache","children":[],"call":[" write_cache "," class_cache_file_path "," populate_class_cache "," warn ","classes size ","Dir  [] "," map_dirs ","fp << ","@doc_dirs join ","File  open ","OpenStructHash  new "," OpenStructHash  new _file_path "," populate_OpenStructHash  new  "]}," Driver OpenStructHash method_missing":{"type":"method","name":"method_missing","children":[],"call":[" [] ","method to_s "]}," Driver OpenStructHash merge_enums":{"type":"method","name":"merge_enums","children":[],"call":[" []= "," [] update "," [] "," [] empty? ","String  === ","other each "]}," Driver OpenStructHash convert":{"type":"method","name":"convert","children":[],"call":[]}," DefaultDisplay display_method_list_choice":{"type":"method","name":"display_method_list_choice","children":[],"call":[" display_method_info ","methods [] ","choice - ","@formatter raw_print_line ","choice > ","methods size ","choice == ","choice to_i ","$stdin gets strip! ","$stdin gets ","%3d %s [%s]\n % ","method source_path ","method full_name ","index + ","methods each_with_index ","@formatter blankline ","@formatter wrap "," page "," display_methods [] _info ","methods [] s [] ","choice to_i  - ","$stdin gets strip!  - ","choice to_i  > ","$stdin gets strip!  > ","methods [] s size ","choice to_i  == ","$stdin gets strip!  == ","choice to_i  to_i ","$stdin gets strip!  to_i ","methods []  source_path ","methods []  full_name ","methods [] s each_with_index "]}," DefaultDisplay display_class_method_list":{"type":"method","name":"display_class_method_list","children":[],"call":["@formatter wrap ","method_names join ","method_names sort! ","method_map []= ","item name ","data_type == ","method_names << ","data each ","@formatter display_heading ","data_type to_s split join capitalize << ","data_type to_s split join capitalize ","data_type to_s split join ","data_type to_s split ","data_type to_s ","@formatter blankline ","data empty? ","data nil? ","klass send ","class_data each ","klass send _type == ","klass send  each ","@formatter display_data_type to_s split join capitalize <<  ","klass send _type to_s split join capitalize << ","klass send _type to_s split join capitalize ","klass send _type to_s split join ","klass send _type to_s split ","klass send _type to_s ","klass send  empty? ","klass send  nil? ","class_klass send  each "]}," DefaultDisplay get_class_method_choice":{"type":"method","name":"get_class_method_choice","children":[],"call":["@formatter raw_print_line ","class_or_instance == ","choice_string =~ ","method_map [] ","choice_string == ","$stdin gets strip ","$stdin gets ","Readline  readline strip ","Readline  readline ","Readline  completion_proc= ","abbreviations values uniq grep ","abbreviations values uniq ","abbreviations values "," proc ","method_map keys abbrev ","method_map keys ","method_map []  == ","$stdin gets strip  =~ ","Readline  readline strip  =~ ","$stdin gets strip  == ","Readline  readline strip  == ","method_map keys abbrev  values uniq grep ","method_map keys abbrev  values uniq ","method_map keys abbrev  values "]}," Parser binary?":{"type":"method","name":"binary?","children":[],"call":[]}," Generator Context build_indices":{"type":"method","name":"build_indices","children":[],"call":[]}," RDoc Generator TEXINFO generate":{"type":"method","name":"generate","children":[],"call":["f puts ","TexinfoTemplate  new render ","TexinfoTemplate  new ","@options title ","@options op_name gsub ","@options op_name "," open ","x value_hash ","(send\n  (ivar :@files) :+\n  (ivar :@classes)) each ","@files + "," RDoc Generator Context  build_indices "]}," RDoc Generator TEXINFO initialize":{"type":"method","name":"initialize","children":[],"call":["@options formatter= "," RDoc Markup ToTexInfo  new ","@options op_name ","@options inline_source= "]}," KilmerFactory write_extra_pages":{"type":"method","name":"write_extra_pages","children":[],"call":["template write_html_on ","File  open ","RDoc TemplatePage  new "," get_BLANK ","RDoc TemplatePage  new  write_html_on "]}," KilmerFactory get_BLANK":{"type":"method","name":"get_BLANK","children":[],"call":["XHTML_STRICT_PREAMBLE  + + ","XHTML_STRICT_PREAMBLE  + "]}," KilmerFactory get_INDEX":{"type":"method","name":"get_INDEX","children":[],"call":["XHTML_FRAME_PREAMBLE  + + ","XHTML_FRAME_PREAMBLE  + "]}," KilmerFactory get_METHOD_INDEX":{"type":"method","name":"get_METHOD_INDEX","children":[],"call":[" get_FILE_INDEX "]}," KilmerFactory get_CLASS_INDEX":{"type":"method","name":"get_CLASS_INDEX","children":[],"call":[" get_FILE_INDEX "]}," KilmerFactory get_FILE_INDEX":{"type":"method","name":"get_FILE_INDEX","children":[],"call":["XHTML_STRICT_PREAMBLE  + + ","XHTML_STRICT_PREAMBLE  + "]}," KilmerFactory get_FR_INDEX_BODY":{"type":"method","name":"get_FR_INDEX_BODY","children":[],"call":[]}," KilmerFactory get_SRC_PAGE":{"type":"method","name":"get_SRC_PAGE","children":[],"call":["XHTML_STRICT_PREAMBLE  + + ","XHTML_STRICT_PREAMBLE  + "]}," KilmerFactory get_CLASS_PAGE":{"type":"method","name":"get_CLASS_PAGE","children":[],"call":[]}," KilmerFactory get_FILE_PAGE":{"type":"method","name":"get_FILE_PAGE","children":[],"call":[]}," KilmerFactory get_BODY":{"type":"method","name":"get_BODY","children":[],"call":["XHTML_STRICT_PREAMBLE  + + "," get_METHOD_LIST ","XHTML_STRICT_PREAMBLE  + "]}," KilmerFactory get_METHOD_LIST":{"type":"method","name":"get_METHOD_LIST","children":[],"call":[]}," KilmerFactory get_STYLE":{"type":"method","name":"get_STYLE","children":[],"call":[]}," KilmerFactory initialize":{"type":"method","name":"initialize","children":[],"call":["@attribute_list_heading ! ","style_attributes [] ","@class_and_module_list_heading ! ","@method_list_heading ! "," raise ","@index_css ! ","@central_css ! ","style_attributes []  ! "]}," RDoc Context modules_hash":{"type":"method","name":"modules_hash","children":[],"call":[]}," RDoc Context classes_hash":{"type":"method","name":"classes_hash","children":[],"call":[]}," Driver default_options":{"type":"method","name":"default_options","children":[],"call":[]}," PerlPOD filter":{"type":"method","name":"filter","children":[],"call":["comment gsub! ","= * ","1 to_i ","comment =~ "]}," PerlPOD scan":{"type":"method","name":"scan","children":[],"call":["transitions [] call ","transitions [] ","@content each_line "," filter ","@top_level comment ","$stderr puts "," lambda ","line =~ "]}," PerlPOD initialize":{"type":"method","name":"initialize","children":[],"call":[" warn ","preprocess handle ","RDoc Markup PreProcess  new ","@options rdoc_include ","RDoc Markup PreProcess  new  handle "]}," RDoc Context add_alias_impl":{"type":"method","name":"add_alias_impl","children":[],"call":[" add_method ","meth add_alias ","new_meth comment= ","meth name ","new_meth params= ","meth params ","new_meth singleton= ","meth singleton ","new_meth is_alias_for= ","AnyMethod  new ","an_alias new_name ","an_alias text ","AnyMethod  new  comment= ","AnyMethod  new  params= ","AnyMethod  new  singleton= ","AnyMethod  new  is_alias_for= "]}," Stats Verbose done_adding":{"type":"method","name":"done_adding","children":[],"call":[]}," Stats Verbose begin_adding":{"type":"method","name":"begin_adding","children":[],"call":[" puts "]}," Stats Normal done_adding":{"type":"method","name":"done_adding","children":[],"call":[" puts "]}," Stats Normal begin_adding":{"type":"method","name":"begin_adding","children":[],"call":[" puts "]}," Stats Normal initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Stats Quiet done_adding":{"type":"method","name":"done_adding","children":[],"call":[]}," Stats Quiet begin_adding":{"type":"method","name":"begin_adding","children":[],"call":[]}," Stats done_adding":{"type":"method","name":"done_adding","children":[],"call":["@display done_adding ","@lock synchronize "]}," Stats begin_adding":{"type":"method","name":"begin_adding","children":[],"call":["@display begin_adding "]}," Driver expand_klass":{"type":"method","name":"expand_klass","children":[],"call":[" raise ","abbrevs [] dup ","abbrevs [] ","Abbrev  abbrev ","klass =~ "," class_cache keys select "," class_cache keys "," class_cache ","expanded << ","expanded empty? ","klass split inject ","klass split ","expanded dup ","Abbrev  abbrev  [] dup ","Abbrev  abbrev  [] ","abbrevs [] dup  << ","abbrevs []  << ","abbrevs [] dup  empty? ","abbrevs []  empty? ","abbrevs [] dup  dup ","abbrevs []  dup "]}," Driver interactive":{"type":"method","name":"interactive","children":[],"call":[" exit ","formatter raw_print_line ","e message "," display_name ","name strip ","name empty? ","name nil? ","$stdin gets ","Readline  readline "," loop ","Readline  completion_proc= ","klasses grep ","method empty? ","method_type == ","name =~ ","cache keys select ","cache keys "," load_cache_for "," parse_name ","2 empty? ","1 == "," proc "," class_cache keys "," class_cache ","@display formatter ","method_name =~ "," puts "," expand_name "," print "," method "," require ","@display formatter  raw_print_line "," display_name strip  "," display_Readline  readline  "," display_ expand_name  ","name strip  strip ","Readline  readline  strip "," expand_name  strip ","name strip  empty? ","Readline  readline  empty? "," expand_name  empty? ","name strip  nil? ","Readline  readline  nil? "," expand_name  nil? "," class_cache keys  grep ","name strip  =~ ","Readline  readline  =~ "," expand_name  =~ "," load_cache_for  keys select "," load_cache_for  keys "," load_ load_cache_for _for "," parse_name strip  "," parse_Readline  readline  "," parse_ expand_name  "," class_ load_cache_for  keys "," class_ load_cache_for  ","@display @display formatter  ","method_name strip  =~ ","method_Readline  readline  =~ ","method_ expand_name  =~ "," expand_name strip  "," expand_Readline  readline  "," expand_ expand_name  "]}," Driver display_name":{"type":"method","name":"display_name","children":[],"call":["@display display_method_list "," display_method ","methods [] ","methods size == ","methods size "," raise "," select_methods ","name sub "," lookup_ancestor "," lookup_method "," loop "," expand_klass "," class_cache key? "," class_cache "," parse_name ","name =~ "," display_class ","io puts ","matches join "," page ","matches empty? "," classes keys grep "," classes keys "," classes "," list_methods_matching ","matches sort join ","matches sort "," display_page ","Regexp  escape ","@display display_ lookup_method _list "," display_ lookup_method  "," select_methods  [] "," lookup_method s [] "," select_methods  size == "," lookup_method s size == "," select_methods  size "," lookup_method s size "," select_ select_methods  "," select_ lookup_method s ","name sub  sub "," lookup_ lookup_ancestor  "," lookup_ lookup_method  "," expand_ expand_klass  "," parse_name sub  ","name sub  =~ "," classes keys grep  join "," list_methods_matching  join "," classes keys grep  empty? "," list_methods_matching  empty? "," list_ select_methods _matching "," list_ lookup_method s_matching "," classes keys grep  sort join "," list_methods_matching  sort join "," classes keys grep  sort "," list_methods_matching  sort "]}," RDoc RDoc read_file_contents":{"type":"method","name":"read_file_contents","children":[],"call":["content force_encoding "," Encoding  find ","content [] ","File  read ","f read ","File  open ","RUBY_VERSION  >= ","content force_ Encoding  find oding ","File  read  force_encoding ","File  read  [] "]}," RDoc RDoc number_of_threads":{"type":"method","name":"number_of_threads","children":[],"call":["Java java lang Runtime  getRuntime availableProcessors * ","Java java lang Runtime  getRuntime availableProcessors ","Java java lang Runtime  getRuntime ","Java  java lang ","Java  java ","RUBY_PLATFORM  == "]}," RDoc RDoc add_generator":{"type":"method","name":"add_generator","children":[],"call":[]}," C reset":{"type":"method","name":"reset","children":[],"call":[]}," Generator File pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp ","q text ","q breakable ","q group "," class "]}," Generator File inspect":{"type":"method","name":"inspect","children":[],"call":[" class "]}," Generator Class pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp ","q text ","q breakable "," name ","q group "," class "]}," Generator Class inspect":{"type":"method","name":"inspect","children":[],"call":[" name "," class "]}," TimeConstantMethods from_now":{"type":"method","name":"from_now","children":[],"call":[" after "," Time  now "]}," TimeConstantMethods after":{"type":"method","name":"after","children":[],"call":["time + "]}," TimeConstantMethods ago":{"type":"method","name":"ago","children":[],"call":[" before "," Time  now "]}," TimeConstantMethods before":{"type":"method","name":"before","children":[],"call":["time - "]}," TimeConstantMethods years":{"type":"method","name":"years","children":[],"call":["(send\n  (self) :*\n  (send\n    (float 365.25) :days)) to_i "," * ","365.25 days "]}," TimeConstantMethods months":{"type":"method","name":"months","children":[],"call":[" * ","30 days "]}," TimeConstantMethods fortnights":{"type":"method","name":"fortnights","children":[],"call":[" * ","2 weeks "]}," TimeConstantMethods weeks":{"type":"method","name":"weeks","children":[],"call":[" * ","7 days "]}," TimeConstantMethods days":{"type":"method","name":"days","children":[],"call":[" * ","24 hours "]}," TimeConstantMethods hours":{"type":"method","name":"hours","children":[],"call":[" * ","60 minutes "]}," TimeConstantMethods minutes":{"type":"method","name":"minutes","children":[],"call":[" * "]}," TimeConstantMethods seconds":{"type":"method","name":"seconds","children":[],"call":[]}," Darkfish render_template":{"type":"method","name":"render_template","children":[],"call":["ofh print ","outfile open ","outfile dirname mkpath ","outfile dirname "," debug_msg ","  would have written %d bytes to %s % ","output length "," raise ","Error while evaluating %s: %s (at %p) % "," eval ","err message ","templatefile to_s ","template result ","template filename= ","ERB  new ","templatefile read ","err backtrace ","template_file to_s ","template_file read "," template_result ","io set_encoding ","@options encoding ","Object  const_defined? ","out_file open ","out_file dirname mkpath ","out_file dirname ","Outputting to %s % ","out_file expand_path ","  would have written %d characters to %s % ","@options dry_run "," template_for ","@dry_run ! "," template_result  length ","ERB  new file to_s "," template_for file to_s ","ERB  new  result "," template_for  result ","ERB  new  filename= "," template_for  filename= ","ERB  new file read "," template_for file read ","ERB  new _file to_s "," template_for _file to_s ","ERB  new _file read "," template_for _file read "," ERB  new _result ","  template_for _result "," ERB  new _for ","  template_for _for "]}," Darkfish get_svninfo":{"type":"method","name":"get_svninfo","children":[],"call":[" time_delta_string ","Time  now to_i - ","commitdate to_i ","Time  now to_i ","Time  now "," Integer ","Time  parse ","date + + ","date + ","$~ captures ","c [] =~ ","c [] ","constants find ","classinfo [] first [] ","classinfo [] first ","classinfo [] ","c value =~ ","c value ","klass constants ","Time  now - ","Time  parse  to_i ","classinfo [] first []  find ","klass constants  find ","klass classinfo [] first []  ","klass klass constants  "]}," Darkfish time_delta_string":{"type":"method","name":"time_delta_string","children":[],"call":["(send\n  (lvar :seconds) :/\n  (send\n    (int 1) :year)) to_s + ","(send\n  (lvar :seconds) :/\n  (send\n    (int 1) :year)) to_s ","seconds / ","1 year ","(send\n  (lvar :seconds) :/\n  (send\n    (int 1) :month)) to_s + ","(send\n  (lvar :seconds) :/\n  (send\n    (int 1) :month)) to_s ","1 month ","seconds < ","(send\n  (lvar :seconds) :/\n  (send\n    (int 1) :week)) to_s + ","(send\n  (lvar :seconds) :/\n  (send\n    (int 1) :week)) to_s ","1 week ","3 months ","2 week ","(send\n  (lvar :seconds) :/\n  (send\n    (int 1) :day)) to_s + ","(send\n  (lvar :seconds) :/\n  (send\n    (int 1) :day)) to_s ","1 day ","2 days ","(send\n  (lvar :seconds) :/\n  (send\n    (int 1) :hour)) to_s + ","(send\n  (lvar :seconds) :/\n  (send\n    (int 1) :hour)) to_s ","1 hour ","18 hours ","90 minutes ","(send\n  (lvar :seconds) :/\n  (send\n    (int 1) :minute)) to_s + + ","seconds / == ","(send\n  (lvar :seconds) :/\n  (send\n    (int 1) :minute)) to_s + ","(send\n  (lvar :seconds) :/\n  (send\n    (int 1) :minute)) to_s ","1 minute ","50 minutes "]}," Darkfish generate_file_files":{"type":"method","name":"generate_file_files","children":[],"call":[" render_template "," binding "," debug_msg ","@outputdir relative_path_from ","outfile dirname ","  working on %s (%s) % ","@outputdir + ","fileinfo [] ","(send\n  (lvar :files) :sort_by) each ","files sort_by "," get_sorted_module_list ","@template_dir + ","file full_name ","file path ","@files each ","template_file exist? ","out_file dirname "," raise ","error set_backtrace ","e backtrace ","RDoc Error  new ","e class ","e message ","@options title ","file base_name ","fileinfo_file exist? ","file page_name ","page_file exist? ","file text? "," template_file exist? "," template_file ","rel_prefix + "," generate_page ","filepage_file exist? "," setup ","here local_variable_set ","@outputdir +  dirname ","@template_dir +  exist? ","RDoc Error  new  set_backtrace "," @template_dir +  exist? "," @template_dir +  ","@outputdir relative_path_from  + ","file@template_dir +  exist? "," binding  local_variable_set "]}," Darkfish generate_class_files":{"type":"method","name":"generate_class_files","children":[],"call":[" render_template "," binding "," debug_msg "," get_svninfo ","outputdir relative_path_from ","outfile dirname ","outputdir + ","classinfo [] ","  working on %s (%s) % ","(send\n  (lvar :classes) :sort_by) each ","classes sort_by "," get_sorted_module_list ","@template_dir + ","@outputdir relative_path_from ","@outputdir + ","klass path ","klass full_name ","@classes each ","template_file exist? ","out_file dirname "," raise ","error set_backtrace ","e backtrace ","RDoc Error  new ","e class ","e message ","current path ","klass type capitalize ","klass type ","@options title "," generate_class "," setup "," get_ get_svninfo  ","outputdir +  dirname ","@outputdir +  dirname ","@template_dir +  exist? ","RDoc Error  new  set_backtrace "]}," Darkfish generate_index":{"type":"method","name":"generate_index","children":[],"call":["fh print ","outfile open "," debug_msg ","Outputting to %s % ","outfile expand_path ","Would have output to %s % ","@basedir + + ","@basedir + ","@options op_dir "," raise ","Error while evaluating %s: %s (at %p) % "," eval ","err message ","template result "," get_sorted_module_list "," binding ","template filename= ","templatefile to_s ","ERB  new ","templatefile read ","@template_dir + ","err backtrace ","template_file to_s ","template_file read ","template_file exist? "," render_template ","error set_backtrace ","e backtrace ","RDoc Error  new ","e class ","e message ","@options title ","@outputdir relative_path_from ","out_file dirname ","@base_dir + + ","@base_dir + ","rel_prefix + "," setup ","here local_variable_set ","@basedir + +  open ","@basedir + +  expand_path ","Would have template result  to %s % ","ERB  new  result ","ERB  new  filename= ","ERB  new file to_s ","@template_dir +  to_s ","ERB  new file read ","@template_dir +  read ","@ERB  new _dir + ","ERB  new _file to_s ","ERB  new _file read ","ERB  new _file exist? ","@template_dir +  exist? "," render_ERB  new  ","RDoc Error  new  set_backtrace ","@template result dir relative_path_from ","@basedir + +  dirname ","@base_dir + +  dirname ","@outputdir relative_path_from  + "," binding  local_variable_set "]}," Darkfish get_sorted_module_list":{"type":"method","name":"get_sorted_module_list","children":[],"call":["nscounts [] * ","nscounts [] ","name gsub ","classes keys sort_by ","classes keys ","counthash [] ","classes keys inject ","klass document_self ","(send\n  (lvar :classes) :sort_by) select ","klass full_name ","klass full_name gsub ","classes sort_by ","classes inject ","klass display? ","(send\n  (lvar :classes) :select) sort ","classes select "]}," Darkfish generate_xhtml":{"type":"method","name":"generate_xhtml","children":[],"call":[" generate_file_files "," generate_class_files "," generate_index "," write_style_sheet ","hash [] []= ","fileinfo [] + ","fileinfo [] ","hash [] ","hash []= ","files inject ","classinfo [] gsub + ","classinfo [] gsub ","classinfo [] ","classes inject "," gen_into "," generate_file_ gen_into  "," generate_class_ gen_into  "," gen_into  inject "]}," Darkfish load_html_template":{"type":"method","name":"load_html_template","children":[],"call":[]}," Darkfish generate":{"type":"method","name":"generate","children":[],"call":[" raise "," debug_msg ","%s: %s\n  %s % ","err backtrace join ","err backtrace ","err message ","err class name ","err class "," generate_xhtml ","RDoc Generator Context  build_indices ","RDoc Generator Context  build_indicies ","RDoc Generator Context  respond_to? ","Pathname  new expand_path ","Pathname  new ","@options op_dir "," generate_file_files "," generate_class_files "," generate_index "," write_style_sheet "," get_sorted_module_list ","(send\n  (ivar :@classes) :map) flatten sort ","(send\n  (ivar :@classes) :map) flatten ","m method_list ","@classes map ","RDoc TopLevel  all_classes_and_modules sort ","RDoc TopLevel  all_classes_and_modules ","top_levels sort ","e backtrace join ","e backtrace ","e message ","e class name ","e class "," copy_static ","@json_index generate "," generate_table_of_contents "," setup ","@json_index generate_gzipped ","(send\n  (ivar :RDoc TopLevel  all_classes_and_modules sort ) :map) flatten sort ","(send\n  (ivar :RDoc TopLevel  all_classes_and_modules sort ) :map) flatten ","RDoc TopLevel  all_classes_and_modules sort  map "]}," Darkfish write_style_sheet":{"type":"method","name":"write_style_sheet","children":[],"call":["FileUtils  cp_r ","@template_dir + ","staticfiles each "," debug_msg ","FileUtils  cp ","FileUtils  mkdir_p ","File  exist? ","dst dirname ","Pathname  new relative_path_from ","Pathname  new ","path =~ ","File  directory? ","Dir  [] each ","Dir  [] ","(send\n  (ivar :@template_dir) :+\n  (str \"{js,images}/**/*\")) to_s ","File  basename =~ ","File  basename ","@options dry_run "," install_rdoc_static_file ","@options template_stylesheets each ","@options template_stylesheets ","BUILTIN_STYLE_ITEMS  each ","@options template_stylesheets empty? ","Pathname  new relative_path_from  dirname "]}," Darkfish gen_sub_directories":{"type":"method","name":"gen_sub_directories","children":[],"call":["@outputdir mkpath "]}," Darkfish debug_msg":{"type":"method","name":"debug_msg","children":[],"call":["$stderr puts "]}," Darkfish initialize":{"type":"method","name":"initialize","children":[],"call":["options diagram= ","options inline_source= ","Pathname  pwd expand_path ","Pathname  pwd ","GENERATOR_DIR  + ","Pathname  new ","File  expand_path "," raise ","template inspect ","File  directory? ","(send\n  (gvar :$LOAD_PATH) :map) find ","File  join ","$LOAD_PATH map ","@options template ","@options diagram= ","options template_dir ","RDoc Generator JsonIndex  new ","@options dry_run "]}," Darkfish for":{"type":"method","name":"for","children":[],"call":[]}," Cache clear":{"type":"method","name":"clear","children":[],"call":["@contents clear ","@lock synchronize "]}," Cache cache":{"type":"method","name":"cache","children":[],"call":["@contents [] ","@lock synchronize "]}," TopLevel path":{"type":"method","name":"path","children":[],"call":[" http_url ","RDoc RDoc  current generator file_dir ","RDoc RDoc  current generator ","RDoc RDoc  current ","@store rdoc generator file_dir ","@store rdoc generator ","@store rdoc "]}," TopLevel last_modified":{"type":"method","name":"last_modified","children":[],"call":[" file_stat mtime to_s "," file_stat mtime "," file_stat "]}," TopLevel inspect":{"type":"method","name":"inspect","children":[],"call":["#<%s:0x%x %p modules: %p classes: %p> % ","@classes map ","@modules map "," base_name "," object_id "," class "]}," TopLevel http_url":{"type":"method","name":"http_url","children":[],"call":["File  join + ","File  join ","path compact ","@relative_name tr "]}," TopLevel full_name":{"type":"method","name":"full_name","children":[],"call":[]}," TopLevel find_module_named":{"type":"method","name":"find_module_named","children":[],"call":[" find_enclosing_module_named "," find_class_or_module_named "," find_class_or_module "]}," TopLevel find_local_symbol":{"type":"method","name":"find_local_symbol","children":[],"call":[" find_class_or_module_named "," find_class_or_module "]}," TopLevel find_class_or_module_named":{"type":"method","name":"find_class_or_module_named","children":[],"call":["m full_name == ","m full_name ","RDoc TopLevel  modules_hash each_value ","RDoc TopLevel  modules_hash ","c full_name == ","c full_name ","RDoc TopLevel  classes_hash each_value ","RDoc TopLevel  classes_hash "]}," TopLevel base_name":{"type":"method","name":"base_name","children":[],"call":["File  basename "]}," TopLevel initialize":{"type":"method","name":"initialize","children":[],"call":["RDoc TopLevel  files_hash []= ","RDoc TopLevel  files_hash ","RDoc TopLevel  lock synchronize ","RDoc TopLevel  lock ","File  stat "]}," TopLevel reset":{"type":"method","name":"reset","children":[],"call":[]}," TopLevel modules_hash":{"type":"method","name":"modules_hash","children":[],"call":[]}," TopLevel modules":{"type":"method","name":"modules","children":[],"call":[]}," TopLevel lock":{"type":"method","name":"lock","children":[],"call":[]}," TopLevel find_file_named":{"type":"method","name":"find_file_named","children":[],"call":[]}," TopLevel find_class_named":{"type":"method","name":"find_class_named","children":[],"call":[]}," TopLevel files_hash":{"type":"method","name":"files_hash","children":[],"call":[]}," TopLevel files":{"type":"method","name":"files","children":[],"call":[]}," TopLevel classes_hash":{"type":"method","name":"classes_hash","children":[],"call":[]}," TopLevel classes":{"type":"method","name":"classes","children":[],"call":[]}," TopLevel all_classes_and_modules":{"type":"method","name":"all_classes_and_modules","children":[],"call":[]}," Require inspect":{"type":"method","name":"inspect","children":[],"call":["#<%s:0x%x require '%s' in %s> % "," parent_file_name "," object_id "," class "]}," Require initialize":{"type":"method","name":"initialize","children":[],"call":[" comment= ","name gsub "]}," RDoc RDoc current=":{"type":"method","name":"current=","children":[],"call":[]}," RDoc RDoc current":{"type":"method","name":"current","children":[],"call":[]}," Ruby parse_top_level_statements":{"type":"method","name":"parse_top_level_statements","children":[],"call":[" parse_statements ","container comment= ","comment empty? "," look_for_directives_in "," collect_first_comment ","container document_self ","comment format "," throw ","container done_documenting ","container  collect_first_comment = "," collect_first_comment  empty? "," collect_first_ collect_first_comment  "," collect_first_comment  format "]}," NormalModule module?":{"type":"method","name":"module?","children":[],"call":[]}," NormalModule inspect":{"type":"method","name":"inspect","children":[],"call":["#<%s:0x%x module %s includes: %p attributes: %p methods: %p aliases: %p> % "," full_name "," object_id "," class ","#<%s:0x%x module %s includes: %p extends: %p attributes: %p methods: %p aliases: %p> % "]}," NormalModule comment=":{"type":"method","name":"comment=","children":[],"call":["@comment << << ","@comment << ","@comment empty? ","comment empty? ","@@comment << <<  << << ","@@comment << <<  << ","@@comment << <<  empty? ","@comment << <<  empty? "]}," NormalClass inspect":{"type":"method","name":"inspect","children":[],"call":["<%s:0x%x class %s%s includes: %p attributes: %p methods: %p aliases: %p> % "," full_name "," object_id "," class ","<%s:0x%x class %s%s includes: %p extends: %p attributes: %p methods: %p aliases: %p> % "]}," Include module":{"type":"method","name":"module","children":[],"call":["RDoc TopLevel  find_module_named ","p parent ","RDoc TopLevel  modules_hash [] ","RDoc TopLevel  modules_hash ","p child_name "," parent parent "," parent ","inc child_name ","String  === ","i module ","searched each ","(send\n  (send\n    (send nil :parent) :includes) :take_while) reverse ","i != "," parent includes take_while "," parent includes ","@name =~ "," parent child_name ","up parent ","up child_name ","@store modules_hash [] ","@store modules_hash ","RDoc Top parent Level  find_module_named ","RDoc To parent parent Level  find_module_named ","p parent  p parent arent "," parent parent   parent parent arent ","RDoc Top parent Level  modules_hash [] ","RDoc To parent parent Level  modules_hash [] ","RDoc Top parent Level  modules_hash ","RDoc To parent parent Level  modules_hash ","p parent  child_name "," parent parent  child_name "," p parent arent p parent arent ","  parent parent arent  parent parent arent "," p parent arent ","  parent parent arent ","i module  child_name ","(send\n  (send\n    (send nil :parent) :includes) :take_while) reverse  each ","(send\n  (send\n    (send nil :p parent arent) :includes) :take_while) reverse ","(send\n  (send\n    (send nil : parent parent arent) :includes) :take_while) reverse ","(send\n  (send\n    (send nil :parent) :i module ludes) :take_while) reverse "," p parent arent includes take_while ","  parent parent arent includes take_while "," parent i module ludes take_while "," p parent arent includes ","  parent parent arent includes "," parent i module ludes "," p parent arent child_name ","  parent parent arent child_name ","up parent  p parent arent ","u parent parent   parent parent arent ","up parent  parent "," parent parent  parent ","up parent  child_name ","u parent parent  child_name "]}," Include inspect":{"type":"method","name":"inspect","children":[],"call":["#<%s:0x%x %s.include %s> % "," parent_name "," object_id "," class "]}," Include initialize":{"type":"method","name":"initialize","children":[],"call":[" comment= "]}," TopLevel cvs_url":{"type":"method","name":"cvs_url","children":[],"call":["url + ","url % ","RDoc RDoc  current options webcvs ","RDoc RDoc  current options ","RDoc RDoc  current ","@store rdoc options webcvs ","@store rdoc options ","@store rdoc ","RDoc RDoc  current options webcvs  + ","@store rdoc options webcvs  + ","RDoc RDoc  current options webcvs  % ","@store rdoc options webcvs  % "]}," AnyMethod markup_code":{"type":"method","name":"markup_code","children":[],"call":[" add_line_numbers ","RDoc RDoc  current options include_line_numbers ","RDoc RDoc  current options ","RDoc RDoc  current ","src << ","CGI  escapeHTML ","t text ","@token_stream each "," class add_line_numbers "," class ","src gsub! ","  * ","indent > ","n == ","n < ","$& length ","line =~ ","lines each ","lines shift ","src =~ ","src lines to_a ","src lines ","src length ","STYLE_MAP  [] ","t class ","RDoc TokenStream  to_html "," add_li$& length e_$& length umbers ","RDoc RDoc  curre$& length t optio$& length s i$& length clude_li$& length e_$& length umbers ","RDoc RDoc  curre$& length t optio$& length s ","RDoc RDoc  curre$& length t ","RDoc TokenStream  to_html  << ","t CGI  escapeHTML  ","@toke$& length _stream each "," class add_li$& length e_$& length umbers ","RDoc TokenStream  to_html  gsub! ","i$& length de$& length t > ","src length  > ","$& length  == ","$& length  < ","$& le$& length gth ","li$& length e =~ ","li$& length es each ","src lines to_a  each ","li$& length es shift ","src lines to_a  shift ","RDoc TokenStream  to_html  =~ ","src li$& length es to_a ","src src lines to_a  to_a ","RDoc TokenStream  to_html  lines to_a ","src li$& length es ","src src lines to_a  ","RDoc TokenStream  to_html  lines ","src le$& length gth ","RDoc TokenStream  to_html  length ","RDoc Toke$& length Stream  to_html "]}," AnyMethod add_line_numbers":{"type":"method","name":"add_line_numbers","children":[],"call":["(str \"%\") % ","  * ","size + ","line == ","src gsub! ","last to_s length ","last to_s ","first + ","src count ","1 to_i - ","1 to_i ","src =~ ","%2$*1$d:  % ","<span class=\"line-num\">%2$*1$d</span>  % ","3 to_i - ","3 to_i ","src sub! ","last to_s length  + ","first +  to_s length ","first +  to_s ","1 to_i -  + ","3 to_i -  + "]}," Markup cvs_url":{"type":"method","name":"cvs_url","children":[],"call":["url + "," sprintf "]}," Markup markup":{"type":"method","name":"markup","children":[],"call":["res sub! "," formatter convert "," formatter ","1 tr ","str gsub ","str =~ "," formatter convert  sub! "]}," Markup formatter":{"type":"method","name":"formatter","children":[],"call":["RDoc Markup ToHtmlCrossref  new ","this path ","RDoc Context  === ","RDoc RDoc  current options show_hash ","RDoc RDoc  current options ","RDoc RDoc  current ","RDoc RDoc  current options hyperlink_all ","@formatter code_object= ","@store rdoc options ","@store rdoc ","RDoc RDoc  current options RDoc RDoc  current options show_hash  ","RDoc RDoc  current @store rdoc options  show_hash ","RDoc RDoc  current @store rdoc options  ","RDoc RDoc  current options RDoc RDoc  current options hyperlink_all  ","RDoc RDoc  current @store rdoc options  hyperlink_all ","RDoc Markup ToHtmlCrossref  new  code_object= ","@store rdoc @store rdoc options  "]}," Markup description":{"type":"method","name":"description","children":[],"call":[" markup "]}," Markup as_href":{"type":"method","name":"as_href","children":[],"call":["RDoc Markup ToHtml  gen_relative_url "," path "]}," Markup aref_to":{"type":"method","name":"aref_to","children":[],"call":["RDoc Markup ToHtml  gen_relative_url "," path "]}," Darkfish file_dir":{"type":"method","name":"file_dir","children":[],"call":[]}," Darkfish class_dir":{"type":"method","name":"class_dir","children":[],"call":[]}," Context top_level":{"type":"method","name":"top_level","children":[],"call":["@top_level parent ","RDoc TopLevel  === ","@top_level parent  parent "]}," Context set_current_section":{"type":"method","name":"set_current_section","children":[],"call":["@sections << ","Section  new "," add_section ","@sections []= ","@current_section comment= ","@sections [] ","@sections key? ","Section  new  comment= "," add_section  comment= ","@sections []  comment= "]}," Context remove_classes_and_modules":{"type":"method","name":"remove_classes_and_modules","children":[],"call":[" initialize_classes_and_modules "]}," Context set_visibility_for":{"type":"method","name":"set_visibility_for","children":[],"call":["m visibility= "," methods_matching "]}," Context remove_methods_etc":{"type":"method","name":"remove_methods_etc","children":[],"call":[" initialize_methods_etc "]}," Context record_location":{"type":"method","name":"record_location","children":[],"call":["@in_files << ","@in_files include? "]}," Context ongoing_visibility=":{"type":"method","name":"ongoing_visibility=","children":[],"call":[]}," Context modules_hash":{"type":"method","name":"modules_hash","children":[],"call":[]}," Context modules":{"type":"method","name":"modules","children":[],"call":["@modules values "]}," Context methods_matching":{"type":"method","name":"methods_matching","children":[],"call":["methods include? ","a name ","@attributes each ","count == ","methods size ","m singleton == ","m singleton ","m name ","@method_list each ","(send\n  (ivar :@method_list) :+\n  (ivar :@attributes)) each ","@method_list + ","parent methods_matching "," each_ancestor "]}," Context methods_by_type":{"type":"method","name":"methods_by_type","children":[],"call":["methods [] [] << ","methods [] [] ","method visibility ","methods [] ","method type "," each_method ","methods []= ","visibilities []= ","VISIBILITIES  each ","TYPES  each ","RDoc VISIBILITIES  each ","method section == ! ","method section == ","method section "]}," Context http_url":{"type":"method","name":"http_url","children":[],"call":["File  join + ","File  join ","path compact ","(lvar :prefix) + ","path split ","path gsub ","path =~ "," full_name "," name_for_path ","(lvar :prefix) +  compact ","path gsub  compact "," full_name  compact "," name_for_path  compact ","(lvar :prefix) +  split ","path gsub  split "," full_name  split "," name_for_path  split ","(lvar :prefix) +  gsub ","path gsub  gsub "," full_name  gsub "," name_for_path  gsub ","(lvar :prefix) +  =~ ","path gsub  =~ "," full_name  =~ "," name_for_path  =~ "," name_for_(lvar :prefix) +  "," name_for_path gsub  "," name_for_ full_name  "," name_for_ name_for_path  "]}," Context find_symbol":{"type":"method","name":"find_symbol","children":[],"call":["result find_local_symbol "," fail ","result respond_to? ","result parent ","result name != ","result name "," parent ","symbol =~ ","result nil? "," find_local_symbol "," find_module_named ","result find_module_named ","modules each ","modules shift ","modules empty? ","symbol split "," top_level find_symbol "," top_level "," find_symbol_module ","result find_local_symbol  find_local_symbol ","result parent  find_local_symbol "," parent  find_local_symbol "," find_local_symbol  find_local_symbol "," find_module_named  find_local_symbol ","result find_module_named  find_local_symbol "," top_level find_symbol  find_local_symbol ","result find_local_symbol  respond_to? ","result parent  respond_to? "," parent  respond_to? "," find_local_symbol  respond_to? "," find_module_named  respond_to? ","result find_module_named  respond_to? "," top_level find_symbol  respond_to? ","result find_local_symbol  parent ","result parent  parent "," parent  parent "," find_local_symbol  parent "," find_module_named  parent ","result find_module_named  parent "," top_level find_symbol  parent ","result find_local_symbol  name != ","result parent  name != "," parent  name != "," find_local_symbol  name != "," find_module_named  name != ","result find_module_named  name != "," top_level find_symbol  name != ","result find_local_symbol  name ","result parent  name "," parent  name "," find_local_symbol  name "," find_module_named  name ","result find_module_named  name "," top_level find_symbol  name ","result find_local_symbol  nil? ","result parent  nil? "," parent  nil? "," find_local_symbol  nil? "," find_module_named  nil? ","result find_module_named  nil? "," top_level find_symbol  nil? "," find_modules shift d ","result find_local_symbol  find_module_named ","result parent  find_module_named "," parent  find_module_named "," find_local_symbol  find_module_named "," find_module_named  find_module_named ","result find_module_named  find_module_named "," top_level find_symbol  find_module_named ","result find_modules shift d ","symbol split  each ","symbol split  shift ","symbol split  empty? "]}," Context find_module_named":{"type":"method","name":"find_module_named","children":[],"call":[" find_enclosing_module_named "," name == "," name ","@classes [] ","@modules [] "]}," Context find_method_named":{"type":"method","name":"find_method_named","children":[],"call":["meth name == ","meth name ","@method_list find "," find_class_method_named ","name [] "," find_instance_method_named "," find_method "]}," Context find_local_symbol":{"type":"method","name":"find_local_symbol","children":[],"call":[" find_file_named "," find_module_named "," find_attribute_named "," find_constant_named "," find_method_named "," find_external_alias_named "]}," Context find_instance_method_named":{"type":"method","name":"find_instance_method_named","children":[],"call":["meth singleton ! ","meth singleton ","meth name == ","meth name ","@method_list find "]}," Context find_file_named":{"type":"method","name":"find_file_named","children":[],"call":[" top_level class find_file_named "," top_level class "," top_level ","@store find_file_named "]}," Context find_enclosing_module_named":{"type":"method","name":"find_enclosing_module_named","children":[],"call":[" parent find_module_named "," parent "]}," Context find_constant_named":{"type":"method","name":"find_constant_named","children":[],"call":["m name == ","m name ","@constants find ","m full_name == ","m full_name "]}," Context find_attribute_named":{"type":"method","name":"find_attribute_named","children":[],"call":["m name == ","m name ","@attributes find ","a name == ","a name "," find_attribute ","name [] "]}," Context each_method":{"type":"method","name":"each_method","children":[],"call":["@method_list sort each ","@method_list sort "," enum_for "," __method__ "," block_given? "]}," Context each_include":{"type":"method","name":"each_include","children":[],"call":["@includes each "]}," Context each_constant":{"type":"method","name":"each_constant","children":[],"call":["@constants each "]}," Context each_classmodule":{"type":"method","name":"each_classmodule","children":[],"call":[" classes_and_modules sort each "," classes_and_modules sort "," classes_and_modules "]}," Context each_attribute":{"type":"method","name":"each_attribute","children":[],"call":["@attributes each "]}," Context defined_in?":{"type":"method","name":"defined_in?","children":[],"call":["@in_files include? "]}," Context classes_hash":{"type":"method","name":"classes_hash","children":[],"call":[]}," Context classes_and_modules":{"type":"method","name":"classes_and_modules","children":[],"call":[" classes + "," modules "," classes "]}," Context classes":{"type":"method","name":"classes","children":[],"call":["@classes values "]}," Context add_to":{"type":"method","name":"add_to","children":[],"call":["thing section= ","thing parent= ","array << ","@done_documenting ! "," current_section ","thing store= "]}," Context add_require":{"type":"method","name":"add_require","children":[],"call":[" parent add_require "," parent "," add_to ","RDoc TopLevel  === "]}," Context add_module":{"type":"method","name":"add_module","children":[],"call":[" add_class_or_module ","@classes [] ","@classes key? ","RDoc TopLevel  modules_hash ","class_type new ","RDoc TopLevel  modules_hash [] "," child_name ","@modules [] ","@store modules_hash ","@store modules_hash [] "]}," Context add_method":{"type":"method","name":"add_method","children":[],"call":["@unmatched_alias_lists delete ","method name ","@aliases delete "," add_alias_impl ","unmatched_alias_list each ","@unmatched_alias_lists [] "," add_to ","method visibility= "," resolve_aliases ","@methods_hash []= ","known comment= ","method comment ","known comment empty? ","known comment ","@methods_hash [] ","method pretty_name ","@store rdoc options warn ","method file ","known full_name ","@store rdoc options ","@store rdoc ","known file ","method file == ","@@unmatched_alias_lists [] s delete ","@unmatched_alias_lists []  each ","@@unmatched_alias_lists [] s [] ","@methods_hash []  comment= ","@methods_hash []  comment empty? ","@methods_hash []  comment ","@methods_hash []  full_name ","@methods_hash []  file "]}," Context add_include":{"type":"method","name":"add_include","children":[],"call":[" add_to ","(send\n  (ivar :@includes) :map) include? ","include full_name ","i full_name ","@includes map "]}," Context add_constant":{"type":"method","name":"add_constant","children":[],"call":[" add_to ","@constants_hash []= ","constant name ","constant is_alias_for ","known is_alias_for ","known value= ","constant value ","known value strip empty? ","known value strip ","known value ","known value nil? ","known comment= ","constant comment ","known comment empty? ","known comment ","@constants_hash [] ","@constants_hash []  is_alias_for ","@constants_hash []  value= ","@constants_hash []  value strip empty? ","@constants_hash []  value strip ","@constants_hash []  value ","@constants_hash []  value nil? ","@constants_hash []  comment= ","@constants_hash []  comment empty? ","@constants_hash []  comment "]}," Context add_class_or_module":{"type":"method","name":"add_class_or_module","children":[],"call":["mod parent= ","mod section= ","collection []= ","all []= ","RDoc TopLevel  lock synchronize ","RDoc TopLevel  lock ","class_type new ","mod superclass= ","mod superclass ","class_type == ","all [] ","RDoc TopLevel  classes_hash ","RDoc TopLevel  modules_hash ","mod module? ","collection [] "," full_name ","RDoc TopLevel  === "," child_name ","all_hash []= ","mod full_name ","self_hash []= ","mod name "," current_section ","mod store= "," add_module_alias ","@store unmatched_constant_alias [] ","@store unmatched_constant_alias ","mod full_name= ","class_type new  parent= ","all []  parent= ","collection []  parent= ","class_type new  section= ","all []  section= ","collection []  section= ","RDoc TopLevel  classes_hash  []= ","RDoc TopLevel  modules_hash  []= ","class_type new  superclass= ","all []  superclass= ","collection []  superclass= ","class_type new  superclass ","all []  superclass ","collection []  superclass ","RDoc TopLevel  classes_hash  [] ","RDoc TopLevel  modules_hash  [] ","RDoc TopLevel  class_type new ules_hash ","RDoc TopLevel  all [] ules_hash ","RDoc TopLevel  collection [] ules_hash ","class_type new  class_type new ule? ","all []  all [] ule? ","collection []  collection [] ule? ","  child_name  ","RDoc TopLevel  classes_hash _hash []= ","RDoc TopLevel  modules_hash _hash []= ","class_type new  full_name ","all []  full_name ","collection []  full_name ","mod  child_name  ","class_type new  name ","all []  name ","collection []  name ","class_type new  store= ","all []  store= ","collection []  store= "," add_class_type new ule_alias "," add_all [] ule_alias "," add_collection [] ule_alias ","class_type new  full_name= ","all []  full_name= ","collection []  full_name= ","mod  child_name = "]}," Context add_class":{"type":"method","name":"add_class","children":[],"call":["RDoc TopLevel  classes_hash []= ","klass full_name ","RDoc TopLevel  classes_hash ","@modules delete ","klass name ","klass method_list concat ","mod method_list ","klass method_list ","klass modules_hash update ","mod modules_hash ","klass modules_hash ","klass classes_hash update ","mod classes_hash ","klass classes_hash ","RDoc TopLevel  modules_hash delete ","RDoc TopLevel  modules_hash ","RDoc TopLevel  lock synchronize ","RDoc TopLevel  lock "," add_class_or_module ","klass superclass= ","superclass != ","existing name ","String  === ! ","String  === ","klass superclass ","enclosing add_class_or_module ","enclosing classes_hash ","class_type new ","superclass nil? "," upgrade_to_class ","existing == ","existing nil? ","existing full_name ","existing is_a? ","enclosing classes_hash []= ","RDoc TopLevel  classes_hash [] ","superclass == ","mod parent ","mod full_name "," find_module_named ","mod full_name + + ","mod full_name + ","superclass =~ ","enclosing add_module ","enclosing modules_hash [] ","enclosing modules_hash ","enclosing classes_hash [] ","names each ","ename split ","RDoc TopLevel  modules_hash [] ","full_name =~ "," child_name ","full_name split last ","full_name split "," top_level ","given_name =~ ","full_name == ","klass parent= ","@store classes_hash ","@store modules_hash delete ","@store modules_hash ","@store classes_hash [] ","@store modules_hash [] "," add_class_or_module  full_name ","class_type new  full_name "," upgrade_to_class  full_name ","RDoc TopLevel  classes_hash []  full_name ","@store classes_hash []  full_name ","klass  child_name  ","klass full_full_name split last  ","@RDoc TopLevel  modules_hash delete ules delete ","@ find_module_named ules delete ","@@store modules_hash delete ules delete "," add_class_or_module  name ","class_type new  name "," upgrade_to_class  name ","RDoc TopLevel  classes_hash []  name ","@store classes_hash []  name ","klass full_name split last  "," add_class_or_module  method_list concat ","class_type new  method_list concat "," upgrade_to_class  method_list concat ","RDoc TopLevel  classes_hash []  method_list concat ","@store classes_hash []  method_list concat ","RDoc TopLevel  modules_hash delete  method_list "," find_module_named  method_list ","@store modules_hash delete  method_list "," add_class_or_module  method_list ","class_type new  method_list "," upgrade_to_class  method_list ","RDoc TopLevel  classes_hash []  method_list ","@store classes_hash []  method_list ","klass RDoc TopLevel  modules_hash delete ules_hash update ","klass  find_module_named ules_hash update ","klass @store modules_hash delete ules_hash update "," add_class_or_module  modules_hash update ","class_type new  modules_hash update "," upgrade_to_class  modules_hash update ","RDoc TopLevel  classes_hash []  modules_hash update ","@store classes_hash []  modules_hash update ","RDoc TopLevel  modules_hash delete  RDoc TopLevel  modules_hash delete ules_hash "," find_module_named   find_module_named ules_hash ","@store modules_hash delete  @store modules_hash delete ules_hash ","klass RDoc TopLevel  modules_hash delete ules_hash ","klass  find_module_named ules_hash ","klass @store modules_hash delete ules_hash "," add_class_or_module  modules_hash ","class_type new  modules_hash "," upgrade_to_class  modules_hash ","RDoc TopLevel  classes_hash []  modules_hash ","@store classes_hash []  modules_hash "," add_class_or_module  classes_hash update ","class_type new  classes_hash update "," upgrade_to_class  classes_hash update ","RDoc TopLevel  classes_hash []  classes_hash update ","@store classes_hash []  classes_hash update ","RDoc TopLevel  modules_hash delete  classes_hash "," find_module_named  classes_hash ","@store modules_hash delete  classes_hash "," add_class_or_module  classes_hash ","class_type new  classes_hash "," upgrade_to_class  classes_hash ","RDoc TopLevel  classes_hash []  classes_hash ","@store classes_hash []  classes_hash ","RDoc TopLevel  RDoc TopLevel  modules_hash delete ules_hash delete ","RDoc TopLevel   find_module_named ules_hash delete ","RDoc TopLevel  @store modules_hash delete ules_hash delete ","RDoc TopLevel  RDoc TopLevel  modules_hash delete ules_hash ","RDoc TopLevel   find_module_named ules_hash ","RDoc TopLevel  @store modules_hash delete ules_hash "," add_class_or_RDoc TopLevel  modules_hash delete ule "," add_class_or_ find_module_named ule "," add_class_or_@store modules_hash delete ule "," add_class_or_module  superclass= ","class_type new  superclass= "," upgrade_to_class  superclass= ","RDoc TopLevel  classes_hash []  superclass= ","@store classes_hash []  superclass= ","klass mod full_name = ","klass mod full_name + + = ","mod full_name  != ","mod full_name + +  != ","existing name  name ","klass superclass  name ","existing full_name  name ","existing full_name split last  "," add_class_or_module  superclass ","class_type new  superclass "," upgrade_to_class  superclass ","RDoc TopLevel  classes_hash []  superclass ","@store classes_hash []  superclass ","klass mod full_name  ","klass mod full_name + +  ","enclosing add_class_or_RDoc TopLevel  modules_hash delete ule ","enclosing add_class_or_ find_module_named ule ","enclosing add_class_or_@store modules_hash delete ule "," top_level  add_class_or_module "," top_level  classes_hash ","mod full_name  nil? ","mod full_name + +  nil? ","existing name  == ","klass superclass  == ","existing full_name  == ","existing name  nil? ","klass superclass  nil? ","existing full_name  nil? ","existing name  full_name ","klass superclass  full_name ","existing full_name  full_name ","existing  child_name  ","existing full_full_name split last  ","existing name  is_a? ","klass superclass  is_a? ","existing full_name  is_a? "," top_level  classes_hash []= ","mod full_name  == ","mod full_name + +  == ","RDoc TopLevel  modules_hash delete  parent "," find_module_named  parent ","@store modules_hash delete  parent ","RDoc TopLevel  modules_hash delete  full_name "," find_module_named  full_name ","@store modules_hash delete  full_name ","mod  child_name  ","mod full_full_name split last  "," find_RDoc TopLevel  modules_hash delete ule_named "," find_ find_module_named ule_named "," find_@store modules_hash delete ule_named "," find_module_full_name split last d ","RDoc TopLevel  modules_hash delete  full_name + + "," find_module_named  full_name + + ","@store modules_hash delete  full_name + + ","mod  child_name  + + ","mod full_full_name split last  + + ","RDoc TopLevel  modules_hash delete  full_name + "," find_module_named  full_name + ","@store modules_hash delete  full_name + ","mod  child_name  + ","mod full_full_name split last  + ","mod full_name  =~ ","mod full_name + +  =~ ","enclosing add_RDoc TopLevel  modules_hash delete ule ","enclosing add_ find_module_named ule ","enclosing add_@store modules_hash delete ule "," top_level  add_module ","enclosing RDoc TopLevel  modules_hash delete ules_hash [] ","enclosing  find_module_named ules_hash [] ","enclosing @store modules_hash delete ules_hash [] "," top_level  modules_hash [] ","enclosing RDoc TopLevel  modules_hash delete ules_hash ","enclosing  find_module_named ules_hash ","enclosing @store modules_hash delete ules_hash "," top_level  modules_hash "," top_level  classes_hash [] ","ename split  each ","full_name split last s each ","efull_name split last  split ","RDoc TopLevel  RDoc TopLevel  modules_hash delete ules_hash [] ","RDoc TopLevel   find_module_named ules_hash [] ","RDoc TopLevel  @store modules_hash delete ules_hash [] "," child_name  =~ ","full_full_name split last  =~ "," child_full_name split last  "," child_name  split last ","full_full_name split last  split last "," child_name  split ","full_full_name split last  split ","given_full_name split last  =~ "," child_name  == ","full_full_name split last  == "," add_class_or_module  parent= ","class_type new  parent= "," upgrade_to_class  parent= ","RDoc TopLevel  classes_hash []  parent= ","@store classes_hash []  parent= ","@store RDoc TopLevel  modules_hash delete ules_hash delete ","@store  find_module_named ules_hash delete ","@store @store modules_hash delete ules_hash delete ","@store RDoc TopLevel  modules_hash delete ules_hash ","@store  find_module_named ules_hash ","@store @store modules_hash delete ules_hash ","@store RDoc TopLevel  modules_hash delete ules_hash [] ","@store  find_module_named ules_hash [] ","@store @store modules_hash delete ules_hash [] "]}," Context add_attribute":{"type":"method","name":"add_attribute","children":[],"call":[" add_to "," resolve_aliases ","attribute visibility= ","@methods_hash []= ","known comment= ","attribute comment ","known comment empty? ","known comment ","@methods_hash [] ","attribute pretty_name << ","attribute pretty_name ","attribute rw index ","attribute rw ","registered rw= ","RDoc Attr  === ","attribute pretty_name + ","@methods_hash []  comment= ","@methods_hash []  comment empty? ","@methods_hash []  comment ","@methods_hash []  rw= "]}," Context add_alias_impl":{"type":"method","name":"add_alias_impl","children":[],"call":[" add_method ","meth add_alias ","new_meth comment= ","meth name ","new_meth params= ","meth params ","new_meth singleton= ","meth singleton ","new_meth is_alias_for= ","RDoc AnyMethod  new ","an_alias new_name ","an_alias text ","new_meth visibility= ","meth visibility ","an_alias comment ","RDoc AnyMethod  new  comment= ","RDoc AnyMethod  new  params= ","RDoc AnyMethod  new  singleton= ","RDoc AnyMethod  new  is_alias_for= ","RDoc AnyMethod  new  visibility= "]}," Context add_alias":{"type":"method","name":"add_alias","children":[],"call":["unmatched_alias_list push ","@unmatched_alias_lists [] ","an_alias old_name "," add_to "," add_alias_impl "," find_instance_method_named "," find_class_method_named ","an_alias singleton ","an_alias pretty_old_name ","method_attr add_alias "," find_attribute "," find_method ","an_alias an_alias old_name  "," find_instance_ find_instance_method_named od_named "," find_instance_ find_class_method_named od_named "," find_class_ find_instance_method_named od_named "," find_class_ find_class_method_named od_named ","an_alias pretty_an_alias old_name  "," find_instance_method_named od_attr add_alias "," find_class_method_named od_attr add_alias "," find_ find_instance_method_named od "," find_ find_class_method_named od "]}," Context <=>":{"type":"method","name":"<=>","children":[],"call":[" full_name <=> ","other full_name "," full_name ","RDoc CodeObject  === "]}," Context initialize_methods_etc":{"type":"method","name":"initialize_methods_etc","children":[],"call":[]}," Context initialize_classes_and_modules":{"type":"method","name":"initialize_classes_and_modules","children":[],"call":[]}," Context initialize":{"type":"method","name":"initialize","children":[],"call":[" initialize_classes_and_modules "," initialize_methods_etc ","Section  new "]}," Context Section set_comment":{"type":"method","name":"set_comment","children":[],"call":["@comment empty? ","rest sub ","start chomp ","start empty? ","comment =~ ","rest sub  empty? "]}," Context Section inspect":{"type":"method","name":"inspect","children":[],"call":["#<%s:0x%x %s %p> % "," title "," object_id "," class ","#<%s:0x%x %p> % "]}," Context Section ==":{"type":"method","name":"==","children":[],"call":["@sequence == ","other sequence "," class === "," class ","@title == ","other title "]}," Context Section initialize":{"type":"method","name":"initialize","children":[],"call":[" set_comment ","@@sequence dup ","@@sequence succ! ","@@sequence_lock synchronize "," extract_comment ","title strip ","@@@sequence dup  dup ","@@@sequence dup  succ! ","@@@sequence dup _lock synchronize "]}," Constant path":{"type":"method","name":"path","children":[],"call":["@parent path "]}," CodeObject stop_doc":{"type":"method","name":"stop_doc","children":[],"call":[]}," CodeObject start_doc":{"type":"method","name":"start_doc","children":[],"call":[]}," CodeObject remove_methods_etc":{"type":"method","name":"remove_methods_etc","children":[],"call":[]}," CodeObject remove_classes_and_modules":{"type":"method","name":"remove_classes_and_modules","children":[],"call":[]}," CodeObject parent_name":{"type":"method","name":"parent_name","children":[],"call":["@parent full_name "]}," CodeObject parent_file_name":{"type":"method","name":"parent_file_name","children":[],"call":["@parent base_name "]}," CodeObject document_self=":{"type":"method","name":"document_self=","children":[],"call":[" remove_methods_etc ","document_self nil? "]}," CodeObject document_children=":{"type":"method","name":"document_children=","children":[],"call":[" remove_classes_and_modules "]}," CodeObject comment=":{"type":"method","name":"comment=","children":[],"call":["comment empty? "," normalize_comment ","comment empty? ! ","@comment force_encoding ","comment encoding ","@comment empty? ","Object  const_defined? ","String  === ","comment normalize ","RDoc Encoding  change_encoding ","RDoc Encoding  change_encoding  force_encoding ","RDoc Encoding  change_encoding  empty? "]}," CodeObject initialize":{"type":"method","name":"initialize","children":[],"call":[" initialize_visibility "]}," CodeObject attr_overridable":{"type":"method","name":"attr_overridable","children":[],"call":[]}," ClassModule to_s":{"type":"method","name":"to_s","children":[],"call":[" full_name "," class "," is_alias_for "," class name "]}," ClassModule superclass=":{"type":"method","name":"superclass=","children":[],"call":["@superclass == ","@superclass nil? "," raise "," full_name "," module? "]}," ClassModule superclass":{"type":"method","name":"superclass","children":[],"call":["RDoc TopLevel  find_class_named "," raise "," full_name "," module? ","RDoc TopLevel  find_class_named_from "," parent ","@store find_class_named "]}," ClassModule path":{"type":"method","name":"path","children":[],"call":[" http_url ","RDoc RDoc  current generator class_dir ","RDoc RDoc  current generator ","RDoc RDoc  current ","@store rdoc generator class_dir ","@store rdoc generator ","@store rdoc "]}," ClassModule module?":{"type":"method","name":"module?","children":[],"call":[]}," ClassModule type":{"type":"method","name":"type","children":[],"call":[" module? "]}," ClassModule full_name":{"type":"method","name":"full_name","children":[],"call":["@parent full_name ","RDoc ClassModule  === "," parent full_name "," parent "]}," ClassModule find_class_named":{"type":"method","name":"find_class_named","children":[],"call":["c find_class_named ","@classes each_value "," full_name == "," full_name ","klass find_class_named ","klass == ","@classes values find ","@classes values ","@name == "]}," ClassModule initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Attr to_s":{"type":"method","name":"to_s","children":[],"call":[" comment "," rw "," name "," type "," parent "," definition "]}," Attr path":{"type":"method","name":"path","children":[],"call":["@parent path "]}," Attr inspect":{"type":"method","name":"inspect","children":[],"call":["#<%s:0x%x %s.%s :%s> % "," parent_name "," object_id "," class "," rw ","#<%s:0x%x %s %s (%s)%s> % "," full_name "," force_documentation "," visibility ","@is_alias_for name ","  visibility  "]}," Attr html_name":{"type":"method","name":"html_name","children":[],"call":["@name gsub "]}," Attr <=>":{"type":"method","name":"<=>","children":[],"call":[" name <=> ","other name "," name "]}," Attr initialize":{"type":"method","name":"initialize","children":[],"call":[" comment= "]}," AnyMethod type":{"type":"method","name":"type","children":[],"call":[" singleton "]}," AnyMethod to_s":{"type":"method","name":"to_s","children":[],"call":[" full_name "," class name "," class "]}," AnyMethod pretty_name":{"type":"method","name":"pretty_name","children":[],"call":[" singleton "]}," AnyMethod path":{"type":"method","name":"path","children":[],"call":["@parent path "," aref "]}," AnyMethod param_seq":{"type":"method","name":"param_seq","children":[],"call":["params << ","block sub! sub! ","block sub! ","block [] == ","block [] ","block tr squeeze ","block tr ","block gsub! ","params sub! "," block_params "," p [] == "," p [] "," p ","params tr squeeze ","params tr ","params gsub ","@block_params gsub ","params [] == ","params [] ","@params gsub ","params sub ","@call_seq split last ","@call_seq split ","block sub sub ","block sub ","@block_params tr_s ","params tr_s ","@block_params tr squeeze ","@block_params tr ","params tr squeeze  << ","params gsub  << ","@params gsub  << ","params sub  << ","@call_seq split last  << ","params tr_s  << ","block tr squeeze  sub! sub! "," block_params  sub! sub! ","@block_params gsub  sub! sub! ","block sub sub  sub! sub! ","@block_params tr_s  sub! sub! ","@block_params tr squeeze  sub! sub! ","block tr squeeze  sub! "," block_params  sub! ","@block_params gsub  sub! ","block sub sub  sub! ","@block_params tr_s  sub! ","@block_params tr squeeze  sub! ","block tr squeeze  [] == "," block_params  [] == ","@block_params gsub  [] == ","block sub sub  [] == ","@block_params tr_s  [] == ","@block_params tr squeeze  [] == ","block tr squeeze  [] "," block_params  [] ","@block_params gsub  [] ","block sub sub  [] ","@block_params tr_s  [] ","@block_params tr squeeze  [] ","block tr squeeze  tr squeeze "," block_params  tr squeeze ","@block_params gsub  tr squeeze ","block sub sub  tr squeeze ","@block_params tr_s  tr squeeze ","@block_params tr squeeze  tr squeeze ","block tr squeeze  tr "," block_params  tr ","@block_params gsub  tr ","block sub sub  tr ","@block_params tr_s  tr ","@block_params tr squeeze  tr ","block tr squeeze  gsub! "," block_params  gsub! ","@block_params gsub  gsub! ","block sub sub  gsub! ","@block_params tr_s  gsub! ","@block_params tr squeeze  gsub! ","params tr squeeze  sub! ","params gsub  sub! ","@params gsub  sub! ","params sub  sub! ","@call_seq split last  sub! ","params tr_s  sub! "," block tr squeeze _params ","  block_params _params "," @block_params gsub _params "," block sub sub _params "," @block_params tr_s _params "," @block_params tr squeeze _params "," block_params tr squeeze  "," block_params gsub  "," block_@params gsub  "," block_params sub  "," block_@call_seq split last  "," block_params tr_s  ","params tr squeeze  tr squeeze ","params gsub  tr squeeze ","@params gsub  tr squeeze ","params sub  tr squeeze ","@call_seq split last  tr squeeze ","params tr_s  tr squeeze ","params tr squeeze  tr ","params gsub  tr ","@params gsub  tr ","params sub  tr ","@call_seq split last  tr ","params tr_s  tr ","params tr squeeze  gsub ","params gsub  gsub ","@params gsub  gsub ","params sub  gsub ","@call_seq split last  gsub ","params tr_s  gsub ","@block tr squeeze _params gsub ","@ block_params _params gsub ","@@block_params gsub _params gsub ","@block sub sub _params gsub ","@@block_params tr_s _params gsub ","@@block_params tr squeeze _params gsub ","@block_params tr squeeze  gsub ","@block_params gsub  gsub ","@block_@params gsub  gsub ","@block_params sub  gsub ","@block_@call_seq split last  gsub ","@block_params tr_s  gsub ","params tr squeeze  [] == ","params gsub  [] == ","@params gsub  [] == ","params sub  [] == ","@call_seq split last  [] == ","params tr_s  [] == ","params tr squeeze  [] ","params gsub  [] ","@params gsub  [] ","params sub  [] ","@call_seq split last  [] ","params tr_s  [] ","@params tr squeeze  gsub ","@@params gsub  gsub ","@params sub  gsub ","@@call_seq split last  gsub ","@params tr_s  gsub ","params tr squeeze  sub ","params gsub  sub ","@params gsub  sub ","params sub  sub ","@call_seq split last  sub ","params tr_s  sub ","block tr squeeze  sub sub "," block_params  sub sub ","@block_params gsub  sub sub ","block sub sub  sub sub ","@block_params tr_s  sub sub ","@block_params tr squeeze  sub sub ","block tr squeeze  sub "," block_params  sub ","@block_params gsub  sub ","block sub sub  sub ","@block_params tr_s  sub ","@block_params tr squeeze  sub ","@block tr squeeze _params tr_s ","@ block_params _params tr_s ","@@block_params gsub _params tr_s ","@block sub sub _params tr_s ","@@block_params tr_s _params tr_s ","@@block_params tr squeeze _params tr_s ","@block_params tr squeeze  tr_s ","@block_params gsub  tr_s ","@block_@params gsub  tr_s ","@block_params sub  tr_s ","@block_@call_seq split last  tr_s ","@block_params tr_s  tr_s ","params tr squeeze  tr_s ","params gsub  tr_s ","@params gsub  tr_s ","params sub  tr_s ","@call_seq split last  tr_s ","params tr_s  tr_s ","@block tr squeeze _params tr squeeze ","@ block_params _params tr squeeze ","@@block_params gsub _params tr squeeze ","@block sub sub _params tr squeeze ","@@block_params tr_s _params tr squeeze ","@@block_params tr squeeze _params tr squeeze ","@block_@params gsub  tr squeeze ","@block_params sub  tr squeeze ","@block_@call_seq split last  tr squeeze ","@block tr squeeze _params tr ","@ block_params _params tr ","@@block_params gsub _params tr ","@block sub sub _params tr ","@@block_params tr_s _params tr ","@@block_params tr squeeze _params tr ","@block_@params gsub  tr ","@block_params sub  tr ","@block_@call_seq split last  tr "]}," AnyMethod name":{"type":"method","name":"name","children":[],"call":["@call_seq [] "]}," AnyMethod full_name":{"type":"method","name":"full_name","children":[],"call":[" pretty_name ","@parent full_name "]}," AnyMethod inspect":{"type":"method","name":"inspect","children":[],"call":["#<%s:0x%x %s%s%s (%s)%s> % "," visibility "," name "," singleton "," parent_name "," object_id "," class ","@is_alias_for name ","#<%s:0x%x %s (%s)%s> % "," full_name "]}," AnyMethod html_name":{"type":"method","name":"html_name","children":[],"call":["@name gsub "]}," AnyMethod add_alias":{"type":"method","name":"add_alias","children":[],"call":["@aliases << ","context add_method ","method is_alias_for= ","method comment= ","an_alias comment ","method visibility= "," visibility ","method params= "," params ","method singleton= "," singleton ","method record_location ","an_alias file "," class new ","an_alias new_name ","an_alias text "," class ","context add_ class new  "," class new  is_alias_for= "," class new  comment= "," class new  visibility= "," class new  params= "," class new  singleton= "," class new  record_location "]}," AnyMethod <=>":{"type":"method","name":"<=>","children":[],"call":["(if\n  (ivar :@singleton)\n  (int 0)\n  (int 1)) <=> ","other name ","other singleton "]}," AnyMethod initialize":{"type":"method","name":"initialize","children":[],"call":["@@aref succ ","@@aref succ  succ "]}," AnyMethod reset":{"type":"method","name":"reset","children":[],"call":[]}," Alias to_s":{"type":"method","name":"to_s","children":[],"call":[" comment "," new_name "," old_name "," parent "," pretty_old_name "]}," Alias inspect":{"type":"method","name":"inspect","children":[],"call":["#<%s:0x%x %s.alias_method %s, %s> % "," parent name "," parent "," object_id "," class "]}," Alias initialize":{"type":"method","name":"initialize","children":[],"call":[" comment= "]}," Ruby parse_meta_attr":{"type":"method","name":"parse_meta_attr","children":[],"call":["context add_attribute ","RDoc Attr  new "," get_tkread ","3 empty? ","comment sub! ","tmp document_self "," read_documentation_modifiers ","RDoc CodeObject  new "," parse_symbol_arg ","args each ","@stats add_attribute ","att record_location ","single == ","comment text sub! ","comment text "," create_attr ","comment text= ","comment text sub ","regexp =~ ","context add_RDoc Attr  new ribute ","context add_ create_attr ribute "," get_tk get_tkread  ","RDoc CodeObject  new  document_self ","  get_tkread _documentation_modifiers "," parse_symbol_arg  each ","@stats add_RDoc Attr  new ribute ","@stats add_ create_attr ribute ","RDoc Attr  new  record_location "," create_attr  record_location "," create_RDoc Attr  new r "," create_ create_attr r "]}," TopLevel add_method":{"type":"method","name":"add_method","children":[],"call":["object add_method "," add_class "," class find_class_named "," class "," object_class add_method "," object_class "," object_class record_location "," add_class  add_method "," class find_class_named  add_method ","  add_class _class add_method ","  class find_class_named _class add_method ","  add_class _class ","  class find_class_named _class ","  add_class _class record_location ","  class find_class_named _class record_location "]}," Task rerdoc_task_name":{"type":"method","name":"rerdoc_task_name","children":[],"call":[" name ","(or\n  (send\n    (send nil :name) :[]\n    (sym :rerdoc))\n  (str \"rerdoc\")) to_s "," name [] "]}," Task clobber_task_name":{"type":"method","name":"clobber_task_name","children":[],"call":[" name ","(or\n  (send\n    (send nil :name) :[]\n    (sym :clobber_rdoc))\n  (str \"clobber_rdoc\")) to_s "," name [] "]}," Task rdoc_task_name":{"type":"method","name":"rdoc_task_name","children":[],"call":[" name to_s "," name ","(or\n  (send\n    (send nil :name) :[]\n    (sym :rdoc))\n  (str \"rdoc\")) to_s "," name [] "]}," Task rdoc_target":{"type":"method","name":"rdoc_target","children":[],"call":[" rdoc_dir "]}," Task before_running_rdoc":{"type":"method","name":"before_running_rdoc","children":[],"call":[]}," Task option_string":{"type":"method","name":"option_string","children":[],"call":[" option_list join "," option_list "]}," Task quote":{"type":"method","name":"quote","children":[],"call":[]}," Task option_list":{"type":"method","name":"option_list","children":[],"call":["result << << "," quote "," template ","result << "," title "," main ","@options dup "," generator "," markup ","@options dup  << << ","@options dup  << "]}," Task define":{"type":"method","name":"define","children":[],"call":["RDoc RDoc  new document ","RDoc RDoc  new "," require ","$stderr puts ","args join ","Rake  application options trace ","Rake  application options ","Rake  application "," sh "," option_list + "," option_list ","@before_running_rdoc call "," rm_r "," file ","@rdoc_files + ","Rake  application rakefile "," rdoc_target "," task "," rdoc_task_name "," directory "," clobber_task_name "," rdoc_dir "," desc "," rerdoc_task_name "," rdoc_task_name != ","(ivar :@rdoc_files) flatten compact ","(ivar :@rdoc_files) flatten "," clobber_task_description "," rerdoc_task_description "," rdoc_task_description ","opts + "," option_list << "," coverage_task_name "," coverage_task_description "," namespace "," option_list +  join ","opts +  join "," option_list <<  + "]}," Task initialize":{"type":"method","name":"initialize","children":[],"call":[" define "," block_given? ","Rake FileList  new "," raise ","invalid_options join ","invalid_options empty? ","(send\n  (send\n    (lvar :name) :keys) :map) - ","k to_sym ","name keys map ","name keys ","name is_a? "," check_names "," defaults ","(send\n  (send\n    (lvar :name) :keys) :map) -  join ","(send\n  (send\n    (lvar :name) :keys) :map) -  empty? "]}," RDoc read_file_contents":{"type":"method","name":"read_file_contents","children":[],"call":["content force_encoding "," Encoding  find ","content [] ","File  read ","f read ","File  open ","RUBY_VERSION  >= ","RDoc Parser  set_encoding "," open ","content force_ Encoding  find oding ","File  read  force_encoding ","File  read  [] ","RDoc Parser  set_ Encoding  find oding "]}," RDoc document":{"type":"method","name":"document","children":[],"call":["@stats print "," puts ","@stats ! ","@options quiet ","Dir  chdir "," class current= "," class "," update_output_dir ","@generator generate ","RDoc Diagram  new draw ","RDoc Diagram  new ","@options diagram ","@options op_dir ","Dir  pwd ","gen_klass for ","$stderr puts ","gen_klass name sub ","gen_klass name ","@options generator ","file_info empty? ","@options title= "," parse_files ","Time  now "," setup_output_dir ","@options force_update "," exit "," handle_pipe ","@options pipe ","@options parse ","RDoc Options  new ","RDoc TopLevel  reset ","@options files ","@options exclude ","RDoc AnyMethod  reset ","RDoc Parser C  reset ","@stats fully_documented? ","@options coverage_report ","@stats summary ","gen_klass new ","@stats report ","RDoc TopLevel  complete ","@options visibility ","@options default_title= ","@options quiet ! "," generate ","@stats coverage_level= "," load_options ","@options finish ","RDoc Options  === ","RDoc RDoc  current= ","RDoc RDoc  reset ","@store complete ","@store load_cache ","@store path= ","@store title= ","@options title ","@store main= ","@options main_page ","@store dry_run= ","@options dry_run ","@store encoding= ","@options encoding ","@options respond_to? "," store= ","RDoc Store  new ","@stats summary accept ","RDoc Markup ToRdoc  new ","@stats report accept ","RDoc Options  load_options ","RDoc Options  new  quiet "," load_options  quiet ","RDoc Options  load_options  quiet ","gen_klass for  generate ","gen_klass new  generate ","RDoc Options  new  diagram "," load_options  diagram ","RDoc Options  load_options  diagram ","RDoc Options  new  op_dir "," load_options  op_dir ","RDoc Options  load_options  op_dir ","Dir  Dir  pwd  ","@options generator  for ","@options generator  name sub ","@options generator  name ","RDoc Options  new  generator "," load_options  generator ","RDoc Options  load_options  generator "," parse_files  empty? ","RDoc Options  new  title= "," load_options  title= ","RDoc Options  load_options  title= ","RDoc Options  new  force_update "," load_options  force_update ","RDoc Options  load_options  force_update ","RDoc Options  new  pipe "," load_options  pipe ","RDoc Options  load_options  pipe ","RDoc Options  new  parse "," load_options  parse ","RDoc Options  load_options  parse ","RDoc Options  new  files "," load_options  files ","RDoc Options  load_options  files ","RDoc Options  new  exclude "," load_options  exclude ","RDoc Options  load_options  exclude ","RDoc Options  new  coverage_report "," load_options  coverage_report ","RDoc Options  load_options  coverage_report ","@options generator  new ","RDoc Options  new  visibility "," load_options  visibility ","RDoc Options  load_options  visibility ","RDoc Options  new  default_title= "," load_options  default_title= ","RDoc Options  load_options  default_title= ","RDoc Options  new  quiet ! "," load_options  quiet ! ","RDoc Options  load_options  quiet ! ","RDoc Options  new  finish "," load_options  finish ","RDoc Options  load_options  finish ","RDoc Options  new  title "," load_options  title ","RDoc Options  load_options  title ","RDoc Options  new  main_page "," load_options  main_page ","RDoc Options  load_options  main_page ","RDoc Options  new  dry_run "," load_options  dry_run ","RDoc Options  load_options  dry_run ","RDoc Options  new  encoding "," load_options  encoding ","RDoc Options  load_options  encoding ","RDoc Options  new  respond_to? "," load_options  respond_to? ","RDoc Options  load_options  respond_to? "]}," RDoc parse_files":{"type":"method","name":"parse_files","children":[],"call":["@stats done_adding ","thread join ","workers each ","jobs << ","workers size times ","workers size ","file_list each ","workers << ","file_info << ","file_info_lock synchronize ","parser scan ","RDoc Parser  for ","RDoc TopLevel  new "," read_file_contents ","@stats add_file ","jobs pop ","Thread  new ","@options threads times ","@options threads ","@stats begin_adding ","RDoc Stats  new ","options verbosity ","file_list size ","Thread  abort_on_exception= ","Mutex  new ","SizedQueue  new ","@options threads * ","file_list empty? "," normalized_file_list ","options exclude ","files empty? ","options files ","(send\n  (lvar :file_list) :map) compact "," parse_file ","file_list map ","@options verbosity "," gather_files ","file_list length ","@options dup ","RDoc Stats  new  done_adding ","SizedQueue  new  << "," normalized_file_list  each "," gather_files  each ","(send\n  (lvar :file_list) :map) compact  << ","Mutex  new  synchronize ","(send\n  (lvar :file_list) :map) compact _lock synchronize ","RDoc Parser  for  scan "," read_file_ read_file_contents s ","RDoc Stats  new  add_file ","SizedQueue  new  pop ","RDoc Stats  new  begin_adding "," normalized_file_list  size "," gather_files  size "," normalized_file_list  empty? "," gather_files  empty? "," normalized_ normalized_file_list  "," normalized_ gather_files  ","options files  empty? ","options options files  ","(send\n  (lvar : normalized_file_list ) :map) compact ","(send\n  (lvar : gather_files ) :map) compact "," normalized_file_list  map "," gather_files  map "," gather_options files  "," normalized_file_list  length "," gather_files  length "]}," RDoc list_files_in_directory":{"type":"method","name":"list_files_in_directory","children":[],"call":[" normalized_file_list ","options exclude ","Dir  glob ","File  join ","@options exclude "]}," RDoc normalized_file_list":{"type":"method","name":"normalized_file_list","children":[],"call":[" raise ","file_list concat "," list_files_in_directory "," parse_dot_doc_file ","File  file? ","File  join ","rel_file_name == ","file_list << ","rel_file_name sub ","RDoc Parser  can_parse ","stat mtime < ","stat mtime ","stat ftype ","File  stat ","exclude_pattern =~ ","relative_files each ","file_list flatten ","@last_created []= ","stat mtime <= ","@last_created [] ","@last_modified []= ","stat mtime to_i <= ","last_modified to_i ","stat mtime to_i ","@last_modified [] "," warn ","rel_file_name end_with? ","file_list update ","file_list []= ","TEST_SUITE_DIRECTORY_NAMES  include? "," options skip_tests "," options ","File  basename ","UNCONDITIONALLY_SKIPPED_DIRECTORIES  include? "," parse_File  join _file ","rel_file_name sub  == ","rel_file_name sub  sub ","stat fstat ftype  ","@@last_created []  []= ","@@last_created []  [] ","@@last_modified []  []= ","@last_modified []  to_i ","@@last_modified []  [] ","rel_file_name sub  end_with? ","File  File  basename  "]}," RDoc parse_dot_doc_file":{"type":"method","name":"parse_dot_doc_file","children":[],"call":["result concat "," normalized_file_list ","Dir  glob ","File  join ","patterns split each ","patterns split ","File  read gsub ","File  read ","@options exclude ","result update ","File  read gsub  split each ","File  read gsub  split "]}," RDoc output_flag_file":{"type":"method","name":"output_flag_file","children":[],"call":["File  join "]}," RDoc update_output_dir":{"type":"method","name":"update_output_dir","children":[],"call":["f puts ","time rfc2822 ","File  open "," output_flag_file ","t rfc2822 ","last each "," open ","@options dry_run ","@options update_output_dir ! ","@options update_output_dir ","Time  at gmtime ","Time  at ","ENV  [] to_i ","ENV  [] ","ENV  [] nil? ","Time  at gmtime  rfc2822 ","Time  at gmTime  at gmtime  "]}," RDoc setup_output_dir":{"type":"method","name":"setup_output_dir","children":[],"call":["FileUtils  mkdir_p ","Time  parse "," error ","(str \"\\nDirectory \") + + + + ","(str \"\\nDirectory \") + + + ","(str \"\\nDirectory \") + + ","(str \"\\nDirectory \") + ","File  read ","File  directory? ","File  exist? "," output_flag_file ","last []= ","line split ","io each "," f gets "," f "," open ","io gets ","@options force_output ","@options dry_run ","FileUtils  touch ","File  open "," output_ output_flag_file  "]}," RDoc handle_pipe":{"type":"method","name":"handle_pipe","children":[],"call":["$stdout write ","@html convert ","$stdin read ","RDoc Markup ToHtml  new ","parser parse ","RDoc Text MARKUP_FORMAT  [] ","@options markup ","$std@html convert  write ","RDoc Markup ToHtml  new  convert ","RDoc Text MARKUP_FORMAT  []  parse "]}," RDoc error":{"type":"method","name":"error","children":[],"call":[" raise "]}," RDoc initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RDoc current=":{"type":"method","name":"current=","children":[],"call":[]}," RDoc current":{"type":"method","name":"current","children":[],"call":[]}," RDoc add_generator":{"type":"method","name":"add_generator","children":[],"call":[]}," RDoc const_missing":{"type":"method","name":"const_missing","children":[],"call":[]}," TopLevel pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp ","q seplist ","items push ","@modules map ","q breakable ","q text "," base_name inspect "," base_name ","q group "," class ","items concat "]}," TopLevel find_class_or_module":{"type":"method","name":"find_class_or_module","children":[],"call":["RDoc TopLevel  find_class_or_module ","@store find_class_or_module "]}," TopLevel find_class_named_from":{"type":"method","name":"find_class_named_from","children":[],"call":[]}," TokenStream tokens_to_s":{"type":"method","name":"tokens_to_s","children":[],"call":["(send\n  (send nil :token_stream) :map) join ","token text "," token_stream map "," token_stream ","(send\n  (send\n    (send nil :token_stream) :compact) :map) join "," token_stream compact map "," token_stream compact ","token [] ","(send\n  (send\n    (begin\n      (or\n        (send nil :token_stream)\n        (return\n          (str \"\")))) :compact) :map) join ","(or\n  (send nil :token_stream)\n  (return\n    (str \"\"))) compact map ","(or\n  (send nil :token_stream)\n  (return\n    (str \"\"))) compact "]}," TokenStream collect_tokens":{"type":"method","name":"collect_tokens","children":[],"call":[]}," Text strip_stars":{"type":"method","name":"strip_stars","children":[],"call":["  * ","$& length ","text gsub! ","text sub! ","text gsub ","empty force_encoding ","space * ","space force_encoding ","text encoding ","Object  const_defined? ","text =~ ","RDoc Encoding  change_encoding ","text gsub  gsub! ","text gsub  sub! ","text gsub  gsub ","empty force_text encoding  ","RDoc Encoding  change_encoding  force_encoding ","RDoc Encoding  change_encoding  * ","space force_text encoding  ","text gsub  encoding ","text text encoding  ","text gsub  =~ ","RDoc Encoding  change_text encoding  "]}," Text strip_newlines":{"type":"method","name":"strip_newlines","children":[],"call":["text gsub "]}," Text strip_hashes":{"type":"method","name":"strip_hashes","children":[],"call":["1 tr ","text gsub ","text =~ ","(send\n  (lvar :text) :gsub\n  (regexp\n    (str \"^\\\\s*(#+)\")\n    (regopt))) gsub ","empty force_encoding ","text encoding ","Object  const_defined? ","RDoc Encoding  change_encoding ","RDoc Encoding  change_encoding  force_encoding "]}," Text parse":{"type":"method","name":"parse","children":[],"call":[" raise ","$stderr puts ","e backtrace join ","e backtrace ","e class ","RDoc Markup Parser  parse ","RDoc Markup Document  new ","text =~ "," normalize_comment ","RDoc Markup Document  === ","MARKUP_FORMAT  [] parse ","MARKUP_FORMAT  [] ","text parse ","RDoc Comment  === "," emit_paragraph_event ","paragraph empty? ","paragraph << "," emit_empty_line_event "," each_line "," normalize_comment  =~ "," normalize_comment  parse "]}," Text normalize_comment":{"type":"method","name":"normalize_comment","children":[],"call":[" strip_newlines "," flush_left "," expand_tabs "," strip_hashes ","text empty? "," strip_stars "," language "," flush_left  empty? "," expand_tabs  empty? "," strip_hashes  empty? "," strip_newlines  empty? "," strip_stars  empty? "]}," Text markup":{"type":"method","name":"markup","children":[],"call":["document accept "," formatter "," parse "," parse accept ","i18n_text translate ","RDoc I18n Text  new ","@store rdoc options locale ","@store rdoc options ","@store rdoc "," parse  accept ","i18n_i18n_text translate  translate ","RDoc I18n Text  new  translate ","@store rdoc options @store rdoc options locale  "]}," Text flush_left":{"type":"method","name":"flush_left","children":[],"call":["flush join ","flush << ","line []= ","text each_line ","indents min ","indents << ","line =~ ","text gsub ","empty force_encoding ","text encoding ","Object  const_defined? ","indent > ","RDoc Encoding  change_encoding ","indents min s min ","indents min s << ","RDoc Encoding  change_encoding  force_encoding ","indents min  > "]}," Text expand_tabs":{"type":"method","name":"expand_tabs","children":[],"call":["expanded join ","expanded << ","  * ","8 - ","2 size ","line gsub! ","line !~ ","text each_line ","r force_encoding ","text encoding ","Object  const_defined? ","RDoc Encoding  change_encoding ","RDoc Encoding  change_encoding  foRDoc Encoding  change_encoding ce_encoding "]}," Stats Verbose print_constant":{"type":"method","name":"print_constant","children":[],"call":[" puts "," nodoc ","constant name "]}," Stats Verbose nodoc":{"type":"method","name":"nodoc","children":[],"call":["co documented? "]}," Stats Quiet print_constant":{"type":"method","name":"print_constant","children":[],"call":[]}," Stats Quiet initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Stats add_constant":{"type":"method","name":"add_constant","children":[],"call":["constant comment empty? ","constant comment ","constant document_self ","@display print_constant "]}," SingleClass ancestors":{"type":"method","name":"ancestors","children":[],"call":[" includes + "," superclass "," includes "," + "]}," RubyToken TkSYMBOL to_sym":{"type":"method","name":"to_sym","children":[],"call":[" text [] intern "," text [] "," text "]}," RubyToken TkUnknownChar set_text":{"type":"method","name":"set_text","children":[],"call":[]}," RubyToken TkUnknownChar ==":{"type":"method","name":"==","children":[],"call":["other name == ","other name ","other char_no == ","other char_no ","other line_no == ","other line_no "," class == ","other class "," class "]}," RubyToken TkOPASGN text":{"type":"method","name":"text","children":[],"call":["TkToken2Reading  [] "," op "]}," RubyToken TkOPASGN ==":{"type":"method","name":"==","children":[],"call":["other op == ","other op ","other char_no == ","other char_no ","other line_no == ","other line_no "," class == ","other class "," class "]}," RubyToken TkOp set_text":{"type":"method","name":"set_text","children":[],"call":[]}," RubyToken TkOp ==":{"type":"method","name":"==","children":[],"call":["other name == ","other name ","other char_no == ","other char_no ","other line_no == ","other line_no "," class == ","other class "," class "]}," RubyToken TkOp initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RubyToken TkVal set_text":{"type":"method","name":"set_text","children":[],"call":[]}," RubyToken TkVal ==":{"type":"method","name":"==","children":[],"call":["other value == ","other value ","other char_no == ","other char_no ","other line_no == ","other line_no "," class == ","other class "," class "]}," RubyToken TkId set_text":{"type":"method","name":"set_text","children":[],"call":[]}," RubyToken TkId ==":{"type":"method","name":"==","children":[],"call":["other name == ","other name ","other char_no == ","other char_no ","other line_no == ","other line_no "," class == ","other class "," class "]}," RubyToken TkNode set_text":{"type":"method","name":"set_text","children":[],"call":[]}," RubyToken TkNode ==":{"type":"method","name":"==","children":[],"call":["other node == ","other node ","other char_no == ","other char_no ","other line_no == ","other line_no "," class == ","other class "," class "]}," RubyToken TkNode initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RubyLex each_top_level_statement":{"type":"method","name":"each_top_level_statement","children":[],"call":[" get_readed "," prompt "," initialize_input ","@line != "," throw ","@line == ","@indent > ","@line concat "," lex "," loop "," catch "," initia lex ize_input ","@ lex ine != ","@ lex ine == ","@ lex ine concat ","  lex ex ","  lex oop "]}," RubyLex initialize_input":{"type":"method","name":"initialize_input","children":[],"call":[" prompt "]}," RubyLex prompt":{"type":"method","name":"prompt","children":[],"call":["@prompt call "]}," RubyLex set_prompt":{"type":"method","name":"set_prompt","children":[],"call":[" print ","Proc  new ","p respond_to? "," block_given? "]}," RubyLex buf_input":{"type":"method","name":"buf_input","children":[],"call":["@rests concat ","line split ","@input call "," prompt ","@input call  split "]}," RubyLex peek_match?":{"type":"method","name":"peek_match?","children":[],"call":["regexp =~ ","@rests join "," buf_input ","@rests empty? "]}," RubyLex eof?":{"type":"method","name":"eof?","children":[],"call":["@io eof? "]}," RubyLex get_readed":{"type":"method","name":"get_readed","children":[],"call":["@readed join ","@readed size ","@readed reverse index ","@readed reverse ","@readed clear ","@readed size - ","idx + ","@readed rindex ","@@readed join  join ","@@readed join  size ","@@readed join  reverse index ","@@readed join  reverse ","@@readed join  clear ","@@readed join  size - ","@readed reverse index  + ","@readed rindex  + ","@@readed join  rindex "]}," RubyLex set_input":{"type":"method","name":"set_input","children":[],"call":["@io gets ","Proc  new "," block_given? ","p respond_to? "]}," RubyLex inspect":{"type":"method","name":"inspect","children":[],"call":["#<%s:0x%x lex_state %p space_seen %p> % "," object_id "," class ","#<%s:0x%x pos %d lex_state %p space_seen %p> % ","@io pos "]}," Store save_method":{"type":"method","name":"save_method","children":[],"call":["Marshal  dump "," open "," method_file ","method full_name ","klass full_name ","cache [] << ","method name ","cache [] ","@cache [] ","method singleton ","FileUtils  mkdir_p "," class_path ","io write ","File  open ","method klass full_name  ","klass klass full_name  ","@cache []  [] << ","@cache []  [] ","@@cache []  [] "]}," Store save_class":{"type":"method","name":"save_class","children":[],"call":["Marshal  dump "," open ","@cache [] [] push ","@cache [] [] ","klass full_name ","@cache [] ","attributes empty? ","attribute name ","attribute type ","klass attributes map ","klass attributes ","ancestor full_name ","String  === ","klass ancestors compact map ","klass ancestors compact ","klass ancestors ","klass merge ","Marshal  load ","io read "," class_file ","@cache [] << ","FileUtils  mkdir_p "," class_path ","attribute definition ","io write ","FileUtils  rm_f ","@cache [] []= ","to_delete concat "," method_file ","old map ","@cache [] [] - ","method name ","instance_methods map ","class_methods map ","meth singleton ","klass method_list partition ","klass method_list ","klass method_list empty? ","disk_klass merge "," load_class ","@cache [] [] - - ","attr name ","@cache [] [] concat ","attribute_definitions empty? ","klass direct_ancestors compact map ","klass direct_ancestors compact ","klass direct_ancestors ","File  open ","disk_klass merge  full_name ","klass klass full_name  ","disk_klass merge  attributes map ","disk_klass merge  attributes ","ancestor klass full_name  ","disk_klass merge  ancestors compact map ","disk_klass merge  ancestors compact ","disk_klass merge  ancestors ","disk_klass merge  merge "," class_ class_file  ","@cache [] [] -  map ","@cache [] [] - -  map ","disk_klass merge  method_list partition ","disk_klass merge  method_list ","disk_klass merge  method_list empty? ","Marshal  load  merge "," load_class  merge ","disk_disk_klass merge  merge ","disk_klass merge  direct_ancestors compact map ","disk_klass merge  direct_ancestors compact ","disk_klass merge  direct_ancestors "]}," Store save_cache":{"type":"method","name":"save_cache","children":[],"call":["Marshal  dump "," open "," cache_path ","m sort! ","m uniq! ","@cache [] each ","@cache [] ","@cache [] sort! ","@cache [] uniq! ","io write ","@cache []= "," clean_cache_collection ","@cache [] merge! ","File  open "]}," Store modules":{"type":"method","name":"modules","children":[],"call":["@cache [] "]}," Store method_file":{"type":"method","name":"method_file","children":[],"call":["File  join "," class_path ","%%%02x % ","$& [] ","method_name gsub ","$& [] ord "," respond_to? ","method_name =~ ","method_name split last ","method_name split ","method_name split last  gsub ","method_name split last  =~ ","method_name split last  split last ","method_name split last  split "]}," Store load_method":{"type":"method","name":"load_method","children":[],"call":["Marshal  load ","io read "," open "," method_file "," raise ","error set_backtrace ","e backtrace ","MissingFileError  new ","klass_name + ","obj parent= "," load_class "," find_class_or_module ","obj parent ","obj store= ","File  open "," method_ method_file  ","MissingFileError  new  set_backtrace ","Marshal  load  parent= ","Marshal  load  parent ","Marshal  load  store= "]}," Store load_class":{"type":"method","name":"load_class","children":[],"call":["Marshal  load ","io read "," open "," class_file ","@modules_hash []= ","@classes_hash []= ","obj store= "," load_class_data "," raise ","error set_backtrace ","e backtrace ","MissingFileError  new "," class_ class_file  "," load_class_data  store= ","MissingFileError  new  set_backtrace "]}," Store load_cache":{"type":"method","name":"load_cache","children":[],"call":["Marshal  load ","io read "," open "," cache_path ","@cache [] ","@c_enclosure_names []= ","map each ","@cache [] each ","File  open ","Marshal  load  [] ","Marshal  load  [] each "]}," Store instance_methods":{"type":"method","name":"instance_methods","children":[],"call":["@cache [] "]}," Store inspect":{"type":"method","name":"inspect","children":[],"call":["#<%s:0x%x %s %p> % "," modules sort "," modules "," object_id "," class "," module_names sort "," module_names "]}," Store friendly_path":{"type":"method","name":"friendly_path","children":[],"call":["@path =~ ","Regexp  union ","(str \"/\") compact "," type ","File  basename ","File  expand_path ","RDoc  home "]}," Store class_path":{"type":"method","name":"class_path","children":[],"call":["File  join ","klass_name split "]}," Store class_methods":{"type":"method","name":"class_methods","children":[],"call":["@cache [] "]}," Store class_file":{"type":"method","name":"class_file","children":[],"call":["File  join "," class_path ","klass_name split last ","klass_name split ","klass_klass_name split last  split last ","klass_klass_name split last  split "]}," Store cache_path":{"type":"method","name":"cache_path","children":[],"call":["File  join "]}," Store attributes":{"type":"method","name":"attributes","children":[],"call":["@cache [] "]}," Store ancestors":{"type":"method","name":"ancestors","children":[],"call":["@cache [] "]}," Store initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Paths gemdirs":{"type":"method","name":"gemdirs","children":[],"call":[]}," Paths each":{"type":"method","name":"each","children":[],"call":[]}," Driver setup_pager":{"type":"method","name":"setup_pager","children":[],"call":["IO  popen ","pagers compact uniq each ","pagers compact uniq ","pagers compact ","ENV  [] ","$? exited? "," in_path? ","pager split first ","pager split ","File  exist? ","$? pid == ","io pid ","$? pid "," find_pager_jruby ","RUBY_ENGINE  == ","Object  const_defined? ","pager empty? ","Shellwords  split "," require ","Shellwords  split s compact uniq each ","Shellwords  split s compact uniq ","Shellwords  split s compact ","Shellwords  split  split first ","Shellwords  split  split "," find_pager_jruby  pid "," find_pager_RUBY_ENGINE  ==  "," find_Shellwords  split _jruby ","Shellwords  split  empty? "]}," Driver paging?":{"type":"method","name":"paging?","children":[],"call":[]}," Driver page":{"type":"method","name":"page","children":[],"call":["pager close "," setup_pager ","@jruby_pager_process wait_for "," setup_pager  close "," setup_ setup_pager  ","@jruby_ setup_pager _process wait_for "]}," Driver method_type":{"type":"method","name":"method_type","children":[],"call":[]}," Driver load_methods_matching":{"type":"method","name":"load_methods_matching","children":[],"call":["methods empty? ","found reject ","found << ","methods compact ","methods << "," load_method ","types == "," find_methods ","(sym :instance) include? ","(sym :class) include? "]}," Driver load_method":{"type":"method","name":"load_method","children":[],"call":["store load_method ","method_name == ","methods find ","store send [] ","store send ","method comment= ","RDoc AnyMethod  new ","RDoc Comment  new parse ","RDoc Comment  new ","e file ","store public_send [] ","store public_send ","store load_RDoc AnyMethod  new  ","RDoc AnyMethod  new _name == ","store send []  find ","store public_send []  find ","RDoc AnyMethod  new s find ","RDoc AnyMethod  new  comment= ","method RDoc Comment  new parse = "]}," Driver list_methods_matching":{"type":"method","name":"list_methods_matching","children":[],"call":["found uniq ","found push ","matches map ","methods grep ","store class_methods [] ","store class_methods ","types == ","store instance_methods [] ","store instance_methods "," find_methods ","Regexp  escape ","method to_s ","found concat ","methods grep  map ","store class_methods []  grep ","store instance_methods []  grep ","store class_store class_methods []  [] ","store class_store instance_methods []  [] ","store class_store class_methods []  ","store class_store instance_methods []  ","store instance_store class_methods []  [] ","store instance_store instance_methods []  [] ","store instance_store class_methods []  ","store instance_store instance_methods []  "," find_store class_methods []  "," find_store instance_methods []  "]}," Driver list_known_classes":{"type":"method","name":"list_known_classes","children":[],"call":["io puts ","classes join ","io tty? "," paging? "," page ","classes flatten uniq sort ","classes flatten uniq ","classes flatten ","classes << ","store modules "," stores each "," stores ","names join ","names empty? ","classes grep ","Regexp  union ","names map ","store module_names ","classes flatten uniq sort  join ","classes grep  join ","classes flatten uniq sort  flatten uniq sort ","classes grep  flatten uniq sort ","classes flatten uniq sort  flatten uniq ","classes grep  flatten uniq ","classes flatten uniq sort  flatten ","classes grep  flatten ","classes flatten uniq sort  << ","classes grep  << ","classes flatten uniq sort  grep ","classes grep  grep "]}," Driver formatter":{"type":"method","name":"formatter","children":[],"call":["RDoc Markup ToAnsi  new ","RDoc Markup ToBs  new "," paging? ","@formatter_klass new ","io tty? ! ","io tty? "]}," Driver find_methods":{"type":"method","name":"find_methods","children":[],"call":["methods each ","(lvar :k) compact ","methods sort_by ","methods << ","ancestors each "," classes [] "," classes ","klasses each ","klasses unshift "," ancestors_of "," classes keys ","klass empty? "," method_type "," parse_name "," classes []  each "," ancestors_of  each "," classes keys  each "," ancestors_of  unshift "," classes keys  unshift ","  classes [] _of "]}," Driver expand_name":{"type":"method","name":"expand_name","children":[],"call":[" expand_class ","(lvar :selector) join ","klass empty? "," parse_name "," find_store "]}," Driver expand_class":{"type":"method","name":"expand_class","children":[],"call":["expanded dup "," raise ","abbrevs [] ","Abbrev  abbrev ","klass_name =~ "," classes keys select "," classes keys "," classes ","expanded << ","expanded empty? ","klass split inject ","klass split ","ary first ","ary first != ","ary length != ","ary length "," classes keys grep ","Regexp  new ","klass gsub ","NotFoundError  new ","DidYouMean SpellChecker  new correct ","DidYouMean SpellChecker  new "," check_did_you_mean ","class_names grep "," lambda ","abbrevs []  dup ","Abbrev  abbrev  [] ","abbrevs []  << ","abbrevs []  empty? "," classes keys grep  first ","class_names grep  first "," classes keys grep  first != ","class_names grep  first != "," classes keys grep  length != ","class_names grep  length != "," classes keys grep  length ","class_names grep  length "," classes keys  grep "]}," Driver display_names":{"type":"method","name":"display_names","children":[],"call":[" display_name "," expand_name ","names each "," display_ expand_name  "," expand_ expand_name  "," expand_name s each "]}," Driver display":{"type":"method","name":"display","children":[],"call":["io write ","document accept "," formatter "," page ","f width= ","f respond_to? ","  formatter ormatter "," formatter  width= "," formatter  respond_to? "]}," Driver complete":{"type":"method","name":"complete","children":[],"call":["completions sort ","completions push ","completions << ","completions delete ","methods empty? ! ","methods empty? "," list_methods_matching ","name =~ ","completions include? "," classes key? "," classes ","klasses grep ","name !~ "," parse_name "," classes keys ","completions sort uniq ","completions concat ","Regexp  escape "," complete_method "," complete_klass ","klasses grep  sort ","klasses grep  push ","klasses grep  << ","klasses grep  delete "," list_methods_matching  empty? ! "," list_methods_matching  empty? "," list_ list_methods_matching _matching ","klasses grep  include? "," classes keys  grep ","klasses grep  sort uniq ","klasses grep  concat "]}," Driver classes":{"type":"method","name":"classes","children":[],"call":["@classes [] << ","@classes [] ","store cache [] each ","store cache [] ","store cache ","@stores each "]}," Driver ancestors_of":{"type":"method","name":"ancestors_of","children":[],"call":["ancestors reverse ","unexamined push ","ancestors push ","klasses - ","(send\n  (lvar :stores) :map) flatten uniq ","(send\n  (lvar :stores) :map) flatten ","store ancestors [] ","store ancestors ","stores map ","stores empty? ! ","stores empty? "," classes [] "," classes ","seen << ","unexamined shift ","unexamined empty? "," loop ","unexamined concat ","ancestors concat ","(send\n  (lvar :stores) :flat_map) uniq ","stores flat_map ","klasses -  - ","(send\n  (lvar :stores) :map) flatten uniq  - ","(send\n  (lvar :stores) :flat_map) uniq  - ","(send\n  (lvar : classes [] ) :map) flatten uniq ","(send\n  (lvar : classes [] ) :map) flatten "," classes []  map "," classes []  empty? ! "," classes []  empty? ","(send\n  (lvar : classes [] ) :flat_map) uniq "," classes []  flat_map "]}," Driver add_method_list":{"type":"method","name":"add_method_list","children":[],"call":["out << ","RDoc Markup BlankLine  new ","out push ","RDoc Markup Verbatim  new ","methods map ","RDoc Markup Heading  new ","RDoc Markup IndentedParagraph  new ","methods join ","@interactive ! ","methods empty? ","out concat "]}," Driver add_includes":{"type":"method","name":"add_includes","children":[],"call":["out << ","verb push ","incl name ","wout each ","RDoc Markup Verbatim  new ","wout empty? ","incl comment ","RDoc Markup BlankLine  new ","RDoc Markup Paragraph  new ","with each ","with empty? ","incl comment empty? ","modules partition ","store friendly_path ","include comment ","include name ","modules first ","modules length == ","modules length ","includes each ","RDoc Markup Heading  new ","RDoc Markup Rule  new ","includes empty? "," add_extension_modules ","RDoc Markup Verbatim  new  push ","incl include name  ","store friendly_store friendly_path  ","modules first  comment ","include include name  ","modules first  name ","modules first s each ","modules first s empty? "]}," Driver add_from":{"type":"method","name":"add_from","children":[],"call":["out << ","RDoc Markup Paragraph  new ","store friendly_path "]}," Driver add_class":{"type":"method","name":"add_class","children":[],"call":["out << ","RDoc Markup BlankLine  new ","RDoc Markup Heading  new ","(send\n  (lvar :classes) :map) compact shift ","(send\n  (lvar :classes) :map) compact ","klass superclass ","klass module? ","classes map ","classes all? ","superclass full_name ","String  === ","klass superclass full_name  ","superclass full_name  full_name "]}," Driver add_also_in":{"type":"method","name":"add_also_in","children":[],"call":["out << ","paths parts push ","store friendly_path ","paths parts ","also_in each ","RDoc Markup Verbatim  new ","RDoc Markup Paragraph  new ","RDoc Markup Rule  new ","also_in empty? ","RDoc Markup Verbatim  new  parts push ","RDoc Markup Verbatim  new  parts "]}," Driver dump":{"type":"method","name":"dump","children":[],"call":[]}," RDoc remove_siginfo_handler":{"type":"method","name":"remove_siginfo_handler","children":[],"call":[" trap ","Signal  list key? ","Signal  list "]}," RDoc remove_unparseable":{"type":"method","name":"remove_unparseable","children":[],"call":["file =~ ","files reject ","io read =~ ","io read "," open ","File  open ","(str \"\\\\A(\\\\f\\\\n[^,]+,\\\\d+$|!_TAG_)\") match? ","File  binread "]}," RDoc parse_file":{"type":"method","name":"parse_file","children":[],"call":[" raise ","$stderr puts ","e backtrace join ","e backtrace ","e message ","e class ","parser scan ","RDoc Parser  for ","RDoc TopLevel  new "," read_file_contents ","@stats add_file ","Gem  ruby ","cm done_documenting= ","top_level classes_or_modules each ","top_level classes_or_modules ","RDoc Encoding  read_file ","@options encoding ","filename encode ","@store add_file ","relative_path to_s ","relative_path relative_path_from ","@options page_dir ","relative_path to_s start_with? ","@options page_dir to_s ","filename_path relative_path_from ","@options root "," Pathname expand_path "," Pathname ","RDoc Parser  binary? ","Object  const_defined? ","RDoc Parser  for  scan "," read_file_ read_file_contents s "," read_file_RDoc Encoding  read_file s ","RDoc TopLevel  new  classes_or_modules each ","@store add_file  classes_or_modules each ","RDoc TopLevel  new  classes_or_modules ","@store add_file  classes_or_modules ","@options @options encoding  ","filename encode  encode ","relative_path relative_path_from  to_s ","filename_path relative_path_from  to_s ","relative_path relative_path_from  relative_path relative_path_from _from ","filename_path relative_path_from  filename_path relative_path_from _from ","relative_path relative_path_from  to_s start_with? ","filename_path relative_path_from  to_s start_with? ","filename encode _path relative_path_from ","filename_path relative_path relative_path_from _from ","filename_path filename_path relative_path_from _from "," Pathname expand_path  relative_path_from "]}," RDoc install_siginfo_handler":{"type":"method","name":"install_siginfo_handler","children":[],"call":[" puts "," trap ","Signal  list include? ","Signal  list "]}," RDoc gather_files":{"type":"method","name":"gather_files","children":[],"call":[" remove_unparseable ","file_list uniq "," normalized_file_list ","files empty? ","file_list sort ","@options exclude ","file_list keys sort ","file_list keys ","@last_modified replace ","(send\n  (lvar :file_list) :count) > ","file_list []= ","@last_modified [] ","file_list count ","@options root to_s ","@options root "," remove_unparseable  uniq ","file_list uniq  uniq "," normalized_file_list  uniq "," normalized_ remove_unparseable  "," normalized_file_list uniq  "," normalized_ normalized_file_list  "," remove_unparseable  sort ","file_list uniq  sort "," normalized_file_list  sort "," remove_unparseable  keys sort ","file_list uniq  keys sort "," normalized_file_list  keys sort "," remove_unparseable  keys ","file_list uniq  keys "," normalized_file_list  keys ","(send\n  (lvar : remove_unparseable ) :count) > ","(send\n  (lvar :file_list uniq ) :count) > ","(send\n  (lvar : normalized_file_list ) :count) > "," remove_unparseable  []= ","file_list uniq  []= "," normalized_file_list  []= "," remove_unparseable  count ","file_list uniq  count "," normalized_file_list  count "]}," Parser zip?":{"type":"method","name":"zip?","children":[],"call":[]}," RubyTools unget_tk":{"type":"method","name":"unget_tk","children":[],"call":["obj pop_token ","@token_listeners each ","@unget_read unshift ","@read pop ","@tokens unshift "]}," RubyTools token_listener":{"type":"method","name":"token_listener","children":[],"call":[" remove_token_listener "," add_token_listener "]}," RubyTools skip_tkspace":{"type":"method","name":"skip_tkspace","children":[],"call":[" unget_tk ","tokens push ","TkNL  === ","TkSPACE  === "," get_tk "," tk_nl? ","on_sp == ","tk [] ","on_ignored_nl == ","on_nl == "," unget_ get_tk  "," get_ get_tk  ","  get_tk _nl? "," get_tk  [] "]}," RubyTools reset":{"type":"method","name":"reset","children":[],"call":[]}," RubyTools remove_token_listener":{"type":"method","name":"remove_token_listener","children":[],"call":["@token_listeners delete "]}," RubyTools peek_tk":{"type":"method","name":"peek_tk","children":[],"call":[" unget_tk "," get_tk "," unget_ get_tk  "," get_ get_tk  "]}," RubyTools peek_read":{"type":"method","name":"peek_read","children":[],"call":["@read join "]}," RubyTools get_tkread":{"type":"method","name":"get_tkread","children":[],"call":["@read join ","@@read join  join "]}," RubyTools get_tk_until":{"type":"method","name":"get_tk_until","children":[],"call":["read << "," unget_tk "," get_tk "," loop "," unget_ get_tk  "," get_ get_tk  "]}," RubyTools get_tk":{"type":"method","name":"get_tk","children":[],"call":["obj add_token ","@token_listeners each "," warn ","obj pop_token "," Token set_text ",": + ","tk1 text "," Token ","tk1 name ","tk1 respond_to? "," get_tk "," set_token_position ","tk char_no ","tk line_no ","TkSYMBEG  === ","TkEND_OF_SCRIPT  === "," puts ","tk inspect ","@tokens shift ","@read push ","@unget_read shift ","@scanner get_readed ","@scanner token ","@tokens empty? ","on___end__ == ","tk [] ","tk == ","@scanner [] ","@scanner_point >= ","@scanner size "," Token set_text 1 text ","@tokens shift 1 text ","@scanner token 1 text ","@scanner [] 1 text "," get_tk  text "," Token set_text 1 name ","@tokens shift 1 name ","@scanner token 1 name ","@scanner [] 1 name "," get_tk  name "," Token set_text 1 respond_to? ","@tokens shift 1 respond_to? ","@scanner token 1 respond_to? ","@scanner [] 1 respond_to? "," get_tk  respond_to? "," get_ Token set_text  "," get_@tokens shift  "," get_@scanner token  "," get_@scanner []  "," Token set_text  char_no ","@tokens shift  char_no ","@scanner token  char_no ","@scanner []  char_no "," Token set_text  line_no ","@tokens shift  line_no ","@scanner token  line_no ","@scanner []  line_no "," Token set_text  inspect ","@tokens shift  inspect ","@scanner token  inspect ","@scanner []  inspect "," Token set_text  [] ","@tokens shift  [] ","@scanner token  [] ","@scanner []  [] "," Token set_text  == ","@tokens shift  == ","@scanner token  == ","@scanner []  == "]}," RubyTools add_token_listener":{"type":"method","name":"add_token_listener","children":[],"call":["@token_listeners << "]}," NormalModule superclass":{"type":"method","name":"superclass","children":[],"call":[" raise "," full_name "]}," NormalModule pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp "," comment ","q breakable ","q text ","q seplist ","q group "," full_name "]}," NormalClass pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp "," comment ","q breakable ","q text ","q seplist ","q group "," full_name "]}," NormalClass ancestors":{"type":"method","name":"ancestors","children":[],"call":[" includes + "," superclass "," includes "," + ","ancestors concat "," superclass ancestors ","ancestors << "," << ","String  === "]}," Verbatim text":{"type":"method","name":"text","children":[],"call":["@parts join "]}," Verbatim normalize":{"type":"method","name":"normalize","children":[],"call":["parts slice! ","parts [] == ","parts [] ","parts << ","newlines <= ","@parts each ","parts pop ","parts last =~ ","parts last ","newlines == "]}," Verbatim accept":{"type":"method","name":"accept","children":[],"call":["visitor accept_verbatim "]}," ToTest accept_list_item_end":{"type":"method","name":"accept_list_item_end","children":[],"call":[]}," ToTest accept_list_item_start":{"type":"method","name":"accept_list_item_start","children":[],"call":["@res << ","@list last ","  * ","@list size - ","@list size "]}," ToRdoc wrap":{"type":"method","name":"wrap","children":[],"call":["@res << ","@res pop ","text empty? ","@res << << ","text slice! ","$& length ","text =~ ","text length > ","text length ","  * ","text_len < ","@width - ","text empty? ! ","@res << << << ","text scan ","@width -  < "]}," ToRdoc use_prefix":{"type":"method","name":"use_prefix","children":[],"call":["@res << "]}," ToRdoc start_accepting":{"type":"method","name":"start_accepting","children":[],"call":[]}," ToRdoc handle_special_SUPPRESSED_CROSSREF":{"type":"method","name":"handle_special_SUPPRESSED_CROSSREF","children":[],"call":["special text sub ","special text ","text sub "," in_tt? ","special text sub  sub ","special special text  sub ","special text sub  ","special special text  ","text sub  sub ","special text  sub "]}," ToRdoc end_accepting":{"type":"method","name":"end_accepting","children":[],"call":["@res join "]}," ToRdoc attributes":{"type":"method","name":"attributes","children":[],"call":[" convert_flow ","@am flow ","text dup "," convert_@am flow  ","@am @am flow  "]}," ToRdoc accept_verbatim":{"type":"method","name":"accept_verbatim","children":[],"call":["@res << ","line join ","line == ","lines each ","lines shift join ","lines shift "," use_prefix ","line [] []= ","line [] ","indented each ","(send\n  (lvar :indented) :map) min ","line first length ","line first ","indented map ","line != ","lines select ","lines << ","current_line empty? ","part == ","current_line << ","verbatim parts each ","verbatim parts ","  * ","@indent + ","@res =~ ","  * ed each ","(send\n  (lvar :  * ed) :map) min ","  * ed map ","@  *  + "]}," ToRdoc accept_rule":{"type":"method","name":"accept_rule","children":[],"call":["@res << ","- * ","@width - ","  * "," use_prefix "]}," ToRdoc accept_paragraph":{"type":"method","name":"accept_paragraph","children":[],"call":[" wrap "," attributes ","paragraph text ","paragraph paragraph text  "]}," ToRdoc accept_list_start":{"type":"method","name":"accept_list_start","children":[],"call":["@list_type << ","list type "," raise ","@list_width << ","list items length to_s length ","list items length to_s ","list items length ","list items ","@list_index << "]}," ToRdoc accept_list_item_start":{"type":"method","name":"accept_list_item_start","children":[],"call":["bullet length + ","bullet length ","(send\n  (str \" \") :*\n  (ivar :@indent)) + ","bullet ljust ","  * ","bullet + ","@list_type last ","@list_index last to_s + ","@list_index last to_s ","@list_index last "," attributes + "," attributes ","list_item label ","type == ","@prefix << "," attributes strip + "," attributes strip ","bullets + ","bullets << ","bullets empty? ","(send\n  (send nil :Array\n    (send\n      (lvar :list_item) :label)) :map) join "," Array map "," Array ","@list_index last to_s +  length + "," attributes +  length + "," attributes strip +  length + ","@list_index last to_s +  length "," attributes +  length "," attributes strip +  length ","@list_index last to_s +  ljust "," attributes +  ljust "," attributes strip +  ljust ","@list_index last to_s +  + "," attributes +  + "," attributes strip +  + ","@list_@list_type last  last ","@list_type last  == ","(send\n  (str \" \") :*\n  (ivar :@indent)) +  << ","bullet +  << ","  *  << ","@list_index last to_s + s + "," attributes + s + "," attributes strip + s + ","(send\n  (send nil :Array\n    (send\n      (lvar :list_item) :label)) :map) join  + ","@list_index last to_s + s << "," attributes + s << "," attributes strip + s << ","(send\n  (send nil :Array\n    (send\n      (lvar :list_item) :label)) :map) join  << ","@list_index last to_s + s empty? "," attributes + s empty? "," attributes strip + s empty? ","(send\n  (send nil :Array\n    (send\n      (lvar :list_item) :label)) :map) join  empty? "]}," ToRdoc accept_list_item_end":{"type":"method","name":"accept_list_item_end","children":[],"call":["bullet length + ","bullet length ","@list_index []= ","@list_index last succ ","@list_index last ","@list_index last to_s ","@res << ","@list_type last ","@prefix strip ","@list_index last to_s  length + ","@list_index last to_s  length "]}," ToRdoc accept_list_end":{"type":"method","name":"accept_list_end","children":[],"call":["@list_width pop ","@list_type pop ","@list_index pop "]}," ToRdoc accept_heading":{"type":"method","name":"accept_heading","children":[],"call":["@res << ","@headings [] [] ","@headings [] ","heading level "," attributes ","heading text ","  * "," use_prefix "]}," ToRdoc accept_blank_line":{"type":"method","name":"accept_blank_line","children":[],"call":["@res << "]}," ToRdoc init_tags":{"type":"method","name":"init_tags","children":[],"call":[" add_tag "]}," ToRdoc initialize":{"type":"method","name":"initialize","children":[],"call":["@headings []= ","@headings default= "," init_tags ","@markup add_special ","@markup add_regexp_handling "]}," ToHtml accept_list_item_end":{"type":"method","name":"accept_list_item_end","children":[],"call":["@in_list_entry []= "," list_end_for ","@list last "]}," ToHtml accept_list_item_start":{"type":"method","name":"accept_list_item_start","children":[],"call":["@res << "," list_item_start ","@list last ","@res << << "," annotate ","@in_list_entry last "]}," ToBs convert_string":{"type":"method","name":"convert_string","children":[],"call":["chars join ","string chars map ","string chars ","string respond_to? "]}," ToBs convert_special":{"type":"method","name":"convert_special","children":[],"call":[" convert_string "]}," ToBs annotate":{"type":"method","name":"annotate","children":[],"call":[]}," ToBs accept_heading":{"type":"method","name":"accept_heading","children":[],"call":["@res << ","@headings [] [] ","@headings [] ","heading level "," attributes ","heading text ","  * "," use_prefix "]}," ToBs init_tags":{"type":"method","name":"init_tags","children":[],"call":[" add_tag "]}," ToBs initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ToAnsi start_accepting":{"type":"method","name":"start_accepting","children":[],"call":[]}," ToAnsi accept_list_item_start":{"type":"method","name":"accept_list_item_start","children":[],"call":["bullet gsub length + ","bullet gsub length ","bullet gsub ","(send\n  (str \" \") :*\n  (ivar :@indent)) + ","bullet ljust ","bullet length + ","bullet length ","  * ","bullet + ","@list_type last ","@list_index last to_s + ","@list_index last to_s ","@list_index last "," attributes + "," attributes ","list_item label "," attributes strip + "," attributes strip ","labels << ","labels empty? ","(send\n  (send nil :Array\n    (send\n      (lvar :list_item) :label)) :map) join "," Array map "," Array ","(send\n  (send nil :Array\n    (send\n      (lvar :list_item) :label)) :map) join  << ","(send\n  (send nil :Array\n    (send\n      (lvar :list_item) :label)) :map) join  empty? "]}," ToAnsi accept_list_item_end":{"type":"method","name":"accept_list_item_end","children":[],"call":["bullet length + ","bullet length ","@list_index []= ","@list_index last succ ","@list_index last ","@list_index last to_s ","@res << ","@list_type last "," res length == "," res length "," res ","@prefix strip ","@list_index last to_s  length + ","@list_index last to_s  length "]}," ToAnsi init_tags":{"type":"method","name":"init_tags","children":[],"call":[" add_tag "]}," ToAnsi initialize":{"type":"method","name":"initialize","children":[],"call":["@headings []= ","@headings clear "]}," Rule pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp "," weight ","q group "]}," Rule accept":{"type":"method","name":"accept","children":[],"call":["visitor accept_rule "]}," Parser unget":{"type":"method","name":"unget","children":[],"call":["@tokens unshift "," raise ","token == ","@tokens first "," p "]}," Parser tokenize":{"type":"method","name":"tokenize","children":[],"call":["@tokens << "," token_pos ","s matched ","s scan ","s matched_size ","s [] "," raise ","s pos ","s matched_size - ","s [] length - ","s [] length ","level > ","s eos? ","StringScanner  new ","s matched sub ","s [] bytesize ","pos + ","s [] =~ ","@s [] length ","@s [] ","@s scan ","@s [] bytesize ","@s pos ","@s [] length - ","@s matched sub ","@s matched ","@s [] =~ "," char_pos ","@s eos? "," setup_scanner ","pos [] ","pos [] + ","@s unscan ","@s newline! ","@tokenStringScanner  new  << "," token_s pos  "," token_@s pos  "," token_poStringScanner  new  ","StringScanner  new  matched ","StringScanner  new  StringScanner  new can ","StringScanner  new  matched_StringScanner  new ize ","StringScanner  new  [] "," raiStringScanner  new e ","s s pos  ","s @s pos  ","StringScanner  new  poStringScanner  new  ","StringScanner  new  matched_StringScanner  new ize - ","StringScanner  new  [] length - ","StringScanner  new  [] length ","s [] length  > ","@s [] length  > ","StringScanner  new  eoStringScanner  new ? ","StringScanner  new  matched StringScanner  new ub ","StringScanner  new  [] byteStringScanner  new ize ","s pos  + ","@s pos  + ","poStringScanner  new  + ","StringScanner  new  [] =~ ","@StringScanner  new  [] length ","@StringScanner  new  [] ","@StringScanner  new  StringScanner  new can ","@StringScanner  new  [] byteStringScanner  new ize ","@s s pos  ","@s @s pos  ","@StringScanner  new  poStringScanner  new  ","@StringScanner  new  [] length - ","@StringScanner  new  matched StringScanner  new ub ","@StringScanner  new  matched ","@StringScanner  new  [] =~ "," char_s pos  "," char_@s pos  "," char_poStringScanner  new  ","@StringScanner  new  eoStringScanner  new ? "," StringScanner  new etup_StringScanner  new canner ","s pos  [] ","@s pos  [] ","poStringScanner  new  [] ","s pos  [] + ","@s pos  [] + ","poStringScanner  new  [] + ","@StringScanner  new  unStringScanner  new can ","@StringScanner  new  newline! "]}," Parser token_pos":{"type":"method","name":"token_pos","children":[],"call":["offset - "," char_pos "," char_pos  - "]}," Parser text":{"type":"method","name":"text","children":[],"call":["text << "," raise ","@current_token inspect "," unget ","  * ","space - - ","space - ","data length "," get "," loop "]}," Parser skip":{"type":"method","name":"skip","children":[],"call":[" raise ","@current_token inspect "," unget ","token_type == "," get "]}," Parser peek_token":{"type":"method","name":"peek_token","children":[],"call":[" p ","@tokens first "]}," Parser parse":{"type":"method","name":"parse","children":[],"call":[" p "," raise ","data inspect ","indent > ","LIST_TOKENS  include? "," peek_token first "," peek_token ","document << "," build_list "," unget "," peek_token [] == "," peek_token [] "," build_paragraph "," skip ","RDoc Markup Rule  new ","RDoc Markup BlankLine  new "," build_verbatim ","indent == "," build_heading ","column < ","type != "," get ","@tokens empty? ","parent << ","column > ","type == "," parse_text "," parse ","RDoc Markup BlockQuote  new "," build_ build_list  "]}," Parser get":{"type":"method","name":"get","children":[],"call":[" p ","@tokens shift "]}," Parser build_verbatim":{"type":"method","name":"build_verbatim","children":[],"call":[" p ","verbatim normalize "," unget ","(sym :INDENT) include? "," peek_token [] "," peek_token ","verbatim << ","  * ","data - ","list_marker length "," get ","column <= ","peek_column - - ","peek_column - ","column + + ","column + ","- * ","2 + ","= * ","margin >= ","@tokens empty? ","RDoc Markup Verbatim  new ","p slice! ","p == ","verbatim parts each ","verbatim parts ","min_indent > ","verbatim << << ","line empty? ","line << ","peek_type == ","indent < ","min_indent nil? ","column - ","type == "," dup ","peek_type != ","RDoc Markup Verbatim  new  normalize ","RDoc Markup Verbatim  new  << ","RDoc Markup Verbatim  new  parts each ","RDoc Markup Verbatim  new  parts ","min_data -  > ","min_peek_column - -  > ","min_column -  > ","RDoc Markup Verbatim  new  << << "," dup  empty? "," dup  << ","data -  < ","peek_column - -  < ","column -  < ","min_data -  nil? ","min_peek_column - -  nil? ","min_column -  nil? "]}," Parser build_paragraph":{"type":"method","name":"build_paragraph","children":[],"call":[" p "," unget "," skip ","paragraph << ","column != "," peek_token [] == "," peek_token [] "," peek_token ","data == "," get ","@tokens empty? ","RDoc Markup Paragraph  new ","column == ","type == ","paragraph parts last sub! ","paragraph parts last ","paragraph parts ","data << "," peek_token first == "," peek_token first ","(begin\n  (const nil :SPACE_SEPARATED_LETTER_CLASS)) match? ","RDoc Markup Paragraph  new  << ","RDoc Markup Paragraph  new  parts last sub! ","RDoc Markup Paragraph  new  parts last ","RDoc Markup Paragraph  new  parts "]}," Parser build_list_item":{"type":"method","name":"build_list_item","children":[],"call":["list_item parts shift ","list_item parts ","list_item length > ","list_item length ","RDoc Markup BlankLine  === ","list_item parts first ","list_item empty? "," p "," raise ","@current_token inspect ","list_item << "," build_list "," unget ","RDoc Markup BlankLine  new "," build_heading "," build_paragraph ","list_item push "," parse ","data < ","type != ","type == ! ","type == ","column < "," get ","@tokens empty? ","RDoc Markup ListItem  new ","RDoc Markup ListItem  new  parts shift ","RDoc Markup ListItem  new  parts ","RDoc Markup ListItem  new  length > ","RDoc Markup ListItem  new  length ","RDoc Markup ListItem  new  parts first ","RDoc Markup ListItem  new  empty? ","RDoc Markup ListItem  new  << ","RDoc Markup ListItem  new  push "]}," Parser build_list":{"type":"method","name":"build_list","children":[],"call":["list empty? "," p "," unget ","list << "," build_list_item ","margin + "," get ","peek_column >= ","peek_type == "," peek_token ","NEWLINE == "," peek_token first ","list type= ","list type != ","list type ","column < ","@tokens empty? ","RDoc Markup List  new "," parse ","RDoc Markup ListItem  new ","empty == ","item << ","RDoc Markup BlankLine  new ","empty > ","column == ","peek_type nil? ","(sym :LABEL) include? ","label << ","RDoc Markup List  new  empty? ","RDoc Markup List  new  << "," build_ build_list_item  "," build_RDoc Markup ListItem  new  "," build_RDoc Markup List  new _item "," build_list_RDoc Markup ListItem  new  ","RDoc Markup List  new  type= ","RDoc Markup List  new  type != ","RDoc Markup List  new  type ","RDoc Markup ListItem  new  << "]}," Parser build_heading":{"type":"method","name":"build_heading","children":[],"call":[" skip ","RDoc Markup Heading  new "," text "," get "," unget "]}," Paragraph text":{"type":"method","name":"text","children":[],"call":["@parts join ","(send\n  (ivar :@parts) :map) join ","RDoc Markup HardBreak  === ","@parts map "]}," Paragraph push":{"type":"method","name":"push","children":[],"call":[" parts push "," parts "]}," Paragraph pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp ","q seplist ","q group ","1 downcase "," class name =~ "," class name "," class "]}," Paragraph merge":{"type":"method","name":"merge","children":[],"call":["@parts push ","other parts "]}," Paragraph accept":{"type":"method","name":"accept","children":[],"call":["visitor accept_paragraph "]}," Paragraph ==":{"type":"method","name":"==","children":[],"call":[" text == ","other text "," text "," class == ","other class "," class "]}," Paragraph <<":{"type":"method","name":"<<","children":[],"call":["@parts << "]}," Paragraph initialize":{"type":"method","name":"initialize","children":[],"call":["@parts push "]}," ListItem push":{"type":"method","name":"push","children":[],"call":["@parts push ","@parts concat "]}," ListItem pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp ","q seplist ","q breakable ","q text ","q group "]}," ListItem length":{"type":"method","name":"length","children":[],"call":["@parts length "]}," ListItem empty?":{"type":"method","name":"empty?","children":[],"call":["@parts empty? "]}," ListItem accept":{"type":"method","name":"accept","children":[],"call":["visitor accept_list_item_end ","part accept ","@parts each ","visitor accept_list_item_start "]}," ListItem ==":{"type":"method","name":"==","children":[],"call":["@parts == ","other parts ","@label == ","other label "," class == ","other class "," class "]}," ListItem <<":{"type":"method","name":"<<","children":[],"call":["@parts << "]}," ListItem initialize":{"type":"method","name":"initialize","children":[],"call":["@parts push ","@parts concat "]}," List push":{"type":"method","name":"push","children":[],"call":["@items push ","@items concat "]}," List pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp ","q seplist ","q group "]}," List last":{"type":"method","name":"last","children":[],"call":["@items last "]}," List empty?":{"type":"method","name":"empty?","children":[],"call":["@items empty? "]}," List accept":{"type":"method","name":"accept","children":[],"call":["visitor accept_list_end ","item accept ","@items each ","visitor accept_list_start "]}," List ==":{"type":"method","name":"==","children":[],"call":["@items == ","other items ","@type == ","other type "," class == ","other class "," class "]}," List <<":{"type":"method","name":"<<","children":[],"call":["@items << "]}," List initialize":{"type":"method","name":"initialize","children":[],"call":["@items push ","@items concat "]}," Heading pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp "," text ","q group "," level "]}," Heading accept":{"type":"method","name":"accept","children":[],"call":["visitor accept_heading "]}," FormatterTestCase add_visitor_tests":{"type":"method","name":"add_visitor_tests","children":[{"type":"method","name":"test_start_accepting","children":[],"asgn":[],"call":[" start_accepting ","@to start_accepting "]},{"type":"method","name":"test_end_accepting","children":[],"asgn":[],"call":[" end_accepting ","@to res << ","@to res ","@to start_accepting "]},{"type":"method","name":"test_accept_blank_line","children":[],"asgn":[],"call":[" accept_blank_line ","@to accept_blank_line "," BlankLine  new ","@to start_accepting "]},{"type":"method","name":"test_accept_heading","children":[],"asgn":[],"call":[" accept_heading ","@to accept_heading "," Heading  new ","@to start_accepting "]},{"type":"method","name":"test_accept_paragraph","children":[],"asgn":[],"call":[" accept_paragraph ","@to accept_paragraph "," Paragraph  new ","@to start_accepting "]},{"type":"method","name":"test_accept_verbatim","children":[],"asgn":[],"call":[" accept_verbatim ","@to accept_verbatim "," Verbatim  new ","@to start_accepting "]},{"type":"method","name":"test_accept_rule","children":[],"asgn":[],"call":[" accept_rule ","@to accept_rule "," Rule  new ","@to start_accepting "]},{"type":"method","name":"test_accept_list_item_start_bullet","children":[],"asgn":[],"call":[" accept_list_item_start_bullet ","@to accept_list_item_start ","@bullet_list items first ","@bullet_list items ","@to accept_list_start ","@to start_accepting "]},{"type":"method","name":"test_accept_list_item_start_label","children":[],"asgn":[],"call":[" accept_list_item_start_label ","@to accept_list_item_start ","@label_list items first ","@label_list items ","@to accept_list_start ","@to start_accepting "]},{"type":"method","name":"test_accept_list_item_start_lalpha","children":[],"asgn":[],"call":[" accept_list_item_start_lalpha ","@to accept_list_item_start ","@lalpha_list items first ","@lalpha_list items ","@to accept_list_start ","@to start_accepting "]},{"type":"method","name":"test_accept_list_item_start_note","children":[],"asgn":[],"call":[" accept_list_item_start_note ","@to accept_list_item_start ","@note_list items first ","@note_list items ","@to accept_list_start ","@to start_accepting "]},{"type":"method","name":"test_accept_list_item_start_number","children":[],"asgn":[],"call":[" accept_list_item_start_number ","@to accept_list_item_start ","@number_list items first ","@number_list items ","@to accept_list_start ","@to start_accepting "]},{"type":"method","name":"test_accept_list_item_start_ualpha","children":[],"asgn":[],"call":[" accept_list_item_start_ualpha ","@to accept_list_item_start ","@ualpha_list items first ","@ualpha_list items ","@to accept_list_start ","@to start_accepting "]},{"type":"method","name":"test_accept_list_item_end_bullet","children":[],"asgn":[],"call":[" accept_list_item_end_bullet ","@to accept_list_item_end ","@bullet_list items first ","@bullet_list items ","@to accept_list_item_start ","@bullet_list items first ","@bullet_list items ","@to accept_list_start ","@to start_accepting "]},{"type":"method","name":"test_accept_list_item_end_label","children":[],"asgn":[],"call":[" accept_list_item_end_label ","@to accept_list_item_end ","@label_list items first ","@label_list items ","@to accept_list_item_start ","@label_list items first ","@label_list items ","@to accept_list_start ","@to start_accepting "]},{"type":"method","name":"test_accept_list_item_end_lalpha","children":[],"asgn":[],"call":[" accept_list_item_end_lalpha ","@to accept_list_item_end ","@lalpha_list items first ","@lalpha_list items ","@to accept_list_item_start ","@lalpha_list items first ","@lalpha_list items ","@to accept_list_start ","@to start_accepting "]},{"type":"method","name":"test_accept_list_item_end_note","children":[],"asgn":[],"call":[" accept_list_item_end_note ","@to accept_list_item_end ","@note_list items first ","@note_list items ","@to accept_list_item_start ","@note_list items first ","@note_list items ","@to accept_list_start ","@to start_accepting "]},{"type":"method","name":"test_accept_list_item_end_number","children":[],"asgn":[],"call":[" accept_list_item_end_number ","@to accept_list_item_end ","@number_list items first ","@number_list items ","@to accept_list_item_start ","@number_list items first ","@number_list items ","@to accept_list_start ","@to start_accepting "]},{"type":"method","name":"test_accept_list_item_end_ualpha","children":[],"asgn":[],"call":[" accept_list_item_end_ualpha ","@to accept_list_item_end ","@ualpha_list items first ","@ualpha_list items ","@to accept_list_item_start ","@ualpha_list items first ","@ualpha_list items ","@to accept_list_start ","@to start_accepting "]},{"type":"method","name":"test_accept_list_start_bullet","children":[],"asgn":[],"call":[" accept_list_start_bullet ","@to accept_list_start ","@to start_accepting "]},{"type":"method","name":"test_accept_list_start_label","children":[],"asgn":[],"call":[" accept_list_start_label ","@to accept_list_start ","@to start_accepting "]},{"type":"method","name":"test_accept_list_start_lalpha","children":[],"asgn":[],"call":[" accept_list_start_lalpha ","@to accept_list_start ","@to start_accepting "]},{"type":"method","name":"test_accept_list_start_note","children":[],"asgn":[],"call":[" accept_list_start_note ","@to accept_list_start ","@to start_accepting "]},{"type":"method","name":"test_accept_list_start_number","children":[],"asgn":[],"call":[" accept_list_start_number ","@to accept_list_start ","@to start_accepting "]},{"type":"method","name":"test_accept_list_start_ualpha","children":[],"asgn":[],"call":[" accept_list_start_ualpha ","@to accept_list_start ","@to start_accepting "]},{"type":"method","name":"test_accept_list_end_bullet","children":[],"asgn":[],"call":[" accept_list_end_bullet ","@to accept_list_end ","@to accept_list_start ","@to start_accepting "]},{"type":"method","name":"test_accept_list_end_label","children":[],"asgn":[],"call":[" accept_list_end_label ","@to accept_list_end ","@to accept_list_start ","@to start_accepting "]},{"type":"method","name":"test_accept_list_end_lalpha","children":[],"asgn":[],"call":[" accept_list_end_lalpha ","@to accept_list_end ","@to accept_list_start ","@to start_accepting "]},{"type":"method","name":"test_accept_list_end_number","children":[],"asgn":[],"call":[" accept_list_end_number ","@to accept_list_end ","@to accept_list_start ","@to start_accepting "]},{"type":"method","name":"test_accept_list_end_note","children":[],"asgn":[],"call":[" accept_list_end_note ","@to accept_list_end ","@to accept_list_start ","@to start_accepting "]},{"type":"method","name":"test_accept_list_end_ualpha","children":[],"asgn":[],"call":[" accept_list_end_ualpha ","@to accept_list_end ","@to accept_list_start ","@to start_accepting "]}],"call":[]}," FormatterTestCase setup":{"type":"method","name":"setup","children":[],"call":[" List  new "," ListItem  new "," Paragraph  new ","RDoc Markup AttributeManager  new ","RDoc Markup  new ","@RM new ","RDoc Options  new "]}," Formatter tt?":{"type":"method","name":"tt?","children":[],"call":["tag bit == ","tag bit "]}," Formatter off_tags":{"type":"method","name":"off_tags","children":[],"call":["res << "," annotate ","tag off "," tt? ","attr_mask & != ","attr_mask & ","tag bit ","@attr_tags reverse_each ","attr_mask zero? ","item turn_off ","item turn_off  & != ","item turn_off  & ","item turn_off  zero? "]}," Formatter on_tags":{"type":"method","name":"on_tags","children":[],"call":[" tt? ","res << "," annotate ","tag on ","attr_mask & != ","attr_mask & ","tag bit ","@attr_tags each ","attr_mask zero? ","item turn_on ","item turn_on  & != ","item turn_on  & ","item turn_on  zero? "]}," Formatter in_tt?":{"type":"method","name":"in_tt?","children":[],"call":["@in_tt > "]}," Formatter convert_string":{"type":"method","name":"convert_string","children":[],"call":[]}," Formatter convert_special":{"type":"method","name":"convert_special","children":[],"call":["special text "," raise ","special text= "," send "," respond_to? ","RDoc Markup Attribute  each_name_of ","special type "," in_tt? ","@attributes as_string ","@attributes each_name_of "]}," Formatter convert_flow":{"type":"method","name":"convert_flow","children":[],"call":["res join "," raise ","item inspect ","res << "," convert_special "," on_tags "," off_tags "," convert_string ","flow each "," convert_regexp_handling "]}," Formatter annotate":{"type":"method","name":"annotate","children":[],"call":[]}," Formatter add_tag":{"type":"method","name":"add_tag","children":[],"call":["@attr_tags << ","InlineTag  new ","RDoc Markup Attribute  bitmap_for ","@attributes bitmap_for ","@RDoc Markup Attribute  bitmap_for _tags << ","@@attributes bitmap_for _tags << ","@RDoc Markup Attribute  bitmap_for ibutes bitmap_for ","@@attributes bitmap_for ibutes bitmap_for "]}," Document push":{"type":"method","name":"push","children":[],"call":[" parts push "," parts "," parts concat "]}," Document pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp ","q seplist ","q group "]}," Document empty?":{"type":"method","name":"empty?","children":[],"call":["@parts empty? ","@parts first empty? ","@parts first "," merged? ","@parts length == ","@parts length ","RDoc Markup Document  === "]}," Document accept":{"type":"method","name":"accept","children":[],"call":["visitor end_accepting ","item accept ","@parts each ","visitor start_accepting ","visitor accept_document "]}," Document ==":{"type":"method","name":"==","children":[],"call":["@parts == ","other parts "," class == ","other class "," class ","@file == ","other file "]}," Document <<":{"type":"method","name":"<<","children":[],"call":[" parts << "," parts "," raise ","part empty? ","RDoc Markup BlankLine  new "," parts push ","part parts "," parts concat "]}," Document initialize":{"type":"method","name":"initialize","children":[],"call":["@parts push ","@parts concat "]}," BlankLine pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q text "]}," BlankLine accept":{"type":"method","name":"accept","children":[],"call":["visitor accept_blank_line "]}," BlankLine ==":{"type":"method","name":"==","children":[],"call":[" class == ","other class "," class "]}," Include full_name":{"type":"method","name":"full_name","children":[],"call":["m full_name ","RDoc ClassModule  === "," module "," module  full_na module e ","  module odule "]}," Include ==":{"type":"method","name":"==","children":[],"call":[" name == ","other name "," name "," class == ","other class "," class ","@include_path == ","other include_path ","@file == ","other file "," class === ","@name == "]}," Include <=>":{"type":"method","name":"<=>","children":[],"call":[" name <=> ","other name "," name "," class === "," class "]}," RI remove_siginfo_handler":{"type":"method","name":"remove_siginfo_handler","children":[],"call":[" trap ","Signal  list key? ","Signal  list "]}," RI install_siginfo_handler":{"type":"method","name":"install_siginfo_handler","children":[],"call":[" puts "," trap ","Signal  list key? ","Signal  list "]}," Gauntlet run":{"type":"method","name":"run","children":[],"call":[" puts "," data []= "," data ","e message ","e class ","r document ","RDoc RDoc  new "," dirty= ","args join ","args delete ","a to_s ","args flatten map ","args flatten ","args << ","spec extra_rdoc_files ","spec require_paths ","args push ","spec rdoc_options ","Gem Specification  from_yaml ","File  read ","FileUtils  rm_rf ","File  exist? ","File  expand_path "," data [] "," data key? ","args << << ","@args dup ","args concat ","RDoc RDoc  new  document "," diRDoc RDoc  new ty= "," File  expand_path ty= ","aRDoc RDoc  new gs join ","@args dup  join ","aRDoc RDoc  new gs delete ","@args dup  delete ","aRDoc RDoc  new gs flatten map ","@args dup  flatten map ","aRDoc RDoc  new gs flatten ","@args dup  flatten ","aRDoc RDoc  new gs << ","@args dup  << ","spec extRDoc RDoc  new a_RDoc RDoc  new doc_files ","Gem Specification  from_yaml  extra_rdoc_files ","spec RDoc RDoc  new equiRDoc RDoc  new e_paths ","Gem Specification  from_yaml  require_paths ","aRDoc RDoc  new gs push ","@args dup  push ","spec RDoc RDoc  new doc_options ","Gem Specification  from_yaml  rdoc_options ","Gem Specification  fRDoc RDoc  new om_yaml ","Gem Specification  from_File  read  ","File  RDoc RDoc  new ead ","FileUtils  RDoc RDoc  new m_RDoc RDoc  new f ","aRDoc RDoc  new gs << << ","@args dup  << << ","@aRDoc RDoc  new gs dup ","@@args dup  dup ","aRDoc RDoc  new gs concat ","@args dup  concat "]}," Context full_name":{"type":"method","name":"full_name","children":[],"call":[]}," Context child_name":{"type":"method","name":"child_name","children":[],"call":[" full_name ","RDoc TopLevel  === ","name =~ "]}," Context add_module_alias":{"type":"method","name":"add_module_alias","children":[],"call":["(send\n  (lvar :from) :module?) []= ","from module? ","RDoc TopLevel  classes_hash ","RDoc TopLevel  modules_hash "," child_name "," add_constant ","const is_alias_for= ","RDoc Constant  new ","@classes []= ","RDoc TopLevel  classes_hash []= ","@modules []= ","RDoc TopLevel  modules_hash []= ","RDoc TopLevel  find_class_or_module ","const record_location ","to comment ","@store classes_hash []= ","@store classes_hash ","@store modules_hash []= ","@store modules_hash ","to module? ","to full_name= ","to name= ","from dup ","@store find_class_or_module ","new_to comment ","to name ","new_to module? ","new_to full_name= ","new_to name= ","@store unmatched_constant_alias []= ","@store unmatched_constant_alias "," add_RDoc Constant  new ant ","RDoc Constant  new  is_alias_for= ","RDoc Constant  new  record_location ","from dup  comment ","@sfrom dup re classes_hash []= ","@sfrom dup re classes_hash ","@sfrom dup re modules_hash []= ","@sfrom dup re modules_hash ","from dup  module? ","from dup  full_name= ","from dup  name= ","@sfrom dup re find_class_or_module ","new_from dup  comment ","from dup  name ","new_from dup  module? ","new_from dup  full_name= ","new_from dup  name= ","@store unmatched_RDoc Constant  new ant_alias []= ","@sfrom dup re unmatched_constant_alias []= ","@store unmatched_RDoc Constant  new ant_alias ","@sfrom dup re unmatched_constant_alias "]}," Constant inspect":{"type":"method","name":"inspect","children":[],"call":["#<%s:0x%x %s::%s> % "," parent_name "," object_id "," class "]}," Constant ==":{"type":"method","name":"==","children":[],"call":["@name == ","other name ","@parent == ","other parent "," class == ","other class "," class "]}," Constant <=>":{"type":"method","name":"<=>","children":[],"call":["(send nil :parent_name) <=> ","other name ","other parent_name "," name "," parent_name "," class === "," class "]}," CodeObject documented?":{"type":"method","name":"documented?","children":[],"call":["(and\n  (ivar :@document_self)\n  (send\n    (ivar :@comment) :empty?)) ! ","@comment empty? ","@comment empty? ! "]}," ClassModule merge":{"type":"method","name":"merge","children":[],"call":[" add_method ","class_module each_method "," add_include ","class_module each_include "," add_constant ","class_module each_constant "," add_attribute ","match rw= ","(send\n  (lvar :match) :rw) compact join ","(send\n  (lvar :match) :rw) compact ","attr rw ","match rw ","a name == ","attr name ","a name "," attributes find "," attributes ","class_module each_attribute ","class_module comment ","class_module comment parts push ","document parts ","class_module comment parts "," parse ","comment parts concat ","comment parts ","@methods_hash delete ","meth pretty_name ","@method_list delete "," merge_collections ","cm method_list "," method_list ","@includes uniq! ","@includes delete ","cm includes "," includes ","@constants_hash delete ","const name ","@constants delete ","cm constants "," constants ","attr pretty_name ","@attributes delete ","cm attributes ","cm in_files ","document merge ","class_module comment_location ","(send\n  (lvar :match) :rw) compact uniq join ","(send\n  (lvar :match) :rw) compact uniq ","class_module method_list ","class_module includes ","class_module constants ","class_module attributes "," merge_sections ","@extends uniq! ","@extends delete "," add_extend ","cm extends "," extends ","class_module parent_name ","class_module parent ","class_module class_module comment  ","class_module class_module comment  parts push "," parse  parts ","document merge  parts ","class_module class_module comment  parts ","class_module comment  parts concat ","class_module comment  parts "," parse  merge ","document merge  merge ","class_module class_module comment _location "]}," ClassModule marshal_load":{"type":"method","name":"marshal_load","children":[],"call":[" add_method ","method singleton= ","type == ","RDoc AnyMethod  new ","methods each ","visibilities each ","array [] each ","array [] "," add_include ","RDoc Include  new "," add_constant ","RDoc Constant  new "," add_attribute ","RDoc Attr  new "," initialize_methods_etc ","method record_location ","RDoc TopLevel  new ","incl record_location ","const record_location ","attr record_location ","attr visibility= ","RDoc Markup Document  new ","RDoc Markup Document  === ","@comment parts first ","@comment parts "," record_location ","(or\n  (send\n    (lvar :array) :[]\n    (int 11))\n  (array)) each "," add_section ","Hash  [] ","sections flatten ","section title ","(or\n  (send\n    (lvar :array) :[]\n    (int 10))\n  (array)) map ","ext record_location "," add_extend ","RDoc Extend  new ","constant record_location "," initialize_visibility "," add_RDoc AnyMethod  new  ","RDoc AnyMethod  new  singleton= ","RDoc AnyMethod  new s each "," add_ add_include ude "," add_ add_constant ant "," add_ add_constant  "," add_RDoc Attr  new ibute "," initialize_RDoc AnyMethod  new s_etc ","RDoc AnyMethod  new  record_location "," add_include  record_location "," add_constant  record_location ","RDoc Attr  new  record_location ","RDoc Attr  new  visibility= ","array []  parts first ","array []  parts "," add_extend  record_location "," add_ add_extend end "," add_constant ant record_location "]}," ClassModule marshal_dump":{"type":"method","name":"marshal_dump","children":[],"call":[" parse ","incl comment ","incl name "," includes map "," includes ","const comment ","const name "," constants map "," constants "," full_name ","method_names uniq ","method name ","methods map ","visibilities map "," methods_by_type map "," methods_by_type ","attr rw ","attr name "," attributes sort map "," attributes sort "," attributes ","incl file_name ","const file_name ","method file_name ","attr file_name ","attr singleton ","attr visibility "," parent class "," parent "," parent full_name ","tl relative_name ","@in_files map ","@sections values ","ext file_name ","ext comment ","ext name "," extends map "," extends ","(send\n  (send nil :extends) :map) compact ","ext display? ","(send\n  (send nil :includes) :map) compact ","incl display? ","constant display? "," constants select ","(send\n  (lvar :methods) :map) compact ","method display? ","(send\n  (send\n    (send nil :attributes) :sort) :map) compact ","attr display? ","(send\n  (lvar :methods) :map) compact  uniq "]}," ClassModule comment=":{"type":"method","name":"comment=","children":[],"call":[" normalize_comment ","@comment empty? ","comment empty? ","comment normalize ","comment to_s ","@comment to_s "," normalize_ normalize_comment  ","@ normalize_comment  empty? "," normalize_comment  empty? "," normalize_comment  normalize "," normalize_comment  to_s ","@ normalize_comment  to_s "]}," ClassModule ancestors":{"type":"method","name":"ancestors","children":[],"call":[" raise ","(send\n  (send nil :includes) :map) reverse ","i module "," includes map "," includes "]}," Attr type":{"type":"method","name":"type","children":[],"call":[]}," Attr singleton":{"type":"method","name":"singleton","children":[],"call":[]}," Attr parent_name":{"type":"method","name":"parent_name","children":[],"call":[]}," Attr marshal_load":{"type":"method","name":"marshal_load","children":[],"call":["array [] ","RDoc TopLevel  new ","version > ","@full_name split first ","@full_name split "," initialize_visibility ","array []  > ","array []  split first ","array []  split "]}," Attr marshal_dump":{"type":"method","name":"marshal_dump","children":[],"call":[" parse "," full_name "," singleton ","@file absolute_name ","@section title ","@parent class ","@parent full_name ","@file relative_name "]}," Attr full_name":{"type":"method","name":"full_name","children":[],"call":[" name ","@parent full_name "]}," Attr call_seq":{"type":"method","name":"call_seq","children":[],"call":[]}," Attr block_params":{"type":"method","name":"block_params","children":[],"call":[]}," Attr ==":{"type":"method","name":"==","children":[],"call":[" rw == ","other rw "," rw "," name == ","other name "," name "," class == ","other class "," class "," singleton == ","other singleton "," singleton "]}," AnyMethod pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp ","q breakable ","q text "," comment empty? "," comment "," text ","q group "," visibility "," full_name "," class name "," class ","@is_alias_for name "]}," AnyMethod parent_name":{"type":"method","name":"parent_name","children":[],"call":[]}," AnyMethod marshal_load":{"type":"method","name":"marshal_load","children":[],"call":[" add_alias ","RDoc Alias  new ","array [] each ","array [] ","name join ","name pop ","@full_name split ","@full_name =~ ","RDoc TopLevel  new ","version > "," initialize_visibility ","@full_name split  join ","@full_name split  pop ","@full_@full_name split  split ","array []  split ","@full_@full_name split  =~ ","array []  =~ ","array []  > "]}," AnyMethod marshal_dump":{"type":"method","name":"marshal_dump","children":[],"call":[" parse "," full_name ","a comment ","a full_name ","@aliases map ","@file absolute_name ","a name ","@section title ","@parent class ","@parent name ","@file relative_name ","@is_alias_for name ","@is_alias_for singleton ","@is_alias_for parent full_name ","@is_alias_for parent "]}," C look_for_directives_in":{"type":"method","name":"look_for_directives_in","children":[],"call":[" warn ","@options title= ","@options main_page= ","preprocess handle ","RDoc Markup PreProcess  new ","@options rdoc_include ","context metadata []= ","context metadata ","@options default_title= ","@options respond_to? ","@preprocess handle ","RDoc Markup PreProcess  new  handle ","@RDoc Markup PreProcess  new  handle "]}," Attr params":{"type":"method","name":"params","children":[],"call":[]}," Attr arglists":{"type":"method","name":"arglists","children":[],"call":[]}," AnyMethod arglists":{"type":"method","name":"arglists","children":[],"call":[" param_seq "," name "]}," Driver in_path?":{"type":"method","name":"in_path?","children":[],"call":["File  exist? ","File  join ","ENV  [] split any? ","ENV  [] split ","ENV  [] ","file =~ "]}," Parser set_encoding":{"type":"method","name":"set_encoding","children":[],"call":[]}," Simple remove_coding_comment":{"type":"method","name":"remove_coding_comment","children":[],"call":["text sub "]}," C handle_singleton":{"type":"method","name":"handle_singleton","children":[],"call":["@singleton_classes []= ","@known_classes [] ","@known_classes []= "]}," ToRdoc accept_raw":{"type":"method","name":"accept_raw","children":[],"call":["@res << ","raw parts join ","raw parts "]}," ToHtml accept_raw":{"type":"method","name":"accept_raw","children":[],"call":["@res << ","raw parts join ","raw parts "]}," Raw text":{"type":"method","name":"text","children":[],"call":["@parts join "]}," Raw push":{"type":"method","name":"push","children":[],"call":[" parts push "," parts "," parts concat "]}," Raw pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp ","q seplist ","q group ","1 downcase "," class name =~ "," class name "," class "]}," Raw merge":{"type":"method","name":"merge","children":[],"call":["@parts push ","other parts ","@parts concat "]}," Raw accept":{"type":"method","name":"accept","children":[],"call":["visitor accept_raw "]}," Raw ==":{"type":"method","name":"==","children":[],"call":[" text == ","other text "," text "," class == ","other class "," class ","@parts == ","other parts "]}," Raw <<":{"type":"method","name":"<<","children":[],"call":["@parts << "]}," Raw initialize":{"type":"method","name":"initialize","children":[],"call":["@parts push ","@parts concat "]}," PreProcess registered":{"type":"method","name":"registered","children":[],"call":[]}," PreProcess register":{"type":"method","name":"register","children":[],"call":[]}," Context find_class_method_named":{"type":"method","name":"find_class_method_named","children":[],"call":["meth name == ","meth name ","meth singleton ","@method_list find "]}," Attr aref":{"type":"method","name":"aref","children":[],"call":["CGI  escape "," name "," singleton "]}," AnyMethod aref":{"type":"method","name":"aref","children":[],"call":["CGI  escape "," name "," singleton "]}," C find_alias_comment":{"type":"method","name":"find_alias_comment","children":[],"call":[" content =~ "," content ","Regexp  escape ","RDoc Comment  new "," new_comment "]}," TopLevel to_s":{"type":"method","name":"to_s","children":[],"call":[" full_name "]}," TopLevel object_class":{"type":"method","name":"object_class","children":[],"call":["oc record_location "," add_class "," class find_class_named "," class ","@store find_class_named "]}," TopLevel add_to_classes_or_modules":{"type":"method","name":"add_to_classes_or_modules","children":[],"call":["@classes_or_modules << "]}," TopLevel add_include":{"type":"method","name":"add_include","children":[],"call":[" object_class add_include "," object_class "," object_class record_location "]}," TopLevel add_constant":{"type":"method","name":"add_constant","children":[],"call":[" object_class add_constant "," object_class "," object_class record_location "]}," TopLevel add_alias":{"type":"method","name":"add_alias","children":[],"call":[" object_class add_alias "," object_class "," object_class record_location "]}," TopLevel unique_modules":{"type":"method","name":"unique_modules","children":[],"call":[]}," TopLevel unique_classes_and_modules":{"type":"method","name":"unique_classes_and_modules","children":[],"call":[]}," TopLevel unique_classes":{"type":"method","name":"unique_classes","children":[],"call":[]}," TopLevel remove_nodoc":{"type":"method","name":"remove_nodoc","children":[],"call":[]}," TopLevel fix_basic_object_inheritance":{"type":"method","name":"fix_basic_object_inheritance","children":[],"call":[]}," TopLevel find_unique":{"type":"method","name":"find_unique","children":[],"call":[]}," TopLevel complete":{"type":"method","name":"complete","children":[],"call":[]}," TopLevel all_modules_hash":{"type":"method","name":"all_modules_hash","children":[],"call":[]}," TopLevel all_modules":{"type":"method","name":"all_modules","children":[],"call":[]}," TopLevel all_files_hash":{"type":"method","name":"all_files_hash","children":[],"call":[]}," TopLevel all_files":{"type":"method","name":"all_files","children":[],"call":[]}," TopLevel all_classes_hash":{"type":"method","name":"all_classes_hash","children":[],"call":[]}," TopLevel all_classes":{"type":"method","name":"all_classes","children":[],"call":[]}," Text to_html":{"type":"method","name":"to_html","children":[],"call":["html << ","s rest ","match =~ ","s scan ","encoded [] ","indquotes ! ","html << << ","s [] ","s matched "," warn ","s matched gsub ","s eos? ","StringScanner  new ","RDoc Text TO_HTML_CHARACTERS  [] ","text encoding "," encode ","Object  const_defined? ","(send\n  (str \"\") :encode\n  (send\n    (lvar :text) :encoding)) dup "," encode  << ","(send\n  (str \"\") :encode\n  (send\n    (lvar :text) :encoding)) dup  << ","StringScanner  new  reStringScanner  new t ","s scan  =~ ","StringScanner  new  StringScanner  new can ","RDoc Text TO_HTML_CHARACTERS  []  [] ","indquotes !  ! ","indquoteStringScanner  new  ! "," encode  << << ","(send\n  (str \"\") :encode\n  (send\n    (lvar :text) :encoding)) dup  << << ","StringScanner  new  [] ","s s scan ed ","StringScanner  new  matched ","s s scan ed gsub ","StringScanner  new  matched gStringScanner  new ub ","StringScanner  new  eoStringScanner  new ? ","Object  conStringScanner  new t_defined? ","(StringScanner  new end\n  (StringScanner  new tr \"\") :encode\n  (StringScanner  new end\n    (lvar :text) :encoding)) dup "]}," Text encode_fallback":{"type":"method","name":"encode_fallback","children":[],"call":[]}," Stats summary":{"type":"method","name":"summary","children":[],"call":["report join ","report << ","Elapsed: %0.1fs % ","Time  now - ","Time  now ","%6.2f%% documented % ","Total:      %5d (%5d undocumented) % ","Methods:    %5d (%5d undocumented) % ","Attributes: %5d (%5d undocumented) % ","Constants:  %5d (%5d undocumented) % ","Modules:    %5d (%5d undocumented) % ","Classes:    %5d (%5d undocumented) % ","Files:      %5d % "," calculate ","Total:      %*d (%*d undocumented) % ","Methods:    %*d (%*d undocumented) % ","Attributes: %*d (%*d undocumented) % ","Constants:  %*d (%*d undocumented) % ","Modules:    %*d (%*d undocumented) % ","Classes:    %*d (%*d undocumented) % ","Files:      %*d % ","(ivar :@undoc_attributes) max to_s length ","(ivar :@undoc_attributes) max to_s ","(ivar :@undoc_attributes) max ","(ivar :@num_files) max to_s length ","(ivar :@num_files) max to_s ","(ivar :@num_files) max "," percent_doc ","Parameters: %*d (%*d undocumented) % ","@coverage_level > ","RDoc Markup Document  new ","Elapsed: %0.1fs\n % ","%6.2f%% documented\n % ","Total:      %*d (%*d undocumented)\n % ","Parameters: %*d (%*d undocumented)\n % ","Methods:    %*d (%*d undocumented)\n % ","Attributes: %*d (%*d undocumented)\n % ","Constants:  %*d (%*d undocumented)\n % ","Modules:    %*d (%*d undocumented)\n % ","Classes:    %*d (%*d undocumented)\n % ","Files:      %*d\n % ","RDoc Markup Verbatim  new ","RDoc Markup Verbatim  new  join ","RDoc Markup Verbatim  new  << "]}," Stats report":{"type":"method","name":"report","children":[],"call":["report join ","report << ","method params ","method name ","method file full_name ","method file ","method documented? ","cm each_method ","cm method_list empty? ","cm method_list ","attr file full_name ","attr file ","attr name ","attr definition ","attr documented? ","cm each_attribute ","cm attributes empty? ","cm attributes ","constant name ","constant file full_name ","constant file ","constant documented? ","cm each_constant ","cm constants empty? ","cm constants ","cm full_name ","file full_name ","cm in_files each ","cm in_files ","cm documented? ","cm in_files empty? ","cm fully_documented? ","ucm sort each ","ucm sort ","RDoc TopLevel  unique_classes_and_modules ","@num_items == "," calculate ","constant is_alias_for ","report unshift "," great_job ","@coverage_level > ","(send nil :report_constants\n  (lvar :cm)) compact "," report_methods "," report_attributes "," report_constants "," report_class_module ","@coverage_level zero? "," extend "," require ","@store unique_classes_and_modules ","RDoc Markup BlankLine  new ","RDoc Markup Paragraph  new ","RDoc Markup Document  new ","RDoc Markup Document  new  join ","RDoc Markup Document  new  << ","RDoc TopLevel  unique_classes_and_modules  sort each ","@store unique_classes_and_modules  sort each ","RDoc TopLevel  unique_classes_and_modules  sort ","@store unique_classes_and_modules  sort ","RDoc Markup Document  new  unshift ","(send nil :RDoc Markup Document  new _constants\n  (lvar :cm)) compact "," RDoc Markup Document  new _methods "," RDoc Markup Document  new _attributes "," RDoc Markup Document  new _constants "," RDoc Markup Document  new _class_module "]}," Stats fully_documented?":{"type":"method","name":"fully_documented?","children":[],"call":[]}," Stats doc_stats":{"type":"method","name":"doc_stats","children":[],"call":["item documented? ! ","item documented? ","collection count ","collection length ","visible count ","visible length ","item display? ","collection select "]}," Stats calculate":{"type":"method","name":"calculate","children":[],"call":["@doc_items to_f / * ","@doc_items to_f / ","@doc_items to_f ","@num_items nonzero? ","(send\n  (ivar :@num_items) :-\n  (ivar :@doc_items)) == ","@num_items - ","@undoc_attributes + + + + ","@undoc_attributes + + + ","@undoc_attributes + + ","@undoc_attributes + ","@num_attributes + + + + ","@num_attributes + + + ","@num_attributes + + ","@num_attributes + "," doc_stats ","RDoc TopLevel  unique_modules ","RDoc TopLevel  unique_classes ","attributes concat ","cm attributes ","ucm each ","methods concat ","cm method_list ","constants concat ","cm constants ","RDoc TopLevel  unique_classes_and_modules ","@undoc_attributes + + + + + ","@num_attributes + + + + + ","@store unique_modules ","cm full_name == ","cm full_name ","@store unique_classes reject ","@store unique_classes ","@store unique_classes_and_modules ","@num_items -  to_f / * ","@num_items -  to_f / ","@num_items -  to_f ","@num_attributes + + + +  nonzero? ","@num_attributes + + + + +  nonzero? ","(send\n  (ivar :@num_items) :-\n  (ivar :@num_items - )) == ","(send\n  (ivar :@num_attributes + + + + ) :-\n  (ivar :@doc_items)) == ","(send\n  (ivar :@num_attributes + + + + + ) :-\n  (ivar :@doc_items)) == ","@num_attributes + + + +  - ","@num_attributes + + + + +  - ","RDoc TopLevel  unique_classes_and_modules  each ","@store unique_classes_and_modules  each "]}," Stats add_attribute":{"type":"method","name":"add_attribute","children":[],"call":["@display print_attribute "]}," Verbose print_module":{"type":"method","name":"print_module","children":[],"call":[" puts "," nodoc ","mod full_name "]}," Verbose print_method":{"type":"method","name":"print_method","children":[],"call":[" puts "," nodoc ","method name ","method singleton "]}," Verbose print_file":{"type":"method","name":"print_file","children":[],"call":[" puts "]}," Verbose print_constant":{"type":"method","name":"print_constant","children":[],"call":[" puts "," nodoc ","constant name "]}," Verbose print_class":{"type":"method","name":"print_class","children":[],"call":[" puts "," nodoc ","klass full_name "]}," Verbose print_attribute":{"type":"method","name":"print_attribute","children":[],"call":[" puts "," nodoc ","attribute name ","attribute definition "]}," Verbose print_alias":{"type":"method","name":"print_alias","children":[],"call":[" puts "," nodoc ","as old_name ","as new_name "]}," Verbose nodoc":{"type":"method","name":"nodoc","children":[],"call":["co documented? "]}," Quiet done_adding":{"type":"method","name":"done_adding","children":[],"call":[]}," Quiet print_module":{"type":"method","name":"print_module","children":[],"call":[]}," Quiet print_method":{"type":"method","name":"print_method","children":[],"call":[]}," Quiet print_file":{"type":"method","name":"print_file","children":[],"call":[]}," Quiet print_constant":{"type":"method","name":"print_constant","children":[],"call":[]}," Quiet print_class":{"type":"method","name":"print_class","children":[],"call":[]}," Quiet print_attribute":{"type":"method","name":"print_attribute","children":[],"call":[]}," Quiet print_alias":{"type":"method","name":"print_alias","children":[],"call":[]}," Quiet begin_adding":{"type":"method","name":"begin_adding","children":[],"call":[]}," Quiet initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Normal done_adding":{"type":"method","name":"done_adding","children":[],"call":[" puts ","$stdout tty? "]}," Normal print_file":{"type":"method","name":"print_file","children":[],"call":["$stdout flush ","$stdout puts ","$stdout print ","line << ","  * ","padding > ","terminal_width - ","line size ","filename []= ","filename [] ","filename size - ","filename size ","filename size > ","progress_bar size ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"COLUMNS\"))\n  (int 80)) to_i ","ENV  [] ","$stdout tty? "," sprintf ","100 * / ","100 * ","\r << << << ","\r << << ","\b * ","\r << ","@last_width > ","IO  console_size [] to_i nonzero? ","IO  console_size [] to_i ","IO  console_size [] ","IO  console_size ","IO  respond_to? ","\r + + + ","\r + + ","\r + ","size [] to_i nonzero? ","size [] to_i ","size [] ","IO  console winsize ","IO  console ","IO  console winsize [] to_i nonzero? ","IO  console winsize [] to_i ","IO  console winsize [] ","progress_bar size + ","(send\n  (lvar :terminal_width) :-\n  (send\n    (lvar :progress_bar) :size)) - ","terminal_width -  > ","(or\n  (send\n    (const nil :ENV) :[]\n    (str \"COLUMNS\"))\n  (int 80)) to_i  - ","line IO  console winsize  ","line IO  console_size  ","filename []  []= ","filename []  [] ","filename []  size - ","filename IO  console winsize  - ","filename IO  console_size  - ","filename []  size ","filename IO  console winsize  ","filename IO  console_size  ","filename []  size > ","filename IO  console winsize  > ","filename IO  console_size  > "," sprintf  size ","progress_bar IO  console winsize  ","progress_bar IO  console_size  ","line size  > ","progress_bar size +  > ","IO  console_IO  console winsize  [] to_i nonzero? ","IO  console_IO  console_size  [] to_i nonzero? ","IO  console_IO  console winsize  [] to_i ","IO  console_IO  console_size  [] to_i ","IO  console_IO  console winsize  [] ","IO  console_IO  console_size  [] ","IO  console_IO  console winsize  ","IO  console_IO  console_size  ","IO  console winsize  [] to_i nonzero? ","IO  console_size  [] to_i nonzero? ","IO  console winsize  [] to_i ","IO  console_size  [] to_i ","IO  console winsize  [] ","IO  console_size  [] ","IO  console winIO  console winsize  ","IO  console winIO  console_size  ","IO  console winIO  console winsize  [] to_i nonzero? ","IO  console winIO  console_size  [] to_i nonzero? ","IO  console winIO  console winsize  [] to_i ","IO  console winIO  console_size  [] to_i ","IO  console winIO  console winsize  [] ","IO  console winIO  console_size  [] "," sprintf  size + ","progress_bar IO  console winsize  + ","progress_bar IO  console_size  + ","(send\n  (lvar :(or\n  (send\n    (const nil :ENV) :[]\n    (str \"COLUMNS\"))\n  (int 80)) to_i ) :-\n  (send\n    (lvar :progress_bar) :size)) - ","(send\n  (lvar :terminal_width) :-\n  (send\n    (lvar : sprintf ) :size)) - ","(send\n  (lvar :terminal_width) :-\n  (send\n    (lvar :progress_bar) :IO  console winsize )) - ","(send\n  (lvar :terminal_width) :-\n  (send\n    (lvar :progress_bar) :IO  console_size )) - "]}," Normal begin_adding":{"type":"method","name":"begin_adding","children":[],"call":[" puts ","$stdout tty? "]}," Require top_level":{"type":"method","name":"top_level","children":[],"call":["RDoc TopLevel  all_files_hash [] ","lib/ + + ","lib/ + "," name ","RDoc TopLevel  all_files_hash ","RDoc TopLevel  all_files first full_name =~ ","RDoc TopLevel  all_files first full_name ","RDoc TopLevel  all_files first ","RDoc TopLevel  all_files ","tl nil? "," name + ","RDoc TopLevel  all_files_hash []  nil? "]}," Require to_s":{"type":"method","name":"to_s","children":[],"call":[" parent "," name "]}," Parser process_directive":{"type":"method","name":"process_directive","children":[],"call":[]}," C do_attrs":{"type":"method","name":"do_attrs","children":[],"call":[" handle_attr ","@content scan "]}," Options template_dir_for":{"type":"method","name":"template_dir_for","children":[],"call":["File  directory? ","(send\n  (gvar :$LOAD_PATH) :map) find ","File  join ","File  expand_path ","$LOAD_PATH map "]}," Options default_title=":{"type":"method","name":"default_title=","children":[],"call":[]}," Options check_generator":{"type":"method","name":"check_generator","children":[],"call":[" raise "]}," NormalClass to_s":{"type":"method","name":"to_s","children":[],"call":["display << << "," is_alias_for to_s "," is_alias_for ","display << "," superclass full_name "," superclass "," superclass is_a? "," full_name "," class name "," class "," ->  + "," <  + "]}," MethodAttr to_s":{"type":"method","name":"to_s","children":[],"call":[" full_name "," class name "," class "," is_alias_for "]}," MethodAttr inspect":{"type":"method","name":"inspect","children":[],"call":["#<%s:0x%x %s (%s)%s> % "," visibility "," full_name "," object_id "," class ","@is_alias_for name "," force_documentation ","  visibility  "]}," MethodAttr pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp ","q breakable ","q text "," comment empty? "," comment "," text ","q group "," visibility "," full_name "," class name "," class ","@is_alias_for name ","@is_alias_for last ","Array  === ","@is_alias_for respond_to? "]}," MethodAttr parent_name":{"type":"method","name":"parent_name","children":[],"call":[]}," MethodAttr path":{"type":"method","name":"path","children":[],"call":[" aref ","@parent path "]}," MethodAttr type":{"type":"method","name":"type","children":[],"call":[" singleton "]}," MethodAttr pretty_name":{"type":"method","name":"pretty_name","children":[],"call":[" name_prefix "]}," MethodAttr name_prefix":{"type":"method","name":"name_prefix","children":[],"call":[" singleton "]}," MethodAttr full_name":{"type":"method","name":"full_name","children":[],"call":[" pretty_name "," parent_name "]}," MethodAttr html_name":{"type":"method","name":"html_name","children":[],"call":["CGI  escape gsub sub ","CGI  escape gsub ","CGI  escape ","@name gsub "," require "]}," MethodAttr block_params=":{"type":"method","name":"block_params=","children":[],"call":["value strip ","value =~ ","value gsub! ","1 split last gsub gsub downcase ","1 split last gsub gsub ","1 split last gsub ","1 split last ","1 split ","value empty? ","1 strip ","1 strip  strip ","value strip  strip ","1 strip  =~ ","value strip  =~ ","1 strip  gsub! ","value strip  gsub! ","1 strip  empty? ","value strip  empty? "]}," MethodAttr aref_prefix":{"type":"method","name":"aref_prefix","children":[],"call":[" raise "]}," MethodAttr aref":{"type":"method","name":"aref","children":[],"call":[" html_name "," aref_prefix "," singleton "]}," MethodAttr add_alias":{"type":"method","name":"add_alias","children":[],"call":[" raise "]}," MethodAttr find_method_or_attribute":{"type":"method","name":"find_method_or_attribute","children":[],"call":["ancestor find_attribute_named ","ancestor find_method_named ","# << ","String  === "," parent == "," parent ","searched each ","searched << ","searched include? ! ","searched include? "," parent != ","RDoc TopLevel  all_modules_hash [] ","RDoc TopLevel  all_modules_hash "," parent ancestors "," parent respond_to? ","@store modules_hash [] ","@store modules_hash ","# + "," parent ancestors  each "," parent ancestors  << "," parent ancestors  include? ! "," parent ancestors  include? "]}," MethodAttr find_see":{"type":"method","name":"find_see","children":[],"call":[" find_method_or_attribute "," name [] "," name "," name =~ "," is_alias_for "," singleton "]}," MethodAttr see":{"type":"method","name":"see","children":[],"call":[" find_see ","@see == "," find_see  == "]}," MethodAttr documented?":{"type":"method","name":"documented?","children":[],"call":[" see documented? "," see "," is_alias_for documented? "," is_alias_for "]}," MethodAttr <=>":{"type":"method","name":"<=>","children":[],"call":["(if\n  (ivar :@singleton)\n  (int 0)\n  (int 1)) <=> ","other name ","other singleton "," name ","other respond_to? "]}," MethodAttr initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ToTest accept_raw":{"type":"method","name":"accept_raw","children":[],"call":["@res << ","raw parts join ","raw parts "]}," ToHtml to_html":{"type":"method","name":"to_html","children":[],"call":[" convert_flow ","@am flow "]}," TextFormatterTestCase add_text_tests":{"type":"method","name":"add_text_tests","children":[{"type":"method","name":"test_accept_heading_indent","children":[],"asgn":[],"call":[" accept_heading_indent ","@to accept_heading "," Heading  new ","@to indent= ","@to start_accepting "]},{"type":"method","name":"test_accept_rule_indent","children":[],"asgn":[],"call":[" accept_rule_indent ","@to accept_rule "," Rule  new ","@to indent= ","@to start_accepting "]},{"type":"method","name":"test_accept_verbatim_indent","children":[],"asgn":[],"call":[" accept_verbatim_indent ","@to accept_verbatim "," Verbatim  new ","@to indent= ","@to start_accepting "]},{"type":"method","name":"test_accept_verbatim_big_indent","children":[],"asgn":[],"call":[" accept_verbatim_big_indent ","@to accept_verbatim "," Verbatim  new ","@to indent= ","@to start_accepting "]},{"type":"method","name":"test_accept_paragraph_indent","children":[],"asgn":[],"call":[" accept_paragraph_indent ","@to accept_paragraph "," Paragraph  new ","(send\n  (str \"words \") :*\n  (int 30)) strip ","words  * ","@to indent= ","@to start_accepting "]},{"type":"method","name":"test_accept_paragraph_wrap","children":[],"asgn":[],"call":[" accept_paragraph_wrap ","@to accept_paragraph "," Paragraph  new ","(send\n  (str \"words \") :*\n  (int 30)) strip ","words  * ","@to start_accepting "]},{"type":"method","name":"test_attributes","children":[],"asgn":[],"call":[" assert_equal ","@to attributes "]}],"call":[]}," BlankLine new":{"type":"method","name":"new","children":[],"call":[]}," Include to_s":{"type":"method","name":"to_s","children":[],"call":[" parent "]}," Darkfish template_for":{"type":"method","name":"template_for","children":[],"call":["@template_cache []= ","klass new ","file read ","@options dry_run ","@template_cache [] "," assemble_template ","File  basename sub ","File  basename ","template encode ","@options encoding ","Object  const_defined? ","RUBY_VERSION  >= ","@klass new _cache []= ","@@template_cache [] _cache []= ","@file read _cache []= ","@ assemble_template _cache []= ","@template encode _cache []= ","@klass new _cache [] ","@@template_cache [] _cache [] ","@file read _cache [] ","@ assemble_template _cache [] ","@template encode _cache [] "," assemble_klass new  "," assemble_@template_cache []  "," assemble_file read  "," assemble_ assemble_template  "," assemble_template encode  ","klass new  encode ","@template_cache []  encode ","file read  encode "," assemble_template  encode ","template encode  encode "]}," Darkfish template_result":{"type":"method","name":"template_result","children":[],"call":[" raise ","e backtrace ","Error while evaluating %s: %s % ","e message ","template_file expand_path ","template result ","template filename= ","template_file to_s "]}," ERBIO set_eoutvar":{"type":"method","name":"set_eoutvar","children":[],"call":["compiler post_cmd= ","compiler pre_cmd= ","compiler insert_cmd= ","compiler put_cmd= "]}," ERBIO initialize":{"type":"method","name":"initialize","children":[],"call":["RUBY_VERSION  >= "]}," Encoding set_encoding":{"type":"method","name":"set_encoding","children":[],"call":[]}," Encoding read_file":{"type":"method","name":"read_file","children":[],"call":[]}," Context upgrade_to_class":{"type":"method","name":"upgrade_to_class","children":[],"call":["enclosing classes_hash []= ","mod name ","enclosing classes_hash ","RDoc TopLevel  classes_hash []= ","mod full_name ","RDoc TopLevel  classes_hash ","RDoc ClassModule  from_module ","enclosing modules_hash delete ","enclosing modules_hash ","@store classes_hash []= ","@store classes_hash ","klass store= ","RDoc ClassModule  from_module  store= "]}," Context to_s":{"type":"method","name":"to_s","children":[],"call":[" full_name "," class name "," class "]}," Context resolve_aliases":{"type":"method","name":"resolve_aliases","children":[],"call":["@unmatched_alias_lists delete ","@external_aliases delete ","added add_alias ","unmatched_alias_list each ","@unmatched_alias_lists [] ","added pretty_name ","@@unmatched_alias_lists [] s delete ","@unmatched_alias_lists []  each ","@@unmatched_alias_lists [] s [] "]}," Context remove_invisible_in":{"type":"method","name":"remove_invisible_in","children":[],"call":["e visibility == ","e visibility ","array reject! ","e visibility != ","min_visibility == ","e force_documentation ! ","e force_documentation "]}," Context remove_invisible":{"type":"method","name":"remove_invisible","children":[],"call":[" remove_invisible_in ","min_visibility == ","(sym :private) include? "]}," Context remove_from_documentation?":{"type":"method","name":"remove_from_documentation?","children":[],"call":["cm remove_from_documentation? "," classes_and_modules all? "," classes_and_modules ","i module remove_from_documentation? ","i module ","i module is_a? ! ","i module is_a? ","@includes all? "," any_content ! "," any_content "]}," Context name_for_path":{"type":"method","name":"name_for_path","children":[],"call":[" full_name "]}," Context instance_method_list":{"type":"method","name":"instance_method_list","children":[],"call":["a singleton "," method_list reject "," method_list "," warn "]}," Context instance_attributes":{"type":"method","name":"instance_attributes","children":[],"call":["a singleton "," attributes reject "," attributes "]}," Context fully_documented?":{"type":"method","name":"fully_documented?","children":[],"call":["c documented? "," constants all? "," constants ","m documented? "," method_list all? "," method_list ","a documented? "," attributes all? "," attributes "," documented? "]}," Context find_symbol_module":{"type":"method","name":"find_symbol_module","children":[],"call":["searched parent ","searched is_a? ","searched find_module_named "," loop ","RDoc TopLevel  find_class_or_module ","mod full_name + + ","mod full_name + ","mod full_name ","@store find_class_or_module ","searched parent  parent ","searched parent  is_a? ","searched parent  find_module_named ","searched find_searched find_module_named ule_named ","RDoc TopLevel  find_class_or_searched find_module_named ule ","searched find_module_named  full_name + + ","searched find_module_named  full_name + ","searched find_module_named  full_name ","@store find_class_or_searched find_module_named ule "]}," Context find_method":{"type":"method","name":"find_method","children":[],"call":["m singleton == ","m singleton ","m name == ","m name ","@method_list find ","singleton ! ","m singleton ! "]}," Context find_external_alias_named":{"type":"method","name":"find_external_alias_named","children":[],"call":["a name == ","a name ","@external_aliases find "," find_external_alias ","name [] "]}," Context find_external_alias":{"type":"method","name":"find_external_alias","children":[],"call":["m singleton == ","m singleton ","m name == ","m name ","@external_aliases find "]}," Context find_attribute":{"type":"method","name":"find_attribute","children":[],"call":["a singleton == ","a singleton ","a name == ","a name ","@attributes find ","name =~ "]}," Context display":{"type":"method","name":"display","children":[],"call":["method_attr pretty_name ","method_attr definition ","method_attr is_a? "]}," Context class_method_list":{"type":"method","name":"class_method_list","children":[],"call":["a singleton "," method_list select "," method_list "]}," Context class_attributes":{"type":"method","name":"class_attributes","children":[],"call":["a singleton "," attributes select "," attributes "]}," Context any_content":{"type":"method","name":"any_content","children":[],"call":["@includes empty? ! ","@includes empty? ","(and\n  (and\n    (and\n      (and\n        (and\n          (and\n            (send\n              (ivar :@comment) :empty?)\n            (send\n              (ivar :@method_list) :empty?))\n          (send\n            (ivar :@attributes) :empty?))\n        (send\n          (ivar :@aliases) :empty?))\n      (send\n        (ivar :@external_aliases) :empty?))\n    (send\n      (ivar :@requires) :empty?))\n  (send\n    (ivar :@constants) :empty?)) ! ","@constants empty? ","@requires empty? ","@external_aliases empty? ","@aliases empty? ","@attributes empty? ","@method_list empty? ","@comment empty? ","(send\n  (ivar :@includes) :+\n  (ivar :@extends)) empty? ! ","(send\n  (ivar :@includes) :+\n  (ivar :@extends)) empty? ","@includes + "]}," Constant to_s":{"type":"method","name":"to_s","children":[],"call":[" is_alias_for "," parent full_name "," parent "]}," Constant documented?":{"type":"method","name":"documented?","children":[],"call":[" is_alias_for documented? "," is_alias_for ","@is_alias_for documented? ","@store find_class_or_module "]}," CodeObject record_location":{"type":"method","name":"record_location","children":[],"call":[]}," CodeObject full_name=":{"type":"method","name":"full_name=","children":[],"call":[]}," CodeObject force_documentation=":{"type":"method","name":"force_documentation=","children":[],"call":[]}," CodeObject done_documenting=":{"type":"method","name":"done_documenting=","children":[],"call":["value ! "]}," ClassModule update_includes":{"type":"method","name":"update_includes","children":[],"call":["RDoc TopLevel  all_modules_hash [] nil? ","RDoc TopLevel  all_modules_hash [] ","mod full_name ","RDoc TopLevel  all_modules_hash ","(send\n  (const nil :String) :===\n  (lvar :mod)) ! ","String  === ","include module "," includes reject! "," includes "," includes uniq! ","@store modules_hash [] nil? ","@store modules_hash [] ","@store modules_hash ","RDoc TopLevel  all_include module ules_hash [] nil? ","RDoc TopLevel  all_include module ules_hash [] ","include module  full_name ","RDoc TopLevel  all_include module ules_hash ","(send\n  (const nil :String) :===\n  (lvar :include module )) ! ","include include module ule ","@store include module ules_hash [] nil? ","@store include module ules_hash [] ","@store include module ules_hash "]}," ClassModule update_aliases":{"type":"method","name":"update_aliases","children":[],"call":["cm aliases << ","cm aliases "," classes_hash []= ","const name "," classes_hash ","RDoc TopLevel  all_classes_hash []= ","cm_alias full_name ","RDoc TopLevel  all_classes_hash "," modules_hash []= "," modules_hash ","RDoc TopLevel  all_modules_hash []= ","RDoc TopLevel  all_modules_hash ","cm module? ","cm_alias is_alias_for= ","cm_alias aliases clear ","cm_alias aliases ","cm_alias full_name= ","cm_alias parent= ","cm_alias name= ","cm dup ","const is_alias_for "," constants each "," constants ","@store classes_hash []= ","@store classes_hash ","@store modules_hash []= ","@store modules_hash ","RDoc TopLevel  === ","cm_alias parent ","const is_alias_for  aliases << ","const is_alias_for  aliases ","cm dup  full_name ","const is_alias_for _alias full_name ","const is_alias_for  module? ","cm dup  is_alias_for= ","const is_alias_for _alias is_alias_for= ","cm dup  aliases clear ","const is_alias_for _alias aliases clear ","cm dup  aliases ","const is_alias_for _alias aliases ","cm dup  full_name= ","const is_alias_for _alias full_name= ","cm dup  parent= ","const is_alias_for _alias parent= ","cm dup  name= ","const is_alias_for _alias name= ","const is_alias_for  dup ","cm dup  parent ","const is_alias_for _alias parent "]}," ClassModule remove_nodoc_children":{"type":"method","name":"remove_nodoc_children","children":[],"call":[" classes_hash delete "," classes_hash ","RDoc TopLevel  all_classes_hash [] ","RDoc TopLevel  all_classes_hash ","prefix + "," classes_hash each_key "," modules_hash delete "," modules_hash ","RDoc TopLevel  all_modules_hash [] ","RDoc TopLevel  all_modules_hash "," modules_hash each_key "," full_name + "," full_name ","@store classes_hash [] ","@store classes_hash ","@store modules_hash [] ","@store modules_hash "," full_name +  + "," prefix +  + "," prefix +  "]}," ClassModule non_aliases":{"type":"method","name":"non_aliases","children":[],"call":["cm is_alias_for "," classes_and_modules reject "," classes_and_modules "]}," ClassModule name_for_path":{"type":"method","name":"name_for_path","children":[],"call":[" full_name "," is_alias_for full_name "," is_alias_for "]}," ClassModule name=":{"type":"method","name":"name=","children":[],"call":[]}," ClassModule find_ancestor_local_symbol":{"type":"method","name":"find_ancestor_local_symbol","children":[],"call":["m find_local_symbol ","m is_a? "," ancestors each "," ancestors "," each_ancestor "]}," ClassModule complete":{"type":"method","name":"complete","children":[],"call":[" remove_invisible "," update_includes "," remove_nodoc_children "," update_aliases "]}," ClassModule clear_comment":{"type":"method","name":"clear_comment","children":[],"call":[]}," ClassModule from_module":{"type":"method","name":"from_module","children":[],"call":[]}," Attr definition":{"type":"method","name":"definition","children":[],"call":[]}," Attr aref_prefix":{"type":"method","name":"aref_prefix","children":[],"call":[]}," Attr add_alias":{"type":"method","name":"add_alias","children":[],"call":["context add_attribute ","@aliases << ","new_attr is_alias_for= ","new_attr visibility= "," visibility ","new_attr record_location ","an_alias file "," class new "," singleton "," comment "," rw ","an_alias new_name "," text "," class "," class new  is_alias_for= "," class new  visibility= "," class new  record_location "]}," AnyMethod aref_prefix":{"type":"method","name":"aref_prefix","children":[],"call":[]}," Alias pretty_new_name":{"type":"method","name":"pretty_new_name","children":[],"call":[" singleton "]}," Alias pretty_old_name":{"type":"method","name":"pretty_old_name","children":[],"call":[" singleton "]}," Alias name_prefix":{"type":"method","name":"name_prefix","children":[],"call":[" singleton "]}," Alias html_name":{"type":"method","name":"html_name","children":[],"call":["CGI  escape gsub sub ","CGI  escape gsub ","CGI  escape ","@new_name gsub "]}," Alias full_old_name":{"type":"method","name":"full_old_name","children":[],"call":[" pretty_old_name "," parent name "," parent "]}," Alias aref":{"type":"method","name":"aref","children":[],"call":[" html_name "," singleton "]}," Alias <=>":{"type":"method","name":"<=>","children":[],"call":["(if\n  (ivar :@singleton)\n  (int 0)\n  (int 1)) <=> ","other new_name ","other singleton "," new_name "]}," Task inline_source=":{"type":"method","name":"inline_source=","children":[],"call":[" warn "]}," Task inline_source":{"type":"method","name":"inline_source","children":[],"call":[" warn "]}," Options generator_descriptions":{"type":"method","name":"generator_descriptions","children":[],"call":["(send\n  (send\n    (lvar :generators) :sort) :map) join ","  %-*s - %s % ","generators sort map ","generators sort ","lengths max ","generator const_defined? ","lengths << ","name length ","RDoc RDoc GENERATORS  map "]}," RDoc load_yaml":{"type":"method","name":"load_yaml","children":[],"call":[]}," TopLevel text?":{"type":"method","name":"text?","children":[],"call":["@parser ancestors include? ","@parser ancestors ","@parser include? "]}," TopLevel search_record":{"type":"method","name":"search_record","children":[],"call":[" snippet "," path "," page_name ","@parser < "]}," TopLevel page_name":{"type":"method","name":"page_name","children":[],"call":["basename =~ ","File  basename ","File  basename  =~ ","File  File  basename  "]}," TopLevel hash":{"type":"method","name":"hash","children":[],"call":["@absolute_name hash ","@relative_name hash "]}," TopLevel display?":{"type":"method","name":"display?","children":[],"call":[" text? "]}," TopLevel ==":{"type":"method","name":"==","children":[],"call":["@absolute_name == ","other absolute_name "," class === "," class ","other class === ","other class ","@relative_name == ","other relative_name "]}," TopLevel page":{"type":"method","name":"page","children":[],"call":[]}," TopLevel new":{"type":"method","name":"new","children":[],"call":[]}," TomDoc tokenize":{"type":"method","name":"tokenize","children":[],"call":["@tokens << "," token_pos ","s matched sub ","s matched ","s scan ","s [] ","s pos ","s eos? ","StringScanner  new ","text sub! ","@s matched sub ","@s matched ","@s scan ","@s [] "," char_pos ","@s pos ","@s eos? "," setup_scanner ","text sub ","@s newline! ","@tokenStringScanner  new  << "," token_s pos  "," token_@s pos  "," token_poStringScanner  new  ","StringScanner  new  matched StringScanner  new ub ","StringScanner  new  matched ","StringScanner  new  StringScanner  new can ","StringScanner  new  [] ","s s pos  ","s @s pos  ","StringScanner  new  poStringScanner  new  ","StringScanner  new  eoStringScanner  new ? ","text StringScanner  new ub! ","text sub  sub! ","@StringScanner  new  matched StringScanner  new ub ","@StringScanner  new  matched ","@StringScanner  new  StringScanner  new can ","@StringScanner  new  [] "," char_s pos  "," char_@s pos  "," char_poStringScanner  new  ","@s s pos  ","@s @s pos  ","@StringScanner  new  poStringScanner  new  ","@StringScanner  new  eoStringScanner  new ? "," StringScanner  new etup_StringScanner  new canner ","text StringScanner  new ub ","text sub  sub ","@StringScanner  new  newline! "]}," TomDoc build_paragraph":{"type":"method","name":"build_paragraph","children":[],"call":[" p "," unget "," skip ","paragraph << ","type == "," get ","@tokens empty? ","RDoc Markup Paragraph  new ","TEXT == "," peek_token [] "," peek_token ","data =~ "," peek_token [] start_with? ","Returns == ","RDoc Markup Paragraph  new  << "]}," TomDoc build_verbatim":{"type":"method","name":"build_verbatim","children":[],"call":["verbatim format= ","@section == "]}," TomDoc build_heading":{"type":"method","name":"build_heading","children":[],"call":["heading text "]}," TomDoc initialize":{"type":"method","name":"initialize","children":[],"call":[]}," TomDoc signature":{"type":"method","name":"signature","children":[],"call":[]}," TomDoc parse":{"type":"method","name":"parse","children":[],"call":[]}," TomDoc add_post_processor":{"type":"method","name":"add_post_processor","children":[],"call":[]}," TokenStream to_html":{"type":"method","name":"to_html","children":[],"call":[]}," Text wrap":{"type":"method","name":"wrap","children":[],"call":["res join strip ","res join ","txt [] == ","txt [] ","sp < ","res << << ","res << ","txt [] != ","p < ","sp + ","p <= ","p > ","p >= ","sp + - ","txt length ","res join strisp +  ","res join strisp + -  ","ssp +  < ","ssp + -  < ","sp +  < ","sp + -  < ","ssp +  + ","ssp + -  + ","sp +  <= ","sp + -  <= ","sp +  > ","sp + -  > ","sp +  >= ","sp + -  >= ","ssp +  + - ","ssp + -  + - "]}," Text snippet":{"type":"method","name":"snippet","children":[],"call":["RDoc Markup ToHtmlSnippet  new convert ","RDoc Markup ToHtmlSnippet  new "," parse "," options "]}," TestCase temp_dir":{"type":"method","name":"temp_dir","children":[],"call":["Dir  chdir ","Dir  mktmpdir "," skip ","Dir  respond_to? "]}," TestCase comment":{"type":"method","name":"comment","children":[],"call":["RDoc Comment  new "]}," TestCase setup":{"type":"method","name":"setup","children":[],"call":["Dir  pwd ","RDoc Markup PreProcess  reset ","RDoc RDoc  reset ","@rdoc generator= ","Object  new ","@rdoc store= ","RDoc RDoc  new ","RDoc Store  new ","Object  const_defined? ","@rdoc options= ","RDoc Options  new ","@rdoc Object  new enerator= ","RDoc RDoc  new  generator= ","RDoc RDoc  new  store= ","RDoc RDoc  new  options= "]}," Task rerdoc_task_description":{"type":"method","name":"rerdoc_task_description","children":[],"call":[]}," Task rdoc_task_description":{"type":"method","name":"rdoc_task_description","children":[],"call":[]}," Task defaults":{"type":"method","name":"defaults","children":[],"call":["Rake FileList  new "]}," Task clobber_task_description":{"type":"method","name":"clobber_task_description","children":[],"call":[]}," Task check_names":{"type":"method","name":"check_names","children":[],"call":[" raise ","invalid_options join ","invalid_options empty? ","(send\n  (send\n    (lvar :names) :keys) :map) - ","k to_sym ","names keys map ","names keys ","Hash  === ","(send\n  (send\n    (lvar :names) :keys) :map) -  join ","(send\n  (send\n    (lvar :names) :keys) :map) -  empty? "]}," Stats undoc_params":{"type":"method","name":"undoc_params","children":[],"call":["params length ","params - ","document accept "," parse ","method comment ","params empty? ","method param_list ","RDoc Markup ToTtOnly  new ","param gsub ","params map ","method param_list  length ","method param_list  - "," parse  accept ","method param_list  empty? ","method param_list  map "]}," Stats report_methods":{"type":"method","name":"report_methods","children":[],"call":["report << ","method params ","method name ","method singleton ","method file full_name ","method file ","param_report ! ","method documented? ","undoc join ","undoc map ","undoc length ","undoc empty? "," undoc_params ","@coverage_level > ","@coverage_level zero? ","cm each_method ","cm method_list empty? ","cm method_list ","method line "]}," Stats report_constants":{"type":"method","name":"report_constants","children":[],"call":["report << ","constant name ","constant file full_name ","constant file ","constant is_alias_for ","constant documented? ","cm each_constant ","cm constants empty? ","cm constants ","constant line "]}," Stats report_class_module":{"type":"method","name":"report_class_module","children":[],"call":["report << ","report << << ","body empty? "," flatten ","cm definition ","file full_name ","cm in_files each ","cm in_files ","cm documented? ","cm in_files empty? ","cm display? ","@coverage_level zero? ","cm fully_documented? ","klass << ","klass parts concat ","klass parts ","klass parts pop ","RDoc Markup Verbatim  new ","RDoc Markup BlankLine  new ","list << ","RDoc Markup ListItem  new ","RDoc Markup Paragraph  new ","RDoc Markup List  new ","RDoc Markup Document  new ","RDoc Markup Document  new  << ","RDoc Markup Document  new  << << "," flatten  empty? ","RDoc Markup Verbatim  new  << ","RDoc Markup Verbatim  new  parts concat ","RDoc Markup Verbatim  new  parts ","RDoc Markup Verbatim  new  parts pop ","RDoc Markup List  new  << "]}," Stats report_attributes":{"type":"method","name":"report_attributes","children":[],"call":["report << ","attr file full_name ","attr file ","attr name ","attr definition ","attr documented? ","cm each_attribute ","cm attributes empty? ","cm attributes ","attr line "]}," Stats percent_doc":{"type":"method","name":"percent_doc","children":[],"call":["@doc_items to_f / * ","@doc_items to_f / ","@doc_items to_f ","@num_items nonzero? ","(send\n  (ivar :@num_items) :-\n  (ivar :@doc_items)) == ","@num_items - "]}," Stats great_job":{"type":"method","name":"great_job","children":[],"call":["report join ","report << ","RDoc Markup Paragraph  new ","RDoc Markup Document  new ","RDoc Markup Document  new  join ","RDoc Markup Document  new  << "]}," Stats coverage_level=":{"type":"method","name":"coverage_level=","children":[],"call":[]}," SingleClass definition":{"type":"method","name":"definition","children":[],"call":[" full_name "]}," RubygemsHook setup":{"type":"method","name":"setup","children":[],"call":["FileUtils  mkdir_p ","File  exist? "," raise ","File  writable? ! ","File  writable? "," class load_rdoc "," class "]}," RubygemsHook ri_installed?":{"type":"method","name":"ri_installed?","children":[],"call":["File  exist? "]}," RubygemsHook remove":{"type":"method","name":"remove","children":[],"call":["FileUtils  rm_rf "," raise ","File  writable? ","@spec base_dir ","@spec @spec base_dir  "]}," RubygemsHook rdoc_installed?":{"type":"method","name":"rdoc_installed?","children":[],"call":["File  exist? "]}," RubygemsHook new_rdoc":{"type":"method","name":"new_rdoc","children":[],"call":[" RDoc RDoc  new "]}," RubygemsHook generate":{"type":"method","name":"generate","children":[],"call":[" document ","File  exist? ! ","File  exist? ","@rdoc parse_files ","options files ","Dir  chdir ","@spec full_gem_path ","@rdoc options= "," new_rdoc ","options quiet= ","Gem  configuration really_verbose ! ","Gem  configuration really_verbose ","Gem  configuration ","options parse "," delete_legacy_args ","args concat ","config_args split ","Gem  configuration [] ","@spec rdoc_options ","options files push ","@spec extra_rdoc_files ","@spec require_paths ","options files= ","options default_title= ","@spec full_name "," RDoc Options  new "," RDoc RDoc  reset "," setup "," say ","@rdoc store= ","store title= ","options title ","store main= ","options main_page ","store dry_run= ","options dry_run ","store encoding= ","options encoding ","options respond_to? ","RDoc Store  new ","@spec default_gem? ","options files concat ","@spec source_paths ","@spec respond_to? "," new_rdoc  parse_files "," RDoc Options  new  files "," new_rdoc  options= ","@rdoc  RDoc Options  new = "," RDoc Options  new  quiet= "," RDoc Options  new  parse "," delete_legacy_args concat  "," delete_legacy_@spec rdoc_options  ","args concat  concat ","@spec rdoc_options  concat ","config_args concat  split ","config_@spec rdoc_options  split ","Gem  configuration []  split ","@spec rdoc_ RDoc Options  new  "," RDoc Options  new  files push "," RDoc Options  new  files= "," RDoc Options  new  default_title= "," new_rdoc  store= ","@rdoc RDoc Store  new = ","RDoc Store  new  title= "," RDoc Options  new  title ","RDoc Store  new  main= "," RDoc Options  new  main_page ","RDoc Store  new  dry_run= "," RDoc Options  new  dry_run ","RDoc Store  new  encoding= "," RDoc Options  new  encoding "," RDoc Options  new  respond_to? "," RDoc Options  new  files concat "]}," RubygemsHook document":{"type":"method","name":"document","children":[],"call":["@rdoc class current= ","@rdoc class ","@rdoc generator generate ","@rdoc generator ","Dir  chdir ","options op_dir ","FileUtils  mkdir_p "," say ","@spec full_name ","@rdoc generator= ","options generator new ","options generator ","@rdoc options= ","options finish ","options op_dir= ","options setup_generator ","options exclude ","options dup ","@rdoc store ","@spec full_gem_path ","@rdoc options generator new  generate ","@rdoc options generator new  ","options dup  op_dir ","@rdoc options generator new = ","options dup  generator new ","options options generator new  new ","options dup  generator ","options options generator new  ","@rdoc options dup = ","options dup  finish ","options dup  op_dir= ","options dup  setup_generator ","options setup_options generator new  ","options dup  exclude ","options dup  dup "]}," RubygemsHook delete_legacy_args":{"type":"method","name":"delete_legacy_args","children":[],"call":["args delete "]}," RubygemsHook initialize":{"type":"method","name":"initialize","children":[],"call":["spec doc_dir "]}," RubygemsHook load_rdoc":{"type":"method","name":"load_rdoc","children":[],"call":[]}," RubygemsHook generation_hook":{"type":"method","name":"generation_hook","children":[],"call":[]}," RubyToken TkUnknownChar inspect":{"type":"method","name":"inspect","children":[],"call":["{%s %d, %d:%d %p} % "," class name split last "," class name split "," class name "," class "]}," RubyToken TkOPASGN inspect":{"type":"method","name":"inspect","children":[],"call":["{%s %d, %d:%d %p} % "," class name split last "," class name split "," class name "," class "]}," RubyToken TkOp inspect":{"type":"method","name":"inspect","children":[],"call":["{%s %d, %d:%d %p} % "," class name split last "," class name split "," class name "," class "]}," RubyToken TkVal inspect":{"type":"method","name":"inspect","children":[],"call":["{%s %s, %d:%d %p} % "," class name split last "," class name split "," class name "," class "]}," RubyToken TkId inspect":{"type":"method","name":"inspect","children":[],"call":["{%s %d, %d:%d %p} % "," class name split last "," class name split "," class name "," class "]}," RubyToken TkNode inspect":{"type":"method","name":"inspect","children":[],"call":["{%s %d, %d:%d %p} % "," class name split last "," class name split "," class name "," class "]}," RubyToken Token inspect":{"type":"method","name":"inspect","children":[],"call":["{%s %d, %d:%d %p} % "," class name split last "," class name split "," class name "," class "]}," Store clean_cache_collection":{"type":"method","name":"clean_cache_collection","children":[],"call":["item sort! ","item uniq! ","collection delete ","item empty? ","collection each "]}," Driver name_regexp":{"type":"method","name":"name_regexp","children":[],"call":["Regexp  escape "," parse_name "]}," Driver method_document":{"type":"method","name":"method_document","children":[],"call":["out << ","RDoc Markup BlankLine  new ","method comment ","RDoc Markup Rule  new ","RDoc Markup Verbatim  new ","line + ","arglists map ","method arglists chomp split ","method arglists chomp ","method arglists ","RDoc Markup Heading  new ","method parent_name ","name =~ ","Regexp  escape ","RDoc Markup Paragraph  new ","store friendly_path ","methods each ","filtered each ","RDoc Markup Document  new ","method superclass_method ","method respond_to? "," render_method ","RDoc Markup Document  new  << ","method arglists chomp split  map ","method method arglists chomp split  chomp split ","method method arglists chomp split  chomp ","method method arglists chomp split  "]}," Driver filter_methods":{"type":"method","name":"filter_methods","children":[],"call":["filtered empty? ","method full_name =~ ","method full_name ","methods any? ","found find_all "," name_regexp "," name_ name_regexp  "]}," Driver classes_and_includes_for":{"type":"method","name":"classes_and_includes_for","children":[],"call":["modules empty? ","includes reject! ","(send\n  (ivar :@stores) :map) compact ","includes << ","klass includes ","klasses << ","store load_class ","@stores map ","store load_class  includes ","store load_class es << "]}," Driver class_document":{"type":"method","name":"class_document","children":[],"call":[" add_also_in "," add_method_list ","out << ","RDoc Markup BlankLine  new ","list push ","RDoc Markup ListItem  new ","constant name ","parts << ","RDoc Markup Paragraph  new ","parts empty? ","constant comment parts ","constant comment ","constants map ","klass constants sort_by ","klass constants ","RDoc Markup List  new ","RDoc Markup Heading  new ","klass constants empty? ","RDoc Markup Rule  new ","klass constants empty? ! ","out push ","parts pop ","parts flatten! ","parts zip ","(send\n  (const\n    (const\n      (const nil :RDoc) :Markup) :BlankLine) :new) * ","parts length ","comment parts ","comment merged? ","comment empty? "," add_from ","also_in << ","class_methods empty? ","instance_methods empty? ","store attributes [] ","klass full_name ","store attributes ","store instance_methods [] ","store instance_methods ","store class_methods [] ","store class_methods ","klass comment ","found each "," add_includes "," add_class ","RDoc Markup Document  new ","(or\n  (lvar :instance_methods)\n  (lvar :class_methods)) ! "," add_method_documentation ","list items concat ","list items ","out concat "," add_extends "," render_class "," add_method_RDoc Markup List  new  ","RDoc Markup Document  new  << ","RDoc Markup List  new  push ","constant comment parts  << ","parts zip  << ","comment parts  << ","constant comment parts  empty? ","parts zip  empty? ","comment parts  empty? ","constant comment constant comment parts  ","constant comment parts zip  ","constant comment comment parts  ","constant klass comment  parts ","constant klass comment  ","RDoc Markup Document  new  push ","constant comment parts  pop ","parts zip  pop ","comment parts  pop ","constant comment parts  flatten! ","parts zip  flatten! ","comment parts  flatten! ","constant comment parts  zip ","parts zip  zip ","comment parts  zip ","constant comment parts  length ","parts zip  length ","comment parts  length ","comment constant comment parts  ","comment parts zip  ","comment comment parts  ","klass comment  parts ","klass comment  merged? ","klass comment  empty? ","store class_methods []  empty? ","store instance_methods []  empty? ","store store attributes []  [] ","store store attributes []  ","store store instance_methods []  [] ","store store instance_methods []  ","store store class_methods []  [] ","store store class_methods []  ","klass klass comment  ","(or\n  (lvar :store instance_methods [] )\n  (lvar :class_methods)) ! ","(or\n  (lvar :instance_methods)\n  (lvar :store class_methods [] )) ! ","RDoc Markup List  new  items concat ","RDoc Markup List  new  items ","RDoc Markup Document  new  concat "]}," RDoc generate":{"type":"method","name":"generate","children":[],"call":[" update_output_dir ","@generator generate ","$stderr puts ","Dir  pwd ","@generator class name sub ","@generator class name ","@generator class ","@options quiet ","Dir  chdir ","@options op_dir "," class current= "," class ","@options dry_run "]}," RDoc load_options":{"type":"method","name":"load_options","children":[],"call":[" raise ","RDoc Options  === ","YAML  load_file ","Object  const_defined? ","RDoc  load_yaml ","RDoc Options  new ","File  exist? ","File  expand_path ","Hash  === ","options == ","YAML  load_file  == ","RDoc Options  new  == "]}," RDoc reset":{"type":"method","name":"reset","children":[],"call":[]}," RD parse":{"type":"method","name":"parse","children":[],"call":[]}," Inline inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Inline append":{"type":"method","name":"append","children":[],"call":[" raise ","@rdoc << ","more rdoc ","@reference << ","more reference "]}," Inline ==":{"type":"method","name":"==","children":[],"call":["@rdoc == ","other rdoc ","@reference == ","other reference "," class === "," class "]}," Inline initialize":{"type":"method","name":"initialize","children":[],"call":["@reference reference "," class === "," class ","reference dup ","reference equal? ","@reference reference  reference ","reference dup  reference "]}," Inline new":{"type":"method","name":"new","children":[],"call":[]}," Parser use_markup":{"type":"method","name":"use_markup","children":[],"call":[]}," Simple remove_private_comment":{"type":"method","name":"remove_private_comment","children":[],"call":["comment sub ","comment gsub ","empty force_encoding ","comment encoding ","Object  const_defined? ","RDoc Encoding  change_encoding ","comment gsub  sub ","comment gsub  gsub ","RDoc Encoding  change_encoding  force_encoding ","comment gsub  encoding "]}," Ruby parse_comment_tomdoc":{"type":"method","name":"parse_comment_tomdoc","children":[],"call":["@stats add_method ","meth comment= ","container add_method ","meth name ","comment normalize ","meth call_seq= ","meth add_tokens ","position_comment set_text ","@top_level absolute_name ","TkCOMMENT  new ","indent set_text ","  * ","TkSPACE  new ","meth start_collecting_tokens ","meth line= ","meth offset= ","meth record_location ","RDoc GhostMethod  new "," get_tkread ","signature split ","tk line_no ","tk seek ","RDoc TomDoc  signature ","@top_level relative_name "," record_location ","position_comment []= ","tk [] ","tk char_no ","RDoc Parser RipperStateLex Token  new ","@stats add_RDoc GhostMethod  new od ","RDoc GhostMethod  new  comment= ","container add_RDoc GhostMethod  new od ","RDoc GhostMethod  new  name ","RDoc GhostMethod  new  call_seq= ","RDoc GhostMethod  new  add_tokens ","TkCOMMENT  new  set_text ","RDoc Parser RipperStateLex Token  new  set_text ","TkSPACE  new  set_text ","RDoc GhostMethod  new  start_collecting_tokens ","RDoc GhostMethod  new  line= ","RDoc GhostMethod  new  offset= ","meth tk seek = ","RDoc GhostMethod  new  record_location ","RDoc TomDoc  signature  split ","tk tk line_no  ","tk tk []  ","RDoc TomDoc  RDoc TomDoc  signature  ","TkCOMMENT  new  []= ","RDoc Parser RipperStateLex Token  new  []= "]}," Ruby new_comment":{"type":"method","name":"new_comment","children":[],"call":["c format= ","RDoc Comment  new ","c line= ","RDoc Comment  new  format= ","RDoRDoc Comment  new  Comment  new ","RDoc Comment  new  line= "]}," RD scan":{"type":"method","name":"scan","children":[],"call":["@top_level comment= ","comment format= ","RDoc Comment  new ","@top_level RDoc Comment  new = ","RDoc Comment  new  format= "]}," C rb_scan_args":{"type":"method","name":"rb_scan_args","children":[],"call":["args join ","args << ","(erange\n  (lvar :position)\n  (begin\n    (send\n      (lvar :position) :+\n      (lvar :trail)))) each ","position + ","(erange\n  (lvar :position)\n  (begin\n    (send\n      (lvar :position) :+\n      (lvar :opt)))) each ","(erange\n  (int 1)\n  (begin\n    (send\n      (lvar :position) :+\n      (lvar :lead)))) each ","format shift ","format first == ","format first ","$& to_i ","format first =~ ","block_arg ! ","1 split ","1 split [] =~ ","1 split [] ","method_body =~ ","(erange\n  (lvar :position)\n  (begin\n    (send\n      (lvar :position) :+\n      (lvar :$& to_i )))) each ","(erange\n  (int 1)\n  (begin\n    (send\n      (lvar :position) :+\n      (lvar :$& to_i )))) each ","1 split  shift ","1 split  first == ","1 split  first ","1 split  first =~ "]}," Options write_options":{"type":"method","name":"write_options","children":[],"call":["YAML  dump ","io set_encoding ","Object  const_defined? "," open ","RDoc  load_yaml ","File  open ","io print "," to_yaml "]}," Options warn":{"type":"method","name":"warn","children":[],"call":["@verbosity > "]}," Options to_yaml":{"type":"method","name":"to_yaml","children":[],"call":[" encode_with ","out map "," to_yaml_style "," taguri ","YAML  quick_emit ","YAML ENGINE  syck? ! ","YAML ENGINE  syck? ","YAML  const_defined? ","yaml to_yaml ","yaml []= "," instance_variable_get ","ivars sort each ","ivars sort ","ivar to_s [] ","ivar to_s "," instance_variables map "," instance_variables "," sanitize_path first "," sanitize_path ","@encoding name ","@@encoding name  name "]}," Options sanitize_path":{"type":"method","name":"sanitize_path","children":[],"call":["relative start_with? ","path relative_path_from to_s ","path relative_path_from ","Pathname  new expand_path ","Pathname  new ","path reject "," require ","path relative_path_from to_s  start_with? ","path path relative_path_from to_s _path_from to_s ","Pathname  new expand_path  relative_Pathname  new expand_path _from to_s ","path path relative_path_from to_s _path_from ","Pathname  new expand_path  relative_Pathname  new expand_path _from ","Pathname  new expand_Pathname  new expand_path  ","Pathname  new expand_path  reject "]}," Options finish":{"type":"method","name":"finish","children":[],"call":[" template_dir_for "," check_files ","Regexp  new ","@exclude join ","@exclude empty? ","Regexp  === ","@exclude nil? ","@rdoc_include << ","@rdoc_include empty? "," finish_page_dir ","@rdoc_include include? ","@root to_s ","@locale load ","RDoc I18n Locale  [] "," exclude "," exit "," write_options ","@rdoc_include include? ! ","Regexp  new  join "," exclude  join ","Regexp  new  empty? "," exclude  empty? ","Regexp  new  nil? "," exclude  nil? ","@@root to_s  to_s ","RDoc I18n Locale  []  load "]}," Options encode_with":{"type":"method","name":"encode_with","children":[],"call":["coder add "," instance_variable_get ","ivars sort each ","ivars sort ","ivar to_s [] ","ivar to_s "," instance_variables map "," instance_variables "," sanitize_path ","@encoding name ","@@encoding name  name "]}," Options ==":{"type":"method","name":"==","children":[],"call":["@webcvs == ","other webcvs ","@visibility == ","other visibility ","@title == ","other title ","@template == ","other template ","@tab_width == ","other tab_width ","@static_path == ","other static_path ","@show_hash == ","other show_hash ","@rdoc_include == ","other rdoc_include ","@op_dir == ","other op_dir ","@markup == ","other markup ","@main_page == ","other main_page ","@line_numbers == ","other line_numbers ","@hyperlink_all == ","other hyperlink_all ","@generator_name == ","other generator_name ","@encoding == ","other encoding "," class === "," class ","@locale_dir == ","other locale_dir ","@locale == ","other locale "]}," Options yaml_initialize":{"type":"method","name":"yaml_initialize","children":[],"call":[" init_with "]}," Options init_with":{"type":"method","name":"init_with","children":[],"call":[" sanitize_path ","map [] ","Encoding  find ","Object  const_defined? "," init_ivars "]}," Options init_ivars":{"type":"method","name":"init_ivars","children":[],"call":["@encoding to_s ","Encoding  default_external ","Object  const_defined? ","@encoding name "," Pathname ","Dir  pwd ","Encoding  default_external  to_s ","Encoding  default_external  name "]}," NormalModule definition":{"type":"method","name":"definition","children":[],"call":[" full_name "]}," NormalClass definition":{"type":"method","name":"definition","children":[],"call":[" full_name "]}," MethodAttr search_record":{"type":"method","name":"search_record","children":[],"call":[" snippet "," params "," path ","@parent full_name "," full_name "]}," MethodAttr output_name":{"type":"method","name":"output_name","children":[],"call":[" parent_name "," name_prefix ","context == "," parent "]}," Markup parse":{"type":"method","name":"parse","children":[],"call":[]}," Verbatim ruby?":{"type":"method","name":"ruby?","children":[],"call":["@format == "]}," Verbatim initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ToTtOnly start_accepting":{"type":"method","name":"start_accepting","children":[],"call":[]}," ToTtOnly end_accepting":{"type":"method","name":"end_accepting","children":[],"call":["@res compact "]}," ToTtOnly tt_sections":{"type":"method","name":"tt_sections","children":[],"call":[" res "," raise ","item inspect ","@res << "," convert_special "," in_tt? "," on_tags "," off_tags ","flow each ","@am flow ","text dup "," convert_regexp_handling ","@am flow  each ","@am @am flow  "]}," ToTtOnly do_nothing":{"type":"method","name":"do_nothing","children":[],"call":[]}," ToTtOnly accept_paragraph":{"type":"method","name":"accept_paragraph","children":[],"call":[" tt_sections ","paragraph text "]}," ToTtOnly accept_list_item_start":{"type":"method","name":"accept_list_item_start","children":[],"call":[" tt_sections ","list_item label ","@list_type last ","(send\n  (send nil :Array\n    (send\n      (lvar :list_item) :label)) :map) flatten "," Array map "," Array "]}," ToTtOnly accept_list_start":{"type":"method","name":"accept_list_start","children":[],"call":["@list_type << ","list type "]}," ToTtOnly accept_list_end":{"type":"method","name":"accept_list_end","children":[],"call":["@list_type pop "]}," ToTtOnly initialize":{"type":"method","name":"initialize","children":[],"call":[" add_tag "]}," ToTableOfContents start_accepting":{"type":"method","name":"start_accepting","children":[],"call":[]}," ToTableOfContents end_accepting":{"type":"method","name":"end_accepting","children":[],"call":[]}," ToTableOfContents accept_heading":{"type":"method","name":"accept_heading","children":[],"call":["@res << "," suppressed? "]}," ToTableOfContents to_toc":{"type":"method","name":"to_toc","children":[],"call":[]}," ToRdoc accept_indented_paragraph":{"type":"method","name":"accept_indented_paragraph","children":[],"call":["paragraph indent "," wrap "," attributes ","paragraph text ","paragraph paragraph text  "]}," ToLabel handle_special_TIDYLINK":{"type":"method","name":"handle_special_TIDYLINK","children":[],"call":["text =~ ","special text ","special text  =~ ","special special text  "]}," ToLabel handle_special_CROSSREF":{"type":"method","name":"handle_special_CROSSREF","children":[],"call":["text sub ","special text ","special text  sub ","special special text  "]}," ToLabel convert":{"type":"method","name":"convert","children":[],"call":["CGI  escape "," convert_flow ","@am flow ","CGI  escape gsub sub ","CGI  escape gsub "]}," ToLabel initialize":{"type":"method","name":"initialize","children":[],"call":[" add_tag ","@markup add_special ","@markup add_regexp_handling "]}," ToHtmlSnippet truncate":{"type":"method","name":"truncate","children":[],"call":["text =~ ","@character_limit - ","@characters < ","text length ","text text length  "]}," ToHtmlSnippet off_tags":{"type":"method","name":"off_tags","children":[],"call":["item turn_off "]}," ToHtmlSnippet on_tags":{"type":"method","name":"on_tags","children":[],"call":["item turn_on "]}," ToHtmlSnippet convert_flow":{"type":"method","name":"convert_flow","children":[],"call":["res join ","res << ","@characters >= "," off_tags ","RDoc Markup AttrChanger  new "," raise ","item inspect "," truncate "," convert_special "," convert_string "," on_tags ","flow each "," throw "," convert_regexp_handling "]}," ToHtmlSnippet convert":{"type":"method","name":"convert","children":[],"call":[" end_accepting "," catch "]}," ToHtmlSnippet add_paragraph":{"type":"method","name":"add_paragraph","children":[],"call":[" throw ","@paragraphs >= "]}," ToHtmlSnippet html_list_name":{"type":"method","name":"html_list_name","children":[],"call":[]}," ToHtmlSnippet gen_url":{"type":"method","name":"gen_url","children":[],"call":["text sub ","url =~ ","type == "]}," ToHtmlSnippet list_item_start":{"type":"method","name":"list_item_start","children":[],"call":[" raise ","list_type inspect "," to_html ","list_item label "," throw ","@characters >= ","labels << ","labels empty? ","(send\n  (send nil :Array\n    (send\n      (lvar :list_item) :label)) :map) join "," Array map "," Array ","(send\n  (send nil :Array\n    (send\n      (lvar :list_item) :label)) :map) join  << ","(send\n  (send nil :Array\n    (send\n      (lvar :list_item) :label)) :map) join  empty? "]}," ToHtmlSnippet handle_special_CROSSREF":{"type":"method","name":"handle_special_CROSSREF","children":[],"call":["special text sub ","special text "]}," ToHtmlSnippet start_accepting":{"type":"method","name":"start_accepting","children":[],"call":[]}," ToHtmlSnippet accept_verbatim":{"type":"method","name":"accept_verbatim","children":[],"call":[" add_paragraph ","RDoc Markup Verbatim  new ","text << ","text == "," truncate ","verbatim text rstrip ","verbatim text "," throw ","@characters >= "," truncate  << "," truncate  == ","verbatim  truncate  rstrip ","verbatim  truncate  "]}," ToHtmlSnippet accept_list_start":{"type":"method","name":"accept_list_start","children":[],"call":["@in_list_entry push ","@res << "," html_list_name ","list type ","@list << "]}," ToHtmlSnippet accept_list_item_start":{"type":"method","name":"accept_list_item_start","children":[],"call":["@res << "," list_item_start ","@list last "]}," ToHtmlSnippet accept_list_item_end":{"type":"method","name":"accept_list_item_end","children":[],"call":[]}," ToHtmlSnippet accept_paragraph":{"type":"method","name":"accept_paragraph","children":[],"call":[" add_paragraph ","@res << "," wrap "," to_html ","paragraph text ","@in_list_entry last ","paragraph paragraph text  "]}," ToHtmlSnippet accept_heading":{"type":"method","name":"accept_heading","children":[],"call":[" add_paragraph ","@res << "," to_html ","heading text "]}," ToHtmlSnippet initialize":{"type":"method","name":"initialize","children":[],"call":["@markup add_special ","@markup add_regexp_handling "]}," ToHtmlCrossref link":{"type":"method","name":"link","children":[],"call":["path << ","path =~ ","ref as_href ","ref output_name ","label ! ","RDoc MethodAttr  === ","@cross_reference resolve ","name =~ ","text == ","label == ","section title ","ref sections any? ","ref sections ","(send\n  (const\n    (const nil :RDoc) :TopLevel) :===\n  (lvar :ref)) ! ","RDoc TopLevel  === ","RDoc CodeObject  === ","ref aref ","ref respond_to? ","CGI  escapeHTML ","(send\n  (lvar :name) :end_with?\n  (str \"+@\")\n  (str \"-@\")) ! ","name end_with? ","ref as_href  << ","ref as_href  =~ ","@cross_reference resolve  as_h@cross_reference resolve  ","@cross_reference resolve  output_name ","@cross_@cross_reference resolve erence resolve ","ref output_name  == ","@cross_reference resolve  sections any? ","@cross_reference resolve  sections ","(send\n  (const\n    (const nil :RDoc) :TopLevel) :===\n  (lvar :@cross_reference resolve )) ! ","@cross_reference resolve  a@cross_reference resolve  ","@cross_reference resolve  respond_to? "]}," ToHtmlCrossref gen_url":{"type":"method","name":"gen_url","children":[],"call":[" cross_reference ","url =~ ","name == "]}," ToHtmlCrossref handle_special_RDOCLINK":{"type":"method","name":"handle_special_RDOCLINK","children":[],"call":[" cross_reference ","special text "]}," ToHtmlCrossref handle_special_HYPERLINK":{"type":"method","name":"handle_special_HYPERLINK","children":[],"call":[" cross_reference ","special text =~ ","special text "]}," ToHtmlCrossref cross_reference":{"type":"method","name":"cross_reference","children":[],"call":[" link ","CGI  unescape ","name =~ ","name [] ","name [] == ","(send\n  (lvar :name) :end_with?\n  (str \"+@\")\n  (str \"-@\")) ! ","name end_with? ","name []  =~ ","name []  [] ","name []  [] == ","(send\n  (lvar :name [] ) :end_with?\n  (str \"+@\")\n  (str \"-@\")) ! ","name []  end_with? "]}," ToHtml parseable?":{"type":"method","name":"parseable?","children":[],"call":["text =~ ","text !~ "," eval "," catch "]}," ToHtml handle_special_RDOCLINK":{"type":"method","name":"handle_special_RDOCLINK","children":[],"call":["url =~ "," gen_url ","special text "," handle_RDOCLINK ","special text  =~ "," gen_special text  "]}," Special to_s":{"type":"method","name":"to_s","children":[],"call":[" text dump "," text ","RDoc Markup Attribute  as_string "," type "]}," Special inspect":{"type":"method","name":"inspect","children":[],"call":["#<RDoc::Markup::Special:0x%x @type=%p, name=%p @text=%p> % "," text dump "," text ","RDoc Markup Attribute  as_string "," type "," object_id ","#<RDoc::Markup::Special:0x%x @type=%p, @text=%p> % "]}," Special ==":{"type":"method","name":"==","children":[],"call":[" type == ","o type "," type "," text == ","o text "," text "]}," Special initialize":{"type":"method","name":"initialize","children":[],"call":[]}," PreProcess handle_directive":{"type":"method","name":"handle_directive","children":[],"call":["handler call ","RDoc Markup PreProcess  registered [] ","RDoc Markup PreProcess  registered ","RDoc Markup PreProcess  registered include? ","code_object metadata []= ","code_object metadata "," block_given? ","code_object block_params= ","code_object params sub! ","code_object params ","@options default_title= ","@options respond_to? ","code_object stop_doc ","code_object force_documentation= ","code_object start_doc ","code_object dont_rename_initialize= ","RDoc AnyMethod  === ","code_object document_children= ","param !~ ","code_object document_self= ","@options main_page= "," include_file ","param split first ","param split ","code_object done_documenting= ","code_object temporary_section= ","code_object add_section ","RDoc Context  === ","code_object params= ","directive downcase ","prefix strip ","code_object params sub ","code_object kind_of? ","code_object section_title= ","RDoc Markup PreProcess  registered []  call ","code_object temporary_code_object add_section = ","code_object add_code_object add_section  ","directive downcase  downcase ","code_object code_object add_section _title= "]}," PreProcess reset":{"type":"method","name":"reset","children":[],"call":[]}," PreProcess post_processors":{"type":"method","name":"post_processors","children":[],"call":[]}," PreProcess post_process":{"type":"method","name":"post_process","children":[],"call":[]}," IndentedParagraph accept":{"type":"method","name":"accept","children":[],"call":["visitor accept_indented_paragraph "]}," IndentedParagraph ==":{"type":"method","name":"==","children":[],"call":[" indent == ","other indent "," indent "]}," IndentedParagraph initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Include pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp "," include_path ","q text ","q breakable "," file ","q group "]}," Heading plain_html":{"type":"method","name":"plain_html","children":[],"call":[" class to_html to_html "," text dup "," text "," class to_html "," class "]}," Heading aref":{"type":"method","name":"aref","children":[],"call":[" class to_label convert "," text dup "," text "," class to_label "," class "]}," Heading to_html":{"type":"method","name":"to_html","children":[{"type":"method","name":"handle_special_CROSSREF","children":[],"asgn":[],"call":[]}],"call":[]}," Heading to_label":{"type":"method","name":"to_label","children":[],"call":[]}," Formatter ignore":{"type":"method","name":"ignore","children":[],"call":[]}," Formatter accept_document":{"type":"method","name":"accept_document","children":[],"call":["item accept ","document parts each ","document parts "," accept_document "]}," Document table_of_contents":{"type":"method","name":"table_of_contents","children":[],"call":[" accept ","RDoc Markup ToTableOfContents  to_toc "]}," Document merged?":{"type":"method","name":"merged?","children":[],"call":["RDoc Markup Document  === ","@parts first "]}," Document merge":{"type":"method","name":"merge","children":[],"call":[" parts << "," parts ","self_part file == ","other_part file ","self_part file "," parts delete_if ","other parts each ","other parts "," empty? "]}," Document file=":{"type":"method","name":"file=","children":[],"call":["location absolute_name ","location relative_name "]}," Attribute each_name_of":{"type":"method","name":"each_name_of","children":[],"call":[]}," Attribute as_string":{"type":"method","name":"as_string","children":[],"call":[]}," Attribute bitmap_for":{"type":"method","name":"bitmap_for","children":[],"call":[]}," AttrSpan []":{"type":"method","name":"[]","children":[],"call":["@attrs [] "]}," AttrSpan set_attrs":{"type":"method","name":"set_attrs","children":[],"call":["@attrs [] ","start + ","(send\n  (ivar :@exclusive) :&\n  (lvar :bits)) != ","@exclusive & ","(send\n  (ivar :@exclusive) :&\n  (send\n    (ivar :@attrs) :[]\n    (lvar :i))) == "]}," AttrSpan initialize":{"type":"method","name":"initialize","children":[],"call":["Array  new "]}," AttrChanger inspect":{"type":"method","name":"inspect","children":[],"call":["+%s/-%s % ","RDoc Markup Attribute  as_string "," turn_off "," turn_on ","+%d/-%d % "]}," AttrChanger to_s":{"type":"method","name":"to_s","children":[],"call":["RDoc Markup Attribute  as_string "," turn_off "," turn_on "]}," Include hash":{"type":"method","name":"hash","children":[],"call":["(ivar :@name) hash "," module "]}," ClassModule description":{"type":"method","name":"description","children":[],"call":[" markup "]}," JsonIndex search_string":{"type":"method","name":"search_string","children":[],"call":["string downcase gsub ","string downcase "]}," JsonIndex reset":{"type":"method","name":"reset","children":[],"call":[]}," JsonIndex file_dir":{"type":"method","name":"file_dir","children":[],"call":["@parent_generator file_dir "]}," JsonIndex class_dir":{"type":"method","name":"class_dir","children":[],"call":["@parent_generator class_dir "]}," JsonIndex index_pages":{"type":"method","name":"index_pages","children":[],"call":["@index [] << ","@index [] ","record shift "," search_string ","page search_record "," debug_msg ","page page_name ","pages each ","file text? ","@files select ","page search_record  shift ","page search_page search_record  "]}," JsonIndex index_methods":{"type":"method","name":"index_methods","children":[],"call":["@index [] << ","@index [] "," search_string ","record shift ","method search_record "," debug_msg ","method full_name ","list each ","method parent full_name ","method parent ","method name ","(send\n  (send\n    (ivar :@classes) :uniq) :map) flatten sort_by ","(send\n  (send\n    (ivar :@classes) :uniq) :map) flatten ","klass method_list ","@classes uniq map ","@classes uniq ","(send\n  (send\n    (ivar :@classes) :uniq) :flat_map) sort_by ","@classes uniq flat_map ","method search_record  shift ","method search_method search_record  "]}," JsonIndex index_classes":{"type":"method","name":"index_classes","children":[],"call":["@index [] << ","@index [] "," search_string ","record shift ","klass search_record "," debug_msg ","klass full_name ","documented each ","klass document_self_or_methods ","@classes uniq select ","@classes uniq ","klass search_record  shift ","klass search_klass search_record  "]}," JsonIndex generate":{"type":"method","name":"generate","children":[],"call":["FileUtils  install ","File  join ","Dir  [] each ","Dir  [] ","Dir  chdir ","JSON  dump ","io write ","io set_encoding ","Object  const_defined? ","index_file open ","FileUtils  mkdir_p ","index_file dirname ","out_dir + ","@base_dir + ","@options op_dir ","@options dry_run "," debug_msg ","  writing search index to %s % "," index_pages "," index_methods "," index_classes "," reset ","RDoc TopLevel  all_classes_and_modules sort ","RDoc TopLevel  all_classes_and_modules ","top_levels sort "," build_index ","index_file utime ","Time  at gmtime ","Time  at ","ENV  [] to_i ","ENV  [] ","index_file atime ","ENV  [] nil? ","out_dir +  open ","out_dir +  dirname ","@base_dir +  + ","out_dir +  utime ","out_dir +  atime "]}," JsonIndex debug_msg":{"type":"method","name":"debug_msg","children":[],"call":["$stderr puts "]}," JsonIndex initialize":{"type":"method","name":"initialize","children":[],"call":["@parent_generator base_dir ","File  expand_path ","parent_generator store "]}," Darkfish render":{"type":"method","name":"render","children":[],"call":["template result ","template filename= ","template_file to_s "," template_for ","@template_dir + "," template_for  result "," template_for  filename= "," template_for _file to_s ","@template_dir +  to_s ","  template_for _for ","@ template_for _dir + "]}," Darkfish assemble_template":{"type":"method","name":"assemble_template","children":[],"call":["footer_file read ","head_file read ","@template_dir + ","body =~ ","body_file read ","@template_dir +  read ","body_file read  =~ ","body_file read _file read "]}," Darkfish generate_table_of_contents":{"type":"method","name":"generate_table_of_contents","children":[],"call":[" raise ","error set_backtrace ","e backtrace ","RDoc Error  new ","e class ","e message "," binding "," render_template ","@outputdir relative_path_from ","out_file dirname ","@outputdir + "," debug_msg ","template_file exist? ","@template_dir + ","@base_dir + + ","@base_dir + ","@options op_dir ","@options title ","rel_prefix + "," setup ","here local_variable_set ","RDoc Error  new  set_backtrace ","@outputdir +  dirname ","@base_dir + +  dirname ","@template_dir +  exist? ","@outputdir relative_path_from  + "," binding  local_variable_set "]}," Darkfish copy_static":{"type":"method","name":"copy_static","children":[],"call":["FileUtils  install ","fu_options merge ","FileUtils  mkdir_p ","File  directory? ","@outputdir + ","Dir  [] each ","Dir  [] ","File  join ","Dir  chdir ","@options static_path each ","@options static_path ","@options dry_run ","@options static_path empty? ","@base_dir + "]}," CrossReference resolve":{"type":"method","name":"resolve","children":[],"call":["@seen []= ","ref display? ","name =~ ","name == ","RDoc Alias  === ","RDoc TopLevel  page ","ref ! ","@context find_symbol ","container find_ancestor_local_symbol ","RDoc TopLevel  === ","container find_local_symbol ","type == ","(str \"^([.#]|::)\") =~ ","@context find_symbol_module ","(begin\n  (const nil :CLASS_REGEXP_STR)) =~ ","@seen [] ","@seen include? ","@store page ","new == ",". == "," resolve_method ","RDoc TopLevel  page  display? ","container find_ancestor_local_symbol  display? ","container find_local_symbol  display? ","@context find_symbol  display? ","@store page  display? "," resolve_method  display? ","RDoc TopLevel  page  ! ","container find_ancestor_local_symbol  ! ","container find_local_symbol  ! ","@context find_symbol  ! ","@store page  ! "," resolve_method  ! ","@context find_symbol_module  find_ancestor_local_symbol ","@context find_symbol_module  find_local_symbol "]}," CrossReference initialize":{"type":"method","name":"initialize","children":[],"call":["context store "]}," Context sort_sections":{"type":"method","name":"sort_sections","children":[],"call":["(send\n  (ivar :@sections) :sort_by) map ","title to_s ","@sections sort_by ","@sections values_at compact ","@sections values_at ","TOMDOC_TITLES_SORT  == ","(send\n  (lvar :titles) :|\n  (const nil :TOMDOC_TITLES)) sort_by ","titles | ","titles length > ","titles length ","@sections map "]}," Context sections_hash":{"type":"method","name":"sections_hash","children":[],"call":[]}," Context sections":{"type":"method","name":"sections","children":[],"call":["@sections values "]}," Context section_contents":{"type":"method","name":"section_contents","children":[],"call":["sections first title ! ","sections first title ","sections first ","sections length == ","sections length ","used_sections [] "," sort_sections select "," sort_sections ","used_sections []= ","method section ","method display? "," each_method "]}," Context each_section":{"type":"method","name":"each_section","children":[],"call":["attributes [] sort ","attributes [] ","constants [] sort ","constants [] "," sort_sections each "," sort_sections ","attributes default= ","attribute section ","@attributes group_by ","constants default= ","constant section ","@constants group_by "," enum_for "," __method__ "," block_given? ","(send\n  (ivar :@sections) :sort_by) each ","title to_s ","@sections sort_by ","attributes [] select sort ","attributes [] select ","constants [] select sort ","constants [] select "]}," Context each_ancestor":{"type":"method","name":"each_ancestor","children":[],"call":[]}," Context current_section":{"type":"method","name":"current_section","children":[],"call":[]}," Context add_section":{"type":"method","name":"add_section","children":[],"call":["@sections []= ","Section  new ","section comment= ","@sections [] ","section add_comment ","@Section  new s []= ","@@sections [] s []= ","Section  new  comment= ","@sections []  comment= ","@Section  new s [] ","@@sections [] s [] ","Section  new  add_comment ","@sections []  add_comment "]}," Section sequence":{"type":"method","name":"sequence","children":[],"call":[" warn "]}," Section plain_html":{"type":"method","name":"plain_html","children":[],"call":[]}," Section inspect":{"type":"method","name":"inspect","children":[],"call":["#<%s:0x%x %p> % "," title "," object_id "," class "]}," Section extract_comment":{"type":"method","name":"extract_comment","children":[],"call":["comment text= ","rest sub ","start chomp ","start empty? ","comment text =~ ","comment text "," raise ","comment inspect ","RDoc Comment  new "," extract_comment ","comment map "]}," Section comment=":{"type":"method","name":"comment=","children":[],"call":["comment text ","@comment text ","comment empty? "," extract_comment "," extract_comment  text ","@ extract_comment  text "," extract_comment  empty? "," extract_ extract_comment  "]}," Section aref":{"type":"method","name":"aref","children":[],"call":["CGI  escape gsub sub ","CGI  escape gsub ","CGI  escape "]}," Section ==":{"type":"method","name":"==","children":[],"call":["@title == ","other title "," class === "," class "]}," Section initialize":{"type":"method","name":"initialize","children":[],"call":[" extract_comment ","@@sequence dup ","@@sequence succ! ","title strip "," add_comment ","@@sequence succ ","@@@sequence dup  dup ","@@sequence succ  dup ","@@@sequence dup  succ! ","@@sequence succ  succ! ","@@@sequence dup  succ ","@@sequence succ  succ "]}," Comment tomdoc?":{"type":"method","name":"tomdoc?","children":[],"call":["@format == "]}," Comment text=":{"type":"method","name":"text=","children":[],"call":[" raise ","@text nil? ","text dup ","text nil? ","text dup  nil? "]}," Comment remove_private":{"type":"method","name":"remove_private","children":[],"call":["@text sub ","@text gsub ","empty force_encoding ","@text encoding ","Object  const_defined? ","RDoc Encoding  change_encoding ","@text sub  sub ","@text gsub  sub ","@text sub  gsub ","@text gsub  gsub ","RDoc Encoding  change_encoding  force_encoding ","@text sub  encoding ","@text gsub  encoding "]}," Comment parse":{"type":"method","name":"parse","children":[],"call":["@document file= "]}," Comment normalized?":{"type":"method","name":"normalized?","children":[],"call":[]}," Comment normalize":{"type":"method","name":"normalize","children":[],"call":[" normalize_comment "]}," Comment inspect":{"type":"method","name":"inspect","children":[],"call":["#<%s:%x %s %p> % ","@location absolute_name "," object_id "," class ","@location relative_name ","@@location relative_name  absolute_name ","@@location relative_name  relative_name "]}," Comment format=":{"type":"method","name":"format=","children":[],"call":[]}," Comment force_encoding":{"type":"method","name":"force_encoding","children":[],"call":["@text force_encoding "]}," Comment empty?":{"type":"method","name":"empty?","children":[],"call":["@text empty? "]}," Comment extract_call_seq":{"type":"method","name":"extract_call_seq","children":[],"call":["method call_seq= ","seq gsub! ","@text sub! ","seq chomp ","@text slice! ","@text [] ","seq_stop + ","$~ offset last ","$~ offset ","@text [] =~ ","Regexp  escape ","1 =~ ","@text =~ ","@text sub ","regexp =~ ","$~ [] ","method call_@text [] = ","method call_$~ [] = ","@text []  gsub! ","$~ []  gsub! ","@text sub  sub! ","@text []  chomp ","$~ []  chomp ","@text sub  slice! ","@text sub  [] ","@text [] _stop + ","$~ [] _stop + ","seq_stop +  + ","@text sub  [] =~ ","@text sub  =~ ","@text sub  sub "]}," Comment ==":{"type":"method","name":"==","children":[],"call":["other location == ","other location ","other text == ","other text "," class === "," class "]}," Comment initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["copy text dup ","copy text "]}," Comment initialize":{"type":"method","name":"initialize","children":[],"call":["text dup ","text nil? "]}," CodeObject ignored?":{"type":"method","name":"ignored?","children":[],"call":[]}," CodeObject ignore":{"type":"method","name":"ignore","children":[],"call":[" stop_doc "]}," CodeObject file_name":{"type":"method","name":"file_name","children":[],"call":["@file absolute_name "]}," CodeObject each_parent":{"type":"method","name":"each_parent","children":[],"call":["code_object parent ","code_object parent  parent "]}," CodeObject display?":{"type":"method","name":"display?","children":[],"call":["@ignored ! ","@suppressed ! "," documented? "]}," ClassModule search_record":{"type":"method","name":"search_record","children":[],"call":[" snippet "," path "," full_name "," name "]}," ClassModule parse":{"type":"method","name":"parse","children":[],"call":[" raise ","comment_location class ","doc file= ","comment_location location ","comment_location format ","comment_location text ","RDoc Markup Document  new ","comment_location map ","location absolute_name "]}," ClassModule merge_collections":{"type":"method","name":"merge_collections","children":[],"call":["things each ","my_things [] each ","my_things [] ","my_things include? ","other_things each ","other_files include? ","my_things delete_if ","thing file ","other group_by ","mine group_by "," add_things "," remove_things "]}," ClassModule each_ancestor":{"type":"method","name":"each_ancestor","children":[],"call":["String  === "," ancestors each "," ancestors "," == "," enum_for "," __method__ "," block_given? "]}," ClassModule document_self_or_methods":{"type":"method","name":"document_self_or_methods","children":[],"call":["m document_self "," method_list any? "," method_list "," document_self "]}," ClassModule add_comment":{"type":"method","name":"add_comment","children":[],"call":[" comment= ","@comment_location << "," normalize_comment ","comment normalize "," document_self ","comment empty? "," document_self ! ","l == ","@comment_location delete_if ","location parser == ","location parser ","  normalize_comment = ","@ normalize_comment _location << "," normalize_ normalize_comment  "," normalize_comment  normalize "," normalize_comment  empty? ","@ normalize_comment _location delete_if "]}," Attr pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp ","q breakable ","q text "," comment empty? "," comment ","q group "," visibility "," rw "," full_name "," class name "," class "]}," AnyMethod param_list":{"type":"method","name":"param_list","children":[],"call":["param sub ","params map ","params gsub split ","params gsub ","params << ","@params sub ","params sub ","@call_seq split last ","@call_seq split ","params gsub split reject ","params sub! ","params gsub split  map ","@params sub  map ","params sub  map ","@call_seq split last  map ","params gsub split reject  map ","params gsub split  gsub split ","@params sub  gsub split ","params sub  gsub split ","@call_seq split last  gsub split ","params gsub split reject  gsub split ","params gsub split  gsub ","@params sub  gsub ","params sub  gsub ","@call_seq split last  gsub ","params gsub split reject  gsub ","params gsub split  << ","@params sub  << ","params sub  << ","@call_seq split last  << ","params gsub split reject  << ","@params gsub split  sub ","@@params sub  sub ","@params sub  sub ","@@call_seq split last  sub ","@params gsub split reject  sub ","params gsub split  sub ","params sub  sub ","@call_seq split last  sub ","params gsub split reject  sub ","params gsub split  gsub split reject ","@params sub  gsub split reject ","params sub  gsub split reject ","@call_seq split last  gsub split reject ","params gsub split reject  gsub split reject ","params gsub split  sub! ","@params sub  sub! ","params sub  sub! ","@call_seq split last  sub! ","params gsub split reject  sub! "]}," Gauntlet run_the_gauntlet":{"type":"method","name":"run_the_gauntlet","children":[],"call":["type == "]}," Gauntlet initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Parser use_format":{"type":"method","name":"use_format","children":[],"call":[]}," ToTableOfContents ignore":{"type":"method","name":"ignore","children":[],"call":[]}," ToHtmlSnippet accept_rule":{"type":"method","name":"accept_rule","children":[],"call":[]}," ToHtmlSnippet accept_raw":{"type":"method","name":"accept_raw","children":[],"call":[]}," Heading label":{"type":"method","name":"label","children":[],"call":[" class to_label convert "," text dup "," text "," class to_label "," class "]}," RD InlineParser _reduce_none":{"type":"method","name":"_reduce_none","children":[],"call":["val [] "]}," RD InlineParser _reduce_136":{"type":"method","name":"_reduce_136","children":[],"call":["result << ","val [] "]}," RD InlineParser _reduce_115":{"type":"method","name":"_reduce_115","children":[],"call":["val [] "]}," RD InlineParser _reduce_114":{"type":"method","name":"_reduce_114","children":[],"call":["val [] "]}," RD InlineParser _reduce_113":{"type":"method","name":"_reduce_113","children":[],"call":["val [] "]}," RD InlineParser _reduce_111":{"type":"method","name":"_reduce_111","children":[],"call":[" inline ","val [] "]}," RD InlineParser _reduce_109":{"type":"method","name":"_reduce_109","children":[],"call":["result << ","val [] "]}," RD InlineParser _reduce_102":{"type":"method","name":"_reduce_102","children":[],"call":["val [] "," inline "]}," RD InlineParser _reduce_101":{"type":"method","name":"_reduce_101","children":[],"call":["@block_parser add_footnote ","val [] rdoc ","val [] "]}," RD InlineParser _reduce_78":{"type":"method","name":"_reduce_78","children":[],"call":["result << ","val [] "]}," RD InlineParser _reduce_64":{"type":"method","name":"_reduce_64","children":[],"call":["result << ","val [] "]}," RD InlineParser _reduce_62":{"type":"method","name":"_reduce_62","children":[],"call":["result << ","val [] "]}," RD InlineParser _reduce_60":{"type":"method","name":"_reduce_60","children":[],"call":["result << ","val [] "]}," RD InlineParser _reduce_59":{"type":"method","name":"_reduce_59","children":[],"call":[" inline ","val [] "]}," RD InlineParser _reduce_58":{"type":"method","name":"_reduce_58","children":[],"call":[" inline ","val [] "]}," RD InlineParser _reduce_57":{"type":"method","name":"_reduce_57","children":[],"call":["val [] "]}," RD InlineParser _reduce_46":{"type":"method","name":"_reduce_46","children":[],"call":["val [] "]}," RD InlineParser _reduce_45":{"type":"method","name":"_reduce_45","children":[],"call":["val [] append ","val [] "]}," RD InlineParser _reduce_44":{"type":"method","name":"_reduce_44","children":[],"call":[" inline ","val [] "]}," RD InlineParser _reduce_43":{"type":"method","name":"_reduce_43","children":[],"call":["val [] append ","val [] "]}," RD InlineParser _reduce_41":{"type":"method","name":"_reduce_41","children":[],"call":[" inline ","val [] "]}," RD InlineParser _reduce_40":{"type":"method","name":"_reduce_40","children":[],"call":["val [] "]}," RD InlineParser _reduce_39":{"type":"method","name":"_reduce_39","children":[],"call":["val [] append ","val [] "]}," RD InlineParser _reduce_38":{"type":"method","name":"_reduce_38","children":[],"call":["val [] append ","val [] "]}," RD InlineParser _reduce_37":{"type":"method","name":"_reduce_37","children":[],"call":[" inline ","val [] "]}," RD InlineParser _reduce_36":{"type":"method","name":"_reduce_36","children":[],"call":["val [] "]}," RD InlineParser _reduce_34":{"type":"method","name":"_reduce_34","children":[],"call":[" inline ","val [] "]}," RD InlineParser _reduce_33":{"type":"method","name":"_reduce_33","children":[],"call":[" inline ","val [] "]}," RD InlineParser _reduce_32":{"type":"method","name":"_reduce_32","children":[],"call":[" inline ","val [] "]}," RD InlineParser _reduce_31":{"type":"method","name":"_reduce_31","children":[],"call":[" inline ","val [] "]}," RD InlineParser _reduce_30":{"type":"method","name":"_reduce_30","children":[],"call":["val [] "]}," RD InlineParser _reduce_29":{"type":"method","name":"_reduce_29","children":[],"call":["val [] "]}," RD InlineParser _reduce_27":{"type":"method","name":"_reduce_27","children":[],"call":[" inline ","val [] reference ","val [] ","val [] val [] reference erence "]}," RD InlineParser _reduce_26":{"type":"method","name":"_reduce_26","children":[],"call":["val [] "]}," RD InlineParser _reduce_25":{"type":"method","name":"_reduce_25","children":[],"call":[" inline ","val [] reference ","val [] "]}," RD InlineParser _reduce_24":{"type":"method","name":"_reduce_24","children":[],"call":[" inline ","val [] "]}," RD InlineParser _reduce_23":{"type":"method","name":"_reduce_23","children":[],"call":["val [] reference ","val [] "]}," RD InlineParser _reduce_22":{"type":"method","name":"_reduce_22","children":[],"call":["val [] reference ","val [] "]}," RD InlineParser _reduce_21":{"type":"method","name":"_reduce_21","children":[],"call":[" inline ","val [] reference ","val [] "]}," RD InlineParser _reduce_20":{"type":"method","name":"_reduce_20","children":[],"call":[" inline ","val [] "]}," RD InlineParser _reduce_19":{"type":"method","name":"_reduce_19","children":[],"call":["inline reference ","val [] "]}," RD InlineParser _reduce_18":{"type":"method","name":"_reduce_18","children":[],"call":["val [] join ","val [] "]}," RD InlineParser _reduce_17":{"type":"method","name":"_reduce_17","children":[],"call":["@block_parser add_label ","label reference ","val [] ","@block_parser add_val []  ","val []  reference "]}," RD InlineParser _reduce_16":{"type":"method","name":"_reduce_16","children":[],"call":[" inline ","val [] "]}," RD InlineParser _reduce_15":{"type":"method","name":"_reduce_15","children":[],"call":[" inline ","val [] "]}," RD InlineParser _reduce_14":{"type":"method","name":"_reduce_14","children":[],"call":[" inline ","val [] "]}," RD InlineParser _reduce_13":{"type":"method","name":"_reduce_13","children":[],"call":[" inline ","val [] "]}," RD InlineParser _reduce_3":{"type":"method","name":"_reduce_3","children":[],"call":["val [] "]}," RD InlineParser _reduce_2":{"type":"method","name":"_reduce_2","children":[],"call":["result append ","val [] "]}," RD InlineParser inline":{"type":"method","name":"inline","children":[],"call":["RDoc RD Inline  new "]}," RD InlineParser next_words_on_error":{"type":"method","name":"next_words_on_error","children":[],"call":["@src rest ","@src rest [] ","n - ","@src rest index ","@src rest index  - ","@src rest i@src rest index dex "]}," RD InlineParser last_line":{"type":"method","name":"last_line","children":[],"call":["src [] ","n + ","src rindex ","src rindex  + ","src risrc rindex dex "]}," RD InlineParser prev_words_on_error":{"type":"method","name":"prev_words_on_error","children":[],"call":[" last_line ","(begin\n  (send\n    (const nil :Regexp) :quote\n    (lvar :ev))) =~ ","Regexp  quote "]}," RD InlineParser on_error":{"type":"method","name":"on_error","children":[],"call":[" raise ","message << ","  * + + ","  * + ","^ * ","ev length ","  * "," next_words_on_error ","@block_parser line_index - ","@block_parser line_index ","4 + ","prev_words length "," prev_words_on_error ","@src rest lines to_a length ","@src rest lines to_a ","@src rest lines ","@src rest "," prev_words_on_error  length ","  prev_words_on_error _on_error "]}," RD InlineParser next_token":{"type":"method","name":"next_token","children":[],"call":["@src terminate ","@pre << ","@src rest ","@src scan ","@src eos? "]}," RD InlineParser parse":{"type":"method","name":"parse","children":[],"call":[" do_parse to_s "," do_parse ","StringScanner  new "," dup "]}," RD InlineParser initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RD BlockParser _reduce_none":{"type":"method","name":"_reduce_none","children":[],"call":["val [] "]}," RD BlockParser _reduce_72":{"type":"method","name":"_reduce_72","children":[],"call":[]}," RD BlockParser _reduce_71":{"type":"method","name":"_reduce_71","children":[],"call":[]}," RD BlockParser _reduce_69":{"type":"method","name":"_reduce_69","children":[],"call":[]}," RD BlockParser _reduce_68":{"type":"method","name":"_reduce_68","children":[],"call":["val [] "]}," RD BlockParser _reduce_67":{"type":"method","name":"_reduce_67","children":[],"call":["result concat ","val [] "]}," RD BlockParser _reduce_66":{"type":"method","name":"_reduce_66","children":[],"call":["(send\n  (lvar :val) :[]\n  (int 0)) concat ","val [] "]}," RD BlockParser _reduce_65":{"type":"method","name":"_reduce_65","children":[],"call":[" paragraph ","val [] "]}," RD BlockParser _reduce_64":{"type":"method","name":"_reduce_64","children":[],"call":[" paragraph ","(send\n  (lvar :val) :[]\n  (int 0)) concat ","val [] "]}," RD BlockParser _reduce_63":{"type":"method","name":"_reduce_63","children":[],"call":[" paragraph ","val [] "]}," RD BlockParser _reduce_62":{"type":"method","name":"_reduce_62","children":[],"call":[" paragraph ","(send\n  (lvar :val) :[]\n  (int 0)) concat ","val [] "]}," RD BlockParser _reduce_57":{"type":"method","name":"_reduce_57","children":[],"call":[]}," RD BlockParser _reduce_55":{"type":"method","name":"_reduce_55","children":[],"call":[]}," RD BlockParser _reduce_54":{"type":"method","name":"_reduce_54","children":[],"call":[]}," RD BlockParser _reduce_52":{"type":"method","name":"_reduce_52","children":[],"call":["result concat ","val [] "]}," RD BlockParser _reduce_51":{"type":"method","name":"_reduce_51","children":[],"call":[]}," RD BlockParser _reduce_50":{"type":"method","name":"_reduce_50","children":[],"call":["val [] "]}," RD BlockParser _reduce_49":{"type":"method","name":"_reduce_49","children":[],"call":["val [] "]}," RD BlockParser _reduce_48":{"type":"method","name":"_reduce_48","children":[],"call":["(send\n  (lvar :val) :[]\n  (int 1)) concat ","val [] "]}," RD BlockParser _reduce_47":{"type":"method","name":"_reduce_47","children":[],"call":["RDoc Markup ListItem  new ","val [] ","val [] strip "]}," RD BlockParser _reduce_46":{"type":"method","name":"_reduce_46","children":[],"call":[]}," RD BlockParser _reduce_45":{"type":"method","name":"_reduce_45","children":[],"call":["result push ","val [] "]}," RD BlockParser _reduce_44":{"type":"method","name":"_reduce_44","children":[],"call":["RDoc Markup List  new ","val [] "]}," RD BlockParser _reduce_43":{"type":"method","name":"_reduce_43","children":[],"call":["RDoc Markup ListItem  new ","val [] ","@inline_parser parse ","val [] strip "]}," RD BlockParser _reduce_42":{"type":"method","name":"_reduce_42","children":[],"call":[]}," RD BlockParser _reduce_41":{"type":"method","name":"_reduce_41","children":[],"call":["result push ","val [] "]}," RD BlockParser _reduce_40":{"type":"method","name":"_reduce_40","children":[],"call":["RDoc Markup List  new ","val [] "]}," RD BlockParser _reduce_39":{"type":"method","name":"_reduce_39","children":[],"call":["RDoc Markup ListItem  new ","val [] "]}," RD BlockParser _reduce_38":{"type":"method","name":"_reduce_38","children":[],"call":[]}," RD BlockParser _reduce_37":{"type":"method","name":"_reduce_37","children":[],"call":["result push ","val [] "]}," RD BlockParser _reduce_36":{"type":"method","name":"_reduce_36","children":[],"call":["RDoc Markup List  new ","val [] "]}," RD BlockParser _reduce_35":{"type":"method","name":"_reduce_35","children":[],"call":["RDoc Markup ListItem  new ","val [] "]}," RD BlockParser _reduce_34":{"type":"method","name":"_reduce_34","children":[],"call":[]}," RD BlockParser _reduce_33":{"type":"method","name":"_reduce_33","children":[],"call":["result push ","val [] "]}," RD BlockParser _reduce_32":{"type":"method","name":"_reduce_32","children":[],"call":["RDoc Markup List  new ","val [] "]}," RD BlockParser _reduce_31":{"type":"method","name":"_reduce_31","children":[],"call":["val [] "]}," RD BlockParser _reduce_30":{"type":"method","name":"_reduce_30","children":[],"call":["val [] << ","val [] "]}," RD BlockParser _reduce_29":{"type":"method","name":"_reduce_29","children":[],"call":["val [] push ","val [] "]}," RD BlockParser _reduce_28":{"type":"method","name":"_reduce_28","children":[],"call":["val [] "]}," RD BlockParser _reduce_27":{"type":"method","name":"_reduce_27","children":[],"call":["val [] "]}," RD BlockParser _reduce_22":{"type":"method","name":"_reduce_22","children":[],"call":[]}," RD BlockParser _reduce_21":{"type":"method","name":"_reduce_21","children":[],"call":["result << "]}," RD BlockParser _reduce_20":{"type":"method","name":"_reduce_20","children":[],"call":["result concat ","val [] "]}," RD BlockParser _reduce_19":{"type":"method","name":"_reduce_19","children":[],"call":["result << ","val [] "]}," RD BlockParser _reduce_18":{"type":"method","name":"_reduce_18","children":[],"call":["RDoc Markup Verbatim  new "," cut_off ","val [] "]}," RD BlockParser _reduce_17":{"type":"method","name":"_reduce_17","children":[],"call":["RDoc Markup Verbatim  new "," cut_off ","val [] "]}," RD BlockParser _reduce_16":{"type":"method","name":"_reduce_16","children":[],"call":["val [] rstrip ","val [] "]}," RD BlockParser _reduce_15":{"type":"method","name":"_reduce_15","children":[],"call":["result << ","val [] rstrip ","val [] "]}," RD BlockParser _reduce_14":{"type":"method","name":"_reduce_14","children":[],"call":[" paragraph ","val [] "]}," RD BlockParser _reduce_13":{"type":"method","name":"_reduce_13","children":[],"call":["RDoc Markup Include  new ","val [] "]}," RD BlockParser _reduce_12":{"type":"method","name":"_reduce_12","children":[],"call":["RDoc Markup Heading  new ","val [] [] ","val [] ","@inline_parser parse "]}," RD BlockParser _reduce_11":{"type":"method","name":"_reduce_11","children":[],"call":["val [] parts ","val [] "]}," RD BlockParser _reduce_10":{"type":"method","name":"_reduce_10","children":[],"call":["RDoc Markup BlankLine  new "]}," RD BlockParser _reduce_9":{"type":"method","name":"_reduce_9","children":[],"call":[]}," RD BlockParser _reduce_8":{"type":"method","name":"_reduce_8","children":[],"call":[]}," RD BlockParser _reduce_6":{"type":"method","name":"_reduce_6","children":[],"call":[]}," RD BlockParser _reduce_5":{"type":"method","name":"_reduce_5","children":[],"call":[]}," RD BlockParser _reduce_4":{"type":"method","name":"_reduce_4","children":[],"call":["val [] "]}," RD BlockParser _reduce_3":{"type":"method","name":"_reduce_3","children":[],"call":["val [] concat ","val [] "]}," RD BlockParser _reduce_2":{"type":"method","name":"_reduce_2","children":[],"call":[" raise "]}," RD BlockParser _reduce_1":{"type":"method","name":"_reduce_1","children":[],"call":["RDoc Markup Document  new ","val [] "]}," RD BlockParser add_label":{"type":"method","name":"add_label","children":[],"call":["@labels []= "]}," RD BlockParser add_footnote":{"type":"method","name":"add_footnote","children":[],"call":["@footnotes << ","RDoc Markup Paragraph  new ","@footnotes length + ","@footnotes length ","RDoc Markup BlankLine  new ","@footnotes length / + ","@footnotes length / "]}," RD BlockParser paragraph":{"type":"method","name":"paragraph","children":[],"call":["RDoc Markup Paragraph  new ","@inline_parser parse "," cut_off join rstrip "," cut_off join "," cut_off "]}," RD BlockParser content":{"type":"method","name":"content","children":[],"call":["(send\n  (lvar :values) :map) join ","value content ","values map "]}," RD BlockParser format_line_num":{"type":"method","name":"format_line_num","children":[],"call":[" sprintf ","line_numbers collect ","(send\n  (lvar :line_numbers) :collect) max ","i to_s length ","i to_s "]}," RD BlockParser get_included":{"type":"method","name":"get_included","children":[],"call":["IO  readlines ","File  exist? ","File  join ","@include_path each ","File  readlines "]}," RD BlockParser parse_subtree":{"type":"method","name":"parse_subtree","children":[],"call":["@subparser parse ","RDoc RD BlockParser  new "]}," RD BlockParser line_index":{"type":"method","name":"line_index","children":[],"call":[]}," RD BlockParser on_error":{"type":"method","name":"on_error","children":[],"call":[" raise ","@src [] chomp ","@src [] ","@i + ","@i - "," format_line_num "]}," RD BlockParser set_term_to_element":{"type":"method","name":"set_term_to_element","children":[],"call":["parent set_term_without_document_struct "]}," RD BlockParser cut_off":{"type":"method","name":"cut_off","children":[],"call":[" raise ","ret push ","whiteline_buf clear ","ret concat ","whiteline_buf empty? ","(str \"^\") =~ ","whiteline_buf push ","src shift ","Regexp  quote ","whitesrc shift _buf clear ","whitesrc shift _buf empty? ","whitesrc shift _buf push "]}," RD BlockParser if_current_indent_equal":{"type":"method","name":"if_current_indent_equal","children":[],"call":["@indent_stack pop ","@indent_stack push ","indent [] ","@current_indent size ","indent index == ","indent index ","@current_indent == ","indent sub ","  * ","@indent sub _stack pop ","@indent sub _stack push ","indent sub  [] ","@current_indent sub  size ","indent sub  index == ","indent sub  index ","@current_indent sub  == ","indent sub  sub "]}," RD BlockParser next_token":{"type":"method","name":"next_token","children":[],"call":[" raise "," if_current_indent_equal ","@indent_stack push ","    + ","(str \"\\\\s*\") === ","  * << ","  * ","mark size ","  << "," parse_subtree "," get_included ","suffix == ","file [] ","MARK_TO_LEVEL  [] ","rest strip! "," next_token ","@src [] ","@indent_stack join ","@part_content push ","tmpfile close ","tmpfile print "," open ","@tree tmp_dir + + + ","@tree tmp_dir + + ","@tree tmp_dir + ","@tree tmp_dir ","TMPFILE  [] ","TMPFILE  join ","part_out to_a ","@tree filter [] mode == ","@tree filter [] mode ","@tree filter [] ","@tree filter ","@tree filter [] call ","@part_content clear ","RDoc RD Part  new ","@part_content join ","@in_part != ","  * + ","  + "," parse_ parse_subtree  ","file []  == ","@RDoc RD Part  new _content push "," open  close "," open  print ","@tree filter [] call  to_a ","RDoc RD Part  new _out to_a ","@RDoc RD Part  new _content clear ","@RDoc RD Part  new _content join ","@in_RDoc RD Part  new  != "]}," RD BlockParser parse":{"type":"method","name":"parse","children":[],"call":["document parts push ","document parts ","document parts concat ","document parts << ","RDoc Markup Rule  new ","document parts pop ","@footnotes empty? "," do_parse ","@indent_stack join ","@src push "," do_parse  parts push "," do_parse  parts "," do_parse  parts concat "," do_parse  parts << "," do_parse  parts pop "]}," RD BlockParser initialize":{"type":"method","name":"initialize","children":[],"call":["RDoc RD InlineParser  new "]}," Context Section sequence":{"type":"method","name":"sequence","children":[],"call":[" warn "]}," Context Section extract_comment":{"type":"method","name":"extract_comment","children":[],"call":["rest sub ","start chomp ","start empty? ","comment =~ "]}," Context Section comment=":{"type":"method","name":"comment=","children":[],"call":["comment empty? "," extract_comment "," extract_comment  empty? "," extract_ extract_comment  "]}," Context Section aref":{"type":"method","name":"aref","children":[],"call":["CGI  escape gsub sub ","CGI  escape gsub ","CGI  escape "]}," Markup AttrChanger inspect":{"type":"method","name":"inspect","children":[],"call":["+%s/-%s % ","Attribute  as_string "," turn_off "," turn_on "]}," TopLevel marshal_load":{"type":"method","name":"marshal_load","children":[],"call":["array [] "," initialize "]}," TopLevel marshal_dump":{"type":"method","name":"marshal_dump","children":[],"call":[" parse "]}," TestCase verbose_capture_io":{"type":"method","name":"verbose_capture_io","children":[],"call":[" capture_io "]}," TestCase verb":{"type":"method","name":"verb","children":[],"call":[" Verbatim  new "]}," TestCase raw":{"type":"method","name":"raw","children":[],"call":[" Raw  new "]}," TestCase rule":{"type":"method","name":"rule","children":[],"call":[" Rule  new "]}," TestCase para":{"type":"method","name":"para","children":[],"call":[" Paragraph  new "]}," TestCase list":{"type":"method","name":"list","children":[],"call":[" List  new "]}," TestCase item":{"type":"method","name":"item","children":[],"call":[" ListItem  new "]}," TestCase head":{"type":"method","name":"head","children":[],"call":[" Heading  new "]}," TestCase hard_break":{"type":"method","name":"hard_break","children":[],"call":[" HardBreak  new "]}," TestCase doc":{"type":"method","name":"doc","children":[],"call":[" Document  new "]}," TestCase block":{"type":"method","name":"block","children":[],"call":[" BlockQuote  new "]}," TestCase blank_line":{"type":"method","name":"blank_line","children":[],"call":[" BlankLine  new "]}," Store unique_modules":{"type":"method","name":"unique_modules","children":[],"call":[]}," Store unique_classes_and_modules":{"type":"method","name":"unique_classes_and_modules","children":[],"call":["@unique_classes + "]}," Store unique_classes":{"type":"method","name":"unique_classes","children":[],"call":[]}," Store title=":{"type":"method","name":"title=","children":[],"call":["@cache []= "]}," Store title":{"type":"method","name":"title","children":[],"call":["@cache [] "]}," Store source":{"type":"method","name":"source","children":[],"call":["File  basename ","File  expand_path "," type "]}," Store save_page":{"type":"method","name":"save_page","children":[],"call":["io write "," open ","Marshal  dump "," cache [] << ","page full_name "," cache [] "," cache ","FileUtils  mkdir_p ","File  dirname "," page_file ","page text? ","File  open "]}," Store save":{"type":"method","name":"save","children":[],"call":[" save_cache "," save_page "," all_files each "," all_files "," save_method ","klass each_attribute ","klass each_method "," save_class "," all_classes_and_modules each "," all_classes_and_modules "," load_cache "]}," Store remove_nodoc":{"type":"method","name":"remove_nodoc","children":[],"call":["all_hash delete ","context remove_from_documentation? ","all_hash [] ","all_hash keys each ","all_hash keys ","all_hash []  remove_from_documentation? "]}," Store page_file":{"type":"method","name":"page_file","children":[],"call":["File  join ","File  dirname ","File  basename gsub ","File  basename "]}," Store page":{"type":"method","name":"page","children":[],"call":["file page_name == ","file page_name ","file text? ","@files_hash each_value find ","@files_hash each_value ","@text_files_hash each_value find ","@text_files_hash each_value ","file base_name == ","file base_name "]}," Store modules_hash":{"type":"method","name":"modules_hash","children":[],"call":[]}," Store module_names":{"type":"method","name":"module_names","children":[],"call":["@cache [] "]}," Store make_variable_map":{"type":"method","name":"make_variable_map","children":[],"call":["map []= ","class_module full_name ","variables each "]}," Store main=":{"type":"method","name":"main=","children":[],"call":["@cache []= "]}," Store main":{"type":"method","name":"main","children":[],"call":["@cache [] "]}," Store load_page":{"type":"method","name":"load_page","children":[],"call":[" raise ","error set_backtrace ","e backtrace ","MissingFileError  new ","obj store= ","Marshal  load ","io read "," open "," page_file ","File  open ","MissingFileError  new  set_backtrace ","Marshal  load  store= "," page_ page_file  "]}," Store load_class_data":{"type":"method","name":"load_class_data","children":[],"call":[" raise ","error set_backtrace ","e backtrace ","MissingFileError  new ","Marshal  load ","io read "," open "," class_file ","File  open ","MissingFileError  new  set_backtrace "," class_ class_file  "]}," Store load_all":{"type":"method","name":"load_all","children":[],"call":["@files_hash []= "," load_page ","@cache [] each ","@cache [] ","mod modules_hash []= ","mod modules_hash ","mod classes_hash []= ","mod classes_hash "," find_class_or_module ","name =~ "," module_names each "," module_names ","mod full_name "," all_classes_and_modules each "," all_classes_and_modules ","mod attributes replace ","mod attributes "," load_method ","attribute full_name ","mod attributes map ","mod method_list replace ","mod method_list ","method full_name ","mod method_list map "," load_class "," load_cache ","@text_files_hash []= ","page text? "," load_ load_page  "," load_page  text? "]}," Store fix_basic_object_inheritance":{"type":"method","name":"fix_basic_object_inheritance","children":[],"call":["basic superclass= ","File  basename == ","File  basename ","f full_name ","basic in_files any? ","basic in_files ","RUBY_VERSION  >= "," classes_hash [] "," classes_hash "," classes_hash []  superclass= "," classes_hash []  in_files any? "," classes_hash []  in_files "]}," Store find_unique":{"type":"method","name":"find_unique","children":[],"call":["unique << ","full_name == ","cm full_name ","all_hash each_pair "]}," Store find_text_page":{"type":"method","name":"find_text_page","children":[],"call":["file full_name == ","file full_name ","file text? ","@files_hash each_value find ","@files_hash each_value ","@text_files_hash each_value find ","@text_files_hash each_value "]}," Store find_module_named":{"type":"method","name":"find_module_named","children":[],"call":["@modules_hash [] "]}," Store find_file_named":{"type":"method","name":"find_file_named","children":[],"call":["@files_hash [] "]}," Store find_class_or_module":{"type":"method","name":"find_class_or_module","children":[],"call":["@modules_hash [] ","@classes_hash [] ","name =~ "]}," Store find_class_named_from":{"type":"method","name":"find_class_named_from","children":[],"call":[" find_class_named ","from parent ","from find_class_named ","RDoc TopLevel  === ","RDoc Context  === ","from parent  parent "," find_class_named  parent ","from parent  find_class_named "," find_class_named  find_class_named "]}," Store find_class_named":{"type":"method","name":"find_class_named","children":[],"call":["@classes_hash [] "]}," Store find_c_enclosure":{"type":"method","name":"find_c_enclosure","children":[],"call":["@c_enclosure_classes []= ","file add_module ","file store= ","loaded_mod in_files first ","loaded_mod in_files "," load_class_data "," find_class_or_module ","@c_enclosure_names [] ","@c_enclosure_classes fetch ","file add_file add_module ule ","file add_ find_class_or_module ule ","loaded_mod in_files first  add_module ","loaded_mod in_files first  store= ","loaded_file add_module  in_files first ","loaded_ find_class_or_module  in_files first ","loaded_mod in_loaded_mod in_files first s first "," load_class_data  in_files first ","loaded_file add_module  in_files ","loaded_ find_class_or_module  in_files ","loaded_mod in_loaded_mod in_files first s "," load_class_data  in_files "," find_class_or_file add_module ule "," find_class_or_ find_class_or_module ule ","@c_enclosure_@c_enclosure_names [] s [] "]}," Store files_hash":{"type":"method","name":"files_hash","children":[],"call":[]}," Store complete":{"type":"method","name":"complete","children":[],"call":["tl modules_hash []= ","tl modules_hash ","@modules_hash [] ","tl classes_hash []= ","tl classes_hash ","@classes_hash [] ","cm type == ","cm type ","cm full_name ","tl classes_or_modules each ","tl classes_or_modules ","tl classes_hash clear ","tl modules_hash clear ","tl text? ","@files_hash [] ","@files_hash each_key ","cm complete "," unique_classes_and_modules each "," unique_classes_and_modules "," find_unique "," remove_nodoc ","cm ancestors "," all_classes_and_modules each "," all_classes_and_modules "," fix_basic_object_inheritance ","min_visibility == ","@files_hash []  modules_hash []= ","@files_hash []  modules_hash ","@files_hash []  classes_hash []= ","@files_hash []  classes_hash ","cm full_cm full_name  ","@files_hash []  classes_or_modules each ","@files_hash []  classes_or_modules ","@files_hash []  classes_hash clear ","@files_hash []  modules_hash clear ","@files_hash []  text? "]}," Store classes_hash":{"type":"method","name":"classes_hash","children":[],"call":[]}," Store all_modules":{"type":"method","name":"all_modules","children":[],"call":[" modules_hash values "," modules_hash "]}," Store all_files":{"type":"method","name":"all_files","children":[],"call":["@files_hash values "]}," Store all_classes_and_modules":{"type":"method","name":"all_classes_and_modules","children":[],"call":["@classes_hash values + ","@modules_hash values ","@classes_hash values "]}," Store all_classes":{"type":"method","name":"all_classes","children":[],"call":["@classes_hash values "]}," Store add_file":{"type":"method","name":"add_file","children":[],"call":["@files_hash []= ","top_level store= ","RDoc TopLevel  new ","@files_hash [] ","@text_files_hash []= ","top_level text? ","top_level parser= ","RDoc TopLevel  new  store= ","@files_hash []  store= ","RDoc TopLevel  new  text? ","@files_hash []  text? ","RDoc TopLevel  new  parser= ","@files_hash []  parser= "]}," Store add_c_variables":{"type":"method","name":"add_c_variables","children":[],"call":["@c_singleton_class_variables []= ","c_parser singleton_classes ","@c_class_variables []= "," make_variable_map ","c_parser classes ","c_parser top_level relative_name ","c_parser top_level "]}," Store add_c_enclosure":{"type":"method","name":"add_c_enclosure","children":[],"call":["@c_enclosure_classes []= "]}," Store MissingFileError message":{"type":"method","name":"message","children":[],"call":["@store path "]}," Store MissingFileError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Servlet store_for":{"type":"method","name":"store_for","children":[],"call":["RDoc Store  new "," raise ","source_name == ","dir [] ","dir_type == "," ri_paths find "," ri_paths ","RDoc RI Paths  site_dir ","RDoc RI Paths  system_dir ","RDoc RI Paths  home_dir "," installed_docs [] [] "," installed_docs [] "," installed_docs ","1 to_i - ","1 to_i ","File  exist? ","store cache_path ","ERB Util  html_escape ","RDoc Store  new  cache_path "]}," Servlet show_documentation":{"type":"method","name":"show_documentation","children":[],"call":["res content_type "," documentation_page "," documentation_search ","res body= ","generator generate_table_of_contents ","generator generate_index "," generator_for "," if_modified_since ","store cache_path "," documentation_source ","req path "," generator_for  generate_table_of_contents "," generator_for  generate_index ","  generator_for _for "]}," Servlet root_search":{"type":"method","name":"root_search","children":[],"call":["res content_type= ","res body= ","JSON  dump ","info << ","spec summary ","spec full_name ","Gem Specification  load ","path gsub ","search_index << "," installed_docs map "," installed_docs ","Gem Specification  load  summary ","Gem Specification  load  full_name ","spec full_name  gsub "]}," Servlet root":{"type":"method","name":"root","children":[],"call":["res content_type= ","res body= ","generator generate_servlet_root "," installed_docs ","RDoc Generator Darkfish  new ","RDoc Generator Darkfish  new  generate_servlet_root "]}," Servlet ri_paths":{"type":"method","name":"ri_paths","children":[],"call":["RDoc RI Paths  each "]}," Servlet not_found":{"type":"method","name":"not_found","children":[],"call":["res status= ","res body= ","generator generate_servlet_not_found ","req path ","ERB Util  h "]}," Servlet installed_docs":{"type":"method","name":"installed_docs","children":[],"call":["path [] ","File  exist? ","store cache_path ","RDoc Store  new "," ri_paths map "," ri_paths ","store title ","store load_cache ","RDoc Store  new  cache_path ","RDoc Store  new  title ","RDoc Store  new  load_cache "]}," Servlet if_modified_since":{"type":"method","name":"if_modified_since","children":[],"call":[" raise ","res body= ","ims < ","Time  parse ","req [] ","res []= ","last_modified httpdate ","File  stat mtime ","File  stat ","Time  parse  < ","req []  < ","File  stat mtime  httpdate "]}," Servlet generator_for":{"type":"method","name":"generator_for","children":[],"call":["@options title= ","store title ","@options main_page= ","store main ","rdoc options= ","rdoc generator= ","rdoc store= ","RDoc RDoc  new ","generator asset_rel_path= ","generator file_output= ","RDoc Generator Darkfish  new ","RDoc RDoc  new  options= ","RDoc RDoc  new  generator= ","rdoc RDoc Generator Darkfish  new = ","RDoc RDoc  new  store= ","RDoc Generator Darkfish  new  asset_rel_path= ","RDoc Generator Darkfish  new  file_output= "]}," Servlet error":{"type":"method","name":"error","children":[],"call":["res body= ","ERB Util  html_escape ","exception message ","exception class ","req request_uri ","res status= ","res content_type= ","exception backtrace join ","exception backtrace ","e message ","e class ","e backtrace join ","e backtrace ","exception exception backtrace join  join ","exception e backtrace join  join ","exception exception backtrace join  ","exception e backtrace join  ","e exception backtrace join  join ","e e backtrace join  join ","e exception backtrace join  ","e e backtrace join  "]}," Servlet documentation_source":{"type":"method","name":"documentation_source","children":[],"call":["@stores []= ","store load_all "," store_for ","@stores [] ","path split ","@ store_for s []= ","@@stores [] s []= "," store_for  load_all ","@stores []  load_all ","  store_for _for "," @stores [] _for ","@ store_for s [] ","@@stores [] s [] "]}," Servlet documentation_search":{"type":"method","name":"documentation_search","children":[],"call":["res body= ","res content_type= ","@cache [] []= ","JSON  dump ","generator json_index build_index ","generator json_index ","@cache [] ","@cache [] fetch "]}," Servlet documentation_page":{"type":"method","name":"documentation_page","children":[],"call":[" not_found ","res body= ","generator generate_page ","store find_text_page ","name sub ","generator generate_class ","store find_class_or_module ","path sub gsub ","path sub ","text_name sub ","text_name gsub ","path chomp ","generator generate_store find_text_page  ","store find_text_store find_text_page  ","path sub gsub  sub ","text_name gsub  sub ","text_path sub gsub  sub ","text_text_name gsub  sub ","path chomp  sub ","text_path sub gsub  gsub ","text_text_name gsub  gsub ","path chomp  gsub "]}," Servlet do_GET":{"type":"method","name":"do_GET","children":[],"call":[" error "," raise "," show_documentation "," root_search "," asset "," root ","req path ","req path sub! ","Regexp  escape "," not_found ","e message "," generator_for ","RDoc Store  new ","req path= ","req path sub ","  generator_for _for "]}," Servlet asset":{"type":"method","name":"asset","children":[],"call":["res content_type= ","req path ","res body= ","File  read "," if_modified_since ","File  join ","@asset_dirs [] ","@@asset_dirs [] s [] "]}," Servlet initialize":{"type":"method","name":"initialize","children":[],"call":["File  expand_path ","@options template_dir= ","File  directory? ","File  join ","$LOAD_PATH each ","@options op_dir= ","RDoc Options  new ","RDoc Options  new  template_dir= ","RDoc Options  new  op_dir= "]}," Servlet get_instance":{"type":"method","name":"get_instance","children":[],"call":[]}," Paths system_dir":{"type":"method","name":"system_dir","children":[],"call":[]}," Paths site_dir":{"type":"method","name":"site_dir","children":[],"call":[]}," Paths home_dir":{"type":"method","name":"home_dir","children":[],"call":[]}," Paths gem_dir":{"type":"method","name":"gem_dir","children":[],"call":[]}," Driver start_server":{"type":"method","name":"start_server","children":[],"call":["server start ","server shutdown "," trap ","server mount ","WEBrick HTTPServer  new "," require ","(send\n  (ivar :@stores) :map) compact ","s path ","s type == ","s type ","@stores map "," abort ","WEBrick HTTPServer  new  start ","WEBrick HTTPServer  new  shutdown ","WEBrick HTTPServer  new  mount "]}," Driver find_store":{"type":"method","name":"find_store","children":[],"call":[" raise ","source =~ ","Regexp  escape ","store type == ","store type ","source == ","store source ","@stores each ","store source  =~ ","store source  == ","store store source  "]}," Driver find_pager_jruby":{"type":"method","name":"find_pager_jruby","children":[],"call":[" java io IOException "," java io "," java ","io sync= ","input to_io ","@jruby_pager_process output_stream ","pb start ","pb redirect_output "," java lang ProcessBuilder "," java lang "," java lang ProcessBuilder new ","Shellwords  split "," java lang ProcessBuilder constants include? "," java lang ProcessBuilder constants "," require "," java input to_io  IOExceptinput to_io n "," java input to_io  ","input to_io  sync= ","input to_input to_io  ","@jruby_pager_process output_stream  to_io ","pb start  output_stream ","@jruby_Shellwords  split _process output_stream ","pb redirect_output  start "," java lang ProcessBuilder new  start ","pb redirect_output  redirect_output "," java lang ProcessBuilder new  redirect_output "]}," Driver display_page_list":{"type":"method","name":"display_page_list","children":[],"call":[" display ","out << ","list << ","RDoc Markup Paragraph  new ","pages each ","RDoc Markup List  new ","RDoc Markup BlankLine  new ","RDoc Markup Heading  new ","store friendly_path ","RDoc Markup Document  new ","RDoc Markup Document  new  << ","RDoc Markup List  new  << "]}," Driver display_page":{"type":"method","name":"display_page","children":[],"call":[" display ","page comment ","store load_page ","found_names first "," display_page_list ","found_names length > ","found_names length ","found_names length zero? ","n =~ ","Regexp  escape ","pages select ","pages include? ","store cache [] ","store cache ","page_name empty? ","s source == ","s source ","@stores find ","name split ","store load_page  comment ","store load_store load_page  "," display_store load_page _list ","store load_page s select ","store cache []  select ","store load_page s include? ","store cache []  include? ","store load_page _name empty? ","found_names first  empty? "]}," Driver classes_and_includes_and_extends_for":{"type":"method","name":"classes_and_includes_and_extends_for","children":[],"call":["modules empty? ","includes reject! ","extends reject! ","(send\n  (ivar :@stores) :map) compact ","includes << ","klass includes ","extends << ","klass extends ","klasses << ","store load_class ","@stores map ","store load_class  includes ","store load_class  extends ","store load_class es << "]}," Driver add_method_documentation":{"type":"method","name":"add_method_documentation","children":[],"call":[" add_method ","method full_name ","klass method_list each ","klass method_list "]}," Driver add_method":{"type":"method","name":"add_method","children":[],"call":["out concat ","method_out parts "," method_document "," lookup_method "," method_document  parts "]}," Driver add_extension_modules":{"type":"method","name":"add_extension_modules","children":[],"call":["out << ","verb push ","incl name ","wout each ","RDoc Markup Verbatim  new ","wout empty? ","incl comment ","RDoc Markup BlankLine  new ","RDoc Markup Paragraph  new ","with each ","with empty? ","incl comment empty? ","modules partition ","store friendly_path ","include comment ","include name ","modules first ","modules length == ","modules length ","extensions each ","RDoc Markup Heading  new ","RDoc Markup Rule  new ","extensions empty? "," add_extension_modules_multiple "," add_extension_modules_single ","RDoc Markup Verbatim  new  push ","incl include name  ","store friendly_store friendly_path  ","modules first  comment ","include include name  ","modules first  name "]}," Driver add_extends":{"type":"method","name":"add_extends","children":[],"call":[" add_extension_modules "]}," RDoc store=":{"type":"method","name":"store=","children":[],"call":["@store rdoc= "]}," Parser check_modeline":{"type":"method","name":"check_modeline","children":[],"call":[]}," Parser can_parse_by_name":{"type":"method","name":"can_parse_by_name","children":[],"call":[]}," Ruby parse_rescue":{"type":"method","name":"parse_rescue","children":[],"call":[" skip_tkspace "," get_tk ","TkNL  === "," peek_tk ","on_nl == "," peek_tk [] ","tk [] "," skip_tkspace_without_nl "," skip_ get_tk space "," get_ get_tk  "," peek_ get_tk  "," peek_ get_tk  [] "," get_tk  [] "," skip_ get_tk space_without_nl "]}," Ruby parse_method_dummy":{"type":"method","name":"parse_method_dummy","children":[],"call":[" skip_method ","dummy store= ","container store ","dummy parent= ","RDoc Context  new ","RDoc Context  new  store= ","RDoc Context  new  parent= "]}," Ruby parse_extend":{"type":"method","name":"parse_extend","children":[],"call":[" get_tk ","TkCOMMA  === "," peek_tk ","incl record_location ","context add_extend ","RDoc Extend  new ","name empty? "," get_constant_with_optional_parens "," skip_tkspace_comment "," loop ","context add_extend  record_location "," get_constant_with_optional_parens  empty? "]}," Markdown scan":{"type":"method","name":"scan","children":[],"call":["@top_level comment= ","comment format= ","RDoc Comment  new ","m end ","reg match ","@string [] ","@top_level RDoc Comment  new = ","@top_level coreg match reg match ent= ","RDoc Comment  new  format= ","coreg match reg match ent forreg match at= ","RDoc Coreg match reg match ent  new ","reg match  end ","reg reg match atch "]}," ChangeLog scan":{"type":"method","name":"scan","children":[],"call":["@top_level comment= "," create_document "," group_entries "," parse_entries "," create_ create_document ument "," group_ parse_entries  "," parse_ parse_entries  "]}," ChangeLog parse_entries":{"type":"method","name":"parse_entries","children":[],"call":["entry == ","entries reject! ","entries << "," continue_entry_body ","entry_body << ","entry_body last =~ ","entry_body last ","Time  parse ","entry_name split ","entry_name =~ ","time year ","@content each_line ","entry_name split [] ","$! message ","@time_cache []= ","entry dup ","2 dup "," parse_date "," parse_entries "," parse_info "," prepend ","Time  parse  year "," parse_date  year ","@Time  parse _cache []= ","@ parse_date _cache []= "]}," ChangeLog group_entries":{"type":"method","name":"group_entries","children":[],"call":["Time  parse strftime ","Time  parse ","title split ","entries group_by ","(or\n  (lvar :time)\n  (send\n    (const nil :Time) :parse\n    (lvar :title))) strftime ","@time_cache [] "," parse_date strftime "," parse_date ","(or\n  (lvar :time)\n  (send nil :parse_date\n    (lvar :title))) strftime ","Time  parse strf@time_cache []  ","(or\n  (lvar :@time_cache [] )\n  (send\n    (const nil :Time) :parse\n    (lvar :title))) strf@time_cache []  ","@@time_cache [] _cache [] "," parse_date strf@time_cache []  ","(or\n  (lvar :@time_cache [] )\n  (send nil :parse_date\n    (lvar :title))) strf@time_cache []  "]}," ChangeLog create_items":{"type":"method","name":"create_items","children":[],"call":["list << ","RDoc Markup ListItem  new ","RDoc Markup Paragraph  new ","item =~ ","items each ","RDoc Markup List  new ","RDoc Markup List  new  << "]}," ChangeLog create_entries":{"type":"method","name":"create_entries","children":[],"call":["out << "," create_items ","RDoc Markup BlankLine  new ","RDoc Markup Heading  new ","entries each "]}," ChangeLog create_document":{"type":"method","name":"create_document","children":[],"call":["doc concat "," create_entries ","doc << ","RDoc Markup BlankLine  new ","RDoc Markup Heading  new ","day dup ","(send\n  (lvar :groups) :sort_by) reverse_each ","groups sort_by ","File  basename ","doc file= ","doc omit_headings_below= ","RDoc Markup Document  new ","RDoc Markup Document  new  concat ","RDoc Markup Document  new  << ","RDoc Markup Document  new  file= ","RDoc Markup Document  new  omit_headings_below= "]}," ChangeLog continue_entry_body":{"type":"method","name":"continue_entry_body","children":[],"call":["last << << ","last << ","last =~ ","continuation sub! ","last sub! ","continuation =~ ","entry_body last ","  + ","continuation sub ","entry_body last  << << ","entry_body last  << ","entry_body last  =~ ","continuation sub  sub! ","entry_body last  sub! ","continuation sub  =~ ","entry_body entry_body last  ","continuation sub  sub "]}," C load_variable_map":{"type":"method","name":"load_variable_map","children":[],"call":["@known_classes []= ","class_map []= ","map_name == ","@store find_class_or_module ","name_map each ","files [] ","@store cache [] ","@store cache ","@store find_class_or_@store find_class_or_module ule ","files []  each ","@store cache []  [] "]}," C do_struct_define_without_accessor":{"type":"method","name":"do_struct_define_without_accessor","children":[],"call":[" handle_class_module ","@content scan "]}," C do_singleton_class":{"type":"method","name":"do_singleton_class","children":[],"call":[" handle_singleton ","@content scan "]}," C do_modules":{"type":"method","name":"do_modules","children":[],"call":[" do_define_module_under "," do_define_module "]}," C do_missing":{"type":"method","name":"do_missing","children":[],"call":[" handle_class_module ","@missing_dependencies delete ","@enclosure_dependencies tsort each ","@enclosure_dependencies tsort ","@missing_dependencies empty? "]}," C do_define_module_under":{"type":"method","name":"do_define_module_under","children":[],"call":[" handle_class_module ","@content scan "]}," C do_define_module":{"type":"method","name":"do_define_module","children":[],"call":[" handle_class_module ","@content scan "]}," C do_define_class_under":{"type":"method","name":"do_define_class_under","children":[],"call":[" handle_class_module ","@content scan "]}," C do_define_class":{"type":"method","name":"do_define_class","children":[],"call":[" handle_class_module ","@content scan "]}," C do_boot_defclass":{"type":"method","name":"do_boot_defclass","children":[],"call":[" handle_class_module ","parent == ","@content scan "]}," Options finish_page_dir":{"type":"method","name":"finish_page_dir","children":[],"call":["@page_dir expand_path relative_path_from ","@page_dir expand_path ","@files << ","@page_dir to_s ","page_dir expand_path ","page_dir expand_path relative_path_from "," Pathname ","@@page_dir expand_path relative_path_from  expand_path relative_path_from ","@@page_dir expand_path  expand_path relative_path_from ","@page_dir expand_path  expand_path relative_path_from ","@page_dir expand_path relative_path_from  expand_path relative_path_from ","@ Pathname  expand_path relative_path_from ","@@page_dir expand_path relative_path_from  expand_path ","@@page_dir expand_path  expand_path ","@page_dir expand_path  expand_path ","@page_dir expand_path relative_path_from  expand_path ","@ Pathname  expand_path ","@@page_dir expand_path relative_path_from  to_s ","@@page_dir expand_path  to_s ","@page_dir expand_path  to_s ","@page_dir expand_path relative_path_from  to_s ","@ Pathname  to_s ","page_dir expand_path  expand_path ","page_dir expand_path relative_path_from  expand_path "," Pathname  expand_path ","page_dir expand_path  expand_path relative_path_from ","page_dir expand_path relative_path_from  expand_path relative_path_from "," Pathname  expand_path relative_path_from "]}," NormalClass direct_ancestors":{"type":"method","name":"direct_ancestors","children":[],"call":[" + "," superclass "]}," MethodAttr store=":{"type":"method","name":"store=","children":[],"call":["@store add_file ","@file full_name ","@store add_file  full_name "]}," MethodAttr ==":{"type":"method","name":"==","children":[],"call":[" full_name == ","other full_name "," full_name "," class == ","other class "," class "," equal? "]}," Verbatim pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp ","q seplist ","q breakable ","q text ","q group ","1 downcase "," class name =~ "," class name "," class "]}," Verbatim ==":{"type":"method","name":"==","children":[],"call":["@format == ","other format "]}," ToTtOnly accept_block_quote":{"type":"method","name":"accept_block_quote","children":[],"call":[" tt_sections ","block_quote text "]}," ToTableOfContents suppressed?":{"type":"method","name":"suppressed?","children":[],"call":["heading level > ","heading level "]}," ToTableOfContents accept_document":{"type":"method","name":"accept_document","children":[],"call":["document omit_headings_below "]}," ToTableOfContents initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ToRdoc handle_special_HARD_BREAK":{"type":"method","name":"handle_special_HARD_BREAK","children":[],"call":[]}," ToRdoc accept_block_quote":{"type":"method","name":"accept_block_quote","children":[],"call":["part accept ","block_quote parts each ","block_quote parts "]}," ToMarkdown handle_special_RDOCLINK":{"type":"method","name":"handle_special_RDOCLINK","children":[],"call":[" handle_rdoc_link ","special text "]}," ToMarkdown handle_special_TIDYLINK":{"type":"method","name":"handle_special_TIDYLINK","children":[],"call":[" gen_url "," handle_rdoc_link ","url =~ ","text =~ ","special text ","special text  =~ ","special special text  "]}," ToMarkdown handle_rdoc_link":{"type":"method","name":"handle_rdoc_link","children":[],"call":[" gen_url "]}," ToMarkdown gen_url":{"type":"method","name":"gen_url","children":[],"call":["text sub "," parse_url "]}," ToMarkdown accept_verbatim":{"type":"method","name":"accept_verbatim","children":[],"call":["@res << ","@res =~ ","part == ","verbatim parts each ","verbatim parts ","  * ","@indent + ","@  *  + "]}," ToMarkdown accept_rule":{"type":"method","name":"accept_rule","children":[],"call":["@res << ","- * ","  * "," use_prefix "]}," ToMarkdown accept_list_start":{"type":"method","name":"accept_list_start","children":[],"call":["@list_type << ","list type ","@list_width << "," raise ","@list_index << "]}," ToMarkdown accept_list_item_start":{"type":"method","name":"accept_list_item_start","children":[],"call":["(send\n  (str \" \") :*\n  (ivar :@indent)) + ","bullet ljust ","  * ","@list_index last to_s + ","@list_index last to_s ","@list_index last ","type == ","@prefix << ","bullets + ","@indent - ","bullets << ","(send\n  (send nil :Array\n    (send\n      (lvar :list_item) :label)) :map) join "," attributes strip "," attributes "," Array map "," Array ","list_item label ","@list_type last ","@list_index last to_s +  ljust ","@list_type last  == ","(send\n  (str \" \") :*\n  (ivar :@indent)) +  << ","  *  << ","@list_index last to_s + s + ","(send\n  (send nil :Array\n    (send\n      (lvar :list_item) :label)) :map) join  + ","@list_index last to_s + s << ","(send\n  (send nil :Array\n    (send\n      (lvar :list_item) :label)) :map) join  << ","@list_@list_type last  last "]}," ToMarkdown accept_list_item_end":{"type":"method","name":"accept_list_item_end","children":[],"call":["@list_index []= ","@list_index last succ ","@list_index last "," use_prefix ","@list_type last "]}," ToMarkdown accept_list_end":{"type":"method","name":"accept_list_end","children":[],"call":["@res << "]}," ToMarkdown handle_special_HARD_BREAK":{"type":"method","name":"handle_special_HARD_BREAK","children":[],"call":[]}," ToMarkdown init_tags":{"type":"method","name":"init_tags","children":[],"call":[" add_tag "]}," ToMarkdown initialize":{"type":"method","name":"initialize","children":[],"call":[" add_special_TIDYLINK "," add_special_RDOCLINK ","@headings []= "," add_regexp_handling_TIDYLINK "," add_regexp_handling_RDOCLINK "]}," ToJoinedParagraph accept_paragraph":{"type":"method","name":"accept_paragraph","children":[],"call":["paragraph parts replace ","paragraph parts ","part rstrip ","String  === ","parts map ","parts << ","string << ","paragraph parts each ","(send\n  (block\n    (send\n      (send\n        (lvar :paragraph) :parts) :chunk)\n    (args\n      (arg :part))\n    (send\n      (const nil :String) :===\n      (lvar :part))) :map) flatten ","chunk join rstrip ","chunk join ","(send\n  (send\n    (lvar :paragraph) :parts) :chunk) map ","paragraph parts chunk ","(send\n  (send\n    (lvar :paragraph) :parts) :chunk) flat_map ","paragraph (send\n  (block\n    (send\n      (send\n        (lvar :paragraph) :parts) :chunk)\n    (args\n      (arg :part))\n    (send\n      (const nil :String) :===\n      (lvar :part))) :map) flatten  replace ","paragraph (send\n  (block\n    (send\n      (send\n        (lvar :paragraph) :parts) :chunk)\n    (args\n      (arg :part))\n    (send\n      (const nil :String) :===\n      (lvar :part))) :map) flatten  ","(send\n  (block\n    (send\n      (send\n        (lvar :paragraph) :parts) :chunk)\n    (args\n      (arg :part))\n    (send\n      (const nil :String) :===\n      (lvar :part))) :map) flatten  map ","(send\n  (block\n    (send\n      (send\n        (lvar :paragraph) :parts) :chunk)\n    (args\n      (arg :part))\n    (send\n      (const nil :String) :===\n      (lvar :part))) :map) flatten  << ","paragraph (send\n  (block\n    (send\n      (send\n        (lvar :paragraph) :parts) :chunk)\n    (args\n      (arg :part))\n    (send\n      (const nil :String) :===\n      (lvar :part))) :map) flatten  each ","(send\n  (block\n    (send\n      (send\n        (lvar :paragraph) :(send\n  (block\n    (send\n      (send\n        (lvar :paragraph) :parts) :chunk)\n    (args\n      (arg :part))\n    (send\n      (const nil :String) :===\n      (lvar :part))) :map) flatten ) :chunk)\n    (args\n      (arg :part))\n    (send\n      (const nil :String) :===\n      (lvar :part))) :map) flatten ","(send\n  (send\n    (lvar :paragraph) :(send\n  (block\n    (send\n      (send\n        (lvar :paragraph) :parts) :chunk)\n    (args\n      (arg :part))\n    (send\n      (const nil :String) :===\n      (lvar :part))) :map) flatten ) :chunk) map ","paragraph (send\n  (block\n    (send\n      (send\n        (lvar :paragraph) :parts) :chunk)\n    (args\n      (arg :part))\n    (send\n      (const nil :String) :===\n      (lvar :part))) :map) flatten  chunk ","(send\n  (send\n    (lvar :paragraph) :(send\n  (block\n    (send\n      (send\n        (lvar :paragraph) :parts) :chunk)\n    (args\n      (arg :part))\n    (send\n      (const nil :String) :===\n      (lvar :part))) :map) flatten ) :chunk) flat_map "]}," ToJoinedParagraph end_accepting":{"type":"method","name":"end_accepting","children":[],"call":[]}," ToJoinedParagraph start_accepting":{"type":"method","name":"start_accepting","children":[],"call":[]}," ToJoinedParagraph initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ToHtmlSnippet handle_special_HARD_BREAK":{"type":"method","name":"handle_special_HARD_BREAK","children":[],"call":[]}," ToHtml accept_block_quote":{"type":"method","name":"accept_block_quote","children":[],"call":["@res << ","part accept ","block_quote parts each ","block_quote parts "]}," ToHtml handle_special_HARD_BREAK":{"type":"method","name":"handle_special_HARD_BREAK","children":[],"call":[]}," Parser setup_scanner":{"type":"method","name":"setup_scanner","children":[],"call":["StringScanner  new ","@input force_encoding ","@input encoding ","@have_byteslice ! ","input dup ","MyStringScanner  new ","input dup  force_encoding ","input dup  encoding "]}," Parser char_pos":{"type":"method","name":"char_pos","children":[],"call":["matched length ","matched force_encoding ","@binary_input [] ","@input byteslice length ","@input byteslice ","@binary_input []  length ","@binary_input []  force_encoding "]}," IndentedParagraph text":{"type":"method","name":"text","children":[],"call":["(send\n  (ivar :@parts) :map) join ","%1$s%3$*2$s % ","RDoc Markup HardBreak  === ","@parts map "]}," pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp "," text ","q group "," level "]}," plain_html":{"type":"method","name":"plain_html","children":[],"call":[" class to_html to_html "," text dup "," text "," class to_html "," class "]}," aref":{"type":"method","name":"aref","children":[],"call":[" class to_label convert "," text dup "," text "," class to_label "," class "]}," accept":{"type":"method","name":"accept","children":[],"call":["visitor accept_heading "]}," to_html":{"type":"method","name":"to_html","children":[{"type":"method","name":"handle_special_CROSSREF","children":[],"asgn":[],"call":[]}],"call":[]}," to_label":{"type":"method","name":"to_label","children":[],"call":[]}," HardBreak pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q text "]}," HardBreak ==":{"type":"method","name":"==","children":[],"call":[" class === "," class "]}," HardBreak accept":{"type":"method","name":"accept","children":[],"call":["visitor accept_hard_break "]}," HardBreak new":{"type":"method","name":"new","children":[],"call":[]}," Formatter parse_url":{"type":"method","name":"parse_url","children":[],"call":[" class gen_relative_url "," class ","path [] == ","path [] ","scheme == ","1 downcase "," class gen_relative_ class gen_relative_url  ","1 downcase  == "]}," Formatter add_special_TIDYLINK":{"type":"method","name":"add_special_TIDYLINK","children":[],"call":["@markup add_special "]}," Formatter add_special_RDOCLINK":{"type":"method","name":"add_special_RDOCLINK","children":[],"call":["@markup add_special "]}," Formatter gen_relative_url":{"type":"method","name":"gen_relative_url","children":[],"call":[]}," Document each":{"type":"method","name":"each","children":[],"call":["@parts each "]}," Document concat":{"type":"method","name":"concat","children":[],"call":[" parts concat "," parts "]}," BlockQuote accept":{"type":"method","name":"accept","children":[],"call":["visitor accept_block_quote "]}," Attributes each_name_of":{"type":"method","name":"each_name_of","children":[],"call":["name to_s ","(send\n  (lvar :bitmap) :&\n  (lvar :bit)) != ","bitmap & ","bit == ","@name_to_bitmap each "," enum_for "," __method__ "," block_given? "]}," Attributes as_string":{"type":"method","name":"as_string","children":[],"call":["res join ","res << ","(send\n  (lvar :bitmap) :&\n  (lvar :bit)) != ","bitmap & ","@name_to_bitmap each ","bitmap zero? "]}," Attributes bitmap_for":{"type":"method","name":"bitmap_for","children":[],"call":["@name_to_bitmap << ","bitmap last ","@name_to_bitmap assoc ","@name_to_bitmap last  << ","@name_to_@name_to_bitmap assoc  << ","bitmap last  last ","@name_to_bitmap assoc  last ","@name_to_bitmap last  assoc ","@name_to_@name_to_bitmap assoc  assoc "]}," Attributes initialize":{"type":"method","name":"initialize","children":[],"call":["@special << ","@regexp_handling << "]}," Markdown _DefinitionListDefinition":{"type":"method","name":"_DefinitionListDefinition","children":[],"call":[" set_failed_rule "," pos= "," paragraph "," apply "," pos "," match_string "," _BlankLine "," _Space "," _NonindentSpace "]}," Markdown _DefinitionListLabel":{"type":"method","name":"_DefinitionListLabel","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "," _Newline "," _Sp "]}," Markdown _DefinitionListItem":{"type":"method","name":"_DefinitionListItem","children":[],"call":[" set_failed_rule "," pos= ","list_items concat ","RDoc Markup ListItem  new ","defns map ","list_items empty? ","list_items << ","defns shift ","_ary << "," apply "," pos "]}," Markdown _DefinitionList":{"type":"method","name":"_DefinitionList","children":[],"call":[" set_failed_rule "," pos= ","RDoc Markup List  new ","list flatten ","_ary << "," apply "," pos "," definition_lists? "]}," Markdown _CodeFence":{"type":"method","name":"_CodeFence","children":[],"call":[" set_failed_rule "," pos= ","verbatim format= ","format intern ","RDoc Markup Verbatim  new "," apply "," get_text "," match_string "," pos "," github? "," scan "," _Newline "," _Sp ","format instance_of? ","RDoc Markup Verbatim  new  format= "," get_ get_text  "]}," Markdown _RawNoteBlock":{"type":"method","name":"_RawNoteBlock","children":[],"call":[" set_failed_rule "," pos= ","a << "," get_text "," apply "," pos "," _BlankLine "," _StartList "," get_ get_text  "]}," Markdown _Notes":{"type":"method","name":"_Notes","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "]}," Markdown _InlineNote":{"type":"method","name":"_InlineNote","children":[],"call":[" set_failed_rule "," pos= "," note_for ","@footnotes []= "," paragraph ","@note_order length "," match_string ","a << "," apply "," pos "," notes? "," _StartList "]}," Markdown _Note":{"type":"method","name":"_Note","children":[],"call":[" set_failed_rule "," pos= ","@footnotes []= "," paragraph ","a concat "," apply "," pos "," match_string "," notes? "," _StartList "," _Sp "," _NonindentSpace "]}," Markdown _RawNoteReference":{"type":"method","name":"_RawNoteReference","children":[],"call":[" set_failed_rule "," pos= "," match_string "," get_text "," get_byte "," pos "," apply "," _Newline "," get_ get_text  "]}," Markdown _NoteReference":{"type":"method","name":"_NoteReference","children":[],"call":[" set_failed_rule "," pos= "," note_for "," apply "," notes? "," pos "]}," Markdown _ExtendedSpecialChar":{"type":"method","name":"_ExtendedSpecialChar","children":[],"call":[" set_failed_rule "," pos= "," match_string "," notes? "," pos "]}," Markdown _SkipBlock":{"type":"method","name":"_SkipBlock","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "," match_string "," _RawLine "," _BlankLine "]}," Markdown _RawLine":{"type":"method","name":"_RawLine","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_text "," get_byte "," pos "," match_string "," _Eof "," _Newline "," scan "," get_ get_text  "]}," Markdown _Line":{"type":"method","name":"_Line","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "," _RawLine "]}," Markdown _StartList":{"type":"method","name":"_StartList","children":[],"call":[" set_failed_rule "," pos= "," get_byte "," pos "]}," Markdown _OptionallyIndentedLine":{"type":"method","name":"_OptionallyIndentedLine","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "]}," Markdown _IndentedLine":{"type":"method","name":"_IndentedLine","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "]}," Markdown _Indent":{"type":"method","name":"_Indent","children":[],"call":[" set_failed_rule "," pos= "," match_string "," pos "," scan "]}," Markdown _NonindentSpace":{"type":"method","name":"_NonindentSpace","children":[],"call":[" set_failed_rule "," pos= "," match_string "," pos "," scan "]}," Markdown _CharEntity":{"type":"method","name":"_CharEntity","children":[],"call":[" set_failed_rule "," pos= ","entity pack ","HTML_ENTITIES  [] "," match_string "," get_text "," scan "," pos ","HTML_ENTITIES  []  pack "," get_ get_text  "]}," Markdown _DecEntity":{"type":"method","name":"_DecEntity","children":[],"call":[" set_failed_rule "," pos= ","(send\n  (lvar :text) :to_i) pack ","text to_i "," match_string "," get_text "," scan "," pos ","(send\n  (lvar : get_text ) :to_i) pack "," get_text  to_i "," get_ get_text  "]}," Markdown _HexEntity":{"type":"method","name":"_HexEntity","children":[],"call":[" set_failed_rule "," pos= ","(send\n  (lvar :text) :to_i\n  (int 16)) pack ","text to_i "," match_string "," get_text "," scan "," pos ","(send\n  (lvar : get_text ) :to_i\n  (int 16)) pack "," get_text  to_i "," get_ get_text  "]}," Markdown _Spacechar":{"type":"method","name":"_Spacechar","children":[],"call":[" set_failed_rule ","@_grammar_literals external_invoke "]}," Markdown _NonAlphanumeric":{"type":"method","name":"_NonAlphanumeric","children":[],"call":[" set_failed_rule ","@_grammar_literals external_invoke "]}," Markdown _Newline":{"type":"method","name":"_Newline","children":[],"call":[" set_failed_rule ","@_grammar_literals external_invoke "]}," Markdown _BOM":{"type":"method","name":"_BOM","children":[],"call":[" set_failed_rule ","@_grammar_literals external_invoke "]}," Markdown _AlphanumericAscii":{"type":"method","name":"_AlphanumericAscii","children":[],"call":[" set_failed_rule ","@_grammar_literals external_invoke "]}," Markdown _Alphanumeric":{"type":"method","name":"_Alphanumeric","children":[],"call":[" set_failed_rule ","@_grammar_literals external_invoke "]}," Markdown _Digit":{"type":"method","name":"_Digit","children":[],"call":[" set_failed_rule "," pos= ","_tmp <= ","_tmp >= "," get_byte "," pos "," get_byte  <= "," get_byte  >= "]}," Markdown _NormalChar":{"type":"method","name":"_NormalChar","children":[],"call":[" set_failed_rule "," pos= "," get_byte "," apply "," pos "," _Newline "," _Spacechar "," _SpecialChar "]}," Markdown _SpecialChar":{"type":"method","name":"_SpecialChar","children":[],"call":[" set_failed_rule "," pos= "," apply "," match_string "," pos "," scan "," _ExtendedSpecialChar "]}," Markdown _Spnl":{"type":"method","name":"_Spnl","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "," _Sp "," _Newline "]}," Markdown _Sp":{"type":"method","name":"_Sp","children":[],"call":[" set_failed_rule "," apply "," _Spacechar "]}," Markdown _Nonspacechar":{"type":"method","name":"_Nonspacechar","children":[],"call":[" set_failed_rule "," pos= "," get_byte "," apply "," pos "," _Newline "," _Spacechar "]}," Markdown _Eof":{"type":"method","name":"_Eof","children":[],"call":[" set_failed_rule "," pos= "," get_byte "," pos "]}," Markdown _HtmlTag":{"type":"method","name":"_HtmlTag","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlComment":{"type":"method","name":"_HtmlComment","children":[],"call":[" set_failed_rule "," pos= "," match_string "," get_byte "," pos "]}," Markdown _HtmlAttribute":{"type":"method","name":"_HtmlAttribute","children":[],"call":[" set_failed_rule "," pos= "," apply "," match_string "," pos "]}," Markdown _Quoted":{"type":"method","name":"_Quoted","children":[],"call":[" set_failed_rule "," pos= "," match_string "," get_byte "," pos "]}," Markdown _BlankLine":{"type":"method","name":"_BlankLine","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "," _Newline "," _Sp "]}," Markdown _RawHtml":{"type":"method","name":"_RawHtml","children":[],"call":[" set_failed_rule "," pos= "," html? "," get_text "," apply "," pos "," get_ get_text  "]}," Markdown _Code":{"type":"method","name":"_Code","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_text "," pos "," match_string "," scan "," _Sp "," _BlankLine "," _Newline "," _Spacechar "," get_ get_text  "]}," Markdown _Ticks5":{"type":"method","name":"_Ticks5","children":[],"call":[" set_failed_rule "," pos= "," match_string "," pos "]}," Markdown _Ticks4":{"type":"method","name":"_Ticks4","children":[],"call":[" set_failed_rule "," pos= "," match_string "," pos "]}," Markdown _Ticks3":{"type":"method","name":"_Ticks3","children":[],"call":[" set_failed_rule "," pos= "," match_string "," pos "]}," Markdown _Ticks2":{"type":"method","name":"_Ticks2","children":[],"call":[" set_failed_rule "," pos= "," match_string "," pos "]}," Markdown _Ticks1":{"type":"method","name":"_Ticks1","children":[],"call":[" set_failed_rule "," pos= "," match_string "," pos "]}," Markdown _References":{"type":"method","name":"_References","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "]}," Markdown _RefTitleParens":{"type":"method","name":"_RefTitleParens","children":[],"call":[" set_failed_rule "," pos= "," match_string "," get_text "," get_byte "," apply "," pos "," _Newline "," _Sp "," get_ get_text  "]}," Markdown _RefTitleDouble":{"type":"method","name":"_RefTitleDouble","children":[],"call":[" set_failed_rule "," pos= "," match_string "," get_text "," get_byte "," apply "," pos "," _Newline "," _Sp "," get_ get_text  "]}," Markdown _RefTitleSingle":{"type":"method","name":"_RefTitleSingle","children":[],"call":[" set_failed_rule "," pos= "," match_string "," get_text "," get_byte "," apply "," pos "," _Newline "," _Sp "," get_ get_text  "]}," Markdown _EmptyTitle":{"type":"method","name":"_EmptyTitle","children":[],"call":[" set_failed_rule "," match_string "]}," Markdown _RefTitle":{"type":"method","name":"_RefTitle","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "]}," Markdown _RefSrc":{"type":"method","name":"_RefSrc","children":[],"call":[" set_failed_rule "," pos= "," get_text "," apply "," pos "," get_ get_text  "]}," Markdown _Label":{"type":"method","name":"_Label","children":[],"call":[" set_failed_rule "," pos= ","a join gsub ","a join "," match_string ","a << "," apply "," pos "," notes? ! "," notes? "," get_byte "," _StartList "]}," Markdown _Reference":{"type":"method","name":"_Reference","children":[],"call":[" set_failed_rule "," pos= "," reference "," apply "," pos "," match_string "," _BlankLine "," _NonindentSpace "]}," Markdown _AutoLinkEmail":{"type":"method","name":"_AutoLinkEmail","children":[],"call":[" set_failed_rule "," pos= "," match_string "," get_text "," get_byte "," pos "," apply "," scan "," _Newline "," get_ get_text  "]}," Markdown _AutoLinkUrl":{"type":"method","name":"_AutoLinkUrl","children":[],"call":[" set_failed_rule "," pos= "," match_string "," get_text "," get_byte "," pos "," apply "," scan "," _Newline "," get_ get_text  "]}," Markdown _AutoLink":{"type":"method","name":"_AutoLink","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "]}," Markdown _TitleDouble":{"type":"method","name":"_TitleDouble","children":[],"call":[" set_failed_rule "," pos= "," match_string "," get_byte "," apply "," pos "," _Newline "," _Sp "]}," Markdown _TitleSingle":{"type":"method","name":"_TitleSingle","children":[],"call":[" set_failed_rule "," pos= "," match_string "," get_byte "," apply "," pos "," _Newline "," _Sp "]}," Markdown _Title":{"type":"method","name":"_Title","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _SourceContents":{"type":"method","name":"_SourceContents","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _Source":{"type":"method","name":"_Source","children":[],"call":[" set_failed_rule "," pos= "," get_text "," apply "," pos "," match_string "," get_ get_text  "]}," Markdown _ExplicitLink":{"type":"method","name":"_ExplicitLink","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "," _Sp "]}," Markdown _ReferenceLinkSingle":{"type":"method","name":"_ReferenceLinkSingle","children":[],"call":[" set_failed_rule "," pos= "," link_to "," get_text "," match_string "," apply "," pos "," get_ get_text  "]}," Markdown _ReferenceLinkDouble":{"type":"method","name":"_ReferenceLinkDouble","children":[],"call":[" set_failed_rule "," pos= "," link_to "," apply "," match_string "," pos "," get_text "," get_ get_text  "]}," Markdown _ReferenceLink":{"type":"method","name":"_ReferenceLink","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "]}," Markdown _Link":{"type":"method","name":"_Link","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "]}," Markdown _Image":{"type":"method","name":"_Image","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "," match_string ","a [] "]}," Markdown _StrongUl":{"type":"method","name":"_StrongUl","children":[],"call":[" set_failed_rule "," pos= "," strong ","a join ","a << "," apply "," pos "," _StartList "," match_string "," _Whitespace "]}," Markdown _TwoUlClose":{"type":"method","name":"_TwoUlClose","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "," _Newline "," _Spacechar "]}," Markdown _TwoUlOpen":{"type":"method","name":"_TwoUlOpen","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "," match_string "," _Newline "," _Spacechar "]}," Markdown _StrongStar":{"type":"method","name":"_StrongStar","children":[],"call":[" set_failed_rule "," pos= "," strong ","a join ","a << "," apply "," pos "," _StartList "," match_string "," _Whitespace "]}," Markdown _TwoStarClose":{"type":"method","name":"_TwoStarClose","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "," _Newline "," _Spacechar "]}," Markdown _TwoStarOpen":{"type":"method","name":"_TwoStarOpen","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "," match_string "," _Newline "," _Spacechar "]}," Markdown _Strong":{"type":"method","name":"_Strong","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "]}," Markdown _EmphUl":{"type":"method","name":"_EmphUl","children":[],"call":[" set_failed_rule "," pos= "," emphasis ","a join ","a << "," apply "," pos "," _StartList "," match_string "," _Whitespace "]}," Markdown _OneUlClose":{"type":"method","name":"_OneUlClose","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "," _Newline "," _Spacechar "]}," Markdown _OneUlOpen":{"type":"method","name":"_OneUlOpen","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "," match_string "," _Newline "," _Spacechar "]}," Markdown _EmphStar":{"type":"method","name":"_EmphStar","children":[],"call":[" set_failed_rule "," pos= "," emphasis ","a join ","a << "," apply "," pos "," _StartList "," match_string "," _Whitespace "]}," Markdown _OneStarClose":{"type":"method","name":"_OneStarClose","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "," _Newline "," _Spacechar "]}," Markdown _OneStarOpen":{"type":"method","name":"_OneStarOpen","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "," match_string "," _Newline "," _Spacechar "]}," Markdown _Emph":{"type":"method","name":"_Emph","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "]}," Markdown _UlLine":{"type":"method","name":"_UlLine","children":[],"call":[" set_failed_rule "," pos= "," get_text "," apply "," pos "," match_string "," scan "," _Spacechar "," get_ get_text  "]}," Markdown _StarLine":{"type":"method","name":"_StarLine","children":[],"call":[" set_failed_rule "," pos= "," get_text "," apply "," pos "," match_string "," scan "," _Spacechar "," get_ get_text  "]}," Markdown _UlOrStarLine":{"type":"method","name":"_UlOrStarLine","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "]}," Markdown _Symbol":{"type":"method","name":"_Symbol","children":[],"call":[" set_failed_rule "," pos= "," get_text "," apply "," pos "," _SpecialChar "," get_ get_text  "]}," Markdown _LineBreak":{"type":"method","name":"_LineBreak","children":[],"call":[" set_failed_rule "," pos= ","RDoc Markup HardBreak  new "," apply "," match_string "," pos "," _NormalEndline "]}," Markdown _TerminalEndline":{"type":"method","name":"_TerminalEndline","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "," _Eof "," _Newline "," _Sp "]}," Markdown _NormalEndline":{"type":"method","name":"_NormalEndline","children":[],"call":[" set_failed_rule "," pos= "," apply "," match_string "," pos "," scan "," _Newline "," _BlankLine "," _Sp "]}," Markdown _Endline":{"type":"method","name":"_Endline","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "," _NormalEndline "," _TerminalEndline "," _LineBreak "]}," Markdown _Entity":{"type":"method","name":"_Entity","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "]}," Markdown _EscapedChar":{"type":"method","name":"_EscapedChar","children":[],"call":[" set_failed_rule "," pos= "," get_text "," scan "," pos "," apply "," match_string "," _Newline "," get_ get_text  "]}," Markdown _StrChunk":{"type":"method","name":"_StrChunk","children":[],"call":[" set_failed_rule "," pos= "," get_text "," apply "," pos "," match_string "," scan "," _NormalChar "," get_ get_text  "]}," Markdown _Str":{"type":"method","name":"_Str","children":[],"call":[" set_failed_rule "," pos= ","a << "," apply "," pos "," get_text "," _NormalChar "," _StartList "," get_ get_text  "]}," Markdown _Space":{"type":"method","name":"_Space","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "," _Spacechar "]}," Markdown _Inline":{"type":"method","name":"_Inline","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "," _Space "," _Endline "]}," Markdown _Inlines":{"type":"method","name":"_Inlines","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos ","_ary << "," _Endline "," scan "," github? "]}," Markdown _StyleBlock":{"type":"method","name":"_StyleBlock","children":[],"call":[" set_failed_rule "," pos= ","RDoc Markup Raw  new "," css? "," apply "," get_text "," pos "," _BlankLine "," get_ get_text  "]}," Markdown _InStyleTags":{"type":"method","name":"_InStyleTags","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _StyleClose":{"type":"method","name":"_StyleClose","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _StyleOpen":{"type":"method","name":"_StyleOpen","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockType":{"type":"method","name":"_HtmlBlockType","children":[],"call":[" set_failed_rule "," pos= "," match_string "," pos "]}," Markdown _HtmlBlockSelfClosing":{"type":"method","name":"_HtmlBlockSelfClosing","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlUnclosedType":{"type":"method","name":"_HtmlUnclosedType","children":[],"call":[" set_failed_rule "," pos= "," match_string "," pos "]}," Markdown _HtmlUnclosed":{"type":"method","name":"_HtmlUnclosed","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlock":{"type":"method","name":"_HtmlBlock","children":[],"call":[" set_failed_rule "," pos= ","RDoc Markup Raw  new "," html? "," apply "," pos "," get_text "," _BlankLine "," get_ get_text  "]}," Markdown _HtmlBlockInTags":{"type":"method","name":"_HtmlBlockInTags","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "]}," Markdown _HtmlBlockScript":{"type":"method","name":"_HtmlBlockScript","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseScript":{"type":"method","name":"_HtmlBlockCloseScript","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenScript":{"type":"method","name":"_HtmlBlockOpenScript","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockTr":{"type":"method","name":"_HtmlBlockTr","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseTr":{"type":"method","name":"_HtmlBlockCloseTr","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenTr":{"type":"method","name":"_HtmlBlockOpenTr","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockThead":{"type":"method","name":"_HtmlBlockThead","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseThead":{"type":"method","name":"_HtmlBlockCloseThead","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenThead":{"type":"method","name":"_HtmlBlockOpenThead","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockTh":{"type":"method","name":"_HtmlBlockTh","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseTh":{"type":"method","name":"_HtmlBlockCloseTh","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenTh":{"type":"method","name":"_HtmlBlockOpenTh","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockTfoot":{"type":"method","name":"_HtmlBlockTfoot","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseTfoot":{"type":"method","name":"_HtmlBlockCloseTfoot","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenTfoot":{"type":"method","name":"_HtmlBlockOpenTfoot","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockTd":{"type":"method","name":"_HtmlBlockTd","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseTd":{"type":"method","name":"_HtmlBlockCloseTd","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenTd":{"type":"method","name":"_HtmlBlockOpenTd","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockTbody":{"type":"method","name":"_HtmlBlockTbody","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseTbody":{"type":"method","name":"_HtmlBlockCloseTbody","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenTbody":{"type":"method","name":"_HtmlBlockOpenTbody","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockLi":{"type":"method","name":"_HtmlBlockLi","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseLi":{"type":"method","name":"_HtmlBlockCloseLi","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenLi":{"type":"method","name":"_HtmlBlockOpenLi","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockFrameset":{"type":"method","name":"_HtmlBlockFrameset","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseFrameset":{"type":"method","name":"_HtmlBlockCloseFrameset","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenFrameset":{"type":"method","name":"_HtmlBlockOpenFrameset","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockDt":{"type":"method","name":"_HtmlBlockDt","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseDt":{"type":"method","name":"_HtmlBlockCloseDt","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenDt":{"type":"method","name":"_HtmlBlockOpenDt","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockDd":{"type":"method","name":"_HtmlBlockDd","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseDd":{"type":"method","name":"_HtmlBlockCloseDd","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenDd":{"type":"method","name":"_HtmlBlockOpenDd","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockUl":{"type":"method","name":"_HtmlBlockUl","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseUl":{"type":"method","name":"_HtmlBlockCloseUl","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenUl":{"type":"method","name":"_HtmlBlockOpenUl","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockTable":{"type":"method","name":"_HtmlBlockTable","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseTable":{"type":"method","name":"_HtmlBlockCloseTable","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenTable":{"type":"method","name":"_HtmlBlockOpenTable","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockPre":{"type":"method","name":"_HtmlBlockPre","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockClosePre":{"type":"method","name":"_HtmlBlockClosePre","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenPre":{"type":"method","name":"_HtmlBlockOpenPre","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockP":{"type":"method","name":"_HtmlBlockP","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseP":{"type":"method","name":"_HtmlBlockCloseP","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenP":{"type":"method","name":"_HtmlBlockOpenP","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOl":{"type":"method","name":"_HtmlBlockOl","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseOl":{"type":"method","name":"_HtmlBlockCloseOl","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenOl":{"type":"method","name":"_HtmlBlockOpenOl","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockNoscript":{"type":"method","name":"_HtmlBlockNoscript","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseNoscript":{"type":"method","name":"_HtmlBlockCloseNoscript","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenNoscript":{"type":"method","name":"_HtmlBlockOpenNoscript","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockNoframes":{"type":"method","name":"_HtmlBlockNoframes","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseNoframes":{"type":"method","name":"_HtmlBlockCloseNoframes","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenNoframes":{"type":"method","name":"_HtmlBlockOpenNoframes","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockMenu":{"type":"method","name":"_HtmlBlockMenu","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseMenu":{"type":"method","name":"_HtmlBlockCloseMenu","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenMenu":{"type":"method","name":"_HtmlBlockOpenMenu","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockH6":{"type":"method","name":"_HtmlBlockH6","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseH6":{"type":"method","name":"_HtmlBlockCloseH6","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenH6":{"type":"method","name":"_HtmlBlockOpenH6","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockH5":{"type":"method","name":"_HtmlBlockH5","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseH5":{"type":"method","name":"_HtmlBlockCloseH5","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenH5":{"type":"method","name":"_HtmlBlockOpenH5","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockH4":{"type":"method","name":"_HtmlBlockH4","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseH4":{"type":"method","name":"_HtmlBlockCloseH4","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenH4":{"type":"method","name":"_HtmlBlockOpenH4","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockH3":{"type":"method","name":"_HtmlBlockH3","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseH3":{"type":"method","name":"_HtmlBlockCloseH3","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenH3":{"type":"method","name":"_HtmlBlockOpenH3","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockH2":{"type":"method","name":"_HtmlBlockH2","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseH2":{"type":"method","name":"_HtmlBlockCloseH2","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenH2":{"type":"method","name":"_HtmlBlockOpenH2","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockH1":{"type":"method","name":"_HtmlBlockH1","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseH1":{"type":"method","name":"_HtmlBlockCloseH1","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenH1":{"type":"method","name":"_HtmlBlockOpenH1","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockForm":{"type":"method","name":"_HtmlBlockForm","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseForm":{"type":"method","name":"_HtmlBlockCloseForm","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenForm":{"type":"method","name":"_HtmlBlockOpenForm","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockFieldset":{"type":"method","name":"_HtmlBlockFieldset","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseFieldset":{"type":"method","name":"_HtmlBlockCloseFieldset","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenFieldset":{"type":"method","name":"_HtmlBlockOpenFieldset","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockDl":{"type":"method","name":"_HtmlBlockDl","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseDl":{"type":"method","name":"_HtmlBlockCloseDl","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenDl":{"type":"method","name":"_HtmlBlockOpenDl","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockDiv":{"type":"method","name":"_HtmlBlockDiv","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseDiv":{"type":"method","name":"_HtmlBlockCloseDiv","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenDiv":{"type":"method","name":"_HtmlBlockOpenDiv","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockDir":{"type":"method","name":"_HtmlBlockDir","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseDir":{"type":"method","name":"_HtmlBlockCloseDir","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenDir":{"type":"method","name":"_HtmlBlockOpenDir","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockCenter":{"type":"method","name":"_HtmlBlockCenter","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseCenter":{"type":"method","name":"_HtmlBlockCloseCenter","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenCenter":{"type":"method","name":"_HtmlBlockOpenCenter","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockBlockquote":{"type":"method","name":"_HtmlBlockBlockquote","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseBlockquote":{"type":"method","name":"_HtmlBlockCloseBlockquote","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenBlockquote":{"type":"method","name":"_HtmlBlockOpenBlockquote","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockAddress":{"type":"method","name":"_HtmlBlockAddress","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseAddress":{"type":"method","name":"_HtmlBlockCloseAddress","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenAddress":{"type":"method","name":"_HtmlBlockOpenAddress","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _ListBlockLine":{"type":"method","name":"_ListBlockLine","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "," _BlankLine "]}," Markdown _OrderedList":{"type":"method","name":"_OrderedList","children":[],"call":[" set_failed_rule "," pos= ","RDoc Markup List  new "," apply "," pos "]}," Markdown _Enumerator":{"type":"method","name":"_Enumerator","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "," match_string ","_tmp <= ","_tmp >= "," get_byte "," _Spacechar "," _NonindentSpace "," apply  <= "," match_string  <= "," get_byte  <= "," _Spacechar  <= "," _NonindentSpace  <= "," apply  >= "," match_string  >= "," get_byte  >= "," _Spacechar  >= "," _NonindentSpace  >= "]}," Markdown _ListContinuationBlock":{"type":"method","name":"_ListContinuationBlock","children":[],"call":[" set_failed_rule "," pos= ","a concat "," apply "," pos ","a << "," _BlankLine "," _StartList "]}," Markdown _ListBlock":{"type":"method","name":"_ListBlock","children":[],"call":[" set_failed_rule "," pos= ","_ary << "," apply "," pos "," _BlankLine "]}," Markdown _ListItemTight":{"type":"method","name":"_ListItemTight","children":[],"call":[" set_failed_rule "," pos= "," list_item_from "," apply "," pos ","a push "," _BlankLine "]}," Markdown _ListItem":{"type":"method","name":"_ListItem","children":[],"call":[" set_failed_rule "," pos= "," list_item_from ","a push "," apply "," pos ","a << "," _StartList "]}," Markdown _ListLoose":{"type":"method","name":"_ListLoose","children":[],"call":[" set_failed_rule "," pos= ","a << "," apply "," pos "," _BlankLine "," _StartList "]}," Markdown _ListTight":{"type":"method","name":"_ListTight","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos ","_ary << "," _BlankLine "]}," Markdown _BulletList":{"type":"method","name":"_BulletList","children":[],"call":[" set_failed_rule "," pos= ","RDoc Markup List  new "," apply "," pos "]}," Markdown _Bullet":{"type":"method","name":"_Bullet","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "," match_string "," scan "," _Spacechar "," _NonindentSpace "]}," Markdown _HorizontalRule":{"type":"method","name":"_HorizontalRule","children":[],"call":[" set_failed_rule "," pos= ","RDoc Markup Rule  new "," apply "," pos "," match_string "," _BlankLine "," _Newline "," _Sp "," _NonindentSpace "]}," Markdown _Verbatim":{"type":"method","name":"_Verbatim","children":[],"call":[" set_failed_rule "," pos= ","RDoc Markup Verbatim  new ","a flatten ","_ary << "," apply "," pos "]}," Markdown _VerbatimChunk":{"type":"method","name":"_VerbatimChunk","children":[],"call":[" set_failed_rule "," pos= ","a concat ","_ary << "," apply "," pos "," _BlankLine "]}," Markdown _NonblankIndentedLine":{"type":"method","name":"_NonblankIndentedLine","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "," _BlankLine "]}," Markdown _BlockQuoteRaw":{"type":"method","name":"_BlockQuoteRaw","children":[],"call":[" set_failed_rule "," pos= "," inner_parse ","a join ","a << "," apply "," pos "," match_string "," _BlankLine "," _StartList "]}," Markdown _BlockQuote":{"type":"method","name":"_BlockQuote","children":[],"call":[" set_failed_rule "," pos= ","RDoc Markup BlockQuote  new "," apply "," pos "]}," Markdown _Heading":{"type":"method","name":"_Heading","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "]}," Markdown _SetextHeading2":{"type":"method","name":"_SetextHeading2","children":[],"call":[" set_failed_rule "," pos= ","RDoc Markup Heading  new ","a join "," apply "," pos ","a << "," _Newline "," _Sp "," _Endline "," _StartList "," _RawLine "]}," Markdown _SetextHeading1":{"type":"method","name":"_SetextHeading1","children":[],"call":[" set_failed_rule "," pos= ","RDoc Markup Heading  new ","a join "," apply "," pos ","a << "," _Newline "," _Sp "," _Endline "," _StartList "," _RawLine "]}," Markdown _SetextBottom2":{"type":"method","name":"_SetextBottom2","children":[],"call":[" set_failed_rule "," pos= "," apply "," match_string "," pos "," scan "," _Newline "]}," Markdown _SetextBottom1":{"type":"method","name":"_SetextBottom1","children":[],"call":[" set_failed_rule "," pos= "," apply "," match_string "," pos "," scan "," _Newline "]}," Markdown _SetextHeading":{"type":"method","name":"_SetextHeading","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "]}," Markdown _AtxHeading":{"type":"method","name":"_AtxHeading","children":[],"call":[" set_failed_rule "," pos= ","RDoc Markup Heading  new ","a join "," apply "," match_string "," pos ","_ary << "," scan "," _Newline "," _Sp "]}," Markdown _AtxStart":{"type":"method","name":"_AtxStart","children":[],"call":[" set_failed_rule "," pos= ","text length "," get_text "," match_string "," pos "," scan "," get_text  length "," get_ get_text  "]}," Markdown _AtxInline":{"type":"method","name":"_AtxInline","children":[],"call":[" set_failed_rule "," pos= "," apply "," match_string "," pos "," scan "," _Newline "," _Sp "]}," Markdown _Plain":{"type":"method","name":"_Plain","children":[],"call":[" set_failed_rule "," pos= "," paragraph "," apply "," pos "]}," Markdown _Para":{"type":"method","name":"_Para","children":[],"call":[" set_failed_rule "," pos= "," paragraph "," apply "," pos "," _BlankLine "," _NonindentSpace "]}," Markdown _Block":{"type":"method","name":"_Block","children":[],"call":[" set_failed_rule "," pos= "," apply "," pos "," _BlankLine "]}," Markdown _Doc":{"type":"method","name":"_Doc","children":[],"call":[" set_failed_rule "," pos= ","RDoc Markup Document  new ","a compact ","_ary << "," apply "," pos "]}," Markdown _root":{"type":"method","name":"_root","children":[],"call":[" set_failed_rule "," apply "]}," Markdown setup_foreign_grammar":{"type":"method","name":"setup_foreign_grammar","children":[],"call":["RDoc Markdown Literals  new "]}," Markdown strong":{"type":"method","name":"strong","children":[],"call":["text =~ "]}," Markdown reference":{"type":"method","name":"reference","children":[],"call":["@references []= ","ref replace ","@unlinked_references delete ","@@unlinked_references delete erences []= ","@unlinked_references delete  replace ","@unlinked_@unlinked_references delete erences delete "]}," Markdown parse":{"type":"method","name":"parse","children":[],"call":["doc accept ","doc << ","note parts unshift ","note parts ","@footnotes [] ","index + ","@note_order each_with_index ","RDoc Markup Rule  new ","@footnotes empty? ! ","@footnotes empty? "," notes? "," result "," peg_parse "," setup_parser "," apply ","rule gsub ","rule ! "," raise "," result  accept "," result  << ","@footnotes []  parts unshift ","@footnotes []  parts ","@foot@footnotes [] s [] ","@@footnotes [] _order each_with_index ","@foot@footnotes [] s empty? ! ","@foot@footnotes [] s empty? "," @footnotes [] s? "]}," Markdown paragraph":{"type":"method","name":"paragraph","children":[],"call":["RDoc Markup Paragraph  new ","RDoc Markup HardBreak  new ","\n == ","parts map "," break_on_newline? "]}," Markdown note_for":{"type":"method","name":"note_for","children":[],"call":["@note_order length ","@note_order << "]}," Markdown note":{"type":"method","name":"note","children":[],"call":["@notes []= "," foottext "]}," Markdown list_item_from":{"type":"method","name":"list_item_from","children":[],"call":["RDoc Markup ListItem  new "," inner_parse ","unparsed join ","un inner_parse  join "]}," Markdown link_to":{"type":"method","name":"link_to","children":[],"call":["label equal? ","@references [] "," raise ","content start_with? ","@@references [] erences [] "]}," Markdown inner_parse":{"type":"method","name":"inner_parse","children":[],"call":["doc parts ","doc accept ","parser result ","parser peg_parse ","parser setup_parser "," clone ","parser result  parts ","parser result  accept "," clone  result "," clone  peg_parse "," clone  setup_ clone  "]}," Markdown extension":{"type":"method","name":"extension","children":[],"call":["name to_s delete intern ","name to_s delete ","name to_s ","name to_s delete intern  to_s delete intern ","name to_s delete intern  to_s delete ","name to_s delete intern  to_s "]}," Markdown extension?":{"type":"method","name":"extension?","children":[],"call":["@extensions include? ","name to_s delete intern ","name to_s delete ","name to_s ","name to_s delete intern  to_s delete intern ","name to_s delete intern  to_s delete ","name to_s delete intern  to_s "]}," Markdown emphasis":{"type":"method","name":"emphasis","children":[],"call":["text =~ "]}," Markdown initialize":{"type":"method","name":"initialize","children":[],"call":["RDoc Markup ToJoinedParagraph  new "," setup_parser "]}," Markdown rule_info":{"type":"method","name":"rule_info","children":[],"call":[]}," Markdown RuleInfo initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Markdown grow_lr":{"type":"method","name":"grow_lr","children":[],"call":["m ans ","m pos ","m result ","m move! ","@pos <= "," __send__ ","m  __send__  ","m pos  <= "]}," Markdown apply":{"type":"method","name":"apply","children":[],"call":[" grow_lr ","m move! ","m left_rec "," __send__ ","@memoizations [] []= ","@memoizations [] ","MemoEntry  new ","m ans ","m result ","m left_rec= ","m set ! ","m set ","m pos ","@memoizations [] [] "," grow_m left_rec  ","MemoEntry  new  MemoEntry  new ove! ","@memoizations [] []  @memoizations [] [] ove! ","MemoEntry  new  left_rec ","@memoizations [] []  left_rec ","@MemoEntry  new eMemoEntry  new oizations [] []= ","@@memoizations [] [] e@memoizations [] [] oizations [] []= ","@MemoEntry  new eMemoEntry  new oizations [] ","@@memoizations [] [] e@memoizations [] [] oizations [] ","MeMemoEntry  new oEntry  new ","Me@memoizations [] [] oEntry  new ","m  __send__  ","MemoEntry  new  ans ","@memoizations [] []  ans ","MemoEntry  new  result ","@memoizations [] []  result ","MemoEntry  new  left_rec= ","@memoizations [] []  left_rec= ","MemoEntry  new  set ! ","@memoizations [] []  set ! ","MemoEntry  new  set ","@memoizations [] []  set ","MemoEntry  new  pos ","@memoizations [] []  pos ","@MemoEntry  new eMemoEntry  new oizations [] [] ","@@memoizations [] [] e@memoizations [] [] oizations [] [] "]}," Markdown apply_with_args":{"type":"method","name":"apply_with_args","children":[],"call":[" grow_lr ","m move! ","m left_rec "," __send__ ","@memoizations [] []= ","@memoizations [] ","MemoEntry  new ","m ans ","m result ","m left_rec= ","m set ! ","m set ","m pos ","@memoizations [] [] "," grow_m left_rec  ","MemoEntry  new  MemoEntry  new ove! ","@memoizations [] []  @memoizations [] [] ove! ","MemoEntry  new  left_rec ","@memoizations [] []  left_rec ","@MemoEntry  new eMemoEntry  new oizations [] []= ","@@memoizations [] [] e@memoizations [] [] oizations [] []= ","@MemoEntry  new eMemoEntry  new oizations [] ","@@memoizations [] [] e@memoizations [] [] oizations [] ","MeMemoEntry  new oEntry  new ","Me@memoizations [] [] oEntry  new ","m  __send__  ","MemoEntry  new  ans ","@memoizations [] []  ans ","MemoEntry  new  result ","@memoizations [] []  result ","MemoEntry  new  left_rec= ","@memoizations [] []  left_rec= ","MemoEntry  new  set ! ","@memoizations [] []  set ! ","MemoEntry  new  set ","@memoizations [] []  set ","MemoEntry  new  pos ","@memoizations [] []  pos ","@MemoEntry  new eMemoEntry  new oizations [] [] ","@@memoizations [] [] e@memoizations [] [] oizations [] [] "]}," Markdown external_invoke":{"type":"method","name":"external_invoke","children":[],"call":["other set_failed_rule "," class ","other result= ","other pos= "," __send__ ","other string ","other pos "," set_string "]}," Markdown MemoEntry move!":{"type":"method","name":"move!","children":[],"call":[]}," Markdown MemoEntry initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Markdown get_byte":{"type":"method","name":"get_byte","children":[],"call":["@string [] ","@pos >= ","@string size ","@string getbyte ","@string [] ord ","@@string [] tring [] ","@@string getbyte tring [] ","@@string [] ord tring [] ","@po@string []  >= ","@po@string getbyte  >= ","@po@string [] ord  >= ","@@string [] tring @string [] ize ","@@string getbyte tring @string getbyte ize ","@@string [] ord tring @string [] ord ize ","@@string [] tring getbyte ","@@string getbyte tring getbyte ","@@string [] ord tring getbyte ","@@string [] tring [] ord ","@@string getbyte tring [] ord ","@@string [] ord tring [] ord "]}," Markdown match_string":{"type":"method","name":"match_string","children":[],"call":["@string [] == ","@string [] "," pos ","str size "]}," Markdown set_failed_rule":{"type":"method","name":"set_failed_rule","children":[],"call":["@pos > "]}," Markdown show_error":{"type":"method","name":"show_error","children":[],"call":["io puts ","io print ","  * ","col_no + "," lines [] ","line_no - "," lines "," string [] inspect "," string [] "," string ","info name ","info rendered "," class Rules  [] "," class ","@failed_rule kind_of? "," current_column "," current_line ","p col + ","p col ","p line ","p char inspect ","p char ","p lno "," current_pos_info ","io  current_pos_info uts ","io  current_pos_info rint "," current_column  + ","  lines [] s [] "," lines [] _no - "," current_line  - ","  lines [] s "," string [] ins current_pos_info ect "," class Rules  []  name "," class Rules  []  rendered "," current_ lines []  "," current_pos_info  col + "," current_pos_info  col ","p  lines []  "," current_pos_info  line "," current_pos_info  char ins current_pos_info ect "," current_pos_info  char "," current_pos_info  lno "," current_pos_ class Rules  []  "," current_ current_pos_info os_info "]}," Markdown raise_error":{"type":"method","name":"raise_error","children":[],"call":[" raise "," failure_oneline "]}," Markdown failure_oneline":{"type":"method","name":"failure_oneline","children":[],"call":["info name "," class Rules  [] "," class ","@failed_rule kind_of? "," lines [] [] ","c - "," lines [] ","l - "," lines "," current_column "," current_line ","p char ","p col ","p lno "," current_pos_info "," class Rules  []  name ","  current_column lass Rules  [] "," c current_line ass Ru current_line es  [] ","  current_column lass "," c current_line ass ","@fai current_line ed_ru current_line e kind_of? ","  current_line ines [] [] "," current_column  - ","  current_line ines [] "," current_line  - ","  current_line ines ","  current_column urrent_ current_column olumn "," current_co current_line umn ","  current_column urrent_line "," current_ current_line ine ","p  lines [] []  ","p  current_column har "," current_pos_info  char ","p  current_column ol ","p co current_line  "," current_pos_info  col ","p  current_line no "," current_pos_info  lno "," current_pos_ class Rules  []  ","  current_column urrent_pos_info "," current_ current_pos_info os_info "]}," Markdown failure_character":{"type":"method","name":"failure_character","children":[],"call":[" lines [] [] ","c - "," lines [] ","l - "," lines "," current_column "," current_line "," current_character ","  current_line ines [] [] "," current_column  - ","  current_line ines [] "," current_line  - ","  current_line ines ","  current_column urrent_ current_column olumn "," current_co current_line umn ","  current_column urrent_line "," current_ current_line ine ","  current_column urrent_ current_column hara current_column ter "]}," Markdown failure_caret":{"type":"method","name":"failure_caret","children":[],"call":["  * ","c - "," lines [] ","l - "," lines "," current_column "," current_line ","p col - ","p col ","p line chomp ","p line "," current_pos_info "," current_column  - ","  lines [] s [] ","  current_line ines [] "," current_line  - ","  lines [] s ","  current_line ines ","  current_column urrent_ current_column olumn "," current_co current_line umn "," current_ lines []  ","  current_column urrent_line "," current_ current_line ine ","p  current_column ol - ","p co current_line  - "," current_pos_info  col - ","p  current_column ol ","p co current_line  "," current_pos_info  col ","p  lines []  chomp ","p line  current_column homp ","p  current_line ine chomp "," current_pos_info  line chom current_pos_info  ","p  lines []  ","p  current_line ine "," current_pos_info  line ","  current_column urrent_pos_info "," current_ current_pos_info os_info "]}," Markdown failure_info":{"type":"method","name":"failure_info","children":[],"call":["info rendered ","info name "," class Rules  [] "," class ","@failed_rule kind_of? "," current_column "," current_line "," class Rules  []  rendered "," class Rules  []  name ","  current_column lass Rules  [] "," c current_line ass Ru current_line es  [] ","  current_column lass "," c current_line ass ","@fai current_line ed_ru current_line e kind_of? ","  current_column urrent_ current_column olumn "," current_co current_line umn ","  current_column urrent_line "," current_ current_line ine "]}," Markdown show_pos":{"type":"method","name":"show_pos","children":[],"call":["@string [] ","@pos - ","@pos < "]}," Markdown get_text":{"type":"method","name":"get_text","children":[],"call":["@string [] ","@pos - "]}," Markdown lines":{"type":"method","name":"lines","children":[],"call":["lines << "," string each_line "," string "," string lines "]}," Markdown current_line":{"type":"method","name":"current_line","children":[],"call":["cur_offset >= ","line size "," string each_line "," string "," raise ","line + ","x > "," position_line_offsets index "," position_line_offsets "," position_line_offsets bsearch_index "]}," Markdown current_column":{"type":"method","name":"current_column","children":[],"call":["target + ","target - - ","target - "," string rindex "," string "," string [] == "," string [] "]}," Markdown setup_parser":{"type":"method","name":"setup_parser","children":[],"call":[" setup_foreign_grammar ","h []= ","Hash  new "," set_string "]}," Literals _Spacechar":{"type":"method","name":"_Spacechar","children":[],"call":[" set_failed_rule "," scan "]}," Literals _NonAlphanumeric":{"type":"method","name":"_NonAlphanumeric","children":[],"call":[" set_failed_rule "," scan "]}," Literals _Newline":{"type":"method","name":"_Newline","children":[],"call":[" set_failed_rule "," scan "]}," Literals _BOM":{"type":"method","name":"_BOM","children":[],"call":[" set_failed_rule "," match_string "]}," Literals _AlphanumericAscii":{"type":"method","name":"_AlphanumericAscii","children":[],"call":[" set_failed_rule "," scan "]}," Literals _Alphanumeric":{"type":"method","name":"_Alphanumeric","children":[],"call":[" set_failed_rule "," scan "]}," Literals setup_foreign_grammar":{"type":"method","name":"setup_foreign_grammar","children":[],"call":[]}," Literals rule_info":{"type":"method","name":"rule_info","children":[],"call":[]}," Literals RuleInfo initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Literals grow_lr":{"type":"method","name":"grow_lr","children":[],"call":["m ans ","m pos ","m result ","m move! ","@pos <= "," __send__ ","m  __send__  ","m pos  <= "]}," Literals apply":{"type":"method","name":"apply","children":[],"call":[" grow_lr ","m move! ","m left_rec "," __send__ ","@memoizations [] []= ","@memoizations [] ","MemoEntry  new ","m ans ","m result ","m left_rec= ","m set ! ","m set ","m pos ","@memoizations [] [] "," grow_m left_rec  ","MemoEntry  new  MemoEntry  new ove! ","@memoizations [] []  @memoizations [] [] ove! ","MemoEntry  new  left_rec ","@memoizations [] []  left_rec ","@MemoEntry  new eMemoEntry  new oizations [] []= ","@@memoizations [] [] e@memoizations [] [] oizations [] []= ","@MemoEntry  new eMemoEntry  new oizations [] ","@@memoizations [] [] e@memoizations [] [] oizations [] ","MeMemoEntry  new oEntry  new ","Me@memoizations [] [] oEntry  new ","m  __send__  ","MemoEntry  new  ans ","@memoizations [] []  ans ","MemoEntry  new  result ","@memoizations [] []  result ","MemoEntry  new  left_rec= ","@memoizations [] []  left_rec= ","MemoEntry  new  set ! ","@memoizations [] []  set ! ","MemoEntry  new  set ","@memoizations [] []  set ","MemoEntry  new  pos ","@memoizations [] []  pos ","@MemoEntry  new eMemoEntry  new oizations [] [] ","@@memoizations [] [] e@memoizations [] [] oizations [] [] "]}," Literals apply_with_args":{"type":"method","name":"apply_with_args","children":[],"call":[" grow_lr ","m move! ","m left_rec "," __send__ ","@memoizations [] []= ","@memoizations [] ","MemoEntry  new ","m ans ","m result ","m left_rec= ","m set ! ","m set ","m pos ","@memoizations [] [] "," grow_m left_rec  ","MemoEntry  new  MemoEntry  new ove! ","@memoizations [] []  @memoizations [] [] ove! ","MemoEntry  new  left_rec ","@memoizations [] []  left_rec ","@MemoEntry  new eMemoEntry  new oizations [] []= ","@@memoizations [] [] e@memoizations [] [] oizations [] []= ","@MemoEntry  new eMemoEntry  new oizations [] ","@@memoizations [] [] e@memoizations [] [] oizations [] ","MeMemoEntry  new oEntry  new ","Me@memoizations [] [] oEntry  new ","m  __send__  ","MemoEntry  new  ans ","@memoizations [] []  ans ","MemoEntry  new  result ","@memoizations [] []  result ","MemoEntry  new  left_rec= ","@memoizations [] []  left_rec= ","MemoEntry  new  set ! ","@memoizations [] []  set ! ","MemoEntry  new  set ","@memoizations [] []  set ","MemoEntry  new  pos ","@memoizations [] []  pos ","@MemoEntry  new eMemoEntry  new oizations [] [] ","@@memoizations [] [] e@memoizations [] [] oizations [] [] "]}," Literals external_invoke":{"type":"method","name":"external_invoke","children":[],"call":["other set_failed_rule "," class ","other result= ","other pos= "," __send__ ","other string ","other pos "," set_string "]}," Literals MemoEntry move!":{"type":"method","name":"move!","children":[],"call":[]}," Literals MemoEntry initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Literals parse":{"type":"method","name":"parse","children":[],"call":[" apply ","rule gsub ","rule ! "]}," Literals get_byte":{"type":"method","name":"get_byte","children":[],"call":["@string [] ","@pos >= ","@string size ","@string getbyte ","@string [] ord ","@@string [] tring [] ","@@string getbyte tring [] ","@@string [] ord tring [] ","@po@string []  >= ","@po@string getbyte  >= ","@po@string [] ord  >= ","@@string [] tring @string [] ize ","@@string getbyte tring @string getbyte ize ","@@string [] ord tring @string [] ord ize ","@@string [] tring getbyte ","@@string getbyte tring getbyte ","@@string [] ord tring getbyte ","@@string [] tring [] ord ","@@string getbyte tring [] ord ","@@string [] ord tring [] ord "]}," Literals scan":{"type":"method","name":"scan","children":[],"call":["m end ","reg match ","@string [] ","reg match  end ","reg reg match atch "]}," Literals match_string":{"type":"method","name":"match_string","children":[],"call":["@string [] == ","@string [] "," pos ","str size "]}," Literals set_failed_rule":{"type":"method","name":"set_failed_rule","children":[],"call":["@pos > "]}," Literals show_error":{"type":"method","name":"show_error","children":[],"call":["io puts ","io print ","  * ","col_no + "," lines [] ","line_no - "," lines "," string [] inspect "," string [] "," string ","info name ","info rendered "," class Rules  [] "," class ","@failed_rule kind_of? "," current_column "," current_line ","p col + ","p col ","p line ","p char inspect ","p char ","p lno "," current_pos_info ","io  current_pos_info uts ","io  current_pos_info rint "," current_column  + ","  lines [] s [] "," lines [] _no - "," current_line  - ","  lines [] s "," string [] ins current_pos_info ect "," class Rules  []  name "," class Rules  []  rendered "," current_ lines []  "," current_pos_info  col + "," current_pos_info  col ","p  lines []  "," current_pos_info  line "," current_pos_info  char ins current_pos_info ect "," current_pos_info  char "," current_pos_info  lno "," current_pos_ class Rules  []  "," current_ current_pos_info os_info "]}," Literals raise_error":{"type":"method","name":"raise_error","children":[],"call":[" raise "," failure_oneline "]}," Literals failure_oneline":{"type":"method","name":"failure_oneline","children":[],"call":["info name "," class Rules  [] "," class ","@failed_rule kind_of? "," lines [] [] ","c - "," lines [] ","l - "," lines "," current_column "," current_line ","p char ","p col ","p lno "," current_pos_info "," class Rules  []  name ","  current_column lass Rules  [] "," c current_line ass Ru current_line es  [] ","  current_column lass "," c current_line ass ","@fai current_line ed_ru current_line e kind_of? ","  current_line ines [] [] "," current_column  - ","  current_line ines [] "," current_line  - ","  current_line ines ","  current_column urrent_ current_column olumn "," current_co current_line umn ","  current_column urrent_line "," current_ current_line ine ","p  lines [] []  ","p  current_column har "," current_pos_info  char ","p  current_column ol ","p co current_line  "," current_pos_info  col ","p  current_line no "," current_pos_info  lno "," current_pos_ class Rules  []  ","  current_column urrent_pos_info "," current_ current_pos_info os_info "]}," Literals failure_character":{"type":"method","name":"failure_character","children":[],"call":[" lines [] [] ","c - "," lines [] ","l - "," lines "," current_column "," current_line "," current_character ","  current_line ines [] [] "," current_column  - ","  current_line ines [] "," current_line  - ","  current_line ines ","  current_column urrent_ current_column olumn "," current_co current_line umn ","  current_column urrent_line "," current_ current_line ine ","  current_column urrent_ current_column hara current_column ter "]}," Literals failure_caret":{"type":"method","name":"failure_caret","children":[],"call":["  * ","c - "," lines [] ","l - "," lines "," current_column "," current_line ","p col - ","p col ","p line chomp ","p line "," current_pos_info "," current_column  - ","  lines [] s [] ","  current_line ines [] "," current_line  - ","  lines [] s ","  current_line ines ","  current_column urrent_ current_column olumn "," current_co current_line umn "," current_ lines []  ","  current_column urrent_line "," current_ current_line ine ","p  current_column ol - ","p co current_line  - "," current_pos_info  col - ","p  current_column ol ","p co current_line  "," current_pos_info  col ","p  lines []  chomp ","p line  current_column homp ","p  current_line ine chomp "," current_pos_info  line chom current_pos_info  ","p  lines []  ","p  current_line ine "," current_pos_info  line ","  current_column urrent_pos_info "," current_ current_pos_info os_info "]}," Literals failure_info":{"type":"method","name":"failure_info","children":[],"call":["info rendered ","info name "," class Rules  [] "," class ","@failed_rule kind_of? "," current_column "," current_line "," class Rules  []  rendered "," class Rules  []  name ","  current_column lass Rules  [] "," c current_line ass Ru current_line es  [] ","  current_column lass "," c current_line ass ","@fai current_line ed_ru current_line e kind_of? ","  current_column urrent_ current_column olumn "," current_co current_line umn ","  current_column urrent_line "," current_ current_line ine "]}," Literals show_pos":{"type":"method","name":"show_pos","children":[],"call":["@string [] ","@pos - ","@pos < "]}," Literals get_text":{"type":"method","name":"get_text","children":[],"call":["@string [] ","@pos - "]}," Literals lines":{"type":"method","name":"lines","children":[],"call":["lines << "," string each_line "," string "," string lines "]}," Literals current_line":{"type":"method","name":"current_line","children":[],"call":["cur_offset >= ","line size "," string each_line "," string ","(send\n  (ivar :@line_offsets) :bsearch_index) + ","x >= ","@line_offsets bsearch_index ","@line_offsets << "," raise "," position_line_offsets size + "," position_line_offsets size "," position_line_offsets "," string [] == "," string [] "," string empty? ! "," string empty? ","target == "," string size ","line + ","x > "," position_line_offsets index "," position_line_offsets bsearch_index "]}," Literals current_column":{"type":"method","name":"current_column","children":[],"call":["target + ","target - - ","target - "," string rindex "," string "," string [] == "," string [] "]}," Literals setup_parser":{"type":"method","name":"setup_parser","children":[],"call":[" setup_foreign_grammar ","h []= ","Hash  new "," set_string "]}," Literals initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_parser "]}," Include store=":{"type":"method","name":"store=","children":[],"call":["@store add_file ","@file full_name ","@store add_file  full_name "]}," MethodAttr markup_code":{"type":"method","name":"markup_code","children":[],"call":[" add_line_numbers ","RDoc MethodAttr  add_line_numbers ","src gsub! ","  * ","indent > ","n == ","n < ","$& length ","line =~ ","lines each ","lines shift ","src =~ ","src lines to_a ","src lines ","src length ","RDoc TokenStream  to_html "," options line_numbers "," options ","$~ end "," add_li$& length e_$& length umbers "," add_li$~ end e_$~ end umbers ","RDoc MethodAttr  add_li$& length e_$& length umbers ","RDoc MethodAttr  add_li$~ end e_$~ end umbers ","RDoc TokenStream  to_html  gsub! ","i$& length de$& length t > ","i$~ end de$~ end t > ","src length  > ","$& length  == ","$~ end  == ","$& length  < ","$~ end  < ","$& le$& length gth ","$& le$~ end gth ","li$& length e =~ ","li$~ end e =~ ","li$& length es each ","li$~ end es each ","src lines to_a  each ","li$& length es shift ","li$~ end es shift ","src lines to_a  shift ","RDoc TokenStream  to_html  =~ ","src li$& length es to_a ","src li$~ end es to_a ","src src lines to_a  to_a ","RDoc TokenStream  to_html  lines to_a ","src li$& length es ","src li$~ end es ","src src lines to_a  ","RDoc TokenStream  to_html  lines ","src le$& length gth ","src le$~ end gth ","RDoc TokenStream  to_html  length ","RDoc Toke$& length Stream  to_html ","RDoc Toke$~ end Stream  to_html "," optio$& length s li$& length e_$& length umbers "," optio$~ end s li$~ end e_$~ end umbers "," optio$& length s "," optio$~ end s ","$~ e$& length d ","$~ e$~ end d "]}," MethodAttr add_line_numbers":{"type":"method","name":"add_line_numbers","children":[],"call":["<span class=\"line-num\">%2$*1$d</span>  % ","  * ","size + ","line == ","src gsub! ","last to_s length ","last to_s ","first + ","src count ","3 to_i - ","3 to_i ","src sub! ","last to_s length  + ","first +  to_s length ","first +  to_s ","3 to_i -  + "]}," JsonIndex build_index":{"type":"method","name":"build_index","children":[],"call":[" index_pages "," index_methods "," index_classes "," reset ","@store all_classes_and_modules sort ","@store all_classes_and_modules ","@store all_files sort ","@store all_files "]}," Darkfish setup":{"type":"method","name":"setup","children":[],"call":[" get_sorted_module_list ","(send\n  (ivar :@classes) :map) flatten sort ","(send\n  (ivar :@classes) :map) flatten ","m method_list ","@classes map ","@store all_files sort ","@store all_files ","@store all_classes_and_modules sort ","@store all_classes_and_modules ","Pathname  new expand_path ","Pathname  new ","@options op_dir "," instance_variable_defined? ","(send\n  (ivar :@classes) :flat_map) sort ","@classes flat_map ","(send\n  (ivar :@store all_classes_and_modules sort ) :map) flatten sort ","(send\n  (ivar :@store all_classes_and_modules sort ) :map) flatten ","@store all_classes_and_modules sort  map ","(send\n  (ivar :@store all_classes_and_modules sort ) :flat_map) sort ","@store all_classes_and_modules sort  flat_map "]}," Darkfish generate_servlet_root":{"type":"method","name":"generate_servlet_root","children":[],"call":[" raise ","error set_backtrace ","e backtrace ","RDoc Error  new ","e class ","e message "," binding "," render_template "," debug_msg ","template_file exist? ","@template_dir + "," setup ","RDoc Error  new  set_backtrace ","@template_dir +  exist? "]}," Darkfish generate_servlet_not_found":{"type":"method","name":"generate_servlet_not_found","children":[],"call":[" raise ","error set_backtrace ","e backtrace ","RDoc Error  new ","e class ","e message "," binding "," render_template "," debug_msg ","template_file exist? ","@template_dir + "," setup ","here local_variable_set ","RDoc Error  new  set_backtrace ","@template_dir +  exist? "," binding  local_variable_set "]}," Darkfish generate_page":{"type":"method","name":"generate_page","children":[],"call":[" binding "," render_template "," debug_msg ","@options title ","file page_name ","rel_prefix + ","@outputdir relative_path_from ","out_file dirname ","  working on %s (%s) % ","file full_name ","@outputdir + ","file path ","@template_dir + "," setup ","here local_variable_set ","@outputdir relative_path_from  + ","@outputdir +  dirname "," binding  local_variable_set "]}," Darkfish generate_class":{"type":"method","name":"generate_class","children":[],"call":[" binding "," render_template "," debug_msg ","@options title ","klass full_name ","klass type "," get_svninfo ","rel_prefix + ","@outputdir relative_path_from ","out_file dirname ","@outputdir + ","klass path ","  working on %s (%s) % ","@template_dir + "," setup ","here local_variable_set "," get_ get_svninfo  ","@outputdir relative_path_from  + ","@outputdir +  dirname "," binding  local_variable_set "]}," Extend to_s":{"type":"method","name":"to_s","children":[],"call":[" parent "]}," Extend store=":{"type":"method","name":"store=","children":[],"call":["@store add_file ","@file full_name ","@store add_file  full_name "]}," Extend module":{"type":"method","name":"module","children":[],"call":["up parent ","@store modules_hash [] ","@store modules_hash ","up child_name "," parent parent "," parent ","ext child_name ","String  === ","i module ","searched each ","(send\n  (send\n    (send nil :parent) :extends) :take_while) reverse ","i != "," parent extends take_while "," parent extends ","@name =~ "," parent child_name ","up parent  parent "," parent parent  parent ","up parent  child_name "," parent parent  child_name ","i module  child_name ","(send\n  (send\n    (send nil :parent) :extends) :take_while) reverse  each ","(send\n  (send\n    (send nil :parent) :i module ends) :take_while) reverse "," parent i module ends take_while "," parent i module ends "]}," Extend inspect":{"type":"method","name":"inspect","children":[],"call":["#<%s:0x%x %s.extend %s> % "," parent_name "," object_id "," class "]}," Extend hash":{"type":"method","name":"hash","children":[],"call":["(ivar :@name) hash "," module "]}," Extend full_name":{"type":"method","name":"full_name","children":[],"call":["m full_name ","RDoc ClassModule  === "," module "," module  full_na module e ","  module odule "]}," Extend ==":{"type":"method","name":"==","children":[],"call":["@name == ","other name "," class === "," class "]}," Extend <=>":{"type":"method","name":"<=>","children":[],"call":[" name <=> ","other name "," name "," class === "," class "]}," Extend initialize":{"type":"method","name":"initialize","children":[],"call":[" comment= "]}," ERBPartial set_eoutvar":{"type":"method","name":"set_eoutvar","children":[],"call":["compiler pre_cmd= "]}," Context each_extend":{"type":"method","name":"each_extend","children":[],"call":["@extends each "]}," Context add_extend":{"type":"method","name":"add_extend","children":[],"call":[" add_to "]}," Section remove_comment":{"type":"method","name":"remove_comment","children":[],"call":[" raise ","@comments class ","document file == ","comment file name ","comment file ","document file ","@comments parts delete_if ","@comments parts ","my_comment file == ","my_comment file ","@comments delete_if ","@comments empty? "]}," Section parse":{"type":"method","name":"parse","children":[],"call":[" raise "," comments class "," comments ","doc file= ","@comments location "," comments format ","@comments text ","RDoc Markup Document  new ","@comments map "]}," Section marshal_load":{"type":"method","name":"marshal_load","children":[],"call":["array [] "]}," Section marshal_dump":{"type":"method","name":"marshal_dump","children":[],"call":[" parse "]}," Section in_files":{"type":"method","name":"in_files","children":[],"call":[" raise ","@comments class ","document file ","@comment parts map ","@comment parts ","comment file ","@comments map ","@comments empty? "]}," Section add_comment":{"type":"method","name":"add_comment","children":[],"call":[" raise ","comment inspect ","@comments concat ","comment parts ","@comments << ","comment empty? "," extract_comment "," extract_comment  inspect ","@ extract_comment s concat "," extract_comment  parts ","@ extract_comment s << "," extract_comment  empty? "," extract_ extract_comment  "]}," Constant store=":{"type":"method","name":"store=","children":[],"call":["@store add_file ","@file full_name ","@store add_file  full_name "]}," Constant pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp ","q breakable ","q text "," comment empty? "," comment ","q group "," full_name "," class name "," class "]}," Constant marshal_load":{"type":"method","name":"marshal_load","children":[],"call":["RDoc TopLevel  new ","array [] "," initialize "]}," Constant marshal_dump":{"type":"method","name":"marshal_dump","children":[],"call":[" section title "," section "," parent class "," parent "," parent name ","@file relative_name "," parse "," full_name ","found full_name "," is_alias_for "," is_alias_for  full_name "]}," Constant is_alias_for":{"type":"method","name":"is_alias_for","children":[],"call":["@store find_class_or_module "]}," Constant full_name":{"type":"method","name":"full_name","children":[],"call":[" parent_name "]}," CodeObject section":{"type":"method","name":"section","children":[],"call":[" parent add_section "," parent "]}," CodeObject parent":{"type":"method","name":"parent","children":[],"call":["@store load_class ","@store find_class_or_module ","@store add_file ","@parent_class == ","@store load_class _class == ","@store find_class_or_module _class == ","@store add_file _class == "]}," CodeObject initialize_visibility":{"type":"method","name":"initialize_visibility","children":[],"call":[]}," ClassModule update_extends":{"type":"method","name":"update_extends","children":[],"call":[" extends uniq! "," extends ","@store modules_hash [] nil? ","@store modules_hash [] ","mod full_name ","@store modules_hash ","(send\n  (const nil :String) :===\n  (lvar :mod)) ! ","String  === ","ext module "," extends reject! ","@store ext module ules_hash [] nil? ","@store ext module ules_hash [] ","ext module  full_name ","@store ext module ules_hash ","(send\n  (const nil :String) :===\n  (lvar :ext module )) ! ","ext ext module ule "]}," ClassModule store=":{"type":"method","name":"store=","children":[],"call":["meth store= ","@method_list each ","ext store= ","@extends each ","incl store= ","@includes each ","const store= ","@constants each ","attr store= ","@attributes each "]}," ClassModule remove_things":{"type":"method","name":"remove_things","children":[],"call":["things each ","other_files include? ","my_things delete_if "]}," ClassModule merge_sections":{"type":"method","name":"merge_sections","children":[],"call":[" add_section ","section comments ","sections each ","my_section remove_comment ","my_section add_comment "," merge_collections ","other_section in_files ","other_section comments ","my_section comments ","cm sections_hash [] ","cm sections_hash ","my_sections [] each ","my_sections [] ","my_sections include? ","other_sections each ","@sections delete ","section title "," remove_things ","cm in_files ","cm sections group_by ","cm sections "," sections group_by "," sections ","cm sections_hash []  in_files ","cm sections_hash []  comments ","cm sections_hash [] s each "]}," ClassModule documented?":{"type":"method","name":"documented?","children":[],"call":["@comment_location empty? ! ","@comment_location empty? ","comment empty? ! ","comment empty? ","@comment_location any? "]}," ClassModule add_things":{"type":"method","name":"add_things","children":[],"call":["things each ","my_things [] each ","my_things [] ","my_things include? ","other_things each "]}," Attr token_stream":{"type":"method","name":"token_stream","children":[],"call":[]}," Attr calls_super":{"type":"method","name":"calls_super","children":[],"call":[]}," AnyMethod superclass_method":{"type":"method","name":"superclass_method","children":[],"call":["m name == ","m name ","ancestor method_list find ","ancestor method_list "," parent each_ancestor "," parent "]}," AnyMethod store=":{"type":"method","name":"store=","children":[],"call":["@store add_file ","@file full_name ","@store add_file  full_name "]}," Parser remove_modeline":{"type":"method","name":"remove_modeline","children":[],"call":[]}," C deduplicate_method_name":{"type":"method","name":"deduplicate_method_name","children":[],"call":["method call_seq= ","matching join ","entry =~ ","Regexp  escape ","entries select ","call_seq split ","method_name [] ","method_name =~ ","method call_seq ","m name == ","m name ","class_obj method_list find ","class_obj method_list ","method method call_seq = ","call_seq split  select ","method call_seq  split ","method_name []  [] ","method_name []  =~ ","method method call_seq  "]}," C deduplicate_call_seq":{"type":"method","name":"deduplicate_call_seq","children":[],"call":[" deduplicate_method_name ","method_names each ","method_names length == ","method_names length ","functions each_value "," find_class ","@known_classes [] ","@methods each "]}," Markdown set_string":{"type":"method","name":"set_string","children":[],"call":["string size "]}," CodeObject options":{"type":"method","name":"options","children":[],"call":["RDoc Options  new ","@store rdoc options ","@store rdoc "]}," TomDoc parse_text":{"type":"method","name":"parse_text","children":[],"call":["parent << ","RDoc Markup BlankLine  new ","RDoc Markup Heading  new ","Returns == "," == "," build_paragraph "," build_ build_paragraph  "]}," TestCase mu_pp":{"type":"method","name":"mu_pp","children":[],"call":["s chomp ","s force_encoding ","Encoding  default_external ","PP  pp ","RDoc Encoding  change_encoding ","obj pretty_inspect ","s force_encoding  chomp ","PP  pp  chomp ","RDoc Encoding  change_encoding  chomp ","obj pretty_inspect  chomp ","s force_encoding  force_encoding ","PP  pp  force_encoding ","RDoc Encoding  change_encoding  force_encoding ","obj pretty_inspect  force_encoding ","obj pretty_ins force_encoding pect ","obj pretty_inPP  pp pect ","obj pretty_inRDoc Encoding  change_encoding pect ","obj pretty_inobj pretty_inspect pect "]}," TestCase refute_file":{"type":"method","name":"refute_file","children":[],"call":[" refute ","File  exist? "]}," TestCase assert_directory":{"type":"method","name":"assert_directory","children":[],"call":[" assert ","File  directory? "]}," TestCase assert_file":{"type":"method","name":"assert_file","children":[],"call":[" assert ","File  file? "]}," Driver render_method_superclass":{"type":"method","name":"render_method_superclass","children":[],"call":["out << ","RDoc Markup Rule  new ","RDoc Markup Heading  new ","method superclass_method ","RDoc Markup BlankLine  new ","method respond_to? "]}," Driver render_method_comment":{"type":"method","name":"render_method_comment","children":[],"call":["out << ","RDoc Markup BlankLine  new ","method comment ","alias_for comment ","RDoc Markup Paragraph  new ","alias_for full_name ","method comment empty? ","method comment nil? "]}," Driver render_method_arguments":{"type":"method","name":"render_method_arguments","children":[],"call":["out << ","RDoc Markup Rule  new ","RDoc Markup Verbatim  new ","line + ","arglists map ","arglists chomp split ","arglists chomp ","arglists chomp split  map ","arglists chomp split  chomp split ","arglists chomp split  chomp "]}," Driver render_method":{"type":"method","name":"render_method","children":[],"call":[" render_method_comment "," render_method_superclass "," render_method_arguments ","method arglists ","out << ","RDoc Markup Rule  new ","RDoc Markup Heading  new ","method parent_name ","name =~ ","Regexp  escape ","RDoc Markup Paragraph  new ","store friendly_path ","store load_method ","al name ","al name_prefix ","al parent_name ","method is_alias_for ","method is_alias_for  name ","method is_alias_for  name_prefix ","method is_alias_for  parent_name ","method is_store load_method  ","method is_method is_alias_for ias_for "]}," Driver render_class":{"type":"method","name":"render_class","children":[],"call":[" add_method_documentation "," add_method_list "," class_document_constants ","out << ","RDoc Markup Rule  new ","klass constants empty? ! ","klass constants empty? ","klass constants "," class_document_comment "," add_from ","also_in << ","class_methods empty? ","instance_methods empty? ","comment empty? ","store attributes [] ","klass full_name ","store attributes ","store instance_methods [] ","store instance_methods ","store class_methods [] ","store class_methods ","klass comment "," class_document_klass comment  ","klass comment  empty? ","klass klass comment  "]}," Driver complete_method":{"type":"method","name":"complete_method","children":[],"call":["completions concat ","completions << ","completions delete ","methods empty? ! ","methods empty? "," list_methods_matching ","name =~ ","completions include? "," list_methods_matching  empty? ! "," list_methods_matching  empty? "," list_ list_methods_matching _matching "]}," Driver complete_klass":{"type":"method","name":"complete_klass","children":[],"call":["completions << "," classes key? "," classes ","completions concat ","klasses grep ","Regexp  escape ","name =~ ","completions replace ","name !~ "," classes keys "," classes keys  grep "]}," Driver class_document_constants":{"type":"method","name":"class_document_constants","children":[],"call":["out << ","RDoc Markup BlankLine  new ","list items concat ","RDoc Markup ListItem  new ","constant name ","parts << ","RDoc Markup Paragraph  new ","parts empty? ","constant comment parts ","constant comment ","constants map ","list items ","klass constants sort_by ","klass constants ","RDoc Markup List  new ","RDoc Markup Heading  new ","klass constants empty? ","RDoc Markup List  new  items concat ","constant comment parts  << ","constant comment parts  empty? ","constant comment constant comment parts  ","RDoc Markup List  new  items "]}," Driver class_document_comment":{"type":"method","name":"class_document_comment","children":[],"call":["out << ","out concat ","parts pop ","parts flatten! ","parts zip ","(send\n  (const\n    (const\n      (const nil :RDoc) :Markup) :BlankLine) :new) * ","parts length ","RDoc Markup BlankLine  new ","comment parts ","comment merged? ","RDoc Markup Rule  new ","comment empty? ","parts zip  pop ","comment parts  pop ","parts zip  flatten! ","comment parts  flatten! ","parts zip  zip ","comment parts  zip ","parts zip  length ","comment parts  length ","comment parts zip  ","comment comment parts  "]}," Driver add_extension_modules_single":{"type":"method","name":"add_extension_modules_single","children":[],"call":["out << ","include comment ","RDoc Markup BlankLine  new ","RDoc Markup Paragraph  new ","store friendly_path ","include name ","store friendly_store friendly_path  ","include include name  "]}," Driver add_extension_modules_multiple":{"type":"method","name":"add_extension_modules_multiple","children":[],"call":["out << ","verb push ","incl name ","wout each ","RDoc Markup Verbatim  new ","wout empty? ","incl comment ","RDoc Markup BlankLine  new ","RDoc Markup Paragraph  new ","with each ","with empty? ","incl comment empty? ","modules partition ","store friendly_path ","RDoc Markup Verbatim  new  push "]}," Ruby update_visibility":{"type":"method","name":"update_visibility","children":[],"call":["method visibility= ","container add_attribute ","container add_method ","new_methods each ","container set_visibility_for "," parse_symbol_arg ","m visibility= ","new_methods << "," record_location ","m dup ","m parent != ","m parent ","container methods_matching ","s_m singleton= ","m dup ethod visibility= ","container add_m dup ethod ","new_m dup ethods each "," parse_sym dup bol_arg ","m dup  visibility= ","new_m dup ethods << ","m dup  dup ","m dup  parent != ","m dup  parent ","container m dup ethods_m dup atching ","container methodm dup atching ","s_m dup  singleton= ","m dup  singleton= "]}," Ruby record_location":{"type":"method","name":"record_location","children":[],"call":["container record_location ","@top_level add_to_classes_or_modules "]}," Ruby parse_symbol_arg_space":{"type":"method","name":"parse_symbol_arg_space","children":[],"call":["args size >= ","args size ","args push "," parse_symbol_in_arg "," skip_tkspace_comment "," unget_tk ","TkCOMMA  === "," get_tk "," skip_tkspace "," loop ","on_comma != ","tk1 [] ","tk1 nil? "," skip_tkspace_without_nl "," skip_ parse_symbol_in_arg space_comment "," unget_ parse_symbol_in_arg  "," get_ parse_symbol_in_arg  "," skip_ parse_symbol_in_arg space "," parse_symbol_in_arg 1 [] "," get_tk  [] "," parse_symbol_in_arg 1 nil? "," get_tk  nil? "," skip_ parse_symbol_in_arg space_without_nl "]}," Ruby parse_symbol_arg_paren":{"type":"method","name":"parse_symbol_arg_paren","children":[],"call":[" warn ","tk2 inspect "," get_tk "," skip_tkspace_comment ","args size >= ","args size ","args push "," parse_symbol_in_arg "," loop ","(lvasgn :tk2\n  (send nil :get_tk)) [] "," get_tk  inspect ","(lvasgn : get_tk \n  (send nil :get_tk)) [] "]}," Ruby parse_method_name_singleton":{"type":"method","name":"parse_method_name_singleton","children":[],"call":[" skip_method "," warn ","name_t inspect ","name_t2 name ","@top_level add_class ","@store find_class_named ","name_t name capitalize ","name_t name "," parse_method_dummy "," get_method_container "," get_tk "," skip_tkspace ","@scanner lex_state= ","name_t2 [] ","name_t [] capitalize ","name_t [] ","nil == ","false == ","true == ","on_kw == ","on_gvar == ","on_ivar == ","on_ident == ","on_const == ","on_lbracket == ","% == ","on_op == ","self == ","name_t2 name _t inspect ","name_t2 [] _t inspect ","name_t2 name _t2 name_t2 name  ","name_t2 [] _t2 name_t2 []  "," get_tk  name ","@store find_class_name_t2 name d ","@store find_class_name_t2 [] d ","name_t2 name _t name_t2 name  capitalize ","name_t2 [] _t name_t2 []  capitalize ","name_t2 name _t name_t2 name  ","name_t2 [] _t name_t2 []  "," get_method_@store find_class_named  "," get_method_ get_method_container  ","name_t2 name _t2 [] ","name_t2 [] _t2 [] "," get_tk  [] ","name_t2 name _t [] capitalize ","name_t2 [] _t [] capitalize ","name_t2 name _t [] ","name_t2 [] _t [] "]}," Ruby parse_method_name_regular":{"type":"method","name":"parse_method_name_regular","children":[],"call":["name_t name "," skip_method "," warn ","name_t inspect ","name_t respond_to? ","name_t text ","name_t [] ","(sym :on_kw) include? ","(str \"*\") include? ","on_op == "]}," Ruby parse_method_name":{"type":"method","name":"parse_method_name","children":[],"call":[" parse_method_name_regular "," unget_tk ","back_tk reverse_each "," parse_method_name_singleton "," get_tk "," skip_tkspace ","@scanner lex_state= ","dot [] == ","dot [] "," skip_tkspace_without_nl "," parse_method_ parse_method_name_regular _regular "," skip_tkspace  reverse_each "," skip_tkspace_without_nl  reverse_each "," parse_method_ parse_method_name_regular _singleton "," get_tk  [] == "," get_tk  [] "]}," Ruby parse_method_params_and_body":{"type":"method","name":"parse_method_params_and_body","children":[],"call":[" parse_statements ","meth visibility= ","meth name= ","meth singleton= ","meth dont_rename_initialize ","meth singleton ! ","meth singleton ","meth name == ","meth name ","container document_self= ","container add_method ","@track_visibility ! ","meth document_self "," parse_method_parameters ","@scanner continue= "," token_listener "]}," Ruby parse_meta_method_params":{"type":"method","name":"parse_meta_method_params","children":[],"call":[" parse_statements ","TkCOMMA  === "," get_tk ","container add_method ","comment extract_call_seq ","comment normalize ","meth params= "," token_listener ","do == ","tk [] ","on_kw == ","on_sp == ","on_comma == ","last_tk [] ","on_nl == ","on_semicolon == "," look_for_directives_in "," get_ get_tk  "," get_tk  [] ","last_ get_tk  [] "]}," Ruby parse_meta_method_name":{"type":"method","name":"parse_meta_method_name","children":[],"call":[" warn ","tk name ","name_t inspect "," remove_token_listener ","name_t value [] ","name_t value ","name_t text [] ","name_t text "," get_tk ","1 empty? ","comment text sub! ","comment text ","tk [] ","= == ","name_t [] ","on_op == ","name_t [] [] ","on_tstring == ","on_symbol == "," get_tk  inspect "," get_tk  value [] "," get_tk  value "," get_tk  text [] "," get_tk  text "," get_tk  [] "," get_tk  [] [] "]}," Ruby parse_identifier":{"type":"method","name":"parse_identifier","children":[],"call":["method block_params= ","container block_params ","method params= ","container params "," parse_meta_method "," parse_meta_attr ","comment text ","comment text =~ "," parse_alias "," parse_attr_accessor "," parse_attr "," parse_visibility ","tk name "," parse_constant_visibility ","tk [] "," parse_meta_method  block_params= "," parse_meta_method  params= "," parse_meta_ parse_meta_method  "]}," Ruby parse_extend_or_include":{"type":"method","name":"parse_extend_or_include","children":[],"call":[" get_tk ","TkCOMMA  === "," peek_tk "," record_location ","container add ","name empty? "," get_constant_with_optional_parens "," skip_tkspace_comment "," loop ","on_comma != "," peek_tk [] "," peek_tk nil? "," get_included_module_with_optional_parens "," get_constant_with_optional_parens  empty? "," get_included_module_with_optional_parens  empty? "]}," Ruby parse_comment_ghost":{"type":"method","name":"parse_comment_ghost","children":[],"call":["@stats add_method ","meth comment= ","container add_method ","meth name ","comment extract_call_seq ","comment normalize ","meth params= ","text sub! ","meth add_tokens ","position_comment set_text ","@top_level relative_name ","TkCOMMENT  new ","indent set_text ","  * ","TkSPACE  new ","meth start_collecting_tokens "," record_location ","RDoc GhostMethod  new "," get_tkread ","name empty? ","position_comment []= ","RDoc Parser RipperStateLex Token  new ","@stats add_RDoc GhostMethod  new od ","RDoc GhostMethod  new  comment= ","container add_RDoc GhostMethod  new od ","RDoc GhostMethod  new  name ","RDoc GhostMethod  new  params= ","RDoc GhostMethod  new  add_tokens ","TkCOMMENT  new  set_text ","RDoc Parser RipperStateLex Token  new  set_text ","TkSPACE  new  set_text ","RDoc GhostMethod  new  start_collecting_tokens ","TkCOMMENT  new  []= ","RDoc Parser RipperStateLex Token  new  []= "]}," Ruby parse_comment_attr":{"type":"method","name":"parse_comment_attr","children":[],"call":[" create_attr ","name empty? "]}," Ruby parse_constant_body":{"type":"method","name":"parse_constant_body","children":[],"call":[" get_tkread_clean "," get_tk ","rhs_name << "," unget_tk "," stop_at_EXPR_END ","nest <= "," create_module_alias ","TkNL  === "," peek_tk ","tk name "," read_documentation_modifiers "," loop "," get_tkread ",":: == ","tk [] ","on_op == ","RDoc RipperStateLex  end? ","on_nl == ","next_tk [] ","next_tk nil? ","on_const == ","on_embdoc == ","on_comment == ","end == ","on_kw == ","(sym :on_rparen) include? ","(send\n  (send\n    (lvar :tk) :[]\n    (sym :state)) :&\n  (const\n    (const\n      (const nil :RDoc) :RipperStateLex) :EXPR_LABEL)) == ","tk [] & ","(str \"do\") include? ","def == ","(sym :on_tlambeg) include? ","on_semicolon == ","tk nil? "," dup ","(send\n  (const\n    (const\n      (const nil :RDoc) :RipperStateLex) :EXPR_LABEL) :&\n  (send\n    (lvar :tk) :[]\n    (sym :state))) == ","RDoc RipperStateLex EXPR_LABEL  & ","RDoc Parser RipperStateLex  end? ","(send\n  (send\n    (lvar :tk) :[]\n    (sym :state)) :&\n  (const\n    (const\n      (const\n        (const nil :RDoc) :Parser) :RipperStateLex) :EXPR_LABEL)) == "," get_ get_tk read_clean "," get_ get_tk  "," dup  << "," unget_ get_tk  "," peek_ get_tk  "," get_tk  name "," get_ get_tk read "," get_tk  [] ","next_ get_tk  [] "," peek_tk  [] ","next_ get_tk  nil? "," peek_tk  nil? ","(send\n  (send\n    (lvar : get_tk ) :[]\n    (sym :state)) :&\n  (const\n    (const\n      (const nil :RDoc) :RipperStateLex) :EXPR_LABEL)) == "," get_tk  [] & "," get_tk  nil? ","(send\n  (const\n    (const\n      (const nil :RDoc) :RipperStateLex) :EXPR_LABEL) :&\n  (send\n    (lvar : get_tk ) :[]\n    (sym :state))) == ","(send\n  (send\n    (lvar : get_tk ) :[]\n    (sym :state)) :&\n  (const\n    (const\n      (const\n        (const nil :RDoc) :Parser) :RipperStateLex) :EXPR_LABEL)) == "]}," Ruby parse_class_singleton":{"type":"method","name":"parse_class_singleton","children":[],"call":[" parse_statements "," read_documentation_modifiers ","@stats add_class ","@top_level add_to_classes_or_modules ","other clear_comment ","other document_children= ","other document_self= ","name =~ ","other add_comment ","other ignore ","name empty? "," record_location ","container add_module ","@store find_class_named ","container add_module  clear_comment ","@store find_class_named  clear_comment ","container add_module  document_children= ","@store find_class_named  document_children= ","container add_module  document_self= ","@store find_class_named  document_self= ","container add_module  add_comment ","@store find_class_named  add_comment ","container add_module  ignore ","@store find_class_named  ignore "]}," Ruby parse_class_regular":{"type":"method","name":"parse_class_regular","children":[],"call":[" parse_statements "," suppress_parents ","cls document_self ","@stats add_class ","@top_level add_to_classes_or_modules ","cls add_comment "," record_location "," read_documentation_modifiers ","cls ignore ","container document_children ","declaration_context add_class ","single == ","superclass empty? "," get_class_specification "," skip_tkspace "," get_tk ","TkLT  === "," peek_tk ","given_name =~ ","tk [] == ","tk [] ","declaration_context add_class  document_self ","declaration_context add_class  add_comment ","declaration_context add_class  ignore "," get_class_specification  empty? "," skip_ peek_tk space "," get_ peek_tk  "," peek_ peek_tk  "," peek_tk  [] == "," peek_tk  [] "]}," Ruby suppress_parents":{"type":"method","name":"suppress_parents","children":[],"call":["container parent ","container suppress ","container documented? ","container != ","container parent  parent ","container parent  suppress ","container parent  documented? ","container parent  != "]}," Ruby stop_at_EXPR_END":{"type":"method","name":"stop_at_EXPR_END","children":[],"call":["@scanner continue ! ","@scanner continue ","@scanner lex_state == ","@scanner lex_state "]}," Ruby get_method_container":{"type":"method","name":"get_method_container","children":[],"call":[" record_location ","prev_container add_module ","name_t name ","prev_container add_class ","obj superclass name ","obj superclass ","type == "," warn ","(const nil :Class) include? ","obj class ","obj class == ","state const_get ","name_t name split inject ","name_t name split "," parse_method_dummy ","const name == ","const name ","prev_container constants find ","prev_container constants ","container find_module_named ","name_t [] ","name_t [] split inject ","name_t [] split ","prev_prev_container add_module  add_module ","prev_prev_container add_class  add_module ","prev_container find_module_named  add_module ","prev_prev_container add_module  add_class ","prev_prev_container add_class  add_class ","prev_container find_module_named  add_class ","prev_prev_container add_module  constants find ","prev_prev_container add_class  constants find ","prev_container find_module_named  constants find ","prev_prev_container add_module  constants ","prev_prev_container add_class  constants ","prev_container find_module_named  constants ","prev_container add_module  find_module_named ","prev_container add_class  find_module_named ","container find_module_named  find_module_named "]}," Ruby get_end_token":{"type":"method","name":"get_end_token","children":[],"call":["tk [] ","token []= ","RDoc Parser RipperStateLex Token  new ","RDoc Parser RipperStateLex Token  new  []= "]}," Ruby create_module_alias":{"type":"method","name":"create_module_alias","children":[],"call":["container add_module_alias ","constant name ","container find_module_named ","@store find_class_or_module ","rhs_name =~ ","container add_container find_module_named ule_alias ","container add_@store find_class_or_module ule_alias ","container find_container find_module_named ule_named ","container find_@store find_class_or_module ule_named ","@store find_class_or_container find_module_named ule ","@store find_class_or_@store find_class_or_module ule "]}," Ruby create_attr":{"type":"method","name":"create_attr","children":[],"call":["@stats add_attribute ","container add_attribute "," record_location ","RDoc Attr  new ","single == "," get_tkread ","@stats add_RDoc Attr  new ribute ","container add_RDoc Attr  new ribute "]}," Ruby consume_trailing_spaces":{"type":"method","name":"consume_trailing_spaces","children":[],"call":[" skip_tkspace "," get_tkread "," skip_tkspace_without_nl "]}," Ruby get_visibility_information":{"type":"method","name":"get_visibility_information","children":[],"call":[" raise ","tk name ","single == ","tk [] "]}," Ruby get_tkread_clean":{"type":"method","name":"get_tkread_clean","children":[],"call":["read == "," get_tkread gsub strip "," get_tkread gsub "," get_tkread "," get_tkread gsub strip  == "," get_tk get_tkread gsub strip  gsub strip "," get_tk get_tkread gsub strip  gsub "," get_tk get_tkread gsub strip  "]}," NormalModule aref_prefix":{"type":"method","name":"aref_prefix","children":[],"call":[]}," NormalClass aref_prefix":{"type":"method","name":"aref_prefix","children":[],"call":[]}," Mixin to_s":{"type":"method","name":"to_s","children":[],"call":[" parent "," class name downcase "," class name "," class "]}," Mixin store=":{"type":"method","name":"store=","children":[],"call":["@store add_file ","@file full_name ","@store add_file  full_name "]}," Mixin module":{"type":"method","name":"module","children":[],"call":["up parent ","@store modules_hash [] ","@store modules_hash ","up child_name "," parent parent "," parent ","inc child_name ","String  === ","i module ","searched each ","(send\n  (send\n    (send nil :parent) :includes) :take_while) reverse ","i != "," parent includes take_while "," parent includes ","@name =~ "," parent child_name ","up parent  parent "," parent parent  parent ","up parent  child_name "," parent parent  child_name ","i module  child_name ","(send\n  (send\n    (send nil :parent) :includes) :take_while) reverse  each ","(send\n  (send\n    (send nil :parent) :i module ludes) :take_while) reverse "," parent i module ludes take_while "," parent i module ludes "]}," Mixin inspect":{"type":"method","name":"inspect","children":[],"call":["#<%s:0x%x %s.%s %s> % "," class name downcase "," class name "," class "," parent_name "," object_id "]}," Mixin hash":{"type":"method","name":"hash","children":[],"call":["(ivar :@name) hash "," module "]}," Mixin full_name":{"type":"method","name":"full_name","children":[],"call":["m full_name ","RDoc ClassModule  === "," module "," module  full_na module e ","  module odule "]}," Mixin ==":{"type":"method","name":"==","children":[],"call":["@name == ","other name "," class === "," class "]}," Mixin <=>":{"type":"method","name":"<=>","children":[],"call":[" name <=> ","other name "," name "," class === "," class "]}," Mixin initialize":{"type":"method","name":"initialize","children":[],"call":[" comment= "]}," MethodAttr initialize_visibility":{"type":"method","name":"initialize_visibility","children":[],"call":[]}," MethodAttr initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":[]}," ToHtml handle_RDOCLINK":{"type":"method","name":"handle_RDOCLINK","children":[],"call":["url =~ "," gen_url ","CGI  escapeHTML "]}," Parser parse_text":{"type":"method","name":"parse_text","children":[],"call":["parent << "," build_paragraph "]}," label":{"type":"method","name":"label","children":[],"call":["(send\n  (lvar :context) :aref) compact join ","(send\n  (lvar :context) :aref) compact ","context aref ","context respond_to? "," aref "]}," Literals set_string":{"type":"method","name":"set_string","children":[],"call":["string size "]}," Darkfish install_rdoc_static_file":{"type":"method","name":"install_rdoc_static_file","children":[],"call":["FileUtils  cp ","FileUtils  rm ","FileUtils  ln ","FileUtils  mkdir_p ","File  dirname ","source exist? "]}," Context add":{"type":"method","name":"add","children":[],"call":[" raise "," add_include ","RDoc Include  new ","RDoc Include  == "," add_extend ","RDoc Extend  new ","RDoc Extend  == "," add_RDoc Include  new ude "," add_RDoc Extend  new end "]}," CodeObject suppressed?":{"type":"method","name":"suppressed?","children":[],"call":[]}," CodeObject suppress":{"type":"method","name":"suppress","children":[],"call":[" stop_doc "]}," CodeObject store=":{"type":"method","name":"store=","children":[],"call":[" initialize_visibility ","nodoc == "," options visibility "," options "]}," ClassModule aref":{"type":"method","name":"aref","children":[],"call":[" full_name "," aref_prefix "]}," ClassModule aref_prefix":{"type":"method","name":"aref_prefix","children":[],"call":[" raise "," class "]}," AnyMethod is_alias_for":{"type":"method","name":"is_alias_for","children":[],"call":["klass find_method ","@store find_class_or_module ","@store find_class_or_module  find_method "]}," AnyMethod call_seq=":{"type":"method","name":"call_seq=","children":[],"call":["call_seq empty? "]}," SingleClass aref_prefix":{"type":"method","name":"aref_prefix","children":[],"call":[]}," Options visibility=":{"type":"method","name":"visibility=","children":[],"call":[]}," Markdown _HtmlAnchor":{"type":"method","name":"_HtmlAnchor","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlCloseAnchor":{"type":"method","name":"_HtmlCloseAnchor","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlOpenAnchor":{"type":"method","name":"_HtmlOpenAnchor","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," POT extract_messages":{"type":"method","name":"extract_messages","children":[],"call":["extractor extract ","MessageExtractor  new ","MessageExtractor  new  extract "]}," POT class_dir":{"type":"method","name":"class_dir","children":[],"call":[]}," POT generate":{"type":"method","name":"generate","children":[],"call":["pot print ","po to_s ","File  open "," extract_messages "," extract_messages t print "," extract_messages  to_s "]}," POT initialize":{"type":"method","name":"initialize","children":[],"call":[]}," JsonIndex generate_gzipped":{"type":"method","name":"generate_gzipped","children":[],"call":["gz close ","gz write ","gz orig_name= ","dest to_s ","gz mtime= ","File  mtime ","Zlib GzipWriter  open "," debug_msg ","Writing gzipped file to %s % ","dest read ","Reading the original js file from %s % ","out_dir + ","Dir  [] each ","Dir  [] ","Dir  chdir ","search_index_file to_s ","Writing gzipped search index to %s % ","search_index_file read ","Reading the JSON index file from %s % ","@base_dir + ","@options op_dir ","dest basename to_s ","dest basename ","search_index_file basename to_s ","search_index_file basename ","(const nil :Zlib) ! ","@options dry_run ","out_dir +  to_s ","out_dir +  read ","@base_dir +  + ","search_index_file read _file to_s ","search_index_file read _file read ","out_dir +  basename to_s ","out_dir +  basename ","search_index_file read _file basename to_s ","search_index_file read _file basename "]}," Text emit_paragraph_event":{"type":"method","name":"emit_paragraph_event","children":[],"call":["paragraph_part []= "," emit_empty_line_event ","match_data [] ","match_data pre_match ","(str \"(\\\\s*)\\\\z\") match ","(str \"(\\s*)\\z\") match  [] ","(str \"(\\s*)\\z\") match  pre_match "]}," Text emit_empty_line_event":{"type":"method","name":"emit_empty_line_event","children":[],"call":[]}," Text each_line":{"type":"method","name":"each_line","children":[],"call":["raw each_line "," each_line ","raw each ","raw text each_line ","raw text "]}," Text translate":{"type":"method","name":"translate","children":[],"call":[" raise "," type ","translated_text << ","part [] ","locale translate "," parse "]}," Text extract_messages":{"type":"method","name":"extract_messages","children":[],"call":["part [] "," parse "]}," Text initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Locale translate":{"type":"method","name":"translate","children":[],"call":["@messages [] "]}," Locale load":{"type":"method","name":"load","children":[],"call":["@messages merge! ","po_parser parse_file ","po_parser report_warning= ","GetText MO  new ","GetText POParser  new "," warn "," require ","File  exist? ","po_file_candidates find ","File  join ","@name nil? ","@GetText MO  new  merge! ","GetText POParser  new  parse_file ","GetText POParser  new  report_warning= "]}," Locale initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Locale []=":{"type":"method","name":"[]=","children":[],"call":["@@locales []= "]}," Locale []":{"type":"method","name":"[]","children":[],"call":[" new ","@@locales [] "]}," POEntry merge_array":{"type":"method","name":"merge_array","children":[],"call":["(send\n  (lvar :array1) :+\n  (lvar :array2)) uniq ","array1 + "]}," POEntry merge_string":{"type":"method","name":"merge_string","children":[],"call":["(lvar :string1) compact join ","(lvar :string1) compact "]}," POEntry escape":{"type":"method","name":"escape","children":[],"call":["string gsub "]}," POEntry format_message":{"type":"method","name":"format_message","children":[],"call":["formatted_message << "," escape ","message each_line ","message include? "]}," POEntry format_flags":{"type":"method","name":"format_flags","children":[],"call":[" flags join "," flags ","@flags empty? "]}," POEntry format_references":{"type":"method","name":"format_references","children":[],"call":["formatted_references << ","@references sort each ","@references sort ","@references empty? "]}," POEntry format_extracted_comment":{"type":"method","name":"format_extracted_comment","children":[],"call":[" format_comment "]}," POEntry format_translator_comment":{"type":"method","name":"format_translator_comment","children":[],"call":[" format_comment "]}," POEntry format_comment":{"type":"method","name":"format_comment","children":[],"call":["formatted_comment << ","formatted_comment end_with? ","comment each_line ","comment empty? "]}," POEntry merge":{"type":"method","name":"merge","children":[],"call":[" class new "," class "," merge_array ","other_entry flags ","other_entry references "," merge_string ","other_entry translator_comment ","other_entry extracted_comment "]}," POEntry to_s":{"type":"method","name":"to_s","children":[],"call":["entry << "," format_message "," format_flags "," format_references "," format_extracted_comment "," format_translator_comment "]}," POEntry initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," PO sort_entries":{"type":"method","name":"sort_entries","children":[],"call":["headers + ","entry msgid ","messages sort_by ","entry msgid empty? ","@entries values partition ","@entries values "]}," PO header_entry":{"type":"method","name":"header_entry","children":[],"call":["RDoc Generator POT POEntry  new "]}," PO add_header":{"type":"method","name":"add_header","children":[],"call":[" add "," header_entry "]}," PO to_s":{"type":"method","name":"to_s","children":[],"call":["po << ","entry to_s ","po empty? "," sort_entries each "," sort_entries "]}," PO add":{"type":"method","name":"add","children":[],"call":["@entries []= ","entry msgid ","existing_entry merge ","@entries [] ","existing_entry merge  msgid ","existing_existing_entry merge  merge ","@entries []  merge "]}," PO initialize":{"type":"method","name":"initialize","children":[],"call":[" add_header "]}," MessageExtractor entry":{"type":"method","name":"entry","children":[],"call":["RDoc Generator POT POEntry  new "]}," MessageExtractor extract_text":{"type":"method","name":"extract_text","children":[],"call":["@po add "," entry ","part [] ","i18n_text extract_messages ","RDoc I18n Text  new ","(lvar :location) compact ","text nil? ","RDoc I18n Text  new  extract_messages "]}," MessageExtractor extract_from_klass":{"type":"method","name":"extract_from_klass","children":[],"call":[" extract_text ","method full_name ","method comment ","klass each_method ","attribute full_name ","attribute comment ","klass each_attribute ","constant full_name ","constant comment ","klass each_constant ","section title ","klass full_name ","section comments each ","section comments ","klass each_section ","klass comment_location "]}," MessageExtractor extract":{"type":"method","name":"extract","children":[],"call":[" extract_from_klass ","@store all_classes_and_modules each ","@store all_classes_and_modules "]}," MessageExtractor initialize":{"type":"method","name":"initialize","children":[],"call":["RDoc Generator POT PO  new "]}," RubyLex tokenize":{"type":"method","name":"tokenize","children":[],"call":[]}," C gen_const_table":{"type":"method","name":"gen_const_table","children":[],"call":["table []= ","/*\n + ","@content scan "]}," C gen_body_table":{"type":"method","name":"gen_body_table","children":[],"call":["table [] ","table []= ","$~ offset ","table [] [] == ","table [] [] ","table [] ! ","table [] [] != ","file_content scan "]}," Encoding remove_frozen_string_literal":{"type":"method","name":"remove_frozen_string_literal","children":[],"call":[]}," Section hash":{"type":"method","name":"hash","children":[],"call":["@title hash "]}," Markdown _Strike":{"type":"method","name":"_Strike","children":[],"call":[" set_failed_rule "," pos= "," strike ","a join "," match_string ","a << "," apply "," pos "," _StartList "," _Whitespace "," strike? "]}," Markdown _Whitespace":{"type":"method","name":"_Whitespace","children":[],"call":[" set_failed_rule "," pos= "," _Newline "," _Spacechar "," pos "]}," Markdown _HtmlBlockHead":{"type":"method","name":"_HtmlBlockHead","children":[],"call":[" set_failed_rule "," pos= "," apply "," get_byte "," pos "]}," Markdown _HtmlBlockCloseHead":{"type":"method","name":"_HtmlBlockCloseHead","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown _HtmlBlockOpenHead":{"type":"method","name":"_HtmlBlockOpenHead","children":[],"call":[" set_failed_rule "," pos= "," match_string "," apply "," pos "]}," Markdown strike":{"type":"method","name":"strike","children":[],"call":["text =~ "]}," Driver check_did_you_mean":{"type":"method","name":"check_did_you_mean","children":[],"call":[" require "]}," Driver NotFoundError name":{"type":"method","name":"name","children":[],"call":[]}," Driver NotFoundError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RubyTools tk_nl?":{"type":"method","name":"tk_nl?","children":[],"call":["on_ignored_nl == ","tk [] ","on_nl == "]}," Ruby parse_constant_visibility":{"type":"method","name":"parse_constant_visibility","children":[],"call":["container set_constant_visibility_for "," raise ","tk [] "," parse_symbol_arg "]}," Ruby tk_nl?":{"type":"method","name":"tk_nl?","children":[],"call":["on_ignored_nl == ","tk [] ","on_nl == "]}," RipperStateLex end?":{"type":"method","name":"end?","children":[],"call":[]}," RipperStateLex parse":{"type":"method","name":"parse","children":[],"call":[]}," RipperStateLex initialize":{"type":"method","name":"initialize","children":[],"call":["y << ","@inner_lex each ","Enumerator  new ","InnerStateLex  new ","@inner_lex parse ","InnerStateLex  new  each ","InnerStateLex  new  parse "]}," RipperStateLex get_op_tk":{"type":"method","name":"get_op_tk","children":[],"call":["@buf unshift ","tk []= ","tk_ahead [] ","tk [] "," get_squashed_tk ","tk [] =~ ","Ripper Lexer State  new ","Ripper Lexer  const_defined? ","@inner_lex lex_state= ","tk [] == ","redefinable_operators include? ","@inner_lex lex_state ","EXPR_ARG  == "," get_squashed_tk  [] "]}," RipperStateLex get_words_tk":{"type":"method","name":"get_words_tk","children":[],"call":["tk [] ","end_quote == ","tk [] strip ","on_tstring_end == ","on_words_sep == ","on_tstring_content == ","tk nil? "," get_squashed_tk "," loop ","tk [] rstrip [] ","tk [] rstrip ","Token  new "," get_squashed_tk  [] "," get_squashed_tk  [] strip "," get_squashed_tk  nil? "," get_squashed_ get_squashed_tk  "," get_squashed_tk  [] rstrip [] "," get_squashed_tk  [] rstrip "]}," RipperStateLex heredoc_end?":{"type":"method","name":"heredoc_end?","children":[],"call":["name == ","tk [] gsub ","tk [] ","on_heredoc_end == ","tk_name lstrip! ","tk [] chomp ","tk [] chomp  lstrip! "]}," RipperStateLex retrieve_heredoc_info":{"type":"method","name":"retrieve_heredoc_info","children":[],"call":["tk [] =~ ","tk [] ","tk [] gsub "]}," RipperStateLex get_heredoc_tk":{"type":"method","name":"get_heredoc_tk","children":[],"call":["@buf unshift ","prev_tk [] ","start_tk [] ","string + ","tk [] ","  * ","0 != ","\n == ","prev_tk [] [] ","prev_tk nil? "," heredoc_end? ","@inner_lex_enumerator next ","Token  new ","prev_tk state ","start_tk char_no ","start_tk line_no ","@tokens shift ","prev_@inner_lex_enumerator next  [] ","prev_@tokens shift  [] ","start_@inner_lex_enumerator next  [] ","start_@tokens shift  [] ","string +  + ","@inner_lex_enumerator next  [] ","@tokens shift  [] ","prev_@inner_lex_enumerator next  [] [] ","prev_@tokens shift  [] [] ","prev_@inner_lex_enumerator next  nil? ","prev_@tokens shift  nil? ","prev_@inner_lex_enumerator next  state ","prev_@tokens shift  state ","start_@inner_lex_enumerator next  char_no ","start_@tokens shift  char_no ","start_@inner_lex_enumerator next  line_no ","start_@tokens shift  line_no "]}," RipperStateLex get_embdoc_tk":{"type":"method","name":"get_embdoc_tk","children":[],"call":["embdoc_tk [] ","tk [] ","string + ","on_embdoc_end == ","(lvasgn :embdoc_tk\n  (send nil :get_squashed_tk)) [] "," get_squashed_tk ","Token  new ","embdoc_tk state ","tk char_no ","tk line_no "," get_squashed_tk  [] ","string +  + ","tk []  + ","(lvasgn : get_squashed_tk \n  (send nil :get_squashed_tk)) [] "," get_squashed_tk  state "]}," RipperStateLex get_regexp_tk":{"type":"method","name":"get_regexp_tk","children":[],"call":["tk [] ","string + ","inner_str_tk [] ","on_regexp_end == ","inner_str_tk nil? "," get_squashed_tk "," loop ","Token  new ","tk char_no ","tk line_no ","string +  + ","tk []  + "," get_squashed_tk  [] "," get_squashed_tk  nil? "]}," RipperStateLex get_string_tk":{"type":"method","name":"get_string_tk","children":[],"call":["tk [] ","on_tstring == ","on_embexpr_beg == ","inner_str_tk [] ","string + ","on_label_end == ","on_tstring_end == ","inner_str_tk nil? "," get_squashed_tk "," loop ","Token  new ","tk char_no ","tk line_no ","on_tstring +  == ","on_ttk []  == "," get_squashed_tk  [] ","string +  + ","tk []  + ","on_tstring + _end == ","on_ttk [] _end == "," get_squashed_tk  nil? "]}," RipperStateLex get_symbol_tk":{"type":"method","name":"get_symbol_tk","children":[],"call":["symbol_tk []= ","tk1 [] "," get_squashed_tk [] "," get_squashed_tk ","(lvasgn :tk1\n  (send nil :get_squashed_tk)) [] "," get_string_tk ",":\" == ","tk [] ",":' == ","Token  new ","tk char_no ","tk line_no ","tk [] start_with? ","Token  new  []= "," get_squashed_tk  [] "," get_string_tk  [] ","(lvasgn : get_squashed_tk \n  (send nil :get_squashed_tk)) [] ","(lvasgn : get_string_tk \n  (send nil :get_squashed_tk)) [] "]}," RipperStateLex get_squashed_tk":{"type":"method","name":"get_squashed_tk","children":[],"call":[" get_op_tk ","tk []= ","&. == ","tk [] "," get_words_tk "," get_heredoc_tk ","@heredoc_queue shift ","@heredoc_queue empty? ","@inner_lex lex_state= ","@heredoc_queue << "," retrieve_heredoc_info "," get_embdoc_tk "," get_regexp_tk "," get_string_tk ","Ripper Lexer State  new ","Ripper Lexer  const_defined? ","(send\n  (send\n    (lvar :tk) :[]\n    (sym :state)) :&\n  (begin\n    (send\n      (const nil :EXPR_FNAME) :|\n      (const nil :EXPR_ENDFN)))) != ","tk [] & ","EXPR_FNAME  | "," get_symbol_tk ","@buf shift ","@inner_lex_enumerator next ","@buf empty? ","@inner_lex lex_state ","(send\n  (const nil :EXPR_FNAME) :&\n  (send\n    (lvar :tk) :[]\n    (sym :state))) != ","EXPR_FNAME  & ","tk [] nil? ","@heredoc_queue empty? ! ","tk nil? ","@tokens shift "," get_op_ get_op_tk  "," get_op_ get_words_tk  "," get_op_ get_embdoc_tk  "," get_op_ get_regexp_tk  "," get_op_ get_string_tk  "," get_op_ get_symbol_tk  "," get_op_@buf shift  "," get_op_@inner_lex_enumerator next  "," get_op_@tokens shift  "," get_op_tk  []= "," get_words_tk  []= "," get_embdoc_tk  []= "," get_regexp_tk  []= "," get_string_tk  []= "," get_symbol_tk  []= ","@buf shift  []= ","@inner_lex_enumerator next  []= ","@tokens shift  []= "," get_op_tk  [] "," get_words_tk  [] "," get_embdoc_tk  [] "," get_regexp_tk  [] "," get_string_tk  [] "," get_symbol_tk  [] ","@buf shift  [] ","@inner_lex_enumerator next  [] ","@tokens shift  [] "," get_words_ get_op_tk  "," get_words_ get_words_tk  "," get_words_ get_embdoc_tk  "," get_words_ get_regexp_tk  "," get_words_ get_string_tk  "," get_words_ get_symbol_tk  "," get_words_@buf shift  "," get_words_@inner_lex_enumerator next  "," get_words_@tokens shift  "," get_heredoc_ get_op_tk  "," get_heredoc_ get_words_tk  "," get_heredoc_ get_embdoc_tk  "," get_heredoc_ get_regexp_tk  "," get_heredoc_ get_string_tk  "," get_heredoc_ get_symbol_tk  "," get_heredoc_@buf shift  "," get_heredoc_@inner_lex_enumerator next  "," get_heredoc_@tokens shift  "," get_embdoc_ get_op_tk  "," get_embdoc_ get_words_tk  "," get_embdoc_ get_embdoc_tk  "," get_embdoc_ get_regexp_tk  "," get_embdoc_ get_string_tk  "," get_embdoc_ get_symbol_tk  "," get_embdoc_@buf shift  "," get_embdoc_@inner_lex_enumerator next  "," get_embdoc_@tokens shift  "," get_regexp_ get_op_tk  "," get_regexp_ get_words_tk  "," get_regexp_ get_embdoc_tk  "," get_regexp_ get_regexp_tk  "," get_regexp_ get_string_tk  "," get_regexp_ get_symbol_tk  "," get_regexp_@buf shift  "," get_regexp_@inner_lex_enumerator next  "," get_regexp_@tokens shift  "," get_string_ get_op_tk  "," get_string_ get_words_tk  "," get_string_ get_embdoc_tk  "," get_string_ get_regexp_tk  "," get_string_ get_string_tk  "," get_string_ get_symbol_tk  "," get_string_@buf shift  "," get_string_@inner_lex_enumerator next  "," get_string_@tokens shift  ","(send\n  (send\n    (lvar : get_op_tk ) :[]\n    (sym :state)) :&\n  (begin\n    (send\n      (const nil :EXPR_FNAME) :|\n      (const nil :EXPR_ENDFN)))) != ","(send\n  (send\n    (lvar : get_words_tk ) :[]\n    (sym :state)) :&\n  (begin\n    (send\n      (const nil :EXPR_FNAME) :|\n      (const nil :EXPR_ENDFN)))) != ","(send\n  (send\n    (lvar : get_embdoc_tk ) :[]\n    (sym :state)) :&\n  (begin\n    (send\n      (const nil :EXPR_FNAME) :|\n      (const nil :EXPR_ENDFN)))) != ","(send\n  (send\n    (lvar : get_regexp_tk ) :[]\n    (sym :state)) :&\n  (begin\n    (send\n      (const nil :EXPR_FNAME) :|\n      (const nil :EXPR_ENDFN)))) != ","(send\n  (send\n    (lvar : get_string_tk ) :[]\n    (sym :state)) :&\n  (begin\n    (send\n      (const nil :EXPR_FNAME) :|\n      (const nil :EXPR_ENDFN)))) != ","(send\n  (send\n    (lvar : get_symbol_tk ) :[]\n    (sym :state)) :&\n  (begin\n    (send\n      (const nil :EXPR_FNAME) :|\n      (const nil :EXPR_ENDFN)))) != ","(send\n  (send\n    (lvar :@buf shift ) :[]\n    (sym :state)) :&\n  (begin\n    (send\n      (const nil :EXPR_FNAME) :|\n      (const nil :EXPR_ENDFN)))) != ","(send\n  (send\n    (lvar :@inner_lex_enumerator next ) :[]\n    (sym :state)) :&\n  (begin\n    (send\n      (const nil :EXPR_FNAME) :|\n      (const nil :EXPR_ENDFN)))) != ","(send\n  (send\n    (lvar :@tokens shift ) :[]\n    (sym :state)) :&\n  (begin\n    (send\n      (const nil :EXPR_FNAME) :|\n      (const nil :EXPR_ENDFN)))) != "," get_op_tk  [] & "," get_words_tk  [] & "," get_embdoc_tk  [] & "," get_regexp_tk  [] & "," get_string_tk  [] & "," get_symbol_tk  [] & ","@buf shift  [] & ","@inner_lex_enumerator next  [] & ","@tokens shift  [] & "," get_symbol_ get_op_tk  "," get_symbol_ get_words_tk  "," get_symbol_ get_embdoc_tk  "," get_symbol_ get_regexp_tk  "," get_symbol_ get_string_tk  "," get_symbol_ get_symbol_tk  "," get_symbol_@buf shift  "," get_symbol_@inner_lex_enumerator next  "," get_symbol_@tokens shift  ","(send\n  (const nil :EXPR_FNAME) :&\n  (send\n    (lvar : get_op_tk ) :[]\n    (sym :state))) != ","(send\n  (const nil :EXPR_FNAME) :&\n  (send\n    (lvar : get_words_tk ) :[]\n    (sym :state))) != ","(send\n  (const nil :EXPR_FNAME) :&\n  (send\n    (lvar : get_embdoc_tk ) :[]\n    (sym :state))) != ","(send\n  (const nil :EXPR_FNAME) :&\n  (send\n    (lvar : get_regexp_tk ) :[]\n    (sym :state))) != ","(send\n  (const nil :EXPR_FNAME) :&\n  (send\n    (lvar : get_string_tk ) :[]\n    (sym :state))) != ","(send\n  (const nil :EXPR_FNAME) :&\n  (send\n    (lvar : get_symbol_tk ) :[]\n    (sym :state))) != ","(send\n  (const nil :EXPR_FNAME) :&\n  (send\n    (lvar :@buf shift ) :[]\n    (sym :state))) != ","(send\n  (const nil :EXPR_FNAME) :&\n  (send\n    (lvar :@inner_lex_enumerator next ) :[]\n    (sym :state))) != ","(send\n  (const nil :EXPR_FNAME) :&\n  (send\n    (lvar :@tokens shift ) :[]\n    (sym :state))) != "," get_op_tk  [] nil? "," get_words_tk  [] nil? "," get_embdoc_tk  [] nil? "," get_regexp_tk  [] nil? "," get_string_tk  [] nil? "," get_symbol_tk  [] nil? ","@buf shift  [] nil? ","@inner_lex_enumerator next  [] nil? ","@tokens shift  [] nil? "," get_op_tk  nil? "," get_words_tk  nil? "," get_embdoc_tk  nil? "," get_regexp_tk  nil? "," get_string_tk  nil? "," get_symbol_tk  nil? ","@buf shift  nil? ","@inner_lex_enumerator next  nil? ","@tokens shift  nil? "]}," RipperStateLex InnerStateLex each":{"type":"method","name":"each","children":[],"call":[" parse "]}," RipperStateLex InnerStateLex on_default":{"type":"method","name":"on_default","children":[],"call":["@callback call "," state "," column "," lineno "," reset ","data << ","Token  new "]}," RipperStateLex InnerStateLex initialize":{"type":"method","name":"initialize","children":[],"call":[" reset "]}," RipperStateLex InnerStateLex on_heredoc_end":{"type":"method","name":"on_heredoc_end","children":[],"call":["@callback call "," __method__ "," column "," lineno ","data << ","Token  new "]}," RipperStateLex InnerStateLex on_ignored_sp":{"type":"method","name":"on_ignored_sp","children":[],"call":["@callback call "," __method__ "," column "," lineno ","(send\n  (const nil :EXPR_LABEL) :&\n  (ivar :@lex_state)) != ","EXPR_LABEL  & ","data << ","Token  new "]}," RipperStateLex InnerStateLex on_comment":{"type":"method","name":"on_comment","children":[],"call":["@callback call "," __method__ "," column "," lineno ","(send\n  (const nil :EXPR_LABEL) :&\n  (ivar :@lex_state)) != ","EXPR_LABEL  & ","data << ","Token  new "]}," RipperStateLex InnerStateLex on_comma":{"type":"method","name":"on_comma","children":[],"call":["@callback call "," __method__ "," column "," lineno ","EXPR_BEG  | ","(send\n  (const nil :EXPR_ARG_ANY) :&\n  (ivar :@lex_state)) != ","EXPR_ARG_ANY  & ","data << ","Token  new ","(send\n  (const nil :EXPR_ARG_ANY) :&\n  (ivar :EXPR_BEG  | )) != "]}," RipperStateLex InnerStateLex on_sp":{"type":"method","name":"on_sp","children":[],"call":["@callback call "," __method__ "," column "," lineno ","data << ","Token  new "]}," RipperStateLex InnerStateLex on_const":{"type":"method","name":"on_const","children":[],"call":["@callback call "," __method__ "," column "," lineno ","data << ","Token  new "]}," RipperStateLex InnerStateLex on_rbracket":{"type":"method","name":"on_rbracket","children":[],"call":["@callback call "," __method__ "," column "," lineno ","data << ","Token  new "]}," RipperStateLex InnerStateLex on_lbracket":{"type":"method","name":"on_lbracket","children":[],"call":["@callback call "," __method__ "," column "," lineno ","EXPR_LABEL  | ","data << ","Token  new "]}," RipperStateLex InnerStateLex on_rbrace":{"type":"method","name":"on_rbrace","children":[],"call":["@callback call "," __method__ "," column "," lineno ","data << ","Token  new "]}," RipperStateLex InnerStateLex on_lbrace":{"type":"method","name":"on_lbrace","children":[],"call":["@callback call "," __method__ "," column "," lineno ","EXPR_LABEL  | ","data << ","Token  new "]}," RipperStateLex InnerStateLex on_rparen":{"type":"method","name":"on_rparen","children":[],"call":["@callback call "," __method__ "," column "," lineno ","data << ","Token  new "]}," RipperStateLex InnerStateLex on_lparen":{"type":"method","name":"on_lparen","children":[],"call":["@callback call "," __method__ "," column "," lineno ","EXPR_LABEL  | ","data << ","Token  new "]}," RipperStateLex InnerStateLex on_backref":{"type":"method","name":"on_backref","children":[],"call":[" on_variables "," __method__ "]}," RipperStateLex InnerStateLex on_gvar":{"type":"method","name":"on_gvar","children":[],"call":[" on_variables "," __method__ "]}," RipperStateLex InnerStateLex on_cvar":{"type":"method","name":"on_cvar","children":[],"call":[" on_variables "," __method__ "]}," RipperStateLex InnerStateLex on_ivar":{"type":"method","name":"on_ivar","children":[],"call":[" on_variables "," __method__ "]}," RipperStateLex InnerStateLex on_ident":{"type":"method","name":"on_ident","children":[],"call":[" on_variables "," __method__ "]}," RipperStateLex InnerStateLex on_variables":{"type":"method","name":"on_variables","children":[],"call":["@callback call "," column "," lineno ","data << ","Token  new "]}," RipperStateLex InnerStateLex on_symbeg":{"type":"method","name":"on_symbeg","children":[],"call":["@callback call "," __method__ "," column "," lineno ","data << ","Token  new "]}," RipperStateLex InnerStateLex on_imaginary":{"type":"method","name":"on_imaginary","children":[],"call":["@callback call "," __method__ "," column "," lineno ","EXPR_END  | ","data << ","Token  new "]}," RipperStateLex InnerStateLex on_rational":{"type":"method","name":"on_rational","children":[],"call":["@callback call "," __method__ "," column "," lineno ","EXPR_END  | ","data << ","Token  new "]}," RipperStateLex InnerStateLex on_float":{"type":"method","name":"on_float","children":[],"call":["@callback call "," __method__ "," column "," lineno ","EXPR_END  | ","data << ","Token  new "]}," RipperStateLex InnerStateLex on_int":{"type":"method","name":"on_int","children":[],"call":["@callback call "," __method__ "," column "," lineno ","EXPR_END  | ","data << ","Token  new "]}," RipperStateLex InnerStateLex on_period":{"type":"method","name":"on_period","children":[],"call":["@callback call "," __method__ "," column "," lineno ","data << ","Token  new "]}," RipperStateLex InnerStateLex on_CHAR":{"type":"method","name":"on_CHAR","children":[],"call":["@callback call "," __method__ "," column "," lineno ","data << ","Token  new "]}," RipperStateLex InnerStateLex on_tstring_end":{"type":"method","name":"on_tstring_end","children":[],"call":["@callback call "," __method__ "," column "," lineno ","EXPR_END  | ","data << ","Token  new "]}," RipperStateLex InnerStateLex on_tstring_beg":{"type":"method","name":"on_tstring_beg","children":[],"call":["@callback call "," __method__ "," column "," lineno ","data << ","Token  new "]}," RipperStateLex InnerStateLex on_kw":{"type":"method","name":"on_kw","children":[],"call":["@callback call "," __method__ "," column "," lineno ","@lex_state == ","EXPR_BEG  | ","(send\n  (begin\n    (send\n      (send\n        (send\n          (send\n            (const nil :EXPR_END) :|\n            (const nil :EXPR_ENDARG)) :|\n          (const nil :EXPR_ENDFN)) :|\n        (const nil :EXPR_ARG)) :|\n      (const nil :EXPR_CMDARG))) :&\n  (ivar :@lex_state)) != ","(send\n  (send\n    (send\n      (send\n        (const nil :EXPR_END) :|\n        (const nil :EXPR_ENDARG)) :|\n      (const nil :EXPR_ENDFN)) :|\n    (const nil :EXPR_ARG)) :|\n  (const nil :EXPR_CMDARG)) & ","EXPR_END  | | | | ","EXPR_END  | | | ","EXPR_END  | | ","EXPR_END  | ","data << ","Token  new ","(send\n  (begin\n    (send\n      (send\n        (send\n          (send\n            (send\n              (const nil :EXPR_MID) :|\n              (const nil :EXPR_END)) :|\n            (const nil :EXPR_ENDARG)) :|\n          (const nil :EXPR_ENDFN)) :|\n        (const nil :EXPR_ARG)) :|\n      (const nil :EXPR_CMDARG))) :&\n  (ivar :@lex_state)) != ","(send\n  (send\n    (send\n      (send\n        (send\n          (const nil :EXPR_MID) :|\n          (const nil :EXPR_END)) :|\n        (const nil :EXPR_ENDARG)) :|\n      (const nil :EXPR_ENDFN)) :|\n    (const nil :EXPR_ARG)) :|\n  (const nil :EXPR_CMDARG)) & ","EXPR_MID  | | | | | ","EXPR_MID  | | | | ","EXPR_MID  | | | ","EXPR_MID  | | ","EXPR_MID  | ","EXPR_BEG  |  == ","(send\n  (begin\n    (send\n      (send\n        (send\n          (send\n            (const nil :EXPR_END) :|\n            (const nil :EXPR_ENDARG)) :|\n          (const nil :EXPR_ENDFN)) :|\n        (const nil :EXPR_ARG)) :|\n      (const nil :EXPR_CMDARG))) :&\n  (ivar :EXPR_BEG  | )) != ","(send\n  (begin\n    (send\n      (send\n        (send\n          (send\n            (send\n              (const nil :EXPR_MID) :|\n              (const nil :EXPR_END)) :|\n            (const nil :EXPR_ENDARG)) :|\n          (const nil :EXPR_ENDFN)) :|\n        (const nil :EXPR_ARG)) :|\n      (const nil :EXPR_CMDARG))) :&\n  (ivar :EXPR_BEG  | )) != "]}," RipperStateLex InnerStateLex on_op":{"type":"method","name":"on_op","children":[],"call":["@callback call "," __method__ "," column "," lineno ","data << ","Token  new "]}," RipperStateLex InnerStateLex on_ignored_nl":{"type":"method","name":"on_ignored_nl","children":[],"call":["@callback call "," __method__ "," column "," lineno ","(send\n  (const nil :EXPR_LABEL) :&\n  (ivar :@lex_state)) != ","EXPR_LABEL  & ","data << ","Token  new "]}," RipperStateLex InnerStateLex on_nl":{"type":"method","name":"on_nl","children":[],"call":["@callback call "," __method__ "," column "," lineno ","(send\n  (const nil :EXPR_LABEL) :&\n  (ivar :@lex_state)) != ","EXPR_LABEL  & ","data << ","Token  new "]}," RipperStateLex InnerStateLex reset":{"type":"method","name":"reset","children":[],"call":[]}," Encoding change_encoding":{"type":"method","name":"change_encoding","children":[],"call":[]}," Context set_constant_visibility_for":{"type":"method","name":"set_constant_visibility_for","children":[],"call":["constant visibility= ","@constants_hash [] ","names each ","@constants_hash []  visibility= ","@@constants_hash [] s_hash [] "]}," Comment encode!":{"type":"method","name":"encode!","children":[],"call":["String  new ","@text force_encoding ","RUBY_VERSION  < ","String  new  force_encoding ","@text force_encoding  force_encoding "]}," RubyLex identify_here_document_body":{"type":"method","name":"identify_here_document_body","children":[],"call":[" Token "," raise ","doc << ","(if\n  (lvar :indent)\n  (send\n    (lvar :l) :strip)\n  (send\n    (lvar :l) :chomp)) == ","l chomp ","l strip ","l sub "," gets ","(if\n  (l sub var :indent)\n  (send\n    (l sub var :l sub ) :strip)\n  (send\n    (l sub var :l sub ) :chomp)) == ","(if\n  ( gets var :indent)\n  (send\n    ( gets var : gets ) :strip)\n  (send\n    ( gets var : gets ) :chomp)) == ","l sub  chomp "," gets  chomp ","l sub  strip "," gets  strip ","l sub  sub "," gets  sub "]}," Encoding remove_magic_comment":{"type":"method","name":"remove_magic_comment","children":[],"call":[]}," Encoding detect_encoding":{"type":"method","name":"detect_encoding","children":[],"call":[]}," Context add_module_by_normal_module":{"type":"method","name":"add_module_by_normal_module","children":[],"call":[" add_class_or_module ","@store modules_hash "]}," TopLevel parser=":{"type":"method","name":"parser=","children":[],"call":["@store update_parser_of_file "," absolute_name "]}," Store update_parser_of_file":{"type":"method","name":"update_parser_of_file","children":[],"call":["@text_files_hash []= ","top_level text? ","@files_hash [] ","@files_hash []  text? "]}," RubyTools skip_tkspace_without_nl":{"type":"method","name":"skip_tkspace_without_nl","children":[],"call":[" unget_tk ","tokens push ","on_sp == ","tk [] "," get_tk "," unget_ get_tk  "," get_tk  [] "," get_ get_tk  "]}," Ruby retrieve_comment_body":{"type":"method","name":"retrieve_comment_body","children":[],"call":["tk [] ","tk [] gsub gsub ","tk [] gsub ","on_embdoc == "]}," Ruby get_included_module_with_optional_parens":{"type":"method","name":"get_included_module_with_optional_parens","children":[],"call":[" get_tkread_clean "," get_tk ",":: == ","tk [] ","nest == ","(send\n  (send\n    (lvar :tk) :[]\n    (sym :state)) :&\n  (const\n    (const\n      (const\n        (const nil :RDoc) :Parser) :RipperStateLex) :EXPR_LABEL)) != ","tk [] & ","nest <= ","continue ! ","\n == ","tk [] [] ","on_nl == ","end_token [] ","@read pop ","end_token [] == "," unget_tk ","nest < ","tk != "," get_end_token "," get_tkread "," skip_tkspace_without_nl "," get_ get_tk read_clean "," get_ get_tk  "," get_tk  [] ","(send\n  (send\n    (lvar : get_tk ) :[]\n    (sym :state)) :&\n  (const\n    (const\n      (const\n        (const nil :RDoc) :Parser) :RipperStateLex) :EXPR_LABEL)) != "," get_tk  [] & "," get_tk  [] [] "," get_end_token  [] "," get_end_token  [] == "," unget_ get_tk  "," get_tk  != "," get_ get_end_token  "," get_ get_tk read "," skip_ get_tk space_without_nl "]}," RipperStateLex InnerStateLex on_heredoc_beg":{"type":"method","name":"on_heredoc_beg","children":[],"call":["data << ","Token  new "," __method__ "," column "," lineno "]}," Options exclude":{"type":"method","name":"exclude","children":[],"call":["Regexp  new ","@exclude join ","@exclude empty? ","Regexp  === ","@exclude nil? "]}," Markup add_regexp_handling":{"type":"method","name":"add_regexp_handling","children":[],"call":["@attribute_manager add_regexp_handling "]}," ToRdoc handle_regexp_HARD_BREAK":{"type":"method","name":"handle_regexp_HARD_BREAK","children":[],"call":[]}," ToRdoc handle_regexp_SUPPRESSED_CROSSREF":{"type":"method","name":"handle_regexp_SUPPRESSED_CROSSREF","children":[],"call":["text sub "," in_tt? ","target text ","text sub  sub ","target text  sub ","target text sub  ","target target text  "]}," ToMarkdown handle_regexp_RDOCLINK":{"type":"method","name":"handle_regexp_RDOCLINK","children":[],"call":[" handle_rdoc_link ","target text "]}," ToMarkdown handle_regexp_TIDYLINK":{"type":"method","name":"handle_regexp_TIDYLINK","children":[],"call":[" gen_url "," handle_rdoc_link ","url =~ ","text =~ ","target text ","target text  =~ ","target target text  "]}," ToMarkdown handle_regexp_HARD_BREAK":{"type":"method","name":"handle_regexp_HARD_BREAK","children":[],"call":[]}," ToLabel handle_regexp_TIDYLINK":{"type":"method","name":"handle_regexp_TIDYLINK","children":[],"call":["text =~ ","target text ","target text  =~ ","target target text  "]}," ToLabel handle_regexp_CROSSREF":{"type":"method","name":"handle_regexp_CROSSREF","children":[],"call":["text sub ","target text ","target text  sub ","target target text  "]}," ToHtmlSnippet handle_regexp_HARD_BREAK":{"type":"method","name":"handle_regexp_HARD_BREAK","children":[],"call":[]}," ToHtmlSnippet handle_regexp_CROSSREF":{"type":"method","name":"handle_regexp_CROSSREF","children":[],"call":["target text sub ","target text "]}," ToHtmlCrossref handle_regexp_RDOCLINK":{"type":"method","name":"handle_regexp_RDOCLINK","children":[],"call":[" cross_reference ","target text "]}," ToHtmlCrossref handle_regexp_HYPERLINK":{"type":"method","name":"handle_regexp_HYPERLINK","children":[],"call":[" cross_reference ","target text =~ ","target text "]}," ToHtmlCrossref handle_regexp_CROSSREF":{"type":"method","name":"handle_regexp_CROSSREF","children":[],"call":[" cross_reference ","name =~ ","target text ","target text  =~ "]}," ToHtml handle_regexp_TIDYLINK":{"type":"method","name":"handle_regexp_TIDYLINK","children":[],"call":[" gen_url "," handle_RDOCLINK ","text =~ ","target text ","CGI  escapeHTML "," gen_CGI  escapeHTML  ","target text  =~ ","target target text  "]}," ToHtml handle_regexp_RDOCLINK":{"type":"method","name":"handle_regexp_RDOCLINK","children":[],"call":[" handle_RDOCLINK ","target text "]}," ToHtml handle_regexp_HYPERLINK":{"type":"method","name":"handle_regexp_HYPERLINK","children":[],"call":[" gen_url ","target text ","CGI  escapeHTML "," gen_target text  "," gen_CGI  escapeHTML  "]}," ToHtml handle_regexp_HARD_BREAK":{"type":"method","name":"handle_regexp_HARD_BREAK","children":[],"call":[]}," ToBs convert_regexp_handling":{"type":"method","name":"convert_regexp_handling","children":[],"call":[" convert_string "]}," Formatter convert_regexp_handling":{"type":"method","name":"convert_regexp_handling","children":[],"call":["target text "," raise ","@attributes as_string ","target type ","target text= "," send "," respond_to? ","@attributes each_name_of "," in_tt? "," public_send "]}," Formatter add_regexp_handling_TIDYLINK":{"type":"method","name":"add_regexp_handling_TIDYLINK","children":[],"call":["@markup add_regexp_handling "]}," Formatter add_regexp_handling_RDOCLINK":{"type":"method","name":"add_regexp_handling_RDOCLINK","children":[],"call":["@markup add_regexp_handling "]}," AttributeManager add_regexp_handling":{"type":"method","name":"add_regexp_handling","children":[],"call":["@regexp_handlings << ","@attributes bitmap_for ","@attributes @attributes bitmap_for _for "]}," AttributeManager convert_regexp_handlings":{"type":"method","name":"convert_regexp_handlings","children":[],"call":["attrs set_attrs ","attribute | ","@attributes regexp_handling ","e - ","$~ offset ","$~ size == ","$~ size ","str scan ","@regexp_handlings each "," exclusive? "," exclusive? ! ","exclusive == "]}," RegexpHandling to_s":{"type":"method","name":"to_s","children":[],"call":[" text dump "," text "," type "]}," RegexpHandling inspect":{"type":"method","name":"inspect","children":[],"call":["#<RDoc::Markup::RegexpHandling:0x%x @type=%p, @text=%p> % "," text dump "," text "," object_id "]}," RegexpHandling ==":{"type":"method","name":"==","children":[],"call":[" type == ","o type "," type "," text == ","o text "," text "]}," RegexpHandling initialize":{"type":"method","name":"initialize","children":[],"call":[]}," C do_classes_and_modules":{"type":"method","name":"do_classes_and_modules","children":[],"call":[" handle_class_module ","$~ [] "," handle_singleton ","@content scan "," do_boot_defclass ","@file_name == "," handle_attr ","attributes scan ","parent_name ! ","$~ []  scan ","$~ []  ! "]}," Parser MyStringScanner []":{"type":"method","name":"[]","children":[],"call":["@s [] "]}," Parser MyStringScanner matched":{"type":"method","name":"matched","children":[],"call":["@s matched "]}," Parser MyStringScanner eos?":{"type":"method","name":"eos?","children":[],"call":["@s eos? "]}," Parser MyStringScanner newline!":{"type":"method","name":"newline!","children":[],"call":[]}," Parser MyStringScanner pos":{"type":"method","name":"pos","children":[],"call":[]}," Parser MyStringScanner unscan":{"type":"method","name":"unscan","children":[],"call":["s length ","s bytesize ","@s pos "]}," Parser MyStringScanner scan":{"type":"method","name":"scan","children":[],"call":["ret length ","@s scan ","@s scan  length "]}," Parser MyStringScanner initialize":{"type":"method","name":"initialize","children":[],"call":["StringScanner  new "]}," RDoc home":{"type":"method","name":"home","children":[],"call":[]}," C add_alias":{"type":"method","name":"add_alias","children":[],"call":["@stats add_alias ","class_obj add_alias ","al record_location ","al comment= ","al singleton= ","@singleton_classes key? ","RDoc Alias  new ","@stats add_RDoc Alias  new ias ","class_obj add_RDoc Alias  new ias ","RDoc Alias  new  record_location ","RDoc Alias  new  comment= ","RDoc Alias  new  singleton= "]}," ToHtmlCrossref init_link_notation_regexp_handlings":{"type":"method","name":"init_link_notation_regexp_handlings","children":[],"call":[" add_regexp_handling_TIDYLINK ","@markup add_regexp_handling ","@options hyperlink_all "," add_regexp_handling_RDOCLINK "]}," ToHtml init_link_notation_regexp_handlings":{"type":"method","name":"init_link_notation_regexp_handlings","children":[],"call":[" add_regexp_handling_TIDYLINK "," add_regexp_handling_RDOCLINK "]}," ToHtml init_regexp_handlings":{"type":"method","name":"init_regexp_handlings","children":[],"call":[" init_link_notation_regexp_handlings ","@markup add_regexp_handling "]}," Context instance_methods":{"type":"method","name":"instance_methods","children":[],"call":["a singleton "," method_list reject "," method_list "]}," AnyMethod deduplicate_call_seq":{"type":"method","name":"deduplicate_call_seq","children":[],"call":["matching join ","entry =~ ","entries reject ","Regexp  union ","ignore delete ","n [] ","n =~ ","ignore map! ","ignore concat "," is_alias_for aliases map "," is_alias_for aliases "," is_alias_for ","ignore << "," is_alias_for name "," aliases map "," aliases ","call_seq split ","method_name [] ","method_name =~ "," name "," aliases empty? ! "," aliases empty? ","matching empty? ","call_seq split  reject ","Regexp  union  delete "," aliases map  delete ","Regexp  union  map! "," aliases map  map! ","Regexp  union  concat "," aliases map  concat ","Regexp  union  << "," aliases map  << ","method_name []  [] "," name  [] ","method_name []  =~ "," name  =~ "]}," AnyMethod _call_seq":{"type":"method","name":"_call_seq","children":[],"call":[]}," AnyMethod call_seq":{"type":"method","name":"call_seq","children":[],"call":[" deduplicate_call_seq "," is_alias_for _call_seq "," is_alias_for "," _call_seq "," deduplicate_ is_alias_for _call_seq  "," deduplicate_ _call_seq  "," is_alias_for _ is_alias_for _call_seq  "," is_alias_for _ _call_seq  "," _ is_alias_for _call_seq  "," _ _call_seq  "]}," ChangeLog Git pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp "," contents ","q breakable ","q text "," email ","q group "," author "," date "," commit "]}," ChangeLog Git accept":{"type":"method","name":"accept","children":[],"call":["visitor code_object= ","visitor respond_to? ","body accept "," contents each "," contents ","visitor code_object ","visitor accept_heading ","visitor visitor code_object = ","visitor visitor code_object  "]}," ChangeLog Git text":{"type":"method","name":"text","children":[],"call":["(send nil :base) + "," email "," author "," commit "," base "," date "," base % "]}," ChangeLog Git label":{"type":"method","name":"label","children":[],"call":[" aref "]}," ChangeLog Git aref":{"type":"method","name":"aref","children":[],"call":[" commit "]}," ChangeLog Git level":{"type":"method","name":"level","children":[],"call":[]}," ChangeLog Git initialize":{"type":"method","name":"initialize","children":[],"call":["contents []= ","RDoc Markup Heading  new ","first text ","HEADING_LEVEL  + ","contents [] ","body level ","RDoc Markdown  parse parts each ","RDoc Markdown  parse parts ","RDoc Markdown  parse ","contents []  text "]}," ChangeLog Git create_entries":{"type":"method","name":"create_entries","children":[],"call":["LogEntry  new ","entries map "]}," ChangeLog Git parse_entries":{"type":"method","name":"parse_entries","children":[],"call":["entries << ","author sub! ","@time_cache []= "," parse_date ","header [] ","3 gsub ","@content scan ","header []  sub! ","@ parse_date _cache []= "," parse_header []  "]}," ChangeLog Git parse_info":{"type":"method","name":"parse_info","children":[],"call":[]}," ChangeLog parse_date":{"type":"method","name":"parse_date","children":[],"call":[" raise ","Time  new "]}," Options override":{"type":"method","name":"override","children":[],"call":[" sanitize_path ","map [] ","map has_key? ","Encoding  find "]}," ToRdoc accept_table":{"type":"method","name":"accept_table","children":[],"call":["@res << << ","@res << ","(send\n  (lvar :row) :zip\n  (lvar :widths)\n  (lvar :aligns)) join rstrip ","(send\n  (lvar :row) :zip\n  (lvar :widths)\n  (lvar :aligns)) join ","t __send__ ","row zip ","body each ","(send\n  (lvar :widths) :map) join ","- * ","widths map ","(send\n  (lvar :header) :zip\n  (lvar :widths)\n  (lvar :aligns)) join rstrip ","(send\n  (lvar :header) :zip\n  (lvar :widths)\n  (lvar :aligns)) join ","h __send__ ","header zip ","aligns map ","(send\n  (lvar :h) :size) max ","b size ","h size "]}," ToHtml accept_table":{"type":"method","name":"accept_table","children":[],"call":["@res << ","@res << << << ","@res << << ","CGI  escapeHTML ","row zip ","body each ","header zip "," to_html "]}," AttributeManager convert_attrs_word_pair_map":{"type":"method","name":"convert_attrs_word_pair_map","children":[],"call":["NULL  * + + ","NULL  * ","3 length ","NULL  * + ","1 length ","attrs set_attrs ","2 length ","$` length + ","$` length ","str gsub! "," exclusive? ! "," exclusive? ","exclusive ! ","@word_pair_map each ","@word_pair_map empty? ","m match_length ","w length ","m begin ","(lvasgn :m\n  (begin\n    (gvar :$~))) [] ","exclusive == ","@(lvasgn :m\n  (begin\n    (gvar :$~))) [] ord_pair_map each ","@(lvasgn :m\n  (begin\n    (gvar :$~))) [] ord_pair_map empty? ","(lvasgn :m\n  (begin\n    (gvar :$~))) []  length "]}," AttributeManager convert_attrs_matching_word_pairs":{"type":"method","name":"convert_attrs_matching_word_pairs","children":[],"call":["str delete! ","NON_PRINTING_START  + ","1 + + + + + + + + ","1 + + + + + + + ","1 + + + + + + ","1 + + + + + ","1 + + + + ","1 + + + ","1 + + ","1 + ","NULL  * ","2 length ","attrs set_attrs ","3 length ","$` length + + ","$` length + ","1 length ","$` length ","@matching_word_pairs [] ","str gsub! ","all_tags join ","tags join ","@matching_word_pairs keys ","tags empty? ","(send\n  (ivar :@matching_word_pairs) :select) keys "," exclusive? ! "," exclusive? ","exclusive ! ","@matching_word_pairs select ","a + + ","a + ","NON_PRINTING_START  + + ","a length ","w length ","m begin ","(lvasgn :m\n  (gvar :$~)) values_at ","@matching_word_pairs keys join ","exclusive == ","@matching_word_pairs [] s set_@matching_word_pairs [] s ","NON_PRINTING_START  + + ttrs set_NON_PRINTING_START  + + ttrs ","NULL  * ttrs set_NULL  * ttrs ","@mNON_PRINTING_START  + + tching_word_pNON_PRINTING_START  + + irs [] ","@mNULL  * tching_word_pNULL  * irs [] ","@matching_word_pairs keys  join ","all_(send\n  (ivar :@matching_word_pairs) :select) keys  join ","NON_PRINTING_START  + + ll_tNON_PRINTING_START  + + gs join ","NULL  * ll_tNULL  * gs join ","(send\n  (ivar :@matching_word_pairs) :select) keys  join ","tNON_PRINTING_START  + + gs join ","tNULL  * gs join ","@mNON_PRINTING_START  + + tching_word_pNON_PRINTING_START  + + irs keys ","@mNULL  * tching_word_pNULL  * irs keys ","(send\n  (ivar :@matching_word_pairs) :select) keys  empty? ","tNON_PRINTING_START  + + gs empty? ","tNULL  * gs empty? ","(send\n  (ivNON_PRINTING_START  + + r :@mNON_PRINTING_START  + + tching_word_pNON_PRINTING_START  + + irs) :select) keys ","(send\n  (ivNULL  * r :@mNULL  * tching_word_pNULL  * irs) :select) keys ","@mNON_PRINTING_START  + + tching_word_pNON_PRINTING_START  + + irs select ","@mNULL  * tching_word_pNULL  * irs select ","NON_PRINTING_START  + +  + + ","NULL  *  + + ","NON_PRINTING_START  + +  + ","NULL  *  + ","NON_PRINTING_START  + +  length ","NULL  *  length ","(lvNON_PRINTING_START  + + sgn :m\n  (gvNON_PRINTING_START  + + r :$~)) vNON_PRINTING_START  + + lues_NON_PRINTING_START  + + t ","(lvNULL  * sgn :m\n  (gvNULL  * r :$~)) vNULL  * lues_NULL  * t ","@mNON_PRINTING_START  + + tching_word_pNON_PRINTING_START  + + irs keys join ","@mNULL  * tching_word_pNULL  * irs keys join "]}," AttributeManager exclusive?":{"type":"method","name":"exclusive?","children":[],"call":["(send\n  (lvar :attr) :&\n  (ivar :@exclusive_bitmap)) != ","attr & "]}," Markdown _TableColumn":{"type":"method","name":"_TableColumn","children":[],"call":[" set_failed_rule "," pos= ","text end_with? ","text start_with? "," get_text "," match_string "," pos "," get_text  end_with? "," get_text  start_with? "," get_ get_text  "]}," Markdown _TableLine":{"type":"method","name":"_TableLine","children":[],"call":[" set_failed_rule "," pos= "," _Newline "," match_string ","_ary << "," apply "," pos "]}," Markdown _TableItem":{"type":"method","name":"_TableItem","children":[],"call":[" set_failed_rule "," pos= ","text strip "," get_text "," get_byte "," _Newline "," pos "," match_string ","text strip gsub "," scan "," get_text  strip "," get_ get_text  "," get_text  strip gsub "]}," Markdown _TableRow":{"type":"method","name":"_TableRow","children":[],"call":[" set_failed_rule "," pos= "," _Newline "," match_string ","_ary << "," apply "," pos "]}," Markdown _Table":{"type":"method","name":"_Table","children":[],"call":[" set_failed_rule "," pos= ","RDoc Markup Table  new ","_ary << "," apply "," pos "," github? "]}," Table pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp ","q seplist ","q group ","q breakable ","q text ","align to_s ","@header zip "]}," Table accept":{"type":"method","name":"accept","children":[],"call":["visitor accept_table "]}," Table ==":{"type":"method","name":"==","children":[],"call":["@body == ","other body ","@align == ","other align ","@header == ","other header "," class == ","other class "," class "]}," Table initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Ruby parse_included_with_activesupport_concern":{"type":"method","name":"parse_included_with_activesupport_concern","children":[],"call":[" parse_statements "," unget_tk ","tk [] == ","tk [] "," get_tk "," skip_tkspace_without_nl "," unget_ get_tk  "," get_tk  [] == "," get_tk  [] "," get_ get_tk  "," skip_ get_tk space_without_nl "]}," C new_comment":{"type":"method","name":"new_comment","children":[],"call":["comment format= ","RDoc Comment  new tap ","RDoc Comment  new "]}," Options load_options":{"type":"method","name":"load_options","children":[],"call":[]}," CrossReference resolve_method":{"type":"method","name":"resolve_method","children":[],"call":["container find_ancestor_local_symbol ","container find_local_symbol ","new == ",". == ","RDoc TopLevel  === ","(str \"^([.#]|::)\") =~ ","@context find_symbol_module ","(begin\n  (const nil :CLASS_REGEXP_STR)) =~ ","@context find_symbol_module  find_ancestor_local_symbol ","@context find_symbol_module  find_local_symbol "]}," SingleClass pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q group "," full_name "]}," Parser handle_tab_width":{"type":"method","name":"handle_tab_width","children":[],"call":["(send\n  (send\n    (lvar :body) :split\n    (regexp\n      (str \"\\\\n\")\n      (regopt))) :map) join ","  * ","tab_width * - ","b % ","tab_width * ","e - ","$~ offset ","line gsub! ","body split map ","body split ","@options tab_width ","@options tab_width  * - ","@options tab_width  * ","@options @options tab_width  "]}," Ruby skip_parentheses":{"type":"method","name":"skip_parentheses","children":[],"call":[" get_tk ","on_rparen == ","right_tk [] "," peek_tk "," skip_parentheses ","on_lparen == ","left_tk [] "," peek_tk  [] "]}," match_length":{"type":"method","name":"match_length","children":[],"call":["e - "," offset "]}," Markdown _TableAlign":{"type":"method","name":"_TableAlign","children":[],"call":[" set_failed_rule "," pos= ","text end_with? ","text start_with? "," _Sp "," get_text "," scan "," pos "," get_text  end_with? "," get_text  start_with? "," get_ get_text  "]}," Markdown _TableAlign2":{"type":"method","name":"_TableAlign2","children":[],"call":[" set_failed_rule "," pos= "," apply "," _Sp "," match_string "," pos "]}," Markdown _TableItem2":{"type":"method","name":"_TableItem2","children":[],"call":[" set_failed_rule "," pos= "," apply "," match_string "," pos "]}," Markdown _TableHead":{"type":"method","name":"_TableHead","children":[],"call":[" set_failed_rule "," pos= "," _Newline "," match_string "," pos ","_ary << "," apply "]}," Markdown get_line":{"type":"method","name":"get_line","children":[],"call":[" string [] "," string ","loff [] ","no - ","no > ","loff [] - "," raise ","loff size ","no >= ","no < "," position_line_offsets "," position_line_offsets  [] "," position_line_offsets  [] - "," position_line_offsets  size "]}," Markdown current_pos_info":{"type":"method","name":"current_pos_info","children":[],"call":["KpegPosInfo  new "," string [] "," string "," get_line ","l - "," current_column "," current_line "," get_ current_line ine "," current_line  - ","  current_column urrent_ current_column olumn "," current_co current_line umn ","  current_column urrent_line "," current_ current_line ine "]}," Markdown current_character":{"type":"method","name":"current_character","children":[],"call":[" string [] "," string "," raise ","target >= "," string size ","target < "]}," Markdown position_line_offsets":{"type":"method","name":"position_line_offsets","children":[],"call":["@position_line_offsets << ","line size "," string each_line "," string "]}," Task coverage_task_name":{"type":"method","name":"coverage_task_name","children":[],"call":[]}," Task coverage_task_description":{"type":"method","name":"coverage_task_description","children":[],"call":[]}," Racc Parser token_to_str":{"type":"method","name":"token_to_str","children":[],"call":[" class Racc_token_to_s_table  [] "," class "]}," Racc Parser racc_token2str":{"type":"method","name":"racc_token2str","children":[],"call":[" raise "," class Racc_token_to_s_table  [] "," class "]}," Racc Parser racc_print_states":{"type":"method","name":"racc_print_states","children":[],"call":["out puts ","out print ","s each "]}," Racc Parser racc_print_stacks":{"type":"method","name":"racc_print_stacks","children":[],"call":["out puts ","out print ","v [] inspect ","v [] "," racc_token2str ","t [] ","t each_index "]}," Racc Parser racc_next_state":{"type":"method","name":"racc_next_state","children":[],"call":["@racc_debug_out puts "," racc_print_states "]}," Racc Parser racc_e_pop":{"type":"method","name":"racc_e_pop","children":[],"call":["@racc_debug_out puts "," racc_print_stacks "," racc_print_states "]}," Racc Parser racc_accept":{"type":"method","name":"racc_accept","children":[],"call":["@racc_debug_out puts "]}," Racc Parser racc_reduce":{"type":"method","name":"racc_reduce","children":[],"call":["@racc_debug_out puts "," racc_print_stacks ","out puts "," racc_token2str ","out print ","toks each ","toks empty? "]}," Racc Parser racc_shift":{"type":"method","name":"racc_shift","children":[],"call":["@racc_debug_out puts "," racc_print_stacks "," racc_token2str "]}," Racc Parser racc_read_token":{"type":"method","name":"racc_read_token","children":[],"call":["@racc_debug_out puts ","val inspect ","@racc_debug_out print "," racc_token2str ","tok inspect "]}," Racc Parser yyerrok":{"type":"method","name":"yyerrok","children":[],"call":[]}," Racc Parser yyaccept":{"type":"method","name":"yyaccept","children":[],"call":[" throw "]}," Racc Parser yyerror":{"type":"method","name":"yyerror","children":[],"call":[" throw "]}," Racc Parser on_error":{"type":"method","name":"on_error","children":[],"call":[" raise "," sprintf "," token_to_str ","val inspect "]}," Racc Parser _racc_do_reduce":{"type":"method","name":"_racc_do_reduce","children":[],"call":["goto_default [] ","goto_check [] == ","goto_check [] ","goto_table [] ","i >= ","state [] ","goto_pointer [] ","reduce_to - "," racc_reduce ","tstack push ","vstack push "," __send__ ","tmp_v [] ","state []= ","len -@ ","vstack []= ","tstack []= ","vstack [] ","tstack [] ","reduce_table [] ","i + ","act * ","goto_pointer []  >= ","act *  >= ","goto_pogoto_pointer [] nter [] ","goto_poact * nter [] ","reduce_table []  - ","vstack []  [] ","reduce_table []  -@ ","goto_pointer []  + ","act *  + "]}," Racc Parser _racc_evalact":{"type":"method","name":"_racc_evalact","children":[],"call":[" racc_next_state ","@racc_state [] "," raise ","act inspect "," racc_e_pop ","@racc_tstack pop ","@racc_vstack pop ","@racc_state pop "," throw ","@racc_state size <= ","@racc_state size ","action_check [] == ","action_check [] ","action_table [] ","i >= ","action_pointer [] ","@racc_t == "," on_error ","arg [] ","act == ","reduce_n -@ ","@racc_vstack [] "," racc_accept ","@racc_state push "," _racc_do_reduce "," catch ","act > ","act < "," racc_shift ","@racc_tstack push ","@racc_vstack push ","@racc_t <= ","@racc_error_status > "," raaction_pointer [] se ","action_table []  inspect ","act action_pointer [] nspect ","@racc_state saction_pointer [] ze <= ","@racc_state saction_pointer [] ze ","action_table [] ion_check [] == ","actaction_pointer [] on_check [] == ","action_table [] ion_check [] ","actaction_pointer [] on_check [] ","action_table [] ion_table [] ","actaction_pointer [] on_table [] ","action_pointer []  >= ","action_table [] ion_pointer [] ","actaction_pointer [] on_poaction_pointer [] nter [] ","action_table []  == ","action_table []  > ","action_table []  < "," racc_shaction_pointer [] ft "]}," Racc Parser _racc_yyparse_rb":{"type":"method","name":"_racc_yyparse_rb","children":[],"call":[" _racc_evalact ","action_default [] ","@racc_state [] ","action_check [] == ","action_check [] ","action_table [] ","i >= ","@racc_t == ","@racc_read_next ! ","(lvasgn :i\n  (send\n    (lvar :action_pointer) :[]\n    (send\n      (ivar :@racc_state) :[]\n      (int -1)))) ! ","action_pointer [] ","token_table [] ","recv __send__ "," catch "," _racc_init_sysvars "," _racc_eval _racc_evalact  "," _racc_evalaction_default []  "," _racc_evalaction_table []  "," _racc_evalact ion_default [] ","action_default [] ion_default [] ","action_table [] ion_default [] ","actaction_pointer [] on_default [] "," _racc_evalact ion_check [] == ","action_default [] ion_check [] == ","action_table [] ion_check [] == ","actaction_pointer [] on_check [] == "," _racc_evalact ion_check [] ","action_default [] ion_check [] ","action_table [] ion_check [] ","actaction_pointer [] on_check [] "," _racc_evalact ion_table [] ","action_default [] ion_table [] ","action_table [] ion_table [] ","actaction_pointer [] on_table [] ","action_pointer []  >= ","(lvasgn :i\n  (send\n    (lvar : _racc_evalact ion_pointer) :[]\n    (send\n      (ivar :@racc_state) :[]\n      (int -1)))) ! ","(lvasgn :i\n  (send\n    (lvar :action_default [] ion_pointer) :[]\n    (send\n      (ivar :@racc_state) :[]\n      (int -1)))) ! ","(lvasgn :i\n  (send\n    (lvar :action_table [] ion_pointer) :[]\n    (send\n      (ivar :@racc_state) :[]\n      (int -1)))) ! ","(lvasgn :action_pointer [] \n  (send\n    (lvar :actaction_pointer [] on_poaction_pointer [] nter) :[]\n    (send\n      (action_pointer [] var :@racc_state) :[]\n      (action_pointer [] nt -1)))) ! "," _racc_evalact ion_pointer [] ","action_default [] ion_pointer [] ","action_table [] ion_pointer [] ","actaction_pointer [] on_poaction_pointer [] nter [] "," _racc_action_pointer [] naction_pointer [] t_sysvars "]}," Racc Parser _racc_do_parse_rb":{"type":"method","name":"_racc_do_parse_rb","children":[],"call":[" _racc_evalact ","action_default [] ","@racc_state [] ","action_check [] == ","action_check [] ","action_table [] ","i >= "," racc_read_token ","token_table [] "," next_token ","@racc_t != ","action_pointer [] "," catch "," _racc_init_sysvars "," _racc_eval _racc_evalact  "," _racc_evalaction_default []  "," _racc_evalaction_table []  "," _racc_evalact ion_default [] ","action_default [] ion_default [] ","action_table [] ion_default [] ","actaction_pointer [] on_default [] "," _racc_evalact ion_check [] == ","action_default [] ion_check [] == ","action_table [] ion_check [] == ","actaction_pointer [] on_check [] == "," _racc_evalact ion_check [] ","action_default [] ion_check [] ","action_table [] ion_check [] ","actaction_pointer [] on_check [] "," _racc_evalact ion_table [] ","action_default [] ion_table [] ","action_table [] ion_table [] ","actaction_pointer [] on_table [] ","action_pointer []  >= "," _racc_evalact ion_pointer [] ","action_default [] ion_pointer [] ","action_table [] ion_pointer [] ","actaction_pointer [] on_poaction_pointer [] nter [] "," _racc_action_pointer [] naction_pointer [] t_sysvars "]}," Racc Parser next_token":{"type":"method","name":"next_token","children":[],"call":[" raise "," class "]}," Racc Parser _racc_init_sysvars":{"type":"method","name":"_racc_init_sysvars","children":[],"call":[]}," Racc Parser _racc_setup":{"type":"method","name":"_racc_setup","children":[],"call":["arg []= ","arg size < ","arg size "," class "]}," Racc Parser racc_runtime_type":{"type":"method","name":"racc_runtime_type","children":[],"call":[]}," AttributeManager match_length":{"type":"method","name":"match_length","children":[],"call":["e - "," offset "]}," Literals match_char_range":{"type":"method","name":"match_char_range","children":[],"call":["char_range include? ! ","char_range include? ","@string [] ","@pos >= ","@string [] ord "]}," Literals match_dot":{"type":"method","name":"match_dot","children":[],"call":["@pos >= "]}," Literals get_line":{"type":"method","name":"get_line","children":[],"call":[" string [] "," string ","loff [] ","no - ","no > ","loff [] - "," raise ","loff size ","no >= ","no < "," position_line_offsets "," position_line_offsets  [] "," position_line_offsets  [] - "," position_line_offsets  size "]}," Literals current_pos_info":{"type":"method","name":"current_pos_info","children":[],"call":["KpegPosInfo  new "," string [] "," string "," get_line ","l - "," current_column "," current_line "," get_ current_line ine "," current_line  - ","  current_column urrent_ current_column olumn "," current_co current_line umn ","  current_column urrent_line "," current_ current_line ine "]}," Literals current_character":{"type":"method","name":"current_character","children":[],"call":[" string [] "," string ","target == "," string size "," raise ","target > ","target < ","target >= "]}," Literals position_line_offsets":{"type":"method","name":"position_line_offsets","children":[],"call":["@position_line_offsets << ","line size "," string each_line "," string "]}," AnyMethod skip_description?":{"type":"method","name":"skip_description?","children":[],"call":["(or\n  (send nil :is_alias_for)\n  (send\n    (send\n      (send nil :aliases) :empty?) :!)) ! ! ","(or\n  (send nil :is_alias_for)\n  (send\n    (send\n      (send nil :aliases) :empty?) :!)) ! "," aliases empty? ! "," aliases empty? "," aliases "," is_alias_for "," call_seq nil? "," call_seq "," has_call_seq? "]}," AnyMethod has_call_seq?":{"type":"method","name":"has_call_seq?","children":[],"call":["(or\n  (ivar :@call_seq)\n  (csend\n    (send nil :is_alias_for) :_call_seq)) ! ! ","(or\n  (ivar :@call_seq)\n  (csend\n    (send nil :is_alias_for) :_call_seq)) ! "," is_alias_for "]}}