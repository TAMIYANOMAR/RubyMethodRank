{" Concurrent ThreadPool <<":{"type":"method","name":"<<","children":[],"call":[" post "]}," Concurrent ThreadPool wait_for_termination":{"type":"method","name":"wait_for_termination","children":[],"call":["@termination wait "," killed? "," shutdown? "]}," Concurrent ThreadPool shutdown":{"type":"method","name":"shutdown","children":[],"call":["@queue << ","@pool size times ","@pool size "," atomic ","@pool empty? "," mutex synchronize "," mutex "]}," Concurrent ThreadPool killed?":{"type":"method","name":"killed?","children":[],"call":["@status == "]}," Concurrent ThreadPool shutdown?":{"type":"method","name":"shutdown?","children":[],"call":[" running? ! "," running? ","@status == "]}," Concurrent ThreadPool running?":{"type":"method","name":"running?","children":[],"call":["@status == "]}," Concurrent ThreadPool initialize":{"type":"method","name":"initialize","children":[],"call":["Event  new ","Queue  new "]}," Kernel promise":{"type":"method","name":"promise","children":[],"call":["Concurrent Promise  new "]}," Concurrent Promise realize":{"type":"method","name":"realize","children":[],"call":[" sleep ","index >= ","chain length ","current on_reject ","current on_fulfill ","current semaphore synchronize ","current semaphore ","current rejected? ","chain [] ","mutex synchronize ","Thread  pass "," loop ","args first ","args length == ","args length ","$GLOBAL_THREAD_POOL post ","Thread  new ","Promise  thread_pool post ","Promise  thread_pool ","current mutex synchronize ","current mutex ","lock synchronize "," event set "," event "," notify_child ","children_to_notify each ","@children dup "," set_state! "," mutex synchronize "," mutex ","SafeTaskExecutor  new execute ","SafeTaskExecutor  new ","@executor post "," complete "]}," Concurrent Promise try_rescue":{"type":"method","name":"try_rescue","children":[],"call":["rescuer block call ","rescuer block ","ex is_a? ","r clazz ","@rescuers find ","rescuers find ","rescuers empty? ","r clazz nil? "]}," Concurrent Promise on_reject":{"type":"method","name":"on_reject","children":[],"call":["child on_reject ","@children each "," try_rescue "," pending? ","@mutex synchronize "," realize ","@on_reject call ","Proc  new "]}," Concurrent Promise on_fulfill":{"type":"method","name":"on_fulfill","children":[],"call":["@handler call "," pending? ","@mutex synchronize ","@lock synchronize "," value "," realize ","@on_fulfill call ","Proc  new "]}," Concurrent Promise push":{"type":"method","name":"push","children":[],"call":["@parent push ","@chain << "," root? "]}," Concurrent Promise root?":{"type":"method","name":"root?","children":[],"call":["@parent nil? "]}," Concurrent Promise root":{"type":"method","name":"root","children":[],"call":["current parent ","current root? "," atomic ","current parent  parent ","current parent  root? "]}," Concurrent Promise rescue":{"type":"method","name":"rescue","children":[],"call":["@rescuers << ","Rescuer  new "," block_given? ","@mutex synchronize "," try_rescue "," reason "," pending? ","@lock synchronize "," block_given? ! "," rescued? "," fulfilled? ","block nil? "," then ","@Rescuer  new s << "]}," Concurrent Promise then":{"type":"method","name":"then","children":[],"call":["@children last "," push ","@children last on_reject "," rejected? ","@children << ","Promise  new ","Proc  new "," block_given? ","@mutex synchronize ","@lock synchronize ","block nil? ","child on_reject ","@state == ","child on_fulfill "," apply_deref_options ","child state= "," mutex synchronize "," mutex "," raise ","ArgumentError  new "," block_given? ! ","rescuer nil? "," synchronize ","args first ","args pop [] ","args pop ","args last is_a? ","args last ","@Promise  new ren last ","@Promise  new ren last on_reject ","@Promise  new ren << ","Promise  new  on_reject ","Promise  new  on_fulfill ","Promise  new  state= ","args first  nil? "]}," Concurrent Promise initialize":{"type":"method","name":"initialize","children":[],"call":[" realize "," root? ","Proc  new ","Mutex  new ","args first ","args first is_a? "," init_mutex "," init_obligation "," raise ","options fetch ","v nil? ","options delete_if ","opts fetch ","OptionsParser  get_executor_from ","opts delete_if "," get_executor_from "," set_deref_options ","OptionsParser  get_arguments_from ","Concurrent  configuration global_operation_pool ","Concurrent  configuration ","opts merge "]}," Kernel rejected?":{"type":"method","name":"rejected?","children":[],"call":["obligation rejected? ","obligation respond_to? "," raise ","ArgumentError  new ","object rejected? ","object respond_to? "]}," Kernel realized?":{"type":"method","name":"realized?","children":[],"call":["obligation fulfilled? ","obligation respond_to? ","obligation realized? "," raise ","ArgumentError  new ","object fulfilled? ","object respond_to? ","object realized? "]}," Kernel fulfilled?":{"type":"method","name":"fulfilled?","children":[],"call":["obligation realized? ","obligation respond_to? ","obligation fulfilled? "," raise ","ArgumentError  new ","object realized? ","object respond_to? ","object fulfilled? "]}," Kernel pending?":{"type":"method","name":"pending?","children":[],"call":["obligation pending? ","obligation respond_to? "," raise ","ArgumentError  new ","object pending? ","object respond_to? "]}," Kernel deref":{"type":"method","name":"deref","children":[],"call":["obligation deref ","obligation respond_to? ","agent deref ","agent respond_to? "," raise ","ArgumentError  new ","object value ","object respond_to? ","object deref "]}," Concurrent Obligation semaphore":{"type":"method","name":"semaphore","children":[],"call":["Mutex  new "]}," Concurrent Obligation rejected?":{"type":"method","name":"rejected?","children":[],"call":["@state == "," state == "," state "]}," Concurrent Obligation value":{"type":"method","name":"value","children":[],"call":[" semaphore synchronize "," semaphore ","Timeout  timeout ","timeout to_f ","timeout nil? ","timeout == "," pending? ! "," pending? "," mutex synchronize "," mutex "," event wait "," event ","@state != "," incomplete? ","timeout != "," deref "," wait "]}," Concurrent Obligation pending?":{"type":"method","name":"pending?","children":[],"call":["(or\n  (send nil :fulfilled?)\n  (send nil :rejected?)) ! "," rejected? "," fulfilled? ","@state == "," state == "," state "]}," Concurrent Obligation fulfilled?":{"type":"method","name":"fulfilled?","children":[],"call":["@state == "," state == "," state "]}," Kernel go":{"type":"method","name":"go","children":[],"call":["$GLOBAL_THREAD_POOL post "," block_given? ","args first post ","args slice ","args length ","args first ","args first behaves_as? "]}," Kernel future":{"type":"method","name":"future","children":[],"call":["Concurrent Future  new "]}," Concurrent Future initialize":{"type":"method","name":"initialize","children":[],"call":["Thread  pass "," semaphore synchronize "," semaphore ","$GLOBAL_THREAD_POOL post "," block_given? "," work ","thread_pool post ","args slice ","args length ","args first ","args first behaves_as? ","Future  thread_pool post ","Future  thread_pool ","Mutex  new "," init_mutex "," raise ","ArgumentError  new ","OptionsParser  get_executor_from "," get_executor_from ","OptionsParser  get_arguments_from ","Concurrent  configuration global_operation_pool ","Concurrent  configuration ","opts merge ","args first  post ","args slice  slice ","args slice  length ","args slice  first ","args slice  first behaves_as? ","Future  args first  post ","Future  args first  "]}," Concurrent FixedThreadPool collect_garbage":{"type":"method","name":"collect_garbage","children":[],"call":["@pool []= "," create_worker_thread ","@pool [] status nil? ","@pool [] status ","@pool [] ","@pool size times ","@pool size "," sleep ","Thread  new "," mutex synchronize "," mutex ","@collector abort_on_exception= ","context status ! ","context status ","@pool reject! "]}," Concurrent FixedThreadPool create_worker_thread":{"type":"method","name":"create_worker_thread","children":[],"call":[" killed? ","@termination set ","@pool empty? ","@pool delete ","Thread  current ","task last call ","task first ","task last ","task == ","@queue pop "," loop ","Thread  new ","thread abort_on_exception= ","parent on_worker_exit ","worker run ","Thread  current abort_on_exception= ","Worker  new ","@queue pop  last call ","@queue pop  first ","@queue pop  last ","@queue pop  == "]}," Concurrent FixedThreadPool status":{"type":"method","name":"status","children":[],"call":["t status ","@pool collect "," mutex synchronize "," mutex "]}," Concurrent FixedThreadPool post":{"type":"method","name":"post","children":[],"call":["@queue << "," running? "," raise ","ArgumentError  new "," block_given? "," fill_pool "," clean_pool ","@state == ","@mutex synchronize ","block nil? ","@pool << "," create_worker_thread ","@pool size < ","@pool size "]}," Concurrent FixedThreadPool size":{"type":"method","name":"size","children":[],"call":["@pool length "," running? "]}," Concurrent FixedThreadPool kill":{"type":"method","name":"kill","children":[],"call":["Thread  kill ","@pool each "," mutex synchronize "," mutex ","@terminator set "," drain_pool ","@queue clear ","@state == ","@mutex synchronize "]}," Concurrent FixedThreadPool initialize":{"type":"method","name":"initialize","children":[],"call":[" collect_garbage "," create_worker_thread ","size times collect ","size times "," raise ","ArgumentError  new ","size > ","size < ","Mutex  new ","Queue  new ","Event  new ","@max_threads > ","@max_threads < ","opts merge ","defaults merge merge ","defaults merge ","num_threads to_i < ","num_threads to_i "]}," Concurrent new_fixed_thread_pool":{"type":"method","name":"new_fixed_thread_pool","children":[],"call":[]}," Concurrent EventMachineDeferProxy <<":{"type":"method","name":"<<","children":[],"call":["EventMachine  defer "]}," Concurrent EventMachineDeferProxy post":{"type":"method","name":"post","children":[],"call":["EventMachine  defer ","block call "," proc ","args empty? "]}," Concurrent Event wait":{"type":"method","name":"wait","children":[],"call":["@notifier pop ","Timeout  timeout ","timeout nil? "," set? ","@waiters delete ","Thread  current ","@mutex synchronize "," sleep ","@waiters << ","@condition wait ","remaining remaining_time ","remaining can_wait? ","@set ! ","Condition Result  new ","@mutex unlock ","@mutex lock ","iteration < "," ns_wait_until "," synchronize ","@condition wait  @condition wait _time ","Condition Result  new  Condition Result  new _time ","@condition wait  can_wait? ","Condition Result  new  can_wait? "]}," Concurrent Event pulse":{"type":"method","name":"pulse","children":[],"call":[" set "]}," Concurrent Event reset":{"type":"method","name":"reset","children":[],"call":["@mutex synchronize ","@waiters clear "," set? ","@mutex unlock ","@mutex lock "," synchronize "]}," Concurrent Event set":{"type":"method","name":"set","children":[],"call":["pulse ! ","@notifier << ","@waiting > ","@mutex synchronize "," set? ","waiter run ","waiter status == ","waiter status ","@waiters each ","@waiting times ","@condition broadcast ","@mutex unlock ","@mutex lock "," ns_set "," synchronize "]}," Concurrent Event set?":{"type":"method","name":"set?","children":[],"call":["@set == ","@mutex synchronize ","@mutex unlock ","@mutex lock "," synchronize "]}," Concurrent Event initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new ","Queue  new ","ConditionVariable  new ","Condition  new "," ns_initialize "," synchronize "]}," Kernel defer":{"type":"method","name":"defer","children":[],"call":["Concurrent Defer  new "]}," Concurrent Defer fulfill":{"type":"method","name":"fulfill","children":[],"call":["@errorback call ","@errorback nil? ","@callback call ","@callback nil? ","@operation call "]}," Concurrent Defer go":{"type":"method","name":"go","children":[],"call":[" fulfill ","$GLOBAL_THREAD_POOL post ","Thread  pass ","thread_pool post "," atomic ","Defer  thread_pool post ","Defer  thread_pool "]}," Concurrent Defer rescue":{"type":"method","name":"rescue","children":[],"call":[" raise ","ArgumentError  new "," block_given? ","IllegalMethodCallError  new ","@errorback nil? "]}," Concurrent Defer then":{"type":"method","name":"then","children":[],"call":[" raise ","ArgumentError  new "," block_given? ","IllegalMethodCallError  new ","@callback nil? "]}," Concurrent Defer initialize":{"type":"method","name":"initialize","children":[],"call":[" go ","operation nil? "," raise ","ArgumentError  new "," block_given? ","operation nil? ! "," block_given? ! ","opts [] "]}," Concurrent CachedThreadPool collect_garbage":{"type":"method","name":"collect_garbage","children":[],"call":["@pool empty? ","worker status == ","worker status ","@pool count ","@thread_idletime >= "," delta "," timestamp ","worker idletime ","worker thread status nil? ","worker thread status ","worker thread ","@pool reject! ","@mutex synchronize "," sleep "," loop ","Thread  new "," mutex synchronize "," mutex ","@collector abort_on_exception= "," stale_worker? "," dead_worker? "]}," Concurrent CachedThreadPool create_worker_thread":{"type":"method","name":"create_worker_thread","children":[],"call":["@pool << ","worker thread= "," killed? ","@termination set ","@pool empty? ","@pool delete ","me idletime= "," timestamp ","me status= ","task last call ","task first ","task last ","task == ","@queue pop "," loop ","Thread  new ","Worker  new "," atomic "," mutex synchronize "," mutex ","worker thread abort_on_exception= ","worker thread ","parent on_worker_exit ","worker run ","Thread  current abort_on_exception= ","Thread  current ","Worker  new  thread= ","@queue pop  last call ","@queue pop  first ","@queue pop  last ","@queue pop  == ","Worker  new  thread abort_on_exception= ","Worker  new  thread ","parent on_Worker  new _exit ","Worker  new  run "]}," Concurrent CachedThreadPool status":{"type":"method","name":"status","children":[],"call":["worker thread status ","worker thread "," delta "," timestamp ","worker idletime ","worker status == ","worker status ","@pool collect ","@mutex synchronize "," mutex synchronize "," mutex "]}," Concurrent CachedThreadPool post":{"type":"method","name":"post","children":[],"call":["@queue << "," create_worker_thread ","@working >= ","@pool length ","@mutex synchronize "," collect_garbage ","@pool empty? "," running? "," raise ","ArgumentError  new "," block_given? "," mutex synchronize "," mutex "," prune_stale_workers ","worker signal ","@busy push ","@idle pop ","@busy shift ","@idle length + < ","@idle length + ","@busy length ","@idle length ","@idle empty? ","@state == ","block nil? ","@pool << ","@pool length < ","@pool size ","@queue empty? ! ","@queue empty? "," create_@idle pop _thread "," create_@busy shift _thread "," create_ create_worker_thread _thread "," prune_stale_@idle pop s "," prune_stale_@busy shift s "," prune_stale_ create_worker_thread s ","@idle pop  signal ","@busy shift  signal "," create_worker_thread  signal "]}," Concurrent CachedThreadPool size":{"type":"method","name":"size","children":[],"call":["@pool length "]}," Concurrent CachedThreadPool kill":{"type":"method","name":"kill","children":[],"call":["Thread  kill ","t thread ","@pool each ","@mutex synchronize "," mutex synchronize "," mutex ","@terminator set ","worker kill ","@busy each ","@idle each ","@state == "]}," Concurrent CachedThreadPool initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new ","opts [] ","(or\n  (send\n    (lvar :opts) :[]\n    (sym :thread_idletime))\n  (const nil :DEFAULT_THREAD_IDLETIME)) freeze ","(or\n  (send\n    (lvar :opts) :[]\n    (sym :gc_interval))\n  (const nil :DEFAULT_GC_INTERVAL)) freeze ","Event  new "," raise ","ArgumentError  new ","@max_threads > ","@max_threads < ","@idletime <= ","(or\n  (send\n    (lvar :opts) :[]\n    (sym :idletime))\n  (const nil :DEFAULT_THREAD_IDLETIME)) to_i ","defaults merge merge ","defaults merge ","(or\n  (send\n    (lvar :opts) :[]\n    (sym :idletime))\n  (const nil :DEFAULT_THREAD_IDLETIME)) to_i  <= "]}," Concurrent new_cached_thread_pool":{"type":"method","name":"new_cached_thread_pool","children":[],"call":[]}," Kernel post":{"type":"method","name":"post","children":[],"call":["agent post ","agent respond_to? "," raise ","ArgumentError  new ","object post ","object respond_to? "]}," Kernel agent":{"type":"method","name":"agent","children":[],"call":["Concurrent Agent  new "]}," Concurrent Agent work":{"type":"method","name":"work","children":[],"call":[" try_rescue "," notify_observers ","Time  now "," changed ","@validator call ","@validator nil? ","handler call ","Timeout  timeout ","@queue pop ","Thread  pass "," loop "," atomic ","@mutex synchronize ","Concurrent  timeout "," value "," changed? "," mutex synchronize "," mutex ","@observers notify_observers "," observers notify_observers "," observers "," mutex unlock ","exception ! "," mutex lock ","validator call ","@validator call ator call ","@validator call ator nil? ","@queue pop  call ","Timeout  Time  now out ","Concurrent  Time  now out ","validator call ator call "]}," Concurrent Agent try_rescue":{"type":"method","name":"try_rescue","children":[],"call":["rescuer block call ","rescuer block ","ex is_a? ","r clazz ","@rescuers find ","@mutex synchronize ","r clazz nil? "," mutex synchronize "," mutex "," log "]}," Concurrent Agent length":{"type":"method","name":"length","children":[],"call":["@queue length "]}," Concurrent Agent <<":{"type":"method","name":"<<","children":[],"call":[" post "," send_off "]}," Concurrent Agent post":{"type":"method","name":"post","children":[],"call":["@queue length ","@queue << "," block_given? "," atomic ","@mutex synchronize "," work ","Agent  thread_pool post ","Agent  thread_pool ","block nil? "," post_on ","@executor post "]}," Concurrent Agent validate":{"type":"method","name":"validate","children":[],"call":[" block_given? ","block nil? "," mutex unlock "," mutex "," mutex lock "]}," Concurrent Agent rescue":{"type":"method","name":"rescue","children":[],"call":["@rescuers << ","Rescuer  new "," block_given? ","@mutex synchronize ","block nil? "," mutex synchronize "," mutex "]}," Concurrent Agent value":{"type":"method","name":"value","children":[],"call":["value freeze ","value dup ","@copy_on_deref call ","@mutex synchronize ","@current value ","value freeze  freeze ","value dup  freeze ","@copy_on_deref call  freeze ","value freeze  dup ","value dup  dup ","@copy_on_deref call  dup ","@current value freeze  ","@current value dup  ","@current @copy_on_deref call  "]}," Concurrent Agent initialize":{"type":"method","name":"initialize","children":[],"call":["$GLOBAL_THREAD_POOL << "," work "," proc ","Queue  new ","Thread  new ","Agent  thread_pool post ","Agent  thread_pool ","Mutex  new ","opts [] "," set_deref_options "," init_mutex ","CopyOnWriteObserverSet  new ","opts fetch freeze ","opts fetch ","Proc  new ","OptionsParser  get_operation_executor_from ","OptionsParser  get_task_executor_from ","OneByOne  new "," observers= "," get_executor_from ","SerializedExecution  new "," ns_initialize "," synchronize "]}," Kernel atomic":{"type":"method","name":"atomic","children":[],"call":["(send\n  (const nil :Fiber) :new) resume ","Fiber  new "," raise ","ArgumentError  new "," block_given? "]}," Concurrent Future work":{"type":"method","name":"work","children":[],"call":[" atomic "," semaphore synchronize "," semaphore "," mutex synchronize "," mutex "," delete_observers "," notify_observers ","Time  now "," changed "," event set "," event ","@mutex synchronize "," value "," complete ","SafeTaskExecutor  new execute ","SafeTaskExecutor  new ","  value ue "]}," Mutex sync_with_timeout":{"type":"method","name":"sync_with_timeout","children":[],"call":[" synchronize ","Timeout  timeout "]}," Concurrent TcpSyncDemux get_message":{"type":"method","name":"get_message","children":[],"call":[" class get_message "," class "]}," Concurrent TcpSyncDemux parse_message":{"type":"method","name":"parse_message","children":[],"call":[" class parse_message "," class "]}," Concurrent TcpSyncDemux format_message":{"type":"method","name":"format_message","children":[],"call":[" class format_message "," class "]}," Concurrent TcpSyncDemux close":{"type":"method","name":"close","children":[],"call":["@socket close "]}," Concurrent TcpSyncDemux respond":{"type":"method","name":"respond","children":[],"call":["@socket puts "," format_message ","@socket nil? "]}," Concurrent TcpSyncDemux accept":{"type":"method","name":"accept","children":[],"call":["Reactor EventContext  new ","event nil? "," get_message ","@acl allow_socket? ","@server accept ","@socket nil? ","@server accept  nil? "]}," Concurrent TcpSyncDemux stopped?":{"type":"method","name":"stopped?","children":[],"call":["@server nil? "]}," Concurrent TcpSyncDemux stop":{"type":"method","name":"stop","children":[],"call":["@server close ","@server nil? ","@socket close ","@socket nil? "," atomic "]}," Concurrent TcpSyncDemux start":{"type":"method","name":"start","children":[],"call":["TCPServer  new "]}," Concurrent TcpSyncDemux initialize":{"type":"method","name":"initialize","children":[],"call":["ACL  new ","opts [] "]}," Concurrent SmartMutex unlock":{"type":"method","name":"unlock","children":[],"call":["@mutex unlock "," alone? "," atomic "]}," Concurrent SmartMutex try_lock":{"type":"method","name":"try_lock","children":[],"call":["@mutex try_lock "," alone? "," atomic "]}," Concurrent SmartMutex synchronize":{"type":"method","name":"synchronize","children":[],"call":["@mutex synchronize "," alone? "]}," Concurrent SmartMutex sleep":{"type":"method","name":"sleep","children":[],"call":["@mutex sleep ","Kernel  sleep "," alone? "]}," Concurrent SmartMutex locked?":{"type":"method","name":"locked?","children":[],"call":["@mutex locked? "," alone? "," atomic "]}," Concurrent SmartMutex lock":{"type":"method","name":"lock","children":[],"call":["@mutex lock "," alone? "," atomic "]}," Concurrent SmartMutex alone?":{"type":"method","name":"alone?","children":[],"call":["Thread  list length <= ","Thread  list length ","Thread  list "]}," Concurrent SmartMutex initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "]}," Concurrent Reactor run_async":{"type":"method","name":"run_async","children":[],"call":[" finalize_stop ","context callback push ","context callback "," handle_event ","context == ","@queue pop "," loop ","@demux start ","@demux nil? ","@demux run ","@queue pop  callback push ","@queue pop  callback ","@queue pop  == "]}," Concurrent Reactor run_sync":{"type":"method","name":"run_sync","children":[],"call":[" finalize_stop ","@demux respond "," handle_event ","@demux close ","context nil? ","@demux accept ","@demux stopped? "," loop ","@demux start ","@demux stop ","@demux running? ","@demux run ","@demux accept  nil? "]}," Concurrent Reactor finalize_stop":{"type":"method","name":"finalize_stop","children":[],"call":["@demux stop ","@demux nil? "," atomic ","@mutex synchronize "]}," Concurrent Reactor handle_event":{"type":"method","name":"handle_event","children":[],"call":["handler call ","context args ","context event ","handler nil? ","@handlers [] ","@mutex synchronize "," raise ","ArgumentError  new "," block_given? ","context callback pop ","context callback ","@queue push ","EventContext  new ","Queue  new ","args dup ","event to_sym "," running? ","NotImplementedError  new ","@demux class ","EventContext  new  args ","EventContext  new  event ","EventContext  new  callback pop ","EventContext  new  callback "]}," Concurrent Reactor stop":{"type":"method","name":"stop","children":[],"call":["@queue push ","@demux stop "," running? "]}," Concurrent Reactor start":{"type":"method","name":"start","children":[],"call":[" run_async "," run_sync "," raise ","StandardError  new "," running? "]}," Concurrent Reactor running?":{"type":"method","name":"running?","children":[],"call":[]}," Concurrent Reactor stop_on_signal":{"type":"method","name":"stop_on_signal","children":[],"call":[" stop ","Signal  trap ","signals each ","Thread  new ","(send\n  (const nil :Thread) :new) abort_on_exception= "]}," Concurrent Reactor remove_handler":{"type":"method","name":"remove_handler","children":[],"call":["handler nil? ! ","handler nil? ","@handlers delete ","event to_sym ","@mutex synchronize "]}," Concurrent Reactor add_handler":{"type":"method","name":"add_handler","children":[],"call":["@handlers []= ","@mutex synchronize "," raise ","ArgumentError  new "," block_given? ","RESERVED_EVENTS  include? ","event to_sym ","event to_sym  to_sym "]}," Concurrent Reactor initialize":{"type":"method","name":"initialize","children":[],"call":["SmartMutex  new ","Hash  new "," raise ","ArgumentError  new ","@demux behaves_as? ","@demux set_reactor ","@demux nil? ","Queue  new ","Mutex  new "]}," Kernel executor":{"type":"method","name":"executor","children":[],"call":["Concurrent Executor  run "]}," Concurrent Executor run":{"type":"method","name":"run","children":[],"call":["ExecutionContext  new ","Thread  current [] ","Thread  current ","Thread  kill ","logger call ","worker join nil? ","worker join ","worker abort_on_exception= ","Thread  new "," sleep "," loop ","opts [] "," raise ","ArgumentError  new "," block_given? ","run_now == ","executor abort_on_exception= "]}," Concurrent Executor ExecutionContext kill":{"type":"method","name":"kill","children":[],"call":["@thread kill ","Thread  kill "," stop "," atomic ","@thread nil? "]}," Concurrent Executor ExecutionContext stop":{"type":"method","name":"stop","children":[],"call":["@thread []= "]}," Concurrent Executor ExecutionContext join":{"type":"method","name":"join","children":[],"call":["@thread join ","limit nil? ","@thread nil? "]}," Concurrent Executor ExecutionContext status":{"type":"method","name":"status","children":[],"call":["@thread status ","@thread nil? "]}," Concurrent Executor ExecutionContext initialize":{"type":"method","name":"initialize","children":[],"call":["@thread []= "]}," Concurrent DRbAsyncDemux Demultiplexer method_missing":{"type":"method","name":"method_missing","children":[],"call":[" send "," raise ","DRb DRbUnknownError  new ","NoMethodError  new ","result last ","result first ","@reactor handle "," define_method ","(sclass\n  (self)\n  (self)) class_eval ","@reactor handle  last ","@reactor handle  first "]}," Concurrent DRbAsyncDemux Demultiplexer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent DRbAsyncDemux stopped?":{"type":"method","name":"stopped?","children":[],"call":["@service nil? "]}," Concurrent DRbAsyncDemux stop":{"type":"method","name":"stop","children":[],"call":["DRb  stop_service "]}," Concurrent DRbAsyncDemux start":{"type":"method","name":"start","children":[],"call":["DRb  start_service ","Demultiplexer  new ","DRb  install_acl "]}," Concurrent DRbAsyncDemux set_reactor":{"type":"method","name":"set_reactor","children":[],"call":[" raise ","ArgumentError  new ","reactor behaves_as? "]}," Concurrent DRbAsyncDemux initialize":{"type":"method","name":"initialize","children":[],"call":["ACL  new ","opts [] "]}," Concurrent Reactor TcpSyncDemux get_message":{"type":"method","name":"get_message","children":[],"call":[" class get_message "," class "]}," Concurrent Reactor TcpSyncDemux parse_message":{"type":"method","name":"parse_message","children":[],"call":[" class parse_message "," class "]}," Concurrent Reactor TcpSyncDemux format_message":{"type":"method","name":"format_message","children":[],"call":[" class format_message "," class "]}," Concurrent Reactor TcpSyncDemux close":{"type":"method","name":"close","children":[],"call":["@socket close "]}," Concurrent Reactor TcpSyncDemux respond":{"type":"method","name":"respond","children":[],"call":["@socket puts "," format_message ","@socket nil? "," reset "]}," Concurrent Reactor TcpSyncDemux accept":{"type":"method","name":"accept","children":[],"call":["Reactor EventContext  new ","event nil? "," get_message ","@acl allow_socket? ","@server accept ","@socket nil? "," reset ","@server accept  nil? "]}," Concurrent Reactor TcpSyncDemux stopped?":{"type":"method","name":"stopped?","children":[],"call":["@server nil? "]}," Concurrent Reactor TcpSyncDemux stop":{"type":"method","name":"stop","children":[],"call":["@server close ","@server nil? ","@socket close ","@socket nil? "," atomic "]}," Concurrent Reactor TcpSyncDemux start":{"type":"method","name":"start","children":[],"call":["TCPServer  new "]}," Concurrent Reactor TcpSyncDemux initialize":{"type":"method","name":"initialize","children":[],"call":["ACL  new ","opts [] "]}," Concurrent Reactor DRbAsyncDemux Demultiplexer method_missing":{"type":"method","name":"method_missing","children":[],"call":[" send "," raise ","DRb DRbUnknownError  new ","NoMethodError  new ","result last ","result first ","@reactor handle "," define_method ","(sclass\n  (self)\n  (self)) class_eval ","DRb DRbError  new ","DRb DRbRemoteError  new ","@reactor handle  last ","@reactor handle  first "]}," Concurrent Reactor DRbAsyncDemux Demultiplexer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent Reactor DRbAsyncDemux stopped?":{"type":"method","name":"stopped?","children":[],"call":["@service nil? "]}," Concurrent Reactor DRbAsyncDemux stop":{"type":"method","name":"stop","children":[],"call":["DRb  stop_service "]}," Concurrent Reactor DRbAsyncDemux start":{"type":"method","name":"start","children":[],"call":["DRb  start_service ","Demultiplexer  new ","DRb  install_acl "]}," Concurrent Reactor DRbAsyncDemux set_reactor":{"type":"method","name":"set_reactor","children":[],"call":[" raise ","ArgumentError  new ","reactor behaves_as? "]}," Concurrent Reactor DRbAsyncDemux initialize":{"type":"method","name":"initialize","children":[],"call":["ACL  new ","opts [] "]}," Concurrent NullThreadPool <<":{"type":"method","name":"<<","children":[],"call":["NullThreadPool  post "]}," Concurrent NullThreadPool post":{"type":"method","name":"post","children":[],"call":["NullThreadPool  post "]}," Concurrent UsesGlobalThreadPool included":{"type":"method","name":"included","children":[],"call":[]}," Concurrent ThreadPool mutex":{"type":"method","name":"mutex","children":[],"call":["Mutex  new "]}," Concurrent Reactor handle":{"type":"method","name":"handle","children":[],"call":["context callback pop ","context callback ","@queue push ","EventContext  new ","Queue  new ","args dup ","event to_sym "," running? "," raise ","NotImplementedError  new ","@demux class ","EventContext  new  callback pop ","EventContext  new  callback "]}," Concurrent Promise rescued?":{"type":"method","name":"rescued?","children":[],"call":[]}," Concurrent Obligation mutex":{"type":"method","name":"mutex","children":[],"call":["Mutex  new "]}," Concurrent Supervisor monitor":{"type":"method","name":"monitor","children":[],"call":[" sleep ","context thread abort_on_exception= ","context thread ","context thread= ","context worker run ","context worker ","Thread  new ","context thread alive? ","@workers each ","@mutex synchronize "," loop "," running? "," stop "," send "," prune_workers "," run_worker "]}," Concurrent Supervisor add_worker":{"type":"method","name":"add_worker","children":[],"call":["@workers << ","WorkerContext  new ","@mutex synchronize ","worker behaves_as? ! ","worker behaves_as? "," running? ","worker nil? ","context object_id ","worker run ","@count add "," raise ","ArgumentError  new ","CHILD_TYPES  include? ","CHILD_RESTART_OPTIONS  include? ","worker is_a? ","opts [] "," behaves_as_worker? ! "," behaves_as_worker? ","WorkerContext  new  object_id "]}," Concurrent Supervisor length":{"type":"method","name":"length","children":[],"call":["@workers length ","@mutex synchronize "]}," Concurrent Supervisor running?":{"type":"method","name":"running?","children":[],"call":["@running == ","@mutex synchronize "]}," Concurrent Supervisor stop":{"type":"method","name":"stop","children":[],"call":["Thread  kill ","context thread ","context thread nil? ","Thread  pass ","context worker stop ","context worker ","@workers pop ","@workers empty? ","@monitor nil? ","@mutex synchronize "," running? "," prune_workers "," terminate_worker ","@workers [] ","-1 - ","@workers length times ","@workers length ","@restart_times clear ","@monitor kill ","@monitor join nil? ","@monitor join ","@monitor run ","@monitor status == ","@monitor status ","@workers pop  thread ","@workers []  thread ","@workers pop  thread nil? ","@workers []  thread nil? ","@workers pop  worker stop ","@workers []  worker stop ","@workers pop  worker ","@workers []  worker "]}," Concurrent Supervisor run":{"type":"method","name":"run","children":[],"call":[" monitor "," raise ","StandardError  new "," running? ","@mutex synchronize "]}," Concurrent Supervisor run!":{"type":"method","name":"run!","children":[],"call":["Thread  pass "," monitor ","Thread  new "," raise ","StandardError  new "," running? ","@monitor abort_on_exception= ","@mutex synchronize ","Thread  current abort_on_exception= ","Thread  current "]}," Concurrent Supervisor initialize":{"type":"method","name":"initialize","children":[],"call":[" add_worker ","opts [] ","opts [] nil? ","Mutex  new "," add_workers ","WorkerCounts  new "," raise ","ArgumentError  new ","@max_time > ","@max_restart > ","@monitor_interval > ","RESTART_STRATEGIES  include? ","(or\n  (or\n    (send\n      (lvar :opts) :[]\n      (sym :max_time))\n    (send\n      (lvar :opts) :[]\n      (sym :max_t)))\n  (const nil :DEFAULT_MAX_TIME)) to_i ","(or\n  (or\n    (send\n      (lvar :opts) :[]\n      (sym :max_restart))\n    (send\n      (lvar :opts) :[]\n      (sym :max_r)))\n  (const nil :DEFAULT_MAX_RESTART)) to_i ","(or\n  (send\n    (lvar :opts) :[]\n    (sym :monitor_interval))\n  (const nil :DEFAULT_MONITOR_INTERVAL)) to_f ","(or\n  (or\n    (send\n      (lvar :opts) :[]\n      (sym :max_time))\n    (send\n      (lvar :opts) :[]\n      (sym :max_t)))\n  (const nil :DEFAULT_MAX_TIME)) to_i  > ","(or\n  (or\n    (send\n      (lvar :opts) :[]\n      (sym :max_restart))\n    (send\n      (lvar :opts) :[]\n      (sym :max_r)))\n  (const nil :DEFAULT_MAX_RESTART)) to_i  > ","(or\n  (send\n    (lvar :opts) :[]\n    (sym :monitor_interval))\n  (const nil :DEFAULT_MONITOR_INTERVAL)) to_f  > "]}," Concurrent Reactor run":{"type":"method","name":"run","children":[],"call":[" run_async "," run_sync "," raise ","StandardError  new "," running? "]}," Concurrent Reactor TcpSyncDemux running?":{"type":"method","name":"running?","children":[],"call":["@server nil? ! ","@server nil? "]}," Concurrent Reactor TcpSyncDemux reset":{"type":"method","name":"reset","children":[],"call":[" run "," sleep "," stop "]}," Concurrent Reactor TcpSyncDemux run":{"type":"method","name":"run","children":[],"call":["TCPServer  new "," raise ","StandardError  new "," running? "]}," Concurrent Reactor DRbAsyncDemux running?":{"type":"method","name":"running?","children":[],"call":["@service nil? ! ","@service nil? "]}," Concurrent Reactor DRbAsyncDemux run":{"type":"method","name":"run","children":[],"call":["DRb  start_service ","Demultiplexer  new ","DRb  install_acl "," raise ","StandardError  new "," running? "]}," Concurrent timeout":{"type":"method","name":"timeout","children":[],"call":["Thread  kill ","thread nil? "," raise ","thread [] ","thread join ","Thread  current []= ","Thread  current ","Thread  new ","future value! ","future complete? ","future wait ","Future  execute "," deprecated ","Future  execute  value! ","Future  execute  complete? ","Future  execute  wait "]}," Concurrent TimerTask execute_task":{"type":"method","name":"execute_task","children":[],"call":["Thread  kill ","@worker nil? "," notify_observers ","Time  now "," changed ","@worker [] "," raise ","@worker join nil? ","@worker join ","Thread  current []= ","@task call ","Thread  current ","Thread  current abort_on_exception= ","Thread  new "," value "," mutex synchronize "," mutex "," observers notify_observers "," observers "," schedule_next_task "," value= ","completion try? ","@executor execute ","Concurrent  timer "," method "," timeout_interval ","@running true? ","@observers notify_observers "," execution_interval ","ScheduledTask  execute ","Concurrent  Time  now r "," Time  now out_interval "]}," Concurrent TimerTask on_task":{"type":"method","name":"on_task","children":[],"call":[" execute_task "," sleep "]}," Concurrent TimerTask on_stop":{"type":"method","name":"on_stop","children":[],"call":["Thread  pass ","@monitor wakeup ","@monitor alive? "," before_stop_proc call "," before_stop_proc "]}," Concurrent TimerTask on_run":{"type":"method","name":"on_run","children":[],"call":["Thread  current "]}," Concurrent TimerTask kill":{"type":"method","name":"kill","children":[],"call":["Thread  kill ","@monitor nil? ","@worker nil? "," mutex synchronize "," mutex "," running? "]}," Concurrent TimerTask initialize":{"type":"method","name":"initialize","children":[],"call":["opts [] "," raise ","ArgumentError  new "," block_given? "," set_deref_options "," timeout_interval= "," execution_interval= "," init_mutex "," observers= ","CopyOnNotifyObserverSet  new ","Concurrent AtomicBoolean  new ","Concurrent SafeTaskExecutor  new "," init_executor ","CopyOnWriteObserverSet  new "]}," Concurrent Supervisor rest_for_one":{"type":"method","name":"rest_for_one","children":[],"call":[" one_for_one "," raise "," exceeded_max_restart_frequency? ","context needs_restart? "," terminate_worker ","@workers each "]}," Concurrent Supervisor one_for_all":{"type":"method","name":"one_for_all","children":[],"call":[" run_worker ","@workers each "," terminate_worker "," raise "," exceeded_max_restart_frequency? ","context needs_restart? "]}," Concurrent Supervisor one_for_one":{"type":"method","name":"one_for_one","children":[],"call":[" run_worker "," raise "," exceeded_max_restart_frequency? ","context needs_restart? ","@workers each "]}," Concurrent Supervisor exceeded_max_restart_frequency?":{"type":"method","name":"exceeded_max_restart_frequency?","children":[],"call":["@restart_times pop ","diff >= ","diff <= ","@restart_times length >= ","@restart_times length ","(send\n  (send\n    (ivar :@restart_times) :first) :-\n  (send\n    (ivar :@restart_times) :last)) abs ","@restart_times first - ","@restart_times last ","@restart_times first ","@restart_times unshift ","Time  now to_i ","Time  now "," delta ","(send\n  (send\n    (ivar :@restart_times) :first) :-\n  (send\n    (ivar :@restart_times) :last)) abs  >= "," delta  >= ","(send\n  (send\n    (ivar :@restart_times) :first) :-\n  (send\n    (ivar :@restart_times) :last)) abs  <= "," delta  <= "]}," Concurrent Supervisor find_worker":{"type":"method","name":"find_worker","children":[],"call":["@workers [] ","index nil? ","worker object_id == ","worker object_id ","@workers find_index "]}," Concurrent Supervisor prune_workers":{"type":"method","name":"prune_workers","children":[],"call":["w alive? ! ","w alive? ","w restart == ","w restart ","@workers delete_if "]}," Concurrent Supervisor terminate_worker":{"type":"method","name":"terminate_worker","children":[],"call":["context thread= ","Thread  kill ","context thread ","Thread  pass ","context worker stop ","context worker ","context alive? "]}," Concurrent Supervisor run_worker":{"type":"method","name":"run_worker","children":[],"call":["context thread= ","context worker run ","context worker ","Thread  current abort_on_exception= ","Thread  current ","Thread  new "]}," Concurrent Supervisor behaves_as_worker?":{"type":"method","name":"behaves_as_worker?","children":[],"call":["obj method arity == ","obj method arity ","obj method ","obj respond_to? ","WORKER_API  each "]}," Concurrent Supervisor restart_worker":{"type":"method","name":"restart_worker","children":[],"call":[" run_worker "," terminate_worker ","context terminated= ","context restart == ","context restart ","context nil? "," find_worker ","@mutex synchronize "," running? "]}," Concurrent Supervisor start_worker":{"type":"method","name":"start_worker","children":[],"call":[" run_worker ","context alive? ","context terminated= ","context nil? "," find_worker ","@mutex synchronize "," running? "]}," Concurrent Supervisor stop_worker":{"type":"method","name":"stop_worker","children":[],"call":["@workers delete_at ","@workers [] restart == ","@workers [] restart ","@workers [] "," terminate_worker ","context terminated= ","index nil? "," find_worker ","@mutex synchronize "," running? "]}," Concurrent Supervisor remove_worker":{"type":"method","name":"remove_worker","children":[],"call":["context worker ","@workers delete_at ","context alive? ","context nil? "," find_worker ","@mutex synchronize "]}," Concurrent Supervisor add_workers":{"type":"method","name":"add_workers","children":[],"call":[" add_worker ","workers collect "]}," Concurrent Supervisor count":{"type":"method","name":"count","children":[],"call":["@count dup freeze ","@count dup ","@count status= ","w thread status ","w thread ","@workers collect ","@mutex synchronize "]}," Concurrent Supervisor current_restart_count":{"type":"method","name":"current_restart_count","children":[],"call":["@restart_times length "]}," Concurrent Supervisor abend":{"type":"method","name":"abend","children":[],"call":["s nil? ","@status reduce "]}," Concurrent Supervisor stopped":{"type":"method","name":"stopped","children":[],"call":["s == ","@status reduce "]}," Concurrent Supervisor aborting":{"type":"method","name":"aborting","children":[],"call":["s == ","@status reduce "]}," Concurrent Supervisor running":{"type":"method","name":"running","children":[],"call":["s == ","@status reduce "]}," Concurrent Supervisor sleeping":{"type":"method","name":"sleeping","children":[],"call":["s == ","@status reduce "]}," Concurrent Supervisor active":{"type":"method","name":"active","children":[],"call":[" sleeping + + "," aborting "," sleeping + "," running "," sleeping "]}," Concurrent Supervisor add":{"type":"method","name":"add","children":[],"call":[" workers ","context type == ","context type "," supervisors "," specs "]}," Concurrent Supervisor needs_restart?":{"type":"method","name":"needs_restart?","children":[],"call":[" thread status nil? "," thread status "," thread "," thread nil? "," restart "," terminated == "," terminated "," thread alive? "]}," Concurrent Supervisor alive?":{"type":"method","name":"alive?","children":[],"call":[" thread alive? "," thread "]}," Concurrent Runnable mutex":{"type":"method","name":"mutex","children":[],"call":["Mutex  new "]}," Concurrent Runnable running?":{"type":"method","name":"running?","children":[],"call":["@running == "]}," Concurrent Runnable stop":{"type":"method","name":"stop","children":[],"call":[" on_stop "," respond_to? "," mutex synchronize "," mutex "]}," Concurrent Runnable run":{"type":"method","name":"run","children":[],"call":[" raise "," after_run "," respond_to? ","Thread  pass "," on_task "," loop "," on_run ","LifecycleError  new "," mutex synchronize "," mutex "]}," Concurrent Runnable run!":{"type":"method","name":"run!","children":[],"call":["Thread  pass "," run ","Thread  current abort_on_exception= ","Thread  current ","Thread  new "," raise ","LifecycleError  new ","thread join "]}," Concurrent Runnable included":{"type":"method","name":"included","children":[{"type":"method","name":"run!","children":[],"asgn":[null,{"type":"local","name":"runner","value":" new "},[" new "]],"call":["Context  new "," new "]}],"call":[]}," Concurrent Runnable Context initialize":{"type":"method","name":"initialize","children":[],"call":["runner run ","Thread  abort_on_exception= ","Thread  new ","@thread join "]}," Concurrent Obligation event":{"type":"method","name":"event","children":[],"call":["Event  new "]}," Concurrent Future add_observer":{"type":"method","name":"add_observer","children":[],"call":["observer send ","Future  thread_pool post ","Time  now ","Future  thread_pool "," event set? "," event ","@mutex synchronize "," mutex synchronize "," mutex "," value ","  value ue "]}," Concurrent FixedThreadPool on_worker_exit":{"type":"method","name":"on_worker_exit","children":[],"call":["@terminator set ","@state != ","@pool empty? ","@pool delete ","@mutex synchronize "]}," Concurrent FixedThreadPool on_end_task":{"type":"method","name":"on_end_task","children":[],"call":[" fill_pool "," clean_pool ","@state == ","@mutex synchronize "]}," Concurrent FixedThreadPool on_start_task":{"type":"method","name":"on_start_task","children":[],"call":[]}," Concurrent FixedThreadPool drain_pool":{"type":"method","name":"drain_pool","children":[],"call":["@pool clear ","worker kill ","@pool each "]}," Concurrent FixedThreadPool clean_pool":{"type":"method","name":"clean_pool","children":[],"call":["worker dead? ","@pool reject! "]}," Concurrent FixedThreadPool fill_pool":{"type":"method","name":"fill_pool","children":[],"call":["@pool << "," create_worker_thread ","@pool length < ","@pool length ","@state == "]}," Concurrent FixedThreadPool length":{"type":"method","name":"length","children":[],"call":["@pool length ","@state == ","@mutex synchronize "]}," Concurrent FixedThreadPool shutdown":{"type":"method","name":"shutdown","children":[],"call":["@queue << ","@pool length times ","@pool length ","@terminator set ","@pool empty? ","@state == ","@mutex synchronize "]}," Concurrent FixedThreadPool <<":{"type":"method","name":"<<","children":[],"call":[" post "]}," Concurrent FixedThreadPool wait_for_termination":{"type":"method","name":"wait_for_termination","children":[],"call":["@terminator wait "]}," Concurrent FixedThreadPool running?":{"type":"method","name":"running?","children":[],"call":["@state == "]}," Concurrent FixedThreadPool Worker run":{"type":"method","name":"run","children":[],"call":["@parent on_end_task ","task last call ","task first ","task last ","@parent on_start_task ","@parent on_worker_exit ","task == ","@queue pop "," loop "," raise ","StandardError  new ","@thread nil? ","@mutex synchronize ","@parent on_end_@queue pop  ","@queue pop  last call ","@queue pop  first ","@queue pop  last ","@parent on_start_@queue pop  ","@queue pop  == "]}," Concurrent FixedThreadPool Worker kill":{"type":"method","name":"kill","children":[],"call":["Thread  kill ","@thread nil? ","@mutex synchronize "]}," Concurrent FixedThreadPool Worker dead?":{"type":"method","name":"dead?","children":[],"call":["@thread alive? ! ","@thread alive? ","@thread nil? ","@mutex synchronize "]}," Concurrent FixedThreadPool Worker initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "]}," Concurrent CachedThreadPool prune_stale_workers":{"type":"method","name":"prune_stale_workers","children":[],"call":["worker dead? ","worker stop ","worker idletime > ","worker idletime ","@idle reject! "]}," Concurrent CachedThreadPool on_end_task":{"type":"method","name":"on_end_task","children":[],"call":["@idle push ","@busy delete ","@state == ","@mutex synchronize "]}," Concurrent CachedThreadPool on_worker_exit":{"type":"method","name":"on_worker_exit","children":[],"call":["@terminator set ","@state != ","@busy empty? ","@idle empty? ","@busy delete ","@idle delete ","@mutex synchronize "]}," Concurrent CachedThreadPool length":{"type":"method","name":"length","children":[],"call":["@busy length + ","@idle length ","@busy length ","@state == ","@mutex synchronize "]}," Concurrent CachedThreadPool shutdown":{"type":"method","name":"shutdown","children":[],"call":["worker stop ","@busy each ","@idle each ","@terminator set ","@busy empty? ","@idle empty? ","@state == ","@mutex synchronize "]}," Concurrent CachedThreadPool wait_for_termination":{"type":"method","name":"wait_for_termination","children":[],"call":["@terminator wait "]}," Concurrent CachedThreadPool running?":{"type":"method","name":"running?","children":[],"call":["@state == "]}," Concurrent CachedThreadPool <<":{"type":"method","name":"<<","children":[],"call":[" post "]}," Concurrent CachedThreadPool Worker run":{"type":"method","name":"run","children":[],"call":["@parent on_end_task ","task last call ","task first ","task last ","@parent on_worker_exit ","task == ","@tasks pop ","@resource wait ","@tasks empty? ","@mutex synchronize "," loop "," raise ","StandardError  new ","@thread nil? "]}," Concurrent CachedThreadPool Worker kill":{"type":"method","name":"kill","children":[],"call":["Thread  kill ","@thread nil? ","Time  now ","@mutex synchronize "]}," Concurrent CachedThreadPool Worker stop":{"type":"method","name":"stop","children":[],"call":["@resource signal ","@tasks << ","@tasks clear ","@mutex synchronize "]}," Concurrent CachedThreadPool Worker signal":{"type":"method","name":"signal","children":[],"call":["@resource signal ","@tasks << ","@parent nil? ","@mutex synchronize "]}," Concurrent CachedThreadPool Worker idletime":{"type":"method","name":"idletime","children":[],"call":["Time  now to_i - ","@idletime to_i ","Time  now to_i ","Time  now ","@idletime nil? ","@mutex synchronize "]}," Concurrent CachedThreadPool Worker dead?":{"type":"method","name":"dead?","children":[],"call":["@thread alive? ! ","@thread alive? ","@thread nil? ","@mutex synchronize "]}," Concurrent CachedThreadPool Worker idle?":{"type":"method","name":"idle?","children":[],"call":["@idletime nil? ! ","@idletime nil? "]}," Concurrent CachedThreadPool Worker initialize":{"type":"method","name":"initialize","children":[],"call":["Queue  new ","ConditionVariable  new ","Time  now ","Mutex  new "]}," Concurrent Actor on_error":{"type":"method","name":"on_error","children":[],"call":[]}," Concurrent Actor on_task":{"type":"method","name":"on_task","children":[],"call":[" on_error ","Time  now "," notify_observers "," changed "," act ","message == ","@queue pop ","package message ","package handler post ","package handler ","ex nil? ","package handler is_a? ","package notifier set ","package notifier ","package handler push ","notifier set? ! ","notifier set? ","notifier is_a? ","package handler complete ","notifier nil? ","package == "," queue pop "," queue ","package handler respond_to? ","result nil? ! ","result nil? ","@queue pop  == ","package @queue pop  "," queue pop  message "," queue pop  handler post "," queue pop  handler "," queue pop  handler is_a? ","package package notifier  set "," queue pop  notifier set ","package package notifier  "," queue pop  notifier "," queue pop  handler push ","package notifier  set? ! ","package notifier  set? ","package notifier  is_a? "," queue pop  handler complete ","package notifier  nil? "," queue pop  == "," queue pop  handler respond_to? "," act  nil? ! "," act  nil? "]}," Concurrent Actor on_stop":{"type":"method","name":"on_stop","children":[],"call":["@queue push ","@queue clear "," queue push "," queue "," queue clear "]}," Concurrent Actor on_run":{"type":"method","name":"on_run","children":[],"call":["@queue clear "," queue clear "," queue "," warn "]}," Concurrent Actor Poolbox <<":{"type":"method","name":"<<","children":[],"call":[" post "]}," Concurrent Actor Poolbox post":{"type":"method","name":"post","children":[],"call":["@queue length ","@queue push "]}," Concurrent Actor Poolbox initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent Actor act":{"type":"method","name":"act","children":[],"call":[" raise ","NotImplementedError  new "," class "," warn "]}," Concurrent Actor pool":{"type":"method","name":"pool","children":[],"call":[]}," Concurrent Actor <<":{"type":"method","name":"<<","children":[],"call":[" post "]}," Concurrent Actor post":{"type":"method","name":"post","children":[],"call":["@queue length ","@queue push "," running? "]}," Concurrent Actor initialize":{"type":"method","name":"initialize","children":[],"call":["Queue  new "]}," Concurrent AbstractThreadPool run_garbage_collector":{"type":"method","name":"run_garbage_collector","children":[],"call":["Thread  pass "," collect_garbage ","@mutex synchronize "," sleep "," loop ","Thread  current abort_on_exception= ","Thread  current ","Thread  new "]}," Concurrent AbstractThreadPool create_worker_thread":{"type":"method","name":"create_worker_thread","children":[],"call":[" run_garbage_collector ","@collector alive? ","Thread  pass ","context thread= ","@terminator set ","@state != ","@pool empty? ","@pool delete ","@mutex synchronize ","context idletime= "," timestamp ","context status= ","task last call ","task first ","task last ","task == ","@queue pop "," loop ","Thread  current abort_on_exception= ","Thread  current ","Thread  new ","WorkerContext  new ","WorkerContext  new  thread= ","WorkerContext  new  idletime= ","WorkerContext  new  status= ","@queue pop  last call ","@queue pop  first ","@queue pop  last ","@queue pop  == "]}," Concurrent AbstractThreadPool timestamp":{"type":"method","name":"timestamp","children":[],"call":["Time  now to_i ","Time  now "]}," Concurrent AbstractThreadPool status":{"type":"method","name":"status","children":[],"call":["worker thread status ","worker thread "," delta "," timestamp ","worker idletime ","worker status == ","worker status ","@pool collect ","@mutex synchronize "]}," Concurrent AbstractThreadPool size":{"type":"method","name":"size","children":[],"call":["@pool length ","@state == ","@mutex synchronize "]}," Concurrent AbstractThreadPool kill":{"type":"method","name":"kill","children":[],"call":["Thread  pass ","@terminator set ","Thread  kill ","t thread ","@pool each ","@collector kill ","@collector status ","@mutex synchronize "]}," Concurrent AbstractThreadPool <<":{"type":"method","name":"<<","children":[],"call":[" post "]}," Concurrent AbstractThreadPool wait_for_termination":{"type":"method","name":"wait_for_termination","children":[],"call":["@terminator wait "]}," Concurrent AbstractThreadPool shutdown":{"type":"method","name":"shutdown","children":[],"call":["Thread  pass ","@queue << ","@pool size times ","@pool size ","@terminator set ","@pool empty? ","@collector kill ","@collector status ","@mutex synchronize "]}," Concurrent AbstractThreadPool running?":{"type":"method","name":"running?","children":[],"call":["@state == "]}," Concurrent AbstractThreadPool initialize":{"type":"method","name":"initialize","children":[],"call":["Queue  new ","Event  new ","Mutex  new "," raise ","ArgumentError  new ","@max_threads > ","@max_threads < ","opts [] "]}," Concurrent Running included":{"type":"method","name":"included","children":[{"type":"method","name":"run!","children":[],"asgn":[],"call":["Context  new "," raise ","LifecycleError  new "," mutex synchronize "," mutex "]},{"type":"method","name":"mutex","children":[],"asgn":[null],"call":["Mutex  new "]},{"type":"method","name":"run!","children":[],"asgn":[null,{"type":"local","name":"runner","value":" new "},[" new "]],"call":["Context  new "," new "]}],"call":[]}," Concurrent Running Context initialize":{"type":"method","name":"initialize","children":[],"call":["runner run ","Thread  abort_on_exception= ","Thread  new "," sleep "]}," Concurrent Executor execute_task":{"type":"method","name":"execute_task","children":[],"call":["Thread  kill ","@worker nil? ","@logger call ","@worker join nil? ","@worker join ","@task call ","Thread  current abort_on_exception= ","Thread  current ","Thread  new "]}," Concurrent Executor on_task":{"type":"method","name":"on_task","children":[],"call":[" execute_task "," sleep "]}," Concurrent Executor on_stop":{"type":"method","name":"on_stop","children":[],"call":["Thread  pass ","@monitor wakeup ","@monitor alive? "]}," Concurrent Executor on_run":{"type":"method","name":"on_run","children":[],"call":["Thread  current "]}," Concurrent Executor status":{"type":"method","name":"status","children":[],"call":["@monitor status ","@monitor nil? "]}," Concurrent Executor kill":{"type":"method","name":"kill","children":[],"call":["Thread  kill ","@monitor nil? ","@worker nil? "," mutex synchronize "," mutex "," running? "," stopped_event set "," stopped_event "," kill_execution "," stop_event set "," stop_event "," shutdown? "]}," Concurrent Executor initialize":{"type":"method","name":"initialize","children":[],"call":["opts [] "," raise ","ArgumentError  new "," block_given? "]}," Concurrent Channel receive":{"type":"method","name":"receive","children":[],"call":["@task call ","@task nil? "]}," Concurrent Channel on_error":{"type":"method","name":"on_error","children":[],"call":["@errorback call "]}," Concurrent Channel on_task":{"type":"method","name":"on_task","children":[],"call":[" on_error ","Time  now "," notify_observers "," changed "," receive ","message == ","@queue pop ","@queue pop  == "]}," Concurrent Channel on_stop":{"type":"method","name":"on_stop","children":[],"call":["@queue push ","@queue clear "," before_stop_proc call "," before_stop_proc "]}," Concurrent Channel on_run":{"type":"method","name":"on_run","children":[],"call":["@queue clear "]}," Concurrent Channel Poolbox <<":{"type":"method","name":"<<","children":[],"call":[" post "]}," Concurrent Channel Poolbox post":{"type":"method","name":"post","children":[],"call":["@queue length ","@queue push "]}," Concurrent Channel Poolbox initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent Channel pool":{"type":"method","name":"pool","children":[],"call":[]}," Concurrent Channel <<":{"type":"method","name":"<<","children":[],"call":[" post "]}," Concurrent Channel post":{"type":"method","name":"post","children":[],"call":["@queue length ","@queue push "," running? "]}," Concurrent Channel initialize":{"type":"method","name":"initialize","children":[],"call":["Queue  new "," raise ","ArgumentError  new "," block_given? "]}," Concurrent CachedThreadPool stale_worker?":{"type":"method","name":"stale_worker?","children":[],"call":["context thread kill ","context thread ","@idletime <= "," timestamp - ","context idletime "," timestamp ","context status == ","context status "]}," Concurrent CachedThreadPool dead_worker?":{"type":"method","name":"dead_worker?","children":[],"call":["context thread status ! ","context thread status ","context thread ","context thread status == ","context thread nil? "]}," Concurrent ScheduledTask work":{"type":"method","name":"work","children":[],"call":[" stop "," event set "," event "," delete_observers "," notify_observers "," value ","Time  now "," changed? "," changed ","@task call "," mutex synchronize "," mutex ","@state == "," sleep ","diff > ","(lvasgn :diff\n  (send\n    (send\n      (ivar :@schedule_time) :to_f) :-\n    (send\n      (send\n        (const nil :Time) :now) :to_f))) > ","@schedule_time to_f - ","Time  now to_f ","@schedule_time to_f ","@observers notify_and_delete_observers "," set_state ","SafeTaskExecutor  new execute ","SafeTaskExecutor  new "," compare_and_set_state "," sleep_until_scheduled_time ","@schedule_time to_f -  > ","(lvasgn :@schedule_time to_f - \n  (send\n    (send\n      (ivar :@schedule_time) :to_f) :-\n    (send\n      (send\n        (const nil :Time) :now) :to_f))) > ","(lvasgn :diff\n  (send\n    (send\n      (ivar :@schedule_Time  now ) :to_f) :-\n    (send\n      (send\n        (const nil :Time) :now) :to_f))) > ","@schedule_Time  now  to_f - ","@schedule_Time  now  to_f "," sleep_until_scheduled_Time  now  "]}," Concurrent ScheduledTask add_observer":{"type":"method","name":"add_observer","children":[],"call":["(sym :pending) include? ","@state == ","@observers add_observer "," if_state "," observers add_observer "," observers "]}," Concurrent ScheduledTask cancel":{"type":"method","name":"cancel","children":[],"call":[" event set "," event ","@state == "," mutex synchronize "," mutex "," mutex locked? "," if_state ","@parent send "," complete ","CancelledOperationError  new "," compare_and_set_state "]}," Concurrent ScheduledTask in_progress?":{"type":"method","name":"in_progress?","children":[],"call":["@state == "," state == "," state "," processing? "," deprecated_method "," warn "]}," Concurrent ScheduledTask cancelled?":{"type":"method","name":"cancelled?","children":[],"call":["@state == "," state == "," state "," ns_check_state? "," synchronize "]}," Concurrent ScheduledTask initialize":{"type":"method","name":"initialize","children":[],"call":["@thread abort_on_exception= "," work ","Thread  new "," set_deref_options ","@schedule_time freeze ","now + ","schedule_time to_f "," raise ","ArgumentError  new ","schedule_time to_f <= ","schedule_time dup ","schedule_time <= ","schedule_time is_a? "," block_given? ! "," block_given? ","Time  now "," init_mutex ","CopyOnWriteObserverSet  new "," init_obligation "," calculate_schedule_time! ","SchedulingError  new "," observers= ","CopyOnNotifyObserverSet  new ","TimerSet  calculate_schedule_time ","Concurrent  configuration global_operation_pool ","Concurrent  configuration ","OptionsParser  get_executor_from ","Collection CopyOnNotifyObserverSet  new ","Concurrent  global_io_executor ","Executor  executor_from_options "," get_arguments_from ","opts fetch ","Concurrent  global_timer_set "," ns_set_state "," calculate_delay! "," synchronize ","Options  executor_from_options ","delay to_f ","delay to_f < ","now +  freeze ","schedule_time dup  freeze ","Time  now  + ","Time  Time  now  "]}," Concurrent Dereferenceable mutex":{"type":"method","name":"mutex","children":[],"call":["Mutex  new "]}," Concurrent Dereferenceable value":{"type":"method","name":"value","children":[],"call":["value freeze ","value dup ","@copy_on_deref call "," mutex synchronize "," mutex ","@value nil? "," apply_deref_options "," mutex unlock "," mutex lock ","value freeze  freeze ","value dup  freeze ","@copy_on_deref call  freeze ","value freeze  dup ","value dup  dup ","@copy_on_deref call  dup ","@value freeze  nil? ","@value dup  nil? ","@@copy_on_deref call  nil? "]}," Concurrent Dereferenceable set_deref_options":{"type":"method","name":"set_deref_options","children":[],"call":["(or\n  (or\n    (ivar :@dup_on_deref)\n    (ivar :@freeze_on_deref))\n  (ivar :@copy_on_deref)) ! ","opts [] "," mutex synchronize "," mutex "," mutex unlock "," mutex lock "]}," Concurrent Contract complete":{"type":"method","name":"complete","children":[],"call":[" event set "," event "]}," Concurrent Contract initialize":{"type":"method","name":"initialize","children":[],"call":[" set_deref_options "," init_mutex "]}," Concurrent Postable queue":{"type":"method","name":"queue","children":[],"call":["Queue  new "]}," Concurrent Postable ready?":{"type":"method","name":"ready?","children":[],"call":[" running? ! "," running? "," respond_to? "]}," Concurrent Postable forward":{"type":"method","name":"forward","children":[],"call":[" queue length "," queue "," queue push ","Package  new "," ready? "," raise ","ArgumentError  new ","message empty? "]}," Concurrent Postable post!":{"type":"method","name":"post!","children":[],"call":[" raise ","event set ","result is_a? ","cback pop ","event wait "," queue push ","Package  new "," queue ","Queue  new ","Event  new ","seconds to_f <= ","seconds to_f "," ready? ","ArgumentError  new ","message empty? ","Event  new  set ","cback pop  is_a? ","Queue  new  pop ","Event  new  wait "]}," Concurrent Postable post?":{"type":"method","name":"post?","children":[],"call":[" queue push ","Package  new "," queue ","Contract  new "," ready? "," raise ","ArgumentError  new ","message empty? ","IVar  new "]}," Concurrent Postable <<":{"type":"method","name":"<<","children":[],"call":[" post "]}," Concurrent Postable post":{"type":"method","name":"post","children":[],"call":[" queue length "," queue "," queue push ","Package  new "," ready? "," raise ","ArgumentError  new ","message empty? "]}," Concurrent ScheduledTask on_task":{"type":"method","name":"on_task","children":[],"call":[" stop "," event set "," event "," delete_observers "," notify_observers "," value ","Time  now "," changed? "," changed ","@task call "," mutex synchronize "," mutex ","@state == "," sleep ","diff > ","(lvasgn :diff\n  (send\n    (send\n      (ivar :@schedule_time) :to_f) :-\n    (send\n      (send\n        (const nil :Time) :now) :to_f))) > ","@schedule_time to_f - ","Time  now to_f ","@schedule_time to_f ","@schedule_time to_f -  > ","(lvasgn :@schedule_time to_f - \n  (send\n    (send\n      (ivar :@schedule_time) :to_f) :-\n    (send\n      (send\n        (const nil :Time) :now) :to_f))) > "]}," Concurrent TimerTask timeout_interval=":{"type":"method","name":"timeout_interval=","children":[],"call":[" raise ","ArgumentError  new ","(lvasgn :value\n  (send\n    (lvar :value) :to_f)) <= ","value to_f "," mutex unlock "," mutex "," mutex lock "," synchronize "," warn ","(lvasgn :value to_f \n  (send\n    (lvar :value to_f ) :to_f)) <= ","value to_f  to_f "]}," Concurrent TimerTask execution_interval=":{"type":"method","name":"execution_interval=","children":[],"call":[" raise ","ArgumentError  new ","(lvasgn :value\n  (send\n    (lvar :value) :to_f)) <= ","value to_f "," mutex unlock "," mutex "," mutex lock "," synchronize ","(lvasgn :value to_f \n  (send\n    (lvar :value to_f ) :to_f)) <= ","value to_f  to_f "]}," Concurrent Stoppable before_stop_proc":{"type":"method","name":"before_stop_proc","children":[],"call":[]}," Concurrent Stoppable before_stop":{"type":"method","name":"before_stop","children":[],"call":[" raise ","Runnable LifecycleError  new ","ArgumentError  new "," block_given? "]}," Concurrent Channel act":{"type":"method","name":"act","children":[],"call":["@task call "]}," Concurrent ImmediateExecutor <<":{"type":"method","name":"<<","children":[],"call":[" post "]}," Concurrent ImmediateExecutor post":{"type":"method","name":"post","children":[],"call":["block call ","task call "," raise ","ArgumentError  new "," block_given? "," running? "]}," Concurrent Dereferenceable init_mutex":{"type":"method","name":"init_mutex","children":[],"call":["Mutex  new "]}," Concurrent ThreadLocalVar value=":{"type":"method","name":"value=","children":[],"call":[" set ","value nil? ","LOCALS  set "]}," Concurrent ThreadLocalVar value":{"type":"method","name":"value","children":[],"call":["value == ","value nil? "," get "," default ","LOCALS  fetch "," get  == "," get  nil? "]}," Concurrent ThreadLocalVar initialize":{"type":"method","name":"initialize","children":[],"call":[" allocate_storage ","LOCALS  next_index "," block_given? "," raise "]}," Concurrent ThreadLocalJavaStorage set":{"type":"method","name":"set","children":[],"call":["@var set "]}," Concurrent ThreadLocalJavaStorage get":{"type":"method","name":"get","children":[],"call":["@var get "]}," Concurrent ThreadLocalJavaStorage allocate_storage":{"type":"method","name":"allocate_storage","children":[],"call":[" java lang ThreadLocal new "," java lang ThreadLocal "," java lang "," java "]}," Concurrent ThreadLocalNewStorage set":{"type":"method","name":"set","children":[],"call":["Thread  current thread_variable_set ","Thread  current "]}," Concurrent ThreadLocalNewStorage get":{"type":"method","name":"get","children":[],"call":["Thread  current thread_variable_get ","Thread  current "]}," Concurrent ThreadLocalNewStorage allocate_storage":{"type":"method","name":"allocate_storage","children":[],"call":[" allocate_symbol "]}," Concurrent ThreadLocalOldStorage set":{"type":"method","name":"set","children":[],"call":["Thread  current []= ","Thread  current "]}," Concurrent ThreadLocalOldStorage get":{"type":"method","name":"get","children":[],"call":["Thread  current [] ","Thread  current "]}," Concurrent ThreadLocalOldStorage allocate_storage":{"type":"method","name":"allocate_storage","children":[],"call":[" allocate_symbol "]}," Concurrent ThreadLocalSymbolAllocator allocate_symbol":{"type":"method","name":"allocate_symbol","children":[],"call":["COUNTER  increment "]}," Concurrent ScheduledTask calculate_schedule_time!":{"type":"method","name":"calculate_schedule_time!","children":[],"call":["now + ","schedule_time to_f "," raise ","SchedulingError  new ","schedule_time to_f <= ","schedule_time dup ","schedule_time <= ","schedule_time is_a? "]}," Concurrent ScheduledTask sleep_until_scheduled_time":{"type":"method","name":"sleep_until_scheduled_time","children":[],"call":[" sleep ","diff > ","(lvasgn :diff\n  (send\n    (send\n      (ivar :@schedule_time) :to_f) :-\n    (send\n      (send\n        (const nil :Time) :now) :to_f))) > ","@schedule_time to_f - ","Time  now to_f ","Time  now ","@schedule_time to_f ","@schedule_time to_f -  > ","(lvasgn :@schedule_time to_f - \n  (send\n    (send\n      (ivar :@schedule_time) :to_f) :-\n    (send\n      (send\n        (const nil :Time) :now) :to_f))) > "]}," Concurrent ScheduledTask execute":{"type":"method","name":"execute","children":[],"call":[" work ","Thread  new "," calculate_schedule_time! freeze "," calculate_schedule_time! "," compare_and_set_state ","Concurrent  timer "," method ","@schedule_time to_f - ","Time  now to_f ","Time  now ","@schedule_time to_f ","TimerSet  calculate_schedule_time ","@executor post "," ns_schedule "," synchronize "," calculate_schedule_time! freeze  to_f - ","TimerSet  calculate_schedule_time  to_f - "," calculate_schedule_time! freeze  to_f ","TimerSet  calculate_schedule_time  to_f "]}," Concurrent SafeTaskExecutor execute":{"type":"method","name":"execute","children":[],"call":["@task call ","@mutex synchronize "," synchronize "]}," Concurrent SafeTaskExecutor initialize":{"type":"method","name":"initialize","children":[],"call":["opts fetch ","Mutex  new "," ensure_ivar_visibility! "]}," Concurrent Promise synchronized_set_state!":{"type":"method","name":"synchronized_set_state!","children":[],"call":[" set_state! "," mutex synchronize "," mutex "," mutex unlock "," mutex lock "," synchronize "]}," Concurrent Promise set_state!":{"type":"method","name":"set_state!","children":[],"call":[" event set "," event "," set_state "]}," Concurrent Promise notify_child":{"type":"method","name":"notify_child","children":[],"call":["child on_reject "," if_state ","child on_fulfill "," apply_deref_options "]}," Concurrent Promise set_pending":{"type":"method","name":"set_pending","children":[],"call":["c set_pending ","@children each "," mutex synchronize "," mutex "," synchronize "]}," Concurrent Promise on_success":{"type":"method","name":"on_success","children":[],"call":[" then "," raise ","ArgumentError  new "," block_given? "]}," Concurrent Promise execute":{"type":"method","name":"execute","children":[],"call":["@parent execute "," realize "," set_pending "," compare_and_set_state "," root? "]}," Concurrent Promise reject":{"type":"method","name":"reject","children":[],"call":[]}," Concurrent Promise fulfill":{"type":"method","name":"fulfill","children":[],"call":[]}," Concurrent Obligation if_state":{"type":"method","name":"if_state","children":[],"call":["expected_states include? "," mutex synchronize "," mutex "," raise ","ArgumentError  new "," block_given? "," mutex unlock "," mutex lock "]}," Concurrent Obligation compare_and_set_state":{"type":"method","name":"compare_and_set_state","children":[],"call":["@state == "," mutex synchronize "," mutex "," mutex unlock "," mutex lock "]}," Concurrent Obligation state=":{"type":"method","name":"state=","children":[],"call":[" mutex synchronize "," mutex "," mutex unlock "," mutex lock "]}," Concurrent Obligation set_state":{"type":"method","name":"set_state","children":[],"call":[]}," Concurrent Obligation init_obligation":{"type":"method","name":"init_obligation","children":[],"call":["Event  new "," init_mutex "]}," Concurrent Obligation reason":{"type":"method","name":"reason","children":[],"call":[" mutex synchronize "," mutex "," mutex unlock "," mutex lock "]}," Concurrent Obligation state":{"type":"method","name":"state","children":[],"call":[" mutex synchronize "," mutex "," mutex unlock "," mutex lock "]}," Concurrent Obligation incomplete?":{"type":"method","name":"incomplete?","children":[],"call":["(sym :unscheduled) include? "," state "]}," Concurrent Obligation completed?":{"type":"method","name":"completed?","children":[],"call":["(sym :fulfilled) include? "," state "]}," Concurrent Obligation unscheduled?":{"type":"method","name":"unscheduled?","children":[],"call":[" state == "," state "]}," Concurrent MVar wait_while":{"type":"method","name":"wait_while","children":[],"call":["condition wait ","remaining remaining_time ","remaining can_wait? ","Condition Result  new ","stop - ","Concurrent  monotonic_time ","timeout > ","Concurrent  monotonic_time + ","timeout nil? ","condition wait  condition wait _time ","Condition Result  new  Condition Result  new _time ","condition wait  can_wait? ","Condition Result  new  can_wait? ","Concurrent  monotonic_time +  - ","stop -  > ","stop -  nil? "]}," Concurrent MVar wait_for_empty":{"type":"method","name":"wait_for_empty","children":[],"call":[" unlocked_full? "," wait_while "]}," Concurrent MVar wait_for_full":{"type":"method","name":"wait_for_full","children":[],"call":[" unlocked_empty? "," wait_while "]}," Concurrent MVar unlocked_full?":{"type":"method","name":"unlocked_full?","children":[],"call":[" unlocked_empty? ! "," unlocked_empty? "]}," Concurrent MVar unlocked_empty?":{"type":"method","name":"unlocked_empty?","children":[],"call":["@value == "]}," Concurrent MVar full?":{"type":"method","name":"full?","children":[],"call":[" empty? ! "," empty? "]}," Concurrent MVar empty?":{"type":"method","name":"empty?","children":[],"call":["@value == ","@mutex synchronize "]}," Concurrent MVar modify!":{"type":"method","name":"modify!","children":[],"call":[" apply_deref_options ","@full_condition signal ","@empty_condition signal "," unlocked_empty? ","@mutex synchronize "," raise ","ArgumentError  new "," block_given? "]}," Concurrent MVar set!":{"type":"method","name":"set!","children":[],"call":[" apply_deref_options ","@full_condition signal ","@mutex synchronize "]}," Concurrent MVar try_put!":{"type":"method","name":"try_put!","children":[],"call":["@full_condition signal "," unlocked_empty? ","@mutex synchronize "]}," Concurrent MVar try_take!":{"type":"method","name":"try_take!","children":[],"call":[" apply_deref_options ","@empty_condition signal "," unlocked_full? ","@mutex synchronize "]}," Concurrent MVar modify":{"type":"method","name":"modify","children":[],"call":[" apply_deref_options ","@full_condition signal "," unlocked_full? "," wait_for_full ","@mutex synchronize "," raise ","ArgumentError  new "," block_given? "]}," Concurrent MVar put":{"type":"method","name":"put","children":[],"call":[" apply_deref_options ","@full_condition signal "," unlocked_empty? "," wait_for_empty ","@mutex synchronize "]}," Concurrent MVar take":{"type":"method","name":"take","children":[],"call":[" apply_deref_options ","@empty_condition signal "," unlocked_full? "," wait_for_full ","@mutex synchronize "]}," Concurrent MVar initialize":{"type":"method","name":"initialize","children":[],"call":[" set_deref_options ","Condition  new ","Mutex  new ","ConditionVariable  new "]}," Concurrent IVar complete":{"type":"method","name":"complete","children":[],"call":[" value ","@observers notify_and_delete_observers ","Time  now "," event set "," event "," set_state "," raise ","MultipleAssignmentError  new ","(sym :fulfilled) include? "," mutex synchronize "," mutex "," observers notify_and_delete_observers "," observers "," notify_observers "," complete_without_notification "]}," Concurrent IVar fail":{"type":"method","name":"fail","children":[],"call":[" complete "]}," Concurrent IVar set":{"type":"method","name":"set","children":[],"call":[" complete "," notify_observers "," reason "," value "," complete_without_notification "," block_given? "," raise "," compare_and_set_state "," check_for_block_or_value! "]}," Concurrent IVar add_observer":{"type":"method","name":"add_observer","children":[],"call":["observer send "," reason "," value ","Time  now ","@observers add_observer "," event set? "," event "," mutex synchronize "," mutex "," observers add_observer "," observers "," raise ","ArgumentError  new "," synchronize "]}," Concurrent IVar initialize":{"type":"method","name":"initialize","children":[],"call":[" set ","value == "," set_deref_options ","CopyOnWriteObserverSet  new "," init_obligation "," observers= "," ns_initialize "," synchronize "," raise ","ArgumentError  new "," block_given? ","value != "]}," Concurrent Future execute":{"type":"method","name":"execute","children":[],"call":[" work ","Future  thread_pool post ","Future  thread_pool "," compare_and_set_state ","@executor post "," safe_execute "]}," Concurrent Dereferenceable apply_deref_options":{"type":"method","name":"apply_deref_options","children":[],"call":["value freeze ","value dup ","@copy_on_deref call ","value nil? ","value freeze  freeze ","value dup  freeze ","@copy_on_deref call  freeze ","value freeze  dup ","value dup  dup ","@copy_on_deref call  dup ","value freeze  nil? ","value dup  nil? ","@copy_on_deref call  nil? "]}," Concurrent dataflow":{"type":"method","name":"dataflow","children":[],"call":["input add_observer ","inputs each ","result execute ","DependencyCounter  new ","inputs size ","inputs empty? ","block call ","input value ","inputs map ","Future  new "," raise ","ArgumentError  new ","input is_a? ","inputs all? "," block_given? "," dataflow_with ","Concurrent  configuration global_task_pool ","Concurrent  configuration ","Concurrent  configuration global_operation_pool ","Concurrent  global_io_executor "]}," Concurrent DependencyCounter update":{"type":"method","name":"update","children":[],"call":["@block call ","@counter decrement == ","@counter decrement "]}," Concurrent DependencyCounter initialize":{"type":"method","name":"initialize","children":[],"call":["AtomicFixnum  new "]}," Concurrent CountDownLatch count":{"type":"method","name":"count","children":[],"call":["@mutex synchronize "]}," Concurrent CountDownLatch count_down":{"type":"method","name":"count_down","children":[],"call":["@condition broadcast ","@count == ","@count > ","@mutex synchronize "]}," Concurrent CountDownLatch wait":{"type":"method","name":"wait","children":[],"call":["@count == ","@condition wait ","remaining remaining_time ","remaining can_wait? ","@count > ","Condition Result  new ","@mutex synchronize ","@condition wait  @condition wait _time ","Condition Result  new  Condition Result  new _time ","@condition wait  can_wait? ","Condition Result  new  can_wait? "]}," Concurrent CountDownLatch initialize":{"type":"method","name":"initialize","children":[],"call":["Condition  new ","Mutex  new "," raise ","ArgumentError  new ","count >= ","count is_a? "]}," Concurrent CopyOnWriteObserverSet clear_observers_and_return_old":{"type":"method","name":"clear_observers_and_return_old","children":[],"call":["@mutex synchronize ","@mutex unlock ","@mutex lock "]}," Concurrent CopyOnWriteObserverSet observers=":{"type":"method","name":"observers=","children":[],"call":["@mutex synchronize ","@mutex unlock ","@mutex lock "]}," Concurrent CopyOnWriteObserverSet observers":{"type":"method","name":"observers","children":[],"call":["@mutex synchronize ","@mutex unlock ","@mutex lock "]}," Concurrent CopyOnWriteObserverSet notify_to":{"type":"method","name":"notify_to","children":[],"call":["observer send "," block_given? ","observers each "," raise ","ArgumentError  new ","args empty? ! ","args empty? "]}," Concurrent CopyOnWriteObserverSet notify_and_delete_observers":{"type":"method","name":"notify_and_delete_observers","children":[],"call":[" notify_to "," clear_observers_and_return_old "," clear_observers_and_return_ clear_observers_and_return_old  "]}," Concurrent CopyOnWriteObserverSet notify_observers":{"type":"method","name":"notify_observers","children":[],"call":[" notify_to "," observers "]}," Concurrent CopyOnWriteObserverSet count_observers":{"type":"method","name":"count_observers","children":[],"call":[" observers count "," observers "]}," Concurrent CopyOnWriteObserverSet delete_observers":{"type":"method","name":"delete_observers","children":[],"call":[" observers= "]}," Concurrent CopyOnWriteObserverSet delete_observer":{"type":"method","name":"delete_observer","children":[],"call":["new_observers delete ","@observers dup ","@mutex synchronize ","@mutex unlock ","@mutex lock ","@observers dup  delete "]}," Concurrent CopyOnWriteObserverSet add_observer":{"type":"method","name":"add_observer","children":[],"call":["new_observers []= ","@observers dup ","@mutex synchronize ","@mutex unlock ","@mutex lock "," raise ","ArgumentError  new ","block nil? ","observer nil? ","@observers dup  []= "]}," Concurrent CopyOnWriteObserverSet initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "]}," Concurrent CopyOnNotifyObserverSet notify_to":{"type":"method","name":"notify_to","children":[],"call":["observer send "," block_given? ","observers each "," raise ","ArgumentError  new ","args empty? ! ","args empty? "]}," Concurrent CopyOnNotifyObserverSet duplicate_and_clear_observers":{"type":"method","name":"duplicate_and_clear_observers","children":[],"call":["@observers clear ","@observers dup ","@mutex synchronize ","@mutex unlock ","@mutex lock ","@@observers dup  clear ","@@observers dup  dup "]}," Concurrent CopyOnNotifyObserverSet notify_and_delete_observers":{"type":"method","name":"notify_and_delete_observers","children":[],"call":[" notify_to "," duplicate_and_clear_observers "," duplicate_and_clear_ duplicate_and_clear_observers  "]}," Concurrent CopyOnNotifyObserverSet notify_observers":{"type":"method","name":"notify_observers","children":[],"call":[" notify_to ","@observers dup ","@mutex synchronize "," duplicate_observers ","@ duplicate_observers  dup "," duplicate_ duplicate_observers  "]}," Concurrent CopyOnNotifyObserverSet count_observers":{"type":"method","name":"count_observers","children":[],"call":["@observers count ","@mutex synchronize ","@mutex unlock ","@mutex lock "]}," Concurrent CopyOnNotifyObserverSet delete_observers":{"type":"method","name":"delete_observers","children":[],"call":["@observers clear ","@mutex synchronize ","@mutex unlock ","@mutex lock "]}," Concurrent CopyOnNotifyObserverSet delete_observer":{"type":"method","name":"delete_observer","children":[],"call":["@observers delete ","@mutex synchronize ","@mutex unlock ","@mutex lock "]}," Concurrent CopyOnNotifyObserverSet add_observer":{"type":"method","name":"add_observer","children":[],"call":["@observers []= ","@mutex synchronize ","@mutex unlock ","@mutex lock "," raise ","ArgumentError  new ","block nil? ","observer nil? "]}," Concurrent CopyOnNotifyObserverSet initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "]}," Concurrent Condition broadcast":{"type":"method","name":"broadcast","children":[],"call":["@condition broadcast "]}," Concurrent Condition signal":{"type":"method","name":"signal","children":[],"call":["@condition signal "]}," Concurrent Condition wait":{"type":"method","name":"wait","children":[],"call":["Result  new ","start_time + - ","Time  now to_f ","Time  now ","start_time + ","timeout nil? ","@condition wait ","Concurrent  monotonic_time ","Time  now to_f  + - ","Concurrent  monotonic_time  + - ","Time  now to_f  + ","Concurrent  monotonic_time  + "]}," Concurrent Condition initialize":{"type":"method","name":"initialize","children":[],"call":["ConditionVariable  new "," deprecated "]}," Concurrent Condition Result timed_out?":{"type":"method","name":"timed_out?","children":[],"call":["@remaining_time <= ","@remaining_time != "]}," Concurrent Condition Result woken_up?":{"type":"method","name":"woken_up?","children":[],"call":["@remaining_time > ","@remaining_time nil? "]}," Concurrent Condition Result initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent AtomicFixnum initialize":{"type":"method","name":"initialize","children":[],"call":[" allocate_storage "," raise ","ArgumentError  new ","init is_a? "]}," Concurrent JavaAtomicFixnum compare_and_set":{"type":"method","name":"compare_and_set","children":[],"call":["@atomic compare_and_set "]}," Concurrent JavaAtomicFixnum decrement":{"type":"method","name":"decrement","children":[],"call":["@atomic decrement_and_get "]}," Concurrent JavaAtomicFixnum increment":{"type":"method","name":"increment","children":[],"call":["@atomic increment_and_get "]}," Concurrent JavaAtomicFixnum value=":{"type":"method","name":"value=","children":[],"call":["@atomic set "," raise ","ArgumentError  new ","value is_a? "]}," Concurrent JavaAtomicFixnum value":{"type":"method","name":"value","children":[],"call":["@atomic get "]}," Concurrent JavaAtomicFixnum allocate_storage":{"type":"method","name":"allocate_storage","children":[],"call":[" java util concurrent atomic AtomicLong new "," java util concurrent atomic AtomicLong "," java util concurrent atomic "," java util concurrent "," java util "," java "]}," Concurrent MutexAtomicFixnum compare_and_set":{"type":"method","name":"compare_and_set","children":[],"call":["@value == ","@mutex synchronize ","@mutex unlock ","@mutex lock "," synchronize ","update to_i ","expect to_i ","update to_i  == "]}," Concurrent MutexAtomicFixnum decrement":{"type":"method","name":"decrement","children":[],"call":["@mutex synchronize ","@mutex unlock ","@mutex lock "," ns_set ","@value - "," synchronize ","delta to_i "]}," Concurrent MutexAtomicFixnum increment":{"type":"method","name":"increment","children":[],"call":["@mutex synchronize ","@mutex unlock ","@mutex lock "," ns_set ","@value + "," synchronize ","delta to_i "]}," Concurrent MutexAtomicFixnum value=":{"type":"method","name":"value=","children":[],"call":["@mutex synchronize "," raise ","ArgumentError  new ","value is_a? ","@mutex unlock ","@mutex lock "," ns_set "," synchronize "]}," Concurrent MutexAtomicFixnum value":{"type":"method","name":"value","children":[],"call":["@mutex synchronize ","@mutex unlock ","@mutex lock "," synchronize "]}," Concurrent MutexAtomicFixnum allocate_storage":{"type":"method","name":"allocate_storage","children":[],"call":["Mutex  new "]}," Concurrent Agent delete_observer":{"type":"method","name":"delete_observer","children":[],"call":["@observers delete_observer "]}," Concurrent Agent add_observer":{"type":"method","name":"add_observer","children":[],"call":["@observers add_observer "]}," Concurrent timer":{"type":"method","name":"timer","children":[],"call":["Concurrent  configuration global_timer_set post ","Concurrent  configuration global_timer_set ","Concurrent  configuration "," raise ","ArgumentError  new ","seconds < "," block_given? ","Concurrent  global_timer_set post ","Concurrent  global_timer_set "," deprecated_method "]}," Concurrent physical_processor_count":{"type":"method","name":"physical_processor_count","children":[],"call":[" processor_count ","ppc > ","result_set to_enum collect reduce ","result_set to_enum collect ","result_set to_enum ","WIN32OLE  connect ExecQuery ","WIN32OLE  connect "," require ","cores count ","cores []= ","cores [] ! ","cores [] ","phy + + ","ln [] ","phy + ","ln start_with? ","IO  read scan ","IO  read ","IO  popen read to_i ","IO  popen read ","IO  popen ","RbConfig CONFIG  [] ","WIN32OLE  connect ExecQuery  to_enum collect reduce ","WIN32OLE  connect ExecQuery  to_enum collect ","WIN32OLE  connect ExecQuery  to_enum ","ln []  + + ","ln []  + "]}," Concurrent processor_count":{"type":"method","name":"processor_count","children":[],"call":["IO  popen read to_i ","IO  popen read ","IO  popen ","File  executable? ","os_name =~ ","IO  popen read count ","out read scan size ","out read scan ","out read ","IO  popen read scan size ","IO  popen read scan ","IO  read scan size ","IO  read scan ","IO  read ","File  readable? ","result to_enum collect reduce ","result to_enum collect ","result to_enum ","WIN32OLE  connect ExecQuery ","WIN32OLE  connect "," require ","RbConfig CONFIG  [] "," java lang Runtime getRuntime availableProcessors "," java lang Runtime getRuntime "," java lang Runtime "," java lang "," java ","RUBY_PLATFORM  == ","RbConfig CONFIG  []  =~ ","WIN32OLE  connect ExecQuery  to_enum collect reduce ","WIN32OLE  connect ExecQuery  to_enum collect ","WIN32OLE  connect ExecQuery  to_enum "]}," Concurrent ProcessorCounter compute_physical_processor_count":{"type":"method","name":"compute_physical_processor_count","children":[],"call":[" processor_count ","ppc > ","result_set to_enum collect reduce ","result_set to_enum collect ","result_set to_enum ","WIN32OLE  connect ExecQuery ","WIN32OLE  connect "," require ","cores count ","cores []= ","cores [] ! ","cores [] ","phy + + ","ln [] ","phy + ","ln start_with? ","IO  read scan ","IO  read ","IO  popen read to_i ","IO  popen read ","IO  popen ","RbConfig CONFIG  [] ","WIN32OLE  connect ExecQuery  to_enum collect reduce ","WIN32OLE  connect ExecQuery  to_enum collect ","WIN32OLE  connect ExecQuery  to_enum ","ln []  + + ","ln []  + "]}," Concurrent ProcessorCounter compute_processor_count":{"type":"method","name":"compute_processor_count","children":[],"call":["IO  popen read to_i ","IO  popen read ","IO  popen ","File  executable? ","os_name =~ ","IO  popen read count ","out read scan size ","out read scan ","out read ","IO  popen read scan size ","IO  popen read scan ","IO  read scan size ","IO  read scan ","IO  read ","File  readable? ","result to_enum collect reduce ","result to_enum collect ","result to_enum ","WIN32OLE  connect ExecQuery ","WIN32OLE  connect "," require ","RbConfig CONFIG  [] "," java lang Runtime getRuntime availableProcessors "," java lang Runtime getRuntime "," java lang Runtime "," java lang "," java ","RUBY_PLATFORM  == ","RbConfig CONFIG  []  =~ ","WIN32OLE  connect ExecQuery  to_enum collect reduce ","WIN32OLE  connect ExecQuery  to_enum collect ","WIN32OLE  connect ExecQuery  to_enum "]}," Concurrent ProcessorCounter physical_processor_count":{"type":"method","name":"physical_processor_count","children":[],"call":["@physical_processor_count value "]}," Concurrent ProcessorCounter processor_count":{"type":"method","name":"processor_count","children":[],"call":["@processor_count value "]}," Concurrent ProcessorCounter initialize":{"type":"method","name":"initialize","children":[],"call":[" compute_physical_processor_count ","Delay  new "," compute_processor_count ","ImmediateExecutor  new "]}," Concurrent Transaction current=":{"type":"method","name":"current=","children":[],"call":[]}," Concurrent Transaction current":{"type":"method","name":"current","children":[],"call":[]}," Concurrent Transaction unlock":{"type":"method","name":"unlock","children":[],"call":["tvar unsafe_lock unlock ","tvar unsafe_lock ","@write_set each ","@write_log each_key ","@open_tvars each_key "]}," Concurrent Transaction valid?":{"type":"method","name":"valid?","children":[],"call":["log_entry tvar unsafe_version > ","log_entry version ","log_entry tvar unsafe_version ","log_entry tvar ","@write_set include? ","@read_log each ","@write_log has_key? "]}," Concurrent Transaction commit":{"type":"method","name":"commit","children":[],"call":[" unlock ","tvar unsafe_increment_version ","@write_set each "," valid? ","tvar unsafe_value= ","@write_log each_pair ","entry value ","entry modified ","@open_tvars each "]}," Concurrent Transaction abort":{"type":"method","name":"abort","children":[],"call":[" unlock ","entry tvar unsafe_value= ","entry value ","entry tvar ","@undo_log each "]}," Concurrent Transaction write":{"type":"method","name":"write","children":[],"call":["tvar unsafe_value= ","@undo_log push ","UndoLogEntry  new ","tvar unsafe_value ","Concurrent  abort_transaction ","tvar unsafe_version > ","log_entry version ","tvar unsafe_version ","log_entry tvar == ","log_entry tvar ","@read_log each ","@write_set add ","tvar unsafe_lock try_lock ","tvar unsafe_lock ","@write_set include? ","@write_log []= ","@write_log has_key? ","entry value= ","entry modified= "," open ","log_ open  version ","log_ open  tvar == ","log_ open  tvar "," open  value= "," open  modified= "]}," Concurrent Transaction read":{"type":"method","name":"read","children":[],"call":["tvar unsafe_value ","@read_log push ","ReadLogEntry  new ","tvar unsafe_version ","Concurrent  abort_transaction "," valid? ","@write_log [] ","@write_log has_key? ","entry value "," open "," open  value "]}," Concurrent Transaction initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new "]}," Concurrent abort_transaction":{"type":"method","name":"abort_transaction","children":[],"call":[" raise ","Transaction AbortError  new ","AbortError  new "]}," Concurrent atomically":{"type":"method","name":"atomically","children":[],"call":["Transaction  current= ","transaction commit ","result != "," throw ","transaction abort ","Transaction  new "," loop ","transaction nil? ","Transaction  current "," raise ","ArgumentError  new "," block_given? ","Transaction  new  commit ","Transaction  current  commit ","Transaction  new  abort ","Transaction  current  abort ","Transaction  new  nil? ","Transaction  current  nil? "]}," Concurrent TVar unsafe_lock":{"type":"method","name":"unsafe_lock","children":[],"call":[]}," Concurrent TVar unsafe_increment_version":{"type":"method","name":"unsafe_increment_version","children":[],"call":[]}," Concurrent TVar unsafe_version":{"type":"method","name":"unsafe_version","children":[],"call":[]}," Concurrent TVar unsafe_value=":{"type":"method","name":"unsafe_value=","children":[],"call":[]}," Concurrent TVar unsafe_value":{"type":"method","name":"unsafe_value","children":[],"call":[]}," Concurrent TVar value=":{"type":"method","name":"value=","children":[],"call":["Transaction  current write ","Transaction  current ","Concurrent  atomically "]}," Concurrent TVar value":{"type":"method","name":"value","children":[],"call":["Transaction  current read ","Transaction  current ","Concurrent  atomically "]}," Concurrent TVar initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "]}," Concurrent TimerTask deprecated":{"type":"method","name":"deprecated","children":[],"call":[" send "," warn "]}," Concurrent TimerTask timeout_task":{"type":"method","name":"timeout_task","children":[],"call":[" observers notify_observers ","Concurrent TimeoutError  new ","Time  now "," observers "," schedule_next_task "," value= "," value ","completion try? ","@running true? "]}," Concurrent TimerTask schedule_next_task":{"type":"method","name":"schedule_next_task","children":[],"call":["Concurrent  timer "," method ","Concurrent Event  new ","ScheduledTask  execute "]}," Concurrent TimerTask kill_execution":{"type":"method","name":"kill_execution","children":[],"call":["@running make_false "]}," Concurrent TimerTask shutdown_execution":{"type":"method","name":"shutdown_execution","children":[],"call":["@running make_false "]}," Concurrent TimerTask run":{"type":"method","name":"run","children":[],"call":[" wait_for_termination "," execute "," raise ","Concurrent Runnable LifecycleError  new ","@running true? "]}," Concurrent TimerTask run!":{"type":"method","name":"run!","children":[],"call":[" deprecated "]}," Concurrent TimerTask cancel":{"type":"method","name":"cancel","children":[],"call":[" deprecated "]}," Concurrent TimerTask stop":{"type":"method","name":"stop","children":[],"call":[" deprecated "]}," Concurrent TimerTask terminate":{"type":"method","name":"terminate","children":[],"call":[" deprecated "]}," Concurrent TimerTask timeout_interval":{"type":"method","name":"timeout_interval","children":[],"call":[" mutex unlock "," mutex "," mutex lock "," synchronize "," warn "]}," Concurrent TimerTask execution_interval":{"type":"method","name":"execution_interval","children":[],"call":[" mutex unlock "," mutex "," mutex lock "," synchronize "]}," Concurrent TimerTask execute":{"type":"method","name":"execute","children":[],"call":[" schedule_next_task ","@running make_true ","@running false? "," mutex synchronize "," mutex "," synchronize "]}," Concurrent TimerTask running?":{"type":"method","name":"running?","children":[],"call":["@running true? "]}," Concurrent ScheduledTask process_task":{"type":"method","name":"process_task","children":[],"call":[" value "," observers notify_and_delete_observers "," observers ","Time  now "," event set "," event "," set_state "," mutex synchronize "," mutex ","SafeTaskExecutor  new execute ","SafeTaskExecutor  new "," compare_and_set_state "," safe_execute "]}," Concurrent OptionsParser get_operation_executor_from":{"type":"method","name":"get_operation_executor_from","children":[],"call":["Concurrent  configuration global_operation_pool ","Concurrent  configuration ","opts [] "]}," Concurrent OptionsParser get_task_executor_from":{"type":"method","name":"get_task_executor_from","children":[],"call":["Concurrent  configuration global_task_pool ","Concurrent  configuration ","opts [] "]}," Concurrent OptionsParser get_executor_from":{"type":"method","name":"get_executor_from","children":[],"call":["Concurrent  configuration global_task_pool ","Concurrent  configuration ","Concurrent  configuration global_operation_pool ","opts [] == ","opts [] "]}," Concurrent Observable count_observers":{"type":"method","name":"count_observers","children":[],"call":[" observers count_observers "," observers "]}," Concurrent Observable delete_observers":{"type":"method","name":"delete_observers","children":[],"call":[" observers delete_observers "," observers "]}," Concurrent Observable delete_observer":{"type":"method","name":"delete_observer","children":[],"call":[" observers delete_observer "," observers "]}," Concurrent Observable with_observer":{"type":"method","name":"with_observer","children":[],"call":[" add_observer "]}," Concurrent Observable add_observer":{"type":"method","name":"add_observer","children":[],"call":[" observers add_observer "," observers "]}," Concurrent Obligation exception":{"type":"method","name":"exception","children":[],"call":[" reason exception "," reason "," raise "," rejected? "]}," Concurrent Obligation value!":{"type":"method","name":"value!","children":[],"call":[" deref "," raise "," rejected? "," wait "]}," Concurrent Obligation no_error!":{"type":"method","name":"no_error!","children":[],"call":[" raise "," rejected? "," wait tap "," wait "]}," Concurrent Obligation wait":{"type":"method","name":"wait","children":[],"call":[" event wait "," event "," incomplete? ","timeout != "]}," Concurrent Logging log":{"type":"method","name":"log","children":[],"call":["(or\n  (ivar :@logger)\n  (send\n    (send\n      (const nil :Concurrent) :configuration) :logger)) call ","Concurrent  configuration logger ","Concurrent  configuration ","$stderr puts ","(str \"`Concurrent.configuration.logger` failed to log \") + ","error backtrace join ","error backtrace ","error class ","error message "]}," Concurrent TimerSet process_tasks":{"type":"method","name":"process_tasks","children":[],"call":["@condition wait ","(lvar :interval) min "," mutex "," mutex synchronize ","@queue pop ","@task_executor post ","task op ","task args ","interval <= ","task time - ","Time  now to_f ","Time  now ","task time ","@queue peek ","@queue empty? "," loop ","(lvar :diff) min ","task process_task ","task executor post ","task executor "," synchronize ","diff <= ","task schedule_time - ","task schedule_time ","Concurrent  monotonic_time ","@condition reset ","(lvar :task time - ) min ","@@queue peek _executor post ","@queue peek  op ","@queue peek  args ","task time -  <= ","@queue peek  time - ","Time  Concurrent  monotonic_time  to_f ","Time  Concurrent  monotonic_time  ","@queue peek  time ","(lvar :task schedule_time - ) min ","@queue peek  process_@queue peek  ","@queue peek  executor post ","@queue peek  executor ","task schedule_time -  <= ","@queue peek  schedule_time - ","@queue peek  schedule_time "]}," Concurrent TimerSet shutdown_execution":{"type":"method","name":"shutdown_execution","children":[],"call":[" stopped_event set "," stopped_event ","@timer_executor kill ","@queue clear "]}," Concurrent TimerSet <=>":{"type":"method","name":"<=>","children":[],"call":[" time <=> ","other time "," time "]}," Concurrent TimerSet calculate_schedule_time":{"type":"method","name":"calculate_schedule_time","children":[],"call":["Time  now "]}," Concurrent TimerSet post":{"type":"method","name":"post","children":[],"call":["@timer_executor post "," method ","@queue push ","Task  new ","@task_executor post ","(send\n  (lvar :time) :-\n  (send\n    (send\n      (const nil :Time) :now) :to_f)) <= ","time - ","Time  now to_f ","Time  now "," running? "," mutex synchronize "," mutex "," raise ","ArgumentError  new "," block_given? ","TimerSet  calculate_schedule_time to_f ","TimerSet  calculate_schedule_time ","@condition signal ","task unscheduled? ","ScheduledTask  execute ","@TimerSet  calculate_schedule_time to_f r_executor post ","@ScheduledTask  execute _executor post ","(send\n  (lvar :TimerSet  calculate_schedule_time to_f ) :-\n  (send\n    (send\n      (const nil :Time) :now) :to_f)) <= ","TimerSet  calculate_schedule_time to_f  - ","TimerSet  calculate_schedule_TimerSet  calculate_schedule_time to_f  to_f ","TimerSet  calculate_schedule_TimerSet  calculate_schedule_time to_f  ","ScheduledTask  execute  unscheduled? "]}," Concurrent TimerSet initialize":{"type":"method","name":"initialize","children":[],"call":[" init_executor ","Condition  new ","SingleThreadExecutor  new ","OptionsParser  get_executor_from ","PriorityQueue  new ","Concurrent  configuration global_task_pool ","Concurrent  configuration "]}," Concurrent RubyThreadPoolWorker run":{"type":"method","name":"run","children":[],"call":["@parent on_end_task ","Time  now to_f ","Time  now "," log ","task last call ","task first ","task last ","@parent on_worker_exit ","task == ","@queue pop "," loop "," raise ","StandardError  new ","@thread nil? ","@mutex synchronize ","@parent on_end_@queue pop  ","@queue pop  last call ","@queue pop  first ","@queue pop  last ","@queue pop  == "]}," Concurrent RubyThreadPoolWorker kill":{"type":"method","name":"kill","children":[],"call":["Thread  kill ","@thread nil? ","@mutex synchronize "]}," Concurrent RubyThreadPoolWorker status":{"type":"method","name":"status","children":[],"call":["@thread status ","@thread nil? ","@mutex synchronize "]}," Concurrent RubyThreadPoolWorker last_activity":{"type":"method","name":"last_activity","children":[],"call":["@mutex synchronize "]}," Concurrent RubyThreadPoolWorker dead?":{"type":"method","name":"dead?","children":[],"call":["@thread alive? ! ","@thread alive? ","@thread nil? ","@mutex synchronize "]}," Concurrent RubyThreadPoolWorker initialize":{"type":"method","name":"initialize","children":[],"call":["Time  now to_f ","Time  now ","Mutex  new "]}," Concurrent RubyThreadPoolExecutor create_worker_thread":{"type":"method","name":"create_worker_thread","children":[],"call":["parent on_worker_exit ","worker run ","Thread  current abort_on_exception= ","Thread  current ","Thread  new ","RubyThreadPoolWorker  new "]}," Concurrent RubyThreadPoolExecutor drain_pool":{"type":"method","name":"drain_pool","children":[],"call":["@pool clear ","worker kill ","@pool each "]}," Concurrent RubyThreadPoolExecutor prune_pool":{"type":"method","name":"prune_pool","children":[],"call":["Time  now to_f ","Time  now ","Time  now to_f - > ","worker last_activity ","Time  now to_f - ","@idletime == ","worker dead? ","@pool delete_if ","Time  now to_f - >= ","@queue << ","(send\n  (ivar :@pool) :select) each ","@idletime != ","@pool select "," ns_prune_pool "," synchronize "]}," Concurrent RubyThreadPoolExecutor handle_overflow":{"type":"method","name":"handle_overflow","children":[],"call":[" log "," raise "]}," Concurrent RubyThreadPoolExecutor ensure_capacity?":{"type":"method","name":"ensure_capacity?","children":[],"call":["(ivar :@largest_length) max ","@pool length ","additional > ","@pool << "," create_worker_thread ","additional times ","@queue size < ","@queue size ","@max_queue == ","@max_length == ","@pool size < ","@pool size ","@min_length == ","@pool size == ","@queue num_waiting >= ","@queue num_waiting ","@queue empty? ","@min_length - ","(ivar :(ivar :@largest_length) max ) max ","@min_length -  > ","@min_length -  times "]}," Concurrent RubyThreadPoolExecutor kill_execution":{"type":"method","name":"kill_execution","children":[],"call":[" drain_pool ","@queue clear "]}," Concurrent RubyThreadPoolExecutor shutdown_execution":{"type":"method","name":"shutdown_execution","children":[],"call":["@queue << ","@pool length times ","@pool length "," stopped_event set "," stopped_event ","@pool empty? ","@queue clear "]}," Concurrent RubyThreadPoolExecutor execute":{"type":"method","name":"execute","children":[],"call":[" handle_overflow ","@queue length >= ","@queue length ","@max_queue != ","@queue << "," ensure_capacity? "," prune_pool "," handle_fallback "]}," Concurrent RubyThreadPoolExecutor on_worker_exit":{"type":"method","name":"on_worker_exit","children":[],"call":[" stopped_event set "," stopped_event "," stop_event set "," stop_event "," running? ! "," running? ","@pool empty? ","@pool delete "," mutex synchronize "," mutex ","@terminator set ","@state != ","@mutex synchronize "]}," Concurrent RubyThreadPoolExecutor on_end_task":{"type":"method","name":"on_end_task","children":[],"call":[" running? "," mutex synchronize "," mutex ","@state == ","@mutex synchronize "]}," Concurrent RubyThreadPoolExecutor status":{"type":"method","name":"status","children":[],"call":["worker status ","@pool collect "," mutex synchronize "," mutex "," warn ","@mutex synchronize "]}," Concurrent RubyThreadPoolExecutor remaining_capacity":{"type":"method","name":"remaining_capacity","children":[],"call":["@max_queue - ","@queue length ","@max_queue == "," mutex synchronize "," mutex ","@mutex synchronize "," ns_limited_queue? "," synchronize "]}," Concurrent RubyThreadPoolExecutor queue_length":{"type":"method","name":"queue_length","children":[],"call":["@queue length "," running? "," mutex synchronize "," mutex "," synchronize "]}," Concurrent RubyThreadPoolExecutor length":{"type":"method","name":"length","children":[],"call":["@pool length "," running? "," mutex synchronize "," mutex ","@state != ","@mutex synchronize "," synchronize "]}," Concurrent RubyThreadPoolExecutor can_overflow?":{"type":"method","name":"can_overflow?","children":[],"call":["@max_queue != "," ns_limited_queue? "," synchronize "]}," Concurrent RubyThreadPoolExecutor initialize":{"type":"method","name":"initialize","children":[],"call":["Time  now to_f - ","(float 1.0) max ","@gc_interval * ","Time  now to_f ","Time  now ","opts fetch to_i ","opts fetch ","Queue  new "," init_executor "," raise ","ArgumentError  new "," overflow_policy ","OVERFLOW_POLICIES  include? ","@min_length < ","@max_length <= ","Mutex  new ","Event  new "," min_length > "," max_length "," min_length "," fallback_policy ","FALLBACK_POLICIES  include? "," warn ","opts has_key? ","opts fetch to_i  * ","opts fetch to_i  < ","opts fetch to_i  <= "]}," Concurrent RubySingleThreadExecutor work":{"type":"method","name":"work","children":[],"call":[" stopped_event set "," stopped_event "," log ","task last call ","task first ","task last ","task == ","@queue pop "," loop ","@queue pop  last call ","@queue pop  first ","@queue pop  last ","@queue pop  == "]}," Concurrent RubySingleThreadExecutor new_worker_thread":{"type":"method","name":"new_worker_thread","children":[],"call":[" work ","Thread  current abort_on_exception= ","Thread  current ","Thread  new "]}," Concurrent RubySingleThreadExecutor supervise":{"type":"method","name":"supervise","children":[],"call":[" new_worker_thread "," alive? "]}," Concurrent RubySingleThreadExecutor alive?":{"type":"method","name":"alive?","children":[],"call":["@thread alive? "]}," Concurrent RubySingleThreadExecutor kill_execution":{"type":"method","name":"kill_execution","children":[],"call":["@thread kill "," alive? ","@queue clear "]}," Concurrent RubySingleThreadExecutor shutdown_execution":{"type":"method","name":"shutdown_execution","children":[],"call":[" stopped_event set "," stopped_event "," alive? ","@queue << "]}," Concurrent RubySingleThreadExecutor execute":{"type":"method","name":"execute","children":[],"call":["@queue << "," supervise "]}," Concurrent RubySingleThreadExecutor initialize":{"type":"method","name":"initialize","children":[],"call":[" init_executor ","Queue  new "," raise ","ArgumentError  new ","FALLBACK_POLICIES  include? ","opts fetch "]}," Concurrent RubyFixedThreadPool initialize":{"type":"method","name":"initialize","children":[],"call":["opts merge "," raise ","ArgumentError  new ","OVERFLOW_POLICIES  include? ","num_threads < ","opts fetch ","(pair\n  (sym :min_threads)\n  (lvar :num_threads)) merge ","FALLBACK_POLICIES  include? ","defaults merge merge ","defaults merge ","num_threads to_i < ","num_threads to_i ","opts merge  merge ","(pair\n  (sym :min_threads)\n  (lvar :num_threads)) merge  merge ","opts merge  fetch ","(pair\n  (sym :min_threads)\n  (lvar :num_threads)) merge  fetch "]}," Concurrent RubyCachedThreadPool initialize":{"type":"method","name":"initialize","children":[],"call":["opts merge "," raise ","ArgumentError  new ","OVERFLOW_POLICIES  include? ","opts fetch ","max_length <= ","idletime <= ","opts fetch to_i ","FALLBACK_POLICIES  include? ","defaults merge merge ","defaults merge ","opts merge  merge ","opts merge  fetch ","opts fetch to_i  <= ","opts merge  fetch to_i "]}," Concurrent PerThreadExecutor <<":{"type":"method","name":"<<","children":[],"call":["PerThreadExecutor  post "," post "]}," Concurrent PerThreadExecutor post":{"type":"method","name":"post","children":[],"call":["PerThreadExecutor  post ","@stopped set ","@count value == ","@count value ","@running false? ","@count decrement ","Thread  current abort_on_exception= ","Thread  current ","Thread  new ","@count increment "," running? "," raise ","ArgumentError  new "," block_given? "]}," Concurrent OneByOne work":{"type":"method","name":"work","children":[],"call":[" call_job ","@mutex unlock ","@stash shift ","@mutex lock ","job call "]}," Concurrent OneByOne call_job":{"type":"method","name":"call_job","children":[],"call":[" work ","job executor post ","job executor "]}," Concurrent OneByOne post":{"type":"method","name":"post","children":[],"call":[" call_job ","@mutex unlock ","@stash << ","@mutex lock ","Job  new ","task nil? "," call_Job  new  "]}," Concurrent OneByOne initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "]}," Concurrent OneByOne call":{"type":"method","name":"call","children":[],"call":[" block call "," args "," block "]}," Concurrent JavaThreadPoolExecutor shutdown":{"type":"method","name":"shutdown","children":[],"call":["@executor getQueue clear ","@executor getQueue ","@executor shutdown "]}," Concurrent JavaThreadPoolExecutor running?":{"type":"method","name":"running?","children":[],"call":["@executor isTerminating ! ","@executor isTerminating ","(or\n  (or\n    (send\n      (ivar :@executor) :isShutdown)\n    (send\n      (ivar :@executor) :isTerminated))\n  (send\n    (ivar :@executor) :isTerminating)) ! ","@executor isTerminated ","@executor isShutdown "]}," Concurrent JavaThreadPoolExecutor status":{"type":"method","name":"status","children":[],"call":[" warn "]}," Concurrent JavaThreadPoolExecutor remaining_capacity":{"type":"method","name":"remaining_capacity","children":[],"call":["@executor getQueue remainingCapacity ","@executor getQueue ","@max_queue == "]}," Concurrent JavaThreadPoolExecutor queue_length":{"type":"method","name":"queue_length","children":[],"call":["@executor getQueue size ","@executor getQueue "]}," Concurrent JavaThreadPoolExecutor idletime":{"type":"method","name":"idletime","children":[],"call":["@executor getKeepAliveTime "," java util concurrent TimeUnit "," java util concurrent "," java util "," java "]}," Concurrent JavaThreadPoolExecutor completed_task_count":{"type":"method","name":"completed_task_count","children":[],"call":["@executor getCompletedTaskCount "]}," Concurrent JavaThreadPoolExecutor scheduled_task_count":{"type":"method","name":"scheduled_task_count","children":[],"call":["@executor getTaskCount "]}," Concurrent JavaThreadPoolExecutor largest_length":{"type":"method","name":"largest_length","children":[],"call":["@executor getLargestPoolSize "]}," Concurrent JavaThreadPoolExecutor length":{"type":"method","name":"length","children":[],"call":["@executor getPoolSize "]}," Concurrent JavaThreadPoolExecutor max_length":{"type":"method","name":"max_length","children":[],"call":["@executor getMaximumPoolSize "]}," Concurrent JavaThreadPoolExecutor min_length":{"type":"method","name":"min_length","children":[],"call":["@executor getCorePoolSize "]}," Concurrent JavaThreadPoolExecutor can_overflow?":{"type":"method","name":"can_overflow?","children":[],"call":["@max_queue != "]}," Concurrent JavaThreadPoolExecutor initialize":{"type":"method","name":"initialize","children":[],"call":[" set_shutdown_hook "," java util concurrent ThreadPoolExecutor new ","OVERFLOW_POLICIES  [] new ","OVERFLOW_POLICIES  [] "," java util concurrent TimeUnit "," java util concurrent "," java util "," java "," java util concurrent ThreadPoolExecutor "," java util concurrent LinkedBlockingQueue new "," java util concurrent LinkedBlockingQueue ","@max_queue == "," java util concurrent SynchronousQueue new "," java util concurrent SynchronousQueue ","min_length == "," raise ","ArgumentError  new ","OVERFLOW_POLICIES  keys include? ","OVERFLOW_POLICIES  keys ","min_length < ","max_length <= ","opts fetch ","opts fetch to_i "," kill "," at_exit ","FALLBACK_POLICIES  [] new ","FALLBACK_POLICIES  [] "," fallback_policy ","FALLBACK_POLICIES  include? ","min_length > "," warn ","opts has_key? ","@max_ java util concurrent LinkedBlockingQueue new  == ","@max_ java util concurrent SynchronousQueue new  == ","opts fetch to_i  == ","opts fetch to_i  < ","opts fetch to_i  <= ","opts fetch to_i  > "]}," Concurrent JavaSingleThreadExecutor initialize":{"type":"method","name":"initialize","children":[],"call":[" set_shutdown_hook "," java util concurrent Executors newSingleThreadExecutor "," java util concurrent Executors "," java util concurrent "," java util "," java "," raise ","ArgumentError  new ","FALLBACK_POLICIES  keys include? ","FALLBACK_POLICIES  keys ","opts fetch "]}," Concurrent JavaFixedThreadPool initialize":{"type":"method","name":"initialize","children":[],"call":[" set_shutdown_hook ","@executor setRejectedExecutionHandler ","OVERFLOW_POLICIES  [] new ","OVERFLOW_POLICIES  [] "," java util concurrent Executors newFixedThreadPool "," java util concurrent Executors "," java util concurrent "," java util "," java "," raise ","ArgumentError  new ","OVERFLOW_POLICIES  keys include? ","OVERFLOW_POLICIES  keys ","num_threads < ","opts fetch "," kill "," at_exit "," java util concurrent ThreadPoolExecutor new "," java util concurrent LinkedBlockingQueue new "," java util concurrent LinkedBlockingQueue "," java util concurrent TimeUnit "," java util concurrent ThreadPoolExecutor ","(pair\n  (sym :min_threads)\n  (lvar :num_threads)) merge ","defaults merge merge ","defaults merge ","num_threads to_i < ","num_threads to_i "," java util concurrent Executors newFixedThreadPool  setRejectedExecutionHandler "," java util concurrent ThreadPoolExecutor new  setRejectedExecutionHandler ","(pair\n  (sym :min_threads)\n  (lvar :num_threads)) merge  fetch "]}," Concurrent JavaCachedThreadPool initialize":{"type":"method","name":"initialize","children":[],"call":[" set_shutdown_hook ","@executor setRejectedExecutionHandler ","OVERFLOW_POLICIES  [] new ","OVERFLOW_POLICIES  [] "," java util concurrent Executors newCachedThreadPool "," java util concurrent Executors "," java util concurrent "," java util "," java "," raise ","ArgumentError  new ","OVERFLOW_POLICIES  keys include? ","OVERFLOW_POLICIES  keys ","opts fetch "," kill "," at_exit "," java util concurrent ThreadPoolExecutor new "," java util concurrent SynchronousQueue new "," java util concurrent SynchronousQueue "," java util concurrent TimeUnit "," java util concurrent ThreadPoolExecutor ","max_length <= ","idletime <= ","opts fetch to_i ","FALLBACK_POLICIES  [] new ","FALLBACK_POLICIES  [] ","FALLBACK_POLICIES  keys include? ","FALLBACK_POLICIES  keys "," warn ","opts has_key? ","defaults merge merge ","defaults merge "," java util concurrent Executors newCachedThreadPool  setRejectedExecutionHandler "," java util concurrent ThreadPoolExecutor new  setRejectedExecutionHandler ","opts fetch to_i  <= "]}," Concurrent JavaExecutor set_shutdown_hook":{"type":"method","name":"set_shutdown_hook","children":[],"call":[" kill "," at_exit "]}," Concurrent JavaExecutor kill":{"type":"method","name":"kill","children":[],"call":["@executor shutdownNow "]}," Concurrent JavaExecutor shutdown":{"type":"method","name":"shutdown","children":[],"call":["@executor shutdown "]}," Concurrent JavaExecutor wait_for_termination":{"type":"method","name":"wait_for_termination","children":[],"call":["@executor awaitTermination "," java util concurrent TimeUnit "," java util concurrent "," java util "," java ","1000 * ","timeout nil? "]}," Concurrent JavaExecutor shutdown?":{"type":"method","name":"shutdown?","children":[],"call":["@executor isTerminated ","@executor isShutdown "]}," Concurrent JavaExecutor shuttingdown?":{"type":"method","name":"shuttingdown?","children":[],"call":["@executor isTerminating ","@executor respond_to? "]}," Concurrent JavaExecutor running?":{"type":"method","name":"running?","children":[],"call":["(or\n  (send nil :shuttingdown?)\n  (send nil :shutdown?)) ! "," shutdown? "," shuttingdown? "]}," Concurrent JavaExecutor <<":{"type":"method","name":"<<","children":[],"call":[" post "]}," Concurrent JavaExecutor post":{"type":"method","name":"post","children":[],"call":[" raise ","@executor submit "," running? ","ArgumentError  new "," block_given? ","executor_submit call ","@executor java_method ","Runnable  java_class "," handle_fallback ","@executor java_method  call "]}," Concurrent RubyExecutor kill_execution":{"type":"method","name":"kill_execution","children":[],"call":[]}," Concurrent RubyExecutor shutdown_execution":{"type":"method","name":"shutdown_execution","children":[],"call":[" stopped_event set "," stopped_event "]}," Concurrent RubyExecutor execute":{"type":"method","name":"execute","children":[],"call":[" raise "]}," Concurrent RubyExecutor init_executor":{"type":"method","name":"init_executor","children":[],"call":["Event  new ","Mutex  new "]}," Concurrent RubyExecutor wait_for_termination":{"type":"method","name":"wait_for_termination","children":[],"call":[" stopped_event wait "," stopped_event "]}," Concurrent RubyExecutor kill":{"type":"method","name":"kill","children":[],"call":[" stopped_event set "," stopped_event "," kill_execution "," stop_event set "," stop_event "," shutdown? "," mutex synchronize "," mutex "]}," Concurrent RubyExecutor shutdown":{"type":"method","name":"shutdown","children":[],"call":[" shutdown_execution "," stop_event set "," stop_event "," running? "," mutex synchronize "," mutex "]}," Concurrent RubyExecutor shutdown?":{"type":"method","name":"shutdown?","children":[],"call":[" stopped_event set? "," stopped_event "]}," Concurrent RubyExecutor shuttingdown?":{"type":"method","name":"shuttingdown?","children":[],"call":["(or\n  (send nil :running?)\n  (send nil :shutdown?)) ! "," shutdown? "," running? "]}," Concurrent RubyExecutor running?":{"type":"method","name":"running?","children":[],"call":[" stop_event set? ! "," stop_event set? "," stop_event "]}," Concurrent RubyExecutor <<":{"type":"method","name":"<<","children":[],"call":[" post "]}," Concurrent RubyExecutor post":{"type":"method","name":"post","children":[],"call":[" execute "," running? "," mutex synchronize "," mutex "," raise ","ArgumentError  new "," block_given? "," handle_fallback "]}," Concurrent Executor can_overflow?":{"type":"method","name":"can_overflow?","children":[],"call":[]}," Concurrent Exchanger exchange":{"type":"method","name":"exchange","children":[],"call":["@second put ","@first put ","second == ","@second take ","first == ","@first take ","@@second take  put ","@@first take  put ","@second take  == ","@@second take  take ","@first take  == ","@@first take  take "]}," Concurrent Exchanger initialize":{"type":"method","name":"initialize","children":[],"call":["MVar  new "]}," Concurrent Dereferenceable value=":{"type":"method","name":"value=","children":[],"call":[" mutex unlock "," mutex "," mutex lock "]}," Concurrent Delay execute_task_once":{"type":"method","name":"execute_task_once","children":[],"call":["@task call ","@state == "," mutex unlock "," mutex "," event set "," event "," set_state "," mutex lock ","task call ","@task_executor post "," mutex synchronize "," synchronize ","executor post ","Options  executor_from_options ","@task_Options  executor_from_options  post ","Options  executor_from_options  post ","Options  Options  executor_from_options _from_options "]}," Concurrent Delay reconfigure":{"type":"method","name":"reconfigure","children":[],"call":[" mutex unlock "," mutex ","@state == "," raise ","ArgumentError  new "," block_given? "," mutex lock "," mutex synchronize "," synchronize "]}," Concurrent Delay value":{"type":"method","name":"value","children":[],"call":[" mutex unlock "," mutex "," apply_deref_options "," execute_task_once "," mutex lock ","@task call ","@state == "," mutex synchronize "," set_state "," synchronize "," raise "," incomplete? "]}," Concurrent Delay initialize":{"type":"method","name":"initialize","children":[],"call":[" set_deref_options "," init_obligation "," raise ","ArgumentError  new "," block_given? ","OptionsParser  get_task_executor_from "," ns_initialize "," synchronize "]}," Concurrent dataflow_with":{"type":"method","name":"dataflow_with","children":[],"call":["input add_observer ","inputs each ","result execute ","DependencyCounter  new ","inputs size ","inputs empty? ","block call ","input value ","inputs map ","Future  new "," raise ","ArgumentError  new ","input is_a? ","inputs all? "," block_given? ","executor nil? "," call_dataflow "]}," Concurrent finalize_executor":{"type":"method","name":"finalize_executor","children":[],"call":[]}," Concurrent configure":{"type":"method","name":"configure","children":[],"call":[]}," Concurrent Configuration new_operation_pool":{"type":"method","name":"new_operation_pool","children":[],"call":["Concurrent ThreadPoolExecutor  new ","(int 20) max ","Concurrent  processor_count * ","Concurrent  processor_count ","10 * ","(int 2) max ","Concurrent  new_fast_executor "," deprecated_method "]}," Concurrent Configuration new_task_pool":{"type":"method","name":"new_task_pool","children":[],"call":["Concurrent ThreadPoolExecutor  new ","2 * ","(int 20) max ","Concurrent  processor_count * ","Concurrent  processor_count ","(int 2) max ","Concurrent  new_io_executor "," deprecated_method "]}," Concurrent Configuration global_operation_pool=":{"type":"method","name":"global_operation_pool=","children":[],"call":[" raise ","ConfigurationError  new ","@global_operation_pool reconfigure ","@global_operation_pool nil? ","GLOBAL_FAST_EXECUTOR  reconfigure "," deprecated "]}," Concurrent Configuration global_task_pool=":{"type":"method","name":"global_task_pool=","children":[],"call":[" raise ","ConfigurationError  new ","@global_task_pool reconfigure ","@global_task_pool nil? ","GLOBAL_IO_EXECUTOR  reconfigure "," deprecated "]}," Concurrent Configuration global_timer_set":{"type":"method","name":"global_timer_set","children":[],"call":["@global_timer_set value ","Concurrent TimerSet  new ","Concurrent  global_timer_set "," deprecated_method "]}," Concurrent Configuration global_operation_pool":{"type":"method","name":"global_operation_pool","children":[],"call":["@global_operation_pool value ","Concurrent ThreadPoolExecutor  new ","(int 20) max ","@cores * ","10 * ","(int 2) max ","Concurrent  global_fast_executor "," deprecated_method "]}," Concurrent Configuration global_task_pool":{"type":"method","name":"global_task_pool","children":[],"call":["@global_task_pool value ","Concurrent ThreadPoolExecutor  new ","2 * ","(int 20) max ","@cores * ","(int 2) max ","Concurrent  global_io_executor "," deprecated_method "]}," Concurrent Configuration no_logger":{"type":"method","name":"no_logger","children":[],"call":[" lambda "," deprecated_method "]}," Concurrent Configuration initialize":{"type":"method","name":"initialize","children":[],"call":[" no_logger ","Concurrent TimerSet  new ","Delay  new "," new_operation_pool "," new_task_pool ","Concurrent  processor_count ","ImmediateExecutor  new "]}," Concurrent RingBuffer peek":{"type":"method","name":"peek","children":[],"call":["@buffer [] "]}," Concurrent RingBuffer poll":{"type":"method","name":"poll","children":[],"call":["(send\n  (ivar :@first) :+\n  (int 1)) % ","@buffer size ","@first + ","@buffer []= ","@buffer [] ","(send\n  (ivar :(send\n  (ivar :@first) :+\n  (int 1)) % ) :+\n  (int 1)) % ","(send\n  (ivar :@first) :+\n  (int 1)) %  + "]}," Concurrent RingBuffer offer":{"type":"method","name":"offer","children":[],"call":["(send\n  (ivar :@last) :+\n  (int 1)) % ","@buffer size ","@last + ","@buffer []= "," full? ","(send\n  (ivar :(send\n  (ivar :@last) :+\n  (int 1)) % ) :+\n  (int 1)) % ","(send\n  (ivar :@last) :+\n  (int 1)) %  + "]}," Concurrent RingBuffer full?":{"type":"method","name":"full?","children":[],"call":["@count == "," capacity "]}," Concurrent RingBuffer empty?":{"type":"method","name":"empty?","children":[],"call":["@count == "]}," Concurrent RingBuffer count":{"type":"method","name":"count","children":[],"call":[]}," Concurrent RingBuffer capacity":{"type":"method","name":"capacity","children":[],"call":["@buffer size "]}," Concurrent RingBuffer initialize":{"type":"method","name":"initialize","children":[],"call":["Array  new "]}," Concurrent JavaPriorityQueue from_list":{"type":"method","name":"from_list","children":[],"call":[]}," Concurrent JavaPriorityQueue push":{"type":"method","name":"push","children":[],"call":["@queue add "]}," Concurrent JavaPriorityQueue pop":{"type":"method","name":"pop","children":[],"call":["@queue poll "]}," Concurrent JavaPriorityQueue peek":{"type":"method","name":"peek","children":[],"call":["@queue peek "]}," Concurrent JavaPriorityQueue length":{"type":"method","name":"length","children":[],"call":["@queue size "]}," Concurrent JavaPriorityQueue include?":{"type":"method","name":"include?","children":[],"call":["@queue contains "]}," Concurrent JavaPriorityQueue empty?":{"type":"method","name":"empty?","children":[],"call":["@queue size == ","@queue size "]}," Concurrent JavaPriorityQueue delete":{"type":"method","name":"delete","children":[],"call":["@queue remove "]}," Concurrent JavaPriorityQueue clear":{"type":"method","name":"clear","children":[],"call":["@queue clear "]}," Concurrent JavaPriorityQueue initialize":{"type":"method","name":"initialize","children":[],"call":[" java util PriorityQueue new "," java util Collections reverseOrder "," java util Collections "," java util "," java "," java util PriorityQueue ","(sym :min) include? ","opts fetch "]}," Concurrent MutexPriorityQueue swim":{"type":"method","name":"swim","children":[],"call":["k / "," swap "," ordered? ! "," ordered? ","k > ","k /  / ","k /  > "]}," Concurrent MutexPriorityQueue sink":{"type":"method","name":"sink","children":[],"call":[" swap "," ordered? "," ordered? ! ","j + ","j < ","(lvasgn :j\n  (begin\n    (send\n      (int 2) :*\n      (lvar :k)))) <= ","2 * "]}," Concurrent MutexPriorityQueue ordered?":{"type":"method","name":"ordered?","children":[],"call":["(send\n  (send\n    (ivar :@queue) :[]\n    (lvar :x)) :<=>\n  (send\n    (ivar :@queue) :[]\n    (lvar :y))) == ","@queue [] <=> ","@queue [] "]}," Concurrent MutexPriorityQueue swap":{"type":"method","name":"swap","children":[],"call":["@queue []= ","@queue [] "]}," Concurrent MutexPriorityQueue from_list":{"type":"method","name":"from_list","children":[],"call":[]}," Concurrent MutexPriorityQueue push":{"type":"method","name":"push","children":[],"call":[" swim ","@queue << "]}," Concurrent MutexPriorityQueue pop":{"type":"method","name":"pop","children":[],"call":["@queue pop "," sink "," swap ","@queue [] "]}," Concurrent MutexPriorityQueue peek":{"type":"method","name":"peek","children":[],"call":["@queue [] "]}," Concurrent MutexPriorityQueue length":{"type":"method","name":"length","children":[],"call":[]}," Concurrent MutexPriorityQueue include?":{"type":"method","name":"include?","children":[],"call":["@queue include? "]}," Concurrent MutexPriorityQueue empty?":{"type":"method","name":"empty?","children":[],"call":[" size == "," size "]}," Concurrent MutexPriorityQueue delete":{"type":"method","name":"delete","children":[],"call":["@length != ","@queue pop "," sink "," swap ","@queue [] == ","@queue [] ","k <= "]}," Concurrent MutexPriorityQueue clear":{"type":"method","name":"clear","children":[],"call":[]}," Concurrent MutexPriorityQueue initialize":{"type":"method","name":"initialize","children":[],"call":[" clear ","(sym :min) include? ","opts fetch "]}," Concurrent BlockingRingBuffer wait_while_empty":{"type":"method","name":"wait_while_empty","children":[],"call":["@condition wait ","@buffer empty? "]}," Concurrent BlockingRingBuffer wait_while_full":{"type":"method","name":"wait_while_full","children":[],"call":["@condition wait ","@buffer full? "]}," Concurrent BlockingRingBuffer peek":{"type":"method","name":"peek","children":[],"call":["@buffer peek ","@mutex synchronize "]}," Concurrent BlockingRingBuffer take":{"type":"method","name":"take","children":[],"call":["@condition signal ","@buffer poll "," wait_while_empty ","@mutex synchronize "]}," Concurrent BlockingRingBuffer put":{"type":"method","name":"put","children":[],"call":["@condition signal ","@buffer offer "," wait_while_full ","@mutex synchronize "]}," Concurrent BlockingRingBuffer full?":{"type":"method","name":"full?","children":[],"call":["@buffer full? ","@mutex synchronize "]}," Concurrent BlockingRingBuffer empty?":{"type":"method","name":"empty?","children":[],"call":["@buffer empty? ","@mutex synchronize "]}," Concurrent BlockingRingBuffer count":{"type":"method","name":"count","children":[],"call":["@buffer count ","@mutex synchronize "]}," Concurrent BlockingRingBuffer capacity":{"type":"method","name":"capacity","children":[],"call":["@buffer capacity ","@mutex synchronize "]}," Concurrent BlockingRingBuffer initialize":{"type":"method","name":"initialize","children":[],"call":["Condition  new ","Mutex  new ","RingBuffer  new "]}," Concurrent WaitableList take":{"type":"method","name":"take","children":[],"call":["@list shift ","@condition wait ","@list empty? ","@mutex synchronize "]}," Concurrent WaitableList delete":{"type":"method","name":"delete","children":[],"call":["@list delete ","@mutex synchronize "]}," Concurrent WaitableList put":{"type":"method","name":"put","children":[],"call":["@condition signal ","@list << ","@mutex synchronize "]}," Concurrent WaitableList empty?":{"type":"method","name":"empty?","children":[],"call":["@list empty? ","@mutex synchronize "]}," Concurrent WaitableList size":{"type":"method","name":"size","children":[],"call":["@list size ","@mutex synchronize "]}," Concurrent WaitableList initialize":{"type":"method","name":"initialize","children":[],"call":["Condition  new ","Mutex  new "]}," Concurrent UnbufferedChannel remove_probe":{"type":"method","name":"remove_probe","children":[],"call":["@probe_set delete "]}," Concurrent UnbufferedChannel select":{"type":"method","name":"select","children":[],"call":["@probe_set put "]}," Concurrent UnbufferedChannel pop":{"type":"method","name":"pop","children":[],"call":["probe value "," select ","Channel Probe  new ","Probe  new ","Channel Probe  new  value ","Probe  new  value "]}," Concurrent UnbufferedChannel push":{"type":"method","name":"push","children":[],"call":["@probe_set take set_unless_assigned ","@probe_set take "]}," Concurrent UnbufferedChannel probe_set_size":{"type":"method","name":"probe_set_size","children":[],"call":["@probe_set size "]}," Concurrent UnbufferedChannel initialize":{"type":"method","name":"initialize","children":[],"call":["WaitableList  new "]}," Concurrent Channel select":{"type":"method","name":"select","children":[],"call":[]}," Concurrent Channel Probe channel":{"type":"method","name":"channel","children":[],"call":[" composite_value [] "," composite_value "," composite_value nil? "]}," Concurrent Channel Probe value":{"type":"method","name":"value","children":[],"call":[" composite_value [] "," composite_value "," composite_value nil? "]}," Concurrent Channel Probe set_unless_assigned":{"type":"method","name":"set_unless_assigned","children":[],"call":[" event set "," event "," set_state ","(sym :fulfilled) include? "," mutex synchronize "," mutex "]}," Concurrent Channel Probe initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent BufferedChannel set_probe_or_push_into_buffer":{"type":"method","name":"set_probe_or_push_into_buffer","children":[],"call":["@probe_set take set_unless_assigned ","@probe_set take "," push_into_buffer ","@probe_set empty? ","@mutex synchronize "]}," Concurrent BufferedChannel shift_buffer":{"type":"method","name":"shift_buffer","children":[],"call":["@buffer_condition broadcast ","@buffer poll ","@buffer_condition wait ","@buffer empty? "]}," Concurrent BufferedChannel peek_buffer":{"type":"method","name":"peek_buffer","children":[],"call":["@buffer peek ","@buffer_condition wait ","@buffer empty? "]}," Concurrent BufferedChannel push_into_buffer":{"type":"method","name":"push_into_buffer","children":[],"call":["@buffer_condition broadcast ","@buffer offer ","@buffer_condition wait ","@buffer full? "]}," Concurrent BufferedChannel remove_probe":{"type":"method","name":"remove_probe","children":[],"call":["@probe_set delete "]}," Concurrent BufferedChannel select":{"type":"method","name":"select","children":[],"call":[" shift_buffer ","probe set_unless_assigned "," peek_buffer ","@probe_set put ","@buffer empty? ","@mutex synchronize "]}," Concurrent BufferedChannel pop":{"type":"method","name":"pop","children":[],"call":["probe value "," select ","Channel Probe  new ","Probe  new ","Channel Probe  new  value ","Probe  new  value "]}," Concurrent BufferedChannel push":{"type":"method","name":"push","children":[],"call":[" set_probe_or_push_into_buffer "]}," Concurrent BufferedChannel buffer_queue_size":{"type":"method","name":"buffer_queue_size","children":[],"call":["@buffer count ","@mutex synchronize "]}," Concurrent BufferedChannel probe_set_size":{"type":"method","name":"probe_set_size","children":[],"call":["@probe_set size "]}," Concurrent BufferedChannel initialize":{"type":"method","name":"initialize","children":[],"call":["RingBuffer  new ","WaitableList  new ","Condition  new ","Mutex  new "]}," Concurrent Event try?":{"type":"method","name":"try?","children":[],"call":["@mutex unlock ","@condition broadcast ","@mutex lock "," ns_set "," synchronize "]}," Concurrent CyclicBarrier wait_while_waiting":{"type":"method","name":"wait_while_waiting","children":[],"call":["remaining woken_up? ","@condition wait ","remaining remaining_time ","remaining can_wait? ","generation status == ","generation status ","Condition Result  new ","@condition wait  woken_up? ","Condition Result  new  woken_up? ","@condition wait  @condition wait _time ","Condition Result  new  Condition Result  new _time ","@condition wait  can_wait? ","Condition Result  new  can_wait? "]}," Concurrent CyclicBarrier wait_for_wake_up":{"type":"method","name":"wait_for_wake_up","children":[],"call":["@condition broadcast ","generation status= ","generation status == ","generation status "," wait_while_waiting "]}," Concurrent CyclicBarrier set_status_and_restore":{"type":"method","name":"set_status_and_restore","children":[],"call":["Generation  new ","@condition broadcast ","@generation status= ","Generation  new  status= "]}," Concurrent CyclicBarrier broken?":{"type":"method","name":"broken?","children":[],"call":["@generation status != ","@generation status ","@mutex synchronize "," synchronize "]}," Concurrent CyclicBarrier reset":{"type":"method","name":"reset","children":[],"call":[" set_status_and_restore ","@mutex synchronize "," ns_generation_done "," synchronize "]}," Concurrent CyclicBarrier wait":{"type":"method","name":"wait","children":[],"call":[" wait_for_wake_up "," set_status_and_restore ","@action call ","@number_waiting == ","@generation status == ","@generation status ","@mutex synchronize "," ns_generation_done ","generation status == ","generation status ","generation status != "," ns_wait_until "," synchronize "]}," Concurrent CyclicBarrier number_waiting":{"type":"method","name":"number_waiting","children":[],"call":[" synchronize "]}," Concurrent CyclicBarrier parties":{"type":"method","name":"parties","children":[],"call":[" synchronize "]}," Concurrent CyclicBarrier initialize":{"type":"method","name":"initialize","children":[],"call":["Generation  new ","Condition  new ","Mutex  new "," raise ","ArgumentError  new ","parties < ","parties is_a? ! ","parties is_a? "," ns_initialize "," synchronize ","Utility NativeInteger  ensure_positive_and_no_zero ","Utility NativeInteger  ensure_integer_and_bounds "]}," Concurrent JavaCountDownLatch count":{"type":"method","name":"count","children":[],"call":["@latch getCount "]}," Concurrent JavaCountDownLatch count_down":{"type":"method","name":"count_down","children":[],"call":["@latch countDown "]}," Concurrent JavaCountDownLatch wait":{"type":"method","name":"wait","children":[],"call":["@latch await "," java util concurrent TimeUnit "," java util concurrent "," java util "," java ","1000 * ","timeout nil? ","Synchronization JRuby  sleep_interruptibly "]}," Concurrent JavaCountDownLatch initialize":{"type":"method","name":"initialize","children":[],"call":[" java util concurrent CountDownLatch new "," java util concurrent CountDownLatch "," java util concurrent "," java util "," java "," raise ","ArgumentError  new ","count >= ","count is_a? ","Utility NativeInteger  ensure_positive ","Utility NativeInteger  ensure_integer_and_bounds "]}," Concurrent MutexCountDownLatch count":{"type":"method","name":"count","children":[],"call":["@mutex synchronize "," synchronize "]}," Concurrent MutexCountDownLatch count_down":{"type":"method","name":"count_down","children":[],"call":["@condition broadcast ","@count == ","@count > ","@mutex synchronize "," ns_broadcast "," synchronize "]}," Concurrent MutexCountDownLatch wait":{"type":"method","name":"wait","children":[],"call":["@count == ","@condition wait ","remaining remaining_time ","remaining can_wait? ","@count > ","Condition Result  new ","@mutex synchronize "," ns_wait_until "," synchronize ","@condition wait  @condition wait _time ","Condition Result  new  Condition Result  new _time ","@condition wait  can_wait? ","Condition Result  new  can_wait? "]}," Concurrent MutexCountDownLatch initialize":{"type":"method","name":"initialize","children":[],"call":["Condition  new ","Mutex  new "," raise ","ArgumentError  new ","count >= ","count is_a? "," ns_initialize "," synchronize ","Utility NativeInteger  ensure_positive ","Utility NativeInteger  ensure_integer_and_bounds "]}," Concurrent CopyOnNotifyObserverSet duplicate_observers":{"type":"method","name":"duplicate_observers","children":[],"call":["@mutex unlock ","@observers dup ","@mutex lock ","@@observers dup  dup "]}," Concurrent JavaAtomicFixnum initialize":{"type":"method","name":"initialize","children":[],"call":[" java util concurrent atomic AtomicLong new "," java util concurrent atomic AtomicLong "," java util concurrent atomic "," java util concurrent "," java util "," java "," raise ","ArgumentError  new ","init is_a? "]}," Concurrent MutexAtomicFixnum initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "," raise ","ArgumentError  new ","init is_a? "," ns_initialize "," synchronize "," ns_set "," Mutex  new "]}," Concurrent JavaAtomicBoolean make_false":{"type":"method","name":"make_false","children":[],"call":["@atomic compareAndSet "]}," Concurrent JavaAtomicBoolean make_true":{"type":"method","name":"make_true","children":[],"call":["@atomic compareAndSet "]}," Concurrent JavaAtomicBoolean false?":{"type":"method","name":"false?","children":[],"call":["@atomic get ! ","@atomic get "]}," Concurrent JavaAtomicBoolean true?":{"type":"method","name":"true?","children":[],"call":["@atomic get "]}," Concurrent JavaAtomicBoolean value=":{"type":"method","name":"value=","children":[],"call":["@atomic set ","value ! ! ","value ! "]}," Concurrent JavaAtomicBoolean value":{"type":"method","name":"value","children":[],"call":["@atomic get "]}," Concurrent JavaAtomicBoolean initialize":{"type":"method","name":"initialize","children":[],"call":[" java util concurrent atomic AtomicBoolean new ","initial ! ! ","initial ! "," java util concurrent atomic AtomicBoolean "," java util concurrent atomic "," java util concurrent "," java util "," java "]}," Concurrent MutexAtomicBoolean make_false":{"type":"method","name":"make_false","children":[],"call":["@mutex unlock ","@mutex lock "," ns_make_value "," synchronize "]}," Concurrent MutexAtomicBoolean make_true":{"type":"method","name":"make_true","children":[],"call":["@mutex unlock ","old ! ","@mutex lock "," ns_make_value "," synchronize "]}," Concurrent MutexAtomicBoolean false?":{"type":"method","name":"false?","children":[],"call":["@mutex unlock ","@value ! ","@mutex lock "," synchronize "]}," Concurrent MutexAtomicBoolean true?":{"type":"method","name":"true?","children":[],"call":["@mutex unlock ","@mutex lock "," synchronize "]}," Concurrent MutexAtomicBoolean value=":{"type":"method","name":"value=","children":[],"call":["@mutex unlock ","value ! ! ","value ! ","@mutex lock "," synchronize "]}," Concurrent MutexAtomicBoolean value":{"type":"method","name":"value","children":[],"call":["@mutex unlock ","@mutex lock "," synchronize "]}," Concurrent MutexAtomicBoolean initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new ","initial ! ! ","initial ! "," ns_initialize "," synchronize "," Mutex  new "]}," Concurrent MutexAtomic compare_and_set":{"type":"method","name":"compare_and_set","children":[],"call":["@mutex unlock ","@value == ","@mutex lock "]}," Concurrent MutexAtomic modify":{"type":"method","name":"modify","children":[],"call":["@mutex unlock ","@mutex lock "]}," Concurrent MutexAtomic value=":{"type":"method","name":"value=","children":[],"call":["@mutex unlock ","@mutex lock "]}," Concurrent MutexAtomic value":{"type":"method","name":"value","children":[],"call":["@mutex unlock ","@mutex lock "]}," Concurrent MutexAtomic initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "]}," Concurrent Async init_mutex":{"type":"method","name":"init_mutex","children":[],"call":["@__async__mutex__ unlock ","AsyncDelegator  new ","Delay  new ","AwaitDelegator  new ","Concurrent  configuration global_operation_pool ","Concurrent  configuration ","(ivasgn :@__async__mutex__\n  (send\n    (const nil :Mutex) :new)) lock ","Mutex  new "," raise ","InitializationError  new ","Concurrent ImmediateExecutor  new ","Concurrent SerializedExecution  new "," init_synchronization "," deprecated "," warn ","Mutex  new  unlock ","(ivasgn :Mutex  new \n  (send\n    (const nil :Mutex) :new)) lock "]}," Concurrent Async executor=":{"type":"method","name":"executor=","children":[],"call":[" raise ","ArgumentError  new ","@__async__executor__ reconfigure ","InitializationError  new ","@__async__executor__ nil? ","@__async_executor__ reconfigure "]}," Concurrent Async await":{"type":"method","name":"await","children":[],"call":["@__await_delegator__ value "," raise ","InitializationError  new ","AwaitDelegator  new ","Mutex  new "]}," Concurrent Async async":{"type":"method","name":"async","children":[],"call":["@__async_delegator__ value "," raise ","InitializationError  new ","AsyncDelegator  new "," await mutex "," await "," executor "]}," Concurrent Async AsyncDelegator method_missing":{"type":"method","name":"method_missing","children":[],"call":[" send ","@delegate send ","@mutex synchronize ","Concurrent Future  execute ","@executor value ","Async  validate_argc "," define_singleton_method ","@delegate respond_to? "," mutex synchronize "," mutex ","ivar value ","ivar complete ","reason nil? ","@serializer post ","Concurrent IVar  new ","ivar fail ","ivar set "," perform ","@executor post ","@queue length == ","@queue length ","@queue push "," synchronize ","ivar wait "," reset_if_forked ","@executor @delegate send  ","ivar @delegate send  ","Concurrent IVar  new  value ","Concurrent IVar  new  complete ","Concurrent IVar  new  fail ","Concurrent IVar  new  set ","Concurrent IVar  new  wait "]}," Concurrent Async AsyncDelegator initialize":{"type":"method","name":"initialize","children":[],"call":["Concurrent  global_io_executor "]}," Concurrent Async AwaitDelegator method_missing":{"type":"method","name":"method_missing","children":[],"call":[" send ","ivar complete ","reason nil? ","@delegate send ","@mutex synchronize ","Concurrent IVar  new ","Async  validate_argc "," define_singleton_method ","@delegate respond_to? "," mutex synchronize "," mutex ","ivar wait ","Concurrent IVar  new  complete ","@delegate send  complete ","Concurrent IVar  new  wait ","@delegate send  wait "]}," Concurrent Async AwaitDelegator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent Async validate_argc":{"type":"method","name":"validate_argc","children":[],"call":[" raise ","ArgumentError  new ","(lvasgn :arity\n  (send\n    (begin\n      (send\n        (lvar :arity) :+\n        (int 1))) :abs)) > ","(send\n  (lvar :arity) :+\n  (int 1)) abs ","arity + ","arity < ","argc != ","arity >= ","obj method arity ","obj method ","args length ","(lvasgn :(send\n  (lvar :arity) :+\n  (int 1)) abs \n  (send\n    (begin\n      (send\n        (lvar :(send\n  (lvar :arity) :+\n  (int 1)) abs ) :+\n        (int 1))) :abs)) > ","(lvasgn :obj method arity \n  (send\n    (begin\n      (send\n        (lvar :obj method arity ) :+\n        (int 1))) :abs)) > ","(send\n  (lvar :(send\n  (lvar :arity) :+\n  (int 1)) abs ) :+\n  (int 1)) abs ","(send\n  (lvar :obj method arity ) :+\n  (int 1)) abs ","(send\n  (lvar :arity) :+\n  (int 1)) abs  + ","obj method arity  + ","(send\n  (lvar :arity) :+\n  (int 1)) abs  < ","obj method arity  < ","args length  != ","(send\n  (lvar :arity) :+\n  (int 1)) abs  >= ","obj method arity  >= ","obj method (send\n  (lvar :arity) :+\n  (int 1)) abs  ","obj method obj method arity  "]}," Concurrent Agent post_on":{"type":"method","name":"post_on","children":[],"call":[" work ","@one_by_one post ","block nil? ","@serialized_execution post "]}," Concurrent Agent await":{"type":"method","name":"await","children":[],"call":["done wait ","done set "," post ","Event  new ","agent await ","agents each "," wait ","Event  new  wait ","Event  new  set "]}," Concurrent Agent post_off":{"type":"method","name":"post_off","children":[],"call":[" post_on ","block call ","Concurrent  timeout "," lambda "]}," Concurrent Actress spawn_optionify":{"type":"method","name":"spawn_optionify","children":[],"call":[]}," Concurrent Actress spawn!":{"type":"method","name":"spawn!","children":[],"call":[]}," Concurrent Actress spawn":{"type":"method","name":"spawn","children":[],"call":[]}," Concurrent Actress Root on_message":{"type":"method","name":"on_message","children":[],"call":[" spawn ","message [] ","message first == ","message first ","message is_a? "]}," Concurrent Actress current":{"type":"method","name":"current","children":[],"call":[]}," Concurrent Actress TypeCheck error":{"type":"method","name":"error","children":[],"call":[]}," Concurrent Actress TypeCheck Child!":{"type":"method","name":"Child!","children":[],"call":["TypeCheck  error "," Child? "]}," Concurrent Actress TypeCheck Child?":{"type":"method","name":"Child?","children":[],"call":["value <= ","types any? "," Type? "]}," Concurrent Actress TypeCheck Match!":{"type":"method","name":"Match!","children":[],"call":["TypeCheck  error "," Match? "]}," Concurrent Actress TypeCheck Match?":{"type":"method","name":"Match?","children":[],"call":["t === ","types any? "]}," Concurrent Actress TypeCheck Type!":{"type":"method","name":"Type!","children":[],"call":["TypeCheck  error "," Type? "]}," Concurrent Actress TypeCheck Type?":{"type":"method","name":"Type?","children":[],"call":["value is_a? ","types any? "]}," Concurrent Actress Reference ==":{"type":"method","name":"==","children":[],"call":["other send == "," core ","other send "," Type? "," class "]}," Concurrent Actress Reference to_s":{"type":"method","name":"to_s","children":[],"call":[" path "," class "," actor_class "]}," Concurrent Actress Reference message":{"type":"method","name":"message","children":[],"call":[" core on_envelope ","Envelope  new ","Thread  current ","Actress  current "," core "]}," Concurrent Actress Reference ask!":{"type":"method","name":"ask!","children":[],"call":[" ask value! "," ask "]}," Concurrent Actress Reference ask":{"type":"method","name":"ask","children":[],"call":[" message "]}," Concurrent Actress Reference tell":{"type":"method","name":"tell","children":[],"call":[" message "]}," Concurrent Actress Reference initialize":{"type":"method","name":"initialize","children":[],"call":[" Type! "]}," Concurrent Actress ActressTerminated initialize":{"type":"method","name":"initialize","children":[],"call":["reference path "," Type! "]}," Concurrent Actress reject!":{"type":"method","name":"reject!","children":[],"call":[" ivar fail "," ivar "," ivar nil? "]}," Concurrent Actress sender_path":{"type":"method","name":"sender_path","children":[],"call":[" sender to_s "," sender "," sender path "," sender is_a? "]}," Concurrent Actress initialize":{"type":"method","name":"initialize","children":[],"call":[" Type! "]}," Concurrent Actress CoreDelegations executor":{"type":"method","name":"executor","children":[],"call":[" core executor "," core "]}," Concurrent Actress CoreDelegations reference":{"type":"method","name":"reference","children":[],"call":[" core reference "," core "]}," Concurrent Actress CoreDelegations terminated":{"type":"method","name":"terminated","children":[],"call":[" core terminated "," core "]}," Concurrent Actress CoreDelegations terminated?":{"type":"method","name":"terminated?","children":[],"call":[" core terminated? "," core "]}," Concurrent Actress CoreDelegations parent":{"type":"method","name":"parent","children":[],"call":[" core parent "," core "]}," Concurrent Actress CoreDelegations path":{"type":"method","name":"path","children":[],"call":[" core path "," core "]}," Concurrent Actress CoreDelegations name":{"type":"method","name":"name","children":[],"call":[" core name "," core "]}," Concurrent Actress Core log":{"type":"method","name":"log","children":[],"call":[]}," Concurrent Actress Core reject_envelope":{"type":"method","name":"reject_envelope","children":[],"call":["envelope reject! ","ActressTerminated  new "," reference "]}," Concurrent Actress Core schedule_execution":{"type":"method","name":"schedule_execution","children":[],"call":["Thread  current []= ","Thread  current "," log "," reference ","@one_by_one post ","@serialized_execution post "]}," Concurrent Actress Core receive_envelope":{"type":"method","name":"receive_envelope","children":[],"call":[" process_envelopes? ","envelope ivar fail ","envelope ivar ","envelope ivar nil? "," terminate! "," log ","envelope ivar set ","@actress on_envelope ","envelope sender_path ","envelope message "," caller [] "," caller "," reject_envelope "," terminated? ","@mailbox shift "," actor on_envelope "," actor "," process_@mailbox shift s? ","@mailbox shift  ivar fail ","@mailbox shift  ivar ","@mailbox shift  ivar nil? ","@mailbox shift  ivar set ","@actress on_@mailbox shift  ","@mailbox shift  sender_path ","@mailbox shift  message "," reject_@mailbox shift  "," actor on_@mailbox shift  "]}," Concurrent Actress Core process_envelopes?":{"type":"method","name":"process_envelopes?","children":[],"call":[" receive_envelope "," schedule_execution ","@mailbox empty? "]}," Concurrent Actress Core guard!":{"type":"method","name":"guard!","children":[],"call":[" raise ","Actress  current "," reference ","Actress  current == "]}," Concurrent Actress Core terminate!":{"type":"method","name":"terminate!","children":[],"call":["@mailbox clear "," log ","envelope sender_path ","envelope message "," reject_envelope ","@mailbox each ","@parent_core remove_child "," reference ","@terminated set ","core terminate! ","core send ","ch send tap ","ch send ","@children each "," guard! "," terminated? "]}," Concurrent Actress Core terminated?":{"type":"method","name":"terminated?","children":[],"call":["@terminated set? "]}," Concurrent Actress Core on_envelope":{"type":"method","name":"on_envelope","children":[],"call":[" process_envelopes? ","@mailbox push "," reject_envelope "," terminated? "," schedule_execution "]}," Concurrent Actress Core remove_child":{"type":"method","name":"remove_child","children":[],"call":["@children delete "," Type! "," schedule_execution "]}," Concurrent Actress Core add_child":{"type":"method","name":"add_child","children":[],"call":["@children add "," Type! "," guard! "]}," Concurrent Actress Core children":{"type":"method","name":"children","children":[],"call":["@children to_a "," guard! "]}," Concurrent Actress Core parent":{"type":"method","name":"parent","children":[],"call":["@parent_core reference "]}," Concurrent Actress Core initialize":{"type":"method","name":"initialize","children":[],"call":["initialized fail "," terminate! "," log ","initialized set ","@actress send ","actress_class new "," schedule_execution "," Type! ","opts [] ","opts fetch "," Child! ","@parent_core add_child "," reference ","File  join ","@parent_core path "," raise ","@name != ","@parent_core nil? ","parent send ","(send nil :Type!\n  (send\n    (lvar :opts) :fetch\n    (sym :name))\n  (const nil :String)\n  (const nil :Symbol)) to_s ","Reference  new ","Set  new ","Concurrent  configuration global_task_pool ","Concurrent  configuration ","Event  new ","OneByOne  new ","Array  new ","@actor value= ","a send ","actor_class new tap ","actor_class new ","Concurrent Atomic  new ","SerializedExecution  new "," Type!  fail "," Type!  set ","actress_class new  send "," Child!  new ","@opts [] _core add_child ","@opts [] _core path ","(send nil :Type!\n  (send\n    (lvar :opts) :fetch\n    (sym :name))\n  (const nil :String)\n  (const nil :Symbol)) to_s  != ","@opts [] _core nil? ","opts []  send ","Concurrent Atomic  new  value= "," Child!  new tap "]}," Concurrent Actress Context ClassMethods spawn_optionify":{"type":"method","name":"spawn_optionify","children":[],"call":["name_or_opts merge ","name_or_opts is_a? "]}," Concurrent Actress Context ClassMethods spawn!":{"type":"method","name":"spawn!","children":[],"call":["Actress  spawn! "," spawn_optionify "]}," Concurrent Actress Context ClassMethods spawn":{"type":"method","name":"spawn","children":[],"call":["Actress  spawn "," spawn_optionify "]}," Concurrent Actress Context included":{"type":"method","name":"included","children":[],"call":[]}," Concurrent Actress Context envelope":{"type":"method","name":"envelope","children":[],"call":[" raise "]}," Concurrent Actress Context initialize_core":{"type":"method","name":"initialize_core","children":[],"call":[" Type! "]}," Concurrent Actress Context terminate!":{"type":"method","name":"terminate!","children":[],"call":[" core terminate! "," core "]}," Concurrent Actress Context children":{"type":"method","name":"children","children":[],"call":[" core children "," core "]}," Concurrent Actress Context spawn":{"type":"method","name":"spawn","children":[],"call":["Actress  spawn "]}," Concurrent Actress Context on_envelope":{"type":"method","name":"on_envelope","children":[],"call":[" on_message ","envelope message "]}," Concurrent Actress Context logger":{"type":"method","name":"logger","children":[],"call":[" core logger "," core "]}," Concurrent Actress Context on_message":{"type":"method","name":"on_message","children":[],"call":[" raise "]}," Concurrent Actress AdHoc on_message":{"type":"method","name":"on_message","children":[],"call":[" instance_exec "]}," Concurrent Actress AdHoc initialize":{"type":"method","name":"initialize","children":[],"call":[" Type! ","initializer call "]}," Concurrent TimerTask add_observer":{"type":"method","name":"add_observer","children":[],"call":["@observers add_observer "]}," Concurrent SimpleActorRef run_message_loop":{"type":"method","name":"run_message_loop","children":[],"call":["@actor on_shutdown ","@stop_event set? "," observers notify_observers ","message payload "," observers ","message callback call ","message callback ","message ivar complete ","ex nil? ","message ivar ","Time  now ","@actor on_reset ","@actor on_error ","@actor receive ","@queue pop "," loop ","@queue pop  payload ","@queue pop  callback call ","@queue pop  callback ","@queue pop  ivar complete ","@queue pop  ivar ","Time  Time  now  "]}," Concurrent SimpleActorRef new_worker_thread":{"type":"method","name":"new_worker_thread","children":[],"call":[" run_message_loop ","Thread  current abort_on_exception= ","Thread  current ","Thread  new "]}," Concurrent SimpleActorRef supervise":{"type":"method","name":"supervise","children":[],"call":[" new_worker_thread ","@actor on_reset ","@thread alive? ! ","@thread alive? ","@actor on_start ","@thread nil? "," new_worker_thread  alive? ! "," new_worker_thread  alive? "," new_worker_thread  nil? "]}," Concurrent SimpleActorRef set_stop_event":{"type":"method","name":"set_stop_event","children":[],"call":["@stop_event set "]}," Concurrent SimpleActorRef join":{"type":"method","name":"join","children":[],"call":["@stop_event wait "]}," Concurrent SimpleActorRef shutdown":{"type":"method","name":"shutdown","children":[],"call":["@stop_event set ","@actor on_shutdown ","@thread kill ","@thread alive? "," shutdown? ","@mutex synchronize "]}," Concurrent SimpleActorRef post!":{"type":"method","name":"post!","children":[],"call":["ivar value "," raise ","ivar reason ","ivar incomplete? "," post ","seconds == ","timeout >= ","timeout nil? "," post  value "," post  reason "," post  incomplete? "]}," Concurrent SimpleActorRef post":{"type":"method","name":"post","children":[],"call":["@queue push ","Message  new ","IVar  new "," supervise "," shutdown? ","@mutex synchronize "," raise ","ArgumentError  new ","msg empty? ","@one_by_one post "," method "]}," Concurrent SimpleActorRef shutdown?":{"type":"method","name":"shutdown?","children":[],"call":["@stop_event set? "]}," Concurrent SimpleActorRef running?":{"type":"method","name":"running?","children":[],"call":["@stop_event set? ! ","@stop_event set? "]}," Concurrent SimpleActorRef initialize":{"type":"method","name":"initialize","children":[],"call":["@actor define_singleton_method "," method ","CopyOnNotifyObserverSet  new ","opts fetch ","Event  new ","Queue  new ","Mutex  new ","@actor on_start ","OptionsParser  get_executor_from ","OneByOne  new "]}," Concurrent RubyThreadPoolExecutor grow_pool":{"type":"method","name":"grow_pool","children":[],"call":["(ivar :@largest_length) max ","@pool length ","@pool << "," create_worker_thread ","@pool length >= ","additional times ","@queue empty? ! ","@queue empty? ","@pool length < ","@min_length - ","@min_length > ","(ivar :(ivar :@largest_length) max ) max ","@min_length -  times "]}," Concurrent RubyThreadPoolExecutor kill":{"type":"method","name":"kill","children":[],"call":["@terminator set "," drain_pool ","@queue clear ","@state == ","@mutex synchronize "]}," Concurrent RubyThreadPoolExecutor shutdown":{"type":"method","name":"shutdown","children":[],"call":["@queue << ","@pool length times ","@pool length ","@terminator set ","@pool empty? ","@queue clear ","@state == ","@mutex synchronize "]}," Concurrent RubyThreadPoolExecutor <<":{"type":"method","name":"<<","children":[],"call":[" post "]}," Concurrent RubyThreadPoolExecutor post":{"type":"method","name":"post","children":[],"call":[" grow_pool ","Time  now to_f ","Time  now "," prune_pool ","Time  now to_f - >= ","Time  now to_f - ","@queue << "," handle_overflow ","@queue length >= ","@queue length ","@max_queue != ","@state == ","@mutex synchronize "," raise ","ArgumentError  new "," block_given? "]}," Concurrent RubyThreadPoolExecutor wait_for_termination":{"type":"method","name":"wait_for_termination","children":[],"call":["@terminator wait ","timeout to_i "]}," Concurrent RubyThreadPoolExecutor shutdown?":{"type":"method","name":"shutdown?","children":[],"call":["@state != ","@mutex synchronize "]}," Concurrent RubyThreadPoolExecutor running?":{"type":"method","name":"running?","children":[],"call":["@state == ","@mutex synchronize "]}," Concurrent JavaThreadPoolExecutor kill":{"type":"method","name":"kill","children":[],"call":["@executor getQueue clear ","@executor getQueue ","@executor shutdownNow "]}," Concurrent JavaThreadPoolExecutor <<":{"type":"method","name":"<<","children":[],"call":[" raise ","@executor submit "]}," Concurrent JavaThreadPoolExecutor post":{"type":"method","name":"post","children":[],"call":[" raise ","@executor submit "," running? ","ArgumentError  new "," block_given? "]}," Concurrent JavaThreadPoolExecutor wait_for_termination":{"type":"method","name":"wait_for_termination","children":[],"call":["@executor awaitTermination "," java util concurrent TimeUnit "," java util concurrent "," java util "," java ","timeout to_i "]}," Concurrent JavaThreadPoolExecutor shutdown?":{"type":"method","name":"shutdown?","children":[],"call":["@executor isShutdown "]}," Concurrent Probe set_unless_assigned":{"type":"method","name":"set_unless_assigned","children":[],"call":[" event set "," event "," set_state ","(sym :fulfilled) include? "," mutex synchronize "," mutex "]}," Concurrent Probe initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent Async executor":{"type":"method","name":"executor","children":[],"call":["Concurrent  configuration global_task_pool ","Concurrent  configuration "]}," Concurrent ActorRef observers":{"type":"method","name":"observers","children":[],"call":["CopyOnNotifyObserverSet  new "]}," Concurrent ActorRef delete_observers":{"type":"method","name":"delete_observers","children":[],"call":["@observers delete_observers "]}," Concurrent ActorRef delete_observer":{"type":"method","name":"delete_observer","children":[],"call":["@observers delete_observer "]}," Concurrent ActorRef add_observer":{"type":"method","name":"add_observer","children":[],"call":["@observers add_observer "]}," Concurrent ActorRef <<":{"type":"method","name":"<<","children":[],"call":[" post "]}," Concurrent ActorContext included":{"type":"method","name":"included","children":[{"type":"method","name":"spawn","children":[],"asgn":[{"type":"local","name":"args","value":"opts fetch "},["opts fetch "]],"call":["Concurrent SimpleActorRef  new "," new ","opts fetch "]}],"call":[]}," Concurrent ActorContext on_error":{"type":"method","name":"on_error","children":[],"call":[]}," Concurrent ActorContext on_shutdown":{"type":"method","name":"on_shutdown","children":[],"call":[]}," Concurrent ActorContext on_reset":{"type":"method","name":"on_reset","children":[],"call":[]}," Concurrent ActorContext on_start":{"type":"method","name":"on_start","children":[],"call":[]}," Concurrent Executor kill_execution":{"type":"method","name":"kill_execution","children":[],"call":[]}," Concurrent Executor shutdown_execution":{"type":"method","name":"shutdown_execution","children":[],"call":[" stopped_event set "," stopped_event "]}," Concurrent Executor execute":{"type":"method","name":"execute","children":[],"call":[" raise "]}," Concurrent Executor init_executor":{"type":"method","name":"init_executor","children":[],"call":["Event  new ","Mutex  new "]}," Concurrent Executor wait_for_termination":{"type":"method","name":"wait_for_termination","children":[],"call":[" stopped_event wait "," stopped_event "]}," Concurrent Executor shutdown":{"type":"method","name":"shutdown","children":[],"call":[" shutdown_execution "," stop_event set "," stop_event "," running? "," mutex synchronize "," mutex "]}," Concurrent Executor shutdown?":{"type":"method","name":"shutdown?","children":[],"call":[" stopped_event set? "," stopped_event "]}," Concurrent Executor shuttingdown?":{"type":"method","name":"shuttingdown?","children":[],"call":["(or\n  (send nil :running?)\n  (send nil :shutdown?)) ! "," shutdown? "," running? "]}," Concurrent Executor running?":{"type":"method","name":"running?","children":[],"call":[" stop_event set? ! "," stop_event set? "," stop_event "]}," Concurrent Executor <<":{"type":"method","name":"<<","children":[],"call":[" post "]}," Concurrent Executor post":{"type":"method","name":"post","children":[],"call":[" execute "," running? "," mutex synchronize "," mutex "," raise ","ArgumentError  new "," block_given? "]}," Concurrent SimpleActorRef process_message":{"type":"method","name":"process_message","children":[],"call":["message callback call ","message callback ","message ivar complete ","ex nil? ","message ivar ","Time  now ","@actor class new ","@actor class ","@mutex synchronize ","@actor on_error ","message payload ","@actor receive ","Time  Time  now  ","@actor class new  class new ","@actor class new  class ","@actor class new  on_error ","@actor class new  receive "]}," Concurrent TimerSet kill":{"type":"method","name":"kill","children":[],"call":[" shutdown ","@queue clear "," mutex synchronize "," mutex "]}," Concurrent SerializedExecution work":{"type":"method","name":"work","children":[],"call":[" call_job ","@mutex unlock ","@stash shift ","@mutex lock ","job call "," synchronize "]}," Concurrent SerializedExecution call_job":{"type":"method","name":"call_job","children":[],"call":[" log "," work ","job executor post ","job executor "]}," Concurrent SerializedExecution post":{"type":"method","name":"post","children":[],"call":[" call_job ","@mutex unlock ","@stash << ","@mutex lock ","Job  new ","task nil? "," posts "," call_Job  new  "]}," Concurrent SerializedExecution initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "," synchronize "," ns_initialize "]}," Concurrent SerializedExecution call":{"type":"method","name":"call","children":[],"call":[" block call "," args "," block "]}," Concurrent configuration":{"type":"method","name":"configuration","children":[],"call":[]}," Concurrent Actress experimental_acknowledged?":{"type":"method","name":"experimental_acknowledged?","children":[],"call":[]}," Concurrent Actress i_know_it_is_experimental!":{"type":"method","name":"i_know_it_is_experimental!","children":[],"call":[]}," Concurrent Actress Envelope reject!":{"type":"method","name":"reject!","children":[],"call":[" ivar fail "," ivar "," ivar nil? "]}," Concurrent Actress Envelope address_path":{"type":"method","name":"address_path","children":[],"call":[" address path "," address "]}," Concurrent Actress Envelope sender_path":{"type":"method","name":"sender_path","children":[],"call":[" sender to_s "," sender "," sender path "," sender is_a? "]}," Concurrent Actress Envelope initialize":{"type":"method","name":"initialize","children":[],"call":[" Type! "]}," Concurrent Actress CoreDelegations actor_class":{"type":"method","name":"actor_class","children":[],"call":[" core actor_class "," core "]}," Concurrent Actress Core actor":{"type":"method","name":"actor","children":[],"call":["@actor value "]}," Concurrent Actress Context log":{"type":"method","name":"log","children":[],"call":[" core log "," core "]}," Concurrent jruby?":{"type":"method","name":"jruby?","children":[],"call":[]}," Concurrent allow_c_extensions?":{"type":"method","name":"allow_c_extensions?","children":[],"call":[]}," Concurrent Promise aggregate":{"type":"method","name":"aggregate","children":[],"call":[]}," Concurrent Promise any?":{"type":"method","name":"any?","children":[],"call":[]}," Concurrent Promise all?":{"type":"method","name":"all?","children":[],"call":[]}," Concurrent Promise zip":{"type":"method","name":"zip","children":[],"call":[" class zip "," class "]}," Concurrent Promise flat_map":{"type":"method","name":"flat_map","children":[],"call":["child on_reject ","inner on_error ","child on_fulfill ","inner on_success ","inner execute ","block call "," on_success "," on_error ","Promise  new ","ImmediateExecutor  new ","Promise  new  on_reject ","block call  on_error ","Promise  new  on_fulfill ","block call  on_success ","block call  execute "]}," Concurrent OptionsParser get_arguments_from":{"type":"method","name":"get_arguments_from","children":[],"call":["opts fetch "]}," Concurrent LazyRegister unregister":{"type":"method","name":"unregister","children":[],"call":["j delete ","h dup tap ","h dup ","@data update "," update_data "]}," Concurrent LazyRegister register":{"type":"method","name":"register","children":[],"call":["h merge ","@data update ","Delay  new "," update_data "]}," Concurrent LazyRegister registered?":{"type":"method","name":"registered?","children":[],"call":["@data get key? ","@data get "," data key? "," data "]}," Concurrent LazyRegister []":{"type":"method","name":"[]","children":[],"call":["delay value! ","@data get [] ","@data get "," data [] "," data ","@data get []  value! "," data []  value! "]}," Concurrent LazyRegister initialize":{"type":"method","name":"initialize","children":[],"call":["Atomic  new ","Hash  new ","AtomicReference  new "," data= "]}," Concurrent SerializedExecutionDelegator post":{"type":"method","name":"post","children":[],"call":["@serializer post "," running? "," raise ","ArgumentError  new "," block_given? ","Kernel  raise "]}," Concurrent SerializedExecutionDelegator initialize":{"type":"method","name":"initialize","children":[],"call":["SerializedExecution  new "]}," Concurrent SerializedExecution posts":{"type":"method","name":"posts","children":[],"call":[" call_job ","jobs first ","@stash push ","jobs [] "," synchronize ","Job  new ","posts map ","posts empty? "]}," Concurrent PerThreadExecutor wait_for_termination":{"type":"method","name":"wait_for_termination","children":[],"call":["@stopped wait "]}," Concurrent PerThreadExecutor kill":{"type":"method","name":"kill","children":[],"call":["@stopped set ","@running make_false "]}," Concurrent PerThreadExecutor shutdown":{"type":"method","name":"shutdown","children":[],"call":["@stopped set ","@count value == ","@count value ","@running make_false "]}," Concurrent PerThreadExecutor shutdown?":{"type":"method","name":"shutdown?","children":[],"call":["@stopped set? "]}," Concurrent PerThreadExecutor shuttingdown?":{"type":"method","name":"shuttingdown?","children":[],"call":["@stopped set? ! ","@stopped set? ","@running false? "]}," Concurrent PerThreadExecutor running?":{"type":"method","name":"running?","children":[],"call":["@running true? "]}," Concurrent PerThreadExecutor initialize":{"type":"method","name":"initialize","children":[],"call":["Concurrent AtomicFixnum  new ","Concurrent Event  new ","Concurrent AtomicBoolean  new "," deprecated "]}," Concurrent IndirectImmediateExecutor post":{"type":"method","name":"post","children":[],"call":["event wait ","event set ","task call ","@internal_executor post ","Concurrent Event  new "," running? "," raise ","ArgumentError  new "," block_given? ","Concurrent Event  new  wait ","Concurrent Event  new  set "]}," Concurrent IndirectImmediateExecutor initialize":{"type":"method","name":"initialize","children":[],"call":["PerThreadExecutor  new ","SimpleExecutorService  new "]}," Concurrent ImmediateExecutor wait_for_termination":{"type":"method","name":"wait_for_termination","children":[],"call":["@stopped wait "]}," Concurrent ImmediateExecutor shutdown":{"type":"method","name":"shutdown","children":[],"call":["@stopped set "]}," Concurrent ImmediateExecutor shutdown?":{"type":"method","name":"shutdown?","children":[],"call":["@stopped set? "]}," Concurrent ImmediateExecutor shuttingdown?":{"type":"method","name":"shuttingdown?","children":[],"call":[]}," Concurrent ImmediateExecutor running?":{"type":"method","name":"running?","children":[],"call":[" shutdown? ! "," shutdown? "]}," Concurrent ImmediateExecutor initialize":{"type":"method","name":"initialize","children":[],"call":["Concurrent Event  new "]}," Concurrent SerialExecutor serialized?":{"type":"method","name":"serialized?","children":[],"call":[]}," Concurrent Executor serialized?":{"type":"method","name":"serialized?","children":[],"call":[]}," Concurrent Executor handle_fallback":{"type":"method","name":"handle_fallback","children":[],"call":[" fail "," log "," raise "]}," Concurrent Delay wait":{"type":"method","name":"wait","children":[],"call":[" execute_task_once "," value "]}," Concurrent call_dataflow":{"type":"method","name":"call_dataflow","children":[],"call":["input add_observer ","inputs each ","result execute ","DependencyCounter  new ","inputs size ","inputs empty? ","block call ","input send ","inputs map ","Future  new "," raise ","ArgumentError  new ","input is_a? ","inputs all? "," block_given? ","executor nil? ","inputs inspect "]}," Concurrent dataflow_with!":{"type":"method","name":"dataflow_with!","children":[],"call":[" call_dataflow "]}," Concurrent dataflow!":{"type":"method","name":"dataflow!","children":[],"call":[" dataflow_with! ","Concurrent  configuration global_task_pool ","Concurrent  configuration ","Concurrent  global_io_executor "]}," Concurrent finalize_global_executors":{"type":"method","name":"finalize_global_executors","children":[],"call":[]}," Concurrent AtomicNumericCompareAndSetWrapper compare_and_set":{"type":"method","name":"compare_and_set","children":[],"call":[" _compare_and_set ","old == ","old kind_of? "," get ","old_value kind_of? "," get  == "," get  kind_of? "," get _value kind_of? "]}," Concurrent MutexAtomic _compare_and_set":{"type":"method","name":"_compare_and_set","children":[],"call":["@mutex unlock ","@value equal? ","@mutex try_lock "]}," Concurrent MutexAtomic get_and_set":{"type":"method","name":"get_and_set","children":[],"call":["@mutex synchronize "]}," Concurrent MutexAtomic set":{"type":"method","name":"set","children":[],"call":["@mutex synchronize "]}," Concurrent MutexAtomic get":{"type":"method","name":"get","children":[],"call":["@mutex synchronize "]}," Concurrent AtomicDirectUpdate try_update":{"type":"method","name":"try_update","children":[],"call":[" raise "," compare_and_set "," get "]}," Concurrent AtomicDirectUpdate update":{"type":"method","name":"update","children":[],"call":[" compare_and_set "," get "]}," Concurrent AbstractThreadLocalVar bind":{"type":"method","name":"bind","children":[],"call":[" set ","value nil? "," raise "," value= "," value "," block_given? "]}," Concurrent AbstractThreadLocalVar value=":{"type":"method","name":"value=","children":[],"call":[" bind "," raise "]}," Concurrent AbstractThreadLocalVar value":{"type":"method","name":"value","children":[],"call":["value == ","value nil? "," get "," raise "," get  == "," get  nil? "]}," Concurrent AbstractThreadLocalVar initialize":{"type":"method","name":"initialize","children":[],"call":[" allocate_storage "," block_given? "," raise "]}," Concurrent AbstractThreadLocalVar ThreadLocalJavaStorage set":{"type":"method","name":"set","children":[],"call":["@var set "]}," Concurrent AbstractThreadLocalVar ThreadLocalJavaStorage get":{"type":"method","name":"get","children":[],"call":["@var get "]}," Concurrent AbstractThreadLocalVar ThreadLocalJavaStorage allocate_storage":{"type":"method","name":"allocate_storage","children":[],"call":[" java lang ThreadLocal new "," java lang ThreadLocal "," java lang "," java "]}," Concurrent AbstractThreadLocalVar ThreadLocalRubyStorage set":{"type":"method","name":"set","children":[],"call":["@storage delete ","block call "," block_given? ","@storage []= ","Thread  current "]}," Concurrent AbstractThreadLocalVar ThreadLocalRubyStorage get":{"type":"method","name":"get","children":[],"call":["@storage [] ","Thread  current "]}," Concurrent AbstractThreadLocalVar ThreadLocalRubyStorage allocate_storage":{"type":"method","name":"allocate_storage","children":[],"call":["Ref WeakKeyMap  new "]}," Concurrent Synchronization synchronize":{"type":"method","name":"synchronize","children":[],"call":["@mutex synchronize ","Mutex  new ","Rubinius  unlock ","Rubinius  lock ","JRuby  reference0 synchronized ","JRuby  reference0 "]}," Concurrent JavaSemaphore reduce_permits":{"type":"method","name":"reduce_permits","children":[],"call":["@semaphore reducePermits "," fail ","reduction >= ","reduction is_a? "]}," Concurrent JavaSemaphore release":{"type":"method","name":"release","children":[],"call":["@semaphore release "," fail ","permits > ","permits is_a? "]}," Concurrent JavaSemaphore try_acquire":{"type":"method","name":"try_acquire","children":[],"call":["@semaphore tryAcquire "," java util concurrent TimeUnit "," java util concurrent "," java util "," java ","timeout nil? "," fail ","permits > ","permits is_a? "]}," Concurrent JavaSemaphore drain_permits":{"type":"method","name":"drain_permits","children":[],"call":["@semaphore drainPermits "]}," Concurrent JavaSemaphore available_permits":{"type":"method","name":"available_permits","children":[],"call":["@semaphore availablePermits "]}," Concurrent JavaSemaphore acquire":{"type":"method","name":"acquire","children":[],"call":["@semaphore acquire "," fail ","permits > ","permits is_a? "]}," Concurrent JavaSemaphore initialize":{"type":"method","name":"initialize","children":[],"call":[" java util concurrent Semaphore new "," java util concurrent Semaphore "," java util concurrent "," java util "," java "," fail ","count >= ","count is_a? "]}," Concurrent MutexSemaphore try_acquire_timed":{"type":"method","name":"try_acquire_timed","children":[],"call":["remaining can_wait? ","@condition wait ","remaining remaining_time ","@condition signal "," try_acquire_now ! "," try_acquire_now ","Condition Result  new "," ns_wait_until ","@condition wait  can_wait? ","Condition Result  new  can_wait? ","@condition wait  @condition wait _time ","Condition Result  new  Condition Result  new _time "]}," Concurrent MutexSemaphore try_acquire_now":{"type":"method","name":"try_acquire_now","children":[],"call":["@free >= "]}," Concurrent MutexSemaphore reduce_permits":{"type":"method","name":"reduce_permits","children":[],"call":["@mutex synchronize "," fail ","reduction >= ","reduction is_a? "," synchronize ","Utility NativeInteger  ensure_positive ","Utility NativeInteger  ensure_integer_and_bounds "]}," Concurrent MutexSemaphore release":{"type":"method","name":"release","children":[],"call":["@condition signal ","permits times ","@mutex synchronize "," fail ","permits > ","permits is_a? "," ns_signal "," synchronize ","Utility NativeInteger  ensure_positive ","Utility NativeInteger  ensure_integer_and_bounds "]}," Concurrent MutexSemaphore try_acquire":{"type":"method","name":"try_acquire","children":[],"call":[" try_acquire_timed "," try_acquire_now ","timeout nil? ","@mutex synchronize "," fail ","permits > ","permits is_a? "," synchronize ","Utility NativeInteger  ensure_positive ","Utility NativeInteger  ensure_integer_and_bounds "," release "," block_given? "]}," Concurrent MutexSemaphore drain_permits":{"type":"method","name":"drain_permits","children":[],"call":["@free tap ","@mutex synchronize "," synchronize "]}," Concurrent MutexSemaphore available_permits":{"type":"method","name":"available_permits","children":[],"call":["@mutex synchronize "," synchronize "]}," Concurrent MutexSemaphore acquire":{"type":"method","name":"acquire","children":[],"call":[" try_acquire_timed ","@mutex synchronize "," fail ","permits > ","permits is_a? "," synchronize ","Utility NativeInteger  ensure_positive ","Utility NativeInteger  ensure_integer_and_bounds "," release "," block_given? "]}," Concurrent MutexSemaphore initialize":{"type":"method","name":"initialize","children":[],"call":["Condition  new ","Mutex  new "," fail ","count >= ","count is_a? "," ns_initialize "," synchronize ","Utility NativeInteger  ensure_integer_and_bounds "]}," Concurrent Actor i_know_it_is_experimental!":{"type":"method","name":"i_know_it_is_experimental!","children":[],"call":[]}," Concurrent Actor spawn_optionify":{"type":"method","name":"spawn_optionify","children":[],"call":[]}," Concurrent Actor spawn!":{"type":"method","name":"spawn!","children":[],"call":[]}," Concurrent Actor spawn":{"type":"method","name":"spawn","children":[],"call":[]}," Concurrent Actor root":{"type":"method","name":"root","children":[],"call":[]}," Concurrent Actor current":{"type":"method","name":"current","children":[],"call":[]}," Concurrent Actor Utils AbstractWorker work":{"type":"method","name":"work","children":[],"call":[" raise "]}," Concurrent Actor Utils AbstractWorker on_message":{"type":"method","name":"on_message","children":[],"call":["@balancer << "," work "]}," Concurrent Actor Utils AbstractWorker initialize":{"type":"method","name":"initialize","children":[],"call":["@balancer << "]}," Concurrent Actor Utils Pool on_message":{"type":"method","name":"on_message","children":[],"call":[" redirect "]}," Concurrent Actor Utils Pool initialize":{"type":"method","name":"initialize","children":[],"call":[" Type! ","@workers each ","Array  new ","worker_initializer curry [] ","worker_initializer curry ","Balancer  spawn ","Array  new  each "]}," Concurrent Actor Utils Broadcast filtered_receivers":{"type":"method","name":"filtered_receivers","children":[],"call":[]}," Concurrent Actor Utils Broadcast on_message":{"type":"method","name":"on_message","children":[],"call":["r << "," filtered_receivers each "," filtered_receivers ","@receivers include? "," envelope sender "," envelope ","@receivers delete ! ! ","@receivers delete ! ","@receivers delete ","@receivers add "," envelope sender is_a? "]}," Concurrent Actor Utils Broadcast initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new "]}," Concurrent Actor Utils Balancer distribute":{"type":"method","name":"distribute","children":[],"call":[" redirect ","@buffer shift ","@receivers shift ","@buffer empty? ! ","@buffer empty? ","@receivers empty? ! ","@receivers empty? "]}," Concurrent Actor Utils Balancer on_message":{"type":"method","name":"on_message","children":[],"call":[" distribute ","@buffer << "," envelope ","@receivers include? "," envelope sender ","@receivers delete ","@receivers << "]}," Concurrent Actor Utils Balancer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent Actor Utils AdHoc on_message":{"type":"method","name":"on_message","children":[],"call":[" instance_exec "]}," Concurrent Actor Utils AdHoc initialize":{"type":"method","name":"initialize","children":[],"call":[" Type! ","initializer call "]}," Concurrent Actor TypeCheck error":{"type":"method","name":"error","children":[],"call":[]}," Concurrent Actor TypeCheck Child!":{"type":"method","name":"Child!","children":[],"call":["TypeCheck  error "," Child? "]}," Concurrent Actor TypeCheck Child?":{"type":"method","name":"Child?","children":[],"call":["value <= ","types any? "," Type? "]}," Concurrent Actor TypeCheck Match!":{"type":"method","name":"Match!","children":[],"call":["TypeCheck  error "," Match? "]}," Concurrent Actor TypeCheck Match?":{"type":"method","name":"Match?","children":[],"call":["t === ","types any? "]}," Concurrent Actor TypeCheck Type!":{"type":"method","name":"Type!","children":[],"call":["TypeCheck  error "," Type? "]}," Concurrent Actor TypeCheck Type?":{"type":"method","name":"Type?","children":[],"call":["value is_a? ","types any? "]}," Concurrent Actor Root behaviour_definition":{"type":"method","name":"behaviour_definition","children":[],"call":["Behaviour  user_messages ","Behaviour  base "]}," Concurrent Actor Root dead_letter_routing":{"type":"method","name":"dead_letter_routing","children":[],"call":[]}," Concurrent Actor Root on_message":{"type":"method","name":"on_message","children":[],"call":["message == ","Actor  spawn ","message [] ","message first == ","message first ","message is_a? "]}," Concurrent Actor Root initialize":{"type":"method","name":"initialize","children":[],"call":["Core  new reference ","Core  new "," reference "]}," Concurrent Actor Reference ==":{"type":"method","name":"==","children":[],"call":["other send == "," core ","other send "," Type? "," class "]}," Concurrent Actor Reference to_s":{"type":"method","name":"to_s","children":[],"call":[" actor_class "," path "," class "]}," Concurrent Actor Reference dead_letter_routing":{"type":"method","name":"dead_letter_routing","children":[],"call":[" core dead_letter_routing "," core "]}," Concurrent Actor Reference message":{"type":"method","name":"message","children":[],"call":[" core on_envelope ","Envelope  new ","Thread  current ","Actor  current "," core "]}," Concurrent Actor Reference ask!":{"type":"method","name":"ask!","children":[],"call":[" ask value! "," ask "]}," Concurrent Actor Reference ask":{"type":"method","name":"ask","children":[],"call":[" message "]}," Concurrent Actor Reference tell":{"type":"method","name":"tell","children":[],"call":[" message "]}," Concurrent Actor Reference initialize":{"type":"method","name":"initialize","children":[],"call":[" Type! "]}," Concurrent Actor PublicDelegations context_class":{"type":"method","name":"context_class","children":[],"call":[" core context_class "," core "]}," Concurrent Actor PublicDelegations executor":{"type":"method","name":"executor","children":[],"call":[" core executor "," core "]}," Concurrent Actor PublicDelegations reference":{"type":"method","name":"reference","children":[],"call":[" core reference "," core "]}," Concurrent Actor PublicDelegations parent":{"type":"method","name":"parent","children":[],"call":[" core parent "," core "]}," Concurrent Actor PublicDelegations path":{"type":"method","name":"path","children":[],"call":[" core path "," core "]}," Concurrent Actor PublicDelegations name":{"type":"method","name":"name","children":[],"call":[" core name "," core "]}," Concurrent Actor InternalDelegations behaviour!":{"type":"method","name":"behaviour!","children":[],"call":[" core behaviour! "," core "]}," Concurrent Actor InternalDelegations behaviour":{"type":"method","name":"behaviour","children":[],"call":[" core behaviour "," core "]}," Concurrent Actor InternalDelegations context":{"type":"method","name":"context","children":[],"call":[" core context "," core "]}," Concurrent Actor InternalDelegations redirect":{"type":"method","name":"redirect","children":[],"call":["reference message ","envelope ivar ","envelope message "]}," Concurrent Actor InternalDelegations dead_letter_routing":{"type":"method","name":"dead_letter_routing","children":[],"call":[" context dead_letter_routing "," context "]}," Concurrent Actor InternalDelegations log":{"type":"method","name":"log","children":[],"call":[" core log "," core "]}," Concurrent Actor InternalDelegations terminate!":{"type":"method","name":"terminate!","children":[],"call":[" behaviour! terminate! "," behaviour! "]}," Concurrent Actor InternalDelegations children":{"type":"method","name":"children","children":[],"call":[" core children "," core "]}," Concurrent Actor UnknownMessage initialize":{"type":"method","name":"initialize","children":[],"call":["envelope message inspect ","envelope message "," Type! "]}," Concurrent Actor ActorTerminated initialize":{"type":"method","name":"initialize","children":[],"call":["reference path "," Type! "]}," Concurrent Actor Envelope reject!":{"type":"method","name":"reject!","children":[],"call":[" ivar fail "," ivar "," ivar nil? "]}," Concurrent Actor Envelope address_path":{"type":"method","name":"address_path","children":[],"call":[" address path "," address "]}," Concurrent Actor Envelope sender_path":{"type":"method","name":"sender_path","children":[],"call":[" sender to_s "," sender "," sender path "," sender is_a? "]}," Concurrent Actor Envelope initialize":{"type":"method","name":"initialize","children":[],"call":[" Type! "]}," Concurrent Actor DefaultDeadLetterHandler on_message":{"type":"method","name":"on_message","children":[],"call":[" log ","dead_letter inspect "]}," Concurrent Actor Core initialize_behaviours":{"type":"method","name":"initialize_behaviours","children":[],"call":["@behaviours []= ","behaviour new ","@behaviour_definition reverse reduce ","@behaviour_definition reverse "," Type! ","v [] "," Child! "," Match! ","v size ","(send nil :Type!\n  (or\n    (send\n      (lvar :opts) :[]\n      (sym :behaviour_definition))\n    (send\n      (ivar :@context) :behaviour_definition))\n  (const nil :Array)) each ","@context behaviour_definition ","opts [] "]}," Concurrent Actor Core handle_envelope":{"type":"method","name":"handle_envelope","children":[],"call":["@first_behaviour on_envelope "," log ","envelope sender ","envelope message inspect ","envelope message "]}," Concurrent Actor Core build_context":{"type":"method","name":"build_context","children":[],"call":["@context send "]}," Concurrent Actor Core allocate_context":{"type":"method","name":"allocate_context","children":[],"call":["@context_class allocate ","@context_class allocate _class allocate "]}," Concurrent Actor Core behaviour!":{"type":"method","name":"behaviour!","children":[],"call":["@behaviours fetch "]}," Concurrent Actor Core behaviour":{"type":"method","name":"behaviour","children":[],"call":["@behaviours [] "]}," Concurrent Actor Core broadcast":{"type":"method","name":"broadcast","children":[],"call":["@first_behaviour on_event "]}," Concurrent Actor Core schedule_execution":{"type":"method","name":"schedule_execution","children":[],"call":["Thread  current []= ","Thread  current "," log "," reference "," synchronize ","@serialized_execution post "]}," Concurrent Actor Core log":{"type":"method","name":"log","children":[],"call":[]}," Concurrent Actor Core guard!":{"type":"method","name":"guard!","children":[],"call":[" raise ","Actor  current "," reference ","Actor  current == "]}," Concurrent Actor Core on_envelope":{"type":"method","name":"on_envelope","children":[],"call":[" handle_envelope "," schedule_execution "]}," Concurrent Actor Core remove_child":{"type":"method","name":"remove_child","children":[],"call":["@children delete "," Type! "," guard! "]}," Concurrent Actor Core add_child":{"type":"method","name":"add_child","children":[],"call":["@children add "," Type! "," guard! "]}," Concurrent Actor Core children":{"type":"method","name":"children","children":[],"call":["@children to_a "," guard! "]}," Concurrent Actor Core dead_letter_routing":{"type":"method","name":"dead_letter_routing","children":[],"call":["@context dead_letter_routing "]}," Concurrent Actor Core parent":{"type":"method","name":"parent","children":[],"call":["@parent_core reference "]}," Concurrent Actor Core initialize":{"type":"method","name":"initialize","children":[],"call":["initialized fail ","@first_behaviour terminate! "," log ","initialized set "," reference "," handle_envelope ","Envelope  new ","messages each "," build_context "," schedule_execution ","messages << ","opts [] "," Type! ","opts fetch "," initialize_behaviours ","@parent_core add_child ","File  join ","@parent_core path "," raise ","@name != ","@parent_core nil? ","parent send ","(send nil :Type!\n  (send\n    (lvar :opts) :fetch\n    (sym :name))\n  (const nil :String)\n  (const nil :Symbol)) to_s ","(send nil :Child!\n  (or\n    (send\n      (lvar :opts) :[]\n      (sym :reference_class))\n    (send\n      (ivar :@context) :default_reference_class))\n  (const nil :Reference)) new "," Child! ","@context default_reference_class ","@executor is_a? ","Concurrent  configuration global_task_pool ","Concurrent  configuration "," allocate_context ","Set  new ","SerializedExecution  new ","Array  new "," synchronize "," Type!  fail "," Type!  set ","@opts [] _core add_child ","@opts [] _core path ","(send nil :Type!\n  (send\n    (lvar :opts) :fetch\n    (sym :name))\n  (const nil :String)\n  (const nil :Symbol)) to_s  != ","@opts [] _core nil? ","opts []  send "," Type!  is_a? "]}," Concurrent Actor RestartingContext behaviour_definition":{"type":"method","name":"behaviour_definition","children":[],"call":["Behaviour  restarting_behaviour_definition "]}," Concurrent Actor Context behaviour_definition":{"type":"method","name":"behaviour_definition","children":[],"call":["Behaviour  basic_behaviour_definition "]}," Concurrent Actor AbstractContext spawn_optionify":{"type":"method","name":"spawn_optionify","children":[],"call":[]}," Concurrent Actor AbstractContext spawn!":{"type":"method","name":"spawn!","children":[],"call":[]}," Concurrent Actor AbstractContext spawn":{"type":"method","name":"spawn","children":[],"call":[]}," Concurrent Actor AbstractContext initialize_core":{"type":"method","name":"initialize_core","children":[],"call":[" Type! "]}," Concurrent Actor AbstractContext ask":{"type":"method","name":"ask","children":[],"call":[" raise "]}," Concurrent Actor AbstractContext tell":{"type":"method","name":"tell","children":[],"call":[" reference tell "," reference "]}," Concurrent Actor AbstractContext default_reference_class":{"type":"method","name":"default_reference_class","children":[],"call":[]}," Concurrent Actor AbstractContext envelope":{"type":"method","name":"envelope","children":[],"call":[" raise "]}," Concurrent Actor AbstractContext behaviour_definition":{"type":"method","name":"behaviour_definition","children":[],"call":[" raise "]}," Concurrent Actor AbstractContext dead_letter_routing":{"type":"method","name":"dead_letter_routing","children":[],"call":[" parent dead_letter_routing "," parent "]}," Concurrent Actor AbstractContext pass":{"type":"method","name":"pass","children":[],"call":[" core behaviour! pass "," envelope "," core behaviour! "," core "]}," Concurrent Actor AbstractContext on_envelope":{"type":"method","name":"on_envelope","children":[],"call":[" on_message ","envelope message "]}," Concurrent Actor AbstractContext on_event":{"type":"method","name":"on_event","children":[],"call":[]}," Concurrent Actor AbstractContext on_message":{"type":"method","name":"on_message","children":[],"call":[" raise "]}," Concurrent Actor Behaviour user_messages":{"type":"method","name":"user_messages","children":[],"call":[]}," Concurrent Actor Behaviour supervised":{"type":"method","name":"supervised","children":[],"call":[]}," Concurrent Actor Behaviour base":{"type":"method","name":"base","children":[],"call":[]}," Concurrent Actor Behaviour restarting_behaviour_definition":{"type":"method","name":"restarting_behaviour_definition","children":[],"call":[]}," Concurrent Actor Behaviour basic_behaviour_definition":{"type":"method","name":"basic_behaviour_definition","children":[],"call":[]}," Concurrent Actor Behaviour Termination terminate!":{"type":"method","name":"terminate!","children":[],"call":[" parent << "," parent "," broadcast "," terminated set "," terminated "," terminated? "]}," Concurrent Actor Behaviour Termination on_envelope":{"type":"method","name":"on_envelope","children":[],"call":[" pass "," reject_envelope "," terminated? "," terminated "," terminate! ","envelope message "]}," Concurrent Actor Behaviour Termination terminated?":{"type":"method","name":"terminated?","children":[],"call":["@terminated set? "]}," Concurrent Actor Behaviour Termination initialize":{"type":"method","name":"initialize","children":[],"call":["Event  new "]}," Concurrent Actor Behaviour TerminatesChildren on_event":{"type":"method","name":"on_event","children":[],"call":["(send\n  (send nil :children) :map) each ","ch ask "," children map "," children ","event == "]}," Concurrent Actor Behaviour Supervising on_envelope":{"type":"method","name":"on_envelope","children":[],"call":[" pass ","ch << ","receivers each ","envelope sender "," children ","@strategy == ","envelope message "," children  each "]}," Concurrent Actor Behaviour Supervising initialize":{"type":"method","name":"initialize","children":[],"call":[" Match! "]}," Concurrent Actor Behaviour Supervised on_event":{"type":"method","name":"on_event","children":[],"call":["event == "]}," Concurrent Actor Behaviour Supervised un_supervise":{"type":"method","name":"un_supervise","children":[],"call":[" behaviour! unlink "," behaviour! ","@supervisor == "]}," Concurrent Actor Behaviour Supervised supervise":{"type":"method","name":"supervise","children":[],"call":[" behaviour! link "," behaviour! "]}," Concurrent Actor Behaviour Supervised on_envelope":{"type":"method","name":"on_envelope","children":[],"call":[" pass ","@supervisor == ","envelope sender "," un_supervise "," supervisor "," supervise ","envelope message "]}," Concurrent Actor Behaviour Supervised initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent Actor Behaviour SetResults on_envelope":{"type":"method","name":"on_envelope","children":[],"call":["envelope ivar fail ","envelope ivar ","envelope ivar nil? "," raise "," behaviour! pause! "," behaviour! "," terminate! "," error_strategy "," log ","envelope ivar set ","envelope ivar nil? ! ","result != "," pass "," pass  != "]}," Concurrent Actor Behaviour SetResults initialize":{"type":"method","name":"initialize","children":[],"call":[" Match! "]}," Concurrent Actor Behaviour RemovesChild on_envelope":{"type":"method","name":"on_envelope","children":[],"call":[" pass "," core remove_child ","envelope sender "," core ","envelope message == ","envelope message "]}," Concurrent Actor Behaviour Pausing on_event":{"type":"method","name":"on_event","children":[],"call":["@buffer clear "," pass "," core schedule_execution "," core ","@buffer each "," reject_envelope "]}," Concurrent Actor Behaviour Pausing restart!":{"type":"method","name":"restart!","children":[],"call":[" broadcast "," reset! "]}," Concurrent Actor Behaviour Pausing reset!":{"type":"method","name":"reset!","children":[],"call":[" broadcast "," resume! "," core build_context "," core "," core allocate_context "]}," Concurrent Actor Behaviour Pausing resume!":{"type":"method","name":"resume!","children":[],"call":[" broadcast "]}," Concurrent Actor Behaviour Pausing pause!":{"type":"method","name":"pause!","children":[],"call":[" broadcast "]}," Concurrent Actor Behaviour Pausing on_envelope":{"type":"method","name":"on_envelope","children":[],"call":[" pass ","@buffer << "," restart! "," reset! "," resume! "," pause! ","envelope message "]}," Concurrent Actor Behaviour Pausing initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent Actor Behaviour Linking on_event":{"type":"method","name":"on_event","children":[],"call":["@linked clear ","event == ","a << ","@linked each "]}," Concurrent Actor Behaviour Linking unlink":{"type":"method","name":"unlink","children":[],"call":["@linked delete "]}," Concurrent Actor Behaviour Linking link":{"type":"method","name":"link","children":[],"call":["@linked add "]}," Concurrent Actor Behaviour Linking on_envelope":{"type":"method","name":"on_envelope","children":[],"call":[" pass ","@linked include? ","envelope sender "," unlink "," link ","envelope message "]}," Concurrent Actor Behaviour Linking initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new "]}," Concurrent Actor Behaviour ExecutesContext on_event":{"type":"method","name":"on_event","children":[],"call":[" core log ","event inspect "," core "," context on_event "," context "]}," Concurrent Actor Behaviour ExecutesContext on_envelope":{"type":"method","name":"on_envelope","children":[],"call":[" context on_envelope "," context "]}," Concurrent Actor Behaviour ErrorsOnUnknownMessage on_envelope":{"type":"method","name":"on_envelope","children":[],"call":[" raise "]}," Concurrent Actor Behaviour Buffer on_event":{"type":"method","name":"on_event","children":[],"call":["@buffer clear "," reject_envelope ","@buffer each "]}," Concurrent Actor Behaviour Buffer process_envelope":{"type":"method","name":"process_envelope","children":[],"call":[" process_envelopes? "," core schedule_execution "," core "," pass ","@buffer shift "," process_@buffer shift s? "]}," Concurrent Actor Behaviour Buffer process_envelopes?":{"type":"method","name":"process_envelopes?","children":[],"call":[" process_envelope ","@buffer empty? "]}," Concurrent Actor Behaviour Buffer on_envelope":{"type":"method","name":"on_envelope","children":[],"call":[" process_envelopes? ","@buffer push "]}," Concurrent Actor Behaviour Buffer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent Actor Behaviour Awaits on_envelope":{"type":"method","name":"on_envelope","children":[],"call":[" pass ","envelope message == ","envelope message "]}," Concurrent Actor Behaviour Abstract reject_envelope":{"type":"method","name":"reject_envelope","children":[],"call":[" log ","envelope sender_path ","envelope message "," dead_letter_routing << "," dead_letter_routing ","envelope ivar ","envelope reject! ","ActorTerminated  new "," reference "]}," Concurrent Actor Behaviour Abstract broadcast":{"type":"method","name":"broadcast","children":[],"call":[" core broadcast "," core "]}," Concurrent Actor Behaviour Abstract on_event":{"type":"method","name":"on_event","children":[],"call":[" subsequent on_event "," subsequent "]}," Concurrent Actor Behaviour Abstract pass":{"type":"method","name":"pass","children":[],"call":[" subsequent on_envelope "," subsequent "]}," Concurrent Actor Behaviour Abstract on_envelope":{"type":"method","name":"on_envelope","children":[],"call":[" pass "]}," Concurrent Actor Behaviour Abstract initialize":{"type":"method","name":"initialize","children":[],"call":[" Type! "]}," Concurrent Utility ProcessorCounter compute_physical_processor_count":{"type":"method","name":"compute_physical_processor_count","children":[],"call":[" processor_count ","ppc > ","result_set to_enum collect reduce ","result_set to_enum collect ","result_set to_enum ","WIN32OLE  connect ExecQuery ","WIN32OLE  connect "," require ","cores count ","cores []= ","cores [] ! ","cores [] ","phy + + ","ln [] ","phy + ","ln start_with? ","IO  read scan ","IO  read ","IO  popen read to_i ","IO  popen read ","IO  popen ","RbConfig CONFIG  [] ","IO  popen to_i ","WIN32OLE  connect ExecQuery  to_enum collect reduce ","WIN32OLE  connect ExecQuery  to_enum collect ","WIN32OLE  connect ExecQuery  to_enum ","ln []  + + ","ln []  + "]}," Concurrent Utility ProcessorCounter compute_processor_count":{"type":"method","name":"compute_processor_count","children":[],"call":["IO  popen read to_i ","IO  popen read ","IO  popen ","File  executable? ","os_name =~ ","IO  popen read count ","out read scan size ","out read scan ","out read ","IO  popen read scan size ","IO  popen read scan ","IO  read scan size ","IO  read scan ","IO  read ","File  readable? ","result to_enum collect reduce ","result to_enum collect ","result to_enum ","WIN32OLE  connect ExecQuery ","WIN32OLE  connect "," require ","RbConfig CONFIG  [] "," java lang Runtime getRuntime availableProcessors "," java lang Runtime getRuntime "," java lang Runtime "," java lang "," java ","Concurrent  on_jruby? ","Truffle Primitive  logical_processors ","Concurrent  on_truffle? ","IO  popen to_i ","IO  popen count ","IO  popen scan size ","IO  popen scan ","(lvasgn :cpuinfo_count\n  (send\n    (send\n      (send\n        (const nil :IO) :read\n        (str \"/proc/cpuinfo\")) :scan\n      (regexp\n        (str \"^processor\")\n        (regopt))) :size)) > ","Etc  nprocessors ","Etc  respond_to? ","RbConfig CONFIG  []  =~ ","WIN32OLE  connect ExecQuery  to_enum collect reduce ","WIN32OLE  connect ExecQuery  to_enum collect ","WIN32OLE  connect ExecQuery  to_enum ","(lvasgn :IO  read scan size \n  (send\n    (send\n      (send\n        (const nil :IO) :read\n        (str \"/proc/cpuinfo\")) :scan\n      (regexp\n        (str \"^processor\")\n        (regopt))) :size)) > "]}," Concurrent Utility ProcessorCounter physical_processor_count":{"type":"method","name":"physical_processor_count","children":[],"call":["@physical_processor_count value "]}," Concurrent Utility ProcessorCounter processor_count":{"type":"method","name":"processor_count","children":[],"call":["@processor_count value "]}," Concurrent Utility ProcessorCounter initialize":{"type":"method","name":"initialize","children":[],"call":[" compute_physical_processor_count ","Delay  new "," compute_processor_count "]}," Concurrent Utility NativeExtensionLoader allow_c_extensions?":{"type":"method","name":"allow_c_extensions?","children":[],"call":["Concurrent  on_cruby? "]}," Concurrent monotonic_time":{"type":"method","name":"monotonic_time","children":[],"call":["GLOBAL_MONOTONIC_CLOCK  get_time "," java lang System nanoTime / ","TIME_UNITS  [] "," java lang System nanoTime "," java lang System "," java lang "," java ","Process  clock_gettime "]}," Concurrent get_time":{"type":"method","name":"get_time","children":[],"call":["@last_time < ","Time  now to_f ","Time  now "," synchronize "," java lang System nanoTime / "," java lang System nanoTime "," java lang System "," java lang "," java ","Process  clock_gettime ","now to_i ","@time_units [] ","Time  Time  now to_f  to_f ","Time  now to_i  to_f ","Time  Time  now to_f  ","Time  now to_i  ","Time  now to_f  to_i ","now to_i  to_i "]}," Concurrent initialize":{"type":"method","name":"initialize","children":[],"call":[" ensure_ivar_visibility! ","Time  now to_f ","Time  now ","@time_units merge! ","(send\n  (const nil :Hash) :new) compare_by_identity "," raise ","Hash  new ","(send\n  (const nil :Hash) :new) compare_by_identity  merge! "]}," Concurrent Utility EngineDetector ruby_version":{"type":"method","name":"ruby_version","children":[],"call":["comparisons fetch include? ","comparisons fetch ","RUBY_VERSION  split map <=> ","RUBY_VERSION  split map ","RUBY_VERSION  split ","version split map <=> ","version split map ","version split "]}," Concurrent Utility EngineDetector ruby_engine":{"type":"method","name":"ruby_engine","children":[],"call":[]}," Concurrent Utility EngineDetector on_windows?":{"type":"method","name":"on_windows?","children":[],"call":["(send\n  (send\n    (const\n      (const nil :RbConfig) :CONFIG) :[]\n    (str \"host_os\")) :=~\n  (regexp\n    (str \"mswin|mingw|cygwin\")\n    (regopt))) nil? ! ","(send\n  (send\n    (const\n      (const nil :RbConfig) :CONFIG) :[]\n    (str \"host_os\")) :=~\n  (regexp\n    (str \"mswin|mingw|cygwin\")\n    (regopt))) nil? ","RbConfig CONFIG  [] =~ ","RbConfig CONFIG  [] "]}," Concurrent Utility EngineDetector on_rbx?":{"type":"method","name":"on_rbx?","children":[],"call":[" ruby_engine == "," ruby_engine "]}," Concurrent Utility EngineDetector on_cruby?":{"type":"method","name":"on_cruby?","children":[],"call":[" ruby_engine == "," ruby_engine ","RUBY_ENGINE  == "]}," Concurrent Utility EngineDetector on_jruby_9000?":{"type":"method","name":"on_jruby_9000?","children":[],"call":["0 == ","JRUBY_VERSION  =~ "," on_jruby? "," ruby_version "]}," Concurrent Utility EngineDetector on_jruby?":{"type":"method","name":"on_jruby?","children":[],"call":[" ruby_engine == "," ruby_engine ","RUBY_ENGINE  == "]}," Concurrent AtExitImplementation runner":{"type":"method","name":"runner","children":[],"call":[" run "," synchronize "]}," Concurrent AtExitImplementation ns_initialize":{"type":"method","name":"ns_initialize","children":[],"call":[]}," Concurrent AtExitImplementation run":{"type":"method","name":"run","children":[],"call":["handlers keys ","Concurrent  global_logger call ","Concurrent  global_logger ","handler call ","handlers each "," synchronize "," log "]}," Concurrent AtExitImplementation enabled=":{"type":"method","name":"enabled=","children":[],"call":[" synchronize "]}," Concurrent AtExitImplementation enabled?":{"type":"method","name":"enabled?","children":[],"call":[" synchronize "]}," Concurrent AtExitImplementation install":{"type":"method","name":"install","children":[],"call":[" runner "," at_exit "," synchronize "]}," Concurrent AtExitImplementation handlers":{"type":"method","name":"handlers","children":[],"call":["(send nil :synchronize) clone "," synchronize "]}," Concurrent AtExitImplementation handler?":{"type":"method","name":"handler?","children":[],"call":["@handlers key? "," synchronize "]}," Concurrent AtExitImplementation delete":{"type":"method","name":"delete","children":[],"call":["(send nil :synchronize) ! ! ","(send nil :synchronize) ! ","@handlers delete "," synchronize "]}," Concurrent AtExitImplementation add":{"type":"method","name":"add","children":[],"call":["@handlers []= "," synchronize ","handler object_id "]}," Concurrent AtExitImplementation initialize":{"type":"method","name":"initialize","children":[],"call":[" ns_initialize "," synchronize "]}," Concurrent leave_transaction":{"type":"method","name":"leave_transaction","children":[],"call":[" raise ","Transaction LeaveError  new "]}," Concurrent TimerTask ns_initialize":{"type":"method","name":"ns_initialize","children":[],"call":[" observers= ","Collection CopyOnNotifyObserverSet  new ","Concurrent AtomicBoolean  new ","Concurrent SafeTaskExecutor  new ","opts [] "," timeout_interval= "," execution_interval= "," set_deref_options "," init_mutex "," warn "]}," Concurrent Synchronization RbxObject attr_volatile":{"type":"method","name":"attr_volatile","children":[],"call":[]}," Concurrent Synchronization RbxObject ensure_ivar_visibility!":{"type":"method","name":"ensure_ivar_visibility!","children":[],"call":["Rubinius  memory_barrier "]}," Concurrent Synchronization RbxObject ns_broadcast":{"type":"method","name":"ns_broadcast","children":[],"call":["@Waiters shift << ","@Waiters shift ","@Waiters empty? ","@__Waiters__ shift << ","@__Waiters__ shift ","@__Waiters__ empty? "]}," Concurrent Synchronization RbxObject ns_signal":{"type":"method","name":"ns_signal","children":[],"call":["@Waiters shift << ","@Waiters shift ","@Waiters empty? ","@__Waiters__ shift << ","@__Waiters__ shift ","@__Waiters__ empty? "]}," Concurrent Synchronization RbxObject ns_wait":{"type":"method","name":"ns_wait","children":[],"call":["@Waiters shift << ","@Waiters shift ","@Waiters empty? ","@Waiters delete ! ","@Waiters delete ","signaled ! ","Rubinius  lock ","wchan receive_timeout ","Rubinius  unlock ","@Waiters push ","Rubinius Channel  new ","@__Waiters__ shift << ","@__Waiters__ shift ","@__Waiters__ empty? ","@__Waiters__ delete ! ","@__Waiters__ delete ","@__Waiters__ push ","wchan receive_timeout  ! ","Rubinius Channel  new  receive_timeout "]}," Concurrent Synchronization RbxObject synchronize":{"type":"method","name":"synchronize","children":[],"call":["Rubinius  synchronize ","Rubinius  unlock ","Thread  current ","Rubinius  lock ","@__owner__ == ","Thread  current  == "]}," Concurrent Synchronization RbxObject initialize":{"type":"method","name":"initialize","children":[],"call":[" ensure_ivar_visibility! "]}," Concurrent Synchronization MutexObject ensure_ivar_visibility!":{"type":"method","name":"ensure_ivar_visibility!","children":[],"call":[]}," Concurrent Synchronization MutexObject ns_wait":{"type":"method","name":"ns_wait","children":[],"call":["@__condition__ wait "]}," Concurrent Synchronization MutexObject ns_broadcast":{"type":"method","name":"ns_broadcast","children":[],"call":["@__condition__ broadcast "]}," Concurrent Synchronization MutexObject ns_signal":{"type":"method","name":"ns_signal","children":[],"call":["@__condition__ signal "]}," Concurrent Synchronization MutexObject synchronize":{"type":"method","name":"synchronize","children":[],"call":["@__lock__ synchronize ","@__lock__ owned? "]}," Concurrent Synchronization MutexObject initialize":{"type":"method","name":"initialize","children":[],"call":[" ConditionVariable  new "," Mutex  new "]}," Concurrent Synchronization MonitorObject ns_wait":{"type":"method","name":"ns_wait","children":[],"call":["@__condition__ wait "]}," Concurrent Synchronization MonitorObject synchronize":{"type":"method","name":"synchronize","children":[],"call":["@__lock__ synchronize "]}," Concurrent Synchronization MonitorObject initialize":{"type":"method","name":"initialize","children":[],"call":["@__lock__ new_cond "," Monitor  new "," Monitor  new  new_cond "]}," Concurrent Synchronization Lock broadcast":{"type":"method","name":"broadcast","children":[],"call":[" ns_broadcast "," synchronize "]}," Concurrent Synchronization Lock signal":{"type":"method","name":"signal","children":[],"call":[" ns_signal "," synchronize "]}," Concurrent Synchronization Lock wait_until":{"type":"method","name":"wait_until","children":[],"call":[" ns_wait_until "," synchronize "]}," Concurrent Synchronization Lock wait":{"type":"method","name":"wait","children":[],"call":[" ns_wait "," synchronize "]}," Concurrent Synchronization JavaObject attr_volatile":{"type":"method","name":"attr_volatile","children":[],"call":[]}," Concurrent Synchronization Object new_condition":{"type":"method","name":"new_condition","children":[],"call":["Condition  private_new "]}," Concurrent Synchronization Condition ns_broadcast":{"type":"method","name":"ns_broadcast","children":[],"call":[" synchronize "]}," Concurrent Synchronization Condition broadcast":{"type":"method","name":"broadcast","children":[],"call":[" ns_broadcast ","@Lock synchronize "]}," Concurrent Synchronization Condition ns_signal":{"type":"method","name":"ns_signal","children":[],"call":[" synchronize "]}," Concurrent Synchronization Condition signal":{"type":"method","name":"signal","children":[],"call":[" ns_signal ","@Lock synchronize "]}," Concurrent Synchronization Condition ns_wait_until":{"type":"method","name":"ns_wait_until","children":[],"call":[" synchronize "]}," Concurrent Synchronization Condition wait_until":{"type":"method","name":"wait_until","children":[],"call":[" ns_wait_until ","@Lock synchronize "]}," Concurrent Synchronization Condition ns_wait":{"type":"method","name":"ns_wait","children":[],"call":[" synchronize "]}," Concurrent Synchronization Condition wait":{"type":"method","name":"wait","children":[],"call":[" ns_wait ","@Lock synchronize "]}," Concurrent Synchronization Condition initialize":{"type":"method","name":"initialize","children":[],"call":[" ensure_ivar_visibility! "]}," Concurrent Synchronization AbstractStruct define_struct_class":{"type":"method","name":"define_struct_class","children":[{"type":"method","name":"ns_initialize","children":[],"asgn":[{"type":"instance","name":"@values","value":"values fill "},["values fill "]],"call":["values fill "," length - "," length ","values length "," raise ","ArgumentError  new ","values length > "," length ","values length "]}],"call":[]}," Concurrent Synchronization AbstractStruct pr_underscore":{"type":"method","name":"pr_underscore","children":[],"call":["word downcase! ","word tr! ","word gsub! ","clazz to_s ","clazz to_s dup ","clazz to_s  downcase! ","clazz to_s dup  downcase! ","clazz to_s  tr! ","clazz to_s dup  tr! ","clazz to_s  gsub! ","clazz to_s dup  gsub! "]}," Concurrent Synchronization AbstractStruct ns_merge":{"type":"method","name":"ns_merge","children":[],"call":[" class new "," to_h merge values "," to_h merge "," to_h "," class "]}," Concurrent Synchronization AbstractStruct ns_inspect":{"type":"method","name":"ns_inspect","children":[],"call":[" ns_to_h "," class ","(send\n  (send\n    (send\n      (self) :class) :to_s) :=~\n  (regexp\n    (str \"^#<Class:\")\n    (regopt))) == "," class to_s =~ "," class to_s "," pr_underscore "," class ancestors [] "," class ancestors "]}," Concurrent Synchronization AbstractStruct ns_select":{"type":"method","name":"ns_select","children":[],"call":[" values select "," values "]}," Concurrent Synchronization AbstractStruct ns_each_pair":{"type":"method","name":"ns_each_pair","children":[],"call":["@values [] "," class MEMBERS  [] "," class ","@values length times ","@values length "]}," Concurrent Synchronization AbstractStruct ns_each":{"type":"method","name":"ns_each","children":[],"call":[" values each "," values "]}," Concurrent Synchronization AbstractStruct ns_equality":{"type":"method","name":"ns_equality","children":[],"call":[" values == ","other values "," values "," class == ","other class "," class "]}," Concurrent Synchronization AbstractStruct ns_get":{"type":"method","name":"ns_get","children":[],"call":[" raise ","NameError  new "," send ","@values [] ","IndexError  new ","@values length ","member >= ","member is_a? "]}," Concurrent Synchronization AbstractStruct ns_to_h":{"type":"method","name":"ns_to_h","children":[],"call":["memo []= ","@values [] "," class MEMBERS  [] "," class "," length times reduce "," length times "," length "]}," Concurrent Synchronization AbstractStruct ns_values_at":{"type":"method","name":"ns_values_at","children":[],"call":["@values values_at "]}," Concurrent Synchronization AbstractStruct ns_values":{"type":"method","name":"ns_values","children":[],"call":["@values dup "]}," Concurrent Synchronization AbstractStruct members":{"type":"method","name":"members","children":[],"call":[" class MEMBERS  dup "," class "]}," Concurrent Synchronization AbstractStruct length":{"type":"method","name":"length","children":[],"call":[" class MEMBERS  length "," class "]}," Concurrent Synchronization AbstractStruct initialize":{"type":"method","name":"initialize","children":[],"call":[" ensure_ivar_visibility! "," ns_initialize "]}," Concurrent Synchronization AbstractObject attr_volatile":{"type":"method","name":"attr_volatile","children":[],"call":[]}," Concurrent Synchronization AbstractObject ensure_ivar_visibility!":{"type":"method","name":"ensure_ivar_visibility!","children":[],"call":[" raise "," full_memory_barrier "]}," Concurrent Synchronization AbstractObject ns_broadcast":{"type":"method","name":"ns_broadcast","children":[],"call":[" raise "]}," Concurrent Synchronization AbstractObject ns_signal":{"type":"method","name":"ns_signal","children":[],"call":[" raise "]}," Concurrent Synchronization AbstractObject ns_wait":{"type":"method","name":"ns_wait","children":[],"call":[" raise "]}," Concurrent Synchronization AbstractObject ns_wait_until":{"type":"method","name":"ns_wait_until","children":[],"call":[" ns_wait ","condition call ","wait_until - ","(send\n  (lvar :now) :+\n  (float 0.001)) >= ","now + ","Concurrent  monotonic_time "," loop ","Concurrent  monotonic_time + ","Concurrent  monotonic_time +  - ","(send\n  (lvar :Concurrent  monotonic_time ) :+\n  (float 0.001)) >= ","Concurrent  monotonic_time  + "]}," Concurrent Synchronization AbstractObject ns_initialize":{"type":"method","name":"ns_initialize","children":[],"call":[]}," Concurrent Synchronization AbstractObject synchronize":{"type":"method","name":"synchronize","children":[],"call":[" raise "]}," Concurrent Synchronization AbstractObject initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "]}," Concurrent SettableStruct define_struct":{"type":"method","name":"define_struct","children":[],"call":["@values []= "," raise ","Concurrent ImmutabilityError  new ","@values [] nil? ","@values [] "," synchronize ","clazz send ","members each_with_index ","Synchronization AbstractStruct  define_struct_class ","clazz instance_methods include? ","clazz instance_methods ","Synchronization AbstractStruct  define_struct_class  send ","Synchronization AbstractStruct  define_struct_class  instance_methods include? ","Synchronization AbstractStruct  define_struct_class  instance_methods "]}," Concurrent SettableStruct new":{"type":"method","name":"new","children":[],"call":[]}," Concurrent SettableStruct []=":{"type":"method","name":"[]=","children":[],"call":[" raise ","NameError  new "," send ","@values []= ","Concurrent ImmutabilityError  new ","@values [] nil? ","@values [] "," synchronize ","IndexError  new ","@values length ","member >= ","member is_a? "]}," Concurrent SettableStruct select":{"type":"method","name":"select","children":[],"call":[" ns_select "," synchronize "," enum_for "," block_given? "]}," Concurrent SettableStruct each_pair":{"type":"method","name":"each_pair","children":[],"call":[" ns_each_pair "," synchronize "," enum_for "," block_given? "]}," Concurrent SettableStruct each":{"type":"method","name":"each","children":[],"call":[" ns_each "," synchronize "," enum_for "," block_given? "]}," Concurrent SettableStruct ==":{"type":"method","name":"==","children":[],"call":[" ns_equality "," synchronize "]}," Concurrent SettableStruct []":{"type":"method","name":"[]","children":[],"call":[" ns_get "," synchronize "]}," Concurrent SettableStruct to_h":{"type":"method","name":"to_h","children":[],"call":[" ns_to_h "," synchronize "]}," Concurrent SettableStruct merge":{"type":"method","name":"merge","children":[],"call":[" ns_merge "," synchronize "]}," Concurrent SettableStruct inspect":{"type":"method","name":"inspect","children":[],"call":[" ns_inspect "," synchronize "]}," Concurrent SettableStruct values_at":{"type":"method","name":"values_at","children":[],"call":[" ns_values_at "," synchronize "]}," Concurrent SettableStruct values":{"type":"method","name":"values","children":[],"call":[" ns_values "," synchronize "]}," Concurrent ScheduledTask calculate_delay!":{"type":"method","name":"calculate_delay!","children":[],"call":["delay to_f "," raise ","ArgumentError  new ","delay to_f < ","delay to_f - ","now to_f ","delay <= ","Time  now "," deprecated ","delay is_a? "," warn ","Time  now  to_f ","Time  Time  now  "]}," Concurrent ScheduledTask ns_reschedule":{"type":"method","name":"ns_reschedule","children":[],"call":[" ns_schedule ","@parent send "," ns_check_state? "]}," Concurrent ScheduledTask ns_schedule":{"type":"method","name":"ns_schedule","children":[],"call":["@parent send ","Concurrent  monotonic_time + ","Concurrent  monotonic_time "]}," Concurrent ScheduledTask reschedule":{"type":"method","name":"reschedule","children":[],"call":[" ns_reschedule "," calculate_delay! "," synchronize "," raise ","ArgumentError  new ","delay < ","delay to_f "," calculate_delay to_f ! ","delay to_f  < ","delay to_f  to_f "]}," Concurrent ScheduledTask reset":{"type":"method","name":"reset","children":[],"call":[" ns_reschedule "," synchronize "]}," Concurrent ScheduledTask stop":{"type":"method","name":"stop","children":[],"call":[" cancel "," deprecated_method "," warn "]}," Concurrent ScheduledTask processing?":{"type":"method","name":"processing?","children":[],"call":[" ns_check_state? "," synchronize "]}," Concurrent ScheduledTask <=>":{"type":"method","name":"<=>","children":[],"call":[" schedule_time <=> ","other schedule_time "," schedule_time "]}," Concurrent ScheduledTask schedule_time":{"type":"method","name":"schedule_time","children":[],"call":[" synchronize "]}," Concurrent ScheduledTask delay":{"type":"method","name":"delay","children":[],"call":[" initial_delay "," deprecated_method "," warn "]}," Concurrent ScheduledTask initial_delay":{"type":"method","name":"initial_delay","children":[],"call":[" synchronize "]}," Concurrent Promise complete":{"type":"method","name":"complete","children":[],"call":[" value ","Time  now "," observers notify_and_delete_observers "," observers "," notify_child ","children_to_notify each ","@children dup "," set_state! "," synchronize "]}," Concurrent Promise ns_initialize":{"type":"method","name":"ns_initialize","children":[],"call":["Proc  new ","opts [] "," raise ","opts fetch "," get_arguments_from ","Concurrent  global_io_executor ","Executor  executor_from_options ","Options  executor_from_options "]}," Concurrent Promise fail":{"type":"method","name":"fail","children":[],"call":[" raise "," set "]}," Concurrent Promise set":{"type":"method","name":"set","children":[],"call":[" execute ","Proc  new "," raise ","@state != "," synchronize "," check_for_block_or_value! "," block_given? ","PromiseExecutionError  new "," root? "]}," Concurrent MutableStruct define_struct":{"type":"method","name":"define_struct","children":[],"call":["@values []= "," synchronize ","clazz send ","@values [] ","members each_with_index ","Synchronization AbstractStruct  define_struct_class ","Synchronization AbstractStruct  define_struct_class  send "]}," Concurrent MutableStruct new":{"type":"method","name":"new","children":[],"call":[]}," Concurrent MutableStruct []=":{"type":"method","name":"[]=","children":[],"call":[" raise ","NameError  new "," send ","@values []= "," synchronize ","IndexError  new ","@values length ","member >= ","member is_a? "]}," Concurrent MutableStruct select":{"type":"method","name":"select","children":[],"call":[" ns_select "," synchronize "," enum_for "," block_given? "]}," Concurrent MutableStruct each_pair":{"type":"method","name":"each_pair","children":[],"call":[" ns_each_pair "," synchronize "," enum_for "," block_given? "]}," Concurrent MutableStruct each":{"type":"method","name":"each","children":[],"call":[" ns_each "," synchronize "," enum_for "," block_given? "]}," Concurrent MutableStruct ==":{"type":"method","name":"==","children":[],"call":[" ns_equality "," synchronize "]}," Concurrent MutableStruct []":{"type":"method","name":"[]","children":[],"call":[" ns_get "," synchronize "]}," Concurrent MutableStruct to_h":{"type":"method","name":"to_h","children":[],"call":[" ns_to_h "," synchronize "]}," Concurrent MutableStruct merge":{"type":"method","name":"merge","children":[],"call":[" ns_merge "," synchronize "]}," Concurrent MutableStruct inspect":{"type":"method","name":"inspect","children":[],"call":[" ns_inspect "," synchronize "]}," Concurrent MutableStruct values_at":{"type":"method","name":"values_at","children":[],"call":[" ns_values_at "," synchronize "]}," Concurrent MutableStruct values":{"type":"method","name":"values","children":[],"call":[" ns_values "," synchronize "]}," Concurrent Maybe initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent Maybe or":{"type":"method","name":"or","children":[],"call":[" just "," just? "]}," Concurrent Maybe <=>":{"type":"method","name":"<=>","children":[],"call":[" just <=> ","other just "," just ","other nothing? "," nothing? "]}," Concurrent Maybe nothing?":{"type":"method","name":"nothing?","children":[],"call":["@nothing != "]}," Concurrent Maybe just?":{"type":"method","name":"just?","children":[],"call":[" nothing? ! "," nothing? "]}," Concurrent Maybe nothing":{"type":"method","name":"nothing","children":[],"call":[]}," Concurrent Maybe just":{"type":"method","name":"just","children":[],"call":[]}," Concurrent Maybe from":{"type":"method","name":"from","children":[],"call":[]}," Concurrent IVar check_for_block_or_value!":{"type":"method","name":"check_for_block_or_value!","children":[],"call":[" raise ","ArgumentError  new ","value == ","block_given ! ","value != "]}," Concurrent IVar ns_complete_without_notification":{"type":"method","name":"ns_complete_without_notification","children":[],"call":[" event set "," event "," set_state "," raise ","(sym :fulfilled) include? "]}," Concurrent IVar notify_observers":{"type":"method","name":"notify_observers","children":[],"call":["Time  now "," observers notify_and_delete_observers "," observers "]}," Concurrent IVar complete_without_notification":{"type":"method","name":"complete_without_notification","children":[],"call":[" ns_complete_without_notification "," synchronize "]}," Concurrent IVar safe_execute":{"type":"method","name":"safe_execute","children":[],"call":[" block_given? "," complete ","SafeTaskExecutor  new execute ","SafeTaskExecutor  new "," compare_and_set_state "]}," Concurrent IVar ns_initialize":{"type":"method","name":"ns_initialize","children":[],"call":[" ns_complete_without_notification ","value == "," set_deref_options "," observers= ","Collection CopyOnWriteObserverSet  new "," init_obligation "," block_given? ","value != "]}," Concurrent IVar try_set":{"type":"method","name":"try_set","children":[],"call":[" set "]}," Concurrent ImmutableStruct define_struct":{"type":"method","name":"define_struct","children":[],"call":["Synchronization AbstractStruct  define_struct_class "," synchronize "]}," Concurrent ImmutableStruct new":{"type":"method","name":"new","children":[],"call":[]}," Concurrent ImmutableStruct select":{"type":"method","name":"select","children":[],"call":[" ns_select "," enum_for "," block_given? "]}," Concurrent ImmutableStruct each_pair":{"type":"method","name":"each_pair","children":[],"call":[" ns_each_pair "," enum_for "," block_given? "]}," Concurrent ImmutableStruct each":{"type":"method","name":"each","children":[],"call":[" ns_each "," enum_for "," block_given? "]}," Concurrent ImmutableStruct ==":{"type":"method","name":"==","children":[],"call":[" ns_equality "]}," Concurrent ImmutableStruct []":{"type":"method","name":"[]","children":[],"call":[" ns_get "]}," Concurrent ImmutableStruct to_h":{"type":"method","name":"to_h","children":[],"call":[" ns_to_h "]}," Concurrent ImmutableStruct merge":{"type":"method","name":"merge","children":[],"call":[" ns_merge "]}," Concurrent ImmutableStruct inspect":{"type":"method","name":"inspect","children":[],"call":[" ns_inspect "]}," Concurrent ImmutableStruct values_at":{"type":"method","name":"values_at","children":[],"call":[" ns_values_at "]}," Concurrent ImmutableStruct values":{"type":"method","name":"values","children":[],"call":[" ns_values "]}," Concurrent Future ns_initialize":{"type":"method","name":"ns_initialize","children":[],"call":[" get_arguments_from ","Concurrent  global_io_executor ","Executor  executor_from_options ","opts [] ","Options  executor_from_options "]}," Concurrent Future wait_or_cancel":{"type":"method","name":"wait_or_cancel","children":[],"call":[" cancel "," complete? "," wait "]}," Concurrent Future cancelled?":{"type":"method","name":"cancelled?","children":[],"call":[" state == "," state "]}," Concurrent Future cancel":{"type":"method","name":"cancel","children":[],"call":[" complete ","CancelledOperationError  new "," compare_and_set_state "]}," Concurrent Future set":{"type":"method","name":"set","children":[],"call":[" execute ","Proc  new "," raise ","@state != "," synchronize "," check_for_block_or_value! "," block_given? "]}," Concurrent TimerSet remove_task":{"type":"method","name":"remove_task","children":[],"call":["@queue delete "," synchronize "]}," Concurrent TimerSet ns_post_task":{"type":"method","name":"ns_post_task","children":[],"call":["@condition set ","@timer_executor post "," method ","@queue length == ","@queue length ","@queue push ","task process_task ","task executor post ","task executor ","(send\n  (lvar :task) :initial_delay) <= ","task initial_delay "," ns_running? "," ns_reset_if_forked "]}," Concurrent TimerSet post_task":{"type":"method","name":"post_task","children":[],"call":[" ns_post_task "," synchronize "]}," Concurrent TimerSet ns_initialize":{"type":"method","name":"ns_initialize","children":[],"call":[" auto_terminate= ","opts fetch ","Event  new ","SingleThreadExecutor  new ","Concurrent  global_io_executor ","Executor  executor_from_options ","Collection PriorityQueue  new ","Options  executor_from_options ","Collection NonConcurrentPriorityQueue  new "]}," Concurrent SimpleExecutorService ns_initialize":{"type":"method","name":"ns_initialize","children":[],"call":["Concurrent AtomicFixnum  new ","Concurrent Event  new ","Concurrent AtomicBoolean  new "]}," Concurrent SimpleExecutorService wait_for_termination":{"type":"method","name":"wait_for_termination","children":[],"call":["@stopped wait "]}," Concurrent SimpleExecutorService kill":{"type":"method","name":"kill","children":[],"call":["@stopped set ","@running make_false "]}," Concurrent SimpleExecutorService shutdown":{"type":"method","name":"shutdown","children":[],"call":["@stopped set ","@count value == ","@count value ","@running make_false "]}," Concurrent SimpleExecutorService shutdown?":{"type":"method","name":"shutdown?","children":[],"call":["@stopped set? "]}," Concurrent SimpleExecutorService shuttingdown?":{"type":"method","name":"shuttingdown?","children":[],"call":["@stopped set? ! ","@stopped set? ","@running false? "]}," Concurrent SimpleExecutorService running?":{"type":"method","name":"running?","children":[],"call":["@running true? "]}," Concurrent SimpleExecutorService <<":{"type":"method","name":"<<","children":[],"call":[" post "]}," Concurrent SimpleExecutorService post":{"type":"method","name":"post","children":[],"call":["@stopped set ","@count value == ","@count value ","@running false? ","@count decrement ","Thread  current abort_on_exception= ","Thread  current ","Thread  new ","@count increment "," running? "," raise ","ArgumentError  new "," block_given? "]}," Concurrent SerializedExecution ns_initialize":{"type":"method","name":"ns_initialize","children":[],"call":[]}," Concurrent RubyThreadPoolExecutor Worker run_task":{"type":"method","name":"run_task","children":[],"call":[" throw ","pool worker_died "," log ","task call ","pool worker_task_completed "]}," Concurrent RubyThreadPoolExecutor Worker create_worker":{"type":"method","name":"create_worker","children":[],"call":["pool ready_worker ","Concurrent  monotonic_time "," run_task "," throw ","pool remove_busy_worker ","pool worker_not_old_enough ","(send\n  (send\n    (const nil :Concurrent) :monotonic_time) :-\n  (lvar :last_message)) > ","Concurrent  monotonic_time - ","queue pop "," loop "," catch ","Thread  new ","my_pool ready_worker ","my_pool remove_busy_worker ","my_pool worker_not_old_enough ","my_queue pop ","(send\n  (send\n    (const nil :Concurrent) :monotonic_time) :-\n  (lvar :Concurrent  monotonic_time )) > ","(send\n  (send\n    (const nil :Concurrent) :monotonic_time) :-\n  (lvar :last_queue pop )) > ","(send\n  (send\n    (const nil :Concurrent) :monotonic_time) :-\n  (lvar :last_my_queue pop )) > "]}," Concurrent RubyThreadPoolExecutor Worker kill":{"type":"method","name":"kill","children":[],"call":["@thread kill "]}," Concurrent RubyThreadPoolExecutor Worker stop":{"type":"method","name":"stop","children":[],"call":["@queue << "]}," Concurrent RubyThreadPoolExecutor Worker <<":{"type":"method","name":"<<","children":[],"call":["@queue << "]}," Concurrent RubyThreadPoolExecutor Worker initialize":{"type":"method","name":"initialize","children":[],"call":[" create_worker ","pool idletime ","Queue  new ","@thread name= ","(send\n  (lvar :pool) :name) compact join ","(send\n  (lvar :pool) :name) compact ","pool name ","@thread respond_to? "," create_worker  name= "," create_worker  respond_to? "]}," Concurrent RubyThreadPoolExecutor ns_prune_pool":{"type":"method","name":"ns_prune_pool","children":[],"call":["Concurrent  monotonic_time + ","Concurrent  monotonic_time ","last_used << ","@ready shift ","@pool size <= ","@pool size ","worker << ","now - > "," idletime ","now - ","@ready first ","@pool size - > ","@pool size - ","@ready empty? ! ","@ready empty? ","@ready shift  << ","Concurrent  monotonic_time  - > ","Concurrent  monotonic_time  - "]}," Concurrent RubyThreadPoolExecutor ns_remove_busy_worker":{"type":"method","name":"ns_remove_busy_worker","children":[],"call":[" stopped_event set "," stopped_event "," running? ! "," running? ","@pool empty? ","@pool delete "]}," Concurrent RubyThreadPoolExecutor ns_worker_not_old_enough":{"type":"method","name":"ns_worker_not_old_enough","children":[],"call":["@ready unshift "]}," Concurrent RubyThreadPoolExecutor ns_ready_worker":{"type":"method","name":"ns_ready_worker","children":[],"call":["worker stop ","@ready push "," running? ","worker << ","@queue shift "," raise "]}," Concurrent RubyThreadPoolExecutor ns_add_busy_worker":{"type":"method","name":"ns_add_busy_worker","children":[],"call":["@pool length ","@pool length > ","@pool << ","Worker  new ","@pool size >= ","@pool size "]}," Concurrent RubyThreadPoolExecutor ns_worker_died":{"type":"method","name":"ns_worker_died","children":[],"call":[" ns_ready_worker "," ns_add_busy_worker "," ns_remove_busy_worker ","Concurrent  monotonic_time "]}," Concurrent RubyThreadPoolExecutor ns_enqueue":{"type":"method","name":"ns_enqueue","children":[],"call":["@queue << ","@queue size < ","@queue size "," ns_limited_queue? ! "," ns_limited_queue? "]}," Concurrent RubyThreadPoolExecutor ns_assign_worker":{"type":"method","name":"ns_assign_worker","children":[],"call":["worker << "," ns_add_busy_worker ","@ready pop ","@pool size >= ","@pool size "]}," Concurrent RubyThreadPoolExecutor ns_kill_execution":{"type":"method","name":"ns_kill_execution","children":[],"call":["@ready clear ","@pool clear ","@pool each "]}," Concurrent RubyThreadPoolExecutor ns_shutdown_execution":{"type":"method","name":"ns_shutdown_execution","children":[],"call":["@pool each ","@queue empty? "," stopped_event set "," stopped_event ","@pool empty? "," ns_reset_if_forked "]}," Concurrent RubyThreadPoolExecutor ns_execute":{"type":"method","name":"ns_execute","children":[],"call":[" ns_prune_pool ","@next_gc_time < ","Concurrent  monotonic_time "," handle_fallback "," ns_enqueue "," ns_assign_worker "," ns_reset_if_forked "," fallback_action "]}," Concurrent RubyThreadPoolExecutor ns_limited_queue?":{"type":"method","name":"ns_limited_queue?","children":[],"call":["@max_queue != "]}," Concurrent RubyThreadPoolExecutor ns_initialize":{"type":"method","name":"ns_initialize","children":[],"call":["Concurrent  monotonic_time + ","Concurrent  monotonic_time ","opts fetch to_i ","opts fetch ","@idletime / "," auto_terminate= "," raise ","ArgumentError  new "," min_length > "," max_length "," min_length ","@min_length < ","@max_length > ","@max_length < "," deprecated ","opts has_key? ","FALLBACK_POLICIES  include? ","@max_queue > ","opts fetch to_i  / ","opts fetch to_i  < ","opts fetch to_i  > "]}," Concurrent RubyThreadPoolExecutor worker_died":{"type":"method","name":"worker_died","children":[],"call":[" ns_worker_died "," synchronize "]}," Concurrent RubyThreadPoolExecutor worker_not_old_enough":{"type":"method","name":"worker_not_old_enough","children":[],"call":[" ns_worker_not_old_enough "," synchronize "]}," Concurrent RubyThreadPoolExecutor ready_worker":{"type":"method","name":"ready_worker","children":[],"call":[" ns_ready_worker "," synchronize "]}," Concurrent RubyThreadPoolExecutor remove_busy_worker":{"type":"method","name":"remove_busy_worker","children":[],"call":[" ns_remove_busy_worker "," synchronize "]}," Concurrent RubySingleThreadExecutor ns_initialize":{"type":"method","name":"ns_initialize","children":[],"call":[" auto_terminate= ","opts fetch "," raise ","ArgumentError  new ","FALLBACK_POLICIES  include? ","Queue  new "]}," Concurrent JavaThreadPoolExecutor ns_initialize":{"type":"method","name":"ns_initialize","children":[],"call":[" auto_terminate= ","opts fetch "," java util concurrent ThreadPoolExecutor new ","FALLBACK_POLICY_CLASSES  [] new ","FALLBACK_POLICY_CLASSES  [] "," java util concurrent TimeUnit "," java util concurrent "," java util "," java "," java util concurrent ThreadPoolExecutor "," java util concurrent LinkedBlockingQueue new "," java util concurrent LinkedBlockingQueue ","@max_queue == "," raise ","ArgumentError  new "," fallback_policy ","FALLBACK_POLICY_CLASSES  include? ","min_length > ","min_length < ","max_length > ","max_length < "," deprecated ","opts has_key? ","opts fetch to_i ","DaemonThreadFactory  new "," ns_auto_terminate? "," java util concurrent SynchronousQueue new "," java util concurrent SynchronousQueue ","@max_queue > "," auto_terminate? ","@max_ java util concurrent LinkedBlockingQueue new  == ","@max_ java util concurrent SynchronousQueue new  == ","opts fetch to_i  == ","opts fetch to_i  > ","opts fetch to_i  < ","@max_ java util concurrent LinkedBlockingQueue new  > ","@max_ java util concurrent SynchronousQueue new  > "]}," Concurrent JavaSingleThreadExecutor ns_initialize":{"type":"method","name":"ns_initialize","children":[],"call":[" auto_terminate= ","opts fetch "," raise ","ArgumentError  new ","FALLBACK_POLICY_CLASSES  keys include? ","FALLBACK_POLICY_CLASSES  keys "," java util concurrent Executors newSingleThreadExecutor "," java util concurrent Executors "," java util concurrent "," java util "," java ","DaemonThreadFactory  new "," ns_auto_terminate? "]}," Concurrent JavaExecutorService Job run":{"type":"method","name":"run","children":[],"call":["@block call "]}," Concurrent JavaExecutorService Job initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent JavaExecutorService ns_make_executor_runnable":{"type":"method","name":"ns_make_executor_runnable","children":[],"call":[" java_alias "," java lang Runnable java_class "," java lang Runnable "," java lang "," java ","@executor class class_eval ","@executor class ","(send\n  (ivar :@executor) :submit_runnable) ! ","@executor submit_runnable "]}," Concurrent JavaExecutorService ns_shutdown?":{"type":"method","name":"ns_shutdown?","children":[],"call":["@executor isTerminated ","@executor isShutdown "]}," Concurrent JavaExecutorService ns_shuttingdown?":{"type":"method","name":"ns_shuttingdown?","children":[],"call":["@executor isTerminating ","@executor respond_to? "]}," Concurrent JavaExecutorService ns_running?":{"type":"method","name":"ns_running?","children":[],"call":["(or\n  (send nil :ns_shuttingdown?)\n  (send nil :ns_shutdown?)) ! "," ns_shutdown? "," ns_shuttingdown? "]}," Concurrent JavaExecutorService kill":{"type":"method","name":"kill","children":[],"call":["@executor shutdownNow "," ns_auto_terminate= "," synchronize "]}," Concurrent JavaExecutorService shutdown":{"type":"method","name":"shutdown","children":[],"call":["@executor shutdown "," ns_auto_terminate= "," synchronize "]}," Concurrent JavaExecutorService wait_for_termination":{"type":"method","name":"wait_for_termination","children":[],"call":["@executor awaitTermination "," java util concurrent TimeUnit "," java util concurrent "," java util "," java ","1000 * ","timeout nil? "]}," Concurrent JavaExecutorService post":{"type":"method","name":"post","children":[],"call":[" raise ","@executor submit_runnable ","Job  new "," handle_fallback "," running? ","ArgumentError  new "," block_given? ","@executor submit "," fallback_action call "," fallback_action "]}," Concurrent JavaExecutorService initialize":{"type":"method","name":"initialize","children":[],"call":[" ns_make_executor_runnable "]}," Concurrent RubyExecutorService ns_shutdown?":{"type":"method","name":"ns_shutdown?","children":[],"call":[" stopped_event set? "," stopped_event "]}," Concurrent RubyExecutorService ns_shuttingdown?":{"type":"method","name":"ns_shuttingdown?","children":[],"call":["(or\n  (send nil :ns_running?)\n  (send nil :ns_shutdown?)) ! "," ns_shutdown? "," ns_running? "]}," Concurrent RubyExecutorService ns_running?":{"type":"method","name":"ns_running?","children":[],"call":[" stop_event set? ! "," stop_event set? "," stop_event "]}," Concurrent RubyExecutorService shutdown_execution":{"type":"method","name":"shutdown_execution","children":[],"call":[" stopped_event set "," stopped_event "]}," Concurrent RubyExecutorService wait_for_termination":{"type":"method","name":"wait_for_termination","children":[],"call":[" stopped_event wait "," stopped_event "]}," Concurrent RubyExecutorService kill":{"type":"method","name":"kill","children":[],"call":[" stopped_event set "," stopped_event "," kill_execution "," stop_event set "," stop_event "," ns_auto_terminate= "," shutdown? "," synchronize "," ns_kill_execution "]}," Concurrent RubyExecutorService shutdown":{"type":"method","name":"shutdown","children":[],"call":[" shutdown_execution "," stop_event set "," stop_event "," ns_auto_terminate= "," running? "," synchronize "," ns_shutdown_execution "]}," Concurrent RubyExecutorService post":{"type":"method","name":"post","children":[],"call":[" execute "," handle_fallback "," running? "," synchronize "," raise ","ArgumentError  new "," block_given? "," ns_execute ","deferred_action call "," fallback_action "]}," Concurrent RubyExecutorService initialize":{"type":"method","name":"initialize","children":[],"call":[" ensure_ivar_visibility! ","Event  new "]}," Concurrent AbstractExecutorService terminate_at_exit":{"type":"method","name":"terminate_at_exit","children":[],"call":[" wait_for_termination "," kill "]}," Concurrent AbstractExecutorService ns_auto_terminate=":{"type":"method","name":"ns_auto_terminate=","children":[],"call":[" raise ","AtExit  delete "," terminate_at_exit ","AtExit  add ","AT_EXIT  delete ","AT_EXIT  add "]}," Concurrent AbstractExecutorService ns_auto_terminate?":{"type":"method","name":"ns_auto_terminate?","children":[],"call":["@auto_terminate ! ! ","@auto_terminate ! "]}," Concurrent AbstractExecutorService kill_execution":{"type":"method","name":"kill_execution","children":[],"call":[]}," Concurrent AbstractExecutorService shutdown_execution":{"type":"method","name":"shutdown_execution","children":[],"call":[]}," Concurrent AbstractExecutorService execute":{"type":"method","name":"execute","children":[],"call":[" raise "]}," Concurrent AbstractExecutorService handle_fallback":{"type":"method","name":"handle_fallback","children":[],"call":[" fail "," fallback_policy "," log "," raise "]}," Concurrent AbstractExecutorService auto_terminate=":{"type":"method","name":"auto_terminate=","children":[],"call":[" ns_auto_terminate= "," synchronize "," deprecated "]}," Concurrent AbstractExecutorService auto_terminate?":{"type":"method","name":"auto_terminate?","children":[],"call":[" ns_auto_terminate? "," synchronize "]}," Concurrent AbstractExecutorService shutdown?":{"type":"method","name":"shutdown?","children":[],"call":[" ns_shutdown? "," synchronize "]}," Concurrent AbstractExecutorService shuttingdown?":{"type":"method","name":"shuttingdown?","children":[],"call":[" ns_shuttingdown? "," synchronize "]}," Concurrent AbstractExecutorService running?":{"type":"method","name":"running?","children":[],"call":[" ns_running? "," synchronize "]}," Concurrent AbstractExecutorService wait_for_termination":{"type":"method","name":"wait_for_termination","children":[],"call":[" raise "]}," Concurrent AbstractExecutorService kill":{"type":"method","name":"kill","children":[],"call":[" raise "]}," Concurrent AbstractExecutorService shutdown":{"type":"method","name":"shutdown","children":[],"call":[" raise "]}," Concurrent AbstractExecutorService initialize":{"type":"method","name":"initialize","children":[],"call":[" ns_initialize "," synchronize ","opts fetch ","opts key? "]}," Concurrent SerialExecutorService serialized?":{"type":"method","name":"serialized?","children":[],"call":[]}," Concurrent ExecutorService serialized?":{"type":"method","name":"serialized?","children":[],"call":[]}," Concurrent ExecutorService can_overflow?":{"type":"method","name":"can_overflow?","children":[],"call":[]}," Concurrent ExecutorService <<":{"type":"method","name":"<<","children":[],"call":[" post "]}," Concurrent ExecutorService post":{"type":"method","name":"post","children":[],"call":[" raise "]}," Concurrent Executor executor":{"type":"method","name":"executor","children":[],"call":[]}," Concurrent Executor executor_from_options":{"type":"method","name":"executor_from_options","children":[],"call":[]}," Concurrent CachedThreadPool ns_initialize":{"type":"method","name":"ns_initialize","children":[],"call":[" auto_terminate= ","opts fetch ","@executor setKeepAliveTime "," java util concurrent TimeUnit "," java util concurrent "," java util "," java ","@executor setRejectedExecutionHandler ","FALLBACK_POLICY_CLASSES  [] new ","FALLBACK_POLICY_CLASSES  [] "," java util concurrent Executors newCachedThreadPool "," java util concurrent Executors ","Concurrent  on_jruby? ","DaemonThreadFactory  new "," ns_auto_terminate? "," auto_terminate? "," java util concurrent Executors newCachedThreadPool  setKeepAliveTime "," java util concurrent Executors newCachedThreadPool  setRejectedExecutionHandler "]}," Concurrent Delay ns_initialize":{"type":"method","name":"ns_initialize","children":[],"call":["Executor  executor_from_options "," set_deref_options "," init_obligation ","opts [] "]}," Concurrent Delay value!":{"type":"method","name":"value!","children":[],"call":[" raise "," value "]}," Concurrent Configuration auto_terminate":{"type":"method","name":"auto_terminate","children":[],"call":["Concurrent  auto_terminate_global_executors? "," deprecated_method "]}," Concurrent Configuration auto_terminate=":{"type":"method","name":"auto_terminate=","children":[],"call":["Concurrent  disable_executor_auto_termination! ","value ! "," deprecated_method ","Concurrent  disable_auto_termination_of_global_executors! "]}," Concurrent Configuration logger=":{"type":"method","name":"logger=","children":[],"call":["Concurrent  global_logger= "," deprecated_method "]}," Concurrent Configuration logger":{"type":"method","name":"logger","children":[],"call":["Concurrent  global_logger value ","Concurrent  global_logger "," deprecated_method "]}," Concurrent new_io_executor":{"type":"method","name":"new_io_executor","children":[],"call":[]}," Concurrent new_fast_executor":{"type":"method","name":"new_fast_executor","children":[],"call":[]}," Concurrent executor":{"type":"method","name":"executor","children":[],"call":[]}," Concurrent global_timer_set":{"type":"method","name":"global_timer_set","children":[],"call":[]}," Concurrent global_immediate_executor":{"type":"method","name":"global_immediate_executor","children":[],"call":[]}," Concurrent global_io_executor":{"type":"method","name":"global_io_executor","children":[],"call":[]}," Concurrent global_fast_executor":{"type":"method","name":"global_fast_executor","children":[],"call":[]}," Concurrent terminate_pools!":{"type":"method","name":"terminate_pools!","children":[],"call":[]}," Concurrent disable_executor_auto_termination?":{"type":"method","name":"disable_executor_auto_termination?","children":[],"call":[]}," Concurrent disable_executor_auto_termination!":{"type":"method","name":"disable_executor_auto_termination!","children":[],"call":[]}," Concurrent disable_at_exit_handlers!":{"type":"method","name":"disable_at_exit_handlers!","children":[],"call":[]}," Concurrent global_logger=":{"type":"method","name":"global_logger=","children":[],"call":[]}," Concurrent global_logger":{"type":"method","name":"global_logger","children":[],"call":[]}," Concurrent use_stdlib_logger":{"type":"method","name":"use_stdlib_logger","children":[],"call":[]}," Concurrent create_stdlib_logger":{"type":"method","name":"create_stdlib_logger","children":[],"call":[]}," Concurrent Concern Observable count_observers":{"type":"method","name":"count_observers","children":[],"call":[" observers count_observers "," observers "]}," Concurrent Concern Observable delete_observers":{"type":"method","name":"delete_observers","children":[],"call":[" observers delete_observers "," observers "]}," Concurrent Concern Observable delete_observer":{"type":"method","name":"delete_observer","children":[],"call":[" observers delete_observer "," observers "]}," Concurrent Concern Observable with_observer":{"type":"method","name":"with_observer","children":[],"call":[" add_observer "]}," Concurrent Concern Observable add_observer":{"type":"method","name":"add_observer","children":[],"call":[" observers add_observer "," observers "]}," Concurrent Concern Obligation ns_set_state":{"type":"method","name":"ns_set_state","children":[],"call":[]}," Concurrent Concern Obligation ns_check_state?":{"type":"method","name":"ns_check_state?","children":[],"call":["@state == "]}," Concurrent Concern Obligation if_state":{"type":"method","name":"if_state","children":[],"call":["expected_states include? "," raise ","ArgumentError  new "," block_given? "," mutex synchronize "," mutex "," synchronize "]}," Concurrent Concern Obligation compare_and_set_state":{"type":"method","name":"compare_and_set_state","children":[],"call":["expected_current include? "," mutex synchronize "," mutex "," synchronize "]}," Concurrent Concern Obligation state=":{"type":"method","name":"state=","children":[],"call":[" ns_set_state "," mutex synchronize "," mutex "," synchronize "]}," Concurrent Concern Obligation set_state":{"type":"method","name":"set_state","children":[],"call":[]}," Concurrent Concern Obligation event":{"type":"method","name":"event","children":[],"call":[]}," Concurrent Concern Obligation init_obligation":{"type":"method","name":"init_obligation","children":[],"call":["Event  new "," init_mutex "]}," Concurrent Concern Obligation get_arguments_from":{"type":"method","name":"get_arguments_from","children":[],"call":["opts fetch "]}," Concurrent Concern Obligation exception":{"type":"method","name":"exception","children":[],"call":[" reason exception "," reason "," raise "," rejected? "]}," Concurrent Concern Obligation reason":{"type":"method","name":"reason","children":[],"call":[" mutex synchronize "," mutex "," synchronize "]}," Concurrent Concern Obligation state":{"type":"method","name":"state","children":[],"call":[" mutex synchronize "," mutex "," synchronize "]}," Concurrent Concern Obligation value!":{"type":"method","name":"value!","children":[],"call":[" deref "," raise "," rejected? "," wait "]}," Concurrent Concern Obligation wait!":{"type":"method","name":"wait!","children":[],"call":[" raise "," rejected? "," wait tap "," wait "]}," Concurrent Concern Obligation wait":{"type":"method","name":"wait","children":[],"call":[" event wait "," event "," incomplete? ","timeout != "]}," Concurrent Concern Obligation value":{"type":"method","name":"value","children":[],"call":[" deref "," wait "]}," Concurrent Concern Obligation incomplete?":{"type":"method","name":"incomplete?","children":[],"call":[" complete? ! "," complete? "]}," Concurrent Concern Obligation completed?":{"type":"method","name":"completed?","children":[],"call":[" complete? "," deprecated_method "]}," Concurrent Concern Obligation complete?":{"type":"method","name":"complete?","children":[],"call":["(sym :fulfilled) include? "," state "]}," Concurrent Concern Obligation unscheduled?":{"type":"method","name":"unscheduled?","children":[],"call":[" state == "," state "]}," Concurrent Concern Obligation pending?":{"type":"method","name":"pending?","children":[],"call":[" state == "," state "]}," Concurrent Concern Obligation rejected?":{"type":"method","name":"rejected?","children":[],"call":[" state == "," state "]}," Concurrent Concern Obligation fulfilled?":{"type":"method","name":"fulfilled?","children":[],"call":[" state == "," state "]}," Concurrent Concern Logging log":{"type":"method","name":"log","children":[],"call":["$stderr puts ","(str \"`Concurrent.configuration.logger` failed to log \") + ","error backtrace join ","error backtrace ","error class ","error message ","(or\n  (ivar :@logger)\n  (send\n    (const nil :Concurrent) :global_logger)) call ","Concurrent  global_logger ","logger call ","(str \"`Concurrent.configuration.Concurrent  global_logger ` failed to log \") + ","(or\n  (ivar :@Concurrent  global_logger )\n  (send\n    (const nil :Concurrent) :global_Concurrent  global_logger )) call ","Concurrent  global_Concurrent  global_logger  ","Concurrent  global_logger  call "]}," Concurrent Concern Dereferenceable apply_deref_options":{"type":"method","name":"apply_deref_options","children":[],"call":["value freeze ","value dup ","@copy_on_deref call ","value nil? ","value freeze  freeze ","value dup  freeze ","@copy_on_deref call  freeze ","value freeze  dup ","value dup  dup ","@copy_on_deref call  dup ","value freeze  nil? ","value dup  nil? ","@copy_on_deref call  nil? "]}," Concurrent Concern Dereferenceable ns_set_deref_options":{"type":"method","name":"ns_set_deref_options","children":[],"call":["(or\n  (or\n    (ivar :@dup_on_deref)\n    (ivar :@freeze_on_deref))\n  (ivar :@copy_on_deref)) ! ","opts [] "]}," Concurrent Concern Dereferenceable set_deref_options":{"type":"method","name":"set_deref_options","children":[],"call":[" ns_set_deref_options "," mutex synchronize "," mutex "," synchronize "]}," Concurrent Concern Dereferenceable init_mutex":{"type":"method","name":"init_mutex","children":[],"call":[]}," Concurrent Concern Dereferenceable mutex":{"type":"method","name":"mutex","children":[],"call":[]}," Concurrent Concern Dereferenceable value=":{"type":"method","name":"value=","children":[],"call":[" mutex synchronize "," mutex "," synchronize "]}," Concurrent Concern Dereferenceable value":{"type":"method","name":"value","children":[],"call":[" apply_deref_options "," mutex synchronize "," mutex "," synchronize "]}," Concurrent Concern Deprecation deprecated_method":{"type":"method","name":"deprecated_method","children":[],"call":[" deprecated "]}," Concurrent Concern Deprecation deprecated":{"type":"method","name":"deprecated","children":[],"call":[" log ","klass to_s "," format ","strip > "," class ","Module  === "," caller first "," caller ","Class  === "," class  to_s "]}," Concurrent Collection JavaPriorityQueue from_list":{"type":"method","name":"from_list","children":[],"call":[]}," Concurrent Collection JavaPriorityQueue push":{"type":"method","name":"push","children":[],"call":["@queue add "]}," Concurrent Collection JavaPriorityQueue pop":{"type":"method","name":"pop","children":[],"call":["@queue poll "]}," Concurrent Collection JavaPriorityQueue peek":{"type":"method","name":"peek","children":[],"call":["@queue peek "]}," Concurrent Collection JavaPriorityQueue length":{"type":"method","name":"length","children":[],"call":["@queue size "]}," Concurrent Collection JavaPriorityQueue include?":{"type":"method","name":"include?","children":[],"call":["@queue contains "]}," Concurrent Collection JavaPriorityQueue empty?":{"type":"method","name":"empty?","children":[],"call":["@queue size == ","@queue size "]}," Concurrent Collection JavaPriorityQueue delete":{"type":"method","name":"delete","children":[],"call":["@queue remove "]}," Concurrent Collection JavaPriorityQueue clear":{"type":"method","name":"clear","children":[],"call":["@queue clear "]}," Concurrent Collection JavaPriorityQueue initialize":{"type":"method","name":"initialize","children":[],"call":[" java util PriorityQueue new "," java util Collections reverseOrder "," java util Collections "," java util "," java "," java util PriorityQueue ","(sym :min) include? ","opts fetch "]}," Concurrent Collection MutexPriorityQueue swim":{"type":"method","name":"swim","children":[],"call":["k / "," swap "," ordered? ! "," ordered? ","k > ","k /  / ","k /  > "]}," Concurrent Collection MutexPriorityQueue sink":{"type":"method","name":"sink","children":[],"call":[" swap "," ordered? "," ordered? ! ","j + ","j < ","(lvasgn :j\n  (begin\n    (send\n      (int 2) :*\n      (lvar :k)))) <= ","2 * "]}," Concurrent Collection MutexPriorityQueue ordered?":{"type":"method","name":"ordered?","children":[],"call":["(send\n  (send\n    (ivar :@queue) :[]\n    (lvar :x)) :<=>\n  (send\n    (ivar :@queue) :[]\n    (lvar :y))) == ","@queue [] <=> ","@queue [] "]}," Concurrent Collection MutexPriorityQueue swap":{"type":"method","name":"swap","children":[],"call":["@queue []= ","@queue [] "]}," Concurrent Collection MutexPriorityQueue from_list":{"type":"method","name":"from_list","children":[],"call":[]}," Concurrent Collection MutexPriorityQueue push":{"type":"method","name":"push","children":[],"call":[" swim ","@queue << "]}," Concurrent Collection MutexPriorityQueue pop":{"type":"method","name":"pop","children":[],"call":["@queue pop "," sink "," swap ","@queue [] "]}," Concurrent Collection MutexPriorityQueue peek":{"type":"method","name":"peek","children":[],"call":["@queue [] "]}," Concurrent Collection MutexPriorityQueue length":{"type":"method","name":"length","children":[],"call":[]}," Concurrent Collection MutexPriorityQueue include?":{"type":"method","name":"include?","children":[],"call":["@queue include? "]}," Concurrent Collection MutexPriorityQueue empty?":{"type":"method","name":"empty?","children":[],"call":[" size == "," size "]}," Concurrent Collection MutexPriorityQueue delete":{"type":"method","name":"delete","children":[],"call":["@length != ","@queue pop "," sink "," swap ","@queue [] == ","@queue [] ","k <= "]}," Concurrent Collection MutexPriorityQueue clear":{"type":"method","name":"clear","children":[],"call":[]}," Concurrent Collection MutexPriorityQueue initialize":{"type":"method","name":"initialize","children":[],"call":[" clear ","(sym :min) include? ","opts fetch "]}," Concurrent Collection CopyOnWriteObserverSet clear_observers_and_return_old":{"type":"method","name":"clear_observers_and_return_old","children":[],"call":[" synchronize "]}," Concurrent Collection CopyOnWriteObserverSet observers=":{"type":"method","name":"observers=","children":[],"call":[" synchronize "]}," Concurrent Collection CopyOnWriteObserverSet observers":{"type":"method","name":"observers","children":[],"call":[" synchronize "]}," Concurrent Collection CopyOnWriteObserverSet notify_to":{"type":"method","name":"notify_to","children":[],"call":["observer send "," block_given? ","observers each "," raise ","ArgumentError  new ","args empty? ! ","args empty? "]}," Concurrent Collection CopyOnWriteObserverSet ns_initialize":{"type":"method","name":"ns_initialize","children":[],"call":[]}," Concurrent Collection CopyOnWriteObserverSet notify_and_delete_observers":{"type":"method","name":"notify_and_delete_observers","children":[],"call":[" notify_to "," clear_observers_and_return_old "," clear_observers_and_return_ clear_observers_and_return_old  "]}," Concurrent Collection CopyOnWriteObserverSet notify_observers":{"type":"method","name":"notify_observers","children":[],"call":[" notify_to "," observers "]}," Concurrent Collection CopyOnWriteObserverSet count_observers":{"type":"method","name":"count_observers","children":[],"call":[" observers count "," observers "]}," Concurrent Collection CopyOnWriteObserverSet delete_observers":{"type":"method","name":"delete_observers","children":[],"call":[" observers= "]}," Concurrent Collection CopyOnWriteObserverSet delete_observer":{"type":"method","name":"delete_observer","children":[],"call":["new_observers delete ","@observers dup "," synchronize ","@observers dup  delete "]}," Concurrent Collection CopyOnWriteObserverSet add_observer":{"type":"method","name":"add_observer","children":[],"call":["new_observers []= ","@observers dup "," synchronize "," raise ","ArgumentError  new ","block nil? ","observer nil? ","@observers dup  []= "]}," Concurrent Collection CopyOnWriteObserverSet initialize":{"type":"method","name":"initialize","children":[],"call":[" ns_initialize "," synchronize "]}," Concurrent Collection CopyOnNotifyObserverSet notify_to":{"type":"method","name":"notify_to","children":[],"call":["observer send "," block_given? ","observers each "," raise ","ArgumentError  new ","args empty? ! ","args empty? "]}," Concurrent Collection CopyOnNotifyObserverSet duplicate_observers":{"type":"method","name":"duplicate_observers","children":[],"call":["@observers dup "," synchronize ","@@observers dup  dup "]}," Concurrent Collection CopyOnNotifyObserverSet duplicate_and_clear_observers":{"type":"method","name":"duplicate_and_clear_observers","children":[],"call":["@observers clear ","@observers dup "," synchronize ","@@observers dup  clear ","@@observers dup  dup "]}," Concurrent Collection CopyOnNotifyObserverSet ns_initialize":{"type":"method","name":"ns_initialize","children":[],"call":[]}," Concurrent Collection CopyOnNotifyObserverSet notify_and_delete_observers":{"type":"method","name":"notify_and_delete_observers","children":[],"call":[" notify_to "," duplicate_and_clear_observers "," duplicate_and_clear_ duplicate_and_clear_observers  "]}," Concurrent Collection CopyOnNotifyObserverSet notify_observers":{"type":"method","name":"notify_observers","children":[],"call":[" notify_to "," duplicate_observers "," duplicate_ duplicate_observers  "]}," Concurrent Collection CopyOnNotifyObserverSet count_observers":{"type":"method","name":"count_observers","children":[],"call":["@observers count "," synchronize "]}," Concurrent Collection CopyOnNotifyObserverSet delete_observers":{"type":"method","name":"delete_observers","children":[],"call":["@observers clear "," synchronize "]}," Concurrent Collection CopyOnNotifyObserverSet delete_observer":{"type":"method","name":"delete_observer","children":[],"call":["@observers delete "," synchronize "]}," Concurrent Collection CopyOnNotifyObserverSet add_observer":{"type":"method","name":"add_observer","children":[],"call":["@observers []= "," synchronize "," raise ","ArgumentError  new ","block nil? ","observer nil? "]}," Concurrent Collection CopyOnNotifyObserverSet initialize":{"type":"method","name":"initialize","children":[],"call":[" ns_initialize "," synchronize "]}," Concurrent MutexAtomicReference _compare_and_set":{"type":"method","name":"_compare_and_set","children":[],"call":["@value equal? ","@mutex synchronize ","@mutex unlock ","@mutex try_lock "," synchronize "]}," Concurrent MutexAtomicReference get_and_set":{"type":"method","name":"get_and_set","children":[],"call":["@mutex synchronize "," synchronize "]}," Concurrent MutexAtomicReference set":{"type":"method","name":"set","children":[],"call":["@mutex synchronize "," synchronize "]}," Concurrent MutexAtomicReference get":{"type":"method","name":"get","children":[],"call":["@mutex synchronize "," synchronize "]}," Concurrent MutexAtomicReference initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "," ns_initialize "," synchronize "," Mutex  new "]}," Concurrent AtomicDirectUpdate try_update!":{"type":"method","name":"try_update!","children":[],"call":[" raise "," compare_and_set "," get "]}," Concurrent JavaThreadLocalVar set":{"type":"method","name":"set","children":[],"call":["@var set "]}," Concurrent JavaThreadLocalVar get":{"type":"method","name":"get","children":[],"call":["@var get "]}," Concurrent JavaThreadLocalVar allocate_storage":{"type":"method","name":"allocate_storage","children":[],"call":[" java lang ThreadLocal new "," java lang ThreadLocal "," java lang "," java "]}," Concurrent RubyThreadLocalVar set":{"type":"method","name":"set","children":[],"call":["@storage delete "," block_given? ","@storage []= ","Thread  current "]}," Concurrent RubyThreadLocalVar get":{"type":"method","name":"get","children":[],"call":["@storage [] ","Thread  current "]}," Concurrent RubyThreadLocalVar allocate_storage":{"type":"method","name":"allocate_storage","children":[],"call":["WeakKeyMap  new ","ObjectSpace  define_finalizer "," class threadlocal_finalizer "," class ","FREE  pop ","LOCK  synchronize "," class thread_local_finalizer "," next_index "]}," Concurrent AbstractThreadLocalVar set":{"type":"method","name":"set","children":[],"call":[" raise "]}," Concurrent AbstractThreadLocalVar get":{"type":"method","name":"get","children":[],"call":[" raise "]}," Concurrent AbstractThreadLocalVar allocate_storage":{"type":"method","name":"allocate_storage","children":[],"call":[" raise "]}," Concurrent AbstractThreadLocalVar WeakKeyMap ref_key":{"type":"method","name":"ref_key","children":[],"call":["ref referenced_object_id ","ref object ","@references_to_keys_map [] ","key __id__ ","@references_to_keys_map []  @references_to_keys_map [] erenced_object_id ","@references_to_keys_map []  object ","@@references_to_keys_map [] erences_to_keys_map [] "]}," Concurrent AbstractThreadLocalVar WeakKeyMap keys":{"type":"method","name":"keys","children":[],"call":["(send\n  (send\n    (ivar :@values) :keys) :collect) compact ","@references_to_keys_map [] object ","@references_to_keys_map [] ","@values keys collect ","@values keys "]}," Concurrent AbstractThreadLocalVar WeakKeyMap delete":{"type":"method","name":"delete","children":[],"call":["@values delete ","@references_to_keys_map delete "," ref_key ","@lock synchronize "]}," Concurrent AbstractThreadLocalVar WeakKeyMap []=":{"type":"method","name":"[]=","children":[],"call":["@values []= ","key __id__ ","@references_to_keys_map []= ","WeakReference  new ","@lock synchronize ","ObjectSpace  define_finalizer "]}," Concurrent AbstractThreadLocalVar WeakKeyMap []":{"type":"method","name":"[]","children":[],"call":["@values [] "," ref_key ","@lock synchronize "]}," Concurrent AbstractThreadLocalVar WeakKeyMap initialize":{"type":"method","name":"initialize","children":[],"call":[" remove_reference_to "," lambda ","Monitor  new "]}," Concurrent AbstractThreadLocalVar WeakReference object":{"type":"method","name":"object","children":[],"call":["@reference_pointer cleanup ","@@weak_references delete "," object_id ","@@lock synchronize ","@reference_pointer object "," raise ","e is_a? ","@ref __getobj__ "," @reference_pointer object ect_id ","@reference_pointer @reference_pointer object ect ","@ref __get@reference_pointer object __ "]}," Concurrent AbstractThreadLocalVar WeakReference initialize":{"type":"method","name":"initialize","children":[],"call":["ObjectSpace  define_finalizer ","@@weak_references []= "," object_id ","ReferencePointer  new ","@@lock synchronize ","obj __id__ "," WeakRef  new "]}," Concurrent AbstractThreadLocalVar WeakReference ReferencePointer supports_backreference?":{"type":"method","name":"supports_backreference?","children":[],"call":["obj respond_to? "]}," Concurrent AbstractThreadLocalVar WeakReference ReferencePointer remove_backreference":{"type":"method","name":"remove_backreference","children":[],"call":["obj send ","backreferences empty? ","backreferences dup delete "," object_id ","backreferences dup ","obj instance_variable_get ","obj instance_variable_defined? "," supports_backreference? ","obj instance_variable_get  empty? ","obj instance_variable_get  dup delete ","obj instance_variable_get  dup "]}," Concurrent AbstractThreadLocalVar WeakReference ReferencePointer add_backreference":{"type":"method","name":"add_backreference","children":[],"call":["backreferences << "," object_id ","obj instance_variable_set ","obj instance_variable_get ","obj instance_variable_defined? "," supports_backreference? ","obj instance_variable_get  << "]}," Concurrent AbstractThreadLocalVar WeakReference ReferencePointer verify_backreferences":{"type":"method","name":"verify_backreferences","children":[],"call":["backreferences include? "," object_id ","obj instance_variable_get ","obj instance_variable_defined? "," supports_backreference? ","obj instance_variable_get  include? "]}," Concurrent AbstractThreadLocalVar WeakReference ReferencePointer object":{"type":"method","name":"object","children":[],"call":[" verify_backreferences ","ObjectSpace  _id2ref "]}," Concurrent AbstractThreadLocalVar WeakReference ReferencePointer cleanup":{"type":"method","name":"cleanup","children":[],"call":[" remove_backreference ","ObjectSpace  _id2ref "]}," Concurrent AbstractThreadLocalVar WeakReference ReferencePointer initialize":{"type":"method","name":"initialize","children":[],"call":[" add_backreference ","object __id__ "]}," Concurrent MutexSemaphore ns_initialize":{"type":"method","name":"ns_initialize","children":[],"call":[]}," Concurrent ReadWriteLock max_writers?":{"type":"method","name":"max_writers?","children":[],"call":["(send\n  (lvar :c) :&\n  (const nil :MAX_WRITERS)) == ","c & "]}," Concurrent ReadWriteLock max_readers?":{"type":"method","name":"max_readers?","children":[],"call":["(send\n  (lvar :c) :&\n  (const nil :MAX_READERS)) == ","c & "]}," Concurrent ReadWriteLock waiting_writer?":{"type":"method","name":"waiting_writer?","children":[],"call":["c >= "]}," Concurrent ReadWriteLock waiting_writers":{"type":"method","name":"waiting_writers","children":[],"call":["(send\n  (lvar :c) :&\n  (const nil :MAX_WRITERS)) / ","c & "]}," Concurrent ReadWriteLock running_writer?":{"type":"method","name":"running_writer?","children":[],"call":["c >= "]}," Concurrent ReadWriteLock running_readers?":{"type":"method","name":"running_readers?","children":[],"call":["(send\n  (lvar :c) :&\n  (const nil :MAX_READERS)) > ","c & "]}," Concurrent ReadWriteLock running_readers":{"type":"method","name":"running_readers","children":[],"call":["c & "]}," Concurrent ReadWriteLock has_waiters?":{"type":"method","name":"has_waiters?","children":[],"call":[" waiting_writer? ","@Counter value "]}," Concurrent ReadWriteLock write_locked?":{"type":"method","name":"write_locked?","children":[],"call":["@Counter value >= ","@Counter value "]}," Concurrent ReadWriteLock release_write_lock":{"type":"method","name":"release_write_lock","children":[],"call":["@WriteLock signal "," waiting_writers > "," waiting_writers ","@ReadLock broadcast ","c - ","@Counter update ","counter - "," running_writer? "]}," Concurrent ReadWriteLock acquire_write_lock":{"type":"method","name":"acquire_write_lock","children":[],"call":["@Counter compare_and_swap ","c + - ","c + "," running_readers? ! "," running_readers? "," running_writer? ! "," running_writer? ","@Counter value ","@WriteLock wait_until ","c == "," raise ","ResourceLimitError  new "," max_writers? ","@Counter compare_and_set ","@Counter @Counter value ompare_and_swap ","@Counter value  + - ","@Counter value  + ","@WriteLo@Counter value k wait_until ","@Counter value  == ","Resour@Counter value eLimitError  new ","@Counter @Counter value ompare_and_set "]}," Concurrent ReadWriteLock release_read_lock":{"type":"method","name":"release_read_lock","children":[],"call":["@WriteLock signal "," running_readers == "," running_readers "," waiting_writer? ","@Counter compare_and_swap ","c - ","@Counter value ","@Counter compare_and_set ","@WriteLo@Counter value k signal ","@Counter @Counter value ompare_and_swap ","@Counter value  - ","@Counter @Counter value ompare_and_set "]}," Concurrent ReadWriteLock acquire_read_lock":{"type":"method","name":"acquire_read_lock","children":[],"call":["@Counter compare_and_swap ","c + "," running_writer? ! "," running_writer? ","@ReadLock wait_until ","@Counter value "," waiting_writer? ! "," waiting_writer? "," raise ","ResourceLimitError  new "," max_readers? ","@Counter compare_and_set ","@Counter @Counter value ompare_and_swap ","@Counter value  + ","@ReadLo@Counter value k wait_until ","Resour@Counter value eLimitError  new ","@Counter @Counter value ompare_and_set "]}," Concurrent ReadWriteLock with_write_lock":{"type":"method","name":"with_write_lock","children":[],"call":[" release_write_lock "," acquire_write_lock "," raise ","ArgumentError  new "," block_given? "]}," Concurrent ReadWriteLock with_read_lock":{"type":"method","name":"with_read_lock","children":[],"call":[" release_read_lock "," acquire_read_lock "," raise ","ArgumentError  new "," block_given? "]}," Concurrent ReadWriteLock initialize":{"type":"method","name":"initialize","children":[],"call":[" ensure_ivar_visibility! ","Synchronization Lock  new ","AtomicReference  new ","AtomicFixnum  new "]}," Concurrent Event ns_initialize":{"type":"method","name":"ns_initialize","children":[],"call":[]}," Concurrent Event ns_set":{"type":"method","name":"ns_set","children":[],"call":[" ns_broadcast "]}," Concurrent CyclicBarrier ns_initialize":{"type":"method","name":"ns_initialize","children":[],"call":[" ns_next_generation "]}," Concurrent CyclicBarrier ns_next_generation":{"type":"method","name":"ns_next_generation","children":[],"call":["Generation  new "]}," Concurrent CyclicBarrier ns_generation_done":{"type":"method","name":"ns_generation_done","children":[],"call":[" ns_broadcast "," ns_next_generation ","generation status= "]}," Concurrent PureCountDownLatch ns_initialize":{"type":"method","name":"ns_initialize","children":[],"call":[]}," Concurrent PureCountDownLatch count":{"type":"method","name":"count","children":[],"call":[" synchronize "]}," Concurrent PureCountDownLatch count_down":{"type":"method","name":"count_down","children":[],"call":[" ns_broadcast ","@count == ","@count > "," synchronize "]}," Concurrent PureCountDownLatch wait":{"type":"method","name":"wait","children":[],"call":["@count == "," ns_wait_until "," synchronize "]}," Concurrent PureCountDownLatch initialize":{"type":"method","name":"initialize","children":[],"call":[" ns_initialize "," synchronize "," raise ","ArgumentError  new ","count >= ","count is_a? "]}," Concurrent MutexAtomicFixnum range_check!":{"type":"method","name":"range_check!","children":[],"call":[" raise ","RangeError  new ","value < ","value > ","ArgumentError  new ","value is_a? ! ","value is_a? "]}," Concurrent MutexAtomicFixnum ns_set":{"type":"method","name":"ns_set","children":[],"call":[" range_check! ","Utility NativeInteger  ensure_integer_and_bounds "]}," Concurrent MutexAtomicFixnum ns_initialize":{"type":"method","name":"ns_initialize","children":[],"call":[" ns_set "]}," Concurrent MutexAtomicBoolean ns_make_value":{"type":"method","name":"ns_make_value","children":[],"call":["old != "]}," Concurrent MutexAtomicBoolean ns_initialize":{"type":"method","name":"ns_initialize","children":[],"call":["initial ! ! ","initial ! "]}," Concurrent Atom compare_and_set!":{"type":"method","name":"compare_and_set!","children":[],"call":["@value compare_and_set ","@validator call "]}," Concurrent Atom compare_and_set":{"type":"method","name":"compare_and_set","children":[],"call":[" compare_and_set! "," observers notify_observers ","Time  now "," observers "," compare_and_set_value "," valid? "]}," Concurrent Atom swap":{"type":"method","name":"swap","children":[],"call":["@value value "," compare_and_set! ","@validator call "," loop "," raise ","ArgumentError  new "," block_given? "," compare_and_set "," valid? "," value "]}," Concurrent Atom value":{"type":"method","name":"value","children":[],"call":[" apply_deref_options ","@value value "]}," Concurrent Atom initialize":{"type":"method","name":"initialize","children":[],"call":[" ensure_ivar_visibility! "," ns_set_deref_options ","Concurrent AtomicReference  new "," raise ","ArgumentError  new ","@validator is_a? ","opts fetch "," lambda "," value= "," observers= ","Collection CopyOnNotifyObserverSet  new ","opts fetch  is_a? "]}," Concurrent Async init_synchronization":{"type":"method","name":"init_synchronization","children":[],"call":["AsyncDelegator  new ","Delay  new ","Concurrent ImmediateExecutor  new ","Concurrent  global_io_executor ","Concurrent SerializedExecution  new ","AwaitDelegator  new ","Concurrent SingleThreadExecutor  new "]}," Concurrent Async ClassMethods new":{"type":"method","name":"new","children":[],"call":["obj send "," original_new "," create "," warn "," original_new  send "]}," Concurrent Async included":{"type":"method","name":"included","children":[],"call":[]}," Concurrent JavaCachedThreadPool ns_initialize":{"type":"method","name":"ns_initialize","children":[],"call":[" auto_terminate= ","opts fetch ","@executor setKeepAliveTime "," java util concurrent TimeUnit "," java util concurrent "," java util "," java ","@executor setRejectedExecutionHandler ","FALLBACK_POLICY_CLASSES  [] new ","FALLBACK_POLICY_CLASSES  [] "," java util concurrent Executors newCachedThreadPool "," java util concurrent Executors "," java util concurrent Executors newCachedThreadPool  setKeepAliveTime "," java util concurrent Executors newCachedThreadPool  setRejectedExecutionHandler "]}," Concurrent disable_at_exit_hooks!":{"type":"method","name":"disable_at_exit_hooks!","children":[],"call":[]}," Concurrent Async ClassMethods create":{"type":"method","name":"create","children":[],"call":["obj send "," original_new "," original_new  send "]}," Concurrent JavaThreadLocalVar bind":{"type":"method","name":"bind","children":[],"call":["@var set ","@var get "," block_given? "]}," Concurrent JavaThreadLocalVar value=":{"type":"method","name":"value=","children":[],"call":["@var set "]}," Concurrent JavaThreadLocalVar value":{"type":"method","name":"value","children":[],"call":["value == ","value nil? ","@var get "," default ","@var get  == ","@var get  nil? "]}," Concurrent RubyThreadLocalVar value_for":{"type":"method","name":"value_for","children":[],"call":["value equal? ","value nil? ","array [] "," get_threadlocal_array "," default_for "," get_default ","array []  equal? ","array []  nil? "," get_threadlocal_array  [] "," get_threadlocal_ get_threadlocal_array  "]}," Concurrent RubyThreadLocalVar set_threadlocal_array":{"type":"method","name":"set_threadlocal_array","children":[],"call":["thread []= ","thread thread_variable_set "]}," Concurrent RubyThreadLocalVar get_threadlocal_array":{"type":"method","name":"get_threadlocal_array","children":[],"call":["thread [] ","thread thread_variable_get "]}," Concurrent RubyThreadLocalVar thread_finalizer":{"type":"method","name":"thread_finalizer","children":[],"call":[]}," Concurrent RubyThreadLocalVar threadlocal_finalizer":{"type":"method","name":"threadlocal_finalizer","children":[],"call":[]}," Concurrent RubyThreadLocalVar bind":{"type":"method","name":"bind","children":[],"call":[" value= "," value "," block_given? "]}," Concurrent RubyThreadLocalVar value=":{"type":"method","name":"value=","children":[],"call":["array []= ","value nil? ","ObjectSpace  define_finalizer "," class thread_finalizer "," class ","ARRAYS  []= ","array object_id ","LOCK  synchronize "," set_threadlocal_array "," get_threadlocal_array ","Thread  current ","THREAD_LOCAL_ARRAYS  []= "," class semi_sync "," set_threadlocal_array  []= "," get_threadlocal_array  []= "," set_threadlocal_array  object_id "," get_threadlocal_array  object_id "," set_threadlocal_ set_threadlocal_array  "," set_threadlocal_ get_threadlocal_array  "," get_threadlocal_ set_threadlocal_array  "," get_threadlocal_ get_threadlocal_array  "]}," Concurrent RubyThreadLocalVar value":{"type":"method","name":"value","children":[],"call":["value equal? ","value nil? ","array [] "," get_threadlocal_array "," default ","array []  equal? ","array []  nil? "," get_threadlocal_array  [] "," get_threadlocal_ get_threadlocal_array  "]}," Concurrent RubyThreadLocalVar initialize":{"type":"method","name":"initialize","children":[],"call":[" allocate_storage "]}," Concurrent ReentrantReadWriteLock max_writers?":{"type":"method","name":"max_writers?","children":[],"call":["(send\n  (lvar :c) :&\n  (const nil :MAX_WRITERS)) == ","c & "]}," Concurrent ReentrantReadWriteLock max_readers?":{"type":"method","name":"max_readers?","children":[],"call":["(send\n  (lvar :c) :&\n  (const nil :MAX_READERS)) == ","c & "]}," Concurrent ReentrantReadWriteLock waiting_or_running_writer?":{"type":"method","name":"waiting_or_running_writer?","children":[],"call":["c >= "]}," Concurrent ReentrantReadWriteLock waiting_writers":{"type":"method","name":"waiting_writers","children":[],"call":["(send\n  (lvar :c) :&\n  (const nil :MAX_WRITERS)) >> ","c & "]}," Concurrent ReentrantReadWriteLock running_writer?":{"type":"method","name":"running_writer?","children":[],"call":["c >= "]}," Concurrent ReentrantReadWriteLock running_readers?":{"type":"method","name":"running_readers?","children":[],"call":["(send\n  (lvar :c) :&\n  (const nil :MAX_READERS)) > ","c & "]}," Concurrent ReentrantReadWriteLock running_readers":{"type":"method","name":"running_readers","children":[],"call":["c & "]}," Concurrent ReentrantReadWriteLock release_write_lock":{"type":"method","name":"release_write_lock","children":[],"call":[" raise ","wlocks_held == ","@WriteQueue signal "," waiting_writers > "," waiting_writers ","@ReadQueue broadcast ","counter - ","@Counter update ","held & ","@HeldCount value= ","@HeldCount value - ","@HeldCount value ","held &  == ","wlocks_@HeldCount value=  == ","@HeldCount value=  & "]}," Concurrent ReentrantReadWriteLock try_write_lock":{"type":"method","name":"try_write_lock","children":[],"call":["@HeldCount value= ","held + ","@Counter compare_and_set ","c + "," running_readers == "," running_readers "," waiting_or_running_writer? ! "," waiting_or_running_writer? ","@Counter value ","(lvasgn :held\n  (send\n    (ivar :@HeldCount) :value)) >= ","@HeldCount value ","@HeldCount value  + ","@Counter @Counter value ompare_and_set ","@Counter value  + ","(lvasgn :@HeldCount value \n  (send\n    (ivar :@HeldCount) :value)) >= "]}," Concurrent ReentrantReadWriteLock acquire_write_lock":{"type":"method","name":"acquire_write_lock","children":[],"call":["@HeldCount value= ","held + ","@Counter compare_and_set ","c + - ","c + "," running_readers == "," running_readers "," running_writer? ! "," running_writer? ","@Counter value ","@WriteQueue ns_wait "," running_readers != ","@WriteQueue synchronize ","c == "," raise ","ResourceLimitError  new "," max_writers? ","(lvasgn :held\n  (send\n    (ivar :@HeldCount) :value)) >= ","@HeldCount value ","held > ","@HeldCount value  + ","@Counter @Counter value ompare_and_set ","@Counter value  + - ","@Counter value  + ","@WriteQueue syn@Counter value hronize ","@Counter value  == ","Resour@Counter value eLimitError  new ","(lvasgn :@HeldCount value \n  (send\n    (ivar :@HeldCount) :value)) >= ","@HeldCount value  > "]}," Concurrent ReentrantReadWriteLock release_read_lock":{"type":"method","name":"release_read_lock","children":[],"call":[" raise ","rlocks_held == ","@WriteQueue signal "," running_readers == "," running_readers "," waiting_or_running_writer? ","counter - ","@Counter update ","held & ","@HeldCount value= ","@HeldCount value - ","@HeldCount value ","held &  == ","rlocks_@HeldCount value=  == ","@HeldCount value=  & "]}," Concurrent ReentrantReadWriteLock try_read_lock":{"type":"method","name":"try_read_lock","children":[],"call":["@HeldCount value= ","held + ","@Counter compare_and_set ","c + "," waiting_or_running_writer? ! "," waiting_or_running_writer? ","@Counter value ","@Counter update ","held & == ","held & ","(lvasgn :held\n  (send\n    (ivar :@HeldCount) :value)) > ","@HeldCount value ","@HeldCount value  + ","@Counter @Counter value ompare_and_set ","@Counter value  + ","@HeldCount value  & == ","@HeldCount value  & ","(lvasgn :@HeldCount value \n  (send\n    (ivar :@HeldCount) :value)) > "]}," Concurrent ReentrantReadWriteLock acquire_read_lock":{"type":"method","name":"acquire_read_lock","children":[],"call":["@HeldCount value= ","held + ","@Counter compare_and_set ","c + ","@ReadQueue ns_wait "," running_writer? ","@ReadQueue synchronize ","@Counter value "," waiting_or_running_writer? "," raise ","ResourceLimitError  new "," max_readers? ","@Counter update ","held & == ","held & ","(lvasgn :held\n  (send\n    (ivar :@HeldCount) :value)) > ","@HeldCount value ","@HeldCount value  + ","@Counter @Counter value ompare_and_set ","@Counter value  + ","@ReadQueue syn@Counter value hronize ","Resour@Counter value eLimitError  new ","@HeldCount value  & == ","@HeldCount value  & ","(lvasgn :@HeldCount value \n  (send\n    (ivar :@HeldCount) :value)) > "]}," Concurrent ReentrantReadWriteLock with_write_lock":{"type":"method","name":"with_write_lock","children":[],"call":[" release_write_lock "," acquire_write_lock "," raise ","ArgumentError  new "," block_given? "]}," Concurrent ReentrantReadWriteLock with_read_lock":{"type":"method","name":"with_read_lock","children":[],"call":[" release_read_lock "," acquire_read_lock "," raise ","ArgumentError  new "," block_given? "]}," Concurrent ReentrantReadWriteLock initialize":{"type":"method","name":"initialize","children":[],"call":[" ensure_ivar_visibility! ","ThreadLocalVar  new ","Synchronization Lock  new ","AtomicFixnum  new ","LockLocalVar  new "]}," Concurrent MutexAtomicFixnum update":{"type":"method","name":"update","children":[],"call":[" synchronize "]}," Concurrent Utility NativeExtensionLoader load_native_extensions":{"type":"method","name":"load_native_extensions","children":[],"call":[" raise "," set_java_extensions_loaded "," require "," java_extensions_loaded? ! "," java_extensions_loaded? ","Concurrent  on_jruby? ","try call ","tries each "," set_c_extensions_loaded ","RUBY_VERSION  [] "," lambda "," c_extensions_loaded? ! "," c_extensions_loaded? ","Concurrent  on_cruby? "," warn ","e backtrace ","Java extensions are required for JRuby.\n + ","e message "," try_load_c_extension ","(str \"concurrent/concurrent_ruby_ext\") each "]}," Concurrent Utility NativeExtensionLoader set_java_extensions_loaded":{"type":"method","name":"set_java_extensions_loaded","children":[],"call":[]}," Concurrent Utility NativeExtensionLoader set_c_extensions_loaded":{"type":"method","name":"set_c_extensions_loaded","children":[],"call":[]}," Concurrent Utility NativeExtensionLoader java_extensions_loaded?":{"type":"method","name":"java_extensions_loaded?","children":[],"call":[]}," Concurrent Utility NativeExtensionLoader c_extensions_loaded?":{"type":"method","name":"c_extensions_loaded?","children":[],"call":[]}," Concurrent Utility EngineDetector on_truffle?":{"type":"method","name":"on_truffle?","children":[],"call":[" ruby_engine == "," ruby_engine "]}," Concurrent Tuple each":{"type":"method","name":"each","children":[],"call":["ref get ","@tuple each "]}," Concurrent Tuple compare_and_set":{"type":"method","name":"compare_and_set","children":[],"call":["@tuple [] compare_and_set ","@tuple [] ","i < ","i >= "]}," Concurrent Tuple set":{"type":"method","name":"set","children":[],"call":["@tuple [] set ","@tuple [] ","i < ","i >= "]}," Concurrent Tuple get":{"type":"method","name":"get","children":[],"call":["@tuple [] get ","@tuple [] ","i < ","i >= "]}," Concurrent Tuple initialize":{"type":"method","name":"initialize","children":[],"call":["tuple []= ","Concurrent AtomicReference  new ","i < ","Tuple  new "," Array  new ","Tuple  new  []= "," Array  new  []= "]}," Concurrent TimerTask ns_kill_execution":{"type":"method","name":"ns_kill_execution","children":[],"call":["@running make_false "]}," Concurrent TimerTask ns_shutdown_execution":{"type":"method","name":"ns_shutdown_execution","children":[],"call":["@running make_false "]}," Concurrent ThreadSafe Util XorShiftRandom xorshift":{"type":"method","name":"xorshift","children":[],"call":["x >> ","(send\n  (lvar :x) :<<\n  (int 1)) & ","x << "]}," Concurrent ThreadSafe Util XorShiftRandom get":{"type":"method","name":"get","children":[],"call":["Kernel  rand + ","Kernel  rand "]}," Concurrent ThreadSafe Util Volatile attr_volatile":{"type":"method","name":"attr_volatile","children":[],"call":[" include "," alias_method "," class_eval ","53 + ","attr_names each ","40 + ","initialize_copy_setup join ","atomic_ref_setup join ","attr_names zip map ","attr_names zip ","attr_names map ","Module  new ","attr_names empty? ","51 + ","38 + "]}," Concurrent ThreadSafe Util Striped64 try_in_busy":{"type":"method","name":"try_in_busy","children":[],"call":[" busy= "," cas_busy "]}," Concurrent ThreadSafe Util Striped64 try_to_install_new_cell":{"type":"method","name":"try_to_install_new_cell","children":[],"call":["current_cells volatile_set ","current_cells volatile_get ! ","current_cells volatile_get ","current_cells hash_to_index "," cells "," try_in_busy ","current_cells volatcurrent_cells hash_to_index le_set "," cells  volatile_set ","current_cells volatcurrent_cells hash_to_index le_get ! "," cells  volatile_get ! ","current_cells volatcurrent_cells hash_to_index le_get "," cells  volatile_get ","current_cells hash_to_current_cells hash_to_index ndex "," cells  hash_to_index "," try_current_cells hash_to_index n_busy "]}," Concurrent ThreadSafe Util Striped64 expand_table_unless_stale":{"type":"method","name":"expand_table_unless_stale","children":[],"call":[" cells= ","new_cells volatile_set ","current_cells each_with_index ","current_cells next_in_size_table ","current_cells == "," cells "," try_in_busy ","current_cells next_in_size_table  volatile_set "]}," Concurrent ThreadSafe Util Striped64 try_initialize_cells":{"type":"method","name":"try_initialize_cells","children":[],"call":[" cells= ","new_cells volatile_set_by_hash ","Cell  new ","PowerOfTwoTuple  new "," cells "," try_in_busy "," cells ! "," free? ","PowerOfTwoTuple  new  volatile_set_by_hash "]}," Concurrent ThreadSafe Util Striped64 free?":{"type":"method","name":"free?","children":[],"call":[" busy? ! "," busy? "]}," Concurrent ThreadSafe Util Striped64 cas_base_computed":{"type":"method","name":"cas_base_computed","children":[],"call":[" cas_base "," base "]}," Concurrent ThreadSafe Util Striped64 internal_reset":{"type":"method","name":"internal_reset","children":[],"call":["cell value= ","current_cells each "," base= "," cells "," cells  each "]}," Concurrent ThreadSafe Util Striped64 hash_code=":{"type":"method","name":"hash_code=","children":[],"call":["Thread  current []= ","Thread  current "]}," Concurrent ThreadSafe Util Striped64 hash_code":{"type":"method","name":"hash_code","children":[],"call":["XorShiftRandom  get ","Thread  current [] ","Thread  current "]}," Concurrent ThreadSafe Util Striped64 retry_update":{"type":"method","name":"retry_update","children":[],"call":[" hash_code= "," cas_base_computed "," try_initialize_cells ","XorShiftRandom  xorshift "," expand_table_unless_stale "," cells != "," cells ","current_cells size >= ","current_cells size ","cell cas_computed ","was_uncontended ! "," try_to_install_new_cell ","Cell  new "," busy? ","(lvasgn :cell\n  (send\n    (lvar :current_cells) :volatile_get_by_hash\n    (lvar :hash))) ! ","current_cells volatile_get_by_hash "," XorShiftRandom  xorshift _code= "," try_initialize_current_cells volatile_get_by_hash s "," current_cells volatile_get_by_hash s != "," current_cells volatile_get_by_hash s ","current_current_cells volatile_get_by_hash s size >= "," cells  size >= ","current_current_cells volatile_get_by_hash s size "," cells  size ","current_cells volatile_get_by_hash  cas_computed "," try_to_install_new_current_cells volatile_get_by_hash  ","(lvasgn :cell\n  (send\n    (lvar :current_cells) :volatile_get_by_XorShiftRandom  xorshift \n    (lvar :XorShiftRandom  xorshift ))) ! ","(lvasgn :current_cells volatile_get_by_hash \n  (send\n    (lvar :current_current_cells volatile_get_by_hash s) :volatile_get_by_hash\n    (lvar :hash))) ! ","(lvasgn :cell\n  (send\n    (lvar : cells ) :volatile_get_by_hash\n    (lvar :hash))) ! ","current_cells volatile_get_by_XorShiftRandom  xorshift  ","current_current_cells volatile_get_by_hash s volatile_get_by_hash "," cells  volatile_get_by_hash "]}," Concurrent ThreadSafe Util Striped64 initialize":{"type":"method","name":"initialize","children":[],"call":[" base= "," busy= "]}," Concurrent ThreadSafe Util Striped64 Cell cas_computed":{"type":"method","name":"cas_computed","children":[],"call":[" cas "," value "]}," Concurrent ThreadSafe Util PowerOfTwoTuple next_in_size_table":{"type":"method","name":"next_in_size_table","children":[],"call":[" class new "," size << "," size "," class "]}," Concurrent ThreadSafe Util PowerOfTwoTuple volatile_set_by_hash":{"type":"method","name":"volatile_set_by_hash","children":[],"call":[" volatile_set "," hash_to_index "]}," Concurrent ThreadSafe Util PowerOfTwoTuple volatile_get_by_hash":{"type":"method","name":"volatile_get_by_hash","children":[],"call":[" volatile_get "," hash_to_index "]}," Concurrent ThreadSafe Util PowerOfTwoTuple hash_to_index":{"type":"method","name":"hash_to_index","children":[],"call":["(send\n  (send nil :size) :-\n  (int 1)) & "," size - "," size "]}," Concurrent ThreadSafe Util PowerOfTwoTuple initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","size inspect ","size & == ","size & ","size - ","size > "]}," Concurrent ThreadSafe Util CheapLockable cheap_broadcast":{"type":"method","name":"cheap_broadcast","children":[],"call":["conditional_variable broadcast ","JRuby  reference0 notify_all ","JRuby  reference0 ","waiters shift << ","waiters shift ","waiters empty? "]}," Concurrent ThreadSafe Util CheapLockable cheap_wait":{"type":"method","name":"cheap_wait","children":[],"call":["conditional_variable wait "," mutex ","ConditionVariable  new ","JRuby  reference0 wait ","JRuby  reference0 ","waiters shift << ","waiters shift ","waiters empty? ","waiters delete ","Rubinius  lock ","wchan receive_timeout ","Rubinius  unlock ","waiters push ","Rubinius Channel  new ","Rubinius Channel  new  receive_timeout "]}," Concurrent ThreadSafe Util CheapLockable cheap_synchronize":{"type":"method","name":"cheap_synchronize","children":[],"call":["my_mutex synchronize "," cas_mutex ","Mutex  new "," mutex ","JRuby  reference0 synchronized ","JRuby  reference0 ","Rubinius  unlock ","Rubinius  lock ","Mutex  new  synchronize "," mutex  synchronize "]}," Concurrent ThreadSafe Util make_synchronized_on_rbx":{"type":"method","name":"make_synchronized_on_rbx","children":[{"type":"method","name":"_mon_initialize","children":[],"asgn":[{"type":"instance","name":"@_monitor","value":"Monitor  new "},["Monitor  new "]],"call":["Monitor  new "]},{"type":"method","name":"allocate","children":[],"asgn":[],"call":[]}],"call":[]}," Concurrent ThreadSafe Util Adder reset":{"type":"method","name":"reset","children":[],"call":[" internal_reset "]}," Concurrent ThreadSafe Util Adder sum":{"type":"method","name":"sum","children":[],"call":["cell value ","current_cells each "," cells "," base "," cells  each "]}," Concurrent ThreadSafe Util Adder decrement":{"type":"method","name":"decrement","children":[],"call":[" add "]}," Concurrent ThreadSafe Util Adder increment":{"type":"method","name":"increment","children":[],"call":[" add "]}," Concurrent ThreadSafe Util Adder add":{"type":"method","name":"add","children":[],"call":["current_value + "," retry_update ","cell cas_computed ","current_cells volatile_get_by_hash "," hash_code ","(send nil :cas_base_computed) ! ","current_base + "," cas_base_computed "," cells ","current_cells volatile_get_by_hash  cas_computed ","current_current_cells volatile_get_by_hash s volatile_get_by_hash ","current_cells volatile_get_by_ hash_code  "," cells  volatile_get_by_hash ","  hash_code _code "," current_cells volatile_get_by_hash s "]}," Concurrent SynchronizedDelegator method_missing":{"type":"method","name":"method_missing","children":[],"call":["monitor exit ","monitor enter "]}," Concurrent SynchronizedDelegator initialize":{"type":"method","name":"initialize","children":[],"call":["Monitor  new "," __setobj__ "]}," Concurrent SynchronizedDelegator teardown":{"type":"method","name":"teardown","children":[],"call":["Thread  abort_on_exception= "]}," Concurrent SynchronizedDelegator setup":{"type":"method","name":"setup","children":[],"call":["Thread  abort_on_exception= ","Thread  abort_on_exception "]}," Concurrent Synchronization RbxAttrVolatile full_memory_barrier":{"type":"method","name":"full_memory_barrier","children":[],"call":["Rubinius  memory_barrier "]}," Concurrent Synchronization RbxAttrVolatile ClassMethods attr_volatile":{"type":"method","name":"attr_volatile","children":[],"call":["(send\n  (lvar :names) :map) flatten ","names map "," class_eval ","13 + ","names each ","14 + ","15 + "]}," Concurrent Synchronization RbxAttrVolatile included":{"type":"method","name":"included","children":[],"call":[]}," Concurrent Synchronization RbxLockableObject ns_broadcast":{"type":"method","name":"ns_broadcast","children":[],"call":["@__Waiters__ shift << ","@__Waiters__ shift ","@__Waiters__ empty? "]}," Concurrent Synchronization RbxLockableObject ns_signal":{"type":"method","name":"ns_signal","children":[],"call":["@__Waiters__ shift << ","@__Waiters__ shift ","@__Waiters__ empty? "]}," Concurrent Synchronization RbxLockableObject ns_wait":{"type":"method","name":"ns_wait","children":[],"call":["@__Waiters__ shift << ","@__Waiters__ shift ","@__Waiters__ empty? ","@__Waiters__ delete ! ","@__Waiters__ delete ","signaled ! ","Rubinius  lock ","wchan receive_timeout ","Rubinius  unlock ","@__Waiters__ push ","Rubinius Channel  new ","wchan receive_timeout  ! ","Rubinius Channel  new  receive_timeout "]}," Concurrent Synchronization RbxLockableObject synchronize":{"type":"method","name":"synchronize","children":[],"call":["Thread  current ","Rubinius  synchronize ","@__owner__ == ","Rubinius  unlock ","Rubinius  lock ","Thread  current  == "]}," Concurrent Synchronization RbxLockableObject initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent Synchronization Object initialize_volatile_with_cas":{"type":"method","name":"initialize_volatile_with_cas","children":[],"call":[]}," Concurrent Synchronization Object define_initialize_volatile_with_cas":{"type":"method","name":"define_initialize_volatile_with_cas","children":[],"call":[]}," Concurrent Synchronization Object volatile_cas_fields":{"type":"method","name":"volatile_cas_fields","children":[],"call":[]}," Concurrent Synchronization Object attr_atomic":{"type":"method","name":"attr_atomic","children":[],"call":[]}," Concurrent Synchronization Object ensure_safe_initialization_when_final_fields_are_present":{"type":"method","name":"ensure_safe_initialization_when_final_fields_are_present","children":[{"type":"method","name":"new","children":[],"asgn":[],"call":[]}],"call":[]}," Concurrent Synchronization Object safe_initialization?":{"type":"method","name":"safe_initialization?","children":[],"call":[]}," Concurrent Synchronization Object safe_initialization!":{"type":"method","name":"safe_initialization!","children":[{"type":"method","name":"new","children":[],"asgn":[],"call":[]}],"call":[]}," Concurrent Synchronization Object initialize":{"type":"method","name":"initialize","children":[],"call":[" initialize_volatile_with_cas "," initialize_volatile_cas_fields "," __initialize_atomic_fields__ "]}," Concurrent Synchronization MriObject initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent Synchronization MriAttrVolatile full_memory_barrier":{"type":"method","name":"full_memory_barrier","children":[],"call":[]}," Concurrent Synchronization MriAttrVolatile ClassMethods attr_volatile":{"type":"method","name":"attr_volatile","children":[],"call":["(send\n  (lvar :names) :map) flatten ","names map "," class_eval ","13 + ","names each ","14 + "]}," Concurrent Synchronization MriAttrVolatile included":{"type":"method","name":"included","children":[],"call":[]}," Concurrent Synchronization MriMonitorLockableObject ns_wait":{"type":"method","name":"ns_wait","children":[],"call":["@__condition__ wait "]}," Concurrent Synchronization MriMonitorLockableObject synchronize":{"type":"method","name":"synchronize","children":[],"call":["@__lock__ synchronize "]}," Concurrent Synchronization MriMonitorLockableObject initialize":{"type":"method","name":"initialize","children":[],"call":["@__lock__ new_cond "," Monitor  new "," Monitor  new  new_cond "]}," Concurrent Synchronization MriMutexLockableObject ns_wait":{"type":"method","name":"ns_wait","children":[],"call":["@__condition__ wait "]}," Concurrent Synchronization MriMutexLockableObject synchronize":{"type":"method","name":"synchronize","children":[],"call":["@__lock__ synchronize ","@__lock__ owned? "]}," Concurrent Synchronization MriMutexLockableObject initialize":{"type":"method","name":"initialize","children":[],"call":[" ConditionVariable  new "," Mutex  new "]}," Concurrent Synchronization MriLockableObject ns_broadcast":{"type":"method","name":"ns_broadcast","children":[],"call":["@__condition__ broadcast "]}," Concurrent Synchronization MriLockableObject ns_signal":{"type":"method","name":"ns_signal","children":[],"call":["@__condition__ signal "]}," Concurrent Synchronization JRubyObject initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent Synchronization JRubyAttrVolatile ClassMethods attr_volatile":{"type":"method","name":"attr_volatile","children":[],"call":["(send\n  (lvar :names) :map) flatten ","names map "," class_eval ","17 + ","names each ","18 + "]}," Concurrent Synchronization JRubyAttrVolatile included":{"type":"method","name":"included","children":[],"call":[]}," Concurrent Synchronization LockableObject new_condition":{"type":"method","name":"new_condition","children":[],"call":["Condition  private_new "]}," Concurrent Synchronization AbstractObject full_memory_barrier":{"type":"method","name":"full_memory_barrier","children":[],"call":[" raise "]}," Concurrent Synchronization AbstractLockableObject ns_broadcast":{"type":"method","name":"ns_broadcast","children":[],"call":[" raise "]}," Concurrent Synchronization AbstractLockableObject ns_signal":{"type":"method","name":"ns_signal","children":[],"call":[" raise "]}," Concurrent Synchronization AbstractLockableObject ns_wait":{"type":"method","name":"ns_wait","children":[],"call":[" raise "]}," Concurrent Synchronization AbstractLockableObject ns_wait_until":{"type":"method","name":"ns_wait_until","children":[],"call":[" ns_wait ","condition call ","wait_until - ","now >= ","Concurrent  monotonic_time "," loop ","Concurrent  monotonic_time + ","Concurrent  monotonic_time +  - ","Concurrent  monotonic_time  >= "]}," Concurrent Synchronization AbstractLockableObject synchronize":{"type":"method","name":"synchronize","children":[],"call":[" raise "]}," Concurrent Options executor":{"type":"method","name":"executor","children":[],"call":[]}," Concurrent Options executor_from_options":{"type":"method","name":"executor_from_options","children":[],"call":[]}," Concurrent MVar synchronize":{"type":"method","name":"synchronize","children":[],"call":["@mutex synchronize "]}," Concurrent MVar borrow":{"type":"method","name":"borrow","children":[],"call":[" unlocked_full? "," wait_for_full ","@mutex synchronize "]}," Concurrent Map validate_options_hash!":{"type":"method","name":"validate_options_hash!","children":[],"call":[" raise ","load_factor > ","load_factor <= ","load_factor kind_of? ! ","load_factor kind_of? ","options [] ","initial_capacity < ","initial_capacity kind_of? ! ","initial_capacity kind_of? ","options []  > ","options []  <= ","options []  kind_of? ! ","options []  kind_of? ","options []  < "]}," Concurrent Map populate_from":{"type":"method","name":"populate_from","children":[],"call":[" []= ","hash each_pair "]}," Concurrent Map initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":[" populate_from "]}," Concurrent Map raise_fetch_no_key":{"type":"method","name":"raise_fetch_no_key","children":[],"call":[" raise "]}," Concurrent Map marshal_load":{"type":"method","name":"marshal_load","children":[],"call":[" populate_from "," initialize "]}," Concurrent Map marshal_dump":{"type":"method","name":"marshal_dump","children":[],"call":["h []= "," each_pair "," raise "]}," Concurrent Map size":{"type":"method","name":"size","children":[],"call":[" each_pair "]}," Concurrent Map empty?":{"type":"method","name":"empty?","children":[],"call":[" each_pair "]}," Concurrent Map key":{"type":"method","name":"key","children":[],"call":["v == "," each_pair "]}," Concurrent Map each_value":{"type":"method","name":"each_value","children":[],"call":[" each_pair "]}," Concurrent Map each_key":{"type":"method","name":"each_key","children":[],"call":[" each_pair "]}," Concurrent Map values":{"type":"method","name":"values","children":[],"call":["arr << "," each_pair "]}," Concurrent Map keys":{"type":"method","name":"keys","children":[],"call":["arr << "," each_pair "]}," Concurrent Map value?":{"type":"method","name":"value?","children":[],"call":["value equal? "," each_value "]}," Concurrent Map put_if_absent":{"type":"method","name":"put_if_absent","children":[],"call":[" compute_if_absent "]}," Concurrent Map fetch_or_store":{"type":"method","name":"fetch_or_store","children":[],"call":[" put "," raise_fetch_no_key ","NULL  == "," block_given? "," fetch "]}," Concurrent Map fetch":{"type":"method","name":"fetch","children":[],"call":[" raise_fetch_no_key ","NULL  != "," block_given? "," get_or_default "]}," Concurrent Map []":{"type":"method","name":"[]","children":[],"call":["@default_proc call ","NULL  == "," get_or_default "," == "]}," Concurrent Map initialize":{"type":"method","name":"initialize","children":[],"call":[" validate_options_hash! ","options kind_of? "]}," Concurrent ImmutableStruct included":{"type":"method","name":"included","children":[],"call":[]}," Concurrent TimerSet ns_shutdown_execution":{"type":"method","name":"ns_shutdown_execution","children":[],"call":[" stopped_event set "," stopped_event ","@timer_executor kill ","@queue clear "," ns_reset_if_forked "]}," Concurrent RubyThreadPoolExecutor worker_task_completed":{"type":"method","name":"worker_task_completed","children":[],"call":[" synchronize "]}," Concurrent RubyThreadPoolExecutor completed_task_count":{"type":"method","name":"completed_task_count","children":[],"call":[" synchronize "]}," Concurrent RubyThreadPoolExecutor scheduled_task_count":{"type":"method","name":"scheduled_task_count","children":[],"call":[" synchronize "]}," Concurrent RubyThreadPoolExecutor largest_length":{"type":"method","name":"largest_length","children":[],"call":[" synchronize "]}," Concurrent RubyExecutorService ns_shutdown_execution":{"type":"method","name":"ns_shutdown_execution","children":[],"call":[" stopped_event set "," stopped_event "]}," Concurrent RubyExecutorService stopped_event":{"type":"method","name":"stopped_event","children":[],"call":[]}," Concurrent RubyExecutorService stop_event":{"type":"method","name":"stop_event","children":[],"call":[]}," Concurrent AbstractExecutorService ns_kill_execution":{"type":"method","name":"ns_kill_execution","children":[],"call":[]}," Concurrent AbstractExecutorService ns_shutdown_execution":{"type":"method","name":"ns_shutdown_execution","children":[],"call":[]}," Concurrent AbstractExecutorService ns_execute":{"type":"method","name":"ns_execute","children":[],"call":[" raise "]}," Concurrent JavaExchanger do_exchange":{"type":"method","name":"do_exchange","children":[],"call":[" java util concurrent TimeoutException "," java util concurrent "," java util "," java ","@exchanger exchange "," java util concurrent TimeUnit ","1000 * ","timeout nil? ","Synchronization JRuby  sleep_interruptibly "]}," Concurrent JavaExchanger initialize":{"type":"method","name":"initialize","children":[],"call":[" java util concurrent Exchanger new "," java util concurrent Exchanger "," java util concurrent "," java util "," java "]}," Concurrent RubyExchanger do_exchange":{"type":"method","name":"do_exchange","children":[],"call":["result == ","Concurrent  monotonic_time >= ","Concurrent  monotonic_time ","me value ","me compare_and_set_value ! ","me compare_and_set_value "," compare_and_set_slot ","me latch wait ","me latch ","end_at - ","other nil? ","other item ","other latch count_down ","other latch ","other compare_and_set_value "," slot "," loop ","Concurrent  monotonic_time + ","timeout to_f ","Node  new ","value nil? ","me get ","me compare_and_set ! ","me compare_and_set ","slot compare_and_set ","other compare_and_set ","slot get ","Concurrent  monotonic_tiNode  new  >= ","Concurrent  monotonic_tiNode  new  ","Node  new  value ","Node  new  compare_and_set_value ! ","Node  new  compare_and_set_value ","Node  new  latch wait ","Node  new  latch ","Concurrent  monotonic_time +  - "," slot  nil? ","slot get  nil? "," slot  item ","slot get  item "," slot  latch count_down ","slot get  latch count_down "," slot  latch ","slot get  latch "," slot  compare_and_set_value ","slot get  compare_and_set_value ","Concurrent  monotonic_tiNode  new  + ","end_at -  to_f ","tiNode  new out to_f ","Node  new  get ","Node  new  compare_and_set ! ","Node  new  compare_and_set "," slot  compare_and_set ","slot get  compare_and_set "]}," Concurrent RubyExchanger initialize":{"type":"method","name":"initialize","children":[],"call":["Concurrent AtomicReference  new "]}," Concurrent RubyExchanger Node item":{"type":"method","name":"item","children":[],"call":[]}," Concurrent RubyExchanger Node latch":{"type":"method","name":"latch","children":[],"call":[]}," Concurrent RubyExchanger Node initialize":{"type":"method","name":"initialize","children":[],"call":[" value= ","Concurrent CountDownLatch  new "]}," Concurrent AbstractExchanger do_exchange":{"type":"method","name":"do_exchange","children":[],"call":[" raise "]}," Concurrent AbstractExchanger try_exchange":{"type":"method","name":"try_exchange","children":[],"call":["Concurrent Maybe  just ","Concurrent Maybe  nothing ","(lvasgn :value\n  (send nil :do_exchange\n    (lvar :value)\n    (lvar :timeout))) == "," do_exchange ","(lvasgn : do_exchange \n  (send nil :do_exchange\n    (lvar : do_exchange )\n    (lvar :timeout))) == "]}," Concurrent AbstractExchanger exchange!":{"type":"method","name":"exchange!","children":[],"call":[" raise ","(lvasgn :value\n  (send nil :do_exchange\n    (lvar :value)\n    (lvar :timeout))) == "," do_exchange ","(lvasgn : do_exchange \n  (send nil :do_exchange\n    (lvar : do_exchange )\n    (lvar :timeout))) == "]}," Concurrent AbstractExchanger exchange":{"type":"method","name":"exchange","children":[],"call":["(lvasgn :value\n  (send nil :do_exchange\n    (lvar :value)\n    (lvar :timeout))) == "," do_exchange ","(lvasgn : do_exchange \n  (send nil :do_exchange\n    (lvar : do_exchange )\n    (lvar :timeout))) == "]}," Concurrent AbstractExchanger initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "]}," Concurrent Collection RubyNonConcurrentPriorityQueue swim":{"type":"method","name":"swim","children":[],"call":["k / "," swap "," ordered? ! "," ordered? ","k > ","k /  / ","k /  > "]}," Concurrent Collection RubyNonConcurrentPriorityQueue sink":{"type":"method","name":"sink","children":[],"call":[" swap "," ordered? "," ordered? ! ","j + ","j < ","(lvasgn :j\n  (begin\n    (send\n      (int 2) :*\n      (lvar :k)))) <= ","2 * "]}," Concurrent Collection RubyNonConcurrentPriorityQueue ordered?":{"type":"method","name":"ordered?","children":[],"call":["(send\n  (send\n    (ivar :@queue) :[]\n    (lvar :x)) :<=>\n  (send\n    (ivar :@queue) :[]\n    (lvar :y))) == ","@queue [] <=> ","@queue [] "]}," Concurrent Collection RubyNonConcurrentPriorityQueue swap":{"type":"method","name":"swap","children":[],"call":["@queue []= ","@queue [] "]}," Concurrent Collection RubyNonConcurrentPriorityQueue from_list":{"type":"method","name":"from_list","children":[],"call":[]}," Concurrent Collection RubyNonConcurrentPriorityQueue push":{"type":"method","name":"push","children":[],"call":[" swim ","@queue << "," raise ","ArgumentError  new ","item nil? "]}," Concurrent Collection RubyNonConcurrentPriorityQueue pop":{"type":"method","name":"pop","children":[],"call":["@queue pop "," sink "," swap ","@queue [] "," empty? "]}," Concurrent Collection RubyNonConcurrentPriorityQueue peek":{"type":"method","name":"peek","children":[],"call":["@queue [] "," empty? "]}," Concurrent Collection RubyNonConcurrentPriorityQueue length":{"type":"method","name":"length","children":[],"call":[]}," Concurrent Collection RubyNonConcurrentPriorityQueue include?":{"type":"method","name":"include?","children":[],"call":["@queue include? "]}," Concurrent Collection RubyNonConcurrentPriorityQueue empty?":{"type":"method","name":"empty?","children":[],"call":[" size == "," size "]}," Concurrent Collection RubyNonConcurrentPriorityQueue delete":{"type":"method","name":"delete","children":[],"call":["@length != ","@queue pop "," sink "," swap ","@queue [] == ","@queue [] ","k <= "," empty? "," swim "]}," Concurrent Collection RubyNonConcurrentPriorityQueue clear":{"type":"method","name":"clear","children":[],"call":[]}," Concurrent Collection RubyNonConcurrentPriorityQueue initialize":{"type":"method","name":"initialize","children":[],"call":[" clear ","(sym :min) include? ","opts fetch "]}," Concurrent Collection SynchronizedMapBackend dupped_backend":{"type":"method","name":"dupped_backend","children":[],"call":[" synchronize "]}," Concurrent Collection SynchronizedMapBackend get_or_default":{"type":"method","name":"get_or_default","children":[],"call":[" synchronize "]}," Concurrent Collection SynchronizedMapBackend size":{"type":"method","name":"size","children":[],"call":[" synchronize "]}," Concurrent Collection SynchronizedMapBackend clear":{"type":"method","name":"clear","children":[],"call":[" synchronize "]}," Concurrent Collection SynchronizedMapBackend delete_pair":{"type":"method","name":"delete_pair","children":[],"call":[" synchronize "]}," Concurrent Collection SynchronizedMapBackend delete":{"type":"method","name":"delete","children":[],"call":[" synchronize "]}," Concurrent Collection SynchronizedMapBackend value?":{"type":"method","name":"value?","children":[],"call":[" synchronize "]}," Concurrent Collection SynchronizedMapBackend key?":{"type":"method","name":"key?","children":[],"call":[" synchronize "]}," Concurrent Collection SynchronizedMapBackend get_and_set":{"type":"method","name":"get_and_set","children":[],"call":[" synchronize "]}," Concurrent Collection SynchronizedMapBackend replace_if_exists":{"type":"method","name":"replace_if_exists","children":[],"call":[" synchronize "]}," Concurrent Collection SynchronizedMapBackend replace_pair":{"type":"method","name":"replace_pair","children":[],"call":[" synchronize "]}," Concurrent Collection SynchronizedMapBackend merge_pair":{"type":"method","name":"merge_pair","children":[],"call":[" synchronize "]}," Concurrent Collection SynchronizedMapBackend compute":{"type":"method","name":"compute","children":[],"call":[" synchronize "]}," Concurrent Collection SynchronizedMapBackend compute_if_present":{"type":"method","name":"compute_if_present","children":[],"call":[" synchronize "]}," Concurrent Collection SynchronizedMapBackend compute_if_absent":{"type":"method","name":"compute_if_absent","children":[],"call":[" synchronize "]}," Concurrent Collection SynchronizedMapBackend []=":{"type":"method","name":"[]=","children":[],"call":[" synchronize "]}," Concurrent Collection SynchronizedMapBackend []":{"type":"method","name":"[]","children":[],"call":[" synchronize "]}," Concurrent Collection NonConcurrentMapBackend store_computed_value":{"type":"method","name":"store_computed_value","children":[],"call":["@backend []= ","@backend delete ","new_value nil? "]}," Concurrent Collection NonConcurrentMapBackend pair?":{"type":"method","name":"pair?","children":[],"call":["expected_value equal? ","NULL  != ","@backend fetch "]}," Concurrent Collection NonConcurrentMapBackend dupped_backend":{"type":"method","name":"dupped_backend","children":[],"call":["@backend dup "]}," Concurrent Collection NonConcurrentMapBackend initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["Hash  new "," set_backend "]}," Concurrent Collection NonConcurrentMapBackend get_or_default":{"type":"method","name":"get_or_default","children":[],"call":["@backend fetch "]}," Concurrent Collection NonConcurrentMapBackend size":{"type":"method","name":"size","children":[],"call":["@backend size "]}," Concurrent Collection NonConcurrentMapBackend each_pair":{"type":"method","name":"each_pair","children":[],"call":[" dupped_backend each_pair "," dupped_backend "," enum_for "," block_given? "]}," Concurrent Collection NonConcurrentMapBackend clear":{"type":"method","name":"clear","children":[],"call":["@backend clear "]}," Concurrent Collection NonConcurrentMapBackend delete_pair":{"type":"method","name":"delete_pair","children":[],"call":["@backend delete "," pair? "]}," Concurrent Collection NonConcurrentMapBackend delete":{"type":"method","name":"delete","children":[],"call":["@backend delete "]}," Concurrent Collection NonConcurrentMapBackend value?":{"type":"method","name":"value?","children":[],"call":["@backend value? "]}," Concurrent Collection NonConcurrentMapBackend key?":{"type":"method","name":"key?","children":[],"call":["@backend key? "]}," Concurrent Collection NonConcurrentMapBackend get_and_set":{"type":"method","name":"get_and_set","children":[],"call":["@backend []= ","@backend [] "," get_or_default "]}," Concurrent Collection NonConcurrentMapBackend merge_pair":{"type":"method","name":"merge_pair","children":[],"call":[" store_computed_value ","@backend []= ","NULL  == ","@backend fetch "]}," Concurrent Collection NonConcurrentMapBackend compute":{"type":"method","name":"compute","children":[],"call":[" store_computed_value ","@backend [] "," get_or_default "]}," Concurrent Collection NonConcurrentMapBackend compute_if_present":{"type":"method","name":"compute_if_present","children":[],"call":[" store_computed_value ","NULL  != ","@backend fetch "]}," Concurrent Collection NonConcurrentMapBackend replace_if_exists":{"type":"method","name":"replace_if_exists","children":[],"call":["@backend []= ","NULL  != ","@backend fetch "]}," Concurrent Collection NonConcurrentMapBackend replace_pair":{"type":"method","name":"replace_pair","children":[],"call":["@backend []= "," pair? "]}," Concurrent Collection NonConcurrentMapBackend compute_if_absent":{"type":"method","name":"compute_if_absent","children":[],"call":["@backend []= ","NULL  != ","@backend fetch "]}," Concurrent Collection NonConcurrentMapBackend []=":{"type":"method","name":"[]=","children":[],"call":["@backend []= "]}," Concurrent Collection NonConcurrentMapBackend []":{"type":"method","name":"[]","children":[],"call":["@backend [] "]}," Concurrent Collection NonConcurrentMapBackend initialize":{"type":"method","name":"initialize","children":[],"call":["Hash  new "," validate_options_hash! ","options kind_of? "," set_backend "]}," Concurrent Collection MriMapBackend clear":{"type":"method","name":"clear","children":[],"call":["@write_lock synchronize "]}," Concurrent Collection MriMapBackend delete_pair":{"type":"method","name":"delete_pair","children":[],"call":["@write_lock synchronize "]}," Concurrent Collection MriMapBackend delete":{"type":"method","name":"delete","children":[],"call":["@write_lock synchronize "]}," Concurrent Collection MriMapBackend get_and_set":{"type":"method","name":"get_and_set","children":[],"call":["@write_lock synchronize "]}," Concurrent Collection MriMapBackend replace_if_exists":{"type":"method","name":"replace_if_exists","children":[],"call":["@write_lock synchronize "]}," Concurrent Collection MriMapBackend replace_pair":{"type":"method","name":"replace_pair","children":[],"call":["@write_lock synchronize "]}," Concurrent Collection MriMapBackend merge_pair":{"type":"method","name":"merge_pair","children":[],"call":["@write_lock synchronize "]}," Concurrent Collection MriMapBackend compute":{"type":"method","name":"compute","children":[],"call":["@write_lock synchronize "]}," Concurrent Collection MriMapBackend compute_if_present":{"type":"method","name":"compute_if_present","children":[],"call":["@write_lock synchronize "]}," Concurrent Collection MriMapBackend compute_if_absent":{"type":"method","name":"compute_if_absent","children":[],"call":["@write_lock synchronize "," _get ","NULL  != ","@backend fetch "]}," Concurrent Collection MriMapBackend []=":{"type":"method","name":"[]=","children":[],"call":["@write_lock synchronize "]}," Concurrent Collection MriMapBackend initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "]}," Concurrent Collection AtomicReferenceMapBackend decrement_size":{"type":"method","name":"decrement_size","children":[],"call":["@counter add ","by -@ "]}," Concurrent Collection AtomicReferenceMapBackend increment_size":{"type":"method","name":"increment_size","children":[],"call":["@counter increment "]}," Concurrent Collection AtomicReferenceMapBackend split_bin":{"type":"method","name":"split_bin","children":[],"call":["new_table volatile_set ","i + ","current_node next ","Node  new ","current_node value ","current_node key ","(send\n  (lvar :pure_hash) :&\n  (lvar :bit)) == ","pure_hash & ","current_node pure_hash ","current_node == ","run_bit == ","(lvasgn :b\n  (send\n    (send\n      (lvar :current_node) :hash) :&\n    (lvar :bit))) == ","current_node hash & ","current_node hash ","node_hash & ","new_table size >> ","new_table size ","new_tacurrent_node hash & le volatile_set ","current_node next  next ","current_node next  value ","current_node next  key ","(send\n  (lvar :current_node pure_hash ) :&\n  (lvar :bit)) == ","(send\n  (lvar :pure_hash) :&\n  (lvar :current_node hash & it)) == ","(send\n  (lvar :pure_hash) :&\n  (lvar :new_table size >> )) == ","current_node pure_hash  & ","current_node next  pure_hash ","current_node current_node pure_hash  ","current_node next  == ","run_current_node hash & it == ","node_hash &  == ","run_new_table size >>  == ","(lvasgn :b\n  (send\n    (send\n      (lvar :current_node next ) :hash) :&\n    (lvar :bit))) == ","(lvasgn :current_node hash & \n  (send\n    (send\n      (lvar :current_node) :hash) :&\n    (lvar :current_node hash & it))) == ","(lvasgn :b\n  (send\n    (send\n      (lvar :current_node) :hash) :&\n    (lvar :new_table size >> ))) == ","current_node next  hash & ","current_node next  hash ","new_tacurrent_node hash & le size >> ","new_tacurrent_node hash & le size "]}," Concurrent Collection AtomicReferenceMapBackend split_old_bin":{"type":"method","name":"split_old_bin","children":[],"call":["table volatile_set "," split_bin ","table try_lock_via_hash "]}," Concurrent Collection AtomicReferenceMapBackend lock_and_clean_up_reverse_forwarders":{"type":"method","name":"lock_and_clean_up_reverse_forwarders","children":[],"call":["locked_forwarder unlock_via_hash ","old_table volatile_set ","new_table volatile_set ","i + ","old_table cas ","Node  new ","MOVED  | ","Node  new  unlock_via_hash "]}," Concurrent Collection AtomicReferenceMapBackend rebuild":{"type":"method","name":"rebuild","children":[],"call":["locked_indexes size - ","locked_indexes size ","locked_indexes pop ","locked_indexes empty? ! ","locked_indexes empty? ","bin > "," split_old_bin ","new_table volatile_set ","i + ","locked_indexes << ","node locked? ","table volatile_get == ","table volatile_get ","Node  new ","node try_await_lock ","locked_indexes size >= ","bin < ","locked_indexes [] ","locked_indexes []= ","locked_arr_idx > ","Array  new ","Node  locked_hash? ","node hash "," lock_and_clean_up_reverse_forwarders ","table cas ","bin >= ","(lvasgn :node\n  (send\n    (lvar :table) :volatile_get\n    (lvar :i))) ! ","old_table_size - ","table next_in_size_table ","table size "," Array  new ","locked_locked_indexes pop ndexes slocked_indexes pop ze - ","locked_locked_indexes pop ndexes slocked_indexes pop ze ","locked_locked_indexes pop ndexes pop ","locked_locked_indexes pop ndexes empty? ! ","locked_locked_indexes pop ndexes empty? ","blocked_indexes pop n > ","old_table_size -  > "," spllocked_indexes pop t_old_blocked_indexes pop n "," split_old_old_table_size -  ","new_table volatlocked_indexes pop le_set ","table next_in_size_table  volatile_set ","locked_indexes pop  + ","locked_locked_indexes pop ndexes << ","table volatile_get  locked? ","table volatlocked_indexes pop le_get == ","table volatlocked_indexes pop le_get ","node try_awalocked_indexes pop t_lock ","table volatile_get  try_await_lock ","locked_locked_indexes pop ndexes slocked_indexes pop ze >= ","blocked_indexes pop n < ","old_table_size -  < ","locked_locked_indexes pop ndexes [] ","locked_locked_indexes pop ndexes []= ","locked_indexes size -  > ","locked_arr_locked_indexes pop dx > ","table volatile_get  hash "," lock_and_clean_up_reverse_Node  new s ","blocked_indexes pop n >= ","old_table_size -  >= ","(lvasgn :node\n  (send\n    (lvar :table) :volatlocked_indexes pop le_get\n    (lvar :locked_indexes pop ))) ! ","(lvasgn :table volatile_get \n  (send\n    (lvar :table) :volatile_get\n    (lvar :i))) ! ","old_table_slocked_indexes pop ze - ","table size  - ","table next_locked_indexes pop n_slocked_indexes pop ze_table ","table slocked_indexes pop ze "]}," Concurrent Collection AtomicReferenceMapBackend try_in_resize_lock":{"type":"method","name":"try_in_resize_lock","children":[],"call":[" size_control= ","current_table == "," table "," cas_size_control "]}," Concurrent Collection AtomicReferenceMapBackend check_for_resize":{"type":"method","name":"check_for_resize","children":[],"call":["(send\n  (lvar :table_size) :<<\n  (int 1)) - ","table_size >> ","table_size << "," table= "," rebuild "," try_in_resize_lock ","size_ctrl < ","@counter sum ","NOW_RESIZING  != "," size_control ","MAX_CAPACITY  > ","current_table size "," table ","(send\n  (lvar :current_table size ) :<<\n  (int 1)) - ","current_table size  >> ","current_table size  << "," size_control  < "," table  size "]}," Concurrent Collection AtomicReferenceMapBackend initialize_table":{"type":"method","name":"initialize_table","children":[],"call":["initial_size - ","initial_size >> "," table= ","Table  new ","size_ctrl > "," try_in_resize_lock ","Thread  pass ","(lvasgn :size_ctrl\n  (send nil :size_control)) == "," size_control "," table "," size_control  > ","(lvasgn : size_control \n  (send nil :size_control)) == "]}," Concurrent Collection AtomicReferenceMapBackend table_size_for":{"type":"method","name":"table_size_for","children":[],"call":["size < "]}," Concurrent Collection AtomicReferenceMapBackend key_hash":{"type":"method","name":"key_hash","children":[],"call":["key hash & ","key hash "]}," Concurrent Collection AtomicReferenceMapBackend try_await_lock":{"type":"method","name":"try_await_lock","children":[],"call":["node try_await_lock "," check_for_resize "]}," Concurrent Collection AtomicReferenceMapBackend initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":[" size_control= ","other_table size ","other table "," table= ","Concurrent ThreadSafe Util Adder  new ","other table  size "]}," Concurrent Collection AtomicReferenceMapBackend attempt_get_and_set":{"type":"method","name":"attempt_get_and_set","children":[],"call":[" check_for_resize ","current_table size <= ","current_table size ","node_nesting > "," increment_size ","last next= ","Node  new ","node next ","node value= ","NULL  != ","node value ","node matches? ","current_table try_lock_via_hash ","node next _nesting > ","node next  next ","node next  value= ","node next  value ","node next  matches? "]}," Concurrent Collection AtomicReferenceMapBackend attempt_compute":{"type":"method","name":"attempt_compute","children":[],"call":[" check_for_resize "," increment_size ","predecessor_node next= ","Node  new ","NULL  == ","node next "," decrement_size ","current_table delete_node_at ","node value= ","NULL  != ","node value ","node matches? ","current_table try_lock_via_hash ","predecessor_node next  next= ","node next  next ","current_table delete_node next _at ","node next  value= ","node node value = ","node next  value ","node node value  ","node next  matches? "]}," Concurrent Collection AtomicReferenceMapBackend attempt_internal_compute_if_absent":{"type":"method","name":"attempt_internal_compute_if_absent","children":[],"call":[" check_for_resize "," increment_size ","last next= ","Node  new ","node next ","NULL  != ","node value ","node matches? ","current_table try_lock_via_hash ","node next  next ","node next  value ","node node value  ","node next  matches? "]}," Concurrent Collection AtomicReferenceMapBackend internal_compute":{"type":"method","name":"internal_compute","children":[],"call":[" attempt_compute "," try_await_lock ","Node  locked_hash? ","node key ","(lvasgn :node_hash\n  (send\n    (lvar :node) :hash)) == ","node hash "," increment_size ","NULL  == ","current_table try_to_cas_in_computed ","(lvasgn :node\n  (send\n    (lvar :current_table) :volatile_get\n    (lvasgn :i\n      (send\n        (lvar :current_table) :hash_to_index\n        (lvar :hash))))) ! ","current_table volatile_get ","current_table hash_to_index "," initialize_table "," table "," key_hash "," try_awacurrent_table hash_to_index t_lock ","Node  locked_ key_hash ? ","current_table volatile_get  key ","(lvasgn :node hash \n  (send\n    (lvar :node) :hash)) == ","(lvasgn :current_table volatile_get _hash\n  (send\n    (lvar :current_table volatile_get ) :hash)) == ","(lvasgn :node_ key_hash \n  (send\n    (lvar :node) : key_hash )) == ","current_table volatile_get  hash ","node  key_hash  "," current_table hash_to_index ncrement_scurrent_table hash_to_index ze ","node key  try_to_cas_in_computed ","current_table try_to_cas_current_table hash_to_index n_computed ","(lvasgn :node\n  (send\n    (lvar :node key ) :volatile_get\n    (lvasgn :i\n      (send\n        (lvar :node key ) :hash_to_index\n        (lvar :hash))))) ! ","(lvasgn :current_table volatile_get \n  (send\n    (lvar :current_table) :volatile_get\n    (lvasgn :i\n      (send\n        (lvar :current_table) :hash_to_index\n        (lvar :hash))))) ! ","(lvasgn :node\n  (send\n    (lvar :current_table) :volatcurrent_table hash_to_index le_get\n    (lvasgn :current_table hash_to_index \n      (send\n        (lvar :current_table) :hash_to_current_table hash_to_index ndex\n        (lvar :hash))))) ! ","(lvasgn :node\n  (send\n    (lvar :current_table) :volatile_get\n    (lvasgn :i\n      (send\n        (lvar :current_table) : key_hash _to_index\n        (lvar : key_hash ))))) ! ","node key  volatile_get ","current_table volatcurrent_table hash_to_index le_get ","node key  hash_to_index ","current_table hash_to_current_table hash_to_index ndex ","current_table  key_hash _to_index "," current_table hash_to_index ncurrent_table hash_to_index tcurrent_table hash_to_index alcurrent_table hash_to_index ze_table "," key_ key_hash  "]}," Concurrent Collection AtomicReferenceMapBackend find_value_in_node_list":{"type":"method","name":"find_value_in_node_list","children":[],"call":[" check_for_resize ","node pure_hash ","node next ","NULL  != ","node value ","node key? ","pure_hash == ","node node pure_hash  ","node next  pure_hash ","node next  next ","node next  value ","node node value  ","node next  key? ","node pure_hash  == "]}," Concurrent Collection AtomicReferenceMapBackend attempt_internal_replace":{"type":"method","name":"attempt_internal_replace","children":[],"call":[" decrement_size ","current_table delete_node_at ","NULL  == ","node value= ","expected_old_value == ","NULL  != ","node value ","node matches? ","node next ","current_table try_lock_via_hash ","current_table delete_node next _at ","node next  value= ","node next  value ","node next  matches? ","node next  next "]}," Concurrent Collection AtomicReferenceMapBackend internal_replace":{"type":"method","name":"internal_replace","children":[],"call":[" attempt_internal_replace "," try_await_lock ","Node  locked_hash? ","node next ! ","node next ","(send\n  (lvar :node_hash) :&\n  (const nil :HASH_BITS)) != ","node_hash & ","node key ","(lvasgn :node_hash\n  (send\n    (lvar :node) :hash)) == ","node hash ","(lvasgn :node\n  (send\n    (lvar :current_table) :volatile_get\n    (lvasgn :i\n      (send\n        (lvar :current_table) :hash_to_index\n        (lvar :hash))))) ! ","current_table volatile_get ","current_table hash_to_index "," table "," key_hash "," attempt_current_table hash_to_index nternal_replace "," try_awacurrent_table hash_to_index t_lock ","Node  locked_ key_hash ? ","current_table volatile_get  next ! ","current_table volatile_get  next ","(send\n  (lvar :node hash ) :&\n  (const nil :HASH_BITS)) != ","(send\n  (lvar :current_table volatile_get _hash) :&\n  (const nil :HASH_BITS)) != ","(send\n  (lvar :node_hash) :&\n  (const ncurrent_table hash_to_index l :HASH_BITS)) != ","(send\n  (lvar :node_ key_hash ) :&\n  (const nil :HASH_BITS)) != ","node hash  & ","current_table volatile_get _hash & ","node_ key_hash  & ","current_table volatile_get  key ","(lvasgn :node hash \n  (send\n    (lvar :node) :hash)) == ","(lvasgn :current_table volatile_get _hash\n  (send\n    (lvar :current_table volatile_get ) :hash)) == ","(lvasgn :node_ key_hash \n  (send\n    (lvar :node) : key_hash )) == ","current_table volatile_get  hash ","node  key_hash  ","(lvasgn :node\n  (send\n    (lvar :node key ) :volatile_get\n    (lvasgn :i\n      (send\n        (lvar :node key ) :hash_to_index\n        (lvar :hash))))) ! ","(lvasgn :node\n  (send\n    (lvar : table ) :volatile_get\n    (lvasgn :i\n      (send\n        (lvar : table ) :hash_to_index\n        (lvar :hash))))) ! ","(lvasgn :current_table volatile_get \n  (send\n    (lvar :current_table) :volatile_get\n    (lvasgn :i\n      (send\n        (lvar :current_table) :hash_to_index\n        (lvar :hash))))) ! ","(lvasgn :node\n  (send\n    (lvar :current_table) :volatcurrent_table hash_to_index le_get\n    (lvasgn :current_table hash_to_index \n      (send\n        (lvar :current_table) :hash_to_current_table hash_to_index ndex\n        (lvar :hash))))) ! ","(lvasgn :node\n  (send\n    (lvar :current_table) :volatile_get\n    (lvasgn :i\n      (send\n        (lvar :current_table) : key_hash _to_index\n        (lvar : key_hash ))))) ! ","node key  volatile_get "," table  volatile_get ","current_table volatcurrent_table hash_to_index le_get ","node key  hash_to_index "," table  hash_to_index ","current_table hash_to_current_table hash_to_index ndex ","current_table  key_hash _to_index "," key_ key_hash  "]}," Concurrent Collection AtomicReferenceMapBackend clear":{"type":"method","name":"clear","children":[],"call":[" decrement_size ","current_table volatile_set ","node value= ","NULL  != ","node value ","node next ","current_table try_lock_via_hash ","node try_await_lock ","Node  locked_hash? ","current_table size ","node key ","(lvasgn :node_hash\n  (send\n    (lvar :node) :hash)) == ","node hash ","(lvasgn :node\n  (send\n    (lvar :current_table) :volatile_get\n    (lvar :i))) ! ","current_table volatile_get ","i < "," table ","node key  volatile_set "," table  volatile_set ","node next  value= ","current_table volatile_get  value= ","node next  value ","current_table volatile_get  value ","node next  next ","current_table volatile_get  next ","node key  try_lock_via_hash "," table  try_lock_via_hash ","node next  try_await_lock ","current_table volatile_get  try_await_lock ","node key  size "," table  size ","node next  key ","current_table volatile_get  key ","(lvasgn :node next _hash\n  (send\n    (lvar :node next ) :hash)) == ","(lvasgn :current_table volatile_get _hash\n  (send\n    (lvar :current_table volatile_get ) :hash)) == ","(lvasgn :node hash \n  (send\n    (lvar :node) :hash)) == ","node next  hash ","current_table volatile_get  hash ","(lvasgn :node next \n  (send\n    (lvar :current_table) :volatile_get\n    (lvar :i))) ! ","(lvasgn :current_table volatile_get \n  (send\n    (lvar :current_table) :volatile_get\n    (lvar :i))) ! ","(lvasgn :node\n  (send\n    (lvar :node key ) :volatile_get\n    (lvar :i))) ! ","(lvasgn :node\n  (send\n    (lvar : table ) :volatile_get\n    (lvar :i))) ! ","node key  volatile_get "," table  volatile_get "]}," Concurrent Collection AtomicReferenceMapBackend empty?":{"type":"method","name":"empty?","children":[],"call":[" size == "," size "]}," Concurrent Collection AtomicReferenceMapBackend size":{"type":"method","name":"size","children":[],"call":["(lvasgn :sum\n  (send\n    (ivar :@counter) :sum)) < ","@counter sum ","(lvasgn :@counter sum \n  (send\n    (ivar :@counter) :@counter sum )) < ","@counter @counter sum  "]}," Concurrent Collection AtomicReferenceMapBackend each_pair":{"type":"method","name":"each_pair","children":[],"call":["(lvasgn :i_with_base\n  (send\n    (lvar :i) :+\n    (lvar :base_size))) < ","i + ","node key ","NULL  != ","node value ","node next ","current_table size ","node hash == ","node hash ","current_table volatile_get ","base_index < "," table ","(lvasgn :i + \n  (send\n    (lvar :i) :+\n    (lvar :base_size))) < ","(lvasgn :i_with_base\n  (send\n    (lvar :i) :+\n    (lvar :current_table size ))) < ","node next  key ","current_table volatile_get  key ","node node value  ","node next  value ","current_table volatile_get  value ","node next  next ","current_table volatile_get  next ","node key  size "," table  size ","node next  hash == ","current_table volatile_get  hash == ","node next  hash ","current_table volatile_get  hash ","node key  volatile_get "," table  volatile_get "]}," Concurrent Collection AtomicReferenceMapBackend delete_pair":{"type":"method","name":"delete_pair","children":[],"call":["result ! ! ","result ! ","NULL  != "," internal_replace "]}," Concurrent Collection AtomicReferenceMapBackend delete":{"type":"method","name":"delete","children":[],"call":[" replace_if_exists "]}," Concurrent Collection AtomicReferenceMapBackend get_and_set":{"type":"method","name":"get_and_set","children":[],"call":[" attempt_get_and_set "," try_await_lock ","Node  locked_hash? ","node key ","(lvasgn :node_hash\n  (send\n    (lvar :node) :hash)) == ","node hash "," increment_size ","current_table cas_new_node ","(lvasgn :node\n  (send\n    (lvar :current_table) :volatile_get\n    (lvasgn :i\n      (send\n        (lvar :current_table) :hash_to_index\n        (lvar :hash))))) ! ","current_table volatile_get ","current_table hash_to_index "," initialize_table "," table "," key_hash "," try_awacurrent_table hash_to_index t_lock ","Node  locked_ key_hash ? ","current_table volatile_get  key ","(lvasgn :node hash \n  (send\n    (lvar :node) :hash)) == ","(lvasgn :current_table volatile_get _hash\n  (send\n    (lvar :current_table volatile_get ) :hash)) == ","(lvasgn :node_ key_hash \n  (send\n    (lvar :node) : key_hash )) == ","current_table volatile_get  hash ","node  key_hash  "," current_table hash_to_index ncrement_scurrent_table hash_to_index ze ","node key  cas_new_node ","current_table cas_new_current_table volatile_get  ","(lvasgn :node\n  (send\n    (lvar :node key ) :volatile_get\n    (lvasgn :i\n      (send\n        (lvar :node key ) :hash_to_index\n        (lvar :hash))))) ! ","(lvasgn :current_table volatile_get \n  (send\n    (lvar :current_table) :volatile_get\n    (lvasgn :i\n      (send\n        (lvar :current_table) :hash_to_index\n        (lvar :hash))))) ! ","(lvasgn :node\n  (send\n    (lvar :current_table) :volatcurrent_table hash_to_index le_get\n    (lvasgn :current_table hash_to_index \n      (send\n        (lvar :current_table) :hash_to_current_table hash_to_index ndex\n        (lvar :hash))))) ! ","(lvasgn :node\n  (send\n    (lvar :current_table) :volatile_get\n    (lvasgn :i\n      (send\n        (lvar :current_table) : key_hash _to_index\n        (lvar : key_hash ))))) ! ","node key  volatile_get ","current_table volatcurrent_table hash_to_index le_get ","node key  hash_to_index ","current_table hash_to_current_table hash_to_index ndex ","current_table  key_hash _to_index "," current_table hash_to_index ncurrent_table hash_to_index tcurrent_table hash_to_index alcurrent_table hash_to_index ze_table "," key_ key_hash  "]}," Concurrent Collection AtomicReferenceMapBackend replace_if_exists":{"type":"method","name":"replace_if_exists","children":[],"call":["NULL  != "," internal_replace "]}," Concurrent Collection AtomicReferenceMapBackend replace_pair":{"type":"method","name":"replace_pair","children":[],"call":["NULL  != "," internal_replace "]}," Concurrent Collection AtomicReferenceMapBackend merge_pair":{"type":"method","name":"merge_pair","children":[],"call":["(lvasgn :value\n  (yield\n    (lvar :old_value))) nil? ! ","(lvasgn :value\n  (yield\n    (lvar :old_value))) nil? ","NULL  == "," internal_compute "]}," Concurrent Collection AtomicReferenceMapBackend compute":{"type":"method","name":"compute","children":[],"call":["(lvasgn :new_value\n  (yield\n    (if\n      (send\n        (const nil :NULL) :==\n        (lvar :old_value))\n      (nil)\n      (lvar :old_value)))) nil? ","NULL  == "," internal_compute "]}," Concurrent Collection AtomicReferenceMapBackend compute_if_present":{"type":"method","name":"compute_if_present","children":[],"call":["(lvasgn :new_value\n  (yield\n    (if\n      (send\n        (const nil :NULL) :==\n        (lvar :old_value))\n      (nil)\n      (lvar :old_value)))) nil? ","NULL  == "," internal_replace "]}," Concurrent Collection AtomicReferenceMapBackend compute_if_absent":{"type":"method","name":"compute_if_absent","children":[],"call":[" attempt_internal_compute_if_absent "," try_await_lock ","Node  locked_hash? ","NULL  != "," find_value_in_node_list ","node_hash & ","node key ","(lvasgn :node_hash\n  (send\n    (lvar :node) :hash)) == ","node hash "," increment_size ","current_table try_to_cas_in_computed ","(lvasgn :node\n  (send\n    (lvar :current_table) :volatile_get\n    (lvasgn :i\n      (send\n        (lvar :current_table) :hash_to_index\n        (lvar :hash))))) ! ","current_table volatile_get ","current_table hash_to_index "," initialize_table "," table "," key_hash "," attempt_current_table hash_to_index nternal_compute_current_table hash_to_index f_absent "," try_awacurrent_table hash_to_index t_lock ","Node  locked_ key_hash ? "," find_value_in_current_table volatile_get _list "," fcurrent_table hash_to_index nd_value_current_table hash_to_index n_node_lcurrent_table hash_to_index st ","node hash  & ","current_table volatile_get _hash & ","node_ key_hash  & ","current_table volatile_get  key ","(lvasgn :node hash \n  (send\n    (lvar :node) :hash)) == ","(lvasgn :current_table volatile_get _hash\n  (send\n    (lvar :current_table volatile_get ) :hash)) == ","(lvasgn :node_ key_hash \n  (send\n    (lvar :node) : key_hash )) == ","current_table volatile_get  hash ","node  key_hash  "," current_table hash_to_index ncrement_scurrent_table hash_to_index ze ","node key  try_to_cas_in_computed ","current_table try_to_cas_current_table hash_to_index n_computed ","(lvasgn :node\n  (send\n    (lvar :node key ) :volatile_get\n    (lvasgn :i\n      (send\n        (lvar :node key ) :hash_to_index\n        (lvar :hash))))) ! ","(lvasgn :current_table volatile_get \n  (send\n    (lvar :current_table) :volatile_get\n    (lvasgn :i\n      (send\n        (lvar :current_table) :hash_to_index\n        (lvar :hash))))) ! ","(lvasgn :node\n  (send\n    (lvar :current_table) :volatcurrent_table hash_to_index le_get\n    (lvasgn :current_table hash_to_index \n      (send\n        (lvar :current_table) :hash_to_current_table hash_to_index ndex\n        (lvar :hash))))) ! ","(lvasgn :node\n  (send\n    (lvar :current_table) :volatile_get\n    (lvasgn :i\n      (send\n        (lvar :current_table) : key_hash _to_index\n        (lvar : key_hash ))))) ! ","node key  volatile_get ","current_table volatcurrent_table hash_to_index le_get ","node key  hash_to_index ","current_table hash_to_current_table hash_to_index ndex ","current_table  key_hash _to_index "," current_table hash_to_index ncurrent_table hash_to_index tcurrent_table hash_to_index alcurrent_table hash_to_index ze_table "," key_ key_hash  "]}," Concurrent Collection AtomicReferenceMapBackend []=":{"type":"method","name":"[]=","children":[],"call":[" get_and_set "]}," Concurrent Collection AtomicReferenceMapBackend key?":{"type":"method","name":"key?","children":[],"call":[" get_or_default != "," get_or_default "]}," Concurrent Collection AtomicReferenceMapBackend []":{"type":"method","name":"[]","children":[],"call":[" get_or_default "]}," Concurrent Collection AtomicReferenceMapBackend get_or_default":{"type":"method","name":"get_or_default","children":[],"call":["node next ","NULL  != ","node value ","node key? ","(send\n  (lvar :node_hash) :&\n  (const nil :HASH_BITS)) == ","node_hash & ","node key ","(lvasgn :node_hash\n  (send\n    (lvar :node) :hash)) == ","node hash ","current_table volatile_get_by_hash "," table "," key_hash ","node next  next ","current_table volatile_get_by_hash  next ","node next  value ","current_table volatile_get_by_hash  value ","node node value  ","node next  key? ","current_table volatile_get_by_hash  key? ","(send\n  (lvar :node next _hash) :&\n  (const nil :HASH_BITS)) == ","(send\n  (lvar :current_table volatile_get_by_hash _hash) :&\n  (const nil :HASH_BITS)) == ","(send\n  (lvar :node hash ) :&\n  (const nil :HASH_BITS)) == ","(send\n  (lvar :node_ key_hash ) :&\n  (const nil :HASH_BITS)) == ","node next _hash & ","current_table volatile_get_by_hash _hash & ","node hash  & ","node_ key_hash  & ","node next  key ","current_table volatile_get_by_hash  key ","(lvasgn :node next _hash\n  (send\n    (lvar :node next ) :hash)) == ","(lvasgn :current_table volatile_get_by_hash _hash\n  (send\n    (lvar :current_table volatile_get_by_hash ) :hash)) == ","(lvasgn :node hash \n  (send\n    (lvar :node) :hash)) == ","(lvasgn :node_ key_hash \n  (send\n    (lvar :node) : key_hash )) == ","node next  hash ","current_table volatile_get_by_hash  hash ","node  key_hash  "," table  volatile_get_by_hash ","current_table volatile_get_by_ key_hash  "," key_ key_hash  "]}," Concurrent Collection AtomicReferenceMapBackend initialize":{"type":"method","name":"initialize","children":[],"call":[" size_control= ","(lvasgn :capacity\n  (send nil :table_size_for\n    (lvar :initial_capacity))) > "," table_size_for ","options [] ","Concurrent ThreadSafe Util Adder  new ","(lvasgn : table_size_for \n  (send nil :table_size_for\n    (lvar :initial_ table_size_for ))) > "]}," Concurrent Collection AtomicReferenceMapBackend Node locked_hash?":{"type":"method","name":"locked_hash?","children":[],"call":["(send\n  (lvar :hash) :&\n  (const nil :LOCKED)) != ","hash & "]}," Concurrent Collection AtomicReferenceMapBackend Node force_aquire_lock":{"type":"method","name":"force_aquire_lock","children":[],"call":[" cheap_broadcast "," cheap_wait ","(send\n  (send nil :hash) :&\n  (const nil :WAITING)) == "," hash & "," hash "," equal? ","table volatile_get "," cheap_synchronize "]}," Concurrent Collection AtomicReferenceMapBackend Node unlock_via_hash":{"type":"method","name":"unlock_via_hash","children":[],"call":[" cheap_broadcast "," cheap_synchronize "," hash= "," cas_hash "]}," Concurrent Collection AtomicReferenceMapBackend Node locked?":{"type":"method","name":"locked?","children":[],"call":[" class locked_hash? "," hash "," class "]}," Concurrent Collection AtomicReferenceMapBackend Node try_lock_via_hash":{"type":"method","name":"try_lock_via_hash","children":[],"call":[" unlock_via_hash "," cas_hash ","node_hash | "]}," Concurrent Collection AtomicReferenceMapBackend Node pure_hash":{"type":"method","name":"pure_hash","children":[],"call":[" hash & "," hash "]}," Concurrent Collection AtomicReferenceMapBackend Node matches?":{"type":"method","name":"matches?","children":[],"call":[" key? "," pure_hash == "," pure_hash "]}," Concurrent Collection AtomicReferenceMapBackend Node key?":{"type":"method","name":"key?","children":[],"call":["@key eql? "]}," Concurrent Collection AtomicReferenceMapBackend Node try_await_lock":{"type":"method","name":"try_await_lock","children":[],"call":[" force_aquire_lock "," cas_hash ","my_hash | ","Concurrent ThreadSafe Util XorShiftRandom  xorshift ","randomizer zero? ","Thread  pass ","(op-asgn\n  (lvasgn :spins) :-\n  (int 1)) == ","(lvasgn :randomizer\n  (begin\n    (send\n      (lvar :randomizer) :>>\n      (int 1)))) even? ","randomizer >> ","spins >= "," class locked_hash? "," hash "," class "," equal? ","table volatile_get ","Concurrent ThreadSafe Util XorShiftRandom  get ","i < ","table size ","i >= "," force_acquire_lock "," hash  | "]}," Concurrent Collection AtomicReferenceMapBackend Node initialize":{"type":"method","name":"initialize","children":[],"call":[" next= "," lazy_set_value "," lazy_set_hash "]}," Concurrent Collection AtomicReferenceMapBackend Table delete_node_at":{"type":"method","name":"delete_node_at","children":[],"call":[" volatile_set ","node next ","predecessor_node next= "]}," Concurrent Collection AtomicReferenceMapBackend Table try_lock_via_hash":{"type":"method","name":"try_lock_via_hash","children":[],"call":[" volatile_get == "," volatile_get ","node try_lock_via_hash "]}," Concurrent Collection AtomicReferenceMapBackend Table try_to_cas_in_computed":{"type":"method","name":"try_to_cas_in_computed","children":[],"call":["new_node unlock_via_hash "," volatile_set ","succeeded ! ","new_node value= ","NULL  == "," cas ","Node  new ","hash | ","Node  new  unlock_via_hash ","Node  new  value= "]}," Concurrent Collection AtomicReferenceMapBackend Table cas_new_node":{"type":"method","name":"cas_new_node","children":[],"call":[" cas ","Node  new "]}," Concurrent Collection JavaNonConcurrentPriorityQueue from_list":{"type":"method","name":"from_list","children":[],"call":[]}," Concurrent Collection JavaNonConcurrentPriorityQueue push":{"type":"method","name":"push","children":[],"call":["@queue add "," raise ","ArgumentError  new ","item nil? "]}," Concurrent Collection JavaNonConcurrentPriorityQueue pop":{"type":"method","name":"pop","children":[],"call":["@queue poll "]}," Concurrent Collection JavaNonConcurrentPriorityQueue peek":{"type":"method","name":"peek","children":[],"call":["@queue peek "]}," Concurrent Collection JavaNonConcurrentPriorityQueue length":{"type":"method","name":"length","children":[],"call":["@queue size "]}," Concurrent Collection JavaNonConcurrentPriorityQueue include?":{"type":"method","name":"include?","children":[],"call":["@queue contains "]}," Concurrent Collection JavaNonConcurrentPriorityQueue empty?":{"type":"method","name":"empty?","children":[],"call":["@queue size == ","@queue size "]}," Concurrent Collection JavaNonConcurrentPriorityQueue delete":{"type":"method","name":"delete","children":[],"call":["@queue remove "]}," Concurrent Collection JavaNonConcurrentPriorityQueue clear":{"type":"method","name":"clear","children":[],"call":["@queue clear "]}," Concurrent Collection JavaNonConcurrentPriorityQueue initialize":{"type":"method","name":"initialize","children":[],"call":[" java util PriorityQueue new "," java util Collections reverseOrder "," java util Collections "," java util "," java "," java util PriorityQueue ","(sym :min) include? ","opts fetch "]}," Concurrent MutexAtomicReference ns_initialize":{"type":"method","name":"ns_initialize","children":[],"call":[]}," Concurrent MutexCountDownLatch ns_initialize":{"type":"method","name":"ns_initialize","children":[],"call":[]}," Concurrent Atom valid?":{"type":"method","name":"valid?","children":[],"call":["@Validator call "]}," Concurrent Atom reset":{"type":"method","name":"reset","children":[],"call":[" observers notify_observers ","Time  now "," observers "," value= "," valid? "," value "]}," Concurrent Async AsyncDelegator perform":{"type":"method","name":"perform","children":[],"call":["@queue empty? ","@queue shift "," synchronize ","ivar fail ","ivar set ","@delegate send ","@queue first "," loop "]}," Concurrent Agent ns_find_last_job_for_thread":{"type":"method","name":"ns_find_last_job_for_thread","children":[],"call":["job caller == ","Thread  current object_id ","Thread  current ","job caller ","@queue rindex "]}," Concurrent Agent handle_error":{"type":"method","name":"handle_error","children":[],"call":["@error_handler call ","@error value= ","@error_mode == "]}," Concurrent Agent ns_validate":{"type":"method","name":"ns_validate","children":[],"call":["@validator call "]}," Concurrent Agent execute_next_job":{"type":"method","name":"execute_next_job","children":[],"call":[" ns_post_next_job ","@queue empty? "," failed? ","@queue shift "," synchronize "," handle_error ","ValidationError  new "," observers notify_observers ","Time  now "," observers ","@current value= "," ns_validate ","new_value == ","@caller value= ","job action call ","job args ","job action ","job caller ","@current value ","@queue first ","new_value != ","job action call  == ","job action call  != "]}," Concurrent Agent ns_post_next_job":{"type":"method","name":"ns_post_next_job","children":[],"call":[" execute_next_job ","@queue first executor post ","@queue first executor ","@queue first "]}," Concurrent Agent ns_enqueue_job":{"type":"method","name":"ns_enqueue_job","children":[],"call":[" ns_post_next_job ","@queue length == ","@queue length ","@queue insert "," failed? ","index nil? "]}," Concurrent Agent enqueue_await_job":{"type":"method","name":"enqueue_await_job","children":[],"call":["latch count_down "," ns_enqueue_job ","index + ","Job  new ","Thread  current object_id ","Thread  current ","Concurrent  global_immediate_executor "," ns_find_last_job_for_thread "," synchronize "," ns_enqueue_Job  new  "," ns_find_last_job_for_thread  + "," ns_find_last_Job  new _for_thread "]}," Concurrent Agent enqueue_action_job":{"type":"method","name":"enqueue_action_job","children":[],"call":[" ns_enqueue_job "," synchronize ","Job  new ","Thread  current object_id ","Thread  current ","@caller value "," raise ","ArgumentError  new "," ns_enqueue_Job  new  "]}," Concurrent Agent ns_initialize":{"type":"method","name":"ns_initialize","children":[],"call":[" observers= ","Collection CopyOnNotifyObserverSet  new ","Concurrent ThreadLocalVar  new ","Concurrent AtomicReference  new ","opts fetch ","@error_mode nil? "," raise ","ArgumentError  new ","ERROR_MODES  include? ! ","ERROR_MODES  include? ","opts [] ","Concurrent AtomicReference  new _mode nil? ","opts []  nil? "]}," Concurrent Agent await_for!":{"type":"method","name":"await_for!","children":[],"call":[" raise "," await_for "," wait ","timeout to_f "]}," Concurrent Agent await_for":{"type":"method","name":"await_for","children":[],"call":["ok ! ! ","ok ! ","agents [] await_for ","agents [] ","(lvasgn :delay\n  (send\n    (lvar :end_at) :-\n    (send\n      (const nil :Concurrent) :monotonic_time))) < ","end_at - ","Concurrent  monotonic_time ","agents length times ","agents length ","Concurrent  monotonic_time + ","timeout to_f "," wait ","(lvasgn :end_at - \n  (send\n    (lvar :end_at) :-\n    (send\n      (const nil :Concurrent) :monotonic_time))) < ","(lvasgn :delay\n  (send\n    (lvar :Concurrent  monotonic_time + ) :-\n    (send\n      (const nil :Concurrent) :monotonic_time))) < ","Concurrent  monotonic_time +  - "]}," Concurrent Agent restart":{"type":"method","name":"restart","children":[],"call":[" ns_post_next_job ","@queue empty? ","@queue clear ","@error value= ","@current value= "," raise "," ns_validate ","Error  new "," failed? "," synchronize ","opts fetch "]}," Concurrent Agent failed?":{"type":"method","name":"failed?","children":[],"call":["@error value nil? ! ","@error value nil? ","@error value "]}," Concurrent Agent wait":{"type":"method","name":"wait","children":[],"call":["latch wait "," enqueue_await_job ","Concurrent CountDownLatch  new ","Concurrent CountDownLatch  new  wait "]}," Concurrent Agent send_via!":{"type":"method","name":"send_via!","children":[],"call":[" raise ","Error  new "," send_via "]}," Concurrent Agent send_via":{"type":"method","name":"send_via","children":[],"call":[" enqueue_action_job "]}," Concurrent Agent send_off!":{"type":"method","name":"send_off!","children":[],"call":[" raise ","Error  new "," send_off "]}," Concurrent Agent send_off":{"type":"method","name":"send_off","children":[],"call":[" enqueue_action_job ","Concurrent  global_io_executor "]}," Concurrent Agent send!":{"type":"method","name":"send!","children":[],"call":[" raise ","Error  new "," send "]}," Concurrent Agent send":{"type":"method","name":"send","children":[],"call":[" enqueue_action_job ","Concurrent  global_fast_executor "]}," Concurrent Agent error":{"type":"method","name":"error","children":[],"call":["@error value "]}," Concurrent Agent ValidationError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent Agent Error initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent RubySingleThreadExecutor ns_kill_execution":{"type":"method","name":"ns_kill_execution","children":[],"call":["@thread kill "," alive? ","@queue clear "]}," Concurrent RubySingleThreadExecutor ns_shutdown_execution":{"type":"method","name":"ns_shutdown_execution","children":[],"call":[" stopped_event set "," stopped_event "," alive? ","@queue << "]}," Concurrent RubySingleThreadExecutor ns_execute":{"type":"method","name":"ns_execute","children":[],"call":["@queue << "," supervise "]}," Concurrent Synchronization RbxObject full_memory_barrier":{"type":"method","name":"full_memory_barrier","children":[],"call":["Rubinius  memory_barrier "]}," Concurrent Synchronization Object initialize_volatile_cas_fields":{"type":"method","name":"initialize_volatile_cas_fields","children":[],"call":[" instance_variable_set ","AtomicReference  new "," class volatile_cas_fields zip "," class volatile_cas_fields "," class "]}," Concurrent Synchronization Object attr_volatile_with_cas":{"type":"method","name":"attr_volatile_with_cas","children":[],"call":[]}," Concurrent Synchronization MriObject attr_volatile":{"type":"method","name":"attr_volatile","children":[],"call":[]}," Concurrent Synchronization MriObject full_memory_barrier":{"type":"method","name":"full_memory_barrier","children":[],"call":[]}," Concurrent Synchronization LockableObject allow_only_direct_descendants!":{"type":"method","name":"allow_only_direct_descendants!","children":[],"call":[]}," Concurrent Synchronization JRubyObject attr_volatile":{"type":"method","name":"attr_volatile","children":[],"call":[]}," Concurrent Synchronization AbstractLockableObject ns_initialize":{"type":"method","name":"ns_initialize","children":[],"call":[]}," Concurrent Utility EngineDetector on_linux?":{"type":"method","name":"on_linux?","children":[],"call":["(send\n  (send\n    (const\n      (const nil :RbConfig) :CONFIG) :[]\n    (str \"host_os\")) :=~\n  (regexp\n    (str \"linux\")\n    (regopt))) nil? ! ","(send\n  (send\n    (const\n      (const nil :RbConfig) :CONFIG) :[]\n    (str \"host_os\")) :=~\n  (regexp\n    (str \"linux\")\n    (regopt))) nil? ","RbConfig CONFIG  [] =~ ","RbConfig CONFIG  [] "]}," Concurrent Utility EngineDetector on_osx?":{"type":"method","name":"on_osx?","children":[],"call":["(send\n  (send\n    (const\n      (const nil :RbConfig) :CONFIG) :[]\n    (str \"host_os\")) :=~\n  (regexp\n    (str \"darwin|mac os\")\n    (regopt))) nil? ! ","(send\n  (send\n    (const\n      (const nil :RbConfig) :CONFIG) :[]\n    (str \"host_os\")) :=~\n  (regexp\n    (str \"darwin|mac os\")\n    (regopt))) nil? ","RbConfig CONFIG  [] =~ ","RbConfig CONFIG  [] "]}," Concurrent Synchronization TruffleObject initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent Synchronization TruffleAttrVolatile full_memory_barrier":{"type":"method","name":"full_memory_barrier","children":[],"call":["Rubinius  memory_barrier ","Truffle System  full_memory_barrier "]}," Concurrent Synchronization TruffleAttrVolatile ClassMethods attr_volatile":{"type":"method","name":"attr_volatile","children":[],"call":[" attr_atomic "]}," Concurrent Synchronization TruffleAttrVolatile included":{"type":"method","name":"included","children":[],"call":[]}," Concurrent Synchronization TruffleLockableObject new":{"type":"method","name":"new","children":[],"call":[" raise "]}," Concurrent RubyThreadPoolExecutor ns_reset_if_forked":{"type":"method","name":"ns_reset_if_forked","children":[],"call":["@pool clear ","@ready clear ","@queue clear ","$$ != "]}," Concurrent Map inspect":{"type":"method","name":"inspect","children":[],"call":["@default_proc inspect "," size "," class name "," class ","(send\n  (send nil :object_id) :<<\n  (int 1)) to_s rjust ","(send\n  (send nil :object_id) :<<\n  (int 1)) to_s "," object_id << "," object_id "," format "," size to_s "," to_s [] "," to_s "]}," Concurrent Utility NativeInteger ensure_positive_and_no_zero":{"type":"method","name":"ensure_positive_and_no_zero","children":[],"call":[" raise ","ArgumentError  new ","value < "]}," Concurrent Utility NativeInteger ensure_positive":{"type":"method","name":"ensure_positive","children":[],"call":[" raise ","ArgumentError  new ","value < "]}," Concurrent Utility NativeInteger ensure_integer_and_bounds":{"type":"method","name":"ensure_integer_and_bounds","children":[],"call":[" ensure_lower_bound "," ensure_upper_bound "," ensure_integer "]}," Concurrent Utility NativeInteger ensure_integer":{"type":"method","name":"ensure_integer","children":[],"call":[" raise ","ArgumentError  new ","value is_a? "]}," Concurrent Utility NativeInteger ensure_lower_bound":{"type":"method","name":"ensure_lower_bound","children":[],"call":[" raise ","RangeError  new ","value < "]}," Concurrent Utility NativeInteger ensure_upper_bound":{"type":"method","name":"ensure_upper_bound","children":[],"call":[" raise ","RangeError  new ","value > "]}," Concurrent TimerSet ns_reset_if_forked":{"type":"method","name":"ns_reset_if_forked","children":[],"call":["@condition reset ","@queue clear ","$$ != "]}," Concurrent RubyThreadLocalVar default_for":{"type":"method","name":"default_for","children":[],"call":[" raise "]}," Concurrent AbstractThreadLocalVar default":{"type":"method","name":"default","children":[],"call":[" value= ","@default_block call "]}," Concurrent MultipleErrors initialize":{"type":"method","name":"initialize","children":[],"call":["(splat\n  (lvar :message)) join ","(send\n  (lvar :errors) :map) flatten ","e backtrace "," format ","e class ","e message ","errors map "]}," Concurrent MultipleAssignmentError inspect":{"type":"method","name":"inspect","children":[],"call":[" format ","@inspection_data inspect "," [] "]}," Concurrent MultipleAssignmentError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent use_simple_logger":{"type":"method","name":"use_simple_logger","children":[],"call":[]}," Concurrent create_simple_logger":{"type":"method","name":"create_simple_logger","children":[],"call":[]}," AtomicReference to_s":{"type":"method","name":"to_s","children":[],"call":[" format "," get "," object_id << "," object_id "," class "]}," Concurrent AtomicFixnum to_s":{"type":"method","name":"to_s","children":[],"call":[" format "," get "," object_id << "," object_id "," class "," value "," [] "]}," Concurrent AtomicBoolean to_s":{"type":"method","name":"to_s","children":[],"call":[" format "," value "," object_id << "," object_id "," class "," [] "]}," Concurrent Utility NativeExtensionLoader try_load_c_extension":{"type":"method","name":"try_load_c_extension","children":[],"call":[" raise ","e path == ","e path "," set_c_extensions_loaded "," require "," load_error_path == "," load_error_path "]}," Concurrent Utility EngineDetector on_truffleruby?":{"type":"method","name":"on_truffleruby?","children":[],"call":[" ruby_engine == "," ruby_engine ","RUBY_ENGINE  == "]}," Concurrent ThreadSafe Util Striped64 Cell padding":{"type":"method","name":"padding","children":[],"call":[]}," Concurrent ThreadSafe Util make_synchronized_on_truffleruby":{"type":"method","name":"make_synchronized_on_truffleruby","children":[],"call":[]}," Concurrent Synchronization TruffleRubyObject initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent Synchronization TruffleRubyAttrVolatile full_memory_barrier":{"type":"method","name":"full_memory_barrier","children":[],"call":["TruffleRuby  full_memory_barrier "]}," Concurrent Synchronization TruffleRubyAttrVolatile ClassMethods attr_volatile":{"type":"method","name":"attr_volatile","children":[],"call":["(send\n  (lvar :names) :map) flatten ","names map "," class_eval ","14 + ","names each ","15 + "]}," Concurrent Synchronization TruffleRubyAttrVolatile included":{"type":"method","name":"included","children":[],"call":[]}," Concurrent Synchronization MonitorLockableObject ns_wait":{"type":"method","name":"ns_wait","children":[],"call":["@__Condition__ wait "]}," Concurrent Synchronization MonitorLockableObject synchronize":{"type":"method","name":"synchronize","children":[],"call":["@__Lock__ synchronize "]}," Concurrent Synchronization MonitorLockableObject initialize":{"type":"method","name":"initialize","children":[],"call":["@__Lock__ new_cond "," Monitor  new "," Monitor  new  new_cond "]}," Concurrent Synchronization MutexLockableObject ns_wait":{"type":"method","name":"ns_wait","children":[],"call":["@__Condition__ wait "]}," Concurrent Synchronization MutexLockableObject synchronize":{"type":"method","name":"synchronize","children":[],"call":["@__Lock__ synchronize ","@__Lock__ owned? "]}," Concurrent Synchronization MutexLockableObject initialize":{"type":"method","name":"initialize","children":[],"call":[" ConditionVariable  new "," Mutex  new "]}," Concurrent Synchronization ConditionSignalling ns_broadcast":{"type":"method","name":"ns_broadcast","children":[],"call":["@__Condition__ broadcast "]}," Concurrent Synchronization ConditionSignalling ns_signal":{"type":"method","name":"ns_signal","children":[],"call":["@__Condition__ signal "]}," Concurrent ReInclude include":{"type":"method","name":"include","children":[],"call":["mod send ","(or-asgn\n  (ivasgn :@re_include_to_bases)\n  (array)) each ","modules reverse each ","modules reverse "]}," Concurrent ReInclude extended":{"type":"method","name":"extended","children":[],"call":["(or-asgn\n  (ivasgn :@re_include_to_bases)\n  (array)) << "]}," Concurrent ReInclude included":{"type":"method","name":"included","children":[],"call":["(or-asgn\n  (ivasgn :@re_include_to_bases)\n  (array)) << "]}," Concurrent Promises ScheduledPromise initialize":{"type":"method","name":"initialize","children":[],"call":["@Future resolve_with ","Concurrent  global_timer_set post ","Concurrent  global_timer_set ","(int 0) max ","schedule_time to_f - ","now to_f ","schedule_time to_f ","now + ","@IntendedTime is_a? ","Time  now ","Event  new ","now +  to_f - ","Time  now  to_f ","now +  to_f ","Time  now  + ","Time  Time  now  "]}," Concurrent Promises ScheduledPromise inspect":{"type":"method","name":"inspect","children":[],"call":[" to_s [] "," to_s "]}," Concurrent Promises ScheduledPromise intended_time":{"type":"method","name":"intended_time","children":[],"call":[]}," Concurrent Promises DelayPromise delayed_because":{"type":"method","name":"delayed_because","children":[],"call":[]}," Concurrent Promises DelayPromise touch":{"type":"method","name":"touch","children":[],"call":["@Future resolve_with "]}," Concurrent Promises DelayPromise initialize":{"type":"method","name":"initialize","children":[],"call":["event add_callback_clear_delayed_node ","@Delayed peek ","LockFreeStack  of1 ","Event  new ","Event  new  add_callback_clear_delayed_node ","LockFreeStack  of1  peek "]}," Concurrent Promises AnyFulfilledFuturePromise resolvable?":{"type":"method","name":"resolvable?","children":[],"call":["countdown zero? ","future fulfilled? ","event_or_future fulfilled? ","event_or_future resolved? ","event_or_future is_a? "]}," Concurrent Promises AnyResolvedEventPromise on_resolvable":{"type":"method","name":"on_resolvable","children":[],"call":[" resolve_with "]}," Concurrent Promises AnyResolvedEventPromise resolvable?":{"type":"method","name":"resolvable?","children":[],"call":[]}," Concurrent Promises AnyResolvedEventPromise initialize":{"type":"method","name":"initialize","children":[],"call":["Event  new "]}," Concurrent Promises AnyResolvedFuturePromise on_resolvable":{"type":"method","name":"on_resolvable","children":[],"call":[" resolve_with ","resolved_future internal_state "]}," Concurrent Promises AnyResolvedFuturePromise resolvable?":{"type":"method","name":"resolvable?","children":[],"call":[]}," Concurrent Promises AnyResolvedFuturePromise initialize":{"type":"method","name":"initialize","children":[],"call":["Future  new "]}," Concurrent Promises ZipEventsPromise on_resolvable":{"type":"method","name":"on_resolvable","children":[],"call":[" resolve_with "]}," Concurrent Promises ZipEventsPromise initialize":{"type":"method","name":"initialize","children":[],"call":[" on_resolvable ","blockers_count == ","Event  new "]}," Concurrent Promises ZipFuturesPromise on_resolvable":{"type":"method","name":"on_resolvable","children":[],"call":[" resolve_with ","PartiallyRejected  new ","FulfilledArray  new ","internal_state result ","reasons []= ","values []= ","@Resolutions each_with_index "," Array  new ","@Resolutions size "," Array  new  []= "]}," Concurrent Promises ZipFuturesPromise process_on_blocker_resolution":{"type":"method","name":"process_on_blocker_resolution","children":[],"call":["@Resolutions []= ","future internal_state "]}," Concurrent Promises ZipFuturesPromise initialize":{"type":"method","name":"initialize","children":[],"call":[" on_resolvable ","blockers_count == "," Array  new ","Future  new "]}," Concurrent Promises FutureWrapperPromise on_resolvable":{"type":"method","name":"on_resolvable","children":[],"call":[" resolve_with ","resolved_future internal_state "]}," Concurrent Promises FutureWrapperPromise initialize":{"type":"method","name":"initialize","children":[],"call":["Future  new "]}," Concurrent Promises EventWrapperPromise on_resolvable":{"type":"method","name":"on_resolvable","children":[],"call":[" resolve_with "]}," Concurrent Promises EventWrapperPromise initialize":{"type":"method","name":"initialize","children":[],"call":["Event  new "]}," Concurrent Promises ZipFutureEventPromise on_resolvable":{"type":"method","name":"on_resolvable","children":[],"call":[" resolve_with "]}," Concurrent Promises ZipFutureEventPromise process_on_blocker_resolution":{"type":"method","name":"process_on_blocker_resolution","children":[],"call":["future internal_state ","index == "]}," Concurrent Promises ZipFutureEventPromise initialize":{"type":"method","name":"initialize","children":[],"call":["Future  new "]}," Concurrent Promises ZipEventEventPromise on_resolvable":{"type":"method","name":"on_resolvable","children":[],"call":[" resolve_with "]}," Concurrent Promises ZipEventEventPromise initialize":{"type":"method","name":"initialize","children":[],"call":["Event  new "]}," Concurrent Promises RunFuturePromise process_on_blocker_resolution":{"type":"method","name":"process_on_blocker_resolution","children":[],"call":[" resolve_with ","value add_callback_notify_blocked "," add_delayed_of ","internal_state value ","internal_state fulfilled? ","future internal_state ","continuation_future add_callback_notify_blocked ","@RunTest call ","internal_state value  add_callback_notify_blocked ","internal_state internal_state value  ","future internal_state  value ","future internal_state  fulfilled? ","future future internal_state  ","@RunTest call  add_callback_notify_blocked "]}," Concurrent Promises RunFuturePromise initialize":{"type":"method","name":"initialize","children":[],"call":["Future  new "]}," Concurrent Promises FlatFuturePromise process_on_blocker_resolution":{"type":"method","name":"process_on_blocker_resolution","children":[],"call":[" evaluate_to "," raise ","value inspect "," lambda ","value add_callback_notify_blocked "," add_delayed_of ","internal_state value "," resolve_with ","internal_state fulfilled? ","future internal_state ","countdown nonzero? ","internal_state value  inspect ","internal_state value  add_callback_notify_blocked ","internal_state internal_state value  ","future internal_state  value ","future internal_state  fulfilled? ","future future internal_state  "]}," Concurrent Promises FlatFuturePromise initialize":{"type":"method","name":"initialize","children":[],"call":["Future  new ","1 + ","LockFreeStack  new "," raise ","levels < "]}," Concurrent Promises FlatEventPromise process_on_blocker_resolution":{"type":"method","name":"process_on_blocker_resolution","children":[],"call":[" resolve_with ","value add_callback_notify_blocked "," add_delayed_of ","internal_state value ","internal_state fulfilled? ","future internal_state ","countdown nonzero? ","internal_state value  add_callback_notify_blocked ","internal_state internal_state value  ","future internal_state  value ","future internal_state  fulfilled? ","future future internal_state  "]}," Concurrent Promises FlatEventPromise initialize":{"type":"method","name":"initialize","children":[],"call":["Event  new "]}," Concurrent Promises AbstractFlatPromise add_delayed_of":{"type":"method","name":"add_delayed_of","children":[],"call":[" clear_and_propagate_touch "," touched? ","BlockedPromise  add_delayed ","future promise delayed_because ","future promise ","BlockedPromise  add_future promise delayed_because  ","future promise future promise delayed_because _because "]}," Concurrent Promises AbstractFlatPromise resolvable?":{"type":"method","name":"resolvable?","children":[],"call":["@Future internal_state resolved? ! ","@Future internal_state resolved? ","@Future internal_state "]}," Concurrent Promises AbstractFlatPromise on_resolvable":{"type":"method","name":"on_resolvable","children":[],"call":[" resolve_with ","resolved_future internal_state "]}," Concurrent Promises AbstractFlatPromise touched?":{"type":"method","name":"touched?","children":[],"call":["@Touched value "]}," Concurrent Promises AbstractFlatPromise touch":{"type":"method","name":"touch","children":[],"call":[" clear_and_propagate_touch ","@Touched make_true "]}," Concurrent Promises AbstractFlatPromise initialize":{"type":"method","name":"initialize","children":[],"call":["event_or_future add_callback_clear_delayed_node ","delayed peek ","LockFreeStack  new ","AtomicBoolean  new ","LockFreeStack  of1 ","event_or_future add_callback_clear_LockFreeStack  of1 _node ","LockFreeStack  of1  peek "]}," Concurrent Promises ImmediateFuturePromise initialize":{"type":"method","name":"initialize","children":[],"call":["Future  new resolve_with ","Rejected  new ","Fulfilled  new ","Future  new "]}," Concurrent Promises ImmediateEventPromise initialize":{"type":"method","name":"initialize","children":[],"call":["Event  new resolve_with ","Event  new "]}," Concurrent Promises ChainPromise on_resolvable":{"type":"method","name":"on_resolvable","children":[],"call":[" evaluate_to ","Concurrent  executor post ","Concurrent  executor ","future result ","Future  === "]}," Concurrent Promises RescuePromise on_resolvable":{"type":"method","name":"on_resolvable","children":[],"call":[" resolve_with ","resolved_future internal_state "," evaluate_to ","future apply "," lambda ","Concurrent  executor post ","Concurrent  executor ","resolved_future rejected? "]}," Concurrent Promises RescuePromise initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent Promises ThenPromise on_resolvable":{"type":"method","name":"on_resolvable","children":[],"call":[" resolve_with ","resolved_future internal_state "," evaluate_to ","future apply "," lambda ","Concurrent  executor post ","Concurrent  executor ","resolved_future fulfilled? "]}," Concurrent Promises ThenPromise initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent Promises BlockedTaskPromise executor":{"type":"method","name":"executor","children":[],"call":[]}," Concurrent Promises BlockedTaskPromise initialize":{"type":"method","name":"initialize","children":[],"call":["Future  new "," raise "," block_given? "]}," Concurrent Promises BlockedPromise on_resolvable":{"type":"method","name":"on_resolvable","children":[],"call":[" raise "]}," Concurrent Promises BlockedPromise process_on_blocker_resolution":{"type":"method","name":"process_on_blocker_resolution","children":[],"call":["@Countdown decrement "]}," Concurrent Promises BlockedPromise resolvable?":{"type":"method","name":"resolvable?","children":[],"call":["countdown zero? "]}," Concurrent Promises BlockedPromise clear_and_propagate_touch":{"type":"method","name":"clear_and_propagate_touch","children":[],"call":["stack_or_element touch ","stack_or_element nil? "," clear_and_propagate_touch ","stack_or_element clear_each ","stack_or_element is_a? "]}," Concurrent Promises BlockedPromise blocked_by":{"type":"method","name":"blocked_by","children":[],"call":["blocked_by push ","o blocks include? ","o blocks ","ObjectSpace  each_object "]}," Concurrent Promises BlockedPromise touch":{"type":"method","name":"touch","children":[],"call":[" clear_and_propagate_touch "]}," Concurrent Promises BlockedPromise delayed_because":{"type":"method","name":"delayed_because","children":[],"call":[]}," Concurrent Promises BlockedPromise on_blocker_resolution":{"type":"method","name":"on_blocker_resolution","children":[],"call":[" on_resolvable "," resolvable? "," process_on_blocker_resolution "," on_ resolvable?  ","  resolvable? ? "]}," Concurrent Promises BlockedPromise initialize":{"type":"method","name":"initialize","children":[],"call":["AtomicFixnum  new "]}," Concurrent Promises BlockedPromise add_delayed":{"type":"method","name":"add_delayed","children":[],"call":[]}," Concurrent Promises BlockedPromise new_blocked_by":{"type":"method","name":"new_blocked_by","children":[],"call":[]}," Concurrent Promises BlockedPromise new_blocked_by2":{"type":"method","name":"new_blocked_by2","children":[],"call":[]}," Concurrent Promises BlockedPromise new_blocked_by1":{"type":"method","name":"new_blocked_by1","children":[],"call":[]}," Concurrent Promises ResolvableFuturePromise reject":{"type":"method","name":"reject","children":[],"call":[" resolve_with ","Rejected  new "]}," Concurrent Promises ResolvableFuturePromise fulfill":{"type":"method","name":"fulfill","children":[],"call":[" resolve_with ","Fulfilled  new "]}," Concurrent Promises ResolvableFuturePromise initialize":{"type":"method","name":"initialize","children":[],"call":["ResolvableFuture  new "]}," Concurrent Promises ResolvableEventPromise initialize":{"type":"method","name":"initialize","children":[],"call":["ResolvableEvent  new "]}," Concurrent Promises AbstractPromise evaluate_to":{"type":"method","name":"evaluate_to","children":[],"call":[" raise ","error is_a? "," resolve_with ","Rejected  new ","Fulfilled  new ","block call "]}," Concurrent Promises AbstractPromise resolve_with":{"type":"method","name":"resolve_with","children":[],"call":["@Future resolve_with "]}," Concurrent Promises AbstractPromise delayed_because":{"type":"method","name":"delayed_because","children":[],"call":[]}," Concurrent Promises AbstractPromise to_s":{"type":"method","name":"to_s","children":[],"call":[" format "," [] "]}," Concurrent Promises AbstractPromise touch":{"type":"method","name":"touch","children":[],"call":[]}," Concurrent Promises AbstractPromise state":{"type":"method","name":"state","children":[],"call":[" future state "," future "]}," Concurrent Promises AbstractPromise default_executor":{"type":"method","name":"default_executor","children":[],"call":[" future default_executor "," future "]}," Concurrent Promises AbstractPromise future":{"type":"method","name":"future","children":[],"call":[]}," Concurrent Promises AbstractPromise initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent Promises ResolvableFuture with_hidden_resolvable":{"type":"method","name":"with_hidden_resolvable","children":[],"call":["FutureWrapperPromise  new_blocked_by1 future ","FutureWrapperPromise  new_blocked_by1 "]}," Concurrent Promises ResolvableFuture evaluate_to!":{"type":"method","name":"evaluate_to!","children":[],"call":[" promise evaluate_to wait! "," promise evaluate_to "," promise "]}," Concurrent Promises ResolvableFuture evaluate_to":{"type":"method","name":"evaluate_to","children":[],"call":[" promise evaluate_to "," promise "]}," Concurrent Promises ResolvableFuture reject":{"type":"method","name":"reject","children":[],"call":[" promise reject "," promise "," resolve_with ","Rejected  new "]}," Concurrent Promises ResolvableFuture fulfill":{"type":"method","name":"fulfill","children":[],"call":[" promise fulfill "," promise "," resolve_with ","Fulfilled  new "]}," Concurrent Promises ResolvableFuture resolve":{"type":"method","name":"resolve","children":[],"call":[" resolve_with ","Rejected  new ","Fulfilled  new "]}," Concurrent Promises ResolvableEvent with_hidden_resolvable":{"type":"method","name":"with_hidden_resolvable","children":[],"call":["EventWrapperPromise  new_blocked_by1 event ","EventWrapperPromise  new_blocked_by1 "]}," Concurrent Promises ResolvableEvent resolve":{"type":"method","name":"resolve","children":[],"call":[" resolve_with "]}," Concurrent Promises Future callback_on_resolution":{"type":"method","name":"callback_on_resolution","children":[],"call":["callback call ","state result "]}," Concurrent Promises Future callback_on_rejection":{"type":"method","name":"callback_on_rejection","children":[],"call":["state apply ","state fulfilled? "]}," Concurrent Promises Future callback_on_fulfillment":{"type":"method","name":"callback_on_fulfillment","children":[],"call":["state apply ","state fulfilled? "]}," Concurrent Promises Future async_callback_on_rejection":{"type":"method","name":"async_callback_on_rejection","children":[],"call":[" callback_on_rejection "," with_async "]}," Concurrent Promises Future async_callback_on_fulfillment":{"type":"method","name":"async_callback_on_fulfillment","children":[],"call":[" callback_on_fulfillment "," with_async "]}," Concurrent Promises Future wait_until_resolved!":{"type":"method","name":"wait_until_resolved!","children":[],"call":[" raise "," rejected? "," wait_until_resolved "]}," Concurrent Promises Future rejected_resolution":{"type":"method","name":"rejected_resolution","children":[],"call":[" raise ","Concurrent MultipleAssignmentError  new ","state result "," result "," internal_state == "," internal_state "]}," Concurrent Promises Future to_future":{"type":"method","name":"to_future","children":[],"call":[]}," Concurrent Promises Future to_event":{"type":"method","name":"to_event","children":[],"call":[" chain_resolvable ","Promises  resolvable_event ","Promises  resolvable_Promises  resolvable_event  "]}," Concurrent Promises Future apply":{"type":"method","name":"apply","children":[],"call":[" internal_state apply "," internal_state "]}," Concurrent Promises Future run":{"type":"method","name":"run","children":[],"call":["RunFuturePromise  new_blocked_by1 future ","RunFuturePromise  new_blocked_by1 "]}," Concurrent Promises Future on_rejection_using":{"type":"method","name":"on_rejection_using","children":[],"call":[" add_callback "]}," Concurrent Promises Future on_rejection!":{"type":"method","name":"on_rejection!","children":[],"call":[" add_callback "]}," Concurrent Promises Future on_rejection":{"type":"method","name":"on_rejection","children":[],"call":[" on_rejection_using "]}," Concurrent Promises Future on_fulfillment_using":{"type":"method","name":"on_fulfillment_using","children":[],"call":[" add_callback "]}," Concurrent Promises Future on_fulfillment!":{"type":"method","name":"on_fulfillment!","children":[],"call":[" add_callback "]}," Concurrent Promises Future on_fulfillment":{"type":"method","name":"on_fulfillment","children":[],"call":[" on_fulfillment_using "]}," Concurrent Promises Future flat_event":{"type":"method","name":"flat_event","children":[],"call":["FlatEventPromise  new_blocked_by1 event ","FlatEventPromise  new_blocked_by1 "]}," Concurrent Promises Future flat_future":{"type":"method","name":"flat_future","children":[],"call":["FlatFuturePromise  new_blocked_by1 future ","FlatFuturePromise  new_blocked_by1 "]}," Concurrent Promises Future with_default_executor":{"type":"method","name":"with_default_executor","children":[],"call":["FutureWrapperPromise  new_blocked_by1 future ","FutureWrapperPromise  new_blocked_by1 "]}," Concurrent Promises Future schedule":{"type":"method","name":"schedule","children":[],"call":["(send nil :chain) flat ","ZipFutureEventPromise  new_blocked_by2 future ","ZipFutureEventPromise  new_blocked_by2 ","ScheduledPromise  new event ","ScheduledPromise  new "," chain ","ScheduledPromise  new ScheduledPromise  new event  "]}," Concurrent Promises Future delay":{"type":"method","name":"delay","children":[],"call":["ZipFutureEventPromise  new_blocked_by2 future ","ZipFutureEventPromise  new_blocked_by2 ","DelayPromise  new event ","DelayPromise  new ","DelayPromise  new DelayPromise  new event  "]}," Concurrent Promises Future any":{"type":"method","name":"any","children":[],"call":["AnyResolvedFuturePromise  new_blocked_by2 future ","AnyResolvedFuturePromise  new_blocked_by2 "]}," Concurrent Promises Future zip":{"type":"method","name":"zip","children":[],"call":["ZipFutureEventPromise  new_blocked_by2 future ","ZipFutureEventPromise  new_blocked_by2 ","ZipFuturesPromise  new_blocked_by2 future ","ZipFuturesPromise  new_blocked_by2 ","other is_a? "]}," Concurrent Promises Future rescue_on":{"type":"method","name":"rescue_on","children":[],"call":["RescuePromise  new_blocked_by1 future ","RescuePromise  new_blocked_by1 "]}," Concurrent Promises Future rescue":{"type":"method","name":"rescue","children":[],"call":[" rescue_on "]}," Concurrent Promises Future then_on":{"type":"method","name":"then_on","children":[],"call":["ThenPromise  new_blocked_by1 future ","ThenPromise  new_blocked_by1 "]}," Concurrent Promises Future then":{"type":"method","name":"then","children":[],"call":[" then_on "]}," Concurrent Promises Future exception":{"type":"method","name":"exception","children":[],"call":["ex set_backtrace "," Array + "," caller "," Array ","ex backtrace ","reason [] clone exception ","reason [] clone ","reason [] ","Concurrent MultipleErrors  new ","reason size > ","reason size "," Array flatten compact "," Array flatten "," internal_state reason "," internal_state "," raise "," rejected? ","RuntimeError  new exception ","RuntimeError  new ","reason [] exception ","reason [] respond_to? ","args size <= ","args size ","reason [] clone exception  set_backtrace ","Concurrent MultipleErrors  new  set_backtrace ","RuntimeError  new exception  set_backtrace ","reason [] exception  set_backtrace ","reason [] clone exception  backtrace ","Concurrent MultipleErrors  new  backtrace ","RuntimeError  new exception  backtrace ","reason [] exception  backtrace ","reason [] clone reason [] clone exception ception ","reason [] clone Concurrent MultipleErrors  new ception ","reason [] clone RuntimeError  new exception ception ","reason [] clone reason [] exception ception "," Array flatten compact  [] clone exception "," Array flatten compact  [] clone "," Array flatten compact  [] "," Array flatten compact  size > "," Array flatten compact  size "," internal_state  Array flatten compact  ","RuntimeError  new reason [] clone exception ception ","RuntimeError  new Concurrent MultipleErrors  new ception ","RuntimeError  new RuntimeError  new exception ception ","RuntimeError  new reason [] exception ception ","reason [] reason [] clone exception ception ","reason [] Concurrent MultipleErrors  new ception ","reason [] RuntimeError  new exception ception ","reason [] reason [] exception ception "," Array flatten compact  [] exception "," Array flatten compact  [] respond_to? "]}," Concurrent Promises Future value!":{"type":"method","name":"value!","children":[],"call":[" internal_state value "," internal_state "," wait_until_resolved! "]}," Concurrent Promises Future wait!":{"type":"method","name":"wait!","children":[],"call":[" wait_until_resolved! "]}," Concurrent Promises Future result":{"type":"method","name":"result","children":[],"call":[" internal_state result "," internal_state "," wait_until_resolved "]}," Concurrent Promises Future reason":{"type":"method","name":"reason","children":[],"call":[" internal_state reason "," internal_state "," wait_until_resolved "]}," Concurrent Promises Future value":{"type":"method","name":"value","children":[],"call":[" internal_state value "," internal_state "," wait_until_resolved "]}," Concurrent Promises Future rejected?":{"type":"method","name":"rejected?","children":[],"call":["state fulfilled? ! ","state fulfilled? ","state resolved? "," internal_state "," internal_state  fulfilled? ! "," internal_state  fulfilled? "," internal_state  resolved? "," internal_ internal_state  "]}," Concurrent Promises Future fulfilled?":{"type":"method","name":"fulfilled?","children":[],"call":["state fulfilled? ","state resolved? "," internal_state "," internal_state  fulfilled? "," internal_state  resolved? "," internal_ internal_state  "]}," Concurrent Promises Event callback_on_resolution":{"type":"method","name":"callback_on_resolution","children":[],"call":["callback call "]}," Concurrent Promises Event rejected_resolution":{"type":"method","name":"rejected_resolution","children":[],"call":["Concurrent MultipleAssignmentError  new "," raise "]}," Concurrent Promises Event with_default_executor":{"type":"method","name":"with_default_executor","children":[],"call":["EventWrapperPromise  new_blocked_by1 event ","EventWrapperPromise  new_blocked_by1 "]}," Concurrent Promises Event to_event":{"type":"method","name":"to_event","children":[],"call":[]}," Concurrent Promises Event to_future":{"type":"method","name":"to_future","children":[],"call":[" chain_resolvable ","Promises  resolvable_future ","Promises  resolvable_Promises  resolvable_future  "]}," Concurrent Promises Event schedule":{"type":"method","name":"schedule","children":[],"call":["(send nil :chain) flat_event ","ZipEventEventPromise  new_blocked_by2 event ","ZipEventEventPromise  new_blocked_by2 ","ScheduledPromise  new event ","ScheduledPromise  new "," chain ","(send nil :chain) flat_ScheduledPromise  new event  ","ZipEventEventPromise  new_blocked_by2 ScheduledPromise  new event  ","ScheduledPromise  new ScheduledPromise  new event  "]}," Concurrent Promises Event delay":{"type":"method","name":"delay","children":[],"call":["ZipEventEventPromise  new_blocked_by2 event ","ZipEventEventPromise  new_blocked_by2 ","DelayPromise  new event ","DelayPromise  new ","ZipEventEventPromise  new_blocked_by2 DelayPromise  new event  ","DelayPromise  new DelayPromise  new event  "]}," Concurrent Promises Event any":{"type":"method","name":"any","children":[],"call":["AnyResolvedEventPromise  new_blocked_by2 event ","AnyResolvedEventPromise  new_blocked_by2 "]}," Concurrent Promises Event zip":{"type":"method","name":"zip","children":[],"call":["ZipEventEventPromise  new_blocked_by2 event ","ZipEventEventPromise  new_blocked_by2 ","ZipFutureEventPromise  new_blocked_by2 future ","ZipFutureEventPromise  new_blocked_by2 ","other is_a? "]}," Concurrent Promises AbstractEventFuture callback_notify_blocked":{"type":"method","name":"callback_notify_blocked","children":[],"call":["promise on_blocker_resolution "]}," Concurrent Promises AbstractEventFuture async_callback_on_resolution":{"type":"method","name":"async_callback_on_resolution","children":[],"call":[" callback_on_resolution "," with_async "]}," Concurrent Promises AbstractEventFuture with_async":{"type":"method","name":"with_async","children":[],"call":["Concurrent  executor post ","Concurrent  executor "]}," Concurrent Promises AbstractEventFuture call_callbacks":{"type":"method","name":"call_callbacks","children":[],"call":["@Callbacks pop "," call_callback "]}," Concurrent Promises AbstractEventFuture call_callback":{"type":"method","name":"call_callback","children":[],"call":[" send "]}," Concurrent Promises AbstractEventFuture wait_until_resolved":{"type":"method","name":"wait_until_resolved","children":[],"call":[" resolved? ","@Waiters decrement ","@Condition wait ","@Waiters increment ","@Lock synchronize "," touch "]}," Concurrent Promises AbstractEventFuture callback_clear_delayed_node":{"type":"method","name":"callback_clear_delayed_node","children":[],"call":["node value= "]}," Concurrent Promises AbstractEventFuture add_callback":{"type":"method","name":"add_callback","children":[],"call":[" call_callbacks ","state resolved? "," internal_state ","@Callbacks push "," call_callback "," internal_state  resolved? "," internal_ internal_state  "]}," Concurrent Promises AbstractEventFuture add_callback_clear_delayed_node":{"type":"method","name":"add_callback_clear_delayed_node","children":[],"call":[" add_callback "]}," Concurrent Promises AbstractEventFuture add_callback_notify_blocked":{"type":"method","name":"add_callback_notify_blocked","children":[],"call":[" add_callback "]}," Concurrent Promises AbstractEventFuture waiting_threads":{"type":"method","name":"waiting_threads","children":[],"call":["@Waiters each to_a ","@Waiters each "]}," Concurrent Promises AbstractEventFuture touched?":{"type":"method","name":"touched?","children":[],"call":[" promise touched? "," promise "]}," Concurrent Promises AbstractEventFuture promise":{"type":"method","name":"promise","children":[],"call":[]}," Concurrent Promises AbstractEventFuture callbacks":{"type":"method","name":"callbacks","children":[],"call":["@Callbacks each to_a ","@Callbacks each "]}," Concurrent Promises AbstractEventFuture blocks":{"type":"method","name":"blocks","children":[],"call":["promises push ","args [] ","method == ","@Callbacks each_with_object "]}," Concurrent Promises AbstractEventFuture resolve_with":{"type":"method","name":"resolve_with","children":[],"call":[" rejected_resolution "," call_callbacks ","@Condition broadcast ","@Lock synchronize ","@Waiters value == ","@Waiters value "," compare_and_set_internal_state "]}," Concurrent Promises AbstractEventFuture with_default_executor":{"type":"method","name":"with_default_executor","children":[],"call":[" raise "]}," Concurrent Promises AbstractEventFuture on_resolution_using":{"type":"method","name":"on_resolution_using","children":[],"call":[" add_callback "]}," Concurrent Promises AbstractEventFuture on_resolution!":{"type":"method","name":"on_resolution!","children":[],"call":[" add_callback "]}," Concurrent Promises AbstractEventFuture on_resolution":{"type":"method","name":"on_resolution","children":[],"call":[" on_resolution_using "]}," Concurrent Promises AbstractEventFuture chain_resolvable":{"type":"method","name":"chain_resolvable","children":[],"call":["resolvable resolve_with "," internal_state "," on_resolution! "]}," Concurrent Promises AbstractEventFuture to_s":{"type":"method","name":"to_s","children":[],"call":[" format "," state "," [] "]}," Concurrent Promises AbstractEventFuture chain_on":{"type":"method","name":"chain_on","children":[],"call":["ChainPromise  new_blocked_by1 future ","ChainPromise  new_blocked_by1 "]}," Concurrent Promises AbstractEventFuture chain":{"type":"method","name":"chain","children":[],"call":[" chain_on "]}," Concurrent Promises AbstractEventFuture default_executor":{"type":"method","name":"default_executor","children":[],"call":[]}," Concurrent Promises AbstractEventFuture wait":{"type":"method","name":"wait","children":[],"call":[" wait_until_resolved "]}," Concurrent Promises AbstractEventFuture touch":{"type":"method","name":"touch","children":[],"call":["@Promise touch "]}," Concurrent Promises AbstractEventFuture resolved?":{"type":"method","name":"resolved?","children":[],"call":[" internal_state resolved? "," internal_state "]}," Concurrent Promises AbstractEventFuture pending?":{"type":"method","name":"pending?","children":[],"call":[" internal_state resolved? ! "," internal_state resolved? "," internal_state "]}," Concurrent Promises AbstractEventFuture state":{"type":"method","name":"state","children":[],"call":[" internal_state to_sym "," internal_state "]}," Concurrent Promises AbstractEventFuture initialize":{"type":"method","name":"initialize","children":[],"call":[" internal_state= ","AtomicFixnum  new ","LockFreeStack  new ","ConditionVariable  new ","Mutex  new "]}," Concurrent Promises InternalStates to_sym":{"type":"method","name":"to_sym","children":[],"call":[]}," Concurrent Promises InternalStates PartiallyRejected apply":{"type":"method","name":"apply","children":[],"call":["block call "," reason "]}," Concurrent Promises InternalStates PartiallyRejected reason":{"type":"method","name":"reason","children":[],"call":[]}," Concurrent Promises InternalStates PartiallyRejected value":{"type":"method","name":"value","children":[],"call":[]}," Concurrent Promises InternalStates PartiallyRejected to_sym":{"type":"method","name":"to_sym","children":[],"call":[]}," Concurrent Promises InternalStates PartiallyRejected fulfilled?":{"type":"method","name":"fulfilled?","children":[],"call":[]}," Concurrent Promises InternalStates PartiallyRejected initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent Promises InternalStates Rejected apply":{"type":"method","name":"apply","children":[],"call":["block call "," reason "]}," Concurrent Promises InternalStates Rejected to_sym":{"type":"method","name":"to_sym","children":[],"call":[]}," Concurrent Promises InternalStates Rejected reason":{"type":"method","name":"reason","children":[],"call":[]}," Concurrent Promises InternalStates Rejected value":{"type":"method","name":"value","children":[],"call":[]}," Concurrent Promises InternalStates Rejected fulfilled?":{"type":"method","name":"fulfilled?","children":[],"call":[]}," Concurrent Promises InternalStates Rejected initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent Promises InternalStates FulfilledArray apply":{"type":"method","name":"apply","children":[],"call":["block call "," value "]}," Concurrent Promises InternalStates Fulfilled to_sym":{"type":"method","name":"to_sym","children":[],"call":[]}," Concurrent Promises InternalStates Fulfilled reason":{"type":"method","name":"reason","children":[],"call":[]}," Concurrent Promises InternalStates Fulfilled value":{"type":"method","name":"value","children":[],"call":[]}," Concurrent Promises InternalStates Fulfilled apply":{"type":"method","name":"apply","children":[],"call":["block call "," value "]}," Concurrent Promises InternalStates Fulfilled fulfilled?":{"type":"method","name":"fulfilled?","children":[],"call":[]}," Concurrent Promises InternalStates Fulfilled initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent Promises InternalStates ResolvedWithResult apply":{"type":"method","name":"apply","children":[],"call":[" raise "]}," Concurrent Promises InternalStates ResolvedWithResult reason":{"type":"method","name":"reason","children":[],"call":[" raise "]}," Concurrent Promises InternalStates ResolvedWithResult value":{"type":"method","name":"value","children":[],"call":[" raise "]}," Concurrent Promises InternalStates ResolvedWithResult fulfilled?":{"type":"method","name":"fulfilled?","children":[],"call":[" raise "]}," Concurrent Promises InternalStates ResolvedWithResult result":{"type":"method","name":"result","children":[],"call":[" reason "," value "," fulfilled? "]}," Concurrent Promises InternalStates ResolvedWithResult to_sym":{"type":"method","name":"to_sym","children":[],"call":[]}," Concurrent Promises InternalStates ResolvedWithResult resolved?":{"type":"method","name":"resolved?","children":[],"call":[]}," Concurrent Promises InternalStates Pending to_sym":{"type":"method","name":"to_sym","children":[],"call":[]}," Concurrent Promises InternalStates Pending resolved?":{"type":"method","name":"resolved?","children":[],"call":[]}," Concurrent Promises InternalStates State to_sym":{"type":"method","name":"to_sym","children":[],"call":[" raise "]}," Concurrent Promises InternalStates State resolved?":{"type":"method","name":"resolved?","children":[],"call":[" raise "]}," Concurrent Promises FactoryMethods any_event_on":{"type":"method","name":"any_event_on","children":[],"call":["AnyResolvedEventPromise  new_blocked_by event ","AnyResolvedEventPromise  new_blocked_by "]}," Concurrent Promises FactoryMethods any_event":{"type":"method","name":"any_event","children":[],"call":[" any_event_on "," default_executor "]}," Concurrent Promises FactoryMethods any_fulfilled_future_on":{"type":"method","name":"any_fulfilled_future_on","children":[],"call":["AnyFulfilledFuturePromise  new_blocked_by future ","AnyFulfilledFuturePromise  new_blocked_by "]}," Concurrent Promises FactoryMethods any_fulfilled_future":{"type":"method","name":"any_fulfilled_future","children":[],"call":[" any_fulfilled_future_on "," default_executor "]}," Concurrent Promises FactoryMethods any_resolved_future_on":{"type":"method","name":"any_resolved_future_on","children":[],"call":["AnyResolvedFuturePromise  new_blocked_by future ","AnyResolvedFuturePromise  new_blocked_by "]}," Concurrent Promises FactoryMethods any_resolved_future":{"type":"method","name":"any_resolved_future","children":[],"call":[" any_resolved_future_on "," default_executor "]}," Concurrent Promises FactoryMethods zip_events_on":{"type":"method","name":"zip_events_on","children":[],"call":["ZipEventsPromise  new_blocked_by event ","ZipEventsPromise  new_blocked_by "]}," Concurrent Promises FactoryMethods zip_events":{"type":"method","name":"zip_events","children":[],"call":[" zip_events_on "," default_executor "]}," Concurrent Promises FactoryMethods zip_futures_on":{"type":"method","name":"zip_futures_on","children":[],"call":["ZipFuturesPromise  new_blocked_by future ","ZipFuturesPromise  new_blocked_by "]}," Concurrent Promises FactoryMethods zip_futures":{"type":"method","name":"zip_futures","children":[],"call":[" zip_futures_on "," default_executor "]}," Concurrent Promises FactoryMethods schedule_on":{"type":"method","name":"schedule_on","children":[],"call":["ScheduledPromise  new event chain ","ScheduledPromise  new event ","ScheduledPromise  new ","event chain ","ScheduledPromise  new ScheduledPromise  new event  chain ","ScheduledPromise  new ScheduledPromise  new event  ","ScheduledPromise  new event  chain "]}," Concurrent Promises FactoryMethods schedule":{"type":"method","name":"schedule","children":[],"call":[" schedule_on "," default_executor "]}," Concurrent Promises FactoryMethods delay_on":{"type":"method","name":"delay_on","children":[],"call":["DelayPromise  new event chain ","DelayPromise  new event ","DelayPromise  new ","event chain ","DelayPromise  new DelayPromise  new event  chain ","DelayPromise  new DelayPromise  new event  ","DelayPromise  new event  chain "]}," Concurrent Promises FactoryMethods delay":{"type":"method","name":"delay","children":[],"call":[" delay_on "," default_executor "]}," Concurrent Promises FactoryMethods make_future":{"type":"method","name":"make_future","children":[],"call":[" fulfilled_future "," resolved_event "," rejected_future "]}," Concurrent Promises FactoryMethods resolved_event":{"type":"method","name":"resolved_event","children":[],"call":["ImmediateEventPromise  new event ","ImmediateEventPromise  new "]}," Concurrent Promises FactoryMethods rejected_future":{"type":"method","name":"rejected_future","children":[],"call":[" resolved_future "]}," Concurrent Promises FactoryMethods fulfilled_future":{"type":"method","name":"fulfilled_future","children":[],"call":[" resolved_future "]}," Concurrent Promises FactoryMethods resolved_future":{"type":"method","name":"resolved_future","children":[],"call":["ImmediateFuturePromise  new future ","ImmediateFuturePromise  new "]}," Concurrent Promises FactoryMethods future_on":{"type":"method","name":"future_on","children":[],"call":["ImmediateEventPromise  new future then ","ImmediateEventPromise  new future ","ImmediateEventPromise  new "]}," Concurrent Promises FactoryMethods future":{"type":"method","name":"future","children":[],"call":[" future_on "," default_executor "]}," Concurrent Promises FactoryMethods resolvable_future_on":{"type":"method","name":"resolvable_future_on","children":[],"call":["ResolvableFuturePromise  new future ","ResolvableFuturePromise  new "]}," Concurrent Promises FactoryMethods resolvable_future":{"type":"method","name":"resolvable_future","children":[],"call":[" resolvable_future_on "," default_executor "]}," Concurrent Promises FactoryMethods resolvable_event_on":{"type":"method","name":"resolvable_event_on","children":[],"call":["ResolvableEventPromise  new future ","ResolvableEventPromise  new "]}," Concurrent Promises FactoryMethods resolvable_event":{"type":"method","name":"resolvable_event","children":[],"call":[" resolvable_event_on "," default_executor "]}," Concurrent Promises FactoryMethods Configuration default_executor":{"type":"method","name":"default_executor","children":[],"call":[]}," Concurrent Map each_pair":{"type":"method","name":"each_pair","children":[],"call":[" enum_for "," block_given? "]}," Concurrent Collection AtomicReferenceMapBackend Node force_acquire_lock":{"type":"method","name":"force_acquire_lock","children":[],"call":[" cheap_broadcast "," cheap_wait ","(send\n  (send nil :hash) :&\n  (const nil :WAITING)) == "," hash & "," hash "," equal? ","table volatile_get "," cheap_synchronize "]}," Concurrent LockFreeStack to_s":{"type":"method","name":"to_s","children":[],"call":[" format "," to_a to_s "," to_a "," [] "]}," Concurrent LockFreeStack clear_each":{"type":"method","name":"clear_each","children":[],"call":[" each "," compare_and_set_head ","current_head == "," head "," head  == "]}," Concurrent LockFreeStack replace_if":{"type":"method","name":"replace_if","children":[],"call":[" compare_and_set_head "]}," Concurrent LockFreeStack clear_if":{"type":"method","name":"clear_if","children":[],"call":[" compare_and_set_head "]}," Concurrent LockFreeStack clear":{"type":"method","name":"clear","children":[],"call":[" compare_and_set_head ","current_head == "," head "," head  == "]}," Concurrent LockFreeStack each":{"type":"method","name":"each","children":[],"call":["it next_node ","it value ","it equal? "," peek "," to_enum "," block_given? ","it next_node  next_node ","it next_node  value ","it next_node  equal? "]}," Concurrent LockFreeStack compare_and_clear":{"type":"method","name":"compare_and_clear","children":[],"call":[" compare_and_set_head "]}," Concurrent LockFreeStack pop":{"type":"method","name":"pop","children":[],"call":["current_head value "," compare_and_set_head ","current_head next_node "," head "," head  value "," head  next_node "]}," Concurrent LockFreeStack compare_and_pop":{"type":"method","name":"compare_and_pop","children":[],"call":[" compare_and_set_head ","head next_node "]}," Concurrent LockFreeStack peek":{"type":"method","name":"peek","children":[],"call":[" head "]}," Concurrent LockFreeStack push":{"type":"method","name":"push","children":[],"call":[" compare_and_set_head ","Node  [] "," head "]}," Concurrent LockFreeStack compare_and_push":{"type":"method","name":"compare_and_push","children":[],"call":[" compare_and_set_head ","Node  [] "]}," Concurrent LockFreeStack empty?":{"type":"method","name":"empty?","children":[],"call":["head equal? "]}," Concurrent LockFreeStack initialize":{"type":"method","name":"initialize","children":[],"call":[" head= "]}," Concurrent LockFreeStack of2":{"type":"method","name":"of2","children":[],"call":[]}," Concurrent LockFreeStack of1":{"type":"method","name":"of1","children":[],"call":[]}," Concurrent LockFreeStack Empty next_node":{"type":"method","name":"next_node","children":[],"call":[]}," Concurrent LockFreeStack Node initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent AtomicReference to_s":{"type":"method","name":"to_s","children":[],"call":[" format "," get "," [] "]}," Concurrent AtomicMarkableReference immutable_array":{"type":"method","name":"immutable_array","children":[],"call":["args freeze "]}," Concurrent AtomicMarkableReference try_update":{"type":"method","name":"try_update","children":[],"call":[" immutable_array "," compare_and_set "," reference "]}," Concurrent AtomicMarkableReference try_update!":{"type":"method","name":"try_update!","children":[],"call":[" immutable_array "," fail ","Note: If you would like to guarantee an update, please use  + "," compare_and_set "," reference "]}," Concurrent AtomicMarkableReference update":{"type":"method","name":"update","children":[],"call":[" immutable_array "," compare_and_set "," reference "," loop "]}," Concurrent AtomicMarkableReference set":{"type":"method","name":"set","children":[],"call":[" reference= "," immutable_array "]}," Concurrent AtomicMarkableReference mark":{"type":"method","name":"mark","children":[],"call":[" reference [] "," reference "]}," Concurrent AtomicMarkableReference value":{"type":"method","name":"value","children":[],"call":[" reference [] "," reference "]}," Concurrent AtomicMarkableReference get":{"type":"method","name":"get","children":[],"call":[" reference "]}," Concurrent AtomicMarkableReference compare_and_set":{"type":"method","name":"compare_and_set","children":[],"call":[" compare_and_set_reference "," immutable_array ","expected_val equal? ","expected_val == ","expected_val is_a? ","expected_mark == "," reference "]}," Concurrent AtomicMarkableReference initialize":{"type":"method","name":"initialize","children":[],"call":[" reference= "," immutable_array "]}," Concurrent LockFreeStack next_node":{"type":"method","name":"next_node","children":[],"call":[]}," LoadError path":{"type":"method","name":"path","children":[],"call":[" message split last "," message split "," message "]}," Kernel __dir__":{"type":"method","name":"__dir__","children":[],"call":["File  dirname "]}," TruffleRuby synchronized":{"type":"method","name":"synchronized","children":[],"call":[]}," Concurrent Utility NativeExtensionLoader load_error_path":{"type":"method","name":"load_error_path","children":[],"call":["error message split last ","error message split ","error message ","error path ","error respond_to? "]}," Concurrent Transaction open":{"type":"method","name":"open","children":[],"call":["@open_tvars []= ","OpenEntry  new ","tvar unsafe_value ","Concurrent  abort_transaction ","tvar unsafe_lock try_lock ","tvar unsafe_lock ","@open_tvars [] "]}," Concurrent ThreadSafe Util make_synchronized_on_cruby":{"type":"method","name":"make_synchronized_on_cruby","children":[{"type":"method","name":"initialize","children":[],"asgn":[{"type":"instance","name":"@_monitor","value":"Monitor  new "},["Monitor  new "]],"call":["Monitor  new "]},{"type":"method","name":"initialize_copy","children":[],"asgn":[{"type":"instance","name":"@_monitor","value":"Monitor  new "},["Monitor  new "]],"call":["Monitor  new "]}],"call":[]}," Concurrent Synchronization RbxLockableObject initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":[]}," Concurrent Synchronization Object __initialize_atomic_fields__":{"type":"method","name":"__initialize_atomic_fields__","children":[],"call":[]}," Concurrent Synchronization Object define_initialize_atomic_fields":{"type":"method","name":"define_initialize_atomic_fields","children":[],"call":[]}," Concurrent Synchronization Object atomic_attribute?":{"type":"method","name":"atomic_attribute?","children":[],"call":[]}," Concurrent Synchronization Object atomic_attributes":{"type":"method","name":"atomic_attributes","children":[],"call":[]}," Concurrent Synchronization MonitorLockableObject initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["@__Lock__ new_cond "," Monitor  new "," Monitor  new  new_cond "]}," Concurrent Synchronization MutexLockableObject initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":[" ConditionVariable  new "," Mutex  new "]}," Concurrent Synchronization AbstractStruct ns_initialize_copy":{"type":"method","name":"ns_initialize_copy","children":[],"call":["val clone ","@values map "]}," Concurrent SettableStruct initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":[" ns_initialize_copy "," synchronize "]}," Concurrent Promises ResolvableFuture result":{"type":"method","name":"result","children":[],"call":[" internal_state result "," internal_state "," resolve "," wait_until_resolved "]}," Concurrent Promises ResolvableFuture reason":{"type":"method","name":"reason","children":[],"call":[" internal_state reason "," internal_state "," resolve "," wait_until_resolved "]}," Concurrent Promises ResolvableFuture value!":{"type":"method","name":"value!","children":[],"call":[" internal_state value "," internal_state "," raise "," rejected? "," resolve "," wait_until_resolved! "]}," Concurrent Promises ResolvableFuture value":{"type":"method","name":"value","children":[],"call":[" internal_state value "," internal_state "," resolve "," wait_until_resolved "]}," Concurrent Promises ResolvableFuture wait!":{"type":"method","name":"wait!","children":[],"call":[" raise "," rejected? "," resolve "]}," Concurrent Promises ResolvableFuture wait":{"type":"method","name":"wait","children":[],"call":[" resolve ! "," resolve "]}," Concurrent Promises ResolvableEvent wait":{"type":"method","name":"wait","children":[],"call":[" resolve ! "," resolve "]}," Concurrent Promises Future run_test":{"type":"method","name":"run_test","children":[],"call":["v is_a? "]}," Concurrent Promises Future to_s":{"type":"method","name":"to_s","children":[],"call":[" format ","(if\n  (send nil :fulfilled?)\n  (send nil :value)\n  (send nil :reason)) inspect "," reason "," value "," fulfilled? "," [] "," resolved? "]}," Concurrent Promises AbstractEventFuture with_hidden_resolvable":{"type":"method","name":"with_hidden_resolvable","children":[],"call":[]}," Concurrent MutableStruct initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":[" ns_initialize_copy "," synchronize "]}," Concurrent Map []=":{"type":"method","name":"[]=","children":[],"call":[]}," Concurrent ImmutableStruct initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":[" ns_initialize_copy "]}," Concurrent JavaThreadPoolExecutor prune_pool":{"type":"method","name":"prune_pool","children":[],"call":[]}," Concurrent DaemonThreadFactory newThread":{"type":"method","name":"newThread","children":[],"call":["thread setDaemon "," java util concurrent Executors defaultThreadFactory newThread "," java util concurrent Executors defaultThreadFactory "," java util concurrent Executors "," java util concurrent "," java util "," java "," java util concurrent Executors defaultThreadFactory newThread  setDaemon "]}," Concurrent DaemonThreadFactory initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Concurrent AbstractExecutorService fallback_action":{"type":"method","name":"fallback_action","children":[],"call":[" fail "," fallback_policy "," lambda "," log "," raise "]}," Concurrent AbstractExecutorService to_s":{"type":"method","name":"to_s","children":[],"call":[" name "," [] "]}," Concurrent Collection TruffleRubyMapBackend initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," Concurrent RubyThreadLocalVar get_default":{"type":"method","name":"get_default","children":[],"call":[" raise "]}," Concurrent RubyThreadLocalVar next_index":{"type":"method","name":"next_index","children":[],"call":["LOCK  synchronize "]}," Concurrent RubyThreadLocalVar thread_local_finalizer":{"type":"method","name":"thread_local_finalizer","children":[],"call":[]}," Concurrent RubyThreadLocalVar semi_sync":{"type":"method","name":"semi_sync","children":[],"call":[]}," Concurrent Async AwaitDelegator respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["@delegate respond_to? "]}," Concurrent Async AsyncDelegator reset_if_forked":{"type":"method","name":"reset_if_forked","children":[],"call":["@queue clear ","$$ != "]}," Concurrent Async AsyncDelegator respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["@delegate respond_to? "]}," Concurrent Synchronization Volatile ClassMethods attr_volatile":{"type":"method","name":"attr_volatile","children":[],"call":["(send\n  (lvar :names) :map) flatten ","names map "," class_eval ","81 + ","names each ","60 + ","42 + "]}," Concurrent Synchronization Volatile full_memory_barrier":{"type":"method","name":"full_memory_barrier","children":[],"call":["Synchronization  full_memory_barrier "]}," Concurrent Synchronization Volatile included":{"type":"method","name":"included","children":[],"call":[]}," Concurrent Synchronization SafeInitialization new":{"type":"method","name":"new","children":[],"call":["Concurrent Synchronization  full_memory_barrier "]}," Concurrent Synchronization full_memory_barrier":{"type":"method","name":"full_memory_barrier","children":[],"call":[]}," Concurrent MutexAtomicReference synchronize":{"type":"method","name":"synchronize","children":[],"call":["@Lock synchronize ","@Lock owned? "]}," Concurrent ThreadLocalVar default":{"type":"method","name":"default","children":[],"call":[" value= ","@default_block call "]}," Concurrent ThreadLocalVar bind":{"type":"method","name":"bind","children":[],"call":[" value= "," value "," block_given? "]}," Concurrent MutexAtomicFixnum synchronize":{"type":"method","name":"synchronize","children":[],"call":["@Lock synchronize ","@Lock owned? "]}," Concurrent MutexAtomicBoolean synchronize":{"type":"method","name":"synchronize","children":[],"call":["@Lock synchronize ","@Lock owned? "]}," Concurrent mutex_owned_per_thread?":{"type":"method","name":"mutex_owned_per_thread?","children":[],"call":[]}," Concurrent FiberLocals locals!":{"type":"method","name":"locals!","children":[],"call":["ObjectSpace  define_finalizer "," thread_fiber_finalizer ","locals object_id ","Fiber  current ","@all_arrays []= "," weak_synchronize ","thread []= ","thread [] ","Thread  current "," Thread  current _fiber_finalizer ","thread []=  object_id ","thread []  object_id ","Thread  current  []= ","Thread  current  [] "]}," Concurrent FiberLocals locals":{"type":"method","name":"locals","children":[],"call":["Thread  current [] ","Thread  current "]}," Concurrent ThreadLocals locals!":{"type":"method","name":"locals!","children":[],"call":["ObjectSpace  define_finalizer "," thread_fiber_finalizer ","locals object_id ","@all_arrays []= "," weak_synchronize ","thread thread_variable_set ","thread thread_variable_get ","Thread  current "," Thread  current _fiber_finalizer ","thread thread_variable_set  object_id ","thread thread_variable_get  object_id ","Thread  current  Thread  current _variable_set ","Thread  current  Thread  current _variable_get "]}," Concurrent ThreadLocals locals":{"type":"method","name":"locals","children":[],"call":["Thread  current thread_variable_get ","Thread  current "]}," Concurrent AbstractLocals locals!":{"type":"method","name":"locals!","children":[],"call":[" raise "]}," Concurrent AbstractLocals locals":{"type":"method","name":"locals","children":[],"call":[" raise "]}," Concurrent AbstractLocals thread_fiber_finalizer":{"type":"method","name":"thread_fiber_finalizer","children":[],"call":["@all_arrays delete "," weak_synchronize "," proc "]}," Concurrent AbstractLocals local_finalizer":{"type":"method","name":"local_finalizer","children":[],"call":[" free_index "," proc "]}," Concurrent AbstractLocals set":{"type":"method","name":"set","children":[],"call":["locals []= "," == "," locals! "," locals!  []= ","  locals! ! "]}," Concurrent AbstractLocals fetch":{"type":"method","name":"fetch","children":[],"call":["NULL  equal? "," == ","locals [] "," locals "," locals  [] ","  locals  "]}," Concurrent AbstractLocals free_index":{"type":"method","name":"free_index","children":[],"call":["@free << ","locals []= ","@all_arrays values each ","@all_arrays values "," weak_synchronize "]}," Concurrent AbstractLocals next_index":{"type":"method","name":"next_index","children":[],"call":["ObjectSpace  define_finalizer "," local_finalizer ","@free pop ","@free empty? "," synchronize "]}," Concurrent AbstractLocals weak_synchronize":{"type":"method","name":"weak_synchronize","children":[],"call":[]}," Concurrent AbstractLocals synchronize":{"type":"method","name":"synchronize","children":[],"call":["@lock synchronize "]}," Concurrent AbstractLocals initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "]}," Concurrent FiberLocalVar default":{"type":"method","name":"default","children":[],"call":[" value= ","@default_block call "]}," Concurrent FiberLocalVar bind":{"type":"method","name":"bind","children":[],"call":[" value= "," value "," block_given? "]}," Concurrent FiberLocalVar value=":{"type":"method","name":"value=","children":[],"call":["LOCALS  set "]}," Concurrent FiberLocalVar value":{"type":"method","name":"value","children":[],"call":[" default ","LOCALS  fetch "]}," Concurrent FiberLocalVar initialize":{"type":"method","name":"initialize","children":[],"call":["LOCALS  next_index "," block_given? "," raise "]}," Concurrent Collection NonConcurrentMapBackend set_backend":{"type":"method","name":"set_backend","children":[],"call":["default_proc call "," Hash  new "]}}