{" Dry Inflector underscorize":{"type":"method","name":"underscorize","children":[],"call":["input downcase! ","input tr! ","input gsub! "]}," Dry Inflector uncountable?":{"type":"method","name":"uncountable?","children":[],"call":[" inflections uncountables include? ","input downcase "," inflections uncountables "," inflections ","(send\n  (lvar :input) :=~\n  (regexp\n    (str \"\\\\A[[:space:]]*\\\\z\")\n    (regopt))) nil? ! ","(send\n  (lvar :input) :=~\n  (regexp\n    (str \"\\\\A[[:space:]]*\\\\z\")\n    (regopt))) nil? ","input =~ ","input match? "]}," Dry Inflector underscore":{"type":"method","name":"underscore","children":[],"call":[" underscorize ","input to_s gsub ","input to_s ","input downcase! ","input tr! ","input gsub! ","m2 downcase ","Regexp  last_match "," inflections acronyms regex "," inflections acronyms "," inflections ","input to_s gsub  to_s gsub ","input to_s gsub  to_s ","input to_s gsub  downcase! ","input to_s gsub  tr! ","input to_s gsub  gsub! ","Regexp  last_match  downcase "]}," Dry Inflector tableize":{"type":"method","name":"tableize","children":[],"call":[" pluralize "," underscorize ","input to_s gsub ","input to_s "," underscore ","input to_s gsub  to_s gsub ","input to_s gsub  to_s "]}," Dry Inflector singularize":{"type":"method","name":"singularize","children":[],"call":[" inflections singulars apply_to "," inflections singulars "," inflections "," uncountable? ","input to_s ","input to_s  to_s "]}," Dry Inflector pluralize":{"type":"method","name":"pluralize","children":[],"call":[" inflections plurals apply_to "," inflections plurals "," inflections "," uncountable? ","input to_s ","input to_s  to_s "]}," Dry Inflector ordinalize":{"type":"method","name":"ordinalize","children":[],"call":["abs_value % ","ORDINALIZE_TH  include? ","number abs ","ORDINALIZE_TH  key? ","ORDINALIZE_TH  [] ","number abs  % "]}," Dry Inflector foreign_key":{"type":"method","name":"foreign_key","children":[],"call":[" underscorize "," demodulize "," underscore "]}," Dry Inflector humanize":{"type":"method","name":"humanize","children":[],"call":["result capitalize! ","result tr! ","result gsub! "," inflections humans apply_to "," inflections humans "," inflections ","input to_s ","(send\n  (send\n    (send\n      (lvar :result) :split\n      (lvar :separator)) :map) :with_index) join "," inflections acronyms apply_to ","index zero? "," inflections acronyms ","result split map with_index ","result split map ","result split ","match [] ","(str \"(?<separator>\\\\W)\") match ","result chomp! ","(str \"(\\\\W)\") match ","result delete_suffix! "," inflections humans apply_to  capitalize! "," inflections humans apply_to  tr! "," inflections humans apply_to  gsub! ","input to_s  to_s ","(send\n  (send\n    (send\n      (lvar : inflections humans apply_to ) :split\n      (lvar :separator)) :map) :with_index) join ","(send\n  (send\n    (send\n      (lvar :result) :split\n      (lvar :match [] )) :map) :with_index) join "," inflections humans apply_to  split map with_index "," inflections humans apply_to  split map "," inflections humans apply_to  split ","(str \"(?<separator>\\W)\") match  [] ","(str \"(\\W)\") match  [] ","(str \"(?<match [] >\\\\W)\") match ","(str \"(?<separator>\\\\W)\") (str \"(?<separator>\\W)\") match  ","(str \"(?<separator>\\\\W)\") (str \"(\\W)\") match  "," inflections humans apply_to  chomp! ","(str \"(\\\\W)\") (str \"(?<separator>\\W)\") match  ","(str \"(\\\\W)\") (str \"(\\W)\") match  "," inflections humans apply_to  delete_suffix! "]}," Dry Inflector demodulize":{"type":"method","name":"demodulize","children":[],"call":["input to_s split last ","input to_s split ","input to_s "]}," Dry Inflector dasherize":{"type":"method","name":"dasherize","children":[],"call":["input to_s tr ","input to_s "]}," Dry Inflector classify":{"type":"method","name":"classify","children":[],"call":[" camelize "," singularize ","input to_s sub ","input to_s ","input to_s split last ","input to_s split "]}," Dry Inflector constantize":{"type":"method","name":"constantize","children":[],"call":["Object  const_get "]}," Dry Inflector camelize":{"type":"method","name":"camelize","children":[],"call":["Regexp  last_match upcase ","Regexp  last_match ","(send\n  (send\n    (lvar :input) :to_s) :gsub\n  (regexp\n    (str \"/(.?)\")\n    (regopt))) gsub ","input to_s gsub ","input to_s ","input gsub! "," inflections acronyms apply_to "," inflections acronyms "," inflections ","input sub! ","input to_s dup ","(send\n  (send\n    (lvar :input to_s dup ) :to_s) :gsub\n  (regexp\n    (str \"/(.?)\")\n    (regopt))) gsub ","input to_s dup  to_s gsub ","input to_s dup  to_s ","input to_s dup  gsub! ","input to_s dup  sub! ","input to_s dup  to_s dup "]}," Dry Inflector initialize":{"type":"method","name":"initialize","children":[],"call":["Inflections  build "]}," Dry Inflector Rules each":{"type":"method","name":"each","children":[],"call":["@rules each "]}," Dry Inflector Rules insert":{"type":"method","name":"insert","children":[],"call":["@rules insert "]}," Dry Inflector Rules apply_to":{"type":"method","name":"apply_to","children":[],"call":["result gsub! "," each ","word dup ","word dup  gsub! "]}," Dry Inflector Rules initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Dry Inflector Inflections rule":{"type":"method","name":"rule","children":[],"call":["target insert "," uncountables delete "," uncountables "]}," Dry Inflector Inflections add_irregular":{"type":"method","name":"add_irregular","children":[],"call":[" rule ","\\1 + ","replacement [] ","tail join ","rule chars to_a ","rule chars "]}," Dry Inflector Inflections human":{"type":"method","name":"human","children":[],"call":[" humans insert "," humans "]}," Dry Inflector Inflections uncountable":{"type":"method","name":"uncountable","children":[],"call":[" uncountables merge ","words flatten "," uncountables "]}," Dry Inflector Inflections irregular":{"type":"method","name":"irregular","children":[],"call":[" add_irregular "," singulars "," plurals "," uncountables delete "," uncountables "]}," Dry Inflector Inflections singular":{"type":"method","name":"singular","children":[],"call":[" rule "," singulars "]}," Dry Inflector Inflections plural":{"type":"method","name":"plural","children":[],"call":[" rule "," plurals "]}," Dry Inflector Inflections initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? ","Set  [] ","Rules  new ","Acronyms  new "]}," Dry Inflector Inflections build":{"type":"method","name":"build","children":[],"call":[]}," Dry Inflector Inflections Defaults uncountable":{"type":"method","name":"uncountable","children":[],"call":[]}," Dry Inflector Inflections Defaults irregular":{"type":"method","name":"irregular","children":[],"call":[]}," Dry Inflector Inflections Defaults singular":{"type":"method","name":"singular","children":[],"call":[]}," Dry Inflector Inflections Defaults plural":{"type":"method","name":"plural","children":[],"call":[]}," Dry Inflector Inflections Defaults call":{"type":"method","name":"call","children":[],"call":[]}," Dry Inflector Inflections acronym":{"type":"method","name":"acronym","children":[],"call":["@acronyms add ","word downcase ","words each "]}," Dry Inflector Inflections Defaults acronyms":{"type":"method","name":"acronyms","children":[],"call":[]}," Dry Inflector Acronyms define_regex_patterns":{"type":"method","name":"define_regex_patterns","children":[],"call":["@rules values join ","@rules values ","@rules empty? "]}," Dry Inflector Acronyms add":{"type":"method","name":"add","children":[],"call":[" define_regex_patterns ","@rules []= "]}," Dry Inflector Acronyms apply_to":{"type":"method","name":"apply_to","children":[],"call":["word capitalize ","@rules [] ","word downcase "]}," Dry Inflector Acronyms initialize":{"type":"method","name":"initialize","children":[],"call":[" define_regex_patterns "]}," Dry Inflector internal_camelize":{"type":"method","name":"internal_camelize","children":[],"call":["input gsub! "," inflections acronyms apply_to "," inflections acronyms "," inflections ","Regexp  last_match ","input sub! ","input to_s dup ","input to_s ","input to_s dup  gsub! ","input to_s dup  sub! ","input to_s dup  to_s dup ","input to_s dup  to_s "]}," Dry Inflector to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Dry Inflector camelize_upper":{"type":"method","name":"camelize_upper","children":[],"call":[" internal_camelize "]}," Dry Inflector camelize_lower":{"type":"method","name":"camelize_lower","children":[],"call":[" internal_camelize "]}}