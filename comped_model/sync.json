{" Sync_m sync_try_lock_sub":{"type":"method","name":"sync_try_lock_sub","children":[],"call":["Err LockModeFailer  Fail "," sync_ex_count= "," sync_ex_count + "," sync_ex_count "," sync_ex_locker == ","Thread  current "," sync_ex_locker "," sync_mode == "," sync_mode "," sync_ex_locker= "," sync_mode= "," sync_sh_locker include? "," sync_sh_locker "," sync_sh_locker size == "," sync_sh_locker size "," sync_sh_locker []= ","count + "," sync_sh_locker [] "," sync_ex_ sync_sh_locker [] = "," sync_ex_ sync_sh_locker []  + "," sync_ex_ sync_sh_locker []  "," sync_sh_locker []  + "]}," Sync_m initialize":{"type":"method","name":"initialize","children":[],"call":[" sync_initialize "]}," Sync_m sync_initialize":{"type":"method","name":"sync_initialize","children":[],"call":["Thread Mutex  new ","Hash  new "]}," Sync_m sync_inspect":{"type":"method","name":"sync_inspect","children":[],"call":[" print "," inspect "," class ","(send\n  (block\n    (send\n      (send nil :instance_variables) :select)\n    (args\n      (arg :iv))\n    (match-with-lvasgn\n      (regexp\n        (str \"^@sync_\")\n        (regopt))\n      (send\n        (lvar :iv) :id2name))) :collect) join ","iv id2name + + "," instance_eval inspect "," instance_eval ","iv id2name ","iv id2name + ","(send\n  (send nil :instance_variables) :select) collect "," instance_variables select "," instance_variables "]}," Sync_m sync_synchronize":{"type":"method","name":"sync_synchronize","children":[],"call":[" sync_unlock "," sync_lock ","Thread  handle_interrupt "]}," Sync_m sync_unlock":{"type":"method","name":"sync_unlock","children":[],"call":["th run ","wakeup_threads push ","th wakeup "," sync_waiting= "," sync_waiting "," sync_sh_locker []= "," sync_sh_locker "," sync_upgrade_waiting shift "," sync_upgrade_waiting "," sync_upgrade_waiting size > "," sync_upgrade_waiting size "," sync_mode= "," sync_ex_count == "," sync_ex_count "," sync_sh_locker empty? "," sync_sh_locker delete ","Thread  current ","(send\n  (send nil :sync_sh_locker) :[]=\n  (send\n    (const nil :Thread) :current)\n  (send\n    (lvar :count) :-\n    (int 1))) == ","count - ","Err UnknownLocker  Fail ","(lvasgn :count\n  (send\n    (send nil :sync_sh_locker) :[]\n    (send\n      (const nil :Thread) :current))) nil? "," sync_sh_locker [] "," sync_sh_locker include? "," sync_ex_locker= ","(send\n  (self) :sync_ex_count=\n  (send\n    (send nil :sync_ex_count) :-\n    (int 1))) == "," sync_ex_count= "," sync_ex_count - "," sync_ex_locker == "," sync_ex_locker "," sync_mode "," sync_mode == ","m == ","@sync_mutex synchronize "," sync_ sync_waiting ing= "," sync_ sync_waiting ing "," sync_upgrade_ sync_waiting ing shift "," sync_upgrade_ sync_waiting ing "," sync_upgrade_ sync_waiting ing size > "," sync_upgrade_ sync_waiting ing size "," sync_ sync_mode ode= "," sync_ex_ sync_sh_locker []  == "," sync_ex_ sync_sh_locker []  "," sync_sh_locker e sync_mode pty? ","(send\n  (send nil :sync_sh_locker) :[]=\n  (send\n    (const nil :Thread) :current)\n  (send\n    (lvar : sync_sh_locker [] ) :-\n    (int 1))) == "," sync_sh_locker []  - ","(lvasgn : sync_sh_locker [] \n  (send\n    (send nil :sync_sh_locker) :[]\n    (send\n      (const nil :Thread) :current))) nil? ","(send\n  (self) :sync_ex_ sync_sh_locker [] =\n  (send\n    (send nil :sync_ex_ sync_sh_locker [] ) :-\n    (int 1))) == "," sync_ex_ sync_sh_locker [] = "," sync_ex_ sync_sh_locker []  - "," sync_ sync_mode ode "," sync_ sync_mode ode == "," sync_mode  == ","@sync_ sync_mode utex synchronize "]}," Sync_m sync_lock":{"type":"method","name":"sync_lock","children":[],"call":[" sync_waiting delete ","Thread  current "," sync_waiting ","@sync_mutex sleep "," sync_waiting push ","w first == ","w first "," sync_upgrade_waiting reverse_each any? "," sync_upgrade_waiting reverse_each "," sync_upgrade_waiting "," sync_waiting include? "," sync_sh_locker delete "," sync_sh_locker "," sync_upgrade_waiting push "," sync_sh_locker [] "," sync_try_lock_sub ","@sync_mutex synchronize ","Thread  handle_interrupt "," unlock ","m == "]}," Sync_m sync_try_lock":{"type":"method","name":"sync_try_lock","children":[],"call":[" sync_try_lock_sub ","@sync_mutex synchronize "," unlock ","mode == "]}," Sync_m sync_exclusive?":{"type":"method","name":"sync_exclusive?","children":[],"call":[" sync_mode == "," sync_mode "]}," Sync_m sync_shared?":{"type":"method","name":"sync_shared?","children":[],"call":[" sync_mode == "," sync_mode "]}," Sync_m sync_locked?":{"type":"method","name":"sync_locked?","children":[],"call":[" sync_mode != "," sync_mode "]}," Sync_m sync_extend":{"type":"method","name":"sync_extend","children":[],"call":[" sync_initialize ","Sync_m  define_aliases "," singleton_class "," synchronize "," try_lock "," unlock "," lock "," exclusive? "," shared? "," locked? "]}," Sync_m extend_object":{"type":"method","name":"extend_object","children":[],"call":[]}," Sync_m append_features":{"type":"method","name":"append_features","children":[],"call":[]}," Sync_m define_aliases":{"type":"method","name":"define_aliases","children":[],"call":[]}," Sync_m Err LockModeFailer Fail":{"type":"method","name":"Fail","children":[],"call":[]}," Sync_m Err UnknownLocker Fail":{"type":"method","name":"Fail","children":[],"call":[]}," Sync_m Err Fail":{"type":"method","name":"Fail","children":[],"call":[]}}