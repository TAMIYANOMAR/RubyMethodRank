{" Paperclip InstanceMethods destroy_attached_files":{"type":"method","name":"destroy_attached_files","children":[],"call":["attachment send "," each_attachment "," logger info "," logger ","Paperclip  log "]}," Paperclip InstanceMethods save_attached_files":{"type":"method","name":"save_attached_files","children":[],"call":["attachment send "," each_attachment "," logger info "," logger ","Paperclip  log "]}," Paperclip InstanceMethods each_attachment":{"type":"method","name":"each_attachment","children":[],"call":[" attachment_for "," class attachment_definitions each "," class attachment_definitions "," class "," attachment_definitions each "," attachment_definitions "]}," Paperclip InstanceMethods attachment_for":{"type":"method","name":"attachment_for","children":[],"call":["Attachment  new "," class attachment_definitions [] "," class attachment_definitions "," class ","@attachments [] ","@_paperclip_attachments [] "," attachment_definitions [] "," attachment_definitions "]}," Paperclip ClassMethods attachment_definitions":{"type":"method","name":"attachment_definitions","children":[],"call":[" read_inheritable_attribute "," attachment_definitions "," respond_to? "]}," Paperclip ClassMethods validates_attachment_presence":{"type":"method","name":"validates_attachment_presence","children":[],"call":[" attachment_definitions [] [] << ","File  exist? ! ","File  exist? ","attachment file path ","attachment file ","attachment file nil? "," lambda "," attachment_definitions [] [] "," attachment_definitions [] "," attachment_definitions ","options [] ","attachment original_filename blank? ","attachment original_filename "," attachment_definitions [] [] []= ","attachment file? "," validates_presence_of ","record errors add ","record errors ","value blank? ","options [] call ! ! == ","options [] call ! ! ","options [] call ! ","options [] call ","options [] nil? ","options [] call != "," validates_each ","record send ! ","record send ","options [] respond_to? "]}," Paperclip ClassMethods validates_attachment_size":{"type":"method","name":"validates_attachment_size","children":[],"call":[" attachment_definitions [] [] << ","options [] last ","options [] ","options [] first ","options [] include? ","instance [] to_i ","instance [] ","options []= ","options [] nil? ","1 / "," lambda "," attachment_definitions [] [] "," attachment_definitions [] "," attachment_definitions ","options [] gsub gsub ","max to_s ","options [] gsub ","min to_s ","attachment original_filename blank? ","attachment original_filename "," attachment_definitions [] [] []= ","message gsub gsub ","message gsub ","range include? ! ","range include? ","attachment size to_i ","attachment size ","attachment file? ","1.0 / "," validates_inclusion_of ","message call ","message respond_to? ","options [] last  to_s ","options [] first  to_s ","message gsub gsub  gsub gsub ","message call  gsub gsub ","message gsub gsub  gsub ","message call  gsub ","message gsub gsub  call ","message call  call ","message gsub gsub  respond_to? ","message call  respond_to? "]}," Paperclip ClassMethods has_attached_file":{"type":"method","name":"has_attached_file","children":[],"call":["value send "," validates_each "," attachment_for file nil? ! "," attachment_for file nil? "," attachment_for file "," attachment_for "," define_method "," attachment_for assign ","a to_s ","args first ","args length > ","args length "," before_destroy "," after_save "," attachment_definitions []= ","(pair\n  (sym :validations)\n  (array)) merge "," attachment_definitions "," write_inheritable_attribute "," attachment_definitions nil? "," include "," attachment_for original_filename blank? ! "," attachment_for original_filename blank? "," attachment_for original_filename ","value valid? "," attachment_for file? ","(pair\n  (sym :validations)\n  (hash)) merge "," define_callbacks ","attachment send ","attachment valid? ","record attachment_for "," define_paperclip_callbacks "," attachment_definitions= "," respond_to? "," after_destroy ","Paperclip  classes_with_attachments << ","Paperclip  classes_with_attachments ","Paperclip  check_for_url_clash "," name "," attachment_definitions [] [] "," attachment_definitions [] ","Paperclip  classes_with_attachments include? "," attachment_definitions dup ","Paperclip AttachmentOptions  new ","Paperclip  check_for_path_clash ","HasAttachedFile  define_on ","Paperclip Deprecations  check ","v attachment_for lue send "," v attachment_for lid attachment_for tes_e attachment_for ch ","  attachment_for tt attachment_for chment_for file nil? ! "," record attachment_for _for file nil? ! ","  attachment_for tt attachment_for chment_for file nil? "," record attachment_for _for file nil? ","  attachment_for tt attachment_for chment_for file "," record attachment_for _for file ","  attachment_for tt attachment_for chment_for "," record attachment_for _for ","  attachment_for tt attachment_for chment_for  attachment_for ssign "," record attachment_for _for assign "," attachment_for  to_s "," attachment_for rgs first "," attachment_for rgs length > "," attachment_for rgs length ","  attachment_for fter_s attachment_for ve ","  attachment_for tt attachment_for chment_definitions []= "," record attachment_for _definitions []= ","(p attachment_for ir\n  (sym :v attachment_for lid attachment_for tions)\n  ( attachment_for rr attachment_for y)) merge ","  attachment_for tt attachment_for chment_definitions "," record attachment_for _definitions "," write_inherit attachment_for ble_ attachment_for ttribute ","  attachment_for tt attachment_for chment_definitions nil? "," record attachment_for _definitions nil? ","  attachment_for tt attachment_for chment_for origin attachment_for l_filen attachment_for me bl attachment_for nk? ! "," record attachment_for _for original_filename blank? ! ","  attachment_for tt attachment_for chment_for origin attachment_for l_filen attachment_for me bl attachment_for nk? "," record attachment_for _for original_filename blank? ","  attachment_for tt attachment_for chment_for origin attachment_for l_filen attachment_for me "," record attachment_for _for original_filename ","v attachment_for lue v attachment_for lid? ","  attachment_for tt attachment_for chment_for file? "," record attachment_for _for file? ","(p attachment_for ir\n  (sym :v attachment_for lid attachment_for tions)\n  (h attachment_for sh)) merge "," define_c attachment_for llb attachment_for cks "," attachment_for tt attachment_for chment send ","record attachment_for  send "," attachment_for tt attachment_for chment v attachment_for lid? ","record attachment_for  valid? ","record  attachment_for tt attachment_for chment_for ","record record attachment_for _for "," define_p attachment_for perclip_c attachment_for llb attachment_for cks ","  attachment_for tt attachment_for chment_definitions= "," record attachment_for _definitions= ","  attachment_for fter_destroy ","P attachment_for perclip  cl attachment_for sses_with_ attachment_for tt attachment_for chments << ","Paperclip  classes_with_record attachment_for s << ","P attachment_for perclip  cl attachment_for sses_with_ attachment_for tt attachment_for chments ","Paperclip  classes_with_record attachment_for s ","P attachment_for perclip  check_for_url_cl attachment_for sh "," n attachment_for me ","  attachment_for tt attachment_for chment_definitions [] [] "," record attachment_for _definitions [] [] ","  attachment_for tt attachment_for chment_definitions [] "," record attachment_for _definitions [] ","P attachment_for perclip  cl attachment_for sses_with_ attachment_for tt attachment_for chments include? ","Paperclip  classes_with_record attachment_for s include? ","  attachment_for tt attachment_for chment_definitions dup "," record attachment_for _definitions dup ","P attachment_for perclip Att attachment_for chmentOptions  new ","P attachment_for perclip  check_for_p attachment_for th_cl attachment_for sh ","H attachment_for sAtt attachment_for chedFile  define_on ","P attachment_for perclip Deprec attachment_for tions  check "]}," Paperclip included":{"type":"method","name":"included","children":[],"call":["base extend ","base send ","base respond_to? "]}," Paperclip path_for_command":{"type":"method","name":"path_for_command","children":[],"call":["File  join ","(send\n  (send nil :options) :[]\n  (sym :image_magick_path)) compact "," options [] "," options ","(or\n  (send\n    (send nil :options) :[]\n    (sym :image_magick_path))\n  (send\n    (send nil :options) :[]\n    (sym :command_path))) compact ","ActiveSupport Deprecation  warn ",":image_magick_path is deprecated and  + + ",":image_magick_path is deprecated and  + ","(or\n  (send\n    (send nil :options) :[]\n    (sym :command_path))\n  (send\n    (send nil :options) :[]\n    (sym :image_magick_path))) compact "," warn ","(send\n  (send nil :options) :[]\n  (sym :image_magick_(send\n  (send nil :options) :[]\n  (sym :image_magick_path)) compact )) compact ","(send\n  (send nil :options) :[]\n  (sym :image_magick_(or\n  (send\n    (send nil :options) :[]\n    (sym :image_magick_path))\n  (send\n    (send nil :options) :[]\n    (sym :command_path))) compact )) compact ","(send\n  (send nil :options) :[]\n  (sym :image_magick_(or\n  (send\n    (send nil :options) :[]\n    (sym :command_path))\n  (send\n    (send nil :options) :[]\n    (sym :image_magick_path))) compact )) compact ","(or\n  (send\n    (send nil :options) :[]\n    (sym :image_magick_(send\n  (send nil :options) :[]\n  (sym :image_magick_path)) compact ))\n  (send\n    (send nil :options) :[]\n    (sym :command_(send\n  (send nil :options) :[]\n  (sym :image_magick_path)) compact ))) compact ","(or\n  (send\n    (send nil :options) :[]\n    (sym :image_magick_(or\n  (send\n    (send nil :options) :[]\n    (sym :image_magick_path))\n  (send\n    (send nil :options) :[]\n    (sym :command_path))) compact ))\n  (send\n    (send nil :options) :[]\n    (sym :command_(or\n  (send\n    (send nil :options) :[]\n    (sym :image_magick_path))\n  (send\n    (send nil :options) :[]\n    (sym :command_path))) compact ))) compact ","(or\n  (send\n    (send nil :options) :[]\n    (sym :image_magick_(or\n  (send\n    (send nil :options) :[]\n    (sym :command_path))\n  (send\n    (send nil :options) :[]\n    (sym :image_magick_path))) compact ))\n  (send\n    (send nil :options) :[]\n    (sym :command_(or\n  (send\n    (send nil :options) :[]\n    (sym :command_path))\n  (send\n    (send nil :options) :[]\n    (sym :image_magick_path))) compact ))) compact ",":image_magick_(send\n  (send nil :options) :[]\n  (sym :image_magick_path)) compact  is deprecated and  + + ",":image_magick_(or\n  (send\n    (send nil :options) :[]\n    (sym :image_magick_path))\n  (send\n    (send nil :options) :[]\n    (sym :command_path))) compact  is deprecated and  + + ",":image_magick_(or\n  (send\n    (send nil :options) :[]\n    (sym :command_path))\n  (send\n    (send nil :options) :[]\n    (sym :image_magick_path))) compact  is deprecated and  + + ",":image_magick_(send\n  (send nil :options) :[]\n  (sym :image_magick_path)) compact  is deprecated and  + ",":image_magick_(or\n  (send\n    (send nil :options) :[]\n    (sym :image_magick_path))\n  (send\n    (send nil :options) :[]\n    (sym :command_path))) compact  is deprecated and  + ",":image_magick_(or\n  (send\n    (send nil :options) :[]\n    (sym :command_path))\n  (send\n    (send nil :options) :[]\n    (sym :image_magick_path))) compact  is deprecated and  + ","(or\n  (send\n    (send nil :options) :[]\n    (sym :command_(send\n  (send nil :options) :[]\n  (sym :image_magick_path)) compact ))\n  (send\n    (send nil :options) :[]\n    (sym :image_magick_(send\n  (send nil :options) :[]\n  (sym :image_magick_path)) compact ))) compact ","(or\n  (send\n    (send nil :options) :[]\n    (sym :command_(or\n  (send\n    (send nil :options) :[]\n    (sym :image_magick_path))\n  (send\n    (send nil :options) :[]\n    (sym :command_path))) compact ))\n  (send\n    (send nil :options) :[]\n    (sym :image_magick_(or\n  (send\n    (send nil :options) :[]\n    (sym :image_magick_path))\n  (send\n    (send nil :options) :[]\n    (sym :command_path))) compact ))) compact ","(or\n  (send\n    (send nil :options) :[]\n    (sym :command_(or\n  (send\n    (send nil :options) :[]\n    (sym :command_path))\n  (send\n    (send nil :options) :[]\n    (sym :image_magick_path))) compact ))\n  (send\n    (send nil :options) :[]\n    (sym :image_magick_(or\n  (send\n    (send nil :options) :[]\n    (sym :command_path))\n  (send\n    (send nil :options) :[]\n    (sym :image_magick_path))) compact ))) compact "]}," Paperclip options":{"type":"method","name":"options","children":[],"call":[]}," Paperclip Upfile size":{"type":"method","name":"size","children":[],"call":["File  size "]}," Paperclip Upfile original_filename":{"type":"method","name":"original_filename","children":[],"call":["File  basename "," path "]}," Paperclip Upfile content_type":{"type":"method","name":"content_type","children":[],"call":[" path match [] "," path match "," path ","(rescue\n  (send\n    (send\n      (send\n        (self) :path) :match\n      (regexp\n        (str \"\\\\.(\\\\w+)$\")\n        (regopt))) :[]\n    (int 1))\n  (resbody nil nil\n    (str \"octet-stream\")) nil) downcase ","content_type match ","Paperclip  run split last strip ","Paperclip  run split last ","Paperclip  run split ","Paperclip  run "," iterate_over_array_to_find_best_option ","types first content_type ","types first ","types length == ","types length "," type_from_file_command ","MIME Types  type_for "," original_filename ","content_(rescue\n  (send\n    (send\n      (send\n        (self) :path) :match\n      (regexp\n        (str \"\\.(\\w+)$\")\n        (regopt))) :[]\n    (int 1))\n  (resbody nil nil\n    (str \"octet-stream\")) nil) downcase  match ","(rescue\n  (send\n    (send\n      (send\n        (self) :path) :match\n      (regexp\n        (str \"\\.(\\w+)$\")\n        (regopt))) :[]\n    (int 1))\n  (resbody nil nil\n    (str \"octet-stream\")) nil) downcase s first content_(rescue\n  (send\n    (send\n      (send\n        (self) :path) :match\n      (regexp\n        (str \"\\.(\\w+)$\")\n        (regopt))) :[]\n    (int 1))\n  (resbody nil nil\n    (str \"octet-stream\")) nil) downcase  ","MIME Types  type_for  first content_type ","(rescue\n  (send\n    (send\n      (send\n        (self) :path) :match\n      (regexp\n        (str \"\\.(\\w+)$\")\n        (regopt))) :[]\n    (int 1))\n  (resbody nil nil\n    (str \"octet-stream\")) nil) downcase s first ","MIME Types  type_for  first ","(rescue\n  (send\n    (send\n      (send\n        (self) :path) :match\n      (regexp\n        (str \"\\.(\\w+)$\")\n        (regopt))) :[]\n    (int 1))\n  (resbody nil nil\n    (str \"octet-stream\")) nil) downcase s length == ","MIME Types  type_for  length == ","(rescue\n  (send\n    (send\n      (send\n        (self) :path) :match\n      (regexp\n        (str \"\\.(\\w+)$\")\n        (regopt))) :[]\n    (int 1))\n  (resbody nil nil\n    (str \"octet-stream\")) nil) downcase s length ","MIME Types  type_for  length "," (rescue\n  (send\n    (send\n      (send\n        (self) :path) :match\n      (regexp\n        (str \"\\.(\\w+)$\")\n        (regopt))) :[]\n    (int 1))\n  (resbody nil nil\n    (str \"octet-stream\")) nil) downcase _from_file_command ","MIME Types  (rescue\n  (send\n    (send\n      (send\n        (self) :path) :match\n      (regexp\n        (str \"\\.(\\w+)$\")\n        (regopt))) :[]\n    (int 1))\n  (resbody nil nil\n    (str \"octet-stream\")) nil) downcase _for "]}," Paperclip Tempfile make_tmpname":{"type":"method","name":"make_tmpname","children":[],"call":[" sprintf ","File  basename ","File  extname "," rand to_s "," rand ","Time  now strftime ","Time  now ","n to_i "," time now strftime "," time now "," time ","RUBY_PLATFORM  =~ "," raise ","prefix_suffix inspect "," sprinTime  now strftime f "," sprin time now strftime f ","File  exTime  now strftime name ","File  ex time now strftime name "," rand Time  now strftime o_s "," rand  time now strftime o_s ","Time  now sTime  now strftime rfTime  now strftime ime ","Time  now s time now strftime rf time now strftime ime ","n Time  now strftime o_i ","n  time now strftime o_i "," Time  now strftime ime now sTime  now strftime rfTime  now strftime ime ","  time now strftime ime now s time now strftime rf time now strftime ime "," Time  now strftime ime now ","  time now strftime ime now "," Time  now strftime ime ","  time now strftime ime ","prefix_suffix inspecTime  now strftime  ","prefix_suffix inspec time now strftime  "]}," Paperclip Thumbnail transformation_command":{"type":"method","name":"transformation_command","children":[],"call":["trans << ","@current_geometry transformation_to "," crop? "," convert_options "," convert_options? ","scale empty? ","scale nil? ","trans << << << ","trans << << "," animated? "," auto_orient "]}," Paperclip Thumbnail make":{"type":"method","name":"make","children":[],"call":[" raise ","$? exitstatus != ","$? exitstatus "," system ","command gsub ","File  expand_path ","dst path "," transformation_command ","src path ","Paperclip  path_for_command ","dst binmode ","Tempfile  new ","(ivar :@basename) compact join ","(ivar :@basename) compact ","Paperclip  run "," source_file_options ","parameters flatten compact join strip squeeze ","parameters flatten compact join strip ","parameters flatten compact join ","parameters flatten compact ","parameters flatten ","parameters << "," convert_options ","Paperclip CommandNotFoundError  new "," animated? ","(send nil :source_file_options) flatten compact ","(send nil :source_file_options) flatten ","Paperclip Errors CommandNotFoundError  new "," convert ","TempfileFactory  new generate ","TempfileFactory  new ","(ivar :@basename) join ","(str \"There was an error processing the thumbnail for \") + ","e message ","Tempfile  new  path ","TempfileFactory  new generate  path ","Tempfile  new  binmode ","TempfileFactory  new generate  binmode "," source_file_(send nil :source_file_options) flatten compact  ","parameters flatten compact join strip squeeze  flatten compact join strip squeeze ","parameters flatten compact join strip squeeze  flatten compact join strip ","parameters flatten compact join strip squeeze  flatten compact join ","parameters flatten compact join strip squeeze  flatten compact ","parameters flatten compact join strip squeeze  flatten ","parameters flatten compact join strip squeeze  << "," convert_(send nil :source_file_options) flatten compact  ","(send nil :source_file_(send nil :source_file_options) flatten compact ) flatten compact ","(send nil :source_file_(send nil :source_file_options) flatten compact ) flatten ","e (str \"There was an error processing the thumbnail for \") +  "]}," Paperclip Thumbnail crop?":{"type":"method","name":"crop?","children":[],"call":[]}," Paperclip Thumbnail initialize":{"type":"method","name":"initialize","children":[],"call":["File  basename ","@file path ","File  extname ","Geometry  from_file ","Geometry  parse ","target_geometry [] == ","target_geometry [] ","options [] ","options [] nil? ","geometry [] == ","geometry [] ","@convert_options split ","@convert_options respond_to? ","@source_file_options split ","@source_file_options respond_to? ","(or\n  (send\n    (lvar :options) :[]\n    (sym :file_geometry_parser))\n  (const nil :Geometry)) from_file ","(or\n  (send\n    (lvar :options) :[]\n    (sym :string_geometry_parser))\n  (const nil :Geometry)) parse ","@current_geometry auto_orient ","@current_geometry respond_to? ","options fetch ","options fetch from_file ","options fetch parse ","options [] to_s "," multi_frame_format? ","target_options []  [] == ","target_options [] to_s  [] == ","target_options []  [] ","target_options [] to_s  [] ","options []  [] == ","options [] to_s  [] == ","options []  [] ","options [] to_s  [] ","options []  split ","@convert_options split  split ","options []  respond_to? ","@convert_options split  respond_to? ","@source_file_options split  split ","@source_file_options split  respond_to? ","(or\n  (send\n    (lvar :options) :[]\n    (sym :file_options [] _parser))\n  (const nil :Geometry)) from_file ","(or\n  (send\n    (lvar :options) :[]\n    (sym :file_options [] to_s _parser))\n  (const nil :Geometry)) from_file ","(or\n  (send\n    (lvar :options) :[]\n    (sym :string_options [] _parser))\n  (const nil :Geometry)) parse ","(or\n  (send\n    (lvar :options) :[]\n    (sym :string_options [] to_s _parser))\n  (const nil :Geometry)) parse ","Geometry  from_file  auto_orient ","(or\n  (send\n    (lvar :options) :[]\n    (sym :file_geometry_parser))\n  (const nil :Geometry)) from_file  auto_orient ","options fetch from_file  auto_orient ","@current_options []  auto_orient ","@current_options [] to_s  auto_orient ","Geometry  from_file  respond_to? ","(or\n  (send\n    (lvar :options) :[]\n    (sym :file_geometry_parser))\n  (const nil :Geometry)) from_file  respond_to? ","options fetch from_file  respond_to? ","@current_options []  respond_to? ","@current_options [] to_s  respond_to? "]}," IOStream stream_to":{"type":"method","name":"stream_to","children":[],"call":["dstio rewind ","dstio write "," read "," rewind ","File  new ","object read ","object rewind "]}," IOStream to_tempfile":{"type":"method","name":"to_tempfile","children":[],"call":[" stream_to ","tempfile binmode ","Tempfile  new ","Paperclip Tempfile  new ","File  extname ","object path ","object respond_to? ","object original_filename ","object to_tempfile ","stream + "," path "," respond_to? "," original_filename ","Tempfile  new  binmode ","Paperclip Tempfile  new  binmode ","File  extobject original_filename  ","File  ext original_filename  ","object original_fileobject original_filename  ","object original_file original_filename  ","object to_Tempfile  new  ","object to_Paperclip Tempfile  new  "," original_fileobject original_filename  "," original_file original_filename  "]}," Paperclip Geometry cropping":{"type":"method","name":"cropping","children":[],"call":["%dx%d+%d+%d % ","(send\n  (send\n    (send\n      (self) :width) :*\n    (lvar :scale)) :-\n  (send\n    (lvar :dst) :width)) / "," width * - ","dst width "," width * "," width ","dst height ","(send\n  (send\n    (send\n      (self) :height) :*\n    (lvar :scale)) :-\n  (send\n    (lvar :dst) :height)) / "," height * - "," height * "," height ","ratio square? ","ratio horizontal? "]}," Paperclip Geometry scaling":{"type":"method","name":"scaling","children":[],"call":["ratio height ","x%d % ","dst height ","ratio width ","%dx % ","dst width ","ratio square? ","ratio horizontal? "]}," Paperclip Geometry transformation_to":{"type":"method","name":"transformation_to","children":[],"call":["dst to_s "," cropping "," scaling ","Geometry  new ","dst height / "," height ","dst height ","dst width / "," width ","dst width "]}," Paperclip Geometry inspect":{"type":"method","name":"inspect","children":[],"call":[" to_s "]}," Paperclip Geometry to_s":{"type":"method","name":"to_s","children":[],"call":["%dx%d%s % "," modifier "," height "," width ","s << "," modifier to_s "," height to_i "," height > "," width to_i to_s "," width to_i "," width > "]}," Paperclip Geometry smaller":{"type":"method","name":"smaller","children":[],"call":["(send nil :height) min "," width "," height "]}," Paperclip Geometry larger":{"type":"method","name":"larger","children":[],"call":["(send nil :height) max "," width "," height "]}," Paperclip Geometry aspect":{"type":"method","name":"aspect","children":[],"call":[" width / "," height "," width "]}," Paperclip Geometry vertical?":{"type":"method","name":"vertical?","children":[],"call":[" height > "," width "," height "]}," Paperclip Geometry horizontal?":{"type":"method","name":"horizontal?","children":[],"call":[" height < "," width "," height "]}," Paperclip Geometry square?":{"type":"method","name":"square?","children":[],"call":[" height == "," width "," height "]}," Paperclip Geometry parse":{"type":"method","name":"parse","children":[],"call":[]}," Paperclip Geometry from_file":{"type":"method","name":"from_file","children":[],"call":[]}," Paperclip Geometry initialize":{"type":"method","name":"initialize","children":[],"call":["(or\n  (lvar :width)\n  (lvar :height)) to_f ","(or\n  (lvar :height)\n  (lvar :width)) to_f ","width == ","height == ","width to_f ","height to_f ","options [] to_i ","options [] ","options [] to_f ","width is_a? "]}," Paperclip Attachment flush_errors":{"type":"method","name":"flush_errors","children":[],"call":[" instance errors add "," name "," instance errors "," instance ","@errors each ","(lvar :message) flatten each ","(lvar :message) flatten "]}," Paperclip Attachment queue_existing_for_delete":{"type":"method","name":"queue_existing_for_delete","children":[],"call":["@instance []= ","@processed_files values ","(send\n  (send\n    (array\n      (sym :original)\n      (splat\n        (send\n          (ivar :@styles) :keys))) :uniq) :map) compact "," path "," exists? ","(sym :original) uniq map ","(sym :original) uniq ","@styles keys "," original_filename blank? "," original_filename "," instance_write "," logger info "," name "," logger "," file? "," log ","(send\n  (send\n    (array\n      (sym :original)\n      (splat\n        (send\n          (send nil :styles) :keys))) :uniq) :map) compact "," styles keys "," styles ","@preserve_files == ","(send\n  (send\n    (array\n      (sym :original)\n      (splat\n        (send\n          (send\n            (ivar :@options) :styles) :keys))) :uniq) :map) compact ","@options styles keys ","@options styles "," file? ! ","@options preserve_files ","@options [] "]}," Paperclip Attachment interpolate":{"type":"method","name":"interpolate","children":[],"call":["l call ","pattern gsub! "," class interpolations each "," class interpolations "," class ","pattern dup "," default_style ","blk call ","result gsub ","interpolations reverse inject ","interpolations reverse ","a first to_s <=> ","b first to_s ","b first ","a first to_s ","a first "," class interpolations sort ","Paperclip Interpolations  interpolate "," interpolator interpolate "," interpolator ","pattern dup  gsub! ","pattern dup  dup "]}," Paperclip Attachment post_process":{"type":"method","name":"post_process","children":[],"call":["@processed_files []= ","@errors << ","e message ","Thumbnail  make "," file ","@styles each ","@file nil? ","@queued_for_write []= ","@queued_for_write [] ","@queued_for_write [] nil? ","(or-asgn\n  (send\n    (ivar :@errors) :[]\n    (sym :processing))\n  (array)) << ","@errors [] "," extra_options_for ","dimensions call "," instance ","dimensions respond_to? "," logger info "," name "," logger "," callback ","Paperclip  processor make ","Paperclip  processor ","args [] each ","args [] "," log "," callback == ","e inspect ","args [] inject "," raise ","RuntimeError  new ","args [] blank? "," fire_events "," post_process_styles "," solidify_style_definitions "," instance run_paperclip_callbacks "," instance errors any? "," instance errors ","@options [] "," instance errors any? ! ","@options [] ! ","dimensions call  call ","dimensions call  respond_to? "]}," Paperclip Attachment initialize_storage":{"type":"method","name":"initialize_storage","children":[],"call":[" extend ","Paperclip Storage  const_get ","@storage to_s capitalize ","@storage to_s "," raise ","@storage to_s downcase camelize ","@storage to_s downcase ","@options storage to_s downcase camelize ","@options storage to_s downcase ","@options storage to_s ","@options storage ","@options [] to_s downcase camelize ","@options [] to_s downcase ","@options [] to_s ","@options [] "]}," Paperclip Attachment normalize_style_definition":{"type":"method","name":"normalize_style_definition","children":[],"call":["@styles []= ","format == ","(lvar :args) flatten [] ","(lvar :args) flatten ","@styles each "," extra_options_for ","format blank? ","(pair\n  (sym :processors)\n  (ivar :@processors)) merge ","@styles [] ","args is_a? "]}," Paperclip Attachment validate":{"type":"method","name":"validate","children":[],"call":["(send\n  (ivar :@validations) :collect) flatten compact uniq ","(send\n  (ivar :@validations) :collect) flatten compact ","(send\n  (ivar :@validations) :collect) flatten ","v call "," instance ","@validations collect ","@errors merge! ","v == ","@validation_errors reject! ","errors []= ","block call ","@validations inject "," send "," allow_validation? ","(send\n  (ivar :@validations) :collect) flatten compact uniq  reject! "]}," Paperclip Attachment valid_assignment?":{"type":"method","name":"valid_assignment?","children":[],"call":["file respond_to? ","file nil? ","attr to_s start_with? ","@name to_s ","attr to_s "," instance errors none? "," instance errors "," instance "," instance valid? "]}," Paperclip Attachment interpolations":{"type":"method","name":"interpolations","children":[],"call":[]}," Paperclip Attachment original_filename":{"type":"method","name":"original_filename","children":[],"call":[" instance [] "," name "," instance "," instance_read "]}," Paperclip Attachment to_file":{"type":"method","name":"to_file","children":[],"call":["@processed_files [] "," default_style "]}," Paperclip Attachment save":{"type":"method","name":"save","children":[],"call":[" flush_errors ","@processed_files [] "," default_style "," flush_writes "," flush_deletes "," valid? "," logger info "," name "," logger "," log ","@options [] ","@queued_for_write except! ","@options [] include? ! ","@options [] include? ","@options [] any? ","process include? ! ","process include? ","process any? "," only_process ","@ only_process ed_files [] "," only_process  include? ! "," only_process  include? "," only_process  any? "," only_ only_process  "]}," Paperclip Attachment dirty?":{"type":"method","name":"dirty?","children":[],"call":[]}," Paperclip Attachment errors":{"type":"method","name":"errors","children":[],"call":["@errors compact uniq ","@errors compact "]}," Paperclip Attachment valid?":{"type":"method","name":"valid?","children":[],"call":[" errors length == "," errors length "," errors "," errors empty? "," validate "]}," Paperclip Attachment to_s":{"type":"method","name":"to_s","children":[],"call":[" url "]}," Paperclip Attachment path":{"type":"method","name":"path","children":[],"call":[" interpolate "," original_filename nil? "," original_filename ","@options path ","path unescape ","path respond_to? "," path_option ","@options  interpolate  "," interpolate  unescape "," interpolate  respond_to? ","  interpolate _option "]}," Paperclip Attachment url":{"type":"method","name":"url","children":[],"call":[" interpolate "," original_filename nil? "," original_filename ","(lvar :url) compact join ","url include? ","(lvar :url) compact "," updated_at ","@default_url call ","@default_url is_a? ","URI  escape ","@options url ","@options default_url ","@options default_url call ","@options default_url is_a? ","url escape ","url respond_to? ","url << ","(if\n  (send\n    (lvar :url) :include?\n    (str \"?\"))\n  (str \"&\")\n  (str \"?\")) + "," updated_at to_s "," escape_url ","options [] "," url_timestamp "," most_appropriate_url "," handle_url_options ","@url_generator for ","default_options merge ","options == ","@options [] "," default_options merge "," default_options ","@instance new_record? ","(lvar : interpolate ) compact join ","(lvar : escape_url ) compact join ","(lvar : url_timestamp ) compact join "," interpolate  include? "," escape_url  include? "," url_timestamp  include? ","(lvar : interpolate ) compact ","(lvar : escape_url ) compact ","(lvar : url_timestamp ) compact ","@default_ interpolate  call ","@default_ escape_url  call ","@default_ url_timestamp  call ","@@default_url call  call ","@@options default_url  call ","@@options default_url call  call ","@default_ interpolate  is_a? ","@default_ escape_url  is_a? ","@default_ url_timestamp  is_a? ","@@default_url call  is_a? ","@@options default_url  is_a? ","@@options default_url call  is_a? ","@options  interpolate  ","@options  escape_url  ","@options  url_timestamp  ","@ handle_url_options  url ","@options default_ interpolate  ","@options default_ escape_url  ","@options default_ url_timestamp  ","@options @default_url call  ","@options @options default_url  ","@options @options default_url call  ","@ handle_url_options  default_url ","@options default_ interpolate  call ","@options default_ escape_url  call ","@options default_ url_timestamp  call ","@options @default_url call  call ","@options @options default_url  call ","@options @options default_url call  call ","@ handle_url_options  default_url call ","@options default_ interpolate  is_a? ","@options default_ escape_url  is_a? ","@options default_ url_timestamp  is_a? ","@options @default_url call  is_a? ","@options @options default_url  is_a? ","@options @options default_url call  is_a? ","@ handle_url_options  default_url is_a? "," interpolate  escape "," escape_url  escape "," url_timestamp  escape "," interpolate  respond_to? "," escape_url  respond_to? "," url_timestamp  respond_to? "," interpolate  << "," escape_url  << "," url_timestamp  << ","(if\n  (send\n    (lvar : interpolate ) :include?\n    (str \"?\"))\n  (str \"&\")\n  (str \"?\")) + ","(if\n  (send\n    (lvar : escape_url ) :include?\n    (str \"?\"))\n  (str \"&\")\n  (str \"?\")) + ","(if\n  (send\n    (lvar : url_timestamp ) :include?\n    (str \"?\"))\n  (str \"&\")\n  (str \"?\")) + "," escape_ interpolate  "," escape_ escape_url  "," escape_ url_timestamp  "," handle_url_options  [] ","  interpolate _timestamp ","  escape_url _timestamp ","  url_timestamp _timestamp "," most_appropriate_ interpolate  "," most_appropriate_ escape_url  "," most_appropriate_ url_timestamp  "," handle_ interpolate _options "," handle_ escape_url _options "," handle_ url_timestamp _options "," handle_url_ handle_url_options  ","@ interpolate _generator for ","@ escape_url _generator for ","@ url_timestamp _generator for ","default_ handle_url_options  merge "," handle_url_options  == ","@ handle_url_options  [] "," default_ handle_url_options  merge "," default_ handle_url_options  "]}," Paperclip Attachment assign":{"type":"method","name":"assign","children":[],"call":[" validate "," post_process ","@instance []= ","uploaded_file size ","uploaded_file content_type ","uploaded_file original_filename ","uploaded_file to_tempfile ","uploaded_file nil? "," queue_existing_for_delete "," valid_assignment? ","@queued_for_write []= "," instance_write ","uploaded_file size to_i ","Time  now ","uploaded_file content_type to_s strip ","uploaded_file content_type to_s ","uploaded_file original_filename strip gsub ","uploaded_file original_filename strip "," logger info "," name "," logger ","uploaded_file binmode ","uploaded_file respond_to? ","uploaded_file inspect ","uploaded_file to_file ","uploaded_file is_a? "," raise ","PaperclipError  new ","@instance class ","@instance class column_names include? ","@instance class column_names ","(str \"file_name\") each "," valid? "," log ","uploaded_file close ","@queued_for_write [] size to_i ","@queued_for_write [] size ","@queued_for_write [] "," solidify_style_definitions "," clear "," ensure_required_accessors! "," generate_fingerprint "," to_tempfile ","@queued_for_write [] fingerprint ","uploaded_file fingerprint "," post_processing ","uploaded_filename strip ","@options only_process ","@options [] ","@instance respond_to? ","(begin\n  (send nil :name)) to_sym "," cleanup_filename "," instance_respond_to? ","file fingerprint ","file size ","file content_type ","file original_filename ","file nil? ","Paperclip  io_adapters for ","Paperclip  io_adapters ","file content_type to_s strip ","file content_type to_s ","@options [] map! "," has_enabled_but_unset_created_at? "," only_process "," instance send "," instance "," instance respond_to? ","file assignment? ! ","file assignment? "," ensure_required_validations! "," reset_file_if_original_reprocessed "," post_process_file "," assign_attributes ","@file nil? ","@file assignment? ","uploaded_file to_file  size ","uploaded_Paperclip  io_adapters for  size ","uploaded_file to_file  content_type ","uploaded_Paperclip  io_adapters for  content_type ","uploaded_file to_file  original_filename ","uploaded_Paperclip  io_adapters for  original_Paperclip  io_adapters for name ","uploaded_file to_file  to_tempfile ","uploaded_Paperclip  io_adapters for  to_tempPaperclip  io_adapters for  ","uploaded_file to_file  nil? ","uploaded_Paperclip  io_adapters for  nil? ","uploaded_file to_file  size to_i ","uploaded_Paperclip  io_adapters for  size to_i ","uploaded_file to_file  content_type to_s strip ","uploaded_Paperclip  io_adapters for  content_type to_s strip ","uploaded_file to_file  content_type to_s ","uploaded_Paperclip  io_adapters for  content_type to_s ","uploaded_file to_file  original_filename strip gsub ","uploaded_Paperclip  io_adapters for  original_Paperclip  io_adapters for name strip gsub ","uploaded_file to_file  original_filename strip ","uploaded_Paperclip  io_adapters for  original_Paperclip  io_adapters for name strip ","uploaded_file to_file  binmode ","uploaded_Paperclip  io_adapters for  binmode ","uploaded_file to_file  respond_to? ","uploaded_Paperclip  io_adapters for  respond_to? ","uploaded_file to_file  inspect ","uploaded_Paperclip  io_adapters for  inspect ","uploaded_file to_file  to_file ","uploaded_Paperclip  io_adapters for  to_Paperclip  io_adapters for  ","uploaded_file to_file  is_a? ","uploaded_Paperclip  io_adapters for  is_a? ","(str \"Paperclip  io_adapters for _name\") each ","uploaded_file to_file  close ","uploaded_Paperclip  io_adapters for  close "," to_tempPaperclip  io_adapters for  ","uploaded_file to_file  fingerprint ","uploaded_Paperclip  io_adapters for  fingerprint ","uploaded_file to_file name strip ","uploaded_file original_filename  strip ","uploaded_Paperclip  io_adapters for name strip "," cleanup_Paperclip  io_adapters for name ","Paperclip  io_adapters for  fingerprint ","Paperclip  io_adapters for  size ","Paperclip  io_adapters for  content_type ","Paperclip  io_adapters for  original_Paperclip  io_adapters for name ","Paperclip  io_adapters for  nil? ","Paperclip  io_adapters for  content_type to_s strip ","Paperclip  io_adapters for  content_type to_s ","Paperclip  io_adapters for  assignment? ! ","Paperclip  io_adapters for  assignment? "," reset_Paperclip  io_adapters for _if_original_reprocessed "," post_process_Paperclip  io_adapters for  ","uploaded_file to_tempfile  nil? ","@Paperclip  io_adapters for  nil? ","uploaded_file to_tempfile  assignment? ","@Paperclip  io_adapters for  assignment? "]}," Paperclip Attachment initialize":{"type":"method","name":"initialize","children":[],"call":["@processed_files [] "," locate_files "," original_filename "," initialize_storage "," normalize_style_definition ","options [] "," class default_options merge "," class default_options "," class "," logger info ","instance class "," logger "," log ","@styles call ","@styles is_a? ","@path call ","@path is_a? ","@url call ","@url is_a? ","Paperclip Options  new ","options [] new "," class default_options deep_merge ","name to_s ","name to_sym "," locate_files  [] "," class default_options merge  [] "," class default_options deep_merge  [] "," class default_ class default_options merge  merge "," class default_ class default_options deep_merge  merge "," class default_ class default_options merge  "," class default_ class default_options deep_merge  ","options []  call ","@styles call  call ","options []  is_a? ","@styles call  is_a? ","@path call  call ","@path call  is_a? ","@url call  call ","@url call  is_a? "," class default_options merge  [] new "," class default_options deep_merge  [] new "," class default_ class default_options merge  deep_merge "," class default_ class default_options deep_merge  deep_merge "]}," Paperclip Attachment default_options":{"type":"method","name":"default_options","children":[],"call":["@options [] "]}," Paperclip ClassMethods validates_attachment_content_type":{"type":"method","name":"validates_attachment_content_type","children":[],"call":[" attachment_definitions [] [] << ","ActiveRecord Errors  default_error_messages [] ","ActiveRecord Errors  default_error_messages ","options [] ","t === ","valid_types any? ","instance [] ","options [] blank? ","attachment original_filename nil? ","attachment original_filename ","(send\n  (lvar :options) :[]\n  (sym :content_type)) flatten "," lambda "," attachment_definitions [] [] "," attachment_definitions [] "," attachment_definitions "," attachment_definitions [] [] []= ","attachment instance_read ","attachment original_filename blank? ","valid_types blank? ","content_type nil? ","record errors add ","record errors ","message call ","message respond_to? ","allowed_types join ","record errors method arity == ","record errors method arity ","record errors method ","(or\n  (send\n    (lvar :value) :nil?)\n  (send\n    (lvar :value) :blank?)) ! ","value blank? ","value nil? ","(send\n  (lvar :allowed_types) :any?) ! ","allowed_types any? "," validates_each ","(send\n  (lvar :validation_options) :[]\n  (sym :content_type)) flatten ","validation_options [] ","options dup ","types join ","types any? ","(send\n  (lvar :options) :delete\n  (sym :content_type)) flatten ","options delete ","ActiveRecord Errors  default_error_message call s [] ","ActiveRecord Errors  default_error_message call s ","(send\n  (lvar :options) :[]\n  (sym :content_type)) flatten  any? ","valid_(send\n  (lvar :options) :delete\n  (sym :content_type)) flatten  any? ","(send\n  (lvar :options) :[]\n  (sym :instance [] )) flatten ","(send\n  (lvar :options) :[]\n  (sym :attachment instance_read )) flatten ","(send\n  (lvar :options) :[]\n  (sym :content_type)) flatten  blank? ","valid_(send\n  (lvar :options) :delete\n  (sym :content_type)) flatten  blank? ","instance []  nil? ","attachment instance_read  nil? ","message call  call ","message call  respond_to? ","(send\n  (lvar :validation_options) :[]\n  (sym :content_type)) flatten  join ","allowed_(send\n  (lvar :options) :delete\n  (sym :content_type)) flatten  join ","(send\n  (lvar :(send\n  (lvar :validation_options) :[]\n  (sym :content_type)) flatten ) :any?) ! ","(send\n  (lvar :allowed_(send\n  (lvar :options) :delete\n  (sym :content_type)) flatten ) :any?) ! ","(send\n  (lvar :validation_options) :[]\n  (sym :content_type)) flatten  any? ","allowed_(send\n  (lvar :options) :delete\n  (sym :content_type)) flatten  any? ","(send\n  (lvar :validation_options) :[]\n  (sym :instance [] )) flatten ","(send\n  (lvar :validation_options) :[]\n  (sym :attachment instance_read )) flatten ","(send\n  (lvar :options dup ) :[]\n  (sym :content_type)) flatten ","options dup  [] ","(send\n  (lvar :options) :delete\n  (sym :content_type)) flatten  join ","(send\n  (lvar :options) :delete\n  (sym :content_type)) flatten  any? ","(send\n  (lvar :options) :delete\n  (sym :instance [] )) flatten ","(send\n  (lvar :options) :delete\n  (sym :attachment instance_read )) flatten "]}," Paperclip ClassMethods validates_attachment_thumbnails":{"type":"method","name":"validates_attachment_thumbnails","children":[],"call":[" attachment_definitions [] []= "," attachment_definitions [] "," attachment_definitions "," warn ","[DEPRECATION] validates_attachment_thumbnail is deprecated.  + + ","[DEPRECATION] validates_attachment_thumbnail is deprecated.  + "]}," Paperclip Attachment reprocess!":{"type":"method","name":"reprocess!","children":[],"call":["old_original close ","old_original respond_to? "," post_process ","new_original rewind ","new_original write ","old_original read "," to_file ","Tempfile  new "," save ","new_original binmode "," warn ","old_original get "," instance_write ","Time  now ","old_original unlink ","@options []= "," assign ","@options [] "," instance save "," instance ","@options merge! ","@options slice "," to_file  close "," to_file  respond_to? ","Tempfile  new  rewind ","Tempfile  new  write "," to_file  read ","Tempfile  new  binmode "," to_file  get "," to_file  unlink "]}," Paperclip bit_bucket":{"type":"method","name":"bit_bucket","children":[],"call":["File  exists? "]}," Paperclip run":{"type":"method","name":"run","children":[],"call":[" raise ","(lvar :expected_outcodes) flatten include? ","$? exitstatus ","(lvar :expected_outcodes) flatten ","(begin\n  (send nil :path_for_command\n    (lvar :cmd))) gsub "," bit_bucket "," path_for_command ","Paperclip  options [] ","Paperclip  options ","Paperclip  log ","CommandLine  new run ","CommandLine  new ","CommandLine  path= "," options [] "," options ","Cocaine CommandLine  new run ","Cocaine CommandLine  new ","Cocaine CommandLine  path= ","expected_outcodes join ","expected_outcodes include? ","$? exitstatus == "," quote_command_options join "," quote_command_options ","options [] ","params pop ","params last is_a? ","params last ","(send\n  (const\n    (const nil :Cocaine) :CommandLine) :path) flatten ","Cocaine CommandLine  path ","local_options merge "," logger ","local_options [] "," logging? ","(send\n  (const\n    (const nil :Cocaine) :CommandLine) :path) flatten compact uniq ","(send\n  (const\n    (const nil :Cocaine) :CommandLine) :path) flatten compact ","(begin\n  (send nil :path_for_(begin\n  (send nil :path_for_command\n    (lvar :cmd))) gsub \n    (lvar :cmd))) gsub "," path_for_(begin\n  (send nil :path_for_command\n    (lvar :cmd))) gsub  ","Paperclip  params pop  [] ","Paperclip  params pop  "," params pop  [] "," params pop  "," quote_(begin\n  (send nil :path_for_command\n    (lvar :cmd))) gsub _options join "," quote_command_params pop  join "," quote_(begin\n  (send nil :path_for_command\n    (lvar :cmd))) gsub _options "," quote_command_params pop  ","params pop  [] "," quote_command_options join  pop "," quote_command_options join  last is_a? "," quote_command_options join  last ","local_params pop  merge ","local_options merge  merge ","local_params pop  [] ","local_options merge  [] "]}," StringIO content_type":{"type":"method","name":"content_type","children":[],"call":[]}," StringIO original_filename":{"type":"method","name":"original_filename","children":[],"call":[]}," Paperclip Thumbnail convert_options?":{"type":"method","name":"convert_options?","children":[],"call":["@convert_options blank? ! ","@convert_options blank? ","@convert_options empty? ! ","@convert_options empty? ","@convert_options nil? ! ","@convert_options nil? "]}," Tempfile size":{"type":"method","name":"size","children":[],"call":["@tmpfile stat size ","@tmpfile stat ","@tmpfile flush ","@tmpfile fsync "]}," Paperclip Attachment extra_options_for":{"type":"method","name":"extra_options_for","children":[],"call":["(send\n  (send nil :convert_options) :[]\n  (lvar :style)) compact join ","(send\n  (send nil :convert_options) :[]\n  (lvar :style)) compact "," convert_options [] "," convert_options ","(lvar :style_options) compact join ","(lvar :style_options) compact ","style_options call "," instance ","style_options respond_to? ","all_options call ","all_options respond_to? ","@options convert_options [] ","@options convert_options ","@options [] [] ","@options [] "," process_options ","(lvar :style_options call ) compact join ","(lvar : convert_options [] ) compact join ","(lvar :@options convert_options [] ) compact join ","(lvar :@options [] [] ) compact join ","(lvar :style_options call ) compact ","(lvar : convert_options [] ) compact ","(lvar :@options convert_options [] ) compact ","(lvar :@options [] [] ) compact ","style_options call  call "," convert_options []  call ","@options convert_options []  call ","@options [] []  call ","style_options call  respond_to? "," convert_options []  respond_to? ","@options convert_options []  respond_to? ","@options [] []  respond_to? ","all_options call  call ","all_options call  respond_to? "]}," Paperclip Attachment logger":{"type":"method","name":"logger","children":[],"call":[" instance logger "," instance "]}," Paperclip Attachment instance_read":{"type":"method","name":"instance_read","children":[],"call":[" instance send "," instance ","attr to_s == ","attr to_s "," instance respond_to? "," name "," instance_variable_get "]}," Paperclip Attachment instance_write":{"type":"method","name":"instance_write","children":[],"call":[" instance send "," instance ","attr to_s == ","attr to_s "," instance respond_to? "," name "," instance_variable_set ","setter to_s chop ","setter to_s "]}," Paperclip Attachment file?":{"type":"method","name":"file?","children":[],"call":[" original_filename blank? ! "," original_filename blank? "," original_filename "," original_filename present? "]}," Paperclip Attachment updated_at":{"type":"method","name":"updated_at","children":[],"call":["time to_i "," instance_read ","time to_f to_i ","time to_f "," instance_read  to_i "," instance_read  to_f to_i "," instance_read  to_f "]}," Paperclip Attachment content_type":{"type":"method","name":"content_type","children":[],"call":[" instance_read "]}," Paperclip Attachment size":{"type":"method","name":"size","children":[],"call":["@queued_for_write [] size ","@queued_for_write [] "," instance_read "]}," Paperclip processor":{"type":"method","name":"processor","children":[],"call":[" raise ","PaperclipError  new ","processor ancestors include? ","processor ancestors ","Paperclip  const_get ","name to_s camelize ","name to_s "," load_processor ","Paperclip  const_defined? ","@known_processors []= ","@known_processors [] ","Paperclip  const_get  ancestors include? ","Paperclip  const_get  ancestors ","name to_s camelize  to_s camelize ","name to_s camelize  to_s "," load_Paperclip  const_get  ","@known_Paperclip  const_get s []= ","@known_Paperclip  const_get s [] "]}," Paperclip Processor make":{"type":"method","name":"make","children":[],"call":[]}," Paperclip Processor initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Paperclip CallbackCompatability InstanceMethods run_callbacks":{"type":"method","name":"run_callbacks","children":[],"call":[" callback "]}," Paperclip CallbackCompatability ClassMethods define_callbacks":{"type":"method","name":"define_callbacks","children":[],"call":[" class_eval ","method to_sym inspect ","method to_sym ","args each "]}," Paperclip CallbackCompatability included":{"type":"method","name":"included","children":[],"call":[]}," Paperclip Attachment callback":{"type":"method","name":"callback","children":[],"call":["result == "," instance run_callbacks "," instance "]}," Paperclip Attachment log":{"type":"method","name":"log","children":[],"call":[" logger info "," logger "," logging? ","Paperclip  log "]}," Paperclip Attachment logging?":{"type":"method","name":"logging?","children":[],"call":["Paperclip  options [] ","Paperclip  options "]}," Paperclip interpolates":{"type":"method","name":"interpolates","children":[],"call":["Paperclip Attachment  interpolations []= ","Paperclip Attachment  interpolations ","Paperclip Interpolations  []= "]}," Paperclip Attachment post_process_styles":{"type":"method","name":"post_process_styles","children":[],"call":["(or-asgn\n  (send\n    (ivar :@errors) :[]\n    (sym :processing))\n  (array)) << ","e message ","@errors [] "," log ","e inspect ","@queued_for_write []= ","Paperclip  processor make ","Paperclip  processor ","args [] inject ","@queued_for_write [] ","args [] "," raise ","RuntimeError  new ","args [] blank? ","@styles each "," name ","style processor_options ","style processors inject ","style processors ","style processors blank? ","style_args include? ","style_args empty? "," styles each "," styles ","@options whiny ","@options styles each ","@options styles "," post_process_style "," process_style? ","(send\n  (send nil :styles) :reject) each ","name == "," styles reject "," styles [] "," styles include? "]}," Paperclip Attachment fire_events":{"type":"method","name":"fire_events","children":[],"call":[" callback == "," callback "," name "]}," Paperclip Attachment solidify_style_definitions":{"type":"method","name":"solidify_style_definitions","children":[],"call":["@styles [] []= ","@styles [] [] call "," instance ","@styles [] [] ","@styles [] ","@styles [] [] respond_to? ","@styles each "]}," Paperclip Shoulda Matchers ValidateAttachmentSizeMatcher higher_than_high?":{"type":"method","name":"higher_than_high?","children":[],"call":[" passes_validation_with_size ! "," passes_validation_with_size ","@high + ","@high == ","1.0 / ","@high nil? "]}," Paperclip Shoulda Matchers ValidateAttachmentSizeMatcher lower_than_high?":{"type":"method","name":"lower_than_high?","children":[],"call":[" passes_validation_with_size ","@high - ","@high == ","1.0 / ","@high nil? "]}," Paperclip Shoulda Matchers ValidateAttachmentSizeMatcher higher_than_low?":{"type":"method","name":"higher_than_low?","children":[],"call":[" passes_validation_with_size ","@low + ","@low nil? "]}," Paperclip Shoulda Matchers ValidateAttachmentSizeMatcher lower_than_low?":{"type":"method","name":"lower_than_low?","children":[],"call":[" passes_validation_with_size ! "," passes_validation_with_size ","@low - ","@low nil? "]}," Paperclip Shoulda Matchers ValidateAttachmentSizeMatcher passes_validation_with_size":{"type":"method","name":"passes_validation_with_size","children":[],"call":["attachment errors [] nil? ","attachment errors [] ","attachment errors ","attachment assign ","@subject new attachment_for ","@subject new "," override_method ","StringIO  new ","subject errors [] blank? ","subject errors [] ","subject errors ","subject valid? ","(lvasgn :subject\n  (send\n    (ivar :@subject) :new)) send assign ","(lvasgn :subject\n  (send\n    (ivar :@subject) :new)) send ","@subject errors [] blank? ","@subject errors [] ","@subject errors ","@subject valid? ","@subject send assign ","@subject send ","@subject send post_processing= ","@subject new attachment_for  errors [] nil? ","@subject new attachment_for  errors [] ","@subject new attachment_for  errors ","@subject new attachment_for  assign ","@subject new @subject new attachment_for _for ","@@subject new  new attachment_for ","@@subject new  new ","@subject new  errors [] blank? ","@subject new  errors [] ","@subject new  errors ","@subject new  valid? ","(lvasgn :@subject new \n  (send\n    (ivar :@@subject new ) :new)) send assign ","(lvasgn :@subject new \n  (send\n    (ivar :@@subject new ) :new)) send ","@@subject new  errors [] blank? ","@@subject new  errors [] ","@@subject new  errors ","@@subject new  valid? ","@@subject new  send assign ","@@subject new  send ","@@subject new  send post_processing= "]}," Paperclip Shoulda Matchers ValidateAttachmentSizeMatcher override_method":{"type":"method","name":"override_method","children":[],"call":[" define_method ","(sclass\n  (lvar :object)\n  (self)) class_eval "]}," Paperclip Shoulda Matchers ValidateAttachmentSizeMatcher description":{"type":"method","name":"description","children":[],"call":[]}," Paperclip Shoulda Matchers ValidateAttachmentSizeMatcher negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":[]}," Paperclip Shoulda Matchers ValidateAttachmentSizeMatcher failure_message":{"type":"method","name":"failure_message","children":[],"call":[]}," Paperclip Shoulda Matchers ValidateAttachmentSizeMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" higher_than_high? "," lower_than_high? "," higher_than_low? "," lower_than_low? ","@subject class ","Class  === ","@subject new ","@subject class == ","@subject class  class ","@subject new  class ","@subject class  new ","@subject new  new ","@subject class  class == ","@subject new  class == "]}," Paperclip Shoulda Matchers ValidateAttachmentSizeMatcher in":{"type":"method","name":"in","children":[],"call":["range last ","range first "]}," Paperclip Shoulda Matchers ValidateAttachmentSizeMatcher greater_than":{"type":"method","name":"greater_than","children":[],"call":[]}," Paperclip Shoulda Matchers ValidateAttachmentSizeMatcher less_than":{"type":"method","name":"less_than","children":[],"call":[]}," Paperclip Shoulda Matchers ValidateAttachmentSizeMatcher initialize":{"type":"method","name":"initialize","children":[],"call":["1.0 / "]}," Paperclip Shoulda Matchers validate_attachment_size":{"type":"method","name":"validate_attachment_size","children":[],"call":["ValidateAttachmentSizeMatcher  new "]}," Paperclip Shoulda Matchers ValidateAttachmentPresenceMatcher no_error_when_valid?":{"type":"method","name":"no_error_when_valid?","children":[],"call":["@attachment errors [] nil? ","@attachment errors [] ","@attachment errors ","@attachment assign ","@subject new send ","@subject new ","StringIO  new ","subject errors [] blank? ","subject errors [] ","subject errors ","subject valid? ","(lvasgn :subject\n  (send\n    (ivar :@subject) :new)) send assign ","(lvasgn :subject\n  (send\n    (ivar :@subject) :new)) send ","@subject errors [] blank? ","@subject errors [] ","@subject errors ","@subject valid? ","@subject send assign ","@subject send ","@subject errors full_messages exclude? ","@subject errors full_messages ","(send\n  (send\n    (ivar :@attachment_name) :to_s) :titleize) join ","I18n  t ","@attachment_name to_s titleize ","@attachment_name to_s ","@subject new send  errors [] nil? ","@subject new send  errors [] ","@subject new send  errors ","@subject new send  assign ","@@subject new  new send ","@@subject new  new ","@subject new  errors [] blank? ","@subject new  errors [] ","@subject new  errors ","@subject new  valid? ","(lvasgn :@subject new \n  (send\n    (ivar :@@subject new ) :new)) send assign ","(lvasgn :@subject new \n  (send\n    (ivar :@@subject new ) :new)) send ","@@subject new  errors [] blank? ","@@subject new  errors [] ","@@subject new  errors ","@@subject new  valid? ","@@subject new  send assign ","@@subject new  send ","@@subject new  errors full_messages exclude? ","@@subject new  errors full_messages ","(send\n  (send\n    (ivar :@subject new send _name) :to_s) :titleize) join ","@subject new send _name to_s titleize ","@subject new send _name to_s "]}," Paperclip Shoulda Matchers ValidateAttachmentPresenceMatcher error_when_not_valid?":{"type":"method","name":"error_when_not_valid?","children":[],"call":["@attachment errors [] nil? ! ","@attachment errors [] nil? ","@attachment errors [] ","@attachment errors ","@attachment assign ","@subject new send ","@subject new ","subject errors [] blank? ! ","subject errors [] blank? ","subject errors [] ","subject errors ","subject valid? ","(lvasgn :subject\n  (send\n    (ivar :@subject) :new)) send assign ","(lvasgn :subject\n  (send\n    (ivar :@subject) :new)) send ","@subject errors [] blank? ! ","@subject errors [] blank? ","@subject errors [] ","@subject errors ","@subject valid? ","@subject send assign ","@subject send ","@subject errors [] present? ","@subject new send  errors [] nil? ! ","@subject new send  errors [] nil? ","@subject new send  errors [] ","@subject new send  errors ","@subject new send  assign ","@@subject new  new send ","@@subject new  new ","@subject new  errors [] blank? ! ","@subject new  errors [] blank? ","@subject new  errors [] ","@subject new  errors ","@subject new  valid? ","(lvasgn :@subject new \n  (send\n    (ivar :@@subject new ) :new)) send assign ","(lvasgn :@subject new \n  (send\n    (ivar :@@subject new ) :new)) send ","@@subject new  errors [] blank? ! ","@@subject new  errors [] blank? ","@@subject new  errors [] ","@@subject new  errors ","@@subject new  valid? ","@@subject new  send assign ","@@subject new  send ","@@subject new  errors [] present? "]}," Paperclip Shoulda Matchers ValidateAttachmentPresenceMatcher description":{"type":"method","name":"description","children":[],"call":[]}," Paperclip Shoulda Matchers ValidateAttachmentPresenceMatcher negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":[]}," Paperclip Shoulda Matchers ValidateAttachmentPresenceMatcher failure_message":{"type":"method","name":"failure_message","children":[],"call":[]}," Paperclip Shoulda Matchers ValidateAttachmentPresenceMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" no_error_when_valid? "," error_when_not_valid? ","@subject class ","Class  === ","subject new ","subject class == ","subject class ","@subject class  class ","subject new  class "]}," Paperclip Shoulda Matchers ValidateAttachmentPresenceMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Paperclip Shoulda Matchers validate_attachment_presence":{"type":"method","name":"validate_attachment_presence","children":[],"call":["ValidateAttachmentPresenceMatcher  new "]}," Paperclip Shoulda Matchers ValidateAttachmentContentTypeMatcher rejected_types_rejected?":{"type":"method","name":"rejected_types_rejected?","children":[],"call":[" allow_types? ! "," allow_types? ","(send\n  (ivar :@rejected_types) :any?) ! "," type_allowed? ","@rejected_types any? ","@missing_rejected_types none? ","@rejected_types select "]}," Paperclip Shoulda Matchers ValidateAttachmentContentTypeMatcher allowed_types_allowed?":{"type":"method","name":"allowed_types_allowed?","children":[],"call":[" allow_types? "," type_allowed? ","@allowed_types all? ","@missing_allowed_types none? ","@allowed_types reject "]}," Paperclip Shoulda Matchers ValidateAttachmentContentTypeMatcher allow_types?":{"type":"method","name":"allow_types?","children":[],"call":["attachment errors [] nil? ","attachment errors [] ","attachment errors ","attachment assign ","@subject new attachment_for ","@subject new ","file content_type= ","StringIO  new ","types all? ","subject errors [] blank? ","subject errors [] ","subject errors ","subject valid? ","(lvasgn :subject\n  (send\n    (ivar :@subject) :new)) attachment_for assign ","(lvasgn :subject\n  (send\n    (ivar :@subject) :new)) attachment_for ","@subject new attachment_for  errors [] nil? ","@subject new attachment_for  errors [] ","@subject new attachment_for  errors ","@subject new attachment_for  assign ","@subject new @subject new attachment_for _for ","@@subject new  new attachment_for ","@@subject new  new ","StringIO  new  content_type= ","@subject new  errors [] blank? ","@subject new  errors [] ","@subject new  errors ","@subject new  valid? ","(lvasgn :subject\n  (send\n    (ivar :@subject) :new)) @subject new attachment_for _for assign ","(lvasgn :@subject new \n  (send\n    (ivar :@@subject new ) :new)) attachment_for assign ","(lvasgn :subject\n  (send\n    (ivar :@subject) :new)) @subject new attachment_for _for ","(lvasgn :@subject new \n  (send\n    (ivar :@@subject new ) :new)) attachment_for "]}," Paperclip Shoulda Matchers ValidateAttachmentContentTypeMatcher description":{"type":"method","name":"description","children":[],"call":[]}," Paperclip Shoulda Matchers ValidateAttachmentContentTypeMatcher negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":["(str \"Content types \") + ","@rejected_types join ","@allowed_types join ","str << ","@rejected_types present? ","@allowed_types present ","@allowed_types present? "," tap "]}," Paperclip Shoulda Matchers ValidateAttachmentContentTypeMatcher failure_message":{"type":"method","name":"failure_message","children":[],"call":["(str \"Content types \") + ","@rejected_types join ","@allowed_types join ","str << ","@rejected_types present? ","@allowed_types present ","@allowed_types present? "," tap ","message << "," rejected_types_and_failures "," accepted_types_and_failures ","(begin\n  (send nil :expected_attachment)) tap "," expected_attachment "," rejected_types_and_failures to_s "," accepted_types_and_failures to_s "]}," Paperclip Shoulda Matchers ValidateAttachmentContentTypeMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" rejected_types_rejected? "," allowed_types_allowed? ","@subject class ","Class  === ","@subject new ","@subject class == ","@subject class  class ","@subject new  class ","@subject class  new ","@subject new  new ","@subject class  class == ","@subject new  class == "]}," Paperclip Shoulda Matchers ValidateAttachmentContentTypeMatcher rejecting":{"type":"method","name":"rejecting","children":[],"call":["types flatten "]}," Paperclip Shoulda Matchers ValidateAttachmentContentTypeMatcher allowing":{"type":"method","name":"allowing","children":[],"call":["types flatten "]}," Paperclip Shoulda Matchers ValidateAttachmentContentTypeMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Paperclip Shoulda Matchers validate_attachment_content_type":{"type":"method","name":"validate_attachment_content_type","children":[],"call":["ValidateAttachmentContentTypeMatcher  new "]}," Paperclip Shoulda Matchers HaveAttachedFileMatcher included?":{"type":"method","name":"included?","children":[],"call":["@subject ancestors include? ","@subject ancestors "]}," Paperclip Shoulda Matchers HaveAttachedFileMatcher has_column?":{"type":"method","name":"has_column?","children":[],"call":["@subject column_names include? ","@subject column_names "]}," Paperclip Shoulda Matchers HaveAttachedFileMatcher responds?":{"type":"method","name":"responds?","children":[],"call":["methods include? ","@subject instance_methods ","@subject instance_methods map ","@subject instance_methods  include? ","@subject instance_methods map  include? ","@subject instance_@subject instance_methods  ","@subject instance_@subject instance_methods map  ","@subject instance_@subject instance_methods  map ","@subject instance_@subject instance_methods map  map "]}," Paperclip Shoulda Matchers HaveAttachedFileMatcher description":{"type":"method","name":"description","children":[],"call":[]}," Paperclip Shoulda Matchers HaveAttachedFileMatcher negative_failure_message":{"type":"method","name":"negative_failure_message","children":[],"call":[]}," Paperclip Shoulda Matchers HaveAttachedFileMatcher failure_message":{"type":"method","name":"failure_message","children":[],"call":[]}," Paperclip Shoulda Matchers HaveAttachedFileMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" included? "," has_column? "," responds? ","@subject class ","Class  === ","@subject class  class "]}," Paperclip Shoulda Matchers HaveAttachedFileMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Paperclip Shoulda Matchers have_attached_file":{"type":"method","name":"have_attached_file","children":[],"call":["HaveAttachedFileMatcher  new "]}," Paperclip Storage S3 find_credentials":{"type":"method","name":"find_credentials","children":[],"call":[" raise ","YAML  load_file ","creds path ","YAML  load ","ERB  new result ","ERB  new ","File  read "]}," Paperclip Storage S3 flush_deletes":{"type":"method","name":"flush_deletes","children":[],"call":["file delete "," s3_bucket key "," s3_bucket "," logger info "," logger ","@queued_for_delete each "," name "," log ","AWS S3 S3Object  delete "," bucket_name "," s3_bucket objects [] delete "," s3_bucket objects [] ","path sub "," s3_bucket objects "," s3_bucket object delete "," s3_bucket object "," s3_bucket key  delete "]}," Paperclip Storage S3 flush_writes":{"type":"method","name":"flush_writes","children":[],"call":[" raise ","key put ","(pair\n  (str \"Content-type\")\n  (send nil :instance_read\n    (sym :content_type))) merge "," instance_read ","key data= "," s3_bucket key "," path "," s3_bucket "," logger info "," logger ","@queued_for_write each "," name "," log ","AWS S3 S3Object  store ","(pair\n  (sym :content_type)\n  (send nil :instance_read\n    (sym :content_type))) merge "," bucket_name "," create_bucket ","(pair\n  (sym :content_type)\n  (send\n    (send\n      (send\n        (lvar :file) :content_type) :to_s) :strip)) merge ","file content_type to_s strip ","file content_type to_s ","file content_type ","@s3_permissions [] "," after_flush_writes "," s3_permissions "," s3_object write "," s3_object ","write_options merge! ","write_options []= ","@s3_metadata empty? ","acl call ","acl respond_to? ","@s3_server_side_encryption blank? ","file rewind ","@s3_metadata merge! ","style_specific_options [] ","style_specific_options has_key? "," merge_s3_headers ","style_specific_options is_a? ","@options [] [] ","@options [] "," styles [] "," styles "," s3_storage_class "," sleep ","(send\n  (int 2) :**\n  (lvar :retries)) * ","2 ** ","retries <= "," s3_object upload_file ","file path "," s3_bucket key  put "," s3_bucket key  data= "," s3_bucket  s3_bucket key  ","acl call  call ","acl call  respond_to? ","@options [] []  [] "," styles []  [] ","style_specific_options has_ s3_bucket key ? ","@options [] []  has_key? "," styles []  has_key? ","@options [] []  is_a? "," styles []  is_a? "," s3_ s3_storage_class  "]}," Paperclip Storage S3 to_file":{"type":"method","name":"to_file","children":[],"call":[" s3_bucket key "," path "," s3_bucket ","@queued_for_write [] ","file rewind ","file write ","AWS S3 S3Object  value "," bucket_name ","Tempfile  new ","file binmode ","File  basename ","File  extname "," path split "," s3_object read "," s3_object ","@queued_for_write [] rewind ","Tempfile  new  rewind ","Tempfile  new  write ","TempTempfile  new   new ","Tempfile  new  binmode ","File  File  basename  ","File  File  extname  "]}," Paperclip Storage S3 s3_protocol":{"type":"method","name":"s3_protocol","children":[],"call":["@s3_protocol call ","@s3_protocol is_a? ","protocol split first + ","protocol split first ","protocol split ","protocol empty? ","@s3_protocol to_s ","@s3_protocol call to_s ","@s3_protocol respond_to? ","protocol to_s ","protocol empty? ! ","protocol call ","protocol respond_to? ","@s3_protocol split first +  call ","@s3_@s3_protocol call  call ","@s3_@s3_protocol to_s  call ","@s3_@s3_protocol call to_s  call ","@s3_protocol call  call ","@s3_protocol split first +  is_a? ","@s3_@s3_protocol call  is_a? ","@s3_@s3_protocol to_s  is_a? ","@s3_@s3_protocol call to_s  is_a? ","@s3_protocol call  is_a? ","protocol split first +  split first + ","@s3_protocol call  split first + ","@s3_protocol to_s  split first + ","@s3_protocol call to_s  split first + ","protocol call  split first + ","protocol split first +  split first ","@s3_protocol call  split first ","@s3_protocol to_s  split first ","@s3_protocol call to_s  split first ","protocol call  split first ","protocol split first +  split ","@s3_protocol call  split ","@s3_protocol to_s  split ","@s3_protocol call to_s  split ","protocol call  split ","protocol split first +  empty? ","@s3_protocol call  empty? ","@s3_protocol to_s  empty? ","@s3_protocol call to_s  empty? ","protocol call  empty? ","@s3_protocol split first +  to_s ","@s3_@s3_protocol call  to_s ","@s3_@s3_protocol to_s  to_s ","@s3_@s3_protocol call to_s  to_s ","@s3_protocol call  to_s ","@s3_protocol split first +  call to_s ","@s3_@s3_protocol call  call to_s ","@s3_@s3_protocol to_s  call to_s ","@s3_@s3_protocol call to_s  call to_s ","@s3_protocol call  call to_s ","@s3_protocol split first +  respond_to? ","@s3_@s3_protocol call  respond_to? ","@s3_@s3_protocol to_s  respond_to? ","@s3_@s3_protocol call to_s  respond_to? ","@s3_protocol call  respond_to? ","protocol split first +  to_s ","@s3_protocol to_s  to_s ","@s3_protocol call to_s  to_s ","protocol call  to_s ","protocol split first +  empty? ! ","@s3_protocol call  empty? ! ","@s3_protocol to_s  empty? ! ","@s3_protocol call to_s  empty? ! ","protocol call  empty? ! ","protocol split first +  call ","@s3_protocol to_s  call ","@s3_protocol call to_s  call ","protocol call  call ","protocol split first +  respond_to? ","@s3_protocol to_s  respond_to? ","@s3_protocol call to_s  respond_to? ","protocol call  respond_to? "]}," Paperclip Storage S3 exists?":{"type":"method","name":"exists?","children":[],"call":[" s3_bucket key "," path "," s3_bucket ","AWS S3 S3Object  exists? "," bucket_name "," original_filename "," s3_object exists? "," s3_object "]}," Paperclip Storage S3 parse_credentials":{"type":"method","name":"parse_credentials","children":[],"call":["(or\n  (send\n    (lvar :creds) :[]\n    (send\n      (const nil :ENV) :[]\n      (str \"RAILS_ENV\")))\n  (lvar :creds)) symbolize_keys ","creds [] ","ENV  [] "," find_credentials stringify_keys "," find_credentials ","(or\n  (send\n    (lvar :creds) :[]\n    (const nil :RAILS_ENV))\n  (lvar :creds)) symbolize_keys ","(or\n  (send\n    (lvar :creds) :[]\n    (send\n      (const nil :Rails) :env))\n  (lvar :creds)) symbolize_keys ","Rails  env ","(or\n  (send\n    (lvar :creds) :[]\n    (lvar :env))\n  (lvar :creds)) symbolize_keys ","Object  const_defined? ","creds call ","creds respond_to? ","(or\n  (send\n    (lvar :creds) :[]\n    (send\n      (const nil :RailsEnvironment) :get))\n  (lvar :creds)) symbolize_keys ","RailsEnvironment  get ","(or\n  (send\n    (lvar : find_credentials stringify_keys ) :[]\n    (send\n      (const nil :ENV) :[]\n      (str \"RAILS_ENV\")))\n  (lvar : find_credentials stringify_keys )) symbolize_keys ","(or\n  (send\n    (lvar :creds call ) :[]\n    (send\n      (const nil :ENV) :[]\n      (str \"RAILS_ENV\")))\n  (lvar :creds call )) symbolize_keys "," find_credentials stringify_keys  [] ","creds call  [] ","(or\n  (send\n    (lvar : find_credentials stringify_keys ) :[]\n    (const nil :RAILS_ENV))\n  (lvar : find_credentials stringify_keys )) symbolize_keys ","(or\n  (send\n    (lvar :creds call ) :[]\n    (const nil :RAILS_ENV))\n  (lvar :creds call )) symbolize_keys ","(or\n  (send\n    (lvar : find_credentials stringify_keys ) :[]\n    (send\n      (const nil :Rails) :env))\n  (lvar : find_credentials stringify_keys )) symbolize_keys ","(or\n  (send\n    (lvar :creds call ) :[]\n    (send\n      (const nil :Rails) :env))\n  (lvar :creds call )) symbolize_keys ","(or\n  (send\n    (lvar :creds) :[]\n    (send\n      (const nil :Rails) :Rails  env ))\n  (lvar :creds)) symbolize_keys ","Rails  Rails  env  ","(or\n  (send\n    (lvar : find_credentials stringify_keys ) :[]\n    (lvar :env))\n  (lvar : find_credentials stringify_keys )) symbolize_keys ","(or\n  (send\n    (lvar :creds call ) :[]\n    (lvar :env))\n  (lvar :creds call )) symbolize_keys ","(or\n  (send\n    (lvar :creds) :[]\n    (lvar :Rails  env ))\n  (lvar :creds)) symbolize_keys "," find_credentials stringify_keys  call ","creds call  call "," find_credentials stringify_keys  respond_to? ","creds call  respond_to? ","(or\n  (send\n    (lvar : find_credentials stringify_keys ) :[]\n    (send\n      (const nil :RailsEnvironment) :get))\n  (lvar : find_credentials stringify_keys )) symbolize_keys ","(or\n  (send\n    (lvar :creds call ) :[]\n    (send\n      (const nil :RailsEnvironment) :get))\n  (lvar :creds call )) symbolize_keys "]}," Paperclip Storage S3 bucket_name":{"type":"method","name":"bucket_name","children":[],"call":["@bucket call ","@bucket is_a? "," s3_credentials [] "," s3_credentials ","@options bucket "," raise ","@options [] ","@bucket respond_to? ","@bucket call  call ","@bucket call  is_a? ","@bucket call  respond_to? "]}," Paperclip Storage S3 s3_bucket":{"type":"method","name":"s3_bucket","children":[],"call":[" s3 bucket "," s3 "," s3_interface buckets [] "," bucket_name "," s3_interface buckets "," s3_interface "," s3_interface bucket "]}," Paperclip Storage S3 s3":{"type":"method","name":"s3","children":[],"call":["RightAws S3  new ","@s3_credentials [] "]}," Paperclip Storage S3 extended":{"type":"method","name":"extended","children":[],"call":[]}," Paperclip Storage Filesystem flush_deletes":{"type":"method","name":"flush_deletes","children":[],"call":[" logger info ","e class "," logger ","FileUtils  rmdir ","File  dirname ","FileUtils  rm ","File  exist? ","@queued_for_delete each "," name "," log ","File  exists? "]}," Paperclip Storage Filesystem flush_writes":{"type":"method","name":"flush_writes","children":[],"call":["FileUtils  chmod "," path ","FileUtils  mv ","file path "," logger info "," logger ","FileUtils  mkdir_p ","File  dirname ","file close ","@queued_for_write each "," name "," log ","438 & ","File  umask ~ ","File  umask ","FileUtils  rm ","FileUtils  cp "," after_flush_writes ","new_file write ","file read ","16 * ","File  open ","file rewind ","@options [] & ","73 ~ ","@options [] ","@options [] == "," move_file "]}," Paperclip Storage Filesystem to_file":{"type":"method","name":"to_file","children":[],"call":["File  new "," path "," exists? ","@queued_for_write [] ","@queued_for_write [] rewind "]}," Paperclip Storage Filesystem exists?":{"type":"method","name":"exists?","children":[],"call":["File  exist? "," path "," original_filename "]}," Paperclip Storage Filesystem extended":{"type":"method","name":"extended","children":[],"call":[]}," Paperclip Storage S3 s3_host_alias":{"type":"method","name":"s3_host_alias","children":[],"call":["@s3_host_alias call ","@s3_host_alias is_a? ","@options s3_host_alias ","@options [] ","@s3_host_alias respond_to? ","@s3_host_alias call  call ","@options s3_host_alias  call ","@options []  call ","@s3_host_alias call  is_a? ","@options s3_host_alias  is_a? ","@options []  is_a? ","@s3_host_alias call  respond_to? ","@options s3_host_alias  respond_to? ","@options []  respond_to? "]}," Paperclip Attachment destroy":{"type":"method","name":"destroy","children":[],"call":[" save "," clear ","@options preserve_files ","@options [] "]}," Paperclip Attachment clear":{"type":"method","name":"clear","children":[],"call":[" queue_existing_for_delete "," queue_all_for_delete "," queue_some_for_delete ","styles_to_clear any? "]}," Paperclip logging?":{"type":"method","name":"logging?","children":[],"call":[" options [] "," options "]}," Paperclip logger":{"type":"method","name":"logger","children":[],"call":["ActiveRecord Base  logger ","Rails  logger ","Logger  new "," options [] "," options "]}," Paperclip log":{"type":"method","name":"log","children":[],"call":[" logger info "," logger "," logging? "]}," Paperclip Interpolations style":{"type":"method","name":"style","children":[],"call":["attachment default_style "]}," Paperclip Interpolations attachment":{"type":"method","name":"attachment","children":[],"call":["attachment name to_s downcase pluralize ","attachment name to_s downcase ","attachment name to_s ","attachment name "," plural_cache pluralize "," plural_cache "," plural_cache pluralize_symbol "]}," Paperclip Interpolations id_partition":{"type":"method","name":"id_partition","children":[],"call":["(send\n  (str \"%09d\") :%\n  (send\n    (send\n      (lvar :attachment) :instance) :id)) scan join ","(send\n  (str \"%09d\") :%\n  (send\n    (send\n      (lvar :attachment) :instance) :id)) scan ","%09d % ","attachment instance id ","attachment instance ","id scan first join ","id scan first ","id scan ","(send\n  (str \"%09d\") :%\n  (lvar :id)) scan join ","(send\n  (str \"%09d\") :%\n  (lvar :id)) scan ","(lvasgn :id\n  (send\n    (send\n      (lvar :attachment) :instance) :id)) is_a? ","(send\n  (str \"%9.9s\") :%\n  (lvar :id)) tr scan join ","(send\n  (str \"%9.9s\") :%\n  (lvar :id)) tr scan ","(send\n  (str \"%9.9s\") :%\n  (lvar :id)) tr ","%9.9s % ","/ freeze ","(send\n  (send\n    (str \"%09d\") :freeze) :%\n  (lvar :id)) scan join ","(send\n  (send\n    (str \"%09d\") :freeze) :%\n  (lvar :id)) scan ","%09d freeze % ","%09d freeze ","(send\n  (send\n    (str \"%012d\") :freeze) :%\n  (lvar :id)) scan join ","(send\n  (send\n    (str \"%012d\") :freeze) :%\n  (lvar :id)) scan ","%012d freeze % ","%012d freeze ","id < ","(send\n  (str \"%09d\") :%\n  (send\n    (send\n      (lvar :attachment) :instance) :attachment instance id )) scan join ","(send\n  (str \"%09d\") :%\n  (send\n    (send\n      (lvar :attachment) :instance) :attachment instance id )) scan ","attachment instance attachment instance id  ","attachment instance id  scan first join ","attachment instance id  scan first ","attachment instance id  scan ","(send\n  (str \"%09d\") :%\n  (lvar :attachment instance id )) scan join ","(send\n  (str \"%09d\") :%\n  (lvar :attachment instance id )) scan ","(lvasgn :attachment instance id \n  (send\n    (send\n      (lvar :attachment) :instance) :attachment instance id )) is_a? ","(send\n  (str \"%9.9s\") :%\n  (lvar :attachment instance id )) tr scan join ","(send\n  (str \"%9.9s\") :%\n  (lvar :attachment instance id )) tr scan ","(send\n  (str \"%9.9s\") :%\n  (lvar :attachment instance id )) tr ","(send\n  (send\n    (str \"%09d\") :freeze) :%\n  (lvar :attachment instance id )) scan join ","(send\n  (send\n    (str \"%09d\") :freeze) :%\n  (lvar :attachment instance id )) scan ","(send\n  (send\n    (str \"%012d\") :freeze) :%\n  (lvar :attachment instance id )) scan join ","(send\n  (send\n    (str \"%012d\") :freeze) :%\n  (lvar :attachment instance id )) scan ","attachment instance id  < "]}," Paperclip Interpolations id":{"type":"method","name":"id","children":[],"call":["attachment instance id ","attachment instance "]}," Paperclip Interpolations extension":{"type":"method","name":"extension","children":[],"call":["File  extname gsub ","File  extname ","attachment original_filename ","style [] ","attachment styles [] ","attachment styles ","style_name to_sym ","style_name to_s to_sym ","style_name to_s ","File  extname sub "," freeze ","attachment styles []  [] ","attachment attachment styles [] s [] ","attachment attachment styles [] s ","attachment styles [] _name to_sym ","attachment styles [] _name to_s to_sym ","attachment styles [] _name to_s "]}," Paperclip Interpolations basename":{"type":"method","name":"basename","children":[],"call":["attachment original_filename gsub ","File  extname ","attachment original_filename ","Regexp  escape ","File  basename ",".* freeze "]}," Paperclip Interpolations class":{"type":"method","name":"class","children":[],"call":["attachment instance class to_s underscore pluralize ","attachment instance class to_s underscore ","attachment instance class to_s ","attachment instance class ","attachment instance ","style nil? ","attachment nil? ","style_name nil? "," plural_cache underscore_and_pluralize "," plural_cache "," plural_cache underscore_and_pluralize_class "]}," Paperclip Interpolations rails_env":{"type":"method","name":"rails_env","children":[],"call":["Rails  env "]}," Paperclip Interpolations rails_root":{"type":"method","name":"rails_root","children":[],"call":["Rails  root "]}," Paperclip Interpolations timestamp":{"type":"method","name":"timestamp","children":[],"call":["attachment instance_read to_s ","attachment instance_read ","attachment instance_read in_time_zone to_s ","attachment instance_read in_time_zone ","attachment time_zone "]}," Paperclip Interpolations url":{"type":"method","name":"url","children":[],"call":["attachment url "," raise ","attachment options [] include? ","attachment options [] ","attachment options ","b index "," caller any? "," caller ","45 + "]}," Paperclip Interpolations filename":{"type":"method","name":"filename","children":[],"call":[" extension "," basename ","(send nil :basename\n  (lvar :attachment)\n  (lvar :style_name)) reject join ","(send nil :basename\n  (lvar :attachment)\n  (lvar :style_name)) reject ","(send nil :basename\n  (lvar :attachment)\n  (lvar :style_name)) delete_if join ",". freeze ","(send nil :basename\n  (lvar :attachment)\n  (lvar :style_name)) delete_if "]}," Paperclip Interpolations interpolate":{"type":"method","name":"interpolate","children":[],"call":[]}," Paperclip Interpolations all":{"type":"method","name":"all","children":[],"call":[]}," Paperclip Interpolations []":{"type":"method","name":"[]","children":[],"call":[]}," Paperclip Interpolations []=":{"type":"method","name":"[]=","children":[],"call":[]}," Paperclip Attachment validate_content_type":{"type":"method","name":"validate_content_type","children":[],"call":["options [] ","t === ","content_type nil? ","valid_types any? "," instance_read ","valid_types blank? "," original_filename blank? "," original_filename ","(send\n  (lvar :options) :[]\n  (sym :content_type)) flatten "," instance_read  nil? ","(send\n  (lvar :options) :[]\n  (sym :content_type)) flatten  any? ","(send\n  (lvar :options) :[]\n  (sym :content_type)) flatten  blank? ","(send\n  (lvar :options) :[]\n  (sym : instance_read )) flatten "]}," Paperclip Attachment validate_presence":{"type":"method","name":"validate_presence","children":[],"call":["options [] "," file? "]}," Paperclip Attachment validate_size":{"type":"method","name":"validate_size","children":[],"call":["options [] gsub gsub ","options [] to_s ","options [] ","options [] gsub ","options [] include? ! ","options [] include? "," size to_i "," size "," file? "]}," Paperclip Attachment check_guard":{"type":"method","name":"check_guard","children":[],"call":[" instance send ","guard to_s "," instance ","guard blank? ! ","guard blank? ","guard call ","guard respond_to? "]}," Paperclip Attachment allow_validation?":{"type":"method","name":"allow_validation?","children":[],"call":[" check_guard ! "," check_guard ","options [] ","options [] nil? "]}," Paperclip Attachment ensure_required_accessors!":{"type":"method","name":"ensure_required_accessors!","children":[],"call":[" raise ","PaperclipError  new "," name ","@instance class ","@instance respond_to? ","(str \"file_name\") each ","Paperclip Error  new "]}," Paperclip Glue included":{"type":"method","name":"included","children":[],"call":[]}," Paperclip PaperclipCommandLineError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Paperclip each_instance_with_attachment":{"type":"method","name":"each_instance_with_attachment","children":[],"call":["instance send ","Object  const_get all each ","Object  const_get all ","Object  const_get "," class_for all each "," class_for all "," class_for "," class_for find each "," class_for find "," class_for send "," class_for respond_to? "]}," Paperclip configure":{"type":"method","name":"configure","children":[],"call":[" block_given? "]}," StringIO fingerprint":{"type":"method","name":"fingerprint","children":[],"call":["Digest MD5  hexdigest "," string "]}," Paperclip Style []=":{"type":"method","name":"[]=","children":[],"call":["@other_args []= "," send ","(begin\n  (lvar :key)) intern ","(sym :name) include? "]}," Paperclip Style []":{"type":"method","name":"[]","children":[],"call":["@other_args [] "," send ","(sym :name) include? "]}," Paperclip Style processor_options":{"type":"method","name":"processor_options","children":[],"call":["args []= "," send ","(sym :processors) each ","v call "," attachment ","v respond_to? ","@other_args each "," name "," send s []= ","@other_ send s each "]}," Paperclip Style geometry":{"type":"method","name":"geometry","children":[],"call":["@geometry call "," attachment instance "," attachment ","@geometry respond_to? "]}," Paperclip Style convert_options":{"type":"method","name":"convert_options","children":[],"call":[" attachment send "," name "," attachment ","@convert_options call "," attachment instance ","@convert_options respond_to? "]}," Paperclip Style whiny?":{"type":"method","name":"whiny?","children":[],"call":[" whiny ! ! "," whiny ! "," whiny "]}," Paperclip Style whiny":{"type":"method","name":"whiny","children":[],"call":[" attachment whiny "," attachment "," attachment options whiny "," attachment options "]}," Paperclip Style processors":{"type":"method","name":"processors","children":[],"call":[" attachment processors "," attachment ","@processors call "," attachment instance ","@processors respond_to? "," attachment options processors "," attachment options "]}," Paperclip Style initialize":{"type":"method","name":"initialize","children":[],"call":["@format blank? ","(lvar :definition) flatten [] ","(lvar :definition) flatten ","definition delete ","definition is_a? "," default_format ","definition delete  blank? "," default_format  blank? "]}," Paperclip Storage S3 create_bucket":{"type":"method","name":"create_bucket","children":[],"call":["AWS S3 Bucket  create "," bucket_name "," s3_interface buckets create "," s3_interface buckets "," s3_interface "," s3_interface bucket create "," s3_interface bucket "]}," Paperclip Storage S3 expiring_url":{"type":"method","name":"expiring_url","children":[],"call":["AWS S3 S3Object  url_for "," bucket_name "," path "," s3_protocol == "," s3_protocol "," s3_object url_for to_s "," s3_object url_for "," use_secure_protocol? "," s3_object ","base_options merge "," s3_url_options "," url "," s3_object presigned_url to_s "," s3_object presigned_url "]}," Paperclip Storage Fog directory":{"type":"method","name":"directory","children":[],"call":[" connection directories create "," connection directories "," connection "," connection directories get "," connection directories new ","@options fog_directory ","@options [] ","@options [] call ","@options [] respond_to? "," directory_name "," connection @options [] ectories create "," connection @options [] call ectories create "," connection @options [] ectories "," connection @options [] call ectories "," connection @options [] ectories get "," connection @options [] call ectories get "," connection @options [] ectories new "," connection @options [] call ectories new ","@options fog_@options [] ectory ","@options fog_@options [] call ectory "," @options [] ectory_name "," @options [] call ectory_name "]}," Paperclip Storage Fog connection":{"type":"method","name":"connection","children":[],"call":[" Fog Storage  new "," fog_credentials "]}," Paperclip Storage Fog public_url":{"type":"method","name":"public_url","children":[],"call":[" directory files new public_url "," directory files new "," path "," directory files "," directory ","@fog_host % "," path hash % "," path hash ","@fog_host =~ ","@options fog_host ","@options fog_host % ","@options fog_host =~ ","@options [] ","@options [] to_s =~ ","@options [] to_s "," fog_credentials [] == "," fog_credentials [] "," fog_credentials ","@options [] % ","@options [] =~ ","@options [] call ","@options [] respond_to? "," host_name_for_directory "," dynamic_fog_host_for_style "," scheme ","@fog_@fog_host %  % ","@fog_@options fog_host  % ","@fog_@options fog_host %  % ","@fog_@options []  % ","@fog_@options [] %  % ","@fog_@options [] call  % ","@fog_@fog_host %  =~ ","@fog_@options fog_host  =~ ","@fog_@options fog_host %  =~ ","@fog_@options []  =~ ","@fog_@options [] %  =~ ","@fog_@options [] call  =~ ","@options fog_@fog_host %  ","@options fog_@options fog_host  ","@options fog_@options fog_host %  ","@options fog_@options []  ","@options fog_@options [] %  ","@options fog_@options [] call  ","@options fog_@fog_host %  % ","@options fog_@options fog_host  % ","@options fog_@options fog_host %  % ","@options fog_@options []  % ","@options fog_@options [] %  % ","@options fog_@options [] call  % ","@options fog_@fog_host %  =~ ","@options fog_@options fog_host  =~ ","@options fog_@options fog_host %  =~ ","@options fog_@options []  =~ ","@options fog_@options [] %  =~ ","@options fog_@options [] call  =~ "," @fog_host % _name_for_directory "," @options fog_host _name_for_directory "," @options fog_host % _name_for_directory "," @options [] _name_for_directory "," @options [] % _name_for_directory "," @options [] call _name_for_directory "," dynamic_fog_@fog_host % _for_style "," dynamic_fog_@options fog_host _for_style "," dynamic_fog_@options fog_host % _for_style "," dynamic_fog_@options [] _for_style "," dynamic_fog_@options [] % _for_style "," dynamic_fog_@options [] call _for_style "]}," Paperclip Storage Fog to_file":{"type":"method","name":"to_file","children":[],"call":["file rewind ","file write ","file binmode ","Tempfile  new ","File  basename ","File  extname "," path "," directory files get body "," directory files get "," directory files "," directory ","@queued_for_write [] ","@queued_for_write [] rewind ","Tempfile  new  rewind ","Tempfile  new  write ","Tempfile  new  binmode ","TempTempfile  new   new ","File  File  basename  ","File  File  extname  "," directory Tempfile  new s get body "," directory files get  directory files get body  "," directory Tempfile  new s get "," directory Tempfile  new s "]}," Paperclip Storage Fog flush_deletes":{"type":"method","name":"flush_deletes","children":[],"call":[" directory files new destroy "," directory files new "," directory files "," directory "," log "]}," Paperclip Storage Fog flush_writes":{"type":"method","name":"flush_writes","children":[],"call":[" directory files create "," path "," directory files "," directory "," log "," directory save "," raise ","@fog_file merge "," after_flush_writes "," fog_file merge "," fog_public "," fog_file ","file content_type to_s strip ","file content_type to_s ","file content_type ","file rewind ","attributes merge! ","@options [] "," fog_file merge  merge! "]}," Paperclip Storage Fog exists?":{"type":"method","name":"exists?","children":[],"call":[" directory files head ! ! "," directory files head ! "," directory files head "," path "," directory files "," directory "," original_filename "]}," Paperclip Storage Fog extended":{"type":"method","name":"extended","children":[],"call":[]}," Paperclip Railtie insert":{"type":"method","name":"insert","children":[],"call":[]}," Paperclip Interpolations hash":{"type":"method","name":"hash","children":[],"call":["attachment hash ","attachment hash_key "]}," Paperclip Interpolations fingerprint":{"type":"method","name":"fingerprint","children":[],"call":["attachment fingerprint "]}," Paperclip Interpolations updated_at":{"type":"method","name":"updated_at","children":[],"call":["attachment updated_at "]}," Paperclip CommandLine unix?":{"type":"method","name":"unix?","children":[],"call":[]}," Paperclip CommandLine bit_bucket":{"type":"method","name":"bit_bucket","children":[],"call":[" class unix? "," class "]}," Paperclip CommandLine shell_quote":{"type":"method","name":"shell_quote","children":[],"call":["(send\n  (send\n    (lvar :string) :split\n    (str \"'\")) :map) join ","string split map ","string split "," class unix? "," class ","string blank? ","string nil? "]}," Paperclip CommandLine interpolation":{"type":"method","name":"interpolation","children":[],"call":[" shell_quote ","vars [] ","key to_sym ","vars key? "]}," Paperclip CommandLine invalid_variables":{"type":"method","name":"invalid_variables","children":[],"call":[]}," Paperclip CommandLine interpolate":{"type":"method","name":"interpolate","children":[],"call":[" interpolation "," raise "," invalid_variables include? "," invalid_variables ","key [] ","key [] == ","match [] ","pattern gsub "," shell_quote ","vars [] ","key to_sym ","key []  [] ","match []  [] ","key []  [] == ","match []  [] == ","key []  to_sym ","match []  to_sym "]}," Paperclip CommandLine full_path":{"type":"method","name":"full_path","children":[],"call":["(send\n  (send\n    (self) :class) :path) compact join ","(send\n  (send\n    (self) :class) :path) compact "," class path "," class "]}," Paperclip CommandLine run":{"type":"method","name":"run","children":[],"call":[" raise ","@expected_outcodes join ","$? exitstatus "," command ","@expected_outcodes include? ","$? exitstatus == "," class send "," class ","Paperclip  log "]}," Paperclip CommandLine command":{"type":"method","name":"command","children":[],"call":["cmd join ","cmd << "," bit_bucket "," interpolate "," full_path "]}," Paperclip CommandLine initialize":{"type":"method","name":"initialize","children":[],"call":["@options delete ","Paperclip  options [] ","Paperclip  options ","@options has_key? ","options dup ","params dup ","binary dup ","options dup  delete ","options dup  has_key? "]}," Paperclip CallbackCompatability Rails3 Running run_paperclip_callbacks":{"type":"method","name":"run_paperclip_callbacks","children":[],"call":[" run_callbacks "]}," Paperclip CallbackCompatability Rails3 Defining define_paperclip_callbacks":{"type":"method","name":"define_paperclip_callbacks","children":[],"call":[" eval ","callbacks each "," define_callbacks ","(lvar :callbacks) flatten "]}," Paperclip CallbackCompatability Rails3 included":{"type":"method","name":"included","children":[],"call":[]}," Paperclip CallbackCompatability Rails21 Running run_paperclip_callbacks":{"type":"method","name":"run_paperclip_callbacks","children":[],"call":["result == "," run_callbacks ","blk call ","(send nil :run_callbacks\n  (dsym\n    (str \"before_\")\n    (begin\n      (lvar :callback)))) != "]}," Paperclip CallbackCompatability Rails21 Defining define_paperclip_callbacks":{"type":"method","name":"define_paperclip_callbacks","children":[],"call":[" define_callbacks ","args each "]}," Paperclip CallbackCompatability Rails21 included":{"type":"method","name":"included","children":[],"call":[]}," Paperclip Attachment generate_fingerprint":{"type":"method","name":"generate_fingerprint","children":[],"call":["Digest MD5  hexdigest ","source rewind ","source respond_to? ","source read ","Digest MD5  file to_s ","Digest MD5  file ","source path ","source path blank? ! ","source path blank? "]}," Paperclip Attachment hash":{"type":"method","name":"hash","children":[],"call":["OpenSSL HMAC  hexdigest ","OpenSSL Digest  const_get new ","OpenSSL Digest  const_get "," interpolate "," require "," raise ","@options hash_secret ","@options hash_digest ","@options hash_data ","@options hash_ interpolate  "]}," Paperclip Attachment time_zone":{"type":"method","name":"time_zone","children":[],"call":["Time  zone ","Time  zone_default ","@options use_default_time_zone ","@options [] "]}," Paperclip Attachment fingerprint":{"type":"method","name":"fingerprint","children":[],"call":[" generate_fingerprint ","@queued_for_write [] "," instance_read ","@queued_for_write [] fingerprint ","@instance respond_to? ","(begin\n  (send nil :name)) to_sym "," name "]}," Paperclip Attachment processors":{"type":"method","name":"processors","children":[],"call":["@processors call "," instance ","@processors respond_to? ","processing_option call ","processing_option respond_to? ","@options [] ","@options []  call ","@options []  respond_to? "]}," Paperclip Attachment styles":{"type":"method","name":"styles","children":[],"call":["@normalized_styles []= ","Paperclip Style  new ","args dup ","(if\n  (send\n    (ivar :@styles) :respond_to?\n    (sym :call))\n  (send\n    (ivar :@styles) :call\n    (self))\n  (ivar :@styles)) each ","@styles call ","@styles respond_to? ","@normalized_styles ! ","ActiveSupport OrderedHash  new ","@options styles ","(if\n  (send\n    (lvar :styling_option) :respond_to?\n    (sym :call))\n  (send\n    (lvar :styling_option) :call\n    (self))\n  (lvar :styling_option)) each ","styling_option call ","styling_option respond_to? ","@options [] ","options dup ","name to_sym ","@normalized_styles each_pair ","styles dup ","styles call ","styles respond_to? ","@normalized_styles nil? ","@options [] respond_to? ","styles each_pair ","ActiveSupport OrderedHash  new  []= ","styles dup  []= ","@normalized_styles call  []= ","@normalized_@options []  []= ","(if\n  (send\n    (ivar :@styles call ) :respond_to?\n    (sym :call))\n  (send\n    (ivar :@styles call ) :call\n    (self))\n  (ivar :@styles call )) each ","(if\n  (send\n    (ivar :@@options [] ) :respond_to?\n    (sym :call))\n  (send\n    (ivar :@@options [] ) :call\n    (self))\n  (ivar :@@options [] )) each ","@styles call  call ","@@options []  call ","@styles call  respond_to? ","@@options []  respond_to? ","ActiveSupport OrderedHash  new  ! ","styles dup  ! ","@normalized_styles call  ! ","@normalized_@options []  ! ","@options styles call  ","@options @options []  ","(if\n  (send\n    (lvar :@options [] ) :respond_to?\n    (sym :call))\n  (send\n    (lvar :@options [] ) :call\n    (self))\n  (lvar :@options [] )) each ","@options []  call ","@options []  respond_to? ","ActiveSupport OrderedHash  new  each_pair ","styles dup  each_pair ","@normalized_styles call  each_pair ","@normalized_@options []  each_pair ","styles call  dup ","@options []  dup ","styles call  call ","styles call  respond_to? ","ActiveSupport OrderedHash  new  nil? ","styles dup  nil? ","@normalized_styles call  nil? ","@normalized_@options []  nil? ","styles call  each_pair ","@options []  each_pair "]}," PaperclipGenerator migration_class_name":{"type":"method","name":"migration_class_name","children":[],"call":[" migration_name camelize "," migration_name "]}," PaperclipGenerator migration_file_name":{"type":"method","name":"migration_file_name","children":[],"call":[" migration_name "]}," PaperclipGenerator migration_name":{"type":"method","name":"migration_name","children":[],"call":[" name underscore "," name "," attachment_names join "," attachment_names "," name underscore pluralize "]}," PaperclipGenerator generate_migration":{"type":"method","name":"generate_migration","children":[],"call":[" migration_template "," migration_file_name "," migration_version "]}," PaperclipGenerator source_root":{"type":"method","name":"source_root","children":[],"call":[]}," Paperclip class_for":{"type":"method","name":"class_for","children":[],"call":[" raise ","e message =~ ","e message ","klass const_missing ","klass const_get ","klass const_defined? ","class_name split inject ","class_name split ","Module  method arity == ","Module  method arity ","Module  method "]}," Paperclip load_processor":{"type":"method","name":"load_processor","children":[],"call":[" require ","File  expand_path ","Rails  root join ","name underscore ","Rails  root "]}," Paperclip Thumbnail animated?":{"type":"method","name":"animated?","children":[],"call":["@format blank? ","ANIMATED_FORMATS  include? ","@format to_s ","@current_format [] "," identified_as_animated? "]}," Paperclip Interpolations param":{"type":"method","name":"param","children":[],"call":["attachment instance to_param ","attachment instance "]}," Paperclip Upfile type_from_file_command":{"type":"method","name":"type_from_file_command","children":[],"call":["mime_type match ","Paperclip  run split last strip ","Paperclip  run split last ","Paperclip  run split ","Paperclip  run "," path ","(rescue\n  (send\n    (send\n      (send\n        (self) :original_filename) :match\n      (regexp\n        (str \"\\\\.(\\\\w+)$\")\n        (regopt))) :[]\n    (int 1))\n  (resbody nil nil\n    (str \"octet-stream\")) nil) downcase "," original_filename match [] "," original_filename match "," original_filename ","Paperclip  run split [] ","mime_(rescue\n  (send\n    (send\n      (send\n        (self) :original_filename) :match\n      (regexp\n        (str \"\\.(\\w+)$\")\n        (regopt))) :[]\n    (int 1))\n  (resbody nil nil\n    (str \"octet-stream\")) nil) downcase  match "]}," Paperclip Upfile iterate_over_array_to_find_best_option":{"type":"method","name":"iterate_over_array_to_find_best_option","children":[],"call":["(send\n  (lvar :types) :reject) first ","type content_type match ","type content_type ","types reject "]}," Paperclip Storage S3 set_permissions":{"type":"method","name":"set_permissions","children":[],"call":["permissions []= ","permissions [] ","permissions is_a? ","permissions merge ","permissions respond_to? "]}," Paperclip Storage S3 s3_host_name":{"type":"method","name":"s3_host_name","children":[],"call":[" s3_credentials [] "," s3_credentials ","@options s3_host_name ","@options [] ","host_name call ","host_name is_a? ","s3.amazonaws.com freeze ","@options s3_host_name call  ","@options s3_@options []  ","host_name call  call ","@options []  call ","host_name call  is_a? ","@options []  is_a? "]}," Paperclip Shoulda Matchers ValidateAttachmentContentTypeMatcher type_allowed?":{"type":"method","name":"type_allowed?","children":[],"call":["subject errors [] blank? ","subject errors [] ","subject errors ","subject valid? ","(lvasgn :subject\n  (send\n    (ivar :@subject) :new)) attachment_for assign ","(lvasgn :subject\n  (send\n    (ivar :@subject) :new)) attachment_for ","@subject new ","file content_type= ","StringIO  new ","@subject errors [] blank? ","@subject errors [] ","@subject errors ","@subject valid? ","@subject attachment_for assign ","@subject attachment_for ","Paperclip  io_adapters for ","Paperclip  io_adapters ","@subject send ","@subject new  errors [] blank? ","@subject new  errors [] ","@subject new  errors ","@subject new  valid? ","(lvasgn :@subject new \n  (send\n    (ivar :@@subject new ) :new)) attachment_for assign ","(lvasgn :@subject new \n  (send\n    (ivar :@@subject new ) :new)) attachment_for ","@@subject new  new ","StringIO  new  content_type= ","Paperclip  io_adapters for  content_type= ","@@subject new  errors [] blank? ","@@subject new  errors [] ","@@subject new  errors ","@@subject new  valid? ","@@subject new  attachment_for assign ","@@subject new  attachment_for ","@@subject new  send "]}," Paperclip quote_command_options":{"type":"method","name":"quote_command_options","children":[],"call":["(send\n  (send\n    (lvar :option) :split\n    (str \"'\")) :map) join ","option split map ","option split ","options map "]}," Paperclip Upfile fingerprint":{"type":"method","name":"fingerprint","children":[],"call":["Digest MD5  hexdigest "," read "," rewind "]}," Paperclip InstanceMethods prepare_for_destroy":{"type":"method","name":"prepare_for_destroy","children":[],"call":["attachment send "," each_attachment ","Paperclip  log "]}," Paperclip logger=":{"type":"method","name":"logger=","children":[],"call":[]}," Paperclip register_processor":{"type":"method","name":"register_processor","children":[],"call":["@known_processors []= ","name to_s "]}," Paperclip clear_processors!":{"type":"method","name":"clear_processors!","children":[],"call":["@known_processors try "]}," Paperclip Style source_file_options":{"type":"method","name":"source_file_options","children":[],"call":[" attachment send "," name "," attachment ","@source_file_options call "," attachment instance ","@source_file_options respond_to? "]}," Paperclip Storage Fog find_credentials":{"type":"method","name":"find_credentials","children":[],"call":[" raise ","YAML  load ","ERB  new result ","ERB  new ","File  read ","creds path ","creds call ","creds respond_to? "]}," Paperclip Storage Fog parse_credentials":{"type":"method","name":"parse_credentials","children":[],"call":["(or\n  (send\n    (lvar :creds) :[]\n    (lvar :env))\n  (lvar :creds)) symbolize_keys ","creds [] ","Rails  env ","Object  const_defined? "," find_credentials stringify_keys "," find_credentials ","(or\n  (send\n    (lvar :creds) :[]\n    (send\n      (const nil :RailsEnvironment) :get))\n  (lvar :creds)) symbolize_keys ","RailsEnvironment  get ","(or\n  (send\n    (lvar :creds) :[]\n    (lvar :Rails  env ))\n  (lvar :creds)) symbolize_keys ","(or\n  (send\n    (lvar : find_credentials stringify_keys ) :[]\n    (lvar :env))\n  (lvar : find_credentials stringify_keys )) symbolize_keys "," find_credentials stringify_keys  [] ","Rails  Rails  env  ","(or\n  (send\n    (lvar : find_credentials stringify_keys ) :[]\n    (send\n      (const nil :RailsEnvironment) :get))\n  (lvar : find_credentials stringify_keys )) symbolize_keys "]}," Paperclip missing_attachments_styles":{"type":"method","name":"missing_attachments_styles","children":[],"call":[]}," Paperclip current_attachments_styles":{"type":"method","name":"current_attachments_styles","children":[],"call":[]}," Paperclip save_current_attachments_styles!":{"type":"method","name":"save_current_attachments_styles!","children":[],"call":[]}," Paperclip get_registered_attachments_styles":{"type":"method","name":"get_registered_attachments_styles","children":[],"call":[]}," Paperclip registered_attachments_styles_path":{"type":"method","name":"registered_attachments_styles_path","children":[],"call":["Rails  root join to_s ","Rails  root join ","Rails  root "]}," Paperclip Interpolations content_type_extension":{"type":"method","name":"content_type_extension","children":[],"call":["(str \"/([^/]*)$\") match [] ","(str \"/([^/]*)$\") match ","attachment content_type ","extensions_for_mime_type first ","extensions_for_mime_type empty? ! ","extensions_for_mime_type empty? ","extensions_for_mime_type include? "," extension ","mime_type first extensions ","mime_type first ","mime_type empty? ","MIME Types  [] ","style [] to_s ","style [] ","attachment styles [] ","style_name to_s to_sym ","style_name to_s ","attachment styles ","(str \"/([^/]*)\\\\Z\") match [] ","(str \"/([^/]*)\\\\Z\") match ","(str \"/([^/]*)\\\\z\") match [] ","(str \"/([^/]*)\\\\z\") match ","mime_type first extensions  first ","extensions_for_MIME Types  []  first ","mime_type first extensions  empty? ! ","extensions_for_MIME Types  []  empty? ! ","mime_type first extensions  empty? ","extensions_for_MIME Types  []  empty? ","mime_type first extensions  include? ","extensions_for_MIME Types  []  include? ","MIME Types  []  first extensions ","MIME Types  []  first ","MIME Types  []  empty? ","attachment styles []  [] to_s ","attachment styles []  [] ","attachment attachment styles [] s [] ","attachment styles [] _name to_s to_sym ","attachment styles [] _name to_s ","attachment attachment styles [] s "]}," Paperclip Attachment after_flush_writes":{"type":"method","name":"after_flush_writes","children":[],"call":["file unlink ","File  exist? ","file path ","file path present? ","file respond_to? ","file close ","file closed? ","@queued_for_write each "," unlink_files ","@queued_for_write values "]}," Paperclip Attachment extra_source_file_options_for":{"type":"method","name":"extra_source_file_options_for","children":[],"call":["(lvar :style_options) compact join ","(lvar :style_options) compact ","style_options call "," instance ","style_options respond_to? "," source_file_options [] "," source_file_options ","all_options call ","all_options respond_to? ","@options source_file_options [] ","@options source_file_options ","@options [] [] ","@options [] "," process_options ","(lvar :style_options call ) compact join ","(lvar : source_file_options [] ) compact join ","(lvar :@options source_file_options [] ) compact join ","(lvar :@options [] [] ) compact join ","(lvar :style_options call ) compact ","(lvar : source_file_options [] ) compact ","(lvar :@options source_file_options [] ) compact ","(lvar :@options [] [] ) compact ","style_options call  call "," source_file_options []  call ","@options source_file_options []  call ","@options [] []  call ","style_options call  respond_to? "," source_file_options []  respond_to? ","@options source_file_options []  respond_to? ","@options [] []  respond_to? ","all_options call  call ","all_options call  respond_to? "]}," Paperclip reset_duplicate_clash_check!":{"type":"method","name":"reset_duplicate_clash_check!","children":[],"call":[]}," Paperclip check_for_url_clash":{"type":"method","name":"check_for_url_clash","children":[],"call":["@names_url []= "," log ","@names_url [] [] ","@names_url [] ","@names_url [] [] != ","@names_url [] [] == ","Attachment  default_options [] ","Attachment  default_options ","@names_url [] [] !~ "]}," Paperclip Storage S3 http_proxy_password":{"type":"method","name":"http_proxy_password","children":[],"call":["@http_proxy [] "," using_http_proxy? "]}," Paperclip Storage S3 http_proxy_user":{"type":"method","name":"http_proxy_user","children":[],"call":["@http_proxy [] "," using_http_proxy? "]}," Paperclip Storage S3 http_proxy_port":{"type":"method","name":"http_proxy_port","children":[],"call":["@http_proxy [] "," using_http_proxy? "]}," Paperclip Storage S3 http_proxy_host":{"type":"method","name":"http_proxy_host","children":[],"call":["@http_proxy [] "," using_http_proxy? "]}," Paperclip Storage S3 using_http_proxy?":{"type":"method","name":"using_http_proxy?","children":[],"call":["@http_proxy ! ! ","@http_proxy ! "]}," Paperclip Storage S3 s3_credentials":{"type":"method","name":"s3_credentials","children":[],"call":[" parse_credentials ","@options s3_credentials ","@options [] "]}," Paperclip Storage Fog fog_public":{"type":"method","name":"fog_public","children":[],"call":["@options fog_public ","@options [] ","@options [] [] ","@options [] has_key? ","@options [] respond_to? ","@options has_key? ","value call ","value respond_to? ","value [] ","value key? ","@options key? ","@options []  call ","@options []  respond_to? ","@options []  [] ","@options []  key? "]}," Paperclip Storage Fog fog_file":{"type":"method","name":"fog_file","children":[],"call":["@options fog_file ","@options [] ","value call ","value respond_to? ","value ! ","@options []  call ","@options []  respond_to? ","@options []  ! "]}," Paperclip Storage Fog fog_credentials":{"type":"method","name":"fog_credentials","children":[],"call":[" parse_credentials ","@options fog_credentials ","@options [] "]}," Paperclip Options styles":{"type":"method","name":"styles","children":[],"call":[" normalized_styles []= ","Paperclip Style  new ","args dup "," normalized_styles ","(if\n  (send\n    (ivar :@styles) :respond_to?\n    (sym :call))\n  (send\n    (ivar :@styles) :call\n    (ivar :@attachment))\n  (ivar :@styles)) each ","@styles call ","@styles respond_to? ","ActiveSupport OrderedHash  new ","@normalized_styles ! ","ActiveSupport OrderedHash  new  ! "]}," Paperclip Options processors":{"type":"method","name":"processors","children":[],"call":["@processors call ","@attachment instance ","@processors respond_to? "]}," Paperclip Options method_missing":{"type":"method","name":"method_missing","children":[],"call":[" instance_variable_get "," instance_variable_set ","args [] ","method [] ","method to_s [] == ","method to_s [] ","method to_s "]}," Paperclip Options initialize":{"type":"method","name":"initialize","children":[],"call":["hash [] ","@path call ","@path is_a? ","@url call ","@url is_a? ","@path call  call ","hash []  call ","@path call  is_a? ","hash []  is_a? ","@url call  call ","@url call  is_a? "]}," Paperclip Attachment default_style":{"type":"method","name":"default_style","children":[],"call":["@options default_style ","@options [] "]}," Paperclip InterpolatedString force_escape":{"type":"method","name":"force_escape","children":[],"call":[]}," Paperclip InterpolatedString unescape":{"type":"method","name":"unescape","children":[],"call":["escaped_string instance_variable_set "," class new ","URI  unescape "," class "," escaped? "," class new  instance_variable_set "]}," Paperclip InterpolatedString escape":{"type":"method","name":"escape","children":[],"call":["escaped_string instance_variable_set "," class new ","URI  escape "," class "," escaped? ! "," escaped? "," class new  instance_variable_set "]}," Paperclip InterpolatedString escaped?":{"type":"method","name":"escaped?","children":[],"call":["@escaped ! ! ","@escaped ! "]}," Paperclip Storage S3 s3_permissions":{"type":"method","name":"s3_permissions","children":[],"call":["s3_permissions call ","s3_permissions is_a? ","@s3_permissions [] ","s3_permissions respond_to? ","s3_permissions call  call ","s3_permissions call  is_a? ","@s3_permissions call  [] ","s3_permissions call  respond_to? "]}," Paperclip Attachment escape_url":{"type":"method","name":"escape_url","children":[],"call":["URI  escape ","url escape ","url respond_to? "]}," Paperclip Attachment url_timestamp":{"type":"method","name":"url_timestamp","children":[],"call":[" updated_at to_s "," updated_at ","url include? "]}," Paperclip Attachment most_appropriate_url":{"type":"method","name":"most_appropriate_url","children":[],"call":["@options url "," default_url "," original_filename nil? "," original_filename "]}," Paperclip Attachment default_url":{"type":"method","name":"default_url","children":[],"call":["@options default_url ","@options default_url call ","@options default_url is_a? "]}," Paperclip Attachment extract_timestamp":{"type":"method","name":"extract_timestamp","children":[],"call":["n nil? ! ","n nil? ","possibilities find ","@options use_timestamp ","options [] ","options respond_to? ","options == "]}," Paperclip Attachment handle_url_options":{"type":"method","name":"handle_url_options","children":[],"call":["options []= ","options [] nil? ","options [] ","options == "," extract_timestamp "," extract_ extract_timestamp  "]}," Paperclip Attachment uploaded_file":{"type":"method","name":"uploaded_file","children":[],"call":[" instance_read "]}," Paperclip UrlGenerator escape_url":{"type":"method","name":"escape_url","children":[],"call":["(if\n  (send\n    (lvar :url) :respond_to?\n    (sym :escape))\n  (send\n    (lvar :url) :escape)\n  (send\n    (const nil :URI) :escape\n    (lvar :url))) gsub ","URI  escape ","url escape ","url respond_to? ","m ord to_s upcase ","m ord to_s ","m ord ","URI  escape gsub "," escape_regex "]}," Paperclip UrlGenerator escape_url_as_needed":{"type":"method","name":"escape_url_as_needed","children":[],"call":[" escape_url ","options [] "]}," Paperclip UrlGenerator timestamp_possible?":{"type":"method","name":"timestamp_possible?","children":[],"call":["@attachment updated_at present? ","@attachment updated_at ","@attachment respond_to? "]}," Paperclip UrlGenerator timestamp_as_needed":{"type":"method","name":"timestamp_as_needed","children":[],"call":["@attachment updated_at to_s ","@attachment updated_at ","url match "," timestamp_possible? ","options [] "]}," Paperclip UrlGenerator most_appropriate_url":{"type":"method","name":"most_appropriate_url","children":[],"call":["@attachment_options [] "," default_url ","@attachment original_filename nil? ","@attachment original_filename "," attachment_options [] "," attachment_options "]}," Paperclip UrlGenerator default_url":{"type":"method","name":"default_url","children":[],"call":["@attachment_options [] ","@attachment instance send ","@attachment instance ","@attachment_options [] is_a? ","@attachment_options [] call ","@attachment_options [] respond_to? "," attachment_options [] "," attachment_options "," attachment_options [] is_a? "," attachment_options [] call "," attachment_options [] respond_to? "]}," Paperclip UrlGenerator for":{"type":"method","name":"for","children":[],"call":[" escape_url_as_needed "," timestamp_as_needed ","@attachment_options [] interpolate "," most_appropriate_url ","@attachment_options [] "," attachment_options [] interpolate "," attachment_options [] "," attachment_options "]}," Paperclip UrlGenerator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Paperclip Storage S3 use_secure_protocol?":{"type":"method","name":"use_secure_protocol?","children":[],"call":[" s3_protocol == "," s3_protocol "]}," Paperclip Storage S3 establish_connection!":{"type":"method","name":"establish_connection!","children":[],"call":["AWS S3 Base  establish_connection! ","@s3_options merge "," s3_credentials [] "," s3_credentials "]}," Paperclip Storage S3 s3_object":{"type":"method","name":"s3_object","children":[],"call":[" s3_bucket objects [] "," path sub "," path "," s3_bucket objects "," s3_bucket "," s3_bucket object "," style_name_as_path "]}," Paperclip Storage S3 s3_interface":{"type":"method","name":"s3_interface","children":[],"call":["AWS S3  new ","config merge ","config []= "," s3_credentials [] "," s3_credentials ","(sym :access_key_id) each ","URI HTTP  build ","proxy_opts []= "," http_proxy_password "," http_proxy_user to_s "," http_proxy_user "," http_proxy_port "," http_proxy_host "," using_http_proxy? "," s3_host_name "," obtain_s3_instance_for "," s3_region "," use_accelerate_endpoint? "]}," Paperclip Schema full_column_name":{"type":"method","name":"full_column_name","children":[],"call":["(begin\n  (lvar :attachment_name)) to_sym "]}," Paperclip Schema with_columns_for":{"type":"method","name":"with_columns_for","children":[],"call":[" full_column_name ","@@columns each "," full_ full_column_name  "]}," Paperclip Schema drop_attached_file":{"type":"method","name":"drop_attached_file","children":[],"call":[" remove_column "," with_columns_for "]}," Paperclip Schema has_attached_file":{"type":"method","name":"has_attached_file","children":[],"call":[" column "," with_columns_for "]}," Paperclip Attachment process_style?":{"type":"method","name":"process_style?","children":[],"call":["style_args include? ","style_args empty? "]}," Paperclip Attachment post_process_style":{"type":"method","name":"post_process_style","children":[],"call":["(or-asgn\n  (send\n    (ivar :@errors) :[]\n    (sym :processing))\n  (array)) << ","e message ","@errors [] ","@options [] "," log ","e inspect ","@queued_for_write []= ","Paperclip  processor make ","style processor_options ","Paperclip  processor ","style processors inject ","@queued_for_write [] ","style processors "," raise ","RuntimeError  new ","style processors blank? ","Paperclip  io_adapters for ","Paperclip  io_adapters ","unadapted_file close ","unadapted_file respond_to? ","file close ","file == "," unlink_files ","intermediate_files << ","style processors reduce ","@queued_for_write [] close ","name == ","@queued_for_write []  close ","unadapted_Paperclip  processor make  close ","@queued_for_write []  respond_to? ","unadapted_Paperclip  processor make  respond_to? ","Paperclip  processor make  close ","Paperclip  processor make  == "," unlink_Paperclip  processor make s ","intermediate_Paperclip  processor make s << "]}," Paperclip Attachment path_option":{"type":"method","name":"path_option","children":[],"call":["@options [] ","@options [] call ","@options [] respond_to? "]}," Paperclip Attachment hash_key":{"type":"method","name":"hash_key","children":[],"call":["OpenSSL HMAC  hexdigest ","@options [] ","OpenSSL Digest  const_get new ","OpenSSL Digest  const_get "," interpolate "," require "," raise "]}," Paperclip Attachment cleanup_filename":{"type":"method","name":"cleanup_filename","children":[],"call":["filename gsub ","@options [] "," filename_cleaner call "," filename_cleaner "]}," Paperclip AttachmentOptions initialize":{"type":"method","name":"initialize","children":[],"call":[" []= ","options each ","(pair\n  (sym :validations)\n  (array)) merge ","(pair\n  (sym :validations)\n  (array)) merge  each "]}," Paperclip io_adapters":{"type":"method","name":"io_adapters","children":[],"call":[]}," Paperclip io_adapters=":{"type":"method","name":"io_adapters=","children":[],"call":[]}," Paperclip Validators ClassMethods validates_attachment":{"type":"method","name":"validates_attachment","children":[],"call":[" validates ","attributes + ","options []= ","options delete ","options has_key? ","1 underscore to_sym ","1 underscore ","constant to_s =~ ","constant to_s ","Paperclip Validators  constants each ","Paperclip Validators  constants ","attributes extract_options! dup ","attributes extract_options! "," send ","validator_options == ","local_options last merge! ","local_options last ","options slice ","Paperclip Validators  const_get helper_method_name ","Paperclip Validators  const_get ","local_options merge ","Array  wrap each ","Array  wrap ","attributes extract_options! dup  []= ","attributes extract_options! dup  delete ","attributes extract_options! dup  has_key? ","attributes extract_attributes extract_options! dup ! dup ","attributes extract_attributes extract_options! dup ! ","validator_attributes extract_options! dup  == ","options delete  == ","local_attributes extract_options! dup  last merge! ","attributes +  last merge! ","local_attributes extract_options! dup  last ","attributes +  last ","attributes extract_options! dup  slice ","Paperclip Validators  const_get helper_Paperclip Validators  const_get helper_method_name  ","local_attributes extract_options! dup  merge ","attributes +  merge "]}," Paperclip Validators HelperMethods validates_attachment_size":{"type":"method","name":"validates_attachment_size","children":[],"call":[" validates_with "," _merge_attributes "," validate_before_processing ","options dup "," _merge_attributes  dup "]}," Paperclip Validators AttachmentSizeValidator max_value_in_human_size":{"type":"method","name":"max_value_in_human_size","children":[],"call":[" human_size ","value max ","value respond_to? ","value call "," options [] "," options ","value max  max ","value call  max ","value max  respond_to? ","value call  respond_to? ","value max  call ","value call  call "]}," Paperclip Validators AttachmentSizeValidator min_value_in_human_size":{"type":"method","name":"min_value_in_human_size","children":[],"call":[" human_size ","value min ","value respond_to? ","value call "," options [] "," options ","value min  min ","value call  min ","value min  respond_to? ","value call  respond_to? ","value min  call ","value call  call "]}," Paperclip Validators AttachmentSizeValidator human_size":{"type":"method","name":"human_size","children":[],"call":["storage_units_format gsub gsub html_safe ","storage_units_format gsub gsub ","storage_units_format gsub ","size to_i to_s ","size to_i ","I18n  translate "," options [] "," options ","ActiveSupport NumberHelper  number_to_human_size ","storage_I18n  translate s_format gsub gsub html_safe ","I18n  translate  gsub gsub html_safe ","storage_I18n  translate s_format gsub gsub ","I18n  translate  gsub gsub ","storage_I18n  translate s_format gsub ","I18n  translate  gsub "]}," Paperclip Validators AttachmentSizeValidator extract_option_value":{"type":"method","name":"extract_option_value","children":[],"call":["option_value min ","option_value max ","(sym :less_than) include? ","option_value is_a? "]}," Paperclip Validators AttachmentSizeValidator extract_options":{"type":"method","name":"extract_options","children":[],"call":["options []= ","range min ","range max ","options [] respond_to? ! ","options [] respond_to? ","options [] ","options []  min ","options []  max "]}," Paperclip Validators AttachmentSizeValidator check_validity!":{"type":"method","name":"check_validity!","children":[],"call":[" raise "," options has_key? "," options ","(send\n  (const nil :AVAILABLE_CHECKS) :+\n  (array\n    (sym :in))) any? ","AVAILABLE_CHECKS  + "]}," Paperclip Validators AttachmentSizeValidator validate_each":{"type":"method","name":"validate_each","children":[],"call":["record errors add "," filtered_options merge "," human_size "," max_value_in_human_size "," min_value_in_human_size "," filtered_options ","record errors "," options [] "," options ","value send ","CHECKS  [] "," extract_option_value ","option_value call ","option_value is_a? "," options slice each "," options slice ","value blank? ","record send ","(begin\n  (lvar :attr_name)) to_sym ","(lvar :attr_name) each "," max_record send _in_human_size "," min_record send _in_human_size ","record send  send "," extract_ extract_option_value  "," extract_option_value call  "," extract_option_record send  "," extract_option_value  call ","option_value call  call ","option_record send  call "," extract_option_value  is_a? ","option_value call  is_a? ","option_record send  is_a? ","record send  blank? ","(begin\n  (lvar :(begin\n  (lvar :attr_name)) to_sym )) to_sym ","(lvar :(begin\n  (lvar :attr_name)) to_sym ) each "]}," Paperclip Validators AttachmentSizeValidator initialize":{"type":"method","name":"initialize","children":[],"call":[" extract_options "]}," Paperclip Validators HelperMethods validates_attachment_presence":{"type":"method","name":"validates_attachment_presence","children":[],"call":[" validates_with "," _merge_attributes "," validate_before_processing ","options dup "," _merge_attributes  dup "]}," Paperclip Validators AttachmentPresenceValidator validate":{"type":"method","name":"validate","children":[],"call":["record errors add "," options ","record errors ","record send blank? ","record send ","(send nil :attributes) flatten map ","(send nil :attributes) flatten "," attributes "]}," Paperclip Validators HelperMethods validates_attachment_content_type":{"type":"method","name":"validates_attachment_content_type","children":[],"call":[" validates_with "," _merge_attributes "," validate_before_processing ","options dup "," _merge_attributes  dup "]}," Paperclip Validators AttachmentContentTypeValidator check_validity!":{"type":"method","name":"check_validity!","children":[],"call":[" raise "," options has_key? "," options "]}," Paperclip Validators AttachmentContentTypeValidator validate_each":{"type":"method","name":"validate_each","children":[],"call":["record errors add "," options merge ","allowed_types join "," options ","record errors ","type === ","allowed_types none? ","value present? ","(send\n  (send nil :options) :[]\n  (sym :content_type)) flatten "," options [] ","record send ","(begin\n  (lvar :attribute)) to_sym ","value blank? ","value nil? "," validate_blacklist "," validate_whitelist ","record errors [] ","record errors include? ","attribute to_sym ","record errors [] each ","(send\n  (send nil :options) :[]\n  (sym :content_type)) flatten  join ","(send\n  (send nil :options) :[]\n  (sym :content_type)) flatten  none? ","record send  present? ","(begin\n  (lvar :(begin\n  (lvar :attribute)) to_sym )) to_sym ","record send  blank? ","record send  nil? ","(begin\n  (lvar :attribute)) to_sym  to_sym "]}," Paperclip TempfileEncoding binmode":{"type":"method","name":"binmode","children":[],"call":[" set_encoding "]}," Paperclip Storage S3 s3_url_options":{"type":"method","name":"s3_url_options","children":[],"call":["s3_url_options call "," instance ","s3_url_options is_a? ","@options [] ","s3_url_options respond_to? ","s3_url_options call  call ","s3_url_options call  is_a? ","s3_url_options call  respond_to? "]}," Paperclip ProcessorHelpers register_processor":{"type":"method","name":"register_processor","children":[],"call":["@known_processors []= ","name to_s "]}," Paperclip ProcessorHelpers clear_processors!":{"type":"method","name":"clear_processors!","children":[],"call":["@known_processors try "]}," Paperclip ProcessorHelpers load_processor":{"type":"method","name":"load_processor","children":[],"call":[" require ","File  expand_path ","Rails  root join ","name underscore ","Rails  root "," raise ","directories join ","required any? ","File  exist? ","directories map ","name to_s underscore ","name to_s "]}," Paperclip ProcessorHelpers processor":{"type":"method","name":"processor","children":[],"call":["@known_processors []= ","name to_s ","Paperclip  const_get "," load_processor ","Paperclip  const_defined? ","name to_s camelize ","@known_processors [] ","@known_Paperclip  const_get s []= ","name to_s camelize  to_s "," load_Paperclip  const_get  ","name to_s camelize  to_s camelize ","@known_Paperclip  const_get s [] "]}," Paperclip Logger logging?":{"type":"method","name":"logging?","children":[],"call":[" options [] "," options "]}," Paperclip Logger logger=":{"type":"method","name":"logger=","children":[],"call":[]}," Paperclip Logger logger":{"type":"method","name":"logger","children":[],"call":[" Logger  new "," options [] "," options "]}," Paperclip Logger log":{"type":"method","name":"log","children":[],"call":[" logger info "," logger "," logging? "]}," Paperclip UploadedFileAdapter copy_to_tempfile":{"type":"method","name":"copy_to_tempfile","children":[],"call":["FileUtils  cp ","dest path ","src path ","dest binmode ","Tempfile  new "," original_filename ","File  basename ","File  extname ","Tempfile  new  path ","Tempfile  new  binmode ","File  File  basename  "]}," Paperclip UploadedFileAdapter path":{"type":"method","name":"path","children":[],"call":["@tempfile path "]}," Paperclip UploadedFileAdapter eof?":{"type":"method","name":"eof?","children":[],"call":["@tempfile eof? "]}," Paperclip UploadedFileAdapter rewind":{"type":"method","name":"rewind","children":[],"call":["@tempfile rewind "]}," Paperclip UploadedFileAdapter read":{"type":"method","name":"read","children":[],"call":["@tempfile read "]}," Paperclip UploadedFileAdapter nil?":{"type":"method","name":"nil?","children":[],"call":[]}," Paperclip UploadedFileAdapter size":{"type":"method","name":"size","children":[],"call":["File  size "," path "]}," Paperclip UploadedFileAdapter fingerprint":{"type":"method","name":"fingerprint","children":[],"call":["Digest MD5  file to_s ","Digest MD5  file "," path "]}," Paperclip UploadedFileAdapter content_type":{"type":"method","name":"content_type","children":[],"call":["@target content_type "]}," Paperclip UploadedFileAdapter original_filename":{"type":"method","name":"original_filename","children":[],"call":["@target original_filename "]}," Paperclip UploadedFileAdapter initialize":{"type":"method","name":"initialize","children":[],"call":[" copy_to_tempfile ","@target tempfile ","@target respond_to? "," cache_current_values "]}," Paperclip StringioAdapter copy_to_tempfile":{"type":"method","name":"copy_to_tempfile","children":[],"call":["dest rewind ","dest write ","src read ","16 * ","dest binmode ","Tempfile  new "," original_filename ","File  basename ","File  extname "," destination "," destination rewind "," destination write ","@target read ","source read ","Tempfile  new  rewind ","Tempfile  new  write ","Tempfile  new  binmode ","File  File  basename  "," Tempfile  new ination "," Tempfile  new ination rewind "," Tempfile  new ination write "]}," Paperclip StringioAdapter path":{"type":"method","name":"path","children":[],"call":["@tempfile path "]}," Paperclip StringioAdapter eof?":{"type":"method","name":"eof?","children":[],"call":["@tempfile eof? "]}," Paperclip StringioAdapter rewind":{"type":"method","name":"rewind","children":[],"call":["@tempfile rewind "]}," Paperclip StringioAdapter read":{"type":"method","name":"read","children":[],"call":["@tempfile read "]}," Paperclip StringioAdapter fingerprint":{"type":"method","name":"fingerprint","children":[],"call":["Digest MD5  hexdigest "," read "]}," Paperclip StringioAdapter size":{"type":"method","name":"size","children":[],"call":["@target size "]}," Paperclip StringioAdapter content_type":{"type":"method","name":"content_type","children":[],"call":["@content_type strip ","@target content_type ","@target respond_to? "]}," Paperclip StringioAdapter original_filename":{"type":"method","name":"original_filename","children":[],"call":["@original_filename strip ","@target original_filename ","@target respond_to? "]}," Paperclip StringioAdapter initialize":{"type":"method","name":"initialize","children":[],"call":[" copy_to_tempfile "," cache_current_values "]}," Paperclip AdapterRegistry for":{"type":"method","name":"for","children":[],"call":[" handler_for new "," handler_for "]}," Paperclip AdapterRegistry registered?":{"type":"method","name":"registered?","children":[],"call":["handler === ","@registered_handlers any? "]}," Paperclip AdapterRegistry handler_for":{"type":"method","name":"handler_for","children":[],"call":[" raise ","NoHandlerError  new ","target inspect ","tester call ","@registered_handlers each "]}," Paperclip AdapterRegistry register":{"type":"method","name":"register","children":[],"call":["@registered_handlers << "]}," Paperclip AdapterRegistry initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Paperclip NilAdapter eof?":{"type":"method","name":"eof?","children":[],"call":[]}," Paperclip NilAdapter read":{"type":"method","name":"read","children":[],"call":[]}," Paperclip NilAdapter nil?":{"type":"method","name":"nil?","children":[],"call":[]}," Paperclip NilAdapter size":{"type":"method","name":"size","children":[],"call":[]}," Paperclip NilAdapter content_type":{"type":"method","name":"content_type","children":[],"call":[]}," Paperclip NilAdapter original_filename":{"type":"method","name":"original_filename","children":[],"call":[]}," Paperclip NilAdapter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Paperclip IdentityAdapter new":{"type":"method","name":"new","children":[],"call":[]}," Paperclip FileAdapter type_from_file_command":{"type":"method","name":"type_from_file_command","children":[],"call":["mime_type match ","Paperclip  run split [] ","Paperclip  run split ","Paperclip  run "," path ","(rescue\n  (send\n    (send\n      (send\n        (self) :original_filename) :match\n      (regexp\n        (str \"\\\\.(\\\\w+)$\")\n        (regopt))) :[]\n    (int 1))\n  (resbody nil nil\n    (str \"octet-stream\")) nil) downcase "," original_filename match [] "," original_filename match "," original_filename ","mime_(rescue\n  (send\n    (send\n      (send\n        (self) :original_filename) :match\n      (regexp\n        (str \"\\.(\\w+)$\")\n        (regopt))) :[]\n    (int 1))\n  (resbody nil nil\n    (str \"octet-stream\")) nil) downcase  match "]}," Paperclip FileAdapter best_content_type_option":{"type":"method","name":"best_content_type_option","children":[],"call":["(send\n  (lvar :types) :reject) first ","type content_type match ","type content_type ","types reject ","(send\n  (lvar :types) :reject) first content_type "]}," Paperclip FileAdapter copy_to_tempfile":{"type":"method","name":"copy_to_tempfile","children":[],"call":["FileUtils  cp ","dest path ","src path ","dest binmode ","Tempfile  new "," original_filename ","File  basename ","File  extname ","Tempfile  new  path ","Tempfile  new  binmode ","File  File  basename  "]}," Paperclip FileAdapter path":{"type":"method","name":"path","children":[],"call":["@tempfile path "]}," Paperclip FileAdapter eof?":{"type":"method","name":"eof?","children":[],"call":["@tempfile eof? "]}," Paperclip FileAdapter rewind":{"type":"method","name":"rewind","children":[],"call":["@tempfile rewind "]}," Paperclip FileAdapter read":{"type":"method","name":"read","children":[],"call":["@tempfile read "]}," Paperclip FileAdapter nil?":{"type":"method","name":"nil?","children":[],"call":["@target nil? "]}," Paperclip FileAdapter size":{"type":"method","name":"size","children":[],"call":["File  size "]}," Paperclip FileAdapter fingerprint":{"type":"method","name":"fingerprint","children":[],"call":["Digest MD5  file to_s ","Digest MD5  file "," path "]}," Paperclip FileAdapter content_type":{"type":"method","name":"content_type","children":[],"call":[" best_content_type_option ","types first content_type ","types first ","types length == ","types length "," type_from_file_command ","MIME Types  type_for "," original_filename ","MIME Types  type_for  first content_type ","MIME Types  type_for  first ","MIME Types  type_for  length == ","MIME Types  type_for  length "]}," Paperclip FileAdapter original_filename":{"type":"method","name":"original_filename","children":[],"call":["File  basename ","@target path ","@target original_filename ","@target respond_to? "]}," Paperclip FileAdapter initialize":{"type":"method","name":"initialize","children":[],"call":[" copy_to_tempfile "," cache_current_values "]}," Paperclip AttachmentAdapter copy_to_tempfile":{"type":"method","name":"copy_to_tempfile","children":[],"call":["FileUtils  cp ","dest path ","src path ","dest binmode ","Tempfile  new ","src original_filename ","src copy_to_local_file ","src respond_to? ","File  basename ","File  extname "," destination "," destination path ","source copy_to_local_file ","source staged_path ","source staged? "," link_or_copy_file "," raise "," destination close ","Tempfile  new  path ","Tempfile  new  binmode ","File  File  basename  "," Tempfile  new ination "," Tempfile  new ination path "," Tempfile  new ination close "]}," Paperclip AttachmentAdapter cache_current_values":{"type":"method","name":"cache_current_values","children":[],"call":["@target size ","@tempfile size ","@target content_type ","@target original_filename "," copy_to_tempfile "," original_filename= "," copy_to_tempfile  size "]}," Paperclip AttachmentAdapter path":{"type":"method","name":"path","children":[],"call":["@tempfile path "]}," Paperclip AttachmentAdapter eof?":{"type":"method","name":"eof?","children":[],"call":["@tempfile eof? "]}," Paperclip AttachmentAdapter read":{"type":"method","name":"read","children":[],"call":["@tempfile read "]}," Paperclip AttachmentAdapter fingerprint":{"type":"method","name":"fingerprint","children":[],"call":["Digest MD5  file to_s ","Digest MD5  file "," path "]}," Paperclip AttachmentAdapter nil?":{"type":"method","name":"nil?","children":[],"call":[]}," Paperclip AttachmentAdapter size":{"type":"method","name":"size","children":[],"call":[]}," Paperclip AttachmentAdapter content_type":{"type":"method","name":"content_type","children":[],"call":[]}," Paperclip AttachmentAdapter original_filename":{"type":"method","name":"original_filename","children":[],"call":[]}," Paperclip AttachmentAdapter initialize":{"type":"method","name":"initialize","children":[],"call":[" cache_current_values ","target name ","target attachment "]}," Paperclip Helpers reset_duplicate_clash_check!":{"type":"method","name":"reset_duplicate_clash_check!","children":[],"call":[]}," Paperclip Helpers check_for_url_clash":{"type":"method","name":"check_for_url_clash","children":[],"call":["@names_url []= "," log ","@names_url [] [] ","@names_url [] ","@names_url [] [] !~ ","@names_url [] [] != ","@names_url [] [] == ","Attachment  default_options [] ","Attachment  default_options "]}," Paperclip Helpers class_for":{"type":"method","name":"class_for","children":[],"call":["klass const_missing ","klass const_get ","klass const_defined? ","class_name split inject ","class_name split ","Module  method arity == ","Module  method arity ","Module  method "]}," Paperclip Helpers each_instance_with_attachment":{"type":"method","name":"each_instance_with_attachment","children":[],"call":[" class_for find_each "," class_for "," class_for send "," class_for respond_to? "," class_for unscoped where find_each "," class_for unscoped where "," class_for unscoped "]}," Paperclip Helpers run":{"type":"method","name":"run","children":[],"call":["Cocaine CommandLine  new run ","Cocaine CommandLine  new ","local_options merge "," logger ","local_options [] "," options [] "," options "," logging? ","Cocaine CommandLine  path= ","(send\n  (const\n    (const nil :Cocaine) :CommandLine) :path) flatten | ","(send\n  (const\n    (const nil :Cocaine) :CommandLine) :path) flatten ","Cocaine CommandLine  path ","(send\n  (const\n    (const nil :Cocaine) :CommandLine) :path) flatten compact uniq ","(send\n  (const\n    (const nil :Cocaine) :CommandLine) :path) flatten compact ","(lvar :cocaine_path_array) flatten compact uniq ","(lvar :cocaine_path_array) flatten compact ","(lvar :cocaine_path_array) flatten ","Cocaine CommandLine  path try ","Cocaine OS  path_separator ","Terrapin CommandLine  new run ","Terrapin CommandLine  new ","Terrapin CommandLine  path= ","(lvar :terrapin_path_array) flatten compact uniq ","(lvar :terrapin_path_array) flatten compact ","(lvar :terrapin_path_array) flatten ","Terrapin CommandLine  path try ","Terrapin OS  path_separator ","Terrapin CommandLine  path ","local_options merge  merge ","local_options merge  [] ","(lvar :Cocaine CommandLine  path try ) flatten compact uniq ","(lvar :Cocaine CommandLine  path try ) flatten compact ","(lvar :Cocaine CommandLine  path try ) flatten ","(lvar :Terrapin CommandLine  path try ) flatten compact uniq ","(lvar :Terrapin CommandLine  path try ) flatten compact ","(lvar :Terrapin CommandLine  path try ) flatten "]}," Paperclip Helpers interpolates":{"type":"method","name":"interpolates","children":[],"call":["Paperclip Interpolations  []= "]}," Paperclip Helpers configure":{"type":"method","name":"configure","children":[],"call":[" block_given? "]}," Paperclip Callbacks Running run_paperclip_callbacks":{"type":"method","name":"run_paperclip_callbacks","children":[],"call":[" run_callbacks "]}," Paperclip Callbacks Defining define_paperclip_callbacks":{"type":"method","name":"define_paperclip_callbacks","children":[],"call":[" eval ","callbacks each "," define_callbacks ","(lvar :callbacks) flatten "," callback_terminator "," hasta_la_vista_baby "]}," Paperclip Callbacks included":{"type":"method","name":"included","children":[],"call":[]}," Paperclip Attachment instance_respond_to?":{"type":"method","name":"instance_respond_to?","children":[],"call":[" instance respond_to? "," name "," instance "]}," Paperclip Validators AttachmentContentTypeValidator initialize":{"type":"method","name":"initialize","children":[],"call":["options []= ","options has_key? "]}," Paperclip Storage S3 copy_to_local_file":{"type":"method","name":"copy_to_local_file","children":[],"call":[" warn "," path ","local_file close ","local_file write ","file read "," s3_object "," File  open "," log "," s3_object read "," s3_object get ","local_ s3_object  close "," File  open  close ","local_ s3_object  write "," File  open  write "," s3_object  read "]}," Paperclip Storage Fog copy_to_local_file":{"type":"method","name":"copy_to_local_file","children":[],"call":[" warn "," path ","local_file close ","local_file write ","file body "," directory files get "," directory files "," directory "," File  open "," log ","local_ directory files get  close "," File  open  close ","local_ directory files get  write "," File  open  write "," directory files get  body "," directory  directory files get s get "," directory  directory files get s "]}," Paperclip AttachmentAdapter rewind":{"type":"method","name":"rewind","children":[],"call":["@tempfile rewind "]}," Paperclip Attachment queue_all_for_delete":{"type":"method","name":"queue_all_for_delete","children":[],"call":[" instance_write ","(send\n  (send\n    (array\n      (sym :original)\n      (splat\n        (send\n          (send nil :styles) :keys))) :uniq) :map) compact "," path "," exists? ","(sym :original) uniq map ","(sym :original) uniq "," styles keys "," styles "," file? ! "," file? ","@options [] "," has_enabled_but_unset_created_at? "]}," Paperclip Attachment queue_some_for_delete":{"type":"method","name":"queue_some_for_delete","children":[],"call":["(send\n  (send\n    (lvar :styles) :uniq) :map) compact "," path "," exists? ","styles uniq map ","styles uniq "]}," Paperclip Processor identify":{"type":"method","name":"identify","children":[],"call":["Paperclip  run ","Paperclip  options [] ","Paperclip  options "]}," Paperclip Processor convert":{"type":"method","name":"convert","children":[],"call":["Paperclip  run ","Paperclip  options [] ","Paperclip  options "]}," Paperclip Thumbnail identified_as_animated?":{"type":"method","name":"identified_as_animated?","children":[],"call":[" raise ","Paperclip Errors CommandNotFoundError  new ","ANIMATED_FORMATS  include? "," identify to_s downcase strip "," identify to_s downcase "," identify to_s "," identify ","@file path ","@identified_as_animated nil? ","ANIMATED_FORMATS  include?  nil? "]}," Paperclip TempfileFactory basename":{"type":"method","name":"basename","children":[],"call":["File  basename gsub ","File  basename "," extension ","Digest MD5  hexdigest "]}," Paperclip TempfileFactory extension":{"type":"method","name":"extension","children":[],"call":["File  extname "]}," Paperclip TempfileFactory generate":{"type":"method","name":"generate","children":[],"call":["file binmode ","Tempfile  new "," extension "," basename ","Tempfile  new  binmode ","TempTempfile  new   new "]}," Paperclip Storage Fog host_name_for_directory":{"type":"method","name":"host_name_for_directory","children":[],"call":["@options [] ","@options [] to_s =~ ","@options [] to_s "," directory_name "," directory_name to_s =~ "," directory_name to_s "]}," Paperclip Storage Fog dynamic_fog_host_for_style":{"type":"method","name":"dynamic_fog_host_for_style","children":[],"call":["@options [] ","@options [] % "," path hash % "," path hash "," path ","@options [] =~ ","@options [] call ","@options [] respond_to? "]}," Paperclip Storage Fog expiring_url":{"type":"method","name":"expiring_url","children":[],"call":["expiring_url gsub! "," dynamic_fog_host_for_style "," host_name_for_directory ","@options [] "," directory files get_http_url "," path "," directory files "," directory "," public_url "," directory files respond_to? "," url "," convert_time "," directory files public_send "," scheme "," directory files get_http_url  gsub! "," public_url  gsub! "," url  gsub! "," directory files public_send  gsub! "," convert_ convert_time  "]}," Paperclip Storage copy_to_local_file":{"type":"method","name":"copy_to_local_file","children":[],"call":["FileUtils  cp "," path "]}," Paperclip Schema CommandRecorder invert_add_attachment":{"type":"method","name":"invert_add_attachment","children":[],"call":[]}," Paperclip Schema CommandRecorder add_attachment":{"type":"method","name":"add_attachment","children":[],"call":[" record "]}," Paperclip Schema TableDefinition has_attached_file":{"type":"method","name":"has_attached_file","children":[],"call":[" attachment ","ActiveSupport Deprecation  warn "]}," Paperclip Schema TableDefinition attachment":{"type":"method","name":"attachment","children":[],"call":[" column ","COLUMNS  each_pair ","attachment_names each ","options merge ","options [] ","column_name to_sym ","attachment_names extract_options! ","attachment_names extract_options!  merge ","attachment_names extract_options!  [] ","attachment_names extract_attachment_names extract_options! ! "]}," Paperclip Schema Statements drop_attached_file":{"type":"method","name":"drop_attached_file","children":[],"call":[" remove_attachment ","ActiveSupport Deprecation  warn "]}," Paperclip Schema Statements remove_attachment":{"type":"method","name":"remove_attachment","children":[],"call":[" remove_column ","COLUMNS  each_pair ","attachment_names each "," raise ","attachment_names empty? ","options merge ","options [] ","column_name to_sym ","attachment_names extract_options! ","COLUMNS  keys each ","COLUMNS  keys ","attachment_names extract_options!  merge ","attachment_names extract_options!  [] ","attachment_names extract_attachment_names extract_options! ! "]}," Paperclip Schema Statements add_attachment":{"type":"method","name":"add_attachment","children":[],"call":[" add_column ","COLUMNS  each_pair ","attachment_names each "," raise ","attachment_names empty? ","options merge ","options [] ","column_name to_sym ","attachment_names extract_options! ","attachment_names extract_options!  merge ","attachment_names extract_options!  [] ","attachment_names extract_attachment_names extract_options! ! "]}," Paperclip Schema included":{"type":"method","name":"included","children":[],"call":[]}," Paperclip Shoulda Matchers ValidateAttachmentContentTypeMatcher expected_attachment":{"type":"method","name":"expected_attachment","children":[],"call":[]}," Paperclip Shoulda Matchers ValidateAttachmentContentTypeMatcher rejected_types_and_failures":{"type":"method","name":"rejected_types_and_failures","children":[],"call":["message << ","@missing_rejected_types join ","@missing_rejected_types any? ","(str \"Reject content types: \") tap ","@rejected_types join ","@rejected_types present? ","@missing_rejected_types present? "]}," Paperclip Shoulda Matchers ValidateAttachmentContentTypeMatcher accepted_types_and_failures":{"type":"method","name":"accepted_types_and_failures","children":[],"call":["message << ","@missing_allowed_types join ","@missing_allowed_types any? ","(str \"Accept content types: \") tap ","@allowed_types join ","@allowed_types present? ","@missing_allowed_types present? "]}," Paperclip UploadedFileAdapter cache_current_values":{"type":"method","name":"cache_current_values","children":[],"call":["File  size ","@target path ","@target content_type ","@target original_filename ","@target content_type to_s strip ","@target content_type to_s "," determine_content_type "," original_filename= "]}," Paperclip StringioAdapter cache_current_values":{"type":"method","name":"cache_current_values","children":[],"call":["@target size ","@target content_type ","@target respond_to? ","@original_filename strip ","@target original_filename "," original_filename= ","original_filename strip "," extension_for ","ContentTypeDetector  new detect ","ContentTypeDetector  new ","@tempfile path "," copy_to_tempfile "," original_filename ","@original_filename strip  strip ","@target original_filename  strip ","@@target original_filename  strip ","@target @target original_filename  "," @target original_filename = "," copy_to_tempfile  path "," @target original_filename  "]}," Paperclip FileAdapter calculate_content_type":{"type":"method","name":"calculate_content_type","children":[],"call":[" best_content_type_option ","types first content_type ","types first ","types length == ","types length "," type_from_file_command ","MIME Types  type_for "," original_filename ","MIME Types  type_for  first content_type ","MIME Types  type_for  first ","MIME Types  type_for  length == ","MIME Types  type_for  length "]}," Paperclip FileAdapter cache_current_values":{"type":"method","name":"cache_current_values","children":[],"call":["File  size "," calculate_content_type "," copy_to_tempfile ","File  basename ","@target path ","@target original_filename ","@target respond_to? ","ContentTypeDetector  new detect ","ContentTypeDetector  new "," original_filename "," original_filename= "]}," Paperclip AbstractAdapter type_from_file_command":{"type":"method","name":"type_from_file_command","children":[],"call":["mime_type match ","Paperclip  run split [] ","Paperclip  run split ","Paperclip  run "," path ","type empty? ","(send\n  (const nil :File) :extname\n  (send\n    (send\n      (self) :path) :to_s)) downcase ","File  extname "," path to_s ","Paperclip  run split []  match ","mime_(send\n  (const nil :File) :extname\n  (send\n    (send\n      (self) :path) :to_s)) downcase  match ","(send\n  (const nil :File) :extname\n  (send\n    (send\n      (self) :path) :to_s)) downcase  empty? "]}," Paperclip AbstractAdapter best_content_type_option":{"type":"method","name":"best_content_type_option","children":[],"call":["best first content_type ","best first ","types first content_type ","types first ","best size == ","best size ","type content_type match ","type content_type ","types reject "]}," Paperclip AbstractAdapter copy_to_tempfile":{"type":"method","name":"copy_to_tempfile","children":[],"call":[" destination ","FileUtils  cp "," destination path ","src path "," link_or_copy_file "]}," Paperclip AbstractAdapter destination":{"type":"method","name":"destination","children":[],"call":["TempfileFactory  new generate "," original_filename ","TempfileFactory  new ","@original_filename to_s "]}," Paperclip AbstractAdapter read":{"type":"method","name":"read","children":[],"call":["@tempfile read "]}," Paperclip AbstractAdapter fingerprint":{"type":"method","name":"fingerprint","children":[],"call":["Digest MD5  file to_s ","Digest MD5  file "," path ","digest hexdigest ","digest update ","f read ","File  open ","@options fetch new ","@options fetch ","@options fetch new  hex@options fetch new  ","@options fetch new  update "]}," Paperclip Geometry scale_to":{"type":"method","name":"scale_to","children":[],"call":["Paperclip Geometry  new ","(send\n  (send\n    (self) :height) :*\n  (lvar :scale)) round "," height * "," height ","(send\n  (send\n    (self) :width) :*\n  (lvar :scale)) round "," width * "," width ","(send\n  (send\n    (send\n      (lvar :new_geometry) :width) :to_f) :/\n  (send\n    (send\n      (self) :width) :to_f)) min ","new_geometry height to_f / "," height to_f ","new_geometry height to_f ","new_geometry height ","new_geometry width to_f / "," width to_f ","new_geometry width to_f ","new_geometry width ","(send\n  (send\n    (self) :height) :*\n  (lvar :(send\n  (send\n    (send\n      (lvar :new_geometry) :width) :to_f) :/\n  (send\n    (send\n      (self) :width) :to_f)) min )) round ","(send\n  (send\n    (self) :width) :*\n  (lvar :(send\n  (send\n    (send\n      (lvar :new_geometry) :width) :to_f) :/\n  (send\n    (send\n      (self) :width) :to_f)) min )) round "]}," Paperclip Geometry resize_to":{"type":"method","name":"resize_to","children":[],"call":[" scale_to ","new_geometry height <= "," height ","new_geometry height ","new_geometry width <= "," width ","new_geometry width ","new_geometry height >= ","new_geometry width >= ","new_geometry modifier ","Paperclip Geometry  parse ","Paperclip Geometry  parse  height <= ","Paperclip Geometry  parse  height ","Paperclip Geometry  parse  width <= ","Paperclip Geometry  parse  width ","Paperclip Geometry  parse  height >= ","Paperclip Geometry  parse  width >= ","Paperclip Geometry  parse  modifier "]}," Paperclip UriAdapter copy_to_tempfile":{"type":"method","name":"copy_to_tempfile","children":[],"call":[" destination "," destination rewind "," destination write ","src read ","16 * ","src close "]}," Paperclip UriAdapter cache_current_values":{"type":"method","name":"cache_current_values","children":[],"call":["@content size ","@content content_type ","@content respond_to? ","@original_filename strip ","@target path split last ","@target path split ","@target path "," original_filename= "," default_filename "," filename_from_path "," filename_from_content_disposition "," content_type= "," content_type_from_content ","@original_filename strip  strip ","@target path split last  strip "]}," Paperclip UriAdapter download_content":{"type":"method","name":"download_content","children":[],"call":[" open ","(pair\n  (sym :read_timeout)\n  (send\n    (send\n      (const nil :Paperclip) :options) :[]\n    (sym :read_timeout))) compact ","Paperclip  options [] ","Paperclip  options ","(pair\n  (sym :read_timeout)\n  (send\n    (send\n      (const nil :Paperclip) :(pair\n  (sym :read_timeout)\n  (send\n    (send\n      (const nil :Paperclip) :options) :[]\n    (sym :read_timeout))) compact ) :[]\n    (sym :read_timeout))) compact ","Paperclip  (pair\n  (sym :read_timeout)\n  (send\n    (send\n      (const nil :Paperclip) :options) :[]\n    (sym :read_timeout))) compact  [] ","Paperclip  (pair\n  (sym :read_timeout)\n  (send\n    (send\n      (const nil :Paperclip) :options) :[]\n    (sym :read_timeout))) compact  "]}," Paperclip UriAdapter initialize":{"type":"method","name":"initialize","children":[],"call":[" copy_to_tempfile "," cache_current_values "," download_content "]}," Paperclip AbstractAdapter inspect":{"type":"method","name":"inspect","children":[],"call":[" original_filename "," class "]}," Paperclip ContentTypeDetector type_from_file_command":{"type":"method","name":"type_from_file_command","children":[],"call":["type split [] ","type split ","type match ","Paperclip  log ","Paperclip  run ","FileCommandContentTypeDetector  new detect ","FileCommandContentTypeDetector  new "]}," Paperclip ContentTypeDetector best_type_match":{"type":"method","name":"best_type_match","children":[],"call":["(or\n  (send\n    (lvar :official_types) :first)\n  (send\n    (send nil :possible_types) :first)) content_type "," possible_types first "," possible_types ","official_types first ","type content_type match ","type content_type "," possible_types reject "]}," Paperclip ContentTypeDetector multiple?":{"type":"method","name":"multiple?","children":[],"call":[" possible_types length > "," possible_types length "," possible_types "]}," Paperclip ContentTypeDetector match?":{"type":"method","name":"match?","children":[],"call":[" possible_types length > "," possible_types length "," possible_types "]}," Paperclip ContentTypeDetector possible_types":{"type":"method","name":"possible_types","children":[],"call":["MIME Types  type_for ","MIME Types  type_for collect "]}," Paperclip ContentTypeDetector blank?":{"type":"method","name":"blank?","children":[],"call":["@filename empty? ","@filename nil? "]}," Paperclip ContentTypeDetector empty?":{"type":"method","name":"empty?","children":[],"call":["File  size == ","File  size ","File  exists? "]}," Paperclip ContentTypeDetector detect":{"type":"method","name":"detect","children":[],"call":["(send nil :blank?) to_s "," best_type_match "," possible_types first "," possible_types "," multiple? ! "," multiple? "," type_from_file_command "," match? ! "," match? "," empty? "," blank? ","(send nil :blank_name?) to_s "," empty_file? "," blank_name? "," unofficial_type_matches first "," unofficial_type_matches "," unofficial_type_matches any? "," official_type_matches first "," official_type_matches "," official_type_matches any? "," calculated_type_matches first "," calculated_type_matches "," calculated_type_matches any? "," type_from_file_contents "]}," Paperclip ContentTypeDetector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Paperclip Attachment has_enabled_but_unset_created_at?":{"type":"method","name":"has_enabled_but_unset_created_at?","children":[],"call":[" instance_read ! "," instance_read "," able_to_store_created_at? "]}," Paperclip Attachment able_to_store_created_at?":{"type":"method","name":"able_to_store_created_at?","children":[],"call":["@instance respond_to? ","(begin\n  (send nil :name)) to_sym "," name "]}," Paperclip Attachment created_at":{"type":"method","name":"created_at","children":[],"call":["time to_f to_i ","time to_f "," instance_read "," able_to_store_created_at? "," instance_read  to_f to_i "," instance_read  to_f "]}," Paperclip Storage Filesystem copy_to_local_file":{"type":"method","name":"copy_to_local_file","children":[],"call":["FileUtils  cp "," path "]}," Paperclip AbstractAdapter original_filename=":{"type":"method","name":"original_filename=","children":[],"call":["new_filename gsub "]}," Paperclip Validators AttachmentContentTypeValidator forbidden_types":{"type":"method","name":"forbidden_types","children":[],"call":["(send\n  (send nil :options) :[]\n  (sym :not)) flatten compact ","(send\n  (send nil :options) :[]\n  (sym :not)) flatten "," options [] "," options "]}," Paperclip Validators AttachmentContentTypeValidator allowed_types":{"type":"method","name":"allowed_types","children":[],"call":["(send\n  (send nil :options) :[]\n  (sym :content_type)) flatten compact ","(send\n  (send nil :options) :[]\n  (sym :content_type)) flatten "," options [] "," options "]}," Paperclip Validators AttachmentContentTypeValidator mark_invalid":{"type":"method","name":"mark_invalid","children":[],"call":["record errors add "," options merge ","types join "," options ","record errors "]}," Paperclip Validators AttachmentContentTypeValidator validate_blacklist":{"type":"method","name":"validate_blacklist","children":[],"call":[" mark_invalid "," forbidden_types ","type === "," forbidden_types any? "," forbidden_types present? "]}," Paperclip Validators AttachmentContentTypeValidator validate_whitelist":{"type":"method","name":"validate_whitelist","children":[],"call":[" mark_invalid "," allowed_types ","type === "," allowed_types none? "," allowed_types present? "]}," Paperclip Storage S3 merge_s3_headers":{"type":"method","name":"merge_s3_headers","children":[],"call":["s3_headers []= ","name to_s downcase sub tr to_sym ","name to_s downcase sub tr ","name to_s downcase sub ","name to_s downcase ","name to_s ","s3_metadata []= ","1 downcase ","http_headers inject ","http_headers call "," instance ","http_headers respond_to? ","http_headers nil? ","http_headers call  inject ","http_headers call  call ","http_headers call  respond_to? ","http_headers call  nil? "]}," Paperclip Storage S3 obtain_s3_instance_for":{"type":"method","name":"obtain_s3_instance_for","children":[],"call":["AWS S3  new ","instances [] ","Thread  current [] ","Thread  current "," Aws S3 Resource  new ","AWS_CLASS S3 Resource  new "]}," Paperclip UploadedFileAdapter determine_content_type":{"type":"method","name":"determine_content_type","children":[],"call":[" content_type_detector new detect "," content_type_detector new ","@target path "," content_type_detector ","@target content_type to_s strip ","@target content_type to_s ","@target content_type ","  content_type_detector new detect _detector new detect "," @target content_type to_s strip _detector new detect ","  content_type_detector new detect _detector new "," @target content_type to_s strip _detector new ","  content_type_detector new detect _detector "," @target content_type to_s strip _detector ","@target  content_type_detector new detect  to_s strip ","@target @target content_type to_s strip  to_s strip ","@target  content_type_detector new detect  to_s ","@target @target content_type to_s strip  to_s ","@target  content_type_detector new detect  ","@target @target content_type to_s strip  "]}," Paperclip UploadedFileAdapter content_type_detector":{"type":"method","name":"content_type_detector","children":[],"call":[" class content_type_detector "," class "]}," Paperclip Helpers check_for_path_clash":{"type":"method","name":"check_for_path_clash","children":[],"call":["@names_path []= "," log ","@names_path [] [] ","@names_path [] ","@names_path [] [] !~ ","@names_path [] [] != ","@names_path [] [] == ","Attachment  default_options [] ","Attachment  default_options "]}," Paperclip GeometryParser match":{"type":"method","name":"match","children":[],"call":["actual_match [] ","@string match "]}," Paperclip GeometryParser make":{"type":"method","name":"make","children":[],"call":["Geometry  new "," match "]}," Paperclip GeometryParser initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Paperclip GeometryDetector raise_because_imagemagick_missing":{"type":"method","name":"raise_because_imagemagick_missing","children":[],"call":[" raise ","Errors CommandNotFoundError  new "]}," Paperclip GeometryDetector raise_if_blank_file":{"type":"method","name":"raise_if_blank_file","children":[],"call":[" raise ","Errors NotIdentifiedByImageMagickError  new "," path blank? "," path "]}," Paperclip GeometryDetector path":{"type":"method","name":"path","children":[],"call":["@file path ","@file respond_to? "]}," Paperclip GeometryDetector geometry_string":{"type":"method","name":"geometry_string","children":[],"call":[" raise_because_imagemagick_missing ","Paperclip  run "," path "," silence_stream ","Paperclip  options [] ","Paperclip  options "]}," Paperclip GeometryDetector make":{"type":"method","name":"make","children":[],"call":[" raise ","Errors NotIdentifiedByImageMagickError  new ","GeometryParser  new make ","GeometryParser  new "," geometry_string strip "," geometry_string "," GeometryParser  new make _string strip "," GeometryParser  new make _string "]}," Paperclip GeometryDetector initialize":{"type":"method","name":"initialize","children":[],"call":[" raise_if_blank_file "]}," Paperclip Geometry auto_orient":{"type":"method","name":"auto_orient","children":[],"call":["EXIF_ROTATED_ORIENTATION_VALUES  include? "]}," Paperclip FileCommandContentTypeDetector type_from_file_command":{"type":"method","name":"type_from_file_command","children":[],"call":["type split [] ","type split ","type match ","type nil? ","Paperclip  log ","Paperclip  run "]}," Paperclip FileCommandContentTypeDetector detect":{"type":"method","name":"detect","children":[],"call":[" type_from_file_command "]}," Paperclip FileCommandContentTypeDetector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Paperclip Attachment blank?":{"type":"method","name":"blank?","children":[],"call":[" present? ! "," present? "]}," Paperclip Attachment only_process":{"type":"method","name":"only_process","children":[],"call":["only_process map ","only_process call ","only_process respond_to? ","@options [] dup ","@options [] ","only_process call  map ","@options [] dup  map ","only_process call  call ","@options [] dup  call ","only_process call  respond_to? ","@options [] dup  respond_to? "]}," Paperclip Attachment as_json":{"type":"method","name":"as_json","children":[],"call":[" to_s "," default_style ","options [] "]}," Paperclip Interpolations plural_cache":{"type":"method","name":"plural_cache","children":[],"call":[]}," Paperclip Interpolations PluralCache underscore_and_pluralize":{"type":"method","name":"underscore_and_pluralize","children":[],"call":["word underscore pluralize ","word underscore ","@cache [] "]}," Paperclip Interpolations PluralCache pluralize":{"type":"method","name":"pluralize","children":[],"call":["word pluralize ","@cache [] "]}," Paperclip Interpolations PluralCache initialize":{"type":"method","name":"initialize","children":[],"call":[" compare_by_identity "]}," Paperclip ContentTypeDetector blank_name?":{"type":"method","name":"blank_name?","children":[],"call":["@filename empty? ","@filename nil? ","@filepath empty? ","@filepath nil? "]}," Paperclip ContentTypeDetector empty_file?":{"type":"method","name":"empty_file?","children":[],"call":["File  size == ","File  size ","File  exists? ","File  exist? "]}," Paperclip Attachment expiring_url":{"type":"method","name":"expiring_url","children":[],"call":[" url "]}," Paperclip Validators ClassMethods create_validating_before_filter":{"type":"method","name":"create_validating_before_filter","children":[],"call":["validator_class new validate ","validator_class new ","options dup "," send ","options delete "]}," Paperclip Validators ClassMethods validate_before_processing":{"type":"method","name":"validate_before_processing","children":[],"call":[" create_validating_before_filter ","options []= ","attributes each ","options delete ","options dup ","options dup  []= ","options delete  each ","options dup  delete ","options dup  dup "]}," Paperclip Validators AttachmentPresenceValidator validate_each":{"type":"method","name":"validate_each","children":[],"call":["record errors add "," options ","record errors ","record send blank? ","record send "]}," Paperclip Tasks Attachments definitions_for":{"type":"method","name":"definitions_for","children":[],"call":["@attachments [] "]}," Paperclip Tasks Attachments each_definition":{"type":"method","name":"each_definition","children":[],"call":["attachments each ","@attachments each "]}," Paperclip Tasks Attachments names_for":{"type":"method","name":"names_for","children":[],"call":["@attachments [] keys ","@attachments [] "]}," Paperclip Tasks Attachments clear":{"type":"method","name":"clear","children":[],"call":["h []= ","Hash  new "]}," Paperclip Tasks Attachments add":{"type":"method","name":"add","children":[],"call":["@attachments [] []= ","@attachments [] "]}," Paperclip Tasks Attachments initialize":{"type":"method","name":"initialize","children":[],"call":[" clear "]}," Paperclip EmptyStringAdapter assignment?":{"type":"method","name":"assignment?","children":[],"call":[]}," Paperclip EmptyStringAdapter nil?":{"type":"method","name":"nil?","children":[],"call":[]}," Paperclip EmptyStringAdapter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Paperclip DataUriAdapter cache_current_values":{"type":"method","name":"cache_current_values","children":[],"call":["@target size ","StringIO  new ","Base64  decode64 ","data_uri_parts [] ","@target_uri match "," original_filename= ","StringIO  new  size ","StringIO  new _uri match "]}," Paperclip DataUriAdapter initialize":{"type":"method","name":"initialize","children":[],"call":[" copy_to_tempfile "," cache_current_values "," extract_target "]}," Paperclip AbstractAdapter assignment?":{"type":"method","name":"assignment?","children":[],"call":[]}," Paperclip AbstractAdapter nil?":{"type":"method","name":"nil?","children":[],"call":[]}," Paperclip HasAttachedFile add_paperclip_callbacks":{"type":"method","name":"add_paperclip_callbacks","children":[],"call":["@klass send "]}," Paperclip HasAttachedFile add_active_record_callbacks":{"type":"method","name":"add_active_record_callbacks","children":[],"call":[" send send "," send ","@klass send ","@klass respond_to? "]}," Paperclip HasAttachedFile register_with_rake_tasks":{"type":"method","name":"register_with_rake_tasks","children":[],"call":["Paperclip Tasks Attachments  add "]}," Paperclip HasAttachedFile define_query":{"type":"method","name":"define_query","children":[],"call":[" send file? "," send ","@klass send "]}," Paperclip HasAttachedFile define_setter":{"type":"method","name":"define_setter","children":[],"call":[" send assign "," send ","@klass send "]}," Paperclip HasAttachedFile define_getter":{"type":"method","name":"define_getter","children":[],"call":["attachment to_s ","args first ","args length > ","args length "," instance_variable_set ","Attachment  new ","attachment nil? "," instance_variable_get ","@klass send ","Attachment  new  to_s "," instance_variable_get  to_s ","Attachment  new  nil? "," instance_variable_get  nil? "]}," Paperclip HasAttachedFile define_flush_errors":{"type":"method","name":"define_flush_errors","children":[],"call":["attachment send ","record send ","@klass send ","record send  send "]}," Paperclip HasAttachedFile define":{"type":"method","name":"define","children":[],"call":[" add_paperclip_callbacks "," add_active_record_callbacks "," register_with_rake_tasks "," define_query "," define_setter "," define_getter "," define_flush_errors "," register_new_attachment "," define_getters "," add_required_validations "]}," Paperclip HasAttachedFile initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Paperclip HasAttachedFile define_on":{"type":"method","name":"define_on","children":[],"call":[]}," Paperclip FilenameCleaner call":{"type":"method","name":"call","children":[],"call":["filename gsub "]}," Paperclip FilenameCleaner initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Paperclip Attachment filename_cleaner":{"type":"method","name":"filename_cleaner","children":[],"call":["FilenameCleaner  new ","@options [] "]}," Paperclip Attachment process_options":{"type":"method","name":"process_options","children":[],"call":["(lvar :style_options) compact join ","(lvar :style_options) compact ","style_options call "," instance ","style_options respond_to? ","@options [] [] ","@options [] ","all_options call ","all_options respond_to? ","(lvar :style_options call ) compact join ","(lvar :@options [] [] ) compact join ","(lvar :style_options call ) compact ","(lvar :@options [] [] ) compact ","style_options call  call ","@options [] []  call ","style_options call  respond_to? ","@options [] []  respond_to? ","all_options call  call ","all_options call  respond_to? "]}," Paperclip HasAttachedFile ClassMethods attachment_definitions":{"type":"method","name":"attachment_definitions","children":[],"call":["Paperclip AttachmentRegistry  definitions_for "]}," Paperclip HasAttachedFile register_new_attachment":{"type":"method","name":"register_new_attachment","children":[],"call":["Paperclip AttachmentRegistry  register "]}," Paperclip HasAttachedFile define_class_getter":{"type":"method","name":"define_class_getter","children":[],"call":["@klass extend "]}," Paperclip HasAttachedFile define_instance_getter":{"type":"method","name":"define_instance_getter","children":[],"call":["attachment to_s ","args first ","args length > ","args length "," instance_variable_set ","Attachment  new ","attachment nil? "," instance_variable_get ","@klass send ","Attachment  new  to_s "," instance_variable_get  to_s ","Attachment  new  nil? "," instance_variable_get  nil? "]}," Paperclip HasAttachedFile define_getters":{"type":"method","name":"define_getters","children":[],"call":[" define_class_getter "," define_instance_getter "]}," Paperclip ContentTypeDetector unofficial_type_matches":{"type":"method","name":"unofficial_type_matches","children":[],"call":["content_type match "," possible_types select "," possible_types "]}," Paperclip ContentTypeDetector official_type_matches":{"type":"method","name":"official_type_matches","children":[],"call":["content_type match "," possible_types reject "," possible_types "]}," Paperclip ContentTypeDetector calculated_type_matches":{"type":"method","name":"calculated_type_matches","children":[],"call":["content_type == "," type_from_file_command "," possible_types select "," possible_types "," type_from_file_contents "]}," Paperclip AttachmentRegistry definitions_for":{"type":"method","name":"definitions_for","children":[],"call":["@attachments [] ","inherited_definitions merge! ","klass ancestors each_with_object ","klass ancestors ","inherited_definitions deep_merge! ","parent_classes each_with_object ","klass ancestors reverse ","klass ancestors reverse  each_with_object "]}," Paperclip AttachmentRegistry each_definition":{"type":"method","name":"each_definition","children":[],"call":["attachments each ","@attachments each "]}," Paperclip AttachmentRegistry names_for":{"type":"method","name":"names_for","children":[],"call":["@attachments [] keys ","@attachments [] "]}," Paperclip AttachmentRegistry clear":{"type":"method","name":"clear","children":[],"call":["h []= ","Hash  new "]}," Paperclip AttachmentRegistry register":{"type":"method","name":"register","children":[],"call":["@attachments [] []= ","@attachments [] "]}," Paperclip AttachmentRegistry initialize":{"type":"method","name":"initialize","children":[],"call":[" clear "]}," Paperclip HttpUrlProxyAdapter initialize":{"type":"method","name":"initialize","children":[],"call":[" URI ","URI  escape ","target == ","URI  unescape "]}," Paperclip Storage Fog convert_time":{"type":"method","name":"convert_time","children":[],"call":["Time  now + ","Time  now ","time is_a? ","Time  now +  is_a? "]}," Paperclip Validators HelperMethods validates_media_type_spoof_detection":{"type":"method","name":"validates_media_type_spoof_detection","children":[],"call":[" validate_before_processing ","options dup "," validates_with "," _merge_attributes "," _merge_attributes  dup "]}," Paperclip Validators MediaTypeSpoofDetectionValidator validate_each":{"type":"method","name":"validate_each","children":[],"call":["record errors add ","record errors ","Paperclip MediaTypeSpoofDetector  using spoofed? ","Paperclip MediaTypeSpoofDetector  using ","value original_filename ","Paperclip  io_adapters for ","Paperclip  io_adapters ","value content_type ","adapter tempfile close ","adapter tempfile ","Paperclip  io_Paperclip  io_adapters for s for ","Paperclip  io_Paperclip  io_adapters for s ","Paperclip  io_adapters for  tempfile close ","Paperclip  io_adapters for  tempfile "]}," Paperclip Validators AttachmentSizeValidator helper_method_name":{"type":"method","name":"helper_method_name","children":[],"call":[]}," Paperclip Validators AttachmentPresenceValidator helper_method_name":{"type":"method","name":"helper_method_name","children":[],"call":[]}," Paperclip Validators HelperMethods do_not_validate_attachment_file_type":{"type":"method","name":"do_not_validate_attachment_file_type","children":[],"call":[" validates_with ","options dup "," _merge_attributes "," _merge_attributes  dup "]}," Paperclip Validators AttachmentFileTypeIgnoranceValidator helper_method_name":{"type":"method","name":"helper_method_name","children":[],"call":[]}," Paperclip Validators AttachmentFileTypeIgnoranceValidator validate_each":{"type":"method","name":"validate_each","children":[],"call":[]}," Paperclip Validators HelperMethods validates_attachment_file_name":{"type":"method","name":"validates_attachment_file_name","children":[],"call":[" validate_before_processing ","options dup "," validates_with "," _merge_attributes "," _merge_attributes  dup "]}," Paperclip Validators AttachmentFileNameValidator check_validity!":{"type":"method","name":"check_validity!","children":[],"call":[" raise "," options has_key? "," options "]}," Paperclip Validators AttachmentFileNameValidator forbidden":{"type":"method","name":"forbidden","children":[],"call":["(send\n  (send nil :options) :[]\n  (sym :not)) flatten compact ","(send\n  (send nil :options) :[]\n  (sym :not)) flatten "," options [] "," options "]}," Paperclip Validators AttachmentFileNameValidator allowed":{"type":"method","name":"allowed","children":[],"call":["(send\n  (send nil :options) :[]\n  (sym :matches)) flatten compact ","(send\n  (send nil :options) :[]\n  (sym :matches)) flatten "," options [] "," options "]}," Paperclip Validators AttachmentFileNameValidator mark_invalid":{"type":"method","name":"mark_invalid","children":[],"call":["record errors add "," options merge ","patterns join "," options ","record errors "]}," Paperclip Validators AttachmentFileNameValidator validate_blacklist":{"type":"method","name":"validate_blacklist","children":[],"call":[" mark_invalid "," forbidden ","type === "," forbidden any? "," forbidden present? "]}," Paperclip Validators AttachmentFileNameValidator validate_whitelist":{"type":"method","name":"validate_whitelist","children":[],"call":[" mark_invalid "," allowed ","type === "," allowed none? "," allowed present? "]}," Paperclip Validators AttachmentFileNameValidator validate_each":{"type":"method","name":"validate_each","children":[],"call":["record errors add ","record errors ","record errors [] each ","record errors [] ","record errors include? "," validate_blacklist "," validate_whitelist "," options [] "," options ","value blank? ","value nil? ","record send ","(begin\n  (lvar :attribute)) to_sym ","attribute to_sym ","record send  blank? ","record send  nil? ","(begin\n  (lvar :(begin\n  (lvar :attribute)) to_sym )) to_sym ","(begin\n  (lvar :attribute)) to_sym  to_sym "]}," Paperclip Validators AttachmentFileNameValidator helper_method_name":{"type":"method","name":"helper_method_name","children":[],"call":[]}," Paperclip Validators AttachmentFileNameValidator initialize":{"type":"method","name":"initialize","children":[],"call":["options []= ","options has_key? "]}," Paperclip Validators AttachmentContentTypeValidator helper_method_name":{"type":"method","name":"helper_method_name","children":[],"call":[]}," Paperclip TempfileFactory random_name":{"type":"method","name":"random_name","children":[],"call":["SecureRandom  uuid "]}," Paperclip MediaTypeSpoofDetector type_from_file_command":{"type":"method","name":"type_from_file_command","children":[],"call":["Paperclip  run ","@file path ","Paperclip  run split first ","Paperclip  run split "]}," Paperclip MediaTypeSpoofDetector calculated_media_type":{"type":"method","name":"calculated_media_type","children":[],"call":[" type_from_file_command split first "," type_from_file_command split "," type_from_file_command "," calculated_content_type split first "," calculated_content_type split "," calculated_content_type "]}," Paperclip MediaTypeSpoofDetector supplied_file_media_type":{"type":"method","name":"supplied_file_media_type","children":[],"call":["MIME Types  type_for collect ","MIME Types  type_for "]}," Paperclip MediaTypeSpoofDetector spoofed?":{"type":"method","name":"spoofed?","children":[],"call":[" supplied_file_media_type include? ! "," supplied_file_media_type include? "," calculated_media_type "," supplied_file_media_type ","@name blank? ! ","@name blank? ","Paperclip  log "," calculated_content_type "," supplied_file_content_types ","File  basename "," mapping_override_mismatch? "," media_type_mismatch? ","@name present? "," has_extension? "," has_name? "," content_types_from_name "," supplied_content_type "," content_types_from_name map "]}," Paperclip MediaTypeSpoofDetector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Paperclip MediaTypeSpoofDetector using":{"type":"method","name":"using","children":[],"call":[]}," Paperclip StringioAdapter extension_for":{"type":"method","name":"extension_for","children":[],"call":["type extensions first ","type extensions ","MIME Types  [] first ","MIME Types  [] ","MIME Types  [] first  extensions first ","MIME Types  [] first  extensions "]}," Paperclip DataUriAdapter extract_target":{"type":"method","name":"extract_target","children":[],"call":["StringIO  new ","Base64  decode64 ","data_uri_parts [] ","uri match "]}," Paperclip HasAttachedFile add_required_validations":{"type":"method","name":"add_required_validations","children":[],"call":["@klass validates_media_type_spoof_detection "," send dirty? "," send "," lambda ","instance send dirty? ","instance send ","@options [] != ","@options [] ","options [] != ","options [] ","Paperclip Attachment  default_options deep_merge ","Paperclip Attachment  default_options ","@Paperclip Attachment  default_options deep_merge  [] != ","@Paperclip Attachment  default_options deep_merge  [] ","Paperclip Attachment  default_options deep_merge  [] != ","Paperclip Attachment  default_options deep_merge  [] ","Paperclip Attachment  default_Paperclip Attachment  default_options deep_merge  deep_merge ","Paperclip Attachment  default_Paperclip Attachment  default_options deep_merge  "]}," Paperclip Attachment ensure_required_validations!":{"type":"method","name":"ensure_required_validations!","children":[],"call":[" raise ","(send\n  (send nil :active_validator_classes) :&\n  (const\n    (const nil :Paperclip) :REQUIRED_VALIDATORS)) empty? "," active_validator_classes & "," active_validator_classes "," missing_required_validator? "]}," Paperclip Attachment active_validator_classes":{"type":"method","name":"active_validator_classes","children":[],"call":["@instance class validators map ","@instance class validators ","@instance class "]}," Paperclip Attachment staged?":{"type":"method","name":"staged?","children":[],"call":["@queued_for_write empty? ! ","@queued_for_write empty? "]}," Paperclip Attachment staged_path":{"type":"method","name":"staged_path","children":[],"call":["@queued_for_write [] path ","@queued_for_write [] "," staged? "]}," Paperclip Style default_format":{"type":"method","name":"default_format","children":[],"call":["base call "," name "," attachment ","base respond_to? "," attachment options [] "," attachment options "," attachment options []  call "," attachment options []  respond_to? "]}," Paperclip MediaTypeSpoofDetector filename_extension":{"type":"method","name":"filename_extension","children":[],"call":["File  extname sub to_sym ","File  extname sub ","File  extname ","@name to_s downcase ","@name to_s "]}," Paperclip MediaTypeSpoofDetector mapped_content_type":{"type":"method","name":"mapped_content_type","children":[],"call":["Paperclip  options [] [] "," filename_extension ","Paperclip  options [] ","Paperclip  options "]}," Paperclip MediaTypeSpoofDetector calculated_content_type":{"type":"method","name":"calculated_content_type","children":[],"call":[" type_from_file_command chomp "," type_from_file_command "]}," Paperclip MediaTypeSpoofDetector supplied_file_content_types":{"type":"method","name":"supplied_file_content_types","children":[],"call":["MIME Types  type_for collect ","MIME Types  type_for "]}," Paperclip MediaTypeSpoofDetector supplied_file_media_types":{"type":"method","name":"supplied_file_media_types","children":[],"call":["MIME Types  type_for collect ","MIME Types  type_for "]}," Paperclip MediaTypeSpoofDetector mapping_override_mismatch?":{"type":"method","name":"mapping_override_mismatch?","children":[],"call":[" mapped_content_type != "," calculated_content_type "," mapped_content_type "," Array include? ! "," Array include? "," Array "]}," Paperclip MediaTypeSpoofDetector media_type_mismatch?":{"type":"method","name":"media_type_mismatch?","children":[],"call":[" supplied_file_media_types include? ! "," supplied_file_media_types include? "," calculated_media_type "," supplied_file_media_types "," calculated_type_mismatch? "," supplied_type_mismatch? "," extension_type_mismatch? "]}," Paperclip Callbacks Defining callback_terminator":{"type":"method","name":"callback_terminator","children":[],"call":["result == "," lambda "," ActiveSupport VERSION STRING  >= "]}," Paperclip Storage S3 s3_storage_class":{"type":"method","name":"s3_storage_class","children":[],"call":["@s3_storage_class [] "]}," Paperclip Storage S3 set_storage_class":{"type":"method","name":"set_storage_class","children":[],"call":["storage_class respond_to? "]}," Paperclip MediaTypeSpoofDetector has_extension?":{"type":"method","name":"has_extension?","children":[],"call":["File  extname present? ","File  extname "]}," Paperclip MediaTypeSpoofDetector has_name?":{"type":"method","name":"has_name?","children":[],"call":["@name present? "]}," Paperclip Shoulda Matchers ValidateAttachmentSizeMatcher failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[]}," Paperclip Shoulda Matchers ValidateAttachmentPresenceMatcher failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[]}," Paperclip Shoulda Matchers HaveAttachedFileMatcher failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":[]}," Paperclip Interpolations dotextension":{"type":"method","name":"dotextension","children":[],"call":["ext empty? "," extension "," extension  empty? ","  extension ension "]}," Paperclip Attachment updater":{"type":"method","name":"updater","children":[],"call":[" name "]}," Paperclip Attachment reset_updater":{"type":"method","name":"reset_updater","children":[],"call":[" instance send "," updater "," instance "," instance respond_to? "]}," Paperclip Attachment reset_file_if_original_reprocessed":{"type":"method","name":"reset_file_if_original_reprocessed","children":[],"call":[" reset_updater "," assign_fingerprint ","@queued_for_write [] fingerprint ","@queued_for_write [] "," instance_write ","@queued_for_write [] size "]}," Paperclip Attachment dirty!":{"type":"method","name":"dirty!","children":[],"call":[]}," Paperclip Attachment post_process_file":{"type":"method","name":"post_process_file","children":[],"call":[" post_process "," only_process "," post_processing "," dirty! "]}," Paperclip Attachment assign_timestamps":{"type":"method","name":"assign_timestamps","children":[],"call":[" instance_write ","Time  now "," has_enabled_but_unset_created_at? "]}," Paperclip Attachment assign_fingerprint":{"type":"method","name":"assign_fingerprint","children":[],"call":[" instance_write "," instance_respond_to? "]}," Paperclip Attachment assign_file_information":{"type":"method","name":"assign_file_information","children":[],"call":[" instance_write ","@file size ","@file content_type to_s strip ","@file content_type to_s ","@file content_type "," cleanup_filename ","@file original_filename "]}," Paperclip Attachment assign_attributes":{"type":"method","name":"assign_attributes","children":[],"call":[" assign_timestamps "," assign_fingerprint ","@file fingerprint "," assign_file_information ","@queued_for_write []= "]}," Paperclip Attachment missing_required_validator?":{"type":"method","name":"missing_required_validator?","children":[],"call":["(send\n  (send nil :active_validator_classes) :&\n  (send nil :required_validator_classes)) empty? "," active_validator_classes & "," required_validator_classes "," active_validator_classes ","(send\n  (send\n    (send nil :active_validator_classes) :flat_map\n    (block-pass\n      (sym :ancestors))) :&\n  (const\n    (const nil :Paperclip) :REQUIRED_VALIDATORS)) empty? "," active_validator_classes flat_map & "," active_validator_classes flat_map "]}," Paperclip Attachment required_validator_classes":{"type":"method","name":"required_validator_classes","children":[],"call":["Paperclip REQUIRED_VALIDATORS  + ","Paperclip REQUIRED_VALIDATORS  flat_map "]}," Paperclip UrlGenerator escape_regex":{"type":"method","name":"escape_regex","children":[],"call":[]}," Paperclip Storage Fog scheme":{"type":"method","name":"scheme","children":[],"call":[" fog_credentials [] "," fog_credentials "]}," Paperclip Attachment unlink_files":{"type":"method","name":"unlink_files","children":[],"call":["file unlink ","File  exist? ","file path ","file path present? ","file respond_to? ","file close ","file closed? "," Array each "," Array "]}," Paperclip MediaTypeSpoofDetector media_types_from_name":{"type":"method","name":"media_types_from_name","children":[],"call":[" content_types_from_name collect "," content_types_from_name "]}," Paperclip MediaTypeSpoofDetector content_types_from_name":{"type":"method","name":"content_types_from_name","children":[],"call":["MIME Types  type_for "]}," Paperclip MediaTypeSpoofDetector supplied_media_type":{"type":"method","name":"supplied_media_type","children":[],"call":["@content_type split first ","@content_type split "]}," Paperclip MediaTypeSpoofDetector supplied_content_type":{"type":"method","name":"supplied_content_type","children":[],"call":[]}," Paperclip MediaTypeSpoofDetector calculated_type_mismatch?":{"type":"method","name":"calculated_type_mismatch?","children":[],"call":[" media_types_from_name include? ! "," media_types_from_name include? "," calculated_media_type "," media_types_from_name "," calculated_content_type include? ! "," calculated_content_type include? "," supplied_media_type "," calculated_content_type "," supplied_media_type present? "]}," Paperclip MediaTypeSpoofDetector supplied_type_mismatch?":{"type":"method","name":"supplied_type_mismatch?","children":[],"call":[" media_types_from_name include? ! "," media_types_from_name include? "," supplied_media_type "," media_types_from_name "," supplied_media_type present? "]}," Paperclip RailsEnvironment rails_environment_exists?":{"type":"method","name":"rails_environment_exists?","children":[],"call":["Rails  respond_to? "]}," Paperclip RailsEnvironment rails_exists?":{"type":"method","name":"rails_exists?","children":[],"call":["Object  const_defined? "]}," Paperclip RailsEnvironment get":{"type":"method","name":"get","children":[],"call":["Rails  env "," rails_environment_exists? "," rails_exists? "]}," Paperclip ContentTypeDetector type_from_mime_magic":{"type":"method","name":"type_from_mime_magic","children":[],"call":["MimeMagic  by_magic try ","MimeMagic  by_magic ","File  open "]}," Paperclip ContentTypeDetector type_from_file_contents":{"type":"method","name":"type_from_file_contents","children":[],"call":["Paperclip  log "," type_from_file_command "," type_from_mime_magic "]}," Paperclip Interpolations interpolators_cache":{"type":"method","name":"interpolators_cache","children":[],"call":[]}," Paperclip Interpolations PluralCache underscore_and_pluralize_class":{"type":"method","name":"underscore_and_pluralize_class","children":[],"call":["klass name underscore pluralize ","klass name underscore ","klass name ","@klass_cache [] "]}," Paperclip Interpolations PluralCache pluralize_symbol":{"type":"method","name":"pluralize_symbol","children":[],"call":["symbol to_s downcase pluralize ","symbol to_s downcase ","symbol to_s ","@symbol_cache [] "]}," Paperclip Deprecations warn":{"type":"method","name":"warn","children":[],"call":["ActiveSupport Deprecation  warn "]}," Paperclip Deprecations aws_sdk_version":{"type":"method","name":"aws_sdk_version","children":[],"call":[]}," Paperclip Deprecations warn_outdated_rails":{"type":"method","name":"warn_outdated_rails","children":[],"call":[" warn "]}," Paperclip Deprecations warn_aws_sdk_v1":{"type":"method","name":"warn_aws_sdk_v1","children":[],"call":[" warn "]}," Paperclip Deprecations aws_sdk_v1?":{"type":"method","name":"aws_sdk_v1?","children":[],"call":[" aws_sdk_version < "," aws_sdk_version "]}," Paperclip Deprecations active_record_version":{"type":"method","name":"active_record_version","children":[],"call":[]}," Paperclip Deprecations check":{"type":"method","name":"check","children":[],"call":[" warn_outdated_rails "," active_record_version < "," active_record_version "," warn_aws_sdk_v1 "," aws_sdk_v1? "," active_model_version < "," active_model_version "]}," Paperclip Deprecations active_model_version":{"type":"method","name":"active_model_version","children":[],"call":[]}," Paperclip UriAdapter default_filename":{"type":"method","name":"default_filename","children":[],"call":[]}," Paperclip UriAdapter filename_from_path":{"type":"method","name":"filename_from_path","children":[],"call":["@target path split last ","@target path split ","@target path "]}," Paperclip UriAdapter filename_from_content_disposition":{"type":"method","name":"filename_from_content_disposition","children":[],"call":["@content meta [] match [] ","@content meta [] match ","@content meta [] ","@content meta ","@content meta has_key? ","matches [] ","@content meta key? ","filename split [] ","filename split ","filename match ","@content meta [] split ","@content meta [] match  [] ","filename match  [] "]}," Paperclip UriAdapter content_type_from_content":{"type":"method","name":"content_type_from_content","children":[],"call":["@content content_type ","@content respond_to? ","@content meta [] presence ","@content meta [] ","@content meta "]}," Paperclip Storage S3 style_name_as_path":{"type":"method","name":"style_name_as_path","children":[],"call":[" path sub "," path "]}," Paperclip Storage S3 s3_region":{"type":"method","name":"s3_region","children":[],"call":[" s3_credentials [] "," s3_credentials ","region call ","region is_a? ","@options [] ","region call  call ","@options []  call ","region call  is_a? ","@options []  is_a? "]}," Paperclip Storage Fog directory_name":{"type":"method","name":"directory_name","children":[],"call":["@options [] ","@options [] call ","@options [] respond_to? "]}," Paperclip Callbacks Defining hasta_la_vista_baby":{"type":"method","name":"hasta_la_vista_baby","children":[],"call":["result == ","result call == ","result call ","result respond_to? "," lambda "]}," Paperclip Thumbnail multi_frame_format?":{"type":"method","name":"multi_frame_format?","children":[],"call":["MULTI_FRAME_FORMATS  include? "]}," Paperclip Storage S3 use_accelerate_endpoint?":{"type":"method","name":"use_accelerate_endpoint?","children":[],"call":["@use_accelerate_endpoint ! ! ","@use_accelerate_endpoint ! "]}," Paperclip Storage S3 s3_prefixes_in_alias":{"type":"method","name":"s3_prefixes_in_alias","children":[],"call":["@options [] to_i ","@options [] "]}," Paperclip Storage Filesystem move_file":{"type":"method","name":"move_file","children":[],"call":["FileUtils  mv ","File  unlink ","File  identical? "]}," Paperclip UriAdapter register":{"type":"method","name":"register","children":[],"call":[]}," Paperclip UploadedFileAdapter register":{"type":"method","name":"register","children":[],"call":[]}," Paperclip StringioAdapter register":{"type":"method","name":"register","children":[],"call":[]}," Paperclip AdapterRegistry unregister":{"type":"method","name":"unregister","children":[],"call":["klass == ","@registered_handlers reject! "]}," Paperclip NilAdapter register":{"type":"method","name":"register","children":[],"call":[]}," Paperclip IdentityAdapter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Paperclip IdentityAdapter register":{"type":"method","name":"register","children":[],"call":[]}," Paperclip HttpUrlProxyAdapter register":{"type":"method","name":"register","children":[],"call":[]}," Paperclip FileAdapter register":{"type":"method","name":"register","children":[],"call":[]}," Paperclip EmptyStringAdapter register":{"type":"method","name":"register","children":[],"call":[]}," Paperclip DataUriAdapter register":{"type":"method","name":"register","children":[],"call":[]}," Paperclip AttachmentAdapter register":{"type":"method","name":"register","children":[],"call":[]}," Paperclip AbstractAdapter link_or_copy_file":{"type":"method","name":"link_or_copy_file","children":[],"call":["FileUtils  cp ","Paperclip  log ","e message ","@destination open binmode ","@destination open ","@destination close ","FileUtils  ln "]}," Paperclip AbstractAdapter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," PaperclipGenerator migration_version":{"type":"method","name":"migration_version","children":[],"call":["Rails  version start_with? ","Rails  version "]}," Paperclip MediaTypeSpoofDetector extension_type_mismatch?":{"type":"method","name":"extension_type_mismatch?","children":[],"call":[" media_types_from_name include? ! "," media_types_from_name include? "," supplied_media_type "," media_types_from_name "," has_extension? "," supplied_media_type present? "]}}