{" HashDiff node":{"type":"method","name":"node","children":[],"call":[]}," HashDiff decode_property_path":{"type":"method","name":"decode_property_path","children":[],"call":[]}," HashDiff count_nodes":{"type":"method","name":"count_nodes","children":[],"call":[]}," HashDiff similiar?":{"type":"method","name":"similiar?","children":[],"call":[]}," HashDiff changed":{"type":"method","name":"changed","children":[],"call":[]}," HashDiff unpatch":{"type":"method","name":"unpatch","children":[],"call":[]}," HashDiff patch":{"type":"method","name":"patch","children":[],"call":[]}," HashDiff lcs":{"type":"method","name":"lcs","children":[],"call":[]}," HashDiff diff_array":{"type":"method","name":"diff_array","children":[],"call":[]}," HashDiff diff":{"type":"method","name":"diff","children":[],"call":[]}," HashDiff best_diff":{"type":"method","name":"best_diff","children":[],"call":[]}," HashDiff unpatch!":{"type":"method","name":"unpatch!","children":[],"call":[]}," HashDiff patch!":{"type":"method","name":"patch!","children":[],"call":[]}," HashDiff count_diff":{"type":"method","name":"count_diff","children":[],"call":[]}," HashDiff similar?":{"type":"method","name":"similar?","children":[],"call":[]}," HashDiff comparable?":{"type":"method","name":"comparable?","children":[],"call":[]}," HashDiff compare_values":{"type":"method","name":"compare_values","children":[],"call":[]}," HashDiff custom_compare":{"type":"method","name":"custom_compare","children":[],"call":[]}," HashDiff prefix_append_array_index":{"type":"method","name":"prefix_append_array_index","children":[],"call":[]}," HashDiff prefix_append_key":{"type":"method","name":"prefix_append_key","children":[],"call":[]}," HashDiff LinearCompareArray changes":{"type":"method","name":"changes","children":[],"call":[" differences + + "," deletions reverse "," deletions "," differences + "," additions "," differences "]}," HashDiff LinearCompareArray append_differences":{"type":"method","name":"append_differences","children":[],"call":[" differences concat "," differences "]}," HashDiff LinearCompareArray append_deletion":{"type":"method","name":"append_deletion","children":[],"call":[" deletions << "," deletions ","HashDiff  prefix_append_array_index "," options "," options [] "]}," HashDiff LinearCompareArray append_addition":{"type":"method","name":"append_addition","children":[],"call":[" additions << "," additions ","HashDiff  prefix_append_array_index "," options "," options [] "]}," HashDiff LinearCompareArray append_deletions_before_match":{"type":"method","name":"append_deletions_before_match","children":[],"call":[" old_index= "," expected_additions= "," expected_additions + ","match_index - "," new_index "," expected_additions "," append_deletion "," old_array [] "," old_array ","(erange\n  (send nil :old_index)\n  (lvar :match_index)) each "," old_index "]}," HashDiff LinearCompareArray append_addititions_before_match":{"type":"method","name":"append_addititions_before_match","children":[],"call":[" new_index= "," expected_additions= "," expected_additions - ","match_index - "," new_index "," expected_additions "," append_addition "," new_array [] "," new_array ","(erange\n  (send nil :new_index)\n  (lvar :match_index)) each "]}," HashDiff LinearCompareArray index_of_match_after_deletions":{"type":"method","name":"index_of_match_after_deletions","children":[],"call":[" old_index + "," old_index ","next_difference empty? "," item_difference "," new_array [] "," new_index "," new_array "," old_array [] "," old_array ","(irange\n  (int 1)\n  (begin\n    (send\n      (send nil :expected_additions) :abs))) each "," expected_additions abs "," expected_additions "," expected_additions < "," item_difference  empty? "]}," HashDiff LinearCompareArray index_of_match_after_additions":{"type":"method","name":"index_of_match_after_additions","children":[],"call":[" new_index + "," new_index ","next_difference empty? "," item_difference "," old_index "," new_array [] "," new_array "," old_array [] "," old_array ","(irange\n  (int 1)\n  (send nil :expected_additions)) each "," expected_additions "," expected_additions > "," item_difference  empty? "]}," HashDiff LinearCompareArray item_difference":{"type":"method","name":"item_difference","children":[],"call":["HashDiff  diff "," options merge "," options ","HashDiff  prefix_append_array_index "," options [] ","HashDiff  HashDiff  prefix_append_array_index _append_array_index "]}," HashDiff LinearCompareArray compare_at_index":{"type":"method","name":"compare_at_index","children":[],"call":[" append_differences "," append_deletions_before_match "," index_of_match_after_deletions "," append_addititions_before_match "," index_of_match_after_additions ","difference empty? "," item_difference "," old_index "," new_array [] "," new_index "," new_array "," old_array [] "," old_array "," append_ item_difference s "," item_difference  empty? "," item_ item_difference  "]}," HashDiff LinearCompareArray iterated_through_both_arrays?":{"type":"method","name":"iterated_through_both_arrays?","children":[],"call":[" new_index >= "," new_array length "," new_array "," new_index "," old_index >= "," old_array length "," old_array "," old_index "]}," HashDiff LinearCompareArray extra_items_in_new_array?":{"type":"method","name":"extra_items_in_new_array?","children":[],"call":[" old_index >= "," old_array length "," old_array "," old_index "," new_index < "," new_array length "," new_array "," new_index "]}," HashDiff LinearCompareArray extra_items_in_old_array?":{"type":"method","name":"extra_items_in_old_array?","children":[],"call":[" new_index >= "," new_array length "," new_array "," new_index "," old_index < "," old_array length "," old_array "," old_index "]}," HashDiff LinearCompareArray initialize":{"type":"method","name":"initialize","children":[],"call":["(pair\n  (sym :prefix)\n  (str \"\")) merge! "]}," HashDiff LinearCompareArray call":{"type":"method","name":"call","children":[],"call":[" changes "," iterated_through_both_arrays? "," new_index= "," new_index + "," new_index "," old_index= "," old_index + "," old_index "," compare_at_index "," append_addition "," new_array [] "," new_array "," extra_items_in_new_array? "," append_deletion "," old_array [] "," old_array "," extra_items_in_old_array? "," loop "," expected_additions= "," new_array length - "," old_array length "," new_array length "," new_array empty? "," old_array empty? "]}," HashDiff diff_array_lcs":{"type":"method","name":"diff_array_lcs","children":[],"call":[]}," Hashdiff any_hash_or_array?":{"type":"method","name":"any_hash_or_array?","children":[],"call":["objb is_a? ","obja is_a? "]}," Hashdiff prefix_append_array_index":{"type":"method","name":"prefix_append_array_index","children":[],"call":[]}," Hashdiff prefix_append_key":{"type":"method","name":"prefix_append_key","children":[],"call":[]}," Hashdiff custom_compare":{"type":"method","name":"custom_compare","children":[],"call":[]}," Hashdiff comparable?":{"type":"method","name":"comparable?","children":[],"call":[]}," Hashdiff compare_values":{"type":"method","name":"compare_values","children":[],"call":[]}," Hashdiff node":{"type":"method","name":"node","children":[],"call":[]}," Hashdiff decode_property_path":{"type":"method","name":"decode_property_path","children":[],"call":[]}," Hashdiff count_nodes":{"type":"method","name":"count_nodes","children":[],"call":[]}," Hashdiff count_diff":{"type":"method","name":"count_diff","children":[],"call":[]}," Hashdiff similar?":{"type":"method","name":"similar?","children":[],"call":[]}," Hashdiff unpatch!":{"type":"method","name":"unpatch!","children":[],"call":[]}," Hashdiff patch!":{"type":"method","name":"patch!","children":[],"call":[]}," Hashdiff LinearCompareArray changes":{"type":"method","name":"changes","children":[],"call":[" differences + + "," deletions reverse "," deletions "," differences + "," additions "," differences "]}," Hashdiff LinearCompareArray append_differences":{"type":"method","name":"append_differences","children":[],"call":[" differences concat "," differences "]}," Hashdiff LinearCompareArray append_deletion":{"type":"method","name":"append_deletion","children":[],"call":[" deletions << "," deletions ","Hashdiff  prefix_append_array_index "," options "," options [] "]}," Hashdiff LinearCompareArray append_addition":{"type":"method","name":"append_addition","children":[],"call":[" additions << "," additions ","Hashdiff  prefix_append_array_index "," options "," options [] "]}," Hashdiff LinearCompareArray append_deletions_before_match":{"type":"method","name":"append_deletions_before_match","children":[],"call":[" old_index= "," expected_additions= "," expected_additions + ","match_index - "," new_index "," expected_additions "," append_deletion "," old_array [] "," old_array ","(erange\n  (send nil :old_index)\n  (lvar :match_index)) each "," old_index "]}," Hashdiff LinearCompareArray append_addititions_before_match":{"type":"method","name":"append_addititions_before_match","children":[],"call":[" new_index= "," expected_additions= "," expected_additions - ","match_index - "," new_index "," expected_additions "," append_addition "," new_array [] "," new_array ","(erange\n  (send nil :new_index)\n  (lvar :match_index)) each "]}," Hashdiff LinearCompareArray index_of_match_after_deletions":{"type":"method","name":"index_of_match_after_deletions","children":[],"call":[" old_index + "," old_index ","next_difference empty? "," item_difference "," new_array [] "," new_index "," new_array "," old_array [] "," old_array ","(irange\n  (int 1)\n  (begin\n    (send\n      (send nil :expected_additions) :abs))) each "," expected_additions abs "," expected_additions "," expected_additions < "," item_difference  empty? "]}," Hashdiff LinearCompareArray index_of_match_after_additions":{"type":"method","name":"index_of_match_after_additions","children":[],"call":[" new_index + "," new_index ","next_difference empty? "," item_difference "," old_index "," new_array [] "," new_array "," old_array [] "," old_array ","(irange\n  (int 1)\n  (send nil :expected_additions)) each "," expected_additions "," expected_additions > "," item_difference  empty? "]}," Hashdiff LinearCompareArray item_difference":{"type":"method","name":"item_difference","children":[],"call":["Hashdiff  diff "," options merge "," options ","Hashdiff  prefix_append_array_index "," options [] ","Hashdiff  Hashdiff  prefix_append_array_index _append_array_index "]}," Hashdiff LinearCompareArray compare_at_index":{"type":"method","name":"compare_at_index","children":[],"call":[" append_differences "," append_deletions_before_match "," index_of_match_after_deletions "," append_addititions_before_match "," index_of_match_after_additions ","difference empty? "," item_difference "," old_index "," new_array [] "," new_index "," new_array "," old_array [] "," old_array "," append_ item_difference s "," item_difference  empty? "," item_ item_difference  "]}," Hashdiff LinearCompareArray iterated_through_both_arrays?":{"type":"method","name":"iterated_through_both_arrays?","children":[],"call":[" new_index >= "," new_array length "," new_array "," new_index "," old_index >= "," old_array length "," old_array "," old_index "]}," Hashdiff LinearCompareArray extra_items_in_new_array?":{"type":"method","name":"extra_items_in_new_array?","children":[],"call":[" old_index >= "," old_array length "," old_array "," old_index "," new_index < "," new_array length "," new_array "," new_index "]}," Hashdiff LinearCompareArray extra_items_in_old_array?":{"type":"method","name":"extra_items_in_old_array?","children":[],"call":[" new_index >= "," new_array length "," new_array "," new_index "," old_index < "," old_array length "," old_array "," old_index "]}," Hashdiff LinearCompareArray initialize":{"type":"method","name":"initialize","children":[],"call":["(pair\n  (sym :prefix)\n  (str \"\")) merge! "]}," Hashdiff LinearCompareArray call":{"type":"method","name":"call","children":[],"call":[" changes "," iterated_through_both_arrays? "," new_index= "," new_index + "," new_index "," old_index= "," old_index + "," old_index "," compare_at_index "," append_addition "," new_array [] "," new_array "," extra_items_in_new_array? "," append_deletion "," old_array [] "," old_array "," extra_items_in_old_array? "," loop "," expected_additions= "," new_array length - "," old_array length "," new_array length "," new_array empty? "," old_array empty? "]}," Hashdiff LcsCompareArrays call":{"type":"method","name":"call","children":[],"call":["result << ","change [] ","Hashdiff  prefix_append_array_index ","opts [] ","change [] != ","changeset each ","result concat ","Hashdiff  diff ","opts merge ","obj2 [] ","pair [] ","obj1 [] ","lcs each ","Hashdiff  diff_array_lcs ","Hashdiff  Hashdiff  prefix_append_array_index _append_array_index "]}," Hashdiff lcs":{"type":"method","name":"lcs","children":[],"call":[]}," Hashdiff diff_array_lcs":{"type":"method","name":"diff_array_lcs","children":[],"call":[]}," Hashdiff diff":{"type":"method","name":"diff","children":[],"call":[]}," Hashdiff best_diff":{"type":"method","name":"best_diff","children":[],"call":[]}," Hashdiff CompareHashes call":{"type":"method","name":"call","children":[],"call":["result << ","obj2 [] ","result concat ","Hashdiff  custom_compare ","opts [] ","Hashdiff  prefix_append_key ","added_keys each ","Hashdiff  diff ","opts merge ","obj1 [] ","common_keys each ","deleted_keys each ","(send\n  (lvar :obj1_keys) :-\n  (lvar :obj2_keys)) sort_by ","obj1_keys - ","(send\n  (lvar :obj1_keys) :&\n  (lvar :obj2_keys)) sort_by ","obj1_keys & ","(send\n  (lvar :obj2_keys) :-\n  (lvar :obj1_keys)) sort_by ","obj2_keys - ","obj2 keys ","obj1 keys ","obj2 empty? ","obj1 empty? ","obj2_lookup [] ","obj1_lookup [] ","k to_s ","k is_a? ","obj2_keys map ","obj1_keys map ","h []= ","obj2_keys each_with_object ","obj1_keys each_with_object ","Hashdiff  Hashdiff  prefix_append_key _append_key ","Hashdiff  prefix_append_obj2_lookup [] ey ","Hashdiff  prefix_append_obj1_lookup [] ey ","(send\n  (lvar :obj2_keys) :-\n  (lvar :obj1_keys)) sort_by  each ","added_obj2_lookup [] eys each ","added_obj1_lookup [] eys each ","(send\n  (lvar :obj1_keys) :&\n  (lvar :obj2_keys)) sort_by  each ","common_obj2_lookup [] eys each ","common_obj1_lookup [] eys each ","(send\n  (lvar :obj1_keys) :-\n  (lvar :obj2_keys)) sort_by  each ","deleted_obj2_lookup [] eys each ","deleted_obj1_lookup [] eys each ","(send\n  (lvar :obj1_keys) :-\n  (lvar :obj2 keys )) sort_by ","(send\n  (lvar :obj1 keys ) :-\n  (lvar :obj2_keys)) sort_by ","(send\n  (lvar :obj1_obj2_lookup [] eys) :-\n  (lvar :obj2_obj2_lookup [] eys)) sort_by ","(send\n  (lvar :obj1_obj1_lookup [] eys) :-\n  (lvar :obj2_obj1_lookup [] eys)) sort_by ","obj1 keys  - ","obj1_obj2_lookup [] eys - ","obj1_obj1_lookup [] eys - ","(send\n  (lvar :obj1_keys) :&\n  (lvar :obj2 keys )) sort_by ","(send\n  (lvar :obj1 keys ) :&\n  (lvar :obj2_keys)) sort_by ","(send\n  (lvar :obj1_obj2_lookup [] eys) :&\n  (lvar :obj2_obj2_lookup [] eys)) sort_by ","(send\n  (lvar :obj1_obj1_lookup [] eys) :&\n  (lvar :obj2_obj1_lookup [] eys)) sort_by ","obj1 keys  & ","obj1_obj2_lookup [] eys & ","obj1_obj1_lookup [] eys & ","(send\n  (lvar :obj2 keys ) :-\n  (lvar :obj1_keys)) sort_by ","(send\n  (lvar :obj2_keys) :-\n  (lvar :obj1 keys )) sort_by ","(send\n  (lvar :obj2_obj2_lookup [] eys) :-\n  (lvar :obj1_obj2_lookup [] eys)) sort_by ","(send\n  (lvar :obj2_obj1_lookup [] eys) :-\n  (lvar :obj1_obj1_lookup [] eys)) sort_by ","obj2 keys  - ","obj2_obj2_lookup [] eys - ","obj2_obj1_lookup [] eys - ","obj2 obj2_lookup [] eys ","obj2 obj1_lookup [] eys ","obj1 obj2_lookup [] eys ","obj1 obj1_lookup [] eys ","obj2_looobj2_lookup [] up [] ","obj2_looobj1_lookup [] up [] ","obj1_looobj2_lookup [] up [] ","obj1_looobj1_lookup [] up [] ","obj2_lookup []  to_s ","obj1_lookup []  to_s ","obj2_lookup []  is_a? ","obj1_lookup []  is_a? ","obj2 keys  map ","obj2_obj2_lookup [] eys map ","obj2_obj1_lookup [] eys map ","obj1 keys  map ","obj1_obj2_lookup [] eys map ","obj1_obj1_lookup [] eys map ","obj2 keys  each_with_object ","obj2_obj2_lookup [] eys each_with_object ","obj2_obj1_lookup [] eys each_with_object ","obj1 keys  each_with_object ","obj1_obj2_lookup [] eys each_with_object ","obj1_obj1_lookup [] eys each_with_object "]}}