{" TelegramCommon set_locale":{"type":"method","name":"set_locale","children":[],"call":[]}," TelegramCommon table_name_prefix":{"type":"method","name":"table_name_prefix","children":[],"call":[]}," TelegramCommon Telegram response":{"type":"method","name":"response","children":[],"call":[" api_result scan flatten "," api_result scan "," api_result "]}," TelegramCommon Telegram log":{"type":"method","name":"log","children":[],"call":[" logger public_send "," logger "]}," TelegramCommon Telegram debug":{"type":"method","name":"debug","children":[],"call":[" log "]}," TelegramCommon Telegram api_url":{"type":"method","name":"api_url","children":[],"call":["params to_query ","Setting  host_name ","Setting  protocol ","Rails  env development? ","Rails  env "," args to_json "," args "," command "," base_api "]}," TelegramCommon Telegram phantomjs":{"type":"method","name":"phantomjs","children":[],"call":["(str \"which phantomjs\") strip "]}," TelegramCommon Telegram cli_command":{"type":"method","name":"cli_command","children":[],"call":[" debug "," api_url "," config_path "," phantomjs "," local_storage "]}," TelegramCommon Telegram make_request":{"type":"method","name":"make_request","children":[],"call":[" api_result "," debug "," cli_command "]}," TelegramCommon Telegram execute":{"type":"method","name":"execute","children":[],"call":[" response [] "," response "," fail "," response [] == "," make_request "," debug "," raise ","JSON  parse [] ","JSON  parse "]}," TelegramCommon Patches UserPatch included":{"type":"method","name":"included","children":[],"call":[]}," TelegramCommon BotCommand Start write_log_about_new_user":{"type":"method","name":"write_log_about_new_user","children":[],"call":[" logger info "," user username "," user "," user last_name "," user first_name "," logger "]}," TelegramCommon BotCommand Start update_auth_source":{"type":"method","name":"update_auth_source","children":[],"call":[" account user update "," Redmine2FA AuthSource Telegram  first "," account user "," account "," account user auth_source nil? "," account user auth_source "," account user present? "]}," TelegramCommon BotCommand Start update_account":{"type":"method","name":"update_account","children":[],"call":[" account save! "," account "," write_log_about_new_user "," account new_record? "," logger "," account assign_attributes "," user last_name "," user "," user first_name "," user username "]}," TelegramCommon BotCommand Start start":{"type":"method","name":"start","children":[],"call":[" send_message ","I18n  t "," account user present? "," account user "," account "," update_auth_source ","Redmine Plugin  installed? "," update_account "," update_2fa "," send_I18n  t  "]}," TelegramCommon BotCommand Help group_help_message":{"type":"method","name":"group_help_message","children":[],"call":["(send\n  (const nil :I18n) :t\n  (str \"telegram_common.bot.group.no_commands\")) join "," private_help_message ","I18n  t "]}," TelegramCommon BotCommand Help help_command_list":{"type":"method","name":"help_command_list","children":[],"call":["(send\n  (lvar :list) :map) join ","(str \"/\") chomp ","I18n  t ","list map "]}," TelegramCommon BotCommand Help private_help_message":{"type":"method","name":"private_help_message","children":[],"call":[" help_command_list "," private_commands "]}," TelegramCommon BotCommand Help group_commands":{"type":"method","name":"group_commands","children":[],"call":[]}," TelegramCommon BotCommand Help private_commands":{"type":"method","name":"private_commands","children":[],"call":[]}," TelegramCommon BotCommand Help help":{"type":"method","name":"help","children":[],"call":[" send_message "," group_help_message "," private_help_message "," private_command? "," send_ group_help_message  "," send_ private_help_message  "," group_help_ group_help_message  "," group_help_ private_help_message  "," private_help_ group_help_message  "," private_help_ private_help_message  "]}," TelegramCommon BotCommand Connect block_account":{"type":"method","name":"block_account","children":[],"call":[" account save "," account "," account connect_trials_count= "," account blocked_at= ","DateTime  now "," reset_trials "]}," TelegramCommon BotCommand Connect increment_connect_trials":{"type":"method","name":"increment_connect_trials","children":[],"call":[" account save "," account "," account connect_trials_count "," account last_try_at= ","DateTime  now "," reset_trials "," account old_trial? "]}," TelegramCommon BotCommand Connect user_not_found":{"type":"method","name":"user_not_found","children":[],"call":[" send_blocked_message "," block_account "," send_message ","I18n  t ","3 - "," account connect_trials_count "," account "," account connect_trials_count < "," increment_connect_trials "]}," TelegramCommon BotCommand Connect connect":{"type":"method","name":"connect","children":[],"call":[" send_message ","TelegramCommon Mailer  telegram_connect deliver ","TelegramCommon Mailer  telegram_connect "," plugin_name "," account ","I18n  t "," account user_id == ","redmine_user id "," account user_id "," user_not_found ","redmine_user nil? "," logger debug ","redmine_user inspect "," logger "," EmailAddress  find_by ","message_text scan "," command text downcase "," command text "," command ","email blank? ","Setting  host_name ","Setting  protocol ","redmine_user present? "," send_I18n  t  ","I18n  t _text scan "," command text downcase  scan "]}," TelegramCommon Bot default_logger":{"type":"method","name":"default_logger","children":[],"call":["Logger  new ","Rails  root join ","Rails  root "]}," TelegramCommon Bot fetch_account":{"type":"method","name":"fetch_account","children":[],"call":["Account  where first_or_initialize ","Account  where "," user id "," user ","Account  where first_or_create ","TelegramCommon Account  where first_or_create ","TelegramCommon Account  where "]}," TelegramCommon Bot account":{"type":"method","name":"account","children":[],"call":[" fetch_account "]}," TelegramCommon Bot user":{"type":"method","name":"user","children":[],"call":[" command from "," command "]}," TelegramCommon Bot chat_id":{"type":"method","name":"chat_id","children":[],"call":[" command chat id "," command chat "," command "]}," TelegramCommon Bot send_blocked_message":{"type":"method","name":"send_blocked_message","children":[],"call":[" send_message ","I18n  t ","(send\n  (begin\n    (send\n      (send\n        (send\n          (send nil :account) :blocked_at) :+\n        (send\n          (int 1) :hour)) :-\n      (send\n        (send\n          (const nil :Time) :zone) :now))) :/\n  (int 60)) to_i ","(send\n  (send\n    (send\n      (send nil :account) :blocked_at) :+\n    (send\n      (int 1) :hour)) :-\n  (send\n    (send\n      (const nil :Time) :zone) :now)) / "," account blocked_at + - ","Time  zone now ","Time  zone "," account blocked_at + ","1 hour "," account blocked_at "," account "]}," TelegramCommon Bot send_message":{"type":"method","name":"send_message","children":[],"call":["MessageSender  call "," logger debug "," logger "," chat_id ","(pair\n  (sym :chat_id)\n  (send nil :chat_id)) merge "," bot_token "]}," TelegramCommon Bot command_name":{"type":"method","name":"command_name","children":[],"call":[" command_text scan flatten first "," command_text scan flatten "," command_text scan "," command_text "]}," TelegramCommon Bot command_text":{"type":"method","name":"command_text","children":[],"call":[" command text to_s "," command text "," command "]}," TelegramCommon Bot execute_group_command":{"type":"method","name":"execute_group_command","children":[],"call":[" send_message ","I18n  t "," send "," command_name "," group_commands include? "," group_commands "]}," TelegramCommon Bot execute_private_command":{"type":"method","name":"execute_private_command","children":[],"call":[" send_message ","I18n  t "," send "," command_name "," private_commands include? "," private_commands "]}," TelegramCommon Bot available_commands":{"type":"method","name":"available_commands","children":[],"call":["(send\n  (send nil :private_commands) :+\n  (send nil :group_commands)) uniq "," private_commands + "," group_commands "," private_commands "]}," TelegramCommon Bot private_command?":{"type":"method","name":"private_command?","children":[],"call":[" command chat type == "," command chat type "," command chat "," command "]}," TelegramCommon Bot execute_command":{"type":"method","name":"execute_command","children":[],"call":[" execute_group_command "," execute_private_command "," private_command? "," available_commands include? "," command_name "," available_commands "]}," TelegramCommon Bot initialize_command":{"type":"method","name":"initialize_command","children":[],"call":["Telegram Bot Types Message  new ","command is_a? "," Telegram Bot Types Message  new "]}," TelegramCommon Bot plugin_name":{"type":"method","name":"plugin_name","children":[],"call":["bot_token_setting name ","bot_token_setting present? ","Setting  where first ","Setting  where "," bot_token ","Setting  where first  name ","Setting  where first  present? "]}," TelegramCommon Bot call":{"type":"method","name":"call","children":[],"call":[" execute_command "," send_blocked_message "," account blocked? "," account ","TelegramCommon  set_locale "]}," TelegramCommon Bot initialize":{"type":"method","name":"initialize","children":[],"call":[" initialize_command "]}," TelegramCommon Bot MessageSender bot":{"type":"method","name":"bot","children":[],"call":[" Telegram Bot Client  new "," bot_token "]}," TelegramCommon Bot MessageSender call":{"type":"method","name":"call","children":[],"call":[" bot api send_message "," bot api "," bot ","(pair\n  (sym :chat_id)\n  (send nil :chat_id)) merge "," params "," message "," chat_id "," logger warn "," params inspect "," logger "]}," TelegramCommon Bot MessageSender initialize":{"type":"method","name":"initialize","children":[],"call":["params except ","params fetch "]}," TelegramCommon Telegram base_api":{"type":"method","name":"base_api","children":[],"call":["Setting  host_name ","Setting  protocol ","Rails  env development? ","Rails  env "]}," TelegramCommon Telegram local_storage":{"type":"method","name":"local_storage","children":[],"call":["Rails  root join ","Rails  root "]}," TelegramCommon Telegram phantomjs_version":{"type":"method","name":"phantomjs_version","children":[],"call":["(begin\n  (send nil :phantomjs)) strip "," phantomjs "]}," TelegramCommon Telegram webogram_valid?":{"type":"method","name":"webogram_valid?","children":[],"call":[" execute ","Timeout  timeout "]}," TelegramCommon Telegram phantomjs_version_valid?":{"type":"method","name":"phantomjs_version_valid?","children":[],"call":["Gem Dependency  new match? "," phantomjs_version ","Gem Dependency  new "]}," TelegramCommon Telegram rails_env_valid?":{"type":"method","name":"rails_env_valid?","children":[],"call":["Rails  env production? ","Rails  env "]}," TelegramCommon Telegram reset":{"type":"method","name":"reset","children":[],"call":["FileUtils  rm_rf ","Dir  glob "," local_storage "]}," TelegramCommon Exceptions Telegram initialize":{"type":"method","name":"initialize","children":[],"call":[]}," TelegramCommon BotCommand Start update_2fa":{"type":"method","name":"update_2fa","children":[],"call":[" account user update "," Redmine2FA AuthSource Telegram  first "," account user "," account "," account user two_fa nil? "," account user two_fa "," account user present? "]}," TelegramCommon BotCommand Connect reset_trials":{"type":"method","name":"reset_trials","children":[],"call":[" account connect_trials_count= "," account "]}," TelegramCommon bot_collisions":{"type":"method","name":"bot_collisions","children":[],"call":[]}," Tdlib ToggleChatAdmin call":{"type":"method","name":"call","children":[],"call":["client broadcast_and_receive ","@client on_ready "]}," Tdlib RenameChat call":{"type":"method","name":"call","children":[],"call":["client broadcast_and_receive ","@client on_ready "]}," Tdlib GetMe call":{"type":"method","name":"call","children":[],"call":["client broadcast_and_receive ","@client on_ready "]}," Tdlib GetChatLink call":{"type":"method","name":"call","children":[],"call":["client broadcast_and_receive ","@client on_ready "]}," Tdlib GetChat call":{"type":"method","name":"call","children":[],"call":["client broadcast_and_receive ","@client on_ready "]}," Tdlib DependencyProviders AddBot add_bot":{"type":"method","name":"add_bot","children":[],"call":["TelegramCommon Tdlib AddBot  new "," client "]}," Tdlib DependencyProviders ToggleChatAdmin toggle_chat_admin":{"type":"method","name":"toggle_chat_admin","children":[],"call":["TelegramCommon Tdlib ToggleChatAdmin  new "," client "]}," Tdlib DependencyProviders GetChat get_chat":{"type":"method","name":"get_chat","children":[],"call":["TelegramCommon Tdlib GetChat  new "," client "]}," Tdlib DependencyProviders RenameChat rename_chat":{"type":"method","name":"rename_chat","children":[],"call":["TelegramCommon Tdlib RenameChat  new "," client "]}," Tdlib DependencyProviders CloseChat close_chat":{"type":"method","name":"close_chat","children":[],"call":["TelegramCommon Tdlib CloseChat  new "," client "]}," Tdlib DependencyProviders GetMe get_me":{"type":"method","name":"get_me","children":[],"call":["TelegramCommon Tdlib GetMe  new "," client "]}," Tdlib DependencyProviders GetChatLink get_chat_link":{"type":"method","name":"get_chat_link","children":[],"call":["TelegramCommon Tdlib GetChatLink  new "," client "]}," Tdlib DependencyProviders CreateChat create_chat":{"type":"method","name":"create_chat","children":[],"call":["TelegramCommon Tdlib CreateChat  new "," client "]}," Tdlib DependencyProviders Authenticate authenticate":{"type":"method","name":"authenticate","children":[],"call":["TelegramCommon Tdlib Authenticate  new "," logger "," client "]}," Tdlib DependencyProviders Client client":{"type":"method","name":"client","children":[],"call":["TD Client  new ","Rails  root join to_s ","Rails  root join ","Rails  root ","settings [] ","TD Api  set_log_file_path ","Setting  plugin_redmine_telegram_common ","Setting  plugin_redmine_telegram_common  [] "]}," Tdlib CreateChat call":{"type":"method","name":"call","children":[],"call":["client broadcast_and_receive ","chat dig ","user_ids each ","@client on_ready "," sleep ","client broadcast_and_receive  dig "]}," Tdlib Command Callable call":{"type":"method","name":"call","children":[],"call":["@client close ","(op-asgn\n  (lvasgn :tries) :-\n  (int 1)) zero? "," sleep "]}," Tdlib Command initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Tdlib Command inherited":{"type":"method","name":"inherited","children":[],"call":[]}," Tdlib CloseChat delete_member":{"type":"method","name":"delete_member","children":[],"call":["@client broadcast_and_receive "]}," Tdlib CloseChat call":{"type":"method","name":"call","children":[],"call":[" delete_member ","me [] ","user_id == ","(send\n  (send\n    (send\n      (lvar :client) :broadcast_and_receive\n      (hash\n        (pair\n          (str \"@type\")\n          (str \"getBasicGroupFullInfo\"))\n        (pair\n          (str \"basic_group_id\")\n          (send\n            (lvar :chat) :dig\n            (str \"type\")\n            (str \"basic_group_id\"))))) :[]\n    (str \"members\")) :map) each ","m [] ","client broadcast_and_receive [] map ","client broadcast_and_receive [] ","client broadcast_and_receive ","chat dig ","@client on_ready ","user_id in? ","(send\n  (send\n    (lvar :group_info) :[]\n    (str \"members\")) :map) each ","group_info [] map ","group_info [] ","group_info [] == ","Setting  find_by value [] to_i ","Setting  find_by value [] ","Setting  find_by value ","Setting  find_by "," delete_client broadcast_and_receive mber ","client broadcast_and_receive  [] ","(send\n  (send\n    (send\n      (lvar :client) :broadcast_and_receive\n      (hash\n        (pair\n          (str \"@type\")\n          (str \"getBasicGroupFullInfo\"))\n        (pair\n          (str \"basic_group_id\")\n          (send\n            (lvar :client broadcast_and_receive ) :dig\n            (str \"type\")\n            (str \"basic_group_id\"))))) :[]\n    (str \"members\")) :map) each ","(send\n  (send\n    (send\n      (lvar :client) :broadcast_and_receive\n      (hash\n        (pair\n          (str \"@type\")\n          (str \"getBasicGroupFullInfo\"))\n        (pair\n          (str \"basic_group_id\")\n          (send\n            (lvar :chat) :dig\n            (str \"type\")\n            (str \"basic_group_id\"))))) :[]\n    (str \"client broadcast_and_receive mbers\")) :map) each ","client broadcast_and_receive  dig ","(send\n  (send\n    (lvar :group_info) :[]\n    (str \"client broadcast_and_receive mbers\")) :map) each ","(send\n  (send\n    (lvar :client broadcast_and_receive ) :[]\n    (str \"members\")) :map) each ","client broadcast_and_receive  [] map ","client broadcast_and_receive  [] == "]}," Tdlib Authenticate error_handler":{"type":"method","name":"error_handler","children":[],"call":[" raise ","AuthenticationError  new ","@logger fatal ","result [] ","result [] == "," proc "]}," Tdlib Authenticate check_code":{"type":"method","name":"check_code","children":[],"call":["@client broadcast_and_receive tap "," error_handler ","@client broadcast_and_receive "]}," Tdlib Authenticate set_phone":{"type":"method","name":"set_phone","children":[],"call":["@client broadcast_and_receive tap "," error_handler ","@client broadcast_and_receive "]}," Tdlib Authenticate call":{"type":"method","name":"call","children":[],"call":[" raise ","AuthenticationError  new ","@logger fatal "," check_code ","params [] ","params key? "," set_phone "," loop ","Timeout  timeout ","update dig ","@client on "]}," Tdlib Authenticate initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Tdlib AddBot call":{"type":"method","name":"call","children":[],"call":["client broadcast_and_receive ","chat [] ","@client on_ready ","client broadcast_and_receive  [] "]}," TelegramCommon init_bot":{"type":"method","name":"init_bot","children":[],"call":[]}," TelegramCommon update_manager":{"type":"method","name":"update_manager","children":[],"call":[]}," TelegramCommon bot_token":{"type":"method","name":"bot_token","children":[],"call":[]}," UpdateManager handle_common_command":{"type":"method","name":"handle_common_command","children":[],"call":["TelegramCommon Bot  new call ","TelegramCommon Bot  new ","TelegramCommon  bot_token "]}," UpdateManager handle_message":{"type":"method","name":"handle_message","children":[],"call":["handler call ","@handlers each "," handle_common_command ","COMMON_COMMANDS  include? ","message text to_s scan flatten first ","message text to_s scan flatten ","message text to_s scan ","message text to_s ","message text "]}," UpdateManager add_handler":{"type":"method","name":"add_handler","children":[],"call":["@handlers << "]}," UpdateManager initialize":{"type":"method","name":"initialize","children":[],"call":[]}," TelegramCommon Bot MessageSender BotKickedError ===":{"type":"method","name":"===","children":[],"call":[]}," TelegramCommon Bot MessageSender logger":{"type":"method","name":"logger","children":[],"call":["Logger  new ","Rails  root join ","Rails  root "]}," TelegramCommon Authenticate Result success?":{"type":"method","name":"success?","children":[],"call":[]}," TelegramCommon Authenticate Result initialize":{"type":"method","name":"initialize","children":[],"call":[]}," TelegramCommon Authenticate failure":{"type":"method","name":"failure","children":[],"call":["Result  new "]}," TelegramCommon Authenticate success":{"type":"method","name":"success","children":[],"call":["Result  new "]}," TelegramCommon Authenticate up_to_date?":{"type":"method","name":"up_to_date?","children":[],"call":["Time  at > ","Time  now - ","Time  now ","Time  at ","@auth_data [] to_i ","@auth_data [] "]}," TelegramCommon Authenticate hash_valid?":{"type":"method","name":"hash_valid?","children":[],"call":["hash == ","@auth_data [] ","OpenSSL HMAC  hexdigest ","OpenSSL Digest  new ","Digest SHA256  digest ","TelegramCommon  bot_token ","(send\n  (send\n    (ivar :@auth_data) :except\n    (str \"hash\")) :map) join ","@auth_data except map ","@auth_data except ","Utils  auth_hash == ","Utils  auth_hash ","OpenSSL HMAC  hexdigest  == ","(send\n  (send\n    (ivar :@auth_data) :except\n    (str \"OpenSSL HMAC  hexdigest \")) :map) join ","Utils  auth_OpenSSL HMAC  hexdigest  == ","Utils  auth_OpenSSL HMAC  hexdigest  "]}," TelegramCommon Authenticate call":{"type":"method","name":"call","children":[],"call":[" failure ","I18n  t "," success ","telegram_account save ","telegram_account assign_attributes ","@auth_data slice ","telegram_account user_id= ","@user id ","telegram_account user_id == ","telegram_account user_id ","TelegramCommon Account  find_or_initialize_by ","@auth_data [] ","telegram_account telegram_id= ","@auth_data [] to_i == ","telegram_account telegram_id ","@auth_data [] to_i ","telegram_account present? "," up_to_date? "," hash_valid? ","@user logged? ","TelegramCommon Account  find_by ","TelegramCommon Account  find_or_initialize_by  save ","TelegramCommon Account  find_by  save ","TelegramCommon Account  find_or_initialize_by  assign_attributes ","TelegramCommon Account  find_by  assign_attributes ","TelegramCommon Account  find_or_initialize_by  user_id= ","TelegramCommon Account  find_by  user_id= ","TelegramCommon Account  find_or_initialize_by  user_id == ","TelegramCommon Account  find_by  user_id == ","TelegramCommon Account  find_or_initialize_by  user_id ","TelegramCommon Account  find_by  user_id ","TelegramCommon Account  find_or_initialize_by  telegram_id= ","TelegramCommon Account  find_by  telegram_id= ","TelegramCommon Account  find_or_initialize_by  telegram_id ","TelegramCommon Account  find_by  telegram_id ","TelegramCommon Account  find_or_initialize_by  present? ","TelegramCommon Account  find_by  present? "]}," TelegramCommon Authenticate initialize":{"type":"method","name":"initialize","children":[],"call":["Hash  [] ","auth_data sort_by "]}," Tdlib GetUser call":{"type":"method","name":"call","children":[],"call":["client broadcast_and_receive ","@client on_ready "]}," Tdlib DependencyProviders GetUser get_user":{"type":"method","name":"get_user","children":[],"call":["TelegramCommon Tdlib GetUser  new "," client "]}," TelegramCommon Utils auth_hash":{"type":"method","name":"auth_hash","children":[],"call":[]}," TelegramCommon FaradayAdapter fetch_proxy_from_settings":{"type":"method","name":"fetch_proxy_from_settings","children":[],"call":["settings [] ","Setting  plugin_redmine_telegram_common ","Setting  plugin_redmine_telegram_common  [] "]}," TelegramCommon FaradayAdapter net_http_connection":{"type":"method","name":"net_http_connection","children":[],"call":["(lvasgn :proxy\n  (send nil :fetch_proxy_from_settings)) new ","env [] scheme == ","env [] scheme ","env [] ","env [] port ","env [] hostname ","Net HTTP  Proxy ","proxy [] "," fetch_proxy_from_settings ","(lvasgn : fetch_proxy_from_settings \n  (send nil :fetch_ fetch_proxy_from_settings _from_settings)) new "," fetch_proxy_from_settings  [] "," fetch_ fetch_proxy_from_settings _from_settings "]}}