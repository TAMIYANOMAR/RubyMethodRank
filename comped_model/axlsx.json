{" Axlsx cell_range":{"type":"method","name":"cell_range","children":[],"call":[]}," Axlsx Worksheet auto_width":{"type":"method","name":"auto_width","children":[],"call":["(send\n  (send\n    (begin\n      (send\n        (send\n          (lvar :mdw_count) :*\n          (lvar :mdw)) :+\n        (int 5))) :/\n    (lvar :mdw)) :*\n  (int 256)) / * * ","(send\n  (send\n    (begin\n      (send\n        (send\n          (lvar :mdw_count) :*\n          (lvar :mdw)) :+\n        (int 5))) :/\n    (lvar :mdw)) :*\n  (int 256)) / * ","(send\n  (send\n    (begin\n      (send\n        (send\n          (lvar :mdw_count) :*\n          (lvar :mdw)) :+\n        (int 5))) :/\n    (lvar :mdw)) :*\n  (int 256)) / ","(send\n  (send\n    (lvar :mdw_count) :*\n    (lvar :mdw)) :+\n  (int 5)) / * ","(send\n  (send\n    (lvar :mdw_count) :*\n    (lvar :mdw)) :+\n  (int 5)) / ","mdw_count * + ","mdw_count * ","@magick_draw get_type_metrics width >= ","@magick_draw get_type_metrics width ","@magick_draw get_type_metrics ","col [] scan each ","col [] scan ","col [] ","col [] to_f / "," workbook styles fonts [] sz to_f "," workbook styles fonts [] sz "," workbook styles fonts [] "," workbook styles fonts "," workbook styles "," workbook ","col [] to_f ","@magick_draw get_type_metrics max_advance >= ","@magick_draw get_type_metrics max_advance ","col [] scan reduce ","col [] / ","col [] == "]}," Axlsx Worksheet update_auto_fit_data":{"type":"method","name":"update_auto_fit_data","children":[],"call":["@auto_fit_data []= ","col []= ","item value to_s ","item value ","(send\n  (send\n    (send\n      (send\n        (lvar :col) :[]\n        (sym :longest)) :scan\n      (regexp\n        (str \".\")\n        (regopt :m :u))) :size) :*\n  (send\n    (lvar :col) :[]\n    (sym :sz))) < ","item value to_s scan size * ","item value to_s scan size ","item value to_s scan ","col [] scan size * ","col [] ","col [] scan size ","col [] scan ","font sz ","fonts [] ","cell_xf fontId ","cellXfs [] ","item style ","@auto_fit_data [] ","cells each_with_index ","fonts [] sz ","styles fonts ","styles cellXfs "," workbook styles "," workbook ","item sz ","item value start_with? ","item value is_a? ","width == ","(const nil :Integer) include? ","width class ","widths [] ","(send\n  (send\n    (send\n      (send\n        (lvar :col) :[]\n        (sym :longest)) :scan\n      (regexp\n        (str \".\")\n        (regopt :m :u))) :size) :*\n  (send\n    (lvar :col) :[]\n    (sym :fonts [] sz ))) < ","fonts []  sz ","font fonts [] sz  ","fonts [] s [] ","cell_xf fonts [] Id ","cellXfs []  fontId ","fonts [] s [] sz ","fonts [] fonts [] sz  ","styles fonts [] s "," workbook styles  fonts "," workbook styles  cellXfs "," workbook  workbook styles  ","item fonts [] sz  ","widths []  == ","widths []  class ","widths [] s [] "]}," Axlsx Worksheet workbook=":{"type":"method","name":"workbook=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Worksheet relationships":{"type":"method","name":"relationships","children":[],"call":["r << ","Relationship  new ","@drawing pn ","Relationships  new ","table pn ","@tables each ","@comments size > ","@comments size ","@comments pn ","@comments vml_drawing pn ","@comments vml_drawing ","r + ","(send\n  (send nil :tables) :relationships) flatten compact ","(send\n  (send nil :tables) :relationships) flatten "," worksheet_drawing relationship "," worksheet_drawing "," worksheet_comments relationships "," worksheet_comments "," tables relationships "," tables "," hyperlinks relationships "," hyperlinks "," pivot_tables relationships "," pivot_tables ","Relationships  new  << ","@dRelationships  new awing pn ","@comments vml_dRelationships  new awing pn ","@comments vml_dRelationships  new awing ","Relationships  new  + ","(send\n  (send nil :tables) :Relationships  new elationships) flatten compact ","(send\n  (send nil :tables) :Relationships  new elationships) flatten "," woRelationships  new ksheet_dRelationships  new awing Relationships  new elationship "," woRelationships  new ksheet_dRelationships  new awing "," woRelationships  new ksheet_comments Relationships  new elationships "," woRelationships  new ksheet_comments "," tables Relationships  new elationships "," hypeRelationships  new links Relationships  new elationships "," hypeRelationships  new links "," pivot_tables Relationships  new elationships "]}," Axlsx Worksheet to_xml":{"type":"method","name":"to_xml","children":[],"call":["builder to_xml ","xml drawing ","row to_xml ","@rows each ","xml sheetData ","xml col "," auto_width ","index + ","@auto_fit_data each_with_index ","xml cols ","@auto_fit_data size > ","@auto_fit_data size ","xml worksheet ","Nokogiri XML Builder  new ","xml mergeCell ","@merged_cells each ","xml mergeCells ","@merged_cells size ","@merged_cells empty? ","xml autoFilter ","xml dimension "," dimension "," rows size == "," rows size "," rows "," page_margins to_xml "," page_margins "]}," Axlsx Worksheet add_chart":{"type":"method","name":"add_chart","children":[],"call":[" block_given? "," drawing add_chart "," drawing "," worksheet_drawing add_chart "," worksheet_drawing "," drawing add_ drawing add_chart  "," drawing add_ worksheet_drawing add_chart  "," worksheet_drawing add_ drawing add_chart  "," worksheet_drawing add_ worksheet_drawing add_chart  "]}," Axlsx Worksheet add_row":{"type":"method","name":"add_row","children":[],"call":["@rows last "," block_given? "," update_auto_fit_data ","@rows last cells ","Row  new ","options delete "," update_column_info ","@Row  new s last ","@Row  new s last cells "]}," Axlsx Worksheet drawing":{"type":"method","name":"drawing","children":[],"call":["Axlsx Drawing  new "," worksheet_drawing drawing "," worksheet_drawing "]}," Axlsx Worksheet index":{"type":"method","name":"index","children":[],"call":["@workbook worksheets index ","@workbook worksheets "]}," Axlsx Worksheet rId":{"type":"method","name":"rId","children":[],"call":[" index + "," index ","@workbook relationships for Id ","@workbook relationships for ","@workbook relationships "]}," Axlsx Worksheet rels_pn":{"type":"method","name":"rels_pn","children":[],"call":["WORKSHEET_RELS_PN  % "," index + "," index "]}," Axlsx Worksheet pn":{"type":"method","name":"pn","children":[],"call":["WORKSHEET_PN  % "," index + "," index "]}," Axlsx Worksheet name=":{"type":"method","name":"name=","children":[],"call":["DataTypeValidator  validate "," raise ","ERR_DUPLICATE_SHEET_NAME  % ","sheet_names include? ","s name ","@workbook worksheets map ","@workbook worksheets ","ERR_SHEET_NAME_TOO_LONG  % ","v size > ","v size ","Axlsx  coder encode ","Axlsx  coder ","ERR_SHEET_NAME_COLON_FORBIDDEN  % ","v include? "," validate_sheet_name ","DataTypeValidator  Axlsx  coder encode alidate ","Axlsx  coder encode  size > ","Axlsx  coder encode  size ","Axlsx  coder encode  include? "," Axlsx  coder encode alidate_sheet_name "]}," Axlsx Worksheet initialize":{"type":"method","name":"initialize","children":[],"call":["Magick Draw  new "," name= ","Sheet + ","(send\n  (send nil :index) :+\n  (int 1)) to_s "," index + "," index ","options [] ","@workbook worksheets << ","@workbook worksheets "," workbook= ","SimpleTypedList  new ","PageMargins  new "," send ","o [] "," respond_to? ","options each "," require "," workbook use_autowidth "," workbook ","PrintOptions  new ","PageSetup  new ","Comments  new "," initialize_page_options "," parse_options "," block_given? "]}," Axlsx Row array_to_cells":{"type":"method","name":"array_to_cells","children":[],"call":["Cell  new ","types [] ","types is_a? ","style [] ","style is_a? ","values each_with_index ","options [] ","DataTypeValidator  validate ","options []= ","options delete ","formula_values [] ","formula_values is_a? "," []= ","formula_values [] s [] ","formula_values [] s is_a? "]}," Axlsx Row update_auto_fit_data":{"type":"method","name":"update_auto_fit_data","children":[],"call":[" worksheet send "," cells "," worksheet "]}," Axlsx Row worksheet=":{"type":"method","name":"worksheet=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Row add_cell":{"type":"method","name":"add_cell","children":[],"call":[" update_auto_fit_data ","Cell  new "," worksheet send "," cells map "," cells "," worksheet "," << "," Cell  new ells map "," Cell  new ells "]}," Axlsx Row to_xml":{"type":"method","name":"to_xml","children":[],"call":["cell to_xml ","@cells each ","xml row "," index + "," index ","attrs merge! "," height "," custom_height? "]}," Axlsx Row index":{"type":"method","name":"index","children":[],"call":[" worksheet rows index "," worksheet rows "," worksheet "]}," Axlsx Row initialize":{"type":"method","name":"initialize","children":[],"call":[" array_to_cells ","@worksheet rows << ","@worksheet rows ","SimpleTypedList  new "," worksheet= "," height= ","options delete ","options [] ","worksheet rows << ","worksheet rows ","values size "]}," Axlsx Cell cast_value":{"type":"method","name":"cast_value","children":[],"call":["v to_s ","v to_i ","@type == ","v to_f ","(send\n  (send\n    (send\n      (begin\n        (send\n          (lvar :v) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ","(send\n  (lvar :v) :-\n  (lvar :epoc)) / / / ","(send\n  (lvar :v) :-\n  (lvar :epoc)) / / ","(send\n  (lvar :v) :-\n  (lvar :epoc)) / ","v - ","Time  local ","v zone ","Workbook  date1904 ","v is_a? ","(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ","(send\n  (send\n    (send\n      (lvar :v) :localtime) :to_f) :-\n  (lvar :epoc)) / / / ","(send\n  (send\n    (send\n      (lvar :v) :localtime) :to_f) :-\n  (lvar :epoc)) / / ","(send\n  (send\n    (send\n      (lvar :v) :localtime) :to_f) :-\n  (lvar :epoc)) / ","v localtime to_f - ","v localtime to_f ","v localtime ","v to_time ","v respond_to? "," style= "," style == "," style ","(send\n  (lvar :v) :*\n  (send\n    (int 10) :**\n    (int 11))) round to_f / ","10 ** ","(send\n  (lvar :v) :*\n  (send\n    (int 10) :**\n    (int 11))) round to_f ","(send\n  (lvar :v) :*\n  (send\n    (int 10) :**\n    (int 11))) round ","v * "," CGI  escapeHTML ","v nil? ","Axlsx  trust_input "," type ","v is_a? ! ","v to_time  to_s ","(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f  to_s ","v to_time  to_i ","(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f  to_i ","v to_time  to_f ","(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f  to_f ","(send\n  (send\n    (send\n      (begin\n        (send\n          (lvar :v) :-\n          (lvar :Time  local ))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ","(send\n  (send\n    (send\n      (begin\n        (send\n          (lv to_time ar :v to_time ) :-\n          (lv to_time ar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ","(send\n  (send\n    (send\n      (begin\n        (send\n          (l(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ar :(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ) :-\n          (l(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ","(send\n  (lvar :v) :-\n  (lvar :Time  local )) / / / ","(send\n  (lv to_time ar :v to_time ) :-\n  (lv to_time ar :epoc)) / / / ","(send\n  (l(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ar :(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ) :-\n  (l(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ar :epoc)) / / / ","(send\n  (lvar :v) :-\n  (lvar :Time  local )) / / ","(send\n  (lv to_time ar :v to_time ) :-\n  (lv to_time ar :epoc)) / / ","(send\n  (l(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ar :(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ) :-\n  (l(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ar :epoc)) / / ","(send\n  (lvar :v) :-\n  (lvar :Time  local )) / ","(send\n  (lv to_time ar :v to_time ) :-\n  (lv to_time ar :epoc)) / ","(send\n  (l(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ar :(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ) :-\n  (l(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ar :epoc)) / ","v to_time  - ","(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f  - ","v to_time  zone ","(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f  zone ","v to_time  is_a? ","(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f  is_a? ","(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :Time  local ))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ","(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lv to_time ar :v to_time ) :localtime) :to_f) :-\n          (lv to_time ar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ","(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (l(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ar :(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ) :localtime) :to_f) :-\n          (l(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ","(send\n  (send\n    (send\n      (lvar :v) :localtime) :to_f) :-\n  (lvar :Time  local )) / / / ","(send\n  (send\n    (send\n      (lv to_time ar :v to_time ) :localtime) :to_f) :-\n  (lv to_time ar :epoc)) / / / ","(send\n  (send\n    (send\n      (l(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ar :(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ) :localtime) :to_f) :-\n  (l(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ar :epoc)) / / / ","(send\n  (send\n    (send\n      (lvar :v) :localtime) :to_f) :-\n  (lvar :Time  local )) / / ","(send\n  (send\n    (send\n      (lv to_time ar :v to_time ) :localtime) :to_f) :-\n  (lv to_time ar :epoc)) / / ","(send\n  (send\n    (send\n      (l(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ar :(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ) :localtime) :to_f) :-\n  (l(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ar :epoc)) / / ","(send\n  (send\n    (send\n      (lvar :v) :localtime) :to_f) :-\n  (lvar :Time  local )) / ","(send\n  (send\n    (send\n      (lv to_time ar :v to_time ) :localtime) :to_f) :-\n  (lv to_time ar :epoc)) / ","(send\n  (send\n    (send\n      (l(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ar :(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ) :localtime) :to_f) :-\n  (l(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ar :epoc)) / ","v to_time  localtime to_f - ","(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f  localtime to_f - ","v to_time  localtime to_f ","(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f  localtime to_f ","v to_time  localtime ","(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f  localtime ","v to_time  to_time ","(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f  to_time ","v to_time  respond_to? ","(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f  respond_to? ","(send\n  (lv to_time ar :v to_time ) :*\n  (send\n    (int 10) :**\n    (int 11))) round to_f / ","(send\n  (l(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ar :(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ) :*\n  (send\n    (int 10) :**\n    (int 11))) round to_f / ","(send\n  (lv to_time ar :v to_time ) :*\n  (send\n    (int 10) :**\n    (int 11))) round to_f ","(send\n  (l(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ar :(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ) :*\n  (send\n    (int 10) :**\n    (int 11))) round to_f ","(send\n  (lv to_time ar :v to_time ) :*\n  (send\n    (int 10) :**\n    (int 11))) round ","(send\n  (l(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ar :(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ) :*\n  (send\n    (int 10) :**\n    (int 11))) round ","v to_time  * ","(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f  * ","v to_time  nil? ","(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f  nil? ","v to_time  is_a? ! ","(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (lvar :v) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f  is_a? ! "]}," Axlsx Cell cell_type_from_value":{"type":"method","name":"cell_type_from_value","children":[],"call":["v to_s match ","v to_s ","v is_a? ","v to_s =~ "]}," Axlsx Cell col_ref":{"type":"method","name":"col_ref","children":[],"call":["chars reverse join ","chars reverse ","chars << ","(send\n  (begin\n    (if\n      (send\n        (lvar :chars) :empty?)\n      (lvar :index)\n      (send\n        (lvar :index) :-\n        (int 1)))) :+\n  (int 65)) chr ","(if\n  (send\n    (lvar :chars) :empty?)\n  (lvar :index)\n  (send\n    (lvar :index) :-\n    (int 1))) + ","index - ","chars empty? ","(send\n  (begin\n    (send\n      (lvar :index) :%\n      (int 26))) :+\n  (int 65)) chr ","(send\n  (lvar :index) :%\n  (int 26)) + ","index % ","index >= "," index ","(send\n  (begin\n    (if\n      (send\n        (lvar :chars) :empty?)\n      (lvar : index )\n      (send\n        (lvar : index ) :-\n        (int 1)))) :+\n  (int 65)) chr ","(if\n  (send\n    (lvar :chars) :empty?)\n  (lvar : index )\n  (send\n    (lvar : index ) :-\n    (int 1))) + "," index  - ","(send\n  (begin\n    (send\n      (lvar : index ) :%\n      (int 26))) :+\n  (int 65)) chr ","(send\n  (lvar : index ) :%\n  (int 26)) + "," index  % "," index  >= ","  index  "]}," Axlsx Cell row=":{"type":"method","name":"row=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Cell to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml v "," value ","xml c "," style "," r ","xml << ","xml is ","@type == ","xml t ","@value to_s ","xml scheme ","xml vertAlign ","xml u ","xml sz ","@color to_xml ","xml extend ","xml condense ","xml shadow ","xml outline ","xml strike ","xml i ","xml b ","xml family ","xml charset ","xml rFont ","xml rPr ","xml r ","xml f ","@value to_s gsub ","@value start_with? ","(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (ivar :@value) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ","(send\n  (send\n    (send\n      (ivar :@value) :localtime) :to_f) :-\n  (lvar :epoc)) / / / ","(send\n  (send\n    (send\n      (ivar :@value) :localtime) :to_f) :-\n  (lvar :epoc)) / / ","(send\n  (send\n    (send\n      (ivar :@value) :localtime) :to_f) :-\n  (lvar :epoc)) / ","@value localtime to_f - ","@value localtime to_f ","@value localtime ","Workbook  date1904 "," run_xml "," ssti ","DateTimeConverter  time_to_serial ","DateTimeConverter  date_to_serial ","xml (send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (ivar :@value) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f  ","xml DateTimeConverter  time_to_serial  ","xml DateTimeConverter  date_to_serial  "," (send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (ivar :@value) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f alue "," DateTimeConverter  time_to_serial alue "," DateTimeConverter  date_to_serial alue ","@(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (ivar :@value) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f alue to_s ","@DateTimeConverter  time_to_serial alue to_s ","@DateTimeConverter  date_to_serial alue to_s ","xml (send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (ivar :@value) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ertAlign ","xml DateTimeConverter  time_to_serial ertAlign ","xml DateTimeConverter  date_to_serial ertAlign ","@(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (ivar :@value) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f alue to_s gsub ","@DateTimeConverter  time_to_serial alue to_s gsub ","@DateTimeConverter  date_to_serial alue to_s gsub ","@(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (ivar :@value) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f alue start_with? ","@DateTimeConverter  time_to_serial alue start_with? ","@DateTimeConverter  date_to_serial alue start_with? ","(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (i(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (ivar :@value) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ar :@(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (ivar :@value) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f alue) :localtime) :to_f) :-\n          (l(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (ivar :@value) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ","(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (iDateTimeConverter  time_to_serial ar :@DateTimeConverter  time_to_serial alue) :localtime) :to_f) :-\n          (lDateTimeConverter  time_to_serial ar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ","(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (iDateTimeConverter  date_to_serial ar :@DateTimeConverter  date_to_serial alue) :localtime) :to_f) :-\n          (lDateTimeConverter  date_to_serial ar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ","(send\n  (send\n    (send\n      (i(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (ivar :@value) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ar :@(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (ivar :@value) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f alue) :localtime) :to_f) :-\n  (l(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (ivar :@value) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ar :epoc)) / / / ","(send\n  (send\n    (send\n      (iDateTimeConverter  time_to_serial ar :@DateTimeConverter  time_to_serial alue) :localtime) :to_f) :-\n  (lDateTimeConverter  time_to_serial ar :epoc)) / / / ","(send\n  (send\n    (send\n      (iDateTimeConverter  date_to_serial ar :@DateTimeConverter  date_to_serial alue) :localtime) :to_f) :-\n  (lDateTimeConverter  date_to_serial ar :epoc)) / / / ","(send\n  (send\n    (send\n      (i(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (ivar :@value) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ar :@(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (ivar :@value) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f alue) :localtime) :to_f) :-\n  (l(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (ivar :@value) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ar :epoc)) / / ","(send\n  (send\n    (send\n      (iDateTimeConverter  time_to_serial ar :@DateTimeConverter  time_to_serial alue) :localtime) :to_f) :-\n  (lDateTimeConverter  time_to_serial ar :epoc)) / / ","(send\n  (send\n    (send\n      (iDateTimeConverter  date_to_serial ar :@DateTimeConverter  date_to_serial alue) :localtime) :to_f) :-\n  (lDateTimeConverter  date_to_serial ar :epoc)) / / ","(send\n  (send\n    (send\n      (i(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (ivar :@value) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ar :@(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (ivar :@value) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f alue) :localtime) :to_f) :-\n  (l(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (ivar :@value) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f ar :epoc)) / ","(send\n  (send\n    (send\n      (iDateTimeConverter  time_to_serial ar :@DateTimeConverter  time_to_serial alue) :localtime) :to_f) :-\n  (lDateTimeConverter  time_to_serial ar :epoc)) / ","(send\n  (send\n    (send\n      (iDateTimeConverter  date_to_serial ar :@DateTimeConverter  date_to_serial alue) :localtime) :to_f) :-\n  (lDateTimeConverter  date_to_serial ar :epoc)) / ","@(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (ivar :@value) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f alue localtime to_f - ","@DateTimeConverter  time_to_serial alue localtime to_f - ","@DateTimeConverter  date_to_serial alue localtime to_f - ","@(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (ivar :@value) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f alue localtime to_f ","@DateTimeConverter  time_to_serial alue localtime to_f ","@DateTimeConverter  date_to_serial alue localtime to_f ","@(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (ivar :@value) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f alue localtime ","@DateTimeConverter  time_to_serial alue localtime ","@DateTimeConverter  date_to_serial alue localtime ","DateTimeCon(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (ivar :@value) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f erter  time_to_serial ","DateTimeConDateTimeConverter  time_to_serial erter  time_to_serial ","DateTimeConDateTimeConverter  date_to_serial erter  time_to_serial ","DateTimeCon(send\n  (send\n    (send\n      (begin\n        (send\n          (send\n            (send\n              (ivar :@value) :localtime) :to_f) :-\n          (lvar :epoc))) :/\n      (float 60.0)) :/\n    (float 60.0)) :/\n  (float 24.0)) to_f erter  date_to_serial ","DateTimeConDateTimeConverter  time_to_serial erter  date_to_serial ","DateTimeConDateTimeConverter  date_to_serial erter  date_to_serial "]}," Axlsx Cell value=":{"type":"method","name":"value=","children":[],"call":[" cast_value "]}," Axlsx Cell type=":{"type":"method","name":"type=","children":[],"call":[" value= ","RestrictionValidator  validate ","@value nil? ","(ivar :@value) ! "]}," Axlsx Cell style=":{"type":"method","name":"style=","children":[],"call":[" raise ","v < ","@styles cellXfs size ","@styles cellXfs ","Axlsx  validate_unsigned_int "," styles cellXfs size "," styles cellXfs "," styles "]}," Axlsx Cell r_abs":{"type":"method","name":"r_abs","children":[],"call":[" r split join "," r split "," r "," r match [] join "," r match [] "," r match "]}," Axlsx Cell r":{"type":"method","name":"r","children":[],"call":["@row index + ","@row index "," col_ref ","Axlsx  col_ref "," index ","Axlsx  cell_r ","@row row_index "]}," Axlsx Cell index":{"type":"method","name":"index","children":[],"call":["@row cells index ","@row cells ","@row index "]}," Axlsx Cell initialize":{"type":"method","name":"initialize","children":[],"call":["@row cells << ","@row cells "," cast_value "," style= ","options [] "," cell_type_from_value ","row worksheet workbook styles ","row worksheet workbook ","row worksheet "," row= "," send ","o [] "," respond_to? ","options each "," parse_options ","value cell= "," contains_rich_text? "," value= "," formula_value= ","val nil? ","options delete ","val == "," type= ","type == "," cast_options delete ue "," cell_type_from_options delete ue ","options delete ue cell= "," options delete ue= "," formula_options delete ue= ","options delete  nil? ","options delete  == "]}," Axlsx Workbook to_xml":{"type":"method","name":"to_xml","children":[],"call":["builder to_xml ","xml sheet ","sheet rId ","index + ","sheet name ","@worksheets each_with_index ","xml sheets ","xml workbookPr ","xml workbook ","Nokogiri XML Builder  new "," add_worksheet "," worksheets size > "," worksheets size "," worksheets "]}," Axlsx Workbook relationships":{"type":"method","name":"relationships","children":[],"call":["r << ","Relationship  new ","WORKSHEET_PN  % ","r size + ","r size ","@worksheets each ","Relationships  new "," use_shared_strings ","PIVOT_TABLE_CACHE_DEFINITION_PN  % ","index + "," pivot_tables each_with_index "," pivot_tables ","pivot_table cache_definition ","Relationships  new  << ","Relationships  new  size + ","Relationships  new  size ","@woRelationships  new ksheets each "," use_shaRelationships  new ed_stRelationships  new ings "]}," Axlsx Workbook add_worksheet":{"type":"method","name":"add_worksheet","children":[],"call":[" block_given? ","Worksheet  new "]}," Axlsx Workbook date1904":{"type":"method","name":"date1904","children":[],"call":[]}," Axlsx Workbook date1904=":{"type":"method","name":"date1904=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Workbook initialize":{"type":"method","name":"initialize","children":[],"call":[" date1904= ","options [] ","options [] nil? ","SimpleTypedList  new ","Styles  new "," block_given? "," is_bsd? ","options [] nil? ! "]}," Axlsx validate_table_element_type":{"type":"method","name":"validate_table_element_type","children":[],"call":[]}," Axlsx validate_relationship_type":{"type":"method","name":"validate_relationship_type","children":[],"call":[]}," Axlsx validate_content_type":{"type":"method","name":"validate_content_type","children":[],"call":[]}," Axlsx validate_vertical_alignment":{"type":"method","name":"validate_vertical_alignment","children":[],"call":[]}," Axlsx validate_horizontal_alignment":{"type":"method","name":"validate_horizontal_alignment","children":[],"call":[]}," Axlsx validate_gradient_type":{"type":"method","name":"validate_gradient_type","children":[],"call":[]}," Axlsx validate_pattern_type":{"type":"method","name":"validate_pattern_type","children":[],"call":[]}," Axlsx validate_float":{"type":"method","name":"validate_float","children":[],"call":[]}," Axlsx validate_string":{"type":"method","name":"validate_string","children":[],"call":[]}," Axlsx validate_boolean":{"type":"method","name":"validate_boolean","children":[],"call":[]}," Axlsx validate_int":{"type":"method","name":"validate_int","children":[],"call":[]}," Axlsx validate_unsigned_int":{"type":"method","name":"validate_unsigned_int","children":[],"call":[]}," Axlsx DataTypeValidator validate":{"type":"method","name":"validate","children":[],"call":[" lambda "]}," Axlsx RegexValidator validate":{"type":"method","name":"validate","children":[],"call":[]}," Axlsx RestrictionValidator validate":{"type":"method","name":"validate","children":[],"call":[]}," Axlsx SimpleTypedList to_xml":{"type":"method","name":"to_xml","children":[],"call":["item to_xml ","@list each ","xml send ","@list size ","(send\n  (send\n    (send\n      (lvar :classname) :[]\n      (int 0)\n      (int 1)) :downcase) :+\n  (send\n    (lvar :classname) :[]\n    (irange\n      (int 1)\n      (int -1)))) pluralize ","classname [] downcase + ","classname [] ","classname [] downcase "," serialize_as ","@allowed_types [] name split last ","@allowed_types [] name split ","@allowed_types [] name ","@allowed_types [] ","(send\n  (send\n    (send\n      (lvar :@allowed_types [] name split last ) :[]\n      (int 0)\n      (int 1)) :downcase) :+\n  (send\n    (lvar :@allowed_types [] name split last ) :[]\n    (irange\n      (int 1)\n      (int -1)))) pluralize ","@allowed_types [] name split last  [] downcase + ","@allowed_types [] name split last  [] ","@allowed_types [] name split last  [] downcase "]}," Axlsx SimpleTypedList method_missing":{"type":"method","name":"method_missing","children":[],"call":["@list send ","@list respond_to? "," raise ","(sym :replace) include? ","meth to_sym "," puts ","meth inspect "]}," Axlsx SimpleTypedList protected?":{"type":"method","name":"protected?","children":[],"call":["index < ","@locked_at is_a? "," locked_at "," locked_at is_a? "]}," Axlsx SimpleTypedList []=":{"type":"method","name":"[]=","children":[],"call":["@list []= "," raise "," protected? ","DataTypeValidator  validate "]}," Axlsx SimpleTypedList delete_at":{"type":"method","name":"delete_at","children":[],"call":["@list delete_at "," raise "," protected? ","@list [] "]}," Axlsx SimpleTypedList delete":{"type":"method","name":"delete","children":[],"call":["@list delete "," raise "," protected? ","@list index ","@list include? "," index "," include? "]}," Axlsx SimpleTypedList push":{"type":"method","name":"push","children":[],"call":[" << "]}," Axlsx SimpleTypedList <<":{"type":"method","name":"<<","children":[],"call":["@list size - ","@list size ","@list << ","DataTypeValidator  validate "]}," Axlsx SimpleTypedList unlock":{"type":"method","name":"unlock","children":[],"call":[]}," Axlsx SimpleTypedList lock":{"type":"method","name":"lock","children":[],"call":["@list size "]}," Axlsx SimpleTypedList initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","type is_a? ","item is_a? ","type each ","Array  new ","serialize_as nil? "]}," Axlsx Xf to_xml":{"type":"method","name":"to_xml","children":[],"call":[" protection to_xml "," protection "," alignment to_xml "," alignment ","xml xf ","(sym :alignment) include? ","k to_sym "," instance_values reject "," instance_values "]}," Axlsx Xf applyProtection=":{"type":"method","name":"applyProtection=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Xf applyAlignment=":{"type":"method","name":"applyAlignment=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Xf applyBorder=":{"type":"method","name":"applyBorder=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Xf applyFill=":{"type":"method","name":"applyFill=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Xf applyFont=":{"type":"method","name":"applyFont=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Xf applyNumberFormat=":{"type":"method","name":"applyNumberFormat=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Xf pivotButton=":{"type":"method","name":"pivotButton=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Xf quotePrefix=":{"type":"method","name":"quotePrefix=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Xf xfId=":{"type":"method","name":"xfId=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Xf borderId=":{"type":"method","name":"borderId=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Xf fillId=":{"type":"method","name":"fillId=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Xf fontId=":{"type":"method","name":"fontId=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Xf numFmtId=":{"type":"method","name":"numFmtId=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Xf protection=":{"type":"method","name":"protection=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Xf alignment=":{"type":"method","name":"alignment=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Xf initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each ","o [] nil? "," parse_options "]}," Axlsx TableStyles to_xml":{"type":"method","name":"to_xml","children":[],"call":["table_style to_xml "," each ","xml tableStyles ","attr []= "," size ","(sym :defaultTableStyle) include? ! ","(sym :defaultTableStyle) include? ","k to_sym "," instance_values reject "," instance_values "]}," Axlsx TableStyles defaultPivotStyle=":{"type":"method","name":"defaultPivotStyle=","children":[],"call":["Axlsx  validate_string "]}," Axlsx TableStyles defaultTableStyle=":{"type":"method","name":"defaultTableStyle=","children":[],"call":["Axlsx  validate_string "]}," Axlsx TableStyles initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," Axlsx TableStyleElement to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml tableStyleElement "," instance_values "]}," Axlsx TableStyleElement dxfId=":{"type":"method","name":"dxfId=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx TableStyleElement size=":{"type":"method","name":"size=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx TableStyleElement type=":{"type":"method","name":"type=","children":[],"call":["Axlsx  validate_table_element_type "]}," Axlsx TableStyleElement initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," parse_options "]}," Axlsx TableStyle to_xml":{"type":"method","name":"to_xml","children":[],"call":["table_style_el to_xml "," each ","xml tableStyle ","attr []= "," size ","(sym :name) include? "," instance_values select "," instance_values "]}," Axlsx TableStyle table=":{"type":"method","name":"table=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx TableStyle pivot=":{"type":"method","name":"pivot=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx TableStyle name=":{"type":"method","name":"name=","children":[],"call":["Axlsx  validate_string "]}," Axlsx TableStyle initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," name= "," parse_options "]}," Axlsx Styles load_default_styles":{"type":"method","name":"load_default_styles","children":[],"call":["@tableStyles lock ","TableStyles  new ","@dxfs lock ","SimpleTypedList  new ","@cellXfs lock ","@cellXfs << ","Xf  new ","@cellStyles lock ","@cellStyles << ","CellStyle  new ","@cellStyleXfs lock ","@cellStyleXfs << ","@borders lock ","@borders << ","black_border prs << ","BorderPr  new ","Color  new ","black_border prs ","(sym :left) each ","Border  new ","@fills lock ","@fills << ","Fill  new ","Axlsx PatternFill  new ","@fonts lock ","@fonts << ","Font  new ","@numFmts lock ","@numFmts << ","NumFmt  new ","TableStyles  new  lock ","SimpleTypedList  new  lock ","SimpleTypedList  new  << ","Border  new  prs << ","Border  new  prs "]}," Axlsx Styles to_xml":{"type":"method","name":"to_xml","children":[],"call":["builder to_xml "," instance_values [] to_xml "," instance_values [] ","key to_s "," instance_values ","(sym :numFmts) each ","xml styleSheet ","Nokogiri XML Builder  new "," instance_values [] nil? "]}," Axlsx Styles add_style":{"type":"method","name":"add_style","children":[],"call":[" cellXfs << "," cellXfs ","xf protection= ","CellProtection  new ","xf alignment= ","CellAlignment  new ","options [] ","Xf  new "," fonts << "," fonts ","font name= ","options [] nil? ","font color= ","Color  new ","font send ","(sym :b) each ","Font  new ","options values_at length ","options values_at "," fills << ","Fill  new "," fills ","PatternFill  new "," raise ","borderId < "," borders size "," borders "," numFmts << ","NumFmt  new "," numFmts ","(send\n  (ivar :@numFmts) :map) max + ","(send\n  (ivar :@numFmts) :map) max ","f numFmtId ","@numFmts map ","xf applyNumberFormat= ","xf numFmtId > ","xf numFmtId ","xf applyBorder= ","borderId > ","xf applyAlignment= "," borders << ","border prs << ","BorderPr  new ","border prs ","(sym :left) each ","Border  new ","borderId delete ","borderId keys include? ","borderId keys ","borderId is_a? ","edges each ","borderId [] "," dxfs << "," dxfs ","options [] == ","protection nil? ! ","protection nil? ","alignment nil? ! ","alignment nil? ","border nil? ! ","border nil? ","numFmt nil? ! ","numFmt nil? ","font nil? ! ","font nil? ","fill nil? ! ","fill nil? ","Dxf  new "," parse_protection_options "," parse_alignment_options "," parse_border_options "," parse_num_fmt_options "," parse_font_options "," parse_fill_options ","(sym :xf) include? "," borderId delete ellXfs << "," borderId [] ellXfs << "," cellXfborderId delete  << "," cellXfborderId []  << "," borderId delete ellXfs "," borderId [] ellXfs "," cellXfborderId delete  "," cellXfborderId []  ","Xf  new  protection= ","xf protectio(send\n  (ivar :@numFmts) :map) max + = ","xf proteborderId delete tion= ","xf proteborderId [] tion= ","xf  parse_protection_options = ","CellProtectio(send\n  (ivar :@numFmts) :map) max +   (send\n  (ivar :@numFmts) :map) max + ew ","CellProteborderId delete tion  new ","CellProteborderId [] tion  new ","Xf  new  alignment= ","xf alig(send\n  (ivar :@numFmts) :map) max + me(send\n  (ivar :@numFmts) :map) max + t= ","xf  parse_alignment_options = ","CellAlig(send\n  (ivar :@numFmts) :map) max + me(send\n  (ivar :@numFmts) :map) max + t  (send\n  (ivar :@numFmts) :map) max + ew ","optio(send\n  (ivar :@numFmts) :map) max + s [] ","optionborderId delete  [] ","optionborderId []  [] ","Xf  (send\n  (ivar :@numFmts) :map) max + ew "," Font  new s << ","  parse_font_options s << "," fo(send\n  (ivar :@numFmts) :map) max + ts << "," fontborderId delete  << "," fontborderId []  << "," Font  new s ","  parse_font_options s "," fo(send\n  (ivar :@numFmts) :map) max + ts "," fontborderId delete  "," fontborderId []  ","Font  new  name= "," parse_font_options  name= ","fo(send\n  (ivar :@numFmts) :map) max + t (send\n  (ivar :@numFmts) :map) max + ame= ","optio(send\n  (ivar :@numFmts) :map) max + s [] (send\n  (ivar :@numFmts) :map) max + il? ","optionborderId delete  [] nil? ","optionborderId []  [] nil? ","Font  new  color= "," parse_font_options  color= ","font Color  new = ","fo(send\n  (ivar :@numFmts) :map) max + t color= ","font borderId delete olor= ","font borderId [] olor= ","Color  (send\n  (ivar :@numFmts) :map) max + ew ","Font  new  send "," parse_font_options  send ","fo(send\n  (ivar :@numFmts) :map) max + t se(send\n  (ivar :@numFmts) :map) max + d ","font borderId delete end ","font borderId [] end ","(sym :b) eaborderId delete h ","(sym :b) eaborderId [] h ","(borderId delete ym :b) each ","(borderId [] ym :b) each ","Fo(send\n  (ivar :@numFmts) :map) max + t  (send\n  (ivar :@numFmts) :map) max + ew ","optio(send\n  (ivar :@numFmts) :map) max + s values_at le(send\n  (ivar :@numFmts) :map) max + gth ","optionborderId delete  valueborderId delete _at length ","optionborderId []  valueborderId [] _at length ","optio(send\n  (ivar :@numFmts) :map) max + s values_at ","optionborderId delete  valueborderId delete _at ","optionborderId []  valueborderId [] _at "," fillborderId delete  << "," fillborderId []  << ","  parse_fill_options s << ","Fill  (send\n  (ivar :@numFmts) :map) max + ew "," fillborderId delete  "," fillborderId []  ","  parse_fill_options s ","Patter(send\n  (ivar :@numFmts) :map) max + Fill  (send\n  (ivar :@numFmts) :map) max + ew "," raiborderId delete e "," raiborderId [] e "," borders <<  < ","Border  new Id < "," parse_border_options Id < "," Border  new s size ","  parse_border_options s size "," borderborderId delete  borderId delete ize "," borderborderId []  borderId [] ize "," Border  new s ","  parse_border_options s "," borderborderId delete  "," borderborderId []  "," (send\n  (ivar :@numFmts) :map) max + umFmts << "," numFmtborderId delete  << "," numFmtborderId []  << ","  parse_num_fmt_options s << ","NumFmt  (send\n  (ivar :@numFmts) :map) max + ew "," (send\n  (ivar :@numFmts) :map) max + umFmts "," numFmtborderId delete  "," numFmtborderId []  ","  parse_num_fmt_options s ","(se(send\n  (ivar :@numFmts) :map) max + d\n  (ivar :@(send\n  (ivar :@numFmts) :map) max + umFmts) :map) max + ","(borderId delete end\n  (ivar :@numFmtborderId delete ) :map) max + ","(borderId [] end\n  (ivar :@numFmtborderId [] ) :map) max + ","(send\n  (ivar :@ parse_num_fmt_options s) :map) max + ","(se(send\n  (ivar :@numFmts) :map) max + d\n  (ivar :@(send\n  (ivar :@numFmts) :map) max + umFmts) :map) max ","(borderId delete end\n  (ivar :@numFmtborderId delete ) :map) max ","(borderId [] end\n  (ivar :@numFmtborderId [] ) :map) max ","(send\n  (ivar :@ parse_num_fmt_options s) :map) max ","f (send\n  (ivar :@numFmts) :map) max + umFmtId ","f  parse_num_fmt_options Id ","@(send\n  (ivar :@numFmts) :map) max + umFmts map ","@numFmtborderId delete  map ","@numFmtborderId []  map ","@ parse_num_fmt_options s map ","Xf  new  applyNumberFormat= ","Xf  new  numFmtId > ","xf (send\n  (ivar :@numFmts) :map) max + umFmtId > ","xf  parse_num_fmt_options Id > ","Xf  new  numFmtId ","xf (send\n  (ivar :@numFmts) :map) max + umFmtId ","xf  parse_num_fmt_options Id ","Xf  new  applyBorder= "," borders <<  > ","Border  new Id > "," parse_border_options Id > ","Xf  new  applyAlignment= ","xf applyAlig(send\n  (ivar :@numFmts) :map) max + me(send\n  (ivar :@numFmts) :map) max + t= "," Border  new s << ","  parse_border_options s << "," borderborderId delete  << "," borderborderId []  << ","Border  new  prs << "," parse_border_options  prs << ","border prborderId delete  << ","border prborderId []  << ","BorderPr  (send\n  (ivar :@numFmts) :map) max + ew ","Border  new  prs "," parse_border_options  prs ","border prborderId delete  ","border prborderId []  ","(sym :left) eaborderId delete h ","(sym :left) eaborderId [] h ","(borderId delete ym :left) each ","(borderId [] ym :left) each ","Border  (send\n  (ivar :@numFmts) :map) max + ew "," borders <<  delete ","Border  new Id delete "," parse_border_options Id delete ","borderId keys i(send\n  (ivar :@numFmts) :map) max + clude? "," borders <<  keys include? ","Border  new Id keys include? "," parse_border_options Id keys include? ","borderId keys inborderId delete lude? ","borderId keys inborderId [] lude? ","borderId keyborderId delete  include? ","borderId keyborderId []  include? "," borders <<  keys ","Border  new Id keys "," parse_border_options Id keys ","borderId keyborderId delete  ","borderId keyborderId []  "," borders <<  is_a? ","Border  new Id is_a? "," parse_border_options Id is_a? ","borderId iborderId delete _a? ","borderId iborderId [] _a? ","edges eaborderId delete h ","edges eaborderId [] h ","edgeborderId delete  each ","edgeborderId []  each "," borders <<  [] ","Border  new Id [] "," parse_border_options Id [] "," dXf  new s << "," dxfborderId delete  << "," dxfborderId []  << "," dXf  new s "," dxfborderId delete  "," dxfborderId []  ","optio(send\n  (ivar :@numFmts) :map) max + s [] == ","optionborderId delete  [] == ","optionborderId []  [] == ","protectio(send\n  (ivar :@numFmts) :map) max +  (send\n  (ivar :@numFmts) :map) max + il? ! ","proteborderId delete tion nil? ! ","proteborderId [] tion nil? ! "," parse_protection_options  nil? ! ","protectio(send\n  (ivar :@numFmts) :map) max +  (send\n  (ivar :@numFmts) :map) max + il? ","proteborderId delete tion nil? ","proteborderId [] tion nil? "," parse_protection_options  nil? ","alig(send\n  (ivar :@numFmts) :map) max + me(send\n  (ivar :@numFmts) :map) max + t (send\n  (ivar :@numFmts) :map) max + il? ! "," parse_alignment_options  nil? ! ","alig(send\n  (ivar :@numFmts) :map) max + me(send\n  (ivar :@numFmts) :map) max + t (send\n  (ivar :@numFmts) :map) max + il? "," parse_alignment_options  nil? ","border (send\n  (ivar :@numFmts) :map) max + il? ! ","Border  new  nil? ! "," parse_border_options  nil? ! ","border (send\n  (ivar :@numFmts) :map) max + il? ","Border  new  nil? "," parse_border_options  nil? ","(send\n  (ivar :@numFmts) :map) max + umFmt (send\n  (ivar :@numFmts) :map) max + il? ! "," parse_num_fmt_options  nil? ! ","(send\n  (ivar :@numFmts) :map) max + umFmt (send\n  (ivar :@numFmts) :map) max + il? "," parse_num_fmt_options  nil? ","Font  new  nil? ! "," parse_font_options  nil? ! ","fo(send\n  (ivar :@numFmts) :map) max + t (send\n  (ivar :@numFmts) :map) max + il? ! ","Font  new  nil? "," parse_font_options  nil? ","fo(send\n  (ivar :@numFmts) :map) max + t (send\n  (ivar :@numFmts) :map) max + il? ","fill (send\n  (ivar :@numFmts) :map) max + il? ! "," parse_fill_options  nil? ! ","fill (send\n  (ivar :@numFmts) :map) max + il? "," parse_fill_options  nil? ","DXf  new   new ","Dxf  (send\n  (ivar :@numFmts) :map) max + ew "," parse_protectio(send\n  (ivar :@numFmts) :map) max + _optio(send\n  (ivar :@numFmts) :map) max + s "," parse_proteborderId delete tion_options "," parse_proteborderId [] tion_options "," parborderId delete e_protection_optionborderId delete  "," parborderId [] e_protection_optionborderId []  "," parse_ parse_protection_options _options "," parse_alig(send\n  (ivar :@numFmts) :map) max + me(send\n  (ivar :@numFmts) :map) max + t_optio(send\n  (ivar :@numFmts) :map) max + s "," parborderId delete e_alignment_optionborderId delete  "," parborderId [] e_alignment_optionborderId []  "," parse_ parse_alignment_options _options "," parse_border_optio(send\n  (ivar :@numFmts) :map) max + s "," parse_Border  new _options "," parse_ parse_border_options _options "," parborderId delete e_border_optionborderId delete  "," parborderId [] e_border_optionborderId []  "," parse_(send\n  (ivar :@numFmts) :map) max + um_fmt_optio(send\n  (ivar :@numFmts) :map) max + s "," parborderId delete e_num_fmt_optionborderId delete  "," parborderId [] e_num_fmt_optionborderId []  "," parse_Font  new _options "," parse_ parse_font_options _options "," parse_fo(send\n  (ivar :@numFmts) :map) max + t_optio(send\n  (ivar :@numFmts) :map) max + s "," parborderId delete e_font_optionborderId delete  "," parborderId [] e_font_optionborderId []  "," parse_fill_optio(send\n  (ivar :@numFmts) :map) max + s "," parborderId delete e_fill_optionborderId delete  "," parborderId [] e_fill_optionborderId []  "," parse_ parse_fill_options _options ","(sym :Xf  new ) include? ","(sym :xf) i(send\n  (ivar :@numFmts) :map) max + clude? ","(sym :xf) inborderId delete lude? ","(sym :xf) inborderId [] lude? ","(borderId delete ym :xf) include? ","(borderId [] ym :xf) include? "]}," Axlsx Styles initialize":{"type":"method","name":"initialize","children":[],"call":[" load_default_styles "]}," Axlsx PatternFill to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml send ","v instance_values ","(send\n  (send\n    (self) :instance_values) :reject) each ","k to_sym == ","k to_sym "," instance_values reject "," instance_values ","xml patternFill "," patternType "]}," Axlsx PatternFill patternType=":{"type":"method","name":"patternType=","children":[],"call":["Axlsx  validate_pattern_type "]}," Axlsx PatternFill bgColor=":{"type":"method","name":"bgColor=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx PatternFill fgColor=":{"type":"method","name":"fgColor=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx PatternFill initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," parse_options "]}," Axlsx NumFmt to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml numFmt "," instance_values "]}," Axlsx NumFmt formatCode=":{"type":"method","name":"formatCode=","children":[],"call":["Axlsx  validate_string "]}," Axlsx NumFmt numFmtId=":{"type":"method","name":"numFmtId=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx NumFmt initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," parse_options "]}," Axlsx GradientStop to_xml":{"type":"method","name":"to_xml","children":[],"call":[" color to_xml "," color ","xml stop "," position "]}," Axlsx GradientStop position=":{"type":"method","name":"position=","children":[],"call":["DataTypeValidator  validate ","v <= ","v >= "," lambda ","arg <= ","arg >= "]}," Axlsx GradientStop color=":{"type":"method","name":"color=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx GradientStop initialize":{"type":"method","name":"initialize","children":[],"call":[" position= "," color= "]}," Axlsx GradientFill to_xml":{"type":"method","name":"to_xml","children":[],"call":["s to_xml ","@stop each ","xml gradientFill ","k to_sym == ","k to_sym "," instance_values reject "," instance_values "]}," Axlsx GradientFill bottom=":{"type":"method","name":"bottom=","children":[],"call":["DataTypeValidator  validate ","v <= ","v >= "," lambda ","arg <= ","arg >= "," validate_format_percentage "]}," Axlsx GradientFill top=":{"type":"method","name":"top=","children":[],"call":["DataTypeValidator  validate ","v <= ","v >= "," lambda ","arg <= ","arg >= "," validate_format_percentage "]}," Axlsx GradientFill right=":{"type":"method","name":"right=","children":[],"call":["DataTypeValidator  validate ","v <= ","v >= "," lambda ","arg <= ","arg >= "," validate_format_percentage "]}," Axlsx GradientFill left=":{"type":"method","name":"left=","children":[],"call":["DataTypeValidator  validate ","v <= ","v >= "," lambda ","arg <= ","arg >= "," validate_format_percentage "]}," Axlsx GradientFill degree=":{"type":"method","name":"degree=","children":[],"call":["Axlsx  validate_float "]}," Axlsx GradientFill type=":{"type":"method","name":"type=","children":[],"call":["Axlsx  validate_gradient_type "]}," Axlsx GradientFill initialize":{"type":"method","name":"initialize","children":[],"call":["SimpleTypedList  new "," send ","o [] "," respond_to? ","options each ","options [] "," parse_options "]}," Axlsx Font to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml send ","v to_xml ","v is_a? "," instance_values each "," instance_values ","xml font "]}," Axlsx Font sz=":{"type":"method","name":"sz=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Font color=":{"type":"method","name":"color=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Font extend=":{"type":"method","name":"extend=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Font condense=":{"type":"method","name":"condense=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Font shadow=":{"type":"method","name":"shadow=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Font outline=":{"type":"method","name":"outline=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Font strike=":{"type":"method","name":"strike=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Font i=":{"type":"method","name":"i=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Font b=":{"type":"method","name":"b=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Font family=":{"type":"method","name":"family=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Font charset=":{"type":"method","name":"charset=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Font name=":{"type":"method","name":"name=","children":[],"call":["Axlsx  validate_string "]}," Axlsx Font initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each ","o [] nil? "," parse_options "]}," Axlsx Fill fill_type=":{"type":"method","name":"fill_type=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Fill to_xml":{"type":"method","name":"to_xml","children":[],"call":["@fill_type to_xml ","xml fill "]}," Axlsx Fill initialize":{"type":"method","name":"initialize","children":[],"call":[" fill_type= "]}," Axlsx Color to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml color "," instance_values "]}," Axlsx Color tint=":{"type":"method","name":"tint=","children":[],"call":["Axlsx  validate_float "]}," Axlsx Color rgb=":{"type":"method","name":"rgb=","children":[],"call":["Axlsx  validate_string "," raise ","v match ","v rjust ","v * ","v size == ","v size ","v upcase! ","v upcase ","Axlsx  v rjust alidate_string ","Axlsx  v * alidate_string ","Axlsx  v upcase alidate_string ","v rjust  match ","v *  match ","v upcase  match ","v rjust  rjust ","v *  rjust ","v upcase  rjust ","v rjust  * ","v *  * ","v upcase  * ","v rjust  size == ","v *  size == ","v upcase  size == ","v rjust  size ","v *  size ","v upcase  size ","v rjust  upcase! ","v *  upcase! ","v upcase  upcase! ","v rjust  upcase ","v *  upcase ","v upcase  upcase "]}," Axlsx Color auto=":{"type":"method","name":"auto=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Color initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," parse_options "]}," Axlsx CellStyle to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml cellStyle "," instance_values "]}," Axlsx CellStyle customBuiltin=":{"type":"method","name":"customBuiltin=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx CellStyle hidden=":{"type":"method","name":"hidden=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx CellStyle iLevel=":{"type":"method","name":"iLevel=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx CellStyle builtinId=":{"type":"method","name":"builtinId=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx CellStyle xfId=":{"type":"method","name":"xfId=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx CellStyle name=":{"type":"method","name":"name=","children":[],"call":["Axlsx  validate_string "]}," Axlsx CellStyle initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," parse_options "]}," Axlsx CellProtection to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml protection "," instance_values "]}," Axlsx CellProtection locked=":{"type":"method","name":"locked=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx CellProtection hidden=":{"type":"method","name":"hidden=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx CellProtection initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," parse_options "]}," Axlsx CellAlignment to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml alignment "," instance_values "]}," Axlsx CellAlignment readingOrder=":{"type":"method","name":"readingOrder=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx CellAlignment shrinkToFit=":{"type":"method","name":"shrinkToFit=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx CellAlignment justifyLastLine=":{"type":"method","name":"justifyLastLine=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx CellAlignment relativeIndent=":{"type":"method","name":"relativeIndent=","children":[],"call":["Axlsx  validate_int "]}," Axlsx CellAlignment indent=":{"type":"method","name":"indent=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx CellAlignment wrapText=":{"type":"method","name":"wrapText=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx CellAlignment textRotation=":{"type":"method","name":"textRotation=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx CellAlignment vertical=":{"type":"method","name":"vertical=","children":[],"call":["Axlsx  validate_vertical_alignment "]}," Axlsx CellAlignment horizontal=":{"type":"method","name":"horizontal=","children":[],"call":["Axlsx  validate_horizontal_alignment "]}," Axlsx CellAlignment initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," parse_options "]}," Axlsx BorderPr to_xml":{"type":"method","name":"to_xml","children":[],"call":["@color to_xml ","@color is_a? ","xml send "]}," Axlsx BorderPr style=":{"type":"method","name":"style=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx BorderPr color=":{"type":"method","name":"color=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx BorderPr name=":{"type":"method","name":"name=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx BorderPr initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," parse_options "]}," Axlsx Border to_xml":{"type":"method","name":"to_xml","children":[],"call":["pr to_xml ","(send\n  (ivar :@prs) :select) each ","pr name == ","pr name ","@prs select ","(sym :start) each ","xml border ","(sym :diagonalUp) include? "," instance_values select "," instance_values ","part to_xml "]}," Axlsx Border outline=":{"type":"method","name":"outline=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Border diagonalDown=":{"type":"method","name":"diagonalDown=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Border diagonalUp=":{"type":"method","name":"diagonalUp=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Border initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each ","SimpleTypedList  new "," parse_options "]}," Axlsx Relationships to_xml":{"type":"method","name":"to_xml","children":[],"call":["builder to_xml ","rel to_xml ","index + "," each_with_index ","xml Relationships ","Nokogiri XML Builder  new "]}," Axlsx Relationships initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx Relationship to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml Relationship ","h []= "," instance_values ","xml Relations instance_values ip "," instance_values  []= "]}," Axlsx Relationship Type=":{"type":"method","name":"Type=","children":[],"call":["Axlsx  validate_relationship_type "]}," Axlsx Relationship Target=":{"type":"method","name":"Target=","children":[],"call":["Axlsx  validate_string "]}," Axlsx Relationship initialize":{"type":"method","name":"initialize","children":[],"call":[" Type= "," Target= "," TargetMode= ","options delete ","options [] "," class instances << "," class instances "," class "," class next_free_id ","existing Id "," should_use_same_id_as? "," class instances find "]}," Axlsx Package relationships":{"type":"method","name":"relationships","children":[],"call":["rels lock ","rels << ","Relationship  new ","Axlsx Relationships  new ","Axlsx Relationships  new  lock ","Axlsx Relationships  new  << "]}," Axlsx Package base_content_types":{"type":"method","name":"base_content_types","children":[],"call":["c_types lock ","c_types << ","Axlsx Override  new ","Override  new ","Default  new ","ContentType  new ","ContentType  new  lock ","ContentType  new  << "]}," Axlsx Package content_types":{"type":"method","name":"content_types","children":[],"call":["c_types << ","Axlsx Override  new ","sheet pn "," workbook worksheets each "," workbook worksheets "," workbook ","chart pn "," workbook charts each "," workbook charts ","drawing pn "," workbook drawings each "," workbook drawings "," base_content_types ","Axlsx Default  new ","ext == ","(str \"jpeg\") include? ","exts uniq each ","exts uniq ","image extname "," workbook images map "," workbook images "," use_shared_strings ","table pn "," workbook tables each "," workbook tables "," workbook comments size > "," workbook comments size "," workbook comments ","comment pn ","comment size > ","comment size "," workbook comments each ","pivot_table cache_definition pn ","pivot_table cache_definition ","pivot_table pn "," workbook pivot_tables each "," workbook pivot_tables ","image extname downcase "," base_content_types  << "]}," Axlsx Package validate_single_doc":{"type":"method","name":"validate_single_doc","children":[],"call":["errors << ","schema validate each ","schema validate ","Nokogiri  XML ","Nokogiri XML  Schema ","File  open ","Nokogiri XML  Schema  validate each ","Nokogiri XML  Schema  validate "]}," Axlsx Package parts":{"type":"method","name":"parts","children":[],"call":["@parts << ","sheet to_xml ","sheet pn ","sheet relationships to_xml ","sheet relationships ","sheet rels_pn "," workbook worksheets each "," workbook worksheets "," workbook ","chart to_xml ","chart pn "," workbook charts each "," workbook charts ","drawing to_xml ","drawing pn ","drawing relationships to_xml ","drawing relationships ","drawing rels_pn "," workbook drawings each "," workbook drawings "," workbook styles to_xml "," workbook styles "," content_types to_xml "," content_types "," workbook to_xml "," workbook relationships to_xml "," workbook relationships ","@app to_xml ","@core to_xml "," relationships to_xml "," relationships ","image image_src ","image pn "," workbook images each "," workbook images "," workbook shared_strings to_xml "," workbook shared_strings "," use_shared_strings ","sheet to_xml_string ","sheet relationships to_xml_string "," workbook shared_strings to_xml_string ","chart to_xml_string ","table to_xml_string ","table pn "," workbook tables each "," workbook tables ","drawing to_xml_string ","drawing relationships to_xml_string "," workbook to_xml_string "," content_types to_xml_string "," workbook relationships to_xml_string ","@app to_xml_string ","@core to_xml_string "," workbook styles to_xml_string "," relationships to_xml_string ","comment vml_drawing to_xml_string ","comment vml_drawing ","comment vml_drawing pn ","comment to_xml_string ","comment pn ","comment size > ","comment size "," workbook comments each "," workbook comments ","parts << ","cache_definition to_xml_string ","cache_definition pn ","pivot_table to_xml_string ","pivot_table pn ","pivot_table relationships to_xml_string ","pivot_table relationships ","pivot_table rels_pn ","pivot_table cache_definition "," workbook pivot_tables each "," workbook pivot_tables ","part [] ","parts sort_by ","pivot_table cache_definition  to_xml_string ","pivot_table cache_definition  pn ","pivot_table pivot_table cache_definition  "]}," Axlsx Package validate":{"type":"method","name":"validate","children":[],"call":["errors concat "," validate_single_doc ","part [] "," parts each "," parts ","part [] nil? ","part [] to_xml_string ","part [] is_a? "]}," Axlsx Package serialize":{"type":"method","name":"serialize","children":[],"call":["zip puts ","part [] ","zip put_next_entry "," parts each "," parts ","Zip ZipOutputStream  open ","output path "," validate empty? "," validate ","confirm_valid ! ","f path ","File  new ","zip write ","IO  read ","IO  binread ","IO  respond_to? ","part [] nil? ","p each ","part [] force_encoding ","(str \"1.9.2\") include? "," write_parts ","zip add "," proc ","Zip ZipFile  open ","Relationship  clear_cached_instances ","Zip OutputStream  open ","zi parts   parts uts "," parts art [] ","zi parts   parts ut_next_entry ","zip put_next_part []  ","zip put_next_part [] force_encoding  ","  parts arts each ","  parts arts ","Zi parts  Zi parts Out parts utStream  o parts en ","out parts ut  parts ath "," validate em parts ty? ","conFile  new irm_valid ! ","File  new  path ","f  parts ath ","zi parts  write ","IO  res parts ond_to? "," parts art [] nil? "," parts  each ","part [] File  new orce_encoding "," parts art [] force_encoding "," write_ parts arts ","zi parts  add ","  parts roc ","Zi parts  Zi parts File  o parts en ","Relationshi parts   clear_cached_instances ","Zi parts  Out parts utStream  o parts en "]}," Axlsx Package workbook":{"type":"method","name":"workbook","children":[],"call":["Workbook  new "," block_given? "]}," Axlsx Package workbook=":{"type":"method","name":"workbook=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Package initialize":{"type":"method","name":"initialize","children":[],"call":[" workbook= ","options [] ","@core creator= ","@core creator ","App  new ","Core  new "," block_given? "," send ","o [] "," respond_to? ","options each "," parse_options ","@core created= "]}," Axlsx View3D to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml send ","@perspective nil? ","@rAngAx nil? ","@depthPercent nil? ","@rotY nil? ","@hPercent nil? ","@rotX nil? ","xml [] perspective ","xml [] ","xml [] rAngAx ","xml [] depthPercent ","xml [] rotY ","xml [] hPercent ","xml [] rotX ","xml [] view3D "]}," Axlsx View3D perspective=":{"type":"method","name":"perspective=","children":[],"call":["DataTypeValidator  validate ","v <= ","v >= "," lambda "," class ","arg <= ","arg >= ","RangeValidator  validate "]}," Axlsx View3D rAngAx=":{"type":"method","name":"rAngAx=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx View3D depthPercent=":{"type":"method","name":"depthPercent=","children":[],"call":["RegexValidator  validate "," class "]}," Axlsx View3D rotY=":{"type":"method","name":"rotY=","children":[],"call":["DataTypeValidator  validate ","v <= ","v >= "," lambda "," class ","arg <= ","arg >= "]}," Axlsx View3D hPercent=":{"type":"method","name":"hPercent=","children":[],"call":["RegexValidator  validate "," class "]}," Axlsx View3D rotX=":{"type":"method","name":"rotX=","children":[],"call":["DataTypeValidator  validate ","v <= ","v >= "," lambda "," class ","arg <= ","arg >= "]}," Axlsx View3D initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," parse_options "]}," Axlsx ValAxis to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml send ","xml crossBetween ","xml valAx "]}," Axlsx ValAxis crossBetween=":{"type":"method","name":"crossBetween=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx ValAxis initialize":{"type":"method","name":"initialize","children":[],"call":[" crossBetween= "," cross_between= "]}," Axlsx TwoCellAnchor to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml send ","@graphic_frame to_xml "," to to_xml "," to "," from to_xml "," from ","@object to_xml ","xml clientData ","xml to ","xml from ","xml [] twoCellAnchor ","xml [] "]}," Axlsx TwoCellAnchor end_at":{"type":"method","name":"end_at","children":[],"call":["@to row= ","@to col= "," set_marker_coords "," to "," to coord "]}," Axlsx TwoCellAnchor start_at":{"type":"method","name":"start_at","children":[],"call":["@from row= ","@from col= "," set_marker_coords "," from "," from coord "]}," Axlsx TwoCellAnchor index":{"type":"method","name":"index","children":[],"call":["@drawing anchors index ","@drawing anchors "]}," Axlsx TwoCellAnchor initialize":{"type":"method","name":"initialize","children":[],"call":["@graphic_frame chart send ","@graphic_frame chart "," end_at ","options [] [] ","options [] ","options [] is_a? "," start_at ","GraphicFrame  new ","Marker  new ","drawing anchors << ","drawing anchors "," parse_options ","GraphicFrame  new  chart send ","GraphicFrame  new  chart "]}," Axlsx Title range":{"type":"method","name":"range","children":[],"call":[" data row r_abs "," data row "," data ","@data row worksheet name ","@data row worksheet ","@data row ","@data is_a? "]}," Axlsx Title to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml send "," range ","Axlsx  cell_range ","xml [] overlay ","xml [] ","xml [] layout ","xml [] v ","xml [] pt ","xml [] ptCount ","xml [] strCache ","xml [] f ","xml [] strRef ","xml [] tx ","@text empty? ","xml [] title "]}," Axlsx Title cell=":{"type":"method","name":"cell=","children":[],"call":["v value to_s ","v value ","DataTypeValidator  validate "]}," Axlsx Title text=":{"type":"method","name":"text=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Title initialize":{"type":"method","name":"initialize","children":[],"call":[" text= ","title to_s ","title is_a? "," cell= "," text_size= ","title_size to_s ","title_size to_s empty? "]}," Axlsx Series to_xml":{"type":"method","name":"to_xml","children":[],"call":[" block_given? ","xml send "," title "," index "," order "," title to_xml "," title nil? ","xml order ","xml idx ","xml ser "]}," Axlsx Series chart=":{"type":"method","name":"chart=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Series title=":{"type":"method","name":"title=","children":[],"call":["Axlsx  validate_string ","DataTypeValidator  validate "," class ","SeriesTitle  new ","v is_a? ","Axlsx  SeriesTitle  new alidate_string ","DataTypeValidator  SeriesTitle  new alidate ","SeriesTitle  new  is_a? "]}," Axlsx Series order":{"type":"method","name":"order","children":[],"call":[" index "]}," Axlsx Series order=":{"type":"method","name":"order=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Series index":{"type":"method","name":"index","children":[],"call":["@chart series index ","@chart series "]}," Axlsx Series initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each ","@chart series << ","@chart series "," chart= "," parse_options "]}," Axlsx Scaling to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml send ","@max nil? ","@min nil? ","@orientation nil? ","@logBase nil? ","xml [] max ","xml [] ","xml [] min ","xml [] orientation ","xml [] logBase ","xml [] scaling "]}," Axlsx Scaling min=":{"type":"method","name":"min=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Scaling max=":{"type":"method","name":"max=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Scaling orientation=":{"type":"method","name":"orientation=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx Scaling logBase=":{"type":"method","name":"logBase=","children":[],"call":["DataTypeValidator  validate ","v <= ","v >= "," lambda ","arg <= ","arg >= "]}," Axlsx Scaling initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," parse_options "]}," Axlsx PieSeries labels=":{"type":"method","name":"labels=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx PieSeries data=":{"type":"method","name":"data=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx PieSeries to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml send ","cell value ","cell is_a? "," data each_with_index "," data "," data size ","Axlsx  cell_range "," labels each_with_index "," labels "," labels size "," labels empty? ! "," labels empty? ","@explosion nil? ","@data to_xml ","@data nil? ","@labels to_xml ","@labels nil? ","xml_inner send ","xml_inner explosion ","cell cell value alue "]}," Axlsx PieSeries explosion=":{"type":"method","name":"explosion=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx PieSeries initialize":{"type":"method","name":"initialize","children":[],"call":[" labels= ","options [] "," data= ","ValAxisData  new ","options [] nil? ","CatAxisData  new ","NumDataSource  new ","AxDataSource  new "]}," Axlsx Pie3DChart to_xml":{"type":"method","name":"to_xml","children":[],"call":["ser to_xml ","@series each ","xml send ","xml [] varyColors ","xml [] ","xml [] pie3DChart "]}," Axlsx Pie3DChart initialize":{"type":"method","name":"initialize","children":[],"call":["View3D  new ","(pair\n  (sym :rotX)\n  (int 30)) merge ","(pair\n  (sym :rot_x)\n  (int 30)) merge "]}," Axlsx Marker to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml send "," send ","k to_s ","(sym :col) each ","k to_sym "]}," Axlsx Marker coord":{"type":"method","name":"coord","children":[],"call":[" row= "," col= ","coordinates [] "," parse_coord_args "," parse_coord_args  [] "]}," Axlsx Marker rowOff=":{"type":"method","name":"rowOff=","children":[],"call":["Axlsx  validate_int "]}," Axlsx Marker row=":{"type":"method","name":"row=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Marker colOff=":{"type":"method","name":"colOff=","children":[],"call":["Axlsx  validate_int "]}," Axlsx Marker col=":{"type":"method","name":"col=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Marker initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," parse_options "]}," Axlsx GraphicFrame to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml send "," rId "," chart title "," chart ","xml [] chart ","xml [] ","xml graphicData ","xml [] graphic ","xml [] ext ","xml [] off ","xml xfrm ","xml cNvGraphicFramePr ","xml cNvPr ","xml nvGraphicFramePr ","xml graphicFrame "]}," Axlsx GraphicFrame rId":{"type":"method","name":"rId","children":[],"call":["@anchor index + ","@anchor index "," warn ","@anchor drawing relationships for Id ","@anchor drawing relationships for "," chart ","@anchor drawing relationships ","@anchor drawing "]}," Axlsx GraphicFrame initialize":{"type":"method","name":"initialize","children":[],"call":["chart_type new ","DataTypeValidator  validate "]}," Axlsx Drawing to_xml":{"type":"method","name":"to_xml","children":[],"call":["builder to_xml ","anchor to_xml "," anchors each "," anchors ","xml send ","Nokogiri XML Builder  new "]}," Axlsx Drawing relationships":{"type":"method","name":"relationships","children":[],"call":["r << ","Relationship  new ","chart pn ","anchor graphic_frame chart ","anchor graphic_frame ","@anchors each ","Relationships  new ","image pn "," images each "," images "," charts each "," charts ","hyperlink href "," hyperlinks each "," hyperlinks ","child relationship "," child_objects each "," child_objects ","Relationships  new  << ","anchor graphic_frame chart  pn ","chaRelationships  new t pn ","anchor graphic_frame anchor graphic_frame chart  ","anchoRelationships  new  gRelationships  new aphic_fRelationships  new ame chaRelationships  new t ","anchoRelationships  new  gRelationships  new aphic_fRelationships  new ame ","@anchoRelationships  new s each "," anchor graphic_frame chart s each "," chaRelationships  new ts each "," anchor graphic_frame chart s "," chaRelationships  new ts ","hypeRelationships  new link hRelationships  new ef "," hypeRelationships  new links each "," hypeRelationships  new links ","child Relationships  new elationship "]}," Axlsx Drawing rels_pn":{"type":"method","name":"rels_pn","children":[],"call":["DRAWING_RELS_PN  % "," index + "," index "]}," Axlsx Drawing pn":{"type":"method","name":"pn","children":[],"call":["DRAWING_PN  % "," index + "," index "]}," Axlsx Drawing rId":{"type":"method","name":"rId","children":[],"call":[" index + "," index "]}," Axlsx Drawing index":{"type":"method","name":"index","children":[],"call":["@worksheet workbook drawings index ","@worksheet workbook drawings ","@worksheet workbook "]}," Axlsx Drawing charts":{"type":"method","name":"charts","children":[],"call":["a graphic_frame chart ","a graphic_frame ","@anchors map ","a object chart ","a object ","charts map ","a object is_a? ","@anchors select "]}," Axlsx Drawing add_chart":{"type":"method","name":"add_chart","children":[],"call":["@anchors last graphic_frame chart ","@anchors last graphic_frame ","@anchors last ","TwoCellAnchor  new ","DataTypeValidator  validate ","@anchors last add_chart "]}," Axlsx Drawing initialize":{"type":"method","name":"initialize","children":[],"call":["SimpleTypedList  new ","@worksheet workbook drawings << ","@worksheet workbook drawings ","@worksheet workbook ","DataTypeValidator  validate "]}," Axlsx Chart end_at=":{"type":"method","name":"end_at=","children":[],"call":["DataTypeValidator  validate "," class "]}," Axlsx Chart start_at=":{"type":"method","name":"start_at=","children":[],"call":["DataTypeValidator  validate "," class "]}," Axlsx Chart to_xml":{"type":"method","name":"to_xml","children":[],"call":["builder to_xml ","xml send "," block_given? ","@view3D to_xml ","@view3D nil? ","@title to_xml ","@title nil? ","Nokogiri XML Builder  new "," style ","Axlsx Workbook  date1904 ","xml showDLblsOverMax ","xml dispBlanksAs ","xml plotVisOnly ","xml overlay ","xml layout ","xml legendPos ","xml legend ","xml plotArea ","xml thickness ","xml backWall ","xml sideWall ","xml floor ","xml autoTitleDeleted ","xml [] chart ","xml [] ","xml [] style ","xml [] date1904 "]}," Axlsx Chart add_series":{"type":"method","name":"add_series","children":[],"call":["@series last ","@series_type new "]}," Axlsx Chart show_legend=":{"type":"method","name":"show_legend=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Chart title=":{"type":"method","name":"title=","children":[],"call":["DataTypeValidator  validate "," class ","Title  new ","v is_a? ","@title cell= ","@title text= ","DataTypeValidator  Title  new alidate ","Title  new  is_a? "]}," Axlsx Chart view3D=":{"type":"method","name":"view3D=","children":[],"call":["DataTypeValidator  validate "," class "]}," Axlsx Chart pn":{"type":"method","name":"pn","children":[],"call":["CHART_PN  % "," index + "," index "]}," Axlsx Chart index":{"type":"method","name":"index","children":[],"call":["@graphic_frame anchor drawing worksheet workbook charts index ","@graphic_frame anchor drawing worksheet workbook charts ","@graphic_frame anchor drawing worksheet workbook ","@graphic_frame anchor drawing worksheet ","@graphic_frame anchor drawing ","@graphic_frame anchor "]}," Axlsx Chart initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," send ","o [] "," respond_to? ","options each ","SimpleTypedList  new ","@graphic_frame anchor drawing worksheet workbook charts << ","@graphic_frame anchor drawing worksheet workbook charts ","@graphic_frame anchor drawing worksheet workbook ","@graphic_frame anchor drawing worksheet ","@graphic_frame anchor drawing ","@graphic_frame anchor "," end_at ","options [] "," start_at ","Title  new "," parse_options "]}," Axlsx CatAxis to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml send ","xml lblOffset ","xml lblAlgn ","xml auto ","xml catAx "]}," Axlsx CatAxis lblOffset=":{"type":"method","name":"lblOffset=","children":[],"call":["RegexValidator  validate "," class "]}," Axlsx CatAxis lblAlgn=":{"type":"method","name":"lblAlgn=","children":[],"call":["RestrictionValidator  validate "," class "]}," Axlsx CatAxis auto=":{"type":"method","name":"auto=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx CatAxis initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," lblOffset= "," lblAlgn= "," auto= "," lbl_offset= "," lbl_algn= "]}," Axlsx BarSeries labels=":{"type":"method","name":"labels=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx BarSeries data=":{"type":"method","name":"data=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx BarSeries to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml send ","cell value ","cell is_a? "," data each_with_index "," data "," data size ","Axlsx  cell_range "," labels each_with_index "," labels "," labels size "," labels empty? ! "," labels empty? ","xml_inner send ","@data to_xml ","@data nil? ","@labels to_xml ","@labels nil? ","xml_inner shape ","cell cell value alue "]}," Axlsx BarSeries shape=":{"type":"method","name":"shape=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx BarSeries initialize":{"type":"method","name":"initialize","children":[],"call":[" labels= ","options [] "," data= ","ValAxisData  new ","options [] nil? ","CatAxisData  new ","NumDataSource  new ","AxDataSource  new "]}," Axlsx Bar3DChart to_xml":{"type":"method","name":"to_xml","children":[],"call":["@valAxis to_xml ","@catAxis to_xml ","xml send ","@shape nil? ","@gapDepth nil? ","@gapWidth nil? ","ser to_xml ","@series each "," grouping "," barDir ","xml axId ","xml shape ","xml gapDepth ","xml gapWidth ","xml showBubbleSize ","xml showPercent ","xml showSerName ","xml showCatName ","xml showVal ","xml showLegendKey ","xml dLbls ","xml varyColors ","xml grouping ","xml barDir ","xml bar3DChart "]}," Axlsx Bar3DChart shape=":{"type":"method","name":"shape=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx Bar3DChart gapDepth=":{"type":"method","name":"gapDepth=","children":[],"call":["RegexValidator  validate "]}," Axlsx Bar3DChart gapWidth=":{"type":"method","name":"gapWidth=","children":[],"call":["RegexValidator  validate "]}," Axlsx Bar3DChart grouping=":{"type":"method","name":"grouping=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx Bar3DChart barDir=":{"type":"method","name":"barDir=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx Bar3DChart initialize":{"type":"method","name":"initialize","children":[],"call":["View3D  new ","ValAxis  new ","CatAxis  new "," rand ","8 ** ","(pair\n  (sym :rAngAx)\n  (int 1)) merge ","(pair\n  (sym :r_ang_ax)\n  (int 1)) merge "]}," Axlsx Axis to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml send ","@scaling to_xml ","xml crosses ","xml crossAx ","xml tickLblPos ","xml minorTickMark ","xml majorTickMark ","xml numFmt ","xml majorGridlines ","xml axPos ","xml delete ","xml axId "]}," Axlsx Axis crosses=":{"type":"method","name":"crosses=","children":[],"call":["RestrictionValidator  validate "," class "]}," Axlsx Axis format_code=":{"type":"method","name":"format_code=","children":[],"call":["Axlsx  validate_string "]}," Axlsx Axis tickLblPos=":{"type":"method","name":"tickLblPos=","children":[],"call":["RestrictionValidator  validate "," class "]}," Axlsx Axis axPos=":{"type":"method","name":"axPos=","children":[],"call":["RestrictionValidator  validate "," class "]}," Axlsx Axis initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," crosses= ","Scaling  new "," tickLblPos= "," axPos= ","Axlsx  validate_unsigned_int "," format_code= "," gridlines= "," tick_lbl_pos= "," ax_pos= "," parse_options "," rand ","8 ** "]}," Axlsx Core to_xml":{"type":"method","name":"to_xml","children":[],"call":["builder to_xml ","xml [] revision ","xml [] ","xml [] created ","Time  now strftime ","Time  now ","xml [] creator "," creator ","xml send ","Nokogiri XML Builder  new "]}," Axlsx Core initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," Axlsx App to_xml":{"type":"method","name":"to_xml","children":[],"call":["builder to_xml ","xml send "," instance_values each "," instance_values ","Nokogiri XML Builder  new "]}," Axlsx App DocSecurity=":{"type":"method","name":"DocSecurity=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App AppVersion=":{"type":"method","name":"AppVersion=","children":[],"call":["Axlsx  validate_string "]}," Axlsx App Application=":{"type":"method","name":"Application=","children":[],"call":["Axlsx  validate_string "]}," Axlsx App HyperlinksChanged=":{"type":"method","name":"HyperlinksChanged=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx App HyperLinkBase=":{"type":"method","name":"HyperLinkBase=","children":[],"call":["Axlsx  validate_string "]}," Axlsx App ShareDoc=":{"type":"method","name":"ShareDoc=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx App CharactersWithSpaces=":{"type":"method","name":"CharactersWithSpaces=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App LinksUpToDate=":{"type":"method","name":"LinksUpToDate=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx App ScaleCrop=":{"type":"method","name":"ScaleCrop=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx App MMClips=":{"type":"method","name":"MMClips=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App HiddenSlides=":{"type":"method","name":"HiddenSlides=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App TotalTime=":{"type":"method","name":"TotalTime=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App Notes=":{"type":"method","name":"Notes=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App Slides=":{"type":"method","name":"Slides=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App Paragraphs=":{"type":"method","name":"Paragraphs=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App Lines=":{"type":"method","name":"Lines=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App PresentationFormat=":{"type":"method","name":"PresentationFormat=","children":[],"call":["Axlsx  validate_string "]}," Axlsx App Characters=":{"type":"method","name":"Characters=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App Words=":{"type":"method","name":"Words=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App Pages=":{"type":"method","name":"Pages=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App Company=":{"type":"method","name":"Company=","children":[],"call":["Axlsx  validate_string "]}," Axlsx App Manager=":{"type":"method","name":"Manager=","children":[],"call":["Axlsx  validate_string "]}," Axlsx App Template=":{"type":"method","name":"Template=","children":[],"call":["Axlsx  validate_string "]}," Axlsx App initalize":{"type":"method","name":"initalize","children":[],"call":[" send ","o [] "," respond_to? ","options each "]}," Axlsx Override to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml Override "," instance_values "]}," Axlsx Override ContentType=":{"type":"method","name":"ContentType=","children":[],"call":["Axlsx  validate_content_type "]}," Axlsx Override PartName=":{"type":"method","name":"PartName=","children":[],"call":["Axlsx  validate_string "]}," Axlsx Override initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," raise ","options [] "," validate_options "]}," Axlsx Default to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml Default "," instance_values "]}," Axlsx Default ContentType=":{"type":"method","name":"ContentType=","children":[],"call":["Axlsx  validate_content_type "]}," Axlsx Default Extension=":{"type":"method","name":"Extension=","children":[],"call":["Axlsx  validate_string "]}," Axlsx Default initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," raise ","options [] "," validate_options "]}," Axlsx ContentType to_xml":{"type":"method","name":"to_xml","children":[],"call":["builder to_xml ","type to_xml "," each ","xml Types ","Nokogiri XML Builder  new "]}," Axlsx ContentType initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx Worksheet add_image":{"type":"method","name":"add_image","children":[],"call":[" block_given? "," drawing add_image "," drawing "," worksheet_drawing add_image "," worksheet_drawing "," drawing add_ drawing add_image  "," drawing add_ worksheet_drawing add_image  "," worksheet_drawing add_ drawing add_image  "," worksheet_drawing add_ worksheet_drawing add_image  "]}," Axlsx Worksheet col_style":{"type":"method","name":"col_style","children":[],"call":["cells style= ","c style= ","cells each ","cells is_a? ","r cells [] ","r cells ","@rows [] each ","@rows [] ","options delete ","cell style= ","(send\n  (send\n    (ivar :@rows) :[]\n    (begin\n      (irange\n        (lvar :offset)\n        (int -1)))) :map) flatten compact ","(send\n  (send\n    (ivar :@rows) :[]\n    (begin\n      (irange\n        (lvar :offset)\n        (int -1)))) :map) flatten ","row cells [] ","row cells ","@rows [] map ","row [] ","r cells []  style= ","(send\n  (send\n    (ivar :@rows) :[]\n    (begin\n      (irange\n        (lvar :offset)\n        (int -1)))) :map) flatten compact  style= ","r cells []  each ","(send\n  (send\n    (ivar :@rows) :[]\n    (begin\n      (irange\n        (lvar :offset)\n        (int -1)))) :map) flatten compact  each ","r cells []  is_a? ","(send\n  (send\n    (ivar :@rows) :[]\n    (begin\n      (irange\n        (lvar :offset)\n        (int -1)))) :map) flatten compact  is_a? ","r r cells []  [] ","r (send\n  (send\n    (ivar :@rows) :[]\n    (begin\n      (irange\n        (lvar :offset)\n        (int -1)))) :map) flatten compact  [] ","r r cells []  ","r (send\n  (send\n    (ivar :@rows) :[]\n    (begin\n      (irange\n        (lvar :offset)\n        (int -1)))) :map) flatten compact  ","row r cells []  [] ","row (send\n  (send\n    (ivar :@rows) :[]\n    (begin\n      (irange\n        (lvar :offset)\n        (int -1)))) :map) flatten compact  [] ","row r cells []  ","row (send\n  (send\n    (ivar :@rows) :[]\n    (begin\n      (irange\n        (lvar :offset)\n        (int -1)))) :map) flatten compact  "]}," Axlsx Worksheet cols":{"type":"method","name":"cols","children":[],"call":["@rows transpose "]}," Axlsx Worksheet row_style":{"type":"method","name":"row_style","children":[],"call":["c style= ","rs cells [] each ","rs cells [] ","rs cells ","r cells [] each ","r cells [] ","r cells ","rs each ","rs is_a? ","@rows [] ","options delete ","cell style= ","cells each ","(send\n  (send\n    (send nil :cols) :[]\n    (begin\n      (irange\n        (lvar :offset)\n        (int -1)))) :map) flatten compact ","(send\n  (send\n    (send nil :cols) :[]\n    (begin\n      (irange\n        (lvar :offset)\n        (int -1)))) :map) flatten ","column [] "," cols [] map "," cols [] "," cols ","@rows []  cells [] each ","rs (send\n  (send\n    (send nil :cols) :[]\n    (begin\n      (irange\n        (lvar :offset)\n        (int -1)))) :map) flatten compact  [] each ","@rows []  cells [] ","rs (send\n  (send\n    (send nil :cols) :[]\n    (begin\n      (irange\n        (lvar :offset)\n        (int -1)))) :map) flatten compact  [] ","@rows []  cells ","rs (send\n  (send\n    (send nil :cols) :[]\n    (begin\n      (irange\n        (lvar :offset)\n        (int -1)))) :map) flatten compact  ","r (send\n  (send\n    (send nil :cols) :[]\n    (begin\n      (irange\n        (lvar :offset)\n        (int -1)))) :map) flatten compact  [] each ","r (send\n  (send\n    (send nil :cols) :[]\n    (begin\n      (irange\n        (lvar :offset)\n        (int -1)))) :map) flatten compact  [] ","r (send\n  (send\n    (send nil :cols) :[]\n    (begin\n      (irange\n        (lvar :offset)\n        (int -1)))) :map) flatten compact  ","@rows []  each ","@rows []  is_a? ","(send\n  (send\n    (send nil :cols) :[]\n    (begin\n      (irange\n        (lvar :offset)\n        (int -1)))) :map) flatten compact  each "]}," Axlsx Row to_ary":{"type":"method","name":"to_ary","children":[],"call":["@cells to_ary "]}," Axlsx Row style=":{"type":"method","name":"style=","children":[],"call":["cell style= ","style [] ","style is_a? "," cells each_with_index "," cells "," each_with_index ","cell style [] tyle= ","style [] tyle [] ","style [] tyle istyle [] _a? "," cellstyle []  each_with_index "," cellstyle []  "]}," Axlsx Workbook styles":{"type":"method","name":"styles","children":[],"call":[" block_given? "]}," Axlsx SimpleTypedList ==":{"type":"method","name":"==","children":[],"call":["v == "]}," Axlsx SimpleTypedList to_ary":{"type":"method","name":"to_ary","children":[],"call":[]}," Axlsx Package ruport_table":{"type":"method","name":"ruport_table","children":[],"call":[" puts "]}," Axlsx ValAxisData to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml send ","item value ","item is_a? "," each_with_index "," size ","Axlsx  cell_range ","xml v ","xml pt ","xml ptCount ","xml formatCode ","xml numCache ","xml f ","xml numRef ","xml val ","item item value alue ","xml item value  ","xml item value al "]}," Axlsx TwoCellAnchor add_chart":{"type":"method","name":"add_chart","children":[],"call":["@object chart ","GraphicFrame  new ","GraphicFrame  new  chart "]}," Axlsx SeriesTitle to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml send ","Axlsx  cell_range ","xml [] v ","xml [] ","xml [] pt ","xml [] ptCount ","xml [] strCache ","xml [] f ","xml [] strRef ","xml [] tx "," range "]}," Axlsx SerAxis to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml send ","@tickMarkSkip nil? ","@tickLblSkip nil? ","xml [] tickMarkSkip ","xml [] ","xml [] tickLblSkip ","xml [] serAx "]}," Axlsx SerAxis tickMarkSkip=":{"type":"method","name":"tickMarkSkip=","children":[],"call":["Axlsx  validate_unsigned_int ","Axlsx  validate_boolean "]}," Axlsx SerAxis tickLblSkip=":{"type":"method","name":"tickLblSkip=","children":[],"call":["Axlsx  validate_unsigned_int ","Axlsx  validate_boolean "]}," Axlsx SerAxis initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "]}," Axlsx Pic to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml send "," descr "," name "," picture_locking to_xml "," picture_locking ","xml avLst ","xml [] prstGeom ","xml [] ","xml ext ","xml off ","xml [] xfrm ","xml spPr ","xml fillRect ","xml [] stretch ","xml [] blip ","xml blipFill ","xml cNvPicPr ","xml cNvPr ","xml nvPicPr ","xml pic "," id ","@hyperlink to_xml ","@hyperlink is_a? "]}," Axlsx Pic start_at":{"type":"method","name":"start_at","children":[],"call":["@anchor from row= ","@anchor from ","@anchor from col= ","@anchor start_at "]}," Axlsx Pic height=":{"type":"method","name":"height=","children":[],"call":["@anchor height= "," use_one_cell_anchor ","@anchor is_a? "]}," Axlsx Pic height":{"type":"method","name":"height","children":[],"call":["@anchor height "]}," Axlsx Pic width=":{"type":"method","name":"width=","children":[],"call":["@anchor width= "," use_one_cell_anchor ","@anchor is_a? "]}," Axlsx Pic width":{"type":"method","name":"width","children":[],"call":["@anchor width ","@anchor is_a? "]}," Axlsx Pic pn":{"type":"method","name":"pn","children":[],"call":["IMAGE_PN  % "," extname "," index + "," index "]}," Axlsx Pic index":{"type":"method","name":"index","children":[],"call":["@anchor drawing worksheet workbook images index ","@anchor drawing worksheet workbook images ","@anchor drawing worksheet workbook ","@anchor drawing worksheet ","@anchor drawing "]}," Axlsx Pic extname":{"type":"method","name":"extname","children":[],"call":["File  extname delete ","File  extname "," image_src "," image_src nil? "]}," Axlsx Pic file_name":{"type":"method","name":"file_name","children":[],"call":["File  basename "," image_src "," image_src nil? "]}," Axlsx Pic descr=":{"type":"method","name":"descr=","children":[],"call":["Axlsx  validate_string "]}," Axlsx Pic name=":{"type":"method","name":"name=","children":[],"call":["Axlsx  validate_string "]}," Axlsx Pic image_src=":{"type":"method","name":"image_src=","children":[],"call":[" raise ","File  exist? ","RestrictionValidator  validate ","File  extname delete ","File  extname ","Axlsx  validate_string ","v downcase ","MimeTypeUtils  get_mime_type "]}," Axlsx Pic initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," start_at ","options [] "," send ","o [] "," respond_to? ","options each ","@anchor drawing worksheet workbook images << ","@anchor drawing worksheet workbook images ","@anchor drawing worksheet workbook ","@anchor drawing worksheet ","@anchor drawing ","PictureLocking  new "," parse_options ","(send\n  (send\n    (lvar :options) :[]\n    (sym :opacity)) :*\n  (int 100000)) round ","options [] * "]}," Axlsx OneCellAnchor ext":{"type":"method","name":"ext","children":[],"call":["@width * / ","@width * ","@height * / ","@height * "]}," Axlsx OneCellAnchor to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml send ","@object to_xml "," ext "," from to_xml "," from ","xml clientData ","xml ext ","xml from ","xml [] oneCellAnchor ","xml [] "]}," Axlsx OneCellAnchor index":{"type":"method","name":"index","children":[],"call":["@drawing anchors index ","@drawing anchors "]}," Axlsx OneCellAnchor width=":{"type":"method","name":"width=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx OneCellAnchor height=":{"type":"method","name":"height=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx OneCellAnchor initialize":{"type":"method","name":"initialize","children":[],"call":["Pic  new "," send ","o [] "," respond_to? ","options each ","Marker  new ","drawing anchors << ","drawing anchors "," parse_options "," start_at ","options [] "]}," Axlsx LineSeries labels=":{"type":"method","name":"labels=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx LineSeries data=":{"type":"method","name":"data=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx LineSeries to_xml":{"type":"method","name":"to_xml","children":[],"call":["@data to_xml ","@data nil? ","@labels to_xml ","@labels nil? ","xml send ","cell value ","cell is_a? "," data each_with_index "," data "," data size ","Axlsx  cell_range "," labels each_with_index "," labels "," labels size "," labels empty? ! "," labels empty? ","cell cell value alue "]}," Axlsx LineSeries initialize":{"type":"method","name":"initialize","children":[],"call":["ValAxisData  new ","options [] ","options [] nil? ","CatAxisData  new "," labels= "," data= ","NumDataSource  new ","AxDataSource  new "]}," Axlsx Line3DChart to_xml":{"type":"method","name":"to_xml","children":[],"call":["@serAxis to_xml ","@valAxis to_xml ","@catAxis to_xml ","xml send ","@gapDepth nil? ","ser to_xml ","@series each "," grouping ","xml axId ","xml gapDepth ","xml showBubbleSize ","xml showPercent ","xml showSerName ","xml showCatName ","xml showVal ","xml showLegendKey ","xml dLbls ","xml varyColors ","xml grouping ","xml line3DChart "]}," Axlsx Line3DChart gapDepth=":{"type":"method","name":"gapDepth=","children":[],"call":["RegexValidator  validate "]}," Axlsx Line3DChart grouping=":{"type":"method","name":"grouping=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx Line3DChart initialize":{"type":"method","name":"initialize","children":[],"call":["View3D  new ","(pair\n  (sym :perspective)\n  (int 30)) merge ","SerAxis  new ","ValAxis  new ","CatAxis  new "," rand ","8 ** "," axes add_axis "," axes ","(pair\n  (sym :r_ang_ax)\n  (int 1)) merge "]}," Axlsx Drawing images":{"type":"method","name":"images","children":[],"call":["a object ","images map ","a object is_a? ","@anchors select "]}," Axlsx Drawing add_image":{"type":"method","name":"add_image","children":[],"call":["@anchors last object ","@anchors last ","OneCellAnchor  new ","TwoCellAnchor  new add_pic ","TwoCellAnchor  new ","options [] "]}," Axlsx Chart end_at":{"type":"method","name":"end_at","children":[],"call":["@graphic_frame anchor to row= ","@graphic_frame anchor to ","@graphic_frame anchor ","@graphic_frame anchor to col= "," parse_coord_args ","@graphic_frame anchor end_at "]}," Axlsx Chart start_at":{"type":"method","name":"start_at","children":[],"call":["@graphic_frame anchor from row= ","@graphic_frame anchor from ","@graphic_frame anchor ","@graphic_frame anchor from col= "," parse_coord_args ","@graphic_frame anchor start_at "]}," Axlsx Chart from":{"type":"method","name":"from","children":[],"call":["@graphic_frame anchor from ","@graphic_frame anchor "]}," Axlsx Chart to":{"type":"method","name":"to","children":[],"call":["@graphic_frame anchor to ","@graphic_frame anchor "]}," Axlsx Chart style=":{"type":"method","name":"style=","children":[],"call":["DataTypeValidator  validate ","arg <= ","arg >= "," lambda ","v <= ","v >= "]}," Axlsx CatAxisData to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml send ","item value ","item is_a? "," each_with_index "," size ","Axlsx  cell_range ","xml v ","xml pt ","xml ptCount ","xml strCache ","xml f ","xml strRef ","xml cat ","item item value alue ","xml item value  "]}," Axlsx CatAxisData initialize":{"type":"method","name":"initialize","children":[],"call":["@list << ","data each ","data is_a? ","@list concat "]}," Axlsx Ar SingletonMethods to_xlsx":{"type":"method","name":"to_xlsx","children":[],"call":["sheet add_row ","r attributes values ","r attributes ","data each ","p workbook add_worksheet "," table_name humanize "," table_name ","p workbook ","p workbook styles add_style ","p workbook styles ","header_style nil? ","row_style nil? ","Package  new ","data first attributes keys ","data first attributes ","data first ","data flatten! ","data compact! "," find ","options delete ","Package  new  workbook add_worksheet ","Package  new  workbook ","Package  new  workbook styles add_style ","Package  new  workbook styles ","p workbook styles add_style  nil? ","options delete  nil? ","data comPackage  new act! ","oPackage  new tions delete "]}," Axlsx Ar ClassMethods acts_as_axlsx":{"type":"method","name":"acts_as_axlsx","children":[],"call":[" extend "," include "]}," Axlsx Ar included":{"type":"method","name":"included","children":[],"call":[]}," Axlsx name_to_indices":{"type":"method","name":"name_to_indices","children":[],"call":[]}," Axlsx Worksheet name_to_cell":{"type":"method","name":"name_to_cell","children":[],"call":["r cells [] ","r cells "," rows [] "," rows ","Axlsx  name_to_indices ","r [] "," rows []  cells [] "," rows []  cells ","  rows [] ows [] ","  rows [] ows "," rows []  [] "]}," Axlsx Worksheet []":{"type":"method","name":"[]","children":[],"call":["cells << ","r cells [] each ","r cells [] ","last index ","first index ","r cells "," rows [] each "," rows [] ","last row index ","last row ","first row index ","first row "," rows "," name_to_cell ","parts [] ","parts size == ","parts size ","cell_def split ","cell_def - ","cell_def is_a? "," range ","parts first ","cell_def split map "," name_to_cell  index "," name_to_cell  row index "," name_to_cell  row ","cell_def split  [] ","cell_def split  size == ","cell_def split  size ","parts  name_to_cell  ","cell_def split  first "]}," Axlsx Cell pos":{"type":"method","name":"pos","children":[],"call":[" row index "," row "," index "," row row_index "]}," Axlsx Cell scheme=":{"type":"method","name":"scheme=","children":[],"call":["RestrictionValidator  validate "," set_run_style "]}," Axlsx Cell vertAlign=":{"type":"method","name":"vertAlign=","children":[],"call":["RestrictionValidator  validate "," set_run_style "]}," Axlsx Cell sz=":{"type":"method","name":"sz=","children":[],"call":["Axlsx  validate_unsigned_int "," set_run_style "]}," Axlsx Cell color=":{"type":"method","name":"color=","children":[],"call":["Color  new ","v is_a? "]}," Axlsx Cell u=":{"type":"method","name":"u=","children":[],"call":["Axlsx  validate_boolean "," set_run_style ","v == "]}," Axlsx Cell extend=":{"type":"method","name":"extend=","children":[],"call":["Axlsx  validate_boolean "," set_run_style "]}," Axlsx Cell condense=":{"type":"method","name":"condense=","children":[],"call":["Axlsx  validate_boolean "," set_run_style "]}," Axlsx Cell shadow=":{"type":"method","name":"shadow=","children":[],"call":["Axlsx  validate_boolean "," set_run_style "]}," Axlsx Cell outline=":{"type":"method","name":"outline=","children":[],"call":["Axlsx  validate_boolean "," set_run_style "]}," Axlsx Cell strike=":{"type":"method","name":"strike=","children":[],"call":["Axlsx  validate_boolean "," set_run_style "]}," Axlsx Cell i=":{"type":"method","name":"i=","children":[],"call":["Axlsx  validate_boolean "," set_run_style "]}," Axlsx Cell b=":{"type":"method","name":"b=","children":[],"call":["Axlsx  validate_boolean "," set_run_style "]}," Axlsx Cell family=":{"type":"method","name":"family=","children":[],"call":["Axlsx  validate_string "," set_run_style ","v to_i "]}," Axlsx Cell charset=":{"type":"method","name":"charset=","children":[],"call":["Axlsx  validate_unsigned_int "," set_run_style "]}," Axlsx Cell font_name=":{"type":"method","name":"font_name=","children":[],"call":["Axlsx  validate_string "," set_run_style "]}," Axlsx Workbook []":{"type":"method","name":"[]","children":[],"call":["worksheet [] ","cell_def gsub "," raise ","worksheet is_a? ","(send\n  (send\n    (self) :worksheets) :select) first ","s name == ","s name "," worksheets select "," worksheets ","cell_def split [] ","cell_def split ","cell_def match ","(send\n  (send\n    (self) :worksheets) :select) first  [] ","(send\n  (send\n    (self) :worksheets) :select) first  is_a? ","(send\n  (send\n    (self) :(send\n  (send\n    (self) :worksheets) :select) first s) :select) first "," (send\n  (send\n    (self) :worksheets) :select) first s select "," (send\n  (send\n    (self) :worksheets) :select) first s "]}," Axlsx Parser parse_value":{"type":"method","name":"parse_value","children":[],"call":["node text strip ","node text ","node empty? "," parser_xml xpath "," parser_xml "," parser_xml xpath  text strip "," parser_xml xpath  text "," parser_xml xpath  empty? "]}," Axlsx Parser parse_float":{"type":"method","name":"parse_float","children":[],"call":[" send ","attr_name to_s ","v to_f ","v respond_to? "," parse_value ","v to_f  to_f "," parse_value  to_f ","v to_f  respond_to? "," parse_value  respond_to? "," parse_v to_f alue "," parse_ parse_value alue "]}," Axlsx Parser parse_integer":{"type":"method","name":"parse_integer","children":[],"call":[" send ","attr_name to_s ","v to_i ","v respond_to? "," parse_value ","v to_i  to_i "," parse_value  to_i ","v to_i  respond_to? "," parse_value  respond_to? "," parse_v to_i alue "," parse_ parse_value alue "]}," Axlsx Parser parse_symbol":{"type":"method","name":"parse_symbol","children":[],"call":[" send ","attr_name to_s ","v to_sym ","v nil? "," parse_value ","v to_sym  to_sym "," parse_value  to_sym ","v to_sym  nil? "," parse_value  nil? "," parse_v to_sym alue "," parse_ parse_value alue "]}," Axlsx Parser parse_string":{"type":"method","name":"parse_string","children":[],"call":[" send "," parse_value ","attr_name to_s "]}," Axlsx PictureLocking to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml [] picLocks "," instance_values ","xml [] "]}," Axlsx PictureLocking noChangeShapeType=":{"type":"method","name":"noChangeShapeType=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx PictureLocking noChangeArrowheads=":{"type":"method","name":"noChangeArrowheads=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx PictureLocking noAdjustHandles=":{"type":"method","name":"noAdjustHandles=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx PictureLocking noEditPoints=":{"type":"method","name":"noEditPoints=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx PictureLocking noResize=":{"type":"method","name":"noResize=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx PictureLocking noMove=":{"type":"method","name":"noMove=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx PictureLocking noChangeAspect=":{"type":"method","name":"noChangeAspect=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx PictureLocking noRot=":{"type":"method","name":"noRot=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx PictureLocking noSelect=":{"type":"method","name":"noSelect=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx PictureLocking noGrp=":{"type":"method","name":"noGrp=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx PictureLocking initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," parse_options "]}," Axlsx Chart parse_coord_args":{"type":"method","name":"parse_coord_args","children":[],"call":["x is_a? ","x pos ","Axlsx  name_to_indices "]}," Axlsx App initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," parse_options "]}," Axlsx Worksheet auto_filter=":{"type":"method","name":"auto_filter=","children":[],"call":["DataTypeValidator  validate "," auto_filter range= "," auto_filter "]}," Axlsx Worksheet merge_cells":{"type":"method","name":"merge_cells","children":[],"call":["@merged_cells << ","cells last r ","cells last ","cells first r ","cells first ","x r <=> ","y r ","x r ","cells sort ","cells is_a? ","(send\n  (lvar :x) :index) <=> ","y row index ","y row ","y index ","x row index ","x row ","x index "," merged_cells add "," merged_cells "]}," Axlsx Cell merge":{"type":"method","name":"merge","children":[],"call":[" row worksheet merge_cells "," r "," row worksheet "," row ","range_end nil? ","target r ","target is_a? ","stop nil? ","c r ","Axlsx  sort_cells map ","Axlsx  sort_cells "]}," Axlsx MsOffCrypto decrypt":{"type":"method","name":"decrypt","children":[],"call":["aes update ","aes key= "," key ","aes decrypt ","OpenSSL Cipher  new ","aes update << ","aes final ","OpenSSL Cipher  new  update ","OpenSSL Cipher  new  key= ","OpenSSL Cipher  new  decrypt ","OpenSSL Cipher  new  update << ","OpenSSL Cipher  new  final "]}," Axlsx MsOffCrypto encrypt":{"type":"method","name":"encrypt","children":[],"call":["aes update ","aes key= "," key ","aes encrypt ","OpenSSL Cipher  new ","aes update << ","aes final ","OpenSSL Cipher  new  update ","OpenSSL Cipher  new  key= ","OpenSSL Cipher  new  encrypt ","OpenSSL Cipher  new  update << ","OpenSSL Cipher  new  final "]}," Axlsx MsOffCrypto verify_password":{"type":"method","name":"verify_password","children":[],"call":[" puts "," decrypt ","vh [] == ","v [] ","vh [] ","Digest SHA1  digest "," decrypt  [] == ","Digest SHA1  digest h [] == ","Digest SHA1  digest  [] "," decrypt  [] ","Digest SHA1  digest h [] "]}," Axlsx MsOffCrypto key":{"type":"method","name":"key","children":[],"call":["x3 bytes to_a [] pack ","x3 bytes to_a [] ","x3 bytes to_a ","x3 bytes ","x1 + ","Digest SHA1  digest ","(send\n  (lvar :a) :concat\n  (send\n    (const nil :Array) :new\n    (send\n      (int 64) :-\n      (send\n        (lvar :key) :size))\n    (int 92))) to_s ","a concat ","Array  new ","64 - ","key size ","92 ^ ","key bytes each_with_index map ","key bytes each_with_index ","key bytes ","(send\n  (lvar :a) :concat\n  (send\n    (const nil :Array) :new\n    (send\n      (int 64) :-\n      (send\n        (lvar :key) :size))\n    (int 54))) to_s ","54 ^ ","sha update digest ","sha update ","sha to_s + ","sha to_s ","i to_s + ","i to_s ","(irange\n  (int 0)\n  (int 49999)) each ","Digest SHA1  new << ","@salt + ","Digest SHA1  new "," create_key ","x1 +  bytes to_a [] pack ","x1 +  bytes to_a [] ","x1 +  bytes to_a ","x1 +  bytes ","Digest SHA1  digest  + ","(send\n  (lvar :a) :concat\n  (send\n    (const nil :Array) :new\n    (send\n      (int 64) :-\n      (send\n        (lvar :sha update digest ) :size))\n    (int 92))) to_s ","sha update digest  size ","sha update digest  bytes each_with_index map ","sha update digest  bytes each_with_index ","sha update digest  bytes ","(send\n  (lvar :a) :concat\n  (send\n    (const nil :Array) :new\n    (send\n      (int 64) :-\n      (send\n        (lvar :sha update digest ) :size))\n    (int 54))) to_s ","Digest SHA1  new <<  update digest ","Digest SHA1  new <<  update ","Digest SHA1  new <<  to_s + ","Digest SHA1  new <<  to_s "," create_sha update digest  "]}," Axlsx MsOffCrypto encrypted_verifier_hash":{"type":"method","name":"encrypted_verifier_hash","children":[],"call":[" encrypt ","verifier_hash << ","Array  new join ","Array  new ","32 - ","verifier_hash size ","Digest SHA1  digest "," verifier_hash ","Digest SHA1  digest  << ","Digest SHA1  digest  size "," Digest SHA1  digest  "]}," Axlsx MsOffCrypto encrypted_verifier":{"type":"method","name":"encrypted_verifier","children":[],"call":[" encrypt "," verifier "]}," Axlsx MsOffCrypto encryption_verifier":{"type":"method","name":"encryption_verifier","children":[],"call":[" encrypted_verifier_hash "," encrypted_verifier "]}," Axlsx MsOffCrypto encryption_info":{"type":"method","name":"encryption_info","children":[],"call":["header pack ","header flatten! ","header concat "," encrypted_verifier_hash bytes to_a pack bytes to_a "," encrypted_verifier_hash bytes to_a pack bytes "," encrypted_verifier_hash bytes to_a pack "," encrypted_verifier_hash bytes to_a "," encrypted_verifier_hash bytes "," encrypted_verifier_hash "," encrypted_verifier bytes to_a pack bytes to_a "," encrypted_verifier bytes to_a pack bytes "," encrypted_verifier bytes to_a pack "," encrypted_verifier bytes to_a "," encrypted_verifier bytes "," encrypted_verifier ","Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype) bytes to_a pack bytes to_a ","Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype) bytes to_a pack bytes ","Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype) bytes to_a pack ","Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype) bytes to_a ","Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype) bytes "," create_encryption_info "]}," Axlsx MsOffCrypto initialize":{"type":"method","name":"initialize","children":[],"call":["(int 144) join "," rand to_s "," rand ","16 ** "," file_name= "," password= "]}," Axlsx Storage initialize":{"type":"method","name":"initialize","children":[],"call":[" name= ","TYPES  [] "," data nil? "," data ","COLORS  [] "," send ","o [] "," respond_to? ","options each "]}," Axlsx Storage type=":{"type":"method","name":"type=","children":[],"call":["RestrictionValidator  validate ","TYPES  values "]}," Axlsx Storage data=":{"type":"method","name":"data=","children":[],"call":["v bytes to_a ","v bytes ","v size "," type= ","TYPES  [] ","Axlsx  validate_string "]}," Axlsx Storage name=":{"type":"method","name":"name=","children":[],"call":["@name size * ","@name size ","v bytes to_a << ","v bytes to_a ","v bytes ","v bytes to_a <<  size * ","v bytes to_a <<  size "]}," Axlsx Storage color=":{"type":"method","name":"color=","children":[],"call":["RestrictionValidator  validate ","COLORS  values "]}," Axlsx Storage to_s":{"type":"method","name":"to_s","children":[],"call":["data pack "," puts ","data inspect ","(send\n  (ivar :@name) :concat\n  (send\n    (const nil :Array) :new\n    (send\n      (int 32) :-\n      (send\n        (ivar :@name) :size))\n    (int 0))) flatten ","@name concat ","Array  new ","32 - ","@name size ","(send\n  (ivar :@name) :concat\n  (send\n    (const nil :Array) :new\n    (send\n      (int 32) :-\n      (send\n        (ivar :@name) :size))\n    (int 0))) flatten  pack ","(send\n  (ivar :@name) :concat\n  (send\n    (const nil :Array) :new\n    (send\n      (int 32) :-\n      (send\n        (ivar :@name) :size))\n    (int 0))) flatten  inspect "]}," Axlsx MsOffCrypto create_key":{"type":"method","name":"create_key","children":[],"call":["x3 bytes to_a [] pack ","x3 bytes to_a [] ","x3 bytes to_a ","x3 bytes ","x1 + ","Digest SHA1  digest ","(send\n  (lvar :a) :concat\n  (send\n    (const nil :Array) :new\n    (send\n      (int 64) :-\n      (send\n        (lvar :key) :size))\n    (int 92))) to_s ","a concat ","Array  new ","64 - ","key size ","92 ^ ","key bytes each_with_index map ","key bytes each_with_index ","key bytes ","(send\n  (lvar :a) :concat\n  (send\n    (const nil :Array) :new\n    (send\n      (int 64) :-\n      (send\n        (lvar :key) :size))\n    (int 54))) to_s ","54 ^ ","sha update digest ","sha update ","sha to_s + ","sha to_s ","i to_s + ","i to_s ","(irange\n  (int 0)\n  (int 49999)) each ","Digest SHA1  new << "," salt + "," salt ","Digest SHA1  new ","x1 +  bytes to_a [] pack ","x1 +  bytes to_a [] ","x1 +  bytes to_a ","x1 +  bytes ","Digest SHA1  digest  + ","(send\n  (lvar :a) :concat\n  (send\n    (const nil :Array) :new\n    (send\n      (int 64) :-\n      (send\n        (lvar :sha update digest ) :size))\n    (int 92))) to_s ","sha update digest  size ","sha update digest  bytes each_with_index map ","sha update digest  bytes each_with_index ","sha update digest  bytes ","(send\n  (lvar :a) :concat\n  (send\n    (const nil :Array) :new\n    (send\n      (int 64) :-\n      (send\n        (lvar :sha update digest ) :size))\n    (int 54))) to_s ","Digest SHA1  new <<  update digest ","Digest SHA1  new <<  update ","Digest SHA1  new <<  to_s + ","Digest SHA1  new <<  to_s "]}," Axlsx MsOffCrypto create_verifier_hash":{"type":"method","name":"create_verifier_hash","children":[],"call":["vh << ","Array  new join ","Array  new ","32 - ","vh size ","Digest SHA1  digest "," verifier ","Digest SHA1  digest  << ","Digest SHA1  digest  size "]}," Axlsx MsOffCrypto create_encryption_info":{"type":"method","name":"create_encryption_info","children":[],"call":["header pack ","header flatten! ","header concat "," encrypted_verifier_hash bytes to_a pack bytes to_a "," encrypted_verifier_hash bytes to_a pack bytes "," encrypted_verifier_hash bytes to_a pack "," encrypted_verifier_hash bytes to_a "," encrypted_verifier_hash bytes "," encrypted_verifier_hash ","(send\n  (send\n    (send\n      (send nil :verifier_hash) :bytes) :to_a) :size) pack bytes to_a ","(send\n  (send\n    (send\n      (send nil :verifier_hash) :bytes) :to_a) :size) pack bytes ","(send\n  (send\n    (send\n      (send nil :verifier_hash) :bytes) :to_a) :size) pack "," verifier_hash bytes to_a size "," verifier_hash bytes to_a "," verifier_hash bytes "," verifier_hash "," encrypted_verifier bytes to_a pack bytes to_a "," encrypted_verifier bytes to_a pack bytes "," encrypted_verifier bytes to_a pack "," encrypted_verifier bytes to_a "," encrypted_verifier bytes "," encrypted_verifier "," salt bytes to_a pack bytes to_a "," salt bytes to_a pack bytes "," salt bytes to_a pack "," salt bytes to_a "," salt bytes "," salt ","(send\n  (send\n    (send\n      (send nil :salt) :bytes) :to_a) :size) pack bytes to_a ","(send\n  (send\n    (send\n      (send nil :salt) :bytes) :to_a) :size) pack bytes ","(send\n  (send\n    (send\n      (send nil :salt) :bytes) :to_a) :size) pack "," salt bytes to_a size ","Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype) bytes to_a pack bytes to_a ","Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype) bytes to_a pack bytes ","Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype) bytes to_a pack ","Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype) bytes to_a ","Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype) bytes "," key size "," key "]}," Axlsx MsOffCrypto encrypt_package":{"type":"method","name":"encrypt_package","children":[],"call":["(send\n  (send\n    (send\n      (lvar :package_text) :bytes) :to_a) :size) pack + "," encrypt ","(send\n  (send\n    (send\n      (lvar :package_text) :bytes) :to_a) :size) pack ","package_text bytes to_a size ","package_text bytes to_a ","package_text bytes ","package read ","File  open ","(send\n  (lvar :crypt_pack) :size) pack + ","(send\n  (lvar :crypt_pack) :size) pack ","crypt_pack size ","(send\n  (send\n    (send\n      (lvar :package read ) :bytes) :to_a) :size) pack + ","(send\n  (send\n    (send\n      (lvar :File  open _text) :bytes) :to_a) :size) pack + ","(send\n  (send\n    (send\n      (lvar :package read ) :bytes) :to_a) :size) pack ","(send\n  (send\n    (send\n      (lvar :File  open _text) :bytes) :to_a) :size) pack ","package read  bytes to_a size ","File  open _text bytes to_a size ","package read  bytes to_a ","File  open _text bytes to_a ","package read  bytes ","File  open _text bytes ","File  open  read ","(send\n  (lvar : encrypt ) :size) pack + ","(send\n  (lvar : encrypt ) :size) pack "," encrypt  size "]}," Axlsx MsOffCrypto verifier_hash":{"type":"method","name":"verifier_hash","children":[],"call":[" create_verifier_hash "]}," Axlsx MsOffCrypto verifier":{"type":"method","name":"verifier","children":[],"call":[" rand to_s "," rand ","16 ** "]}," Axlsx MsOffCrypto salt":{"type":"method","name":"salt","children":[],"call":["Digest SHA1  digest "," rand to_s "," rand ","16 ** "]}," Axlsx MsOffCrypto encrypted_package":{"type":"method","name":"encrypted_package","children":[],"call":[" encrypt_package "," password "," file_name "]}," Axlsx MsOffCrypto file_name=":{"type":"method","name":"file_name=","children":[],"call":[]}," Axlsx MsOffCrypto password=":{"type":"method","name":"password=","children":[],"call":[]}," Axlsx MsOffCrypto save":{"type":"method","name":"save","children":[],"call":["cfb save ","Cbf  new ","Cbf  new  save "]}," Axlsx Cbf allocate_stream":{"type":"method","name":"allocate_stream","children":[],"call":["table []= ","table size - ","table size ","table << ","(send\n  (begin\n    (send\n      (send\n        (lvar :stream) :size) :/\n      (send\n        (lvar :size) :to_f))) :ceil) times ","(send\n  (send\n    (lvar :stream) :size) :/\n  (send\n    (lvar :size) :to_f)) ceil ","stream size / ","size to_f ","stream size ","stream sector= ","stream respond_to? "]}," Axlsx Cbf create_header":{"type":"method","name":"create_header","children":[],"call":["header pack ","header concat ","Array  new ","header << ","(send\n  (send\n    (send nil :mini_fat) :size) :/\n  (float 512.0)) ceil "," mini_fat size / "," mini_fat size "," mini_fat ","(send\n  (send\n    (send nil :fat) :size) :/\n  (float 512.0)) ceil + ","(send\n  (send\n    (ivar :@storages) :size) :/\n  (float 4.0)) ceil ","@storages size / ","@storages size ","(send\n  (send\n    (send nil :fat) :size) :/\n  (float 512.0)) ceil "," fat size / "," fat size "," fat ","header last "]}," Axlsx Cbf create_document_summary_information":{"type":"method","name":"create_document_summary_information","children":[],"call":["Storage  new ","(int 5) pack + ","(int 5) pack ","v_stream pack ","v_stream concat ","v_stream pack  pack ","v_stream pack  concat "]}," Axlsx Cbf create_summary_information":{"type":"method","name":"create_summary_information","children":[],"call":["Storage  new ","(int 5) pack + ","(int 5) pack ","v_stream pack ","v_stream concat ","v_stream pack  pack ","v_stream pack  concat "]}," Axlsx Cbf create_primary":{"type":"method","name":"create_primary","children":[],"call":["Storage  new ","(int 6) pack + ","(int 6) pack ","v_stream pack ","v_stream concat ","(int 78) flatten ","Microsoft.Container.EncryptionTransform bytes to_a ","Microsoft.Container.EncryptionTransform bytes ","(int 88) flatten ","{FF9A3F03-56EF-4613-BDD5-5A41C1D07246} bytes to_a ","{FF9A3F03-56EF-4613-BDD5-5A41C1D07246} bytes ","v_stream pack  pack ","(int 88) flatten  pack ","v_stream pack  concat ","(int 88) flatten  concat "]}," Axlsx Cbf create_strong_encryption_data_space":{"type":"method","name":"create_strong_encryption_data_space","children":[],"call":["Storage  new ","v_stream size ","(int 8) flatten pack ","(int 8) flatten ","StrongEncryptionTransform bytes to_a ","StrongEncryptionTransform bytes ","(int 8) flatten pack  size "]}," Axlsx Cbf create_data_space_map":{"type":"method","name":"create_data_space_map","children":[],"call":["Storage  new ","v_stream size ","(int 8) flatten! pack ","(int 8) flatten! ","StrongEncryptionDataSpace bytes to_a ","StrongEncryptionDataSpace bytes ","EncryptedPackage bytes to_a ","EncryptedPackage bytes ","(int 8) flatten! pack  size "]}," Axlsx Cbf strong_encryption_data_space":{"type":"method","name":"strong_encryption_data_space","children":[],"call":[" create_strong_encryption_data_space "]}," Axlsx Cbf create_version":{"type":"method","name":"create_version","children":[],"call":["Storage  new ","v_stream size ","(int 60) flatten! pack ","(int 60) flatten! ","Microsoft.Container.DataSpaces bytes to_a ","Microsoft.Container.DataSpaces bytes ","(int 60) flatten! pack  size "]}," Axlsx Cbf create_fat":{"type":"method","name":"create_fat","children":[],"call":["v_fat pack ","v_fat concat ","Array  new ","128 - ","v_fat size ","v_fat size < "," allocate_stream ","@encrypted_package size >= ","@encrypted_package size "," raise ","@encrypted_package size > ","(send\n  (int 109) :-\n  (send\n    (lvar :v_fat) :size)) * ","109 - "," mini_fat_stream ","@storages [] sector= ","@storages [] "]}," Axlsx Cbf create_mini_fat":{"type":"method","name":"create_mini_fat","children":[],"call":["v_mf pack ","v_mf concat ","Array  new ","128 - ","v_mf size "," allocate_stream ","(send\n  (ivar :@storages) :select) each ","s size < ","s size ","s type == ","Storage TYPES  [] ","s type ","@storages select "]}," Axlsx Cbf create_fat_stream":{"type":"method","name":"create_fat_stream","children":[],"call":["mfs pack ","mfs concat ","Array  new ","512 - ","mfs size % ","mfs size ","stream data ","(send\n  (ivar :@storages) :select) each_with_index ","s size >= ","s size ","s type == ","Storage TYPES  [] ","s type ","@storages select ","mfs size % > "]}," Axlsx Cbf create_mini_fat_stream":{"type":"method","name":"create_mini_fat_stream","children":[],"call":["mfs pack ","mfs concat ","Array  new ","512 - ","mfs size % ","mfs size ","@storages [] size= ","@storages [] ","64 - ","stream data ","(send\n  (ivar :@storages) :select) each_with_index ","s size < ","s size ","s type == ","Storage TYPES  [] ","s type ","@storages select "," puts ","mfs size % > ","stream data size ","stream name pack ","stream name "]}," Axlsx Cbf create_storages":{"type":"method","name":"create_storages","children":[],"call":["@storages << "," primary ","Storage  new ","Storage COLORS  [] "," strong_encryption_data_space "," data_space_map "," version ","(int 6) pack + ","(int 6) pack ","@encrypted_package size ","@encryption_info size ","@storages last name_size= ","@storages last ","Storage TYPES  [] "," ms_off_crypto encrypted_package "," ms_off_crypto "," ms_off_crypto encryption_info ","@storages unshift "," mini_fat_stream "," encrypted_package "," encryption_info ","@ms_off_crypto encrypted_package ","@ms_off_crypto encryption_info "," ms_off_crypto encrypted_package  size ","@ms_off_crypto encrypted_package  size "," ms_off_crypto encryption_info  size ","@ms_off_crypto encryption_info  size "]}," Axlsx Cbf save":{"type":"method","name":"save","children":[],"call":["ole close ","ole << "," fat_stream "," mini_fat_stream "," mini_fat ","Array  new pack ","Array  new ","512 - ","ole pos % ","ole pos ","s to_s ","@storages each "," fat "," header ","File  open ","File  open  close ","File  open  << ","File  open  pos % ","File  open  pos "]}," Axlsx Cbf header":{"type":"method","name":"header","children":[],"call":[" create_header "]}," Axlsx Cbf fat":{"type":"method","name":"fat","children":[],"call":[" create_fat "]}," Axlsx Cbf mini_fat":{"type":"method","name":"mini_fat","children":[],"call":[" create_mini_fat "]}," Axlsx Cbf mini_fat_stream":{"type":"method","name":"mini_fat_stream","children":[],"call":[" create_mini_fat_stream "]}," Axlsx Cbf fat_stream":{"type":"method","name":"fat_stream","children":[],"call":[" create_fat_stream "]}," Axlsx Cbf document_summary_information":{"type":"method","name":"document_summary_information","children":[],"call":[" create_document_summary_information "]}," Axlsx Cbf summary_information":{"type":"method","name":"summary_information","children":[],"call":[" create_summary_information "]}," Axlsx Cbf primary":{"type":"method","name":"primary","children":[],"call":[" create_primary "]}," Axlsx Cbf data_space_map":{"type":"method","name":"data_space_map","children":[],"call":[" create_data_space_map "]}," Axlsx Cbf version":{"type":"method","name":"version","children":[],"call":[" create_version "]}," Axlsx Cbf initialize":{"type":"method","name":"initialize","children":[],"call":[" header "," fat "," mini_fat "," mini_fat_stream "," create_storages ","ms_off_crypto file_name "]}," Axlsx Workbook is_bsd?":{"type":"method","name":"is_bsd?","children":[],"call":["platform include? ","RUBY_PLATFORM  downcase ","RUBY_PLATFORM  downcase  include? "]}," Axlsx Cbf encrypted_package":{"type":"method","name":"encrypted_package","children":[],"call":["@ms_off_crypto encrypted_package "]}," Axlsx Cbf encryption_info":{"type":"method","name":"encryption_info","children":[],"call":["@ms_off_crypto encryption_info "]}," Axlsx Relationship TargetMode=":{"type":"method","name":"TargetMode=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx Package encrypt":{"type":"method","name":"encrypt","children":[],"call":["moc save ","MsOffCrypto  new ","MsOffCrypto  new  save "]}," Axlsx Pic id":{"type":"method","name":"id","children":[],"call":["@anchor drawing charts size + + ","@anchor drawing charts size + ","@anchor drawing images index ","@anchor drawing images ","@anchor drawing ","@anchor drawing charts size ","@anchor drawing charts "]}," Axlsx Pic hyperlink=":{"type":"method","name":"hyperlink=","children":[],"call":["Hyperlink  new ","@hyperlink send ","o [] ","@hyperlink respond_to? ","options each ","@hyperlink is_a? ","options []= "," hyperlink "," hyperlink send "," hyperlink respond_to? "," hyperlink is_a? ","Hyperlink  new  send ","Hyperlink  new  respond_to? ","Hyperlink  new  is_a? "]}," Axlsx Hyperlink id":{"type":"method","name":"id","children":[],"call":["@parent anchor drawing charts size + + + ","@parent anchor drawing charts size + + ","@parent anchor drawing hyperlinks index ","@parent anchor drawing hyperlinks ","@parent anchor drawing ","@parent anchor ","@parent anchor drawing charts size + ","@parent anchor drawing images size ","@parent anchor drawing images ","@parent anchor drawing charts size ","@parent anchor drawing charts ","@parent anchor drawing index_of + ","@parent anchor drawing index_of "]}," Axlsx Hyperlink to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml [] hlinkClick ","xml [] ","h delete "," instance_values merge "," id "," instance_values ","xml []  instance_values merge linkClick "," instance_values merge  delete "]}," Axlsx Hyperlink initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," send ","o [] "," respond_to? ","options each ","DataTypeValidator  validate "," parse_options "]}," Axlsx Hyperlink history=":{"type":"method","name":"history=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Hyperlink highlightClick=":{"type":"method","name":"highlightClick=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Hyperlink endSnd=":{"type":"method","name":"endSnd=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Drawing hyperlinks":{"type":"method","name":"hyperlinks","children":[],"call":["a hyperlink ","links map ","a hyperlink is_a? "," images select "," images "]}," Axlsx Worksheet column_widths":{"type":"method","name":"column_widths","children":[],"call":["@auto_fit_data [] []= ","@auto_fit_data [] ","Axlsx  validate_unsigned_numeric ","value == "," raise ","index < ","@auto_fit_data size ","args each_with_index ","@column_info [] width= ","@column_info [] ","@column_info size ","Col  new ","index + ","widths each_with_index "," find_or_create_column_info width= "," find_or_create_column_info "]}," Axlsx Worksheet dimension":{"type":"method","name":"dimension","children":[],"call":[" rows last cells last r "," rows last cells last "," rows last cells "," rows last "," rows "," rows first cells first r "," rows first cells first "," rows first cells "," rows first "," rows last cells last == "," rows first cells first == ","Dimension  new "]}," Axlsx Worksheet cells":{"type":"method","name":"cells","children":[],"call":[" rows flatten "," rows "]}," Axlsx Cell ssti=":{"type":"method","name":"ssti=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Cell run_xml":{"type":"method","name":"run_xml","children":[],"call":["xml t ","@value to_s ","xml scheme ","xml vertAlign ","xml u ","xml sz ","@color to_xml ","xml extend ","xml condense ","xml shadow ","xml outline ","xml strike ","xml i ","xml b ","xml family ","xml charset ","xml rFont ","xml rPr ","xml r ","(send\n  (send\n    (send\n      (self) :instance_values) :keys) :&\n  (const nil :INLINE_STYLES)) size > ","(send\n  (send\n    (send\n      (self) :instance_values) :keys) :&\n  (const nil :INLINE_STYLES)) size "," instance_values keys & "," instance_values keys "," instance_values "]}," Axlsx Cell shareable":{"type":"method","name":"shareable","children":[],"call":["v_hash == ","self_hash []= ","self_hash [] instance_values ","self_hash [] ","v_hash []= ","v_hash [] instance_values ","v_hash [] ","INLINE_STYLES  include? ! ","INLINE_STYLES  include? "," instance_values reject "," instance_values ","v instance_values reject ","v instance_values "]}," Axlsx Workbook shared_strings":{"type":"method","name":"shared_strings","children":[],"call":["SharedStringsTable  new ","ws cells "," worksheets collect "," worksheets "," xml_space "]}," Axlsx Workbook use_shared_strings=":{"type":"method","name":"use_shared_strings=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx SharedStringsTable resolve":{"type":"method","name":"resolve","children":[],"call":["cell send ","@unique_cells << ","@unique_cells size ","index == ","item shareable ","@unique_cells index ","cells each ","@shared_xml_string << << << ","@shared_xml_string << << ","cell run_xml_string ","@shared_xml_string << ","item == ","cell shareable_hash ","@unique_cells []= ","@unique_cells [] ","cell value ","CellSerializer  run_xml_string ","@unique_cells []  == ","@unique_cells @unique_cells []  "]}," Axlsx SharedStringsTable to_xml":{"type":"method","name":"to_xml","children":[],"call":["builder to_xml ","cell run_xml ","xml si ","@unique_cells each ","xml sst "," unique_count "," count ","Nokogiri XML Builder  new "]}," Axlsx SharedStringsTable initialize":{"type":"method","name":"initialize","children":[],"call":[" resolve ","cells size ","c value start_with? ","c value ","c type != ","c type ","cells flatten reject ","cells flatten ","c value nil? ","shareable_cells size ","cell plain_string? ","cells flatten select ","cell contains_rich_text? "]}," Axlsx SharedStringsTable unique_count":{"type":"method","name":"unique_count","children":[],"call":["@unique_cells size "]}," Axlsx validate_unsigned_numeric":{"type":"method","name":"validate_unsigned_numeric","children":[],"call":[]}," Axlsx Package write_parts":{"type":"method","name":"write_parts","children":[],"call":["zip write ","IO  read ","part [] ","IO  binread ","IO  respond_to? ","zip put_next_entry ","part [] nil? ","zip puts ","part [] force_encoding ","(str \"1.9.2\") include? ","p each "," parts "," zip_entry_for_part ","part [] to_xml_string ","part [] is_a? ","zi parts  write "," parts art [] ","IO  res parts ond_to? ","zip put_next_part []  ","zip put_next_part [] force_encoding  ","zi parts   parts ut_next_entry "," parts art [] nil? ","zi parts   parts uts "," parts art [] force_encoding "," parts  each ","  parts arts "," zip_part [] _for_part "," zip_part [] force_encoding _for_part "," zi parts _entry_for_ parts art "," parts art [] to_xml_string "," parts art [] is_a? "]}," Axlsx Package to_stream":{"type":"method","name":"to_stream","children":[],"call":["stream rewind ","zip close_buffer "," write_parts ","Zip ZipOutputStream  new "," validate empty? "," validate ","confirm_valid ! ","Relationship  clear_cached_instances ","Zip OutputStream  new ","StringIO  new ","zip close_buffer  rewind "," write_parts  close_buffer "]}," Axlsx Package use_shared_strings":{"type":"method","name":"use_shared_strings","children":[],"call":[" workbook use_shared_strings "," workbook "]}," Axlsx Package use_shared_strings=":{"type":"method","name":"use_shared_strings=","children":[],"call":[" workbook use_shared_strings= "," workbook ","Axlsx  validate_boolean "]}," Axlsx Worksheet page_margins":{"type":"method","name":"page_margins","children":[],"call":[" block_given? ","PageMargins  new "]}," Axlsx Row custom_height?":{"type":"method","name":"custom_height?","children":[],"call":["@height != "]}," Axlsx Row height=":{"type":"method","name":"height=","children":[],"call":["Axlsx  validate_unsigned_numeric ","v nil? "]}," Axlsx PageMargins to_xml":{"type":"method","name":"to_xml","children":[],"call":["xml pageMargins "," footer "," header "," bottom "," top "," right "," left "]}," Axlsx PageMargins footer=":{"type":"method","name":"footer=","children":[],"call":["Axlsx  validate_unsigned_numeric "]}," Axlsx PageMargins header=":{"type":"method","name":"header=","children":[],"call":["Axlsx  validate_unsigned_numeric "]}," Axlsx PageMargins bottom=":{"type":"method","name":"bottom=","children":[],"call":["Axlsx  validate_unsigned_numeric "]}," Axlsx PageMargins top=":{"type":"method","name":"top=","children":[],"call":["Axlsx  validate_unsigned_numeric "]}," Axlsx PageMargins right=":{"type":"method","name":"right=","children":[],"call":["Axlsx  validate_unsigned_numeric "]}," Axlsx PageMargins left=":{"type":"method","name":"left=","children":[],"call":["Axlsx  validate_unsigned_numeric "]}," Axlsx PageMargins set":{"type":"method","name":"set","children":[],"call":[" send ","(sym :left) include? ","margins select "]}," Axlsx PageMargins initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," parse_options "]}," Axlsx DateTimeConverter time_to_serial":{"type":"method","name":"time_to_serial","children":[],"call":[]}," Axlsx DateTimeConverter date_to_serial":{"type":"method","name":"date_to_serial","children":[],"call":[]}," Axlsx Font u=":{"type":"method","name":"u=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx cell_r":{"type":"method","name":"cell_r","children":[],"call":[]}," Axlsx col_ref":{"type":"method","name":"col_ref","children":[],"call":[]}," Axlsx Worksheet calculate_width":{"type":"method","name":"calculate_width","children":[],"call":["(send\n  (send\n    (begin\n      (send\n        (send\n          (lvar :mdw_count) :*\n          (lvar :mdw)) :+\n        (int 5))) :/\n    (lvar :mdw)) :*\n  (int 256)) / * ","(send\n  (send\n    (begin\n      (send\n        (send\n          (lvar :mdw_count) :*\n          (lvar :mdw)) :+\n        (int 5))) :/\n    (lvar :mdw)) :*\n  (int 256)) / ","(send\n  (send\n    (lvar :mdw_count) :*\n    (lvar :mdw)) :+\n  (int 5)) / * ","(send\n  (send\n    (lvar :mdw_count) :*\n    (lvar :mdw)) :+\n  (int 5)) / ","mdw_count * + ","mdw_count * ","@magick_draw get_type_metrics max_advance >= ","@magick_draw get_type_metrics max_advance ","@magick_draw get_type_metrics ","text scan reduce ","text scan ","sz / ","(send\n  (send\n    (begin\n      (send\n        (send\n          (send\n            (lvar :text) :count\n            (send\n              (const nil :Worksheet) :thin_chars)) :*\n          (lvar :mdw)) :+\n        (int 5))) :/\n    (lvar :mdw)) :*\n  (int 256)) / * ","(send\n  (send\n    (begin\n      (send\n        (send\n          (send\n            (lvar :text) :count\n            (send\n              (const nil :Worksheet) :thin_chars)) :*\n          (lvar :mdw)) :+\n        (int 5))) :/\n    (lvar :mdw)) :*\n  (int 256)) / ","(send\n  (send\n    (send\n      (lvar :text) :count\n      (send\n        (const nil :Worksheet) :thin_chars)) :*\n    (lvar :mdw)) :+\n  (int 5)) / * ","(send\n  (send\n    (send\n      (lvar :text) :count\n      (send\n        (const nil :Worksheet) :thin_chars)) :*\n    (lvar :mdw)) :+\n  (int 5)) / ","text count * + ","text count * ","text count ","Worksheet  thin_chars ","(send\n  (lvar :sz) :/\n  (float 10.0)) to_f "]}," Axlsx Worksheet update_column_info":{"type":"method","name":"update_column_info","children":[],"call":["col width= ","(begin\n  (or\n    (send\n      (lvar :col) :width)\n    (int 0))) max "," calculate_width ","cell value to_s ","cell value ","col width ","font sz ","cell sz ","fonts [] ","cell_xf fontId ","cellXfs [] "," workbook use_autowidth "," workbook ","cell value start_with? ","cell value is_a? ","width == ","style [] ","(const nil :Integer) include? ","style [] class ","width class ","widths [] ","@column_info [] ","Col  new ","index + ","cells each_with_index ","styles fonts ","styles cellXfs "," workbook styles ","cell value == ","col update_width ","widths [] == "," find_or_create_column_info ","col widths [] = ","@column_info []  width= "," find_or_create_column_info  width= ","(begin\n  (or\n    (send\n      (lvar :col) :widths [] )\n    (int 0))) max ","(begin\n  (or\n    (send\n      (lvar :@column_info [] ) :width)\n    (int 0))) max ","(begin\n  (or\n    (send\n      (lvar : find_or_create_column_info ) :width)\n    (int 0))) max "," calculate_widths []  ","col widths []  ","@column_info []  width "," find_or_create_column_info  width ","fonts []  sz ","fonts [] s [] ","cell_xf fonts [] Id ","cellXfs []  fontId "," workbook use_autowidths []  ","widths []  == ","widths []  class ","widths [] s [] ","@@column_info [] umn_info [] ","@ find_or_create_column_info umn_info [] ","styles fonts [] s "," workbook styles  fonts "," workbook styles  cellXfs "," workbook  workbook styles  ","col update_widths []  ","@column_info []  update_width "," find_or_create_column_info  update_width ","widths [] s [] == "," find_or_create_@column_info [] umn_info "," find_or_create_ find_or_create_column_info umn_info "]}," Axlsx Worksheet to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str + ","str concat ","<tableParts count='%s'>%s</tableParts> % ","<tablePart r:id='%s'/> % ","obj rId ","@tables reduce ","@tables size ","@tables empty? ","<mergeCells count='%s'>%s</mergeCells> % ","<mergeCell ref='%s'></mergeCell> % ","@merged_cells reduce ","@merged_cells size ","@merged_cells empty? ","<autoFilter ref='%s'></autoFilter> % "," page_margins to_xml_string "," page_margins ","row to_xml_string ","@rows each_with_index ","col to_xml_string ","@column_info each ","str << ","@column_info size > ","@column_info size ","<sheetViews><sheetView tabSelected='%s' workbookViewId='0' showGridLines='%s'><selection activeCell=\"A1\" sqref=\"A1\"/></sheetView></sheetViews> % "," show_gridlines ","<dimension ref=\"%s\"></dimension> % "," dimension "," rows size == "," rows size "," rows ","<sheetPr><pageSetUpPr fitToPage=\"%s\"></pageSetUpPr></sheetPr> % "," fit_to_page ","<worksheet xmlns=\"%s\" xmlns:r=\"%s\"> % ","cf to_xml_string ","@conditional_formattings each ","@comments size > ","@comments size "," page_setup to_xml_string "," page_setup "," print_options to_xml_string "," print_options ","df to_xml_string ","@data_validations each ","@data_validations size ","@data_validations empty? ","str << << << ","str << << ","(send\n  (block\n    (send\n      (lvar :rels) :index)\n    (args\n      (arg :r))\n    (send\n      (send\n        (lvar :r) :Type) :==\n      (const nil :VML_DRAWING_R))) :+\n  (int 1)) to_s ","(send\n  (lvar :rels) :index) + ","r Type == ","r Type ","rels index ","(send\n  (block\n    (send\n      (lvar :rels) :index)\n    (args\n      (arg :r))\n    (send\n      (send\n        (lvar :r) :Type) :==\n      (const nil :DRAWING_R))) :+\n  (int 1)) to_s ","@sheet_protection to_xml_string "," relationships ","@sheet_view to_xml_string ","str gsub "," data_validations_node "," conditional_formattings_node "," table_parts_node "," legacy_drawing_node "," drawing_node ","@print_options to_xml_string "," merged_cells_node "," protected_ranges_node "," auto_filter_node "," sheet_data_node "," cols_node "," dimension_node "," sheet_pr_node "," worksheet_node ","item to_xml_string "," serializable_parts each "," serializable_parts "," sanitize "," auto_filter apply "," auto_filter "," auto_filter range ","Axlsx  sanitize "," add_autofilter_defined_name_to_workbook ","(send\n  (block\n    (send\n      (lvar : relationships ) :index)\n    (args\n      (arg :r))\n    (send\n      (send\n        (lvar :r) :Type) :==\n      (const nil :VML_DRAWING_R))) :+\n  (int 1)) to_s ","(send\n  (lvar : relationships ) :index) + "," relationships  index ","(send\n  (block\n    (send\n      (lvar : relationships ) :index)\n    (args\n      (arg :r))\n    (send\n      (send\n        (lvar :r) :Type) :==\n      (const nil :DRAWING_R))) :+\n  (int 1)) to_s "]}," Axlsx Worksheet add_table":{"type":"method","name":"add_table","children":[],"call":[" block_given? ","@tables << ","Table  new "," tables last "," tables "," tables << ","@Table  new s << "," Table  new s last "," Table  new s "," Table  new s << "]}," Axlsx Worksheet abs_auto_filter":{"type":"method","name":"abs_auto_filter","children":[],"call":["Axlsx  cell_range "," name_to_cell ","@auto_filter split collect ","@auto_filter split "]}," Axlsx Worksheet fit_to_page=":{"type":"method","name":"fit_to_page=","children":[],"call":["Axlsx  validate_boolean "," fit_to_page "," warn "," fit_to_page? "]}," Axlsx Worksheet selected=":{"type":"method","name":"selected=","children":[],"call":["Axlsx  validate_boolean "," sheet_view tab_selected= "," sheet_view "," warn "]}," Axlsx Worksheet show_gridlines=":{"type":"method","name":"show_gridlines=","children":[],"call":["Axlsx  validate_boolean "," sheet_view show_grid_lines= "," sheet_view "," warn "]}," Axlsx Table header_cells":{"type":"method","name":"header_cells","children":[],"call":["@sheet [] ","@ref gsub "]}," Axlsx Table to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << << << ","str << << << << ","cell value ","str << << << ","str << << ","(send\n  (lvar :index) :+\n  (int 1)) to_s ","index + "," header_cells each_with_index "," header_cells "," header_cells length to_s "," header_cells length ","str << << << << << << << << << ","str << << << << << << << << ","@name gsub ","str << << << << << << << ","str << << << << << << ","(send\n  (send nil :index) :+\n  (int 1)) to_s "," index + "," index "," table_style_info to_xml_string "," table_style_info ","<tableColumn id =\" << << << << ","<tableColumn id =\" << << << ","<tableColumn id =\" << << ","<tableColumn id =\" << ","<tableColumns count=\" << << ","<tableColumns count=\" << ","<autoFilter ref=\" << << ","<autoFilter ref=\" << ","ref=\" << << ","ref=\" << ","<table xmlns=\" << << << << << << << << ","<table xmlns=\" << << << << << << << ","<table xmlns=\" << << << << << << ","<table xmlns=\" << << << << << ","<table xmlns=\" << << << << ","<table xmlns=\" << << << ","<table xmlns=\" << << ","<table xmlns=\" << "]}," Axlsx Table name=":{"type":"method","name":"name=","children":[],"call":["v is_a? ","DataTypeValidator  validate "," class "]}," Axlsx Table rId":{"type":"method","name":"rId","children":[],"call":[" index + "," index ","@sheet relationships for Id ","@sheet relationships for ","@sheet relationships "]}," Axlsx Table pn":{"type":"method","name":"pn","children":[],"call":["TABLE_PN  % "," index + "," index "]}," Axlsx Table index":{"type":"method","name":"index","children":[],"call":["@sheet workbook tables index ","@sheet workbook tables ","@sheet workbook "]}," Axlsx Table initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," send ","o [] "," respond_to? ","options each "," index + "," index ","@sheet workbook tables << ","@sheet workbook tables ","@sheet workbook ","TableStyleInfo  new ","options [] "," parse_options "]}," Axlsx Row to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","cell to_xml_string ","@cells each_with_index ","str << << << ","str << << "," height to_s "," height "," custom_height? ","(send\n  (lvar :r_index) :+\n  (int 1)) to_s ","r_index + ","str << << << << ","value to_s ","(send\n  (send nil :instance_values) :select) each ","SERIALIZABLE_ATTRIBUTES  include? ","key to_sym "," instance_values select "," instance_values "," serialized_attributes "," each_with_index "," serialized_tag "]}," Axlsx PageMargins to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","(send\n  (send nil :instance_values) :map) join "," << << << << "," << << << ","value to_s "," << << "," << "," instance_values map "," instance_values "," serialized_attributes "," serialized_tag "]}," Axlsx Col to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << << << ","str << << ","(send\n  (lvar :attrs) :map) join "," << << << << "," << << << ","value to_s "," << << "," << ","attrs map ","str << ","value == "," instance_values reject "," instance_values "," serialized_attributes "," serialized_tag "]}," Axlsx Col initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each ","Axlsx  validate_unsigned_int "," parse_options "]}," Axlsx Col width=":{"type":"method","name":"width=","children":[],"call":["v != ","Axlsx  validate_unsigned_numeric ","v == "]}," Axlsx Col style=":{"type":"method","name":"style=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Col phonetic=":{"type":"method","name":"phonetic=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Col outlineLevel=":{"type":"method","name":"outlineLevel=","children":[],"call":["Axlsx  validate_boolean "," raise ","v <= ","0 <= ","Axlsx  validate_unsigned_numeric "]}," Axlsx Col hidden=":{"type":"method","name":"hidden=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Col collapsed=":{"type":"method","name":"collapsed=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Cell set_run_style":{"type":"method","name":"set_run_style","children":[],"call":[" instance_variable_set ","attr to_s ","Axlsx  send ","validator == ","INLINE_STYLES  include? ","validator nil? ","attr to_sym "]}," Axlsx Cell to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << ","str << << ","@value to_s ","DateTimeConverter  time_to_serial to_s ","DateTimeConverter  time_to_serial ","DateTimeConverter  date_to_serial to_s ","DateTimeConverter  date_to_serial "," run_xml_string ","@ssti to_s ","@value to_s gsub ","@value start_with? ","str << << << << << ","str << << << << ","@style to_s ","Axlsx  cell_r ","@value nil? ","@value to_s sub ","CellSerializer  to_xml_string "]}," Axlsx Cell run_xml_string":{"type":"method","name":"run_xml_string","children":[],"call":["str << << << ","str << << "," value to_s "," value ","str << ","str << << << << ","< << << << << ","< << << << ","data [] to_s ","data [] ","< << << ","< << ","key to_s ","data [] to_xml_string ","keys each ","keys delete ","data keys & ","data keys ","value == "," instance_values reject "," instance_values "," is_text_run? ","str << << << << << ","key == ","data keys &  each ","data keys &  delete ","data data keys &  & ","data data keys &  "]}," Axlsx Cell shareable_hash":{"type":"method","name":"shareable_hash","children":[],"call":["self_hash []= ","self_hash [] instance_values ","self_hash [] "," instance_variable_get ","@ + ","INLINE_STYLES  each "]}," Axlsx Cell is_text_run?":{"type":"method","name":"is_text_run?","children":[],"call":[" contains_rich_text? ! "," contains_rich_text? "]}," Axlsx Workbook to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << ","sheet abs_auto_filter ","str << << << ","index to_s ","sheet auto_filter ","@worksheets each_with_index ","str << << << << << << << ","str << << << << << << ","sheet rId ","str << << << << << ","str << << << << ","(send\n  (lvar :index) :+\n  (int 1)) to_s ","index + ","sheet name ","@@date1904 to_s "," add_worksheet "," worksheets size > "," worksheets size "," worksheets "," defined_names to_xml_string "," defined_names "," add_defined_name ","sheet auto_filter defined_name ","pivot_table cache_definition cache_id to_s ","pivot_table cache_definition cache_id ","pivot_table cache_definition ","@worksheets size + + ","@worksheets size + ","@worksheets size "," pivot_tables each_with_index "," pivot_tables "," pivot_tables empty? ","pivot_table cache_definition rId "," pivot_tables each ","<pivotCache cacheId=\" << << << << ","<pivotCache cacheId=\" << << << ","<pivotCache cacheId=\" << << ","<pivotCache cacheId=\" << ","sheet to_sheet_node_xml_string "," worksheets each "," views to_xml_string "," views ","<workbookPr date1904=\" << << ","<workbookPr date1904=\" << ","<workbook xmlns=\" << << << << ","<workbook xmlns=\" << << << ","<workbook xmlns=\" << << ","<workbook xmlns=\" << "," worksheets reverse_each "," is_reversed "," sheet auto_filter defined_name s to_xml_string "," sheet auto_filter defined_name s "," add_sheet auto_filter defined_name  ","sheet auto_filter sheet auto_filter defined_name  "]}," Axlsx Workbook use_autowidth=":{"type":"method","name":"use_autowidth=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Workbook use_autowidth":{"type":"method","name":"use_autowidth","children":[],"call":[]}," Axlsx SharedStringsTable to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["<?xml version=\"1.0\" encoding=\"UTF-8\"?><sst xmlns=\" << << << << << << << << ","<?xml version=\"1.0\" encoding=\"UTF-8\"?><sst xmlns=\" << << << << << << << ","<?xml version=\"1.0\" encoding=\"UTF-8\"?><sst xmlns=\" << << << << << << ","<?xml version=\"1.0\" encoding=\"UTF-8\"?><sst xmlns=\" << << << << << "," unique_count to_s "," unique_count ","<?xml version=\"1.0\" encoding=\"UTF-8\"?><sst xmlns=\" << << << << ","<?xml version=\"1.0\" encoding=\"UTF-8\"?><sst xmlns=\" << << << ","@count to_s ","<?xml version=\"1.0\" encoding=\"UTF-8\"?><sst xmlns=\" << << ","<?xml version=\"1.0\" encoding=\"UTF-8\"?><sst xmlns=\" << ","Axlsx  sanitize ","str << << << << << ","str << << << << ","str << << << ","str << << "," xml_space to_s "," xml_space ","str << "," xml:space=\" << << << << "," xml:space=\" << << << "," xml:space=\" << << "," xml:space=\" << "," count=\" << << << << "," count=\" << << << "," count=\" << << "," count=\" << ","Axlsx  sanitize  << << << << << ","Axlsx  sanitize  << << << << ","Axlsx  sanitize  << << << ","Axlsx  sanitize  << << ","Axlsx  sanitize  << "]}," Axlsx validate_scatter_style":{"type":"method","name":"validate_scatter_style","children":[],"call":[]}," Axlsx SimpleTypedList to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << << << ","str << << ","str << ","item to_xml_string ","@list each ","str << << << << << ","str << << << << ","@list size to_s ","@list size ","classname [] downcase + ","classname [] ","classname [] downcase "," serialize_as ","@allowed_types [] name split last ","@allowed_types [] name split ","@allowed_types [] name ","@allowed_types [] "," serialize_as to_s ","</ << << ","</ << "," each ","< << << << << ","< << << << "," size to_s "," size ","< << << ","< << ","@allowed_types [] name split last  [] downcase + ","@allowed_types [] name split last  [] ","@allowed_types [] name split last  [] downcase "]}," Axlsx Xf to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," protection to_xml_string "," protection "," alignment to_xml_string "," alignment ","(send\n  (lvar :h) :map) join "," << << << << "," << << << ","value to_s "," << << "," << ","key to_s ","h map ","(sym :alignment) include? ","k to_sym "," instance_values reject "," instance_values "," serialized_attributes "]}," Axlsx TableStyles to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","table_style to_xml_string "," each ","(send\n  (lvar :attr) :map) join "," << << << << "," << << << ","value to_s "," << << "," << ","key to_s ","attr map ","attr []= "," size ","(sym :defaultTableStyle) include? ! ","(sym :defaultTableStyle) include? ","k to_sym "," instance_values reject "," instance_values "," serialized_attributes "]}," Axlsx TableStyleElement to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","(send\n  (send nil :instance_values) :map) join "," << << << << "," << << << ","value to_s "," << << "," << ","key to_s "," instance_values map "," instance_values "," serialized_attributes "," serialized_tag "]}," Axlsx TableStyle to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","table_style_el to_xml_string "," each ","(send\n  (lvar :attr) :map) join "," << << << << "," << << << ","value to_s "," << << "," << ","key to_s ","attr map ","attr []= "," size ","(sym :name) include? "," instance_values select "," instance_values ","(send\n  (lvar :attrs) :map) join ","attrs map ","attrs []= ","(sym :name) include? ! "," instance_values reject "," serialized_attributes "]}," Axlsx Styles to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," instance_values [] to_xml_string "," instance_values [] ","key to_s "," instance_values "," instance_values [] nil? ","(sym :numFmts) each ","str << << << ","str << << ","<styleSheet xmlns=\" << << ","<styleSheet xmlns=\" << "]}," Axlsx PatternFill to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << << ","str << << << ","value to_s ","str << << ","key to_s "," bgColor instance_values each "," bgColor instance_values "," bgColor "," bgColor is_a? "," fgColor instance_values each "," fgColor instance_values "," fgColor "," fgColor is_a? "," patternType to_s "," patternType "," bgColor to_xml_string "," fgColor to_xml_string ","<patternFill patternType=\" << << ","<patternFill patternType=\" << "]}," Axlsx NumFmt to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","(send\n  (send nil :instance_values) :map) join "," << << << << "," << << << ","value to_s "," << << "," << ","key to_s "," instance_values map "," instance_values "," serialized_attributes "," serialized_tag "]}," Axlsx GradientStop to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," color to_xml_string "," color ","str << << << ","str << << "," position to_s "," position ","<stop position=\" << << ","<stop position=\" << "]}," Axlsx GradientFill to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","s to_xml_string ","@stop each ","(send\n  (lvar :h) :map) join "," << << << << "," << << << ","value to_s "," << << "," << ","key to_s ","h map ","k to_sym == ","k to_sym "," instance_values reject "," instance_values "," serialized_attributes "]}," Axlsx Font to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << << << ","str << << << << ","v to_s ","str << << << ","str << << ","k to_s ","v to_xml_string ","v is_a? "," instance_values each "," instance_values ","< << << << << ","< << << << ","Axlsx  booleanize to_s ","Axlsx  booleanize ","< << << ","< << "]}," Axlsx Fill to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","@fill_type to_xml_string "]}," Axlsx Color to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << << ","str << << << ","value to_s ","str << << ","key to_s "," instance_values each "," instance_values "," serialized_attributes "," serialized_tag "," + + "," + "]}," Axlsx CellStyle to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","(send\n  (send nil :instance_values) :map) join "," << << << << "," << << << ","value to_s "," << << "," << ","key to_s "," instance_values map "," instance_values "," serialized_attributes "," serialized_tag "]}," Axlsx CellProtection to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","(send\n  (send nil :instance_values) :map) join "," << << << << "," << << << ","value to_s "," << << "," << ","key to_s "," instance_values map "," instance_values "," serialized_attributes "," serialized_tag "]}," Axlsx CellAlignment to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","(send\n  (send nil :instance_values) :map) join "," << << << << "," << << << ","value to_s "," << << "," << ","key to_s "," instance_values map "," instance_values "," serialized_attributes "," serialized_tag "]}," Axlsx BorderPr to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << << << ","str << << ","@name to_s ","str << ","@color to_xml_string ","@color is_a? ","str << << << << << ","str << << << << ","@style to_s ","</ << << ","</ << ","< << << << << ","< << << << ","< << << ","< << "]}," Axlsx Border to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","part to_xml_string ","(send\n  (ivar :@prs) :select) each ","pr name == ","pr name ","@prs select ","(sym :start) each ","(send\n  (lvar :h) :map) join "," << << << << "," << << << ","value to_s "," << << "," << ","key to_s ","h map ","(sym :diagonalUp) include? "," instance_values select "," instance_values "," serialized_attributes "]}," Axlsx Relationships to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","rel to_xml_string ","index + "," each_with_index ","str << << << ","str << << "," each ","<Relationships xmlns=\" << << ","<Relationships xmlns=\" << "]}," Axlsx Relationship to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","(send\n  (lvar :h) :map) join "," << << << << "," << << << ","value to_s "," << << "," << ","key to_s ","h map ","h []= ","rId << ","rId to_s "," instance_values ","Axlsx  coder encode ","Axlsx  coder ","k == "," instance_values reject ","(send\n  (lvar : instance_values ) :map) join "," instance_values  map "," instance_values  []= "]}," Axlsx Package use_autowidth=":{"type":"method","name":"use_autowidth=","children":[],"call":[" workbook use_autowidth= "," workbook ","Axlsx  validate_boolean "]}," Axlsx View3D to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << ","str << << ","@perspective to_s ","@perspective nil? ","@rAngAx to_s ","@rAngAx nil? ","@depthPercent to_s ","@depthPercent nil? ","@rotY to_s ","@rotY nil? ","@hPercent to_s ","@hPercent nil? ","@rotX to_s ","@rotX nil? ","@r_ang_ax to_s ","@r_ang_ax nil? ","@depth_percent to_s ","@depth_percent nil? ","@rot_y to_s ","@rot_y nil? ","@h_percent to_s ","@h_percent nil? ","@rot_x to_s ","@rot_x nil? "," element_for_attribute ","(str \"rot_x\") each "]}," Axlsx ValAxisData to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << << << ","str << << << << ","str << << << ","str << << ","index to_s ","item value to_s ","item value ","item is_a? "," each_with_index "," size to_s "," size ","Axlsx  cell_range ","item item value to_s alue to_s ","item item value to_s alue "]}," Axlsx ValAxis to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << ","str << << ","@crossBetween to_s ","@cross_between to_s ","<c:crossBetween val=\" << << ","<c:crossBetween val=\" << "]}," Axlsx TwoCellAnchor to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," object to_xml_string "," object "," to to_xml_string "," to "," from to_xml_string "," from "]}," Axlsx Title to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << ","str << << ","Axlsx  cell_range ","@text empty? ","@text to_s ","@cell is_a? ","<a:t> << << ","<a:t> << ","<c:v> << << ","<c:v> << ","<c:f> << << ","<c:f> << ","<a:rPr sz=\" << << ","<a:rPr sz=\" << ","@text_size to_s "]}," Axlsx SeriesTitle to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << ","str << << ","Axlsx  cell_range ","<c:v> << << ","<c:v> << ","<c:f> << << ","<c:f> << "]}," Axlsx Series to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," block_given? "," title to_xml_string "," title "," title nil? ","str << << << ","str << << ","(or\n  (send nil :order)\n  (send nil :index)) to_s "," index "," order "," index to_s ","<c:order val=\" << << ","<c:order val=\" << ","<c:idx val=\" << << ","<c:idx val=\" << "]}," Axlsx SerAxis to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << ","str << << ","@tickMarkSkip to_s ","@tickMarkSkip nil? ","@tickLblSkip to_s ","@tickLblSkip nil? ","@tick_mark_skip to_s ","@tick_mark_skip nil? ","@tick_lbl_skip to_s ","@tick_lbl_skip nil? ","<c:tickMarkSkip val=\" << << ","<c:tickMarkSkip val=\" << ","<c:tickLblSkip val=\" << << ","<c:tickLblSkip val=\" << "]}," Axlsx ScatterSeries to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["@yData to_xml_string ","@yData nil? ","@xData to_xml_string ","@xData nil? ","str << ","str << << << ","str << << "," color ","<c:smooth val=\" << << ","<c:smooth val=\" << "," smooth ","<a:srgbClr val=\" << << ","<a:srgbClr val=\" << "," ln_width to_s "," ln_width "]}," Axlsx ScatterSeries initialize":{"type":"method","name":"initialize","children":[],"call":["NamedAxisData  new ","options [] ","options [] nil? ","NumDataSource  new ","AxDataSource  new ","Axlsx  validate_boolean ","(sym :smooth) include? ","chart scatter_style "]}," Axlsx ScatterChart to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["@yValAxis to_xml_string ","@xValAxis to_xml_string ","str << ","str << << << ","str << << ","@yValAxId to_s ","@xValAxId to_s ","ser to_xml_string ","@series each "," scatterStyle to_s "," scatterStyle ","str_inner << ","str_inner << << << ","str_inner << << "," d_lbls to_xml_string "," d_lbls "," vary_colors to_s "," vary_colors "," axes to_xml_string "," axes "," scatter_style to_s "," scatter_style ","<c:varyColors val=\" << << ","<c:varyColors val=\" << ","<c:scatterStyle val=\" << << ","<c:scatterStyle val=\" << "]}," Axlsx ScatterChart scatterStyle=":{"type":"method","name":"scatterStyle=","children":[],"call":["Axlsx  validate_scatter_style "]}," Axlsx ScatterChart initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each ","ValAxis  new "," rand ","8 ** "," parse_options "]}," Axlsx Scaling to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << ","str << << ","@max to_s ","@max nil? ","@min to_s ","@min nil? ","@orientation to_s ","@orientation nil? ","@logBase to_s ","@logBase nil? ","<c:max val=\" << << ","<c:max val=\" << ","<c:min val=\" << << ","<c:min val=\" << ","<c:orientation val=\" << << ","<c:orientation val=\" << ","<c:logBase val=\" << << ","<c:logBase val=\" << "]}," Axlsx PieSeries to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["@data to_xml_string ","@data nil? ","@labels to_xml_string ","@labels nil? ","str_inner << << << ","str_inner << << ","str_inner << ","@explosion nil? ","str << ","str << << << ","str << << ","index to_s "," colors each_with_index "," colors ","<a:srgbClr val=\" << << ","<a:srgbClr val=\" << ","<c:idx val=\" << << ","<c:idx val=\" << ","<c:explosion val=\" + + ","<c:explosion val=\" + "]}," Axlsx Pie3DChart to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str_inner << ","ser to_xml_string ","@series each "," d_lbls to_xml_string "," d_lbls ","str_inner << << << ","str_inner << << "," vary_colors to_s "," vary_colors ","str << ","<c:varyColors val=\" << << ","<c:varyColors val=\" << "]}," Axlsx PictureLocking to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","(send\n  (send nil :instance_values) :map) join "," << << << << "," << << << ","value to_s "," << << "," << ","key to_s "," instance_values map "," instance_values "," serialized_attributes "," serialized_tag "]}," Axlsx Pic to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << << << ","str << << << << "," id to_s "," id ","str << << << ","str << << "," picture_locking to_xml_string "," picture_locking ","@hyperlink to_xml_string ","@hyperlink is_a? "," descr to_s "," descr "," name to_s "," name "," relationship Id "," relationship ","<a:blip xmlns:r =\" << << << << ","<a:blip xmlns:r =\" << << << ","<a:blip xmlns:r =\" << << ","<a:blip xmlns:r =\" << ","<xdr:cNvPr id=\"2\" name=\" << << << << ","<xdr:cNvPr id=\"2\" name=\" << << << ","<xdr:cNvPr id=\"2\" name=\" << << ","<xdr:cNvPr id=\"2\" name=\" << "," opacity "," hyperlink to_xml_string "," hyperlink "," hyperlink is_a? "]}," Axlsx OneCellAnchor to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","@object to_xml_string ","str << << << << << ","str << << << << "," ext [] to_s "," ext [] "," ext ","str << << << ","str << << "," from to_xml_string "," from ","<xdr:ext cx=\" << << << << ","<xdr:ext cx=\" << << << ","<xdr:ext cx=\" << << ","<xdr:ext cx=\" << "]}," Axlsx NamedAxisData to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << << << ","str << << ","@name to_s ","str << ","str << << << << << ","str << << << << ","index to_s ","item value to_s ","item value ","item is_a? "," each_with_index "," size to_s "," size ","Axlsx  cell_range ","item item value to_s alue to_s ","item item value to_s alue "]}," Axlsx NamedAxisData initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx Marker to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << << << << << << << ","str << << << << << << ","k to_s ","str << << << << << ","str << << << << "," send to_s "," send ","str << << << ","str << << ","str << ","(sym :col) each ","<xdr: << << << << << << ","<xdr: << << << << << ","<xdr: << << << << ","<xdr: << << << ","<xdr: << << ","<xdr: << "]}," Axlsx LineSeries to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["@data to_xml_string ","@data nil? ","@labels to_xml_string ","@labels nil? ","str << ","str << << << ","str << << "," color ","<c:smooth val=\" << << ","<c:smooth val=\" << "," smooth ","<a:srgbClr val=\" << << ","<a:srgbClr val=\" << ","<c:marker><c:symbol val=\" + + ","<c:marker><c:symbol val=\" + ","@marker_symbol to_s ","@marker_symbol != ","@show_marker ! "]}," Axlsx Line3DChart to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["@serAxis to_xml_string ","@valAxis to_xml_string ","@catAxis to_xml_string ","str_inner << ","str_inner << << << ","str_inner << << ","@serAxId to_s ","@valAxId to_s ","@catAxId to_s ","@gapDepth to_s ","@gapDepth nil? ","ser to_xml_string ","@series each "," grouping to_s "," grouping ","@d_lbls to_xml_string "," vary_colors to_s "," vary_colors ","@gap_depth to_s ","@gap_depth nil? ","str << ","<c:gapDepth val=\" << << ","<c:gapDepth val=\" << "]}," Axlsx Hyperlink to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","(send\n  (lvar :h) :map) join "," << << << << "," << << << ","value to_s "," << << "," << ","key to_s ","h map ","h delete "," instance_values merge "," id "," instance_values "," serialized_attributes "," relationship Id "," relationship "," serialized_tag ","(send\n  (lvar : instance_values merge ) :map) join "," instance_values merge  map "," instance_values merge  delete "," relations instance_values merge ip Id "," relations instance_values merge ip "]}," Axlsx GraphicFrame to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << << << << << ","str << << << << << << "," rId to_s "," rId ","str << << << << << ","str << << << << ","str << << << ","str << << "," chart title text "," chart title "," chart ","@anchor drawing index to_s ","@anchor drawing index ","@anchor drawing ","(send\n  (send\n    (send\n      (ivar :@anchor) :drawing) :index_of\n    (ivar :@chart)) :+\n  (int 1)) to_s ","@anchor drawing index_of + ","@anchor drawing index_of ","<c:chart xmlns:c=\" << << << << << << ","<c:chart xmlns:c=\" << << << << << ","<c:chart xmlns:c=\" << << << << ","<c:chart xmlns:c=\" << << << ","<c:chart xmlns:c=\" << << ","<c:chart xmlns:c=\" << ","<a:graphicData uri=\" << << ","<a:graphicData uri=\" << ","<xdr:cNvPr id=\" << << << << << ","<xdr:cNvPr id=\" << << << << ","<xdr:cNvPr id=\" << << << ","<xdr:cNvPr id=\" << << ","<xdr:cNvPr id=\" << "]}," Axlsx Drawing to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","anchor to_xml_string "," anchors each "," anchors ","str << << << << << << << ","str << << << << << << ","str << << << << << ","str << << << << ","str << << << ","str << << ","<xdr:wsDr xmlns:xdr=\" << << << << ","<xdr:wsDr xmlns:xdr=\" << << << ","<xdr:wsDr xmlns:xdr=\" << << ","<xdr:wsDr xmlns:xdr=\" << "]}," Axlsx Chart to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," block_given? ","@view3D to_xml_string ","@title to_xml_string ","str << << << ","str << << "," style to_s "," style ","Axlsx Workbook  date1904 to_s ","Axlsx Workbook  date1904 ","str << << << << << ","str << << << << ","(send\n  (ivar :@title) :==\n  (nil)) to_s ","@title == ","str << << << << << << << ","str << << << << << << ","@view_3D to_xml_string "," display_blanks_as to_s "," display_blanks_as "," bg_color ","<c:dispBlanksAs val=\" << << ","<c:dispBlanksAs val=\" << ","<c:legendPos val=\" << << ","<c:legendPos val=\" << ","@legend_position to_s ","<c:autoTitleDeleted val=\" << << ","<c:autoTitleDeleted val=\" << ","<c:style val=\" << << ","<c:style val=\" << ","<c:date1904 val=\" << << ","<c:date1904 val=\" << ","<c:chartSpace xmlns:c=\" << << << << << << ","<c:chartSpace xmlns:c=\" << << << << << ","<c:chartSpace xmlns:c=\" << << << << ","<c:chartSpace xmlns:c=\" << << << ","<c:chartSpace xmlns:c=\" << << ","<c:chartSpace xmlns:c=\" << "]}," Axlsx CatAxisData to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << << << ","str << << << << ","str << << << ","str << << ","index to_s ","item value to_s ","item value ","item is_a? "," each_with_index "," size to_s "," size ","Axlsx  cell_range ","item item value to_s alue to_s ","item item value to_s alue "]}," Axlsx CatAxis to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << ","str << << ","@lblOffset to_s ","@lblAlgn to_s ","@auto to_s ","@tickMarkSkip to_s ","@tickLblSkip to_s ","@lblOffset to_i to_s ","@lblOffset to_i ","@tick_mark_skip to_s ","@tick_lbl_skip to_s ","@lbl_offset to_i to_s ","@lbl_offset to_i ","@lbl_algn to_s ","<c:tickMarkSkip val=\" << << ","<c:tickMarkSkip val=\" << ","<c:tickLblSkip val=\" << << ","<c:tickLblSkip val=\" << ","<c:lblOffset val=\" << << ","<c:lblOffset val=\" << ","<c:lblAlgn val=\" << << ","<c:lblAlgn val=\" << ","<c:auto val=\" << << ","<c:auto val=\" << "]}," Axlsx BarSeries to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str_inner << << << ","str_inner << << ","@shape to_s ","str_inner << ","@data to_xml_string ","@data nil? ","@labels to_xml_string ","@labels nil? "," shape to_s "," shape ","index to_s "," colors each_with_index "," colors ","str << ","<c:shape val=\" << << ","<c:shape val=\" << ","<a:srgbClr val=\" << << ","<a:srgbClr val=\" << ","<c:idx val=\" << << ","<c:idx val=\" << "]}," Axlsx Bar3DChart to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["@valAxis to_xml_string ","@catAxis to_xml_string ","str_inner << ","str_inner << << << ","str_inner << << ","@valAxId to_s ","@catAxId to_s ","@shape to_s ","@shape nil? ","@gapDepth to_s ","@gapDepth nil? ","@gapWidth to_s ","@gapWidth nil? ","ser to_xml_string ","@series each "," grouping to_s "," grouping "," barDir to_s "," barDir ","@val_axis to_xml_string ","@cat_axis to_xml_string ","@val_ax_id to_s ","@cat_ax_id to_s ","@gap_depth to_s ","@gap_depth nil? ","@gap_width to_s ","@gap_width nil? "," bar_dir to_s "," bar_dir ","@d_lbls to_xml_string "," vary_colors to_s "," vary_colors "," axes to_xml_string "," axes ","str << ","<c:shape val=\" << << ","<c:shape val=\" << ","<c:gapDepth val=\" << << ","<c:gapDepth val=\" << ","<c:gapWidth val=\" << << ","<c:gapWidth val=\" << ","<c:varyColors val=\" << << ","<c:varyColors val=\" << ","<c:grouping val=\" << << ","<c:grouping val=\" << ","<c:barDir val=\" << << ","<c:barDir val=\" << "]}," Axlsx Axis to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << << << ","str << << ","@crosses to_s ","str << ","@crossAx to_s ","@tickLblPos to_s "," gridlines == "," gridlines ","@axPos to_s ","@scaling to_xml_string ","@axId to_s ","@label_rotation to_s ","@delete to_s ","@cross_ax to_s ","@tick_lbl_pos to_s ","@ax_pos to_s ","@ax_id to_s ","@title to_xml_string ","@title == ","@cross_axis id to_s ","@cross_axis id ","@id to_s ","<c:crosses val=\" << << ","<c:crosses val=\" << ","<c:crossAx val=\" << << ","<c:crossAx val=\" << ","<c:txPr><a:bodyPr rot=\" << << ","<c:txPr><a:bodyPr rot=\" << ","<a:srgbClr val=\" << << ","<a:srgbClr val=\" << ","<c:tickLblPos val=\" << << ","<c:tickLblPos val=\" << ","<c:numFmt formatCode=\" << << << << ","<c:numFmt formatCode=\" << << << ","@format_code eql? ","<c:numFmt formatCode=\" << << ","<c:numFmt formatCode=\" << ","<c:axPos val=\" << << ","<c:axPos val=\" << ","<c:delete val=\" << << ","<c:delete val=\" << ","<c:axId val=\" << << ","<c:axId val=\" << "]}," Axlsx Axis gridlines=":{"type":"method","name":"gridlines=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Core to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << ","str << << ","Time  now strftime ","Time  now "," creator ","str << << << << << ","str << << << << ","(or\n  (send nil :created)\n  (send\n    (const nil :Time) :now)) strftime "," created ","<dcterms:created xsi:type=\"dcterms:W3CDTF\"> << << ","<dcterms:created xsi:type=\"dcterms:W3CDTF\"> << ","<dc:creator> << << ","<dc:creator> << ","xmlns:xsi=\" << << ","xmlns:xsi=\" << ","xmlns:dcmitype=\" << << << << ","xmlns:dcmitype=\" << << << ","xmlns:dcmitype=\" << << ","xmlns:dcmitype=\" << ","<cp:coreProperties xmlns:cp=\" << << << << ","<cp:coreProperties xmlns:cp=\" << << << ","<cp:coreProperties xmlns:cp=\" << << ","<cp:coreProperties xmlns:cp=\" << "]}," Axlsx App to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","(send\n  (send nil :instance_values) :map) join ","< << << << << << << ","< << << << << << ","key to_s ","< << << << << ","< << << << ","value to_s ","< << << ","< << "," instance_values map "," instance_values ","str << << << << << ","str << << << << ","str << << << ","str << << ","Axlsx  camel "," instance_values each ","<Properties xmlns=\" << << << << ","<Properties xmlns=\" << << << ","<Properties xmlns=\" << << ","<Properties xmlns=\" << "]}," Axlsx Override to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","(send\n  (send nil :instance_values) :map) join "," << << << << "," << << << ","value to_s "," << << "," << ","key to_s "," instance_values map "," instance_values ","Axlsx  camel "]}," Axlsx Default to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","(send\n  (send nil :instance_values) :map) join "," << << << << "," << << << ","value to_s "," << << "," << ","key to_s "," instance_values map "," instance_values ","Axlsx  camel "]}," Axlsx ContentType to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","type to_xml_string "," each ","str << << << ","str << << ","<Types xmlns=\" << << ","<Types xmlns=\" << "]}," Axlsx Worksheet thin_chars":{"type":"method","name":"thin_chars","children":[],"call":[]}," Axlsx Cell plain_string?":{"type":"method","name":"plain_string?","children":[],"call":["@value start_with? ! ","@value start_with? ","@value empty? ! ","@value empty? ","@value nil? ! ","@value nil? "," is_text_run? ! "," is_text_run? ","@type == "," type == "," type "]}," Axlsx Worksheet add_conditional_formatting":{"type":"method","name":"add_conditional_formatting","children":[],"call":["@conditional_formattings << ","cf add_rules ","ConditionalFormatting  new "," conditional_formattings "," conditional_formattings << ","ConditionalFormatting  new  add_rules "]}," Axlsx IconSet initialize_value_objects":{"type":"method","name":"initialize_value_objects","children":[],"call":["@value_objects lock ","@value_objects concat ","Cfvo  new ","SimpleTypedList  new ","SimpleTypedList  new  lock ","SimpleTypedList  new  concat "]}," Axlsx IconSet to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","cfvo to_xml_string ","@value_objects each ","(send\n  (send nil :instance_values) :map) join "," << << << << "," << << << ","value to_s "," << << "," << ","CHILD_ELEMENTS  include? ","key to_sym "," instance_values map "," instance_values "," serialized_attributes "," serialized_tag "]}," Axlsx IconSet reverse=":{"type":"method","name":"reverse=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx IconSet percent=":{"type":"method","name":"percent=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx IconSet showValue=":{"type":"method","name":"showValue=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx IconSet iconSet=":{"type":"method","name":"iconSet=","children":[],"call":["Axlsx  validate_icon_set "]}," Axlsx IconSet initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," send ","o [] "," respond_to? ","options each "," initialize_value_objects "," parse_options "]}," Axlsx DataBar initialize_value_objects":{"type":"method","name":"initialize_value_objects","children":[],"call":["@value_objects lock ","@value_objects concat ","Cfvo  new ","SimpleTypedList  new ","SimpleTypedList  new  lock ","SimpleTypedList  new  concat "]}," Axlsx DataBar to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," color to_xml_string "," color ","cfvo to_xml_string ","@value_objects each ","(send\n  (send nil :instance_values) :map) join "," << << << << "," << << << ","value to_s "," << << "," << ","CHILD_ELEMENTS  include? ","key to_sym "," instance_values map "," instance_values "," value_objects to_xml_string "," value_objects "," serialized_attributes "," serialized_tag "]}," Axlsx DataBar color=":{"type":"method","name":"color=","children":[],"call":[" color rgb= "," color ","v is_a? "]}," Axlsx DataBar showValue=":{"type":"method","name":"showValue=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx DataBar maxLength=":{"type":"method","name":"maxLength=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx DataBar minLength=":{"type":"method","name":"minLength=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx DataBar initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," send ","o [] "," respond_to? ","options each "," initialize_value_objects "," parse_options "," initialize_cfvos "]}," Axlsx DataBar color":{"type":"method","name":"color","children":[],"call":["Color  new "]}," Axlsx ConditionalFormattingRule to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","@icon_set to_xml_string ","@type == ","@data_bar to_xml_string ","@color_scale to_xml_string ","str << << << ","str << << "," formula ","(send\n  (send nil :instance_values) :map) join "," << << << << "," << << << ","value to_s "," << << "," << ","CHILD_ELEMENTS  include? ","key to_sym "," instance_values map "," instance_values "," serialized_attributes ","(splat\n  (send\n    (self) :formula)) join ","<formula> << << ","<formula> << "]}," Axlsx ConditionalFormattingRule icon_set=":{"type":"method","name":"icon_set=","children":[],"call":["Axlsx DataTypeValidator  validate "]}," Axlsx ConditionalFormattingRule data_bar=":{"type":"method","name":"data_bar=","children":[],"call":["Axlsx DataTypeValidator  validate "]}," Axlsx ConditionalFormattingRule color_scale=":{"type":"method","name":"color_scale=","children":[],"call":["Axlsx DataTypeValidator  validate "]}," Axlsx ConditionalFormattingRule formula=":{"type":"method","name":"formula=","children":[],"call":["Axlsx  validate_string ","(splat\n  (lvar :v)) each "," CGI  escapeHTML ","(splat\n  (lvar :v)) map "]}," Axlsx ConditionalFormattingRule timePeriod=":{"type":"method","name":"timePeriod=","children":[],"call":["Axlsx  validate_time_period_type "]}," Axlsx ConditionalFormattingRule stopIfTrue=":{"type":"method","name":"stopIfTrue=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx ConditionalFormattingRule stdDev=":{"type":"method","name":"stdDev=","children":[],"call":["Axlsx  validate_unsigned_numeric "]}," Axlsx ConditionalFormattingRule rank=":{"type":"method","name":"rank=","children":[],"call":["Axlsx  validate_unsigned_numeric "]}," Axlsx ConditionalFormattingRule percent=":{"type":"method","name":"percent=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx ConditionalFormattingRule text=":{"type":"method","name":"text=","children":[],"call":["Axlsx  validate_string "]}," Axlsx ConditionalFormattingRule operator=":{"type":"method","name":"operator=","children":[],"call":["Axlsx  validate_conditional_formatting_operator "]}," Axlsx ConditionalFormattingRule priority=":{"type":"method","name":"priority=","children":[],"call":["Axlsx  validate_unsigned_numeric "]}," Axlsx ConditionalFormattingRule equalAverage=":{"type":"method","name":"equalAverage=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx ConditionalFormattingRule dxfId=":{"type":"method","name":"dxfId=","children":[],"call":["Axlsx  validate_unsigned_numeric "]}," Axlsx ConditionalFormattingRule bottom=":{"type":"method","name":"bottom=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx ConditionalFormattingRule aboveAverage=":{"type":"method","name":"aboveAverage=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx ConditionalFormattingRule type=":{"type":"method","name":"type=","children":[],"call":["Axlsx  validate_conditional_formatting_type "]}," Axlsx ConditionalFormattingRule initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," parse_options "]}," Axlsx ConditionalFormattingRule icon_set":{"type":"method","name":"icon_set","children":[],"call":["IconSet  new "]}," Axlsx ConditionalFormattingRule data_bar":{"type":"method","name":"data_bar","children":[],"call":["DataBar  new "]}," Axlsx ConditionalFormattingRule color_scale":{"type":"method","name":"color_scale","children":[],"call":["ColorScale  new "]}," Axlsx ConditionalFormatting to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","(send\n  (send nil :rules) :collect) join ","rule to_xml_string "," rules collect "," rules ","str << << << ","str << << "," sqref ","<conditionalFormatting sqref=\" << << ","<conditionalFormatting sqref=\" << "]}," Axlsx ConditionalFormatting sqref=":{"type":"method","name":"sqref=","children":[],"call":["Axlsx  validate_string "]}," Axlsx ConditionalFormatting rules=":{"type":"method","name":"rules=","children":[],"call":[]}," Axlsx ConditionalFormatting add_rule":{"type":"method","name":"add_rule","children":[],"call":["@rules << ","ConditionalFormattingRule  new ","rule is_a? "]}," Axlsx ConditionalFormatting add_rules":{"type":"method","name":"add_rules","children":[],"call":[" add_rule ","rules each ","rules is_a? "]}," Axlsx ConditionalFormatting initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," parse_options "]}," Axlsx ColorScale initialize_colors":{"type":"method","name":"initialize_colors","children":[],"call":["@colors lock ","@colors concat ","Color  new ","SimpleTypedList  new ","SimpleTypedList  new  lock ","SimpleTypedList  new  concat "]}," Axlsx ColorScale initialize_value_objects":{"type":"method","name":"initialize_value_objects","children":[],"call":["@value_objects lock ","@value_objects concat ","Cfvo  new ","SimpleTypedList  new ","SimpleTypedList  new  lock ","SimpleTypedList  new  concat "]}," Axlsx ColorScale to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","color to_xml_string ","@colors each ","cfvo to_xml_string ","@value_objects each "," value_objects to_xml_string "," value_objects "," colors each "," colors "]}," Axlsx ColorScale delete_at":{"type":"method","name":"delete_at","children":[],"call":["@colors delete_at ","@value_objects delete_at "," value_objects delete_at "," value_objects "," colors delete_at "," colors "]}," Axlsx ColorScale add":{"type":"method","name":"add","children":[],"call":["@colors last ","@value_objects last ","@colors << ","Color  new ","options [] ","@value_objects << ","Cfvo  new "," value_objects last "," value_objects "," value_objects << "," colors last "," colors "," colors << "]}," Axlsx ColorScale initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," initialize_colors "," initialize_value_objects "," initialize_default_cfvos "]}," Axlsx Cfvo to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","(send\n  (send nil :instance_values) :map) join "," << << << << "," << << << ","value to_s "," << << "," << "," instance_values map "," instance_values "," serialized_attributes "," serialized_tag "]}," Axlsx Cfvo val=":{"type":"method","name":"val=","children":[],"call":["v to_s "," raise ","v inspect ","v respond_to? "]}," Axlsx Cfvo gte=":{"type":"method","name":"gte=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Cfvo type=":{"type":"method","name":"type=","children":[],"call":["Axlsx  validate_conditional_formatting_value_object_type "]}," Axlsx Cfvo initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," parse_options "]}," Axlsx validate_conditional_formatting_operator":{"type":"method","name":"validate_conditional_formatting_operator","children":[],"call":[]}," Axlsx validate_conditional_formatting_value_object_type":{"type":"method","name":"validate_conditional_formatting_value_object_type","children":[],"call":[]}," Axlsx validate_conditional_formatting_type":{"type":"method","name":"validate_conditional_formatting_type","children":[],"call":[]}," Axlsx validate_icon_set":{"type":"method","name":"validate_icon_set","children":[],"call":[]}," Axlsx validate_time_period_type":{"type":"method","name":"validate_time_period_type","children":[],"call":[]}," Axlsx validate_angle":{"type":"method","name":"validate_angle","children":[],"call":[]}," Axlsx Styles parse_num_fmt_options":{"type":"method","name":"parse_num_fmt_options","children":[],"call":["options [] ","numFmt numFmtId "," numFmts << "," numFmts ","options [] == ","NumFmt  new ","options [] to_s ","(send\n  (ivar :@numFmts) :map) max + ","(send\n  (ivar :@numFmts) :map) max ","num_fmt numFmtId ","@numFmts map ","options [] != ","(send\n  (send\n    (lvar :options) :keys) :&\n  (array\n    (sym :format_code)\n    (sym :num_fmt))) empty? ","options keys & ","options keys ","NumFmt  new  NumFmt  new Id "," NumFmt  new s << "," NumFmt  new s ","(send\n  (ivar :@NumFmt  new s) :map) max + ","(send\n  (ivar :@NumFmt  new s) :map) max ","num_fmt NumFmt  new Id ","@NumFmt  new s map "]}," Axlsx Styles parse_border_options":{"type":"method","name":"parse_border_options","children":[],"call":[" borders [] clone "," borders [] "," borders ","options [] == ","options [] "," raise ","ERR_INVALID_BORDER_ID  % ","b_opts < "," borders size ","b_opts is_a? "," borders << ","border prs << ","BorderPr  new ","border prs ","Color  new ","b_opts [] ","(or\n  (send\n    (lvar :b_opts) :[]\n    (sym :edges))\n  (array\n    (sym :left)\n    (sym :right)\n    (sym :top)\n    (sym :bottom))) each ","Border  new ","ERR_INVALID_BORDER_OPTIONS  % ","b_opts values_at size == ","b_opts values_at size ","b_opts values_at ","b_opts keys include? ","b_opts keys ","border_edge [] ","b_opts merge ","(str \"border_\") to_sym "," Border  new s [] clone "," Border  new s [] "," Border  new s ","options []  < "," Border  new s size ","options []  is_a? "," Border  new s << ","Border  new  prs << ","Border  new  prs ","options []  [] ","(or\n  (send\n    (lvar :options [] ) :[]\n    (sym :edges))\n  (array\n    (sym :left)\n    (sym :right)\n    (sym :top)\n    (sym :bottom))) each ","options []  values_at size == ","options []  values_at size ","options []  values_at ","options []  keys include? ","options []  keys ","Border  new _edge [] ","b_opts merge  [] ","options []  merge ","(str \"Border  new _\") to_sym "]}," Axlsx Styles parse_fill_options":{"type":"method","name":"parse_fill_options","children":[],"call":[" fills << "," fills ","options [] == ","options [] ","Fill  new ","PatternFill  new ","Color  new "," Fill  new s << "," Fill  new s "]}," Axlsx Styles parse_font_options":{"type":"method","name":"parse_font_options","children":[],"call":[" fonts << "," fonts ","options [] == ","options [] ","font name= ","font color= ","Color  new ","Font  new ","(send\n  (send\n    (lvar :options) :keys) :&\n  (array\n    (sym :fg_color)\n    (sym :sz)\n    (sym :b)\n    (sym :i)\n    (sym :u)\n    (sym :strike)\n    (sym :outline)\n    (sym :shadow)\n    (sym :charset)\n    (sym :family)\n    (sym :font_name))) empty? ","options keys & ","options keys ","options []= ","key to_sym ","options keys include? "," fonts first instance_values each "," fonts first instance_values "," fonts first "," Font  new s << "," Font  new s ","Font  new  name= ","Font  new  color= ","(send\n  (send\n    (lvar :options) :keys) :&\n  (array\n    (sym :fg_color)\n    (sym :sz)\n    (sym :b)\n    (sym :i)\n    (sym :u)\n    (sym :strike)\n    (sym :outline)\n    (sym :shadow)\n    (sym :charset)\n    (sym :family)\n    (sym :Font  new _name))) empty? "," Font  new s first instance_values each "," Font  new s first instance_values "," Font  new s first "]}," Axlsx Styles parse_alignment_options":{"type":"method","name":"parse_alignment_options","children":[],"call":["CellAlignment  new ","options [] "]}," Axlsx Styles parse_protection_options":{"type":"method","name":"parse_protection_options","children":[],"call":["CellProtection  new ","(send\n  (send\n    (lvar :options) :keys) :&\n  (array\n    (sym :hidden)\n    (sym :locked))) empty? ","options keys & ","options keys "]}," Axlsx Dxf to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," send to_xml_string "," send ","CHILD_ELEMENTS  each "]}," Axlsx Dxf fill=":{"type":"method","name":"fill=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Dxf border=":{"type":"method","name":"border=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Dxf font=":{"type":"method","name":"font=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Dxf numFmt=":{"type":"method","name":"numFmt=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Dxf protection=":{"type":"method","name":"protection=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Dxf alignment=":{"type":"method","name":"alignment=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Dxf initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","o [] nil? ","options each "," parse_options "]}," Axlsx Axis label_rotation=":{"type":"method","name":"label_rotation=","children":[],"call":["Axlsx  validate_angle ","v to_i * ","v to_i ","Axlsx  validate_int "]}," Axlsx Row outlineLevel=":{"type":"method","name":"outlineLevel=","children":[],"call":["Axlsx  validate_unsigned_numeric "]}," Axlsx Row hidden=":{"type":"method","name":"hidden=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Row collapsed=":{"type":"method","name":"collapsed=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx StrVal to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << << << << << ","str << << << << "," v to_s "," v ","str << << << ","str << << ","idx to_s ","str << ","Axlsx  validate_unsigned_int ","<c:pt idx=\" << << << << ","<c:pt idx=\" << << << ","<c:pt idx=\" << << ","<c:pt idx=\" << "," CGI  escapeHTML "," v to_s empty? ! "," v to_s empty? "]}," Axlsx StrVal v=":{"type":"method","name":"v=","children":[],"call":["v to_s "]}," Axlsx StrVal initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," parse_options "]}," Axlsx StrData to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << << << ","str << << ","@tag_name to_s ","str << ","value to_xml_string ","@pt each_with_index ","@pt size to_s ","@pt size ","</c: << << ","</c: << ","<c:ptCount val=\" << << ","<c:ptCount val=\" << ","<c: << << ","<c: << "]}," Axlsx StrData data=":{"type":"method","name":"data=","children":[],"call":["@pt << ","@type new ","value value ","value is_a? ","values each ","values first is_a? ","values first ","value value alue value value alue ","value value alue is_a? ","value value alues each ","value value alues first is_a? ","value value alues first "]}," Axlsx StrData initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each ","SimpleTypedList  new "," parse_options "]}," Axlsx ScatterSeries color=":{"type":"method","name":"color=","children":[],"call":[]}," Axlsx PieSeries colors=":{"type":"method","name":"colors=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx NumVal to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << << << << << << << ","str << << << << << << "," v to_s "," v ","str << << << << << ","str << << << << "," format_code ","str << << << ","str << << ","idx to_s ","str << ","Axlsx  validate_unsigned_int ","<c:pt idx=\" << << << << << << ","<c:pt idx=\" << << << << << ","<c:pt idx=\" << << << << ","<c:pt idx=\" << << << ","<c:pt idx=\" << << ","<c:pt idx=\" << "," v to_s empty? ! "," v to_s empty? "]}," Axlsx NumVal format_code=":{"type":"method","name":"format_code=","children":[],"call":["Axlsx  validate_string "]}," Axlsx NumVal initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx NumDataSource to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << << << ","str << << "," tag_name to_s "," tag_name ","str << ","@ref_tag_name to_s ","@data to_xml_string ","@f to_s ","</c: << << ","</c: << ","<c:f> << << ","<c:f> << ","<c: << << ","<c: << "]}," Axlsx NumDataSource tag_name=":{"type":"method","name":"tag_name=","children":[],"call":["Axlsx RestrictionValidator  validate "," class allowed_tag_names "," class "," class name "]}," Axlsx NumDataSource initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each ","Axlsx  cell_range ","options [] ","options [] first is_a? ","options [] first ","@data_type new "," parse_options ","@data_type new _type new "]}," Axlsx NumDataSource allowed_tag_names":{"type":"method","name":"allowed_tag_names","children":[],"call":[]}," Axlsx NumData to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << << << ","str << << ","@tag_name to_s ","str << ","num_val to_xml_string ","@pt each_with_index ","@pt size to_s ","@pt size "," format_code to_s "," format_code ","</c: << << ","</c: << ","<c:ptCount val=\" << << ","<c:ptCount val=\" << ","<c:formatCode> << << ","<c:formatCode> << ","<c: << << ","<c: << "]}," Axlsx NumData format_code=":{"type":"method","name":"format_code=","children":[],"call":["Axlsx  validate_string "]}," Axlsx NumData data=":{"type":"method","name":"data=","children":[],"call":["@pt << ","NumVal  new ","value value ","value is_a? ","values each ","values first is_a? ","values first ","value is_formula? ","value value alue value value alue ","value value  value value  ","value value alue is_a? ","value value  is_a? ","value value alues each ","value value s each ","value value alues first is_a? ","value value s first is_a? ","value value alues first ","value value s first ","value value alue is_formula? ","value value  is_formula? "]}," Axlsx NumData initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each ","SimpleTypedList  new "," parse_options "]}," Axlsx LineSeries color=":{"type":"method","name":"color=","children":[],"call":[]}," Axlsx CatAxis tickMarkSkip=":{"type":"method","name":"tickMarkSkip=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx CatAxis tickLblSkip=":{"type":"method","name":"tickLblSkip=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx BarSeries colors=":{"type":"method","name":"colors=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Axis delete=":{"type":"method","name":"delete=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx AxDataSource initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx AxDataSource allowed_tag_names":{"type":"method","name":"allowed_tag_names","children":[],"call":[]}," Axlsx Worksheet add_comment":{"type":"method","name":"add_comment","children":[],"call":["@comments add_comment "," worksheet_comments add_comment "," worksheet_comments "]}," Axlsx Worksheet print_options":{"type":"method","name":"print_options","children":[],"call":[" block_given? ","PrintOptions  new "]}," Axlsx Worksheet page_setup":{"type":"method","name":"page_setup","children":[],"call":[" block_given? ","PageSetup  new "]}," Axlsx PrintOptions to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","(send\n  (block\n    (send\n      (send nil :instance_values) :select)\n    (args\n      (arg :k)\n      (arg :v))\n    (send\n      (lvar :v) :==\n      (true))) :map) join ","(send\n  (lvar :k) :gsub\n  (regexp\n    (str \"_(.)\")\n    (regopt))) << ","1 upcase ","k gsub ","(send\n  (send nil :instance_values) :select) map ","v == "," instance_values select "," instance_values "," serialized_attributes "," serialized_tag "]}," Axlsx PrintOptions vertical_centered=":{"type":"method","name":"vertical_centered=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx PrintOptions horizontal_centered=":{"type":"method","name":"horizontal_centered=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx PrintOptions headings=":{"type":"method","name":"headings=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx PrintOptions grid_lines=":{"type":"method","name":"grid_lines=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx PrintOptions set":{"type":"method","name":"set","children":[],"call":[" send "," respond_to? ","options each "," parse_options "]}," Axlsx PrintOptions initialize":{"type":"method","name":"initialize","children":[],"call":[" set "]}," Axlsx PageSetup to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","(send\n  (send nil :instance_values) :map) join ","(send\n  (lvar :k) :gsub\n  (regexp\n    (str \"_(.)\")\n    (regopt))) << ","1 upcase ","k gsub "," instance_values map "," instance_values ","(send\n  (block\n    (send\n      (send nil :instance_values) :reject)\n    (args\n      (arg :k)\n      (arg :v))\n    (send\n      (lvar :k) :==\n      (str \"worksheet\"))) :map) join ","(send\n  (send nil :instance_values) :reject) map ","k == "," instance_values reject "," serialized_attributes "," serialized_tag "]}," Axlsx PageSetup scale=":{"type":"method","name":"scale=","children":[],"call":["Axlsx  validate_page_scale ","Axlsx  validate_scale_10_400 "]}," Axlsx PageSetup paper_width=":{"type":"method","name":"paper_width=","children":[],"call":["Axlsx  validate_number_with_unit "]}," Axlsx PageSetup paper_height=":{"type":"method","name":"paper_height=","children":[],"call":["Axlsx  validate_number_with_unit "]}," Axlsx PageSetup orientation=":{"type":"method","name":"orientation=","children":[],"call":["Axlsx  validate_page_orientation "]}," Axlsx PageSetup fit_to_width=":{"type":"method","name":"fit_to_width=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx PageSetup fit_to_height=":{"type":"method","name":"fit_to_height=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx PageSetup set":{"type":"method","name":"set","children":[],"call":[" send "," respond_to? ","options each "," parse_options "]}," Axlsx PageSetup initialize":{"type":"method","name":"initialize","children":[],"call":[" set "," parse_options "]}," Axlsx Comments to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","comment to_xml_string ","@list each ","str << << << ","str << << ","author to_s "," authors each "," authors "," each ","<author> << << ","<author> << ","<comments xmlns=\" << << ","<comments xmlns=\" << "]}," Axlsx Comments authors":{"type":"method","name":"authors","children":[],"call":["(send\n  (ivar :@list) :map) uniq sort ","(send\n  (ivar :@list) :map) uniq ","comment author to_s ","comment author ","@list map ","(send nil :map) uniq sort ","(send nil :map) uniq "," map "]}," Axlsx Comments add_comment":{"type":"method","name":"add_comment","children":[],"call":["@list last "," block_given? ","@list << ","Comment  new "," raise ","options [] "," last "," << "]}," Axlsx Comments initialize":{"type":"method","name":"initialize","children":[],"call":["VmlDrawing  new "," raise ","worksheet is_a? "]}," Axlsx Comments pn":{"type":"method","name":"pn","children":[],"call":["COMMENT_PN  % "," index + "," index "]}," Axlsx Comments index":{"type":"method","name":"index","children":[],"call":["@worksheet index "]}," Axlsx Comment initialize_vml_shape":{"type":"method","name":"initialize_vml_shape","children":[],"call":["vml bottom_row= ","vml row + ","vml row ","vml top_row= ","vml right_column= ","vml column + ","vml column ","vml left_column= ","VmlShape  new ","pos [] ","Axlsx  name_to_indices "," ref ","Axlsx  name_to_indices  [] "]}," Axlsx Comment to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << ","str << << "," text ","author to_s ","str << << << << << ","str << << << << "," author_index to_s "," author_index "," ref ","@comments authors [] ","@comments authors "," CGI  escapeHTML ","author to_s == ","<t> << << ","<t> << ","<comment ref=\" << << << << ","<comment ref=\" << << << ","<comment ref=\" << << ","<comment ref=\" << ","@comments authors []  to_s "," @comments authors [] _index to_s "," @comments authors [] _index ","@comments @comments authors [] s [] ","@comments @comments authors [] s ","@comments authors []  to_s == "]}," Axlsx Comment author=":{"type":"method","name":"author=","children":[],"call":[]}," Axlsx Comment text=":{"type":"method","name":"text=","children":[],"call":["Axlsx  validate_string "]}," Axlsx Comment ref=":{"type":"method","name":"ref=","children":[],"call":["v r ","v is_a? ","Axlsx DataTypeValidator  validate "]}," Axlsx Comment author_index":{"type":"method","name":"author_index","children":[],"call":["@comments authors index "," author ","@comments authors "]}," Axlsx Comment index":{"type":"method","name":"index","children":[],"call":["@comments index "]}," Axlsx Comment vml_shape":{"type":"method","name":"vml_shape","children":[],"call":[" initialize_vml_shape "]}," Axlsx Comment initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," send ","o [] "," respond_to? ","options each "," raise ","comments is_a? "," parse_options "]}," Axlsx Workbook comments":{"type":"method","name":"comments","children":[],"call":["(send\n  (send\n    (self) :worksheets) :map) compact ","ws comments "," worksheets map "," worksheets ","(send\n  (send nil :worksheets) :map) compact ","sheet comments "]}," Axlsx validate_page_orientation":{"type":"method","name":"validate_page_orientation","children":[],"call":[]}," Axlsx validate_page_scale":{"type":"method","name":"validate_page_scale","children":[],"call":[]}," Axlsx validate_number_with_unit":{"type":"method","name":"validate_number_with_unit","children":[],"call":[]}," Axlsx validate_integerish":{"type":"method","name":"validate_integerish","children":[],"call":[]}," Axlsx VmlShape to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," column "," row "," bottom_offset "," bottom_row "," right_offset "," right_column "," top_offset "," top_row "," left_offset "," left_column "]}," Axlsx VmlShape bottom_offset=":{"type":"method","name":"bottom_offset=","children":[],"call":["v to_i ","Axlsx  validate_integerish "]}," Axlsx VmlShape bottom_row=":{"type":"method","name":"bottom_row=","children":[],"call":["v to_i ","Axlsx  validate_integerish "]}," Axlsx VmlShape right_offset=":{"type":"method","name":"right_offset=","children":[],"call":["v to_i ","Axlsx  validate_integerish "]}," Axlsx VmlShape right_column=":{"type":"method","name":"right_column=","children":[],"call":["v to_i ","Axlsx  validate_integerish "]}," Axlsx VmlShape top_offset=":{"type":"method","name":"top_offset=","children":[],"call":["v to_i ","Axlsx  validate_integerish "]}," Axlsx VmlShape top_row=":{"type":"method","name":"top_row=","children":[],"call":["v to_i ","Axlsx  validate_integerish "]}," Axlsx VmlShape left_offset=":{"type":"method","name":"left_offset=","children":[],"call":["v to_i ","Axlsx  validate_integerish "]}," Axlsx VmlShape left_column=":{"type":"method","name":"left_column=","children":[],"call":["v to_i ","Axlsx  validate_integerish "]}," Axlsx VmlShape row=":{"type":"method","name":"row=","children":[],"call":["v to_i ","Axlsx  validate_integerish "]}," Axlsx VmlShape column=":{"type":"method","name":"column=","children":[],"call":["v to_i ","Axlsx  validate_integerish "]}," Axlsx VmlShape initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," send ","o [] "," respond_to? ","options each ","(send\n  (begin\n    (erange\n      (int 0)\n      (int 8))) :map) join ","65 + chr ","65 + "," rand ","(erange\n  (int 0)\n  (int 8)) map "," parse_options "]}," Axlsx VmlDrawing to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","comment vml_shape to_xml_string ","comment vml_shape ","@comments each ","@comments worksheet index + ","@comments worksheet index ","@comments worksheet "]}," Axlsx VmlDrawing pn":{"type":"method","name":"pn","children":[],"call":["(begin\n  (const nil :VML_DRAWING_PN)) % ","@comments worksheet index + ","@comments worksheet index ","@comments worksheet "]}," Axlsx VmlDrawing initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","comments is_a? "]}," Axlsx camel":{"type":"method","name":"camel","children":[],"call":[]}," Axlsx Worksheet add_data_validation":{"type":"method","name":"add_data_validation","children":[],"call":["@data_validations << ","dv sqref= ","DataValidation  new "," data_validations << "," data_validations ","DataValidation  new  sqref= "]}," Axlsx Worksheet fit_to_page":{"type":"method","name":"fit_to_page","children":[],"call":["@page_setup fit_to_height != ","@page_setup fit_to_height ","@page_setup fit_to_width != ","@page_setup fit_to_width ","@page_setup != "]}," Axlsx Worksheet sheet_protection":{"type":"method","name":"sheet_protection","children":[],"call":[" block_given? ","SheetProtection  new "]}," Axlsx SheetProtection encode_password":{"type":"method","name":"encode_password","children":[],"call":["chars each ","low_15 | ","high_15 >> ","char & ","32767 << ","char unpack [] << ","char unpack [] ","char unpack ","chars collect! ","chars size ","password split ","low_15 | s each ","char unpack [] << s each ","password split  each ","char &  | ","high_15 >>  >> ","char &  >> ","low_15 |  & ","char unpack [] <<  & ","low_15 |  unpack [] << ","char unpack [] <<  unpack [] << ","low_15 |  unpack [] ","char unpack [] <<  unpack [] ","low_15 |  unpack ","char unpack [] <<  unpack ","low_15 | s collect! ","char unpack [] << s collect! ","password split  collect! ","low_15 | s size ","char unpack [] << s size ","password split  size "]}," Axlsx SheetProtection create_password_hash":{"type":"method","name":"create_password_hash","children":[],"call":["password_as_string [] + ","password_as_string [] ","password_as_hex unpack first upcase ","password_as_hex unpack first ","password_as_hex unpack ","(lvar :encoded_password) pack "," encode_password ","password_as_hex unpack first upcase  [] + ","password_as_hex unpack first upcase  [] ","(lvar :encoded_password) pack  unpack first upcase ","(lvar :encoded_password) pack  unpack first ","(lvar :encoded_password) pack  unpack ","(lvar : encode_password ) pack "]}," Axlsx SheetProtection to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","(send\n  (send nil :instance_values) :map) join ","(send\n  (lvar :k) :gsub\n  (regexp\n    (str \"_(.)\")\n    (regopt))) << ","v to_s ","1 upcase ","k gsub "," instance_values map "," instance_values "," serialized_attributes "," serialized_tag "]}," Axlsx SheetProtection password=":{"type":"method","name":"password=","children":[],"call":[" create_password_hash ","v == "]}," Axlsx SheetProtection initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," parse_options "]}," Axlsx Row s=":{"type":"method","name":"s=","children":[],"call":["Axlsx  validate_unsigned_numeric "]}," Axlsx Row ph=":{"type":"method","name":"ph=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx PageSetup fit_to":{"type":"method","name":"fit_to","children":[],"call":[" fit_to_height= ","options [] "," fit_to_width= "]}," Axlsx DataValidation get_valid_attributes":{"type":"method","name":"get_valid_attributes","children":[],"call":["attributes flatten! ","attributes << ","@type == ","(sym :between) include? ","(sym :whole) include? "]}," Axlsx DataValidation to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << ","str << << "," formula2 ","valid_attributes include? "," formula1 ","(send\n  (send nil :instance_values) :map) join "," << << << << "," << << << ","value to_s "," << << "," << ","CHILD_ELEMENTS  include? ! ","CHILD_ELEMENTS  include? ","key to_sym "," instance_values map "," instance_values "," get_valid_attributes ","<formula2> << << ","<formula2> << ","<formula1> << << ","<formula1> << ","Axlsx  booleanize to_s ","Axlsx  booleanize "," get_valid_attributes  include? "," get_ get_valid_attributes  "]}," Axlsx DataValidation type=":{"type":"method","name":"type=","children":[],"call":["Axlsx  validate_data_validation_type "]}," Axlsx DataValidation sqref=":{"type":"method","name":"sqref=","children":[],"call":["Axlsx  validate_string "]}," Axlsx DataValidation showInputMessage=":{"type":"method","name":"showInputMessage=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx DataValidation showErrorMessage=":{"type":"method","name":"showErrorMessage=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx DataValidation showDropDown=":{"type":"method","name":"showDropDown=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx DataValidation promptTitle=":{"type":"method","name":"promptTitle=","children":[],"call":["Axlsx  validate_string "]}," Axlsx DataValidation prompt=":{"type":"method","name":"prompt=","children":[],"call":["Axlsx  validate_string "]}," Axlsx DataValidation operator=":{"type":"method","name":"operator=","children":[],"call":["Axlsx  validate_data_validation_operator "]}," Axlsx DataValidation errorTitle=":{"type":"method","name":"errorTitle=","children":[],"call":["Axlsx  validate_string "]}," Axlsx DataValidation errorStyle=":{"type":"method","name":"errorStyle=","children":[],"call":["Axlsx  validate_data_validation_error_style "]}," Axlsx DataValidation error=":{"type":"method","name":"error=","children":[],"call":["Axlsx  validate_string "]}," Axlsx DataValidation allowBlank=":{"type":"method","name":"allowBlank=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx DataValidation formula2=":{"type":"method","name":"formula2=","children":[],"call":["Axlsx  validate_string "]}," Axlsx DataValidation formula1=":{"type":"method","name":"formula1=","children":[],"call":["Axlsx  validate_string "]}," Axlsx DataValidation initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," parse_options "]}," Axlsx validate_data_validation_type":{"type":"method","name":"validate_data_validation_type","children":[],"call":[]}," Axlsx validate_data_validation_operator":{"type":"method","name":"validate_data_validation_operator","children":[],"call":[]}," Axlsx validate_data_validation_error_style":{"type":"method","name":"validate_data_validation_error_style","children":[],"call":[]}," Axlsx TwoCellAnchor add_pic":{"type":"method","name":"add_pic","children":[],"call":["Pic  new "]}," Axlsx Pic swap_anchor":{"type":"method","name":"swap_anchor","children":[],"call":["@anchor drawing anchors []= ","@anchor drawing anchors index ","@anchor drawing anchors ","@anchor drawing ","new_anchor drawing anchors delete ","new_anchor drawing anchors ","new_anchor drawing ","new_anchor instance_variable_set ","@anchor object "]}," Axlsx Pic use_two_cell_anchor":{"type":"method","name":"use_two_cell_anchor","children":[],"call":["new_anchor from row= ","@anchor from row ","@anchor from ","new_anchor from ","new_anchor from col= ","@anchor from col "," swap_anchor tap "," swap_anchor ","TwoCellAnchor  new ","@anchor drawing ","@anchor is_a? ","TwoCellAnchor  new  from row= ","TwoCellAnchor  new  from ","TwoCellAnchor  new  from col= "]}," Axlsx Pic use_one_cell_anchor":{"type":"method","name":"use_one_cell_anchor","children":[],"call":[" swap_anchor ","OneCellAnchor  new ","@anchor from ","@anchor drawing ","@anchor is_a? ","@anchor from row ","@anchor from col "]}," Axlsx Pic end_at":{"type":"method","name":"end_at","children":[],"call":["@anchor to ","@anchor to row= ","@anchor to col= "," use_two_cell_anchor ","@anchor is_a? ","@anchor end_at "]}," Axlsx Axis tick_lbl_pos=":{"type":"method","name":"tick_lbl_pos=","children":[],"call":["RestrictionValidator  validate "," class "]}," Axlsx Axis ax_pos=":{"type":"method","name":"ax_pos=","children":[],"call":["RestrictionValidator  validate "," class "]}," Axlsx App doc_security=":{"type":"method","name":"doc_security=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App app_version=":{"type":"method","name":"app_version=","children":[],"call":["Axlsx  validate_string "]}," Axlsx App hyperlinks_changed=":{"type":"method","name":"hyperlinks_changed=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx App hyperlink_base=":{"type":"method","name":"hyperlink_base=","children":[],"call":["Axlsx  validate_string "]}," Axlsx App shared_doc=":{"type":"method","name":"shared_doc=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx App characters_with_spaces=":{"type":"method","name":"characters_with_spaces=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App links_up_to_date=":{"type":"method","name":"links_up_to_date=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx App scale_crop=":{"type":"method","name":"scale_crop=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx App m_m_clips=":{"type":"method","name":"m_m_clips=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App hidden_slides=":{"type":"method","name":"hidden_slides=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App total_time=":{"type":"method","name":"total_time=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App notes=":{"type":"method","name":"notes=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App slides=":{"type":"method","name":"slides=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App paragraphs=":{"type":"method","name":"paragraphs=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App lines=":{"type":"method","name":"lines=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App presentation_format=":{"type":"method","name":"presentation_format=","children":[],"call":["Axlsx  validate_string "]}," Axlsx App characters=":{"type":"method","name":"characters=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App words=":{"type":"method","name":"words=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App pages=":{"type":"method","name":"pages=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App company=":{"type":"method","name":"company=","children":[],"call":["Axlsx  validate_string "]}," Axlsx App manager=":{"type":"method","name":"manager=","children":[],"call":["Axlsx  validate_string "]}," Axlsx App template=":{"type":"method","name":"template=","children":[],"call":["Axlsx  validate_string "]}," Axlsx Override content_type=":{"type":"method","name":"content_type=","children":[],"call":["Axlsx  validate_content_type "]}," Axlsx Override part_name=":{"type":"method","name":"part_name=","children":[],"call":["Axlsx  validate_string "]}," Axlsx Default content_type=":{"type":"method","name":"content_type=","children":[],"call":["Axlsx  validate_content_type "]}," Axlsx Default extension=":{"type":"method","name":"extension=","children":[],"call":["Axlsx  validate_string "]}," Axlsx Worksheet selected":{"type":"method","name":"selected","children":[],"call":[" sheet_view tab_selected "," sheet_view "," warn "]}," Axlsx Worksheet show_gridlines":{"type":"method","name":"show_gridlines","children":[],"call":[" sheet_view show_grid_lines "," sheet_view "," warn "]}," Axlsx Worksheet sheet_view":{"type":"method","name":"sheet_view","children":[],"call":[" block_given? ","SheetView  new "]}," Axlsx SheetView to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","selection to_xml_string ","@selections each ","@pane to_xml_string ","(send\n  (send nil :instance_values) :map) join ","Axlsx  camel << << << ","Axlsx  camel << << ","value to_s ","Axlsx  camel << ","Axlsx  camel ","key to_s ","value == ","CHILD_ELEMENTS  include? ","key to_sym "," instance_values map "," instance_values "," serialized_attributes "]}," Axlsx SheetView zoom_scale_sheet_layout_view=":{"type":"method","name":"zoom_scale_sheet_layout_view=","children":[],"call":["Axlsx  validate_scale_0_10_400 "]}," Axlsx SheetView zoom_scale_page_layout_view=":{"type":"method","name":"zoom_scale_page_layout_view=","children":[],"call":["Axlsx  validate_scale_0_10_400 "]}," Axlsx SheetView zoom_scale_normal=":{"type":"method","name":"zoom_scale_normal=","children":[],"call":["Axlsx  validate_scale_0_10_400 "]}," Axlsx SheetView zoom_scale=":{"type":"method","name":"zoom_scale=","children":[],"call":["Axlsx  validate_scale_0_10_400 "]}," Axlsx SheetView workbook_view_id=":{"type":"method","name":"workbook_view_id=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx SheetView window_protection=":{"type":"method","name":"window_protection=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx SheetView view=":{"type":"method","name":"view=","children":[],"call":["Axlsx  validate_sheet_view_type "]}," Axlsx SheetView top_left_cell=":{"type":"method","name":"top_left_cell=","children":[],"call":["Axlsx  validate_string ","v r_abs ","v class == ","v class "]}," Axlsx SheetView tab_selected=":{"type":"method","name":"tab_selected=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx SheetView show_zeros=":{"type":"method","name":"show_zeros=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx SheetView show_white_space=":{"type":"method","name":"show_white_space=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx SheetView show_ruler=":{"type":"method","name":"show_ruler=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx SheetView show_row_col_headers=":{"type":"method","name":"show_row_col_headers=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx SheetView show_outline_symbols=":{"type":"method","name":"show_outline_symbols=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx SheetView show_grid_lines=":{"type":"method","name":"show_grid_lines=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx SheetView show_formulas=":{"type":"method","name":"show_formulas=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx SheetView right_to_left=":{"type":"method","name":"right_to_left=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx SheetView default_grid_color=":{"type":"method","name":"default_grid_color=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx SheetView color_id=":{"type":"method","name":"color_id=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx SheetView add_selection":{"type":"method","name":"add_selection","children":[],"call":["@selections []= ","Selection  new ","options merge "]}," Axlsx SheetView initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," parse_options "]}," Axlsx SheetView pane":{"type":"method","name":"pane","children":[],"call":[" block_given? ","Pane  new "]}," Axlsx Selection to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","(send\n  (send nil :instance_values) :map) join "," << << ","1 upcase ","value to_s gsub ","value to_s ","(sym :pane) include? ","key to_sym "," << ","key gsub ","value nil? "," instance_values map "," instance_values "," serialized_attributes "," serialized_tag "]}," Axlsx Selection sqref=":{"type":"method","name":"sqref=","children":[],"call":["Axlsx  validate_string "]}," Axlsx Selection pane=":{"type":"method","name":"pane=","children":[],"call":["Axlsx  validate_pane_type ","Axlsx  camel "]}," Axlsx Selection active_cell_id=":{"type":"method","name":"active_cell_id=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Selection active_cell=":{"type":"method","name":"active_cell=","children":[],"call":["Axlsx  validate_string ","v r_abs ","v class == ","v class "]}," Axlsx Selection initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," parse_options "]}," Axlsx Pane to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","(send\n  (send nil :instance_values) :map) join "," << << ","1 upcase ","value to_s gsub ","value to_s ","(sym :active_pane) include? ","key to_sym "," << ","key gsub ","value nil? "," instance_values map "," instance_values ","row + ","(irange\n  (str \"A\")\n  (str \"ZZ\")) to_a [] ","(irange\n  (str \"A\")\n  (str \"ZZ\")) to_a ","@top_left_cell nil? ","@state == "," serialized_attributes "," finalize "," serialized_tag "]}," Axlsx Pane y_split=":{"type":"method","name":"y_split=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Pane x_split=":{"type":"method","name":"x_split=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Pane top_left_cell=":{"type":"method","name":"top_left_cell=","children":[],"call":["Axlsx  validate_string ","v r_abs ","v class == ","v class "]}," Axlsx Pane state=":{"type":"method","name":"state=","children":[],"call":["Axlsx  validate_split_state_type ","Axlsx  camel ","v to_s "]}," Axlsx Pane active_pane=":{"type":"method","name":"active_pane=","children":[],"call":["Axlsx  validate_pane_type ","Axlsx  camel ","v to_s "]}," Axlsx Pane initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," parse_options "]}," Axlsx Cell is_formula?":{"type":"method","name":"is_formula?","children":[],"call":["@value start_with? ","@type == ","@value to_s start_with? ","@value to_s "," type == "," type "]}," Axlsx validate_split_state_type":{"type":"method","name":"validate_split_state_type","children":[],"call":[]}," Axlsx validate_pane_type":{"type":"method","name":"validate_pane_type","children":[],"call":[]}," Axlsx validate_sheet_view_type":{"type":"method","name":"validate_sheet_view_type","children":[],"call":[]}," Axlsx validate_scale_0_10_400":{"type":"method","name":"validate_scale_0_10_400","children":[],"call":[]}," Axlsx validate_scale_10_400":{"type":"method","name":"validate_scale_10_400","children":[],"call":[]}," Axlsx Axis title=":{"type":"method","name":"title=","children":[],"call":["@title cell= ","v is_a? ","@title text= ","Title  new ","DataTypeValidator  validate "," class "]}," Axlsx coder":{"type":"method","name":"coder","children":[],"call":[]}," Axlsx Worksheet data_validations_node":{"type":"method","name":"data_validations_node","children":[],"call":["str << ","data_validation to_xml_string ","@data_validations each ","@data_validations size ","@data_validations size == "]}," Axlsx Worksheet conditional_formattings_node":{"type":"method","name":"conditional_formattings_node","children":[],"call":["str << ","conditional_formatting to_xml_string ","@conditional_formattings each ","@conditional_formattings size == ","@conditional_formattings size "]}," Axlsx Worksheet table_parts_node":{"type":"method","name":"table_parts_node","children":[],"call":["str << ","table rId ","@tables each ","@tables size ","@tables empty? "]}," Axlsx Worksheet legacy_drawing_node":{"type":"method","name":"legacy_drawing_node","children":[],"call":["<legacyDrawing r:id='rId << << ","<legacyDrawing r:id='rId << ","(send\n  (block\n    (send\n      (send nil :relationships) :index)\n    (args\n      (arg :r))\n    (send\n      (send\n        (lvar :r) :Type) :==\n      (const nil :VML_DRAWING_R))) :+\n  (int 1)) to_s ","(send\n  (send nil :relationships) :index) + ","r Type == ","r Type "," relationships index "," relationships ","@comments empty? "]}," Axlsx Worksheet drawing_node":{"type":"method","name":"drawing_node","children":[],"call":["<drawing r:id='rId << << ","<drawing r:id='rId << ","(send\n  (block\n    (send\n      (send nil :relationships) :index)\n    (args\n      (arg :r))\n    (send\n      (send\n        (lvar :r) :Type) :==\n      (const nil :DRAWING_R))) :+\n  (int 1)) to_s ","(send\n  (send nil :relationships) :index) + ","r Type == ","r Type "," relationships index "," relationships "]}," Axlsx Worksheet merged_cells_node":{"type":"method","name":"merged_cells_node","children":[],"call":["str << ","@merged_cells each ","@merged_cells size ","@merged_cells size == "]}," Axlsx Worksheet protected_ranges_node":{"type":"method","name":"protected_ranges_node","children":[],"call":["str << ","pr to_xml_string ","@protected_ranges each ","@protected_ranges empty? "]}," Axlsx Worksheet cols_node":{"type":"method","name":"cols_node","children":[],"call":["str << ","col to_xml_string ","@column_info each ","@column_info empty? "]}," Axlsx Worksheet auto_filter_node":{"type":"method","name":"auto_filter_node","children":[],"call":["<autoFilter ref='%s'></autoFilter> % "]}," Axlsx Worksheet sheet_data_node":{"type":"method","name":"sheet_data_node","children":[],"call":["str << ","row to_xml_string ","@rows each_with_index "]}," Axlsx Worksheet dimension_node":{"type":"method","name":"dimension_node","children":[],"call":["<dimension ref=\"%s\"></dimension> % "," dimension "," rows size == "," rows size "," rows "]}," Axlsx Worksheet sheet_pr_node":{"type":"method","name":"sheet_pr_node","children":[],"call":["<sheetPr><pageSetUpPr fitToPage=\"%s\"></pageSetUpPr></sheetPr> % "," fit_to_page? "]}," Axlsx Worksheet worksheet_node":{"type":"method","name":"worksheet_node","children":[],"call":["<worksheet xmlns=\"%s\" xmlns:r=\"%s\"> % ","(str \"<worksheet xmlns=\\\"%s\\\" xmlns:r=\\\"%s\\\" xml:space=\\\"\") % "," xml_space "]}," Axlsx Worksheet protect_range":{"type":"method","name":"protect_range","children":[],"call":["@protected_ranges last ","@protected_ranges << ","ProtectedRange  new ","cells last r ","cells last ","cells first r ","cells first ","(send\n  (lvar :x) :index) <=> ","y row index ","y row ","y index ","x row index ","x row ","x index ","cells sort ","cells is_a? "," protected_ranges add_range "," protected_ranges "]}," Axlsx Worksheet fit_to_page?":{"type":"method","name":"fit_to_page?","children":[],"call":["@page_setup fit_to_page? "," page_setup fit_to_page? "," page_setup "," instance_values keys include? "," instance_values keys "," instance_values "]}," Axlsx ProtectedRange to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << << << ","str << << ","(send\n  (lvar :attrs) :map) join "," << << << << "," << << << ","value to_s "," << << "," << ","attrs map ","str << ","value == "," instance_values reject "," instance_values "," serialized_attributes "," serialized_tag "]}," Axlsx ProtectedRange name=":{"type":"method","name":"name=","children":[],"call":["Axlsx  validate_string "]}," Axlsx ProtectedRange sqref=":{"type":"method","name":"sqref=","children":[],"call":["Axlsx  validate_string "]}," Axlsx ProtectedRange initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," send ","o [] "," respond_to? ","options each "," parse_options "]}," Axlsx PageSetup fit_to_page?":{"type":"method","name":"fit_to_page?","children":[],"call":[" fit_to_height != "," fit_to_height "," fit_to_width != "," fit_to_width "]}," Axlsx View3D r_ang_ax=":{"type":"method","name":"r_ang_ax=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx View3D depth_percent=":{"type":"method","name":"depth_percent=","children":[],"call":["RegexValidator  validate "," class "]}," Axlsx View3D rot_y=":{"type":"method","name":"rot_y=","children":[],"call":["DataTypeValidator  validate ","arg <= ","arg >= "," lambda "," class ","RangeValidator  validate "]}," Axlsx View3D h_percent=":{"type":"method","name":"h_percent=","children":[],"call":["RegexValidator  validate "," class "]}," Axlsx View3D rot_x=":{"type":"method","name":"rot_x=","children":[],"call":["DataTypeValidator  validate ","arg <= ","arg >= "," lambda "," class ","RangeValidator  validate "]}," Axlsx Chart view_3D=":{"type":"method","name":"view_3D=","children":[],"call":["DataTypeValidator  validate "," class "]}," Axlsx CatAxis lbl_offset=":{"type":"method","name":"lbl_offset=","children":[],"call":["RegexValidator  validate "," class "]}," Axlsx CatAxis lbl_algn=":{"type":"method","name":"lbl_algn=","children":[],"call":["RestrictionValidator  validate "," class "]}," Axlsx CatAxis tick_mark_skip=":{"type":"method","name":"tick_mark_skip=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx CatAxis tick_lbl_skip=":{"type":"method","name":"tick_lbl_skip=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Bar3DChart gap_depth=":{"type":"method","name":"gap_depth=","children":[],"call":["RegexValidator  validate "]}," Axlsx Bar3DChart gap_width=":{"type":"method","name":"gap_width=","children":[],"call":["RegexValidator  validate "]}," Axlsx Bar3DChart bar_dir=":{"type":"method","name":"bar_dir=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx Axis color=":{"type":"method","name":"color=","children":[],"call":[]}," Axlsx Override validate_options":{"type":"method","name":"validate_options","children":[],"call":["options [] "]}," Axlsx Default validate_options":{"type":"method","name":"validate_options","children":[],"call":["options [] "]}," Axlsx sort_cells":{"type":"method","name":"sort_cells","children":[],"call":[]}," Axlsx WorksheetDrawing to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," index "," has_drawing? "," relationship Id "," relationship "]}," Axlsx WorksheetDrawing index":{"type":"method","name":"index","children":[],"call":["(send\n  (send\n    (send nil :worksheet) :relationships) :index) + ","r Type == ","r Type "," worksheet relationships index "," worksheet relationships "," worksheet "]}," Axlsx WorksheetDrawing relationship":{"type":"method","name":"relationship","children":[],"call":["Relationship  new "," drawing pn "," drawing "," has_drawing? "]}," Axlsx WorksheetDrawing has_drawing?":{"type":"method","name":"has_drawing?","children":[],"call":["@drawing is_a? "]}," Axlsx WorksheetDrawing add_image":{"type":"method","name":"add_image","children":[],"call":[" drawing add_image "," drawing ","Drawing  new "," worksheet "]}," Axlsx WorksheetDrawing add_chart":{"type":"method","name":"add_chart","children":[],"call":[" drawing add_chart "," drawing ","Drawing  new "," worksheet "]}," Axlsx WorksheetDrawing initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","worksheet is_a? "]}," Axlsx WorksheetComments to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," index "," has_comments? "," drawing_rId "]}," Axlsx WorksheetComments index":{"type":"method","name":"index","children":[],"call":["(send\n  (send\n    (send nil :worksheet) :relationships) :index) + ","r Type == ","r Type "," worksheet relationships index "," worksheet relationships "," worksheet "]}," Axlsx WorksheetComments has_comments?":{"type":"method","name":"has_comments?","children":[],"call":[" comments empty? ! "," comments empty? "," comments "]}," Axlsx WorksheetComments relationships":{"type":"method","name":"relationships","children":[],"call":[" comments relationships "," comments "," has_comments? "]}," Axlsx WorksheetComments add_comment":{"type":"method","name":"add_comment","children":[],"call":[" comments add_comment "," comments "]}," Axlsx WorksheetComments comments":{"type":"method","name":"comments","children":[],"call":["Comments  new "," worksheet "]}," Axlsx WorksheetComments initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","worksheet is_a? "]}," Axlsx Worksheet find_or_create_column_info":{"type":"method","name":"find_or_create_column_info","children":[],"call":["Col  new ","index + "," column_info [] "," column_info "]}," Axlsx Worksheet worksheet_comments":{"type":"method","name":"worksheet_comments","children":[],"call":["WorksheetComments  new "]}," Axlsx Worksheet worksheet_drawing":{"type":"method","name":"worksheet_drawing","children":[],"call":["WorksheetDrawing  new "]}," Axlsx Worksheet sheet_data":{"type":"method","name":"sheet_data","children":[],"call":["SheetData  new "]}," Axlsx Worksheet merged_cells":{"type":"method","name":"merged_cells","children":[],"call":["MergedCells  new "]}," Axlsx Worksheet data_validations":{"type":"method","name":"data_validations","children":[],"call":["DataValidations  new "]}," Axlsx Worksheet conditional_formattings":{"type":"method","name":"conditional_formattings","children":[],"call":["ConditionalFormattings  new "]}," Axlsx Worksheet protected_ranges":{"type":"method","name":"protected_ranges","children":[],"call":["ProtectedRanges  new "]}," Axlsx Worksheet range":{"type":"method","name":"range","children":[],"call":["cells << ","r cells [] each ","r cells [] ","last index ","first index ","r cells "," rows [] each "," rows [] ","last row index ","last row ","first row index ","first row "," rows ","r [] each ","r [] ","last row row_index ","first row row_index "]}," Axlsx Worksheet serializable_parts":{"type":"method","name":"serializable_parts","children":[],"call":[" tables "," worksheet_comments "," worksheet_drawing "," page_setup "," page_margins "," print_options "," data_validations "," conditional_formattings "," merged_cells "," auto_filter "," protected_ranges "," sheet_data "," column_info "," sheet_view "," dimension "," sheet_pr "," hyperlinks "," sheet_calc_pr "," header_footer "," sheet_format_pr "," col_breaks "," row_breaks "]}," Axlsx Worksheet validate_sheet_name":{"type":"method","name":"validate_sheet_name","children":[],"call":[" raise ","ERR_DUPLICATE_SHEET_NAME  % ","sheet_names include? ","s name ","@workbook worksheets map ","@workbook worksheets ","Axlsx  coder encode ","Axlsx  coder ","ERR_SHEET_NAME_COLON_FORBIDDEN  % ","name include? ","ERR_SHEET_NAME_TOO_LONG  % ","name size > ","name size ","DataTypeValidator  validate ","(send\n  (send\n    (ivar :@workbook) :worksheets) :reject) map ","s == ","@workbook worksheets reject ","ERR_SHEET_NAME_CHARACTER_FORBIDDEN  % ","[]*/\\?: chars any? ","[]*/\\?: chars ","sheet_Axlsx  coder encode s include? ","s Axlsx  coder encode  ","Axlsx  coder encode  include? ","Axlsx  coder encode  size > ","Axlsx  coder encode  size "]}," Axlsx Worksheet styles":{"type":"method","name":"styles","children":[],"call":[" workbook styles "," workbook "]}," Axlsx Worksheet sheet_pr":{"type":"method","name":"sheet_pr","children":[],"call":["SheetPr  new "]}," Axlsx Worksheet column_info":{"type":"method","name":"column_info","children":[],"call":["Cols  new "]}," Axlsx Worksheet auto_filter":{"type":"method","name":"auto_filter","children":[],"call":["AutoFilter  new "]}," Axlsx Worksheet rows":{"type":"method","name":"rows","children":[],"call":["SimpleTypedList  new "]}," Axlsx Worksheet comments":{"type":"method","name":"comments","children":[],"call":[" worksheet_comments comments "," worksheet_comments "," worksheet_comments has_comments? "]}," Axlsx Worksheet tables":{"type":"method","name":"tables","children":[],"call":["Tables  new "]}," Axlsx Worksheet name":{"type":"method","name":"name","children":[],"call":["Sheet + ","(send\n  (send nil :index) :+\n  (int 1)) to_s "," index + "," index "]}," Axlsx Worksheet initialize_page_options":{"type":"method","name":"initialize_page_options","children":[],"call":["PrintOptions  new ","options [] ","PageSetup  new ","PageMargins  new ","HeaderFooter  new ","ColBreaks  new ","RowBreaks  new "]}," Axlsx Tables to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","table rId ","@list each "," size "," empty? "," each "]}," Axlsx Tables relationships":{"type":"method","name":"relationships","children":[],"call":["Relationship  new ","table pn "," map "," empty? "]}," Axlsx Tables initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","worksheet is_a? "]}," Axlsx SheetPr to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","<sheetPr><pageSetUpPr fitToPage=\"%s\"></pageSetUpPr></sheetPr> % "," worksheet fit_to_page? "," worksheet "," page_setup_pr to_xml_string "," page_setup_pr "," serialized_attributes "," update_properties "," outline_pr to_xml_string "," outline_pr "," tab_color to_xml_string "," tab_color "]}," Axlsx SheetPr initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","worksheet is_a? "," send "," respond_to? ","options each "," parse_options "]}," Axlsx SheetData to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","row to_xml_string "," worksheet rows each_with_index "," worksheet rows "," worksheet "]}," Axlsx SheetData initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","worksheet is_a? "]}," Axlsx ProtectedRanges to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","range to_xml_string "," each "," empty? "]}," Axlsx ProtectedRanges add_range":{"type":"method","name":"add_range","children":[],"call":[" last ","@list << ","ProtectedRange  new "," size ","Axlsx  cell_range ","cells is_a? "," << "]}," Axlsx ProtectedRanges initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","worksheet is_a? "]}," Axlsx MergedCells to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," each "," size ","@list empty? "," empty? "]}," Axlsx MergedCells add":{"type":"method","name":"add","children":[],"call":["@list << ","Axlsx  cell_range ","cells is_a? "," << "]}," Axlsx MergedCells initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","worksheet is_a? "]}," Axlsx Dimension dimension_reference":{"type":"method","name":"dimension_reference","children":[],"call":["cell r ","cell respond_to? "]}," Axlsx Dimension last_cell_reference":{"type":"method","name":"last_cell_reference","children":[],"call":[" dimension_reference ","Dimension  default_last "," worksheet rows last cells last "," worksheet rows last cells "," worksheet rows last "," worksheet rows "," worksheet "," worksheet rows last last "]}," Axlsx Dimension first_cell_reference":{"type":"method","name":"first_cell_reference","children":[],"call":[" dimension_reference ","Dimension  default_first "," worksheet rows first cells first "," worksheet rows first cells "," worksheet rows first "," worksheet rows "," worksheet "," worksheet rows first first "]}," Axlsx Dimension to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","<dimension ref=\"%s\"></dimension> % "," sqref "," worksheet rows empty? "," worksheet rows "," worksheet "]}," Axlsx Dimension sqref":{"type":"method","name":"sqref","children":[],"call":[" last_cell_reference "," first_cell_reference "]}," Axlsx Dimension initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","worksheet is_a? "]}," Axlsx Dimension default_last":{"type":"method","name":"default_last","children":[],"call":[]}," Axlsx Dimension default_first":{"type":"method","name":"default_first","children":[],"call":[]}," Axlsx DataValidations to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","item to_xml_string "," each "," size "," empty? "]}," Axlsx DataValidations initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","worksheet is_a? "]}," Axlsx ConditionalFormattings to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["item to_xml_string "," each "," empty? "]}," Axlsx ConditionalFormattings initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","worksheet is_a? "]}," Axlsx Comments relationships":{"type":"method","name":"relationships","children":[],"call":["Relationship  new "," pn "," vml_drawing pn "," vml_drawing "]}," Axlsx Cols to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","item to_xml_string "," each "," empty? "]}," Axlsx Cols initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","worksheet is_a? "]}," Axlsx Col update_width":{"type":"method","name":"update_width","children":[],"call":[" width= ","(or\n  (send nil :width)\n  (int 0)) max ","cell autowidth "," width ","fixed_width is_a? ","(or\n  (send nil :width)\n  (int 0)) > "]}," Axlsx Cell font_size":{"type":"method","name":"font_size","children":[],"call":["@styles fonts [] sz ","@styles fonts [] ","@styles cellXfs [] fontId ","@styles cellXfs [] "," style ","@styles cellXfs ","@styles fonts "," sz ","font sz ","font sz * "," b ","font b "," styles fonts [] "," styles fonts "," styles "," styles cellXfs [] fontId "," styles cellXfs [] "," styles cellXfs "]}," Axlsx Cell reference":{"type":"method","name":"reference","children":[],"call":[" r "," r_abs "]}," Axlsx Cell autowidth":{"type":"method","name":"autowidth","children":[],"call":["(send\n  (send\n    (begin\n      (send\n        (send\n          (send\n            (send\n              (send nil :value) :to_s) :count\n            (send\n              (const nil :Worksheet) :thin_chars)) :*\n          (lvar :mdw)) :+\n        (int 5))) :/\n    (lvar :mdw)) :*\n  (int 256)) / * ","(send\n  (send\n    (begin\n      (send\n        (send\n          (send\n            (send\n              (send nil :value) :to_s) :count\n            (send\n              (const nil :Worksheet) :thin_chars)) :*\n          (lvar :mdw)) :+\n        (int 5))) :/\n    (lvar :mdw)) :*\n  (int 256)) / ","(send\n  (send\n    (send\n      (send\n        (send nil :value) :to_s) :count\n      (send\n        (const nil :Worksheet) :thin_chars)) :*\n    (lvar :mdw)) :+\n  (int 5)) / * ","(send\n  (send\n    (send\n      (send\n        (send nil :value) :to_s) :count\n      (send\n        (const nil :Worksheet) :thin_chars)) :*\n    (lvar :mdw)) :+\n  (int 5)) / "," value to_s count * + "," value to_s count * "," value to_s count ","Worksheet  thin_chars "," value to_s "," value ","(send\n  (send nil :font_size) :/\n  (float 10.0)) to_f "," font_size / "," font_size "," value == "," is_formula? "," string_width ","width > "," value to_s split each "," value to_s split "," styles cellXfs [] alignment wrap_text "," styles cellXfs [] alignment "," styles cellXfs [] "," style "," styles cellXfs "," styles "," string_width + "," value autowidth "," contains_rich_text? "," value nil? "," string_ string_width  "," string_width  > "," string_ string_width  + "," value auto string_width  "]}," Axlsx AutoFilter to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," range ","filter_column to_xml_string "," columns each "," columns "]}," Axlsx AutoFilter defined_name":{"type":"method","name":"defined_name","children":[],"call":["Axlsx  cell_range "," worksheet name_to_cell "," worksheet "," range split collect "," range split "," range "]}," Axlsx AutoFilter initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","worksheet is_a? "]}," Axlsx Workbook add_defined_name":{"type":"method","name":"add_defined_name","children":[],"call":[" defined_names << ","DefinedName  new "," defined_names "]}," Axlsx Workbook defined_names":{"type":"method","name":"defined_names","children":[],"call":["DefinedNames  new "]}," Axlsx DefinedNames to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","defined_name to_xml_string "," each ","@list empty? "," empty? "]}," Axlsx DefinedNames initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx DefinedName to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << ","str << << << ","Axlsx  camel ","name == "," instance_values each "," instance_values "," raise "," name "," serialized_attributes ","> << << ","> << ","<definedName  << << << ","<definedName  << << ","<definedName  << "]}," Axlsx DefinedName name=":{"type":"method","name":"name=","children":[],"call":["Axlsx RestrictionValidator  validate "]}," Axlsx DefinedName local_sheet_id=":{"type":"method","name":"local_sheet_id=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx DefinedName initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," parse_options "]}," Axlsx SimpleTypedList +":{"type":"method","name":"+","children":[],"call":["@list << ","DataTypeValidator  validate ","v each "]}," Axlsx TwoCellAnchor parse_coord_args":{"type":"method","name":"parse_coord_args","children":[],"call":["x is_a? ","x pos ","Axlsx  name_to_indices "]}," Axlsx TwoCellAnchor set_marker_coords":{"type":"method","name":"set_marker_coords","children":[],"call":[" parse_coord_args ","marker row= ","marker col= "]}," Axlsx DLbls validate_attributes_for_chart_type":{"type":"method","name":"validate_attributes_for_chart_type","children":[],"call":["@chart_type == ","(const nil :Pie3DChart) include? "]}," Axlsx DLbls to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," instance_values [] "," instance_values ","Axlsx  camel "," instance_values [] != "," instance_values keys include? "," instance_values keys ","(str \"d_lbl_pos\") each "," validate_attributes_for_chart_type "]}," Axlsx DLbls d_lbl_pos=":{"type":"method","name":"d_lbl_pos=","children":[],"call":["Axlsx RestrictionValidator  validate ","@chart_type == ","(const nil :Pie3DChart) include? "]}," Axlsx DLbls d_lbl_pos":{"type":"method","name":"d_lbl_pos","children":[],"call":["@chart_type == ","(const nil :Pie3DChart) include? "]}," Axlsx DLbls initialize_defaults":{"type":"method","name":"initialize_defaults","children":[],"call":[" send ","BOOLEAN_ATTRIBUTES  each ","(sym :show_legend_key) each "]}," Axlsx DLbls initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","o [] "," respond_to? ","options each "," initialize_defaults "," raise ","chart_type superclass == ","chart_type superclass "," parse_options ","(const nil :Chart) include? "]}," Axlsx Chart d_lbls":{"type":"method","name":"d_lbls","children":[],"call":["DLbls  new "," class "]}," Axlsx WorksheetHyperlinks to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","hyperlink to_xml_string ","@list each "," empty? "," each "]}," Axlsx WorksheetHyperlinks relationships":{"type":"method","name":"relationships","children":[],"call":["hyperlink relationship "," map "," empty? "]}," Axlsx WorksheetHyperlinks add":{"type":"method","name":"add","children":[],"call":["@list last ","@list << ","WorksheetHyperlink  new "," last "," << "]}," Axlsx WorksheetHyperlinks initialize":{"type":"method","name":"initialize","children":[],"call":["DataTypeValidator  validate "]}," Axlsx WorksheetHyperlink serialization_values":{"type":"method","name":"serialization_values","children":[],"call":["h []= "," location "," id ","@target == ","(str \"display\") include? ! ","(str \"display\") include? "," instance_values reject "," instance_values "]}," Axlsx WorksheetHyperlink to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << << ","str << << << ","value to_s ","str << << ","key to_s "," serialization_values map "," serialization_values "," serialized_attributes "," location_or_id "]}," Axlsx WorksheetHyperlink id":{"type":"method","name":"id","children":[],"call":["@worksheet relationships_index_of + ","@worksheet relationships_index_of ","@target == "]}," Axlsx WorksheetHyperlink relationship":{"type":"method","name":"relationship","children":[],"call":["Relationship  new "," location ","@target == "]}," Axlsx WorksheetHyperlink ref=":{"type":"method","name":"ref=","children":[],"call":["Axlsx  validate_string ","cell_reference r ","cell_reference is_a? ","cell_reference r  r ","cell_reference r  is_a? "]}," Axlsx WorksheetHyperlink target=":{"type":"method","name":"target=","children":[],"call":[]}," Axlsx WorksheetHyperlink initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," send ","o [] "," respond_to? ","options each ","DataTypeValidator  validate "," parse_options "]}," Axlsx Worksheet relationships_index_of":{"type":"method","name":"relationships_index_of","children":[],"call":["objects index ","(send\n  (send nil :tables) :to_a) flatten compact ","(send\n  (send nil :tables) :to_a) flatten "," worksheet_drawing drawing "," worksheet_drawing "," hyperlinks to_a "," hyperlinks "," worksheet_comments comments to_a "," worksheet_comments comments "," worksheet_comments "," tables to_a "," tables "]}," Axlsx Worksheet add_hyperlink":{"type":"method","name":"add_hyperlink","children":[],"call":[" hyperlinks add "," hyperlinks "]}," Axlsx Worksheet hyperlinks":{"type":"method","name":"hyperlinks","children":[],"call":["WorksheetHyperlinks  new "]}," Axlsx PageSetup paper_size=":{"type":"method","name":"paper_size=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx Worksheet sanitize":{"type":"method","name":"sanitize","children":[],"call":["str gsub "]}," Axlsx Worksheet sheet_calc_pr":{"type":"method","name":"sheet_calc_pr","children":[],"call":["SheetCalcPr  new "]}," Axlsx TableStyleInfo to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << ","Axlsx  camel "," instance_values each "," instance_values "," serialized_attributes "," serialized_tag "]}," Axlsx TableStyleInfo initialize_defaults":{"type":"method","name":"initialize_defaults","children":[],"call":[" send ","BOOLEAN_ATTRIBUTES  each ","(str \"show_first_column\") each "]}," Axlsx TableStyleInfo initialize":{"type":"method","name":"initialize","children":[],"call":[" send "," respond_to? ","options each "," initialize_defaults "," parse_options "]}," Axlsx Table table_style_info":{"type":"method","name":"table_style_info","children":[],"call":["TableStyleInfo  new "]}," Axlsx SheetPr update_properties":{"type":"method","name":"update_properties","children":[],"call":[" enable_format_conditions_calculation= "," filter_mode= "," worksheet auto_filter columns size > "," worksheet auto_filter columns size "," worksheet auto_filter columns "," worksheet auto_filter "," worksheet "," page_setup_pr fit_to_page= "," worksheet fit_to_page? "," page_setup_pr "]}," Axlsx SheetPr serialized_attributes":{"type":"method","name":"serialized_attributes","children":[],"call":["str << ","Axlsx  camel ","worksheet page_setup_pr include? "," instance_values each "," instance_values "]}," Axlsx SheetPr page_setup_pr":{"type":"method","name":"page_setup_pr","children":[],"call":["PageSetUpPr  new "]}," Axlsx SheetPr sync_ref=":{"type":"method","name":"sync_ref=","children":[],"call":[]}," Axlsx SheetPr code_name=":{"type":"method","name":"code_name=","children":[],"call":[]}," Axlsx SheetCalcPr serialized_attributes":{"type":"method","name":"serialized_attributes","children":[],"call":["(send\n  (send nil :instance_values) :map) join ","Axlsx  camel "," instance_values map "," instance_values "]}," Axlsx SheetCalcPr to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "]}," Axlsx SheetCalcPr full_calc_on_load=":{"type":"method","name":"full_calc_on_load=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx SheetCalcPr full_calc_on_load":{"type":"method","name":"full_calc_on_load","children":[],"call":[]}," Axlsx SheetCalcPr initialize":{"type":"method","name":"initialize","children":[],"call":[" send "," respond_to? ","options each "," parse_options "]}," Axlsx PageSetUpPr serialized_attributes":{"type":"method","name":"serialized_attributes","children":[],"call":["(send\n  (send nil :instance_values) :map) join ","Axlsx  camel "," instance_values map "," instance_values "]}," Axlsx PageSetUpPr to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << << << ","str << << "," serialized_attributes ","str << ","<pageSetUpPr  << << ","<pageSetUpPr  << "]}," Axlsx PageSetUpPr auto_page_breaks=":{"type":"method","name":"auto_page_breaks=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx PageSetUpPr fit_to_page=":{"type":"method","name":"fit_to_page=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx PageSetUpPr initialize":{"type":"method","name":"initialize","children":[],"call":[" send "," respond_to? ","options each "," parse_options "]}," Axlsx Filters DateGroupItem to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","value to_s "," instance_values each "," instance_values "," serialized_attributes "," serialized_tag "]}," Axlsx Filters DateGroupItem date_time_grouping=":{"type":"method","name":"date_time_grouping=","children":[],"call":["grouping to_s ","RestrictionValidator  validate "]}," Axlsx Filters DateGroupItem second=":{"type":"method","name":"second=","children":[],"call":["RangeValidator  validate "]}," Axlsx Filters DateGroupItem minute=":{"type":"method","name":"minute=","children":[],"call":["RangeValidator  validate "]}," Axlsx Filters DateGroupItem hour=":{"type":"method","name":"hour=","children":[],"call":["RangeValidator  validate "]}," Axlsx Filters DateGroupItem day=":{"type":"method","name":"day=","children":[],"call":["RangeValidator  validate "]}," Axlsx Filters DateGroupItem month=":{"type":"method","name":"month=","children":[],"call":["RangeValidator  validate "]}," Axlsx Filters DateGroupItem year=":{"type":"method","name":"year=","children":[],"call":["RegexValidator  validate "]}," Axlsx Filters DateGroupItem initialize":{"type":"method","name":"initialize","children":[],"call":[" send "," respond_to? ","options each "," raise ","options [] "," parse_options "]}," Axlsx Filters Filter to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","@val to_s "]}," Axlsx Filters Filter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx Filters serialized_attributes":{"type":"method","name":"serialized_attributes","children":[],"call":["str << ","Axlsx  camel ","blank claendar_type include? ","key to_s "," instance_values each "," instance_values "]}," Axlsx Filters date_group_items=":{"type":"method","name":"date_group_items=","children":[],"call":[" date_group_items << ","DateGroupItem  new "," date_group_items "," raise ","date_group is_a? ","options each "]}," Axlsx Filters filter_items=":{"type":"method","name":"filter_items=","children":[],"call":[" filter_items << ","Filter  new "," filter_items ","values each "]}," Axlsx Filters to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","date_group_item to_xml_string "," date_group_items each "," date_group_items ","filter to_xml_string "," filter_items each "," filter_items "," serialized_attributes "]}," Axlsx Filters blank=":{"type":"method","name":"blank=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Filters calendar_type=":{"type":"method","name":"calendar_type=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx Filters date_group_items":{"type":"method","name":"date_group_items","children":[],"call":[]}," Axlsx Filters filter_items":{"type":"method","name":"filter_items","children":[],"call":[]}," Axlsx Filters apply":{"type":"method","name":"apply","children":[],"call":["cell value == ","filter val ","cell value "," filter_items each "," filter_items "]}," Axlsx Filters initialize":{"type":"method","name":"initialize","children":[],"call":[" send "," respond_to? ","options each "," parse_options "]}," Axlsx FilterColumn serialized_attributes":{"type":"method","name":"serialized_attributes","children":[],"call":["str << ","Axlsx  camel ","show_button hidden_button col_id include? ","key to_s "," instance_values each "," instance_values "]}," Axlsx FilterColumn to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","@filter to_xml_string "," serialized_attributes "]}," Axlsx FilterColumn show_button=":{"type":"method","name":"show_button=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx FilterColumn hidden_button=":{"type":"method","name":"hidden_button=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx FilterColumn apply":{"type":"method","name":"apply","children":[],"call":["row hidden= ","@filter apply ","row cells [] ","offset + "," col_id to_i "," col_id ","row cells "]}," Axlsx FilterColumn col_id=":{"type":"method","name":"col_id=","children":[],"call":["Axlsx  validate_unsigned_int ","column_index col ","column_index is_a? ","column_index col  col ","column_index col  is_a? "]}," Axlsx FilterColumn hidden_button":{"type":"method","name":"hidden_button","children":[],"call":[]}," Axlsx FilterColumn show_button":{"type":"method","name":"show_button","children":[],"call":[]}," Axlsx FilterColumn initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? ","Axlsx  const_get new ","Axlsx  const_get ","Axlsx  camel "," send ","o [] "," respond_to? ","options each "," col_id= ","RestrictionValidator  validate "," parse_options "]}," Axlsx AutoFilter apply":{"type":"method","name":"apply","children":[],"call":["column apply ","row hidden ","rows each "," columns each "," columns ","start_point first "," worksheet rows [] ","end_point last ","start_point last + ","start_point last "," worksheet rows "," worksheet ","Axlsx  name_to_indices "," range split "," range ","Axlsx  name_to_indices  first ","Axlsx  name_to_indices  last ","Axlsx  name_to_indices  last + "]}," Axlsx AutoFilter add_column":{"type":"method","name":"add_column","children":[],"call":[" columns last "," columns "," columns << ","FilterColumn  new "]}," Axlsx AutoFilter columns":{"type":"method","name":"columns","children":[],"call":["SimpleTypedList  new "]}," Axlsx RangeValidator validate":{"type":"method","name":"validate","children":[],"call":[]}," Axlsx WorksheetHyperlink location_or_id":{"type":"method","name":"location_or_id","children":[],"call":[" location "," id ","@target == ","Axlsx  coder encode ","Axlsx  coder "," relationship Id "," relationship "]}," Axlsx Pane finalize":{"type":"method","name":"finalize","children":[],"call":["row + ","(irange\n  (str \"A\")\n  (str \"ZZ\")) to_a [] ","(irange\n  (str \"A\")\n  (str \"ZZ\")) to_a ","@top_left_cell nil? ","@state == "]}," Axlsx DataBar show_value=":{"type":"method","name":"show_value=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx DataBar max_length=":{"type":"method","name":"max_length=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx DataBar min_length=":{"type":"method","name":"min_length=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx DataBar value_objects":{"type":"method","name":"value_objects","children":[],"call":["Cfvos  new "]}," Axlsx ColorScale value_objects":{"type":"method","name":"value_objects","children":[],"call":["Cfvos  new "]}," Axlsx Col outline_level=":{"type":"method","name":"outline_level=","children":[],"call":[" raise ","v <= ","0 <= ","Axlsx  validate_unsigned_numeric "]}," Axlsx Cfvos to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["cfvo to_xml_string ","@list each "," each "]}," Axlsx Cfvos initialize":{"type":"method","name":"initialize","children":[],"call":[" lock ","@list << ","Cfvo  new "]}," Axlsx Workbook insert_worksheet":{"type":"method","name":"insert_worksheet","children":[],"call":[" block_given? ","@worksheets insert ","@worksheets delete_at ","@worksheets size - ","@worksheets size ","Worksheet  new ","@Worksheet  new s insert ","@Worksheet  new s delete_at ","@Worksheet  new s size - ","@Worksheet  new s size "]}," Axlsx Workbook sheet_by_name":{"type":"method","name":"sheet_by_name","children":[],"call":["@worksheets [] ","sheet name == ","sheet name ","@worksheets index "]}," Axlsx SimpleTypedList insert":{"type":"method","name":"insert","children":[],"call":["@list insert "," raise "," protected? ","DataTypeValidator  validate "]}," Axlsx SerializedAttributes serialized_attributes":{"type":"method","name":"serialized_attributes","children":[],"call":["str << ","Axlsx  camel ","key_value_pairs each ","key_value_pairs merge! ","key_value_pairs delete "," class xml_attributes include? ","key to_sym "," class xml_attributes "," class ","value == "," instance_values ","attributes each "," declared_attributes merge! "," declared_attributes ","Axlsx  booleanize "," instance_values  each "," instance_values  merge! "," instance_values  delete "," class xml_ declared_attributes merge!  include? "," class xml_ declared_attributes merge!  "," declared_attributes merge!  each "," declared_ declared_attributes merge!  merge! "," declared_ declared_attributes merge!  "]}," Axlsx SerializedAttributes ClassMethods xml_attributes":{"type":"method","name":"xml_attributes","children":[],"call":[]}," Axlsx SerializedAttributes ClassMethods serializable_attributes":{"type":"method","name":"serializable_attributes","children":[],"call":[]}," Axlsx SerializedAttributes included":{"type":"method","name":"included","children":[],"call":[]}," Axlsx OptionsParser parse_options":{"type":"method","name":"parse_options","children":[],"call":[" send ","value != "," respond_to? ","options each ","value nil? ! ","value nil? "]}," Axlsx Accessors ClassMethods validated_attr_accessor":{"type":"method","name":"validated_attr_accessor","children":[],"call":[" module_eval ","SETTER  % ","symbol to_s "," attr_reader ","symbols each "]}," Axlsx Accessors ClassMethods boolean_attr_accessor":{"type":"method","name":"boolean_attr_accessor","children":[],"call":[" validated_attr_accessor "]}," Axlsx Accessors ClassMethods string_attr_accessor":{"type":"method","name":"string_attr_accessor","children":[],"call":[" validated_attr_accessor "]}," Axlsx Accessors included":{"type":"method","name":"included","children":[],"call":[]}," Axlsx GradientFill validate_format_percentage":{"type":"method","name":"validate_format_percentage","children":[],"call":["DataTypeValidator  validate ","arg <= ","arg >= "," lambda "]}," Axlsx CellAlignment reading_order=":{"type":"method","name":"reading_order=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx CellAlignment shrink_to_fit=":{"type":"method","name":"shrink_to_fit=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx CellAlignment justify_last_line=":{"type":"method","name":"justify_last_line=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx CellAlignment relative_indent=":{"type":"method","name":"relative_indent=","children":[],"call":["Axlsx  validate_int "]}," Axlsx CellAlignment wrap_text=":{"type":"method","name":"wrap_text=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx CellAlignment text_rotation=":{"type":"method","name":"text_rotation=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Border diagonal_down=":{"type":"method","name":"diagonal_down=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Border diagonal_up=":{"type":"method","name":"diagonal_up=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx View3D element_for_attribute":{"type":"method","name":"element_for_attribute","children":[],"call":["<%s:%s val='%s'/> % ","Axlsx  camel ","val == "," instance_values [] "," instance_values ","<%s:%s  instance_values [] ='%s'/> % "," instance_values []  == "," instance_ instance_values [] ues [] "," instance_ instance_values [] ues "]}," Axlsx Hyperlink highlight_click=":{"type":"method","name":"highlight_click=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Hyperlink end_snd=":{"type":"method","name":"end_snd=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Drawing index_of":{"type":"method","name":"index_of","children":[],"call":["objects index "," charts + + "," hyperlinks "," charts + "," images "," charts "," child_objects index "," child_objects "," charts + +  index "," child_ charts + +  index "," child_ charts + +  "]}," Axlsx AbstractContentType to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","(send\n  (send nil :instance_values) :map) join "," << << << << "," << << << ","value to_s "," << << "," << ","Axlsx  camel "," instance_values map "," instance_values ","Axlsx  camel << << << ","Axlsx  camel << << ","Axlsx  camel << "]}," Axlsx AbstractContentType content_type=":{"type":"method","name":"content_type=","children":[],"call":["Axlsx  validate_content_type "]}," Axlsx AbstractContentType initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx Row outline_level=":{"type":"method","name":"outline_level=","children":[],"call":["Axlsx  validate_unsigned_numeric "]}," Axlsx Row height":{"type":"method","name":"height","children":[],"call":[]}," Axlsx validate_family":{"type":"method","name":"validate_family","children":[],"call":[]}," Axlsx validate_cell_u":{"type":"method","name":"validate_cell_u","children":[],"call":[]}," Axlsx Worksheet header_footer":{"type":"method","name":"header_footer","children":[],"call":[" block_given? ","HeaderFooter  new "]}," Axlsx HeaderFooter to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," CGI  escapeHTML "," serialized_element_attributes "," serialized_attributes "," serialized_tag "]}," Axlsx HeaderFooter set":{"type":"method","name":"set","children":[],"call":[" parse_options "]}," Axlsx HeaderFooter initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx DataBar initialize_cfvos":{"type":"method","name":"initialize_cfvos","children":[],"call":[" value_objects << ","Cfvo  new "," value_objects ","default merge ","cfvos [] ","index < ","cfvos size "," class default_cfvos each_with_index map "," class default_cfvos each_with_index "," class default_cfvos "," class "]}," Axlsx DataBar default_cfvos":{"type":"method","name":"default_cfvos","children":[],"call":[]}," Axlsx ColorScale initialize_default_cfvos":{"type":"method","name":"initialize_default_cfvos","children":[],"call":[" add ","defaults [] "," colors size - "," colors size "," colors "," colors size < ","defaults size ","defaults [] merge ","index < ","user_cfvos each_with_index "," class default_cfvos "," class "," class default_cfvos  [] "," class default_cfvos  size "," class default_cfvos  [] merge ","user_defaults [] merge s each_with_index "," class default_defaults [] merge s "]}," Axlsx ColorScale colors":{"type":"method","name":"colors","children":[],"call":["SimpleTypedList  new "]}," Axlsx ColorScale three_tone":{"type":"method","name":"three_tone","children":[],"call":[" new "]}," Axlsx ColorScale two_tone":{"type":"method","name":"two_tone","children":[],"call":[" new "]}," Axlsx ColorScale default_cfvos":{"type":"method","name":"default_cfvos","children":[],"call":[]}," Axlsx SerializedAttributes serialized_element_attributes":{"type":"method","name":"serialized_element_attributes","children":[],"call":["str << ","Axlsx  camel "," block_given? ","value nil? ","values [] ","attribute_name to_s ","attrs each "," instance_values "," class xml_element_attributes + "," class xml_element_attributes "," class ","values []  nil? ","values [] s [] "," instance_values  [] "," class xml_element_attributes +  each "," instance_values [] s "," instance_ instance_values  "]}," Axlsx SerializedAttributes ClassMethods xml_element_attributes":{"type":"method","name":"xml_element_attributes","children":[],"call":[]}," Axlsx SerializedAttributes ClassMethods serializable_element_attributes":{"type":"method","name":"serializable_element_attributes","children":[],"call":[]}," Axlsx trust_input=":{"type":"method","name":"trust_input=","children":[],"call":[]}," Axlsx trust_input":{"type":"method","name":"trust_input","children":[],"call":[]}," Axlsx range_to_a":{"type":"method","name":"range_to_a","children":[],"call":[]}," Axlsx Worksheet outline":{"type":"method","name":"outline","children":[],"call":[" sheet_view show_outline_symbols= "," sheet_view ","item hidden= ","item outline_level= ","(lvasgn :item\n  (send\n    (lvar :collection) :[]\n    (lvar :index))) nil? ","collection [] ","range each ","collection []  hidden= ","collection []  outline_level= ","(lvasgn :collection [] \n  (send\n    (lvar :collection) :[]\n    (lvar :index))) nil? "]}," Axlsx Worksheet outline_level_columns":{"type":"method","name":"outline_level_columns","children":[],"call":[" outline "," column_info "]}," Axlsx Worksheet outline_level_rows":{"type":"method","name":"outline_level_rows","children":[],"call":[" outline "," rows "]}," Axlsx Worksheet add_pivot_table":{"type":"method","name":"add_pivot_table","children":[],"call":[" pivot_tables last "," pivot_tables "," block_given? "," pivot_tables << ","PivotTable  new "]}," Axlsx Worksheet pivot_tables":{"type":"method","name":"pivot_tables","children":[],"call":["PivotTables  new "]}," Axlsx Worksheet sheet_format_pr":{"type":"method","name":"sheet_format_pr","children":[],"call":[" yeild "," block_given? ","SheetFormatPr  new "]}," Axlsx SheetFormatPr set_defaults":{"type":"method","name":"set_defaults","children":[],"call":[]}," Axlsx SheetFormatPr to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "]}," Axlsx SheetFormatPr initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "," set_defaults "]}," Axlsx PivotTables relationships":{"type":"method","name":"relationships","children":[],"call":["Relationship  new ","pivot_table pn "," map "," empty? "]}," Axlsx PivotTables initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","worksheet is_a? "]}," Axlsx PivotTableCacheDefinition to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << ","str << << ","cell value "," pivot_table header_cells each "," pivot_table header_cells "," pivot_table "," pivot_table header_cells_count to_s "," pivot_table header_cells_count "," pivot_table range ","str << << << << << ","str << << << << "," pivot_table data_sheet name "," pivot_table data_sheet ","<cacheField name=\" << << ","<cacheField name=\" << ","<cacheFields count=\" << << ","<cacheFields count=\" << ","<worksheetSource ref=\" << << << << ","<worksheetSource ref=\" << << << ","<worksheetSource ref=\" << << ","<worksheetSource ref=\" << ","<pivotCacheDefinition xmlns=\" << << << << ","<pivotCacheDefinition xmlns=\" << << << ","<pivotCacheDefinition xmlns=\" << << ","<pivotCacheDefinition xmlns=\" << "]}," Axlsx PivotTableCacheDefinition rId":{"type":"method","name":"rId","children":[],"call":[" index + "," index "," pivot_table relationships for Id "," pivot_table relationships for "," pivot_table relationships "," pivot_table "]}," Axlsx PivotTableCacheDefinition cache_id":{"type":"method","name":"cache_id","children":[],"call":[" index + "," index "]}," Axlsx PivotTableCacheDefinition pn":{"type":"method","name":"pn","children":[],"call":["PIVOT_TABLE_CACHE_DEFINITION_PN  % "," index + "," index "]}," Axlsx PivotTableCacheDefinition index":{"type":"method","name":"index","children":[],"call":[" pivot_table sheet workbook pivot_tables index "," pivot_table "," pivot_table sheet workbook pivot_tables "," pivot_table sheet workbook "," pivot_table sheet "]}," Axlsx PivotTableCacheDefinition initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx PivotTable header_range":{"type":"method","name":"header_range","children":[],"call":[" range gsub "," range "]}," Axlsx PivotTable pivot_field_for":{"type":"method","name":"pivot_field_for","children":[],"call":["<pivotField compact=\"0\" outline=\"0\" subtotalTop=\"0\" showAll=\"0\" includeNewItemsInFilter=\"1\"> << ","<pivotField dataField=\"1\" compact=\"0\" outline=\"0\" subtotalTop=\"0\" showAll=\"0\" includeNewItemsInFilter=\"1\"> << "," data include? "," data ","<pivotField axis=\"axisCol\" compact=\"0\" outline=\"0\" subtotalTop=\"0\" showAll=\"0\" includeNewItemsInFilter=\"1\"> << << ","<pivotField axis=\"axisCol\" compact=\"0\" outline=\"0\" subtotalTop=\"0\" showAll=\"0\" includeNewItemsInFilter=\"1\"> << "," pages include? "," pages "," columns include? "," columns ","<pivotField axis=\"axisRow\" compact=\"0\" outline=\"0\" subtotalTop=\"0\" showAll=\"0\" includeNewItemsInFilter=\"1\"> << << ","<pivotField axis=\"axisRow\" compact=\"0\" outline=\"0\" subtotalTop=\"0\" showAll=\"0\" includeNewItemsInFilter=\"1\"> << "," rows include? "," rows "," data_refs include? "," data_refs ","<pivotField compact=\"0\" outline=\"0\" subtotalTop=\"0\" showAll=\"0\" includeNewItemsInFilter=\"1\"> + ","<pivotField dataField=\"1\" compact=\"0\" outline=\"0\" subtotalTop=\"0\" showAll=\"0\" includeNewItemsInFilter=\"1\"> + ","<pivotField axis=\"axisCol\" compact=\"0\" outline=\"0\" subtotalTop=\"0\" showAll=\"0\" includeNewItemsInFilter=\"1\"> + + ","<pivotField axis=\"axisCol\" compact=\"0\" outline=\"0\" subtotalTop=\"0\" showAll=\"0\" includeNewItemsInFilter=\"1\"> + ","<pivotField axis=\"axisRow\" compact=\"0\" outline=\"0\" subtotalTop=\"0\" showAll=\"0\" includeNewItemsInFilter=\"1\"> + + ","<pivotField axis=\"axisRow\" compact=\"0\" outline=\"0\" subtotalTop=\"0\" showAll=\"0\" includeNewItemsInFilter=\"1\"> + "]}," Axlsx PivotTable header_index_of":{"type":"method","name":"header_index_of","children":[],"call":[" header_cell_values index "," header_cell_values "]}," Axlsx PivotTable header_cells_count":{"type":"method","name":"header_cells_count","children":[],"call":[" header_cells count "," header_cells "]}," Axlsx PivotTable header_cell_values":{"type":"method","name":"header_cell_values","children":[],"call":[" header_cells map "," header_cells "]}," Axlsx PivotTable header_cells":{"type":"method","name":"header_cells","children":[],"call":["@sheet [] "," header_range "," data_sheet [] "," data_sheet "]}," Axlsx PivotTable header_cell_refs":{"type":"method","name":"header_cell_refs","children":[],"call":["Axlsx  range_to_a first ","Axlsx  range_to_a "," header_range "]}," Axlsx PivotTable to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << << << << << ","str << << << << << << ","str << << << << << "," header_index_of to_s "," header_index_of ","str << << << << ","str << << << ","str << << "," data each "," data "," data size to_s "," data size "," data empty? "," pages each "," pages "," pages size to_s "," pages size "," pages empty? "," columns each "," columns "," columns size to_s "," columns size "," columns empty? "," rows size times "," rows size "," rows "," rows size to_s "," rows each "," rows empty? "," pivot_field_for "," header_cell_values each "," header_cell_values "," header_cells_count to_s "," header_cells_count "," ref "," cache_definition cache_id to_s "," cache_definition cache_id "," cache_definition "," name ","datum_value [] ","<pageField fld=\" << << ","<pageField fld=\" << ","<pageFields count=\" << << ","<pageFields count=\" << ","<field x=\" << << ","<field x=\" << ","<colFields count=\" << << ","<colFields count=\" << ","<rowItems count=\" << << ","<rowItems count=\" << ","<rowFields count=\" << << ","<rowFields count=\" << ","<pivotFields count=\" << << ","<pivotFields count=\" << ","<location firstDataCol=\"1\" firstDataRow=\"1\" firstHeaderRow=\"1\" ref=\" << << ","<location firstDataCol=\"1\" firstDataRow=\"1\" firstHeaderRow=\"1\" ref=\" << ","<pivotTableDefinition xmlns=\" << << << << << << ","<pivotTableDefinition xmlns=\" << << << << << ","<pivotTableDefinition xmlns=\" << << << << ","<pivotTableDefinition xmlns=\" << << << ","<pivotTableDefinition xmlns=\" << << ","<pivotTableDefinition xmlns=\" << ","v to_s ","k to_s "," style_info each "," style_info "," style_info empty? "," no_subtotals_on_headers include? ! "," no_subtotals_on_headers include? "," no_subtotals_on_headers "]}," Axlsx PivotTable rId":{"type":"method","name":"rId","children":[],"call":[" index + "," index "]}," Axlsx PivotTable relationships":{"type":"method","name":"relationships","children":[],"call":["r << ","Relationship  new "," cache_definition pn "," cache_definition ","Relationships  new ","Relationships  new  << "]}," Axlsx PivotTable cache_definition":{"type":"method","name":"cache_definition","children":[],"call":["PivotTableCacheDefinition  new "]}," Axlsx PivotTable rels_pn":{"type":"method","name":"rels_pn","children":[],"call":["PIVOT_TABLE_RELS_PN  % "," index + "," index "]}," Axlsx PivotTable pn":{"type":"method","name":"pn","children":[],"call":["PIVOT_TABLE_PN  % "," index + "," index "]}," Axlsx PivotTable index":{"type":"method","name":"index","children":[],"call":["@sheet workbook pivot_tables index ","@sheet workbook pivot_tables ","@sheet workbook "]}," Axlsx PivotTable pages=":{"type":"method","name":"pages=","children":[],"call":["DataTypeValidator  validate "," class ","v each "]}," Axlsx PivotTable data=":{"type":"method","name":"data=","children":[],"call":["DataTypeValidator  validate "," class ","v each ","@data << ","data_field values each ","data_field values ","data_field is_a? "]}," Axlsx PivotTable columns=":{"type":"method","name":"columns=","children":[],"call":["DataTypeValidator  validate "," class ","v each "]}," Axlsx PivotTable rows=":{"type":"method","name":"rows=","children":[],"call":["DataTypeValidator  validate "," class ","v each "]}," Axlsx PivotTable range=":{"type":"method","name":"range=","children":[],"call":["v is_a? ","DataTypeValidator  validate "," class "]}," Axlsx PivotTable initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," parse_options "," index + "," index ","@sheet workbook pivot_tables << ","@sheet workbook pivot_tables ","@sheet workbook "," range= "]}," Axlsx CellSerializer value_serialization":{"type":"method","name":"value_serialization","children":[],"call":["str << << << ","str << << ","str << ","><v> << << ","><v> << ","serialization_value to_s ","t=\" << << ","t=\" << ","serialization_type to_s "]}," Axlsx CellSerializer numeric_type_serialization":{"type":"method","name":"numeric_type_serialization","children":[],"call":[" value_serialization ","cell value to_s ","cell value "]}," Axlsx CellSerializer string_type_serialization":{"type":"method","name":"string_type_serialization","children":[],"call":[" inline_string_serialization "," value_serialization ","cell ssti to_s ","cell ssti ","cell ssti nil? ! ","cell ssti nil? "," formula_serialization ","cell is_formula? "]}," Axlsx CellSerializer inline_string_serialization":{"type":"method","name":"inline_string_serialization","children":[],"call":["str << "," run_xml_string ","str << << "]}," Axlsx CellSerializer formula_serialization":{"type":"method","name":"formula_serialization","children":[],"call":["str << << << ","str << << ","cell formula_value to_s ","cell formula_value ","str << ","cell formula_value nil? ","str << << << << ","cell value to_s sub ","cell value to_s ","cell value ","<v> << << ","<v> << ","t=\"str\"><f> << << ","t=\"str\"><f> << ","cell clean_value to_s sub ","cell clean_value to_s ","cell clean_value "]}," Axlsx CellSerializer integer_type_serialization":{"type":"method","name":"integer_type_serialization","children":[],"call":[" numeric_type_serialization "]}," Axlsx CellSerializer float_type_serialization":{"type":"method","name":"float_type_serialization","children":[],"call":[" numeric_type_serialization "]}," Axlsx CellSerializer boolean_type_serialization":{"type":"method","name":"boolean_type_serialization","children":[],"call":[" value_serialization ","cell value to_s ","cell value "]}," Axlsx CellSerializer time_type_serialization":{"type":"method","name":"time_type_serialization","children":[],"call":[" value_serialization ","DateTimeConverter  time_to_serial to_s ","DateTimeConverter  time_to_serial ","cell value "]}," Axlsx CellSerializer date_type_serialization":{"type":"method","name":"date_type_serialization","children":[],"call":[" value_serialization ","DateTimeConverter  date_to_serial to_s ","DateTimeConverter  date_to_serial ","cell value "]}," Axlsx CellSerializer iso_8601_type_serialization":{"type":"method","name":"iso_8601_type_serialization","children":[],"call":[" value_serialization ","cell value "]}," Axlsx CellSerializer run_xml_string":{"type":"method","name":"run_xml_string","children":[],"call":["str << << << ","str << << ","cell value to_s ","cell value ","str << ","str << << << << ","str << << << << << ","data [] to_s ","data [] ","key to_s ","data [] to_xml_string ","cell font_name ","keys each ","data keys & ","data keys ","key == ","value == ","cell instance_values reject ","cell instance_values ","cell is_text_run? ","<t> << << ","<t> << ","cell clean_value ","cell value to_xml_string ","cell contains_rich_text? ","RichText  new to_xml_string ","RichText  new ","value nil? ! ","value nil? ","valid include? ","data select ","Hash  [] ","k to_sym ","cell instance_values map ","RichTextRun INLINE_STYLES  - ","Hash  []  [] to_s ","Hash  []  [] ","Hash  []  [] to_xml_string ","data keys &  each ","data data keys &  & ","Hash  []  keys & ","data data keys &  ","Hash  []  keys ","RichTextRun INLINE_STYLES  -  include? ","Hash  []  select "]}," Axlsx CellSerializer to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," send ","(send\n  (send\n    (send\n      (lvar :cell) :type) :to_s) :<<\n  (str \"_type_serialization\")) to_sym ","cell type to_s << ","cell type to_s ","cell type ","cell value nil? ","cell value ","str << << << << << ","str << << << << ","cell style to_s ","cell style ","str << << << ","str << << ","Axlsx  cell_r ","<c r=\" << << << << ","<c r=\" << << << ","<c r=\" << << ","<c r=\" << "]}," Axlsx Accessors ClassMethods float_attr_accessor":{"type":"method","name":"float_attr_accessor","children":[],"call":[" validated_attr_accessor "]}," Axlsx Accessors ClassMethods unsigned_int_attr_accessor":{"type":"method","name":"unsigned_int_attr_accessor","children":[],"call":[" validated_attr_accessor "]}," Axlsx Pic relationship":{"type":"method","name":"relationship","children":[],"call":["Relationship  new "," pn "]}," Axlsx Hyperlink relationship":{"type":"method","name":"relationship","children":[],"call":["Relationship  new "," href "]}," Axlsx Drawing child_objects":{"type":"method","name":"child_objects","children":[],"call":[" charts + + "," hyperlinks "," charts + "," images "," charts "]}," Axlsx Chart relationship":{"type":"method","name":"relationship","children":[],"call":["Relationship  new "," pn "]}," Axlsx Chart vary_colors=":{"type":"method","name":"vary_colors=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Bar3DChart shape":{"type":"method","name":"shape","children":[],"call":[]}," Axlsx Bar3DChart grouping":{"type":"method","name":"grouping","children":[],"call":[]}," Axlsx Bar3DChart gap_width":{"type":"method","name":"gap_width","children":[],"call":[]}," Axlsx Bar3DChart bar_dir":{"type":"method","name":"bar_dir","children":[],"call":[]}," Axlsx ValAxis cross_between=":{"type":"method","name":"cross_between=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx SerAxis tick_mark_skip=":{"type":"method","name":"tick_mark_skip=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx SerAxis tick_lbl_skip=":{"type":"method","name":"tick_lbl_skip=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx ScatterChart axes":{"type":"method","name":"axes","children":[],"call":["Axes  new "]}," Axlsx ScatterChart scatter_style=":{"type":"method","name":"scatter_style=","children":[],"call":["Axlsx  validate_scatter_style "]}," Axlsx ScatterChart y_val_axis":{"type":"method","name":"y_val_axis","children":[],"call":[" axes [] "," axes "]}," Axlsx ScatterChart x_val_axis":{"type":"method","name":"x_val_axis","children":[],"call":[" axes [] "," axes "]}," Axlsx LineSeries show_marker=":{"type":"method","name":"show_marker=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx LineChart axes":{"type":"method","name":"axes","children":[],"call":["Axes  new "]}," Axlsx LineChart to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":[" axes to_xml_string "," axes ","str_inner << << << ","str_inner << << "," node_name ","str_inner << "," block_given? ","@d_lbls to_xml_string ","ser to_xml_string ","@series each "," vary_colors to_s "," vary_colors "," grouping to_s "," grouping ","str << ","</c: << << ","</c: << ","<c:varyColors val=\" << << ","<c:varyColors val=\" << ","<c:grouping val=\" << << ","<c:grouping val=\" << ","<c: << << ","<c: << "]}," Axlsx LineChart node_name":{"type":"method","name":"node_name","children":[],"call":["path []= ","path [] chr downcase ","path [] chr ","path [] ","i + ","path rindex "," class to_s "," class ","path []  []= "," class to_s  []= ","path []  [] chr downcase "," class to_s  [] chr downcase ","path []  [] chr "," class to_s  [] chr ","path []  [] "," class to_s  [] ","path rindex  + ","path []  rindex "," class to_s  rindex ","path rpath rindex ndex "]}," Axlsx LineChart grouping=":{"type":"method","name":"grouping=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx LineChart initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx LineChart val_axis":{"type":"method","name":"val_axis","children":[],"call":[" axes [] "," axes "]}," Axlsx LineChart cat_axis":{"type":"method","name":"cat_axis","children":[],"call":[" axes [] "," axes "]}," Axlsx Line3DChart gap_depth=":{"type":"method","name":"gap_depth=","children":[],"call":["RegexValidator  validate "]}," Axlsx Line3DChart ser_axis":{"type":"method","name":"ser_axis","children":[],"call":[" axes [] "," axes "]}," Axlsx Bar3DChart axes":{"type":"method","name":"axes","children":[],"call":["Axes  new "]}," Axlsx Bar3DChart val_axis":{"type":"method","name":"val_axis","children":[],"call":[" axes [] "," axes "]}," Axlsx Bar3DChart cat_axis":{"type":"method","name":"cat_axis","children":[],"call":[" axes [] "," axes "]}," Axlsx Axis cross_axis=":{"type":"method","name":"cross_axis=","children":[],"call":["DataTypeValidator  validate "," class "]}," Axlsx Axes set_cross_axis":{"type":"method","name":"set_cross_axis","children":[],"call":["axis cross_axis= "," axes first [] "," axes first "," axes "," axes empty? "," axes first [] cross_axis= "," axes size == "," axes size "]}," Axlsx Axes axes":{"type":"method","name":"axes","children":[],"call":[]}," Axlsx Axes add_axis":{"type":"method","name":"add_axis","children":[],"call":[" axes << "," axes "," set_cross_axis ","axis_class new "," set_cross_axis_class new  ","axis_class new _class new "]}," Axlsx Axes to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["axis [] to_xml_string ","axis [] "," axes each "," axes ","string << << << ","string << << ","axis [] id to_s ","axis [] id ","string << "," axes inject ","options [] ","sorted inject ","axis kind_of? "," axes sort_by ","str << ","<c:axId val=\" << << ","<c:axId val=\" << ","sorted each "]}," Axlsx Axes []":{"type":"method","name":"[]","children":[],"call":[" axes assoc [] "," axes assoc "," axes "]}," Axlsx Axes initialize":{"type":"method","name":"initialize","children":[],"call":[" add_axis ","options each "," raise ","options keys first != ","options keys first ","options keys ","options keys include? "]}," Axlsx sanitize":{"type":"method","name":"sanitize","children":[],"call":[]}," Axlsx WorksheetComments drawing_rId":{"type":"method","name":"drawing_rId","children":[],"call":["(send\n  (send\n    (send nil :comments) :relationships) :find) Id ","r Type == ","r Type "," comments relationships find "," comments relationships "," comments "]}," Axlsx Worksheet xml_space":{"type":"method","name":"xml_space","children":[],"call":[" workbook xml_space "," workbook "]}," Axlsx Worksheet add_page_break":{"type":"method","name":"add_page_break","children":[],"call":[" row_breaks add_break "," row_breaks "," col_breaks add_break "," col_breaks ","column_index > ","cell pos ","Axlsx  name_to_indices ","cell is_a? ","DataTypeValidator  validate "]}," Axlsx Worksheet row_breaks":{"type":"method","name":"row_breaks","children":[],"call":["RowBreaks  new "]}," Axlsx Worksheet col_breaks":{"type":"method","name":"col_breaks","children":[],"call":["ColBreaks  new "]}," Axlsx RowBreaks to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","brk to_xml_string "," each ","str << << << << << ","str << << << << ","@list size to_s ","@list size ","str << << << ","str << << "," empty? ","<rowBreaks count=\" << << << << ","<rowBreaks count=\" << << << "," size to_s "," size ","<rowBreaks count=\" << << ","<rowBreaks count=\" << "]}," Axlsx RowBreaks add_break":{"type":"method","name":"add_break","children":[],"call":[" last ","@list << ","Break  new ","options merge "," << "]}," Axlsx RowBreaks initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx PivotTable data_refs":{"type":"method","name":"data_refs","children":[],"call":["hash [] "," data map "," data "]}," Axlsx PivotTable data_sheet":{"type":"method","name":"data_sheet","children":[],"call":[]}," Axlsx ColBreaks to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","brk to_xml_string "," each ","str << << << << << ","str << << << << ","@list size to_s ","@list size ","str << << << ","str << << "," empty? ","<colBreaks count=\" << << << << ","<colBreaks count=\" << << << "," size to_s "," size ","<colBreaks count=\" << << ","<colBreaks count=\" << "]}," Axlsx ColBreaks add_break":{"type":"method","name":"add_break","children":[],"call":[" last ","@list << ","Break  new ","options merge "," << "]}," Axlsx ColBreaks initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx Break to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "," serialized_tag "]}," Axlsx Break initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," parse_options "]}," Axlsx Workbook xml_space=":{"type":"method","name":"xml_space=","children":[],"call":["Axlsx RestrictionValidator  validate "]}," Axlsx Workbook xml_space":{"type":"method","name":"xml_space","children":[],"call":[]}," Axlsx validate_display_blanks_as":{"type":"method","name":"validate_display_blanks_as","children":[],"call":[]}," Axlsx SimpleTypedList transpose":{"type":"method","name":"transpose","children":[],"call":["result [] []= ","result [] "," block_given? ","@list [] cells [] ","@list [] cells ","@list [] ","@list [] cells size >= ","@list [] cells size ","max_column_count times ","row_count times ","Array  new ","(send\n  (ivar :@list) :map) max ","row cells size ","row cells ","@list map ","@list size ","@list clone ","@list size == ","(send\n  (ivar :@list) :map) max  times ","@list size  times "]}," Axlsx SerializedAttributes declared_attributes":{"type":"method","name":"declared_attributes","children":[],"call":[" class xml_attributes include? ","key to_sym "," class xml_attributes "," class ","value != "," instance_values select "," instance_values "]}," Axlsx Relationships for":{"type":"method","name":"for","children":[],"call":["rel source_obj == ","rel source_obj ","@list find "," find "]}," Axlsx Relationship should_use_same_id_as?":{"type":"method","name":"should_use_same_id_as?","children":[],"call":[" Target == ","other Target "," Target "," TargetMode == "," TargetMode ","other TargetMode "," Type == ","other Type "," Type "," source_obj == ","other source_obj "," source_obj "]}," Axlsx Relationship next_free_id":{"type":"method","name":"next_free_id","children":[],"call":["@instances size + ","@instances size "]}," Axlsx Relationship clear_cached_instances":{"type":"method","name":"clear_cached_instances","children":[],"call":[]}," Axlsx Relationship instances":{"type":"method","name":"instances","children":[],"call":[]}," Axlsx Package zip_entry_for_part":{"type":"method","name":"zip_entry_for_part","children":[],"call":["Zip ZipEntry  new ","part [] ","Zip DOSTime  at ","@core created to_i ","@core created ","Zip Entry  new "]}," Axlsx OneCellAnchor start_at":{"type":"method","name":"start_at","children":[],"call":[" from coord "," from "]}," Axlsx Marker parse_coord_args":{"type":"method","name":"parse_coord_args","children":[],"call":["x is_a? ","x pos ","Axlsx  name_to_indices "]}," Axlsx Chart display_blanks_as=":{"type":"method","name":"display_blanks_as=","children":[],"call":["Axlsx  validate_display_blanks_as "]}," Axlsx booleanize":{"type":"method","name":"booleanize","children":[],"call":[]}," Axlsx Worksheet add_autofilter_defined_name_to_workbook":{"type":"method","name":"add_autofilter_defined_name_to_workbook","children":[],"call":[" workbook add_defined_name "," index "," auto_filter defined_name "," auto_filter "," workbook "," auto_filter range ! "," auto_filter range "]}," Axlsx Worksheet to_sheet_node_xml_string":{"type":"method","name":"to_sheet_node_xml_string","children":[],"call":["str << ","r:id=\" << << ","r:id=\" << "," rId "," serialized_attributes "," add_autofilter_defined_name_to_workbook ","name=\" << << ","name=\" << "," name "]}," Axlsx Worksheet state":{"type":"method","name":"state","children":[],"call":[]}," Axlsx Worksheet state=":{"type":"method","name":"state=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx Row cells":{"type":"method","name":"cells","children":[],"call":[]}," Axlsx Row row_index":{"type":"method","name":"row_index","children":[],"call":[" worksheet rows index "," worksheet rows "," worksheet "]}," Axlsx RichTextRun xml_value":{"type":"method","name":"xml_value","children":[],"call":["(send\n  (lvar :value) :==\n  (true)) to_s ","value == "]}," Axlsx RichTextRun styles":{"type":"method","name":"styles","children":[],"call":[" cell row worksheet styles "," cell row worksheet "," cell row "," cell "]}," Axlsx RichTextRun style":{"type":"method","name":"style","children":[],"call":[" cell style "," cell "]}," Axlsx RichTextRun font_size":{"type":"method","name":"font_size","children":[],"call":["font sz ","font sz * ","font b "," styles fonts [] "," styles fonts "," styles "," styles cellXfs [] fontId "," styles cellXfs [] "," style "," styles cellXfs "," sz "]}," Axlsx RichTextRun string_width":{"type":"method","name":"string_width","children":[],"call":["string count * ","string count ","font_size / "]}," Axlsx RichTextRun to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","</rPr><t> << << ","</rPr><t> << "," CGI  escapeHTML ","Axlsx  sanitize ","@value to_s ","Axlsx  trust_input ","< << << << << ","< << << << "," xml_value ","data [] ","< << << ","< << ","key to_s ","data [] to_xml_string ","<rFont val=\" << << ","<rFont val=\" << "," font_name ","data keys each ","data keys ","value nil? ! ","value nil? ","valid include? ","data select ","Hash  [] ","k to_sym "," instance_values map "," instance_values ","Hash  []  [] ","Hash  []  [] to_xml_string ","Hash  []  keys each ","Hash  []  keys ","Hash  []  select "]}," Axlsx RichTextRun set_run_style":{"type":"method","name":"set_run_style","children":[],"call":[" instance_variable_set ","attr to_s ","Axlsx  send ","validator nil? ","INLINE_STYLES  include? ","attr to_sym "]}," Axlsx RichTextRun autowidth":{"type":"method","name":"autowidth","children":[],"call":[" string_width "," font_size "," value to_s "," value ","widtharray [] ","widtharray << "," value to_s split each "," value to_s split "," styles cellXfs [] alignment wrap_text "," styles cellXfs [] alignment "," styles cellXfs [] "," style "," styles cellXfs "," styles "," value nil? "]}," Axlsx RichTextRun style=":{"type":"method","name":"style=","children":[],"call":[" raise ","v < "," styles cellXfs size "," styles cellXfs "," styles ","Axlsx  validate_unsigned_int "]}," Axlsx RichTextRun scheme=":{"type":"method","name":"scheme=","children":[],"call":[" set_run_style ","RestrictionValidator  validate "]}," Axlsx RichTextRun vertAlign=":{"type":"method","name":"vertAlign=","children":[],"call":[" set_run_style ","RestrictionValidator  validate "]}," Axlsx RichTextRun sz=":{"type":"method","name":"sz=","children":[],"call":[" set_run_style "]}," Axlsx RichTextRun color=":{"type":"method","name":"color=","children":[],"call":["Color  new ","v is_a? "]}," Axlsx RichTextRun u=":{"type":"method","name":"u=","children":[],"call":[" set_run_style ","v == "]}," Axlsx RichTextRun extend=":{"type":"method","name":"extend=","children":[],"call":[" set_run_style "]}," Axlsx RichTextRun condense=":{"type":"method","name":"condense=","children":[],"call":[" set_run_style "]}," Axlsx RichTextRun shadow=":{"type":"method","name":"shadow=","children":[],"call":[" set_run_style "]}," Axlsx RichTextRun outline=":{"type":"method","name":"outline=","children":[],"call":[" set_run_style "]}," Axlsx RichTextRun strike=":{"type":"method","name":"strike=","children":[],"call":[" set_run_style "]}," Axlsx RichTextRun i=":{"type":"method","name":"i=","children":[],"call":[" set_run_style "]}," Axlsx RichTextRun b=":{"type":"method","name":"b=","children":[],"call":[" set_run_style "]}," Axlsx RichTextRun family=":{"type":"method","name":"family=","children":[],"call":[" set_run_style ","v to_i "]}," Axlsx RichTextRun charset=":{"type":"method","name":"charset=","children":[],"call":[" set_run_style "]}," Axlsx RichTextRun font_name=":{"type":"method","name":"font_name=","children":[],"call":[" set_run_style "]}," Axlsx RichTextRun value=":{"type":"method","name":"value=","children":[],"call":[]}," Axlsx RichTextRun initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "," value= "]}," Axlsx RichText to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["run to_xml_string "," each "]}," Axlsx RichText runs":{"type":"method","name":"runs","children":[],"call":[]}," Axlsx RichText add_run":{"type":"method","name":"add_run","children":[],"call":[" << ","RichTextRun  new "]}," Axlsx RichText autowidth":{"type":"method","name":"autowidth","children":[],"call":["widtharray max ","run autowidth "," each "]}," Axlsx RichText cell=":{"type":"method","name":"cell=","children":[],"call":["run cell= "," each "]}," Axlsx RichText initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," add_run ","text nil? "]}," Axlsx CellSerializer numeric":{"type":"method","name":"numeric","children":[],"call":[" value_serialization ","cell value "]}," Axlsx CellSerializer richtext":{"type":"method","name":"richtext","children":[],"call":[" value_serialization ","cell ssti "," inline_string_serialization ","cell ssti nil? "]}," Axlsx CellSerializer string":{"type":"method","name":"string","children":[],"call":[" inline_string_serialization "," value_serialization ","cell ssti ","cell ssti nil? ! ","cell ssti nil? "," formula_serialization ","cell is_formula? "," array_formula_serialization ","cell is_array_formula? "]}," Axlsx CellSerializer array_formula_serialization":{"type":"method","name":"array_formula_serialization","children":[],"call":["str << ","<v> << << ","<v> << ","cell formula_value to_s ","cell formula_value ","cell formula_value nil? ","t=\"str\"> << << << << << ","t=\"str\"> << << << << ","cell clean_value to_s sub sub ","cell clean_value to_s sub ","cell clean_value to_s ","cell clean_value ","t=\"str\"> << << << ","t=\"str\"> << << ","cell r ","t=\"str\"> << "]}," Axlsx CellSerializer integer":{"type":"method","name":"integer","children":[],"call":[" numeric "]}," Axlsx CellSerializer float":{"type":"method","name":"float","children":[],"call":[" numeric "]}," Axlsx CellSerializer boolean":{"type":"method","name":"boolean","children":[],"call":[" value_serialization ","cell value to_s ","cell value "]}," Axlsx CellSerializer time":{"type":"method","name":"time","children":[],"call":[" value_serialization ","DateTimeConverter  time_to_serial to_s ","DateTimeConverter  time_to_serial ","cell value "]}," Axlsx CellSerializer date":{"type":"method","name":"date","children":[],"call":[" value_serialization ","DateTimeConverter  date_to_serial to_s ","DateTimeConverter  date_to_serial ","cell value "]}," Axlsx CellSerializer iso_8601":{"type":"method","name":"iso_8601","children":[],"call":[" value_serialization ","cell value "]}," Axlsx Cell string_width":{"type":"method","name":"string_width","children":[],"call":["(send\n  (send\n    (send\n      (lvar :string) :to_s) :count\n    (const\n      (const nil :Worksheet) :THIN_CHARS)) :+\n  (float 3.0)) * ","font_size / ","string to_s count + ","string to_s count ","string to_s "]}," Axlsx Cell styles":{"type":"method","name":"styles","children":[],"call":[" row worksheet styles "," row worksheet "," row "]}," Axlsx Cell clean_value":{"type":"method","name":"clean_value","children":[],"call":["@value to_s ","Axlsx  sanitize "," CGI  escapeHTML ","Axlsx  trust_input ! ","Axlsx  trust_input "," type == "," type "]}," Axlsx Cell name=":{"type":"method","name":"name=","children":[],"call":[" row worksheet workbook add_defined_name "," r_abs "," row worksheet name "," row worksheet "," row "," row worksheet workbook "]}," Axlsx Cell is_array_formula?":{"type":"method","name":"is_array_formula?","children":[],"call":["@value to_s end_with? ","@value to_s ","@value to_s start_with? "," type == "," type "]}," Axlsx Cell contains_rich_text?":{"type":"method","name":"contains_rich_text?","children":[],"call":[" type == "," type "]}," Axlsx Cell type":{"type":"method","name":"type","children":[],"call":[]}," Axlsx Cell style":{"type":"method","name":"style","children":[],"call":[]}," Axlsx WorkbookViews to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","view to_xml_string "," each "," empty? "]}," Axlsx WorkbookViews initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx WorkbookView to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "]}," Axlsx WorkbookView initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," parse_options "]}," Axlsx Workbook add_view":{"type":"method","name":"add_view","children":[],"call":[" views << ","WorkbookView  new "," views "]}," Axlsx Workbook views":{"type":"method","name":"views","children":[],"call":["WorkbookViews  new "]}," Axlsx validate_view_visibility":{"type":"method","name":"validate_view_visibility","children":[],"call":[]}," String prepend":{"type":"method","name":"prepend","children":[],"call":[" insert "]}," Axlsx SimpleTypedList locked_at":{"type":"method","name":"locked_at","children":[],"call":[]}," Axlsx SerializedAttributes serialized_tag":{"type":"method","name":"serialized_tag","children":[],"call":["str << "," block_given? "," serialized_attributes "]}," Axlsx ScatterSeries smooth=":{"type":"method","name":"smooth=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx LineSeries smooth=":{"type":"method","name":"smooth=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Chart bg_color=":{"type":"method","name":"bg_color=","children":[],"call":["DataTypeValidator  validate ","Color  new "]}," Axlsx Chart legend_position=":{"type":"method","name":"legend_position=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx BubbleSeries to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["@bubbleSize to_xml_string ","@bubbleSize nil? ","@yData to_xml_string ","@yData nil? ","@xData to_xml_string ","@xData nil? ","str << ","<a:srgbClr val=\" << << ","<a:srgbClr val=\" << "," color "]}," Axlsx BubbleSeries color=":{"type":"method","name":"color=","children":[],"call":[]}," Axlsx BubbleSeries initialize":{"type":"method","name":"initialize","children":[],"call":["NumDataSource  new ","options [] ","options [] nil? ","AxDataSource  new "]}," Axlsx BubbleChart axes":{"type":"method","name":"axes","children":[],"call":["Axes  new "]}," Axlsx BubbleChart to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":[" axes to_xml_string "," axes ","str << "," d_lbls to_xml_string "," d_lbls ","ser to_xml_string ","@series each ","<c:varyColors val=\" << << ","<c:varyColors val=\" << "," vary_colors to_s "," vary_colors "]}," Axlsx BubbleChart initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx BubbleChart y_val_axis":{"type":"method","name":"y_val_axis","children":[],"call":[" axes [] "," axes "]}," Axlsx BubbleChart x_val_axis":{"type":"method","name":"x_val_axis","children":[],"call":[" axes [] "," axes "]}," Axlsx SheetPr tab_color=":{"type":"method","name":"tab_color=","children":[],"call":["Color  new "]}," Axlsx SheetPr outline_pr":{"type":"method","name":"outline_pr","children":[],"call":["OutlinePr  new "]}," Axlsx Row color=":{"type":"method","name":"color=","children":[],"call":["cell color= ","color [] ","color is_a? "," each_with_index "]}," Axlsx OutlinePr to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "]}," Axlsx OutlinePr initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx CellSerializer text":{"type":"method","name":"text","children":[],"call":[" value_serialization ","cell ssti "," inline_string_serialization ","cell ssti nil? "]}," Axlsx Workbook is_reversed=":{"type":"method","name":"is_reversed=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx validate_marker_symbol":{"type":"method","name":"validate_marker_symbol","children":[],"call":[]}," Axlsx MimeTypeUtils get_mime_type":{"type":"method","name":"get_mime_type","children":[],"call":[]}," Axlsx NumFmt serialized_attributes":{"type":"method","name":"serialized_attributes","children":[],"call":["str << ","Axlsx  booleanize ","Axlsx  camel ","attributes each "," declared_attributes merge! "," declared_attributes "," declared_attributes merge!  each "," declared_ declared_attributes merge!  merge! "," declared_ declared_attributes merge!  "]}," Axlsx Title text_size=":{"type":"method","name":"text_size=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx ScatterSeries ln_width=":{"type":"method","name":"ln_width=","children":[],"call":[]}," Axlsx LineSeries marker_symbol=":{"type":"method","name":"marker_symbol=","children":[],"call":["Axlsx  validate_marker_symbol "]}," Axlsx Chart title_size=":{"type":"method","name":"title_size=","children":[],"call":["@title text_size= ","v to_s empty? ","v to_s "]}," Axlsx BarChart axes":{"type":"method","name":"axes","children":[],"call":["Axes  new "]}," Axlsx BarChart to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":[" axes to_xml_string "," axes ","str << ","<c:shape val=\" << << ","<c:shape val=\" << ","@shape to_s ","@shape nil? ","<c:gapDepth val=\" << << ","<c:gapDepth val=\" << ","@gap_depth to_s ","@gap_depth nil? ","<c:gapWidth val=\" << << ","<c:gapWidth val=\" << ","@gap_width to_s ","@gap_width nil? ","@d_lbls to_xml_string ","ser to_xml_string ","@series each ","<c:varyColors val=\" << << ","<c:varyColors val=\" << "," vary_colors to_s "," vary_colors ","<c:grouping val=\" << << ","<c:grouping val=\" << "," grouping to_s "," grouping ","<c:barDir val=\" << << ","<c:barDir val=\" << "," bar_dir to_s "," bar_dir "]}," Axlsx BarChart shape=":{"type":"method","name":"shape=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx BarChart gap_depth=":{"type":"method","name":"gap_depth=","children":[],"call":["RegexValidator  validate "]}," Axlsx BarChart gap_width=":{"type":"method","name":"gap_width=","children":[],"call":["RegexValidator  validate "]}," Axlsx BarChart grouping=":{"type":"method","name":"grouping=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx BarChart bar_dir=":{"type":"method","name":"bar_dir=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx BarChart initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx BarChart shape":{"type":"method","name":"shape","children":[],"call":[]}," Axlsx BarChart grouping":{"type":"method","name":"grouping","children":[],"call":[]}," Axlsx BarChart gap_width":{"type":"method","name":"gap_width","children":[],"call":[]}," Axlsx BarChart bar_dir":{"type":"method","name":"bar_dir","children":[],"call":[]}," Axlsx BarChart val_axis":{"type":"method","name":"val_axis","children":[],"call":[" axes [] "," axes "]}," Axlsx BarChart cat_axis":{"type":"method","name":"cat_axis","children":[],"call":[" axes [] "," axes "]}," Axlsx AreaSeries labels=":{"type":"method","name":"labels=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx AreaSeries data=":{"type":"method","name":"data=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx AreaSeries to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","<c:smooth val=\" << << ","<c:smooth val=\" << "," smooth ","@data to_xml_string ","@data nil? ","@labels to_xml_string ","@labels nil? ","<c:marker><c:symbol val=\" + + ","<c:marker><c:symbol val=\" + ","@marker_symbol to_s ","@marker_symbol != ","@show_marker ! ","<a:srgbClr val=\" << << ","<a:srgbClr val=\" << "," color "]}," Axlsx AreaSeries smooth=":{"type":"method","name":"smooth=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx AreaSeries marker_symbol=":{"type":"method","name":"marker_symbol=","children":[],"call":["Axlsx  validate_marker_symbol "]}," Axlsx AreaSeries show_marker=":{"type":"method","name":"show_marker=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx AreaSeries color=":{"type":"method","name":"color=","children":[],"call":[]}," Axlsx AreaSeries initialize":{"type":"method","name":"initialize","children":[],"call":["NumDataSource  new ","options [] nil? ","options [] ","AxDataSource  new "]}," Axlsx AreaChart axes":{"type":"method","name":"axes","children":[],"call":["Axes  new "]}," Axlsx AreaChart to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":[" axes to_xml_string "," axes ","str << ","</c: << << ","</c: << "," node_name "," block_given? ","@d_lbls to_xml_string ","ser to_xml_string ","@series each ","<c:varyColors val=\" << << ","<c:varyColors val=\" << "," vary_colors to_s "," vary_colors ","<c:grouping val=\" << << ","<c:grouping val=\" << "," grouping to_s "," grouping ","<c: << << ","<c: << "]}," Axlsx AreaChart node_name":{"type":"method","name":"node_name","children":[],"call":["path []= ","path [] chr downcase ","path [] chr ","path [] ","i + ","path rindex "," class to_s "," class ","path []  []= "," class to_s  []= ","path []  [] chr downcase "," class to_s  [] chr downcase ","path []  [] chr "," class to_s  [] chr ","path []  [] "," class to_s  [] ","path rindex  + ","path []  rindex "," class to_s  rindex ","path rpath rindex ndex "]}," Axlsx AreaChart grouping=":{"type":"method","name":"grouping=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx AreaChart initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx AreaChart val_axis":{"type":"method","name":"val_axis","children":[],"call":[" axes [] "," axes "]}," Axlsx AreaChart cat_axis":{"type":"method","name":"cat_axis","children":[],"call":[" axes [] "," axes "]}}