{" Guard RSpec run_on_change":{"type":"method","name":"run_on_change","children":[],"call":["Runner  run ","paths empty? ","Inspector  clean "," options ","@options [] "," run_all ","paths uniq "," throw ","@runner run ","@inspector clean "," add_failed "," remove_failed ","Inspector  clean  empty? ","@inspector clean  empty? ","Inspector  clean  uniq ","@inspector clean  uniq "]}," Guard RSpec run_all":{"type":"method","name":"run_all","children":[],"call":["Runner  run "," options merge "," options ","passed ! "," options merge merge "," options [] "," throw ","@runner run ","@options [] merge ","@options [] ","@inspector spec_paths "," runner run_all "," runner "," _throw_if_failed ","Runner  run  ! ","@runner run  ! "]}," Guard RSpec start":{"type":"method","name":"start","children":[],"call":["Runner  set_rspec_version "," options "," run_all ","@options [] ","UI  info ","Runner  rspec_version ","@runner rspec_version "," options [] "," Guard UI  info ","Guard Compat UI  info ","Compat UI  info "]}," Guard RSpec Runner determine_rspec_version":{"type":"method","name":"determine_rspec_version","children":[],"call":["(str \"bundle show rspec\") include? ","ENV  []= ","Dir  pwd "," bundler? ","File  new read include? ","File  new read ","File  new ","File  exist? ","UI  info "," bundler_allowed? "," Integer "," RSpec Core Version STRING  split first "," RSpec Core Version STRING  split "]}," Guard RSpec Runner bundler?":{"type":"method","name":"bundler?","children":[],"call":["File  exist? ","Dir  pwd ","@options [] "," bundler_allowed? ","@bundler nil? "]}," Guard RSpec Runner rspec_command":{"type":"method","name":"rspec_command","children":[],"call":["cmd_parts join ","cmd_parts << ","paths join ","File  dirname "," rspec_version "," bundler? ","options [] != ","options [] ","options [] == ","options [] join ","options [] is_a? ","formatter capitalize "," rspec_version == "," rspec_exec "," rspec_exec downcase ","(str \"-f\") include? ","options [] split any? ","options [] split "," warn_deprectation ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :cli)) :split\n    (str \" \")) :any?) ! ","options [] nil? "," failure_exit_code "," failure_exit_code_supported? "," rspec_class "," rspec_class downcase ","(str \"-f\") grep ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :cli)) :split\n    (regexp\n      (str \"[\\\\s=]\")\n      (regopt))) :any?) ! ","cmd_parts compact join ","cmd_parts compact "," rspec_arguments "," rspec_executable ","@options [] join ","@options [] ","@options [] respond_to? "," bundle_exec? "," environment_variables "," zeus? "," executable_prefix "," executable_prefix? "," parallel_rspec_arguments "," parallel? "," parallel? ! "," bin_command "," foreman? ","options [] respond_to? "]}," Guard RSpec Runner set_rspec_version":{"type":"method","name":"set_rspec_version","children":[],"call":[" determine_rspec_version ","options [] "]}," Guard RSpec Runner run":{"type":"method","name":"run","children":[],"call":[" system "," rspec_command ","UI  info ","paths join ","options [] ","paths empty? ","Notifier  notify ","$? success? ","$? exitstatus != "," failure_exit_code ","$? exitstatus ","$? success? ! "," failure_exit_code_supported? "," drb? ! "," drb? ","options [] != "," run_via_shell "," run_via_drb "," drb_used? ","@options merge "," _run "," options "," inspector paths "," inspector "," inspector failed_paths "," Guard UI  info ","Compat UI  info "," run_all "," options [] "," inspector paths  join ","@options merge  [] "," inspector paths  empty? ","@options merge  [] != ","@@options merge  merge "," @options merge  "," inspector  inspector paths  "," inspector failed_ inspector paths  "," inspector  inspector failed_paths  "," @options merge  [] "]}," Guard RSpec Inspector included_in_other_path?":{"type":"method","name":"included_in_other_path?","children":[],"call":["(send\n  (lvar :path) :gsub\n  (lvar :p)\n  (str \"\")) include? ","path gsub ","path include? ","paths any? ","p != ","paths select ","path sub include? ","path sub ","(send\n  (lvar :paths) :-\n  (array\n    (lvar :path))) any? ","paths - "]}," Guard RSpec Inspector clear_spec_files_list":{"type":"method","name":"clear_spec_files_list","children":[],"call":[]}," Guard RSpec Inspector spec_files":{"type":"method","name":"spec_files","children":[],"call":["Dir  glob ","Dir  [] ","(send\n  (send nil :spec_paths) :collect) flatten ","File  join "," spec_paths collect "," spec_paths "]}," Guard RSpec Inspector spec_file?":{"type":"method","name":"spec_file?","children":[],"call":[" spec_files include? "," spec_files "]}," Guard RSpec Inspector spec_folder?":{"type":"method","name":"spec_folder?","children":[],"call":["path match ! ","path match "," spec_paths join "," spec_paths "]}," Guard RSpec Inspector clean":{"type":"method","name":"clean","children":[],"call":[" clear_spec_files_list "," included_in_other_path? ","paths delete_if "," spec_folder? "," spec_file? ","paths select ","paths compact! ","paths uniq! ","paths reject "," clear_spec_files_list_after "," should_run_spec_file? "]}," SpecNotify dump_summary":{"type":"method","name":"dump_summary","children":[],"call":[" notify "," guard_image "," guard_message "," guard_ guard_image  "," guard_ guard_message  "]}," RSpecNotify dump_summary":{"type":"method","name":"dump_summary","children":[],"call":[" notify "," guard_image "," guard_message "," guard_ guard_image  "," guard_ guard_message  "]}," Formatter notify":{"type":"method","name":"notify","children":[],"call":["Guard Notifier  notify "," priority "]}," Formatter guard_image":{"type":"method","name":"guard_image","children":[],"call":["pending_count > ","failure_count > "]}," Formatter guard_message":{"type":"method","name":"guard_message","children":[],"call":["message << ","pending_count > "," round_float "]}," RSpec2 dump_summary":{"type":"method","name":"dump_summary","children":[],"call":[" notify "," guard_image "," guard_message "," guard_ guard_image  "," guard_ guard_message  "]}," RSpec1 dump_summary":{"type":"method","name":"dump_summary","children":[],"call":[" notify "," guard_image "," guard_message "," guard_ guard_image  "," guard_ guard_message  "]}," Guard RSpec initialize":{"type":"method","name":"initialize","children":[],"call":["Runner  set_rspec_version ","UI  info ","(pair\n  (sym :all_after_pass)\n  (true)) update ","Inspector  excluded= ","options [] ","Inspector  spec_paths= ","@options [] ","@inspector spec_paths= ","@inspector excluded= ","@runner set_rspec_version ","Inspector  new ","Runner  new ","(pair\n  (sym :all_after_pass)\n  (true)) merge ","(pair\n  (sym :focus_on_failed)\n  (false)) merge ","Deprecator  warns_about_deprecated_options ","(pair\n  (sym :all_on_start)\n  (false)) merge ","Options  with_defaults ","(pair\n  (sym :all_after_pass)\n  (true)) update  [] ","(pair\n  (sym :all_after_pass)\n  (true)) merge  [] ","(pair\n  (sym :focus_on_failed)\n  (false)) merge  [] ","(pair\n  (sym :all_on_start)\n  (false)) merge  [] ","Options  with_defaults  [] ","Inspector  new  spec_paths= ","Inspector  new  excluded= ","Runner  new  set_rspec_version "]}," Instafail example_failed":{"type":"method","name":"example_failed","children":[],"call":[" output flush "," output "," output puts "," grey "," format_backtrace each "," format_backtrace ","exception backtrace "," red "," read_failed_line strip "," read_failed_line ","example full_description ","example metadata [] [] ","example metadata [] ","example metadata "," insta_gray ","backtrace_info strip ","failure exception backtrace ","failure exception ","example description "," example_group description "," example_group ","example metadata [] []  backtrace ","failure example metadata [] []  backtrace ","failure example metadata [] []  "]}," Instafail dump_summary":{"type":"method","name":"dump_summary","children":[],"call":[" notify "," guard_image "," guard_message "," guard_ guard_image  "," guard_ guard_message  "]}," Instafail insta_gray":{"type":"method","name":"insta_gray","children":[],"call":[" colour "]}," Default dump_summary":{"type":"method","name":"dump_summary","children":[],"call":[" notify "," guard_image "," guard_message "," guard_ guard_image  "," guard_ guard_message  "]}," InstafailSpec insta_gray":{"type":"method","name":"insta_gray","children":[],"call":[" colour "]}," InstafailSpec example_failed":{"type":"method","name":"example_failed","children":[],"call":[" output flush "," output "," output puts "," insta_gray ","backtrace_info strip "," format_backtrace each "," format_backtrace ","failure exception backtrace ","failure exception "," red ","example description "," example_group description "," example_group "]}," InstafailSpec dump_summary":{"type":"method","name":"dump_summary","children":[],"call":[" notify "," guard_image "," guard_message "," guard_ guard_image  "," guard_ guard_message  "]}," InstafailRSpec example_failed":{"type":"method","name":"example_failed","children":[],"call":[" output flush "," output "," output puts "," grey "," format_backtrace each "," format_backtrace ","exception backtrace "," red "," read_failed_line strip "," read_failed_line ","example full_description ","example metadata [] [] ","example metadata [] ","example metadata ","result [] ","example metadata [] []  backtrace ","example metadata []  [] "]}," InstafailRSpec dump_summary":{"type":"method","name":"dump_summary","children":[],"call":[" notify "," guard_image "," guard_message "," guard_ guard_image  "," guard_ guard_message  "]}," DefaultSpec dump_summary":{"type":"method","name":"dump_summary","children":[],"call":[" notify "," guard_image "," guard_message "," guard_ guard_image  "," guard_ guard_message  "]}," DefaultRSpec dump_summary":{"type":"method","name":"dump_summary","children":[],"call":[" notify "," guard_image "," guard_message "," guard_ guard_image  "," guard_ guard_message  "]}," Guard RSpec Runner warn_deprectation":{"type":"method","name":"warn_deprectation","children":[],"call":["UI  info ","options key? ","option to_s gsub ","option to_s ","option is_a? ","(sym :color) each "]}," Guard RSpec Runner rspec_exec":{"type":"method","name":"rspec_exec","children":[],"call":[" rspec_version ","options [] != ","options [] ","options [] == "]}," Guard RSpec Inspector clear_spec_files_list_after":{"type":"method","name":"clear_spec_files_list_after","children":[],"call":[]}," NotificationSpec dump_summary":{"type":"method","name":"dump_summary","children":[],"call":[" notify "," guard_image "," guard_message "," guard_ guard_image  "," guard_ guard_message  "]}," NotificationRSpec dump_summary":{"type":"method","name":"dump_summary","children":[],"call":[" notify "," guard_image "," guard_message "," guard_ guard_image  "," guard_ guard_message  "]}," Formatter round_float":{"type":"method","name":"round_float","children":[],"call":["float round ","(send\n  (lvar :float) :*\n  (lvar :factor)) round / ","factor to_f ","(send\n  (lvar :float) :*\n  (lvar :factor)) round ","float * ","10 ** ","Float  instance_method arity == ","Float  instance_method arity ","Float  instance_method ","(send\n  (lvar :float) :*\n  (lvar :10 ** )) round / ","10 **  to_f ","(send\n  (lvar :float) :*\n  (lvar :10 ** )) round "]}," Guard RSpec reload":{"type":"method","name":"reload","children":[],"call":[" runner reload "," runner "]}," Guard RSpec Inspector should_run_spec_file?":{"type":"method","name":"should_run_spec_file?","children":[],"call":[" excluded include? ! "," excluded include? "," excluded "," spec_folder? "," spec_file? "," feature_file? "]}," Guard RSpec Inspector excluded=":{"type":"method","name":"excluded=","children":[],"call":["Dir  [] ","glob to_s ","pattern to_s "]}," Guard RSpec Inspector excluded":{"type":"method","name":"excluded","children":[],"call":[]}," Formatter priority":{"type":"method","name":"priority","children":[],"call":["(pair\n  (sym :failed)\n  (int 2)) [] "]}," Guard RSpec Inspector spec_paths=":{"type":"method","name":"spec_paths=","children":[],"call":[" Array "]}," Guard RSpec Inspector spec_paths":{"type":"method","name":"spec_paths","children":[],"call":[]}," Guard RSpec Runner rspec_class":{"type":"method","name":"rspec_class","children":[],"call":[" rspec_version "]}," Guard RSpec Runner failure_exit_code":{"type":"method","name":"failure_exit_code","children":[],"call":[]}," Guard RSpec Runner failure_exit_code_supported?":{"type":"method","name":"failure_exit_code_supported?","children":[],"call":["(begin\n  (send\n    (lvar :cmd_parts) :join\n    (str \" \"))) include? ","cmd_parts join ","cmd_parts << ","options []= "," rspec_exec ","options [] is_a? ","options [] "," bundler? "," rspec_exec downcase ","options [] != ","$stdout puts ","options [] == "," rspec_executable "," bundle_exec? "]}," Guard RSpec Runner drb?":{"type":"method","name":"drb?","children":[],"call":["options [] include? ","options [] ","options [] nil? ! ","options [] nil? "]}," Guard RSpec Inspector feature_files":{"type":"method","name":"feature_files","children":[],"call":["(send\n  (send nil :spec_paths) :collect) flatten ","Dir  [] ","File  join "," spec_paths collect "," spec_paths "]}," Guard RSpec Inspector feature_file?":{"type":"method","name":"feature_file?","children":[],"call":[" feature_files include? "," feature_files "]}," Guard RSpec add_failed":{"type":"method","name":"add_failed","children":[],"call":["@options [] ","@failed_paths uniq! "]}," Guard RSpec remove_failed":{"type":"method","name":"remove_failed","children":[],"call":["@options [] "]}," Guard RSpec Runner deprecations_warnings":{"type":"method","name":"deprecations_warnings","children":[],"call":["UI  info ","@options delete ","@options key? ","option to_s ","option is_a? ","(sym :color) each "," options key? "," options "]}," Guard RSpec Runner binstubs?":{"type":"method","name":"binstubs?","children":[],"call":["@options [] "," bundler? ","@binstubs nil? ","@options [] ! ! ","@options [] ! ","@options [] ! !  nil? "]}," Guard RSpec Runner bundler_allowed?":{"type":"method","name":"bundler_allowed?","children":[],"call":["File  exist? ","Dir  pwd ","@bundler_allowed nil? "," spring? ! "," spring? "," zeus? ! "," zeus? ","File  exist?  nil? "]}," Guard RSpec Runner drb_service":{"type":"method","name":"drb_service","children":[],"call":["DRbObject  new_with_uri ","@drb_services [] ","port to_i ","DRb  start_service "," require "]}," Guard RSpec Runner drb_used?":{"type":"method","name":"drb_used?","children":[],"call":["@options [] include? ","@options [] ","@drb_used nil? "," options [] include? "," options [] "," options "]}," Guard RSpec Runner run_via_drb":{"type":"method","name":"run_via_drb","children":[],"call":[" run_via_shell ","ret == "," drb_service run "," drb_service ","port to_i ","ENV  [] ","port > ","argv [] to_i ","argv [] ","idx + ","argv index "," rspec_arguments shellsplit "," rspec_arguments "," require ","(int 0) include? "," drb_service run  == ","argv [] to_i  to_i ","argv [] to_i  > "," rspec_arguments shellsplit  [] to_i "," rspec_arguments shellsplit  [] ","argv index  + "," rspec_arguments shellsplit  index "]}," Guard RSpec Runner rspec_command_exited_with_an_exception?":{"type":"method","name":"rspec_command_exited_with_an_exception?","children":[],"call":["$? exitstatus != ","$? exitstatus "," failure_exit_code_supported? ","$? zero? ! ","$? zero? "]}," Guard RSpec Runner run_via_shell":{"type":"method","name":"run_via_shell","children":[],"call":["Notifier  notify "," rspec_command_exited_with_an_exception? ","success ! "," drb_used? ! "," drb_used? ","@options [] "," system "," rspec_command ","options [] ","Launchy  open ","pn exist? ","Pathname  new "," require "," system  ! ","Pathname  new  exist? "]}," Guard RSpec Runner rspec_arguments":{"type":"method","name":"rspec_arguments","children":[],"call":["arg_parts compact join ","arg_parts compact ","arg_parts << ","paths join "," failure_exit_code_supported? "," rspec_version == "," rspec_version "," rspec_class "," rspec_class downcase ","File  dirname ","@options [] ","(str \"-f\") include? ","options [] split none? ","options [] split ","options [] ","options [] ! "," default_formatter ","options [] =~ "," formatter_regex "," parsed_or_default_formatter "," formatter_arg ","lib_guard + "," Pathname dirname dirname "," Pathname dirname "," Pathname "," fail "," rspec_version inspect "," zeus_guard_env_file path "," zeus_guard_env_file "," zeus? "," Pathname dirname dirname  + "]}," Guard RSpec Runner rspec_executable":{"type":"method","name":"rspec_executable","children":[],"call":[" binstubs? "," rspec_class downcase "," rspec_class "," binstubs "," executable_prefix? ! "," executable_prefix? "," parallel? ","  rspec_class downcase utable_prefix? ! ","  rspec_class downcase utable_prefix? "]}," Guard RSpec Runner rspec_version":{"type":"method","name":"rspec_version","children":[],"call":[" determine_rspec_version ","@options [] "]}," Guard RSpec Runner initialize":{"type":"method","name":"initialize","children":[],"call":[" deprecations_warnings ","(pair\n  (sym :bundler)\n  (true)) merge ","UI  warning ","ENV  [] nil? ","ENV  [] ","@options [] ! ","@options [] ","options [] ","options [] ! ","Inspector  new ","(pair\n  (sym :all_after_pass)\n  (false)) merge ","Notifier  new ","Inspectors Factory  create ","(pair\n  (sym :bundler)\n  (true)) merge  [] ! ","(pair\n  (sym :all_after_pass)\n  (false)) merge  [] ! ","(pair\n  (sym :bundler)\n  (true)) merge  [] ","(pair\n  (sym :all_after_pass)\n  (false)) merge  [] "]}," Guard RSpec Inspector initialize":{"type":"method","name":"initialize","children":[],"call":[" spec_paths= ","options [] "," excluded= ","options fetch ","@options [] ","(pair\n  (sym :focus_on_failed)\n  (true)) merge ","(pair\n  (sym :focus_on_failed)\n  (true)) merge  [] "]}," Guard RSpec Runner formatter_regex":{"type":"method","name":"formatter_regex","children":[],"call":[]}," Guard RSpec Runner default_formatter":{"type":"method","name":"default_formatter","children":[],"call":["(send\n  (send\n    (send\n      (lvar :s) :scan\n      (send nil :formatter_regex)) :flatten) :map) join ","s scan flatten map ","s scan flatten ","s scan "," formatter_regex ","File  read ","File  exist? ","Dir  pwd ","@options [] =~ ","@options [] ","(File  read end\n  (File  read end\n    (File  read end\n      (lvar :File  read ) :File  read can\n      (File  read end nil :formatter_regex)) :flatten) :map) join ","File  read  File  read can flatten map ","File  read  File  read can flatten ","File  read  File  read can ","File  exiFile  read t? ","@optionFile  read  [] =~ ","@optionFile  read  [] "]}," Guard RSpec Runner parsed_or_default_formatter":{"type":"method","name":"parsed_or_default_formatter","children":[],"call":["parsed_formatter empty? ","parsed_formatter nil? ","(send\n  (lvar :formatters) :map) join ","formatters map ","File  read scan flatten ","File  read scan "," formatter_regex ","File  read ","File  exist? ","Dir  pwd ","formatter join ","formatters empty? ","formatters nil? "," RSpec Core ConfigurationOptions  new parse_options [] "," RSpec Core ConfigurationOptions  new parse_options "," RSpec Core ConfigurationOptions  new ","(send\n  (lvar :File  read scan flatten ) :map) join ","(send\n  (lvar : RSpec Core ConfigurationOptions  new parse_options [] ) :map) join ","File  read scan flatten  map "," RSpec Core ConfigurationOptions  new parse_options []  map ","File  read scan flatten  empty? "," RSpec Core ConfigurationOptions  new parse_options []  empty? ","File  read scan flatten  nil? "," RSpec Core ConfigurationOptions  new parse_options []  nil? "]}," Guard RSpec run":{"type":"method","name":"run","children":[],"call":[]}," Guard RSpec run_on_changes":{"type":"method","name":"run_on_changes","children":[],"call":[" throw "," add_failed "," run_all ","@options [] "," remove_failed ","@runner run ","@inspector clean "," last_failed "," failed_paths ","paths [] ","File  delete ","file read split ","file read ","File  open ","File  exist? ","failed_specs [] ","failed_specs any? ","p include? ","failed_specs select ","paths [] include? ","paths length == ","paths length "," run_on_changes ","@inspector clean uniq ","p split [] ","p split ","paths map ","paths dup ","failed_specs length > ","failed_specs length ","@inspector clean length == ","@inspector clean length "," failed_@inspector clean  "," failed_paths []  "," failed_failed_specs []  "," failed_@inspector clean uniq  ","@inspector clean  [] ","paths []  [] ","failed_specs []  [] ","@inspector clean uniq  [] ","@inspector clean  [] include? ","paths []  [] include? ","failed_specs []  [] include? ","@inspector clean uniq  [] include? ","@inspector clean  length == ","paths []  length == ","failed_specs []  length == ","@inspector clean uniq  length == ","@inspector clean  length ","paths []  length ","failed_specs []  length ","@inspector clean uniq  length ","@inspector clean  map ","paths []  map ","failed_specs []  map ","@inspector clean uniq  map ","@inspector clean  dup ","paths []  dup ","failed_specs []  dup ","@inspector clean uniq  dup "]}," Guard RSpec Runner bundle_exec?":{"type":"method","name":"bundle_exec?","children":[],"call":[" binstubs? ! "," binstubs? "," bundler? "]}," Guard RSpec Runner binstubs":{"type":"method","name":"binstubs","children":[],"call":["@options [] ","@options [] == "," options [] "," options "," options [] == "]}," Guard RSpecFormatter _status_failed?":{"type":"method","name":"_status_failed?","children":[],"call":["example execution_result [] to_s == ","example execution_result [] to_s ","example execution_result [] ","example execution_result ","example execution_result status to_s == ","example execution_result status to_s ","example execution_result status "," class rspec_3? "," class "]}," Guard RSpecFormatter _message":{"type":"method","name":"_message","children":[],"call":["message << ","duration round ","pending_count > "]}," Guard RSpecFormatter _failed_paths":{"type":"method","name":"_failed_paths","children":[],"call":["(send\n  (lvar :failed) :map) sort uniq ","(send\n  (lvar :failed) :map) sort ","klass extract_spec_location ","e metadata ","failed map "," _status_failed? "," examples select "," examples "," class ","e execution_result [] to_s == ","e execution_result [] to_s ","e execution_result [] ","e execution_result "," class  extract_spec_location "]}," Guard RSpecFormatter _write":{"type":"method","name":"_write","children":[],"call":["File  open ","FileUtils  mkdir_p ","File  dirname ","File  expand_path "," _results_file ","Guard Compat UI  debug "," format ","file inspect ","Guard  const_defined? ","RSpecFormatterResultsPath  new path ","RSpecFormatterResultsPath  new ","STDERR  puts ","ENV  [] == ","ENV  [] "," _results_File  expand_path  "," _results_ _results_file  "," _results_RSpecFormatterResultsPath  new path  ","File  expand_path  inspect "," _results_file  inspect ","RSpecFormatterResultsPath  new path  inspect "]}," Guard RSpecFormatter write_summary":{"type":"method","name":"write_summary","children":[],"call":["f puts "," _failed_paths join "," _failed_paths ","failures > "," _message "," _write "]}," Guard RSpecFormatter dump_summary":{"type":"method","name":"dump_summary","children":[],"call":[" write_summary ","notification pending_count ","notification failure_count ","notification example_count ","notification duration ","args [] "," class rspec_3? "," class ","args []  pending_count ","args []  failure_count ","args []  example_count ","args []  duration "]}," Guard RSpecFormatter spec_path?":{"type":"method","name":"spec_path?","children":[],"call":["File  fnmatch ","pattern gsub ","Pathname  new cleanpath to_s ","Pathname  new cleanpath ","Pathname  new ","path sub "," supported_fnmatch_flags "," RSpec  configuration pattern "," RSpec  configuration "," RSpec  configuration pattern  gsub ","Pathname  new cleanPathname  new cleanpath to_s  to_s ","Pathname  new cleanpath sub  to_s ","Pathname  new cleanPathname  new cleanpath to_s  ","Pathname  new cleanpath sub  ","Pathname  new cleanpath to_s  sub ","path sub  sub "," supported_fnmatch_ supported_fnmatch_flags  "," RSpec  configuration  RSpec  configuration pattern  "]}," Guard RSpecFormatter extract_spec_location":{"type":"method","name":"extract_spec_location","children":[],"call":[" first_colon_separated_entry ","metadata [] ","root_metadata [] ","STDERR  puts ","root_metadata inspect "," spec_path? "," _extract_group "," _extract_group  [] ","root_ _extract_group  [] ","root_ _extract_group  inspect "]}," Guard RSpecFormatter examples":{"type":"method","name":"examples","children":[],"call":[]}," Guard RSpecFormatter example_failed":{"type":"method","name":"example_failed","children":[],"call":[" examples push ","failure example "," examples "]}," Guard RSpecFormatter rspec_3?":{"type":"method","name":"rspec_3?","children":[],"call":[]}," Guard RSpec Runner formatter_arg":{"type":"method","name":"formatter_arg","children":[],"call":[" rspec_version "]}," Guard RSpec Runner environment_variables":{"type":"method","name":"environment_variables","children":[],"call":["export  + + ","export  + ","(send\n  (send\n    (ivar :@options) :[]\n    (sym :env)) :map) join ","@options [] map ","@options [] ","@options [] nil? ","(send\n  (send\n    (send nil :options) :[]\n    (sym :env)) :map) join "," options [] map "," options [] "," options "," options [] nil? "]}," Formatter dump_summary":{"type":"method","name":"dump_summary","children":[],"call":[" notify "," guard_image "," guard_message ","f puts ","failed_specs join ","File  open ","FileUtils  mkdir_p ","s metadata [] ","s metadata ","(send\n  (send nil :examples) :keep_if) map ","e execution_result [] == ","e execution_result [] ","e execution_result "," examples keep_if "," examples ","(send\n  (send nil :examples) :delete_if) map ","e execution_result [] != "," examples delete_if "," guard_ guard_image  "," guard_ guard_message  "]}," Guard RSpec Runner zeus?":{"type":"method","name":"zeus?","children":[],"call":["@options [] "," options fetch "," options "]}," Guard RSpec Runner spring?":{"type":"method","name":"spring?","children":[],"call":["@options [] "," options fetch "," options "]}," Guard RSpec Runner executable_prefix":{"type":"method","name":"executable_prefix","children":[],"call":["prefix << "," spring? "," zeus? "," binstubs "," binstubs? "," parallel? ! "," parallel? "," bin_command "]}," Guard RSpec Runner executable_prefix?":{"type":"method","name":"executable_prefix?","children":[],"call":[" spring? "," zeus? "," foreman? "]}," Guard RSpec Runner parallel?":{"type":"method","name":"parallel?","children":[],"call":["@options [] "," options fetch "," options ","runtime_options [] "]}," Guard RSpec Runner parallel_rspec_arguments":{"type":"method","name":"parallel_rspec_arguments","children":[],"call":["arg_parts compact join ","arg_parts compact ","arg_parts << ","paths join "," failure_exit_code_supported? ","File  dirname "," parsed_or_default_formatter ","options [] =~ "," formatter_regex ","options [] ","@options [] "," rspec_arguments strip "," rspec_arguments "]}," Guard RSpec Runner bin_command":{"type":"method","name":"bin_command","children":[],"call":[" binstubs "," binstubs? "]}," Guard RSpec Runner foreman?":{"type":"method","name":"foreman?","children":[],"call":[" options fetch "," options "]}," Guard RSpec Runner zeus_guard_env_file":{"type":"method","name":"zeus_guard_env_file","children":[],"call":["@zeus_guard_env_file close ","@zeus_guard_env_file puts ","ENV  [] inspect ","ENV  [] ","Tempfile  new ","Tempfile  new  close ","Tempfile  new  puts "]}," Guard RSpec _throw_if_failed":{"type":"method","name":"_throw_if_failed","children":[],"call":[" throw "]}," Guard RSpec run_on_modifications":{"type":"method","name":"run_on_modifications","children":[],"call":[" runner run "," runner "," _throw_if_failed ","paths empty? "]}," Guard RSpec Runner _run_all_after_pass":{"type":"method","name":"_run_all_after_pass","children":[],"call":[" run_all ","failed_paths empty? ! ","failed_paths empty? "," options [] "," options "]}," Guard RSpec Runner _open_launchy":{"type":"method","name":"_open_launchy","children":[],"call":["Launchy  open "," options [] "," options ","pn exist? ","Pathname  new "," require "," Launchy  open ","Pathname  new  exist? "]}," Guard RSpec Runner command_exception?":{"type":"method","name":"command_exception?","children":[],"call":["$? exitstatus != ","$? exitstatus "]}," Guard RSpec Runner _notify_failure":{"type":"method","name":"_notify_failure","children":[],"call":["Notifier  notify "," command_exception? "," options [] "," options "," Guard Notifier  notify "]}," Guard RSpec Runner _without_bundler_env":{"type":"method","name":"_without_bundler_env","children":[],"call":["Bundler  with_clean_env "," Bundler  with_clean_env "]}," Guard RSpec Runner _run":{"type":"method","name":"_run","children":[],"call":[" _run_all_after_pass "," _open_launchy "," _notify_failure "," inspector clear_paths "," inspector ","(send nil :_without_bundler_env) tap ","Kernel  system "," _without_bundler_env ","Command  new "," notifier notify_failure "," notifier ","all ! "," notifier notify "," inspector failed "," _command_output "," _command_success? "," _cmd_option_present "," _process_run_result ","Compat UI  error ","ex to_s "," _really_run "," fail ","options [] "," raise "," _Command  new _output "," _Command  new _success? "]}," Guard RSpec Runner reload":{"type":"method","name":"reload","children":[],"call":[" inspector clear_paths "," inspector "," inspector reload "]}," Guard RSpec Runner run_all":{"type":"method","name":"run_all","children":[],"call":[" _run "," inspector paths "," inspector ","UI  info ","options [] ","@options merge ","@options [] "," Guard UI  info ","paths empty? ","@options merge freeze "," options [] "," options ","Compat UI  info "," inspector  options []  ","@options merge  [] ","@options merge freeze  [] ","@@options merge  merge ","@@options merge freeze  merge ","@@options merge  [] ","@@options merge freeze  [] "," options []  empty? ","@@options merge  merge freeze ","@@options merge freeze  merge freeze "," @options merge  [] "," @options merge freeze  [] "," @options merge  "," @options merge freeze  "]}," Guard RSpec Inspector _select_only_spec_files":{"type":"method","name":"_select_only_spec_files","children":[],"call":["files include? ","paths select ","(send\n  (lvar :spec_files) :+\n  (lvar :feature_files)) flatten ","spec_files + ","Dir  [] ","File  join "," spec_paths collect "," spec_paths "," spec_paths include? ","(send\n  (lvar :spec_files) :+\n  (lvar :feature_files)) flatten  include? ","(send\n  (lvar :spec_(send\n  (lvar :spec_files) :+\n  (lvar :feature_files)) flatten ) :+\n  (lvar :feature_(send\n  (lvar :spec_files) :+\n  (lvar :feature_files)) flatten )) flatten ","spec_(send\n  (lvar :spec_files) :+\n  (lvar :feature_files)) flatten  + "]}," Guard RSpec Inspector _clean":{"type":"method","name":"_clean","children":[],"call":[" _select_only_spec_files ","paths compact! ","paths uniq! ","spec_dirs + "," _select_only_spec_dirs "," _select_only_ _select_only_spec_files  "," _select_only_spec_files  compact! ","spec_dirs +  compact! "," _select_only_spec_files  uniq! ","spec_dirs +  uniq! "," _select_only_spec_dirs  + "," _select_only_ _select_only_spec_dirs  "]}," Guard RSpec Inspector _focused_paths":{"type":"method","name":"_focused_paths","children":[],"call":["File  delete ","File  exist? ","File  open read split [] ","File  open read split ","File  open read ","File  open "," options [] "," options ","f read split [] ","f read split ","f read "]}," Guard RSpec Inspector _paths":{"type":"method","name":"_paths","children":[],"call":[" _clean "," options [] "," options "," _focused_paths "]}," Guard RSpec Inspector clear_paths":{"type":"method","name":"clear_paths","children":[],"call":["@failed_paths clear "]}," Guard RSpec Inspector paths":{"type":"method","name":"paths","children":[],"call":[" spec_paths "," _paths "]}," Formatters Notifier _priority":{"type":"method","name":"_priority","children":[],"call":["(pair\n  (sym :failed)\n  (int 2)) [] "]}," Formatters Notifier _notify":{"type":"method","name":"_notify","children":[],"call":["Guard Notifier  notify "," _priority "," Guard Notifier  notify "," Guard Notifier  turn_on "]}," Formatters Notifier _status":{"type":"method","name":"_status","children":[],"call":["pending_count > ","failure_count > "]}," Formatters Notifier _message":{"type":"method","name":"_message","children":[],"call":["message << ","duration round ","pending_count > "]}," Formatters Notifier dump_summary":{"type":"method","name":"dump_summary","children":[],"call":[" _notify "," _status "," _message "," _ _status  "," _ _message  "]}," Formatters Focuser _failed_paths":{"type":"method","name":"_failed_paths","children":[],"call":["e metadata [] ","e metadata ","failed map ","e execution_result [] == ","e execution_result [] ","e execution_result "," examples select "," examples "]}," Formatters Focuser _write_failed_paths_in_tmp":{"type":"method","name":"_write_failed_paths_in_tmp","children":[],"call":["f puts "," _failed_paths join "," _failed_paths ","File  open ","FileUtils  mkdir_p "]}," Formatters Focuser dump_summary":{"type":"method","name":"dump_summary","children":[],"call":[" _write_failed_paths_in_tmp ","failures > "]}," Guard RSpec Deprecator _deprectated":{"type":"method","name":"_deprectated","children":[],"call":["UI  warning "]}," Guard RSpec Deprecator _use_cmd_option":{"type":"method","name":"_use_cmd_option","children":[],"call":[" _deprectated "," options key? ","option to_sym "," options ","(str \"color\") each "," _deprecated ","(str \"The :\") + "]}," Guard RSpec Deprecator _exclude_option":{"type":"method","name":"_exclude_option","children":[],"call":[" _deprectated "," options key? "," options "," _deprecated ","The :exclude option is deprecated. + + ","The :exclude option is deprecated. + "]}," Guard RSpec Deprecator _version_option":{"type":"method","name":"_version_option","children":[],"call":[" _deprectated "," options key? "," options "," _deprecated ","The :version option is deprecated. + "]}," Guard RSpec Deprecator _spec_opts_env":{"type":"method","name":"_spec_opts_env","children":[],"call":["UI  warning ","ENV  [] nil? ","ENV  [] ","The SPEC_OPTS environment variable is present. + ","Compat UI  warning "]}," Guard RSpec Deprecator warns_about_deprecated_options":{"type":"method","name":"warns_about_deprecated_options","children":[],"call":[" _use_cmd_option "," _exclude_option "," _version_option "," _spec_opts_env "," _focus_on_failed_option "," _keep_failed_option "]}," Guard RSpec Deprecator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Guard RSpec Command _focuser":{"type":"method","name":"_focuser","children":[],"call":["File  dirname "," options [] "," options "]}," Guard RSpec Command _notifier":{"type":"method","name":"_notifier","children":[],"call":["File  dirname "," options [] "," options "]}," Guard RSpec Command _cmd_include_formatter?":{"type":"method","name":"_cmd_include_formatter?","children":[],"call":[" options [] =~ "," options [] "," options "]}," Guard RSpec Command _rspec_formatters":{"type":"method","name":"_rspec_formatters","children":[],"call":["(send\n  (lvar :formatters) :map) join ","formatter join ","formatters map "," RSpec Core ConfigurationOptions  new parse_options [] "," RSpec Core ConfigurationOptions  new parse_options "," RSpec Core ConfigurationOptions  new ","config options [] ","config options ","config parse_options ","config respond_to? ","entries join "," RSpec Core ConfigurationOptions  new  options [] "," RSpec Core ConfigurationOptions  new  options "," RSpec Core ConfigurationOptions  new  parse_options "," RSpec Core ConfigurationOptions  new  respond_to? "]}," Guard RSpec Command _formatter":{"type":"method","name":"_formatter","children":[],"call":[" _rspec_formatters "," _cmd_include_formatter? "]}," Guard RSpec Command _parts":{"type":"method","name":"_parts","children":[],"call":["parts << "," paths join "," paths "," _focuser "," _notifier "," _formatter "," options [] "," options "," _guard_formatter "," _visual_formatter "," _paths join "," _paths "]}," Guard RSpec Command initialize":{"type":"method","name":"initialize","children":[],"call":[" _parts join "," _parts ","(pair\n  (sym :focus_on_failed)\n  (true)) merge "]}," Guard RSpec Inspector _select_only_spec_dirs":{"type":"method","name":"_select_only_spec_dirs","children":[],"call":[" spec_paths include? "," spec_paths ","File  directory? ","paths select "]}," Guard RSpec Runner _command_output":{"type":"method","name":"_command_output","children":[],"call":["File  delete ","File  exist? ","lines [] map compact ","lines [] map ","lines [] ","lines first strip ","lines first ","File  readlines ","File  exists? "," _tmp_file "," options [] "," options ","Results  new ","File  readlines  [] map compact ","File  readlines  [] map ","File  readlines  [] ","File  readlines  first strip ","File  readlines  first ","File  readFile  readlines  "]}," Guard RSpec Runner _command_success?":{"type":"method","name":"_command_success?","children":[],"call":["(const\n  (const nil :Command) :FAILURE_EXIT_CODE) include? ","$? exitstatus ","success nil? ","$CHILD_STATUS exitstatus "]}," Guard RSpec Options _deep_merge":{"type":"method","name":"_deep_merge","children":[],"call":[" _deep_merge ","newval instance_of? ","oldval instance_of? ","hash1 merge "]}," Guard RSpec Options with_defaults":{"type":"method","name":"with_defaults","children":[],"call":[" _deep_merge freeze "," _deep_merge "]}," Guard RSpec Notifier _priority":{"type":"method","name":"_priority","children":[],"call":["(pair\n  (sym :failed)\n  (int 2)) [] "]}," Guard RSpec Notifier _image":{"type":"method","name":"_image","children":[],"call":["pending_count > ","failure_count > "]}," Guard RSpec Notifier _parse_summary":{"type":"method","name":"_parse_summary","children":[],"call":["m [] to_i ","m [] ","summary match "]}," Guard RSpec Notifier notify_failure":{"type":"method","name":"notify_failure","children":[],"call":[" Guard Notifier  notify "," options [] "," options ","@options [] ","Guard Compat UI  notify "]}," Guard RSpec Notifier notify":{"type":"method","name":"notify","children":[],"call":[" Guard Notifier  notify "," _priority "," _image "," _parse_summary "," options [] "," options ","@options [] ","Guard Compat UI  notify "," _ _priority  "," _ _image  "]}," Guard RSpec Notifier initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Guard RSpec Inspectors SimpleInspector reload":{"type":"method","name":"reload","children":[],"call":[]}," Guard RSpec Inspectors SimpleInspector failed":{"type":"method","name":"failed","children":[],"call":[]}," Guard RSpec Inspectors SimpleInspector paths":{"type":"method","name":"paths","children":[],"call":[" _clean "]}," Guard RSpec Inspectors KeepingInspector _location_path":{"type":"method","name":"_location_path","children":[],"call":["location match [] ","location match "]}," Guard RSpec Inspectors KeepingInspector _with_failed_locations":{"type":"method","name":"_with_failed_locations","children":[],"call":["(send\n  (lvar :paths) :|\n  (lvar :failed_paths)) uniq ","paths | "," _location_path "," failed_locations map "," failed_locations "]}," Guard RSpec Inspectors KeepingInspector reload":{"type":"method","name":"reload","children":[],"call":[]}," Guard RSpec Inspectors KeepingInspector failed":{"type":"method","name":"failed","children":[],"call":[]}," Guard RSpec Inspectors KeepingInspector paths":{"type":"method","name":"paths","children":[],"call":[" _with_failed_locations "," _clean "]}," Guard RSpec Inspectors KeepingInspector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Guard RSpec Inspectors FocusedInspector reload":{"type":"method","name":"reload","children":[],"call":[]}," Guard RSpec Inspectors FocusedInspector failed":{"type":"method","name":"failed","children":[],"call":[" focused_locations empty? "," focused_locations ","locations empty? "]}," Guard RSpec Inspectors FocusedInspector paths":{"type":"method","name":"paths","children":[],"call":[" _clean "," focused_locations "," focused_locations any? "]}," Guard RSpec Inspectors FocusedInspector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Guard RSpec Inspectors Factory create":{"type":"method","name":"create","children":[],"call":["SimpleInspector  new ","KeepingInspector  new ","FocusedInspector  new ","options [] "]}," Guard RSpec Inspectors BaseInspector _select_only_spec_files":{"type":"method","name":"_select_only_spec_files","children":[],"call":["files include? ","paths select ","(send\n  (lvar :spec_files) :+\n  (lvar :feature_files)) flatten ","spec_files + ","Dir  [] ","File  join "," spec_paths collect "," spec_paths ","(send\n  (lvar :files) :&\n  (array\n    (if\n      (ivar :@chdir)\n      (send\n        (const nil :File) :join\n        (ivar :@chdir)\n        (lvar :path))\n      (lvar :path)))) any? ","files & "," _collect_files ","(send\n  (lvar :spec_files) :+\n  (lvar :feature_files)) flatten  include? ","(send\n  (lvar :spec_(send\n  (lvar :spec_files) :+\n  (lvar :feature_files)) flatten ) :+\n  (lvar :feature_(send\n  (lvar :spec_files) :+\n  (lvar :feature_files)) flatten )) flatten ","(send\n  (lvar :spec_files) :+\n  (lvar : _collect_files )) flatten ","(send\n  (lvar : _collect_files ) :+\n  (lvar :feature_files)) flatten ","spec_(send\n  (lvar :spec_files) :+\n  (lvar :feature_files)) flatten  + "," _collect_files  + ","(send\n  (lvar :(send\n  (lvar :spec_files) :+\n  (lvar :feature_files)) flatten ) :&\n  (array\n    (if\n      (ivar :@chdir)\n      (send\n        (const nil :File) :join\n        (ivar :@chdir)\n        (lvar :path))\n      (lvar :path)))) any? ","(send\n  (lvar :spec_files) :+\n  (lvar :feature_files)) flatten  & "," _collect_(send\n  (lvar :spec_files) :+\n  (lvar :feature_files)) flatten  "]}," Guard RSpec Inspectors BaseInspector _select_only_spec_dirs":{"type":"method","name":"_select_only_spec_dirs","children":[],"call":[" spec_paths include? "," spec_paths ","File  directory? ","paths select ","chdir_paths include? "," _spec_paths_with_chdir "," _spec_paths_with_chdir  include? "]}," Guard RSpec Inspectors BaseInspector _clean":{"type":"method","name":"_clean","children":[],"call":["spec_dirs + "," _select_only_spec_files "," _select_only_spec_dirs ","paths compact! ","paths uniq! ","(send\n  (lvar :spec_dirs) :+\n  (lvar :spec_files)) uniq "," _select_only_spec_dirs  + "," _select_only_ _select_only_spec_files  "," _select_only_ _select_only_spec_dirs  ","(send\n  (lvar :spec_dirs) :+\n  (lvar : _select_only_spec_files )) uniq ","(send\n  (lvar : _select_only_spec_dirs ) :+\n  (lvar :spec_files)) uniq "]}," Guard RSpec Inspectors BaseInspector _abstract":{"type":"method","name":"_abstract","children":[],"call":[]}," Guard RSpec Inspectors BaseInspector reload":{"type":"method","name":"reload","children":[],"call":[" raise "," _abstract "," fail "]}," Guard RSpec Inspectors BaseInspector failed":{"type":"method","name":"failed","children":[],"call":[" raise "," _abstract "," fail "]}," Guard RSpec Inspectors BaseInspector paths":{"type":"method","name":"paths","children":[],"call":[" raise "," _abstract "," fail "]}," Guard RSpec Inspectors BaseInspector initialize":{"type":"method","name":"initialize","children":[],"call":["@options [] "]}," Guard RSpec Formatter _message":{"type":"method","name":"_message","children":[],"call":["message << ","duration round ","pending_count > "]}," Guard RSpec Formatter _failed_paths":{"type":"method","name":"_failed_paths","children":[],"call":["e metadata [] ","e metadata ","failed map ","e execution_result [] == ","e execution_result [] ","e execution_result "," examples select "," examples ","(send\n  (lvar :failed) :map) sort uniq ","(send\n  (lvar :failed) :map) sort "," class extract_spec_location "," class ","e execution_result [] to_s == ","e execution_result [] to_s "]}," Guard RSpec Formatter dump_summary":{"type":"method","name":"dump_summary","children":[],"call":["f puts "," _failed_paths join "," _failed_paths ","failures > "," _message ","File  open ","FileUtils  mkdir_p "," write_summary ","notification pending_count ","notification failure_count ","notification example_count ","notification duration ","args [] "," class rspec_3? "," class "," write ","notification failure_count  > ","args []  pending_count ","notification notification pending_count _count ","args []  failure_count ","args []  example_count ","args []  duration ","notification notification duration  "]}," Guard RSpec Deprecator _focus_on_failed_option":{"type":"method","name":"_focus_on_failed_option","children":[],"call":[" _deprectated "," options key? "," options "," _deprecated ","The :focus_on_failed option is deprecated. + + + ","The :focus_on_failed option is deprecated. + + ","The :focus_on_failed option is deprecated. + "]}," Guard RSpec Deprecator _keep_failed_option":{"type":"method","name":"_keep_failed_option","children":[],"call":[" _deprectated "," options key? "," options "," _deprecated ","The :keep_failed option is deprecated. + + + ","The :keep_failed option is deprecated. + + ","The :keep_failed option is deprecated. + "]}," Guard RSpec Command _guard_formatter":{"type":"method","name":"_guard_formatter","children":[],"call":["File  dirname ","dir + ","Pathname  new dirname dirname ","Pathname  new dirname ","Pathname  new ","File  Pathname  new dirname dirname name ","Pathname  new dirname dirname  + ","Pathname  new Pathname  new dirname dirname name Pathname  new dirname dirname name ","Pathname  new Pathname  new dirname dirname name "]}," Guard RSpec Command _visual_formatter":{"type":"method","name":"_visual_formatter","children":[],"call":[" _rspec_formatters "," _cmd_include_formatter? "]}," Guard RSpec Deprecator _deprecated":{"type":"method","name":"_deprecated","children":[],"call":["UI  warning ","Compat UI  warning "]}," Guard RSpec Formatter _write":{"type":"method","name":"_write","children":[],"call":["File  open ","FileUtils  mkdir_p ","File  dirname "]}," Guard RSpec Formatter write_summary":{"type":"method","name":"write_summary","children":[],"call":["f puts "," _failed_paths join "," _failed_paths ","failures > "," _message "," _write "]}," Guard RSpec Formatter spec_path?":{"type":"method","name":"spec_path?","children":[],"call":[]}," Guard RSpec Formatter extract_spec_location":{"type":"method","name":"extract_spec_location","children":[],"call":[]}," Guard RSpec Formatter examples":{"type":"method","name":"examples","children":[],"call":[]}," Guard RSpec Formatter example_failed":{"type":"method","name":"example_failed","children":[],"call":[" examples push ","failure example "," examples "]}," Guard RSpec Formatter rspec_3?":{"type":"method","name":"rspec_3?","children":[],"call":[]}," Guard RSpec Formatter write":{"type":"method","name":"write","children":[],"call":["File  open ","FileUtils  mkdir_p ","File  dirname "]}," Guard RSpec Runner _cmd_option_present":{"type":"method","name":"_cmd_option_present","children":[],"call":[" notifier notify_failure "," notifier ","Guard UI  error ","options [] "," Guard UI  error ","Compat UI  error "]}," Guard RSpec Runner _tmp_file":{"type":"method","name":"_tmp_file","children":[],"call":["File  join "]}," Guard RSpec Runner _process_run_result":{"type":"method","name":"_process_run_result","children":[],"call":[" _run_all_after_pass ","all ! "," _open_launchy "," notifier notify "," notifier "," inspector failed "," inspector "," notifier notify_failure "," _command_output "," _command_success? ","results summary ","results failed_paths "," _command_output  summary "," _command_output  failed_paths "]}," Guard RSpec Inspectors BaseInspector _paths_with_chdir":{"type":"method","name":"_paths_with_chdir","children":[],"call":["File  join ","paths map "]}," Guard RSpec Inspectors BaseInspector _collect_files":{"type":"method","name":"_collect_files","children":[],"call":["Dir  [] ","File  join ","base_paths map "," _spec_paths_with_chdir "," _spec_paths_with_chdir  map "]}," Guard RSpec Inspectors BaseInspector _spec_paths_with_chdir":{"type":"method","name":"_spec_paths_with_chdir","children":[],"call":[" _paths_with_chdir "," spec_paths "]}," Guard RSpec Command _paths":{"type":"method","name":"_paths","children":[],"call":["path sub ","File  join "," paths map "," paths ","options [] "]}," Guard RSpec Dsl rails":{"type":"method","name":"rails","children":[],"call":["rails spec_helper= "," rspec spec_dir "," rspec ","rails app_controller= ","rails routes= ","rails controllers= ","rails layouts= ","exts * ","rails view_dirs= ","rails views= ","rails app_files= ","options dup delete ","options dup ","OpenStruct  new tap ","OpenStruct  new "," _view_extensions * "," _view_extensions "," _build_rails_rules "," _view_extensions *  * "]}," Guard RSpec Dsl ruby":{"type":"method","name":"ruby","children":[],"call":["ruby lib_files= ","OpenStruct  new tap ","OpenStruct  new "]}," Guard RSpec Dsl rspec":{"type":"method","name":"rspec","children":[],"call":["rspec spec_support= ","rspec spec_dir ","rspec spec_files= ","rspec spec_helper= ","rspec spec= "," lambda ","rspec spec_dir= ","OpenStruct  new tap ","OpenStruct  new ","Dsl  detect_spec_file_for "]}," Guard RSpec Dsl watch_spec_files_for":{"type":"method","name":"watch_spec_files_for","children":[],"call":[" rspec spec call ","m [] "," rspec spec "," rspec ","@dsl send "]}," Guard RSpec Dsl initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Guard RSpec Dsl _view_extensions":{"type":"method","name":"_view_extensions","children":[],"call":["options dup delete ","options dup "]}," Guard RSpec Results initialize":{"type":"method","name":"initialize","children":[],"call":["lines [] map compact ","lines [] map ","lines [] ","lines first chomp ","lines first "," fail ","lines inspect ","lines first empty? ","lines empty? ","File  readlines "," raise ","File  readlines  [] map compact ","File  readlines  [] map ","File  readlines  [] ","File  readlines  first chomp ","File  readlines  first ","File  readlines  inspect ","File  readlines  first empty? ","File  readlines  empty? ","File  readFile  readlines  "]}," Guard RSpec Dsl detect_spec_file_for":{"type":"method","name":"detect_spec_file_for","children":[],"call":[]}," Guard RSpecFormatter _results_file":{"type":"method","name":"_results_file","children":[],"call":["File  expand_path "," fail ","ENV  [] ","STDERR  puts ","path nil? ","File  expand_ENV  []  ","ENV  []  nil? "]}," Guard RSpec Runner _results_file":{"type":"method","name":"_results_file","children":[],"call":["File  join "," Pathname relative? "," Pathname ","File  expand_path ","Compat UI  warning "," format ","results_file inspect "," Pathname absolute? ","File  join  inspect "]}," Guard RSpec Runner _really_run":{"type":"method","name":"_really_run","children":[],"call":["process all_green? "," block_given? "," _open_launchy "," notifier notify ","results summary "," notifier "," inspector failed ","results failed_paths "," inspector ","process results ","RSpecProcess  new "," _results_file ","options [] ","RSpecProcess  new  all_green? ","process process all_green? ? ","process results  summary ","process results  failed_paths ","process process results  ","RSpecProcess  new  results "," _process results _file "," _results_ _results_file  "]}," Guard RSpec Runner NoCmdOptionError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Guard RSpec RSpecProcess _without_bundler_env":{"type":"method","name":"_without_bundler_env","children":[],"call":[" Bundler  with_clean_env "]}," Guard RSpec RSpecProcess _read_results":{"type":"method","name":"_read_results","children":[],"call":["File  delete "," formatter_tmp_file ","File  exist? ","Results  new "," raise ","Compat UI  error "," format "," formatter_tmp_file inspect "]}," Guard RSpec RSpecProcess _really_run":{"type":"method","name":"_really_run","children":[],"call":[" fail "," command inspect "," command ","result last exitstatus ","result last ","Process  wait2 ","Kernel  spawn "," formatter_tmp_file "," Process  wait2 "," raise ","Compat UI  debug "," _warn_unless_absolute_path ","Process  wait2  last exitstatus "," Process  wait2  last exitstatus ","Process  wait2  last "," Process  wait2  last "]}," Guard RSpec RSpecProcess _run":{"type":"method","name":"_run","children":[],"call":[" fail "," command inspect "," command ","(int 0) include? "," _really_run "," _without_bundler_env "," raise "," format ","Compat UI  debug ","exit_code inspect "," _with_desired_bundler_env "," _really_run  inspect "]}," Guard RSpec RSpecProcess all_green?":{"type":"method","name":"all_green?","children":[],"call":[" exit_code zero? "," exit_code "]}," Guard RSpec RSpecProcess initialize":{"type":"method","name":"initialize","children":[],"call":[" _read_results "," _run "]}," Guard RSpecFormatter Error UnsupportedPattern initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Guard RSpecFormatter supported_fnmatch_flags":{"type":"method","name":"supported_fnmatch_flags","children":[],"call":[" fail ","pattern =~ ","File  const_defined? ","File FNM_PATHNAME  | "," raise "]}," Guard RSpecFormatter first_colon_separated_entry":{"type":"method","name":"first_colon_separated_entry","children":[],"call":["(or\n  (lvar :entries)\n  (str \"\")) split first ","(or\n  (lvar :entries)\n  (str \"\")) split "]}," Guard RSpecFormatterResultsPath initialize":{"type":"method","name":"initialize","children":[],"call":["File  expand_path ","STDERR  puts ","path nil? ","ENV  [] ","File  expand_ENV  []  ","ENV  []  nil? "]}," Guard RSpecFormatter _extract_group":{"type":"method","name":"_extract_group","children":[],"call":["metadata [] "]}," Guard RSpec RSpecProcess _warn_unless_absolute_path":{"type":"method","name":"_warn_unless_absolute_path","children":[],"call":["Compat UI  warning "," format ","formatter_tmp_file inspect "," Pathname absolute? "," Pathname "]}," Guard RSpec Dsl _build_rails_rules":{"type":"method","name":"_build_rails_rules","children":[],"call":["rails spec_helper= "," rspec spec_dir "," rspec ","rails app_controller= ","rails routes= ","rails controllers= ","rails layouts= ","rails view_dirs= ","rails views= ","rails app_files= ","OpenStruct  new tap ","OpenStruct  new "]}," Guard RSpec RSpecProcess _with_desired_bundler_env":{"type":"method","name":"_with_desired_bundler_env","children":[],"call":[" Bundler  with_original_env "," Bundler  with_clean_env ","desired_bundler_env == ","(const\n  (cbase) :Bundler) ! "," options [] "," options "," options []  == "]}}