{" CoreExtensions Integer Bitwise rszf":{"type":"method","name":"rszf","children":[],"call":["(send\n  (self) :>>\n  (lvar :count)) & ","(send\n  (int 2) :**\n  (begin\n    (send\n      (begin\n        (send\n          (send\n            (self) :size) :*\n          (int 8))) :-\n      (lvar :count)))) - ","2 ** ","(send\n  (send\n    (self) :size) :*\n  (int 8)) - "," size * "," size "," >> "]}," CoreExtensions Array Behavior extract_options!":{"type":"method","name":"extract_options!","children":[],"call":[" pop "," last is_a? "," last "]}," RQRCode QRUtil demerit_points_4_dark_ratio":{"type":"method","name":"demerit_points_4_dark_ratio","children":[],"call":[]}," RQRCode QRUtil demerit_points_3_dangerous_patterns":{"type":"method","name":"demerit_points_3_dangerous_patterns","children":[],"call":[]}," RQRCode QRUtil demerit_points_2_full_blocks":{"type":"method","name":"demerit_points_2_full_blocks","children":[],"call":[]}," RQRCode QRUtil demerit_points_1_same_color":{"type":"method","name":"demerit_points_1_same_color","children":[],"call":[]}," RQRCode QRUtil get_lost_points":{"type":"method","name":"get_lost_points","children":[],"call":[]}," RQRCode QRUtil get_length_in_bits":{"type":"method","name":"get_length_in_bits","children":[],"call":[]}," RQRCode QRUtil get_error_correct_polynomial":{"type":"method","name":"get_error_correct_polynomial","children":[],"call":[]}," RQRCode QRUtil get_mask":{"type":"method","name":"get_mask","children":[],"call":[]}," RQRCode QRUtil get_pattern_positions":{"type":"method","name":"get_pattern_positions","children":[],"call":[]}," RQRCode QRUtil get_bch_digit":{"type":"method","name":"get_bch_digit","children":[],"call":[]}," RQRCode QRUtil get_bch_version":{"type":"method","name":"get_bch_version","children":[],"call":[]}," RQRCode QRUtil get_bch_format_info":{"type":"method","name":"get_bch_format_info","children":[],"call":[]}," RQRCode QRUtil max_size":{"type":"method","name":"max_size","children":[],"call":[]}," RQRCode QRRSBlock get_rs_block_table":{"type":"method","name":"get_rs_block_table","children":[],"call":[]}," RQRCode QRRSBlock get_rs_blocks":{"type":"method","name":"get_rs_blocks","children":[],"call":[]}," RQRCode QRRSBlock initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RQRCode QRPolynomial mod":{"type":"method","name":"mod","children":[],"call":["QRPolynomial  new mod ","QRPolynomial  new ","num []= ","tmp ^ ","QRMath  gexp ","QRMath  glog + ","QRMath  glog ","e get ","num [] ","num [] nil? ","(erange\n  (int 0)\n  (send\n    (lvar :e) :get_length)) each ","e get_length "," get ","(erange\n  (int 0)\n  (send nil :get_length)) each "," get_length ","Array  new ","QRMath  glog - "," get_length - < "," get_length - ","Array  new  []= ","num []  ^ ","Array  new  [] ","Array  new  [] nil? "]}," RQRCode QRPolynomial multiply":{"type":"method","name":"multiply","children":[],"call":["QRPolynomial  new ","num []= ","tmp ^ ","QRMath  gexp ","QRMath  glog + ","QRMath  glog ","e get "," get ","i + ","num [] ","num [] nil? ","(erange\n  (int 0)\n  (send\n    (lvar :e) :get_length)) each ","e get_length ","(erange\n  (int 0)\n  (send nil :get_length)) each "," get_length ","Array  new "," get_length + - "," get_length + ","Array  new  []= ","num []  ^ ","Array  new  [] ","Array  new  [] nil? "]}," RQRCode QRPolynomial get_length":{"type":"method","name":"get_length","children":[],"call":["@num size "]}," RQRCode QRPolynomial get":{"type":"method","name":"get","children":[],"call":["@num [] "]}," RQRCode QRPolynomial initialize":{"type":"method","name":"initialize","children":[],"call":["@num []= ","num [] ","i + ","(erange\n  (int 0)\n  (send\n    (send\n      (lvar :num) :size) :-\n    (lvar :offset))) each ","num size - ","num size ","Array  new ","num size - + ","offset + ","num [] == ","offset < "," raise ","num empty? ","Array  new  []= ","(erange\n  (int 0)\n  (send\n    (send\n      (lvar :num) :size) :-\n    (lvar :offset + ))) each ","offset +  + ","offset +  < "]}," RQRCode QRNumeric get_code":{"type":"method","name":"get_code","children":[],"call":["chars to_i "]}," RQRCode QRNumeric get_bit_length":{"type":"method","name":"get_bit_length","children":[],"call":["NUMBER_LENGTH  [] "]}," RQRCode QRNumeric write":{"type":"method","name":"write","children":[],"call":["buffer put "," get_code "," get_bit_length ","chars length ","@data [] ","i % == ","i % ","(send\n  (ivar :@data) :size) times ","@data size ","buffer numeric_encoding_start "," get_length ","chars << ","i + ","@data [] present? "," get_ get_bit_length  ","@data []  length ","@data []  << "]}," RQRCode QRNumeric valid_data?":{"type":"method","name":"valid_data?","children":[],"call":[]}," RQRCode QRNumeric get_length":{"type":"method","name":"get_length","children":[],"call":["@data size "]}," RQRCode QRNumeric initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","QRNumeric  valid_data? ","QRMODE  [] "]}," RQRCode QRMath gexp":{"type":"method","name":"gexp","children":[],"call":["EXP_TABLE  [] ","n - ","n >= ","n + ","n < ","n -  - ","n +  - ","n -  >= ","n +  >= ","n -  + ","n +  + ","n -  < ","n +  < "]}," RQRCode QRMath glog":{"type":"method","name":"glog","children":[],"call":["LOG_TABLE  [] "," raise ","n < "]}," RQRCode QRCode create_bytes":{"type":"method","name":"create_bytes","children":[],"call":[]}," RQRCode QRCode create_data":{"type":"method","name":"create_data","children":[],"call":[]}," RQRCode QRCode count_max_data_bits":{"type":"method","name":"count_max_data_bits","children":[],"call":[]}," RQRCode QRCode smallest_size_for":{"type":"method","name":"smallest_size_for","children":[],"call":["ver + "," raise ","i >= ","max_size_array index ","string bytesize "]}," RQRCode QRCode map_data":{"type":"method","name":"map_data","children":[],"call":["inc -@ ","@module_count <= ","row < ","bit_index == ","@modules [] []= ","col - ","@modules [] ","dark ! ","QRUtil  get_mask ","(send\n  (send\n    (begin\n      (send\n        (lvar :data) :[]\n        (lvar :byte_index))) :rszf\n    (lvar :bit_index)) :&\n  (int 1)) == ","(send\n  (lvar :data) :[]\n  (lvar :byte_index)) rszf & ","(send\n  (lvar :data) :[]\n  (lvar :byte_index)) rszf ","data [] ","data [] nil? ! ","data [] nil? ","byte_index < ","data size ","@modules [] [] nil? ","@modules [] [] ","(erange\n  (int 0)\n  (int 2)) each ","col <= ","(send\n  (ivar :@module_count) :-\n  (int 1)) step ","@module_count - ","inc -@  -@ ","@module_count -  < ","col -  - ","dark !  ! ","QRUtil  get_QRUtil  get_mask  ","col -  <= "]}," RQRCode QRCode place_format_info":{"type":"method","name":"place_format_info","children":[],"call":["@modules [] []= ","test ! ","@modules [] ","@module_count - ","15 - - ","15 - ","15 - - + ","i < ","@module_count - - ","@module_count - + ","i + ","(send\n  (begin\n    (send\n      (lvar :bits) :>>\n      (lvar :i))) :&\n  (int 1)) == ","(send\n  (lvar :bits) :>>\n  (lvar :i)) & ","bits >> ","QRFORMATINFOLENGTH  times ","QRUtil  get_bch_format_info ","@error_correct_level << | ","@error_correct_level << ","(send\n  (begin\n    (send\n      (lvar :QRUtil  get_bch_format_info ) :>>\n      (lvar :i))) :&\n  (int 1)) == ","(send\n  (lvar :QRUtil  get_bch_format_info ) :>>\n  (lvar :i)) & ","QRUtil  get_bch_format_info  >> "]}," RQRCode QRCode place_version_info":{"type":"method","name":"place_version_info","children":[],"call":["@modules [] []= ","(send\n  (lvar :i) :/\n  (int 3)) floor ","i / ","@modules [] ","i % + - - ","i % + - ","i % + ","i % ","(send\n  (begin\n    (send\n      (lvar :bits) :>>\n      (lvar :i))) :&\n  (int 1)) == ","(send\n  (lvar :bits) :>>\n  (lvar :i)) & ","bits >> ","test ! ","(erange\n  (int 0)\n  (int 18)) each ","QRUtil  get_bch_version ","(send\n  (begin\n    (send\n      (lvar :QRUtil  get_bch_version ) :>>\n      (lvar :i))) :&\n  (int 1)) == ","(send\n  (lvar :QRUtil  get_bch_version ) :>>\n  (lvar :i)) & ","QRUtil  get_bch_version  >> "]}," RQRCode QRCode place_position_adjust_pattern":{"type":"method","name":"place_position_adjust_pattern","children":[],"call":["@modules [] []= ","col + ","@modules [] ","row + ","c == ","r == ","c abs == ","c abs ","r abs == ","r abs ","(irange\n  (int -2)\n  (int 2)) each ","@modules [] [] nil? ","@modules [] [] ","positions each ","QRUtil  get_pattern_positions ","QRUtil  get_pattern_positions  each ","QRUtil  get_pattern_QRUtil  get_pattern_positions  "]}," RQRCode QRCode place_timing_pattern":{"type":"method","name":"place_timing_pattern","children":[],"call":["@modules [] []= ","i % == ","i % ","@modules [] ","(erange\n  (int 8)\n  (send\n    (ivar :@module_count) :-\n    (int 8))) each ","@module_count - "]}," RQRCode QRCode get_best_mask_pattern":{"type":"method","name":"get_best_mask_pattern","children":[],"call":["min_lost_point > ","i == ","QRUtil  get_lost_points "," modules "," make_impl ","(erange\n  (int 0)\n  (int 8)) each ","QRUtil  get_lost_point ","min_QRUtil  get_lost_points  > ","min_QRUtil  get_lost_point  > ","QRUtil  get_QRUtil  get_lost_points s ","QRUtil  get_QRUtil  get_lost_point s ","QRUtil  get_QRUtil  get_lost_points  ","QRUtil  get_QRUtil  get_lost_point  "]}," RQRCode QRCode place_position_probe_pattern":{"type":"method","name":"place_position_probe_pattern","children":[],"call":["@modules [] []= ","col + ","@modules [] ","row + ","c between? ","r between? ","r == ","c == ","(send\n  (lvar :col) :+\n  (lvar :c)) between? ! ","(send\n  (lvar :col) :+\n  (lvar :c)) between? ","@module_count - ","(irange\n  (int -1)\n  (int 7)) each ","(send\n  (lvar :row) :+\n  (lvar :r)) between? ! ","(send\n  (lvar :row) :+\n  (lvar :r)) between? "]}," RQRCode QRCode make_impl":{"type":"method","name":"make_impl","children":[],"call":[" map_data ","QRCode  create_data ","@data_cache nil? "," place_version_info ","@version >= "," place_format_info ","@common_patterns map "," setup_type_number ","@type_number >= "," setup_type_info "," setup_timing_pattern "," setup_position_adjust_pattern "," setup_position_probe_pattern ","@module_count - ","@modules []= ","Array  new ","(erange\n  (int 0)\n  (ivar :@module_count)) each ","QRCode  create_data  nil? ","@common_patterns map  []= ","Array  new  []= "]}," RQRCode QRCode prepare_common_patterns":{"type":"method","name":"prepare_common_patterns","children":[],"call":["@modules map "," place_timing_pattern "," place_position_adjust_pattern "," place_position_probe_pattern ","@module_count - ","Array  new ","@modules map! "]}," RQRCode QRCode make":{"type":"method","name":"make","children":[],"call":[" make_impl "," get_best_mask_pattern "," prepare_common_patterns "]}," RQRCode QRCode mode":{"type":"method","name":"mode","children":[],"call":[]}," RQRCode QRCode error_correction_level":{"type":"method","name":"error_correction_level","children":[],"call":["QRERRORCORRECTLEVEL  invert [] ","QRERRORCORRECTLEVEL  invert "]}," RQRCode QRCode to_s":{"type":"method","name":"to_s","children":[],"call":["rows join ","rows << ","light * ","rows first length / ","light size ","rows first length ","rows first ","rows unshift ","quiet_zone_size times ","row each ","@modules each ","options [] ","args extract_options! ","res join ","res << ","tmp join ","tmp << "," is_dark ","@modules each_index ","args extract_options!  [] ","args extract_args extract_options! ! "]}," RQRCode QRCode is_dark":{"type":"method","name":"is_dark","children":[],"call":["@modules [] [] ","@modules [] "," raise ","col between? ! ","col between? ","@module_count - ","row between? ! ","row between? ","@module_count <= ","col < ","row < "]}," RQRCode QRCode initialize":{"type":"method","name":"initialize","children":[],"call":[" make ","QR8bitByte  new ","QRAlphanumeric  new ","QRNumeric  new ","Array  new ","@version * + ","@version * ","QRERRORCORRECTLEVEL  [] "," raise ","QRUtil  max_size ","size > "," smallest_size_for ","options [] ","QRMAXDIGITS  [] [] ","QRMAXDIGITS  [] ","QRMODE_NAME  [] ","QRAlphanumeric  valid_data? ","RQRCode QRNumeric  valid_data? ","(or\n  (send\n    (lvar :options) :[]\n    (sym :mode))\n  (str \"\")) to_sym ","level inspect ","QRERRORCORRECTLEVEL  has_key? ! ","QRERRORCORRECTLEVEL  has_key? ","(or\n  (send\n    (lvar :options) :[]\n    (sym :level))\n  (sym :h)) to_sym ","args extract_options! ","string class ","string is_a? ! ","string is_a? ","@type_number * + ","@type_number * ","level to_sym ","args shift ","args first kind_of? ","args first ","(str \"l\") include? ","level to_s ","mode == ","RQRCodeCore QRCode  new ","args extract_options!  [] ","(or\n  (send\n    (lvar :options) :[]\n    (sym :QRMODE_NAME  [] ))\n  (str \"\")) to_sym ","(or\n  (send\n    (lvar :args extract_options! ) :[]\n    (sym :mode))\n  (str \"\")) to_sym ","(or\n  (send\n    (lvar :options) :[]\n    (sym :level))\n  (sym :h)) to_sym  inspect ","(or\n  (send\n    (lvar :options) :[]\n    (sym :(or\n  (send\n    (lvar :options) :[]\n    (sym :level))\n  (sym :h)) to_sym ))\n  (sym :h)) to_sym ","(or\n  (send\n    (lvar :args extract_options! ) :[]\n    (sym :level))\n  (sym :h)) to_sym ","args extract_args extract_options! ! ","(or\n  (send\n    (lvar :options) :[]\n    (sym :level))\n  (sym :h)) to_sym  to_sym ","(or\n  (send\n    (lvar :options) :[]\n    (sym :level))\n  (sym :h)) to_sym  to_s ","QRMODE_NAME  []  == "]}," RQRCode QRBitBuffer end_of_message":{"type":"method","name":"end_of_message","children":[],"call":[" put "," get_length_in_bits + > "," get_length_in_bits + "," get_length_in_bits "]}," RQRCode QRBitBuffer pad_until":{"type":"method","name":"pad_until","children":[],"call":[" put "," get_length_in_bits < "," get_length_in_bits "," put_bit "," get_length_in_bits % != "," get_length_in_bits % "]}," RQRCode QRBitBuffer numeric_encoding_start":{"type":"method","name":"numeric_encoding_start","children":[],"call":[" put ","QRUtil  get_length_in_bits ","QRMODE  [] "]}," RQRCode QRBitBuffer alphanumeric_encoding_start":{"type":"method","name":"alphanumeric_encoding_start","children":[],"call":[" put ","QRUtil  get_length_in_bits ","QRMODE  [] "]}," RQRCode QRBitBuffer byte_encoding_start":{"type":"method","name":"byte_encoding_start","children":[],"call":[" put ","QRUtil  get_length_in_bits ","QRMODE  [] "]}," RQRCode QRBitBuffer put_bit":{"type":"method","name":"put_bit","children":[],"call":["(int 128) rszf ","@length % ","@buffer [] ","@buffer << ","@buffer size <= ","@buffer size ","(send\n  (ivar :@length) :/\n  (int 8)) floor ","@length / "]}," RQRCode QRBitBuffer get_length_in_bits":{"type":"method","name":"get_length_in_bits","children":[],"call":[]}," RQRCode QRBitBuffer put":{"type":"method","name":"put","children":[],"call":[" put_bit ","(send\n  (begin\n    (send\n      (begin\n        (lvar :num)) :rszf\n      (send\n        (send\n          (lvar :length) :-\n          (lvar :i)) :-\n        (int 1)))) :&\n  (int 1)) == ","(send\n  (begin\n    (lvar :num)) :rszf\n  (send\n    (send\n      (lvar :length) :-\n      (lvar :i)) :-\n    (int 1))) & ","(lvar :num) rszf ","length - - ","length - ","(erange\n  (int 0)\n  (lvar :length)) each "]}," RQRCode QRBitBuffer get":{"type":"method","name":"get","children":[],"call":["(send\n  (begin\n    (send\n      (begin\n        (send\n          (ivar :@buffer) :[]\n          (lvar :buf_index))) :rszf\n      (send\n        (int 7) :-\n        (send\n          (lvar :index) :%\n          (int 8))))) :&\n  (int 1)) == ","(send\n  (begin\n    (send\n      (ivar :@buffer) :[]\n      (lvar :buf_index))) :rszf\n  (send\n    (int 7) :-\n    (send\n      (lvar :index) :%\n      (int 8)))) & ","(send\n  (ivar :@buffer) :[]\n  (lvar :buf_index)) rszf ","7 - ","index % ","@buffer [] ","(send\n  (lvar :index) :/\n  (int 8)) floor ","index / ","(send\n  (begin\n    (send\n      (begin\n        (send\n          (ivar :@buffer) :[]\n          (lvar :(send\n  (lvar :index) :/\n  (int 8)) floor ))) :rszf\n      (send\n        (int 7) :-\n        (send\n          (lvar :index) :%\n          (int 8))))) :&\n  (int 1)) == ","(send\n  (begin\n    (send\n      (ivar :@buffer) :[]\n      (lvar :(send\n  (lvar :index) :/\n  (int 8)) floor ))) :rszf\n  (send\n    (int 7) :-\n    (send\n      (lvar :index) :%\n      (int 8)))) & ","(send\n  (ivar :@buffer) :[]\n  (lvar :(send\n  (lvar :index) :/\n  (int 8)) floor )) rszf "]}," RQRCode QRBitBuffer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RQRCode QRAlphanumeric write":{"type":"method","name":"write","children":[],"call":["buffer put ","(send\n  (send\n    (const nil :ALPHANUMERIC) :index\n    (send\n      (ivar :@data) :[]\n      (lvar :i))) :*\n  (int 45)) + ","ALPHANUMERIC  index ","@data [] ","i + ","ALPHANUMERIC  index * ","i == ","@data size - ","@data size ","i % == ","i % ","(send\n  (ivar :@data) :size) times ","buffer alphanumeric_encoding_start "," get_length "]}," RQRCode QRAlphanumeric valid_data?":{"type":"method","name":"valid_data?","children":[],"call":[]}," RQRCode QRAlphanumeric get_length":{"type":"method","name":"get_length","children":[],"call":["@data size "]}," RQRCode QRAlphanumeric initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","QRAlphanumeric  valid_data? ","QRMODE  [] "]}," RQRCode QR8bitByte write":{"type":"method","name":"write","children":[],"call":["buffer put ","@data each_byte ","buffer byte_encoding_start "," get_length ","@data [] ","(erange\n  (int 0)\n  (send\n    (ivar :@data) :size)) each ","@data size ","c ord ","c respond_to? ","@data eac ord h_byte ","@data ea@data [] h_byte ","buffer byte_enc ord oding_start ","buffer byte_en@data [] oding_start ","(erange\n  (int 0)\n  (send\n    (ivar :@data) :size)) eac ord h ","(erange\n  (int 0)\n  (send\n    (ivar :@data) :size)) ea@data [] h ","c ord  ord ","@data []  ord ","c ord  respond_to? ","@data []  respond_to? "]}," RQRCode QR8bitByte get_length":{"type":"method","name":"get_length","children":[],"call":["@data bytesize ","@data size "]}," RQRCode QR8bitByte initialize":{"type":"method","name":"initialize","children":[],"call":["QRMODE  [] "]}," RQRCode Export SVG as_svg":{"type":"method","name":"as_svg","children":[],"call":["(lvar :xml_tag) flatten join ","(lvar :xml_tag) flatten ","result unshift ","options [] ","result << ","tmp join ","tmp << "," is_dark ","r * + ","r * ","c * + ","c * "," modules each_index "," modules ","(send\n  (send\n    (self) :module_count) :*\n  (lvar :module_size)) + ","2 * "," module_count * "," module_count ","options [] to_i ","result join ","@qrcode checked? ","@qrcode modules each_index ","@qrcode modules ","(send\n  (send\n    (ivar :@qrcode) :module_count) :*\n  (lvar :module_size)) + ","@qrcode module_count * ","@qrcode module_count ","options [] nil? ","output_tag result join ","output_tag result ","output_tag result << ","output_tag result unshift ","output_tag build ","(if\n  (lvar :use_path)\n  (const nil :Path)\n  (const nil :Rect)) new ","(send\n  (send\n    (const nil :DEFAULT_SVG_ATTRIBUTES) :+\n    (array\n      (lvar :dimensions_attr)\n      (dstr\n        (str \"shape-rendering=\\\"\")\n        (begin\n          (lvar :shape_rendering))\n        (str \"\\\"\")))) :+\n  (block\n    (send\n      (lvar :svg_attributes) :map)\n    (args\n      (arg :k)\n      (arg :v))\n    (dstr\n      (begin\n        (lvar :k))\n      (str \"=\\\"\")\n      (begin\n        (lvar :v))\n      (str \"\\\"\")))) join ","DEFAULT_SVG_ATTRIBUTES  + + ","svg_attributes map ","DEFAULT_SVG_ATTRIBUTES  + ","fill is_a? ","(lvar :r * + ml_tag) flatten join ","(lvar :r * + ml_tag) flatten "," modules each_inder * +  ","@qrcode modules each_inder * +  ","(if\n  (lvar :use_path)\n  (const nil :Path)\n  (const nil :Rect)) new  result join ","(if\n  (lvar :use_path)\n  (const nil :Path)\n  (const nil :Rect)) new  result ","(if\n  (lvar :use_path)\n  (const nil :Path)\n  (const nil :Rect)) new  result << ","(if\n  (lvar :use_path)\n  (const nil :Path)\n  (const nil :Rect)) new  result unshift ","(if\n  (lvar :use_path)\n  (const nil :Path)\n  (const nil :Rect)) new  build ","(if\n  (lvar :options [] )\n  (const nil :Path)\n  (const nil :Rect)) new ","(send\n  (send\n    (const nil :DEFAULT_SVG_ATTRIBUTES) :+\n    (arrac * + \n      (lvar :dimensions_attr)\n      (dstr\n        (str \"shape-rendering=\\\"\")\n        (begin\n          (lvar :shape_rendering))\n        (str \"\\\"\")))) :+\n  (block\n    (send\n      (lvar :svg_attributes) :map)\n    (args\n      (arg :k)\n      (arg :v))\n    (dstr\n      (begin\n        (lvar :k))\n      (str \"=\\\"\")\n      (begin\n        (lvar :v))\n      (str \"\\\"\")))) join ","(send\n  (send\n    (const nil :DEFAULT_SVG_ATTRIBUTES) :+\n    (array\n      (lvar :(send\n  (send\n    (self) :module_count) :*\n  (lvar :module_size)) + s_attr)\n      (dstr\n        (str \"shape-rendering=\\\"\")\n        (begin\n          (lvar :shape_rendering))\n        (str \"\\\"\")))) :+\n  (block\n    (send\n      (lvar :svg_attributes) :map)\n    (args\n      (arg :k)\n      (arg :v))\n    (dstr\n      (begin\n        (lvar :k))\n      (str \"=\\\"\")\n      (begin\n        (lvar :v))\n      (str \"\\\"\")))) join ","(send\n  (send\n    (const nil :DEFAULT_SVG_ATTRIBUTES) :+\n    (array\n      (lvar :(send\n  (send\n    (ivar :@qrcode) :module_count) :*\n  (lvar :module_size)) + s_attr)\n      (dstr\n        (str \"shape-rendering=\\\"\")\n        (begin\n          (lvar :shape_rendering))\n        (str \"\\\"\")))) :+\n  (block\n    (send\n      (lvar :svg_attributes) :map)\n    (args\n      (arg :k)\n      (arg :v))\n    (dstr\n      (begin\n        (lvar :k))\n      (str \"=\\\"\")\n      (begin\n        (lvar :v))\n      (str \"\\\"\")))) join ","options []  is_a? "]}," RQRCode Export PNG as_png":{"type":"method","name":"as_png","children":[],"call":["png save ","png resize ","googleis ! ","png []= ","(send\n  (lvar :x) :*\n  (lvar :module_px_size)) + + ","(send\n  (lvar :x) :*\n  (lvar :module_px_size)) + ","x * ","(send\n  (lvar :y) :*\n  (lvar :module_px_size)) + + ","(send\n  (lvar :y) :*\n  (lvar :module_px_size)) + ","y * ","(erange\n  (int 0)\n  (lvar :module_px_size)) each "," dark? "," modules each_index "," modules ","ChunkyPNG Image  new ","img_size + ","module_px_size * "," module_count ","options [] ","border_px * ","border * ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :resize_gte_to)) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (self) :module_count) :+\n        (lvar :total_border))) :to_f)) ceil to_i ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :resize_gte_to)) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (self) :module_count) :+\n        (lvar :total_border))) :to_f)) ceil ","options [] to_f / ","(send\n  (send\n    (self) :module_count) :+\n  (lvar :total_border)) to_f "," module_count + ","options [] to_f ","(send\n  (lvar :remaining) :/\n  (float 2.0)) floor to_i ","(send\n  (lvar :remaining) :/\n  (float 2.0)) floor ","remaining / ","total_image_size - ","(send\n  (send\n    (lvar :total_image_size) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (self) :module_count) :+\n        (send\n          (int 2) :*\n          (lvar :border_modules)))) :to_f)) floor to_i ","(send\n  (send\n    (lvar :total_image_size) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (self) :module_count) :+\n        (send\n          (int 2) :*\n          (lvar :border_modules)))) :to_f)) floor ","total_image_size to_f / ","(send\n  (send\n    (self) :module_count) :+\n  (send\n    (int 2) :*\n    (lvar :border_modules))) to_f ","2 * ","total_image_size to_f ","ChunkyPNG  Color ","default_img_options merge ","options [] != ","options length == ","options length ","@qrcode checked? ","@qrcode modules each_index ","@qrcode modules ","@qrcode module_count ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :resize_gte_to)) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@qrcode) :module_count) :+\n        (lvar :total_border))) :to_f)) ceil to_i ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :resize_gte_to)) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@qrcode) :module_count) :+\n        (lvar :total_border))) :to_f)) ceil ","(send\n  (send\n    (ivar :@qrcode) :module_count) :+\n  (lvar :total_border)) to_f ","@qrcode module_count + ","(send\n  (send\n    (lvar :total_image_size) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@qrcode) :module_count) :+\n        (send\n          (int 2) :*\n          (lvar :border_modules)))) :to_f)) floor to_i ","(send\n  (send\n    (lvar :total_image_size) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@qrcode) :module_count) :+\n        (send\n          (int 2) :*\n          (lvar :border_modules)))) :to_f)) floor ","(send\n  (send\n    (ivar :@qrcode) :module_count) :+\n  (send\n    (int 2) :*\n    (lvar :border_modules))) to_f ","constraints []= ","options has_key? ","options [] nil? ! ","options [] nil? ","options [] is_a? ","png resize  save ","ChunkyPNG Image  new  save ","png resize  resize ","ChunkyPNG Image  new  resize ","png resize  []= ","ChunkyPNG Image  new  []= ","(send\n  (lvar :x) :*\n  (lvar :options [] )) + + ","(send\n  (lvar :x) :*\n  (lvar :(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :resize_gte_to)) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (self) :module_count) :+\n        (lvar :total_border))) :to_f)) ceil to_i )) + + ","(send\n  (lvar :x) :*\n  (lvar :(send\n  (send\n    (lvar :total_image_size) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (self) :module_count) :+\n        (send\n          (int 2) :*\n          (lvar :border_modules)))) :to_f)) floor to_i )) + + ","(send\n  (lvar :x) :*\n  (lvar :(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :resize_gte_to)) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@qrcode) :module_count) :+\n        (lvar :total_border))) :to_f)) ceil to_i )) + + ","(send\n  (lvar :x) :*\n  (lvar :(send\n  (send\n    (lvar :total_image_size) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@qrcode) :module_count) :+\n        (send\n          (int 2) :*\n          (lvar :border_modules)))) :to_f)) floor to_i )) + + ","(send\n  (lvar :x) :*\n  (lvar :options [] )) + ","(send\n  (lvar :x) :*\n  (lvar :(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :resize_gte_to)) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (self) :module_count) :+\n        (lvar :total_border))) :to_f)) ceil to_i )) + ","(send\n  (lvar :x) :*\n  (lvar :(send\n  (send\n    (lvar :total_image_size) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (self) :module_count) :+\n        (send\n          (int 2) :*\n          (lvar :border_modules)))) :to_f)) floor to_i )) + ","(send\n  (lvar :x) :*\n  (lvar :(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :resize_gte_to)) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@qrcode) :module_count) :+\n        (lvar :total_border))) :to_f)) ceil to_i )) + ","(send\n  (lvar :x) :*\n  (lvar :(send\n  (send\n    (lvar :total_image_size) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@qrcode) :module_count) :+\n        (send\n          (int 2) :*\n          (lvar :border_modules)))) :to_f)) floor to_i )) + ","(send\n  (lvar :y) :*\n  (lvar :options [] )) + + ","(send\n  (lvar :y) :*\n  (lvar :(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :resize_gte_to)) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (self) :module_count) :+\n        (lvar :total_border))) :to_f)) ceil to_i )) + + ","(send\n  (lvar :y) :*\n  (lvar :(send\n  (send\n    (lvar :total_image_size) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (self) :module_count) :+\n        (send\n          (int 2) :*\n          (lvar :border_modules)))) :to_f)) floor to_i )) + + ","(send\n  (lvar :y) :*\n  (lvar :(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :resize_gte_to)) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@qrcode) :module_count) :+\n        (lvar :total_border))) :to_f)) ceil to_i )) + + ","(send\n  (lvar :y) :*\n  (lvar :(send\n  (send\n    (lvar :total_image_size) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@qrcode) :module_count) :+\n        (send\n          (int 2) :*\n          (lvar :border_modules)))) :to_f)) floor to_i )) + + ","(send\n  (lvar :y) :*\n  (lvar :options [] )) + ","(send\n  (lvar :y) :*\n  (lvar :(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :resize_gte_to)) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (self) :module_count) :+\n        (lvar :total_border))) :to_f)) ceil to_i )) + ","(send\n  (lvar :y) :*\n  (lvar :(send\n  (send\n    (lvar :total_image_size) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (self) :module_count) :+\n        (send\n          (int 2) :*\n          (lvar :border_modules)))) :to_f)) floor to_i )) + ","(send\n  (lvar :y) :*\n  (lvar :(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :resize_gte_to)) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@qrcode) :module_count) :+\n        (lvar :total_border))) :to_f)) ceil to_i )) + ","(send\n  (lvar :y) :*\n  (lvar :(send\n  (send\n    (lvar :total_image_size) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@qrcode) :module_count) :+\n        (send\n          (int 2) :*\n          (lvar :border_modules)))) :to_f)) floor to_i )) + ","(erange\n  (int 0)\n  (lvar :options [] )) each ","(erange\n  (int 0)\n  (lvar :(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :resize_gte_to)) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (self) :module_count) :+\n        (lvar :total_border))) :to_f)) ceil to_i )) each ","(erange\n  (int 0)\n  (lvar :(send\n  (send\n    (lvar :total_image_size) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (self) :module_count) :+\n        (send\n          (int 2) :*\n          (lvar :border_modules)))) :to_f)) floor to_i )) each ","(erange\n  (int 0)\n  (lvar :(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :resize_gte_to)) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@qrcode) :module_count) :+\n        (lvar :total_border))) :to_f)) ceil to_i )) each ","(erange\n  (int 0)\n  (lvar :(send\n  (send\n    (lvar :total_image_size) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@qrcode) :module_count) :+\n        (send\n          (int 2) :*\n          (lvar :border_modules)))) :to_f)) floor to_i )) each ","module_px_size *  + ","options []  * ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :resize_gte_to)) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (self) :module_count) :+\n        (lvar :total_border))) :to_f)) ceil to_i  * ","(send\n  (send\n    (lvar :total_image_size) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (self) :module_count) :+\n        (send\n          (int 2) :*\n          (lvar :border_modules)))) :to_f)) floor to_i  * ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :resize_gte_to)) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@qrcode) :module_count) :+\n        (lvar :total_border))) :to_f)) ceil to_i  * ","(send\n  (send\n    (lvar :total_image_size) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@qrcode) :module_count) :+\n        (send\n          (int 2) :*\n          (lvar :border_modules)))) :to_f)) floor to_i  * ","default_img_options merge  [] ","border *  * ","(send\n  (lvar :remaining) :/\n  (float 2.0)) floor to_i  * ","options [] _px * ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :resize_gte_to)) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (self) :module_count) :+\n        (lvar :border * ))) :to_f)) ceil to_i ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :resize_gte_to)) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (self) :module_count) :+\n        (lvar :total_options [] ))) :to_f)) ceil to_i ","(send\n  (send\n    (send\n      (lvar :default_img_options merge ) :[]\n      (sym :resize_gte_to)) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (self) :module_count) :+\n        (lvar :total_border))) :to_f)) ceil to_i ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :resize_gte_to)) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (self) :module_count) :+\n        (lvar :border * ))) :to_f)) ceil ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :resize_gte_to)) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (self) :module_count) :+\n        (lvar :total_options [] ))) :to_f)) ceil ","(send\n  (send\n    (send\n      (lvar :default_img_options merge ) :[]\n      (sym :resize_gte_to)) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (self) :module_count) :+\n        (lvar :total_border))) :to_f)) ceil ","default_img_options merge  [] to_f / ","(send\n  (send\n    (self) :module_count) :+\n  (lvar :border * )) to_f ","(send\n  (send\n    (self) :module_count) :+\n  (lvar :total_options [] )) to_f ","default_img_options merge  [] to_f ","(send\n  (lvar :total_image_size - ) :/\n  (float 2.0)) floor to_i ","(send\n  (lvar :total_image_size - ) :/\n  (float 2.0)) floor ","total_image_size -  / ","options []  - ","(send\n  (send\n    (lvar :total_image_size) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (self) :module_count) :+\n        (send\n          (int 2) :*\n          (lvar :options [] _modules)))) :to_f)) floor to_i ","(send\n  (send\n    (lvar :total_image_size) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (self) :module_count) :+\n        (send\n          (int 2) :*\n          (lvar :options [] )))) :to_f)) floor to_i ","(send\n  (send\n    (lvar :options [] ) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (self) :module_count) :+\n        (send\n          (int 2) :*\n          (lvar :border_modules)))) :to_f)) floor to_i ","(send\n  (send\n    (lvar :total_image_size) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (self) :module_count) :+\n        (send\n          (int 2) :*\n          (lvar :options [] _modules)))) :to_f)) floor ","(send\n  (send\n    (lvar :total_image_size) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (self) :module_count) :+\n        (send\n          (int 2) :*\n          (lvar :options [] )))) :to_f)) floor ","(send\n  (send\n    (lvar :options [] ) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (self) :module_count) :+\n        (send\n          (int 2) :*\n          (lvar :border_modules)))) :to_f)) floor ","options []  to_f / ","(send\n  (send\n    (self) :module_count) :+\n  (send\n    (int 2) :*\n    (lvar :options [] _modules))) to_f ","(send\n  (send\n    (self) :module_count) :+\n  (send\n    (int 2) :*\n    (lvar :options [] ))) to_f ","options []  to_f ","default_img_default_img_options merge  merge ","default_img_options merge  [] != ","default_img_options merge  length == ","default_img_options merge  length ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :resize_gte_to)) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@qrcode) :module_count) :+\n        (lvar :border * ))) :to_f)) ceil to_i ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :resize_gte_to)) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@qrcode) :module_count) :+\n        (lvar :total_options [] ))) :to_f)) ceil to_i ","(send\n  (send\n    (send\n      (lvar :default_img_options merge ) :[]\n      (sym :resize_gte_to)) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@qrcode) :module_count) :+\n        (lvar :total_border))) :to_f)) ceil to_i ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :resize_gte_to)) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@qrcode) :module_count) :+\n        (lvar :border * ))) :to_f)) ceil ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :resize_gte_to)) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@qrcode) :module_count) :+\n        (lvar :total_options [] ))) :to_f)) ceil ","(send\n  (send\n    (send\n      (lvar :default_img_options merge ) :[]\n      (sym :resize_gte_to)) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@qrcode) :module_count) :+\n        (lvar :total_border))) :to_f)) ceil ","(send\n  (send\n    (ivar :@qrcode) :module_count) :+\n  (lvar :border * )) to_f ","(send\n  (send\n    (ivar :@qrcode) :module_count) :+\n  (lvar :total_options [] )) to_f ","(send\n  (send\n    (lvar :total_image_size) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@qrcode) :module_count) :+\n        (send\n          (int 2) :*\n          (lvar :options [] _modules)))) :to_f)) floor to_i ","(send\n  (send\n    (lvar :total_image_size) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@qrcode) :module_count) :+\n        (send\n          (int 2) :*\n          (lvar :options [] )))) :to_f)) floor to_i ","(send\n  (send\n    (lvar :options [] ) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@qrcode) :module_count) :+\n        (send\n          (int 2) :*\n          (lvar :border_modules)))) :to_f)) floor to_i ","(send\n  (send\n    (lvar :total_image_size) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@qrcode) :module_count) :+\n        (send\n          (int 2) :*\n          (lvar :options [] _modules)))) :to_f)) floor ","(send\n  (send\n    (lvar :total_image_size) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@qrcode) :module_count) :+\n        (send\n          (int 2) :*\n          (lvar :options [] )))) :to_f)) floor ","(send\n  (send\n    (lvar :options [] ) :to_f) :/\n  (send\n    (begin\n      (send\n        (send\n          (ivar :@qrcode) :module_count) :+\n        (send\n          (int 2) :*\n          (lvar :border_modules)))) :to_f)) floor ","(send\n  (send\n    (ivar :@qrcode) :module_count) :+\n  (send\n    (int 2) :*\n    (lvar :options [] _modules))) to_f ","(send\n  (send\n    (ivar :@qrcode) :module_count) :+\n  (send\n    (int 2) :*\n    (lvar :options [] ))) to_f ","default_img_options merge  has_key? ","default_img_options merge  [] nil? ! ","default_img_options merge  [] nil? ","default_img_options merge  [] is_a? "]}," RQRCode Export HTML Cell dark?":{"type":"method","name":"dark?","children":[],"call":[" qr dark? "," col_index "," row_index "," qr "]}," RQRCode Export HTML Cell html_class":{"type":"method","name":"html_class","children":[],"call":[" dark? "," qr checked? "," col_index "," row_index "," qr "]}," RQRCode Export HTML Cell as_html":{"type":"method","name":"as_html","children":[],"call":[" html_class "]}," RQRCode Export HTML Row cells":{"type":"method","name":"cells","children":[],"call":["Cell  new "," row_index "," qr "," qr modules each_with_index map "," qr modules each_with_index "," qr modules "]}," RQRCode Export HTML Row as_html":{"type":"method","name":"as_html","children":[],"call":["(str \"<tr>\") join "," cells map join "," cells map "," cells "]}," RQRCode Export HTML Rows rows":{"type":"method","name":"rows","children":[],"call":["Row  new "," qr "," qr modules each_with_index map "," qr modules each_with_index "," qr modules "]}," RQRCode Export HTML Rows as_html":{"type":"method","name":"as_html","children":[],"call":[" rows map join "," rows map "," rows "]}," RQRCode Export HTML rows":{"type":"method","name":"rows","children":[],"call":["Rows  new "]}," RQRCode Export HTML as_html":{"type":"method","name":"as_html","children":[],"call":["(str \"<table>\") join "," rows as_html "," rows "]}," RQRCode Export ANSI as_ansi":{"type":"method","name":"as_ansi","children":[],"call":["quiet_rows + + ","quiet_rows + ","quiet_row * ","light + + + ","light + + ","light + ","fill_character * ","output each_line first scan length ","output each_line first scan ","output each_line first ","output each_line ","output << ","row << ","normal + ","previous_dark != "," is_dark ","@modules each_index ","options fetch ","(pair\n  (sym :light)\n  (str \"\\e[47m\")) merge ","output join ","output first scan length ","output first scan ","output first ","@qrcode checked? ","@qrcode modules each_index ","@qrcode modules ","quiet_row *  + + ","light + + + s + + ","light + + s + + ","quiet_light + s + + ","quiet_row *  + ","light + + + s + ","light + + s + ","quiet_light + s + ","light + + +  * ","light + +  * ","quiet_light +  * ","options fetch  + + + ","options fetch  + + ","options fetch  + ","options fetch  * ","light +  << ","previous_options fetch  != "," is_options fetch  ","(pair\n  (sym :light)\n  (str \"\\e[47m\")) merge  fetch ","(pair\n  (sym :options fetch )\n  (str \"\\e[47m\")) merge "]}," RQRCode CoreExtensions Integer Bitwise rszf":{"type":"method","name":"rszf","children":[],"call":["(send\n  (self) :>>\n  (lvar :count)) & ","(send\n  (int 2) :**\n  (begin\n    (send\n      (begin\n        (send\n          (send\n            (self) :size) :*\n          (int 8))) :-\n      (lvar :count)))) - ","2 ** ","(send\n  (send\n    (self) :size) :*\n  (int 8)) - "," size * "," size "," >> "]}," RQRCode CoreExtensions Array Behavior extract_options!":{"type":"method","name":"extract_options!","children":[],"call":[" pop "," last is_a? "," last "]}," RQRCode QRCode setup_type_info":{"type":"method","name":"setup_type_info","children":[],"call":["@modules [] []= ","test ! ","@modules [] ","@module_count - ","15 - - ","15 - ","15 - - + ","i < ","@module_count - - ","(send\n  (begin\n    (send\n      (lvar :bits) :>>\n      (lvar :i))) :&\n  (int 1)) == ","(send\n  (lvar :bits) :>>\n  (lvar :i)) & ","bits >> ","(erange\n  (int 0)\n  (int 15)) each ","@module_count - + ","i + ","QRUtil  get_bch_type_info ","@error_correct_level << | ","@error_correct_level << ","(send\n  (begin\n    (send\n      (lvar :QRUtil  get_bch_type_info ) :>>\n      (lvar :i))) :&\n  (int 1)) == ","(send\n  (lvar :QRUtil  get_bch_type_info ) :>>\n  (lvar :i)) & ","QRUtil  get_bch_type_info  >> "]}," RQRCode QRCode setup_type_number":{"type":"method","name":"setup_type_number","children":[],"call":["@modules [] []= ","(send\n  (lvar :i) :/\n  (int 3)) floor ","i / ","@modules [] ","i % + - - ","i % + - ","i % + ","i % ","(send\n  (begin\n    (send\n      (lvar :bits) :>>\n      (lvar :i))) :&\n  (int 1)) == ","(send\n  (lvar :bits) :>>\n  (lvar :i)) & ","bits >> ","test ! ","(erange\n  (int 0)\n  (int 18)) each ","QRUtil  get_bch_type_number ","(send\n  (begin\n    (send\n      (lvar :QRUtil  get_bch_type_number ) :>>\n      (lvar :i))) :&\n  (int 1)) == ","(send\n  (lvar :QRUtil  get_bch_type_number ) :>>\n  (lvar :i)) & ","QRUtil  get_bch_type_number  >> "]}," RQRCode QRCode setup_position_adjust_pattern":{"type":"method","name":"setup_position_adjust_pattern","children":[],"call":["@modules [] []= ","col + ","@modules [] ","row + ","c == ","r == ","(irange\n  (int -2)\n  (int 2)) each ","@modules [] [] nil? ","@modules [] [] ","pos [] ","(erange\n  (int 0)\n  (send\n    (lvar :pos) :size)) each ","pos size ","QRUtil  get_pattern_position ","pos []  + ","QRUtil  get_pattern_position  [] ","(erange\n  (int 0)\n  (send\n    (lvar :QRUtil  get_pattern_position ) :size)) each ","QRUtil  get_pattern_position  size ","QRUtil  get_pattern_QRUtil  get_pattern_position ition "]}," RQRCode QRCode setup_timing_pattern":{"type":"method","name":"setup_timing_pattern","children":[],"call":["@modules [] []= ","c % == ","c % ","@modules [] ","@modules [] [] nil? ","@modules [] [] ","(erange\n  (int 8)\n  (send\n    (ivar :@module_count) :-\n    (int 8))) each ","@module_count - ","r % == ","r % ","i % == ","i % "]}," RQRCode QRCode setup_position_probe_pattern":{"type":"method","name":"setup_position_probe_pattern","children":[],"call":["@modules [] []= ","col + ","@modules [] ","row + ","c <= ","2 <= ","r <= ","r == ","0 <= ","c == ","@module_count <= ","(send\n  (lvar :col) :+\n  (lvar :c)) <= ","(irange\n  (int -1)\n  (int 7)) each ","(send\n  (lvar :row) :+\n  (lvar :r)) <= "]}," RQRCode QRCode to_console":{"type":"method","name":"to_console","children":[],"call":[" puts ","tmp join ","tmp << "," is_dark ","(erange\n  (int 0)\n  (ivar :@module_count)) each ","res join ","res << ","@modules each_index "]}," RQRCode QRUtil get_lost_point":{"type":"method","name":"get_lost_point","children":[],"call":[]}," RQRCode QRUtil get_pattern_position":{"type":"method","name":"get_pattern_position","children":[],"call":[]}," RQRCode QRUtil get_bch_type_number":{"type":"method","name":"get_bch_type_number","children":[],"call":[]}," RQRCode QRUtil get_bch_type_info":{"type":"method","name":"get_bch_type_info","children":[],"call":[]}," RQRCode Export SVG Edge end_y":{"type":"method","name":"end_y","children":[],"call":[" start_y "," start_y - "," start_y + "," direction "]}," RQRCode Export SVG Edge end_x":{"type":"method","name":"end_x","children":[],"call":[" start_x "," start_x - "," start_x + "," direction "]}," RQRCode Export SVG Rect build":{"type":"method","name":"build","children":[],"call":["@result << ","tmp join ","tmp << ","@qrcode checked? ","r * + ","r * ","c * + ","c * ","@qrcode modules each_index ","@qrcode modules ","color is_a? ","@qrcode modules each_inder * +  "]}," RQRCode Export SVG Path build":{"type":"method","name":"build","children":[],"call":["@result << ","path join ","path << ","edge_loop_string << ","SVG_PATH_COMMANDS  [] ","edges length ","edge_loop chunk to_a [] each ","edge_loop chunk to_a [] ","edge_loop chunk to_a ","edge_loop chunk ","first_edge start_y ","first_edge start_x ","edge_loop first ","edge_matrix [] [] ","edge end_x ","edge_matrix [] ","edge end_y ","edge_matrix [] []= ","edge start_x ","edge start_y ","matrix_cell empty? ","matrix_cell delete ","edge_loop << ","next_matrix_cell first ","edge_matrix find find ","edge_matrix find ","edge_count > ","edge_matrix flatten compact count ","edge_matrix flatten compact ","edge_matrix flatten ","(or-asgn\n  (send\n    (send\n      (lvar :edge_matrix) :[]\n      (send\n        (lvar :edge) :start_y)) :[]\n    (send\n      (lvar :edge) :start_x))\n  (array)) << ","Edge  new ","row_index + ","(send\n  (send\n    (array\n      (false)) :+\n    (lvar :second_row)) :+\n  (array\n    (false))) each_cons each_with_index ","(send\n  (send\n    (array\n      (false)) :+\n    (lvar :second_row)) :+\n  (array\n    (false))) each_cons ","(false) + + ","(false) + ","column_index + ","first_row zip each_with_index ","first_row zip ","(send\n  (send\n    (lvar :empty_row) :+\n    (lvar :modules_array)) :+\n  (lvar :empty_row)) each_cons with_index ","(send\n  (send\n    (lvar :empty_row) :+\n    (lvar :modules_array)) :+\n  (lvar :empty_row)) each_cons ","empty_row + + ","empty_row + ","Array  new ","matrix_width - ","modules_array length + ","modules_array length ","@qrcode modules ","color is_a? ","SVG_PATH_COMMANDS  []  << ","next_matrix_cell first _loop_string << ","next_matrix_cell first s length ","next_matrix_cell first _loop chunk to_a [] each ","next_matrix_cell first _loop chunk to_a [] ","next_matrix_cell first _loop chunk to_a ","next_matrix_cell first _loop chunk ","edge_loop first  start_y ","first_next_matrix_cell first  start_y ","edge_loop first  start_x ","first_next_matrix_cell first  start_x ","next_matrix_cell first _loop first ","next_matrix_cell first _matrix [] [] ","next_matrix_cell first  end_x ","next_matrix_cell first _matrix [] ","next_matrix_cell first  end_y ","next_matrix_cell first _matrix [] []= ","next_matrix_cell first  start_x ","next_matrix_cell first  start_y ","edge_matrix [] []  empty? ","edge_matrix [] []  delete ","next_matrix_cell first _loop << ","next_edge_matrix [] []  first ","next_matrix_cell first _matrix find find ","next_matrix_cell first _matrix find ","next_matrix_cell first _count > ","edge_matrix flatten compact count  > ","next_matrix_cell first _matrix flatten compact count ","next_matrix_cell first _matrix flatten compact ","next_matrix_cell first _matrix flatten ","(or-asgn\n  (send\n    (send\n      (lvar :next_matrix_cell first _matrix) :[]\n      (send\n        (lvar :next_matrix_cell first ) :start_y)) :[]\n    (send\n      (lvar :next_matrix_cell first ) :start_x))\n  (array)) << ","(send\n  (send\n    (lvar :empty_row) :+\n    (lvar :@qrcode modules )) :+\n  (lvar :empty_row)) each_cons with_index ","(send\n  (send\n    (lvar :empty_row) :+\n    (lvar :@qrcode modules )) :+\n  (lvar :empty_row)) each_cons ","@qrcode modules  length + ","@qrcode modules  length "]}," RQRCode Export SVG BaseOutputSVG initialize":{"type":"method","name":"initialize","children":[],"call":[]}}