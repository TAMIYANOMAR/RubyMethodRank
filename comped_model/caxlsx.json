{" Axlsx trust_input=":{"type":"method","name":"trust_input=","children":[],"call":[]}," Axlsx trust_input":{"type":"method","name":"trust_input","children":[],"call":[]}," Axlsx sanitize":{"type":"method","name":"sanitize","children":[],"call":[]}," Axlsx camel":{"type":"method","name":"camel","children":[],"call":[]}," Axlsx range_to_a":{"type":"method","name":"range_to_a","children":[],"call":[]}," Axlsx cell_r":{"type":"method","name":"cell_r","children":[],"call":[]}," Axlsx col_ref":{"type":"method","name":"col_ref","children":[],"call":[]}," Axlsx name_to_indices":{"type":"method","name":"name_to_indices","children":[],"call":[]}," Axlsx coder":{"type":"method","name":"coder","children":[],"call":[]}," Axlsx sort_cells":{"type":"method","name":"sort_cells","children":[],"call":[]}," Axlsx cell_range":{"type":"method","name":"cell_range","children":[],"call":[]}," Axlsx WorksheetHyperlinks to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","hyperlink to_xml_string ","@list each "," empty? "," each "]}," Axlsx WorksheetHyperlinks relationships":{"type":"method","name":"relationships","children":[],"call":["hyperlink relationship "," map "," empty? "]}," Axlsx WorksheetHyperlinks add":{"type":"method","name":"add","children":[],"call":["@list last ","@list << ","WorksheetHyperlink  new "," last "," << "]}," Axlsx WorksheetHyperlinks initialize":{"type":"method","name":"initialize","children":[],"call":["DataTypeValidator  validate "]}," Axlsx WorksheetHyperlink location_or_id":{"type":"method","name":"location_or_id","children":[],"call":["Axlsx  coder encode "," location ","Axlsx  coder "," relationship Id "," relationship ","@target == "]}," Axlsx WorksheetHyperlink to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "," location_or_id "]}," Axlsx WorksheetHyperlink relationship":{"type":"method","name":"relationship","children":[],"call":["Relationship  new "," location ","@target == "]}," Axlsx WorksheetHyperlink ref=":{"type":"method","name":"ref=","children":[],"call":["Axlsx  validate_string ","cell_reference r ","cell_reference is_a? ","cell_reference r  r ","cell_reference r  is_a? "]}," Axlsx WorksheetHyperlink target=":{"type":"method","name":"target=","children":[],"call":[]}," Axlsx WorksheetHyperlink initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," parse_options ","DataTypeValidator  validate "]}," Axlsx WorksheetDrawing to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," relationship Id "," relationship "," has_drawing? "]}," Axlsx WorksheetDrawing relationship":{"type":"method","name":"relationship","children":[],"call":["Relationship  new "," drawing pn "," drawing "," has_drawing? "]}," Axlsx WorksheetDrawing has_drawing?":{"type":"method","name":"has_drawing?","children":[],"call":["@drawing is_a? "]}," Axlsx WorksheetDrawing add_image":{"type":"method","name":"add_image","children":[],"call":[" drawing add_image "," drawing ","Drawing  new "," worksheet "]}," Axlsx WorksheetDrawing add_chart":{"type":"method","name":"add_chart","children":[],"call":[" drawing add_chart "," drawing ","Drawing  new "," worksheet "]}," Axlsx WorksheetDrawing initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","worksheet is_a? "]}," Axlsx WorksheetComments to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," drawing_rId "," has_comments? "]}," Axlsx WorksheetComments drawing_rId":{"type":"method","name":"drawing_rId","children":[],"call":["(send\n  (send\n    (send nil :comments) :relationships) :find) Id ","r Type == ","r Type "," comments relationships find "," comments relationships "," comments "]}," Axlsx WorksheetComments has_comments?":{"type":"method","name":"has_comments?","children":[],"call":[" comments empty? ! "," comments empty? "," comments "]}," Axlsx WorksheetComments relationships":{"type":"method","name":"relationships","children":[],"call":[" comments relationships "," comments "," has_comments? "]}," Axlsx WorksheetComments add_comment":{"type":"method","name":"add_comment","children":[],"call":[" comments add_comment "," comments "]}," Axlsx WorksheetComments comments":{"type":"method","name":"comments","children":[],"call":["Comments  new "," worksheet "]}," Axlsx WorksheetComments initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","worksheet is_a? "]}," Axlsx Worksheet find_or_create_column_info":{"type":"method","name":"find_or_create_column_info","children":[],"call":["Col  new ","index + "," column_info [] "," column_info "]}," Axlsx Worksheet update_column_info":{"type":"method","name":"update_column_info","children":[],"call":["col update_width "," workbook use_autowidth "," workbook ","widths [] ","widths [] == "," find_or_create_column_info ","cells each_with_index ","width == "," find_or_create_column_info  update_width ","col update_widths []  "," workbook use_autowidths []  ","widths [] s [] ","widths [] s [] == "," find_or_create_ find_or_create_column_info umn_info ","widths []  == "]}," Axlsx Worksheet workbook=":{"type":"method","name":"workbook=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Worksheet worksheet_comments":{"type":"method","name":"worksheet_comments","children":[],"call":["WorksheetComments  new "]}," Axlsx Worksheet worksheet_drawing":{"type":"method","name":"worksheet_drawing","children":[],"call":["WorksheetDrawing  new "]}," Axlsx Worksheet sheet_data":{"type":"method","name":"sheet_data","children":[],"call":["SheetData  new "]}," Axlsx Worksheet worksheet_node":{"type":"method","name":"worksheet_node","children":[],"call":["(str \"<worksheet xmlns=\\\"%s\\\" xmlns:r=\\\"%s\\\" xml:space=\\\"\") % "," xml_space "]}," Axlsx Worksheet merged_cells":{"type":"method","name":"merged_cells","children":[],"call":["MergedCells  new "]}," Axlsx Worksheet data_validations":{"type":"method","name":"data_validations","children":[],"call":["DataValidations  new "]}," Axlsx Worksheet conditional_formattings":{"type":"method","name":"conditional_formattings","children":[],"call":["ConditionalFormattings  new "]}," Axlsx Worksheet protected_ranges":{"type":"method","name":"protected_ranges","children":[],"call":["ProtectedRanges  new "]}," Axlsx Worksheet range":{"type":"method","name":"range","children":[],"call":["cells << ","r cells [] each ","r cells [] ","last index ","first index ","r cells "," rows [] each "," rows [] ","last row index ","last row ","first row index ","first row "," rows ","r [] each ","r [] ","last row row_index ","first row row_index "]}," Axlsx Worksheet serializable_parts":{"type":"method","name":"serializable_parts","children":[],"call":[" tables "," worksheet_comments "," worksheet_drawing "," col_breaks "," row_breaks "," header_footer "," page_setup "," page_margins "," print_options "," hyperlinks "," data_validations "," conditional_formattings "," merged_cells "," auto_filter "," protected_ranges "," sheet_calc_pr "," sheet_data "," column_info "," sheet_format_pr "," sheet_view "," dimension "," sheet_pr "]}," Axlsx Worksheet validate_sheet_name":{"type":"method","name":"validate_sheet_name","children":[],"call":[" raise ","ERR_DUPLICATE_SHEET_NAME  % ","sheet_names include? ","s name ","(send\n  (send\n    (ivar :@workbook) :worksheets) :reject) map ","s == ","@workbook worksheets reject ","@workbook worksheets ","Axlsx  coder encode ","Axlsx  coder ","ERR_SHEET_NAME_CHARACTER_FORBIDDEN  % ","name include? ","[]*/\\?: chars any? ","[]*/\\?: chars ","ERR_SHEET_NAME_TOO_LONG  % ","name size > ","name size ","DataTypeValidator  validate ","name bytesize > ","name bytesize ","character_length > ","name encode [] encode bytesize / ","name encode [] encode bytesize ","name encode [] encode ","name encode [] ","name encode ","name empty? ","WORKSHEET_NAME_FORBIDDEN_CHARS  any? "," format ","sheet_Axlsx  coder encode s include? ","(send\n  (send\n    (ivar :@workbook) :worksheets) :reject) map  include? ","s Axlsx  coder encode  ","Axlsx  coder encode  include? ","Axlsx  coder encode  size > ","Axlsx  coder encode  size ","Axlsx  coder encode  bytesize > ","Axlsx  coder encode  bytesize ","name encode [] encode bytesize /  > ","Axlsx  coder encode  encode [] encode bytesize / ","Axlsx  coder encode  encode [] encode bytesize ","Axlsx  coder encode  encode [] encode ","Axlsx  coder encode  encode [] ","Axlsx  coder encode  encode ","Axlsx  coder encode  empty? "]}," Axlsx Worksheet outline":{"type":"method","name":"outline","children":[],"call":[" sheet_view show_outline_symbols= "," sheet_view ","item hidden= ","item outline_level= ","(lvasgn :item\n  (send\n    (lvar :collection) :[]\n    (lvar :index))) nil? ","collection [] ","range each ","collection []  hidden= ","collection []  outline_level= ","(lvasgn :collection [] \n  (send\n    (lvar :collection) :[]\n    (lvar :index))) nil? "]}," Axlsx Worksheet xml_space":{"type":"method","name":"xml_space","children":[],"call":[" workbook xml_space "," workbook "]}," Axlsx Worksheet outline_level_columns":{"type":"method","name":"outline_level_columns","children":[],"call":[" outline "," column_info "]}," Axlsx Worksheet outline_level_rows":{"type":"method","name":"outline_level_rows","children":[],"call":[" outline "," rows "]}," Axlsx Worksheet styles":{"type":"method","name":"styles","children":[],"call":[" workbook styles "," workbook "]}," Axlsx Worksheet name_to_cell":{"type":"method","name":"name_to_cell","children":[],"call":["r cells [] ","r cells "," rows [] "," rows ","Axlsx  name_to_indices ","r [] "," rows []  cells [] "," rows []  cells ","  rows [] ows [] ","  rows [] ows "," rows []  [] "]}," Axlsx Worksheet []":{"type":"method","name":"[]","children":[],"call":[" range ","parts first ","parts size == ","parts size "," name_to_cell ","cell_def split map ","cell_def split "," rows [] "," rows ","cell_def is_a? "," raise ","ERR_CELL_REFERENCE_MISSING_CELL  % ","cell_def split last ","parts last nil? ","parts last ","cell_def split first ","parts first nil? ","ERR_CELL_REFERENCE_INVALID  % ","parts size > "," format "]}," Axlsx Worksheet relationships":{"type":"method","name":"relationships","children":[],"call":["r + ","(send\n  (send nil :tables) :relationships) flatten compact ","(send\n  (send nil :tables) :relationships) flatten "," pivot_tables relationships "," pivot_tables "," worksheet_drawing relationship "," worksheet_drawing "," hyperlinks relationships "," hyperlinks "," worksheet_comments relationships "," worksheet_comments "," tables relationships "," tables ","Relationships  new ","Relationships  new  + ","(send\n  (send nil :tables) :Relationships  new elationships) flatten compact ","(send\n  (send nil :tables) :Relationships  new elationships) flatten "," pivot_tables Relationships  new elationships "," woRelationships  new ksheet_dRelationships  new awing Relationships  new elationship "," woRelationships  new ksheet_dRelationships  new awing "," hypeRelationships  new links Relationships  new elationships "," hypeRelationships  new links "," woRelationships  new ksheet_comments Relationships  new elationships "," woRelationships  new ksheet_comments "," tables Relationships  new elationships "]}," Axlsx Worksheet to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["Axlsx  sanitize ","str << ","item to_xml_string "," serializable_parts each "," serializable_parts "," worksheet_node "," auto_filter apply "," auto_filter "," auto_filter range "," add_autofilter_defined_name_to_workbook "]}," Axlsx Worksheet row_style":{"type":"method","name":"row_style","children":[],"call":["cell style= ","cells each ","(send\n  (send\n    (send nil :cols) :[]\n    (begin\n      (irange\n        (lvar :offset)\n        (int -1)))) :map) flatten compact ","(send\n  (send\n    (send nil :cols) :[]\n    (begin\n      (irange\n        (lvar :offset)\n        (int -1)))) :map) flatten ","column [] "," cols [] map "," cols [] "," cols ","options delete ","(send\n  (send\n    (send nil :cols) :[]\n    (begin\n      (irange\n        (lvar :offset)\n        (int -1)))) :map) flatten compact  each "]}," Axlsx Worksheet col_style":{"type":"method","name":"col_style","children":[],"call":["cell style= ","cells each ","(send\n  (send\n    (ivar :@rows) :[]\n    (begin\n      (irange\n        (lvar :offset)\n        (int -1)))) :map) flatten compact ","(send\n  (send\n    (ivar :@rows) :[]\n    (begin\n      (irange\n        (lvar :offset)\n        (int -1)))) :map) flatten ","row cells [] ","row cells ","@rows [] map ","@rows [] ","options delete ","row [] ","(send\n  (send\n    (ivar :@rows) :[]\n    (begin\n      (irange\n        (lvar :offset)\n        (int -1)))) :map) flatten compact  each ","row (send\n  (send\n    (ivar :@rows) :[]\n    (begin\n      (irange\n        (lvar :offset)\n        (int -1)))) :map) flatten compact  [] ","row (send\n  (send\n    (ivar :@rows) :[]\n    (begin\n      (irange\n        (lvar :offset)\n        (int -1)))) :map) flatten compact  "]}," Axlsx Worksheet column_widths":{"type":"method","name":"column_widths","children":[],"call":[" find_or_create_column_info width= "," find_or_create_column_info ","Axlsx  validate_unsigned_numeric ","value == ","widths each_with_index ","value nil? "]}," Axlsx Worksheet add_page_break":{"type":"method","name":"add_page_break","children":[],"call":[" row_breaks add_break "," row_breaks "," col_breaks add_break "," col_breaks ","column_index > ","cell pos ","Axlsx  name_to_indices ","cell is_a? ","DataTypeValidator  validate "]}," Axlsx Worksheet add_image":{"type":"method","name":"add_image","children":[],"call":[" block_given? "," worksheet_drawing add_image "," worksheet_drawing "," worksheet_drawing add_ worksheet_drawing add_image  "]}," Axlsx Worksheet add_comment":{"type":"method","name":"add_comment","children":[],"call":[" worksheet_comments add_comment "," worksheet_comments "]}," Axlsx Worksheet add_pivot_table":{"type":"method","name":"add_pivot_table","children":[],"call":[" pivot_tables last "," pivot_tables "," block_given? "," pivot_tables << ","PivotTable  new "]}," Axlsx Worksheet add_table":{"type":"method","name":"add_table","children":[],"call":[" tables last "," tables "," block_given? "," tables << ","Table  new "]}," Axlsx Worksheet add_chart":{"type":"method","name":"add_chart","children":[],"call":[" block_given? "," worksheet_drawing add_chart "," worksheet_drawing "," worksheet_drawing add_ worksheet_drawing add_chart  "]}," Axlsx Worksheet add_hyperlink":{"type":"method","name":"add_hyperlink","children":[],"call":[" hyperlinks add "," hyperlinks "]}," Axlsx Worksheet add_data_validation":{"type":"method","name":"add_data_validation","children":[],"call":[" data_validations << "," data_validations ","dv sqref= ","DataValidation  new ","DataValidation  new  sqref= "]}," Axlsx Worksheet add_conditional_formatting":{"type":"method","name":"add_conditional_formatting","children":[],"call":[" conditional_formattings "," conditional_formattings << ","cf add_rules ","ConditionalFormatting  new ","ConditionalFormatting  new  add_rules "]}," Axlsx Worksheet add_row":{"type":"method","name":"add_row","children":[],"call":["@rows last "," block_given? "," update_column_info ","options delete ","@rows last cells ","Row  new ","options []= "," escape_formulas ","options [] nil? ","options [] ","@Row  new s last ","@Row  new s last cells "]}," Axlsx Worksheet drawing":{"type":"method","name":"drawing","children":[],"call":[" worksheet_drawing drawing "," worksheet_drawing "]}," Axlsx Worksheet index":{"type":"method","name":"index","children":[],"call":["@workbook worksheets index ","@workbook worksheets "]}," Axlsx Worksheet rId":{"type":"method","name":"rId","children":[],"call":["@workbook relationships for Id ","@workbook relationships for ","@workbook relationships "]}," Axlsx Worksheet rels_pn":{"type":"method","name":"rels_pn","children":[],"call":["WORKSHEET_RELS_PN  % "," index + "," index "," format "]}," Axlsx Worksheet pn":{"type":"method","name":"pn","children":[],"call":["WORKSHEET_PN  % "," index + "," index "," format "]}," Axlsx Worksheet auto_filter=":{"type":"method","name":"auto_filter=","children":[],"call":[" auto_filter range= "," auto_filter ","DataTypeValidator  validate "]}," Axlsx Worksheet name=":{"type":"method","name":"name=","children":[],"call":["Axlsx  coder encode ","Axlsx  coder "," validate_sheet_name "]}," Axlsx Worksheet fit_to_page=":{"type":"method","name":"fit_to_page=","children":[],"call":[" fit_to_page? "," warn "]}," Axlsx Worksheet selected":{"type":"method","name":"selected","children":[],"call":[" sheet_view tab_selected "," sheet_view "," warn "]}," Axlsx Worksheet show_gridlines":{"type":"method","name":"show_gridlines","children":[],"call":[" sheet_view show_grid_lines "," sheet_view "," warn "]}," Axlsx Worksheet selected=":{"type":"method","name":"selected=","children":[],"call":[" sheet_view tab_selected= "," sheet_view ","Axlsx  validate_boolean "," warn "]}," Axlsx Worksheet show_gridlines=":{"type":"method","name":"show_gridlines=","children":[],"call":[" sheet_view show_grid_lines= "," sheet_view ","Axlsx  validate_boolean "," warn "]}," Axlsx Worksheet sheet_pr":{"type":"method","name":"sheet_pr","children":[],"call":["SheetPr  new "]}," Axlsx Worksheet dimension":{"type":"method","name":"dimension","children":[],"call":["Dimension  new "]}," Axlsx Worksheet protect_range":{"type":"method","name":"protect_range","children":[],"call":[" protected_ranges add_range "," protected_ranges "]}," Axlsx Worksheet merge_cells":{"type":"method","name":"merge_cells","children":[],"call":[" merged_cells add "," merged_cells "]}," Axlsx Worksheet cells":{"type":"method","name":"cells","children":[],"call":[" rows flatten "," rows "]}," Axlsx Worksheet header_footer":{"type":"method","name":"header_footer","children":[],"call":[" block_given? ","HeaderFooter  new "]}," Axlsx Worksheet print_options":{"type":"method","name":"print_options","children":[],"call":[" block_given? ","PrintOptions  new "]}," Axlsx Worksheet page_setup":{"type":"method","name":"page_setup","children":[],"call":[" block_given? ","PageSetup  new "]}," Axlsx Worksheet page_margins":{"type":"method","name":"page_margins","children":[],"call":[" block_given? ","PageMargins  new "]}," Axlsx Worksheet column_info":{"type":"method","name":"column_info","children":[],"call":["Cols  new "]}," Axlsx Worksheet fit_to_page?":{"type":"method","name":"fit_to_page?","children":[],"call":[" page_setup fit_to_page? "," page_setup "," instance_values keys include? "," instance_values keys "," instance_values ","Axlsx  instance_values_for keys include? ","Axlsx  instance_values_for keys ","Axlsx  instance_values_for ","Axlsx  instance_values_for key? "]}," Axlsx Worksheet auto_filter":{"type":"method","name":"auto_filter","children":[],"call":["AutoFilter  new "]}," Axlsx Worksheet cols":{"type":"method","name":"cols","children":[],"call":["@rows transpose "]}," Axlsx Worksheet rows":{"type":"method","name":"rows","children":[],"call":["SimpleTypedList  new "]}," Axlsx Worksheet comments":{"type":"method","name":"comments","children":[],"call":[" worksheet_comments comments "," worksheet_comments "," worksheet_comments has_comments? "]}," Axlsx Worksheet hyperlinks":{"type":"method","name":"hyperlinks","children":[],"call":["WorksheetHyperlinks  new "]}," Axlsx Worksheet row_breaks":{"type":"method","name":"row_breaks","children":[],"call":["RowBreaks  new "]}," Axlsx Worksheet col_breaks":{"type":"method","name":"col_breaks","children":[],"call":["ColBreaks  new "]}," Axlsx Worksheet pivot_tables":{"type":"method","name":"pivot_tables","children":[],"call":["PivotTables  new "]}," Axlsx Worksheet tables":{"type":"method","name":"tables","children":[],"call":["Tables  new "]}," Axlsx Worksheet sheet_format_pr":{"type":"method","name":"sheet_format_pr","children":[],"call":[" yeild "," block_given? ","SheetFormatPr  new "]}," Axlsx Worksheet sheet_view":{"type":"method","name":"sheet_view","children":[],"call":[" block_given? ","SheetView  new "]}," Axlsx Worksheet sheet_protection":{"type":"method","name":"sheet_protection","children":[],"call":[" block_given? ","SheetProtection  new "]}," Axlsx Worksheet sheet_calc_pr":{"type":"method","name":"sheet_calc_pr","children":[],"call":["SheetCalcPr  new "]}," Axlsx Worksheet name":{"type":"method","name":"name","children":[],"call":["Sheet + ","(send\n  (send nil :index) :+\n  (int 1)) to_s "," index + "," index "]}," Axlsx Worksheet initialize_page_options":{"type":"method","name":"initialize_page_options","children":[],"call":["ColBreaks  new ","RowBreaks  new ","HeaderFooter  new ","options [] ","PrintOptions  new ","PageSetup  new ","PageMargins  new "]}," Axlsx Worksheet initialize":{"type":"method","name":"initialize","children":[],"call":["@workbook worksheets << ","@workbook worksheets "," parse_options "," initialize_page_options "," workbook= "," block_given? "," index + "," index "," escape_formulas= ","wb escape_formulas "]}," Axlsx Worksheet thin_chars":{"type":"method","name":"thin_chars","children":[],"call":[]}," Axlsx Tables to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","table rId ","@list each "," size "," empty? "," each "]}," Axlsx Tables relationships":{"type":"method","name":"relationships","children":[],"call":["Relationship  new ","table pn "," map "," empty? "]}," Axlsx Tables initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","worksheet is_a? "]}," Axlsx TableStyleInfo to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "," serialized_tag "]}," Axlsx TableStyleInfo initialize_defaults":{"type":"method","name":"initialize_defaults","children":[],"call":[" send ","(str \"show_first_column\") each "]}," Axlsx TableStyleInfo initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "," initialize_defaults "]}," Axlsx Table header_cells":{"type":"method","name":"header_cells","children":[],"call":["@sheet [] ","@ref gsub "]}," Axlsx Table to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," table_style_info to_xml_string "," table_style_info ","str << << << << << ","str << << << << ","cell value ","str << << << ","str << << ","(send\n  (lvar :index) :+\n  (int 1)) to_s ","index + "," header_cells each_with_index "," header_cells "," header_cells length to_s "," header_cells length ","str << << << << << << << << << ","str << << << << << << << << ","@name gsub ","str << << << << << << << ","str << << << << << << ","(send\n  (send nil :index) :+\n  (int 1)) to_s "," index + "," index ","<tableColumn id =\" << << << << ","<tableColumn id =\" << << << ","<tableColumn id =\" << << ","<tableColumn id =\" << ","<tableColumns count=\" << << ","<tableColumns count=\" << ","<autoFilter ref=\" << << ","<autoFilter ref=\" << ","ref=\" << << ","ref=\" << ","<table xmlns=\" << << << << << << << << ","<table xmlns=\" << << << << << << << ","<table xmlns=\" << << << << << << ","<table xmlns=\" << << << << << ","<table xmlns=\" << << << << ","<table xmlns=\" << << << ","<table xmlns=\" << << ","<table xmlns=\" << ","cell clean_value "]}," Axlsx Table table_style_info":{"type":"method","name":"table_style_info","children":[],"call":["TableStyleInfo  new "]}," Axlsx Table name=":{"type":"method","name":"name=","children":[],"call":["v is_a? ","DataTypeValidator  validate "," class "]}," Axlsx Table rId":{"type":"method","name":"rId","children":[],"call":["@sheet relationships for Id ","@sheet relationships for ","@sheet relationships "]}," Axlsx Table pn":{"type":"method","name":"pn","children":[],"call":["TABLE_PN  % "," index + "," index "," format "]}," Axlsx Table index":{"type":"method","name":"index","children":[],"call":["@sheet workbook tables index ","@sheet workbook tables ","@sheet workbook "]}," Axlsx Table initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," parse_options "," index + "," index ","TableStyleInfo  new ","options [] ","@sheet workbook tables << ","@sheet workbook tables ","@sheet workbook "]}," Axlsx SheetView to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","selection to_xml_string ","@selections each ","@pane to_xml_string "," serialized_attributes ","@selections each_value "]}," Axlsx SheetView zoom_scale_sheet_layout_view=":{"type":"method","name":"zoom_scale_sheet_layout_view=","children":[],"call":["Axlsx  validate_scale_0_10_400 "]}," Axlsx SheetView zoom_scale_page_layout_view=":{"type":"method","name":"zoom_scale_page_layout_view=","children":[],"call":["Axlsx  validate_scale_0_10_400 "]}," Axlsx SheetView zoom_scale_normal=":{"type":"method","name":"zoom_scale_normal=","children":[],"call":["Axlsx  validate_scale_0_10_400 "]}," Axlsx SheetView zoom_scale=":{"type":"method","name":"zoom_scale=","children":[],"call":["Axlsx  validate_scale_0_10_400 "]}," Axlsx SheetView workbook_view_id=":{"type":"method","name":"workbook_view_id=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx SheetView view=":{"type":"method","name":"view=","children":[],"call":["Axlsx  validate_sheet_view_type "]}," Axlsx SheetView top_left_cell=":{"type":"method","name":"top_left_cell=","children":[],"call":["Axlsx  validate_string ","v r_abs ","v class == ","v class ","v instance_of? "]}," Axlsx SheetView color_id=":{"type":"method","name":"color_id=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx SheetView add_selection":{"type":"method","name":"add_selection","children":[],"call":["@selections []= ","Selection  new ","options merge "]}," Axlsx SheetView pane":{"type":"method","name":"pane","children":[],"call":[" block_given? ","Pane  new "]}," Axlsx SheetView initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx SheetProtection encode_password":{"type":"method","name":"encode_password","children":[],"call":["chars each ","low_15 | ","high_15 >> ","char & ","32767 << ","char unpack [] << ","char unpack [] ","char unpack ","chars collect! ","chars size ","password split ","char unpack1 << ","char unpack1 ","password chars ","low_15 | s each ","char unpack [] << s each ","char unpack1 << s each ","password split  each ","password chars  each ","char &  | ","high_15 >>  >> ","char &  >> ","low_15 |  & ","char unpack [] <<  & ","char unpack1 <<  & ","low_15 |  unpack [] << ","char unpack [] <<  unpack [] << ","char unpack1 <<  unpack [] << ","low_15 |  unpack [] ","char unpack [] <<  unpack [] ","char unpack1 <<  unpack [] ","low_15 |  unpack ","char unpack [] <<  unpack ","char unpack1 <<  unpack ","low_15 | s collect! ","char unpack [] << s collect! ","char unpack1 << s collect! ","password split  collect! ","password chars  collect! ","low_15 | s size ","char unpack [] << s size ","char unpack1 << s size ","password split  size ","password chars  size ","low_15 |  unpack1 << ","char unpack [] <<  unpack1 << ","char unpack1 <<  unpack1 << ","low_15 |  unpack1 ","char unpack [] <<  unpack1 ","char unpack1 <<  unpack1 ","password low_15 | s ","password char unpack [] << s ","password char unpack1 << s ","password password split  ","password password chars  "]}," Axlsx SheetProtection create_password_hash":{"type":"method","name":"create_password_hash","children":[],"call":["password_as_string [] + ","password_as_string [] ","password_as_hex unpack first upcase ","password_as_hex unpack first ","password_as_hex unpack ","(lvar :encoded_password) pack "," encode_password ","password_as_hex unpack1 upcase ","password_as_hex unpack1 ","password_as_hex unpack first upcase  [] + ","password_as_hex unpack1 upcase  [] + ","password_as_hex unpack first upcase  [] ","password_as_hex unpack1 upcase  [] ","(lvar :encoded_password) pack  unpack first upcase ","(lvar :encoded_password) pack  unpack first ","(lvar :encoded_password) pack  unpack ","(lvar : encode_password ) pack ","(lvar :encoded_password) pack  unpack1 upcase ","(lvar :encoded_password) pack  unpack1 "]}," Axlsx SheetProtection to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "," serialized_tag "]}," Axlsx SheetProtection password=":{"type":"method","name":"password=","children":[],"call":[" create_password_hash ","v == ","v nil? "]}," Axlsx SheetProtection initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx SheetPr update_properties":{"type":"method","name":"update_properties","children":[],"call":[" enable_format_conditions_calculation= "," filter_mode= "," worksheet auto_filter columns size > "," worksheet auto_filter columns size "," worksheet auto_filter columns "," worksheet auto_filter "," worksheet "," page_setup_pr fit_to_page= "," worksheet fit_to_page? "," page_setup_pr "," worksheet auto_filter columns empty? "]}," Axlsx SheetPr page_setup_pr":{"type":"method","name":"page_setup_pr","children":[],"call":["PageSetUpPr  new "]}," Axlsx SheetPr to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," page_setup_pr to_xml_string "," page_setup_pr "," serialized_attributes "," update_properties "," outline_pr to_xml_string "," outline_pr "," tab_color to_xml_string "," tab_color "]}," Axlsx SheetPr initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "," raise ","worksheet is_a? "]}," Axlsx SheetFormatPr set_defaults":{"type":"method","name":"set_defaults","children":[],"call":[]}," Axlsx SheetFormatPr to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "]}," Axlsx SheetFormatPr initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "," set_defaults "]}," Axlsx SheetData to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","row to_xml_string "," worksheet rows each_with_index "," worksheet rows "," worksheet "]}," Axlsx SheetData initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","worksheet is_a? "]}," Axlsx SheetCalcPr to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "]}," Axlsx SheetCalcPr initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx Selection to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "," serialized_tag "]}," Axlsx Selection sqref=":{"type":"method","name":"sqref=","children":[],"call":["Axlsx  validate_string "]}," Axlsx Selection pane=":{"type":"method","name":"pane=","children":[],"call":["Axlsx  camel ","Axlsx  validate_pane_type "]}," Axlsx Selection active_cell_id=":{"type":"method","name":"active_cell_id=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Selection active_cell=":{"type":"method","name":"active_cell=","children":[],"call":["Axlsx  validate_string ","v r_abs ","v class == ","v class ","v instance_of? "]}," Axlsx Selection initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx RowBreaks to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","brk to_xml_string "," each ","str << << << << << ","str << << << << ","@list size to_s ","@list size ","str << << << ","str << << "," empty? ","<rowBreaks count=\" << << << << ","<rowBreaks count=\" << << << "," size to_s "," size ","<rowBreaks count=\" << << ","<rowBreaks count=\" << "]}," Axlsx RowBreaks add_break":{"type":"method","name":"add_break","children":[],"call":[" last ","@list << ","Break  new ","options merge "," << "]}," Axlsx RowBreaks initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx Row array_to_cells":{"type":"method","name":"array_to_cells","children":[],"call":["options delete ","Cell  new ","options []= ","formula_values [] ","formula_values is_a? ","types [] ","types is_a? ","style [] ","style is_a? ","values each_with_index ","DataTypeValidator  validate "," []= ","escape_formulas [] ","escape_formulas is_a? ","index + ","offset to_i ","offset to_i times ","escape_formulas nil? ","formula_values [] s [] ","formula_values [] s is_a? "]}," Axlsx Row worksheet=":{"type":"method","name":"worksheet=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Row height=":{"type":"method","name":"height=","children":[],"call":["v nil? ","Axlsx  validate_unsigned_numeric "]}," Axlsx Row to_ary":{"type":"method","name":"to_ary","children":[],"call":["@cells to_ary "]}," Axlsx Row style=":{"type":"method","name":"style=","children":[],"call":["cell style= ","style [] ","style is_a? "," cells each_with_index "," cells "," each_with_index ","cell style [] tyle= ","style [] tyle [] ","style [] tyle istyle [] _a? "," cellstyle []  each_with_index "," cellstyle []  "]}," Axlsx Row add_cell":{"type":"method","name":"add_cell","children":[],"call":[" worksheet send "," cells "," worksheet ","Cell  new "," << "," Cell  new ells "]}," Axlsx Row to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","cell to_xml_string ","@cells each_with_index "," serialized_attributes ","r_index + "," each_with_index "," serialized_tag ","Axlsx  row_ref "]}," Axlsx Row index":{"type":"method","name":"index","children":[],"call":[" worksheet rows index "," worksheet rows "," worksheet "]}," Axlsx Row outline_level=":{"type":"method","name":"outline_level=","children":[],"call":["Axlsx  validate_unsigned_numeric "]}," Axlsx Row s=":{"type":"method","name":"s=","children":[],"call":["Axlsx  validate_unsigned_numeric "]}," Axlsx Row height":{"type":"method","name":"height","children":[],"call":[]}," Axlsx Row initialize":{"type":"method","name":"initialize","children":[],"call":[" array_to_cells "," height= ","options delete ","options [] ","@worksheet rows << ","@worksheet rows ","SimpleTypedList  new "," worksheet= ","worksheet rows << ","worksheet rows ","values size ","values size + ","options [] to_i "]}," Axlsx ProtectedRanges to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","range to_xml_string "," each "," empty? "]}," Axlsx ProtectedRanges add_range":{"type":"method","name":"add_range","children":[],"call":[" last ","@list << ","ProtectedRange  new "," size ","Axlsx  cell_range ","cells is_a? "," << "]}," Axlsx ProtectedRanges initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","worksheet is_a? "]}," Axlsx ProtectedRange to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "," serialized_tag "]}," Axlsx ProtectedRange name=":{"type":"method","name":"name=","children":[],"call":["Axlsx  validate_string "]}," Axlsx ProtectedRange sqref=":{"type":"method","name":"sqref=","children":[],"call":["Axlsx  validate_string "]}," Axlsx ProtectedRange initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," parse_options "]}," Axlsx PrintOptions to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "," serialized_tag "]}," Axlsx PrintOptions set":{"type":"method","name":"set","children":[],"call":[" parse_options "]}," Axlsx PrintOptions initialize":{"type":"method","name":"initialize","children":[],"call":[" set "]}," Axlsx PivotTables relationships":{"type":"method","name":"relationships","children":[],"call":["Relationship  new ","pivot_table pn "," map "," empty? "]}," Axlsx PivotTables initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","worksheet is_a? "]}," Axlsx PivotTableCacheDefinition to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << ","str << << ","cell value "," pivot_table header_cells each "," pivot_table header_cells "," pivot_table "," pivot_table header_cells_count to_s "," pivot_table header_cells_count ","str << << << << << ","str << << << << "," pivot_table data_sheet name "," pivot_table data_sheet "," pivot_table range ","<cacheField name=\" << << ","<cacheField name=\" << ","<cacheFields count=\" << << ","<cacheFields count=\" << ","<worksheetSource ref=\" << << << << ","<worksheetSource ref=\" << << << ","<worksheetSource ref=\" << << ","<worksheetSource ref=\" << ","<pivotCacheDefinition xmlns=\" << << << << ","<pivotCacheDefinition xmlns=\" << << << ","<pivotCacheDefinition xmlns=\" << << ","<pivotCacheDefinition xmlns=\" << ","cell clean_value "]}," Axlsx PivotTableCacheDefinition rId":{"type":"method","name":"rId","children":[],"call":[" pivot_table relationships for Id "," pivot_table relationships for "," pivot_table relationships "," pivot_table "]}," Axlsx PivotTableCacheDefinition cache_id":{"type":"method","name":"cache_id","children":[],"call":[" index + "," index "]}," Axlsx PivotTableCacheDefinition pn":{"type":"method","name":"pn","children":[],"call":["PIVOT_TABLE_CACHE_DEFINITION_PN  % "," index + "," index "," format "]}," Axlsx PivotTableCacheDefinition index":{"type":"method","name":"index","children":[],"call":[" pivot_table sheet workbook pivot_tables index "," pivot_table "," pivot_table sheet workbook pivot_tables "," pivot_table sheet workbook "," pivot_table sheet "]}," Axlsx PivotTableCacheDefinition initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx PivotTable header_range":{"type":"method","name":"header_range","children":[],"call":[" range gsub "," range "]}," Axlsx PivotTable data_refs":{"type":"method","name":"data_refs","children":[],"call":["hash [] "," data map "," data "]}," Axlsx PivotTable pivot_field_for":{"type":"method","name":"pivot_field_for","children":[],"call":["<pivotField compact=\"0\" outline=\"0\" subtotalTop=\"0\" showAll=\"0\" includeNewItemsInFilter=\"1\"> << ","<pivotField dataField=\"1\" compact=\"0\" outline=\"0\" subtotalTop=\"0\" showAll=\"0\" includeNewItemsInFilter=\"1\"> << "," data_refs include? "," data_refs ","<pivotField axis=\"axisCol\" compact=\"0\" outline=\"0\" subtotalTop=\"0\" showAll=\"0\" includeNewItemsInFilter=\"1\"> << << ","<pivotField axis=\"axisCol\" compact=\"0\" outline=\"0\" subtotalTop=\"0\" showAll=\"0\" includeNewItemsInFilter=\"1\"> << "," pages include? "," pages "," columns include? "," columns ","<pivotField axis=\"axisRow\" compact=\"0\" outline=\"0\" subtotalTop=\"0\" showAll=\"0\" includeNewItemsInFilter=\"1\"> << << ","<pivotField axis=\"axisRow\" compact=\"0\" outline=\"0\" subtotalTop=\"0\" showAll=\"0\" includeNewItemsInFilter=\"1\"> << "," rows include? "," rows ","attributes join ","attributes << ","sorttype == "]}," Axlsx PivotTable header_index_of":{"type":"method","name":"header_index_of","children":[],"call":[" header_cell_values index "," header_cell_values "]}," Axlsx PivotTable header_cells_count":{"type":"method","name":"header_cells_count","children":[],"call":[" header_cells count "," header_cells "]}," Axlsx PivotTable header_cell_values":{"type":"method","name":"header_cell_values","children":[],"call":[" header_cells map "," header_cells "]}," Axlsx PivotTable header_cells":{"type":"method","name":"header_cells","children":[],"call":[" data_sheet [] "," header_range "," data_sheet "]}," Axlsx PivotTable header_cell_refs":{"type":"method","name":"header_cell_refs","children":[],"call":["Axlsx  range_to_a first ","Axlsx  range_to_a "," header_range "]}," Axlsx PivotTable to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","datum_value [] "," header_index_of "," data each "," data "," data size "," data empty? ","str << << << ","str << << "," header_index_of to_s "," pages each "," pages "," pages size to_s "," pages size "," pages empty? "," columns each "," columns "," columns size to_s "," columns size "," columns empty? "," rows size times "," rows size "," rows "," rows size to_s "," rows each "," rows empty? "," pivot_field_for "," header_cell_values each "," header_cell_values "," header_cells_count to_s "," header_cells_count "," ref ","str << << << << << << << ","str << << << << << << "," cache_definition cache_id to_s "," cache_definition cache_id "," cache_definition ","str << << << << << ","str << << << << "," name ","v to_s ","k to_s "," style_info each "," style_info "," style_info empty? ","<pageField fld=\" << << ","<pageField fld=\" << ","<pageFields count=\" << << ","<pageFields count=\" << ","<field x=\" << << ","<field x=\" << ","<colFields count=\" << << ","<colFields count=\" << ","<rowItems count=\" << << ","<rowItems count=\" << ","<rowFields count=\" << << ","<rowFields count=\" << "," no_subtotals_on_headers include? ! "," no_subtotals_on_headers include? "," no_subtotals_on_headers ","<pivotFields count=\" << << ","<pivotFields count=\" << ","<location firstDataCol=\"1\" firstDataRow=\"1\" firstHeaderRow=\"1\" ref=\" << << ","<location firstDataCol=\"1\" firstDataRow=\"1\" firstHeaderRow=\"1\" ref=\" << ","<pivotTableDefinition xmlns=\" << << << << << << ","<pivotTableDefinition xmlns=\" << << << << << ","<pivotTableDefinition xmlns=\" << << << << ","<pivotTableDefinition xmlns=\" << << << ","<pivotTableDefinition xmlns=\" << << ","<pivotTableDefinition xmlns=\" << "," data size <= ","<pivotTableDefinition xmlns=\" << << << << << << << << ","<pivotTableDefinition xmlns=\" << << << << << << << ","i + "," data [] each_with_index "," data [] "," data size > "," sort_on_headers [] "," sort_on_headers ","(send\n  (send\n    (send nil :data) :size) :-\n  (int 1)) times "," data size - ","str << << << << << << << << << ","str << << << << << << << << "," no_ no_subtotals_on_headers include? ! s_on_headers include? ! "," no_ no_subtotals_on_headers include? ! s_on_headers include? "," no_ no_subtotals_on_headers include? ! s_on_headers "]}," Axlsx PivotTable relationships":{"type":"method","name":"relationships","children":[],"call":["r << ","Relationship  new "," cache_definition pn "," cache_definition ","Relationships  new ","Relationships  new  << "]}," Axlsx PivotTable cache_definition":{"type":"method","name":"cache_definition","children":[],"call":["PivotTableCacheDefinition  new "]}," Axlsx PivotTable rels_pn":{"type":"method","name":"rels_pn","children":[],"call":["PIVOT_TABLE_RELS_PN  % "," index + "," index "," format "]}," Axlsx PivotTable pn":{"type":"method","name":"pn","children":[],"call":["PIVOT_TABLE_PN  % "," index + "," index "," format "]}," Axlsx PivotTable index":{"type":"method","name":"index","children":[],"call":["@sheet workbook pivot_tables index ","@sheet workbook pivot_tables ","@sheet workbook "]}," Axlsx PivotTable pages=":{"type":"method","name":"pages=","children":[],"call":["DataTypeValidator  validate "," class ","v each "]}," Axlsx PivotTable data=":{"type":"method","name":"data=","children":[],"call":["@data << ","DataTypeValidator  validate "," class ","data_field values each ","data_field values ","data_field is_a? ","v each ","key == ","data_field each "]}," Axlsx PivotTable columns=":{"type":"method","name":"columns=","children":[],"call":["DataTypeValidator  validate "," class ","v each "]}," Axlsx PivotTable rows=":{"type":"method","name":"rows=","children":[],"call":["DataTypeValidator  validate "," class ","v each "]}," Axlsx PivotTable range=":{"type":"method","name":"range=","children":[],"call":["v is_a? ","DataTypeValidator  validate "," class "]}," Axlsx PivotTable data_sheet":{"type":"method","name":"data_sheet","children":[],"call":[]}," Axlsx PivotTable initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," parse_options "," index + "," index ","@sheet workbook pivot_tables << ","@sheet workbook pivot_tables ","@sheet workbook "," range= "]}," Axlsx Pane finalize":{"type":"method","name":"finalize","children":[],"call":["row + ","(irange\n  (str \"A\")\n  (str \"ZZ\")) to_a [] ","(irange\n  (str \"A\")\n  (str \"ZZ\")) to_a ","@top_left_cell nil? ","@state == "]}," Axlsx Pane to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "," finalize "," serialized_tag "]}," Axlsx Pane y_split=":{"type":"method","name":"y_split=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Pane x_split=":{"type":"method","name":"x_split=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Pane top_left_cell=":{"type":"method","name":"top_left_cell=","children":[],"call":["Axlsx  validate_string ","v r_abs ","v class == ","v class ","v instance_of? "]}," Axlsx Pane state=":{"type":"method","name":"state=","children":[],"call":["Axlsx  camel ","v to_s ","Axlsx  validate_split_state_type "]}," Axlsx Pane active_pane=":{"type":"method","name":"active_pane=","children":[],"call":["Axlsx  camel ","v to_s ","Axlsx  validate_pane_type "]}," Axlsx Pane initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx PageSetup to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "," serialized_tag "]}," Axlsx PageSetup fit_to_page?":{"type":"method","name":"fit_to_page?","children":[],"call":[" fit_to_height != "," fit_to_height "," fit_to_width != "," fit_to_width "," fit_to_height nil? ! "," fit_to_height nil? "," fit_to_width nil? ! "," fit_to_width nil? "]}," Axlsx PageSetup fit_to":{"type":"method","name":"fit_to","children":[],"call":[" fit_to_height= ","options [] "," fit_to_width= "]}," Axlsx PageSetup scale=":{"type":"method","name":"scale=","children":[],"call":["Axlsx  validate_scale_10_400 "]}," Axlsx PageSetup paper_width=":{"type":"method","name":"paper_width=","children":[],"call":["Axlsx  validate_number_with_unit "]}," Axlsx PageSetup paper_height=":{"type":"method","name":"paper_height=","children":[],"call":["Axlsx  validate_number_with_unit "]}," Axlsx PageSetup orientation=":{"type":"method","name":"orientation=","children":[],"call":["Axlsx  validate_page_orientation "]}," Axlsx PageSetup fit_to_width=":{"type":"method","name":"fit_to_width=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx PageSetup fit_to_height=":{"type":"method","name":"fit_to_height=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx PageSetup set":{"type":"method","name":"set","children":[],"call":[" parse_options "]}," Axlsx PageSetup paper_size=":{"type":"method","name":"paper_size=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx PageSetup initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx PageSetUpPr to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << << << ","str << << "," serialized_attributes ","str << ","<pageSetUpPr  << << ","<pageSetUpPr  << "]}," Axlsx PageSetUpPr auto_page_breaks=":{"type":"method","name":"auto_page_breaks=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx PageSetUpPr fit_to_page=":{"type":"method","name":"fit_to_page=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx PageSetUpPr initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx PageMargins to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "," serialized_tag "]}," Axlsx PageMargins footer=":{"type":"method","name":"footer=","children":[],"call":["Axlsx  validate_unsigned_numeric "]}," Axlsx PageMargins header=":{"type":"method","name":"header=","children":[],"call":["Axlsx  validate_unsigned_numeric "]}," Axlsx PageMargins bottom=":{"type":"method","name":"bottom=","children":[],"call":["Axlsx  validate_unsigned_numeric "]}," Axlsx PageMargins top=":{"type":"method","name":"top=","children":[],"call":["Axlsx  validate_unsigned_numeric "]}," Axlsx PageMargins right=":{"type":"method","name":"right=","children":[],"call":["Axlsx  validate_unsigned_numeric "]}," Axlsx PageMargins left=":{"type":"method","name":"left=","children":[],"call":["Axlsx  validate_unsigned_numeric "]}," Axlsx PageMargins set":{"type":"method","name":"set","children":[],"call":[" send ","(sym :left) include? ","margins select ","MARGIN_KEYS  include? "]}," Axlsx PageMargins initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx MergedCells to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," each "," size ","@list empty? "," empty? "]}," Axlsx MergedCells add":{"type":"method","name":"add","children":[],"call":["@list << ","Axlsx  cell_range ","cells is_a? "," << "]}," Axlsx MergedCells initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","worksheet is_a? "]}," Axlsx IconSet initialize_value_objects":{"type":"method","name":"initialize_value_objects","children":[],"call":["@value_objects lock ","@value_objects concat ","Cfvo  new ","SimpleTypedList  new ","@value_objects << ","@interpolationPoints each ","SimpleTypedList  new  lock ","SimpleTypedList  new  concat ","SimpleTypedList  new  << "]}," Axlsx IconSet to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","cfvo to_xml_string ","@value_objects each "," serialized_attributes "," serialized_tag "," initialize_value_objects ","@value_objects nil? "]}," Axlsx IconSet reverse=":{"type":"method","name":"reverse=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx IconSet percent=":{"type":"method","name":"percent=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx IconSet showValue=":{"type":"method","name":"showValue=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx IconSet iconSet=":{"type":"method","name":"iconSet=","children":[],"call":["Axlsx  validate_icon_set "]}," Axlsx IconSet initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," parse_options "," initialize_value_objects "]}," Axlsx HeaderFooter to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," CGI  escapeHTML "," serialized_element_attributes "," serialized_attributes "," serialized_tag "]}," Axlsx HeaderFooter set":{"type":"method","name":"set","children":[],"call":[" parse_options "]}," Axlsx HeaderFooter initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx Dimension dimension_reference":{"type":"method","name":"dimension_reference","children":[],"call":["cell r ","cell respond_to? "]}," Axlsx Dimension last_cell_reference":{"type":"method","name":"last_cell_reference","children":[],"call":[" dimension_reference ","Dimension  default_last "," worksheet rows last cells last "," worksheet rows last cells "," worksheet rows last "," worksheet rows "," worksheet "," worksheet rows last last "]}," Axlsx Dimension first_cell_reference":{"type":"method","name":"first_cell_reference","children":[],"call":[" dimension_reference ","Dimension  default_first "," worksheet rows first cells first "," worksheet rows first cells "," worksheet rows first "," worksheet rows "," worksheet "," worksheet rows first first "]}," Axlsx Dimension to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","<dimension ref=\"%s\"></dimension> % "," sqref "," worksheet rows empty? "," worksheet rows "," worksheet ","str << << << ","str << << "]}," Axlsx Dimension sqref":{"type":"method","name":"sqref","children":[],"call":[" last_cell_reference "," first_cell_reference "]}," Axlsx Dimension initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","worksheet is_a? "]}," Axlsx Dimension default_last":{"type":"method","name":"default_last","children":[],"call":[]}," Axlsx Dimension default_first":{"type":"method","name":"default_first","children":[],"call":[]}," Axlsx DateTimeConverter time_to_serial":{"type":"method","name":"time_to_serial","children":[],"call":[]}," Axlsx DateTimeConverter date_to_serial":{"type":"method","name":"date_to_serial","children":[],"call":[]}," Axlsx DataValidations to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","item to_xml_string "," each "," size "," empty? "]}," Axlsx DataValidations initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","worksheet is_a? "]}," Axlsx DataValidation get_valid_attributes":{"type":"method","name":"get_valid_attributes","children":[],"call":["attributes flatten! ","attributes << ","@type == ","(sym :between) include? ","(sym :whole) include? ","attributes << << "]}," Axlsx DataValidation to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << ","str << << "," formula2 ","valid_attributes include? "," formula1 ","(send\n  (send nil :instance_values) :map) join "," << << << << "," << << << ","value to_s "," << << "," << ","CHILD_ELEMENTS  include? ! ","CHILD_ELEMENTS  include? ","key to_sym "," instance_values map "," instance_values "," get_valid_attributes ","<formula2> << << ","<formula2> << ","<formula1> << << ","<formula1> << ","Axlsx  booleanize to_s ","Axlsx  booleanize ","(send\n  (send\n    (const nil :Axlsx) :instance_values_for\n    (self)) :map) join ","Axlsx  instance_values_for map ","Axlsx  instance_values_for ","str << << << << ","key_value last ","key_value first ","index zero? ","h each_with_index ","Axlsx  instance_values_for select "," get_valid_attributes  include? "," get_ get_valid_attributes  "]}," Axlsx DataValidation type=":{"type":"method","name":"type=","children":[],"call":["Axlsx  validate_data_validation_type "]}," Axlsx DataValidation sqref=":{"type":"method","name":"sqref=","children":[],"call":["Axlsx  validate_string "]}," Axlsx DataValidation showInputMessage=":{"type":"method","name":"showInputMessage=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx DataValidation showErrorMessage=":{"type":"method","name":"showErrorMessage=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx DataValidation showDropDown=":{"type":"method","name":"showDropDown=","children":[],"call":["Axlsx  validate_boolean "," warn "]}," Axlsx DataValidation promptTitle=":{"type":"method","name":"promptTitle=","children":[],"call":["Axlsx  validate_string "]}," Axlsx DataValidation prompt=":{"type":"method","name":"prompt=","children":[],"call":["Axlsx  validate_string "]}," Axlsx DataValidation operator=":{"type":"method","name":"operator=","children":[],"call":["Axlsx  validate_data_validation_operator "]}," Axlsx DataValidation errorTitle=":{"type":"method","name":"errorTitle=","children":[],"call":["Axlsx  validate_string "]}," Axlsx DataValidation errorStyle=":{"type":"method","name":"errorStyle=","children":[],"call":["Axlsx  validate_data_validation_error_style "]}," Axlsx DataValidation error=":{"type":"method","name":"error=","children":[],"call":["Axlsx  validate_string "]}," Axlsx DataValidation allowBlank=":{"type":"method","name":"allowBlank=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx DataValidation formula2=":{"type":"method","name":"formula2=","children":[],"call":["Axlsx  validate_string "]}," Axlsx DataValidation formula1=":{"type":"method","name":"formula1=","children":[],"call":["Axlsx  validate_string "]}," Axlsx DataValidation initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx DataBar initialize_cfvos":{"type":"method","name":"initialize_cfvos","children":[],"call":[" value_objects << ","Cfvo  new "," value_objects ","default merge ","cfvos [] ","index < ","cfvos size "," class default_cfvos each_with_index map "," class default_cfvos each_with_index "," class default_cfvos "," class "]}," Axlsx DataBar to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," color to_xml_string "," color "," value_objects to_xml_string "," value_objects "," serialized_attributes "," serialized_tag "]}," Axlsx DataBar color=":{"type":"method","name":"color=","children":[],"call":[" color rgb= "," color ","v is_a? "]}," Axlsx DataBar show_value=":{"type":"method","name":"show_value=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx DataBar max_length=":{"type":"method","name":"max_length=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx DataBar min_length=":{"type":"method","name":"min_length=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx DataBar color":{"type":"method","name":"color","children":[],"call":["Color  new "]}," Axlsx DataBar value_objects":{"type":"method","name":"value_objects","children":[],"call":["Cfvos  new "]}," Axlsx DataBar initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," initialize_cfvos "," parse_options "]}," Axlsx DataBar default_cfvos":{"type":"method","name":"default_cfvos","children":[],"call":[]}," Axlsx ConditionalFormattings to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["item to_xml_string "," each "," empty? "]}," Axlsx ConditionalFormattings initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","worksheet is_a? "]}," Axlsx ConditionalFormattingRule to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","@icon_set to_xml_string ","@type == ","@data_bar to_xml_string ","@color_scale to_xml_string ","str << << << ","str << << ","(splat\n  (send\n    (self) :formula)) join "," formula "," serialized_attributes ","<formula> << << ","<formula> << ","(splat\n  (send nil :formula)) join "]}," Axlsx ConditionalFormattingRule icon_set=":{"type":"method","name":"icon_set=","children":[],"call":["Axlsx DataTypeValidator  validate "]}," Axlsx ConditionalFormattingRule data_bar=":{"type":"method","name":"data_bar=","children":[],"call":["Axlsx DataTypeValidator  validate "]}," Axlsx ConditionalFormattingRule color_scale=":{"type":"method","name":"color_scale=","children":[],"call":["Axlsx DataTypeValidator  validate "]}," Axlsx ConditionalFormattingRule formula=":{"type":"method","name":"formula=","children":[],"call":[" CGI  escapeHTML ","(splat\n  (lvar :v)) map ","Axlsx  validate_string ","(splat\n  (lvar :v)) each "]}," Axlsx ConditionalFormattingRule timePeriod=":{"type":"method","name":"timePeriod=","children":[],"call":["Axlsx  validate_time_period_type "]}," Axlsx ConditionalFormattingRule stopIfTrue=":{"type":"method","name":"stopIfTrue=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx ConditionalFormattingRule stdDev=":{"type":"method","name":"stdDev=","children":[],"call":["Axlsx  validate_unsigned_numeric "]}," Axlsx ConditionalFormattingRule rank=":{"type":"method","name":"rank=","children":[],"call":["Axlsx  validate_unsigned_numeric "]}," Axlsx ConditionalFormattingRule percent=":{"type":"method","name":"percent=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx ConditionalFormattingRule text=":{"type":"method","name":"text=","children":[],"call":["Axlsx  validate_string "]}," Axlsx ConditionalFormattingRule operator=":{"type":"method","name":"operator=","children":[],"call":["Axlsx  validate_conditional_formatting_operator "]}," Axlsx ConditionalFormattingRule priority=":{"type":"method","name":"priority=","children":[],"call":["Axlsx  validate_unsigned_numeric "]}," Axlsx ConditionalFormattingRule equalAverage=":{"type":"method","name":"equalAverage=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx ConditionalFormattingRule dxfId=":{"type":"method","name":"dxfId=","children":[],"call":["Axlsx  validate_unsigned_numeric "]}," Axlsx ConditionalFormattingRule bottom=":{"type":"method","name":"bottom=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx ConditionalFormattingRule aboveAverage=":{"type":"method","name":"aboveAverage=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx ConditionalFormattingRule type=":{"type":"method","name":"type=","children":[],"call":["Axlsx  validate_conditional_formatting_type "]}," Axlsx ConditionalFormattingRule icon_set":{"type":"method","name":"icon_set","children":[],"call":["IconSet  new "]}," Axlsx ConditionalFormattingRule data_bar":{"type":"method","name":"data_bar","children":[],"call":["DataBar  new "]}," Axlsx ConditionalFormattingRule color_scale":{"type":"method","name":"color_scale","children":[],"call":["ColorScale  new "]}," Axlsx ConditionalFormattingRule initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx ConditionalFormatting to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","(send\n  (send nil :rules) :collect) join ","rule to_xml_string "," rules collect "," rules ","str << << << ","str << << "," sqref ","<conditionalFormatting sqref=\" << << ","<conditionalFormatting sqref=\" << ","index zero? "," rules each_with_index "]}," Axlsx ConditionalFormatting sqref=":{"type":"method","name":"sqref=","children":[],"call":["Axlsx  validate_string "]}," Axlsx ConditionalFormatting rules=":{"type":"method","name":"rules=","children":[],"call":[]}," Axlsx ConditionalFormatting add_rule":{"type":"method","name":"add_rule","children":[],"call":["@rules << ","ConditionalFormattingRule  new ","rule is_a? "]}," Axlsx ConditionalFormatting add_rules":{"type":"method","name":"add_rules","children":[],"call":[" add_rule ","rules each ","rules is_a? "]}," Axlsx ConditionalFormatting initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx Comments to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","comment to_xml_string ","@list each ","str << << << ","str << << ","author to_s "," authors each "," authors "," each ","<author> << << ","<author> << ","<comments xmlns=\" << << ","<comments xmlns=\" << "]}," Axlsx Comments relationships":{"type":"method","name":"relationships","children":[],"call":["Relationship  new "," pn "," vml_drawing pn "," vml_drawing "]}," Axlsx Comments authors":{"type":"method","name":"authors","children":[],"call":["(send\n  (ivar :@list) :map) uniq sort ","(send\n  (ivar :@list) :map) uniq ","comment author to_s ","comment author ","@list map ","(send nil :map) uniq sort ","(send nil :map) uniq "," map "]}," Axlsx Comments add_comment":{"type":"method","name":"add_comment","children":[],"call":["@list last "," block_given? ","@list << ","Comment  new "," raise ","options [] "," last "," << "]}," Axlsx Comments initialize":{"type":"method","name":"initialize","children":[],"call":["VmlDrawing  new "," raise ","worksheet is_a? "]}," Axlsx Comments pn":{"type":"method","name":"pn","children":[],"call":["COMMENT_PN  % "," index + "," index "," format "]}," Axlsx Comments index":{"type":"method","name":"index","children":[],"call":["@worksheet index "]}," Axlsx Comment initialize_vml_shape":{"type":"method","name":"initialize_vml_shape","children":[],"call":["vml bottom_row= ","vml row + ","vml row ","vml top_row= ","vml right_column= ","vml column + ","vml column ","vml left_column= ","VmlShape  new ","pos [] ","Axlsx  name_to_indices "," ref ","Axlsx  name_to_indices  [] "]}," Axlsx Comment to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << ","str << << "," CGI  escapeHTML "," text ","author to_s ","author to_s == ","str << << << << << ","str << << << << "," author_index to_s "," author_index "," ref ","@comments authors [] ","@comments authors ","<t> << << ","<t> << ","<comment ref=\" << << << << ","<comment ref=\" << << << ","<comment ref=\" << << ","<comment ref=\" << ","@comments authors []  to_s ","@comments authors []  to_s == "," @comments authors [] _index to_s "," @comments authors [] _index ","@comments @comments authors [] s [] ","@comments @comments authors [] s "]}," Axlsx Comment ref=":{"type":"method","name":"ref=","children":[],"call":["v r ","v is_a? ","Axlsx DataTypeValidator  validate "]}," Axlsx Comment author_index":{"type":"method","name":"author_index","children":[],"call":["@comments authors index "," author ","@comments authors "]}," Axlsx Comment vml_shape":{"type":"method","name":"vml_shape","children":[],"call":[" initialize_vml_shape "]}," Axlsx Comment initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," parse_options "," raise ","comments is_a? "]}," Axlsx Cols to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","item to_xml_string "," each "," empty? "]}," Axlsx Cols initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","worksheet is_a? "]}," Axlsx ColorScale initialize_default_cfvos":{"type":"method","name":"initialize_default_cfvos","children":[],"call":[" add ","defaults [] "," colors size - "," colors size "," colors "," colors size < ","defaults size ","defaults [] merge ","index < ","user_cfvos each_with_index "," class default_cfvos "," class "," class default_cfvos  [] "," class default_cfvos  size "," class default_cfvos  [] merge ","user_defaults [] merge s each_with_index "," class default_defaults [] merge s "]}," Axlsx ColorScale to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","color to_xml_string "," colors each "," colors "," value_objects to_xml_string "," value_objects "]}," Axlsx ColorScale delete_at":{"type":"method","name":"delete_at","children":[],"call":[" colors delete_at "," colors "," value_objects delete_at "," value_objects "]}," Axlsx ColorScale add":{"type":"method","name":"add","children":[],"call":[" colors last "," colors "," value_objects last "," value_objects "," colors << ","Color  new ","options [] "," value_objects << ","Cfvo  new "]}," Axlsx ColorScale initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," initialize_default_cfvos "]}," Axlsx ColorScale colors":{"type":"method","name":"colors","children":[],"call":["SimpleTypedList  new "]}," Axlsx ColorScale value_objects":{"type":"method","name":"value_objects","children":[],"call":["Cfvos  new "]}," Axlsx ColorScale three_tone":{"type":"method","name":"three_tone","children":[],"call":[" new "]}," Axlsx ColorScale two_tone":{"type":"method","name":"two_tone","children":[],"call":[" new "]}," Axlsx ColorScale default_cfvos":{"type":"method","name":"default_cfvos","children":[],"call":[]}," Axlsx ColBreaks to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","brk to_xml_string "," each ","str << << << << << ","str << << << << ","@list size to_s ","@list size ","str << << << ","str << << "," empty? ","<colBreaks count=\" << << << << ","<colBreaks count=\" << << << "," size to_s "," size ","<colBreaks count=\" << << ","<colBreaks count=\" << "]}," Axlsx ColBreaks add_break":{"type":"method","name":"add_break","children":[],"call":[" last ","@list << ","Break  new ","options merge "," << "]}," Axlsx ColBreaks initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx Col to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "," serialized_tag "]}," Axlsx Col update_width":{"type":"method","name":"update_width","children":[],"call":[" width= ","(or\n  (send nil :width)\n  (int 0)) > "," width ","cell autowidth ","fixed_width is_a? "]}," Axlsx Col width=":{"type":"method","name":"width=","children":[],"call":["v != ","(lvar :v) min ","v nil? ","v nil? ! "]}," Axlsx Col style=":{"type":"method","name":"style=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Col phonetic=":{"type":"method","name":"phonetic=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Col outline_level=":{"type":"method","name":"outline_level=","children":[],"call":[" raise ","v <= ","0 <= ","Axlsx  validate_unsigned_numeric ","v >= "]}," Axlsx Col hidden=":{"type":"method","name":"hidden=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Col collapsed=":{"type":"method","name":"collapsed=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Col initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options ","Axlsx  validate_unsigned_int "]}," Axlsx Cfvos to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["cfvo to_xml_string ","@list each "," each "]}," Axlsx Cfvos initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx Cfvo to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "," serialized_tag "]}," Axlsx Cfvo val=":{"type":"method","name":"val=","children":[],"call":["v to_s "," raise ","v inspect ","v respond_to? "]}," Axlsx Cfvo gte=":{"type":"method","name":"gte=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Cfvo type=":{"type":"method","name":"type=","children":[],"call":["Axlsx  validate_conditional_formatting_value_object_type "]}," Axlsx Cfvo initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx CellSerializer value_serialization":{"type":"method","name":"value_serialization","children":[],"call":["str << << << ","str << << ","str << ","><v> << << ","><v> << ","serialization_value to_s ","t=\" << << ","t=\" << ","serialization_type to_s "]}," Axlsx CellSerializer numeric_type_serialization":{"type":"method","name":"numeric_type_serialization","children":[],"call":[" value_serialization ","cell value to_s ","cell value "]}," Axlsx CellSerializer string_type_serialization":{"type":"method","name":"string_type_serialization","children":[],"call":[" inline_string_serialization "," value_serialization ","cell ssti to_s ","cell ssti ","cell ssti nil? ! ","cell ssti nil? "," formula_serialization ","cell is_formula? "]}," Axlsx CellSerializer inline_string_serialization":{"type":"method","name":"inline_string_serialization","children":[],"call":["str << "," run_xml_string ","str << << "]}," Axlsx CellSerializer formula_serialization":{"type":"method","name":"formula_serialization","children":[],"call":["str << << << ","str << << ","cell formula_value to_s ","cell formula_value ","str << ","cell formula_value nil? ","str << << << << ","cell value to_s sub ","cell value to_s ","cell value ","<v> << << ","<v> << ","t=\"str\"><f> << << ","t=\"str\"><f> << ","cell clean_value to_s sub ","cell clean_value to_s ","cell clean_value ","cell clean_value delete_prefix "]}," Axlsx CellSerializer integer_type_serialization":{"type":"method","name":"integer_type_serialization","children":[],"call":[" numeric_type_serialization "]}," Axlsx CellSerializer float_type_serialization":{"type":"method","name":"float_type_serialization","children":[],"call":[" numeric_type_serialization "]}," Axlsx CellSerializer boolean_type_serialization":{"type":"method","name":"boolean_type_serialization","children":[],"call":[" value_serialization ","cell value to_s ","cell value "]}," Axlsx CellSerializer time_type_serialization":{"type":"method","name":"time_type_serialization","children":[],"call":[" value_serialization ","DateTimeConverter  time_to_serial to_s ","DateTimeConverter  time_to_serial ","cell value "]}," Axlsx CellSerializer date_type_serialization":{"type":"method","name":"date_type_serialization","children":[],"call":[" value_serialization ","DateTimeConverter  date_to_serial to_s ","DateTimeConverter  date_to_serial ","cell value "]}," Axlsx CellSerializer iso_8601_type_serialization":{"type":"method","name":"iso_8601_type_serialization","children":[],"call":[" value_serialization ","cell value "]}," Axlsx CellSerializer run_xml_string":{"type":"method","name":"run_xml_string","children":[],"call":["str << << << ","str << << ","cell value to_s ","cell value ","str << ","str << << << << ","str << << << << << ","data [] to_s ","data [] ","key to_s ","data [] to_xml_string ","cell font_name ","keys each ","data keys & ","data keys ","key == ","value == ","cell instance_values reject ","cell instance_values ","cell is_text_run? ","<t> << << ","<t> << ","cell clean_value ","cell value to_xml_string ","cell contains_rich_text? ","RichText  new to_xml_string ","RichText  new ","value nil? ! ","value nil? ","valid include? ","data select ","Hash  [] ","k to_sym ","cell instance_values map ","RichTextRun INLINE_STYLES  - ","Axlsx  instance_values_for map ","Axlsx  instance_values_for ","Axlsx  instance_values_for transform_keys ","Hash  []  [] to_s ","Axlsx  instance_values_for transform_keys  [] to_s ","Hash  []  [] ","Axlsx  instance_values_for transform_keys  [] ","Hash  []  [] to_xml_string ","Axlsx  instance_values_for transform_keys  [] to_xml_string ","data keys &  each ","data data keys &  & ","Hash  []  keys & ","Axlsx  instance_values_for transform_keys  keys & ","data data keys &  ","Hash  []  keys ","Axlsx  instance_values_for transform_keys  keys ","RichTextRun INLINE_STYLES  -  include? ","Hash  []  select ","Axlsx  instance_values_for transform_keys  select ","Axlsx  instance_values_for transform_data keys &  "]}," Axlsx CellSerializer to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," send ","(send\n  (send\n    (send\n      (lvar :cell) :type) :to_s) :<<\n  (str \"_type_serialization\")) to_sym ","cell type to_s << ","cell type to_s ","cell type ","cell value nil? ","cell value ","str << << << << << ","str << << << << ","cell style to_s ","cell style ","str << << << ","str << << ","Axlsx  cell_r ","<c r=\" << << << << ","<c r=\" << << << ","<c r=\" << << ","<c r=\" << ","cell style_str ","Axlsx  row_ref ","Axlsx  col_ref "]}," Axlsx Cell cast_value":{"type":"method","name":"cast_value","children":[],"call":[" CGI  escapeHTML ","v to_s ","Axlsx  trust_input ","@type == ","v to_i ","v to_f ","v to_time ","v respond_to? "," style= "," style == "," style ","v is_a? ","v nil? ","v is_a? ! "," type ","v to_date "," style zero? "]}," Axlsx Cell cell_type_from_value":{"type":"method","name":"cell_type_from_value","children":[],"call":["v to_s =~ ","v to_s ","v is_a? ","v respond_to? ","(irange\n  (const\n    (const nil :Float) :MIN_10_EXP)\n  (const\n    (const nil :Float) :MAX_10_EXP)) cover? ","matchdata [] to_i ","matchdata [] ","v to_s match ","Axlsx ISO_8601_REGEX  match? ","matchdata [] to_i between? ","MAYBE_FLOAT_REGEX  match ","Axlsx SAFE_FLOAT_REGEX  match? ","Axlsx NUMERIC_REGEX  match? ","v to_s match  [] to_i ","MAYBE_FLOAT_REGEX  match  [] to_i ","v to_s match  [] ","MAYBE_FLOAT_REGEX  match  [] ","v to_s match  [] to_i between? ","MAYBE_FLOAT_REGEX  match  [] to_i between? "]}," Axlsx Cell row=":{"type":"method","name":"row=","children":[],"call":[]}," Axlsx Cell ssti=":{"type":"method","name":"ssti=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Cell set_run_style":{"type":"method","name":"set_run_style","children":[],"call":[" instance_variable_set ","attr to_s ","Axlsx  send ","validator == ","INLINE_STYLES  include? ","validator nil? ","attr to_sym "]}," Axlsx Cell font_size":{"type":"method","name":"font_size","children":[],"call":[" sz ","font sz ","font sz * "," b ","font b ","@styles fonts [] ","@styles fonts ","@styles cellXfs [] fontId ","@styles cellXfs [] "," style ","@styles cellXfs "," styles fonts [] "," styles fonts "," styles "," styles cellXfs [] fontId "," styles cellXfs [] "," styles cellXfs "," row worksheet workbook bold_font_multiplier "," row worksheet workbook "," row worksheet "," row "]}," Axlsx Cell reference":{"type":"method","name":"reference","children":[],"call":[" r "," r_abs "]}," Axlsx Cell autowidth":{"type":"method","name":"autowidth","children":[],"call":["(send\n  (send\n    (begin\n      (send\n        (send\n          (send\n            (send\n              (send nil :value) :to_s) :count\n            (send\n              (const nil :Worksheet) :thin_chars)) :*\n          (lvar :mdw)) :+\n        (int 5))) :/\n    (lvar :mdw)) :*\n  (int 256)) / * ","(send\n  (send\n    (begin\n      (send\n        (send\n          (send\n            (send\n              (send nil :value) :to_s) :count\n            (send\n              (const nil :Worksheet) :thin_chars)) :*\n          (lvar :mdw)) :+\n        (int 5))) :/\n    (lvar :mdw)) :*\n  (int 256)) / ","(send\n  (send\n    (send\n      (send\n        (send nil :value) :to_s) :count\n      (send\n        (const nil :Worksheet) :thin_chars)) :*\n    (lvar :mdw)) :+\n  (int 5)) / * ","(send\n  (send\n    (send\n      (send\n        (send nil :value) :to_s) :count\n      (send\n        (const nil :Worksheet) :thin_chars)) :*\n    (lvar :mdw)) :+\n  (int 5)) / "," value to_s count * + "," value to_s count * "," value to_s count ","Worksheet  thin_chars "," value to_s "," value ","(send\n  (send nil :font_size) :/\n  (float 10.0)) to_f "," font_size / "," font_size "," value == "," is_formula? "," string_width ","width > "," value to_s split each "," value to_s split "," styles cellXfs [] alignment wrap_text "," styles cellXfs [] alignment "," styles cellXfs [] "," style "," styles cellXfs "," styles "," string_width + "," value autowidth "," contains_rich_text? "," value nil? "," string_ string_width  "," string_width  > "," string_ string_width  + "," value auto string_width  "]}," Axlsx Cell is_formula?":{"type":"method","name":"is_formula?","children":[],"call":["@value to_s start_with? ","@value to_s ","@type == "," type == "," type "," escape_formulas "]}," Axlsx Cell to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["CellSerializer  to_xml_string "]}," Axlsx Cell merge":{"type":"method","name":"merge","children":[],"call":[" row worksheet merge_cells "," r "," row worksheet "," row ","range_end nil? ","target r ","target is_a? ","stop nil? ","c r ","Axlsx  sort_cells map ","Axlsx  sort_cells "]}," Axlsx Cell pos":{"type":"method","name":"pos","children":[],"call":[" row index "," row "," index "," row row_index "]}," Axlsx Cell style=":{"type":"method","name":"style=","children":[],"call":[" raise ","v < ","@styles cellXfs size ","@styles cellXfs ","Axlsx  validate_unsigned_int "," styles cellXfs size "," styles cellXfs "," styles "]}," Axlsx Cell r_abs":{"type":"method","name":"r_abs","children":[],"call":[" r match [] join "," r match [] "," r match "," r ","CELL_REFERENCE_REGEX  match [] join ","CELL_REFERENCE_REGEX  match [] ","CELL_REFERENCE_REGEX  match "]}," Axlsx Cell r":{"type":"method","name":"r","children":[],"call":["Axlsx  cell_r ","@row index "," index ","@row row_index "]}," Axlsx Cell index":{"type":"method","name":"index","children":[],"call":["@row cells index ","@row cells ","@row index "]}," Axlsx Cell scheme=":{"type":"method","name":"scheme=","children":[],"call":[" set_run_style ","RestrictionValidator  validate "]}," Axlsx Cell vertAlign=":{"type":"method","name":"vertAlign=","children":[],"call":[" set_run_style ","RestrictionValidator  validate "]}," Axlsx Cell sz=":{"type":"method","name":"sz=","children":[],"call":[" set_run_style "]}," Axlsx Cell color=":{"type":"method","name":"color=","children":[],"call":["Color  new ","v is_a? "]}," Axlsx Cell u=":{"type":"method","name":"u=","children":[],"call":[" set_run_style ","v == "]}," Axlsx Cell extend=":{"type":"method","name":"extend=","children":[],"call":[" set_run_style "]}," Axlsx Cell condense=":{"type":"method","name":"condense=","children":[],"call":[" set_run_style "]}," Axlsx Cell shadow=":{"type":"method","name":"shadow=","children":[],"call":[" set_run_style "]}," Axlsx Cell outline=":{"type":"method","name":"outline=","children":[],"call":[" set_run_style "]}," Axlsx Cell strike=":{"type":"method","name":"strike=","children":[],"call":[" set_run_style "]}," Axlsx Cell i=":{"type":"method","name":"i=","children":[],"call":[" set_run_style "]}," Axlsx Cell b=":{"type":"method","name":"b=","children":[],"call":[" set_run_style "]}," Axlsx Cell family=":{"type":"method","name":"family=","children":[],"call":[" set_run_style ","v to_i "]}," Axlsx Cell charset=":{"type":"method","name":"charset=","children":[],"call":[" set_run_style "]}," Axlsx Cell font_name=":{"type":"method","name":"font_name=","children":[],"call":[" set_run_style "]}," Axlsx Cell plain_string?":{"type":"method","name":"plain_string?","children":[],"call":["@value start_with? ! ","@value start_with? ","@value empty? ! ","@value empty? ","@value nil? ! ","@value nil? "," is_text_run? ! "," is_text_run? ","@type == "," type == "," type "," is_array_formula? ! "," is_array_formula? "," is_formula? ! "," is_formula? "," value empty? ! "," value empty? "," value "," value nil? ! "," value nil? "]}," Axlsx Cell is_text_run?":{"type":"method","name":"is_text_run?","children":[],"call":[" contains_rich_text? ! "," contains_rich_text? "]}," Axlsx Cell value=":{"type":"method","name":"value=","children":[],"call":[" cast_value "]}," Axlsx Cell type=":{"type":"method","name":"type=","children":[],"call":[" value= ","@value nil? ","RestrictionValidator  validate ","(ivar :@value) ! "]}," Axlsx Cell initialize":{"type":"method","name":"initialize","children":[],"call":[" cast_value "," cell_type_from_value "," parse_options ","@row cells << ","@row cells ","row worksheet workbook styles ","row worksheet workbook ","row worksheet "," row= ","value cell= "," contains_rich_text? "," value= "," formula_value= ","val nil? ","options delete "," style= ","val == "," type= ","type == "," escape_formulas= ","escape_formulas nil? ","options [] ","row worksheet escape_formulas "," escape_formulas nil? "," escape_formulas ","options empty? ","val zero? "," cast_options delete ue "," cell_type_from_options delete ue ","options delete ue cell= "," options delete ue= "," formula_options delete ue= ","options delete  nil? ","options delete  == "," options [] = ","options []  nil? ","row worksheet options []  "," options []  nil? "," options []  ","options delete  zero? "]}," Axlsx Break to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "," serialized_tag "]}," Axlsx Break initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," parse_options "]}," Axlsx Filters DateGroupItem to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "," serialized_tag "]}," Axlsx Filters DateGroupItem date_time_grouping=":{"type":"method","name":"date_time_grouping=","children":[],"call":["grouping to_s ","RestrictionValidator  validate "]}," Axlsx Filters DateGroupItem second=":{"type":"method","name":"second=","children":[],"call":["RangeValidator  validate "]}," Axlsx Filters DateGroupItem minute=":{"type":"method","name":"minute=","children":[],"call":["RangeValidator  validate "]}," Axlsx Filters DateGroupItem hour=":{"type":"method","name":"hour=","children":[],"call":["RangeValidator  validate "]}," Axlsx Filters DateGroupItem day=":{"type":"method","name":"day=","children":[],"call":["RangeValidator  validate "]}," Axlsx Filters DateGroupItem month=":{"type":"method","name":"month=","children":[],"call":["RangeValidator  validate "]}," Axlsx Filters DateGroupItem year=":{"type":"method","name":"year=","children":[],"call":["RegexValidator  validate "]}," Axlsx Filters DateGroupItem initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "," raise ","options [] "]}," Axlsx Filters Filter to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","@val to_s "]}," Axlsx Filters Filter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx Filters date_group_items=":{"type":"method","name":"date_group_items=","children":[],"call":[" date_group_items << ","DateGroupItem  new "," date_group_items "," raise ","date_group is_a? ","options each "]}," Axlsx Filters filter_items=":{"type":"method","name":"filter_items=","children":[],"call":[" filter_items << ","Filter  new "," filter_items ","values each "]}," Axlsx Filters to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","date_group_item to_xml_string "," date_group_items each "," date_group_items ","filter to_xml_string "," filter_items each "," filter_items "," serialized_attributes "]}," Axlsx Filters blank=":{"type":"method","name":"blank=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Filters calendar_type=":{"type":"method","name":"calendar_type=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx Filters date_group_items":{"type":"method","name":"date_group_items","children":[],"call":[]}," Axlsx Filters filter_items":{"type":"method","name":"filter_items","children":[],"call":[]}," Axlsx Filters apply":{"type":"method","name":"apply","children":[],"call":["cell value == ","filter val ","cell value "," filter_items each "," filter_items "]}," Axlsx Filters initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx FilterColumn to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","@filter to_xml_string "," serialized_attributes "]}," Axlsx FilterColumn show_button=":{"type":"method","name":"show_button=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx FilterColumn hidden_button=":{"type":"method","name":"hidden_button=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx FilterColumn apply":{"type":"method","name":"apply","children":[],"call":["row hidden= ","@filter apply ","row cells [] ","offset + "," col_id to_i "," col_id ","row cells "]}," Axlsx FilterColumn col_id=":{"type":"method","name":"col_id=","children":[],"call":["Axlsx  validate_unsigned_int ","column_index col ","column_index is_a? ","column_index col  col ","column_index col  is_a? "]}," Axlsx FilterColumn hidden_button":{"type":"method","name":"hidden_button","children":[],"call":[]}," Axlsx FilterColumn show_button":{"type":"method","name":"show_button","children":[],"call":[]}," Axlsx FilterColumn initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? ","Axlsx  const_get new ","Axlsx  const_get ","Axlsx  camel "," parse_options "," col_id= ","RestrictionValidator  validate "]}," Axlsx AutoFilter to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","filter_column to_xml_string "," columns each "," columns "," range ","@sort_state to_xml_string ","@sort_state nil? "]}," Axlsx AutoFilter apply":{"type":"method","name":"apply","children":[],"call":["column apply ","row hidden ","rows each "," columns each "," columns ","start_point first "," worksheet rows [] ","end_point last ","start_point last + ","start_point last "," worksheet rows "," worksheet ","Axlsx  name_to_indices "," range split "," range "," worksheet rows []= ","sorted_rows each ","comparison zero? ","index2 <=> ","index1 <=> ","condition order == ","condition order ","custom_list size ","custom_list index ","cell_value_row2 <=> ","cell_value_row1 <=> ","custom_list empty? ","cell_value_row1 nil? ","cell_value_row2 nil? ","condition custom_list ","row2 cells [] value ","row2 cells [] ","condition column_index + ","condition column_index ","row2 cells ","row1 cells [] value ","row1 cells [] ","row1 cells ","sort_conditions each ","rows sort "," sort_state sort_conditions "," sort_state "," sort_on_generate "," sort_state sort_conditions empty? ! "," sort_state sort_conditions empty? ","Axlsx  name_to_indices  first ","Axlsx  name_to_indices  last ","Axlsx  name_to_indices  last + ","condition custom_list  size ","condition custom_list  index ","row2 cells [] value  <=> ","row1 cells [] value  <=> ","condition custom_list  empty? ","row1 cells [] value  nil? ","row2 cells [] value  nil? ","condition condition custom_list  "," sort_state sort_conditions  each "," sort_state  sort_state sort_conditions  "," sort_state  sort_state sort_conditions  empty? ! "," sort_state  sort_state sort_conditions  empty? "]}," Axlsx AutoFilter add_column":{"type":"method","name":"add_column","children":[],"call":[" columns last "," columns "," columns << ","FilterColumn  new "]}," Axlsx AutoFilter columns":{"type":"method","name":"columns","children":[],"call":["SimpleTypedList  new "]}," Axlsx AutoFilter defined_name":{"type":"method","name":"defined_name","children":[],"call":["Axlsx  cell_range "," worksheet name_to_cell "," worksheet "," range split collect "," range split "," range "]}," Axlsx AutoFilter initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","worksheet is_a? "]}," Axlsx Workbook to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << << << ","str << << << << ","pivot_table cache_definition rId ","pivot_table cache_definition ","str << << << ","str << << ","pivot_table cache_definition cache_id to_s ","pivot_table cache_definition cache_id "," pivot_tables each "," pivot_tables "," pivot_tables empty? "," defined_names to_xml_string "," defined_names "," add_defined_name ","sheet auto_filter defined_name ","sheet auto_filter ","str << << << << << << << ","str << << << << << << ","sheet rId ","(send\n  (lvar :index) :+\n  (int 1)) to_s ","index + ","sheet name ","@worksheets each_with_index ","@@date1904 to_s "," add_worksheet "," worksheets size > "," worksheets size "," worksheets ","<pivotCache cacheId=\" << << << << ","<pivotCache cacheId=\" << << << ","<pivotCache cacheId=\" << << ","<pivotCache cacheId=\" << ","sheet to_sheet_node_xml_string "," worksheets each "," worksheets reverse_each "," is_reversed "," views to_xml_string "," views ","<workbookPr date1904=\" << << ","<workbookPr date1904=\" << ","<workbook xmlns=\" << << << << ","<workbook xmlns=\" << << << ","<workbook xmlns=\" << << ","<workbook xmlns=\" << "," worksheets empty? "," sheet auto_filter defined_name s to_xml_string "," sheet auto_filter defined_name s "," add_sheet auto_filter defined_name  ","sheet auto_filter sheet auto_filter defined_name  "]}," Axlsx Workbook []":{"type":"method","name":"[]","children":[],"call":["worksheet [] ","cell_def gsub "," raise ","worksheet is_a? ","(send\n  (send\n    (self) :worksheets) :select) first ","s name == ","s name "," worksheets select "," worksheets ","cell_def split [] ","cell_def split ","cell_def match "," worksheets find ","cell_def include? ","(send\n  (send\n    (self) :worksheets) :select) first  [] ","(send\n  (send\n    (self) :worksheets) :select) first  is_a? ","(send\n  (send\n    (self) :(send\n  (send\n    (self) :worksheets) :select) first s) :select) first "," (send\n  (send\n    (self) :worksheets) :select) first s select "," (send\n  (send\n    (self) :worksheets) :select) first s "," (send\n  (send\n    (self) :worksheets) :select) first s find "]}," Axlsx Workbook xml_space=":{"type":"method","name":"xml_space=","children":[],"call":["Axlsx RestrictionValidator  validate "]}," Axlsx Workbook xml_space":{"type":"method","name":"xml_space","children":[],"call":[]}," Axlsx Workbook shared_strings":{"type":"method","name":"shared_strings","children":[],"call":["SharedStringsTable  new "," xml_space ","ws cells "," worksheets collect "," worksheets "]}," Axlsx Workbook relationships":{"type":"method","name":"relationships","children":[],"call":["r << ","Relationship  new "," use_shared_strings ","PIVOT_TABLE_CACHE_DEFINITION_PN  % ","index + ","pivot_table cache_definition "," pivot_tables each_with_index "," pivot_tables ","WORKSHEET_PN  % ","r size + ","r size ","@worksheets each ","Relationships  new "," format ","Relationships  new  << "," use_shaRelationships  new ed_stRelationships  new ings ","Relationships  new  size + ","Relationships  new  size ","@woRelationships  new ksheets each "," foRelationships  new mat "]}," Axlsx Workbook add_defined_name":{"type":"method","name":"add_defined_name","children":[],"call":[" defined_names << ","DefinedName  new "," defined_names "]}," Axlsx Workbook add_worksheet":{"type":"method","name":"add_worksheet","children":[],"call":[" block_given? ","Worksheet  new "]}," Axlsx Workbook insert_worksheet":{"type":"method","name":"insert_worksheet","children":[],"call":[" block_given? ","@worksheets insert ","@worksheets delete_at ","@worksheets size - ","@worksheets size ","Worksheet  new ","@Worksheet  new s insert ","@Worksheet  new s delete_at ","@Worksheet  new s size - ","@Worksheet  new s size "]}," Axlsx Workbook use_autowidth=":{"type":"method","name":"use_autowidth=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Workbook use_autowidth":{"type":"method","name":"use_autowidth","children":[],"call":[]}," Axlsx Workbook date1904":{"type":"method","name":"date1904","children":[],"call":[]}," Axlsx Workbook date1904=":{"type":"method","name":"date1904=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Workbook initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," date1904= ","options [] ","options [] nil? ! ","options [] nil? ","SimpleTypedList  new ","Styles  new "," escape_formulas= ","Axlsx  escape_formulas "]}," Axlsx Workbook sheet_by_name":{"type":"method","name":"sheet_by_name","children":[],"call":["@worksheets [] ","sheet name == ","sheet name ","@worksheets index ","@worksheets find ","Axlsx  coder encode ","Axlsx  coder "]}," Axlsx Workbook styles":{"type":"method","name":"styles","children":[],"call":[" block_given? "]}," Axlsx Workbook comments":{"type":"method","name":"comments","children":[],"call":["(send\n  (send nil :worksheets) :map) compact ","sheet comments "," worksheets map "," worksheets "," worksheets map compact "]}," Axlsx Workbook defined_names":{"type":"method","name":"defined_names","children":[],"call":["DefinedNames  new "]}," Axlsx Workbook use_shared_strings=":{"type":"method","name":"use_shared_strings=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx SharedStringsTable resolve":{"type":"method","name":"resolve","children":[],"call":["@unique_cells []= ","@shared_xml_string << << << ","@shared_xml_string << << ","CellSerializer  run_xml_string ","@shared_xml_string << ","cell send ","@unique_cells [] ","cell value ","cells each "]}," Axlsx SharedStringsTable to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["Axlsx  sanitize ","str << << << << << ","str << << << << ","str << << << ","str << << "," xml_space to_s "," xml_space ","str << "," unique_count to_s "," unique_count ","@count to_s "," xml:space=\" << << << << "," xml:space=\" << << << "," xml:space=\" << << "," xml:space=\" << "," count=\" << << << << "," count=\" << << << "," count=\" << << "," count=\" << ","<?xml version=\"1.0\" encoding=\"UTF-8\"?><sst xmlns=\" << << ","<?xml version=\"1.0\" encoding=\"UTF-8\"?><sst xmlns=\" << ","Axlsx  sanitize  << << << << << ","Axlsx  sanitize  << << << << ","Axlsx  sanitize  << << << ","Axlsx  sanitize  << << ","Axlsx  sanitize  << "]}," Axlsx SharedStringsTable initialize":{"type":"method","name":"initialize","children":[],"call":[" resolve ","shareable_cells size ","cell plain_string? ","cells flatten select ","cells flatten ","cell contains_rich_text? "," +@ "]}," Axlsx SharedStringsTable unique_count":{"type":"method","name":"unique_count","children":[],"call":["@unique_cells size "]}," Axlsx DefinedNames to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","defined_name to_xml_string "," each ","@list empty? "," empty? "]}," Axlsx DefinedNames initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx DefinedName to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << "," serialized_attributes "," raise "," name ","> << << ","> << ","<definedName  << << << ","<definedName  << << ","<definedName  << ","str << << << ","str << << << << "]}," Axlsx DefinedName local_sheet_id=":{"type":"method","name":"local_sheet_id=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx DefinedName initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx validate_display_blanks_as":{"type":"method","name":"validate_display_blanks_as","children":[],"call":[]}," Axlsx validate_split_state_type":{"type":"method","name":"validate_split_state_type","children":[],"call":[]}," Axlsx validate_pane_type":{"type":"method","name":"validate_pane_type","children":[],"call":[]}," Axlsx validate_sheet_view_type":{"type":"method","name":"validate_sheet_view_type","children":[],"call":[]}," Axlsx validate_data_validation_type":{"type":"method","name":"validate_data_validation_type","children":[],"call":[]}," Axlsx validate_data_validation_operator":{"type":"method","name":"validate_data_validation_operator","children":[],"call":[]}," Axlsx validate_data_validation_error_style":{"type":"method","name":"validate_data_validation_error_style","children":[],"call":[]}," Axlsx validate_table_element_type":{"type":"method","name":"validate_table_element_type","children":[],"call":[]}," Axlsx validate_relationship_type":{"type":"method","name":"validate_relationship_type","children":[],"call":[]}," Axlsx validate_content_type":{"type":"method","name":"validate_content_type","children":[],"call":[]}," Axlsx validate_vertical_alignment":{"type":"method","name":"validate_vertical_alignment","children":[],"call":[]}," Axlsx validate_horizontal_alignment":{"type":"method","name":"validate_horizontal_alignment","children":[],"call":[]}," Axlsx validate_scatter_style":{"type":"method","name":"validate_scatter_style","children":[],"call":[]}," Axlsx validate_gradient_type":{"type":"method","name":"validate_gradient_type","children":[],"call":[]}," Axlsx validate_conditional_formatting_operator":{"type":"method","name":"validate_conditional_formatting_operator","children":[],"call":[]}," Axlsx validate_conditional_formatting_value_object_type":{"type":"method","name":"validate_conditional_formatting_value_object_type","children":[],"call":[]}," Axlsx validate_conditional_formatting_type":{"type":"method","name":"validate_conditional_formatting_type","children":[],"call":[]}," Axlsx validate_icon_set":{"type":"method","name":"validate_icon_set","children":[],"call":[]}," Axlsx validate_time_period_type":{"type":"method","name":"validate_time_period_type","children":[],"call":[]}," Axlsx validate_pattern_type":{"type":"method","name":"validate_pattern_type","children":[],"call":[]}," Axlsx validate_family":{"type":"method","name":"validate_family","children":[],"call":[]}," Axlsx validate_cell_u":{"type":"method","name":"validate_cell_u","children":[],"call":[]}," Axlsx validate_page_orientation":{"type":"method","name":"validate_page_orientation","children":[],"call":[]}," Axlsx validate_scale_0_10_400":{"type":"method","name":"validate_scale_0_10_400","children":[],"call":[]}," Axlsx validate_scale_10_400":{"type":"method","name":"validate_scale_10_400","children":[],"call":[]}," Axlsx validate_number_with_unit":{"type":"method","name":"validate_number_with_unit","children":[],"call":[]}," Axlsx validate_float":{"type":"method","name":"validate_float","children":[],"call":[]}," Axlsx validate_string":{"type":"method","name":"validate_string","children":[],"call":[]}," Axlsx validate_boolean":{"type":"method","name":"validate_boolean","children":[],"call":[]}," Axlsx validate_int":{"type":"method","name":"validate_int","children":[],"call":[]}," Axlsx validate_unsigned_numeric":{"type":"method","name":"validate_unsigned_numeric","children":[],"call":[]}," Axlsx validate_unsigned_int":{"type":"method","name":"validate_unsigned_int","children":[],"call":[]}," Axlsx validate_angle":{"type":"method","name":"validate_angle","children":[],"call":[]}," Axlsx validate_integerish":{"type":"method","name":"validate_integerish","children":[],"call":[]}," Axlsx DataTypeValidator validate":{"type":"method","name":"validate","children":[],"call":[]}," Axlsx RegexValidator validate":{"type":"method","name":"validate","children":[],"call":[]}," Axlsx RangeValidator validate":{"type":"method","name":"validate","children":[],"call":[]}," Axlsx RestrictionValidator validate":{"type":"method","name":"validate","children":[],"call":[]}," Axlsx Storage initialize":{"type":"method","name":"initialize","children":[],"call":[" name= ","TYPES  [] "," data nil? "," data ","COLORS  [] "," send ","o [] "," respond_to? ","options each "]}," Axlsx Storage type=":{"type":"method","name":"type=","children":[],"call":["RestrictionValidator  validate ","TYPES  values "]}," Axlsx Storage data=":{"type":"method","name":"data=","children":[],"call":["v bytes to_a ","v bytes ","v size "," type= ","TYPES  [] ","Axlsx  validate_string "]}," Axlsx Storage name=":{"type":"method","name":"name=","children":[],"call":["@name size * ","@name size ","v bytes to_a << ","v bytes to_a ","v bytes ","v bytes to_a <<  size * ","v bytes to_a <<  size "]}," Axlsx Storage color=":{"type":"method","name":"color=","children":[],"call":["RestrictionValidator  validate ","COLORS  values "]}," Axlsx Storage to_s":{"type":"method","name":"to_s","children":[],"call":["data pack ","(send\n  (ivar :@name) :concat\n  (send\n    (const nil :Array) :new\n    (send\n      (int 32) :-\n      (send\n        (ivar :@name) :size))\n    (int 0))) flatten ","@name concat ","Array  new ","32 - ","@name size ","(send\n  (ivar :@name) :concat\n  (send\n    (const nil :Array) :new\n    (send\n      (int 32) :-\n      (send\n        (ivar :@name) :size))\n    (int 0))) flatten  pack "]}," Axlsx SimpleTypedList to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << << << ","str << << ","str << ","item to_xml_string ","@list each ","str << << << << << ","str << << << << ","@list size to_s ","@list size ","classname [] downcase + ","classname [] ","classname [] downcase "," serialize_as to_s "," serialize_as ","@allowed_types [] name split last ","@allowed_types [] name split ","@allowed_types [] name ","@allowed_types [] ","</ << << ","</ << "," each ","< << << << << ","< << << << "," size to_s "," size ","< << << ","< << ","@allowed_types [] name split last  [] downcase + ","@allowed_types [] name split last  [] ","@allowed_types [] name split last  [] downcase "]}," Axlsx SimpleTypedList ==":{"type":"method","name":"==","children":[],"call":["v == "]}," Axlsx SimpleTypedList protected?":{"type":"method","name":"protected?","children":[],"call":["index < ","@locked_at is_a? "," locked_at "," locked_at is_a? "]}," Axlsx SimpleTypedList insert":{"type":"method","name":"insert","children":[],"call":["@list insert "," raise "," protected? ","DataTypeValidator  validate "]}," Axlsx SimpleTypedList []=":{"type":"method","name":"[]=","children":[],"call":["@list []= "," raise "," protected? ","DataTypeValidator  validate "]}," Axlsx SimpleTypedList delete_at":{"type":"method","name":"delete_at","children":[],"call":["@list delete_at "," raise "," protected? ","@list [] "]}," Axlsx SimpleTypedList delete":{"type":"method","name":"delete","children":[],"call":["@list delete "," raise "," protected? ","@list index ","@list include? "," index "," include? "]}," Axlsx SimpleTypedList <<":{"type":"method","name":"<<","children":[],"call":["@list size - ","@list size ","@list << ","DataTypeValidator  validate "," size - "," size "]}," Axlsx SimpleTypedList +":{"type":"method","name":"+","children":[],"call":["@list << ","DataTypeValidator  validate ","v each "," << ","other each "]}," Axlsx SimpleTypedList unlock":{"type":"method","name":"unlock","children":[],"call":[]}," Axlsx SimpleTypedList to_ary":{"type":"method","name":"to_ary","children":[],"call":[]}," Axlsx SimpleTypedList lock":{"type":"method","name":"lock","children":[],"call":["@list size "," size "]}," Axlsx SimpleTypedList transpose":{"type":"method","name":"transpose","children":[],"call":["result [] []= ","result [] "," block_given? ","@list [] cells [] ","@list [] cells ","@list [] ","@list [] cells size >= ","@list [] cells size ","max_column_count times ","row_count times ","Array  new ","(send\n  (ivar :@list) :map) max ","row cells size ","row cells ","@list map ","@list size ","@list clone ","@list size == "," [] cells [] "," [] cells "," [] "," [] cells size >= "," [] cells size ","(send nil :map) max "," map "," size "," clone "," size zero? ","(send\n  (ivar :@list) :map) max  times ","(send nil :map) max  times ","@list size  times "," size  times "]}," Axlsx SimpleTypedList initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","type is_a? ","item is_a? ","type each ","Array  new ","serialize_as nil? "]}," Axlsx SerializedAttributes serialized_element_attributes":{"type":"method","name":"serialized_element_attributes","children":[],"call":["str << ","Axlsx  camel "," block_given? ","value nil? ","values [] ","attribute_name to_s ","attrs each "," instance_values "," class xml_element_attributes + "," class xml_element_attributes "," class ","Axlsx  instance_values_for ","str << << << << << << << ","str << << << << << << ","str << << << << << ","str << << << << ","str << << << ","str << << ","values []  nil? ","values [] s [] "," instance_values  [] ","Axlsx  instance_values_for  [] "," class xml_element_attributes +  each "," instance_values [] s "," instance_ instance_values  "," instance_Axlsx  instance_values_for  ","Axlsx  instance_values [] s_for ","Axlsx  instance_ instance_values _for ","Axlsx  instance_Axlsx  instance_values_for _for "]}," Axlsx SerializedAttributes declared_attributes":{"type":"method","name":"declared_attributes","children":[],"call":[" class xml_attributes include? ","key to_sym "," class xml_attributes "," class ","value != "," instance_values select "," instance_values ","Axlsx  instance_values_for select ","Axlsx  instance_values_for "]}," Axlsx SerializedAttributes serialized_attributes":{"type":"method","name":"serialized_attributes","children":[],"call":["str << ","Axlsx  camel ","attributes each "," declared_attributes merge! "," declared_attributes ","Axlsx  booleanize ","str << << << << ","str << << << ","value to_s ","str << << ","value nil? ","additional_attributes each ","camel_xml_attributes [] "," instance_variable_get ","ivar_xml_attributes [] "," instance_variable_defined? ","additional_attributes key? "," class xml_attributes each_with_index "," class xml_attributes "," class "," class ivar_xml_attributes "," class camel_xml_attributes "," declared_attributes merge!  each "," declared_ declared_attributes merge!  merge! "," declared_ declared_attributes merge!  ","Axlsx  camel  to_s ","Axlsx  booleanize  to_s "," instance_variable_get  to_s ","Axlsx  camel  nil? ","Axlsx  booleanize  nil? "," instance_variable_get  nil? ","additional_ declared_attributes merge!  each ","camel_xml_ declared_attributes merge!  [] "," class camel_xml_attributes  [] ","ivar_xml_ declared_attributes merge!  [] "," class ivar_xml_attributes  [] ","additional_ declared_attributes merge!  key? "," class xml_ declared_attributes merge!  each_with_index "," class xml_ declared_attributes merge!  "," class ivar_xml_ declared_attributes merge!  "," class  class ivar_xml_attributes  "," class camel_xml_ declared_attributes merge!  "," class  class camel_xml_attributes  "]}," Axlsx SerializedAttributes ClassMethods xml_element_attributes":{"type":"method","name":"xml_element_attributes","children":[],"call":[]}," Axlsx SerializedAttributes ClassMethods serializable_element_attributes":{"type":"method","name":"serializable_element_attributes","children":[],"call":[]}," Axlsx SerializedAttributes ClassMethods xml_attributes":{"type":"method","name":"xml_attributes","children":[],"call":[]}," Axlsx SerializedAttributes ClassMethods serializable_attributes":{"type":"method","name":"serializable_attributes","children":[],"call":[]}," Axlsx SerializedAttributes included":{"type":"method","name":"included","children":[],"call":[]}," Axlsx Parser parse_value":{"type":"method","name":"parse_value","children":[],"call":["node text strip ","node text ","node empty? "," parser_xml xpath "," parser_xml "," parser_xml xpath  text strip "," parser_xml xpath  text "," parser_xml xpath  empty? "]}," Axlsx Parser parse_float":{"type":"method","name":"parse_float","children":[],"call":[" send ","attr_name to_s ","v to_f ","v respond_to? "," parse_value ","v to_f  to_f "," parse_value  to_f ","v to_f  respond_to? "," parse_value  respond_to? "," parse_v to_f alue "," parse_ parse_value alue "]}," Axlsx Parser parse_integer":{"type":"method","name":"parse_integer","children":[],"call":[" send ","attr_name to_s ","v to_i ","v respond_to? "," parse_value ","v to_i  to_i "," parse_value  to_i ","v to_i  respond_to? "," parse_value  respond_to? "," parse_v to_i alue "," parse_ parse_value alue "]}," Axlsx Parser parse_symbol":{"type":"method","name":"parse_symbol","children":[],"call":[" send ","attr_name to_s ","v to_sym ","v nil? "," parse_value ","v to_sym  to_sym "," parse_value  to_sym ","v to_sym  nil? "," parse_value  nil? "," parse_v to_sym alue "," parse_ parse_value alue "]}," Axlsx Parser parse_string":{"type":"method","name":"parse_string","children":[],"call":[" send "," parse_value ","attr_name to_s "]}," Axlsx OptionsParser parse_options":{"type":"method","name":"parse_options","children":[],"call":[" send ","value != "," respond_to? ","options each ","value nil? ! ","value nil? "]}," Axlsx Accessors ClassMethods validated_attr_accessor":{"type":"method","name":"validated_attr_accessor","children":[],"call":[" module_eval ","SETTER  % ","symbol to_s "," attr_reader ","symbols each "," format "]}," Axlsx Accessors ClassMethods boolean_attr_accessor":{"type":"method","name":"boolean_attr_accessor","children":[],"call":[" validated_attr_accessor "]}," Axlsx Accessors ClassMethods float_attr_accessor":{"type":"method","name":"float_attr_accessor","children":[],"call":[" validated_attr_accessor "]}," Axlsx Accessors ClassMethods unsigned_int_attr_accessor":{"type":"method","name":"unsigned_int_attr_accessor","children":[],"call":[" validated_attr_accessor "]}," Axlsx Accessors ClassMethods string_attr_accessor":{"type":"method","name":"string_attr_accessor","children":[],"call":[" validated_attr_accessor "]}," Axlsx Accessors included":{"type":"method","name":"included","children":[],"call":[]}," Axlsx Xf to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," protection to_xml_string "," protection "," alignment to_xml_string "," alignment "," serialized_attributes "]}," Axlsx Xf applyProtection=":{"type":"method","name":"applyProtection=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Xf applyAlignment=":{"type":"method","name":"applyAlignment=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Xf applyBorder=":{"type":"method","name":"applyBorder=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Xf applyFill=":{"type":"method","name":"applyFill=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Xf applyFont=":{"type":"method","name":"applyFont=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Xf applyNumberFormat=":{"type":"method","name":"applyNumberFormat=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Xf pivotButton=":{"type":"method","name":"pivotButton=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Xf quotePrefix=":{"type":"method","name":"quotePrefix=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Xf xfId=":{"type":"method","name":"xfId=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Xf borderId=":{"type":"method","name":"borderId=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Xf fillId=":{"type":"method","name":"fillId=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Xf fontId=":{"type":"method","name":"fontId=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Xf numFmtId=":{"type":"method","name":"numFmtId=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Xf protection=":{"type":"method","name":"protection=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Xf alignment=":{"type":"method","name":"alignment=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Xf initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx TableStyles to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","table_style to_xml_string "," each "," serialized_attributes "," size "]}," Axlsx TableStyles defaultPivotStyle=":{"type":"method","name":"defaultPivotStyle=","children":[],"call":["Axlsx  validate_string "]}," Axlsx TableStyles defaultTableStyle=":{"type":"method","name":"defaultTableStyle=","children":[],"call":["Axlsx  validate_string "]}," Axlsx TableStyles initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," Axlsx TableStyleElement to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "," serialized_tag "]}," Axlsx TableStyleElement dxfId=":{"type":"method","name":"dxfId=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx TableStyleElement size=":{"type":"method","name":"size=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx TableStyleElement type=":{"type":"method","name":"type=","children":[],"call":["Axlsx  validate_table_element_type "]}," Axlsx TableStyleElement initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx TableStyle to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","table_style_el to_xml_string "," each "," serialized_attributes "," size "]}," Axlsx TableStyle table=":{"type":"method","name":"table=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx TableStyle pivot=":{"type":"method","name":"pivot=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx TableStyle name=":{"type":"method","name":"name=","children":[],"call":["Axlsx  validate_string "]}," Axlsx TableStyle initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "," name= "]}," Axlsx Styles load_default_styles":{"type":"method","name":"load_default_styles","children":[],"call":["@tableStyles lock ","TableStyles  new ","@dxfs lock ","SimpleTypedList  new ","@cellXfs lock ","@cellXfs << ","Xf  new ","@cellStyles lock ","@cellStyles << ","CellStyle  new ","@cellStyleXfs lock ","@cellStyleXfs << ","@borders lock ","@borders << ","black_border prs << ","BorderPr  new ","Color  new ","black_border prs ","(sym :left) each ","Border  new ","@fills lock ","@fills << ","Fill  new ","Axlsx PatternFill  new ","@fonts lock ","@fonts << ","Font  new ","@numFmts lock ","@numFmts << ","NumFmt  new ","TableStyles  new  lock ","SimpleTypedList  new  lock ","SimpleTypedList  new  << ","Border  new  prs << ","Border  new  prs "]}," Axlsx Styles to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," instance_values [] to_xml_string "," instance_values [] ","key to_s "," instance_values "," instance_values [] nil? ","(sym :numFmts) each ","str << << << ","str << << ","<styleSheet xmlns=\" << << ","<styleSheet xmlns=\" << ","instance_vals [] to_xml_string ","instance_vals [] ","instance_vals [] nil? ","Axlsx  instance_values_for ","Axlsx  instance_values_for  [] to_xml_string ","Axlsx  instance_values_for  [] ","Axlsx  instance_values_for  [] nil? "]}," Axlsx Styles parse_num_fmt_options":{"type":"method","name":"parse_num_fmt_options","children":[],"call":["options [] ","numFmt numFmtId "," numFmts << "," numFmts ","options [] == ","NumFmt  new ","options [] to_s ","(send\n  (ivar :@numFmts) :map) max + ","(send\n  (ivar :@numFmts) :map) max ","num_fmt numFmtId ","@numFmts map ","options [] != ","(send\n  (send\n    (lvar :options) :keys) :&\n  (array\n    (sym :format_code)\n    (sym :num_fmt))) empty? ","options keys & ","options keys ","@numFmts map max + ","@numFmts map max ","NumFmt  new  NumFmt  new Id "," NumFmt  new s << "," NumFmt  new s ","(send\n  (ivar :@NumFmt  new s) :map) max + ","(send\n  (ivar :@NumFmt  new s) :map) max ","num_fmt NumFmt  new Id ","@NumFmt  new s map ","@NumFmt  new s map max + ","@NumFmt  new s map max "]}," Axlsx Styles parse_border_options":{"type":"method","name":"parse_border_options","children":[],"call":[" borders [] clone "," borders [] "," borders ","options [] == ","options [] "," raise ","ERR_INVALID_BORDER_ID  % ","b_opts < "," borders size ","b_opts is_a? "," borders << ","border prs << ","BorderPr  new ","border prs ","Color  new ","border_edge [] ","b_opts merge ","(str \"border_\") to_sym ","(or\n  (send\n    (lvar :b_opts) :[]\n    (sym :edges))\n  (array\n    (sym :left)\n    (sym :right)\n    (sym :top)\n    (sym :bottom))) each ","b_opts [] ","Border  new ","ERR_INVALID_BORDER_OPTIONS  % ","b_opts keys include? ","b_opts keys ","edge_b_opts [] ","validate_border_hash call ","base_border_opts empty? ","edge_b_opts empty? ! ","edge_b_opts empty? ","base_border_opts [] ","edge_b_opts merge ","b_opts [] include? ","borders_array each ","Border EDGES  each ","borders_array << ","val merge ","base_border_opts merge ","b_opts [] nil? ","options [] each ","options [] is_a? ","options [] nil? ","(and\n  (send\n    (send\n      (lvar :val) :keys) :include?\n    (sym :style))\n  (send\n    (send\n      (lvar :val) :keys) :include?\n    (sym :color))) ! ","val keys include? ","val keys "," lambda ","options [] >= ","Border EDGES  all? "," format ","val key? "," Border  new s [] clone "," Border  new s [] "," Border  new s ","options []  < "," Border  new s size ","options []  is_a? "," Border  new s << ","Border  new  prs << ","Border  new  prs ","b_opts merge  [] ","Border  new _edge [] ","options []  merge ","(str \"Border  new _\") to_sym ","(or\n  (send\n    (lvar :options [] ) :[]\n    (sym :edges))\n  (array\n    (sym :left)\n    (sym :right)\n    (sym :top)\n    (sym :bottom))) each ","options []  [] ","options []  keys include? ","options []  keys ","edge_options []  [] ","edge_b_opts merge  [] ","validate_Border  new _hash call ","options [] idate_border_hash call ","base_Border  new _opts empty? ","options []  empty? ","base_border_opts merge  empty? ","edge_options []  empty? ! ","edge_b_opts merge  empty? ! ","edge_options []  empty? ","edge_b_opts merge  empty? ","base_Border  new _opts [] ","base_border_opts merge  [] ","edge_options []  merge ","edge_b_opts merge  merge ","options []  [] include? ","Border  new s_array each ","Border  new s_array << ","base_Border  new _opts merge ","base_border_opts merge  merge ","options []  [] nil? ","(and\n  (send\n    (send\n      (lvar :options [] ) :keys) :include?\n    (sym :style))\n  (send\n    (send\n      (lvar :options [] ) :keys) :include?\n    (sym :color))) ! ","options []  key? "]}," Axlsx Styles parse_fill_options":{"type":"method","name":"parse_fill_options","children":[],"call":[" fills << "," fills ","Fill  new ","PatternFill  new ","options [] == ","options [] ","Color  new "," Fill  new s << "," Fill  new s "]}," Axlsx Styles parse_font_options":{"type":"method","name":"parse_font_options","children":[],"call":[" fonts << "," fonts ","options [] == ","options [] ","font name= ","font color= ","Color  new ","Font  new ","options []= ","key to_sym ","options keys include? ","options keys "," fonts first instance_values each "," fonts first instance_values "," fonts first ","(send\n  (send\n    (lvar :options) :keys) :&\n  (array\n    (sym :fg_color)\n    (sym :sz)\n    (sym :b)\n    (sym :i)\n    (sym :u)\n    (sym :strike)\n    (sym :outline)\n    (sym :shadow)\n    (sym :charset)\n    (sym :family)\n    (sym :font_name))) empty? ","options keys & ","Axlsx  instance_values_for each ","Axlsx  instance_values_for ","options key? "," Font  new s << "," Font  new s ","Font  new  name= ","Font  new  color= "," Font  new s first instance_values each "," Font  new s first instance_values "," Font  new s first ","(send\n  (send\n    (lvar :options) :keys) :&\n  (array\n    (sym :fg_color)\n    (sym :sz)\n    (sym :b)\n    (sym :i)\n    (sym :u)\n    (sym :strike)\n    (sym :outline)\n    (sym :shadow)\n    (sym :charset)\n    (sym :family)\n    (sym :Font  new _name))) empty? "]}," Axlsx Styles parse_alignment_options":{"type":"method","name":"parse_alignment_options","children":[],"call":["CellAlignment  new ","options [] "]}," Axlsx Styles parse_protection_options":{"type":"method","name":"parse_protection_options","children":[],"call":["CellProtection  new ","(send\n  (send\n    (lvar :options) :keys) :&\n  (array\n    (sym :hidden)\n    (sym :locked))) empty? ","options keys & ","options keys "]}," Axlsx Styles add_style":{"type":"method","name":"add_style","children":[],"call":[" dxfs << "," dxfs "," cellXfs << "," cellXfs ","options [] == ","options [] ","Xf  new ","protection nil? ! ","protection nil? ","alignment nil? ! ","alignment nil? ","border nil? ! ","border nil? ","numFmt nil? ! ","numFmt nil? ","font nil? ! ","font nil? ","fill nil? ! ","fill nil? ","Dxf  new "," parse_protection_options "," parse_alignment_options "," parse_border_options "," parse_num_fmt_options "," parse_font_options "," parse_fill_options "," raise ","(sym :xf) include? "," style_index []= "," style_index "," style_index key ","raw_style delete ","raw_style [] ","(pair\n  (sym :type)\n  (sym :xf)) merge merge ","(pair\n  (sym :type)\n  (sym :xf)) merge ","@fonts first family ","@fonts first ","@fonts first sz ","@fonts first name ","options [] []= ","options [] [] == ","options [] [] ","options [] is_a? ","options [] [] map "," parse_protection_options  nil? ! "," parse_protection_options  nil? "," parse_alignment_options  nil? ! "," parse_alignment_options  nil? "," parse_border_options  nil? ! "," parse_border_options  nil? "," parse_num_fmt_options  nil? ! "," parse_num_fmt_options  nil? "," parse_font_options  nil? ! "," parse_font_options  nil? "," parse_fill_options  nil? ! "," parse_fill_options  nil? "," parse_ parse_protection_options _options "," parse_ parse_alignment_options _options "," parse_ parse_border_options _options "," parse_ parse_font_options _options "," parse_ parse_fill_options _options "," Xf  new _index []= "," Dxf  new _index []= "," Xf  new _index "," Dxf  new _index "," Xf  new _index key "," Dxf  new _index key ","raw_Xf  new  delete ","raw_Dxf  new  delete ","(pair\n  (sym :type)\n  (sym :xf)) merge merge  delete ","raw_Xf  new  [] ","raw_Dxf  new  [] ","(pair\n  (sym :type)\n  (sym :xf)) merge merge  [] ","@ parse_font_options s first family ","@ parse_font_options s first ","@ parse_font_options s first sz ","@ parse_font_options s first name "]}," Axlsx Styles initialize":{"type":"method","name":"initialize","children":[],"call":[" load_default_styles "]}," Axlsx PatternFill to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," bgColor to_xml_string "," bgColor "," bgColor is_a? "," fgColor to_xml_string "," fgColor "," fgColor is_a? ","str << << << ","str << << "," patternType to_s "," patternType ","<patternFill patternType=\" << << ","<patternFill patternType=\" << "]}," Axlsx PatternFill patternType=":{"type":"method","name":"patternType=","children":[],"call":["Axlsx  validate_pattern_type "]}," Axlsx PatternFill bgColor=":{"type":"method","name":"bgColor=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx PatternFill fgColor=":{"type":"method","name":"fgColor=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx PatternFill initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx NumFmt to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "," serialized_tag "]}," Axlsx NumFmt formatCode=":{"type":"method","name":"formatCode=","children":[],"call":["Axlsx  validate_string "]}," Axlsx NumFmt numFmtId=":{"type":"method","name":"numFmtId=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx NumFmt initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx GradientStop to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," color to_xml_string "," color ","str << << << ","str << << "," position to_s "," position ","<stop position=\" << << ","<stop position=\" << "]}," Axlsx GradientStop position=":{"type":"method","name":"position=","children":[],"call":["DataTypeValidator  validate ","arg <= ","arg >= "," lambda "]}," Axlsx GradientStop color=":{"type":"method","name":"color=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx GradientStop initialize":{"type":"method","name":"initialize","children":[],"call":[" position= "," color= "]}," Axlsx GradientFill to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","s to_xml_string ","@stop each "," serialized_attributes "]}," Axlsx GradientFill validate_format_percentage":{"type":"method","name":"validate_format_percentage","children":[],"call":["DataTypeValidator  validate ","arg <= ","arg >= "," lambda "]}," Axlsx GradientFill bottom=":{"type":"method","name":"bottom=","children":[],"call":[" validate_format_percentage "]}," Axlsx GradientFill top=":{"type":"method","name":"top=","children":[],"call":[" validate_format_percentage "]}," Axlsx GradientFill right=":{"type":"method","name":"right=","children":[],"call":[" validate_format_percentage "]}," Axlsx GradientFill left=":{"type":"method","name":"left=","children":[],"call":[" validate_format_percentage "]}," Axlsx GradientFill degree=":{"type":"method","name":"degree=","children":[],"call":["Axlsx  validate_float "]}," Axlsx GradientFill type=":{"type":"method","name":"type=","children":[],"call":["Axlsx  validate_gradient_type "]}," Axlsx GradientFill initialize":{"type":"method","name":"initialize","children":[],"call":["SimpleTypedList  new "," parse_options ","options [] "]}," Axlsx Font to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << << << ","str << << << << ","v to_s ","str << << << ","str << << ","k to_s ","v to_xml_string ","v is_a? "," instance_values each "," instance_values ","< << << << << ","< << << << ","Axlsx  booleanize to_s ","Axlsx  booleanize ","< << << ","< << ","Axlsx  instance_values_for each ","Axlsx  instance_values_for "]}," Axlsx Font sz=":{"type":"method","name":"sz=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Font color=":{"type":"method","name":"color=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Font extend=":{"type":"method","name":"extend=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Font condense=":{"type":"method","name":"condense=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Font shadow=":{"type":"method","name":"shadow=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Font outline=":{"type":"method","name":"outline=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Font strike=":{"type":"method","name":"strike=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Font u=":{"type":"method","name":"u=","children":[],"call":["Axlsx  validate_boolean ","Axlsx  validate_cell_u ","v == "]}," Axlsx Font i=":{"type":"method","name":"i=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Font b=":{"type":"method","name":"b=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Font family=":{"type":"method","name":"family=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Font charset=":{"type":"method","name":"charset=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Font name=":{"type":"method","name":"name=","children":[],"call":["Axlsx  validate_string "]}," Axlsx Font initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx Fill fill_type=":{"type":"method","name":"fill_type=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Fill to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","@fill_type to_xml_string "]}," Axlsx Fill initialize":{"type":"method","name":"initialize","children":[],"call":[" fill_type= "]}," Axlsx Dxf to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," send to_xml_string "," send ","CHILD_ELEMENTS  each "]}," Axlsx Dxf fill=":{"type":"method","name":"fill=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Dxf border=":{"type":"method","name":"border=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Dxf font=":{"type":"method","name":"font=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Dxf numFmt=":{"type":"method","name":"numFmt=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Dxf protection=":{"type":"method","name":"protection=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Dxf alignment=":{"type":"method","name":"alignment=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Dxf initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx Color to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes ","str << << << ","str << << "," serialized_tag "," + + "," + ","tag_name to_s "]}," Axlsx Color tint=":{"type":"method","name":"tint=","children":[],"call":["Axlsx  validate_float "]}," Axlsx Color rgb=":{"type":"method","name":"rgb=","children":[],"call":[" raise ","v match ","v rjust ","v * ","v size == ","v size ","v upcase ","Axlsx  validate_string ","(str \"[0-9A-F]{8}\") match? ","v rjust  match ","v *  match ","v upcase  match ","v rjust  rjust ","v *  rjust ","v upcase  rjust ","v rjust  * ","v *  * ","v upcase  * ","v rjust  size == ","v *  size == ","v upcase  size == ","v rjust  size ","v *  size ","v upcase  size ","v rjust  upcase ","v *  upcase ","v upcase  upcase ","Axlsx  v rjust alidate_string ","Axlsx  v * alidate_string ","Axlsx  v upcase alidate_string "]}," Axlsx Color auto=":{"type":"method","name":"auto=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Color initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx CellStyle to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "," serialized_tag "]}," Axlsx CellStyle customBuiltin=":{"type":"method","name":"customBuiltin=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx CellStyle hidden=":{"type":"method","name":"hidden=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx CellStyle iLevel=":{"type":"method","name":"iLevel=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx CellStyle builtinId=":{"type":"method","name":"builtinId=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx CellStyle xfId=":{"type":"method","name":"xfId=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx CellStyle name=":{"type":"method","name":"name=","children":[],"call":["Axlsx  validate_string "]}," Axlsx CellStyle initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx CellProtection to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "," serialized_tag "]}," Axlsx CellProtection locked=":{"type":"method","name":"locked=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx CellProtection hidden=":{"type":"method","name":"hidden=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx CellProtection initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx CellAlignment to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "," serialized_tag "]}," Axlsx CellAlignment reading_order=":{"type":"method","name":"reading_order=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx CellAlignment shrink_to_fit=":{"type":"method","name":"shrink_to_fit=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx CellAlignment justify_last_line=":{"type":"method","name":"justify_last_line=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx CellAlignment relative_indent=":{"type":"method","name":"relative_indent=","children":[],"call":["Axlsx  validate_int "]}," Axlsx CellAlignment indent=":{"type":"method","name":"indent=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx CellAlignment wrap_text=":{"type":"method","name":"wrap_text=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx CellAlignment text_rotation=":{"type":"method","name":"text_rotation=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx CellAlignment vertical=":{"type":"method","name":"vertical=","children":[],"call":["Axlsx  validate_vertical_alignment "]}," Axlsx CellAlignment horizontal=":{"type":"method","name":"horizontal=","children":[],"call":["Axlsx  validate_horizontal_alignment "]}," Axlsx CellAlignment initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx BorderPr to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << << << ","str << << ","@name to_s ","str << ","@color to_xml_string ","@color is_a? ","str << << << << << ","str << << << << ","@style to_s ","</ << << ","</ << ","< << << << << ","< << << << ","< << << ","< << "]}," Axlsx BorderPr style=":{"type":"method","name":"style=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx BorderPr color=":{"type":"method","name":"color=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx BorderPr name=":{"type":"method","name":"name=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx BorderPr initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx Border to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","part to_xml_string ","(send\n  (ivar :@prs) :select) each ","pr name == ","pr name ","@prs select ","(sym :start) each "," serialized_attributes "]}," Axlsx Border outline=":{"type":"method","name":"outline=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Border diagonal_down=":{"type":"method","name":"diagonal_down=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Border diagonal_up=":{"type":"method","name":"diagonal_up=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Border initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options ","SimpleTypedList  new "]}," Axlsx Relationships to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","rel to_xml_string "," each ","str << << << ","str << << ","<Relationships xmlns=\" << << ","<Relationships xmlns=\" << "]}," Axlsx Relationships for":{"type":"method","name":"for","children":[],"call":["rel source_obj == ","rel source_obj ","@list find "," find "]}," Axlsx Relationships initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx Relationship should_use_same_id_as?":{"type":"method","name":"should_use_same_id_as?","children":[],"call":[" Target == ","other Target "," Target "," TargetMode == "," TargetMode ","other TargetMode "," Type == ","other Type "," Type "," source_obj == ","other source_obj "," source_obj "]}," Axlsx Relationship to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","(send\n  (lvar :h) :map) join "," << << << << "," << << << ","Axlsx  coder encode ","value to_s ","Axlsx  coder "," << << "," << ","key to_s ","h map ","k == "," instance_values reject "," instance_values ","Axlsx  instance_values_for reject ","Axlsx  instance_values_for ","str << << << << ","str << << << ","key_value last to_s ","key_value last ","str << << ","key_value first to_s ","key_value first ","index zero? ","h each_with_index "]}," Axlsx Relationship TargetMode=":{"type":"method","name":"TargetMode=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx Relationship Type=":{"type":"method","name":"Type=","children":[],"call":["Axlsx  validate_relationship_type "]}," Axlsx Relationship Target=":{"type":"method","name":"Target=","children":[],"call":["Axlsx  validate_string "]}," Axlsx Relationship initialize":{"type":"method","name":"initialize","children":[],"call":[" class instances << "," class instances "," class "," class next_free_id ","existing Id "," should_use_same_id_as? "," class instances find "," TargetMode= ","options [] "," Type= "," Target= "," class ids_cache [] "," ids_cache_key "," class ids_cache "]}," Axlsx Relationship next_free_id":{"type":"method","name":"next_free_id","children":[],"call":["@instances size + ","@instances size "," ids_cache size + "," ids_cache size "," ids_cache "]}," Axlsx Relationship clear_cached_instances":{"type":"method","name":"clear_cached_instances","children":[],"call":[]}," Axlsx Relationship instances":{"type":"method","name":"instances","children":[],"call":[]}," Axlsx Package relationships":{"type":"method","name":"relationships","children":[],"call":["rels lock ","rels << ","Relationship  new ","Axlsx Relationships  new ","Axlsx Relationships  new  lock ","Axlsx Relationships  new  << "]}," Axlsx Package base_content_types":{"type":"method","name":"base_content_types","children":[],"call":["c_types lock ","c_types << ","Axlsx Override  new ","Override  new ","Default  new ","ContentType  new ","ContentType  new  lock ","ContentType  new  << "]}," Axlsx Package content_types":{"type":"method","name":"content_types","children":[],"call":["c_types << ","Axlsx Override  new "," use_shared_strings ","Axlsx Default  new ","ext == ","(str \"jpeg\") include? ","exts uniq each ","exts uniq ","image extname "," workbook images map "," workbook images "," workbook ","sheet pn "," workbook worksheets each "," workbook worksheets "," workbook comments size > "," workbook comments size "," workbook comments ","comment pn ","comment size > ","comment size "," workbook comments each ","pivot_table cache_definition pn ","pivot_table cache_definition ","pivot_table pn "," workbook pivot_tables each "," workbook pivot_tables ","table pn "," workbook tables each "," workbook tables ","chart pn "," workbook charts each "," workbook charts ","drawing pn "," workbook drawings each "," workbook drawings "," base_content_types ","image extname downcase ","JPEG_EXS  include? "," workbook comments empty? ","comment empty? "," base_content_types  << "]}," Axlsx Package validate_single_doc":{"type":"method","name":"validate_single_doc","children":[],"call":["errors << ","schema validate each ","schema validate ","Nokogiri  XML ","Nokogiri XML  Schema ","File  open ","Nokogiri XML  Schema  validate each ","Nokogiri XML  Schema  validate "]}," Axlsx Package parts":{"type":"method","name":"parts","children":[],"call":["parts << ","sheet to_xml_string ","sheet pn ","sheet relationships to_xml_string ","sheet relationships ","sheet rels_pn "," workbook worksheets each "," workbook worksheets "," workbook "," workbook shared_strings to_xml_string "," workbook shared_strings "," use_shared_strings ","image image_src ","image pn "," workbook images each "," workbook images ","chart to_xml_string ","chart pn "," workbook charts each "," workbook charts ","comment vml_drawing to_xml_string ","comment vml_drawing ","comment vml_drawing pn ","comment to_xml_string ","comment pn ","comment size > ","comment size "," workbook comments each "," workbook comments ","cache_definition to_xml_string ","cache_definition pn ","pivot_table to_xml_string ","pivot_table pn ","pivot_table relationships to_xml_string ","pivot_table relationships ","pivot_table rels_pn ","pivot_table cache_definition "," workbook pivot_tables each "," workbook pivot_tables ","table to_xml_string ","table pn "," workbook tables each "," workbook tables ","drawing to_xml_string ","drawing pn ","drawing relationships to_xml_string ","drawing relationships ","drawing rels_pn "," workbook drawings each "," workbook drawings "," workbook to_xml_string "," content_types to_xml_string "," content_types "," workbook relationships to_xml_string "," workbook relationships ","@app to_xml_string ","@core to_xml_string "," workbook styles to_xml_string "," workbook styles "," relationships to_xml_string "," relationships ","part [] ","parts sort_by ","(send\n  (lvar :parts) :sort_by) reverse ","image remote? ","comment empty? ","pivot_table cache_definition  to_xml_string ","pivot_table cache_definition  pn ","pivot_table pivot_table cache_definition  "]}," Axlsx Package zip_entry_for_part":{"type":"method","name":"zip_entry_for_part","children":[],"call":["Zip Entry  new ","part [] ","Zip DOSTime  at ","@core created to_i ","@core created "]}," Axlsx Package write_parts":{"type":"method","name":"write_parts","children":[],"call":["zip write ","IO  read ","part [] ","IO  binread ","IO  respond_to? ","zip put_next_entry "," zip_entry_for_part ","part [] nil? ","zip puts ","part [] force_encoding ","(str \"1.9.2\") include? ","p each "," parts ","part [] to_xml_string ","File  read ","zi parts  write "," parts art [] ","IO  res parts ond_to? ","zip put_next_part []  ","zip put_next_part [] force_encoding  ","zi parts   parts ut_next_entry "," zip_part [] _for_part "," zip_part [] force_encoding _for_part "," zi parts _entry_for_ parts art "," parts art [] nil? ","zi parts   parts uts "," parts art [] force_encoding "," parts  each ","  parts arts "," parts art [] to_xml_string "]}," Axlsx Package validate":{"type":"method","name":"validate","children":[],"call":["errors concat "," validate_single_doc ","part [] ","part [] nil? "," parts each "," parts ","part [] to_xml_string "]}," Axlsx Package encrypt":{"type":"method","name":"encrypt","children":[],"call":[]}," Axlsx Package to_stream":{"type":"method","name":"to_stream","children":[],"call":["stream rewind ","zip close_buffer "," write_parts ","Zip OutputStream  new ","StringIO  new ","Relationship  clear_cached_instances "," validate empty? "," validate ","confirm_valid ! ","Relationship  clear_ids_cache ","Relationship  initialize_ids_cache ","StringIO  new binmode "," workbook apply_styles "," workbook "," workbook styles_applied ! "," workbook styles_applied ","BufferedZipOutputStream  write_buffer ","zip close_buffer  rewind "," write_parts  close_buffer "]}," Axlsx Package serialize":{"type":"method","name":"serialize","children":[],"call":[" write_parts ","Zip OutputStream  open ","Relationship  clear_cached_instances "," validate empty? "," validate ","confirm_valid ! ","Relationship  clear_ids_cache ","Relationship  initialize_ids_cache ","zip_provider open ","ZipCommand  new "," parse_serialize_options "," workbook apply_styles "," workbook "," workbook styles_applied ! "," workbook styles_applied ","ZipCommand  new  open "]}," Axlsx Package workbook=":{"type":"method","name":"workbook=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Package workbook":{"type":"method","name":"workbook","children":[],"call":[" block_given? ","Workbook  new "]}," Axlsx Package use_shared_strings=":{"type":"method","name":"use_shared_strings=","children":[],"call":[" workbook use_shared_strings= "," workbook ","Axlsx  validate_boolean "]}," Axlsx Package use_shared_strings":{"type":"method","name":"use_shared_strings","children":[],"call":[" workbook use_shared_strings "," workbook "]}," Axlsx Package use_autowidth=":{"type":"method","name":"use_autowidth=","children":[],"call":[" workbook use_autowidth= "," workbook ","Axlsx  validate_boolean "]}," Axlsx Package initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," parse_options ","@core created= ","options [] ","@core creator= ","@core creator ","App  new ","Core  new "]}," Axlsx VmlShape to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," column "," row "," bottom_offset "," bottom_row "," right_offset "," right_column "," top_offset "," top_row "," left_offset "," left_column "]}," Axlsx VmlShape initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," parse_options ","(send\n  (begin\n    (erange\n      (int 0)\n      (int 8))) :map) join ","65 + chr ","65 + "," rand ","(erange\n  (int 0)\n  (int 8)) map ","(send\n  (const nil :Array) :new\n  (int 8)) join "," rand chr ","Array  new "]}," Axlsx VmlDrawing to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","comment vml_shape to_xml_string ","comment vml_shape ","@comments each ","@comments worksheet index + ","@comments worksheet index ","@comments worksheet "]}," Axlsx VmlDrawing pn":{"type":"method","name":"pn","children":[],"call":["(begin\n  (const nil :VML_DRAWING_PN)) % ","@comments worksheet index + ","@comments worksheet index ","@comments worksheet "," format "]}," Axlsx VmlDrawing initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","comments is_a? "]}," Axlsx View3D element_for_attribute":{"type":"method","name":"element_for_attribute","children":[],"call":["<%s:%s val='%s'/> % ","Axlsx  camel ","val == "," instance_values [] "," instance_values ","Axlsx  instance_values_for [] ","Axlsx  instance_values_for "," format ","val nil? ","<%s:%s  instance_values [] ='%s'/> % ","<%s:%s Axlsx  instance_values_for [] ='%s'/> % "," instance_values []  == ","Axlsx  instance_values_for []  == "," instance_ instance_values [] ues [] "," instance_Axlsx  instance_values_for [] ues [] "," instance_ instance_values [] ues "," instance_Axlsx  instance_values_for [] ues ","Axlsx  instance_ instance_values [] ues_for [] ","Axlsx  instance_Axlsx  instance_values_for [] ues_for [] ","Axlsx  instance_ instance_values [] ues_for ","Axlsx  instance_Axlsx  instance_values_for [] ues_for "," instance_values []  nil? ","Axlsx  instance_values_for []  nil? "]}," Axlsx View3D to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," element_for_attribute ","(str \"rot_x\") each "]}," Axlsx View3D perspective=":{"type":"method","name":"perspective=","children":[],"call":["RangeValidator  validate "]}," Axlsx View3D r_ang_ax=":{"type":"method","name":"r_ang_ax=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx View3D depth_percent=":{"type":"method","name":"depth_percent=","children":[],"call":["RegexValidator  validate "," class "]}," Axlsx View3D rot_y=":{"type":"method","name":"rot_y=","children":[],"call":["RangeValidator  validate "]}," Axlsx View3D h_percent=":{"type":"method","name":"h_percent=","children":[],"call":["RegexValidator  validate "," class "]}," Axlsx View3D rot_x=":{"type":"method","name":"rot_x=","children":[],"call":["RangeValidator  validate "]}," Axlsx View3D initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx ValAxis to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << ","str << << ","@cross_between to_s ","<c:crossBetween val=\" << << ","<c:crossBetween val=\" << "]}," Axlsx ValAxis cross_between=":{"type":"method","name":"cross_between=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx ValAxis initialize":{"type":"method","name":"initialize","children":[],"call":[" cross_between= "]}," Axlsx TwoCellAnchor to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," object to_xml_string "," object "," to to_xml_string "," to "," from to_xml_string "," from "]}," Axlsx TwoCellAnchor index":{"type":"method","name":"index","children":[],"call":["@drawing anchors index ","@drawing anchors "]}," Axlsx TwoCellAnchor add_pic":{"type":"method","name":"add_pic","children":[],"call":["Pic  new "]}," Axlsx TwoCellAnchor add_chart":{"type":"method","name":"add_chart","children":[],"call":["@object chart ","GraphicFrame  new ","GraphicFrame  new  chart "]}," Axlsx TwoCellAnchor end_at":{"type":"method","name":"end_at","children":[],"call":[" to coord "," to "]}," Axlsx TwoCellAnchor start_at":{"type":"method","name":"start_at","children":[],"call":[" from coord "," from "]}," Axlsx TwoCellAnchor initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options ","Marker  new ","drawing anchors << ","drawing anchors "," end_at ","options [] "," start_at "]}," Axlsx Title to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << ","str << << ","@text to_s ","Axlsx  cell_range ","@cell is_a? ","@text empty? ","<a:t> << << ","<a:t> << ","<a:rPr sz=\" << << ","<a:rPr sz=\" << ","@text_size to_s ","<c:v> << << ","<c:v> << ","<c:f> << << ","<c:f> << "," CGI  escapeHTML ","Axlsx  sanitize ","Axlsx  trust_input "," empty? "]}," Axlsx Title cell=":{"type":"method","name":"cell=","children":[],"call":["v value to_s ","v value ","DataTypeValidator  validate "]}," Axlsx Title text=":{"type":"method","name":"text=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Title initialize":{"type":"method","name":"initialize","children":[],"call":[" text= ","title to_s ","title is_a? "," cell= "," text_size= ","title_size to_s ","title_size to_s empty? "]}," Axlsx StrVal to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << << << << << ","str << << << << "," v to_s "," v ","str << << << ","str << << ","idx to_s ","str << ","Axlsx  validate_unsigned_int ","<c:pt idx=\" << << << << ","<c:pt idx=\" << << << "," CGI  escapeHTML ","<c:pt idx=\" << << ","<c:pt idx=\" << "," v to_s empty? ! "," v to_s empty? "]}," Axlsx StrVal v=":{"type":"method","name":"v=","children":[],"call":["v to_s "]}," Axlsx StrVal initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx StrData to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << << << ","str << << ","@tag_name to_s ","str << ","value to_xml_string ","@pt each_with_index ","@pt size to_s ","@pt size ","</c: << << ","</c: << ","<c:ptCount val=\" << << ","<c:ptCount val=\" << ","<c: << << ","<c: << "]}," Axlsx StrData data=":{"type":"method","name":"data=","children":[],"call":["@pt << ","@type new ","value value ","value is_a? ","values each ","values first is_a? ","values first ","value value alue value value alue ","value value alue is_a? ","value value alues each ","value value alues first is_a? ","value value alues first "]}," Axlsx StrData initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options ","SimpleTypedList  new "]}," Axlsx SeriesTitle to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << ","str << << ","Axlsx  cell_range ","<c:v> << << ","<c:v> << ","<c:f> << << ","<c:f> << "," CGI  escapeHTML ","Axlsx  sanitize ","@text to_s ","Axlsx  trust_input "]}," Axlsx Series to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," block_given? "," title to_xml_string "," title "," title nil? ","str << << << ","str << << ","(or\n  (send nil :order)\n  (send nil :index)) to_s "," index "," order "," index to_s ","<c:order val=\" << << ","<c:order val=\" << ","<c:idx val=\" << << ","<c:idx val=\" << "]}," Axlsx Series chart=":{"type":"method","name":"chart=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Series title=":{"type":"method","name":"title=","children":[],"call":["DataTypeValidator  validate "," class ","SeriesTitle  new ","v is_a? ","DataTypeValidator  SeriesTitle  new alidate ","SeriesTitle  new  is_a? "]}," Axlsx Series order=":{"type":"method","name":"order=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Series order":{"type":"method","name":"order","children":[],"call":[" index "]}," Axlsx Series index":{"type":"method","name":"index","children":[],"call":["@chart series index ","@chart series "]}," Axlsx Series initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options ","@chart series << ","@chart series "," chart= "]}," Axlsx SerAxis to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << ","str << << ","@tick_mark_skip to_s ","@tick_mark_skip nil? ","@tick_lbl_skip to_s ","@tick_lbl_skip nil? ","<c:tickMarkSkip val=\" << << ","<c:tickMarkSkip val=\" << ","<c:tickLblSkip val=\" << << ","<c:tickLblSkip val=\" << "]}," Axlsx SerAxis tick_mark_skip=":{"type":"method","name":"tick_mark_skip=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx SerAxis tick_lbl_skip=":{"type":"method","name":"tick_lbl_skip=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx SerAxis initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx ScatterSeries to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["@yData to_xml_string ","@yData nil? ","@xData to_xml_string ","@xData nil? ","str << ","str << << << ","str << << "," color ","<c:smooth val=\" << << ","<c:smooth val=\" << "," smooth "," ln_width to_s "," ln_width ","<a:srgbClr val=\" << << ","<a:srgbClr val=\" << "," marker_symbol_xml "]}," Axlsx ScatterSeries color=":{"type":"method","name":"color=","children":[],"call":[]}," Axlsx ScatterSeries initialize":{"type":"method","name":"initialize","children":[],"call":["NumDataSource  new ","options [] ","options [] nil? ","AxDataSource  new ","Axlsx  validate_boolean ","(sym :smooth) include? ","chart scatter_style ","(sym :lineMarker) include? "]}," Axlsx ScatterChart axes":{"type":"method","name":"axes","children":[],"call":["Axes  new "]}," Axlsx ScatterChart to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":[" axes to_xml_string "," axes ","str_inner << "," d_lbls to_xml_string "," d_lbls ","ser to_xml_string ","@series each ","str_inner << << << ","str_inner << << "," vary_colors to_s "," vary_colors "," scatter_style to_s "," scatter_style ","str << ","<c:varyColors val=\" << << ","<c:varyColors val=\" << ","<c:scatterStyle val=\" << << ","<c:scatterStyle val=\" << ","str << << << ","str << << "]}," Axlsx ScatterChart scatter_style=":{"type":"method","name":"scatter_style=","children":[],"call":["Axlsx  validate_scatter_style "]}," Axlsx ScatterChart initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx ScatterChart y_val_axis":{"type":"method","name":"y_val_axis","children":[],"call":[" axes [] "," axes "]}," Axlsx ScatterChart x_val_axis":{"type":"method","name":"x_val_axis","children":[],"call":[" axes [] "," axes "]}," Axlsx Scaling to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << ","str << << ","@max to_s ","@max nil? ","@min to_s ","@min nil? ","@orientation to_s ","@orientation nil? ","@logBase to_s ","@logBase nil? ","<c:max val=\" << << ","<c:max val=\" << ","<c:min val=\" << << ","<c:min val=\" << ","<c:orientation val=\" << << ","<c:orientation val=\" << ","<c:logBase val=\" << << ","<c:logBase val=\" << "]}," Axlsx Scaling min=":{"type":"method","name":"min=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Scaling max=":{"type":"method","name":"max=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx Scaling orientation=":{"type":"method","name":"orientation=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx Scaling logBase=":{"type":"method","name":"logBase=","children":[],"call":["DataTypeValidator  validate ","arg <= ","arg >= "," lambda "]}," Axlsx Scaling initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx PieSeries labels=":{"type":"method","name":"labels=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx PieSeries data=":{"type":"method","name":"data=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx PieSeries to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["@data to_xml_string ","@data nil? ","@labels to_xml_string ","@labels nil? ","str << ","str << << << ","str << << ","index to_s "," colors each_with_index "," colors ","str_inner << << << ","str_inner << << ","str_inner << ","@explosion nil? ","<a:srgbClr val=\" << << ","<a:srgbClr val=\" << ","<c:idx val=\" << << ","<c:idx val=\" << ","<c:explosion val=\" + + ","<c:explosion val=\" + ","@explosion to_s "]}," Axlsx PieSeries explosion=":{"type":"method","name":"explosion=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx PieSeries colors=":{"type":"method","name":"colors=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx PieSeries initialize":{"type":"method","name":"initialize","children":[],"call":[" data= ","NumDataSource  new ","options [] nil? ","options [] "," labels= ","AxDataSource  new "]}," Axlsx Pie3DChart to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str_inner << "," d_lbls to_xml_string "," d_lbls ","ser to_xml_string ","@series each ","str_inner << << << ","str_inner << << "," vary_colors to_s "," vary_colors ","str << ","<c:varyColors val=\" << << ","<c:varyColors val=\" << ","str << << << ","str << << "]}," Axlsx Pie3DChart initialize":{"type":"method","name":"initialize","children":[],"call":["View3D  new ","(pair\n  (sym :rot_x)\n  (int 30)) merge "]}," Axlsx PictureLocking to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "," serialized_tag "]}," Axlsx PictureLocking initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx Pic swap_anchor":{"type":"method","name":"swap_anchor","children":[],"call":["new_anchor instance_variable_set ","@anchor object ","@anchor drawing anchors []= ","@anchor drawing anchors index ","@anchor drawing anchors ","@anchor drawing ","new_anchor drawing anchors delete ","new_anchor drawing anchors ","new_anchor drawing "]}," Axlsx Pic use_two_cell_anchor":{"type":"method","name":"use_two_cell_anchor","children":[],"call":[" swap_anchor ","TwoCellAnchor  new ","@anchor from row ","@anchor from ","@anchor from col ","@anchor drawing ","@anchor is_a? "]}," Axlsx Pic use_one_cell_anchor":{"type":"method","name":"use_one_cell_anchor","children":[],"call":[" swap_anchor ","OneCellAnchor  new ","@anchor from row ","@anchor from ","@anchor from col ","@anchor drawing ","@anchor is_a? "]}," Axlsx Pic to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << << << ","str << << << << "," relationship Id "," relationship ","str << << << ","str << << "," picture_locking to_xml_string "," picture_locking ","@hyperlink to_xml_string ","@hyperlink is_a? "," descr to_s "," descr "," name to_s "," name "," opacity ","<a:blip xmlns:r =\" << << << << ","<a:blip xmlns:r =\" << << << ","<a:blip xmlns:r =\" << << ","<a:blip xmlns:r =\" << "," hyperlink to_xml_string "," hyperlink "," hyperlink is_a? ","<xdr:cNvPr id=\"2\" name=\" << << << << ","<xdr:cNvPr id=\"2\" name=\" << << << ","<xdr:cNvPr id=\"2\" name=\" << << ","<xdr:cNvPr id=\"2\" name=\" << "," relationship_xml_portion "]}," Axlsx Pic end_at":{"type":"method","name":"end_at","children":[],"call":["@anchor to ","@anchor end_at "," use_two_cell_anchor ","@anchor is_a? "]}," Axlsx Pic start_at":{"type":"method","name":"start_at","children":[],"call":["@anchor from ","@anchor start_at "]}," Axlsx Pic height=":{"type":"method","name":"height=","children":[],"call":["@anchor height= "," use_one_cell_anchor ","@anchor is_a? "]}," Axlsx Pic height":{"type":"method","name":"height","children":[],"call":["@anchor height "]}," Axlsx Pic width=":{"type":"method","name":"width=","children":[],"call":["@anchor width= "," use_one_cell_anchor ","@anchor is_a? "]}," Axlsx Pic width":{"type":"method","name":"width","children":[],"call":["@anchor width ","@anchor is_a? "]}," Axlsx Pic relationship":{"type":"method","name":"relationship","children":[],"call":["Relationship  new "," pn "," image_src "," remote? "," image_src to_s "]}," Axlsx Pic pn":{"type":"method","name":"pn","children":[],"call":["IMAGE_PN  % "," extname "," index + "," index "," format "]}," Axlsx Pic index":{"type":"method","name":"index","children":[],"call":["@anchor drawing worksheet workbook images index ","@anchor drawing worksheet workbook images ","@anchor drawing worksheet workbook ","@anchor drawing worksheet ","@anchor drawing "]}," Axlsx Pic extname":{"type":"method","name":"extname","children":[],"call":["File  extname delete ","File  extname "," image_src "," image_src nil? "]}," Axlsx Pic file_name":{"type":"method","name":"file_name","children":[],"call":["File  basename "," image_src "," image_src nil? "," remote? "]}," Axlsx Pic descr=":{"type":"method","name":"descr=","children":[],"call":["Axlsx  validate_string "]}," Axlsx Pic name=":{"type":"method","name":"name=","children":[],"call":["Axlsx  validate_string "]}," Axlsx Pic image_src=":{"type":"method","name":"image_src=","children":[],"call":[" raise ","File  exist? ","RestrictionValidator  validate ","File  extname delete ","File  extname ","v downcase ","Axlsx  validate_string ","MimeTypeUtils  get_mime_type ","MimeTypeUtils  get_mime_type_from_uri ","RegexValidator  validate ","URI DEFAULT_PARSER  make_regexp "," remote? "]}," Axlsx Pic hyperlink=":{"type":"method","name":"hyperlink=","children":[],"call":["Hyperlink  new ","@hyperlink send ","o [] ","@hyperlink respond_to? ","options each ","@hyperlink is_a? ","options []= "," hyperlink "," hyperlink send "," hyperlink respond_to? "," hyperlink is_a? ","Hyperlink  new  send ","Hyperlink  new  respond_to? ","Hyperlink  new  is_a? "]}," Axlsx Pic initialize":{"type":"method","name":"initialize","children":[],"call":["PictureLocking  new "," block_given? "," start_at ","options [] "," parse_options ","@anchor drawing worksheet workbook images << ","@anchor drawing worksheet workbook images ","@anchor drawing worksheet workbook ","@anchor drawing worksheet ","@anchor drawing ","(send\n  (send\n    (lvar :options) :[]\n    (sym :opacity)) :*\n  (int 100000)) round ","options [] * "]}," Axlsx OneCellAnchor ext":{"type":"method","name":"ext","children":[],"call":["@width * / ","@width * ","@height * / ","@height * "]}," Axlsx OneCellAnchor to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","@object to_xml_string ","str << << << << << ","str << << << << "," ext [] to_s "," ext [] "," ext ","str << << << ","str << << "," from to_xml_string "," from ","<xdr:ext cx=\" << << << << ","<xdr:ext cx=\" << << << ","<xdr:ext cx=\" << << ","<xdr:ext cx=\" << "]}," Axlsx OneCellAnchor index":{"type":"method","name":"index","children":[],"call":["@drawing anchors index ","@drawing anchors "]}," Axlsx OneCellAnchor width=":{"type":"method","name":"width=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx OneCellAnchor height=":{"type":"method","name":"height=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx OneCellAnchor start_at":{"type":"method","name":"start_at","children":[],"call":[" from coord "," from "]}," Axlsx OneCellAnchor initialize":{"type":"method","name":"initialize","children":[],"call":["Pic  new "," parse_options ","Marker  new ","drawing anchors << ","drawing anchors "," start_at ","options [] "]}," Axlsx NumVal to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << << << << << << << ","str << << << << << << "," v to_s "," v ","str << << << << << ","str << << << << "," format_code ","str << << << ","str << << ","idx to_s ","str << ","Axlsx  validate_unsigned_int ","<c:pt idx=\" << << << << << << ","<c:pt idx=\" << << << << << ","<c:pt idx=\" << << << << ","<c:pt idx=\" << << << ","<c:pt idx=\" << << ","<c:pt idx=\" << "," v to_s empty? ! "," v to_s empty? "]}," Axlsx NumVal format_code=":{"type":"method","name":"format_code=","children":[],"call":["Axlsx  validate_string "]}," Axlsx NumVal initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx NumDataSource to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << << << ","str << << "," tag_name to_s "," tag_name ","str << ","@ref_tag_name to_s ","@data to_xml_string ","@f to_s ","</c: << << ","</c: << ","<c:f> << << ","<c:f> << ","<c: << << ","<c: << "]}," Axlsx NumDataSource tag_name=":{"type":"method","name":"tag_name=","children":[],"call":["Axlsx RestrictionValidator  validate "," class allowed_tag_names "," class "," class name "]}," Axlsx NumDataSource allowed_tag_names":{"type":"method","name":"allowed_tag_names","children":[],"call":[]}," Axlsx NumDataSource initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options ","Axlsx  cell_range ","options [] ","options [] first is_a? ","options [] first ","@data_type new ","@data_type new _type new "]}," Axlsx NumData to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << << << ","str << << ","@tag_name to_s ","str << ","num_val to_xml_string ","@pt each_with_index ","@pt size to_s ","@pt size "," format_code to_s "," format_code ","</c: << << ","</c: << ","<c:ptCount val=\" << << ","<c:ptCount val=\" << ","<c:formatCode> << << ","<c:formatCode> << ","<c: << << ","<c: << "]}," Axlsx NumData format_code=":{"type":"method","name":"format_code=","children":[],"call":["Axlsx  validate_string "]}," Axlsx NumData data=":{"type":"method","name":"data=","children":[],"call":["@pt << ","NumVal  new ","value value ","value is_formula? ","value is_a? ","values each ","values first is_a? ","values first ","value value  value value  ","value value  is_formula? ","value value  is_a? ","value value s each ","value value s first is_a? ","value value s first "]}," Axlsx NumData initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options ","SimpleTypedList  new "]}," Axlsx Marker parse_coord_args":{"type":"method","name":"parse_coord_args","children":[],"call":["x is_a? ","x pos ","Axlsx  name_to_indices "]}," Axlsx Marker to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << << << << << << << ","str << << << << << << ","k to_s ","str << << << << << ","str << << << << "," send to_s "," send ","str << << << ","str << << ","str << ","(sym :col) each ","<xdr: << << << << << << ","<xdr: << << << << << ","<xdr: << << << << ","<xdr: << << << ","<xdr: << << ","<xdr: << "]}," Axlsx Marker coord":{"type":"method","name":"coord","children":[],"call":[" row= ","coordinates [] "," col= "," parse_coord_args "," parse_coord_args  [] "]}," Axlsx Marker rowOff=":{"type":"method","name":"rowOff=","children":[],"call":["Axlsx  validate_int "]}," Axlsx Marker row=":{"type":"method","name":"row=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Marker colOff=":{"type":"method","name":"colOff=","children":[],"call":["Axlsx  validate_int "]}," Axlsx Marker col=":{"type":"method","name":"col=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx Marker initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx LineSeries labels=":{"type":"method","name":"labels=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx LineSeries data=":{"type":"method","name":"data=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx LineSeries to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["@data to_xml_string ","@data nil? ","@labels to_xml_string ","@labels nil? ","str << ","str << << << ","str << << "," color ","<c:smooth val=\" << << ","<c:smooth val=\" << "," smooth ","<c:marker><c:symbol val=\" + + ","<c:marker><c:symbol val=\" + ","@marker_symbol to_s ","@marker_symbol != ","@show_marker ! ","<a:srgbClr val=\" << << ","<a:srgbClr val=\" << "]}," Axlsx LineSeries show_marker=":{"type":"method","name":"show_marker=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx LineSeries color=":{"type":"method","name":"color=","children":[],"call":[]}," Axlsx LineSeries initialize":{"type":"method","name":"initialize","children":[],"call":["NumDataSource  new ","options [] nil? ","options [] ","AxDataSource  new "]}," Axlsx LineChart axes":{"type":"method","name":"axes","children":[],"call":["Axes  new "]}," Axlsx LineChart to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":[" axes to_xml_string "," axes ","str_inner << << << ","str_inner << << "," node_name ","str_inner << "," block_given? ","@d_lbls to_xml_string ","ser to_xml_string ","@series each "," vary_colors to_s "," vary_colors "," grouping to_s "," grouping ","str << ","</c: << << ","</c: << ","<c:varyColors val=\" << << ","<c:varyColors val=\" << ","<c:grouping val=\" << << ","<c:grouping val=\" << ","<c: << << ","<c: << ","str << << << ","str << << "]}," Axlsx LineChart node_name":{"type":"method","name":"node_name","children":[],"call":["path []= ","path [] chr downcase ","path [] chr ","path [] ","i + ","path rindex "," class to_s "," class "," class name ","path []  []= "," class to_s  []= "," class name  []= ","path []  [] chr downcase "," class to_s  [] chr downcase "," class name  [] chr downcase ","path []  [] chr "," class to_s  [] chr "," class name  [] chr ","path []  [] "," class to_s  [] "," class name  [] ","path rindex  + ","path []  rindex "," class to_s  rindex "," class name  rindex ","path rpath rindex ndex "]}," Axlsx LineChart grouping=":{"type":"method","name":"grouping=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx LineChart initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx LineChart val_axis":{"type":"method","name":"val_axis","children":[],"call":[" axes [] "," axes "]}," Axlsx LineChart cat_axis":{"type":"method","name":"cat_axis","children":[],"call":[" axes [] "," axes "]}," Axlsx Line3DChart to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str_inner << << << ","str_inner << << ","@gap_depth to_s ","str_inner << ","@gap_depth nil? ","str << ","<c:gapDepth val=\" << << ","<c:gapDepth val=\" << ","str << << << ","str << << "]}," Axlsx Line3DChart gap_depth=":{"type":"method","name":"gap_depth=","children":[],"call":["RegexValidator  validate "]}," Axlsx Line3DChart initialize":{"type":"method","name":"initialize","children":[],"call":[" axes add_axis "," axes ","View3D  new ","(pair\n  (sym :r_ang_ax)\n  (int 1)) merge "]}," Axlsx Line3DChart ser_axis":{"type":"method","name":"ser_axis","children":[],"call":[" axes [] "," axes "]}," Axlsx Hyperlink to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "," relationship Id "," relationship "," serialized_tag "]}," Axlsx Hyperlink relationship":{"type":"method","name":"relationship","children":[],"call":["Relationship  new "," href "]}," Axlsx Hyperlink history=":{"type":"method","name":"history=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Hyperlink highlight_click=":{"type":"method","name":"highlight_click=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Hyperlink end_snd=":{"type":"method","name":"end_snd=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Hyperlink initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," parse_options ","DataTypeValidator  validate "]}," Axlsx GraphicFrame to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << << << << << ","str << << << << << << "," rId ","str << << << << << ","str << << << << ","str << << << ","str << << ","@anchor drawing index to_s ","@anchor drawing index ","@anchor drawing ","<c:chart xmlns:c=\" << << << << << << ","<c:chart xmlns:c=\" << << << << << ","<c:chart xmlns:c=\" << << << << ","<c:chart xmlns:c=\" << << << ","<c:chart xmlns:c=\" << << ","<c:chart xmlns:c=\" << ","<a:graphicData uri=\" << << ","<a:graphicData uri=\" << ","<xdr:cNvPr id=\" << << << << << ","<xdr:cNvPr id=\" << << << << ","<xdr:cNvPr id=\" << << << ","<xdr:cNvPr id=\" << << ","<xdr:cNvPr id=\" << "]}," Axlsx GraphicFrame rId":{"type":"method","name":"rId","children":[],"call":["@anchor drawing relationships for Id ","@anchor drawing relationships for "," chart ","@anchor drawing relationships ","@anchor drawing "]}," Axlsx GraphicFrame initialize":{"type":"method","name":"initialize","children":[],"call":["chart_type new ","DataTypeValidator  validate "]}," Axlsx Drawing to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","anchor to_xml_string "," anchors each "," anchors ","str << << << << << ","str << << << << ","str << << << ","str << << ","<xdr:wsDr xmlns:xdr=\" << << << << ","<xdr:wsDr xmlns:xdr=\" << << << ","<xdr:wsDr xmlns:xdr=\" << << ","<xdr:wsDr xmlns:xdr=\" << "]}," Axlsx Drawing relationships":{"type":"method","name":"relationships","children":[],"call":["r << ","child relationship "," child_objects each "," child_objects ","Relationships  new ","Relationships  new  << ","child Relationships  new elationship "]}," Axlsx Drawing child_objects":{"type":"method","name":"child_objects","children":[],"call":[" charts + + "," hyperlinks "," charts + "," images "," charts "]}," Axlsx Drawing rels_pn":{"type":"method","name":"rels_pn","children":[],"call":["DRAWING_RELS_PN  % "," index + "," index "," format "]}," Axlsx Drawing pn":{"type":"method","name":"pn","children":[],"call":["DRAWING_PN  % "," index + "," index "," format "]}," Axlsx Drawing index":{"type":"method","name":"index","children":[],"call":["@worksheet workbook drawings index ","@worksheet workbook drawings ","@worksheet workbook "]}," Axlsx Drawing images":{"type":"method","name":"images","children":[],"call":["a object ","images map ","a object is_a? ","@anchors select "]}," Axlsx Drawing hyperlinks":{"type":"method","name":"hyperlinks","children":[],"call":["a hyperlink ","links map ","a hyperlink is_a? "," images select "," images "]}," Axlsx Drawing charts":{"type":"method","name":"charts","children":[],"call":["a object chart ","a object ","charts map ","a object is_a? ","@anchors select "]}," Axlsx Drawing add_chart":{"type":"method","name":"add_chart","children":[],"call":["@anchors last add_chart ","@anchors last ","TwoCellAnchor  new "]}," Axlsx Drawing add_image":{"type":"method","name":"add_image","children":[],"call":["@anchors last object ","@anchors last ","OneCellAnchor  new ","TwoCellAnchor  new add_pic ","TwoCellAnchor  new ","options [] "]}," Axlsx Drawing initialize":{"type":"method","name":"initialize","children":[],"call":["SimpleTypedList  new ","@worksheet workbook drawings << ","@worksheet workbook drawings ","@worksheet workbook ","DataTypeValidator  validate "]}," Axlsx DLbls validate_attributes_for_chart_type":{"type":"method","name":"validate_attributes_for_chart_type","children":[],"call":["@chart_type == ","(const nil :Pie3DChart) include? "]}," Axlsx DLbls to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," instance_values [] "," instance_values ","Axlsx  camel "," instance_values [] != "," instance_values keys include? "," instance_values keys ","(str \"d_lbl_pos\") each "," validate_attributes_for_chart_type ","instance_vals [] ","instance_vals [] != ","instance_vals keys include? ","instance_vals keys ","Axlsx  instance_values_for ","instance_vals [] nil? ! ","instance_vals [] nil? ","instance_vals key? ","Axlsx  instance_values_for  [] ","Axlsx  instance_values_for  [] != ","Axlsx  instance_values_for  keys include? ","Axlsx  instance_values_for  keys ","Axlsx  instance_values_for  [] nil? ! ","Axlsx  instance_values_for  [] nil? ","Axlsx  instance_values_for  key? "]}," Axlsx DLbls d_lbl_pos=":{"type":"method","name":"d_lbl_pos=","children":[],"call":["Axlsx RestrictionValidator  validate ","@chart_type == ","(const nil :Pie3DChart) include? "]}," Axlsx DLbls d_lbl_pos":{"type":"method","name":"d_lbl_pos","children":[],"call":["@chart_type == ","(const nil :Pie3DChart) include? "]}," Axlsx DLbls initialize_defaults":{"type":"method","name":"initialize_defaults","children":[],"call":[" send ","(sym :show_legend_key) each "]}," Axlsx DLbls initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "," initialize_defaults "," raise ","(const nil :Chart) include? ","chart_type superclass "]}," Axlsx Chart view_3D=":{"type":"method","name":"view_3D=","children":[],"call":["DataTypeValidator  validate "," class "]}," Axlsx Chart end_at":{"type":"method","name":"end_at","children":[],"call":["@graphic_frame anchor end_at ","@graphic_frame anchor "]}," Axlsx Chart start_at":{"type":"method","name":"start_at","children":[],"call":["@graphic_frame anchor start_at ","@graphic_frame anchor "]}," Axlsx Chart to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << ","str << << "," display_blanks_as to_s "," display_blanks_as "," block_given? ","@view_3D to_xml_string ","(send\n  (ivar :@title) :==\n  (nil)) to_s ","@title == ","@title to_xml_string "," style to_s "," style ","Axlsx Workbook  date1904 to_s ","Axlsx Workbook  date1904 ","str << << << << << << << ","str << << << << << << ","str << << << << << ","str << << << << "," bg_color ","<c:dispBlanksAs val=\" << << ","<c:dispBlanksAs val=\" << ","<c:legendPos val=\" << << ","<c:legendPos val=\" << ","@legend_position to_s ","<c:autoTitleDeleted val=\" << << ","<c:autoTitleDeleted val=\" << ","<c:style val=\" << << ","<c:style val=\" << ","<c:date1904 val=\" << << ","<c:date1904 val=\" << ","<c:chartSpace xmlns:c=\" << << << << << << ","<c:chartSpace xmlns:c=\" << << << << << ","<c:chartSpace xmlns:c=\" << << << << ","<c:chartSpace xmlns:c=\" << << << ","<c:chartSpace xmlns:c=\" << << ","<c:chartSpace xmlns:c=\" << ","<c:plotVisOnly val=\" << << ","<c:plotVisOnly val=\" << ","@plot_visible_only to_s ","@title empty? ","<c:roundedCorners val=\" << << ","<c:roundedCorners val=\" << "," rounded_corners to_s "," rounded_corners ","@title nil? to_s ","@title nil? "]}," Axlsx Chart add_series":{"type":"method","name":"add_series","children":[],"call":["@series last ","@series_type new "]}," Axlsx Chart from":{"type":"method","name":"from","children":[],"call":["@graphic_frame anchor from ","@graphic_frame anchor "]}," Axlsx Chart to":{"type":"method","name":"to","children":[],"call":["@graphic_frame anchor to ","@graphic_frame anchor "]}," Axlsx Chart style=":{"type":"method","name":"style=","children":[],"call":["DataTypeValidator  validate ","arg <= ","arg >= "," lambda "]}," Axlsx Chart display_blanks_as=":{"type":"method","name":"display_blanks_as=","children":[],"call":["Axlsx  validate_display_blanks_as "]}," Axlsx Chart show_legend=":{"type":"method","name":"show_legend=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Chart title=":{"type":"method","name":"title=","children":[],"call":["@title cell= ","v is_a? ","@title text= ","DataTypeValidator  validate "," class "]}," Axlsx Chart pn":{"type":"method","name":"pn","children":[],"call":["CHART_PN  % "," index + "," index "," format "]}," Axlsx Chart index":{"type":"method","name":"index","children":[],"call":["@graphic_frame anchor drawing worksheet workbook charts index ","@graphic_frame anchor drawing worksheet workbook charts ","@graphic_frame anchor drawing worksheet workbook ","@graphic_frame anchor drawing worksheet ","@graphic_frame anchor drawing ","@graphic_frame anchor "]}," Axlsx Chart relationship":{"type":"method","name":"relationship","children":[],"call":["Relationship  new "," pn "]}," Axlsx Chart vary_colors=":{"type":"method","name":"vary_colors=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Chart d_lbls":{"type":"method","name":"d_lbls","children":[],"call":["DLbls  new "," class "]}," Axlsx Chart initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," end_at ","options [] "," start_at "," parse_options ","Title  new ","SimpleTypedList  new ","@graphic_frame anchor drawing worksheet workbook charts << ","@graphic_frame anchor drawing worksheet workbook charts ","@graphic_frame anchor drawing worksheet workbook ","@graphic_frame anchor drawing worksheet ","@graphic_frame anchor drawing ","@graphic_frame anchor "]}," Axlsx CatAxis to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << ","str << << ","@tick_mark_skip to_s ","@tick_lbl_skip to_s ","@lbl_offset to_i to_s ","@lbl_offset to_i ","@lbl_algn to_s ","@auto to_s ","<c:tickMarkSkip val=\" << << ","<c:tickMarkSkip val=\" << ","<c:tickLblSkip val=\" << << ","<c:tickLblSkip val=\" << ","<c:lblOffset val=\" << << ","<c:lblOffset val=\" << ","<c:lblAlgn val=\" << << ","<c:lblAlgn val=\" << ","<c:auto val=\" << << ","<c:auto val=\" << "]}," Axlsx CatAxis lbl_offset=":{"type":"method","name":"lbl_offset=","children":[],"call":["RegexValidator  validate "," class "]}," Axlsx CatAxis lbl_algn=":{"type":"method","name":"lbl_algn=","children":[],"call":["RestrictionValidator  validate "," class "]}," Axlsx CatAxis auto=":{"type":"method","name":"auto=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx CatAxis tick_mark_skip=":{"type":"method","name":"tick_mark_skip=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx CatAxis tick_lbl_skip=":{"type":"method","name":"tick_lbl_skip=","children":[],"call":["Axlsx  validate_unsigned_int "]}," Axlsx CatAxis initialize":{"type":"method","name":"initialize","children":[],"call":[" lbl_offset= "," lbl_algn= "," auto= "]}," Axlsx BarSeries labels=":{"type":"method","name":"labels=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx BarSeries data=":{"type":"method","name":"data=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx BarSeries to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str_inner << << << ","str_inner << << "," shape to_s "," shape ","str_inner << ","@data to_xml_string ","@data nil? ","@labels to_xml_string ","@labels nil? ","index to_s "," colors each_with_index "," colors ","str << ","<c:shape val=\" << << ","<c:shape val=\" << ","<a:srgbClr val=\" << << ","<a:srgbClr val=\" << ","<c:idx val=\" << << ","<c:idx val=\" << "," series_color ","str << << << ","str << << "]}," Axlsx BarSeries shape=":{"type":"method","name":"shape=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx BarSeries colors=":{"type":"method","name":"colors=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx BarSeries initialize":{"type":"method","name":"initialize","children":[],"call":[" data= ","NumDataSource  new ","options [] nil? ","options [] "," labels= ","AxDataSource  new "]}," Axlsx Bar3DChart axes":{"type":"method","name":"axes","children":[],"call":["Axes  new "]}," Axlsx Bar3DChart to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":[" axes to_xml_string "," axes ","str_inner << ","str_inner << << << ","str_inner << << ","@shape to_s ","@shape nil? ","@gap_depth to_s ","@gap_depth nil? ","@gap_width to_s ","@gap_width nil? ","@d_lbls to_xml_string ","ser to_xml_string ","@series each "," vary_colors to_s "," vary_colors "," grouping to_s "," grouping "," bar_dir to_s "," bar_dir ","str << ","<c:shape val=\" << << ","<c:shape val=\" << ","<c:gapDepth val=\" << << ","<c:gapDepth val=\" << ","<c:gapWidth val=\" << << ","<c:gapWidth val=\" << ","<c:varyColors val=\" << << ","<c:varyColors val=\" << ","<c:grouping val=\" << << ","<c:grouping val=\" << ","<c:barDir val=\" << << ","<c:barDir val=\" << ","str << << << ","str << << "]}," Axlsx Bar3DChart shape=":{"type":"method","name":"shape=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx Bar3DChart gap_depth=":{"type":"method","name":"gap_depth=","children":[],"call":["RegexValidator  validate ","RangeValidator  validate "]}," Axlsx Bar3DChart gap_width=":{"type":"method","name":"gap_width=","children":[],"call":["RegexValidator  validate ","RangeValidator  validate "]}," Axlsx Bar3DChart grouping=":{"type":"method","name":"grouping=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx Bar3DChart bar_dir=":{"type":"method","name":"bar_dir=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx Bar3DChart initialize":{"type":"method","name":"initialize","children":[],"call":["View3D  new ","(pair\n  (sym :r_ang_ax)\n  (int 1)) merge "]}," Axlsx Bar3DChart shape":{"type":"method","name":"shape","children":[],"call":[]}," Axlsx Bar3DChart grouping":{"type":"method","name":"grouping","children":[],"call":[]}," Axlsx Bar3DChart gap_width":{"type":"method","name":"gap_width","children":[],"call":[]}," Axlsx Bar3DChart bar_dir":{"type":"method","name":"bar_dir","children":[],"call":[]}," Axlsx Bar3DChart val_axis":{"type":"method","name":"val_axis","children":[],"call":[" axes [] "," axes "]}," Axlsx Bar3DChart cat_axis":{"type":"method","name":"cat_axis","children":[],"call":[" axes [] "," axes "]}," Axlsx Axis to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << << << ","str << << ","@crosses to_s ","str << ","@cross_axis id to_s ","@cross_axis id ","@label_rotation to_s ","@tick_lbl_pos to_s ","@title to_xml_string ","@title == "," gridlines == "," gridlines ","@ax_pos to_s ","@delete to_s ","@scaling to_xml_string ","@id to_s ","<c:crosses val=\" << << ","<c:crosses val=\" << ","<c:crossAx val=\" << << ","<c:crossAx val=\" << ","<c:txPr><a:bodyPr rot=\" << << ","<c:txPr><a:bodyPr rot=\" << ","<a:srgbClr val=\" << << ","<a:srgbClr val=\" << ","<c:tickLblPos val=\" << << ","<c:tickLblPos val=\" << ","<c:numFmt formatCode=\" << << << << ","<c:numFmt formatCode=\" << << << ","@format_code eql? ","<c:numFmt formatCode=\" << << ","<c:numFmt formatCode=\" << ","<c:axPos val=\" << << ","<c:axPos val=\" << ","<c:delete val=\" << << ","<c:delete val=\" << ","<c:axId val=\" << << ","<c:axId val=\" << ","str << << << << << ","str << << << << ","@title nil? "]}," Axlsx Axis title=":{"type":"method","name":"title=","children":[],"call":["@title cell= ","v is_a? ","@title text= ","Title  new ","DataTypeValidator  validate "," class "]}," Axlsx Axis label_rotation=":{"type":"method","name":"label_rotation=","children":[],"call":["Axlsx  validate_angle ","v to_i * ","v to_i ","Axlsx  validate_int "]}," Axlsx Axis crosses=":{"type":"method","name":"crosses=","children":[],"call":["RestrictionValidator  validate "," class "]}," Axlsx Axis delete=":{"type":"method","name":"delete=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Axis gridlines=":{"type":"method","name":"gridlines=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Axis format_code=":{"type":"method","name":"format_code=","children":[],"call":["Axlsx  validate_string "]}," Axlsx Axis tick_lbl_pos=":{"type":"method","name":"tick_lbl_pos=","children":[],"call":["RestrictionValidator  validate "," class "]}," Axlsx Axis ax_pos=":{"type":"method","name":"ax_pos=","children":[],"call":["RestrictionValidator  validate "," class "]}," Axlsx Axis cross_axis=":{"type":"method","name":"cross_axis=","children":[],"call":["DataTypeValidator  validate "," class "]}," Axlsx Axis color=":{"type":"method","name":"color=","children":[],"call":[]}," Axlsx Axis initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "," gridlines= "," crosses= "," format_code= "," tick_lbl_pos= "," ax_pos= ","Scaling  new "," rand ","8 ** "]}," Axlsx Axes set_cross_axis":{"type":"method","name":"set_cross_axis","children":[],"call":["axis cross_axis= "," axes first [] "," axes first "," axes "," axes empty? "," axes first [] cross_axis= "," axes size == "," axes size "]}," Axlsx Axes axes":{"type":"method","name":"axes","children":[],"call":[]}," Axlsx Axes add_axis":{"type":"method","name":"add_axis","children":[],"call":[" axes << "," axes "," set_cross_axis ","axis_class new "," set_cross_axis_class new  ","axis_class new _class new "]}," Axlsx Axes to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["axis [] to_xml_string ","axis [] "," axes each "," axes ","string << << << ","string << << ","axis [] id to_s ","axis [] id ","string << ","sorted inject ","axis kind_of? "," axes sort_by ","options [] ","str << ","<c:axId val=\" << << ","<c:axId val=\" << ","sorted each ","str << << << ","str << << ","axis is_a? "]}," Axlsx Axes []":{"type":"method","name":"[]","children":[],"call":[" axes assoc [] "," axes assoc "," axes "]}," Axlsx Axes initialize":{"type":"method","name":"initialize","children":[],"call":[" add_axis ","options each "," raise ","options keys first != ","options keys first ","options keys ","options keys include? ","options key? "]}," Axlsx AxDataSource allowed_tag_names":{"type":"method","name":"allowed_tag_names","children":[],"call":[]}," Axlsx AxDataSource initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx Core to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","str << << << ","str << << ","(or\n  (send nil :created)\n  (send\n    (const nil :Time) :now)) strftime ","Time  now "," created "," creator ","str << << << << << ","str << << << << ","<dcterms:created xsi:type=\"dcterms:W3CDTF\"> << << ","<dcterms:created xsi:type=\"dcterms:W3CDTF\"> << ","<dc:creator> << << ","<dc:creator> << ","xmlns:xsi=\" << << ","xmlns:xsi=\" << ","xmlns:dcmitype=\" << << << << ","xmlns:dcmitype=\" << << << ","xmlns:dcmitype=\" << << ","xmlns:dcmitype=\" << ","<cp:coreProperties xmlns:cp=\" << << << << ","<cp:coreProperties xmlns:cp=\" << << << ","<cp:coreProperties xmlns:cp=\" << << ","<cp:coreProperties xmlns:cp=\" << "]}," Axlsx Core initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," Axlsx App to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","Axlsx  camel "," instance_values each "," instance_values ","str << << << << << ","str << << << << ","str << << << ","str << << ","<Properties xmlns=\" << << << << ","<Properties xmlns=\" << << << ","<Properties xmlns=\" << << ","<Properties xmlns=\" << ","Axlsx  instance_values_for each ","Axlsx  instance_values_for "]}," Axlsx App doc_security=":{"type":"method","name":"doc_security=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App app_version=":{"type":"method","name":"app_version=","children":[],"call":["Axlsx  validate_string "]}," Axlsx App hyperlinks_changed=":{"type":"method","name":"hyperlinks_changed=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx App hyperlink_base=":{"type":"method","name":"hyperlink_base=","children":[],"call":["Axlsx  validate_string "]}," Axlsx App shared_doc=":{"type":"method","name":"shared_doc=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx App characters_with_spaces=":{"type":"method","name":"characters_with_spaces=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App links_up_to_date=":{"type":"method","name":"links_up_to_date=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx App scale_crop=":{"type":"method","name":"scale_crop=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx App m_m_clips=":{"type":"method","name":"m_m_clips=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App hidden_slides=":{"type":"method","name":"hidden_slides=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App total_time=":{"type":"method","name":"total_time=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App notes=":{"type":"method","name":"notes=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App slides=":{"type":"method","name":"slides=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App paragraphs=":{"type":"method","name":"paragraphs=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App lines=":{"type":"method","name":"lines=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App presentation_format=":{"type":"method","name":"presentation_format=","children":[],"call":["Axlsx  validate_string "]}," Axlsx App characters=":{"type":"method","name":"characters=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App words=":{"type":"method","name":"words=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App pages=":{"type":"method","name":"pages=","children":[],"call":["Axlsx  validate_int "]}," Axlsx App company=":{"type":"method","name":"company=","children":[],"call":["Axlsx  validate_string "]}," Axlsx App manager=":{"type":"method","name":"manager=","children":[],"call":["Axlsx  validate_string "]}," Axlsx App template=":{"type":"method","name":"template=","children":[],"call":["Axlsx  validate_string "]}," Axlsx App initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx Override to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":[]}," Axlsx Override part_name=":{"type":"method","name":"part_name=","children":[],"call":["Axlsx  validate_string "]}," Axlsx Default to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":[]}," Axlsx Default extension=":{"type":"method","name":"extension=","children":[],"call":["Axlsx  validate_string "]}," Axlsx ContentType to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","type to_xml_string "," each ","str << << << ","str << << ","<Types xmlns=\" << << ","<Types xmlns=\" << "]}," Axlsx ContentType initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx AbstractContentType to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","(send\n  (send nil :instance_values) :map) join "," << << << << "," << << << ","value to_s "," << << "," << ","Axlsx  camel "," instance_values map "," instance_values ","Axlsx  camel << << << ","Axlsx  camel << << ","Axlsx  camel << ","(send\n  (send\n    (const nil :Axlsx) :instance_values_for\n    (self)) :map) join ","Axlsx  instance_values_for map ","Axlsx  instance_values_for ","str << << << << ","str << << << ","key_value last to_s ","key_value last ","str << << ","key_value first ","index zero? ","Axlsx  instance_values_for each_with_index "]}," Axlsx AbstractContentType content_type=":{"type":"method","name":"content_type=","children":[],"call":["Axlsx  validate_content_type "]}," Axlsx AbstractContentType initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx booleanize":{"type":"method","name":"booleanize","children":[],"call":[]}," Axlsx Worksheet add_autofilter_defined_name_to_workbook":{"type":"method","name":"add_autofilter_defined_name_to_workbook","children":[],"call":[" workbook add_defined_name "," index "," auto_filter defined_name "," auto_filter "," workbook "," auto_filter range ! "," auto_filter range "]}," Axlsx Worksheet to_sheet_node_xml_string":{"type":"method","name":"to_sheet_node_xml_string","children":[],"call":["str << ","r:id=\" << << ","r:id=\" << "," rId ","name=\" << << ","name=\" << "," name "," serialized_attributes "," add_autofilter_defined_name_to_workbook ","str << << << ","str << << "]}," Axlsx Worksheet state":{"type":"method","name":"state","children":[],"call":[]}," Axlsx Worksheet state=":{"type":"method","name":"state=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx SheetPr tab_color=":{"type":"method","name":"tab_color=","children":[],"call":["Color  new "]}," Axlsx SheetPr outline_pr":{"type":"method","name":"outline_pr","children":[],"call":["OutlinePr  new "]}," Axlsx Row cells":{"type":"method","name":"cells","children":[],"call":[]}," Axlsx Row color=":{"type":"method","name":"color=","children":[],"call":["cell color= ","color [] ","color is_a? "," each_with_index "]}," Axlsx Row row_index":{"type":"method","name":"row_index","children":[],"call":[" worksheet rows index "," worksheet rows "," worksheet "]}," Axlsx RichTextRun xml_value":{"type":"method","name":"xml_value","children":[],"call":["(send\n  (lvar :value) :==\n  (true)) to_s ","value == "]}," Axlsx RichTextRun styles":{"type":"method","name":"styles","children":[],"call":[" cell row worksheet styles "," cell row worksheet "," cell row "," cell "]}," Axlsx RichTextRun style":{"type":"method","name":"style","children":[],"call":[" cell style "," cell "]}," Axlsx RichTextRun font_size":{"type":"method","name":"font_size","children":[],"call":["font sz ","font sz * ","font b "," styles fonts [] "," styles fonts "," styles "," styles cellXfs [] fontId "," styles cellXfs [] "," style "," styles cellXfs "," sz "]}," Axlsx RichTextRun string_width":{"type":"method","name":"string_width","children":[],"call":["string count * ","string count ","font_size / ","string size * ","string size "]}," Axlsx RichTextRun to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","</rPr><t> << << ","</rPr><t> << "," CGI  escapeHTML ","Axlsx  sanitize ","@value to_s ","Axlsx  trust_input ","< << << << << ","< << << << "," xml_value ","data [] ","< << << ","< << ","key to_s ","data [] to_xml_string ","<rFont val=\" << << ","<rFont val=\" << "," font_name ","data keys each ","data keys ","value nil? ! ","value nil? ","valid include? ","data select ","Hash  [] ","k to_sym "," instance_values map "," instance_values ","Axlsx  instance_values_for map ","Axlsx  instance_values_for ","str << << << ","str << << ","str << << << << << ","str << << << << ","val to_xml_string ","data each ","Axlsx  instance_values_for transform_keys ","Hash  []  [] ","Axlsx  instance_values_for transform_keys  [] ","Hash  []  [] to_xml_string ","Axlsx  instance_values_for transform_keys  [] to_xml_string ","Hash  []  keys each ","Axlsx  instance_values_for transform_keys  keys each ","Hash  []  keys ","Axlsx  instance_values_for transform_keys  keys ","Hash  []  select ","Axlsx  instance_values_for transform_keys  select ","Hash  []  each ","Axlsx  instance_values_for transform_keys  each "]}," Axlsx RichTextRun set_run_style":{"type":"method","name":"set_run_style","children":[],"call":[" instance_variable_set ","attr to_s ","Axlsx  send ","validator nil? ","INLINE_STYLES  include? ","attr to_sym "]}," Axlsx RichTextRun autowidth":{"type":"method","name":"autowidth","children":[],"call":[" string_width "," font_size "," value to_s "," value ","widtharray [] ","widtharray << "," value to_s split each "," value to_s split "," styles cellXfs [] alignment wrap_text "," styles cellXfs [] alignment "," styles cellXfs [] "," style "," styles cellXfs "," styles "," value nil? "]}," Axlsx RichTextRun scheme=":{"type":"method","name":"scheme=","children":[],"call":[" set_run_style ","RestrictionValidator  validate "]}," Axlsx RichTextRun vertAlign=":{"type":"method","name":"vertAlign=","children":[],"call":[" set_run_style ","RestrictionValidator  validate "]}," Axlsx RichTextRun sz=":{"type":"method","name":"sz=","children":[],"call":[" set_run_style "]}," Axlsx RichTextRun color=":{"type":"method","name":"color=","children":[],"call":["Color  new ","v is_a? "]}," Axlsx RichTextRun u=":{"type":"method","name":"u=","children":[],"call":[" set_run_style ","v == "]}," Axlsx RichTextRun extend=":{"type":"method","name":"extend=","children":[],"call":[" set_run_style "]}," Axlsx RichTextRun condense=":{"type":"method","name":"condense=","children":[],"call":[" set_run_style "]}," Axlsx RichTextRun shadow=":{"type":"method","name":"shadow=","children":[],"call":[" set_run_style "]}," Axlsx RichTextRun outline=":{"type":"method","name":"outline=","children":[],"call":[" set_run_style "]}," Axlsx RichTextRun strike=":{"type":"method","name":"strike=","children":[],"call":[" set_run_style "]}," Axlsx RichTextRun i=":{"type":"method","name":"i=","children":[],"call":[" set_run_style "]}," Axlsx RichTextRun b=":{"type":"method","name":"b=","children":[],"call":[" set_run_style "]}," Axlsx RichTextRun family=":{"type":"method","name":"family=","children":[],"call":[" set_run_style ","v to_i "]}," Axlsx RichTextRun charset=":{"type":"method","name":"charset=","children":[],"call":[" set_run_style "]}," Axlsx RichTextRun font_name=":{"type":"method","name":"font_name=","children":[],"call":[" set_run_style "]}," Axlsx RichTextRun value=":{"type":"method","name":"value=","children":[],"call":[]}," Axlsx RichTextRun initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "," value= "]}," Axlsx RichText to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["run to_xml_string "," each "]}," Axlsx RichText runs":{"type":"method","name":"runs","children":[],"call":[]}," Axlsx RichText add_run":{"type":"method","name":"add_run","children":[],"call":[" << ","RichTextRun  new "]}," Axlsx RichText autowidth":{"type":"method","name":"autowidth","children":[],"call":["widtharray max ","run autowidth "," each "]}," Axlsx RichText cell=":{"type":"method","name":"cell=","children":[],"call":["run cell= "," each "]}," Axlsx RichText initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," add_run ","text nil? "]}," Axlsx OutlinePr to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "]}," Axlsx OutlinePr initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx CellSerializer numeric":{"type":"method","name":"numeric","children":[],"call":[" value_serialization ","cell value "]}," Axlsx CellSerializer text":{"type":"method","name":"text","children":[],"call":[" value_serialization ","cell ssti "," inline_string_serialization ","cell ssti nil? "]}," Axlsx CellSerializer richtext":{"type":"method","name":"richtext","children":[],"call":[" value_serialization ","cell ssti "," inline_string_serialization ","cell ssti nil? "]}," Axlsx CellSerializer string":{"type":"method","name":"string","children":[],"call":[" inline_string_serialization "," value_serialization ","cell ssti ","cell ssti nil? ! ","cell ssti nil? "," formula_serialization ","cell is_formula? "," array_formula_serialization ","cell is_array_formula? "]}," Axlsx CellSerializer array_formula_serialization":{"type":"method","name":"array_formula_serialization","children":[],"call":["str << ","<v> << << ","<v> << ","cell formula_value to_s ","cell formula_value ","cell formula_value nil? ","t=\"str\"> << << << << << ","t=\"str\"> << << << << ","cell clean_value to_s sub sub ","cell clean_value to_s sub ","cell clean_value to_s ","cell clean_value ","t=\"str\"> << << << ","t=\"str\"> << << ","cell r ","t=\"str\"> << ","str << << << ","str << << ","str << << << << << << ","str << << << << << ","cell clean_value delete_prefix delete_suffix ","cell clean_value delete_prefix ","str << << << << "]}," Axlsx CellSerializer integer":{"type":"method","name":"integer","children":[],"call":[" numeric "]}," Axlsx CellSerializer float":{"type":"method","name":"float","children":[],"call":[" numeric "]}," Axlsx CellSerializer boolean":{"type":"method","name":"boolean","children":[],"call":[" value_serialization ","cell value to_s ","cell value "]}," Axlsx CellSerializer time":{"type":"method","name":"time","children":[],"call":[" value_serialization ","DateTimeConverter  time_to_serial to_s ","DateTimeConverter  time_to_serial ","cell value "]}," Axlsx CellSerializer date":{"type":"method","name":"date","children":[],"call":[" value_serialization ","DateTimeConverter  date_to_serial to_s ","DateTimeConverter  date_to_serial ","cell value "]}," Axlsx CellSerializer iso_8601":{"type":"method","name":"iso_8601","children":[],"call":[" value_serialization ","cell value "]}," Axlsx Cell string_width":{"type":"method","name":"string_width","children":[],"call":["(send\n  (send\n    (send\n      (lvar :string) :to_s) :count\n    (const\n      (const nil :Worksheet) :THIN_CHARS)) :+\n  (float 3.0)) * ","string to_s count + ","string to_s count ","string to_s ","font_size / ","(send\n  (send\n    (send\n      (lvar :string) :to_s) :size) :+\n  (int 3)) * ","string to_s size + ","string to_s size "," row worksheet workbook font_scale_divisor "," row worksheet workbook "," row worksheet "," row "," row worksheet workbook font_size / _divisor "]}," Axlsx Cell styles":{"type":"method","name":"styles","children":[],"call":[" row worksheet styles "," row worksheet "," row "]}," Axlsx Cell clean_value":{"type":"method","name":"clean_value","children":[],"call":["@value to_s ","Axlsx  sanitize "," CGI  escapeHTML ","Axlsx  trust_input ! ","Axlsx  trust_input "," type == "," type "]}," Axlsx Cell name=":{"type":"method","name":"name=","children":[],"call":[" row worksheet workbook add_defined_name "," r_abs "," row worksheet name "," row worksheet "," row "," row worksheet workbook "]}," Axlsx Cell is_array_formula?":{"type":"method","name":"is_array_formula?","children":[],"call":["@value to_s end_with? ","@value to_s ","@value to_s start_with? "," type == "," type "," escape_formulas "]}," Axlsx Cell contains_rich_text?":{"type":"method","name":"contains_rich_text?","children":[],"call":[" type == "," type "]}," Axlsx Cell type":{"type":"method","name":"type","children":[],"call":[]}," Axlsx Cell style":{"type":"method","name":"style","children":[],"call":[]}," Axlsx WorkbookViews to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","view to_xml_string "," each "," empty? "]}," Axlsx WorkbookViews initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx WorkbookView to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," serialized_attributes "]}," Axlsx WorkbookView initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "," parse_options "]}," Axlsx Workbook add_view":{"type":"method","name":"add_view","children":[],"call":[" views << ","WorkbookView  new "," views "]}," Axlsx Workbook views":{"type":"method","name":"views","children":[],"call":["WorkbookViews  new "]}," Axlsx Workbook is_reversed=":{"type":"method","name":"is_reversed=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx validate_marker_symbol":{"type":"method","name":"validate_marker_symbol","children":[],"call":[]}," Axlsx validate_view_visibility":{"type":"method","name":"validate_view_visibility","children":[],"call":[]}," Axlsx SimpleTypedList locked_at":{"type":"method","name":"locked_at","children":[],"call":[]}," Axlsx SerializedAttributes serialized_tag":{"type":"method","name":"serialized_tag","children":[],"call":["str << "," block_given? "," serialized_attributes ","str << << << ","str << << "]}," Axlsx MimeTypeUtils get_mime_type":{"type":"method","name":"get_mime_type","children":[],"call":[]}," Axlsx NumFmt serialized_attributes":{"type":"method","name":"serialized_attributes","children":[],"call":["str << ","Axlsx  booleanize ","Axlsx  camel ","attributes each "," declared_attributes merge! "," declared_attributes "," declared_attributes merge!  each "," declared_ declared_attributes merge!  merge! "," declared_ declared_attributes merge!  "]}," Axlsx Title text_size=":{"type":"method","name":"text_size=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx ScatterSeries ln_width=":{"type":"method","name":"ln_width=","children":[],"call":[]}," Axlsx ScatterSeries smooth=":{"type":"method","name":"smooth=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx LineSeries smooth=":{"type":"method","name":"smooth=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx LineSeries marker_symbol=":{"type":"method","name":"marker_symbol=","children":[],"call":["Axlsx  validate_marker_symbol "]}," Axlsx Chart bg_color=":{"type":"method","name":"bg_color=","children":[],"call":["DataTypeValidator  validate ","Color  new "]}," Axlsx Chart legend_position=":{"type":"method","name":"legend_position=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx Chart title_size=":{"type":"method","name":"title_size=","children":[],"call":["@title text_size= ","v to_s empty? ","v to_s "]}," Axlsx BubbleSeries to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["@bubbleSize to_xml_string ","@bubbleSize nil? ","@yData to_xml_string ","@yData nil? ","@xData to_xml_string ","@xData nil? ","str << ","<a:srgbClr val=\" << << ","<a:srgbClr val=\" << "," color ","str << << << ","str << << "]}," Axlsx BubbleSeries color=":{"type":"method","name":"color=","children":[],"call":[]}," Axlsx BubbleSeries initialize":{"type":"method","name":"initialize","children":[],"call":["NumDataSource  new ","options [] ","options [] nil? ","AxDataSource  new "]}," Axlsx BubbleChart axes":{"type":"method","name":"axes","children":[],"call":["Axes  new "]}," Axlsx BubbleChart to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":[" axes to_xml_string "," axes ","str << "," d_lbls to_xml_string "," d_lbls ","ser to_xml_string ","@series each ","<c:varyColors val=\" << << ","<c:varyColors val=\" << "," vary_colors to_s "," vary_colors ","str << << << ","str << << "]}," Axlsx BubbleChart initialize":{"type":"method","name":"initialize","children":[],"call":[" parse_options "]}," Axlsx BubbleChart y_val_axis":{"type":"method","name":"y_val_axis","children":[],"call":[" axes [] "," axes "]}," Axlsx BubbleChart x_val_axis":{"type":"method","name":"x_val_axis","children":[],"call":[" axes [] "," axes "]}," Axlsx BarChart axes":{"type":"method","name":"axes","children":[],"call":["Axes  new "]}," Axlsx BarChart to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":[" axes to_xml_string "," axes ","str << ","<c:shape val=\" << << ","<c:shape val=\" << ","@shape to_s ","@shape nil? ","<c:gapDepth val=\" << << ","<c:gapDepth val=\" << ","@gap_depth to_s ","@gap_depth nil? ","<c:gapWidth val=\" << << ","<c:gapWidth val=\" << ","@gap_width to_s ","@gap_width nil? ","@d_lbls to_xml_string ","ser to_xml_string ","@series each ","<c:varyColors val=\" << << ","<c:varyColors val=\" << "," vary_colors to_s "," vary_colors ","<c:grouping val=\" << << ","<c:grouping val=\" << "," grouping to_s "," grouping ","<c:barDir val=\" << << ","<c:barDir val=\" << "," bar_dir to_s "," bar_dir ","<c:overlap val=\" << << ","<c:overlap val=\" << ","@overlap to_s ","@overlap nil? ","str << << << ","str << << "]}," Axlsx BarChart shape=":{"type":"method","name":"shape=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx BarChart gap_depth=":{"type":"method","name":"gap_depth=","children":[],"call":["RegexValidator  validate "]}," Axlsx BarChart gap_width=":{"type":"method","name":"gap_width=","children":[],"call":["RegexValidator  validate ","RangeValidator  validate "]}," Axlsx BarChart grouping=":{"type":"method","name":"grouping=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx BarChart bar_dir=":{"type":"method","name":"bar_dir=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx BarChart initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx BarChart shape":{"type":"method","name":"shape","children":[],"call":[]}," Axlsx BarChart grouping":{"type":"method","name":"grouping","children":[],"call":[]}," Axlsx BarChart gap_width":{"type":"method","name":"gap_width","children":[],"call":[]}," Axlsx BarChart bar_dir":{"type":"method","name":"bar_dir","children":[],"call":[]}," Axlsx BarChart val_axis":{"type":"method","name":"val_axis","children":[],"call":[" axes [] "," axes "]}," Axlsx BarChart cat_axis":{"type":"method","name":"cat_axis","children":[],"call":[" axes [] "," axes "]}," Axlsx AreaSeries labels=":{"type":"method","name":"labels=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx AreaSeries data=":{"type":"method","name":"data=","children":[],"call":["DataTypeValidator  validate "]}," Axlsx AreaSeries to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","<c:smooth val=\" << << ","<c:smooth val=\" << "," smooth ","@data to_xml_string ","@data nil? ","@labels to_xml_string ","@labels nil? ","<c:marker><c:symbol val=\" + + ","<c:marker><c:symbol val=\" + ","@marker_symbol to_s ","@marker_symbol != ","@show_marker ! ","<a:srgbClr val=\" << << ","<a:srgbClr val=\" << "," color ","str << << << ","str << << "]}," Axlsx AreaSeries smooth=":{"type":"method","name":"smooth=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx AreaSeries marker_symbol=":{"type":"method","name":"marker_symbol=","children":[],"call":["Axlsx  validate_marker_symbol "]}," Axlsx AreaSeries show_marker=":{"type":"method","name":"show_marker=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx AreaSeries color=":{"type":"method","name":"color=","children":[],"call":[]}," Axlsx AreaSeries initialize":{"type":"method","name":"initialize","children":[],"call":["NumDataSource  new ","options [] nil? ","options [] ","AxDataSource  new "]}," Axlsx AreaChart axes":{"type":"method","name":"axes","children":[],"call":["Axes  new "]}," Axlsx AreaChart to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":[" axes to_xml_string "," axes ","str << ","</c: << << ","</c: << "," node_name "," block_given? ","@d_lbls to_xml_string ","ser to_xml_string ","@series each ","<c:varyColors val=\" << << ","<c:varyColors val=\" << "," vary_colors to_s "," vary_colors ","<c:grouping val=\" << << ","<c:grouping val=\" << "," grouping to_s "," grouping ","<c: << << ","<c: << ","str << << << ","str << << "]}," Axlsx AreaChart node_name":{"type":"method","name":"node_name","children":[],"call":["path []= ","path [] chr downcase ","path [] chr ","path [] ","i + ","path rindex "," class to_s "," class "," class name ","path []  []= "," class to_s  []= "," class name  []= ","path []  [] chr downcase "," class to_s  [] chr downcase "," class name  [] chr downcase ","path []  [] chr "," class to_s  [] chr "," class name  [] chr ","path []  [] "," class to_s  [] "," class name  [] ","path rindex  + ","path []  rindex "," class to_s  rindex "," class name  rindex ","path rpath rindex ndex "]}," Axlsx AreaChart grouping=":{"type":"method","name":"grouping=","children":[],"call":["RestrictionValidator  validate "]}," Axlsx AreaChart initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx AreaChart val_axis":{"type":"method","name":"val_axis","children":[],"call":[" axes [] "," axes "]}," Axlsx AreaChart cat_axis":{"type":"method","name":"cat_axis","children":[],"call":[" axes [] "," axes "]}," Axlsx Relationship ids_cache_key":{"type":"method","name":"ids_cache_key","children":[],"call":["key << "," Target "," TargetMode == "," TargetMode "," Type "," source_obj "]}," Axlsx Relationship clear_ids_cache":{"type":"method","name":"clear_ids_cache","children":[],"call":["Thread  current []= ","Thread  current "]}," Axlsx Relationship initialize_ids_cache":{"type":"method","name":"initialize_ids_cache","children":[],"call":["Thread  current []= ","Thread  current "]}," Axlsx Relationship ids_cache":{"type":"method","name":"ids_cache","children":[],"call":["Thread  current [] ","Thread  current "]}," Axlsx Cell escape_formulas=":{"type":"method","name":"escape_formulas=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx ZipCommand zip_parts":{"type":"method","name":"zip_parts","children":[],"call":[" raise ","ZipError  new ","status success? ! ","status success? ","Open3  capture2e ","Shellwords  shellescape ","Shellwords  shelljoin ","File  absolute_path "]}," Axlsx ZipCommand write_file":{"type":"method","name":"write_file","children":[],"call":["StringIO  new ","f write ","@buffer read ","File  open ","@buffer rewind ","@io close ","StringIO  new  read ","StringIO  new  rewind "]}," Axlsx ZipCommand write":{"type":"method","name":"write","children":[],"call":["@buffer << ","@io << "]}," Axlsx ZipCommand put_next_entry":{"type":"method","name":"put_next_entry","children":[],"call":["FileUtils  mkdir_p ","File  dirname ","@files << ","entry name "," write_file ","File  open "]}," Axlsx ZipCommand open":{"type":"method","name":"open","children":[],"call":[" zip_parts "," write_file ","block call ","Dir  mktmpdir "]}," Axlsx ZipCommand initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx Package parse_serialize_options":{"type":"method","name":"parse_serialize_options","children":[],"call":[" parse_serialize_options ","(or\n  (lvar :secondary_options)\n  (hash)) merge "," warn ","[DEPRECATION] Axlsx::Package#serialize with confirm_valid as a boolean is deprecated.  + ","options fetch "," raise ","ArgumentError  new ","invalid_keys any? ","options keys - ","options keys ","options merge! ","options is_a? ","[DEPRECATION] Axlsx::Package#serialize with 3 arguments is deprecated.  + ","options keys -  any? "]}," Axlsx BarSeries series_color=":{"type":"method","name":"series_color=","children":[],"call":[]}," Axlsx BarChart overlap=":{"type":"method","name":"overlap=","children":[],"call":["RangeValidator  validate "]}," Axlsx BarChart overlap":{"type":"method","name":"overlap","children":[],"call":[]}," Axlsx Workbook font_scale_divisor=":{"type":"method","name":"font_scale_divisor=","children":[],"call":["Axlsx  validate_float "]}," Axlsx Workbook bold_font_multiplier=":{"type":"method","name":"bold_font_multiplier=","children":[],"call":["Axlsx  validate_float "]}," Axlsx ScatterSeries marker_symbol_xml":{"type":"method","name":"marker_symbol_xml","children":[],"call":["(send\n  (ivar :@show_marker) :!) to_s ","<c:symbol val=\" + + ","<c:symbol val=\" + ","@marker_symbol to_s ","@marker_symbol != ","@show_marker ! ","<c:symbol val=\" +@ << << ","<c:symbol val=\" +@ << ","<c:symbol val=\" +@ "]}," Axlsx ScatterSeries marker_symbol=":{"type":"method","name":"marker_symbol=","children":[],"call":["Axlsx  validate_marker_symbol "]}," Axlsx hash_deep_merge":{"type":"method","name":"hash_deep_merge","children":[],"call":[]}," Axlsx instance_values_for":{"type":"method","name":"instance_values_for","children":[],"call":[]}," Axlsx Worksheet add_border":{"type":"method","name":"add_border","children":[],"call":["Axlsx BorderCreator  new draw ","Axlsx BorderCreator  new "," [] ","cell_refs each ","cell_refs is_a? ! ","cell_refs is_a? ","item is_a? ","options [] ","options is_a? "," []  is_a? "]}," Axlsx Worksheet add_style":{"type":"method","name":"add_style","children":[],"call":["cell add_style ","styles each ","cells each ","item is_a? "," [] ","cell_refs each ","cell_refs is_a? ! ","cell_refs is_a? "," []  is_a? "]}," Axlsx PivotTable sort_on_headers=":{"type":"method","name":"sort_on_headers=","children":[],"call":["Hash  [] ","(send\n  (lvar :headers) :map) flatten ","headers map ","headers is_a? ","(send\n  (lvar :Hash  [] ) :map) flatten ","Hash  []  map ","Hash  []  is_a? "]}," Axlsx DataValidation hideDropDown=":{"type":"method","name":"hideDropDown=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Cell add_style":{"type":"method","name":"add_style","children":[],"call":["wb styled_cells << ","wb styled_cells "," row worksheet workbook "," row worksheet "," row "," raw_style= ","new_style []= ","style [] ","style [] nil? ! ","style [] nil? ","new_style [] []= ","border_at uniq sort ","border_at uniq ","new_style [] ","(or\n  (send\n    (send\n      (send nil :raw_style) :[]\n      (sym :border)) :[]\n    (sym :edges))\n  (lvar :all_edges)) + ","style [] [] "," raw_style [] [] "," raw_style [] "," raw_style "," raw_style [] nil? ! "," raw_style [] nil? ","Axlsx  hash_deep_merge "," row worksheet workbook  styled_cells << "," row worksheet workbook  styled_cells ","Axlsx  hash_deep_merge  []= ","Axlsx  hash_deep_merge  [] []= ","(or\n  (send\n    (send\n      (send nil :raw_style) :[]\n      (sym :border)) :[]\n    (sym :edges))\n  (lvar :all_edges)) +  uniq sort ","(or\n  (send\n    (send\n      (send nil :raw_style) :[]\n      (sym :border)) :[]\n    (sym :edges))\n  (lvar :all_edges)) +  uniq ","Axlsx  hash_deep_merge  [] "]}," Axlsx BorderCreator last_col":{"type":"method","name":"last_col","children":[],"call":[" last_cell scan first "," last_cell scan "," last_cell "]}," Axlsx BorderCreator last_row":{"type":"method","name":"last_row","children":[],"call":[" last_cell scan first "," last_cell scan "," last_cell "]}," Axlsx BorderCreator first_col":{"type":"method","name":"first_col","children":[],"call":[" first_cell scan first "," first_cell scan "," first_cell "]}," Axlsx BorderCreator first_row":{"type":"method","name":"first_row","children":[],"call":[" first_cell scan first "," first_cell scan "," first_cell "]}," Axlsx BorderCreator last_cell":{"type":"method","name":"last_cell","children":[],"call":[" cells last r "," cells last "," cells ","@cells last r ","@cells last "]}," Axlsx BorderCreator first_cell":{"type":"method","name":"first_cell","children":[],"call":[" cells first r "," cells first "," cells ","@cells first r ","@cells first "]}," Axlsx BorderCreator border_cells":{"type":"method","name":"border_cells","children":[],"call":[" last_row "," first_col "," first_cell "," last_cell "," first_row "," last_col "]}," Axlsx BorderCreator draw":{"type":"method","name":"draw","children":[],"call":[" worksheet add_style "," border_cells [] "," border_cells "," worksheet ","@edges each ","@worksheet add_style "," first_cell ","@cells size == ","@cells size "]}," Axlsx BorderCreator initialize":{"type":"method","name":"initialize","children":[],"call":["@edges map uniq & ","@edges map uniq ","@edges map ","@edges is_a? ","@edges == ","args [] ","args is_a? "," raise ","ArgumentError  new ","(send\n  (ivar :@edges) :-\n  (const\n    (const\n      (const nil :Axlsx) :Border) :EDGES)) empty? ! ","(send\n  (ivar :@edges) :-\n  (const\n    (const\n      (const nil :Axlsx) :Border) :EDGES)) empty? ","@edges - ","(send\n  (ivar :@edges) :map) uniq ","@edges is_a? ! ","(send\n  (ivar :@edges) :map) uniq  map uniq & ","(send\n  (ivar :@edges) :map) uniq  map uniq ","(send\n  (ivar :@edges) :map) uniq  map ","(send\n  (ivar :@edges) :map) uniq  is_a? ","(send\n  (ivar :@edges) :map) uniq  == ","(send\n  (ivar :(send\n  (ivar :@edges) :map) uniq ) :-\n  (const\n    (const\n      (const nil :Axlsx) :Border) :EDGES)) empty? ! ","(send\n  (ivar :(send\n  (ivar :@edges) :map) uniq ) :-\n  (const\n    (const\n      (const nil :Axlsx) :Border) :EDGES)) empty? ","(send\n  (ivar :@edges) :map) uniq  - ","(send\n  (ivar :(send\n  (ivar :@edges) :map) uniq ) :map) uniq ","(send\n  (ivar :@edges) :map) uniq  is_a? ! "]}," Axlsx Workbook apply_styles":{"type":"method","name":"apply_styles","children":[],"call":[" styles_applied= ","cell style= "," styles add_style "," styles ","cell raw_style ","Axlsx  hash_deep_merge "," styles style_index [] ","cell style "," styles style_index "," styled_cells each "," styled_cells "," styled_cells ! "]}," Axlsx Workbook styled_cells":{"type":"method","name":"styled_cells","children":[],"call":["Set  new "]}," Axlsx Styles style_index":{"type":"method","name":"style_index","children":[],"call":[]}," Axlsx Title empty?":{"type":"method","name":"empty?","children":[],"call":["@cell nil? ","@text empty? "]}," Axlsx Chart rounded_corners=":{"type":"method","name":"rounded_corners=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Chart plot_visible_only=":{"type":"method","name":"plot_visible_only=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx escape_formulas=":{"type":"method","name":"escape_formulas=","children":[],"call":[]}," Axlsx escape_formulas":{"type":"method","name":"escape_formulas","children":[],"call":[]}," Axlsx Worksheet escape_formulas=":{"type":"method","name":"escape_formulas=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx Row escape_formulas=":{"type":"method","name":"escape_formulas=","children":[],"call":["cell escape_formulas= ","value [] ","value is_a? "," each_with_index "]}," Axlsx Workbook escape_formulas=":{"type":"method","name":"escape_formulas=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx MimeTypeUtils get_mime_type_from_uri":{"type":"method","name":"get_mime_type_from_uri","children":[],"call":[]}," Axlsx Pic relationship_xml_portion":{"type":"method","name":"relationship_xml_portion","children":[],"call":["<a:blip xmlns:r =\" << << << << ","<a:blip xmlns:r =\" << << << "," relationship Id "," relationship ","<a:blip xmlns:r =\" << << ","<a:blip xmlns:r =\" << "," remote? ","<a:blip xmlns:r =\" +@ << << << << ","<a:blip xmlns:r =\" +@ << << << ","<a:blip xmlns:r =\" +@ << << ","<a:blip xmlns:r =\" +@ << ","<a:blip xmlns:r =\" +@ "]}," Axlsx Pic remote?":{"type":"method","name":"remote?","children":[],"call":[" remote to_s == "," remote to_s "," remote "," remote == "]}," Axlsx Pic remote=":{"type":"method","name":"remote=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx row_ref":{"type":"method","name":"row_ref","children":[],"call":[]}," Axlsx IconSet interpolationPoints=":{"type":"method","name":"interpolationPoints=","children":[],"call":["Axlsx  validate_int ","v each "]}," Axlsx Cell escape_formulas":{"type":"method","name":"escape_formulas","children":[],"call":[" row worksheet escape_formulas "," row worksheet "," row "]}," Axlsx Cell style_str":{"type":"method","name":"style_str","children":[],"call":["@style to_s "]}," Axlsx SortState to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << ","sort_condition to_xml_string "," sort_conditions each "," sort_conditions "," increment_cell_value ","ref split ","@auto_filter range "," sort_conditions empty? ","@auto_filter range  split "]}," Axlsx SortState increment_cell_value":{"type":"method","name":"increment_cell_value","children":[],"call":["number + ","str [] to_i ","str [] ","str [] to_i  + "]}," Axlsx SortState add_sort_condition":{"type":"method","name":"add_sort_condition","children":[],"call":[" sort_conditions last "," sort_conditions "," sort_conditions << ","SortCondition  new "]}," Axlsx SortState sort_conditions":{"type":"method","name":"sort_conditions","children":[],"call":["SimpleTypedList  new "]}," Axlsx SortState initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Axlsx SortCondition to_xml_string":{"type":"method","name":"to_xml_string","children":[],"call":["str << "," custom_list join "," custom_list "," custom_list empty? "," order == "," order "," ref_to_single_column "," column_index ","  ref_to_single_column _to_single_column "]}," Axlsx SortCondition ref_to_single_column":{"type":"method","name":"ref_to_single_column","children":[],"call":["Axlsx  col_ref ","column_index + ","start_point first ","last_cell [] ","first_cell [] ","Axlsx  name_to_indices ","ref split ","Axlsx  name_to_indices  first "]}," Axlsx SortCondition initialize":{"type":"method","name":"initialize","children":[],"call":["DataTypeValidator  validate ","RestrictionValidator  validate ","Axlsx  validate_int "]}," Axlsx AutoFilter sort_on_generate=":{"type":"method","name":"sort_on_generate=","children":[],"call":["Axlsx  validate_boolean "]}," Axlsx AutoFilter sort_state":{"type":"method","name":"sort_state","children":[],"call":["SortState  new "]}," Axlsx SerializedAttributes ClassMethods ivar_xml_attributes":{"type":"method","name":"ivar_xml_attributes","children":[],"call":["@xml_attributes map "]}," Axlsx SerializedAttributes ClassMethods camel_xml_attributes":{"type":"method","name":"camel_xml_attributes","children":[],"call":["Axlsx  camel ","@xml_attributes map "]}," Axlsx BufferedZipOutputStream flush":{"type":"method","name":"flush","children":[],"call":["@buffer clear ","@zos << ","@buffer empty? "]}," Axlsx BufferedZipOutputStream write":{"type":"method","name":"write","children":[],"call":[" flush ","@buffer size > ","@buffer size ","@buffer << ","content to_s "]}," Axlsx BufferedZipOutputStream put_next_entry":{"type":"method","name":"put_next_entry","children":[],"call":["@zos put_next_entry "," flush "]}," Axlsx BufferedZipOutputStream write_buffer":{"type":"method","name":"write_buffer","children":[],"call":[" StringIO  new "]}," Axlsx BufferedZipOutputStream open":{"type":"method","name":"open","children":[],"call":[]}," Axlsx BufferedZipOutputStream initialize":{"type":"method","name":"initialize","children":[],"call":["String  new ","BUFFER_SIZE  * "]}}