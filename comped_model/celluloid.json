{" Celluloid version":{"type":"method","name":"version","children":[],"call":[]}," Celluloid Waker cleanup":{"type":"method","name":"cleanup","children":[],"call":["@sender close ","@receiver close "]}," Celluloid Waker io":{"type":"method","name":"io","children":[],"call":[]}," Celluloid Waker wait":{"type":"method","name":"wait","children":[],"call":[" raise ","byte == ","@receiver read ","@receiver read  == "]}," Celluloid Waker signal":{"type":"method","name":"signal","children":[],"call":[" raise ","@sender << "]}," Celluloid Waker initialize":{"type":"method","name":"initialize","children":[],"call":["IO  pipe "]}," Celluloid Supervisor inspect":{"type":"method","name":"inspect","children":[],"call":["str << ","str << << ","(send\n  (ivar :@args) :map) join ","arg inspect ","@args map ","@args empty? "," object_id to_s "," object_id "," class "]}," Celluloid Supervisor restart_actor":{"type":"method","name":"restart_actor","children":[],"call":[" start_actor "," terminate "]}," Celluloid Supervisor start_actor":{"type":"method","name":"start_actor","children":[],"call":["Celluloid Actor  []= ","@klass spawn_link ","Actor  []= "," sleep ","Logger  warn ","failures >= ","@klass new_link ","Celluloid  logger warn ","Celluloid  logger ","warning << ","ex backtrace join ","ex backtrace ","ex class ","Celluloid Logger  crash "]}," Celluloid Supervisor initialize":{"type":"method","name":"initialize","children":[],"call":[" start_actor "]}," Celluloid Supervisor supervise_as":{"type":"method","name":"supervise_as","children":[],"call":[" new ","group supervise_as ","SupervisionGroup  new ","Celluloid  supervise_as ","args unshift "]}," Celluloid Supervisor supervise":{"type":"method","name":"supervise","children":[],"call":[" new ","group supervise ","SupervisionGroup  new ","Celluloid  supervise ","args unshift "]}," Celluloid Response initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid Registry []":{"type":"method","name":"[]","children":[],"call":["@@registry [] ","name to_sym ","@@registry_lock synchronize ","@registry [] ","@registry_lock synchronize "]}," Celluloid Registry []=":{"type":"method","name":"[]=","children":[],"call":["@@registry []= ","name to_sym ","@@registry_lock synchronize "," raise ","actor_singleton ancestors include? ","actor_singleton ancestors ","actor mailbox system_event ","NamingRequest  new ","actor mailbox ","@registry []= ","@registry_lock synchronize ","actor mailbox << "]}," Celluloid Mailbox inspect":{"type":"method","name":"inspect","children":[],"call":["(send nil :map) join ","m inspect "," map "," object_id "," object_id to_s "," class "," map join "]}," Celluloid Mailbox each":{"type":"method","name":"each","children":[],"call":[" to_a each "," to_a "]}," Celluloid Mailbox to_a":{"type":"method","name":"to_a","children":[],"call":["@messages dup ","@lock synchronize ","@mutex synchronize ","@lock unlock ","@lock lock "]}," Celluloid Mailbox cleanup":{"type":"method","name":"cleanup","children":[],"call":["@messages clear ","msg cleanup ","msg respond_to? ","@messages each ","@waker cleanup ","@lock synchronize "]}," Celluloid Mailbox locate":{"type":"method","name":"locate","children":[],"call":["@messages shift ","@messages slice! first ","@messages slice! ","msg is_a? ","@messages index "," block_given? ","@lock synchronize "]}," Celluloid Mailbox receive":{"type":"method","name":"receive","children":[],"call":[" raise "," cleanup ","message is_a? "," locate ","@waker wait ","message nil? ","@condition wait ","@messages shift ","@messages slice! first ","@messages slice! ","msg is_a? ","@messages index "," block_given? ","@lock synchronize ","@mutex unlock ","wait_interval <= ","wait_until - ","now + ","Time  now "," next_message ","@mutex lock ","TimeoutError  new "," check ","Timers Wait  for "," fail ","TaskTimeout  new ","wait_interval < ","@lock unlock ","@lock lock "," locate  is_a? ","@messages shift  is_a? ","@messages slice! first  is_a? "," next_message  is_a? "," check  is_a? "," locate  nil? ","@messages shift  nil? ","@messages slice! first  nil? "," next_message  nil? "," check  nil? ","@ locate s shift ","@@messages shift s shift ","@@messages slice! first s shift ","@ next_message s shift ","@ check s shift ","@ locate s slice! first ","@@messages shift s slice! first ","@@messages slice! first s slice! first ","@ next_message s slice! first ","@ check s slice! first ","@ locate s slice! ","@@messages shift s slice! ","@@messages slice! first s slice! ","@ next_message s slice! ","@ check s slice! ","@ locate s index ","@@messages shift s index ","@@messages slice! first s index ","@ next_message s index ","@ check s index ","wait_until -  <= ","Time  now  + ","Time  Time  now  "," next_ locate  "," next_@messages shift  "," next_@messages slice! first  "," next_ next_message  "," next_ check  ","wait_until -  < "]}," Celluloid Mailbox system_event":{"type":"method","name":"system_event","children":[],"call":["@waker signal ","@messages unshift ","@lock synchronize ","@condition signal ","@mutex unlock ","@mutex lock ","@lock unlock ","@lock lock "]}," Celluloid Mailbox <<":{"type":"method","name":"<<","children":[],"call":[" raise ","@waker signal ","@messages << ","@lock synchronize ","@condition signal ","@mutex unlock ","@mutex lock ","@messages unshift ","message is_a? ","Logger  debug "," mailbox_full "," dead_letter ","@lock unlock ","@lock lock "]}," Celluloid Mailbox initialize":{"type":"method","name":"initialize","children":[],"call":["Waker  new ","Mutex  new ","ConditionVariable  new ","Celluloid  uuid "]}," Celluloid Linking linked_to?":{"type":"method","name":"linked_to?","children":[],"call":["@links include? ","@_links include? ","Thread  current [] links include? ","Thread  current [] links ","Thread  current [] ","Thread  current "]}," Celluloid Linking notify_unlink":{"type":"method","name":"notify_unlink","children":[],"call":["@links delete ","@_links delete ","Thread  current [] links delete ","Thread  current [] links ","Thread  current [] ","Thread  current "]}," Celluloid Linking notify_link":{"type":"method","name":"notify_link","children":[],"call":["@links << ","@_links << ","Thread  current [] links << ","Thread  current [] links ","Thread  current [] ","Thread  current "]}," Celluloid Linking unlink":{"type":"method","name":"unlink","children":[],"call":[" notify_unlink ","actor notify_unlink ","current_actor notify_unlink ","current_actor proxy ","Thread  current [] ","Thread  current ","Thread  current []  notify_unlink ","Thread  current []  proxy "]}," Celluloid Linking link":{"type":"method","name":"link","children":[],"call":[" notify_link ","actor notify_link ","current_actor notify_link ","current_actor proxy ","Thread  current [] ","Thread  current ","Thread  current []  notify_link ","Thread  current []  proxy "]}," Celluloid Links inspect":{"type":"method","name":"inspect","children":[],"call":["(send\n  (send\n    (ivar :@links) :to_a) :map) join ","l object_id ","l class ","@links to_a map ","@links to_a ","@lock synchronize "," class "," map join "," map ","(send\n  (send\n    (ivar :@(send\n  (send\n    (ivar :@links) :to_a) :map) join ) :to_a) :map) join ","(send\n  (send\n    (ivar :@ map join ) :to_a) :map) join ","@(send\n  (send\n    (ivar :@links) :to_a) :map) join  to_a map ","@ map join  to_a map ","@(send\n  (send\n    (ivar :@links) :to_a) :map) join  to_a ","@ map join  to_a "]}," Celluloid Links each":{"type":"method","name":"each","children":[],"call":["@links each ","@lock synchronize "]}," Celluloid Links delete":{"type":"method","name":"delete","children":[],"call":["@links delete ","@lock synchronize ","actor mailbox address ","actor mailbox "]}," Celluloid Links include?":{"type":"method","name":"include?","children":[],"call":["@links include? ","@lock synchronize ","@links has_key? ","actor mailbox address ","actor mailbox "]}," Celluloid Links <<":{"type":"method","name":"<<","children":[],"call":["@links << ","@lock synchronize ","@links []= ","actor mailbox address ","actor mailbox "]}," Celluloid Links initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new ","Set  new "]}," Celluloid Future value":{"type":"method","name":"value","children":[],"call":[" abort "," raise ","result value ","msg future == ","msg future ","msg is_a? ","Thread  receive ","@mutex unlock ","Thread  mailbox ","@forwards << ","@mutex lock ","Celluloid  receive ","Celluloid  mailbox "," fail ","result respond_to? ","@runner terminate ","@runner value ","@lock synchronize ","Thread  mailbox  << ","Celluloid  mailbox  << "]}," Celluloid Future run":{"type":"method","name":"run","children":[],"call":["@block [] "]}," Celluloid Future initialize":{"type":"method","name":"initialize","children":[],"call":["@call dispatch ","ThreadPool  get ","SyncCall  new ","Mutex  new ","InternalPool  get ","Celluloid  internal_pool get ","Celluloid  internal_pool ","Celluloid  uuid ","Call Sync  new "," args ","@runner run! ","Runner  new ","ThreadPool  put ","Thread  current ","SyncCall  new  dispatch ","Call Sync  new  dispatch ","Runner  new  run! "]}," Celluloid Future":{"type":"method","name":"Future","children":[],"call":[]}," Celluloid ExitEvent initialize":{"type":"method","name":"initialize","children":[],"call":["reason to_s "]}," Thread mailbox":{"type":"method","name":"mailbox","children":[],"call":["Celluloid Mailbox  new "," [] "," []= "," raise ","Thread  current != ","Thread  current "]}," Celluloid AsyncCall dispatch":{"type":"method","name":"dispatch","children":[],"call":["obj send ","obj respond_to? ","Logger  crash ","obj class "," check_signature ","ex cause ","Logger  debug ","Logger  format_exception ","obj public_send ","Thread  current []= ","Thread  current ","Celluloid  uuid ","CallChain  current_id= ","obj __log_error ","obj log_error "," log_error ","Celluloid Logger  crash "]}," Celluloid SyncCall cleanup":{"type":"method","name":"cleanup","children":[],"call":["@caller << ","ErrorResponse  new ","DeadActorError  new "," respond "]}," Celluloid SyncCall dispatch":{"type":"method","name":"dispatch","children":[],"call":["@caller << ","SuccessResponse  new "," raise ","ErrorResponse  new ","exception cause ","obj send ","NoMethodError  new ","obj inspect ","obj respond_to? "," respond ","exception is_a? ","AbortError  new "," check_signature ","ex is_a? ","obj public_send ","Thread  current []= ","Thread  current ","CallChain  current_id= ","NoMethodError  new  cause ","NoMethodError  new  is_a? "]}," Celluloid Call initialize":{"type":"method","name":"initialize","children":[],"call":["BlockProxy  new ","Celluloid  mailbox "," raise ","Celluloid  exclusive? ","Proxy Block  new "," fail "," object_id "]}," Celluloid ActorProxy __call":{"type":"method","name":"__call","children":[],"call":[" raise ","response class ","response value ","msg call == ","msg call ","msg is_a? ","our_mailbox receive ","@mailbox << ","SyncCall  new ","Thread  current mailbox ","Thread  current ","Fiber  yield ","Celluloid  actor? ","ex cause class new ","ex cause message ","ex cause ","ex cause class ","ex is_a? ","Fiber  yield  class ","Fiber  yield  value ","msg SyncCall  new  == ","msg SyncCall  new  ","Thread  current mailbox  receive ","response value  cause class new ","response value  cause message ","response value  cause ","response value  cause class ","response value  is_a? "]}," Celluloid ActorProxy method_missing":{"type":"method","name":"method_missing","children":[],"call":[" __call ","@mailbox << ","AsyncCall  new ","Thread  current mailbox ","Thread  current ","meth to_s sub ","meth to_s ","meth to_s match ","Actor  call ","Actor  async ","meth sub! ","meth match ","unbanged_meth slice! ","Logger  deprecate ","'bang method'-style async syntax is deprecated and will be removed in Celluloid 1.0. + "," async ","meth to_s  to_s sub ","meth to_s  to_s ","meth to_s  to_s match ","meth to_s  sub! ","meth to_s  match ","meth to_s sub  slice! ","meth to_s  slice! ","unbanged_meth to_s  slice! ","'bang meth to_s od'-style async syntax is deprecated and will be removed in Celluloid 1.0. + "]}," Celluloid ActorProxy inspect":{"type":"method","name":"inspect","children":[],"call":["@actor object_id to_s ","@actor object_id ","@actor class "," __call "," alive? ","Actor  call ","Actor  call sub "," method_missing ","@mailbox address "]}," Celluloid ActorProxy alive?":{"type":"method","name":"alive?","children":[],"call":["@actor alive? ","@mailbox alive? "]}," Celluloid ActorProxy methods":{"type":"method","name":"methods","children":[],"call":[" __call ","Actor  call "," method_missing "]}," Celluloid ActorProxy respond_to?":{"type":"method","name":"respond_to?","children":[],"call":[" __call ","Actor  call "," method_missing "]}," Celluloid ActorProxy send":{"type":"method","name":"send","children":[],"call":[" __call ","Actor  call "," method_missing "]}," Celluloid ActorProxy initialize":{"type":"method","name":"initialize","children":[],"call":["actor subject class to_s ","actor subject class ","actor subject ","actor thread ","actor mailbox ","FutureProxy  new ","AsyncProxy  new ","SyncProxy  new "]}," Celluloid Actor included":{"type":"method","name":"included","children":[],"call":[]}," Celluloid Actor InternalMethods __log_error":{"type":"method","name":"__log_error","children":[],"call":[" puts ","ex backtrace join ","ex backtrace ","ex to_s ","ex class "," class ","Celluloid  logger error ","Celluloid  logger ","message << "]}," Celluloid Actor InternalMethods __handle_crash":{"type":"method","name":"__handle_crash","children":[],"call":["Thread  current exit ","Thread  current "," __log_error ","actor mailbox system_event ","actor mailbox ","@links each ","ExitEvent  new ","@mailbox cleanup "," __cleanup "]}," Celluloid Actor InternalMethods __handle_exit":{"type":"method","name":"__handle_exit","children":[],"call":[" send ","exit_event reason ","exit_event actor "," raise "," class exit_handler "," class "," class  class exit_handler  "]}," Celluloid Actor InternalMethods __process_messages":{"type":"method","name":"__process_messages","children":[],"call":["call dispatch "," __handle_exit ","@mailbox receive ","message dispatch ","pending_calls []= ","fiber alive? ","fiber resume ","pending_calls delete ","message call "," __init_thread ","Fiber  new "," __handle_exit_event ","@_mailbox receive ","@mailbox receive  dispatch ","fiber resume  dispatch ","@_mailbox receive  dispatch ","pending_@mailbox receive s []= ","pending_fiber resume s []= ","pending_calls delete  alive? ","pending_calls delete  resume ","pending_@mailbox receive s delete ","pending_fiber resume s delete ","message @mailbox receive  ","message fiber resume  ","@mailbox receive  call ","@_mailbox receive  call "]}," Celluloid Actor InternalMethods __run_actor":{"type":"method","name":"__run_actor","children":[],"call":[" __handle_crash "," __process_messages ","Thread  current exit ","Thread  current "," __cleanup ","ExitEvent  new "]}," Celluloid Actor InternalMethods __start_actor":{"type":"method","name":"__start_actor","children":[],"call":[" __run_actor ","Thread  current []= ","Thread  current ","Thread  new ","ActorProxy  new ","Links  new ","Mailbox  new "," __init_thread ","Signals  new "]}," Celluloid Actor InstanceMethods inspect":{"type":"method","name":"inspect","children":[],"call":["str << ","str << << ","ivars join ","ivars empty? ","ivars << "," instance_variable_get inspect "," instance_variable_get ","(str \"@mailbox\") include? ","ivar to_s "," instance_variables each "," instance_variables "," object_id to_s "," object_id "," class "," actor? ","(str \"mailbox\") include? ","ivar to_s sub "]}," Celluloid Actor InstanceMethods abort":{"type":"method","name":"abort","children":[],"call":[" raise ","AbortError  new "]}," Celluloid Actor InstanceMethods alive?":{"type":"method","name":"alive?","children":[],"call":["@thread alive? ","@_thread alive? "]}," Celluloid Actor InstanceMethods actor?":{"type":"method","name":"actor?","children":[],"call":["@mailbox ! ! ","@mailbox ! "]}," Celluloid Actor ClassMethods trap_exit":{"type":"method","name":"trap_exit","children":[],"call":["callback to_sym "]}," Celluloid Actor ClassMethods supervise_as":{"type":"method","name":"supervise_as","children":[],"call":["Celluloid Supervisor  supervise_as "]}," Celluloid Actor ClassMethods supervise":{"type":"method","name":"supervise","children":[],"call":["Celluloid Supervisor  supervise "]}," Celluloid Actor ClassMethods spawn_link":{"type":"method","name":"spawn_link","children":[],"call":["proxy send ","current_actor link ","actor __start_actor "," allocate "," raise ","Thread  current [] ","Thread  current ","actor __start_actor  send ","current_ allocate  link ","Thread  current []  link "," allocate  __start_ allocate  "]}," Celluloid Actor ClassMethods spawn":{"type":"method","name":"spawn","children":[],"call":["proxy send ","actor __start_actor "," allocate ","actor __start_actor  send "," allocate  __start_ allocate  "]}," Celluloid AbortError initialize":{"type":"method","name":"initialize","children":[],"call":["cause to_s ","cause inspect "]}," Celluloid logger=":{"type":"method","name":"logger=","children":[],"call":[]}," Celluloid logger":{"type":"method","name":"logger","children":[],"call":[]}," Celluloid Mailbox shutdown":{"type":"method","name":"shutdown","children":[],"call":["@messages clear ","msg cleanup ","msg respond_to? ","@messages each ","@lock synchronize ","messages each ","@mutex unlock ","@mutex lock "," dead_letter "," block_given? "," raise "," fail ","@lock unlock ","@lock lock "]}," Celluloid Links send_event":{"type":"method","name":"send_event","children":[],"call":["actor mailbox system_event ","actor mailbox "," each ","actor mailbox << "]}," Celluloid ActorProxy terminate":{"type":"method","name":"terminate","children":[],"call":[" terminate! "," raise "," alive? ","Thread  pass "," join ","Actor  join "," send "," _send_ "]}," Celluloid ActorProxy to_s":{"type":"method","name":"to_s","children":[],"call":[" __call ","Actor  call "," method_missing "]}," Celluloid Actor InternalMethods __cleanup":{"type":"method","name":"__cleanup","children":[],"call":["@links send_event ","@mailbox shutdown ","@_links send_event ","@_mailbox shutdown "]}," Celluloid Actor InternalMethods __handle_exit_event":{"type":"method","name":"__handle_exit_event","children":[],"call":[" raise ","exit_event reason "," send ","exit_event actor "," class exit_handler "," class "," class  class exit_handler  "]}," Celluloid Actor InternalMethods __init_thread":{"type":"method","name":"__init_thread","children":[],"call":["Thread  current []= ","Thread  current "]}," Celluloid Actor InstanceMethods terminate":{"type":"method","name":"terminate","children":[],"call":[]}," Celluloid current_actor":{"type":"method","name":"current_actor","children":[],"call":["Actor  current ","Celluloid  current_actor "," raise ","Thread  current [] ","Thread  current ","actor proxy ","Celluloid  current_Thread  current []  ","Thread  current []  proxy "]}," Celluloid actor?":{"type":"method","name":"actor?","children":[],"call":["Thread  current [] ! ! ","Thread  current [] ! ","Thread  current [] ","Thread  current "]}," Celluloid method_missing":{"type":"method","name":"method_missing","children":[],"call":["Thread  current [] mailbox << ","Thread  current [] mailbox ","Thread  current [] ","Thread  current ","AsyncCall  new ","meth to_s sub ","meth to_s ","meth to_s match ","args unshift "]}," Celluloid defer":{"type":"method","name":"defer","children":[],"call":["Future  new value ","Future  new "]}," Celluloid every":{"type":"method","name":"every","children":[],"call":["Thread  current [] every ","Thread  current [] ","Thread  current "]}," Celluloid after":{"type":"method","name":"after","children":[],"call":["Thread  current [] after ","Thread  current [] ","Thread  current "]}," Celluloid exclusive":{"type":"method","name":"exclusive","children":[],"call":["Thread  current [] exclusive ","Thread  current [] ","Thread  current "]}," Celluloid sleep":{"type":"method","name":"sleep","children":[],"call":["Celluloid  sleep ","Kernel  sleep ","actor sleep ","Thread  current [] ","Thread  current ","Thread  current []  sleep "]}," Celluloid receive":{"type":"method","name":"receive","children":[],"call":["Celluloid  receive ","Thread  mailbox receive ","Thread  mailbox ","actor receive ","Thread  current [] ","Thread  current ","Celluloid  mailbox receive ","Celluloid  mailbox ","Thread  current mailbox receive ","Thread  current mailbox ","Thread  current []  receive "]}," Celluloid linked_to?":{"type":"method","name":"linked_to?","children":[],"call":["Thread  current [] links include? ","Thread  current [] links ","Thread  current [] ","Thread  current ","Actor  linked_to? "]}," Celluloid notify_unlink":{"type":"method","name":"notify_unlink","children":[],"call":[" links delete "," links "]}," Celluloid notify_link":{"type":"method","name":"notify_link","children":[],"call":[" links << "," links "]}," Celluloid unlink":{"type":"method","name":"unlink","children":[],"call":[" notify_unlink ","actor notify_unlink ","Actor  current ","Actor  unlink "," current_actor "]}," Celluloid link":{"type":"method","name":"link","children":[],"call":[" notify_link ","actor notify_link ","Actor  current ","Actor  link "," current_actor "]}," Celluloid links":{"type":"method","name":"links","children":[],"call":["Thread  current [] links ","Thread  current [] ","Thread  current "]}," Celluloid wrapped_object":{"type":"method","name":"wrapped_object","children":[],"call":[]}," Celluloid tasks":{"type":"method","name":"tasks","children":[],"call":["Thread  current [] tasks to_a ","Thread  current [] tasks ","Thread  current [] ","Thread  current ","Celluloid  tasks ","actor tasks "," raise ","Thread  current []  tasks "]}," Celluloid wait":{"type":"method","name":"wait","children":[],"call":["Thread  current [] wait ","Thread  current [] ","Thread  current "]}," Celluloid signal":{"type":"method","name":"signal","children":[],"call":["Thread  current [] signal ","Thread  current [] ","Thread  current "]}," Celluloid inspect":{"type":"method","name":"inspect","children":[],"call":["str << ","str << << ","ivars join ","ivars empty? "," instance_variable_get inspect "," instance_variable_get "," instance_variables map "," instance_variables "," object_id to_s "," object_id "," class "]}," Celluloid terminate":{"type":"method","name":"terminate","children":[],"call":["Thread  current [] terminate ","Thread  current [] ","Thread  current ","Thread  current [] proxy terminate! ","Thread  current [] proxy ","Thread  current [] behavior_proxy terminate! ","Thread  current [] behavior_proxy "]}," Celluloid abort":{"type":"method","name":"abort","children":[],"call":[" raise ","AbortError  new ","cause class ","RuntimeError  new "," fail "]}," Celluloid alive?":{"type":"method","name":"alive?","children":[],"call":["Thread  current [] alive? ","Thread  current [] ","Thread  current "]}," Celluloid ClassMethods ===":{"type":"method","name":"===","children":[],"call":["other kind_of? ","other is_a? "]}," Celluloid ClassMethods mailbox_factory":{"type":"method","name":"mailbox_factory","children":[],"call":["Mailbox  new ","@mailbox_factory call "," superclass mailbox_factory "," superclass "," superclass respond_to? "]}," Celluloid ClassMethods use_mailbox":{"type":"method","name":"use_mailbox","children":[],"call":["klass new "," proc "," mailbox_class "," define_method "]}," Celluloid ClassMethods trap_exit":{"type":"method","name":"trap_exit","children":[],"call":["callback to_sym "]}," Celluloid ClassMethods supervise_as":{"type":"method","name":"supervise_as","children":[],"call":["Supervisor  supervise_as ","Celluloid  supervise_as ","args unshift ","Celluloid Supervisor  supervise_as "]}," Celluloid ClassMethods supervise":{"type":"method","name":"supervise","children":[],"call":["Supervisor  supervise ","Celluloid  supervise ","config merge ","args unshift ","Celluloid Supervisor  supervise "]}," Celluloid ClassMethods new_link":{"type":"method","name":"new_link","children":[],"call":["proxy _send_ ","current_actor link ","Actor  new proxy ","Actor  new "," allocate "," raise ","Actor  current ","Actor  link "," actor_options ","Celluloid  actor? ","Cell  new proxy ","Cell  new "," behavior_options "," fail ","proxy send ","Celluloid Actor  new proxy ","Celluloid Actor  new ","Thread  current [] ","Thread  current ","Celluloid  current_actor ","Actor  new proxy  _send_ ","Cell  new proxy  _send_ ","Celluloid Actor  new proxy  _send_ ","Actor  current  link ","Thread  current []  link ","Celluloid  current_actor  link ","Actor  new Actor  new proxy  ","Actor  new Cell  new proxy  ","Actor  new Celluloid Actor  new proxy  ","Cell  new Actor  new proxy  ","Cell  new Cell  new proxy  ","Cell  new Celluloid Actor  new proxy  ","Actor  new proxy  send ","Cell  new proxy  send ","Celluloid Actor  new proxy  send ","Celluloid Actor  new Actor  new proxy  ","Celluloid Actor  new Cell  new proxy  ","Celluloid Actor  new Celluloid Actor  new proxy  ","Celluloid  Actor  current  ","Celluloid  Thread  current []  ","Celluloid  Celluloid  current_actor  "]}," Celluloid ClassMethods new":{"type":"method","name":"new","children":[],"call":["proxy _send_ ","Actor  new proxy ","Actor  new "," allocate "," actor_options ","Cell  new proxy ","Cell  new "," behavior_options ","proxy send ","Celluloid Actor  new proxy ","Celluloid Actor  new ","Actor  new proxy  _send_ ","Cell  new proxy  _send_ ","Celluloid Actor  new proxy  _send_ ","Actor  new Actor  new proxy  ","Actor  new Cell  new proxy  ","Actor  new Celluloid Actor  new proxy  ","Cell  new Actor  new proxy  ","Cell  new Cell  new proxy  ","Cell  new Celluloid Actor  new proxy  ","Actor  new proxy  send ","Cell  new proxy  send ","Celluloid Actor  new proxy  send ","Celluloid Actor  new Actor  new proxy  ","Celluloid Actor  new Cell  new proxy  ","Celluloid Actor  new Celluloid Actor  new proxy  "]}," Celluloid shutdown":{"type":"method","name":"shutdown","children":[],"call":["Logger  info ","terminator value ","terminators each ","actor future ","actors each ","actors size ","actors size > ","Actor  all ","Timeout  timeout ","Actor  all each ","Supervisor  root terminate ","Supervisor  root ","Actor  join ","actor terminate! ","Logger  debug ","Logger  error "," shutdown_timeout "," internal_pool shutdown "," internal_pool "," internal_pool kill ","Actor  kill "," actor_system shutdown "," actor_system ","future value ","futures each ","Actor  all  each ","Actor  all  size ","Actor  all  size > "]}," Celluloid exception_handler":{"type":"method","name":"exception_handler","children":[],"call":["Logger  exception_handler ","Internals Logger  exception_handler "]}," Celluloid cores":{"type":"method","name":"cores","children":[],"call":["CPUCounter  cores "," Integer ","Facter  fact value ","Facter  fact ","Internals CPUCounter  cores "]}," Celluloid uuid":{"type":"method","name":"uuid","children":[],"call":["UUID  generate ","Internals UUID  generate "]}," Celluloid exclusive?":{"type":"method","name":"exclusive?","children":[],"call":["Thread  current [] exclusive? ","Thread  current [] ","Thread  current "," actor? ","Celluloid  exclusive? ","actor exclusive? ","task exclusive? "," Thread  current [] ? ","Thread  current []  exclusive? "]}," Celluloid included":{"type":"method","name":"included","children":[],"call":["klass send "," exit_handler ","klass property ","Celluloid  task_class "," exclusive_actor "," exclusive_methods ","args any? "," exit_handler_name ","singleton send ","Celluloid  group_class "]}," Celluloid UUID generate":{"type":"method","name":"generate","children":[],"call":[]}," Celluloid Timer fire":{"type":"method","name":"fire","children":[],"call":["@block call "," reset "," recurring "]}," Celluloid Timer reset":{"type":"method","name":"reset","children":[],"call":["@timers insert ","Time  now + ","Time  now ","@timers cancel ","Time  now + rs insert ","Time  now + rs cancel "]}," Celluloid Timer cancel":{"type":"method","name":"cancel","children":[],"call":["@timers cancel "]}," Celluloid Timer <=>":{"type":"method","name":"<=>","children":[],"call":["@time <=> ","other time "]}," Celluloid Timer initialize":{"type":"method","name":"initialize","children":[],"call":[" reset "]}," Celluloid Timers index":{"type":"method","name":"index","children":[],"call":["m + ","m - ","timer < ","@timers at ","(send\n  (lvar :r) :+\n  (lvar :l)) / ","r + ","l <= ","@timers size - ","@timers size ","(send\n  (lvar :r) :+\n  (lvar :l)) /  + ","(send\n  (lvar :r) :+\n  (lvar :l)) /  - ","timem -  < ","ti(send\n  (lvar :r) :+\n  (lvar :l)) / er < ","@timem - s at ","@ti(send\n  (lvar :r) :+\n  (lvar :l)) / ers at ","(send\n  (m + var :r) :+\n  (m + var :m + )) / ","(send\n  (lvam -  :m - ) :+\n  (lvam -  :l)) / ","m -  + ","m +  <= ","@timem - s size - ","@ti(send\n  (lvar :r) :+\n  (lvar :l)) / ers size - ","@timem - s size ","@ti(send\n  (lvar :r) :+\n  (lvar :l)) / ers size "]}," Celluloid Timers empty?":{"type":"method","name":"empty?","children":[],"call":["@timers empty? "]}," Celluloid Timers cancel":{"type":"method","name":"cancel","children":[],"call":["@timers delete "]}," Celluloid Timers insert":{"type":"method","name":"insert","children":[],"call":["@timers insert "," index "]}," Celluloid Timers fire":{"type":"method","name":"fire","children":[],"call":["timer call ","@timers shift ","time > ","@timers first time ","@timers first "," empty? ! "," empty? ","Time  now + ","Time  now ","@timers empty? ","@timers shift  call ","Time  now + r call ","@@timers shift s shift ","@Time  now + rs shift ","Time  now +  > ","@@timers shift s first time ","@Time  now + rs first Time  now +  ","@@timers shift s first ","@Time  now + rs first ","@@timers shift s empty? ","@Time  now + rs empty? "]}," Celluloid Timers wait_interval":{"type":"method","name":"wait_interval","children":[],"call":["@timers first time - ","Time  now ","@timers first time ","@timers first "," empty? "]}," Celluloid Timers wait":{"type":"method","name":"wait","children":[],"call":[" fire "," sleep ","interval >= "," wait_interval ","@timers empty? "," wait_interval  >= "," wait_ wait_interval  "]}," Celluloid Timers add":{"type":"method","name":"add","children":[],"call":["Timer  new "]}," Celluloid Timers initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid ThreadPool create":{"type":"method","name":"create","children":[],"call":["thread []= "," put ","Logger  crash ","proc call ","queue pop ","Thread  new ","Queue  new ","func call ","queue pop  call ","Queue  new  pop "]}," Celluloid ThreadPool put":{"type":"method","name":"put","children":[],"call":["@pool << ","thread [] << ","thread [] ","@pool size >= ","@pool size ","@mutex synchronize ","@lock synchronize "]}," Celluloid ThreadPool get":{"type":"method","name":"get","children":[],"call":["thread [] << ","thread [] ","@pool shift "," create ","@pool empty? ","@mutex synchronize ","@lock synchronize ","@pool shift  [] << "," create  [] << ","@pool shift  [] "," create  [] "]}," Celluloid Task inspect":{"type":"method","name":"inspect","children":[],"call":["@fiber alive? ","@status inspect ","@type inspect "," object_id to_s "," object_id "," class ","@meta inspect "]}," Celluloid Task running?":{"type":"method","name":"running?","children":[],"call":["@fiber alive? ","@status != "]}," Celluloid Task terminate":{"type":"method","name":"terminate","children":[],"call":[" resume ","@fiber alive? ","Task TerminatedError  new "," running? "," raise ","exception set_backtrace "," caller ","Celluloid  logger warn ","@status inspect ","@meta inspect ","@type inspect ","Celluloid  logger "," exclusive? ","logger warn ","Logger  with_backtrace "," backtrace "," fail ","logger send ","Internals Logger  with_backtrace ","TaskTerminated  new ","Task TerminatedError  new  set_backtrace ","TaskTerminated  new  set_backtrace "]}," Celluloid Task resume":{"type":"method","name":"resume","children":[],"call":[" raise ","ex message == ","ex message ","@fiber resume "," deliver ","Thread  current [] ","Thread  current "," guard ","Internals Logger  warn ","@status inspect ","@meta inspect ","@type inspect "," running? "]}," Celluloid Task initialize":{"type":"method","name":"initialize","children":[],"call":["actor tasks delete ","actor tasks ","actor tasks << ","Fiber  current task= ","Fiber  current ","Thread  current []= ","Thread  current ","Fiber  new ","Thread  current [] ","actor setup_thread "," create "," raise ","CallChain  current_id= ","CallChain  current_id ","@meta delete "," guard "," name_current_thread "," thread_metadata ","Internals CallChain  current_id= "," fail ","Internals CallChain  current_id ","@meta dup delete ","@meta dup ","Thread  current []  tasks delete ","Thread  current []  tasks ","Thread  current []  tasks << ","Thread  current []  setup_thread "]}," Celluloid Task suspend":{"type":"method","name":"suspend","children":[],"call":[" raise ","value is_a? "," signal ","Logger  warn ","(lvar :warning) join "," caller [] "," caller ","warning << ","(dstr\n  (str \"type=\")\n  (begin\n    (send\n      (ivar :@type) :inspect))) join ","@status inspect ","@meta inspect ","@type inspect ","Task  current == ","Task  current "," exclusive? ","logger warn ","Logger  with_backtrace "," fail ","Internals Logger  with_backtrace "," signal  is_a? "]}," Celluloid Task current":{"type":"method","name":"current","children":[],"call":[]}," Celluloid Signals run_task":{"type":"method","name":"run_task","children":[],"call":["Logger  crash ","task resume ","Celluloid Logger  crash "]}," Celluloid Signals send":{"type":"method","name":"send","children":[],"call":[" run_task ","tasks size > ","tasks size ","tasks each ","@waiting delete ","fiber resume ","fibers each ","Celluloid  resume_fiber ","task resume ","task running? ","Logger  debug ","@waiting delete  size > ","@waiting delete  size ","@waiting delete  each "]}," Celluloid Signals wait":{"type":"method","name":"wait","children":[],"call":["Task  suspend ","@waiting []= ","Task  current ","tasks << ","@waiting [] "," raise ","Celluloid  exclusive? ","@conditions [] wait ","@conditions [] ","Condition  new ","Fiber  yield ","fibers << ","Fiber  current ","@waiting []  << "]}," Celluloid Signals initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid ErrorResponse value":{"type":"method","name":"value","children":[],"call":[" raise "," cause exception "," cause "," is_a? ","ex backtrace concat "," caller ","ex backtrace ","ex backtrace << ","ex cause ","ex is_a? "," cause class new "," cause message "," cause class "," cause ex cause ception ","ex cause  backtrace concat ","ex cause  backtrace ","ex cause  backtrace << ","ex cause  cause ","ex cause  is_a? "]}," Celluloid Registry registered":{"type":"method","name":"registered","children":[],"call":["@@registry keys ","@@registry_lock synchronize "]}," Celluloid Receiver resume":{"type":"method","name":"resume","children":[],"call":["@task resume "]}," Celluloid Receiver match":{"type":"method","name":"match","children":[],"call":["@block call "]}," Celluloid Receiver initialize":{"type":"method","name":"initialize","children":[],"call":["Task  current "]}," Celluloid Receivers handle_message":{"type":"method","name":"handle_message","children":[],"call":["receiver resume ","@timers cancel ","receiver timer ","@receivers delete ","r match ","@receivers find ","receiver timer cancel ","Celluloid  resume_fiber ","@handlers delete_at ","block call ","@handlers each_with_index ","fiber resume "]}," Celluloid Receivers fire_timers":{"type":"method","name":"fire_timers","children":[],"call":["@timers fire "]}," Celluloid Receivers wait_interval":{"type":"method","name":"wait_interval","children":[],"call":["@timers wait_interval "]}," Celluloid Receivers receive":{"type":"method","name":"receive","children":[],"call":["Task  suspend ","@receivers << ","receiver timer= ","receiver resume ","@receivers delete ","@timers add ","Receiver  new ","Thread  mailbox receive ","Thread  mailbox ","Celluloid  exclusive? ","@timers after ","Celluloid  mailbox receive ","Celluloid  mailbox ","Fiber  yield ","@handlers << ","Fiber  current "," raise ","@Receiver  new s << ","Receiver  new  timer= ","Receiver  new  resume ","@Receiver  new s delete "]}," Celluloid Receivers initialize":{"type":"method","name":"initialize","children":[],"call":["Timers  new ","Set  new ","Timers Group  new "]}," Celluloid Pool spawn":{"type":"method","name":"spawn","children":[],"call":["@klass new_link "]}," Celluloid Pool crash_handler":{"type":"method","name":"crash_handler","children":[],"call":[" signal ","@running_actors + == ","@running_actors + ","@actors delete "]}," Celluloid Pool idle_count":{"type":"method","name":"idle_count","children":[],"call":[]}," Celluloid Pool size":{"type":"method","name":"size","children":[],"call":[]}," Celluloid Pool put":{"type":"method","name":"put","children":[],"call":["@actors << "," raise ","actor is_a? "]}," Celluloid Pool get":{"type":"method","name":"get","children":[],"call":[" abort "," put "," block_given? "," spawn ","@actors pop "," wait ","@running_actors == ","@ spawn s pop ","@@actors pop s pop ","@running_ spawn s == ","@running_@actors pop s == "]}," Celluloid Pool initialize":{"type":"method","name":"initialize","children":[],"call":["@actors << "," spawn ","opts [] times ","opts [] ","(pair\n  (sym :initial_size)\n  (int 1)) merge ","(send\n  (const nil :Celluloid) :cores) max ","Celluloid  cores "," raise ","options [] < ","options [] ","(pair\n  (sym :initial_size)\n  (int 1)) merge  [] times ","(pair\n  (sym :initial_size)\n  (int 1)) merge  [] "]}," Celluloid Mailbox alive?":{"type":"method","name":"alive?","children":[],"call":["@dead ! "]}," Celluloid Mailbox next_message":{"type":"method","name":"next_message","children":[],"call":[" raise ","message is_a? ","@messages shift ","@messages slice! first ","@messages slice! ","msg is_a? ","@messages index "," block_given? ","@messages shift  is_a? ","@messages slice! first  is_a? ","@@messages shift s shift ","@@messages slice! first s shift ","@@messages shift s slice! first ","@@messages slice! first s slice! first ","@@messages shift s slice! ","@@messages slice! first s slice! ","@@messages shift s index ","@@messages slice! first s index "]}," Celluloid Logger exception_handler":{"type":"method","name":"exception_handler","children":[],"call":["@exception_handlers << "]}," Celluloid Logger format_exception":{"type":"method","name":"format_exception","children":[],"call":["str << ","exception backtrace join ","exception backtrace ","exception to_s ","exception class "]}," Celluloid Logger crash":{"type":"method","name":"crash","children":[],"call":[" error ","EXCEPTION HANDLER CRASHED:\n << "," format_exception ","handler call ","@exception_handlers each ","string << << ","string << ","exception backtrace join ","exception backtrace ","exception to_s ","exception class "]}," Celluloid Logger error":{"type":"method","name":"error","children":[],"call":["Celluloid  logger error ","Celluloid  logger "]}," Celluloid Logger warn":{"type":"method","name":"warn","children":[],"call":["Celluloid  logger warn ","Celluloid  logger "]}," Celluloid Logger info":{"type":"method","name":"info","children":[],"call":["Celluloid  logger info ","Celluloid  logger "]}," Celluloid Logger debug":{"type":"method","name":"debug","children":[],"call":["Celluloid  logger debug ","Celluloid  logger "]}," Celluloid Links map":{"type":"method","name":"map","children":[],"call":["result << "," each "]}," Celluloid Group Supervisable supervise":{"type":"method","name":"supervise","children":[],"call":["Supervisor  new_link "]}," Celluloid Group Supervisable initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","@args kind_of? ","options [] ","h []= ","k to_s ","options inject "]}," Celluloid Group restart_supervisor":{"type":"method","name":"restart_supervisor","children":[],"call":["@supervisors []= ","supervisable supervise "," raise ","@supervisors delete ","@supervisable supervise s []= ","@supervisors delete  supervise ","@supervisable supervise s delete "]}," Celluloid Group initialize":{"type":"method","name":"initialize","children":[],"call":["@supervisors []= ","supervisable supervise "," class supervisables each "," class supervisables "," class ","Mutex  new ","@supervisable supervise s []= "]}," Celluloid Group supervise":{"type":"method","name":"supervise","children":[],"call":[" supervisables << ","Supervisable  new "," supervisables "]}," Celluloid Group run":{"type":"method","name":"run","children":[],"call":["Logger  error "," sleep ","supervisor alive? "," run! "," loop "," run!  alive? "]}," Celluloid Group supervisables":{"type":"method","name":"supervisables","children":[],"call":[]}," Celluloid Future Result value":{"type":"method","name":"value","children":[],"call":["@result value "]}," Celluloid Future Result initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid Future signal":{"type":"method","name":"signal","children":[],"call":["@forwards << ","f << ","@forwards each ","@forwards is_a? "," raise ","@mutex synchronize ","Result  new "," fail "]}," Celluloid Future execute":{"type":"method","name":"execute","children":[],"call":["receiver << ","SyncCall  new "," raise ","@mutex synchronize ","Call Sync  new "," fail "]}," Celluloid FSM State valid_transition?":{"type":"method","name":"valid_transition?","children":[],"call":["@transitions include? ","new_state to_sym "]}," Celluloid FSM State call":{"type":"method","name":"call","children":[],"call":["obj instance_eval "]}," Celluloid FSM State initialize":{"type":"method","name":"initialize","children":[],"call":["t to_sym "," Array map "," Array "]}," Celluloid FSM transition!":{"type":"method","name":"transition!","children":[],"call":[]}," Celluloid FSM transition":{"type":"method","name":"transition","children":[],"call":["new_state call "," transition! ","new_state name ","@delayed_transition cancel ","@actor after ","options [] "," raise "," class ","state_name == "," class default_state "," class states [] "," class states ","current_state transitions map join ","current_state transitions map ","current_state transitions ","current_state valid_transition? ! ","current_state valid_transition? ","current_state name == ","current_state name ","state_name to_sym "," transition_with_callbacks! "," handle_delayed_transitions "," validate_and_sanitize_new_state "," after "," class states []= ","State  new ","new_state ! "," class states []  call "," validate_and_sanitize_new_state  call "," class states []=  call "," class states []  name "," validate_and_sanitize_new_state  name "," class states []=  name ","state_name to_sym  == "," class states []  transitions map join "," class states []  transitions map "," class states []  transitions ","current_state current_state transitions map join _transition? ! "," class states []  valid_transition? ! ","current_state current_state transitions map join _transition? "," class states []  valid_transition? "," class states []  name == ","state_name to_sym  to_sym "," validate_and_sanitize_ class states []  "," validate_and_sanitize_ validate_and_sanitize_new_state  "," validate_and_sanitize_ class states []=  "," current_state transitions map join ate_and_sanitize_new_state "," class states []  ! "," validate_and_sanitize_new_state  ! "," class states []=  ! "]}," Celluloid FSM attach":{"type":"method","name":"attach","children":[],"call":[]}," Celluloid FSM initialize":{"type":"method","name":"initialize","children":[],"call":["Celluloid  current_actor ","Celluloid  actor? "," class default_state "," class "]}," Celluloid FSM ClassMethods state":{"type":"method","name":"state","children":[],"call":[" states []= ","State  new ","options [] "," states "," default_state ","name to_sym ","args each ","h []= ","k to_s ","args pop inject ","args pop ","args last is_a? ","args last ","name to_sym  to_sym "]}," Celluloid FSM ClassMethods states":{"type":"method","name":"states","children":[],"call":[]}," Celluloid FSM ClassMethods default_state":{"type":"method","name":"default_state","children":[],"call":["new_default to_sym "]}," Celluloid FSM included":{"type":"method","name":"included","children":[],"call":[]}," Fiber alive?":{"type":"method","name":"alive?","children":[],"call":["JRuby  reference state != "," org jruby ext fiber ThreadFiberState "," org jruby ext fiber "," org jruby ext "," org jruby "," org ","JRuby  reference state ","JRuby  reference "]}," Celluloid CPUCounter cores":{"type":"method","name":"cores","children":[],"call":[" count_cores "]}," Thread receive":{"type":"method","name":"receive","children":[],"call":[]}," Celluloid SyncCall respond":{"type":"method","name":"respond","children":[],"call":["@caller << ","@sender << "]}," Celluloid SyncCall initialize":{"type":"method","name":"initialize","children":[],"call":["Celluloid  uuid "]}," Celluloid Call check_signature":{"type":"method","name":"check_signature","children":[],"call":[" raise "," arguments size "," arguments "," arguments size < ","arity -@ - ","arity -@ ","arity < "," arguments size != ","arity >= ","@arguments unshift ","obj method arity ","obj method ","obj inspect ","obj respond_to? ","obj to_s ","obj method arity  -@ - ","obj method arity  -@ ","obj method arity  < ","obj method arity  >= ","obj method obj method arity  "]}," Celluloid ActorProxy terminate!":{"type":"method","name":"terminate!","children":[],"call":["@mailbox system_event ","TerminationRequest  new "," raise "," alive? ","@mailbox << "," Kernel  raise "]}," Celluloid ActorProxy future":{"type":"method","name":"future","children":[],"call":["Actor  future ","FutureProxy  new ","@future_proxy method_missing "," __call ","Celluloid Future  new ","Actor  call ","Future  new "]}," Celluloid ActorProxy kind_of?":{"type":"method","name":"kind_of?","children":[],"call":["Actor  call "," method_missing "]}," Celluloid ActorProxy is_a?":{"type":"method","name":"is_a?","children":[],"call":["Actor  call "," method_missing "]}," Celluloid ActorProxy class":{"type":"method","name":"class","children":[],"call":["Actor  call "," method_missing "]}," Celluloid ActorProxy _send_":{"type":"method","name":"_send_","children":[],"call":["Actor  call "," method_missing "]}," Celluloid Actor cleanup":{"type":"method","name":"cleanup","children":[],"call":["Logger  crash ","@subject class ","task terminate "," tasks each "," tasks ","@links send_event ","@mailbox shutdown ","actor mailbox << ","actor mailbox ","@links each "," tasks to_a each "," tasks to_a ","actor mailbox alive? ","Celluloid Probe  actor_died ","Internals Logger  crash "," log_error ","@subject finalize ","@subject respond_to? ","Celluloid Logger  crash "]}," Celluloid Actor run_finalizer":{"type":"method","name":"run_finalizer","children":[],"call":["Logger  crash ","@subject class ","@subject finalize ","@subject respond_to? ","(send\n  (const nil :Task) :new\n  (sym :finalizer)) resume ","Task  new "," task ","@subject __send__ ","@subject class finalizer ","Logger  warn ","(str \"DEPRECATION WARNING: \") + ","@subject class finalizer != ","(send\n  (const nil :Task) :new\n  (sym :@subject class finalizer )) resume ","@subject class @subject class finalizer  ","@subject class @subject class finalizer  != "]}," Celluloid Actor shutdown":{"type":"method","name":"shutdown","children":[],"call":["Thread  current []= ","Thread  current "," cleanup "," run_finalizer ","@behavior shutdown "]}," Celluloid Actor handle_crash":{"type":"method","name":"handle_crash","children":[],"call":["Logger  crash ","@subject class "," shutdown ","ExitEvent  new "," behavior_proxy ","Internals Logger  crash "," log_error "," cleanup ","Celluloid Logger  crash "]}," Celluloid Actor handle_exit_event":{"type":"method","name":"handle_exit_event","children":[],"call":[" raise ","exit_event reason ","@subject send ","exit_event actor ","@subject class exit_handler ","@subject class ","event reason ","event actor ","@links delete ","@exit_handler call ","klass exit_handler ","klass respond_to? ","@subject class @subject class exit_handler  ","@subject class klass exit_handler  ","@@subject class exit_handler  call ","@klass exit_handler  call ","klass @subject class exit_handler  ","klass klass exit_handler  ","@subject class  exit_handler ","@subject class  respond_to? "]}," Celluloid Actor handle_message":{"type":"method","name":"handle_message","children":[],"call":["@receivers handle_message ","message call task resume ","message call task ","message call ","(send\n  (const nil :Task) :new\n  (sym :message_handler)) resume ","message dispatch ","Task  new "," exclusive ","@exclusives include? ","message method "," task "," handle_system_event ","message execute_block_on_receiver ","@receiver_block_executions include? ","meth to_sym ","message arguments first ","message arguments ","meth == ","Logger  debug ","@handlers handle_message ","Internals Logger  debug ","@receivers handle_message ! ","@handlers handle_message ! ","Celluloid  logger debug ","Celluloid  logger ","message call_id "," run_fiber ","@pending_calls delete ","Celluloid  fiber ","fiber resume ","(send\n  (const\n    (const nil :Celluloid) :Fiber) :new) resume ","Celluloid Fiber  new ","Celluloid Logger  debug "," signal ","message value ","message message arguments first od ","message message method od ","message arguments first  to_sym ","message method  to_sym ","message arguments first  == ","message method  == "," run_@pending_calls delete  ","Celluloid  @pending_calls delete  ","@pending_calls delete  resume "]}," Celluloid Actor sleep":{"type":"method","name":"sleep","children":[],"call":["Task  suspend ","task resume ","@timers add ","Task  current ","Kernel  sleep ","Celluloid  exclusive? ","@timers after ","Thread  current [] ","Thread  current ","Celluloid  exclusive? ! ","Celluloid  suspend ","Sleeper  new ","Task  current  resume ","Thread  current []  resume "]}," Celluloid Actor every":{"type":"method","name":"every","children":[],"call":["(send\n  (const nil :Task) :new\n  (sym :timer)) resume ","Task  new ","@timers add ","@timers every "," task "]}," Celluloid Actor after":{"type":"method","name":"after","children":[],"call":["(send\n  (const nil :Task) :new\n  (sym :timer)) resume ","Task  new ","@timers add ","@timers after "," task "]}," Celluloid Actor timeout":{"type":"method","name":"timeout","children":[],"call":["i1 < ","@receivers wait_interval ","@timers wait_interval ","timer cancel ","task resume ","exception set_backtrace ","Task TimeoutError  new ","@timers after ","Task  current "," caller ","TaskTimeout  new ","@timers wait_interval  < ","Task  current  resume ","Task TimeoutError  new  set_backtrace ","TaskTimeout  new  set_backtrace "]}," Celluloid Actor run":{"type":"method","name":"run","children":[],"call":[" handle_crash "," shutdown ","@receivers fire_timers ","@timers fire "," handle_message ","(send\n  (const nil :Task) :new\n  (sym :exit_handler)) resume "," handle_exit_event ","Task  new ","@mailbox receive "," timeout "," raise ","ex is_a? ","ex name "," handle_system_event "," timeout_interval ","@mailbox check ","interval < ","@timers wait ","Pool  put "," cleanup ","ExitEvent  new "," process_messages "," run_fiber ","Celluloid  fiber ","(send\n  (const\n    (const nil :Celluloid) :Fiber) :new) resume ","Celluloid Fiber  new ","ThreadPool  put "," handle_@mailbox receive  "," handle_@mailbox check  "," process_@mailbox receive s "," process_@mailbox check s "]}," Celluloid Actor receive":{"type":"method","name":"receive","children":[],"call":["@receivers receive "," handle_system_event ","message is_a? "," loop ","@receivers receive  is_a? "]}," Celluloid Actor wait":{"type":"method","name":"wait","children":[],"call":["@signals wait "]}," Celluloid Actor signal":{"type":"method","name":"signal","children":[],"call":["@signals send ","@signals broadcast "]}," Celluloid Actor terminate":{"type":"method","name":"terminate","children":[],"call":[]}," Celluloid Actor exclusive":{"type":"method","name":"exclusive","children":[],"call":[]}," Celluloid Actor exclusive?":{"type":"method","name":"exclusive?","children":[],"call":[]}," Celluloid Actor initialize":{"type":"method","name":"initialize","children":[],"call":[" run ","Thread  current []= ","Thread  current ","ThreadPool  get ","Timers  new ","Receivers  new ","Signals  new ","Links  new ","Set  new ","ActorProxy  new ","subject class to_s ","subject class ","subject class mailbox_factory ","ThreadHandle  new ","subject class exclusive_methods ","subject class exit_handler ","Celluloid  task_class ","options [] ","Mailbox  new ","@subject instance_variable_set ","@proxy_class new ","(or\n  (send\n    (lvar :options) :[]\n    (sym :proxy_class))\n  (const nil :ActorProxy)) new ","TaskSet  new "," setup_thread ","@mailbox max_size= ","options fetch ","options fetch new "," handle_system_event "," handle ","Handlers  new ","Timers Group  new "," method ","Internals Signals  new ","Internals Receivers  new ","Internals Handlers  new ","Internals Links  new ","Internals TaskSet  new ","@thread [] << "," initialize_thread_locals "," proc ","@thread [] ","Pool  get "," initialize_mailbox ","Celluloid Mailbox  new ","subject mailbox_factory ","subject respond_to? "," class to_s "," class ","ActorProxy  new _class new ","@proxy_class new _class new ","(or\n  (send\n    (lvar :options) :[]\n    (sym :proxy_class))\n  (const nil :ActorProxy)) new _class new ","subject class mailbox_factory  max_size= ","options fetch new  max_size= "," initialize_mailbox  max_size= ","Celluloid Mailbox  new  max_size= ","subject mailbox_factory  max_size= ","Mailbox  new  max_size= ","Pool  get  [] << ","Pool  get  [] "]}," Celluloid Actor all":{"type":"method","name":"all","children":[],"call":["actors << ","actor proxy ","t [] ","Thread  list each ","Thread  list ","actor respond_to? ","t actor proxy ","t actor ","t actor respond_to? ","t task ","t celluloid? ","t role == ","t role ","Celluloid  internal_pool each ","Celluloid  internal_pool ","Celluloid  actor_system running ","Celluloid  actor_system ","t [] s << ","t []  proxy ","t []  respond_to? ","t t []  proxy ","t t []  ","t t []  respond_to? ","Celluloid  t [] _system running ","Celluloid  t [] _system "]}," Celluloid Actor future":{"type":"method","name":"future","children":[],"call":["future execute ","Future  new ","proxy method_missing ","FutureProxy  new ","Proxy Future  new ","Future  new  execute ","FutureProxy  new  method_missing ","Proxy Future  new  method_missing "]}," Celluloid Actor async":{"type":"method","name":"async","children":[],"call":["mailbox << ","AsyncCall  new ","Thread  mailbox ","proxy method_missing ","AsyncProxy  new ","Proxy Async  new ","AsyncProxy  new  method_missing ","Proxy Async  new  method_missing "]}," Celluloid Actor call":{"type":"method","name":"call","children":[],"call":["response value ","msg call == ","msg call ","msg respond_to? ","Thread  mailbox receive ","Thread  mailbox ","Task  suspend value ","Task  suspend ","Celluloid  exclusive? ! ","Celluloid  exclusive? ","Celluloid  actor? "," raise ","mailbox << ","SyncCall  new ","Thread  current [] handle_system_event ","Thread  current [] ","Thread  current ","message is_a? "," loop ","Celluloid  suspend value ","Celluloid  suspend ","proxy method_missing ","SyncProxy  new ","Proxy Sync  new ","msg SyncCall  new  == ","msg SyncCall  new  ","SyncProxy  new  method_missing ","Proxy Sync  new  method_missing "]}," Celluloid Actor current":{"type":"method","name":"current","children":[],"call":["actor proxy "," raise ","Thread  current [] ","Thread  current ","actor behavior_proxy "," fail ","Thread  current []  proxy ","Thread  current []  behavior_proxy "]}," Celluloid future":{"type":"method","name":"future","children":[],"call":["Actor  future ","Thread  current [] mailbox ","Thread  current [] ","Thread  current ","Thread  current [] proxy future ","Thread  current [] proxy ","Thread  current [] behavior_proxy future ","Thread  current [] behavior_proxy "]}," Celluloid async":{"type":"method","name":"async","children":[],"call":["Actor  async ","Thread  current [] mailbox ","Thread  current [] ","Thread  current ","Thread  current [] proxy async ","Thread  current [] proxy ","Thread  current [] behavior_proxy async ","Thread  current [] behavior_proxy ","Celluloid Future  new value ","Celluloid Future  new ","Future  new value ","Future  new "," raise "]}," Celluloid name":{"type":"method","name":"name","children":[],"call":["Actor  name "]}," Celluloid ClassMethods run":{"type":"method","name":"run","children":[],"call":[" new join "," new ","Actor  join "]}," Celluloid ClassMethods pool_link":{"type":"method","name":"pool_link","children":[],"call":["PoolManager  new_link ","Supervision Container Pool  new_link "," pooling_options "]}," Celluloid ClassMethods pool":{"type":"method","name":"pool","children":[],"call":["PoolManager  new ","_ actors last ","_ actors ","Celluloid  supervise "," pooling_options ","Celluloid  supervise  actors last ","Celluloid  supervise  actors "," poolingCelluloid  supervise options "]}," Celluloid ThreadHandle join":{"type":"method","name":"join","children":[],"call":["@join wait ","@mutex synchronize "," raise ","@thread == ","Thread  current "]}," Celluloid ThreadHandle kill":{"type":"method","name":"kill","children":[],"call":["(send\n  (ivar :@mutex) :synchronize) ! ! ","(send\n  (ivar :@mutex) :synchronize) ! ","@thread kill ","@mutex synchronize "]}," Celluloid ThreadHandle alive?":{"type":"method","name":"alive?","children":[],"call":["@thread alive? ","@mutex synchronize "]}," Celluloid ThreadHandle initialize":{"type":"method","name":"initialize","children":[],"call":["@join broadcast ","@mutex synchronize ","InternalPool  get ","ConditionVariable  new ","Mutex  new ","Celluloid  internal_pool get ","Celluloid  internal_pool ","Thread  current role= ","Thread  current ","actor_system get_thread ","ConditionVariable  new  broadcast ","Mutex  new  synchronize "]}," Celluloid Supervisor finalize":{"type":"method","name":"finalize","children":[],"call":["@actor terminate ","@actor alive? "]}," Celluloid SupervisionGroup Member start":{"type":"method","name":"start","children":[],"call":["Actor  []= ","@klass send ","@registry []= ","hash []= ","(pair\n  (sym :args)\n  (ivar :@args)) tap ","options []= "]}," Celluloid SupervisionGroup Member initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "," Array ","h []= ","k to_s ","options inject "," start ","@method == "]}," Celluloid SupervisionGroup restart_actor":{"type":"method","name":"restart_actor","children":[],"call":["@actors []= ","member start "," raise ","@actors delete ","member restart ","member actor == ","member actor ","@members find ","_member actor == ","_member actor ","@members delete ","member cleanup ","@member start s []= ","@actors delete  start ","@member start s delete ","@actors delete  restart ","member member start  == ","@actors delete  actor == ","member member start  ","@actors delete  actor ","@@actors delete s find ","_member member start  == ","_@actors delete  actor == ","_member member start  ","_@actors delete  actor ","@@actors delete s delete ","@actors delete  cleanup "]}," Celluloid SupervisionGroup finalize":{"type":"method","name":"finalize","children":[],"call":["actor terminate ","@actors each ","@members each ","@members reverse_each "]}," Celluloid SupervisionGroup initialize":{"type":"method","name":"initialize","children":[],"call":["@actors []= ","member start "," class members each "," class members "," class "," block_given? ","Registry  root "," current_actor ","Celluloid  actor_system registry ","Celluloid  actor_system ","@member start s []= "," current_member start  ","Celluloid  member start _system registry ","Celluloid  member start _system "]}," Celluloid SupervisionGroup pool":{"type":"method","name":"pool","children":[],"call":[" members << ","Member  new "," members "," add "," blocks << ","group pool "," lambda "," blocks ","options []= "]}," Celluloid SupervisionGroup supervise":{"type":"method","name":"supervise","children":[],"call":[" members << ","Member  new "," members "," add "," blocks << ","group add "," lambda "," blocks "]}," Celluloid SupervisionGroup run":{"type":"method","name":"run","children":[],"call":["Logger  error "," sleep ","supervisor alive? "," run! "," loop "," run!  alive? "]}," Celluloid SupervisionGroup members":{"type":"method","name":"members","children":[],"call":[]}," Celluloid PoolManager method_missing":{"type":"method","name":"method_missing","children":[],"call":[" execute "," respond_to? "," _send_ "]}," Celluloid PoolManager respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["@worker_class instance_methods include? ","method to_sym ","@worker_class instance_methods "]}," Celluloid PoolManager crash_handler":{"type":"method","name":"crash_handler","children":[],"call":["@idle << ","@worker_class new_link ","@idle delete "," signal ","@busy delete "]}," Celluloid PoolManager provision_worker":{"type":"method","name":"provision_worker","children":[],"call":["@idle shift ","Thread  current [] handle_message ","Thread  current [] ","Thread  current ","msg is_a? "," receive "," exclusive ","@idle empty? "]}," Celluloid PoolManager execute":{"type":"method","name":"execute","children":[],"call":["@idle << ","worker alive? "," abort ","worker _send_ "," provision_worker "," provision_worker  alive? "," provision_worker  _send_ "," provision_ provision_worker  "]}," Celluloid PoolManager initialize":{"type":"method","name":"initialize","children":[],"call":["worker_class new_link ","@size times map ","@size times "," Array ","options [] ","(send\n  (const nil :Celluloid) :cores) max ","Celluloid  cores "," raise ","@size < ","(or\n  (send\n    (const nil :Celluloid) :cores)\n  (int 2)) max ","options []  times map ","options []  times ","options []  < "]}," Celluloid InternalPool create":{"type":"method","name":"create","children":[],"call":["thread []= "," put ","Logger  crash ","proc call ","queue pop ","Thread  new ","Queue  new ","@group add ","@threads << ","@all_threads << ","queue pop  call ","Queue  new  pop "]}," Celluloid InternalPool put":{"type":"method","name":"put","children":[],"call":["@pool << ","thread [] << ","thread [] ","@pool size >= ","@pool size ","@mutex synchronize "," clean_thread_locals ","thread recycle ","@threads delete "," idle_size >= "," idle_size ","thread busy= ","@idle_threads length ","@idle_threads push ","@all_threads delete "," idle_size + >= "," idle_size + "]}," Celluloid InternalPool get":{"type":"method","name":"get","children":[],"call":["thread [] << ","thread [] ","@pool shift "," create ","@pool empty? ","thread status ","@mutex synchronize ","thread busy= ","idle first ","idle empty? ","@threads reject "," assert_running ","@idle_threads length ","@idle_threads pop ","@idle_threads empty? ","@pool shift  [] << "," create  [] << ","idle first  [] << ","@idle_threads pop  [] << ","@pool shift  [] "," create  [] ","idle first  [] ","@idle_threads pop  [] ","@pool shift  status "," create  status ","idle first  status ","@idle_threads pop  status ","@pool shift  busy= "," create  busy= ","idle first  busy= ","@idle_threads pop  busy= ","@threads reject  first ","@threads reject  empty? ","@@pool shift s reject ","@ create s reject ","@idle first s reject ","@@idle_threads pop s reject ","@idle_@pool shift s length ","@idle_ create s length ","@idle_idle first s length ","@idle_@idle_threads pop s length ","@@threads reject _threads length ","@idle_@pool shift s pop ","@idle_ create s pop ","@idle_idle first s pop ","@idle_@idle_threads pop s pop ","@@threads reject _threads pop ","@idle_@pool shift s empty? ","@idle_ create s empty? ","@idle_idle first s empty? ","@idle_@idle_threads pop s empty? ","@@threads reject _threads empty? "]}," Celluloid NamingRequest initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid ActorProxy join":{"type":"method","name":"join","children":[],"call":["@thread join "]}," Celluloid ActorProxy kill":{"type":"method","name":"kill","children":[],"call":["@mailbox shutdown ","@thread kill "]}," Celluloid ActorProxy async":{"type":"method","name":"async","children":[],"call":["Actor  async ","AsyncProxy  new ","@async_proxy method_missing "]}," Celluloid ActorProxy name":{"type":"method","name":"name","children":[],"call":["Actor  call "," method_missing "]}," Celluloid Actor name":{"type":"method","name":"name","children":[],"call":["actor name "," raise ","Thread  current [] ","Thread  current ","Thread  current []  name "]}," Celluloid ClassMethods exclusive":{"type":"method","name":"exclusive","children":[],"call":["@exclusive_methods merge ","methods map ","Set  new ","@exclusive_methods != ","methods empty? ","(ivar :@exclusive_methods) ! "]}," Celluloid SupervisionGroup Member terminate":{"type":"method","name":"terminate","children":[],"call":["@actor terminate ","@registry delete "," cleanup "]}," Celluloid SupervisionGroup Member restart":{"type":"method","name":"restart","children":[],"call":[" start ","@registry delete "," cleanup "]}," Celluloid SupervisionGroup actors":{"type":"method","name":"actors","children":[],"call":["@members map "]}," Celluloid SupervisionGroup add":{"type":"method","name":"add","children":[],"call":["@members << ","Member  new ","member actor ","@Member  new s << ","Member  new  actor "]}," Celluloid SupervisionGroup supervise_as":{"type":"method","name":"supervise_as","children":[],"call":[" add "]}," Celluloid SupervisionGroup run!":{"type":"method","name":"run!","children":[],"call":["block call "," blocks each "," blocks "," new "]}," Celluloid SupervisionGroup blocks":{"type":"method","name":"blocks","children":[],"call":[]}," Celluloid Response dispatch":{"type":"method","name":"dispatch","children":[],"call":["@call task resume ","@call task "]}," Celluloid Registry clear":{"type":"method","name":"clear","children":[],"call":["@registry clear ","@registry dup ","@registry_lock synchronize "]}," Celluloid Registry names":{"type":"method","name":"names","children":[],"call":["@registry keys ","@registry_lock synchronize "]}," Celluloid Registry delete":{"type":"method","name":"delete","children":[],"call":["@registry [] ","name to_sym ","@registry_lock synchronize ","@registry delete "]}," Celluloid Registry initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "]}," Celluloid Registry root":{"type":"method","name":"root","children":[],"call":[]}," Celluloid PoolManager __provision_worker":{"type":"method","name":"__provision_worker","children":[],"call":["@idle shift ","Thread  current [] handle_message ","Thread  current [] ","Thread  current ","msg is_a? "," receive "," exclusive ","@idle empty? ","@busy << "]}," Celluloid PoolManager inspect":{"type":"method","name":"inspect","children":[],"call":[" _send_ "]}," Celluloid PoolManager to_s":{"type":"method","name":"to_s","children":[],"call":[" _send_ "]}," Celluloid PoolManager methods":{"type":"method","name":"methods","children":[],"call":[" _send_ "]}," Celluloid PoolManager kind_of?":{"type":"method","name":"kind_of?","children":[],"call":[" _send_ "]}," Celluloid PoolManager is_a?":{"type":"method","name":"is_a?","children":[],"call":[" _send_ "]}," Celluloid PoolManager name":{"type":"method","name":"name","children":[],"call":[" _send_ "]}," Celluloid PoolManager _send_":{"type":"method","name":"_send_","children":[],"call":["@idle << ","worker alive? "," abort ","worker _send_ "," __provision_worker ","@busy delete "," wait "," __provision_worker__ "," __provision_worker  alive? "," __provision_worker__  alive? "," __provision_worker  _send_ "," __provision_worker__  _send_ "," __provision_ __provision_worker  "," __provision_ __provision_worker__  "," __provision_ __provision_worker __ "," __provision_ __provision_worker__ __ "]}," Celluloid Notifications unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":["Celluloid Notifications  notifier unsubscribe ","Celluloid Notifications  notifier "]}," Celluloid Notifications subscribe":{"type":"method","name":"subscribe","children":[],"call":["Celluloid Notifications  notifier subscribe ","Actor  current ","Celluloid Notifications  notifier "]}," Celluloid Notifications publish":{"type":"method","name":"publish","children":[],"call":["Celluloid Notifications  notifier publish ","Celluloid Notifications  notifier "]}," Celluloid Notifications Subscriber matches?":{"type":"method","name":"matches?","children":[],"call":["@pattern === "," === "]}," Celluloid Notifications Subscriber subscribed_to?":{"type":"method","name":"subscribed_to?","children":[],"call":["@pattern === ","pattern to_s ","pattern ! "]}," Celluloid Notifications Subscriber publish":{"type":"method","name":"publish","children":[],"call":["Actor  async "," method "," actor mailbox "," actor "," actor async "]}," Celluloid Notifications Subscriber initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid Notifications Fanout prune":{"type":"method","name":"prune","children":[],"call":["@listeners_for clear ","s actor == ","s actor ","@subscribers reject! "]}," Celluloid Notifications Fanout listening?":{"type":"method","name":"listening?","children":[],"call":[" listeners_for any? "," listeners_for "]}," Celluloid Notifications Fanout listeners_for":{"type":"method","name":"listeners_for","children":[],"call":["s subscribed_to? ","@subscribers select ","@listeners_for [] "]}," Celluloid Notifications Fanout publish":{"type":"method","name":"publish","children":[],"call":["s publish "," listeners_for each "," listeners_for "]}," Celluloid Notifications Fanout unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":["@listeners_for clear ","s matches? ","@subscribers reject! "]}," Celluloid Notifications Fanout subscribe":{"type":"method","name":"subscribe","children":[],"call":["@listeners_for clear "," link ","@subscribers << ","Subscriber  new tap ","Subscriber  new "]}," Celluloid Notifications Fanout initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid Actor handle_system_event":{"type":"method","name":"handle_system_event","children":[],"call":["event name ","(send\n  (const nil :Task) :new\n  (sym :exit_handler)) resume "," handle_exit_event ","Task  new ","event process "," links "," task ","event call "," terminate ","Logger  debug "," message ","event instance_of? ","Celluloid Probe  actor_named ","Internals Logger  debug "," send ","SystemEvent  handle ","event class ","(send\n  (const nil :Task) :new\n  (sym :exit_SystemEvent  handle )) resume "]}," Celluloid Actor clear_registry":{"type":"method","name":"clear_registry","children":[],"call":["Registry  root clear ","Registry  root "]}," Celluloid Actor registered":{"type":"method","name":"registered","children":[],"call":["Registry  root names ","Registry  root "]}," Celluloid monitoring?":{"type":"method","name":"monitoring?","children":[],"call":["Actor  monitoring? "]}," Celluloid unmonitor":{"type":"method","name":"unmonitor","children":[],"call":["Actor  unmonitor "]}," Celluloid monitor":{"type":"method","name":"monitor","children":[],"call":["Actor  monitor "]}," Celluloid InstanceMethods method_missing":{"type":"method","name":"method_missing","children":[],"call":["Thread  current [] mailbox << ","Thread  current [] mailbox ","Thread  current [] ","Thread  current ","AsyncCall  new ","args unshift ","meth to_s sub ","meth to_s ","meth to_s match ","Logger  deprecate ","'bang method'-style async syntax is deprecated and will be removed in Celluloid 1.0. + "," async "]}," Celluloid InstanceMethods inspect":{"type":"method","name":"inspect","children":[],"call":["str << ","str << << ","ivars join ","ivars empty? "," instance_variable_get inspect "," instance_variable_get "," instance_variables map "," instance_variables "," object_id to_s "," object_id "," class ","str sub! ","ivar == "," instance_variables each "," instance_variables empty? "," leaked? ","Celluloid  detect_recursion "]}," Celluloid InstanceMethods wrapped_object":{"type":"method","name":"wrapped_object","children":[],"call":[]}," Celluloid ClassMethods actor_options":{"type":"method","name":"actor_options","children":[],"call":[" task_class "," mailbox_factory "," exit_handler "," proxy_factory "," proxy_class "," mailbox_class new "," mailbox_class "," receiver_block_executions "," mailbox build "," mailbox "," execute_block_on_receiver "," mailbox_size "," exclusive_actor "," actor_system "]}," Celluloid ClassMethods task_class":{"type":"method","name":"task_class","children":[],"call":["Celluloid  task_class "," superclass task_class "," superclass "," superclass respond_to? "]}," Celluloid ClassMethods mailbox_class":{"type":"method","name":"mailbox_class","children":[],"call":["klass new "," proc "," superclass mailbox_class "," superclass "," superclass respond_to? "," mailbox class "," mailbox "," mailbox class= "]}," Celluloid TaskThread inspect":{"type":"method","name":"inspect","children":[],"call":["@status inspect ","@type inspect "," object_id to_s "," object_id "]}," Celluloid TaskThread running?":{"type":"method","name":"running?","children":[],"call":["@status != "]}," Celluloid TaskThread terminate":{"type":"method","name":"terminate","children":[],"call":[" resume ","Task TerminatedError  new ","@thread alive? "]}," Celluloid TaskThread resume":{"type":"method","name":"resume","children":[],"call":[" raise ","@yield_cond wait ","@resume_queue push ","@yield_mutex synchronize ","@thread alive? ","@yield pop ","@resume push ","@exception_queue pop ","@exception_queue size > ","@exception_queue size "]}," Celluloid TaskThread suspend":{"type":"method","name":"suspend","children":[],"call":[" raise ","value is_a? ","@resume_queue pop ","@yield_cond signal ","result is_a? ","@resume pop ","@yield push ","@resume_queue pop  is_a? ","@resume pop  is_a? "]}," Celluloid TaskThread initialize":{"type":"method","name":"initialize","children":[],"call":["@yield_cond signal ","actor tasks delete ","actor tasks ","actor tasks << ","Thread  current []= ","Thread  current ","@resume_queue pop is_a? ","@resume_queue pop ","InternalPool  get "," raise ","Thread  current [] ","ConditionVariable  new ","Mutex  new ","Queue  new ","@waiter run ","@yield push ","@resume pop ","value is_a? ","@exception_queue << ","ex is_a? ","Celluloid  internal_pool get ","Celluloid  internal_pool ","ConditionVariable  new  signal ","Queue  new _cond signal ","Thread  current []  tasks delete ","Thread  current []  tasks ","Thread  current []  tasks << ","Queue  new  pop is_a? ","Queue  new _queue pop is_a? ","Queue  new  pop ","Queue  new _queue pop ","Mut@resume_queue pop   new ","Mut@resume_queue pop is_a?   new ","Queue  new  push ","@resume_queue pop  is_a? ","@@resume_queue pop ception_queue << ","@@resume_queue pop is_a? ception_queue << ","Queue  new  << ","@resume_queue pop is_a?  is_a? "]}," Celluloid TaskFiber inspect":{"type":"method","name":"inspect","children":[],"call":["@status inspect ","@type inspect "," object_id to_s "," object_id "]}," Celluloid TaskFiber running?":{"type":"method","name":"running?","children":[],"call":["@fiber alive? "]}," Celluloid TaskFiber terminate":{"type":"method","name":"terminate","children":[],"call":[" resume ","Task TerminatedError  new ","@fiber alive? "]}," Celluloid TaskFiber resume":{"type":"method","name":"resume","children":[],"call":[" raise ","@fiber resume "]}," Celluloid TaskFiber suspend":{"type":"method","name":"suspend","children":[],"call":[" raise ","result is_a? ","Fiber  yield ","Fiber  yield  is_a? "]}," Celluloid TaskFiber initialize":{"type":"method","name":"initialize","children":[],"call":["actor tasks delete ","actor tasks ","actor tasks << ","Thread  current []= ","Thread  current ","Fiber  new "," raise ","Thread  current [] ","Thread  current []  tasks delete ","Thread  current []  tasks ","Thread  current []  tasks << "]}," Celluloid LinkingResponse initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","(sym :link) include? ","type to_sym "]}," Celluloid LinkingRequest process":{"type":"method","name":"process","children":[],"call":[" actor mailbox << ","LinkingResponse  new "," type ","Actor  current "," actor mailbox "," actor ","links delete ","links << "]}," Celluloid LinkingRequest initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","(sym :link) include? ","type to_sym "]}," Celluloid FutureProxy method_missing":{"type":"method","name":"method_missing","children":[],"call":["Actor  future ","future execute ","Future  new "," raise "," block_given? ","@mailbox << ","SyncCall  new ","@mailbox alive? ","Actor  Future  new  ","Future  new  execute "]}," Celluloid FutureProxy inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Celluloid FutureProxy initialize":{"type":"method","name":"initialize","children":[],"call":["actor subject class to_s ","actor subject class ","actor subject ","actor mailbox "]}," Celluloid AsyncProxy method_missing":{"type":"method","name":"method_missing","children":[],"call":["Actor  async ","@mailbox == "," Thread  current [] "," Thread  current ","@mailbox << ","AsyncCall  new "," raise "," block_given? ","args unshift "]}," Celluloid AsyncProxy inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Celluloid AsyncProxy initialize":{"type":"method","name":"initialize","children":[],"call":["actor subject class to_s ","actor subject class ","actor subject ","actor mailbox "]}," Celluloid ActorProxy method":{"type":"method","name":"method","children":[],"call":["Method  new "]}," Celluloid PoolManager finalize":{"type":"method","name":"finalize","children":[],"call":["terminator value ","terminators compact each ","terminators compact ","actor future ","(send\n  (ivar :@idle) :+\n  (ivar :@busy)) each ","@idle + "]}," Celluloid Notifications notifier":{"type":"method","name":"notifier","children":[],"call":[]}," Celluloid Method inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Celluloid Method call":{"type":"method","name":"call","children":[],"call":["@actor _send_ ","@proxy __send__ "]}," Celluloid Method initialize":{"type":"method","name":"initialize","children":[],"call":["@actor class "," raise ","actor respond_to? ","@proxy class ","proxy respond_to? "]}," Celluloid Future ready?":{"type":"method","name":"ready?","children":[],"call":[]}," Celluloid Actor task":{"type":"method","name":"task","children":[],"call":["@task_class new resume ","@task_class new ","block call "," exclusive ","@exclusives include? ","@exclusives == ","method_name to_sym ","(send\n  (ivar :@task_class) :new\n  (lvar :task_type)\n  (lvar :meta)) resume ","Celluloid  exclusive ","meta fetch "]}," Celluloid Actor timeout_interval":{"type":"method","name":"timeout_interval","children":[],"call":["i1 < ","@receivers wait_interval ","@timers wait_interval ","@timers wait_interval  < "]}," Celluloid Actor linking_request":{"type":"method","name":"linking_request","children":[],"call":[" raise ","system_events << "," handle_system_event ","system_events each ","msg type == ","msg type ","msg actor == ","msg actor ","msg is_a? ","@mailbox receive ","start_time + - ","Time  now ","start_time + "," loop ","receiver mailbox << ","LinkingRequest  new ","Actor  current ","receiver mailbox "," exclusive ","msg actor mailbox address == ","receiver mailbox address ","msg actor mailbox address ","msg actor mailbox ","Celluloid  exclusive ","message class ","message is_a? ","@mailbox << ","Celluloid Probe  actors_linked ","message instance_of? ","Timers Wait  for ","linking_timeout while_time_remaining ","Timers Timeout  new "," fail ","Time  now  + - ","Time  now  + ","Timers Timeout  new  while_time_remaining "]}," Celluloid Actor join":{"type":"method","name":"join","children":[],"call":["actor thread join ","actor thread "]}," Celluloid Actor kill":{"type":"method","name":"kill","children":[],"call":["actor mailbox shutdown ","actor mailbox ","actor thread kill ","actor thread ","actor mailbox alive? "]}," Celluloid Actor linked_to?":{"type":"method","name":"linked_to?","children":[],"call":["Thread  current [] links include? ","Thread  current [] links ","Thread  current [] ","Thread  current "," monitoring? "]}," Celluloid Actor monitoring?":{"type":"method","name":"monitoring?","children":[],"call":["actor links include? ","Actor  current ","actor links "]}," Celluloid Actor unlink":{"type":"method","name":"unlink","children":[],"call":["Thread  current [] links delete ","Thread  current [] links ","Thread  current [] ","Thread  current "," unmonitor "]}," Celluloid Actor link":{"type":"method","name":"link","children":[],"call":["Thread  current [] links << ","Thread  current [] links ","Thread  current [] ","Thread  current "," monitor "]}," Celluloid Actor unmonitor":{"type":"method","name":"unmonitor","children":[],"call":["Thread  current [] linking_request ","Thread  current [] ","Thread  current "," raise ","Celluloid  actor? "," fail "]}," Celluloid Actor monitor":{"type":"method","name":"monitor","children":[],"call":["Thread  current [] linking_request ","Thread  current [] ","Thread  current "," raise ","Celluloid  actor? "," fail "]}," Celluloid InstanceMethods bare_object":{"type":"method","name":"bare_object","children":[],"call":[]}," Celluloid stack_dump":{"type":"method","name":"stack_dump","children":[],"call":["Celluloid StackDumper  dump ","Celluloid StackDump  new dump ","Celluloid StackDump  new "," actor_system stack_dump print "," actor_system stack_dump "," actor_system "]}," Celluloid StackDumper display_backtrace":{"type":"method","name":"display_backtrace","children":[],"call":[]}," Celluloid StackDumper dump":{"type":"method","name":"dump","children":[],"call":[]}," Celluloid PoolManager size":{"type":"method","name":"size","children":[],"call":[]}," Celluloid RingBuffer remove_element":{"type":"method","name":"remove_element","children":[],"call":["(send\n  (ivar :@start) :+\n  (int 1)) % ","@start + ","@buffer [] ","@buffer []= "," empty? ","(send\n  (ivar :(send\n  (ivar :@start) :+\n  (int 1)) % ) :+\n  (int 1)) % ","(send\n  (ivar :@start) :+\n  (int 1)) %  + "]}," Celluloid RingBuffer clear":{"type":"method","name":"clear","children":[],"call":["Array  new "]}," Celluloid RingBuffer flush":{"type":"method","name":"flush","children":[],"call":["values << "," remove_element "," empty? ! "," empty? ","@mutex synchronize "]}," Celluloid RingBuffer shift":{"type":"method","name":"shift","children":[],"call":[" remove_element ","@mutex synchronize "]}," Celluloid RingBuffer push":{"type":"method","name":"push","children":[],"call":["(send\n  (ivar :@start) :+\n  (int 1)) % ","@start + "," full? ","@buffer []= ","(send\n  (ivar :@start) :+\n  (ivar :@count)) % ","@mutex synchronize ","(send\n  (ivar :(send\n  (ivar :@start) :+\n  (int 1)) % ) :+\n  (int 1)) % ","(send\n  (ivar :@start) :+\n  (int 1)) %  + ","(send\n  (ivar :(send\n  (ivar :@start) :+\n  (int 1)) % ) :+\n  (ivar :@count)) % "]}," Celluloid RingBuffer empty?":{"type":"method","name":"empty?","children":[],"call":["@count == "]}," Celluloid RingBuffer full?":{"type":"method","name":"full?","children":[],"call":["@count == "]}," Celluloid RingBuffer initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new ","Array  new "]}," Celluloid LogEvent <=>":{"type":"method","name":"<=>","children":[],"call":["@id <=> ","other id "]}," Celluloid LogEvent initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? ","Celluloid UUID  generate ","Internals UUID  generate "]}," Celluloid IncidentReporter silenced?":{"type":"method","name":"silenced?","children":[],"call":[]}," Celluloid IncidentReporter unsilence":{"type":"method","name":"unsilence","children":[],"call":[]}," Celluloid IncidentReporter silence":{"type":"method","name":"silence","children":[],"call":[]}," Celluloid IncidentReporter report":{"type":"method","name":"report","children":[],"call":["@logger << ","@logger add ","event progname ","event severity ","incident events each ","incident events ","header << ","incident triggering_event time ","incident triggering_event "]}," Celluloid IncidentReporter initialize":{"type":"method","name":"initialize","children":[],"call":["@logger formatter= ","Formatter  new "," Logger  new "," subscribe "," Logger  new  formatter= "]}," Celluloid IncidentReporter Formatter call":{"type":"method","name":"call","children":[],"call":["msg message ","msg time "]}," Celluloid IncidentLogger incident_topic":{"type":"method","name":"incident_topic","children":[],"call":[]}," Celluloid IncidentLogger create_incident":{"type":"method","name":"create_incident","children":[],"call":["Incident  new "," flush "]}," Celluloid IncidentLogger clear":{"type":"method","name":"clear","children":[],"call":["buffer clear ","@buffers each ","@buffer_mutex synchronize "]}," Celluloid IncidentLogger flush":{"type":"method","name":"flush","children":[],"call":["messages sort ","buffer flush ","severities each ","@buffers each ","@buffer_mutex synchronize "]}," Celluloid IncidentLogger unknown":{"type":"method","name":"unknown","children":[],"call":[" add "]}," Celluloid IncidentLogger fatal":{"type":"method","name":"fatal","children":[],"call":[" add "]}," Celluloid IncidentLogger error":{"type":"method","name":"error","children":[],"call":[" add "]}," Celluloid IncidentLogger warn":{"type":"method","name":"warn","children":[],"call":[" add "]}," Celluloid IncidentLogger info":{"type":"method","name":"info","children":[],"call":[" add "]}," Celluloid IncidentLogger debug":{"type":"method","name":"debug","children":[],"call":[" add "]}," Celluloid IncidentLogger trace":{"type":"method","name":"trace","children":[],"call":[" add "]}," Celluloid IncidentLogger add":{"type":"method","name":"add","children":[],"call":["event id ","@fallback_logger error ","Celluloid Notifications  notifier async publish "," create_incident "," incident_topic ","Celluloid Notifications  notifier async ","Celluloid Notifications  notifier ","severity >= ","@buffers [] [] << ","@buffers [] [] ","@buffers [] ","LogEvent  new "," block_given? ! "," block_given? ","message nil? "," event id "," event ","severity < ","LogEvent  new  id "," LogEvent  new  id "," LogEvent  new  "]}," Celluloid IncidentLogger initialize":{"type":"method","name":"initialize","children":[],"call":["@fallback_logger progname= "," Logger  new ","progname_hash []= ","severity_hash []= ","RingBuffer  new ","Hash  new ","@buffer_mutex synchronize ","Mutex  new ","options [] "," Logger  new  progname= ","Mutex  new  synchronize "]}," Celluloid IncidentLogger Severity severity_to_string":{"type":"method","name":"severity_to_string","children":[],"call":[]}," Celluloid Incident merge":{"type":"method","name":"merge","children":[],"call":["Incident  new "," triggering_event ","merged_events sort ","incident events ","other_incidents flatten inject "," events ","other_incidents flatten "]}," Celluloid Incident initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid FSM handle_delayed_transitions":{"type":"method","name":"handle_delayed_transitions","children":[],"call":["@delayed_transition cancel "," transition_with_callbacks! ","@actor after "," raise "]}," Celluloid FSM current_state_name":{"type":"method","name":"current_state_name","children":[],"call":[" current_state name "," current_state "]}," Celluloid FSM current_state":{"type":"method","name":"current_state","children":[],"call":[" states [] "," states "," class default_state "," class "]}," Celluloid FSM default_state":{"type":"method","name":"default_state","children":[],"call":[" class default_state "," class "]}," Celluloid FSM states":{"type":"method","name":"states","children":[],"call":[" class states "," class "]}," Celluloid FSM transition_with_callbacks!":{"type":"method","name":"transition_with_callbacks!","children":[],"call":["state_name call "," transition! ","state_name name "]}," Celluloid FSM validate_and_sanitize_new_state":{"type":"method","name":"validate_and_sanitize_new_state","children":[],"call":[" raise "," class ","state_name == "," default_state "," states [] "," states "," current_state transitions map join "," current_state transitions map "," current_state transitions "," current_state "," current_state valid_transition? ! "," current_state valid_transition? "," current_state_name == "," current_state_name ","state_name to_sym ","state_name to_sym  == "," current_state  current_state transitions map join _transition? ! "," current_state  current_state transitions map join _transition? "," current_state_name to_sym  == "," current_state_name to_sym  ","state_name to_sym  to_sym "]}," Celluloid ClassMethods exit_handler":{"type":"method","name":"exit_handler","children":[],"call":[" superclass exit_handler "," superclass "," superclass respond_to? ","callback to_sym "]}," Celluloid InstanceMethods leaked?":{"type":"method","name":"leaked?","children":[],"call":["@celluloid_owner != ","Thread  current [] ","Thread  current "]}," Celluloid ClassMethods proxy_factory":{"type":"method","name":"proxy_factory","children":[],"call":[" superclass proxy_factory "," superclass "," superclass respond_to? ","@proxy_factory call "]}," Celluloid ClassMethods proxy_class":{"type":"method","name":"proxy_class","children":[],"call":[" proc "," superclass proxy_class "," superclass "," superclass respond_to? "]}," Celluloid PoolManager idle_size":{"type":"method","name":"idle_size","children":[],"call":["@idle length "]}," Celluloid PoolManager busy_size":{"type":"method","name":"busy_size","children":[],"call":["@busy length "]}," Celluloid call_chain_id":{"type":"method","name":"call_chain_id","children":[],"call":["Thread  current [] ","Thread  current ","CallChain  current_id ","Internals CallChain  current_id "]}," Celluloid ClassMethods execute_block_on_receiver":{"type":"method","name":"execute_block_on_receiver","children":[],"call":[" receiver_block_executions merge ","methods map "," receiver_block_executions "]}," Celluloid ClassMethods finalizer":{"type":"method","name":"finalizer","children":[],"call":[" superclass finalizer "," superclass "," superclass respond_to? ","callback to_sym "]}," Celluloid boot":{"type":"method","name":"boot","children":[],"call":["Celluloid IncidentReporter  supervise_as ","Celluloid Notifications Fanout  supervise_as "," internal_pool reset "," internal_pool "," start "," init "]}," Celluloid suspend":{"type":"method","name":"suspend","children":[],"call":["waiter wait ","Task  suspend ","waiter before_suspend ","waiter respond_to? ","Celluloid  exclusive? ! ","Celluloid  exclusive? ","Thread  current [] ","Thread  current "]}," Celluloid ThreadHandle backtrace":{"type":"method","name":"backtrace","children":[],"call":["@thread backtrace "]}," Celluloid TaskSet empty?":{"type":"method","name":"empty?","children":[],"call":["@tasks empty? ","Rubinius  synchronize "]}," Celluloid TaskSet first":{"type":"method","name":"first","children":[],"call":["@tasks first ","Rubinius  synchronize "]}," Celluloid TaskSet each":{"type":"method","name":"each","children":[],"call":["@tasks each "]}," Celluloid TaskSet delete":{"type":"method","name":"delete","children":[],"call":["@tasks delete ","Rubinius  synchronize "]}," Celluloid TaskSet <<":{"type":"method","name":"<<","children":[],"call":["@tasks << ","Rubinius  synchronize "]}," Celluloid TaskSet initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new "]}," Celluloid SignalConditionRequest call":{"type":"method","name":"call","children":[],"call":["@task resume "]}," Celluloid SignalConditionRequest initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid StackDump display_backtrace":{"type":"method","name":"display_backtrace","children":[],"call":["output << ","output << << << ","output << << ","backtrace join "]}," Celluloid StackDump dump":{"type":"method","name":"dump","children":[],"call":["output print "," display_backtrace ","thread backtrace ","string << ","thread thread_id to_s ","thread thread_id ","@threads each ","actor backtrace ","task status ","task task_class ","i + ","actor tasks each_with_index ","actor tasks ","actor status == ","actor status ","actor name ","actor subject_class ","actor subject_id to_s ","actor subject_id ","@actors each ","output << ","task backtrace ","thread dump ","actor dump "]}," Celluloid StackDump snapshot_thread":{"type":"method","name":"snapshot_thread","children":[],"call":["ThreadState  new ","thread backtrace ","thread object_id ","thread role "]}," Celluloid StackDump snapshot_actor":{"type":"method","name":"snapshot_actor","children":[],"call":["state backtrace= ","actor thread backtrace ","actor thread ","state tasks= ","TaskState  new ","t status ","t class ","tasks collect ","state status= ","tasks empty? ","actor tasks ","state subject_class= ","actor subject class ","actor subject ","state subject_id= ","actor subject object_id ","ActorState  new ","t backtrace ","t meta ","t type ","tasks to_a map ","tasks to_a ","state cell= "," snapshot_cell ","actor behavior ","actor behavior is_a? ","state id= ","actor object_id ","ActorState  new  backtrace= ","state actor tasks = ","ActorState  new  tasks= ","actor tasks  collect ","ActorState  new  status= ","actor tasks  empty? ","actor actor tasks  ","ActorState  new  subject_class= ","ActorState  new  subject_id= ","actor tasks  to_a map ","actor tasks  to_a ","ActorState  new  cell= ","ActorState  new  id= "]}," Celluloid StackDump snapshot":{"type":"method","name":"snapshot","children":[],"call":["@threads << "," snapshot_thread ","@actors << "," snapshot_actor ","thread [] ","Thread  list each ","Thread  list ","thread actor ","thread task ","thread celluloid? ","thread role == ","thread role ","Celluloid  internal_pool each ","Celluloid  internal_pool ","@internal_pool each ","@thread [] s << "," snapshot_thread []  ","thread thread []  "]}," Celluloid StackDump initialize":{"type":"method","name":"initialize","children":[],"call":[" snapshot "]}," Celluloid PoolManager __crash_handler__":{"type":"method","name":"__crash_handler__","children":[],"call":[" signal ","@idle << ","@worker_class new_link ","@idle delete ","@busy delete "]}," Celluloid PoolManager __provision_worker__":{"type":"method","name":"__provision_worker__","children":[],"call":["@busy << ","@idle shift ","Thread  current [] handle_message ","Thread  current [] ","Thread  current ","msg is_a? "," receive "," exclusive ","@idle empty? ","Task  current guard_warnings= ","Task  current "]}," Celluloid PoolManager __shutdown__":{"type":"method","name":"__shutdown__","children":[],"call":["terminator value ","terminators compact each ","terminators compact ","actor future ","(send\n  (ivar :@idle) :+\n  (ivar :@busy)) each ","@idle + ","(send\n  (ivar :@idle) :+\n  (ivar :@busy)) map "]}," Celluloid Method arity":{"type":"method","name":"arity","children":[],"call":["@actor _send_ arity ","@actor _send_ ","@proxy method_missing arity ","@proxy method_missing "]}," Celluloid Logger deprecate":{"type":"method","name":"deprecate","children":[],"call":[" warn "," caller join "," caller "]}," Celluloid InternalPool clean_thread_locals":{"type":"method","name":"clean_thread_locals","children":[],"call":["thread []= ","key == ","thread keys each ","thread keys "]}," Celluloid InternalPool initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "," reset ","ThreadGroup  new "]}," Celluloid Condition owner=":{"type":"method","name":"owner=","children":[],"call":["@tasks clear ","@owner mailbox << ","SignalConditionRequest  new ","@owner mailbox ","ConditionError  new ","@tasks each ","@owner != ","@mutex synchronize ","@mutConditionError  new  synchronize "]}," Celluloid Condition broadcast":{"type":"method","name":"broadcast","children":[],"call":["@tasks clear ","@owner mailbox << ","SignalConditionRequest  new ","@owner mailbox ","@tasks each "," raise ","@mutex synchronize ","waiter << ","waiter task ","@waiters clear ","@waiters each "]}," Celluloid Condition signal":{"type":"method","name":"signal","children":[],"call":["Logger  debug ","@owner mailbox << ","SignalConditionRequest  new ","@owner mailbox ","@tasks shift "," raise ","@mutex synchronize ","waiter << ","waiter task ","@waiters shift ","logger debug ","Logger  with_backtrace "," caller ","Internals Logger  with_backtrace ","@@tasks shift s shift ","@tasks shift  << ","@waiters shift  << ","waiter @tasks shift  ","@tasks shift  task ","@waiters shift  task ","@@waiters shift s shift "]}," Celluloid Condition wait":{"type":"method","name":"wait","children":[],"call":[" raise ","result is_a? ","Task  suspend ","@tasks << ","Task  current ","actor == ","Thread  current [] ","Thread  current ","@mutex synchronize ","Celluloid  exclusive? ","Actor  current == ","Actor  current ","Celluloid  suspend ","Waiter  new ","Celluloid  mailbox ","@waiters << ","timer cancel ","task resume ","exception set_backtrace ","ConditionError  new ","timeout inspect ","actor timers after ","actor timers "," caller "," fail "," block_given? ","Task  suspend  is_a? ","Celluloid  suspend  is_a? ","@Thread  current s << ","@Task  current s << ","Thread  current []  == ","@Waiter  new s << ","Thread  current  resume ","Task  current  resume ","ConditionError  new  set_backtrace ","Thread  current []  timers after ","Thread  current []  timers "]}," Celluloid Condition initialize":{"type":"method","name":"initialize","children":[],"call":["Thread  current [] ","Thread  current ","Mutex  new ","Actor  current "]}," Celluloid Call wait":{"type":"method","name":"wait","children":[],"call":["Thread  current [] handle_system_event ","Thread  current [] ","Thread  current ","message is_a? ","msg call == ","msg call ","msg respond_to? ","Thread  mailbox receive ","Thread  mailbox "," loop "]}," Celluloid Call dispatch":{"type":"method","name":"dispatch","children":[],"call":[" raise ","AbortError  new "," arguments size < "," arguments size "," arguments ","arity -@ - ","arity -@ ","arity < ","@arguments size != ","@arguments size ","arity >= ","obj method arity ","obj method ","obj respond_to? ","obj public_send "," detect_argument_error "," detect_missing_method ","@block to_proc "," check ","obj method arity  -@ - ","obj method arity  -@ ","obj method arity  < ","obj method arity  >= ","obj method obj method arity  "]}," Celluloid Actor Sleeper wait":{"type":"method","name":"wait","children":[],"call":["Kernel  sleep "]}," Celluloid Actor Sleeper before_suspend":{"type":"method","name":"before_suspend","children":[],"call":["task resume ","@timers after "]}," Celluloid Actor Sleeper initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid Call detect_argument_error":{"type":"method","name":"detect_argument_error","children":[],"call":[" raise ","AbortError  new ","ex backtrace [] [] ","ex backtrace [] ","ex backtrace "]}," Celluloid Call detect_missing_method":{"type":"method","name":"detect_missing_method","children":[],"call":[" raise ","AbortError  new ","frame [] ","ex backtrace each ","ex backtrace "]}," Celluloid InstanceMethods name":{"type":"method","name":"name","children":[],"call":["Actor  name "]}," Celluloid InstanceMethods tap":{"type":"method","name":"tap","children":[],"call":[" current_actor "]}," Celluloid ClassMethods MailboxFactory mailbox_class":{"type":"method","name":"mailbox_class","children":[],"call":["@actor superclass mailbox_class ","@actor superclass ","@actor superclass respond_to? "]}," Celluloid ClassMethods MailboxFactory build":{"type":"method","name":"build","children":[],"call":["mailbox max_size= "," mailbox_class new "," mailbox_class "," mailbox_class new  max_size= ","  mailbox_class new _class new ","  mailbox_class new _class "]}," Celluloid ClassMethods MailboxFactory initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid ClassMethods mailbox":{"type":"method","name":"mailbox","children":[],"call":["MailboxFactory  new "]}," Celluloid ClassMethods receiver_block_executions":{"type":"method","name":"receiver_block_executions","children":[],"call":["Set  new "]}," Celluloid register_shutdown":{"type":"method","name":"register_shutdown","children":[],"call":["Celluloid  shutdown "," exit ","$! status ","$! is_a? ","RUBY_VERSION  >= ","RUBY_ENGINE  == "," at_exit ","$ERROR_INFO status ","$ERROR_INFO is_a? "," sleep "]}," Celluloid mailbox":{"type":"method","name":"mailbox","children":[],"call":["Celluloid Mailbox  new ","Thread  current [] ","Thread  current "]}," Celluloid Thread recycle":{"type":"method","name":"recycle","children":[],"call":[" []= ","key == "," keys each "," keys ","EPHEMERAL_CELLULOID_LOCALS  each "]}," Celluloid Thread key?":{"type":"method","name":"key?","children":[],"call":["actor locals has_key? ","actor locals "," [] "," []  locals has_key? "," []  locals "]}," Celluloid Thread keys":{"type":"method","name":"keys","children":[],"call":["actor locals keys ","actor locals "," [] "," []  locals keys "," []  locals "]}," Celluloid Thread []=":{"type":"method","name":"[]=","children":[],"call":["actor locals []= ","actor locals ","CELLULOID_LOCALS  include? ","actor ! "," [] "," [] locals []= "," [] locals "," []  locals []= "," []  locals "," []  ! "]}," Celluloid Thread []":{"type":"method","name":"[]","children":[],"call":["actor locals [] ","actor locals ","CELLULOID_LOCALS  include? ","actor ! "]}," Celluloid Thread call_chain_id":{"type":"method","name":"call_chain_id","children":[],"call":[" [] "]}," Celluloid Thread mailbox":{"type":"method","name":"mailbox","children":[],"call":[" [] "]}," Celluloid Thread task":{"type":"method","name":"task","children":[],"call":[" [] "]}," Celluloid Thread actor":{"type":"method","name":"actor","children":[],"call":[" [] "]}," Celluloid Thread celluloid?":{"type":"method","name":"celluloid?","children":[],"call":[]}," Celluloid Task backtrace":{"type":"method","name":"backtrace","children":[],"call":[]}," Celluloid Task create":{"type":"method","name":"create","children":[],"call":[" raise "," class "," fail "]}," Celluloid TaskThread backtrace":{"type":"method","name":"backtrace","children":[],"call":["@thread backtrace "]}," Celluloid TaskThread deliver":{"type":"method","name":"deliver","children":[],"call":[" raise ","@exception_queue pop ","@exception_queue size > ","@exception_queue size ","@yield_cond wait ","@resume_queue push ","@yield_mutex synchronize ","@thread alive? "]}," Celluloid TaskThread signal":{"type":"method","name":"signal","children":[],"call":["@resume_queue pop ","@yield_cond signal "]}," Celluloid TaskThread create":{"type":"method","name":"create","children":[],"call":["@yield_cond signal ","@exception_queue << "," raise ","ex is_a? ","@resume_queue pop ","Celluloid  internal_pool get ","Celluloid  internal_pool ","Thread  current role= ","Thread  current ","Celluloid ThreadHandle  new ","ThreadHandle  new ","Thread  current [] ","@@resume_queue pop ception_queue << ","@resume_queue pop  is_a? "]}," Celluloid TaskFiber deliver":{"type":"method","name":"deliver","children":[],"call":[" raise ","@fiber resume "]}," Celluloid TaskFiber signal":{"type":"method","name":"signal","children":[],"call":["Fiber  yield "]}," Celluloid TaskFiber create":{"type":"method","name":"create","children":[],"call":["Fiber  new ","Thread  current []= ","Thread  current ","Thread  current [] "]}," Celluloid BlockResponse dispatch":{"type":"method","name":"dispatch","children":[],"call":["@call task resume ","@call task "]}," Celluloid BlockResponse initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid SyncProxy method_missing":{"type":"method","name":"method_missing","children":[],"call":["call value "," raise ","@mailbox << ","SyncCall  new "," Celluloid  mailbox ","args unshift ","@mailbox == "," Thread  current [] "," Thread  current ","@mailbox alive? ","SyncCall  new  value "]}," Celluloid SyncProxy inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Celluloid SyncProxy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid BlockProxy to_proc":{"type":"method","name":"to_proc","children":[],"call":[" raise ","task suspend ","@mailbox << ","BlockCall  new ","Actor  current mailbox ","Actor  current ","Thread  current [] ","Thread  current "," lambda ","@execution == ","Thread  current []  suspend "]}," Celluloid BlockProxy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid Mailbox mailbox_full":{"type":"method","name":"mailbox_full","children":[],"call":["@messages size >= ","@messages size "]}," Celluloid Mailbox size":{"type":"method","name":"size","children":[],"call":["@messages size ","@mutex synchronize "]}," Celluloid InternalPool shutdown":{"type":"method","name":"shutdown","children":[],"call":["thread [] << ","thread [] ","@pool each ","@mutex synchronize ","@threads each "," finalize ","@idle_threads clear ","@all_threads clear ","@all_threads each "]}," Celluloid InternalPool reset":{"type":"method","name":"reset","children":[],"call":[]}," Celluloid EventedMailbox shutdown":{"type":"method","name":"shutdown","children":[],"call":["@reactor shutdown "]}," Celluloid EventedMailbox next_message":{"type":"method","name":"next_message","children":[],"call":["@mutex unlock ","@mutex lock "]}," Celluloid EventedMailbox receive":{"type":"method","name":"receive","children":[],"call":[" raise "," shutdown "," next_message ","@reactor run_once ","wait_interval < ","wait_until - ","now + ","Time  now ","wait_interval <= "," next_ next_message  ","wait_until -  < ","Time  now  + ","Time  Time  now  ","wait_until -  <= "]}," Celluloid EventedMailbox <<":{"type":"method","name":"<<","children":[],"call":["@mutex unlock "," raise ","@reactor wakeup ","current_actor mailbox == ","current_actor mailbox ","Thread  current [] ","Thread  current ","@messages << ","@messages unshift ","message is_a? ","Logger  debug "," mailbox_full ","@mutex lock "," dead_letter ","Logger  crash ","Thread  current []  mailbox == ","Thread  current []  mailbox "]}," Celluloid EventedMailbox initialize":{"type":"method","name":"initialize","children":[],"call":["reactor_class new "]}," Thread celluloid?":{"type":"method","name":"celluloid?","children":[],"call":[]}," Celluloid BlockCall dispatch":{"type":"method","name":"dispatch","children":[],"call":["@sender << ","BlockResponse  new ","@block_proxy block call ","@block_proxy block "]}," Celluloid BlockCall call":{"type":"method","name":"call","children":[],"call":["@block_proxy call "]}," Celluloid BlockCall initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid SyncCall wait":{"type":"method","name":"wait","children":[],"call":["message dispatch ","message respond_to? ","Thread  current [] handle_system_event ","Thread  current [] ","Thread  current ","message is_a? ","msg call == ","msg call ","msg respond_to? ","Celluloid  mailbox receive ","Celluloid  mailbox "," loop "]}," Celluloid SyncCall value":{"type":"method","name":"value","children":[],"call":["Celluloid  suspend value ","Celluloid  suspend "," response value "," response "]}," Celluloid Call execute_block_on_receiver":{"type":"method","name":"execute_block_on_receiver","children":[],"call":["@block execution= "]}," Celluloid Actor setup_thread":{"type":"method","name":"setup_thread","children":[],"call":["Thread  current []= ","Thread  current "]}," Celluloid Thread role=":{"type":"method","name":"role=","children":[],"call":[" []= "]}," Celluloid Thread role":{"type":"method","name":"role","children":[],"call":[" [] "]}," Celluloid Future new":{"type":"method","name":"new","children":[],"call":[]}," Celluloid Condition Waiter wait":{"type":"method","name":"wait","children":[],"call":["message value ","msg task == ","Thread  current ","msg task ","msg is_a? ","@mailbox receive "," raise ","@timeout inspect "]}," Celluloid Condition Waiter <<":{"type":"method","name":"<<","children":[],"call":["@mailbox << "]}," Celluloid Condition Waiter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid timeout":{"type":"method","name":"timeout","children":[],"call":["Thread  current [] timeout ","Thread  current [] ","Thread  current ","timer cancel ","task resume ","exception set_backtrace ","Task TimeoutError  new "," after ","Task  current "," caller ","Task  current  resume ","Task TimeoutError  new  set_backtrace "]}," Celluloid start":{"type":"method","name":"start","children":[],"call":["Celluloid IncidentReporter  supervise_as ","Celluloid Notifications Fanout  supervise_as "," actor_system start "," actor_system "]}," Celluloid init":{"type":"method","name":"init","children":[],"call":[" internal_pool= ","InternalPool  new ","ActorSystem  new ","Actor System  new "]}," Celluloid detect_recursion":{"type":"method","name":"detect_recursion","children":[],"call":["t chain_id == ","t chain_id ","t != ","actor tasks to_a any? ","actor tasks to_a ","actor tasks ","CallChain  current_id ","Thread  current [] ","Thread  current ","Internals CallChain  current_id ","t CallChain  current_id  == ","t Internals CallChain  current_id  == ","t CallChain  current_id  ","t Internals CallChain  current_id  ","actor Thread  current [] s to_a any? ","Thread  current []  tasks to_a any? ","actor Thread  current [] s to_a ","Thread  current []  tasks to_a ","actor Thread  current [] s ","Thread  current []  tasks "]}," Celluloid Task exclusive?":{"type":"method","name":"exclusive?","children":[],"call":[]}," Celluloid Task exclusive":{"type":"method","name":"exclusive","children":[],"call":[]}," Celluloid TaskSet to_a":{"type":"method","name":"to_a","children":[],"call":["@tasks to_a ","Rubinius  synchronize "]}," Celluloid StackDump ThreadState dump":{"type":"method","name":"dump","children":[],"call":[" display_backtrace "," backtrace ","string << "," thread_id to_s "," thread_id "," role "]}," Celluloid StackDump ActorState dump":{"type":"method","name":"dump","children":[],"call":[" display_backtrace ","task backtrace ","string << ","task meta inspect ","task meta ","task status ","task type ","task task_class ","i + "," tasks each_with_index "," tasks "," backtrace "," status == "," status "," name "," subject_class "," subject_id to_s "," subject_id "," cell dump "," cell "," id to_s "," id "]}," Celluloid StackDump DisplayBacktrace display_backtrace":{"type":"method","name":"display_backtrace","children":[],"call":["output << ","output << << << ","output << << ","backtrace each "]}," Celluloid Signals broadcast":{"type":"method","name":"broadcast","children":[],"call":["condition broadcast ","@conditions delete ","@conditions delete  broadcast ","@@conditions delete s delete "]}," Celluloid SyncProxy respond_to?":{"type":"method","name":"respond_to?","children":[],"call":[" __class__ instance_methods include? "," __class__ instance_methods "," __class__ "," method_missing "]}," Celluloid SyncProxy __class__":{"type":"method","name":"__class__","children":[],"call":[]}," Celluloid FutureProxy __class__":{"type":"method","name":"__class__","children":[],"call":[]}," Celluloid AsyncProxy __class__":{"type":"method","name":"__class__","children":[],"call":[]}," Celluloid ActorProxy __class__":{"type":"method","name":"__class__","children":[],"call":[]}," Celluloid AbstractProxy __class__":{"type":"method","name":"__class__","children":[],"call":[]}," Celluloid Properties property":{"type":"method","name":"property","children":[],"call":[" superclass send "," superclass "," superclass respond_to? "," instance_variable_get "," instance_variables include? "," instance_variables "," instance_variable_set "," ancestors first send "," ancestors first "," ancestors ","(str \"@\") to_sym ","opts fetch ","(lvar :value) uniq "," send ","(lvar :(lvar :value) uniq ) uniq "]}," Celluloid Mailbox dead_letter":{"type":"method","name":"dead_letter","children":[],"call":["Logger  debug ","Internals Logger  debug "]}," Celluloid InternalPool finalize":{"type":"method","name":"finalize","children":[],"call":[]}," Celluloid InternalPool kill":{"type":"method","name":"kill","children":[],"call":["@group list each ","@group list ","@threads shift kill ","@threads shift ","@threads empty? "," finalize ","@mutex synchronize ","@idle_threads clear ","@all_threads shift kill ","@all_threads shift ","@all_threads empty? "]}," Celluloid InternalPool to_a":{"type":"method","name":"to_a","children":[],"call":["@all_threads dup ","@mutex synchronize "]}," Celluloid InternalPool each":{"type":"method","name":"each","children":[],"call":["@threads each "," to_a each "," to_a "]}," Celluloid InternalPool active?":{"type":"method","name":"active?","children":[],"call":[" to_a any? "," to_a "," busy_size + > "," busy_size + "," idle_size "," busy_size "]}," Celluloid InternalPool running?":{"type":"method","name":"running?","children":[],"call":[]}," Celluloid InternalPool assert_inactive":{"type":"method","name":"assert_inactive","children":[],"call":[" raise ","Celluloid  logger warn ","Celluloid  logger "," active? "]}," Celluloid InternalPool assert_running":{"type":"method","name":"assert_running","children":[],"call":[" raise "," running? "]}," Celluloid InternalPool idle_size":{"type":"method","name":"idle_size","children":[],"call":["@threads reject size ","@threads reject "]}," Celluloid InternalPool busy_size":{"type":"method","name":"busy_size","children":[],"call":["@threads select size ","@threads select "]}," Celluloid CallChain current_id":{"type":"method","name":"current_id","children":[],"call":[]}," Celluloid CallChain current_id=":{"type":"method","name":"current_id=","children":[],"call":[]}," Celluloid Task guard":{"type":"method","name":"guard","children":[],"call":[" raise ","Logger  warn "," fail ","Internals Logger  warn "]}," Celluloid running?":{"type":"method","name":"running?","children":[],"call":[" internal_pool "," actor_system running? "," actor_system "]}," Celluloid InstanceMethods registered_name":{"type":"method","name":"registered_name","children":[],"call":["Actor  registered_name "]}," Celluloid ClassMethods behavior_options":{"type":"method","name":"behavior_options","children":[],"call":[" execute_block_on_receiver "," finalizer "," exit_handler_name "," exclusive_methods "," proxy_class "]}," Celluloid ClassMethods actor_system":{"type":"method","name":"actor_system","children":[],"call":["Celluloid  actor_system "]}," Celluloid actor_system":{"type":"method","name":"actor_system","children":[],"call":[" raise ","Thread  current [] ","Thread  current ","Thread  current celluloid? "," fail "]}," Celluloid Task thread_metadata":{"type":"method","name":"thread_metadata","children":[],"call":[" format ","Thread  current [] behavior subject bare_object class ","Thread  current [] behavior subject bare_object ","Thread  current [] behavior subject ","Thread  current [] behavior ","Thread  current [] ","Thread  current ","@meta [] "]}," Celluloid Task name_current_thread":{"type":"method","name":"name_current_thread","children":[],"call":["Thread  current to_java getNativeThread set_name ","Thread  current to_java getNativeThread ","Thread  current to_java ","Thread  current ","Thread  current []= ","Thread  current to_java getNativeThread get_name ","Thread  current [] ","new_name nil? ","RUBY_PLATFORM  == ","Thread  current []  nil? "]}," Celluloid TaskFiber backtrace":{"type":"method","name":"backtrace","children":[],"call":[" class "]}," Celluloid SupervisionGroup Member cleanup":{"type":"method","name":"cleanup","children":[],"call":["@registry delete "]}," Celluloid SupervisionGroup []":{"type":"method","name":"[]","children":[],"call":["@registry [] "]}," Celluloid StackDump print":{"type":"method","name":"print","children":[],"call":["output print ","thread dump ","@threads each ","actor dump ","@actors each "]}," Celluloid StackDump snapshot_cell":{"type":"method","name":"snapshot_cell","children":[],"call":["state subject_class= ","behavior subject class ","behavior subject ","state subject_id= ","behavior subject object_id ","CellState  new ","CellState  new  subject_class= ","CellState  new  subject_id= "]}," Celluloid StackDump CellState dump":{"type":"method","name":"dump","children":[],"call":[" subject_class "," subject_id to_s "," subject_id "]}," MockActor setup_thread":{"type":"method","name":"setup_thread","children":[],"call":[]}," MockActor initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ExampleActorClass create":{"type":"method","name":"create","children":[{"type":"method","name":"initialize","children":[],"asgn":[null,null],"call":[]},{"type":"method","name":"sleepy","children":[],"asgn":[],"call":[" sleep "]},{"type":"method","name":"change_name","children":[],"asgn":[null],"call":[]},{"type":"method","name":"change_name_async","children":[],"asgn":[],"call":[" async change_name "," async "]},{"type":"method","name":"greet","children":[],"asgn":[],"call":[]},{"type":"method","name":"actor?","children":[],"asgn":[],"call":["Celluloid  actor? "]},{"type":"method","name":"run","children":[],"asgn":[],"call":[]},{"type":"method","name":"run_on_receiver","children":[],"asgn":[],"call":[]},{"type":"method","name":"crash","children":[],"asgn":[],"call":[" raise "]},{"type":"method","name":"crash_with_abort","children":[],"asgn":[{"type":"local","name":"example_crash","value":"ExampleCrash  new "},["ExampleCrash  new "]],"call":[" abort ","example_crash foo= ","ExampleCrash  new "]},{"type":"method","name":"crash_with_abort_raw","children":[],"asgn":[],"call":[" abort "]},{"type":"method","name":"internal_hello","children":[],"asgn":[],"call":[" external_hello "]},{"type":"method","name":"external_hello","children":[],"asgn":[],"call":[]},{"type":"method","name":"inspect_thunk","children":[],"asgn":[],"call":[" inspect "]},{"type":"method","name":"send","children":[],"asgn":[],"call":["string reverse "]},{"type":"method","name":"shutdown","children":[],"asgn":[],"call":[" terminate "]},{"type":"method","name":"method_missing","children":[],"asgn":[],"call":["@delegate send "," delegates? "]},{"type":"method","name":"respond_to?","children":[],"asgn":[],"call":[" delegates? "]},{"type":"method","name":"call_private","children":[],"asgn":[],"call":[" async zomg_private "," async "]},{"type":"method","name":"zomg_private","children":[],"asgn":[null],"call":[]},{"type":"method","name":"my_finalizer","children":[],"asgn":[],"call":[]},{"type":"method","name":"delegates?","children":[],"asgn":[],"call":["@delegate respond_to? "]}],"call":[]}," ask_name_with_timeout":{"type":"method","name":"ask_name_with_timeout","children":[],"call":["other name "," timeout "]}," name":{"type":"method","name":"name","children":[],"call":[" sleep "]}," ExampleProxy subclass_proxy?":{"type":"method","name":"subclass_proxy?","children":[],"call":[]}," Blocker unblock":{"type":"method","name":"unblock","children":[],"call":[" signal "]}," Blocker block":{"type":"method","name":"block","children":[],"call":[" wait "]}," blocking_call":{"type":"method","name":"blocking_call","children":[],"call":["@blocker block "]}," initialize":{"type":"method","name":"initialize","children":[],"call":["Blocker  new "," sleep "]}," fired":{"type":"method","name":"fired","children":[],"call":[]}," fired?":{"type":"method","name":"fired?","children":[],"call":["@fired ! ! ","@fired ! "]}," fire_every":{"type":"method","name":"fire_every","children":[],"call":[" every "]}," fire_after":{"type":"method","name":"fire_after","children":[],"call":[" after "]}," sleeping?":{"type":"method","name":"sleeping?","children":[],"call":[]}," do_sleep":{"type":"method","name":"do_sleep","children":[],"call":[" sleep "]}," signal_myself":{"type":"method","name":"signal_myself","children":[],"call":[" receive "," current_actor mailbox << "," current_actor mailbox "," current_actor "]}," drink_coffee":{"type":"method","name":"drink_coffee","children":[],"call":["@tasks << "]}," eat_donuts":{"type":"method","name":"eat_donuts","children":[],"call":["@tasks << "," sleep "]}," nested_exclusive_example":{"type":"method","name":"nested_exclusive_example","children":[],"call":["Celluloid  exclusive? "," exclusive "]}," check_exclusive":{"type":"method","name":"check_exclusive","children":[],"call":["Celluloid  exclusive? "," exclusive "]}," check_not_exclusive":{"type":"method","name":"check_not_exclusive","children":[],"call":["Celluloid  exclusive? "]}," exclusive_log_task":{"type":"method","name":"exclusive_log_task","children":[],"call":[" log_task "," sleep "]}," exclusive_with_block_log_task":{"type":"method","name":"exclusive_with_block_log_task","children":[],"call":[" log_task "," sleep "," exclusive "]}," log_task":{"type":"method","name":"log_task","children":[],"call":["@tasks << "]}," signaled?":{"type":"method","name":"signaled?","children":[],"call":[]}," waiting?":{"type":"method","name":"waiting?","children":[],"call":[]}," send_signal":{"type":"method","name":"send_signal","children":[],"call":[" signal "]}," wait_for_signal":{"type":"method","name":"wait_for_signal","children":[],"call":[" wait "," raise "]}," lambaste_subordinate":{"type":"method","name":"lambaste_subordinate","children":[],"call":[]}," subordinate_lambasted?":{"type":"method","name":"subordinate_lambasted?","children":[],"call":[]}," java_thread":{"type":"method","name":"java_thread","children":[],"call":["Thread  current to_java getNativeThread ","Thread  current to_java ","Thread  current "]}," current_thread_name":{"type":"method","name":"current_thread_name","children":[],"call":[" java_thread get_name "," java_thread "]}," cleanup":{"type":"method","name":"cleanup","children":[],"call":[" sleep "]}," recursion_thunk":{"type":"method","name":"recursion_thunk","children":[],"call":["other recursion_test "]}," recursion_test":{"type":"method","name":"recursion_test","children":[],"call":["Celluloid  detect_recursion ","recurse_through recursion_thunk ","Celluloid Actor  current "]}," to_s":{"type":"method","name":"to_s","children":[],"call":[]}," greet_by_proxy":{"type":"method","name":"greet_by_proxy","children":[],"call":["actor greet "]}," Celluloid CellProxy terminate!":{"type":"method","name":"terminate!","children":[],"call":["@actor_proxy terminate! "]}," Celluloid CellProxy terminate":{"type":"method","name":"terminate","children":[],"call":["@actor_proxy terminate "]}," Celluloid CellProxy thread":{"type":"method","name":"thread","children":[],"call":["@actor_proxy thread "]}," Celluloid CellProxy alive?":{"type":"method","name":"alive?","children":[],"call":["@actor_proxy alive? "]}," Celluloid CellProxy future":{"type":"method","name":"future","children":[],"call":["@future_proxy method_missing "]}," Celluloid CellProxy async":{"type":"method","name":"async","children":[],"call":["@async_proxy method_missing "]}," Celluloid CellProxy method":{"type":"method","name":"method","children":[],"call":["Method  new "]}," Celluloid CellProxy inspect":{"type":"method","name":"inspect","children":[],"call":[" method_missing "]}," Celluloid CellProxy _send_":{"type":"method","name":"_send_","children":[],"call":[" method_missing "]}," Celluloid CellProxy initialize":{"type":"method","name":"initialize","children":[],"call":["FutureProxy  new ","AsyncProxy  new ","SyncProxy  new "]}," Celluloid CellProxy __class__":{"type":"method","name":"__class__","children":[],"call":[]}," Celluloid Probe dispatch_event":{"type":"method","name":"dispatch_event","children":[],"call":[" publish ","NOTIFICATIONS_TOPIC_BASE  % "]}," Celluloid Probe first_run":{"type":"method","name":"first_run","children":[],"call":[" dispatch_event ","INITIAL_EVENTS  pop ","INITIAL_EVENTS  size == ","INITIAL_EVENTS  size "," dispatch_INITIAL_EVENTS  pop  "]}," Celluloid Probe initialize":{"type":"method","name":"initialize","children":[],"call":[" async first_run "," async "," async process_queue "]}," Celluloid Probe find_actor":{"type":"method","name":"find_actor","children":[],"call":["obj instance_variable_get ","obj __send__ == ","obj __send__ "]}," Celluloid Probe trigger_event":{"type":"method","name":"trigger_event","children":[],"call":["INITIAL_EVENTS  << ","probe_actor async dispatch_event ","probe_actor async ","Actor  [] ","probe_actor async process_queue ","EVENTS_BUFFER  << ","Actor  []  async dispatch_event ","Actor  []  async ","Actor  []  async process_queue "]}," Celluloid Probe actors_linked":{"type":"method","name":"actors_linked","children":[],"call":[" trigger_event "," find_actor "," find_ find_actor ctor "]}," Celluloid Probe actor_died":{"type":"method","name":"actor_died","children":[],"call":[" trigger_event "]}," Celluloid Probe actor_named":{"type":"method","name":"actor_named","children":[],"call":[" trigger_event "]}," Celluloid Probe actor_created":{"type":"method","name":"actor_created","children":[],"call":[" trigger_event "]}," Celluloid Probe run":{"type":"method","name":"run","children":[],"call":[" supervise_as ","Actor  [] alive? ","Actor  [] "]}," Celluloid PoolManager size=":{"type":"method","name":"size=","children":[],"call":["worker terminate ","@busy delete "," unlink "," __provision_worker__ ","(send\n  (send nil :size) :-\n  (lvar :new_size)) times "," size - "," size ","@idle << ","@worker_class new_link ","delta times ","new_size - ","new_size > ","(int 0) max "," __provision_worker__  terminate "," __provision_ __provision_worker__ __ ","(send\n  (send nil :size) :-\n  (lvar :(int 0) max )) times ","@ __provision_worker__ _class new_link ","new_size -  times ","(int 0) max  - ","(int 0) max  > "]}," Celluloid Method parameters":{"type":"method","name":"parameters","children":[],"call":["@proxy method_missing parameters ","@proxy method_missing "]}," Celluloid Method name":{"type":"method","name":"name","children":[],"call":["@proxy method_missing name ","@proxy method_missing "]}," Celluloid Mailbox check":{"type":"method","name":"check","children":[],"call":["@mutex unlock ","@condition wait "," next_message ","Timers Wait  for "," raise ","@mutex lock "," fail "," next_ next_message  "]}," Celluloid Logger with_backtrace":{"type":"method","name":"with_backtrace","children":[],"call":["WithBacktrace  new ","Celluloid  logger "]}," Celluloid Logger WithBacktrace decorate":{"type":"method","name":"decorate","children":[],"call":["(lvar :string) join "]}," Celluloid Logger WithBacktrace error":{"type":"method","name":"error","children":[],"call":["Celluloid  logger error "," decorate ","Celluloid  logger "]}," Celluloid Logger WithBacktrace warn":{"type":"method","name":"warn","children":[],"call":["Celluloid  logger warn "," decorate ","Celluloid  logger "]}," Celluloid Logger WithBacktrace info":{"type":"method","name":"info","children":[],"call":["Celluloid  logger info "," decorate ","Celluloid  logger "]}," Celluloid Logger WithBacktrace debug":{"type":"method","name":"debug","children":[],"call":["Celluloid  logger debug "," decorate ","Celluloid  logger "]}," Celluloid Logger WithBacktrace initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid Handler call":{"type":"method","name":"call","children":[],"call":["@block call "]}," Celluloid Handler match":{"type":"method","name":"match","children":[],"call":["@pattern === "]}," Celluloid Handler initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid Handlers handle_message":{"type":"method","name":"handle_message","children":[],"call":["handler call ","h match ","@handlers find "]}," Celluloid Handlers handle":{"type":"method","name":"handle","children":[],"call":["@handlers << ","Handler  new ","patterns each ","@Handler  new s << "]}," Celluloid Handlers initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new "]}," Celluloid EventedMailbox check":{"type":"method","name":"check","children":[],"call":[" raise ","@reactor run_once "," next_message "," next_ next_message  "]}," Celluloid CPUCounter from_sysctl":{"type":"method","name":"from_sysctl","children":[],"call":["$? success? "]}," Celluloid CPUCounter from_sysdev":{"type":"method","name":"from_sysdev","children":[],"call":["result zero? ","n =~ ","Dir  [] count ","Dir  [] "," IO  read split last to_i + "," IO  read split last to_i "," IO  read split last "," IO  read split "," IO  read "]}," Celluloid CPUCounter from_env":{"type":"method","name":"from_env","children":[],"call":["ENV  [] "]}," Celluloid CPUCounter count_cores":{"type":"method","name":"count_cores","children":[],"call":[" Integer ","result to_s [] ","result to_s "," from_sysctl "," from_sysdev "," from_env "]}," Celluloid Cell shutdown":{"type":"method","name":"shutdown","children":[],"call":["Logger  crash ","@subject class ","@subject __send__ "," task ","@subject respond_to? ","Cell  shutdown "]}," Celluloid Cell task":{"type":"method","name":"task","children":[],"call":["Celluloid  exclusive ","@exclusive_methods include? ","method_name to_sym ","@actor task ","meta merge! ","meta []= "]}," Celluloid Cell invoke":{"type":"method","name":"invoke","children":[],"call":["call dispatch "," task ","meth == ","call execute_block_on_receiver ","@receiver_block_executions include? ","meth to_sym ","call arguments first ","call arguments ","call method ","Cell  dispatch ","call arguments first  == ","call method  == ","call arguments first  to_sym ","call method  to_sym ","call call arguments first od ","call call method od "]}," Celluloid Cell initialize":{"type":"method","name":"initialize","children":[],"call":["(or\n  (send\n    (lvar :options) :[]\n    (sym :proxy_class))\n  (const nil :CellProxy)) new ","@subject class to_s ","@subject class ","@actor mailbox ","@actor proxy ","options [] ","@actor start ","message dispatch ","@actor handle "," task "," invoke ","@actor exit_handler= ","ExitHandler  new ","@subject instance_variable_set ","Actor  new ","(or\n  (send\n    (lvar :options) :[]\n    (sym :proxy_class))\n  (const\n    (const nil :Proxy) :Cell)) new ","Actor  new  mailbox ","Actor  new  proxy ","Actor  new  start ","Actor  new  handle ","Actor  new  exit_handler= "]}," Celluloid Cell ExitHandler call":{"type":"method","name":"call","children":[],"call":["@subject send ","event reason ","event actor ","@behavior task "]}," Celluloid Cell ExitHandler initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid SyncCall response":{"type":"method","name":"response","children":[],"call":["Celluloid  suspend "]}," Celluloid Call check":{"type":"method","name":"check","children":[],"call":[" raise ","AbortError  new ","@arguments size "," arguments size < "," arguments size "," arguments ","arity -@ - ","arity -@ ","arity < ","@arguments size != ","arity >= ","obj method arity ","obj method ","obj inspect ","obj respond_to? "," fail ","meth arity ","obj object_id to_s ","obj object_id ","obj class ","e set_backtrace "," caller << ","meth name ","meth source_location join ","meth source_location "," caller ","ArgumentError  new "," raisArgumentError  new  ","AbortError  nArgumentError  new w ","@argumArgumentError  new nts sizArgumentError  new  "," argumArgumentError  new nts sizArgumentError  new  < "," argumArgumentError  new nts sizArgumentError  new  "," argumArgumentError  new nts ","obj method arity  -@ - ","meth arity  -@ - ","obj method arity  -@ ","meth arity  -@ ","obj method arity  < ","meth arity  < ","@argumArgumentError  new nts sizArgumentError  new  != ","obj method arity  >= ","meth arity  >= ","obj method obj method arity  ","obj method meth arity  ","obj obj method od arity ","obj mArgumentError  new thod arity ","obj obj method od ","obj mArgumentError  new thod ","obj inspArgumentError  new ct ","obj rArgumentError  new spond_to? ","meth obj method arity  ","meth meth arity  ","obj method  arity ","mArgumentError  new th arity ","obj objArgumentError  new ct_id to_s ","obj objArgumentError  new ct_id ","ArgumentError  new  sArgumentError  new t_backtracArgumentError  new  "," callArgumentError  new r << ","obj method  name ","mArgumentError  new th namArgumentError  new  ","obj method  source_location join ","mArgumentError  new th sourcArgumentError  new _location join ","obj method  source_location ","mArgumentError  new th sourcArgumentError  new _location "," callArgumentError  new r ","ArgumArgumentError  new ntError  nArgumentError  new w "]}," Celluloid ActorSystem shutdown_timeout":{"type":"method","name":"shutdown_timeout","children":[],"call":["Celluloid  shutdown_timeout "]}," Celluloid ActorSystem assert_inactive":{"type":"method","name":"assert_inactive","children":[],"call":["@internal_pool assert_inactive ","@group assert_inactive "]}," Celluloid ActorSystem shutdown":{"type":"method","name":"shutdown","children":[],"call":[" clear_registry ","@internal_pool kill ","Actor  kill ","actors each ","Logger  error "," shutdown_timeout ","@internal_pool shutdown ","Actor  join ","actor terminate! ","Logger  debug ","actors size > ","actors size ","Timeout  timeout "," running ","@group shutdown ","RUBY_ENGINE  == ","RUBY_PLATFORM  == ","Internals Logger  error ","Internals Logger  debug "," running  each "," running  size > "," running  size "]}," Celluloid ActorSystem running?":{"type":"method","name":"running?","children":[],"call":["@internal_pool running? ","@group active? "]}," Celluloid ActorSystem running":{"type":"method","name":"running","children":[],"call":["actors << ","t actor behavior_proxy ","t actor ","t actor respond_to? ","t role == ","t role ","@internal_pool each ","actor behavior_proxy ","actor respond_to? ","@group each ","t actor s << ","t actor behavior_actor behavior_proxy  ","t t actor  behavior_proxy ","t t actor  ","t t actor  respond_to? ","actor behavior_actor behavior_proxy  ","t actor  behavior_proxy ","t actor  respond_to? "]}," Celluloid ActorSystem clear_registry":{"type":"method","name":"clear_registry","children":[],"call":["@registry clear "]}," Celluloid ActorSystem registered":{"type":"method","name":"registered","children":[],"call":["@registry names "]}," Celluloid ActorSystem stack_dump":{"type":"method","name":"stack_dump","children":[],"call":["Celluloid StackDump  new ","Internals Stack Dump  new "]}," Celluloid ActorSystem get_thread":{"type":"method","name":"get_thread","children":[],"call":["Thread  current []= ","Thread  current ","@internal_pool get ","@group get "]}," Celluloid ActorSystem within":{"type":"method","name":"within","children":[],"call":["Thread  current []= ","Thread  current ","Thread  current [] "]}," Celluloid ActorSystem start":{"type":"method","name":"start","children":[],"call":["Celluloid IncidentReporter  supervise_as ","Celluloid Notifications Fanout  supervise_as "," within "," root_configuration deploy "," root_configuration ","Supervision Service Root  define "]}," Celluloid ActorSystem initialize":{"type":"method","name":"initialize","children":[],"call":["Registry  new ","InternalPool  new ","Internals Registry  new ","Celluloid  group_class new ","Celluloid  group_class "]}," Celluloid Actor default_exit_handler":{"type":"method","name":"default_exit_handler","children":[],"call":[" raise ","event reason "," fail "]}," Celluloid Actor handle":{"type":"method","name":"handle","children":[],"call":["@handlers handle "]}," Celluloid Actor behavior_proxy":{"type":"method","name":"behavior_proxy","children":[],"call":["@behavior proxy "]}," Celluloid Actor start":{"type":"method","name":"start","children":[],"call":["Celluloid Probe  actor_created ","ActorProxy  new "," run "," setup_thread ","ThreadHandle  new ","Proxy Actor  new ","Internals ThreadHandle  new ","Celluloid Actor Manager  actor_created "]}," Celluloid Actor registered_name":{"type":"method","name":"registered_name","children":[],"call":["actor name "," raise ","Thread  current [] ","Thread  current "," fail ","Thread  current []  name "]}," Celluloid InstanceMethods __arity":{"type":"method","name":"__arity","children":[],"call":[" method arity "," method "]}," Celluloid public_registry":{"type":"method","name":"public_registry","children":[],"call":[" actor_system public_registry "," actor_system "]}," Celluloid stack_summary":{"type":"method","name":"stack_summary","children":[],"call":[" actor_system stack_summary print "," actor_system stack_summary "," actor_system "]}," Celluloid Thread <<":{"type":"method","name":"<<","children":[],"call":[" [] << "," [] "]}," Celluloid Task Threaded backtrace":{"type":"method","name":"backtrace","children":[],"call":["@thread backtrace "]}," Celluloid Task Threaded deliver":{"type":"method","name":"deliver","children":[],"call":[" raise "," fail ","@exception_queue pop ","@exception_queue size > ","@exception_queue size ","@yield_cond wait ","@resume_queue push ","@yield_mutex synchronize ","@thread alive? ","@exception_queue empty? "]}," Celluloid Task Threaded signal":{"type":"method","name":"signal","children":[],"call":["@resume_queue pop ","@yield_cond signal ","@yield_mutex synchronize "]}," Celluloid Task Threaded create":{"type":"method","name":"create","children":[],"call":["@yield_cond signal ","@yield_mutex synchronize ","@exception_queue << "," fail ","ex is_a? ","@resume_queue pop ","Internals ThreadHandle  new ","Thread  current [] ","Thread  current "," raise ","@yield_mut@resume_queue pop  synchronize ","@@resume_queue pop ception_queue << ","@resume_queue pop  is_a? "]}," Celluloid Task Threaded initialize":{"type":"method","name":"initialize","children":[],"call":["ConditionVariable  new ","Mutex  new ","Queue  new "]}," Celluloid Task Fibered backtrace":{"type":"method","name":"backtrace","children":[],"call":[" class "]}," Celluloid Task Fibered terminate":{"type":"method","name":"terminate","children":[],"call":[]}," Celluloid Task Fibered deliver":{"type":"method","name":"deliver","children":[],"call":[" raise ","@fiber resume "," meta [] "," meta "]}," Celluloid Task Fibered signal":{"type":"method","name":"signal","children":[],"call":["Fiber  yield "]}," Celluloid Task Fibered create":{"type":"method","name":"create","children":[],"call":["Fiber  yield ","RUBY_PLATFORM  == ","Thread  current []= ","Thread  current ","Fiber  new ","Thread  current [] ","RUBY_ENGINE  == "]}," Celluloid SystemEvent LinkingEvent initialize":{"type":"method","name":"initialize","children":[],"call":[" fail ","(sym :link) include? ","type to_sym "," raise "]}," Celluloid Proxy Sync method_missing":{"type":"method","name":"method_missing","children":[],"call":["call value ","@mailbox << ","Call Sync  new "," Celluloid  mailbox ","args unshift ","@mailbox == "," Thread  current [] "," Thread  current "," fail ","@mailbox alive? ","Call Sync  new  value "]}," Celluloid Proxy Sync respond_to?":{"type":"method","name":"respond_to?","children":[],"call":[" method_missing "," __class__ instance_methods include? "," __class__ instance_methods "," __class__ "]}," Celluloid Proxy Sync inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Celluloid Proxy Sync initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid Proxy Sync __class__":{"type":"method","name":"__class__","children":[],"call":[]}," Celluloid Proxy Future method_missing":{"type":"method","name":"method_missing","children":[],"call":["@mailbox << ","Call Sync  new "," Celluloid Future  new "," fail "," block_given? ","@mailbox alive? "]}," Celluloid Proxy Future inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Celluloid Proxy Future initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid Proxy Future __class__":{"type":"method","name":"__class__","children":[],"call":[]}," Celluloid Proxy Cell terminate!":{"type":"method","name":"terminate!","children":[],"call":["@actor_proxy terminate! "]}," Celluloid Proxy Cell terminate":{"type":"method","name":"terminate","children":[],"call":["@actor_proxy terminate "]}," Celluloid Proxy Cell thread":{"type":"method","name":"thread","children":[],"call":["@actor_proxy thread "]}," Celluloid Proxy Cell dead?":{"type":"method","name":"dead?","children":[],"call":["@actor_proxy dead? "]}," Celluloid Proxy Cell alive?":{"type":"method","name":"alive?","children":[],"call":["@actor_proxy alive? "]}," Celluloid Proxy Cell future":{"type":"method","name":"future","children":[],"call":["@future_proxy method_missing "]}," Celluloid Proxy Cell async":{"type":"method","name":"async","children":[],"call":["@async_proxy method_missing "]}," Celluloid Proxy Cell method":{"type":"method","name":"method","children":[],"call":["Internals Method  new "]}," Celluloid Proxy Cell inspect":{"type":"method","name":"inspect","children":[],"call":[" method_missing "]}," Celluloid Proxy Cell _send_":{"type":"method","name":"_send_","children":[],"call":[" method_missing "]}," Celluloid Proxy Cell initialize":{"type":"method","name":"initialize","children":[],"call":["Future  new ","Async  new ","Sync  new "]}," Celluloid Proxy Cell __class__":{"type":"method","name":"__class__","children":[],"call":[]}," Celluloid Proxy Block to_proc":{"type":"method","name":"to_proc","children":[],"call":[" fail ","task suspend ","@mailbox << ","Call Block  new ","Celluloid Actor  current mailbox ","Celluloid Actor  current ","Thread  current [] ","Thread  current "," lambda ","@execution == ","Thread  current []  suspend "]}," Celluloid Proxy Block initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid Proxy Async method_missing":{"type":"method","name":"method_missing","children":[],"call":["@mailbox << ","Call Async  new "," fail "," block_given? ","args unshift ","@mailbox == "," Thread  current [] "," Thread  current "]}," Celluloid Proxy Async inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Celluloid Proxy Async initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid Proxy Async __class__":{"type":"method","name":"__class__","children":[],"call":[]}," Celluloid Proxy Actor terminate!":{"type":"method","name":"terminate!","children":[],"call":["@mailbox << ","TerminationRequest  new "," Kernel  raise "," alive? "]}," Celluloid Proxy Actor terminate":{"type":"method","name":"terminate","children":[],"call":[" Celluloid Actor  join "," terminate! "]}," Celluloid Proxy Actor dead?":{"type":"method","name":"dead?","children":[],"call":[" alive? ! "," alive? "]}," Celluloid Proxy Actor alive?":{"type":"method","name":"alive?","children":[],"call":["@mailbox alive? "]}," Celluloid Proxy Actor inspect":{"type":"method","name":"inspect","children":[],"call":["@mailbox address "]}," Celluloid Proxy Actor initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid Proxy Actor __class__":{"type":"method","name":"__class__","children":[],"call":[]}," Celluloid Proxy Abstract __class__":{"type":"method","name":"__class__","children":[],"call":[]}," Celluloid Notices output":{"type":"method","name":"output","children":[],"call":["Celluloid Internals Logger  send ","@@notices each "]}," Celluloid Notices backported":{"type":"method","name":"backported","children":[],"call":["@@notices << "]}," Celluloid Mailbox Evented shutdown":{"type":"method","name":"shutdown","children":[],"call":["@reactor shutdown "]}," Celluloid Mailbox Evented next_message":{"type":"method","name":"next_message","children":[],"call":["@mutex unlock ","@mutex lock "]}," Celluloid Mailbox Evented check":{"type":"method","name":"check","children":[],"call":[" raise ","@reactor run_once "," next_message "," next_ next_message  "]}," Celluloid Mailbox Evented <<":{"type":"method","name":"<<","children":[],"call":[" dead_letter ","Internals Logger  crash ","@reactor wakeup ","current_actor mailbox == ","current_actor mailbox ","Thread  current [] ","Thread  current ","@mutex unlock ","@messages << ","@messages unshift ","message is_a? "," mailbox_full ","@mutex lock ","Thread  current []  mailbox == ","Thread  current []  mailbox "]}," Celluloid Mailbox Evented initialize":{"type":"method","name":"initialize","children":[],"call":["reactor_class new "]}," Celluloid Group shutdown":{"type":"method","name":"shutdown","children":[],"call":[" fail "," raise "]}," Celluloid Group create":{"type":"method","name":"create","children":[],"call":[" fail "," raise "]}," Celluloid Group get":{"type":"method","name":"get","children":[],"call":[" fail "," raise "]}," Celluloid Group active?":{"type":"method","name":"active?","children":[],"call":[]}," Celluloid Group each_actor":{"type":"method","name":"each_actor","children":[],"call":["(send\n  (send\n    (send nil :to_a) :lazy) :select) each ","t [] == ","t [] "," to_a lazy select "," to_a lazy "," to_a "]}," Celluloid Group purge":{"type":"method","name":"purge","children":[],"call":["thread kill ","@group delete ","@mutex synchronize "]}," Celluloid Group to_a":{"type":"method","name":"to_a","children":[],"call":["@group dup ","@mutex synchronize "," forked? "]}," Celluloid Group each":{"type":"method","name":"each","children":[],"call":[" to_a each "," to_a "]}," Celluloid Group assert_inactive":{"type":"method","name":"assert_inactive","children":[],"call":[" fail ","Celluloid  logger warn ","Celluloid  logger ","RUBY_PLATFORM  == "," active? "," raise "]}," Celluloid Group assert_active":{"type":"method","name":"assert_active","children":[],"call":[" fail "," active? "," raise "]}," Celluloid Group Spawner instantiate":{"type":"method","name":"instantiate","children":[],"call":["@group << ","@mutex synchronize ","Thread  current [] []= ","Time  now ","Thread  current [] ","Thread  current ","Thread  current [] [] == ","Thread  current [] [] ","Internals Logger  crash ","proc call ","Thread  current []= ","Thread  new ","Thread  exit ","@group delete ","Thread  current [] == "]}," Celluloid Group Spawner busy?":{"type":"method","name":"busy?","children":[],"call":["(send\n  (send nil :to_a) :select) any? ","t [] [] == ","t [] [] ","t [] "," to_a select "," to_a ","t [] == "]}," Celluloid Group Spawner idle?":{"type":"method","name":"idle?","children":[],"call":["(send\n  (send nil :to_a) :select) empty? ","t [] [] == ","t [] [] ","t [] "," to_a select "," to_a ","t [] == "]}," Celluloid Group Spawner shutdown":{"type":"method","name":"shutdown","children":[],"call":["queue pop join ","queue pop ","queue empty? "," loop ","queue << ","th kill ","@group shift ","@group empty? ","Queue  new ","@mutex synchronize ","Thread  pass ","Queue  new  pop join ","Queue  new  pop ","Queue  new  empty? ","Queue  new  << ","@group shift  kill "]}," Celluloid Group Spawner get":{"type":"method","name":"get","children":[],"call":[" instantiate "," fail ","ArgumentError  new "," block_given? "," assert_active "," raise "]}," Celluloid Group Spawner initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid Group Pool finalize":{"type":"method","name":"finalize","children":[],"call":[]}," Celluloid Group Pool clean_thread_locals":{"type":"method","name":"clean_thread_locals","children":[],"call":["thread []= ","key == ","thread keys each ","thread keys "]}," Celluloid Group Pool create":{"type":"method","name":"create","children":[],"call":["@group << ","thread []= "," put ","Internals Logger  crash ","proc call ","queue pop ","Thread  new ","Queue  new ","queue pop  call ","Queue  new  pop "]}," Celluloid Group Pool shutdown":{"type":"method","name":"shutdown","children":[],"call":["@idle_threads clear ","@group shift kill ","@group shift ","@group empty? ","thread [] << ","thread [] ","@group each "," finalize ","@mutex synchronize "]}," Celluloid Group Pool put":{"type":"method","name":"put","children":[],"call":[" clean_thread_locals ","@idle_threads length ","@idle_threads push ","@group delete ","thread [] << ","thread [] "," idle_size + >= "," idle_size + "," idle_size ","thread busy= ","@mutex synchronize "]}," Celluloid Group Pool get":{"type":"method","name":"get","children":[],"call":["thread [] << ","thread [] ","thread busy= ","@idle_threads length ","@idle_threads pop "," create ","@idle_threads empty? ","thread status "," assert_active ","@mutex synchronize ","@idle_threads pop  [] << "," create  [] << ","@idle_threads pop  [] "," create  [] ","@idle_threads pop  busy= "," create  busy= ","@idle_@idle_threads pop s length ","@idle_ create s length ","@idle_@idle_threads pop s pop ","@idle_ create s pop ","@idle_@idle_threads pop s empty? ","@idle_ create s empty? ","@idle_threads pop  status "," create  status "]}," Celluloid Group Pool busy?":{"type":"method","name":"busy?","children":[],"call":[" busy_size count > "," busy_size count "," busy_size "]}," Celluloid Group Pool idle?":{"type":"method","name":"idle?","children":[],"call":[" busy_size count == "," busy_size count "," busy_size "]}," Celluloid Group Pool initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "]}," Celluloid Group Manager garbage_collector":{"type":"method","name":"garbage_collector","children":[],"call":[" puts ","ex backtrace first ","ex backtrace ","@group each "]}," Celluloid Group Manager manage!":{"type":"method","name":"manage!","children":[],"call":[" garbage_collector "," every "]}," Celluloid Cell dispatch":{"type":"method","name":"dispatch","children":[],"call":[]}," Celluloid Call Sync wait":{"type":"method","name":"wait","children":[],"call":["message dispatch ","message respond_to? ","Thread  current [] handle_system_event ","Thread  current [] ","Thread  current ","message is_a? ","msg call == ","msg call ","msg respond_to? ","Celluloid  mailbox receive ","Celluloid  mailbox "," loop "]}," Celluloid Call Sync value":{"type":"method","name":"value","children":[],"call":[" response value "," response "]}," Celluloid Call Sync response":{"type":"method","name":"response","children":[],"call":["Celluloid  suspend "]}," Celluloid Call Sync respond":{"type":"method","name":"respond","children":[],"call":["@sender << "]}," Celluloid Call Sync cleanup":{"type":"method","name":"cleanup","children":[],"call":[" respond ","Internals Response Error  new ","DeadActorError  new "," method "]}," Celluloid Call Sync dispatch":{"type":"method","name":"dispatch","children":[],"call":["Internals CallChain  current_id= "," raise ","ex is_a? "," respond ","Internals Response Error  new ","Internals Response Success  new "]}," Celluloid Call Sync initialize":{"type":"method","name":"initialize","children":[],"call":["Celluloid  uuid "]}," Celluloid Call Block dispatch":{"type":"method","name":"dispatch","children":[],"call":["@sender << ","Internals Response Block  new ","@block_proxy block call ","@block_proxy block "]}," Celluloid Call Block call":{"type":"method","name":"call","children":[],"call":["@block_proxy call "]}," Celluloid Call Block initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid Call Async dispatch":{"type":"method","name":"dispatch","children":[],"call":["Internals CallChain  current_id= ","Internals Logger  debug ","Internals Logger  format_exception ","ex cause ","obj class ","Celluloid  uuid "]}," Celluloid ActorSystem stack_summary":{"type":"method","name":"stack_summary","children":[],"call":["Internals Stack Summary  new "]}," Celluloid ActorSystem root_configuration":{"type":"method","name":"root_configuration","children":[],"call":[]}," Celluloid ActorSystem root_services":{"type":"method","name":"root_services","children":[],"call":[]}," Celluloid SystemEvent handler":{"type":"method","name":"handler","children":[],"call":["@@system_events []= ","Actor  send "," name split last gsub gsub tr downcase "," name split last gsub gsub tr "," name split last gsub gsub "," name split last gsub "," name split last "," name split "," name "," fail "," raise "]}," Celluloid SystemEvent handle":{"type":"method","name":"handle","children":[],"call":["@@system_events [] "]}," Sync method_missing":{"type":"method","name":"method_missing","children":[],"call":["call value ","@mailbox << "," Celluloid Call Sync  new "," Celluloid  mailbox ","args unshift ","@mailbox == "," Thread  current [] "," Thread  current "," fail ","@mailbox alive? "," raise "," Celluloid Call Sync  new  value "]}," Sync respond_to?":{"type":"method","name":"respond_to?","children":[],"call":[" method_missing "," __class__ instance_methods include? "," __class__ instance_methods "," __class__ "]}," Sync inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Sync initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Sync __class__":{"type":"method","name":"__class__","children":[],"call":[]}," Future method_missing":{"type":"method","name":"method_missing","children":[],"call":["@mailbox << "," Celluloid Call Sync  new "," Celluloid Future  new "," fail "," block_given? ","@mailbox alive? "," raise "]}," Future inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Future initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Future __class__":{"type":"method","name":"__class__","children":[],"call":[]}," Cell terminate!":{"type":"method","name":"terminate!","children":[],"call":["@actor_proxy terminate! "]}," Cell terminate":{"type":"method","name":"terminate","children":[],"call":["@actor_proxy terminate "]}," Cell thread":{"type":"method","name":"thread","children":[],"call":["@actor_proxy thread "]}," Cell dead?":{"type":"method","name":"dead?","children":[],"call":["@actor_proxy dead? "]}," Cell alive?":{"type":"method","name":"alive?","children":[],"call":["@actor_proxy alive? "]}," Cell future":{"type":"method","name":"future","children":[],"call":["@future_proxy method_missing "]}," Cell async":{"type":"method","name":"async","children":[],"call":["@async_proxy method_missing "]}," Cell method":{"type":"method","name":"method","children":[],"call":[" Celluloid Internals Method  new "]}," Cell inspect":{"type":"method","name":"inspect","children":[],"call":[" method_missing "]}," Cell _send_":{"type":"method","name":"_send_","children":[],"call":[" method_missing "]}," Cell initialize":{"type":"method","name":"initialize","children":[],"call":[" Celluloid Proxy Future  new "," Celluloid Proxy Async  new "," Celluloid Proxy Sync  new "]}," Cell __class__":{"type":"method","name":"__class__","children":[],"call":[]}," Block to_proc":{"type":"method","name":"to_proc","children":[],"call":[" fail ","task suspend ","@mailbox << "," Celluloid Call Block  new "," Celluloid Actor  current mailbox "," Celluloid Actor  current ","Thread  current [] ","Thread  current "," lambda ","@execution == "," raise ","Thread  current []  suspend "]}," Block initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Async method_missing":{"type":"method","name":"method_missing","children":[],"call":["@mailbox << "," Celluloid Call Async  new "," fail "," block_given? ","args unshift ","@mailbox == "," Thread  current [] "," Thread  current "," raise "]}," Async inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Async initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Async __class__":{"type":"method","name":"__class__","children":[],"call":[]}," Actor terminate!":{"type":"method","name":"terminate!","children":[],"call":["@mailbox << "," Celluloid TerminationRequest  new "," Kernel  raise "," alive? "]}," Actor terminate":{"type":"method","name":"terminate","children":[],"call":[" Celluloid Actor  join "," terminate! "]}," Actor dead?":{"type":"method","name":"dead?","children":[],"call":[" alive? ! "," alive? "]}," Actor alive?":{"type":"method","name":"alive?","children":[],"call":["@mailbox alive? "]}," Actor inspect":{"type":"method","name":"inspect","children":[],"call":["@mailbox address "]}," Actor initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Actor __class__":{"type":"method","name":"__class__","children":[],"call":[]}," Abstract __class__":{"type":"method","name":"__class__","children":[],"call":[" Celluloid Proxy  class_of "]}," Celluloid Future cancel":{"type":"method","name":"cancel","children":[],"call":["@mutex synchronize "," signal ","ErrorResponse  new ","Internals Response Error  new "]}," Celluloid Actor System shutdown_timeout":{"type":"method","name":"shutdown_timeout","children":[],"call":["Celluloid  shutdown_timeout "]}," Celluloid Actor System assert_inactive":{"type":"method","name":"assert_inactive","children":[],"call":["@group assert_inactive "]}," Celluloid Actor System shutdown":{"type":"method","name":"shutdown","children":[],"call":[" clear_registry ","@group shutdown ","Actor  kill ","actors each ","RUBY_ENGINE  == ","RUBY_PLATFORM  == ","Internals Logger  error "," shutdown_timeout ","Actor  join ","actor terminate! ","Internals Logger  debug ","actors size > ","actors size ","Timeout  timeout "," running ","actors empty? "," running  each "," running  size > "," running  size "," running  empty? "]}," Celluloid Actor System running?":{"type":"method","name":"running?","children":[],"call":["@group active? "]}," Celluloid Actor System running":{"type":"method","name":"running","children":[],"call":["actors << ","actor behavior_proxy ","actor respond_to? ","t actor ","t role == ","t role ","@group each ","t actor s << ","actor behavior_actor behavior_proxy  ","t actor  behavior_proxy ","t actor  respond_to? ","t t actor  "]}," Celluloid Actor System clear_registry":{"type":"method","name":"clear_registry","children":[],"call":["@registry clear "]}," Celluloid Actor System registered":{"type":"method","name":"registered","children":[],"call":["@registry names "]}," Celluloid Actor System stack_summary":{"type":"method","name":"stack_summary","children":[],"call":["Internals Stack Summary  new "]}," Celluloid Actor System stack_dump":{"type":"method","name":"stack_dump","children":[],"call":["Internals Stack Dump  new "]}," Celluloid Actor System get_thread":{"type":"method","name":"get_thread","children":[],"call":["Thread  current []= ","Thread  current ","@group get "]}," Celluloid Actor System within":{"type":"method","name":"within","children":[],"call":["Thread  current []= ","Thread  current ","Thread  current [] "]}," Celluloid Actor System start":{"type":"method","name":"start","children":[],"call":[" root_configuration deploy "," root_configuration ","Supervision Service Root  define "," within "]}," Celluloid Actor System initialize":{"type":"method","name":"initialize","children":[],"call":["Internals Registry  new ","Celluloid  group_class new ","Celluloid  group_class "]}," Celluloid Actor System root_configuration":{"type":"method","name":"root_configuration","children":[],"call":[]}," Celluloid Actor System root_services":{"type":"method","name":"root_services","children":[],"call":[]}," AbstractCall inspect":{"type":"method","name":"inspect","children":[],"call":[" __class__ "]}," AbstractCall __klass__":{"type":"method","name":"__klass__","children":[],"call":[]}," AbstractCall hash":{"type":"method","name":"hash","children":[],"call":["@mailbox hash "]}," AbstractCall eql?":{"type":"method","name":"eql?","children":[],"call":["@mailbox eql? ","other mailbox "," __class__ eql? "," Celluloid Proxy  class_of "," __class__ "]}," AbstractCall initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Proxy class_of":{"type":"method","name":"class_of","children":[],"call":[]}," Celluloid Group forked?":{"type":"method","name":"forked?","children":[],"call":["@pid != "]}," Celluloid Supervision Configuration options":{"type":"method","name":"options","children":[],"call":[" valid? ","configuration []= ","Container Behavior  configure ","configuration is_a? ","config merge ","Configuration  valid? ","v nil? ","options reject! ","options [] compact! ","options [] ","options [] is_a? ","options []= "," parse merge "," parse ","args merge! ","args is_a? ","config merge  []= ","config merge  is_a? "," parse merge  reject! "," parse merge  [] compact! "," parse merge  [] "," parse merge  [] is_a? "," parse merge  []= "]}," Celluloid Supervision Configuration valid?":{"type":"method","name":"valid?","children":[],"call":[" raise ","__a == ","__arity abs ","__a >= ","__arity abs - ","__arity < ","configuration [] allocate method arity ","configuration [] allocate method ","configuration [] allocate ","configuration [] ","configuration [] count ","configuration [] is_a? "," arity each "," arity ","configuration key? "," parameters each "," parameters ","configuration [] allocate method arity  abs ","configuration [] allocate method arity  abs - ","configuration [] allocate method arity  < "]}," Celluloid Supervision Container supervise":{"type":"method","name":"supervise","children":[],"call":[" add ","Configuration  options "," blocks << ","container add "," lambda "," blocks ","container supervise "]}," Celluloid Supervision router":{"type":"method","name":"router","children":[],"call":["Celluloid  services "]}," Celluloid supervise":{"type":"method","name":"supervise","children":[],"call":["supervisor supervise ","Supervision  router ","Supervision  router  supervise "]}," Celluloid Supervision Service Root provider":{"type":"method","name":"provider","children":[],"call":["Celluloid  root_services "]}," Celluloid Supervision Service Root deploy":{"type":"method","name":"deploy","children":[],"call":[]}," Celluloid Supervision Service Root define":{"type":"method","name":"define","children":[],"call":["Celluloid  actor_system root_configuration ","Celluloid  actor_system "]}," Celluloid Supervision Container finalize":{"type":"method","name":"finalize","children":[],"call":["@actors delete ","instance terminate ","@actors reverse_each "]}," Celluloid Supervision Container shutdown":{"type":"method","name":"shutdown","children":[],"call":[" finalize "]}," Celluloid Supervision Container restart_actor":{"type":"method","name":"restart_actor","children":[],"call":["@actors delete ","instance cleanup ","instance restart "," exclusive "," raise "," find ","@state == "," find  cleanup "," find  restart "]}," Celluloid Supervision Container []":{"type":"method","name":"[]","children":[],"call":["@registry [] "]}," Celluloid Supervision Container find":{"type":"method","name":"find","children":[],"call":["instance actor == ","instance actor ","@actors find "]}," Celluloid Supervision Container actors":{"type":"method","name":"actors","children":[],"call":["@actors map "]}," Celluloid Supervision Container remove":{"type":"method","name":"remove","children":[],"call":["instance terminate "," find ","Celluloid Actor  [] ","actor is_a? "," find  terminate ","Celluloid Actor  []  is_a? "]}," Celluloid Supervision Container remove_accessors":{"type":"method","name":"remove_accessors","children":[],"call":[]}," Celluloid Supervision Container add_accessors":{"type":"method","name":"add_accessors","children":[],"call":["@registry [] ","configuration [] "," define_method "," class instance_eval "," class "," methods include? "," methods "]}," Celluloid Supervision Container add":{"type":"method","name":"add","children":[],"call":["Actor  current "," add_accessors ","@actors << ","Instance  new ","configuration merge ","Configuration  valid? "]}," Celluloid Supervision Container initialize":{"type":"method","name":"initialize","children":[],"call":[" current_actor "," block_given? ","options delete ","Celluloid  actor_system registry ","Celluloid  actor_system ","options is_a? "]}," Celluloid Supervision Container run":{"type":"method","name":"run","children":[],"call":["Internals Logger  error "," sleep ","supervisor alive? "," run! "," loop "," run!  alive? "]}," Celluloid Supervision Container run!":{"type":"method","name":"run!","children":[],"call":["block call "," blocks each "," blocks "," new "]}," Celluloid Supervision Container blocks":{"type":"method","name":"blocks","children":[],"call":[]}," Celluloid Supervision Container top":{"type":"method","name":"top","children":[],"call":["options delete "]}," Celluloid Supervision Container deploy":{"type":"method","name":"deploy","children":[],"call":["Configuration  deploy "," top "]}," Celluloid Supervision Container define":{"type":"method","name":"define","children":[],"call":["Configuration  define "," top "]}," Celluloid Supervision Container Pool method":{"type":"method","name":"method","children":[],"call":["@klass instance_method ","meth to_sym "]}," Celluloid Supervision Container Pool method_missing":{"type":"method","name":"method_missing","children":[],"call":[" _send_ "," respond_to? "]}," Celluloid Supervision Container Pool respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["found receiver protected_methods include? ","found receiver protected_methods ","found receiver ","found receiver public_methods include? ","found receiver public_methods ","found owner protected_instance_methods include? ","found owner protected_instance_methods ","found owner ","found owner public_instance_methods include? ","found owner public_instance_methods ","found is_a? "," method "," method  receiver protected_methods include? "," method  receiver protected_methods "," method  receiver "," method  receiver public_methods include? "," method  receiver public_methods "," method  owner protected_instance_methods include? "," method  owner protected_instance_methods "," method  owner "," method  owner public_instance_methods include? "," method  owner public_instance_methods "," method  is_a? "]}," Celluloid Supervision Container Pool __crash_handler__":{"type":"method","name":"__crash_handler__","children":[],"call":[" signal ","@idle << "," __spawn_actor__ ","@actors delete ","@idle delete ","@busy delete "]}," Celluloid Supervision Container Pool __provision_actor__":{"type":"method","name":"__provision_actor__","children":[],"call":["@busy << ","@idle shift ","Thread  current [] handle_message ","Thread  current [] ","Thread  current ","msg is_a? "," receive "," exclusive ","@idle empty? ","@mutex synchronize ","Task  current guard_warnings= ","Task  current "]}," Celluloid Supervision Container Pool __spawn_actor__":{"type":"method","name":"__spawn_actor__","children":[],"call":["@actors add ","@mutex synchronize ","@klass new_link ","@@klass new_link s add "]}," Celluloid Supervision Container Pool __state":{"type":"method","name":"__state","children":[],"call":[" __idle? "," __busy? "]}," Celluloid Supervision Container Pool __idle":{"type":"method","name":"__idle","children":[],"call":["@mutex synchronize "]}," Celluloid Supervision Container Pool __busy":{"type":"method","name":"__busy","children":[],"call":["@mutex synchronize "]}," Celluloid Supervision Container Pool __busy?":{"type":"method","name":"__busy?","children":[],"call":["@busy include? ","@mutex synchronize "]}," Celluloid Supervision Container Pool __idle?":{"type":"method","name":"__idle?","children":[],"call":["@idle include? ","@mutex synchronize "]}," Celluloid Supervision Container Pool idle_size":{"type":"method","name":"idle_size","children":[],"call":["@idle length ","@mutex synchronize "]}," Celluloid Supervision Container Pool busy_size":{"type":"method","name":"busy_size","children":[],"call":["@busy length ","@mutex synchronize "]}," Celluloid Supervision Container Pool size=":{"type":"method","name":"size=","children":[],"call":["actor terminate ","@actors delete ","@busy delete "," unlink "," __provision_actor__ ","(send\n  (send nil :size) :-\n  (lvar :new_size)) times "," size - "," size ","@idle << "," __spawn_actor__ ","delta times ","new_size - ","new_size > ","(int 0) max "," __provision_actor__  terminate ","@ __provision_actor__ s delete "," __provision_ __provision_actor__ __ ","(send\n  (send nil :size) :-\n  (lvar :(int 0) max )) times "," __spawn_ __provision_actor__ __ ","new_size -  times ","(int 0) max  - ","(int 0) max  > "]}," Celluloid Supervision Container Pool inspect":{"type":"method","name":"inspect","children":[],"call":[" _send_ "]}," Celluloid Supervision Container Pool to_s":{"type":"method","name":"to_s","children":[],"call":[" _send_ "]}," Celluloid Supervision Container Pool methods":{"type":"method","name":"methods","children":[],"call":[" _send_ "]}," Celluloid Supervision Container Pool kind_of?":{"type":"method","name":"kind_of?","children":[],"call":[" _send_ "]}," Celluloid Supervision Container Pool is_a?":{"type":"method","name":"is_a?","children":[],"call":[" _send_ "]}," Celluloid Supervision Container Pool name":{"type":"method","name":"name","children":[],"call":[" _send_ "]}," Celluloid Supervision Container Pool _send_":{"type":"method","name":"_send_","children":[],"call":[" signal ","@busy delete ","@idle << ","actor alive? "," abort "," __provision_actor__ "," wait ","actor _send_ "," __provision_actor__  alive? "," __provision_ __provision_actor__ __ "," __provision_actor__  _send_ "]}," Celluloid Supervision Container Pool __shutdown__":{"type":"method","name":"__shutdown__","children":[],"call":["terminator value ","terminators compact each ","terminators compact ","actor future ","@actors map "]}," Celluloid Supervision Container Pool initialize":{"type":"method","name":"initialize","children":[],"call":[" __spawn_actor__ ","@size times map ","@size times "," Array ","options [] ","(or\n  (send\n    (const nil :Celluloid) :cores)\n  (int 2)) max ","Celluloid  cores ","Mutex  new ","Set  new "]}," Celluloid Supervision Container Instance prepare_args":{"type":"method","name":"prepare_args","children":[],"call":[" Array ","args call ","args respond_to? ","args call  call ","args call  respond_to? "]}," Celluloid Supervision Container Instance invoke_injection":{"type":"method","name":"invoke_injection","children":[],"call":[" instance_eval ","block is_a? ","@injections [] ","@injections []  is_a? "]}," Celluloid Supervision Container Instance remove_accessors":{"type":"method","name":"remove_accessors","children":[],"call":[" remove_method ","Celluloid Actor System  instance_eval ","Celluloid  instance_eval ","@configuration [] each ","@configuration [] ","@configuration [] is_a? "]}," Celluloid Supervision Container Instance add_accessors":{"type":"method","name":"add_accessors","children":[],"call":["Celluloid  actor_system [] ","Celluloid  actor_system "," define_method ","Celluloid Actor System  instance_exec ","@configuration [] ","Celluloid  instance_exec ","@configuration [] each ","@configuration [] is_a? "," remove_accessors "]}," Celluloid Supervision Container Instance cleanup":{"type":"method","name":"cleanup","children":[],"call":["@registry delete "]}," Celluloid Supervision Container Instance terminate":{"type":"method","name":"terminate","children":[],"call":[" cleanup ","@actor terminate "]}," Celluloid Supervision Container Instance restart":{"type":"method","name":"restart","children":[],"call":[" invoke_injection "," start "]}," Celluloid Supervision Container Instance start":{"type":"method","name":"start","children":[],"call":[" raise ","Internals Logger  error ","ex class "," invoke_injection ","@registry add ","@type send "]}," Celluloid Supervision Container Instance initialize":{"type":"method","name":"initialize","children":[],"call":[" start "," invoke_injection "," add_accessors ","@configuration [] "," prepare_args ","configuration delete "]}," Celluloid Supervision Container Behavior ClassMethods behavior_injections":{"type":"method","name":"behavior_injections","children":[],"call":["Behavior  injections [] ","Behavior  injections "]}," Celluloid Supervision Container Behavior ClassMethods identifier!":{"type":"method","name":"identifier!","children":[],"call":["Configuration  save_defaults ","Configuration  alias! ","aliases each ","Configuration  parameter! ","Behavior  []= "]}," Celluloid Supervision Container Behavior configure":{"type":"method","name":"configure","children":[],"call":[" proc ","options [] ","@@injections [] [] ","@@injections [] ","@@injections [] include? "," raise "," parameter ","@@behaviors map ","@@@@injections [] [] s [] [] ","@@@@injections [] [] s [] ","@@@@injections [] [] s [] include? "]}," Celluloid Supervision Container Behavior parameter":{"type":"method","name":"parameter","children":[],"call":[" raise ","options key? ","p count ","invoke << ","i == ","Configuration  aliases each_with_object ","Configuration  aliases "]}," Celluloid Supervision Container Behavior []=":{"type":"method","name":"[]=","children":[],"call":["@@behaviors []= "]}," Celluloid Supervision Container Behavior []":{"type":"method","name":"[]","children":[],"call":["@@behaviors [] "]}," Celluloid Supervision Container Behavior injections":{"type":"method","name":"injections","children":[],"call":[]}," Celluloid Supervision Container Behavior included":{"type":"method","name":"included","children":[],"call":["klass send "]}," Celluloid Supervision Container Pool pooling_options":{"type":"method","name":"pooling_options","children":[],"call":["combined []= ","e []= ","combined delete ","combined [] ","(sym :block) each_with_object ","(pair\n  (sym :type)\n  (const\n    (const\n      (const\n        (const nil :Celluloid) :Supervision) :Container) :Pool)) merge merge ","(pair\n  (sym :type)\n  (const\n    (const\n      (const\n        (const nil :Celluloid) :Supervision) :Container) :Pool)) merge ","(pair\n  (sym :type)\n  (const\n    (const\n      (const\n        (const nil :Celluloid) :Supervision) :Container) :Pool)) merge merge  []= ","(pair\n  (sym :type)\n  (const\n    (const\n      (const\n        (const nil :Celluloid) :Supervision) :Container) :Pool)) merge merge  delete ","(pair\n  (sym :type)\n  (const\n    (const\n      (const\n        (const nil :Celluloid) :Supervision) :Container) :Pool)) merge merge  [] "]}," Celluloid Supervision Container pool":{"type":"method","name":"pool","children":[],"call":[" blocks << ","container pool "," lambda "," blocks ","_ actors last ","_ actors "," supervise "," pooling_options "," supervise  actors last "," supervise  actors "," pooling supervise options "]}," Celluloid Supervision Configuration alias!":{"type":"method","name":"alias!","children":[],"call":["@@aliases []= "]}," Celluloid Supervision Configuration aliases":{"type":"method","name":"aliases","children":[],"call":[]}," Celluloid Supervision Configuration arity!":{"type":"method","name":"arity!","children":[],"call":["@@arity []= "]}," Celluloid Supervision Configuration arity":{"type":"method","name":"arity","children":[],"call":[]}," Celluloid Supervision Configuration parameter!":{"type":"method","name":"parameter!","children":[],"call":["@@parameters [] << ","@@parameters [] ","@@parameters [] include? "]}," Celluloid Supervision Configuration parameters":{"type":"method","name":"parameters","children":[],"call":["@@parameters [] ","args inject "]}," Celluloid Supervision Configuration resync_parameters":{"type":"method","name":"resync_parameters","children":[],"call":["@@defaults [] dup ","@@defaults [] ","p []= ","v dup ","@@defaults [] each_with_object "]}," Celluloid Supervision Configuration save_defaults":{"type":"method","name":"save_defaults","children":[],"call":["@@arity dup ","@@aliases dup ","p []= ","v dup ","@@parameters each_with_object "]}," Celluloid Supervision Configuration invoke_injection":{"type":"method","name":"invoke_injection","children":[],"call":[]}," Celluloid Supervision Configuration current_instance":{"type":"method","name":"current_instance","children":[],"call":["Instance  new ","@instances [] "]}," Celluloid Supervision Configuration shutdown":{"type":"method","name":"shutdown","children":[],"call":["@provider shutdown "]}," Celluloid Supervision Configuration add":{"type":"method","name":"add","children":[],"call":[" provider supervise "," provider ","Configuration  valid? "," define "]}," Celluloid Supervision Configuration increment":{"type":"method","name":"increment","children":[],"call":[]}," Celluloid Supervision Configuration define":{"type":"method","name":"define","children":[],"call":[" increment "," current_instance define "," current_instance "," include? ","configuration [] "," define ","configuration each ","configuration is_a? "," new "]}," Celluloid Supervision Configuration include?":{"type":"method","name":"include?","children":[],"call":["@instances map include? ","@instances map "]}," Celluloid Supervision Configuration export":{"type":"method","name":"export","children":[],"call":["@instances map "," current_instance to_hash "," current_instance ","@i == "]}," Celluloid Supervision Configuration merge":{"type":"method","name":"merge","children":[],"call":[" raise "," current_instance merge "," current_instance ","values is_a? "]}," Celluloid Supervision Configuration merge!":{"type":"method","name":"merge!","children":[],"call":[" raise "," current_instance merge! "," current_instance ","values is_a? "]}," Celluloid Supervision Configuration resync_accessors":{"type":"method","name":"resync_accessors","children":[],"call":[" alias_method "," remove_method "," class instance_eval "," class ","(str \"!\") each ","Configuration  aliases each ","Configuration  aliases "," current_instance send "," current_instance "," define_method ","(dsym\n  (begin\n    (lvar :key))\n  (str \"?\")) each ","(dsym\n  (begin\n    (lvar :key))\n  (str \"!\")) each ","Configuration  parameters each ","Configuration  parameters "]}," Celluloid Supervision Configuration each":{"type":"method","name":"each","children":[],"call":["@instances each "]}," Celluloid Supervision Configuration count":{"type":"method","name":"count","children":[],"call":["@instances count "]}," Celluloid Supervision Configuration deploy":{"type":"method","name":"deploy","children":[],"call":[" provider "," provider add ","instance merge ","@instances each "," define ","options any? "," define deploy "]}," Celluloid Supervision Configuration provider":{"type":"method","name":"provider","children":[],"call":[" raise ","@supervisor respond_to? ","@supervisor run! ","@supervisor is_a? "," provider ","Object  module_eval ","@supervisor to_s ","@supervisor [] run! ","@supervisor [] ","Object  module_eval  respond_to? ","Object  module_eval  run! ","Object  module_eval  is_a? ","Object  module_eval  to_s ","Object  module_eval  [] run! ","Object  module_eval  [] "]}," Celluloid Supervision Configuration initialize":{"type":"method","name":"initialize","children":[],"call":[" define ","@configuration any? ","@configuration is_a? ","@configuration fetch "," instance_eval ","options [] ","Container Behavior  configure ","options is_a? "," resync_accessors ","Instance  new "," instance_eval  any? "," instance_eval  is_a? "," instance_eval  fetch "]}," Celluloid Supervision Configuration Instance invoke_injection":{"type":"method","name":"invoke_injection","children":[],"call":[]}," Celluloid Supervision Configuration Instance delete":{"type":"method","name":"delete","children":[],"call":["@configuration delete "]}," Celluloid Supervision Configuration Instance get":{"type":"method","name":"get","children":[],"call":["@configuration [] "]}," Celluloid Supervision Configuration Instance set":{"type":"method","name":"set","children":[],"call":["@configuration []= "]}," Celluloid Supervision Configuration Instance key?":{"type":"method","name":"key?","children":[],"call":["@configuration key? "]}," Celluloid Supervision Configuration Instance merge":{"type":"method","name":"merge","children":[],"call":[" raise ","@configuration merge ","values is_a? ","values configuration "]}," Celluloid Supervision Configuration Instance merge!":{"type":"method","name":"merge!","children":[],"call":["@configuration merge ","@configuration merge  merge "]}," Celluloid Supervision Configuration Instance resync_accessors":{"type":"method","name":"resync_accessors","children":[],"call":[" alias_method "," remove_method "," class instance_eval "," class ","(str \"!\") each ","Configuration  aliases each ","Configuration  aliases ","@configuration [] "," define_method ","@configuration [] nil? ! ","@configuration [] nil? ","@configuration []= ","Configuration  parameters each ","Configuration  parameters "]}," Celluloid Supervision Configuration Instance injections!":{"type":"method","name":"injections!","children":[],"call":["@configuration []= "," proces "]}," Celluloid Supervision Configuration Instance injection!":{"type":"method","name":"injection!","children":[],"call":["@configuration [] []= ","@configuration [] "]}," Celluloid Supervision Configuration Instance define":{"type":"method","name":"define","children":[],"call":[" ready? ","Configuration  options "," invoke_injection "," raise "]}," Celluloid Supervision Configuration Instance ready?":{"type":"method","name":"ready?","children":[],"call":["@state == ","Configuration  valid? "]}," Celluloid Supervision Configuration Instance export":{"type":"method","name":"export","children":[],"call":["REMOVE_AT_EXPORT  include? ","@configuration reject "]}," Celluloid Supervision Configuration Instance initialize":{"type":"method","name":"initialize","children":[],"call":[" define ","configuration any? "," resync_accessors "]}," Celluloid Probe process_queue":{"type":"method","name":"process_queue","children":[],"call":[" dispatch_event ","EVENTS_BUFFER  pop ","EVENTS_BUFFER  empty? "," dispatch_EVENTS_BUFFER  pop  "]}," Celluloid Probe run_without_supervision":{"type":"method","name":"run_without_supervision","children":[],"call":["Actor  []= ","Celluloid Probe  new "]}," Celluloid publish":{"type":"method","name":"publish","children":[],"call":[]}," Celluloid Internals UUID generate":{"type":"method","name":"generate","children":[],"call":[]}," Celluloid Internals ThreadHandle backtrace":{"type":"method","name":"backtrace","children":[],"call":["@thread backtrace "]}," Celluloid Internals ThreadHandle join":{"type":"method","name":"join","children":[],"call":["@join wait ","@mutex synchronize "," raise ","@thread == ","Thread  current "]}," Celluloid Internals ThreadHandle kill":{"type":"method","name":"kill","children":[],"call":["@thread kill ","@mutex synchronize "]}," Celluloid Internals ThreadHandle alive?":{"type":"method","name":"alive?","children":[],"call":["@thread alive? ","@mutex synchronize "]}," Celluloid Internals ThreadHandle initialize":{"type":"method","name":"initialize","children":[],"call":["@join broadcast ","@mutex synchronize ","Thread  current role= ","Thread  current ","actor_system get_thread ","ConditionVariable  new ","Mutex  new ","ConditionVariable  new  broadcast ","Mutex  new  synchronize "]}," Celluloid Internals TaskSet to_a":{"type":"method","name":"to_a","children":[],"call":["@tasks to_a ","Rubinius  synchronize "]}," Celluloid Internals TaskSet empty?":{"type":"method","name":"empty?","children":[],"call":["@tasks empty? ","Rubinius  synchronize "]}," Celluloid Internals TaskSet first":{"type":"method","name":"first","children":[],"call":["@tasks first ","Rubinius  synchronize "]}," Celluloid Internals TaskSet delete":{"type":"method","name":"delete","children":[],"call":["@tasks delete ","Rubinius  synchronize "]}," Celluloid Internals TaskSet <<":{"type":"method","name":"<<","children":[],"call":["@tasks << ","Rubinius  synchronize "]}," Celluloid Internals TaskSet initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new "]}," Celluloid Internals Stack print":{"type":"method","name":"print","children":[],"call":["output print ","thread dump ","@threads each ","actor dump ","@actors each "]}," Celluloid Internals Stack snapshot_thread":{"type":"method","name":"snapshot_thread","children":[],"call":["ThreadState  new ","thread role ","thread object_id ","thread backtrace "]}," Celluloid Internals Stack snapshot_cell":{"type":"method","name":"snapshot_cell","children":[],"call":["state subject_class= ","behavior subject class ","behavior subject ","state subject_id= ","behavior subject object_id ","CellState  new ","CellState  new  subject_class= ","CellState  new  subject_id= "]}," Celluloid Internals Stack snapshot_actor":{"type":"method","name":"snapshot_actor","children":[],"call":["state backtrace= ","actor thread backtrace ","actor thread ","state tasks= ","TaskState  new ","t backtrace ","t status ","t meta ","t type ","t class ","tasks to_a map ","tasks to_a ","state status= ","tasks empty? ","actor tasks ","state cell= "," snapshot_cell ","actor behavior ","actor behavior is_a? ","state id= ","actor object_id ","ActorState  new ","ActorState  new  backtrace= ","state actor tasks = ","ActorState  new  tasks= ","actor tasks  to_a map ","actor tasks  to_a ","ActorState  new  status= ","actor tasks  empty? ","actor actor tasks  ","ActorState  new  cell= ","ActorState  new  id= "]}," Celluloid Internals Stack snapshot":{"type":"method","name":"snapshot","children":[],"call":["@threads << "," snapshot_thread ","@actors << "," snapshot_actor ","thread actor ","thread role == ","thread role ","@group each "]}," Celluloid Internals Stack initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid Internals Stack Summary initialize":{"type":"method","name":"initialize","children":[],"call":[" snapshot "]}," Celluloid Internals Stack ActorState dump":{"type":"method","name":"dump","children":[],"call":["string << "," backtrace "," display_backtrace ","task backtrace ","task meta inspect ","task meta ","task status ","task type ","task task_class ","i + "," tasks each_with_index "," tasks "," status == "," status "," cell dump "," cell "," name "," id to_s "," id "]}," Celluloid Internals Stack ThreadState dump":{"type":"method","name":"dump","children":[],"call":[" display_backtrace "," backtrace ","string << "," role "," thread_id to_s "," thread_id "]}," Celluloid Internals Stack CellState dump":{"type":"method","name":"dump","children":[],"call":[" subject_class "," subject_id to_s "," subject_id "]}," Celluloid Internals Stack DisplayBacktrace display_backtrace":{"type":"method","name":"display_backtrace","children":[],"call":["output << ","output << << << ","output << << ","backtrace each "]}," Celluloid Internals Stack Dump initialize":{"type":"method","name":"initialize","children":[],"call":[" snapshot "]}," Celluloid Internals Signals broadcast":{"type":"method","name":"broadcast","children":[],"call":["condition broadcast ","@conditions delete ","@conditions delete  broadcast ","@@conditions delete s delete "]}," Celluloid Internals Signals wait":{"type":"method","name":"wait","children":[],"call":["@conditions [] wait ","@conditions [] ","Condition  new "," raise ","Celluloid  exclusive? "]}," Celluloid Internals Signals initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid Internals Response Block dispatch":{"type":"method","name":"dispatch","children":[],"call":["@call task resume ","@call task "]}," Celluloid Internals Response Block initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid Internals Response Error value":{"type":"method","name":"value","children":[],"call":[" raise ","ex backtrace concat "," caller ","ex backtrace ","ex backtrace << ","ex cause ","ex is_a? ","ex cause  backtrace concat ","ex cause  backtrace ","ex cause  backtrace << ","ex cause  cause ","ex cause  is_a? "]}," Celluloid Internals Response dispatch":{"type":"method","name":"dispatch","children":[],"call":["@call task resume ","@call task "]}," Celluloid Internals Response initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid Internals Registry clear":{"type":"method","name":"clear","children":[],"call":["@index clear ","@actors clear ","@actors dup ","@registry synchronize "]}," Celluloid Internals Registry index":{"type":"method","name":"index","children":[],"call":["@registry synchronize "]}," Celluloid Internals Registry names":{"type":"method","name":"names","children":[],"call":["@actors keys ","@registry synchronize "]}," Celluloid Internals Registry include?":{"type":"method","name":"include?","children":[],"call":[" names include? "," names "]}," Celluloid Internals Registry delete":{"type":"method","name":"delete","children":[],"call":["@actors delete ","name to_sym ","@index delete ","@registry synchronize "]}," Celluloid Internals Registry branch":{"type":"method","name":"branch","children":[],"call":["b == ","@index select ","@registry synchronize "]}," Celluloid Internals Registry []":{"type":"method","name":"[]","children":[],"call":["@actors [] ","name to_sym ","@registry synchronize ","name == "]}," Celluloid Internals Registry add":{"type":"method","name":"add","children":[],"call":["@index []= ","name to_sym ","@branches [] << ","@branches [] "," define_method "," remove_method "," class instance_eval "," class ","@branches []= ","@branches key? ","@registry synchronize "," set "]}," Celluloid Internals Registry []=":{"type":"method","name":"[]=","children":[],"call":["actor mailbox << ","NamingRequest  new ","name to_sym ","actor mailbox ","@actors []= ","@registry synchronize "," raise ","actor_singleton ancestors include? ","actor_singleton ancestors ","name == "]}," Celluloid Internals Registry initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "]}," Celluloid Internals Receiver resume":{"type":"method","name":"resume","children":[],"call":["@task resume "]}," Celluloid Internals Receiver match":{"type":"method","name":"match","children":[],"call":["@block call "]}," Celluloid Internals Receiver initialize":{"type":"method","name":"initialize","children":[],"call":["Task  current "]}," Celluloid Internals Receivers handle_message":{"type":"method","name":"handle_message","children":[],"call":["receiver resume ","receiver timer cancel ","receiver timer ","@receivers delete ","r match ","@receivers find "]}," Celluloid Internals Receivers receive":{"type":"method","name":"receive","children":[],"call":["Task  suspend ","@receivers << ","receiver timer= ","receiver resume ","@receivers delete ","@timers after ","Receiver  new ","Celluloid  mailbox receive ","Celluloid  mailbox ","Celluloid  exclusive? ","@Receiver  new s << ","Receiver  new  timer= ","Receiver  new  resume ","@Receiver  new s delete "]}," Celluloid Internals Receivers initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new "]}," Celluloid Internals Properties property":{"type":"method","name":"property","children":[],"call":[" superclass send "," superclass "," superclass respond_to? "," instance_variable_get "," instance_variables include? "," instance_variables "," instance_variable_set ","(lvar :value) uniq "," send ","singleton send "," ancestors first "," ancestors ","(str \"@\") to_sym ","opts fetch ","(lvar :(lvar :value) uniq ) uniq "]}," Celluloid Internals Method inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Celluloid Internals Method call":{"type":"method","name":"call","children":[],"call":["@proxy __send__ "]}," Celluloid Internals Method parameters":{"type":"method","name":"parameters","children":[],"call":["@proxy method_missing parameters ","@proxy method_missing "]}," Celluloid Internals Method name":{"type":"method","name":"name","children":[],"call":["@proxy method_missing name ","@proxy method_missing "]}," Celluloid Internals Method arity":{"type":"method","name":"arity","children":[],"call":["@proxy method_missing arity ","@proxy method_missing "]}," Celluloid Internals Method initialize":{"type":"method","name":"initialize","children":[],"call":["@proxy class "," raise ","proxy respond_to? "]}," Celluloid Internals Logger format_exception":{"type":"method","name":"format_exception","children":[],"call":["str << ","exception backtrace join ","exception backtrace ","exception class "]}," Celluloid Internals Logger exception_handler":{"type":"method","name":"exception_handler","children":[],"call":["@exception_handlers << "]}," Celluloid Internals Logger deprecate":{"type":"method","name":"deprecate","children":[],"call":[" warn "," caller join "," caller "]}," Celluloid Internals Logger crash":{"type":"method","name":"crash","children":[],"call":[" error ","EXCEPTION HANDLER CRASHED:\n << "," format_exception ","handler call ","@exception_handlers each ","string << << ","string << ","Celluloid  log_actor_crashes "]}," Celluloid Internals Logger error":{"type":"method","name":"error","children":[],"call":["Celluloid  logger error ","Celluloid  logger "]}," Celluloid Internals Logger warn":{"type":"method","name":"warn","children":[],"call":["Celluloid  logger warn ","Celluloid  logger "]}," Celluloid Internals Logger info":{"type":"method","name":"info","children":[],"call":["Celluloid  logger info ","Celluloid  logger "]}," Celluloid Internals Logger debug":{"type":"method","name":"debug","children":[],"call":["Celluloid  logger debug ","Celluloid  logger "]}," Celluloid Internals Logger with_backtrace":{"type":"method","name":"with_backtrace","children":[],"call":["WithBacktrace  new ","Celluloid  logger "]}," Celluloid Internals Logger WithBacktrace decorate":{"type":"method","name":"decorate","children":[],"call":["(lvar :string) join "]}," Celluloid Internals Logger WithBacktrace error":{"type":"method","name":"error","children":[],"call":["Celluloid  logger error "," decorate ","Celluloid  logger "]}," Celluloid Internals Logger WithBacktrace warn":{"type":"method","name":"warn","children":[],"call":["Celluloid  logger warn "," decorate ","Celluloid  logger "]}," Celluloid Internals Logger WithBacktrace info":{"type":"method","name":"info","children":[],"call":["Celluloid  logger info "," decorate ","Celluloid  logger "]}," Celluloid Internals Logger WithBacktrace debug":{"type":"method","name":"debug","children":[],"call":["Celluloid  logger debug "," decorate ","Celluloid  logger "]}," Celluloid Internals Logger WithBacktrace initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid Internals Links inspect":{"type":"method","name":"inspect","children":[],"call":[" class "," map join "," map "]}," Celluloid Internals Links each":{"type":"method","name":"each","children":[],"call":["@links each "]}," Celluloid Internals Links delete":{"type":"method","name":"delete","children":[],"call":["@links delete ","actor mailbox address ","actor mailbox "]}," Celluloid Internals Links include?":{"type":"method","name":"include?","children":[],"call":["@links key? ","actor mailbox address ","actor mailbox "]}," Celluloid Internals Links <<":{"type":"method","name":"<<","children":[],"call":["@links []= ","actor mailbox address ","actor mailbox "]}," Celluloid Internals Links initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid Internals Handler call":{"type":"method","name":"call","children":[],"call":["@block call "]}," Celluloid Internals Handler match":{"type":"method","name":"match","children":[],"call":["@pattern === "]}," Celluloid Internals Handler initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid Internals Handlers handle_message":{"type":"method","name":"handle_message","children":[],"call":["handler call ","h match ","@handlers find "]}," Celluloid Internals Handlers handle":{"type":"method","name":"handle","children":[],"call":["@handlers << ","Handler  new ","patterns each ","@Handler  new s << "]}," Celluloid Internals Handlers initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new "]}," Celluloid Internals CPUCounter from_result":{"type":"method","name":"from_result","children":[],"call":["i > "," Integer ","result to_s [] ","result to_s "," Integer  > "]}," Celluloid Internals CPUCounter from_sysctl":{"type":"method","name":"from_sysctl","children":[],"call":[" Integer "]}," Celluloid Internals CPUCounter from_win32ole":{"type":"method","name":"from_win32ole","children":[],"call":["WIN32OLE  connect ExecQuery NumberOfProcessors ","WIN32OLE  connect ExecQuery ","WIN32OLE  connect "," require "]}," Celluloid Internals CPUCounter from_proc":{"type":"method","name":"from_proc","children":[],"call":["File  read scan size ","File  read scan ","File  read ","File  exist? "]}," Celluloid Internals CPUCounter from_java":{"type":"method","name":"from_java","children":[],"call":["Java Java  lang Runtime getRuntime availableProcessors ","Java Java  lang Runtime getRuntime ","Java Java  lang Runtime ","Java Java  lang "]}," Celluloid Internals CPUCounter from_sysdev":{"type":"method","name":"from_sysdev","children":[],"call":["result zero? ","n =~ ","Dir  [] count ","Dir  [] "," IO  read split last to_i + "," IO  read split last to_i "," IO  read split last "," IO  read split "," IO  read "]}," Celluloid Internals CPUCounter from_env":{"type":"method","name":"from_env","children":[],"call":["result empty? ! ","result empty? ","ENV  [] ","ENV  []  empty? ! ","ENV  []  empty? "]}," Celluloid Internals CPUCounter count_cores":{"type":"method","name":"count_cores","children":[],"call":[" from_result "," from_sysctl "," from_win32ole "," from_proc "," from_java "," from_sysdev "," from_env "]}," Celluloid Internals CPUCounter cores":{"type":"method","name":"cores","children":[],"call":[" count_cores "]}," Celluloid Internals CallChain current_id":{"type":"method","name":"current_id","children":[],"call":[]}," Celluloid Internals CallChain current_id=":{"type":"method","name":"current_id=","children":[],"call":[]}," Celluloid Supervision Configuration parse":{"type":"method","name":"parse","children":[],"call":["options [] ","args any? ","options []= ","args shift ","args first is_a? ","args first ","options merge! ","args pop ","args last is_a? ","args last ","args length > ","args length ","args [] ","args length == ","args is_a? ","args pop  any? ","args pop  shift ","args pop  first is_a? ","args pop  first ","args pop  pop ","args pop  last is_a? ","args pop  last ","args pop  length > ","args pop  length ","args pop  [] ","args pop  length == ","args pop  is_a? "]}," Celluloid Supervision Container supervise_as":{"type":"method","name":"supervise_as","children":[],"call":[" add ","Configuration  options "," blocks << ","container supervise_as "," lambda "," blocks "]}," Celluloid supervise_as":{"type":"method","name":"supervise_as","children":[],"call":["supervisor supervise_as ","Supervision  router ","Supervision  router  supervise_as "]}," Celluloid Future Runner value":{"type":"method","name":"value","children":[],"call":[" abort "," wait "]}," Celluloid Future Runner run":{"type":"method","name":"run","children":[],"call":[" signal ","@block call "]}," Celluloid Future Runner initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid Actor InstanceMethods wait":{"type":"method","name":"wait","children":[],"call":["@_signals wait "]}," Celluloid Actor InstanceMethods signal":{"type":"method","name":"signal","children":[],"call":["@_signals send "]}," Celluloid Actor InstanceMethods mailbox":{"type":"method","name":"mailbox","children":[],"call":[]}," Celluloid Actor ClassMethods exit_handler":{"type":"method","name":"exit_handler","children":[],"call":[]}," Celluloid Actor InstanceMethods method_missing":{"type":"method","name":"method_missing","children":[],"call":["@_mailbox << ","AsyncCall  new ","meth to_s sub ","meth to_s ","meth to_s match "]}," Celluloid TCPServer on_connect":{"type":"method","name":"on_connect","children":[],"call":["connection close "]}," Celluloid TCPServer terminate":{"type":"method","name":"terminate","children":[],"call":["@server close "]}," Celluloid TCPServer run":{"type":"method","name":"run","children":[],"call":[" on_connect ","@server accept "," wait_readable "]}," Celluloid TCPServer initialize":{"type":"method","name":"initialize","children":[],"call":[" run! "," TCPServer  new "]}," Celluloid IO wait_writeable":{"type":"method","name":"wait_writeable","children":[],"call":[" current_actor mailbox reactor wait_writeable "," current_actor mailbox reactor "," current_actor mailbox "," current_actor "]}," Celluloid IO wait_readable":{"type":"method","name":"wait_readable","children":[],"call":[" current_actor mailbox reactor wait_readable "," current_actor mailbox reactor "," current_actor mailbox "," current_actor "]}," Celluloid IO ClassMethods new_link":{"type":"method","name":"new_link","children":[],"call":["proxy send ","current_actor link ","IO Actor  new proxy ","IO Actor  new "," allocate "," raise ","Thread  current [] ","Thread  current ","IO Actor  new proxy  send ","Thread  current []  link ","IO Actor  new IO Actor  new proxy  "]}," Celluloid IO ClassMethods new":{"type":"method","name":"new","children":[],"call":["proxy send ","IO Actor  new proxy ","IO Actor  new "," allocate ","IO Actor  new proxy  send ","IO Actor  new IO Actor  new proxy  "]}," Celluloid IO included":{"type":"method","name":"included","children":[],"call":[]}," Celluloid IO Waker cleanup":{"type":"method","name":"cleanup","children":[],"call":["@sender close ","@receiver close "]}," Celluloid IO Waker io":{"type":"method","name":"io","children":[],"call":[]}," Celluloid IO Waker wait":{"type":"method","name":"wait","children":[],"call":[" raise ","byte == ","@receiver read ","@receiver read  == "]}," Celluloid IO Waker signal":{"type":"method","name":"signal","children":[],"call":[" raise ","@sender << "]}," Celluloid IO Waker initialize":{"type":"method","name":"initialize","children":[],"call":[" IO  pipe "]}," Celluloid IO Reactor monitor_io":{"type":"method","name":"monitor_io","children":[],"call":["set []= ","Fiber  current "," raise ","io inspect ","set has_key? ","io class ","io to_io ","io respond_to? ","IO  try_convert ","IO  respond_to? ","io is_a? ","io to_io  inspect ","IO  try_convert  inspect ","io to_io  class ","IO  try_convert  class ","io to_io  to_io to_io  ","IO  try_convert  to_IO  try_convert  ","io to_io  respond_to? ","IO  try_convert  respond_to? ","io to_io  is_a? ","IO  try_convert  is_a? "]}," Celluloid IO Reactor run_once":{"type":"method","name":"run_once","children":[],"call":["fiber resume ","registered delete ","ios each ","(array\n  (lvar :readers)\n  (ivar :@readers)) each ","readers include? ","@waker io "," select ","@writers keys ","@readers keys << ","@readers keys ","Celluloid  resume_fiber ","registered delete  resume ","Celluloid  resume_registered delete  "]}," Celluloid IO Reactor wait_writeable":{"type":"method","name":"wait_writeable","children":[],"call":[" block_given? ","Fiber  yield "," monitor_io "]}," Celluloid IO Reactor wait_readable":{"type":"method","name":"wait_readable","children":[],"call":[" block_given? ","Fiber  yield "," monitor_io "]}," Celluloid IO Reactor initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Celluloid IO Mailbox shutdown":{"type":"method","name":"shutdown","children":[],"call":["@waker cleanup "]}," Celluloid IO Mailbox receive":{"type":"method","name":"receive","children":[],"call":[" raise "," shutdown "," next_message ","@waker wait ","@reactor run_once "," next_ next_message  "]}," Celluloid IO Mailbox system_event":{"type":"method","name":"system_event","children":[],"call":["@waker signal ","@messages unshift ","@lock synchronize "]}," Celluloid IO Mailbox <<":{"type":"method","name":"<<","children":[],"call":[" raise ","@waker signal ","@messages << ","@lock synchronize "]}," Celluloid IO Mailbox initialize":{"type":"method","name":"initialize","children":[],"call":["Reactor  new ","Waker  new ","Mutex  new "]}," Celluloid IO Actor initialize_mailbox":{"type":"method","name":"initialize_mailbox","children":[],"call":["Celluloid IO Mailbox  new "]}," Celluloid Actor Pool create":{"type":"method","name":"create","children":[],"call":["thread []= ","Celluloid  logger error ","Celluloid  logger ","message << ","ex backtrace join ","ex backtrace ","ex to_s ","ex class "," raise ","ex is_a? ","queue pop call ","queue pop ","Thread  new ","Queue  new ","func call ","Celluloid Logger  crash ","Logger  crash ","Queue  new  pop call ","Queue  new  pop ","queue pop  call "]}," Celluloid Actor Pool put":{"type":"method","name":"put","children":[],"call":["@pool << ","thread kill ","@pool size >= ","@pool size ","@lock synchronize ","thread [] << ","thread [] "]}," Celluloid Actor Pool get":{"type":"method","name":"get","children":[],"call":["@pool shift "," create ","@pool empty? ","@lock synchronize ","thread [] << ","thread [] ","@pool shift  [] << "," create  [] << ","@pool shift  [] "," create  [] "]}," Celluloid Actor log_error":{"type":"method","name":"log_error","children":[],"call":["Celluloid  logger error ","Celluloid  logger ","message << ","ex backtrace join ","ex backtrace ","ex to_s ","ex class "]}," Celluloid Actor process_messages":{"type":"method","name":"process_messages","children":[],"call":["pending_calls []= ","fiber alive? ","fiber resume ","pending_calls delete ","message call ","message dispatch "," initialize_thread_locals ","Fiber  new "," handle_exit_event ","@mailbox receive ","pending_fiber resume s []= ","pending_calls delete  alive? ","pending_calls delete  resume ","pending_fiber resume s delete ","message fiber resume  ","@mailbox receive  call ","@mailbox receive  dispatch "]}," Celluloid Actor alive?":{"type":"method","name":"alive?","children":[],"call":[]}," Celluloid Actor initialize_thread_locals":{"type":"method","name":"initialize_thread_locals","children":[],"call":["Thread  current []= ","Thread  current "]}," Celluloid Actor initialize_mailbox":{"type":"method","name":"initialize_mailbox","children":[],"call":["Mailbox  new "]}," Celluloid resume_fiber":{"type":"method","name":"resume_fiber","children":[],"call":["fiber resume ","actor run_fiber ","Thread  current [] ","Thread  current ","Thread  current []  run_fiber "]}," Celluloid fiber":{"type":"method","name":"fiber","children":[],"call":["Thread  current []= ","Thread  current ","Fiber  new ","Thread  current [] "]}," Celluloid AsyncCall log_error":{"type":"method","name":"log_error","children":[],"call":["Celluloid  logger error ","Celluloid  logger ","message << ","ex backtrace join ","ex backtrace ","ex to_s ","ex class "]}," Celluloid Application Supervisable supervise":{"type":"method","name":"supervise","children":[],"call":["Supervisor  new_link "]}," Celluloid Application Supervisable initialize":{"type":"method","name":"initialize","children":[],"call":["options [] ","h []= ","k to_s ","options inject "]}," Celluloid Application restart_supervisor":{"type":"method","name":"restart_supervisor","children":[],"call":["@supervisors []= ","supervisable supervise "," raise ","@supervisors delete ","@supervisable supervise s []= ","@supervisors delete  supervise ","@supervisable supervise s delete "]}," Celluloid Application initialize":{"type":"method","name":"initialize","children":[],"call":["@supervisors []= ","supervisable supervise "," class supervisables each "," class supervisables "," class ","@supervisable supervise s []= "]}," Celluloid Application supervise":{"type":"method","name":"supervise","children":[],"call":[" supervisables << ","Supervisable  new "," supervisables "]}," Celluloid Application run":{"type":"method","name":"run","children":[],"call":["Celluloid  logger error ","Celluloid  logger "," sleep ","supervisor alive? "," run! "," loop ","Celluloid Logger  error ","Logger  error "," run!  alive? "]}," Celluloid Application supervisables":{"type":"method","name":"supervisables","children":[],"call":[]}," Celluloid Actor run_fiber":{"type":"method","name":"run_fiber","children":[],"call":["Celluloid  logger debug ","Celluloid  logger ","result class ","@pending_calls []= ","result id ","fiber alive? ","result is_a? ","fiber resume ","fiber resume  class ","fiber resume  id ","fiber resume  is_a? "]}," Celluloid Fiber resume":{"type":"method","name":"resume","children":[],"call":["Celluloid  logger debug ","Celluloid  logger ","result class ","actor register_fiber ","result is_a? ","Thread  current [] ","Thread  current ","Celluloid Logger  debug ","Thread  current []  register_fiber "]}," Celluloid Fiber initialize":{"type":"method","name":"initialize","children":[],"call":["Thread  current []= ","Thread  current ","Thread  current [] "]}," Celluloid Actor register_fiber":{"type":"method","name":"register_fiber","children":[],"call":["@pending_calls []= ","call id "," raise ","fiber alive? "]}," Celluloid FSM ClassMethods new_link":{"type":"method","name":"new_link","children":[],"call":["fsm transition "," default_state "]}," Celluloid FSM ClassMethods new":{"type":"method","name":"new","children":[],"call":["fsm transition "," default_state "]}," Celluloid Actor tasks":{"type":"method","name":"tasks","children":[],"call":["tasks []= ","@signals waiting each ","@signals waiting ","Thread  current [] ","Thread  current ","waiters each ","waiters is_a? ","Task  current "]}}