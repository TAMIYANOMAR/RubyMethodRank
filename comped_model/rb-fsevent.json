{" FSEvent parse_options":{"type":"method","name":"parse_options","children":[],"call":["opts map ","opts push ","options [] ","opts concat "]}," FSEvent open_pipe":{"type":"method","name":"open_pipe","children":[],"call":["IO  popen ","(send\n  (send\n    (self) :class) :watcher_path) + + ","(send\n  (send\n    (self) :class) :watcher_path) + "," class watcher_path "," class "," shellescaped_paths "," options_string "]}," FSEvent shellescape":{"type":"method","name":"shellescape","children":[],"call":["str gsub! ","str dup ","str empty? ","str dup  gsub! ","str dup  dup ","str dup  empty? "]}," FSEvent shellescaped_paths":{"type":"method","name":"shellescaped_paths","children":[],"call":["(send\n  (ivar :@paths) :map) join "," shellescape ","@paths map "]}," FSEvent options_string":{"type":"method","name":"options_string","children":[],"call":["@options join "]}," FSEvent process_running?":{"type":"method","name":"process_running?","children":[],"call":["Process  kill "]}," FSEvent stop":{"type":"method","name":"stop","children":[],"call":["@pipe close ","Process  kill ","@pipe pid "," process_running? ","@pipe nil? "," pipe pid "," pipe "," pipe close "]}," FSEvent run":{"type":"method","name":"run","children":[],"call":[" stop "," callback call "," callback "," callback arity ","event [] ","decoded [] map ","decoded [] ","OTNetstring  parse ","message << ","@pipe read "," Integer ","found_length == ","length << ","(begin\n  (lvar :byte)) =~ ","IO  select "," open_pipe ","@pipe read_nonblock ","String  new "," listen "," launch_bin ","dir != ","line split select ","line split "," pipe readline "," pipe "," pipe eof? ! "," pipe eof? ","@pipe readline ","OTNetstring  parse  [] map ","OTNetstring  parse  [] ","String  new  << "," open_pipe  read ","found_ Integer  == ","found_String  new  == "," Integer  << ","(begin\n  (lvar :@pipe read )) =~ ","(begin\n  (lvar :@pipe read_nonblock )) =~ "," open_pipe  read_nonblock "," pipe readline  split select ","@pipe readline  split select "," pipe readline  split ","@pipe readline  split "," pipe read pipe readline  "," pipe read@pipe readline  "," open_pipe  readline ","@pipe read pipe readline  ","@pipe read@pipe readline  "]}," FSEvent watch":{"type":"method","name":"watch","children":[],"call":["options kind_of? "," parse_options ","watch_paths kind_of? ","options [] ","paths kind_of? "]}," FSEvent initialize":{"type":"method","name":"initialize","children":[],"call":[" watch ","args nil? "]}," OTNetstring with_encoding":{"type":"method","name":"with_encoding","children":[],"call":["str force_encoding ","str encode ","Encoding  find ","encoding respond_to? ","str respond_to? ","str force_Encoding  find  ","Encoding  find  respond_to? "]}," OTNetstring encode":{"type":"method","name":"encode","children":[],"call":[" raise ","cannot encode %p % "," encode ","obj inspect ","(send\n  (lvar :obj) :map) join "," encode + ","obj map "," with_encoding ","obj bytesize "]}," OTNetstring parse":{"type":"method","name":"parse","children":[],"call":[" raise ","Hash  [] ","byte == ","io pos - != ","io pos - ","io pos ","array << "," parse ","io pos - < ","io read == ","io read ","length == "," with_encoding "," Integer ","length !~ ","length size > ","length size ","length << ","byte =~ ","byte nil? ","StringIO  new ","io respond_to? ","io encoding ","String  new ","io read  == ","StringIO  new  pos - != ","StringIO  new  pos - ","StringIO  new  pos ","StringIO  new  pos - < ","StringIO  new  read == ","StringIO  new  read "," Integer  == "," Integer  !~ "," Integer  size > "," Integer  size "," Integer  << ","io read  =~ ","io read  nil? ","StringIO  new  respond_to? ","StringIO  new  encoding "]}," FSEvent listen":{"type":"method","name":"listen","children":[],"call":[" stop "," callback call "," callback ","line split "," pipe readline "," pipe "," pipe eof? ! "," pipe eof? ","dir != ","line split select "," pipe readline  split "," pipe read pipe readline  "," pipe readline  split select "]}," FSEvent launch_bin":{"type":"method","name":"launch_bin","children":[],"call":["IO  popen "," latency "," path "," bin_path "," shellescaped_paths "," path shellescape "," shellescape "]}," FSEvent bin_path":{"type":"method","name":"bin_path","children":[],"call":["File  expand_path ","File  join ","File  dirname "]}," FSEvent pipe":{"type":"method","name":"pipe","children":[],"call":["IO  popen ","(send\n  (send\n    (self) :class) :watcher_path) + + ","(send\n  (send\n    (self) :class) :watcher_path) + "," class watcher_path "," class "," shellescaped_paths "," options_string "]}}