{" Base DeepCloneable clone":{"type":"method","name":"clone","children":[],"call":["kopy send ","obj clone "," send collect "," send "," send clone "," class reflect_on_association macro "," class reflect_on_association "," class ","deep_associations blank? ","association keys first ","association keys ","association [] ","association kind_of? "," Array each "," Array ","options [] "," attributes_from_column_definition [] ","attribute to_s "," attributes_from_column_definition ","tmp send "," class to_s underscore "," class to_s ","association_reflection options [] ","association_reflection options ","association_reflection macro ","opts merge! ","deep_exceptions [] ","m merge ","(send\n  (lvar :exceptions) :select) inject ","e kind_of? ","exceptions select ","attribute kind_of? ","exceptions each ","(send\n  (lvar :options) :[]\n  (sym :except)) flatten ","options [] nil? ","dict [] [] ","dict [] "," class name tableize to_sym "," class name tableize "," class name ","options delete "," class to_s underscore + ","association_reflection options [] to_s + ","association_reflection options [] to_s ","association_reflection primary_key_name ","reverse_association_name to_s ","(send\n  (send\n    (send\n      (lvar :association_reflection) :klass) :reflect_on_all_associations) :detect) try ","a primary_key_name to_s == ","association_reflection primary_key_name to_s ","a primary_key_name to_s ","a primary_key_name ","association_reflection klass reflect_on_all_associations detect ","association_reflection klass reflect_on_all_associations ","association_reflection klass "," raise ","AssociationNotFoundException  new ","association_reflection nil? "," class reflect_on_association keys first  macro "," class reflect_on_association keys first  ","deep_association keys first s blank? ","association []  blank? ","association keys first  keys first ","association keys first  keys ","association keys first  [] ","association keys first  kind_of? ","obj clone  send ","association keys first _reflection options [] "," class reflect_on_association  options [] ","association keys first _reflection options "," class reflect_on_association  options ","association keys first _reflection macro "," class reflect_on_association  macro ","deep_(send\n  (lvar :options) :[]\n  (sym :except)) flatten  [] ","(send\n  (lvar :(send\n  (lvar :options) :[]\n  (sym :except)) flatten ) :select) inject ","(send\n  (lvar :options) :[]\n  (sym :except)) flatten  select ","(send\n  (lvar :options) :[]\n  (sym :except)) flatten  each ","options []  [] [] ","options []  [] ","association keys first _reflection options [] to_s + "," class reflect_on_association  options [] to_s + ","association keys first _reflection options [] to_s "," class reflect_on_association  options [] to_s ","association keys first _reflection primary_key_name "," class reflect_on_association  primary_key_name ","reverse_association keys first _name to_s ","(send\n  (send\n    (send\n      (lvar :association_reflection) :klass) :reflect_on_all_associations) :detect) try  to_s ","(send\n  (send\n    (send\n      (lvar :association keys first _reflection) :klass) :reflect_on_all_association keys first s) :detect) try ","(send\n  (send\n    (send\n      (lvar : class reflect_on_association ) :klass) :reflect_on_all_associations) :detect) try ","association keys first _reflection primary_key_name to_s "," class reflect_on_association  primary_key_name to_s ","association keys first _reflection klass reflect_on_all_association keys first s detect "," class reflect_on_association  klass reflect_on_all_associations detect ","association keys first _reflection klass reflect_on_all_association keys first s "," class reflect_on_association  klass reflect_on_all_associations ","association keys first _reflection klass "," class reflect_on_association  klass ","association keys first _reflection nil? "," class reflect_on_association  nil? "]}," Base DeepCloneable Dup dup":{"type":"method","name":"dup","children":[],"call":["copy initialize_dup ","copy send "]}," Base DeepCloneable perform_validations":{"type":"method","name":"perform_validations","children":[],"call":["options []= "]}," Base DeepCloneable dup_join_association":{"type":"method","name":"dup_join_association","children":[],"call":["obj send target << ","options [] ","obj send target ","obj send "," send collect "," send ","(send\n  (send\n    (send\n      (send\n        (lvar :options) :[]\n        (sym :reflection)) :klass) :reflect_on_all_associations) :detect) try ","reflection association_foreign_key to_s == ","reflection association_foreign_key to_s ","reflection association_foreign_key ","reflection macro == ","reflection macro ","options [] klass reflect_on_all_associations detect ","options [] klass reflect_on_all_associations ","options [] klass ","object send target << ","object send target ","object send ","object deep_clone ","object find_in_dict_or_dup ","options [] [] ","objects collect "," evaluate_conditions ","objects select ","options [] any? ","options [] inverse_of name ","options [] inverse_of ","options [] inverse_of present? ","object deep_clone  send target << ","object deep_clone  send target ","object deep_clone  send ","object deep_clone  deep_clone ","object deep_clone  find_in_dict_or_dup ","object find_in_options [] [] _or_dup ","object deep_clone s collect "," send  collect ","object deep_clone s select "," send  select "]}," Base DeepCloneable dup_has_and_belongs_to_many_association":{"type":"method","name":"dup_has_and_belongs_to_many_association","children":[],"call":[" dup_join_association ","options merge ","options [] foreign_key to_s ","options [] foreign_key ","options [] "," process_joined_object_for_deep_clone ","objects map "," deep_cloneable_objects_for "," find_reverse_association ","options [] options [] foreign_key to_s  to_s ","options [] options [] foreign_key to_s  "," deep_cloneable_objects_for  map "," deep_cloneable_ deep_cloneable_objects_for _for "," find_ find_reverse_association  "]}," Base DeepCloneable dup_has_many_through":{"type":"method","name":"dup_has_many_through","children":[],"call":[" dup_join_association ","options merge ","options [] through_reflection foreign_key to_s ","options [] through_reflection foreign_key ","options [] through_reflection ","options [] "]}," Base DeepCloneable dup_has_many_association":{"type":"method","name":"dup_has_many_association","children":[],"call":["tmp send ","options [] ","reverse_association_name to_s ","obj dup "," send collect "," send ","(send\n  (send\n    (send\n      (send\n        (lvar :options) :[]\n        (sym :reflection)) :klass) :reflect_on_all_associations) :detect) try ","reflection != ","reflection foreign_key to_s == ","reflection foreign_key to_s ","reflection foreign_key ","options [] klass reflect_on_all_associations detect ","options [] klass reflect_on_all_associations ","options [] klass ","options [] foreign_key to_s ","options [] foreign_key ","obj deep_clone ","object deep_clone ","objects collect "," evaluate_conditions ","objects select ","options [] any? ","options [] inverse_of name ","options [] inverse_of ","options [] inverse_of present? ","object send ","reverse_association name ","objects map "," deep_cloneable_objects_for "," find_reverse_association ","obj dup  send ","obj deep_clone  send ","object deep_clone  send ","(send\n  (send\n    (send\n      (send\n        (lvar :options) :[]\n        (sym :reflection)) :klass) :reflect_on_all_associations) :detect) try  to_s ","options [] inverse_of name  to_s "," find_reverse_association _name to_s ","reflection options [] foreign_key to_s  to_s == ","reflection options [] foreign_key to_s  to_s ","reflection options [] foreign_key to_s  ","options [] options [] foreign_key to_s  to_s ","options [] options [] foreign_key to_s  ","object deep_clone  deep_clone "," send  collect "," deep_cloneable_objects_for  collect ","object deep_clone s collect "," send  select "," deep_cloneable_objects_for  select ","object deep_clone s select "," find_reverse_association  name "," send  map "," deep_cloneable_objects_for  map ","object deep_clone s map "," deep_cloneable_ send _for "," deep_cloneable_ deep_cloneable_objects_for _for "," deep_cloneable_object deep_clone s_for "," find_ find_reverse_association  "]}," Base DeepCloneable dup_has_one_association":{"type":"method","name":"dup_has_one_association","children":[],"call":[" dup_belongs_to_association "]}," Base DeepCloneable dup_belongs_to_association":{"type":"method","name":"dup_belongs_to_association","children":[],"call":[" send dup ","options [] "," send "," send deep_clone ","object deep_clone "," evaluate_conditions ","options [] any? "," deep_cloneable_object_for "," send  deep_clone "," deep_cloneable_object_for  deep_clone "," deep_cloneable_ send _for "," deep_cloneable_ deep_cloneable_object_for _for "]}," Base DeepCloneable dup":{"type":"method","name":"dup","children":[{"type":"method","name":"perform_validations","children":[],"asgn":[],"call":["options []= "]}],"call":["kopy send "," send ","association_reflection class name demodulize underscore gsub ","association_reflection class name demodulize underscore ","association_reflection class name demodulize ","association_reflection class name ","association_reflection class ","association_reflection macro ","options []= ","kopy instance_eval ","options [] == ","options [] "," raise ","AssociationNotFoundException  new "," class ","association_reflection nil? "," class reflect_on_association ","dup_options merge! ","deep_exceptions [] ","deep_associations blank? ","association keys first ","association keys ","association [] ","association kind_of? "," Array each "," Array ","m merge ","(send\n  (lvar :exceptions) :select) inject ","e kind_of? ","exceptions select "," class column_defaults dup [] ","attribute to_s "," class column_defaults dup "," class column_defaults ","attribute kind_of? ","exceptions each ","(send\n  (lvar :options) :[]\n  (sym :except)) flatten ","options [] nil? ","block call ","dict [] [] ","dict [] "," class name tableize to_sym "," class name tableize "," class name ","options delete ","args [] ","deep_onlinesses [] ","(send\n  (lvar :onlinesses) :select) inject ","onlinesses select ","object_attrs - ","s to_sym ","kopy attributes keys collect ","kopy attributes keys ","kopy attributes ","(send\n  (lvar :options) :[]\n  (sym :only)) flatten "," deep_clone ","ActiveSupport Deprecation  warn ","block ! ","args empty? "," class reflect_on_association  class name demodulize underscore gsub ","association keys first _reflection class name demodulize underscore gsub "," class reflect_on_association  class name demodulize underscore ","association keys first _reflection class name demodulize underscore "," class reflect_on_association  class name demodulize ","association keys first _reflection class name demodulize "," class reflect_on_association  class name ","association keys first _reflection class name "," class reflect_on_association  class ","association keys first _reflection class "," class reflect_on_association  macro ","association keys first _reflection macro "," class reflect_on_association  nil? ","association keys first _reflection nil? "," class reflect_on_association keys first  ","deep_(send\n  (lvar :options) :[]\n  (sym :except)) flatten  [] ","deep_object_attrs -  [] ","deep_association keys first s blank? ","association []  blank? ","association keys first  keys first ","association keys first  keys ","association keys first  [] ","association keys first  kind_of? ","(send\n  (lvar :(send\n  (lvar :options) :[]\n  (sym :except)) flatten ) :select) inject ","(send\n  (lvar :object_attrs - ) :select) inject ","(send\n  (lvar :options) :[]\n  (sym :except)) flatten  select ","object_attrs -  select ","(send\n  (lvar :options) :[]\n  (sym :except)) flatten  each ","object_attrs -  each ","options []  [] [] ","options []  [] ","deep_(send\n  (lvar :options) :[]\n  (sym :only)) flatten  [] ","(send\n  (lvar :(send\n  (lvar :options) :[]\n  (sym :only)) flatten ) :select) inject ","(send\n  (lvar :options) :[]\n  (sym :only)) flatten  select "]}," Base DeepCloneable deep_clone":{"type":"method","name":"deep_clone","children":[{"type":"method","name":"perform_validations","children":[],"asgn":[],"call":["options []= "]}],"call":["kopy send "," send ","association_reflection class name demodulize underscore gsub ","association_reflection class name demodulize underscore ","association_reflection class name demodulize ","association_reflection class name ","association_reflection class ","association_reflection macro ","options []= ","kopy instance_eval ","options [] == ","options [] "," raise ","AssociationNotFoundException  new "," class ","association_reflection nil? "," class reflect_on_association ","dup_options merge! ","deep_onlinesses [] ","deep_exceptions [] ","deep_associations blank? ","association keys first ","association keys ","association [] ","association kind_of? "," Array each "," Array ","m merge ","(send\n  (lvar :onlinesses) :select) inject ","e kind_of? ","onlinesses select "," class column_defaults dup [] ","attribute to_s "," class column_defaults dup "," class column_defaults ","attribute kind_of? ","exceptions each ","object_attrs - ","s to_sym ","kopy attributes keys collect ","kopy attributes keys ","kopy attributes ","(send\n  (lvar :options) :[]\n  (sym :only)) flatten ","options [] nil? ","(send\n  (lvar :exceptions) :select) inject ","exceptions select ","(send\n  (lvar :options) :[]\n  (sym :except)) flatten ","block call "," dup ","dict [] [] ","dict [] "," class name tableize to_sym "," class name tableize "," class name ","options delete ","args [] ","association_reflection is_a? ","conditions_or_deep_associations blank? ","conditions []= ","conditions_or_deep_associations delete ","conditions_or_deep_associations [] ","conditions_or_deep_associations kind_of? "," find_in_dict_or_dup ","conditions merge! ","entry key? ","entry is_a? ","conditions_or_deep_associations delete_if "," dup_default_attribute_value_to ","options [] ! ","conditions_or_deep_associations present? "," normalized_includes_list each "," normalized_includes_list ","conditions_or_deep_associations dup ","dup_options []= ","conditions_or_deep_associations is_a? ","association is_a? ","e is_a? ","attribute is_a? "," array_wrap "," find_in_dictionary_or_dup "," dup  send "," find_in_dict_or_dup  send "," find_in_dictionary_or_dup  send "," class reflect_on_association  class name demodulize underscore gsub ","association keys first _reflection class name demodulize underscore gsub "," class reflect_on_association  class name demodulize underscore ","association keys first _reflection class name demodulize underscore "," class reflect_on_association  class name demodulize ","association keys first _reflection class name demodulize "," class reflect_on_association  class name ","association keys first _reflection class name "," class reflect_on_association  class ","association keys first _reflection class "," class reflect_on_association  macro ","association keys first _reflection macro "," dup  instance_eval "," find_in_dict_or_dup  instance_eval "," find_in_dictionary_or_dup  instance_eval "," class reflect_on_association  nil? ","association keys first _reflection nil? "," class reflect_on_association keys first  ","deep_(send\n  (lvar :options) :[]\n  (sym :only)) flatten  [] ","deep_ array_wrap  [] ","deep_object_attrs -  [] ","deep_(send\n  (lvar :options) :[]\n  (sym :except)) flatten  [] ","deep_association keys first s blank? ","association []  blank? ","association keys first  keys first ","association keys first  keys ","association keys first  [] ","association keys first  kind_of? ","(send\n  (lvar :(send\n  (lvar :options) :[]\n  (sym :only)) flatten ) :select) inject ","(send\n  (lvar : array_wrap ) :select) inject ","(send\n  (lvar :options) :[]\n  (sym :only)) flatten  select "," array_wrap  select ","object_attrs -  each ","(send\n  (lvar :options) :[]\n  (sym :except)) flatten  each "," array_wrap  each ","kopy attributes keys collect  - "," dup  attributes keys collect "," find_in_dict_or_dup  attributes keys collect "," find_in_dictionary_or_dup  attributes keys collect "," dup  attributes keys "," find_in_dict_or_dup  attributes keys "," find_in_dictionary_or_dup  attributes keys "," dup  attributes "," find_in_dict_or_dup  attributes "," find_in_dictionary_or_dup  attributes ","(send\n  (lvar :object_attrs - ) :select) inject ","(send\n  (lvar :(send\n  (lvar :options) :[]\n  (sym :except)) flatten ) :select) inject ","object_attrs -  select ","(send\n  (lvar :options) :[]\n  (sym :except)) flatten  select ","options []  [] [] ","options []  [] "," class reflect_on_association  is_a? ","association keys first _reflection is_a? ","conditions_or_deep_association keys first s blank? ","conditions_or_association []  blank? ","conditions_or_deep_associations dup  blank? ","conditions_or_deep_association keys first s delete ","conditions_or_association []  delete ","association []  delete ","conditions_or_deep_associations dup  delete ","conditions_or_deep_association keys first s [] ","conditions_or_association []  [] ","association []  [] ","conditions_or_deep_associations dup  [] ","conditions_or_deep_association keys first s kind_of? ","conditions_or_association []  kind_of? ","association []  kind_of? ","conditions_or_deep_associations dup  kind_of? "," find_in_options [] _or_dup ","conditions_or_deep_association keys first s delete_if ","conditions_or_association []  delete_if ","association []  delete_if ","conditions_or_deep_associations dup  delete_if ","conditions_or_deep_association keys first s present? ","conditions_or_association []  present? ","association []  present? ","conditions_or_deep_associations dup  present? ","conditions_or_deep_association keys first s dup ","conditions_or_association []  dup ","association []  dup ","conditions_or_deep_associations dup  dup ","conditions_or_deep_association keys first s is_a? ","conditions_or_association []  is_a? ","association []  is_a? ","conditions_or_deep_associations dup  is_a? ","association keys first  is_a? "," find_in_options [] ionary_or_dup "]}," Base DeepCloneable dup_has_many_through_association":{"type":"method","name":"dup_has_many_through_association","children":[],"call":[" dup_join_association ","options merge ","options [] through_reflection foreign_key to_s ","options [] through_reflection foreign_key ","options [] through_reflection ","options [] "," process_joined_object_for_deep_clone ","objects map "," deep_cloneable_objects_for "," find_reverse_association ","options [] through_reflection options [] through_reflection foreign_key to_s  to_s ","options [] through_reflection options [] through_reflection foreign_key to_s  "," deep_cloneable_objects_for  map "," deep_cloneable_ deep_cloneable_objects_for _for "," find_ find_reverse_association  "]}," Base DeepCloneable evaluate_conditions":{"type":"method","name":"evaluate_conditions","children":[],"call":["conditions [] call ! ","conditions [] call ","conditions [] ","conditions none? "]}," Base DeepCloneable find_in_dict_or_dup":{"type":"method","name":"find_in_dict_or_dup","children":[],"call":["dict [] []= "," dup ","dict [] ","dict_val nil? ","dict [] [] "," class name tableize to_sym "," class name tableize "," class name "," class ","dict [] []  nil? "]}," Base DeepCloneable dup_default_attribute_value_to":{"type":"method","name":"dup_default_attribute_value_to","children":[],"call":["kopy send ","origin class column_defaults dup [] ","attribute to_s ","origin class column_defaults dup ","origin class column_defaults ","origin class ","kopy []= "]}," Base DeepCloneable normalized_includes_list":{"type":"method","name":"normalized_includes_list","children":[],"call":["list << ","item each ","item size > ","item size ","item is_a? "," Array each "," Array "]}," Base DeepCloneable array_wrap":{"type":"method","name":"array_wrap","children":[],"call":["object to_ary ","object respond_to? "]}," Base DeepCloneable process_joined_object_for_deep_clone":{"type":"method","name":"process_joined_object_for_deep_clone","children":[],"call":["object send target << ","options [] ","object send target ","object send ","options [] name ","object deep_clone ","object find_in_dictionary_or_dup ","options [] [] ","object deep_clone  send target << ","object deep_clone  send target ","object deep_clone  send ","object deep_clone  deep_clone ","object deep_clone  find_in_dictionary_or_dup ","object find_in_options [] [] _or_dup "]}," Base DeepCloneable deep_cloneable_objects_for":{"type":"method","name":"deep_cloneable_objects_for","children":[],"call":[" evaluate_conditions "," send select "," send "]}," Base DeepCloneable deep_cloneable_object_for":{"type":"method","name":"deep_cloneable_object_for","children":[],"call":[" evaluate_conditions "," send "]}," Base DeepCloneable find_reverse_association":{"type":"method","name":"find_reverse_association","children":[],"call":["reflection send to_s == ","reflection send to_s ","reflection send ","reflection macro == ","reflection macro ","macro nil? ","reflection != ","source_reflection klass reflect_on_all_associations detect ","source_reflection klass reflect_on_all_associations ","source_reflection klass ","source_reflection inverse_of ","source_reflection inverse_of present? "]}," Base DeepCloneable dup_has_one_through_association":{"type":"method","name":"dup_has_one_through_association","children":[],"call":[" process_joined_object_for_deep_clone ","options merge "," deep_cloneable_object_for ","options [] "," find_reverse_association ","options [] through_reflection foreign_key to_s ","options [] through_reflection foreign_key ","options [] through_reflection "," process_joined_ deep_cloneable_object_for _for_deep_clone "," deep_cloneable_ deep_cloneable_object_for _for "," find_ find_reverse_association  ","options [] through_reflection options [] through_reflection foreign_key to_s  to_s ","options [] through_reflection options [] through_reflection foreign_key to_s  "]}," Base DeepCloneable find_in_dictionary_or_dup":{"type":"method","name":"find_in_dictionary_or_dup","children":[],"call":["dictionary [] []= "," dup ","dictionary [] ","dict_val nil? ","dictionary [] [] "," class name tableize to_sym "," class name tableize "," class name "," class ","dictionary [] []  nil? "]}," DeepCloneable SkipValidations perform_validations":{"type":"method","name":"perform_validations","children":[],"call":["options []= "]}," DeepCloneable DeepClone normalized_includes_list":{"type":"method","name":"normalized_includes_list","children":[],"call":["list << ","item each ","item size > ","item size ","item is_a? "," Array each "," Array "]}," DeepCloneable DeepClone dup_default_attribute_value_to":{"type":"method","name":"dup_default_attribute_value_to","children":[],"call":["kopy []= ","origin class column_defaults dup [] ","attribute to_s ","origin class column_defaults dup ","origin class column_defaults ","origin class "]}," DeepCloneable DeepClone evaluate_conditions":{"type":"method","name":"evaluate_conditions","children":[],"call":["conditions [] call ! ","conditions [] call ","conditions [] ","conditions none? "]}," DeepCloneable DeepClone process_joined_object_for_deep_clone":{"type":"method","name":"process_joined_object_for_deep_clone","children":[],"call":["object send target << ","options [] ","object send target ","object send ","options [] name ","object deep_clone ","object find_in_dictionary_or_dup ","options [] [] ","object deep_clone  send target << ","object deep_clone  send target ","object deep_clone  send ","object deep_clone  deep_clone ","object deep_clone  find_in_dictionary_or_dup ","object find_in_options [] [] _or_dup "]}," DeepCloneable DeepClone deep_cloneable_objects_for":{"type":"method","name":"deep_cloneable_objects_for","children":[],"call":[" evaluate_conditions "," send select "," send "]}," DeepCloneable DeepClone deep_cloneable_object_for":{"type":"method","name":"deep_cloneable_object_for","children":[],"call":[" evaluate_conditions "," send "]}," DeepCloneable DeepClone find_reverse_association":{"type":"method","name":"find_reverse_association","children":[],"call":["reflection send to_s == ","reflection send to_s ","reflection send ","reflection macro == ","reflection macro ","macro nil? ","reflection != ","source_reflection klass reflect_on_all_associations detect ","source_reflection klass reflect_on_all_associations ","source_reflection klass ","source_reflection inverse_of ","source_reflection inverse_of present? "]}," DeepCloneable DeepClone dup_has_and_belongs_to_many_association":{"type":"method","name":"dup_has_and_belongs_to_many_association","children":[],"call":[" process_joined_object_for_deep_clone ","options merge ","objects map "," deep_cloneable_objects_for ","options [] "," find_reverse_association ","options [] foreign_key to_s ","options [] foreign_key "," deep_cloneable_objects_for  map "," deep_cloneable_ deep_cloneable_objects_for _for "," find_ find_reverse_association  ","options [] options [] foreign_key to_s  to_s ","options [] options [] foreign_key to_s  "]}," DeepCloneable DeepClone dup_has_many_through_association":{"type":"method","name":"dup_has_many_through_association","children":[],"call":[" process_joined_object_for_deep_clone ","options merge ","objects map "," deep_cloneable_objects_for ","options [] "," find_reverse_association ","options [] through_reflection foreign_key to_s ","options [] through_reflection foreign_key ","options [] through_reflection "," deep_cloneable_objects_for  map "," deep_cloneable_ deep_cloneable_objects_for _for "," find_ find_reverse_association  ","options [] through_reflection options [] through_reflection foreign_key to_s  to_s ","options [] through_reflection options [] through_reflection foreign_key to_s  "]}," DeepCloneable DeepClone dup_has_one_through_association":{"type":"method","name":"dup_has_one_through_association","children":[],"call":[" process_joined_object_for_deep_clone ","options merge "," deep_cloneable_object_for ","options [] "," find_reverse_association ","options [] through_reflection foreign_key to_s ","options [] through_reflection foreign_key ","options [] through_reflection "," process_joined_ deep_cloneable_object_for _for_deep_clone "," deep_cloneable_ deep_cloneable_object_for _for "," find_ find_reverse_association  ","options [] through_reflection options [] through_reflection foreign_key to_s  to_s ","options [] through_reflection options [] through_reflection foreign_key to_s  "]}," DeepCloneable DeepClone dup_has_many_association":{"type":"method","name":"dup_has_many_association","children":[],"call":["object send ","options [] ","reverse_association name ","object deep_clone ","objects map "," deep_cloneable_objects_for "," find_reverse_association ","options [] foreign_key to_s ","options [] foreign_key ","object deep_clone  send "," find_reverse_association  name ","object deep_clone  deep_clone ","object deep_clone s map "," deep_cloneable_objects_for  map "," deep_cloneable_object deep_clone s_for "," deep_cloneable_ deep_cloneable_objects_for _for "," find_ find_reverse_association  ","options [] options [] foreign_key to_s  to_s ","options [] options [] foreign_key to_s  "]}," DeepCloneable DeepClone dup_has_one_association":{"type":"method","name":"dup_has_one_association","children":[],"call":[" dup_belongs_to_association "]}," DeepCloneable DeepClone dup_belongs_to_association":{"type":"method","name":"dup_belongs_to_association","children":[],"call":["object deep_clone ","options [] "," deep_cloneable_object_for "," deep_cloneable_object_for  deep_clone "," deep_cloneable_ deep_cloneable_object_for _for "]}," DeepCloneable DeepClone find_in_dictionary_or_dup":{"type":"method","name":"find_in_dictionary_or_dup","children":[],"call":["dictionary [] []= "," dup ","dictionary [] ","dict_val nil? ","dictionary [] [] "," class name tableize to_sym "," class name tableize "," class name "," class ","dictionary [] []  nil? "]}," DeepCloneable DeepClone deep_clone":{"type":"method","name":"deep_clone","children":[],"call":[" raise "," class ","options [] ! ","options [] ","kopy send "," send ","association_reflection is_a? ","association_reflection macro "," class reflect_on_association ","dup_options []= ","options key? ","(sym :skip_missing_associations) each ","deep_onlinesses [] ","deep_exceptions [] ","conditions_or_deep_associations present? ","conditions merge! ","entry key? ","entry is_a? ","conditions_or_deep_associations delete_if ","conditions_or_deep_associations dup ","conditions_or_deep_associations is_a? ","conditions []= ","conditions_or_deep_associations delete ","conditions_or_deep_associations [] ","association keys first ","association keys ","association [] ","association is_a? "," normalized_includes_list each "," normalized_includes_list "," extend ","kopy instance_eval ","options [] == ","m merge ","(send\n  (lvar :onlinesses) :select) inject ","e is_a? ","onlinesses select "," dup_default_attribute_value_to ","attribute is_a? ","exceptions each ","object_attrs - ","kopy attributes keys collect ","kopy attributes keys ","kopy attributes ","Array  wrap ","(send\n  (lvar :exceptions) :select) inject ","exceptions select "," dup "," find_in_dictionary_or_dup ","options delete ","args [] ","options [] call ","conditions_or_deep_associations delete_at ","entry empty? ","entry delete ","entry [] ","conditions_or_deep_associations each_with_index ","entry dup ","conditions_or_deep_associations map "," dup  send "," find_in_dictionary_or_dup  send "," class reflect_on_association  is_a? ","association keys first _reflection is_a? "," class reflect_on_association  macro ","association keys first _reflection macro "," class reflect_on_association keys first  ","(sym :skip_missing_association keys first s) each ","deep_Array  wrap  [] ","deep_object_attrs -  [] ","conditions_or_deep_associations dup  present? ","association []  present? ","conditions_or_deep_association keys first s present? ","conditions_or_deep_associations dup  delete_if ","association []  delete_if ","conditions_or_deep_association keys first s delete_if ","conditions_or_deep_associations dup  dup ","association []  dup ","conditions_or_deep_association keys first s dup ","conditions_or_deep_associations dup  is_a? ","association []  is_a? ","conditions_or_deep_association keys first s is_a? ","conditions_or_deep_associations dup  delete ","association []  delete ","conditions_or_deep_association keys first s delete ","conditions_or_deep_associations dup  [] ","association []  [] ","conditions_or_deep_association keys first s [] ","association keys first  keys first ","association keys first  keys ","association keys first  [] ","association keys first  is_a? "," dup  instance_eval "," find_in_dictionary_or_dup  instance_eval ","(send\n  (lvar :Array  wrap ) :select) inject ","Array  wrap  select ","object_attrs -  each ","Array  wrap  each ","kopy attributes keys collect  - "," dup  attributes keys collect "," find_in_dictionary_or_dup  attributes keys collect "," dup  attributes keys "," find_in_dictionary_or_dup  attributes keys "," dup  attributes "," find_in_dictionary_or_dup  attributes ","(send\n  (lvar :object_attrs - ) :select) inject ","object_attrs -  select "," find_in_options [] _or_dup ","conditions_or_deep_associations dup  delete_at ","association []  delete_at ","conditions_or_deep_association keys first s delete_at ","conditions_or_deep_associations dup  each_with_index ","association []  each_with_index ","conditions_or_deep_association keys first s each_with_index ","conditions_or_deep_associations dup  map ","association []  map ","conditions_or_deep_association keys first s map "]}}