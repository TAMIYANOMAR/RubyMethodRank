{" Vector inspect":{"type":"method","name":"inspect","children":[],"call":["Vector + ","@elements inspect "]}," Vector to_s":{"type":"method","name":"to_s","children":[],"call":["Vector[ + + ","Vector[ + ","@elements join "]}," Vector coerce":{"type":"method","name":"coerce","children":[],"call":[" raise ","other class "," class ","Matrix Scalar  new "]}," Vector elements_to_r":{"type":"method","name":"elements_to_r","children":[],"call":[" map "," warn "]}," Vector elements_to_i":{"type":"method","name":"elements_to_i","children":[],"call":[" map "," warn "]}," Vector elements_to_f":{"type":"method","name":"elements_to_f","children":[],"call":[" map "," warn "]}," Vector to_matrix":{"type":"method","name":"to_matrix","children":[],"call":["Matrix  column_vector "]}," Vector to_a":{"type":"method","name":"to_a","children":[],"call":["@elements dup "]}," Vector covector":{"type":"method","name":"covector","children":[],"call":["Matrix  row_vector "]}," Vector angle_with":{"type":"method","name":"angle_with","children":[],"call":["Math  acos ","dot / ","dot positive? ","dot abs >= ","dot abs "," inner_product "," raise ","prod == "," magnitude * ","v magnitude "," magnitude ","Vector  Raise "," size != ","v size "," size ","v class ","v is_a? "," inner_product  / "," inner_product  positive? "," inner_product  abs >= "," inner_product  abs "," inner_ magnitude * uct "," magnitude *  == "]}," Vector normalize":{"type":"method","name":"normalize","children":[],"call":[" / "," raise ","n == "," magnitude "," magnitude  == "," mag magnitude itude "]}," Vector map2":{"type":"method","name":"map2","children":[],"call":[" class elements "," class "," collect2 "," to_enum "," block_given? "]}," Vector magnitude":{"type":"method","name":"magnitude","children":[],"call":["Math  sqrt ","v + ","e abs2 ","@elements inject "]}," Vector collect!":{"type":"method","name":"collect!","children":[],"call":["@elements collect! "," raise "," frozen? "," to_enum "," block_given? "]}," Vector collect":{"type":"method","name":"collect","children":[],"call":[" class elements "," class ","@elements collect "," to_enum "," block_given? "]}," Vector cross_product":{"type":"method","name":"cross_product","children":[],"call":["Matrix  rows laplace_expansion "," size - "," size ","Matrix  rows ","Vector  basis ","Array  new ","Vector  [] ","v [] * - ","v [] * ","@elements [] ","v [] ","vs [] ","@elements [] -@ ","Vector  Raise ","v size == ","v size "," raise ","v class ","v is_a? ","vs each ","vs size ","vs size == "," size >= ","vs []  [] * - ","vs []  [] * ","vs []  [] ","vs [] s [] ","vs []  size == ","vs []  size ","vs []  class ","vs []  is_a? ","vs [] s each ","vs [] s size ","vs [] s size == "]}," Vector inner_product":{"type":"method","name":"inner_product","children":[],"call":["v1 * ","v2 conj "," each2 ","Vector  Raise "," size != ","v size "," size "," raise "]}," Vector -@":{"type":"method","name":"-@","children":[],"call":["e -@ "," collect "]}," Vector +@":{"type":"method","name":"+@","children":[],"call":[]}," Vector /":{"type":"method","name":"/","children":[],"call":[" apply_through_coercion "," __method__ ","Vector  Raise ","x class "," class "," class elements ","e / ","@elements collect "," raise "]}," Vector -":{"type":"method","name":"-","children":[],"call":[" apply_through_coercion "," __method__ ","Matrix  column_vector - ","Matrix  column_vector "," class elements "," class ","v1 - "," collect2 ","Vector  Raise "," size != ","v size "," size "," raise "]}," Vector +":{"type":"method","name":"+","children":[],"call":[" apply_through_coercion "," __method__ ","Matrix  column_vector + ","Matrix  column_vector "," class elements "," class ","v1 + "," collect2 ","Vector  Raise "," size != ","v size "," size "," raise "]}," Vector *":{"type":"method","name":"*","children":[],"call":[" apply_through_coercion "," __method__ ","Vector  Raise ","x class "," class ","Matrix  column_vector * ","Matrix  column_vector "," class elements ","e * ","@elements collect "," raise "]}," Vector hash":{"type":"method","name":"hash","children":[],"call":["@elements hash "]}," Vector eql?":{"type":"method","name":"eql?","children":[],"call":["@elements eql? ","other elements ","Vector  === "]}," Vector ==":{"type":"method","name":"==","children":[],"call":["@elements == ","other elements ","Vector  === "]}," Vector initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["@elements dup "," frozen? ","@elements dup  dup "]}," Vector freeze":{"type":"method","name":"freeze","children":[],"call":["@elements freeze "]}," Vector zero?":{"type":"method","name":"zero?","children":[],"call":[" all? "]}," Vector independent?":{"type":"method","name":"independent?","children":[],"call":[" class independent? "," class "]}," Vector collect2":{"type":"method","name":"collect2","children":[],"call":["v [] ","@elements [] ","Array  new "," size "," to_enum "," block_given? ","Vector  Raise "," size != ","v size "," raise ","v kind_of? "]}," Vector each2":{"type":"method","name":"each2","children":[],"call":["v [] ","@elements [] "," size times "," size "," to_enum "," block_given? ","Vector  Raise "," size != ","v size "," raise ","v kind_of? "]}," Vector each":{"type":"method","name":"each","children":[],"call":["@elements each "," to_enum "," block_given? "]}," Vector size":{"type":"method","name":"size","children":[],"call":["@elements size "]}," Vector round":{"type":"method","name":"round","children":[],"call":["e round "," map "]}," Vector set_range":{"type":"method","name":"set_range","children":[],"call":["@elements []= ","Array  new ","range size ","value row elements ","value row ","Matrix  Raise ","value row_count == ","value row_count ","value is_a? ","value elements "," raise ","range size == ","value size "]}," Vector set_value":{"type":"method","name":"set_value","children":[],"call":["@elements []= "]}," Vector []=":{"type":"method","name":"[]=","children":[],"call":[" set_value ","Matrix CoercionHelper  check_int "," size "," set_range ","Matrix CoercionHelper  check_range ","i is_a? "," raise "," frozen? "," set_Matrix CoercionHelper  check_range  ","Matrix CoercionHelper  check_Matrix CoercionHelper  check_range  "]}," Vector []":{"type":"method","name":"[]","children":[],"call":["@elements [] "]}," Vector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Vector zero":{"type":"method","name":"zero","children":[],"call":[]}," Vector basis":{"type":"method","name":"basis","children":[],"call":[]}," Vector elements":{"type":"method","name":"elements","children":[],"call":[]}," Matrix Scalar **":{"type":"method","name":"**","children":[],"call":[" apply_through_coercion "," __method__ ","Scalar  Raise ","other class ","@value class ","Scalar  new ","@value ** "," raise "]}," Matrix Scalar /":{"type":"method","name":"/","children":[],"call":[" apply_through_coercion "," __method__ "," * ","other inverse ","Scalar  Raise ","other class ","@value class ","Scalar  new ","@value / "," raise "]}," Matrix Scalar *":{"type":"method","name":"*","children":[],"call":[" apply_through_coercion "," __method__ ","@value * ","other collect ","Scalar  new "]}," Matrix Scalar -":{"type":"method","name":"-","children":[],"call":[" apply_through_coercion "," __method__ ","Scalar  Raise ","other class ","@value class ","Scalar  new ","@value - "," raise "]}," Matrix Scalar +":{"type":"method","name":"+","children":[],"call":[" apply_through_coercion "," __method__ ","Scalar  Raise ","other class ","@value class ","Scalar  new ","@value + "," raise "]}," Matrix Scalar initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Matrix CoercionHelper check_int":{"type":"method","name":"check_int","children":[],"call":[]}," Matrix CoercionHelper check_range":{"type":"method","name":"check_range","children":[],"call":[]}," Matrix CoercionHelper coerce_to_matrix":{"type":"method","name":"coerce_to_matrix","children":[],"call":[]}," Matrix CoercionHelper coerce_to_int":{"type":"method","name":"coerce_to_int","children":[],"call":[]}," Matrix CoercionHelper coerce_to":{"type":"method","name":"coerce_to","children":[],"call":[]}," Matrix CoercionHelper apply_through_coercion":{"type":"method","name":"apply_through_coercion","children":[],"call":[" raise "," class ","obj inspect ","coercion [] public_send ","coercion [] ","coercion length == ","coercion length ","coercion is_a? ","obj coerce ","obj coerce  [] public_send ","obj coerce  [] ","obj coerce  length == ","obj coerce  length ","obj coerce  is_a? "]}," Matrix ConversionHelper convert_to_array":{"type":"method","name":"convert_to_array","children":[],"call":[" raise ","obj class ","converted is_a? ","e message ","obj to_ary ","obj to_a ","obj dup ","obj to_ary  is_a? "]}," Matrix inspect":{"type":"method","name":"inspect","children":[],"call":["@rows inspect "," class "," column_count "," row_count "," empty? "]}," Matrix to_s":{"type":"method","name":"to_s","children":[],"call":["(begin\n  (send\n    (self) :class)) + + ","(begin\n  (send\n    (self) :class)) + ","(send\n  (ivar :@rows) :collect) join ","[ + + ","[ + ","(send\n  (lvar :row) :collect) join ","e to_s ","row collect ","@rows collect "," class "," column_count "," row_count "," empty? "]}," Matrix elements_to_r":{"type":"method","name":"elements_to_r","children":[],"call":[" map "," warn "]}," Matrix elements_to_i":{"type":"method","name":"elements_to_i","children":[],"call":[" map "," warn "]}," Matrix elements_to_f":{"type":"method","name":"elements_to_f","children":[],"call":[" map "," warn "]}," Matrix to_a":{"type":"method","name":"to_a","children":[],"call":["@rows collect "]}," Matrix to_matrix":{"type":"method","name":"to_matrix","children":[],"call":[]}," Matrix column_vectors":{"type":"method","name":"column_vectors","children":[],"call":[" column ","Array  new "," column_count "]}," Matrix row_vectors":{"type":"method","name":"row_vectors","children":[],"call":[" row ","Array  new "," row_count "]}," Matrix coerce":{"type":"method","name":"coerce","children":[],"call":[" raise ","other class "," class ","Scalar  new "]}," Matrix rect":{"type":"method","name":"rect","children":[],"call":[" imag "," real "]}," Matrix real":{"type":"method","name":"real","children":[],"call":[" collect "]}," Matrix imaginary":{"type":"method","name":"imaginary","children":[],"call":[" collect "]}," Matrix conjugate":{"type":"method","name":"conjugate","children":[],"call":[" collect "]}," Matrix lup":{"type":"method","name":"lup","children":[],"call":["LUPDecomposition  new "]}," Matrix eigensystem":{"type":"method","name":"eigensystem","children":[],"call":["EigenvalueDecomposition  new "]}," Matrix vstack":{"type":"method","name":"vstack","children":[],"call":[" class vstack "," class "]}," Matrix transpose":{"type":"method","name":"transpose","children":[],"call":[" new_matrix "," row_count ","@rows transpose "," class empty "," column_count "," class "," row_count zero? "]}," Matrix trace":{"type":"method","name":"trace","children":[],"call":["tr + ","@rows [] [] ","@rows [] ","(erange\n  (int 0)\n  (send nil :column_count)) inject "," column_count ","Matrix  Raise "," square? "," raise "]}," Matrix round":{"type":"method","name":"round","children":[],"call":["e round "," map "]}," Matrix rank_e":{"type":"method","name":"rank_e","children":[],"call":[" rank "," warn "]}," Matrix rank":{"type":"method","name":"rank","children":[],"call":["ai []= ","(send\n  (send\n    (lvar :pivot) :*\n    (send\n      (lvar :ai) :[]\n      (lvar :j))) :-\n  (send\n    (send\n      (lvar :ai) :[]\n      (lvar :k)) :*\n    (send\n      (send\n        (lvar :a) :[]\n        (lvar :pivot_row)) :[]\n      (lvar :j)))) / ","pivot * - ","ai [] * ","a [] [] ","a [] ","ai [] ","pivot * ","(send\n  (lvar :k) :+\n  (int 1)) upto ","k + ","(send\n  (lvar :pivot_row) :+\n  (int 1)) upto ","pivot_row + ","a []= ","pivot_row == ","a [] [] != ","(irange\n  (lvar :pivot_row)\n  (lvar :last_row)) find ","0 upto "," row_count - "," row_count "," column_count - "," column_count "," to_a ","a []  []= "," to_a i []= ","(send\n  (send\n    (lvar :pivot) :*\n    (send\n      (lvar :a [] ) :[]\n      (lvar :j))) :-\n  (send\n    (send\n      (lvar :a [] ) :[]\n      (lvar :k)) :*\n    (send\n      (send\n        (lvar :a) :[]\n        (lvar :pivot_row)) :[]\n      (lvar :j)))) / ","(send\n  (send\n    (lvar :a [] [] ) :*\n    (send\n      (lvar :ai) :[]\n      (lvar :j))) :-\n  (send\n    (send\n      (lvar :ai) :[]\n      (lvar :k)) :*\n    (send\n      (send\n        (lvar :a) :[]\n        (lvar :a [] [] _row)) :[]\n      (lvar :j)))) / ","(send\n  (send\n    (lv to_a r :pivot) :*\n    (send\n      (lv to_a r : to_a i) :[]\n      (lv to_a r :j))) :-\n  (send\n    (send\n      (lv to_a r : to_a i) :[]\n      (lv to_a r :k)) :*\n    (send\n      (send\n        (lv to_a r : to_a ) :[]\n        (lv to_a r :pivot_row)) :[]\n      (lv to_a r :j)))) / ","a [] []  * - ","a []  [] * "," to_a i [] * "," to_a  [] [] "," to_a  [] ","a []  [] "," to_a i [] ","a [] []  * ","(send\n  (lv to_a r :k) :+\n  (int 1)) upto ","(send\n  (lvar :a [] [] _row) :+\n  (int 1)) upto ","(send\n  (lv to_a r :pivot_row) :+\n  (int 1)) upto ","a [] [] _row + "," to_a  []= ","a [] [] _row == "," to_a  [] [] != ","(irange\n  (lvar :a [] [] _row)\n  (lvar :last_row)) find ","(irange\n  (lvar :pivot_row)\n  (lvar : row_count - )) find ","(ir to_a nge\n  (lv to_a r :pivot_row)\n  (lv to_a r :l to_a st_row)) find "," to_ to_a  "]}," Matrix hstack":{"type":"method","name":"hstack","children":[],"call":[" class hstack "," class "]}," Matrix determinant_e":{"type":"method","name":"determinant_e","children":[],"call":[" determinant "," warn "]}," Matrix determinant_bareiss":{"type":"method","name":"determinant_bareiss","children":[],"call":["sign * ","ai []= ","(send\n  (send\n    (lvar :pivot) :*\n    (send\n      (lvar :ai) :[]\n      (lvar :j))) :-\n  (send\n    (send\n      (lvar :ai) :[]\n      (lvar :k)) :*\n    (send\n      (send\n        (lvar :a) :[]\n        (lvar :k)) :[]\n      (lvar :j)))) / ","pivot * - ","ai [] * ","a [] [] ","a [] ","ai [] ","pivot * ","(send\n  (lvar :k) :+\n  (int 1)) upto ","k + ","sign -@ ","a []= ","a [] [] != ","(erange\n  (send\n    (lvar :k) :+\n    (int 1))\n  (lvar :size)) find ","(lvasgn :pivot\n  (send\n    (send\n      (lvar :a) :[]\n      (lvar :k)) :[]\n    (lvar :k))) == ","size times ","Proc  new "," to_a ","size - "," row_count ","sign -@  * ","a []  []= "," to_a i []= ","(send\n  (send\n    (lvar :pivot) :*\n    (send\n      (lvar :a [] ) :[]\n      (lvar :j))) :-\n  (send\n    (send\n      (lvar :a [] ) :[]\n      (lvar :k)) :*\n    (send\n      (send\n        (lvar :a) :[]\n        (lvar :k)) :[]\n      (lvar :j)))) / ","(send\n  (send\n    (lvar :a [] [] ) :*\n    (send\n      (lvar :ai) :[]\n      (lvar :j))) :-\n  (send\n    (send\n      (lvar :ai) :[]\n      (lvar :k)) :*\n    (send\n      (send\n        (lvar :a) :[]\n        (lvar :k)) :[]\n      (lvar :j)))) / ","(send\n  (send\n    (lv to_a r :pivot) :*\n    (send\n      (lv to_a r : to_a i) :[]\n      (lv to_a r :j))) :-\n  (send\n    (send\n      (lv to_a r : to_a i) :[]\n      (lv to_a r :k)) :*\n    (send\n      (send\n        (lv to_a r : to_a ) :[]\n        (lv to_a r :k)) :[]\n      (lv to_a r :j)))) / ","a [] []  * - ","a []  [] * "," to_a i [] * "," to_a  [] [] "," to_a  [] ","a []  [] "," to_a i [] ","a [] []  * ","(send\n  (lv to_a r :k) :+\n  (int 1)) upto ","sign -@  -@ "," to_a  []= "," to_a  [] [] != ","(er to_a nge\n  (send\n    (lv to_a r :k) :+\n    (int 1))\n  (lv to_a r :size)) find ","(erange\n  (send\n    (lvar :k) :+\n    (int 1))\n  (lvar : row_count )) find ","(lvasgn :a [] [] \n  (send\n    (send\n      (lvar :a) :[]\n      (lvar :k)) :[]\n    (lvar :k))) == ","(lv to_a sgn :pivot\n  (send\n    (send\n      (lv to_a r : to_a ) :[]\n      (lv to_a r :k)) :[]\n    (lv to_a r :k))) == "," row_count  times "," to_ to_a  "," row_count  - "]}," Matrix determinant":{"type":"method","name":"determinant","children":[],"call":[" determinant_bareiss ","m0 [] +@ * * * - - + + - - + + - - + + - - + + - - + + - - + ","m0 [] * * * ","m3 [] ","m0 [] * * ","m2 [] ","m0 [] * ","m1 [] ","m0 [] ","m0 [] +@ * * * - - + + - - + + - - + + - - + + - - + + - - ","m0 [] +@ * * * - - + + - - + + - - + + - - + + - - + + - ","m0 [] +@ * * * - - + + - - + + - - + + - - + + - - + + ","m0 [] +@ * * * - - + + - - + + - - + + - - + + - - + ","m0 [] +@ * * * - - + + - - + + - - + + - - + + - - ","m0 [] +@ * * * - - + + - - + + - - + + - - + + - ","m0 [] +@ * * * - - + + - - + + - - + + - - + + ","m0 [] +@ * * * - - + + - - + + - - + + - - + ","m0 [] +@ * * * - - + + - - + + - - + + - - ","m0 [] +@ * * * - - + + - - + + - - + + - ","m0 [] +@ * * * - - + + - - + + - - + + ","m0 [] +@ * * * - - + + - - + + - - + ","m0 [] +@ * * * - - + + - - + + - - ","m0 [] +@ * * * - - + + - - + + - ","m0 [] +@ * * * - - + + - - + + ","m0 [] +@ * * * - - + + - - + ","m0 [] +@ * * * - - + + - - ","m0 [] +@ * * * - - + + - ","m0 [] +@ * * * - - + + ","m0 [] +@ * * * - - + ","m0 [] +@ * * * - - ","m0 [] +@ * * * - ","m0 [] +@ * * * ","m0 [] +@ * * ","m0 [] +@ * ","m0 [] +@ ","m0 [] +@ * * - - + + - ","m0 [] +@ * * - - + + ","m0 [] +@ * * - - + ","m0 [] +@ * * - - ","m0 [] +@ * * - ","m [] [] +@ * - ","m [] [] * ","m [] [] ","m [] ","m [] [] +@ * ","m [] [] +@ "," row_count ","Matrix  Raise "," square? "," raise "]}," Matrix -@":{"type":"method","name":"-@","children":[],"call":["e -@ "," collect "]}," Matrix +@":{"type":"method","name":"+@","children":[],"call":[]}," Matrix **":{"type":"method","name":"**","children":[],"call":["Matrix  Raise ","other class "," class ","v * * ","v * "," class diagonal ","e ** ","d each map ","d each "," eigensystem ","(op-asgn\n  (lvasgn :other) :>>\n  (int 1)) zero? ","z * ","other [] == ","other [] "," loop ","other -@ "," class identity "," column_count ","other == "," inverse ","other <= "," raise ","exp class "," power_int "," inverse power_int ","exp -@ ","exp < ","exp == "," square? ","Matri inverse   Raise ","other -@  class ","(op-asgn\n  (lvasgn :other) :>>\n  (int 1)) z * ero? ","(op-asgn\n  (lvasgn :other -@ ) :>>\n  (int 1)) zero? ","z *  * ","other -@  [] == ","other -@  [] ","other -@  -@ ","other -@  == ","other -@  <= ","e inverse p class ","e inverse p -@ ","e inverse p < ","e inverse p == "]}," Matrix inverse_from":{"type":"method","name":"inverse_from","children":[],"call":["@rows [] []= ","@rows [] [] quo ","@rows [] [] ","@rows [] ","0 upto ","a [] []= ","a [] [] quo ","a [] [] ","a [] ","(send\n  (lvar :k) :+\n  (int 1)) upto ","k + ","@rows [] [] * ","a [] [] * ","ii == ","@rows []= ","a []= ","i != ","Matrix  Raise ","akk == ","v > ","a [] [] abs ","src to_a "," row_count - "," row_count "," raise ","@rows [] [] a [] [] quo uo ","src to_a  [] []= ","a [] [] a [] [] quo uo ","src to_a  [] [] quo ","src to_a  [] [] ","src to_a  [] ","(send\n  (la [] [] abs ar :k) :+\n  (int 1)) upto ","(send\n  (lvsrc to_a r :k) :+\n  (int 1)) upto ","src to_a  [] [] * ","src to_a  []= ","Msrc to_a trix  Rsrc to_a ise ","a [] []  == ","a [] [] abs  == ","src to_a kk == ","a [] [] abs  > ","src to_a  [] [] src to_a bs ","src to_src to_a  "," rsrc to_a ise "]}," Matrix inverse":{"type":"method","name":"inverse","children":[],"call":[" class I send "," class I "," row_count "," class ","Matrix  Raise "," square? "," raise "]}," Matrix hadamard_product":{"type":"method","name":"hadamard_product","children":[],"call":["a * "," combine "]}," Matrix /":{"type":"method","name":"/","children":[],"call":[" apply_through_coercion "," __method__ "," * ","other inverse "," new_matrix "," column_count ","e / ","row collect ","@rows collect "]}," Matrix -":{"type":"method","name":"-","children":[],"call":[" new_matrix "," column_count "," [] - ","m [] "," [] ","Array  new "," row_count ","Matrix  Raise "," column_count == ","m column_count "," row_count == ","m row_count "," apply_through_coercion "," __method__ "," class column_vector "," class ","m class "," raise "," new_ class column_vector atrix "," colu class column_vector n_count "," class column_vector  [] "," colu class column_vector n_count == "," class column_vector  colu class column_vector n_count "," class column_vector  row_count "," __ class column_vector ethod__ "," class colu class column_vector n_vector "," class column_vector  class "]}," Matrix +":{"type":"method","name":"+","children":[],"call":[" new_matrix "," column_count "," [] + ","m [] "," [] ","Array  new "," row_count ","Matrix  Raise "," column_count == ","m column_count "," row_count == ","m row_count "," apply_through_coercion "," __method__ "," class column_vector "," class ","m class "," raise "," new_ class column_vector atrix "," colu class column_vector n_count "," class column_vector  [] "," colu class column_vector n_count == "," class column_vector  colu class column_vector n_count "," class column_vector  row_count "," __ class column_vector ethod__ "," class colu class column_vector n_vector "," class column_vector  class "]}," Matrix *":{"type":"method","name":"*","children":[],"call":[" apply_through_coercion "," __method__ "," new_matrix ","m column_count ","vij + "," [] * ","m [] "," [] ","(erange\n  (int 0)\n  (send nil :column_count)) inject "," column_count ","Array  new "," row_count ","Matrix  Raise "," column_count != ","m row_count ","r column "," * "," class column_vector "," class ","e * ","row collect ","@rows collect ","row_i [] * ","m_rows [] [] ","m_rows [] ","row_i [] "," column_count times "," rows map "," rows ","m rows "," raise "," apply_th * ough_coe * cion "," __ class column_vector ethod__ "," new_mat * ix "," new_ class column_vector atrix "," class column_vector  colu class column_vector n_count "," class column_vector  [] ","(e * ange\n  (int 0)\n  (send nil :column_count)) inject ","(erange\n  (int 0)\n  (send nil :colu class column_vector n_count)) inject "," colu class column_vector n_count ","A *  * ay  new ","  * ow_count ","Mat * ix  Raise "," colu class column_vector n_count != ","m  * ow_count "," class column_vector  row_count "," *  column ","r colu class column_vector n "," class column_vecto *  "," class colu class column_vector n_vector "," * ow collect ","@ * ows collect "," * ow_i [] * ","m_ * ows [] [] "," class column_vector _rows [] [] ","m rows  [] [] ","m_ * ows [] "," class column_vector _rows [] ","m rows  [] "," * ow_i [] "," colu class column_vector n_count ti class column_vector es ","  * ows map "," rows  class column_vector ap ","  * ows ","m  * ows "," class column_vector  rows ","  * aise "]}," Matrix hash":{"type":"method","name":"hash","children":[],"call":["@rows hash "]}," Matrix initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["@rows map "," frozen? ","@rows map  map "]}," Matrix eql?":{"type":"method","name":"eql?","children":[],"call":[" rows eql? ","other rows "," rows "," column_count == ","other column_count "," column_count ","Matrix  === "]}," Matrix ==":{"type":"method","name":"==","children":[],"call":[" rows == ","other rows "," rows "," column_count == ","other column_count "," column_count ","Matrix  === "]}," Matrix zero?":{"type":"method","name":"zero?","children":[],"call":[" all? "]}," Matrix upper_triangular?":{"type":"method","name":"upper_triangular?","children":[],"call":[" each all? "," each "]}," Matrix unitary?":{"type":"method","name":"unitary?","children":[],"call":["s == ","i == ","row [] conj * "," rows [] [] "," rows [] "," rows ","row [] conj ","row [] "," row_count times "," row_count "," column_count times "," column_count "," rows each_with_index ","Matrix  Raise "," square? ","row_i [] conj * ","row_j [] ","row_i [] conj ","row_i [] "," raise "]}," Matrix antisymmetric?":{"type":"method","name":"antisymmetric?","children":[],"call":["e == "," rows [] [] -@ "," rows [] [] "," rows [] "," rows "," each_with_index ","Matrix  Raise "," square? "," raise "]}," Matrix symmetric?":{"type":"method","name":"symmetric?","children":[],"call":["e != "," rows [] [] "," rows [] "," rows "," each_with_index ","Matrix  Raise "," square? "," raise "]}," Matrix square?":{"type":"method","name":"square?","children":[],"call":[" column_count == "," row_count "," column_count "]}," Matrix singular?":{"type":"method","name":"singular?","children":[],"call":[" determinant == "," determinant "]}," Matrix regular?":{"type":"method","name":"regular?","children":[],"call":[" singular? ! "," singular? "]}," Matrix real?":{"type":"method","name":"real?","children":[],"call":[" all? "]}," Matrix permutation?":{"type":"method","name":"permutation?","children":[],"call":["e != ","cols []= ","cols [] ","e == ","row each_with_index "," rows each_with_index "," rows ","Array  new "," column_count ","Matrix  Raise "," square? "," raise ","Array  new  []= ","Array  new  [] "]}," Matrix orthogonal?":{"type":"method","name":"orthogonal?","children":[],"call":["s == ","i == ","row [] * "," rows [] [] "," rows [] "," rows ","row [] "," row_count times "," row_count "," column_count times "," column_count "," rows each_with_index ","Matrix  Raise "," square? ","row_i [] * ","row_j [] ","row_i [] "," raise "]}," Matrix normal?":{"type":"method","name":"normal?","children":[],"call":["s == ","row_i [] * - ","row_k [] conj * ","row_k [] ","row_k [] conj ","row_i [] * ","row_j [] conj ","row_j [] ","row_i [] "," rows each_with_index "," rows ","Matrix  Raise "," square? "," raise "]}," Matrix lower_triangular?":{"type":"method","name":"lower_triangular?","children":[],"call":[" each all? "," each "]}," Matrix hermitian?":{"type":"method","name":"hermitian?","children":[],"call":["e == "," rows [] [] conj "," rows [] [] "," rows [] "," rows "," each_with_index all? "," each_with_index ","Matrix  Raise "," square? "," raise "]}," Matrix empty?":{"type":"method","name":"empty?","children":[],"call":[" row_count == "," row_count "," column_count == "," column_count "]}," Matrix diagonal?":{"type":"method","name":"diagonal?","children":[],"call":[" each all? "," each ","Matrix  Raise "," square? "," raise "]}," Matrix laplace_expansion":{"type":"method","name":"laplace_expansion","children":[],"call":["(send\n  (send\n    (send nil :send\n      (if\n        (lvar :row)\n        (sym :row)\n        (sym :column))\n      (lvar :num)) :map) :with_index) inject ","e * "," cofactor "," send map with_index "," send map "," send "," raise "," row_count - "," row_count ","num inspect ","num < ","0 <= "," empty? ","Matrix  Raise "," square? ","num ! "]}," Matrix adjugate":{"type":"method","name":"adjugate","children":[],"call":[" cofactor ","Matrix  build "," column_count "," row_count ","Matrix  Raise "," square? "," raise "]}," Matrix cofactor":{"type":"method","name":"cofactor","children":[],"call":["det_of_minor * ","(int -1) ** ","row + "," first_minor determinant "," first_minor ","Matrix  Raise "," square? "," raise "," empty? "," first_minor determinant  * "]}," Matrix first_minor":{"type":"method","name":"first_minor","children":[],"call":[" new_matrix "," column_count - "," column_count ","array delete_at ","arrays each ","arrays delete_at "," to_a "," raise ","column inspect ","column < ","0 <= "," row_count - "," row_count ","row inspect ","row < "," empty? "," to_a  each "," to_a  delete_at "]}," Matrix minor":{"type":"method","name":"minor","children":[],"call":[" new_matrix ","(send\n  (send nil :column_count) :-\n  (lvar :from_col)) min "," column_count - "," column_count ","row [] ","@rows [] collect ","@rows [] ","from_col < ","from_row < ","from_col > ","from_row > "," row_count "," raise ","param inspect ","size_col < ","size_row < ","to_col - ","col_range exclude_end? ","to_col < ","col_range end ","col_range first ","to_row - ","row_range exclude_end? ","to_row < ","row_range end ","row_range first ","param size ","(send\n  (send nil :column_count) :-\n  (lvar :col_range first )) min ","col_range first  < ","row_range first  < ","col_range first  > ","row_range first  > ","to_col -  < ","to_row -  < ","col_range end  - ","col_range end  < ","row_range end  - ","row_range end  < "]}," Matrix index":{"type":"method","name":"index","children":[],"call":[" each_with_index ","e == ","args first ","args size == ","args size "," to_enum "," block_given? ","args pop ","SELECTORS  include? ","args last "," raise ","args size > "]}," Matrix each_with_index":{"type":"method","name":"each_with_index","children":[],"call":[" raise ","which inspect ","row [] ","row_index upto ","@rows each_with_index ","(send\n  (lvar :row_index) :+\n  (int 1)) upto ","row_index + ","(lvar :row_index) min times ","(lvar :row_index) min "," column_count ","0 upto ","row_index == "," column_count times ","row fetch ","row each_with_index "," column_count - "," to_enum "," block_given? "]}," Matrix each":{"type":"method","name":"each","children":[],"call":[" raise ","which inspect ","row [] ","row_index upto ","@rows each_with_index ","(send\n  (lvar :row_index) :+\n  (int 1)) upto ","row_index + ","(lvar :row_index) min times ","(lvar :row_index) min "," column_count ","0 upto ","row_index == "," column_count times ","row fetch ","row each ","@rows each ","Proc  new "," column_count - "," to_enum "," block_given? "," Proc  new _given? "]}," Matrix freeze":{"type":"method","name":"freeze","children":[],"call":["@rows freeze ","@rows each freeze ","@rows each "]}," Matrix collect!":{"type":"method","name":"collect!","children":[],"call":["@rows [] []= ","@rows [] "," each_with_index "," raise "," frozen? "," to_enum "," block_given? "]}," Matrix collect":{"type":"method","name":"collect","children":[],"call":[" dup collect! "," dup "," to_enum "," block_given? "]}," Matrix column":{"type":"method","name":"column","children":[],"call":["Vector  elements ","@rows [] [] ","@rows [] ","Array  new "," row_count ","j < "," column_count -@ "," column_count ","j >= "," row_count times "," block_given? "]}," Matrix row":{"type":"method","name":"row","children":[],"call":["Vector  elements ","@rows fetch ","(send\n  (ivar :@rows) :fetch\n  (lvar :i)) each "," block_given? "]}," Matrix row_count":{"type":"method","name":"row_count","children":[],"call":["@rows size "]}," Matrix set_col_range":{"type":"method","name":"set_col_range","children":[],"call":["@rows [] []= ","@rows [] ","Matrix  Raise ","col_range size == ","value size ","col_range size ","Array  new ","value row to_a ","value row ","value row_count == ","value row_count ","value is_a? ","value to_a "," raise ","value to_a  size ","value to_a  row to_a ","value to_a  row ","value to_a  row_count == ","value to_a  row_count ","value to_a  is_a? ","value to_a  to_a "]}," Matrix set_column_vector":{"type":"method","name":"set_column_vector","children":[],"call":["@rows [] []= ","@rows [] ","row_range begin + ","row_range begin ","value each_with_index ","@row_range begin + ows [] []= ","@row_range begin + ows [] ","row_range begin + ow_row_range begin + ange begin + ","row_range begin + ow_row_range begin + ange begin "]}," Matrix set_row_range":{"type":"method","name":"set_row_range","children":[],"call":["e []= ","@rows [] each ","@rows [] "," set_column_vector ","Matrix  Raise ","row_range size == ","value size ","row_range size ","value column ","value column_count == ","value column_count ","value is_a? "," raise ","value column  size ","value column  column ","value column  column_count == ","value column  column_count ","value column  is_a? "]}," Matrix set_row_and_col_range":{"type":"method","name":"set_row_and_col_range","children":[],"call":["@rows [] []= ","@rows [] ","row_range each ","Array  new ","col_range size "," raise ","value is_a? ","source [] ","row_range each_with_index ","value instance_variable_get ","(str \"Expected a Matrix of dimensions\") join ","value column_count ","value row_count ","row_range size ","col_range size != ","row_range size != ","value instance_variable_get  [] "]}," Matrix set_value":{"type":"method","name":"set_value","children":[],"call":["@rows [] []= ","@rows [] "," raise ","value class ","value respond_to? "]}," Matrix check_int":{"type":"method","name":"check_int","children":[],"call":["CoercionHelper  check_int "," column_count "," row_count ","direction == "," column_ column_count  "," column_ row_count  "," row_ column_count  "," row_ row_count  "]}," Matrix check_range":{"type":"method","name":"check_range","children":[],"call":["CoercionHelper  check_range "," column_count "," row_count ","direction == ","val is_a? "," column_ column_count  "," column_ row_count  "," row_ column_count  "," row_ row_count  "]}," Matrix []=":{"type":"method","name":"[]=","children":[],"call":[" set_value "," set_col_range "," set_row_range "," set_row_and_col_range "," check_int "," check_range "," raise "," frozen? "," set_ check_int _range "," set_ check_int _and_col_range "]}," Matrix []":{"type":"method","name":"[]","children":[],"call":["(send\n  (ivar :@rows) :fetch\n  (lvar :i)) [] ","@rows fetch "]}," Matrix new_matrix":{"type":"method","name":"new_matrix","children":[],"call":[" class send "," class "]}," Matrix initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Matrix combine":{"type":"method","name":"combine","children":[],"call":["Matrix  combine "]}," Matrix empty":{"type":"method","name":"empty","children":[],"call":[]}," Matrix column_vector":{"type":"method","name":"column_vector","children":[],"call":[]}," Matrix row_vector":{"type":"method","name":"row_vector","children":[],"call":[]}," Matrix zero":{"type":"method","name":"zero","children":[],"call":[]}," Matrix identity":{"type":"method","name":"identity","children":[],"call":[]}," Matrix scalar":{"type":"method","name":"scalar","children":[],"call":[]}," Matrix diagonal":{"type":"method","name":"diagonal","children":[],"call":[]}," Matrix build":{"type":"method","name":"build","children":[],"call":[]}," Matrix columns":{"type":"method","name":"columns","children":[],"call":[]}," Matrix rows":{"type":"method","name":"rows","children":[],"call":[]}," Matrix adjoint":{"type":"method","name":"adjoint","children":[],"call":[" conjugate transpose "," conjugate "]}," Matrix abs":{"type":"method","name":"abs","children":[],"call":[" collect "]}," ExceptionForMatrix ErrOperationNotImplemented initialize":{"type":"method","name":"initialize","children":[],"call":["vals [] "]}," ExceptionForMatrix ErrOperationNotDefined initialize":{"type":"method","name":"initialize","children":[],"call":["vals [] ","vals is_a? "]}," ExceptionForMatrix ErrNotRegular initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ExceptionForMatrix ErrDimensionMismatch initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Matrix LUPDecomposition initialize":{"type":"method","name":"initialize","children":[],"call":["@lu [] []= ","@lu [] [] quo ","@lu [] [] ","@lu [] ","(send\n  (lvar :j) :+\n  (int 1)) upto ","@row_count - ","j + ","@lu [] [] != ","j < ","@pivot_sign -@ ","@pivots []= ","@pivots [] ","@column_count times ","p != ","lu_col_j [] abs > ","lu_col_j [] abs ","lu_col_j [] ","lu_row_i []= ","lu_row_i [] * ","lu_row_i [] ","kmax times ","(lvar :i) min ","@row_count times ","lu_col_j []= ","Array  new ","a column_count ","a row_count ","a to_a "," raise ","a class ","a is_a? ","a to_a  [] []= ","a to_a  [] [] quo ","a to_a  [] [] ","a to_a  [] ","(send\n  (lvar :j) :+\n  (in@lu [] []  1)) up@lu [] [] o ","@row_coun@lu [] []  - ","a row_count  - ","a to_a  [] [] != ","@pivot_sign -@  -@ ","@pivo@lu [] [] _sign -@ ","@pivo@lu [] [] s []= ","Array  new  []= ","@pivo@lu [] [] s [] ","Array  new  [] ","@column_coun@lu [] []  @lu [] [] imes ","a column_count  times ","Array  new  [] abs > ","Array  new  [] abs ","@lu []  []= ","@lu []  [] * ","@lu []  [] ","@pivots [] max times ","kmax @lu [] [] imes ","(lvar :i) min  times ","@row_coun@lu [] []  @lu [] [] imes ","a row_count  times ","a column_coun@lu [] []  ","a row_coun@lu [] []  ","a @lu [] [] o_a "]}," Matrix LUPDecomposition solve":{"type":"method","name":"solve","children":[],"call":["Vector  elements ","m [] * ","@lu [] [] ","@lu [] ","m [] ","k times ","m []= ","m [] quo ","(send\n  (ivar :@column_count) :-\n  (int 1)) downto ","@column_count - ","(send\n  (lvar :k) :+\n  (int 1)) upto ","k + ","@column_count times ","b values_at "," raise ","b size != ","b size "," convert_to_array ","Matrix  send ","m [] [] * ","m [] [] ","nx times ","m [] []= ","m [] [] quo ","b row to_a ","b row ","@pivots map ","b column_count ","b row_count != ","b row_count ","b is_a? "," singular? ","Vector  eleb values_at ents ","b values_at  [] * ","b values_at  [] ","k tib values_at es ","b values_at  []= ","b values_at  [] quo ","(send\n  (ivar :@colub values_at n_count) :-\n  (int 1)) downto ","@colub values_at n_count - ","@colub values_at n_count tib values_at es "," convert_to_array  values_at "," convert_to_array  size != "," convert_to_array  size ","b values_at  [] [] * ","b values_at  [] [] ","nx tib values_at es ","b column_count  times ","b values_at  [] []= ","b values_at  [] [] quo "," convert_to_array  row to_a "," convert_to_array  row ","@pivots b values_at ap ","b colub values_at n_count "," convert_to_array  column_count "," convert_to_array  row_count != "," convert_to_array  row_count "," convert_to_array  is_a? "]}," Matrix LUPDecomposition det":{"type":"method","name":"det","children":[],"call":["@lu [] [] ","@lu [] ","@column_count times "," raise ","@row_count != "]}," Matrix LUPDecomposition singular?":{"type":"method","name":"singular?","children":[],"call":["@lu [] [] == ","@lu [] [] ","@lu [] ","@column_count times "]}," Matrix LUPDecomposition to_ary":{"type":"method","name":"to_ary","children":[],"call":[" p "," u "," l "]}," Matrix LUPDecomposition p":{"type":"method","name":"p","children":[],"call":["Matrix  send ","rows [] []= ","rows [] ","@pivots each_with_index ","Array  new "]}," Matrix LUPDecomposition u":{"type":"method","name":"u","children":[],"call":["@lu [] [] ","@lu [] ","i <= ","Matrix  build ","(ivar :@column_count) min "]}," Matrix LUPDecomposition l":{"type":"method","name":"l","children":[],"call":["i == ","@lu [] [] ","@lu [] ","i > ","Matrix  build ","(ivar :@column_count) min "]}," Matrix EigenvalueDecomposition hessenberg_to_real_schur":{"type":"method","name":"hessenberg_to_real_schur","children":[],"call":["@v [] []= ","@v [] ","@v [] [] * ","@h [] [] ","@h [] ","@v [] [] ","low upto ","(lvar :j) min ","(send\n  (lvar :nn) :-\n  (int 1)) downto ","nn - ","i upto ","i > ","i < ","nn times ","@h [] []= ","@h [] [] / ","n - ","(send\n  (lvar :eps) :*\n  (lvar :t)) * > ","(send\n  (lvar :eps) :*\n  (lvar :t)) * ","eps * ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max ","@h [] [] abs ","i + "," cdiv ","s -@ - ","y * ","s -@ ","r -@ - ","r -@ ","(send\n  (send\n    (send\n      (lvar :sa) :-@) :-\n    (send\n      (lvar :w) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (lvar :n)))) :-\n  (send\n    (lvar :q) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (send\n        (lvar :n) :-\n        (int 1))))) / ","sa -@ - - ","q * ","sa -@ - ","w * ","sa -@ ","(send\n  (send\n    (send\n      (lvar :ra) :-@) :-\n    (send\n      (lvar :w) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (send\n          (lvar :n) :-\n          (int 1))))) :+\n  (send\n    (lvar :q) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (lvar :n)))) / ","ra -@ - + ","ra -@ - ","ra -@ ","x abs > ","z abs + ","q abs ","z abs ","x abs ","x * - - ","x * - ","z * ","x * ","x * - + ","eps * * ","w abs + + + + ","w abs + + + ","y abs ","w abs + + ","w abs + ","w abs ","vi == ","vr == ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * * ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * ","@d [] - ","@d [] ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * + - ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * + ","@e [] * ","@e [] ","@e [] == ","@e [] < ","@h [] [] - ","sa + ","@h [] [] * ","ra + ","l upto ","(send\n  (lvar :n) :-\n  (int 2)) downto ","@h [] [] -@ ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :p)) -@ / ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :p)) -@ ","q / ","@h [] [] abs > ","q < ","(send\n  (send\n    (lvar :s) :-@) :-\n  (send\n    (lvar :y) :*\n    (lvar :t))) / ","(send\n  (send\n    (lvar :r) :-@) :-\n  (send\n    (lvar :w) :*\n    (lvar :t))) / ","(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) / ","r -@ / ","w != ","(send\n  (lvar :k) :-\n  (int 1)) downto ","k - ","q == ","norm == ","@v [] [] - ","p * ","k + ","x * + ","0 upto ","(lvar :n) min ","r * ","@h [] [] + ","k upto ","r / ","p / ","l != ","s -@ * ","k != ","s != ","p < ","Math  sqrt ","p * + + ","p * + ","x == ","p abs + + ","r abs ","p abs + ","p abs ","m upto ","i - ","m + ","(send\n  (lvar :m) :+\n  (int 2)) upto ","@h [] [] abs * < ","p abs * ","@h [] [] abs + + ","@h [] [] abs + ","m - ","@h [] [] abs * ","q abs + ","m == ","@h [] [] - - - ","@h [] [] - - ","(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / + ","(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / ","r * - ","y - ","x - ","m >= ","iter + ","w / ","(send\n  (lvar :y) :-\n  (lvar :x)) / + ","(send\n  (lvar :y) :-\n  (lvar :x)) / ","y < ","s > ","s + ","iter == ","-0.4375 * * ","-0.4375 * ","0.75 * ","l < ","@e []= ","z -@ ","@d []= ","x + ","q * - ","q * + ","(send\n  (lvar :n) :-\n  (int 1)) upto ","z / ","x / ","x abs + ","z != ","p - ","p + ","p >= ","q >= ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / ","l == ","@h [] [] abs < ","l - ","s == ","l > ","n >= ","norm + ","(send\n  (array\n    (send\n      (lvar :i) :-\n      (int 1))\n    (int 0)) :max) upto ","(send\n  (lvar :i) :-\n  (int 1)) max ","low up(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max o ","low up@h [] [] abs o ","low up(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) / o ","lo@h [] [] -  upto ","lo-0.4375 * *  upto ","lo@h [] [] *  upto ","n - ow upto ","low u@d [] to ","low ux * + to ","low u@h [] [] + to ","low u@h [] [] to ","low u(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / + to ","low ux / to ","low u(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / to ","(n - var :j) min ","(lva@h [] []  :j) min ","(lvax -  :j) min ","(lvaMath  sqrt  :j) min ","(lvar :j) n - in ","(lvar :j) minn -  ","(send\n  (lvar :nn) :-\n  (in(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max  1)) down(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max o ","(send\n  (lvar :nn) :-\n  (in@h [] [] abs  1)) down@h [] [] abs o ","(send\n  (lvar :nn) :-\n  (in(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) /  1)) down(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) / o ","(send\n  (lvar :nn) :-\n  (int 1)) do@h [] [] - nto ","(send\n  (lvar :nn) :-\n  (int 1)) do-0.4375 * * nto ","(send\n  (lvar :nn) :-\n  (int 1)) do@h [] [] * nto ","(send\n  (n - var :nn) :-\n  (int 1)) downto ","(s -@ end\n  (lvar :nn) :-\n  (int 1)) downto ","(Math  sqrt end\n  (lvar :nn) :-\n  (int 1)) downto ","(p abs + + end\n  (lvar :nn) :-\n  (int 1)) downto ","(y - end\n  (lvar :nn) :-\n  (int 1)) downto ","(x - end\n  (lvar :nn) :-\n  (int 1)) downto ","((send\n  (lvar :y) :-\n  (lvar :x)) / end\n  (lvar :nn) :-\n  (int 1)) downto ","(@h [] [] abs + end\n  (lvar :nn) :-\n  (int 1)) downto ","(x abs + end\n  (lvar :nn) :-\n  (int 1)) downto ","(send\n  (lva@h [] []  :nn) :-\n  (int 1)) downto ","(send\n  (lvax -  :nn) :-\n  (int 1)) downto ","(send\n  (lvaMath  sqrt  :nn) :-\n  (int 1)) downto ","(senn - d\n  (lvar :nn - nn - ) :-\n  (inn - t 1)) downn - to ","nn - nn -  - ","i up(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max o ","i up@h [] [] abs o ","i up(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) / o ","i u@d [] to ","i ux * + to ","i u@h [] [] + to ","i u@h [] [] to ","i u(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / + to ","i ux / to ","i u(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / to ","nn (send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max imes ","nn @h [] [] abs imes ","nn (send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) / imes ","nn times -@  ","nn timeMath  sqrt  ","nn timep abs + +  ","nn timey -  ","nn timex -  ","nn time(send\n  (lvar :y) :-\n  (lvar :x)) /  ","nn time@h [] [] abs +  ","nn timex abs +  ","nn tin - es ","nn - nn -  times ","nn -  - ","(send\n  (lvar :eps) :*\n  (lvar :(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max )) * > ","(send\n  (lvar :eps) :*\n  (lvar :@h [] [] abs )) * > ","(send\n  (lvar :eps) :*\n  (lvar :(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) / )) * > ","(send\n  (n - var :eps) :*\n  (n - var :t)) * > ","(send\n  (lvar :e@d [] s) :*\n  (lvar :t)) * > ","(send\n  (lvar :ex * + s) :*\n  (lvar :t)) * > ","(send\n  (lvar :e@h [] [] + s) :*\n  (lvar :t)) * > ","(send\n  (lvar :e@h [] [] s) :*\n  (lvar :t)) * > ","(send\n  (lvar :e(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / + s) :*\n  (lvar :t)) * > ","(send\n  (lvar :ex / s) :*\n  (lvar :t)) * > ","(send\n  (lvar :e(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / s) :*\n  (lvar :t)) * > ","(s -@ end\n  (lvar :eps -@ ) :*\n  (lvar :t)) * > ","(Math  sqrt end\n  (lvar :epMath  sqrt ) :*\n  (lvar :t)) * > ","(p abs + + end\n  (lvar :epp abs + + ) :*\n  (lvar :t)) * > ","(y - end\n  (lvar :epy - ) :*\n  (lvar :t)) * > ","(x - end\n  (lvar :epx - ) :*\n  (lvar :t)) * > ","((send\n  (lvar :y) :-\n  (lvar :x)) / end\n  (lvar :ep(send\n  (lvar :y) :-\n  (lvar :x)) / ) :*\n  (lvar :t)) * > ","(@h [] [] abs + end\n  (lvar :ep@h [] [] abs + ) :*\n  (lvar :t)) * > ","(x abs + end\n  (lvar :epx abs + ) :*\n  (lvar :t)) * > ","(send\n  (lva@h [] []  :eps) :*\n  (lva@h [] []  :t)) * > ","(send\n  (lvax -  :eps) :*\n  (lvax -  :t)) * > ","(send\n  (lvaMath  sqrt  :eps) :*\n  (lvaMath  sqrt  :t)) * > ","(senn - d\n  (lvar :eps) :*\n  (lvar :t)) * > ","(send\n  (lvar :eps) :*\n  (lvar :(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max )) * ","(send\n  (lvar :eps) :*\n  (lvar :@h [] [] abs )) * ","(send\n  (lvar :eps) :*\n  (lvar :(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) / )) * ","(send\n  (n - var :eps) :*\n  (n - var :t)) * ","(send\n  (lvar :e@d [] s) :*\n  (lvar :t)) * ","(send\n  (lvar :ex * + s) :*\n  (lvar :t)) * ","(send\n  (lvar :e@h [] [] + s) :*\n  (lvar :t)) * ","(send\n  (lvar :e@h [] [] s) :*\n  (lvar :t)) * ","(send\n  (lvar :e(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / + s) :*\n  (lvar :t)) * ","(send\n  (lvar :ex / s) :*\n  (lvar :t)) * ","(send\n  (lvar :e(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / s) :*\n  (lvar :t)) * ","(s -@ end\n  (lvar :eps -@ ) :*\n  (lvar :t)) * ","(Math  sqrt end\n  (lvar :epMath  sqrt ) :*\n  (lvar :t)) * ","(p abs + + end\n  (lvar :epp abs + + ) :*\n  (lvar :t)) * ","(y - end\n  (lvar :epy - ) :*\n  (lvar :t)) * ","(x - end\n  (lvar :epx - ) :*\n  (lvar :t)) * ","((send\n  (lvar :y) :-\n  (lvar :x)) / end\n  (lvar :ep(send\n  (lvar :y) :-\n  (lvar :x)) / ) :*\n  (lvar :t)) * ","(@h [] [] abs + end\n  (lvar :ep@h [] [] abs + ) :*\n  (lvar :t)) * ","(x abs + end\n  (lvar :epx abs + ) :*\n  (lvar :t)) * ","(send\n  (lva@h [] []  :eps) :*\n  (lva@h [] []  :t)) * ","(send\n  (lvax -  :eps) :*\n  (lvax -  :t)) * ","(send\n  (lvaMath  sqrt  :eps) :*\n  (lvaMath  sqrt  :t)) * ","(senn - d\n  (lvar :eps) :*\n  (lvar :t)) * ","e@d [] s * ","ex * + s * ","e@h [] [] + s * ","e@h [] [] s * ","e(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / + s * ","ex / s * ","e(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / s * ","eps -@  * ","epMath  sqrt  * ","epp abs + +  * ","epy -  * ","epx -  * ","ep(send\n  (lvar :y) :-\n  (lvar :x)) /  * ","ep@h [] [] abs +  * ","epx abs +  * ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (in(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max  1))) :abs) max ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (in@h [] [] abs  1))) :abs) max ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (in(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) /  1))) :abs) max ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) ma@h [] []  ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) map /  ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) map abs + +  ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (n - var :i)) :[]\n    (send\n      (n - var :n) :-\n      (int 1))) :abs) max ","(s -@ end\n  (s -@ end\n    (s -@ end\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (s -@ end\n      (lvar :n) :-\n      (int 1))) :abs -@ ) max ","(Math  sqrt end\n  (Math  sqrt end\n    (Math  sqrt end\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (Math  sqrt end\n      (lvar :n) :-\n      (int 1))) :abMath  sqrt ) max ","(p abs + + end\n  (p abs + + end\n    (p abs + + end\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (p abs + + end\n      (lvar :n) :-\n      (int 1))) :abp abs + + ) max ","(y - end\n  (y - end\n    (y - end\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (y - end\n      (lvar :n) :-\n      (int 1))) :aby - ) max ","(x - end\n  (x - end\n    (x - end\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (x - end\n      (lvar :n) :-\n      (int 1))) :abx - ) max ","((send\n  (lvar :y) :-\n  (lvar :x)) / end\n  ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n    ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n      (lvar :n) :-\n      (int 1))) :ab(send\n  (lvar :y) :-\n  (lvar :x)) / ) max ","(@h [] [] abs + end\n  (@h [] [] abs + end\n    (@h [] [] abs + end\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (@h [] [] abs + end\n      (lvar :n) :-\n      (int 1))) :ab@h [] [] abs + ) max ","(x abs + end\n  (x abs + end\n    (x abs + end\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (x abs + end\n      (lvar :n) :-\n      (int 1))) :abx abs + ) max ","(send\n  (send\n    (send\n      (iva@h [] []  :@h) :[]\n      (lva@h [] []  :i)) :[]\n    (send\n      (lva@h [] []  :n) :-\n      (int 1))) :abs) max ","(send\n  (send\n    (send\n      (ivax -  :@h) :[]\n      (lvax -  :i)) :[]\n    (send\n      (lvax -  :n) :-\n      (int 1))) :abs) max ","(send\n  (send\n    (send\n      (ivaMath  sqrt  :@h) :[]\n      (lvaMath  sqrt  :i)) :[]\n    (send\n      (lvaMath  sqrt  :n) :-\n      (int 1))) :abs) max ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) n - ax ","(senn - d\n  (senn - d\n    (senn - d\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (senn - d\n      (lvar :nn - ) :-\n      (inn - t 1))) :abs) max ","@h [] [] abs -@  ","@h [] [] abMath  sqrt  ","@h [] [] abp abs + +  ","@h [] [] aby -  ","@h [] [] abx -  ","@h [] [] ab(send\n  (lvar :y) :-\n  (lvar :x)) /  ","@h [] [] ab@h [] [] abs +  ","@h [] [] abx abs +  ","s -@  -@ - ","Math  sqrt  -@ - ","p abs + +  -@ - ","y -  -@ - ","x -  -@ - ","(send\n  (lvar :y) :-\n  (lvar :x)) /  -@ - ","@h [] [] abs +  -@ - ","x abs +  -@ - ","@h [] []  * ","q /  * ","0.75 *  * ","s -@  -@ ","Math  sqrt  -@ ","p abs + +  -@ ","y -  -@ ","x -  -@ ","(send\n  (lvar :y) :-\n  (lvar :x)) /  -@ ","@h [] [] abs +  -@ ","x abs +  -@ ","@h [] []  -@ - ","@h [] []  -@ ","(send\n  (send\n    (send\n      (lvar :sa) :-@) :-\n    (send\n      (lvar :w) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (lvar :n)))) :-\n  (send\n    (lvar :q) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (send\n        (lvar :n) :-\n        (in(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max  1))))) / ","(send\n  (send\n    (send\n      (lvar :sa) :-@) :-\n    (send\n      (lvar :w) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (lvar :n)))) :-\n  (send\n    (lvar :q) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (send\n        (lvar :n) :-\n        (in@h [] [] abs  1))))) / ","(send\n  (send\n    (send\n      (lvar :sa) :-@) :-\n    (send\n      (lvar :w) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (lvar :n)))) :-\n  (send\n    (lvar :q) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (send\n        (lvar :n) :-\n        (in(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) /  1))))) / ","(send\n  (send\n    (send\n      (lvar :sa) :-@) :-\n    (send\n      (lvar :@h [] [] - ) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (lvar :n)))) :-\n  (send\n    (lvar :q) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (send\n        (lvar :n) :-\n        (int 1))))) / ","(send\n  (send\n    (send\n      (lvar :sa) :-@) :-\n    (send\n      (lvar :-0.4375 * * ) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (lvar :n)))) :-\n  (send\n    (lvar :q) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (send\n        (lvar :n) :-\n        (int 1))))) / ","(send\n  (send\n    (send\n      (lvar :sa) :-@) :-\n    (send\n      (lvar :@h [] [] * ) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (lvar :n)))) :-\n  (send\n    (lvar :q) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (send\n        (lvar :n) :-\n        (int 1))))) / ","(send\n  (send\n    (send\n      (lvar :sa + ) :-@) :-\n    (send\n      (lvar :w) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (lvar :n)))) :-\n  (send\n    (lvar :q) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (send\n        (lvar :n) :-\n        (int 1))))) / ","(send\n  (send\n    (send\n      (n - var :sa) :-@) :-\n    (send\n      (n - var :w) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (n - var :i)) :[]\n        (n - var :n)))) :-\n  (send\n    (n - var :q) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (n - var :i)) :[]\n      (send\n        (n - var :n) :-\n        (int 1))))) / ","(send\n  (send\n    (send\n      (lvar :sa) :-@) :-\n    (send\n      (lvar :w) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (lvar :n)))) :-\n  (send\n    (lvar :(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * + ) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (send\n        (lvar :n) :-\n        (int 1))))) / ","(send\n  (send\n    (send\n      (lvar :sa) :-@) :-\n    (send\n      (lvar :w) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (lvar :n)))) :-\n  (send\n    (lvar :@e [] ) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (send\n        (lvar :n) :-\n        (int 1))))) / ","(send\n  (send\n    (send\n      (lvar :sa) :-@) :-\n    (send\n      (lvar :w) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (lvar :n)))) :-\n  (send\n    (lvar :@h [] [] ) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (send\n        (lvar :n) :-\n        (int 1))))) / ","(send\n  (send\n    (send\n      (lvar :sa) :-@) :-\n    (send\n      (lvar :w) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (lvar :n)))) :-\n  (send\n    (lvar :@h [] [] - - - ) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (send\n        (lvar :n) :-\n        (int 1))))) / ","(send\n  (send\n    (send\n      (lvar :sa) :-@) :-\n    (send\n      (lvar :w) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (lvar :n)))) :-\n  (send\n    (lvar :z / ) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (send\n        (lvar :n) :-\n        (int 1))))) / ","(send\n  (send\n    (send\n      (lvar :sa) :-@) :-\n    (send\n      (lvar :w) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (lvar :n)))) :-\n  (send\n    (lvar :p * + ) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (send\n        (lvar :n) :-\n        (int 1))))) / ","(s -@ end\n  (s -@ end\n    (s -@ end\n      (lvar :s -@ a) :-@) :-\n    (s -@ end\n      (lvar :w) :*\n      (s -@ end\n        (s -@ end\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (lvar :n)))) :-\n  (s -@ end\n    (lvar :q) :*\n    (s -@ end\n      (s -@ end\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (s -@ end\n        (lvar :n) :-\n        (int 1))))) / ","(Math  sqrt end\n  (Math  sqrt end\n    (Math  sqrt end\n      (lvar :Math  sqrt a) :-@) :-\n    (Math  sqrt end\n      (lvar :w) :*\n      (Math  sqrt end\n        (Math  sqrt end\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (lvar :n)))) :-\n  (Math  sqrt end\n    (lvar :q) :*\n    (Math  sqrt end\n      (Math  sqrt end\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (Math  sqrt end\n        (lvar :n) :-\n        (int 1))))) / ","(p abs + + end\n  (p abs + + end\n    (p abs + + end\n      (lvar :p abs + + a) :-@) :-\n    (p abs + + end\n      (lvar :w) :*\n      (p abs + + end\n        (p abs + + end\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (lvar :n)))) :-\n  (p abs + + end\n    (lvar :q) :*\n    (p abs + + end\n      (p abs + + end\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (p abs + + end\n        (lvar :n) :-\n        (int 1))))) / ","(y - end\n  (y - end\n    (y - end\n      (lvar :y - a) :-@) :-\n    (y - end\n      (lvar :w) :*\n      (y - end\n        (y - end\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (lvar :n)))) :-\n  (y - end\n    (lvar :q) :*\n    (y - end\n      (y - end\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (y - end\n        (lvar :n) :-\n        (int 1))))) / ","(x - end\n  (x - end\n    (x - end\n      (lvar :x - a) :-@) :-\n    (x - end\n      (lvar :w) :*\n      (x - end\n        (x - end\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (lvar :n)))) :-\n  (x - end\n    (lvar :q) :*\n    (x - end\n      (x - end\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (x - end\n        (lvar :n) :-\n        (int 1))))) / ","((send\n  (lvar :y) :-\n  (lvar :x)) / end\n  ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n    ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n      (lvar :(send\n  (lvar :y) :-\n  (lvar :x)) / a) :-@) :-\n    ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n      (lvar :w) :*\n      ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n        ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (lvar :n)))) :-\n  ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n    (lvar :q) :*\n    ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n      ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n        (lvar :n) :-\n        (int 1))))) / ","(@h [] [] abs + end\n  (@h [] [] abs + end\n    (@h [] [] abs + end\n      (lvar :@h [] [] abs + a) :-@) :-\n    (@h [] [] abs + end\n      (lvar :w) :*\n      (@h [] [] abs + end\n        (@h [] [] abs + end\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (lvar :n)))) :-\n  (@h [] [] abs + end\n    (lvar :q) :*\n    (@h [] [] abs + end\n      (@h [] [] abs + end\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (@h [] [] abs + end\n        (lvar :n) :-\n        (int 1))))) / ","(x abs + end\n  (x abs + end\n    (x abs + end\n      (lvar :x abs + a) :-@) :-\n    (x abs + end\n      (lvar :w) :*\n      (x abs + end\n        (x abs + end\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (lvar :n)))) :-\n  (x abs + end\n    (lvar :q) :*\n    (x abs + end\n      (x abs + end\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (x abs + end\n        (lvar :n) :-\n        (int 1))))) / ","(send\n  (send\n    (send\n      (lva@h [] []  :sa) :-@) :-\n    (send\n      (lva@h [] []  :w) :*\n      (send\n        (send\n          (iva@h [] []  :@h) :[]\n          (lva@h [] []  :i)) :[]\n        (lva@h [] []  :n)))) :-\n  (send\n    (lva@h [] []  :q) :*\n    (send\n      (send\n        (iva@h [] []  :@h) :[]\n        (lva@h [] []  :i)) :[]\n      (send\n        (lva@h [] []  :n) :-\n        (int 1))))) / ","(send\n  (send\n    (send\n      (lvax -  :sa) :-@) :-\n    (send\n      (lvax -  :w) :*\n      (send\n        (send\n          (ivax -  :@h) :[]\n          (lvax -  :i)) :[]\n        (lvax -  :n)))) :-\n  (send\n    (lvax -  :q) :*\n    (send\n      (send\n        (ivax -  :@h) :[]\n        (lvax -  :i)) :[]\n      (send\n        (lvax -  :n) :-\n        (int 1))))) / ","(send\n  (send\n    (send\n      (lvaMath  sqrt  :sa) :-@) :-\n    (send\n      (lvaMath  sqrt  :w) :*\n      (send\n        (send\n          (ivaMath  sqrt  :@h) :[]\n          (lvaMath  sqrt  :i)) :[]\n        (lvaMath  sqrt  :n)))) :-\n  (send\n    (lvaMath  sqrt  :q) :*\n    (send\n      (send\n        (ivaMath  sqrt  :@h) :[]\n        (lvaMath  sqrt  :i)) :[]\n      (send\n        (lvaMath  sqrt  :n) :-\n        (int 1))))) / ","(senn - d\n  (senn - d\n    (senn - d\n      (lvar :sa) :-@) :-\n    (senn - d\n      (lvar :w) :*\n      (senn - d\n        (senn - d\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (lvar :nn - )))) :-\n  (senn - d\n    (lvar :q) :*\n    (senn - d\n      (senn - d\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (senn - d\n        (lvar :nn - ) :-\n        (inn - t 1))))) / ","sa +  -@ - - ","s -@ a -@ - - ","Math  sqrt a -@ - - ","p abs + + a -@ - - ","y - a -@ - - ","x - a -@ - - ","(send\n  (lvar :y) :-\n  (lvar :x)) / a -@ - - ","@h [] [] abs + a -@ - - ","x abs + a -@ - - ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * +  * ","@e []  * ","@h [] [] - - -  * ","z /  * ","p * +  * ","sa +  -@ - ","s -@ a -@ - ","Math  sqrt a -@ - ","p abs + + a -@ - ","y - a -@ - ","x - a -@ - ","(send\n  (lvar :y) :-\n  (lvar :x)) / a -@ - ","@h [] [] abs + a -@ - ","x abs + a -@ - ","@h [] [] -  * ","-0.4375 * *  * ","@h [] [] *  * ","sa +  -@ ","s -@ a -@ ","Math  sqrt a -@ ","p abs + + a -@ ","y - a -@ ","x - a -@ ","(send\n  (lvar :y) :-\n  (lvar :x)) / a -@ ","@h [] [] abs + a -@ ","x abs + a -@ ","(send\n  (send\n    (send\n      (lvar :ra) :-@) :-\n    (send\n      (lvar :w) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (send\n          (lvar :n) :-\n          (in(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max  1))))) :+\n  (send\n    (lvar :q) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (lvar :n)))) / ","(send\n  (send\n    (send\n      (lvar :ra) :-@) :-\n    (send\n      (lvar :w) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (send\n          (lvar :n) :-\n          (in@h [] [] abs  1))))) :+\n  (send\n    (lvar :q) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (lvar :n)))) / ","(send\n  (send\n    (send\n      (lvar :ra) :-@) :-\n    (send\n      (lvar :w) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (send\n          (lvar :n) :-\n          (in(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) /  1))))) :+\n  (send\n    (lvar :q) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (lvar :n)))) / ","(send\n  (send\n    (send\n      (lvar :ra) :-@) :-\n    (send\n      (lvar :@h [] [] - ) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (send\n          (lvar :n) :-\n          (int 1))))) :+\n  (send\n    (lvar :q) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (lvar :n)))) / ","(send\n  (send\n    (send\n      (lvar :ra) :-@) :-\n    (send\n      (lvar :-0.4375 * * ) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (send\n          (lvar :n) :-\n          (int 1))))) :+\n  (send\n    (lvar :q) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (lvar :n)))) / ","(send\n  (send\n    (send\n      (lvar :ra) :-@) :-\n    (send\n      (lvar :@h [] [] * ) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (send\n          (lvar :n) :-\n          (int 1))))) :+\n  (send\n    (lvar :q) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (lvar :n)))) / ","(send\n  (send\n    (send\n      (lvar :ra + ) :-@) :-\n    (send\n      (lvar :w) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (send\n          (lvar :n) :-\n          (int 1))))) :+\n  (send\n    (lvar :q) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (lvar :n)))) / ","(send\n  (send\n    (send\n      (n - var :ra) :-@) :-\n    (send\n      (n - var :w) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (n - var :i)) :[]\n        (send\n          (n - var :n) :-\n          (int 1))))) :+\n  (send\n    (n - var :q) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (n - var :i)) :[]\n      (n - var :n)))) / ","(send\n  (send\n    (send\n      (lvar :ra) :-@) :-\n    (send\n      (lvar :w) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (send\n          (lvar :n) :-\n          (int 1))))) :+\n  (send\n    (lvar :(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * + ) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (lvar :n)))) / ","(send\n  (send\n    (send\n      (lvar :ra) :-@) :-\n    (send\n      (lvar :w) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (send\n          (lvar :n) :-\n          (int 1))))) :+\n  (send\n    (lvar :@e [] ) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (lvar :n)))) / ","(send\n  (send\n    (send\n      (lvar :ra) :-@) :-\n    (send\n      (lvar :w) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (send\n          (lvar :n) :-\n          (int 1))))) :+\n  (send\n    (lvar :@h [] [] ) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (lvar :n)))) / ","(send\n  (send\n    (send\n      (lvar :ra) :-@) :-\n    (send\n      (lvar :w) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (send\n          (lvar :n) :-\n          (int 1))))) :+\n  (send\n    (lvar :@h [] [] - - - ) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (lvar :n)))) / ","(send\n  (send\n    (send\n      (lvar :ra) :-@) :-\n    (send\n      (lvar :w) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (send\n          (lvar :n) :-\n          (int 1))))) :+\n  (send\n    (lvar :z / ) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (lvar :n)))) / ","(send\n  (send\n    (send\n      (lvar :ra) :-@) :-\n    (send\n      (lvar :w) :*\n      (send\n        (send\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (send\n          (lvar :n) :-\n          (int 1))))) :+\n  (send\n    (lvar :p * + ) :*\n    (send\n      (send\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (lvar :n)))) / ","(s -@ end\n  (s -@ end\n    (s -@ end\n      (lvar :ra) :-@) :-\n    (s -@ end\n      (lvar :w) :*\n      (s -@ end\n        (s -@ end\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (s -@ end\n          (lvar :n) :-\n          (int 1))))) :+\n  (s -@ end\n    (lvar :q) :*\n    (s -@ end\n      (s -@ end\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (lvar :n)))) / ","(Math  sqrt end\n  (Math  sqrt end\n    (Math  sqrt end\n      (lvar :ra) :-@) :-\n    (Math  sqrt end\n      (lvar :w) :*\n      (Math  sqrt end\n        (Math  sqrt end\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (Math  sqrt end\n          (lvar :n) :-\n          (int 1))))) :+\n  (Math  sqrt end\n    (lvar :q) :*\n    (Math  sqrt end\n      (Math  sqrt end\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (lvar :n)))) / ","(p abs + + end\n  (p abs + + end\n    (p abs + + end\n      (lvar :ra) :-@) :-\n    (p abs + + end\n      (lvar :w) :*\n      (p abs + + end\n        (p abs + + end\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (p abs + + end\n          (lvar :n) :-\n          (int 1))))) :+\n  (p abs + + end\n    (lvar :q) :*\n    (p abs + + end\n      (p abs + + end\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (lvar :n)))) / ","(y - end\n  (y - end\n    (y - end\n      (lvar :ra) :-@) :-\n    (y - end\n      (lvar :w) :*\n      (y - end\n        (y - end\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (y - end\n          (lvar :n) :-\n          (int 1))))) :+\n  (y - end\n    (lvar :q) :*\n    (y - end\n      (y - end\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (lvar :n)))) / ","(x - end\n  (x - end\n    (x - end\n      (lvar :ra) :-@) :-\n    (x - end\n      (lvar :w) :*\n      (x - end\n        (x - end\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (x - end\n          (lvar :n) :-\n          (int 1))))) :+\n  (x - end\n    (lvar :q) :*\n    (x - end\n      (x - end\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (lvar :n)))) / ","((send\n  (lvar :y) :-\n  (lvar :x)) / end\n  ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n    ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n      (lvar :ra) :-@) :-\n    ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n      (lvar :w) :*\n      ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n        ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n          (lvar :n) :-\n          (int 1))))) :+\n  ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n    (lvar :q) :*\n    ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n      ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (lvar :n)))) / ","(@h [] [] abs + end\n  (@h [] [] abs + end\n    (@h [] [] abs + end\n      (lvar :ra) :-@) :-\n    (@h [] [] abs + end\n      (lvar :w) :*\n      (@h [] [] abs + end\n        (@h [] [] abs + end\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (@h [] [] abs + end\n          (lvar :n) :-\n          (int 1))))) :+\n  (@h [] [] abs + end\n    (lvar :q) :*\n    (@h [] [] abs + end\n      (@h [] [] abs + end\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (lvar :n)))) / ","(x abs + end\n  (x abs + end\n    (x abs + end\n      (lvar :ra) :-@) :-\n    (x abs + end\n      (lvar :w) :*\n      (x abs + end\n        (x abs + end\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (x abs + end\n          (lvar :n) :-\n          (int 1))))) :+\n  (x abs + end\n    (lvar :q) :*\n    (x abs + end\n      (x abs + end\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (lvar :n)))) / ","(send\n  (send\n    (send\n      (lva@h [] []  :@h [] [] a) :-@) :-\n    (send\n      (lva@h [] []  :w) :*\n      (send\n        (send\n          (iva@h [] []  :@h) :[]\n          (lva@h [] []  :i)) :[]\n        (send\n          (lva@h [] []  :n) :-\n          (int 1))))) :+\n  (send\n    (lva@h [] []  :q) :*\n    (send\n      (send\n        (iva@h [] []  :@h) :[]\n        (lva@h [] []  :i)) :[]\n      (lva@h [] []  :n)))) / ","(send\n  (send\n    (send\n      (lvax -  :x - a) :-@) :-\n    (send\n      (lvax -  :w) :*\n      (send\n        (send\n          (ivax -  :@h) :[]\n          (lvax -  :i)) :[]\n        (send\n          (lvax -  :n) :-\n          (int 1))))) :+\n  (send\n    (lvax -  :q) :*\n    (send\n      (send\n        (ivax -  :@h) :[]\n        (lvax -  :i)) :[]\n      (lvax -  :n)))) / ","(send\n  (send\n    (send\n      (lvaMath  sqrt  :Math  sqrt a) :-@) :-\n    (send\n      (lvaMath  sqrt  :w) :*\n      (send\n        (send\n          (ivaMath  sqrt  :@h) :[]\n          (lvaMath  sqrt  :i)) :[]\n        (send\n          (lvaMath  sqrt  :n) :-\n          (int 1))))) :+\n  (send\n    (lvaMath  sqrt  :q) :*\n    (send\n      (send\n        (ivaMath  sqrt  :@h) :[]\n        (lvaMath  sqrt  :i)) :[]\n      (lvaMath  sqrt  :n)))) / ","(senn - d\n  (senn - d\n    (senn - d\n      (lvar :ra) :-@) :-\n    (senn - d\n      (lvar :w) :*\n      (senn - d\n        (senn - d\n          (ivar :@h) :[]\n          (lvar :i)) :[]\n        (senn - d\n          (lvar :nn - ) :-\n          (inn - t 1))))) :+\n  (senn - d\n    (lvar :q) :*\n    (senn - d\n      (senn - d\n        (ivar :@h) :[]\n        (lvar :i)) :[]\n      (lvar :nn - )))) / ","ra +  -@ - + ","@h [] [] a -@ - + ","x - a -@ - + ","Math  sqrt a -@ - + ","ra +  -@ - ","@h [] [] a -@ - ","ra +  -@ ","@h [] [] a -@ ","@h [] []  abs > ","p /  abs > ","p abs + +  abs > ","x abs -@  > ","x abMath  sqrt  > ","x abp abs + +  > ","x aby -  > ","x abx -  > ","x ab(send\n  (lvar :y) :-\n  (lvar :x)) /  > ","x ab@h [] [] abs +  > ","x abx abs +  > ","r /  abs + ","@h [] []  abs + ","@v [] []  abs + ","p -  abs + ","p +  abs + ","Math  sqrt  abs + ","z abs -@  + ","z abMath  sqrt  + ","z abp abs + +  + ","z aby -  + ","z abx -  + ","z ab(send\n  (lvar :y) :-\n  (lvar :x)) /  + ","z ab@h [] [] abs +  + ","z abx abs +  + ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * +  abs ","@e []  abs ","@h [] []  abs ","@h [] [] - - -  abs ","z /  abs ","p * +  abs ","q abs -@  ","q abMath  sqrt  ","q abp abs + +  ","q aby -  ","q abx -  ","q ab(send\n  (lvar :y) :-\n  (lvar :x)) /  ","q ab@h [] [] abs +  ","q abx abs +  ","r /  abs ","@v [] []  abs ","p -  abs ","p +  abs ","Math  sqrt  abs ","z abs -@  ","z abMath  sqrt  ","z abp abs + +  ","z aby -  ","z abx -  ","z ab(send\n  (lvar :y) :-\n  (lvar :x)) /  ","z ab@h [] [] abs +  ","z abx abs +  ","p /  abs ","p abs + +  abs ","x abs -@  ","x abMath  sqrt  ","x abp abs + +  ","x aby -  ","x abx -  ","x ab(send\n  (lvar :y) :-\n  (lvar :x)) /  ","x ab@h [] [] abs +  ","x abx abs +  ","@h [] []  * - - ","p /  * - - ","p abs + +  * - - ","@h [] []  * - ","p /  * - ","p abs + +  * - ","r /  * ","@v [] []  * ","p -  * ","p +  * ","Math  sqrt  * ","p /  * ","p abs + +  * ","@h [] []  * - + ","p /  * - + ","p abs + +  * - + ","e@d [] s * * ","ex * + s * * ","e@h [] [] + s * * ","e@h [] [] s * * ","e(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / + s * * ","ex / s * * ","e(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / s * * ","eps -@  * * ","epMath  sqrt  * * ","epp abs + +  * * ","epy -  * * ","epx -  * * ","ep(send\n  (lvar :y) :-\n  (lvar :x)) /  * * ","ep@h [] [] abs +  * * ","epx abs +  * * ","@h [] [] -  abs + + + + ","-0.4375 * *  abs + + + + ","@h [] [] *  abs + + + + ","w abs -@  + + + + ","w abMath  sqrt  + + + + ","w abp abs + +  + + + + ","w aby -  + + + + ","w abx -  + + + + ","w ab(send\n  (lvar :y) :-\n  (lvar :x)) /  + + + + ","w ab@h [] [] abs +  + + + + ","w abx abs +  + + + + ","@h [] [] -  abs + + + ","-0.4375 * *  abs + + + ","@h [] [] *  abs + + + ","w abs -@  + + + ","w abMath  sqrt  + + + ","w abp abs + +  + + + ","w aby -  + + + ","w abx -  + + + ","w ab(send\n  (lvar :y) :-\n  (lvar :x)) /  + + + ","w ab@h [] [] abs +  + + + ","w abx abs +  + + + ","q /  abs ","0.75 *  abs ","y abs -@  ","y abMath  sqrt  ","y abp abs + +  ","y aby -  ","y abx -  ","y ab(send\n  (lvar :y) :-\n  (lvar :x)) /  ","y ab@h [] [] abs +  ","y abx abs +  ","@h [] [] -  abs + + ","-0.4375 * *  abs + + ","@h [] [] *  abs + + ","w abs -@  + + ","w abMath  sqrt  + + ","w abp abs + +  + + ","w aby -  + + ","w abx -  + + ","w ab(send\n  (lvar :y) :-\n  (lvar :x)) /  + + ","w ab@h [] [] abs +  + + ","w abx abs +  + + ","@h [] [] -  abs + ","-0.4375 * *  abs + ","@h [] [] *  abs + ","w abs -@  + ","w abMath  sqrt  + ","w abp abs + +  + ","w aby -  + ","w abx -  + ","w ab(send\n  (lvar :y) :-\n  (lvar :x)) /  + ","w ab@h [] [] abs +  + ","w abx abs +  + ","@h [] [] -  abs ","-0.4375 * *  abs ","@h [] [] *  abs ","w abs -@  ","w abMath  sqrt  ","w abp abs + +  ","w aby -  ","w abx -  ","w ab(send\n  (lvar :y) :-\n  (lvar :x)) /  ","w ab@h [] [] abs +  ","w abx abs +  ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * *  == ","eps * *  == ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * + -  == ","v@h [] []  == ","vx -  == ","vMath  sqrt  == ","(send\n  (send\n    (ivar :@d) :[]\n    (n - var :i)) :-\n  (n - var :p)) * * ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :@d [] )) * * ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :x * + )) * * ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :@h [] [] + )) * * ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :@h [] [] )) * * ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / + )) * * ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :x / )) * * ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / )) * * ","(s -@ end\n  (s -@ end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * * ","(Math  sqrt end\n  (Math  sqrt end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * * ","(p abs + + end\n  (p abs + + end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * * ","(y - end\n  (y - end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * * ","(x - end\n  (x - end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * * ","((send\n  (lvar :y) :-\n  (lvar :x)) / end\n  ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * * ","(@h [] [] abs + end\n  (@h [] [] abs + end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * * ","(x abs + end\n  (x abs + end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * * ","(send\n  (send\n    (iva@h [] []  :@d) :[]\n    (lva@h [] []  :i)) :-\n  (lva@h [] []  :p)) * * ","(send\n  (send\n    (ivax -  :@d) :[]\n    (lvax -  :i)) :-\n  (lvax -  :p)) * * ","(send\n  (send\n    (ivaMath  sqrt  :@d) :[]\n    (lvaMath  sqrt  :i)) :-\n  (lvaMath  sqrt  :p)) * * ","(senn - d\n  (senn - d\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * * ","(send\n  (send\n    (ivar :@d) :[]\n    (n - var :i)) :-\n  (n - var :p)) * ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :@d [] )) * ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :x * + )) * ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :@h [] [] + )) * ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :@h [] [] )) * ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / + )) * ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :x / )) * ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / )) * ","(s -@ end\n  (s -@ end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * ","(Math  sqrt end\n  (Math  sqrt end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * ","(p abs + + end\n  (p abs + + end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * ","(y - end\n  (y - end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * ","(x - end\n  (x - end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * ","((send\n  (lvar :y) :-\n  (lvar :x)) / end\n  ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * ","(@h [] [] abs + end\n  (@h [] [] abs + end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * ","(x abs + end\n  (x abs + end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * ","(send\n  (send\n    (iva@h [] []  :@d) :[]\n    (lva@h [] []  :i)) :-\n  (lva@h [] []  :p)) * ","(send\n  (send\n    (ivax -  :@d) :[]\n    (lvax -  :i)) :-\n  (lvax -  :p)) * ","(send\n  (send\n    (ivaMath  sqrt  :@d) :[]\n    (lvaMath  sqrt  :i)) :-\n  (lvaMath  sqrt  :p)) * ","(senn - d\n  (senn - d\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * ","(send\n  (send\n    (ivar :@d) :[]\n    (n - var :i)) :-\n  (n - var :p)) * + - ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :@d [] )) * + - ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :x * + )) * + - ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :@h [] [] + )) * + - ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :@h [] [] )) * + - ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / + )) * + - ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :x / )) * + - ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / )) * + - ","(s -@ end\n  (s -@ end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * + - ","(Math  sqrt end\n  (Math  sqrt end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * + - ","(p abs + + end\n  (p abs + + end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * + - ","(y - end\n  (y - end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * + - ","(x - end\n  (x - end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * + - ","((send\n  (lvar :y) :-\n  (lvar :x)) / end\n  ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * + - ","(@h [] [] abs + end\n  (@h [] [] abs + end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * + - ","(x abs + end\n  (x abs + end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * + - ","(send\n  (send\n    (iva@h [] []  :@d) :[]\n    (lva@h [] []  :i)) :-\n  (lva@h [] []  :p)) * + - ","(send\n  (send\n    (ivax -  :@d) :[]\n    (lvax -  :i)) :-\n  (lvax -  :p)) * + - ","(send\n  (send\n    (ivaMath  sqrt  :@d) :[]\n    (lvaMath  sqrt  :i)) :-\n  (lvaMath  sqrt  :p)) * + - ","(senn - d\n  (senn - d\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * + - ","(send\n  (send\n    (ivar :@d) :[]\n    (n - var :i)) :-\n  (n - var :p)) * + ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :@d [] )) * + ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :x * + )) * + ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :@h [] [] + )) * + ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :@h [] [] )) * + ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / + )) * + ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :x / )) * + ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / )) * + ","(s -@ end\n  (s -@ end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * + ","(Math  sqrt end\n  (Math  sqrt end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * + ","(p abs + + end\n  (p abs + + end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * + ","(y - end\n  (y - end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * + ","(x - end\n  (x - end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * + ","((send\n  (lvar :y) :-\n  (lvar :x)) / end\n  ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * + ","(@h [] [] abs + end\n  (@h [] [] abs + end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * + ","(x abs + end\n  (x abs + end\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * + ","(send\n  (send\n    (iva@h [] []  :@d) :[]\n    (lva@h [] []  :i)) :-\n  (lva@h [] []  :p)) * + ","(send\n  (send\n    (ivax -  :@d) :[]\n    (lvax -  :i)) :-\n  (lvax -  :p)) * + ","(send\n  (send\n    (ivaMath  sqrt  :@d) :[]\n    (lvaMath  sqrt  :i)) :-\n  (lvaMath  sqrt  :p)) * + ","(senn - d\n  (senn - d\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * + ","sa +  + ","s -@ a + ","Math  sqrt a + ","p abs + + a + ","y - a + ","x - a + ","(send\n  (lvar :y) :-\n  (lvar :x)) / a + ","@h [] [] abs + a + ","x abs + a + ","ra +  + ","@h [] [] a + ","l up(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max o ","l up@h [] [] abs o ","l up(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) / o ","n -  upto ","l u@d [] to ","l ux * + to ","l u@h [] [] + to ","l u@h [] [] to ","l u(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / + to ","l ux / to ","l u(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / to ","(send\n  (lvar :n) :-\n  (in(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max  2)) down(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max o ","(send\n  (lvar :n) :-\n  (in@h [] [] abs  2)) down@h [] [] abs o ","(send\n  (lvar :n) :-\n  (in(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) /  2)) down(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) / o ","(send\n  (lvar :n) :-\n  (int 2)) do@h [] [] - nto ","(send\n  (lvar :n) :-\n  (int 2)) do-0.4375 * * nto ","(send\n  (lvar :n) :-\n  (int 2)) do@h [] [] * nto ","(send\n  (n - var :n) :-\n  (int 2)) downto ","(s -@ end\n  (lvar :n) :-\n  (int 2)) downto ","(Math  sqrt end\n  (lvar :n) :-\n  (int 2)) downto ","(p abs + + end\n  (lvar :n) :-\n  (int 2)) downto ","(y - end\n  (lvar :n) :-\n  (int 2)) downto ","(x - end\n  (lvar :n) :-\n  (int 2)) downto ","((send\n  (lvar :y) :-\n  (lvar :x)) / end\n  (lvar :n) :-\n  (int 2)) downto ","(@h [] [] abs + end\n  (lvar :n) :-\n  (int 2)) downto ","(x abs + end\n  (lvar :n) :-\n  (int 2)) downto ","(send\n  (lva@h [] []  :n) :-\n  (int 2)) downto ","(send\n  (lvax -  :n) :-\n  (int 2)) downto ","(send\n  (lvaMath  sqrt  :n) :-\n  (int 2)) downto ","(senn - d\n  (lvar :nn - ) :-\n  (inn - t 2)) downn - to ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (n - var :n)) :[]\n    (n - var :n)) :-\n  (n - var :p)) -@ / ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :@d [] )) -@ / ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :x * + )) -@ / ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :@h [] [] + )) -@ / ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :@h [] [] )) -@ / ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / + )) -@ / ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :x / )) -@ / ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / )) -@ / ","(s -@ end\n  (s -@ end\n    (s -@ end\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :p)) -@ / ","(Math  sqrt end\n  (Math  sqrt end\n    (Math  sqrt end\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :p)) -@ / ","(p abs + + end\n  (p abs + + end\n    (p abs + + end\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :p)) -@ / ","(y - end\n  (y - end\n    (y - end\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :p)) -@ / ","(x - end\n  (x - end\n    (x - end\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :p)) -@ / ","((send\n  (lvar :y) :-\n  (lvar :x)) / end\n  ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n    ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :p)) -@ / ","(@h [] [] abs + end\n  (@h [] [] abs + end\n    (@h [] [] abs + end\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :p)) -@ / ","(x abs + end\n  (x abs + end\n    (x abs + end\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :p)) -@ / ","(send\n  (send\n    (send\n      (iva@h [] []  :@h) :[]\n      (lva@h [] []  :n)) :[]\n    (lva@h [] []  :n)) :-\n  (lva@h [] []  :p)) -@ / ","(send\n  (send\n    (send\n      (ivax -  :@h) :[]\n      (lvax -  :n)) :[]\n    (lvax -  :n)) :-\n  (lvax -  :p)) -@ / ","(send\n  (send\n    (send\n      (ivaMath  sqrt  :@h) :[]\n      (lvaMath  sqrt  :n)) :[]\n    (lvaMath  sqrt  :n)) :-\n  (lvaMath  sqrt  :p)) -@ / ","(senn - d\n  (senn - d\n    (senn - d\n      (ivar :@h) :[]\n      (lvar :nn - )) :[]\n    (lvar :nn - )) :-\n  (lvar :p)) -@ / ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (n - var :n)) :[]\n    (n - var :n)) :-\n  (n - var :p)) -@ ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :@d [] )) -@ ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :x * + )) -@ ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :@h [] [] + )) -@ ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :@h [] [] )) -@ ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / + )) -@ ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :x / )) -@ ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / )) -@ ","(s -@ end\n  (s -@ end\n    (s -@ end\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :p)) -@ ","(Math  sqrt end\n  (Math  sqrt end\n    (Math  sqrt end\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :p)) -@ ","(p abs + + end\n  (p abs + + end\n    (p abs + + end\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :p)) -@ ","(y - end\n  (y - end\n    (y - end\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :p)) -@ ","(x - end\n  (x - end\n    (x - end\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :p)) -@ ","((send\n  (lvar :y) :-\n  (lvar :x)) / end\n  ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n    ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :p)) -@ ","(@h [] [] abs + end\n  (@h [] [] abs + end\n    (@h [] [] abs + end\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :p)) -@ ","(x abs + end\n  (x abs + end\n    (x abs + end\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n)) :-\n  (lvar :p)) -@ ","(send\n  (send\n    (send\n      (iva@h [] []  :@h) :[]\n      (lva@h [] []  :n)) :[]\n    (lva@h [] []  :n)) :-\n  (lva@h [] []  :p)) -@ ","(send\n  (send\n    (send\n      (ivax -  :@h) :[]\n      (lvax -  :n)) :[]\n    (lvax -  :n)) :-\n  (lvax -  :p)) -@ ","(send\n  (send\n    (send\n      (ivaMath  sqrt  :@h) :[]\n      (lvaMath  sqrt  :n)) :[]\n    (lvaMath  sqrt  :n)) :-\n  (lvaMath  sqrt  :p)) -@ ","(senn - d\n  (senn - d\n    (senn - d\n      (ivar :@h) :[]\n      (lvar :nn - )) :[]\n    (lvar :nn - )) :-\n  (lvar :p)) -@ ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * +  / ","@e []  / ","@h [] []  / ","@h [] [] - - -  / ","z /  / ","p * +  / ","@h [] [] abs -@  > ","@h [] [] abMath  sqrt  > ","@h [] [] abp abs + +  > ","@h [] [] aby -  > ","@h [] [] abx -  > ","@h [] [] ab(send\n  (lvar :y) :-\n  (lvar :x)) /  > ","@h [] [] ab@h [] [] abs +  > ","@h [] [] abx abs +  > ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * +  < ","@e []  < ","@h [] []  < ","@h [] [] - - -  < ","z /  < ","p * +  < ","(send\n  (send\n    (lvar :s) :-@) :-\n  (send\n    (lvar :y) :*\n    (lvar :(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max ))) / ","(send\n  (send\n    (lvar :s) :-@) :-\n  (send\n    (lvar :y) :*\n    (lvar :@h [] [] abs ))) / ","(send\n  (send\n    (lvar :s) :-@) :-\n  (send\n    (lvar :y) :*\n    (lvar :(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) / ))) / ","(send\n  (send\n    (lvar :s) :-@) :-\n  (send\n    (lvar :@h [] [] ) :*\n    (lvar :t))) / ","(send\n  (send\n    (lvar :s) :-@) :-\n  (send\n    (lvar :q / ) :*\n    (lvar :t))) / ","(send\n  (send\n    (lvar :s) :-@) :-\n  (send\n    (lvar :0.75 * ) :*\n    (lvar :t))) / ","(send\n  (send\n    (n - var :s) :-@) :-\n  (send\n    (n - var :y) :*\n    (n - var :t))) / ","(s -@ end\n  (s -@ end\n    (lvar :s -@ ) :-@) :-\n  (s -@ end\n    (lvar :y) :*\n    (lvar :t))) / ","(Math  sqrt end\n  (Math  sqrt end\n    (lvar :Math  sqrt ) :-@) :-\n  (Math  sqrt end\n    (lvar :y) :*\n    (lvar :t))) / ","(p abs + + end\n  (p abs + + end\n    (lvar :p abs + + ) :-@) :-\n  (p abs + + end\n    (lvar :y) :*\n    (lvar :t))) / ","(y - end\n  (y - end\n    (lvar :y - ) :-@) :-\n  (y - end\n    (lvar :y) :*\n    (lvar :t))) / ","(x - end\n  (x - end\n    (lvar :x - ) :-@) :-\n  (x - end\n    (lvar :y) :*\n    (lvar :t))) / ","((send\n  (lvar :y) :-\n  (lvar :x)) / end\n  ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n    (lvar :(send\n  (lvar :y) :-\n  (lvar :x)) / ) :-@) :-\n  ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n    (lvar :y) :*\n    (lvar :t))) / ","(@h [] [] abs + end\n  (@h [] [] abs + end\n    (lvar :@h [] [] abs + ) :-@) :-\n  (@h [] [] abs + end\n    (lvar :y) :*\n    (lvar :t))) / ","(x abs + end\n  (x abs + end\n    (lvar :x abs + ) :-@) :-\n  (x abs + end\n    (lvar :y) :*\n    (lvar :t))) / ","(send\n  (send\n    (lva@h [] []  :s) :-@) :-\n  (send\n    (lva@h [] []  :y) :*\n    (lva@h [] []  :t))) / ","(send\n  (send\n    (lvax -  :s) :-@) :-\n  (send\n    (lvax -  :y) :*\n    (lvax -  :t))) / ","(send\n  (send\n    (lvaMath  sqrt  :s) :-@) :-\n  (send\n    (lvaMath  sqrt  :y) :*\n    (lvaMath  sqrt  :t))) / ","(senn - d\n  (senn - d\n    (lvar :s) :-@) :-\n  (senn - d\n    (lvar :y) :*\n    (lvar :t))) / ","(send\n  (send\n    (lvar :r) :-@) :-\n  (send\n    (lvar :w) :*\n    (lvar :(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max ))) / ","(send\n  (send\n    (lvar :r) :-@) :-\n  (send\n    (lvar :w) :*\n    (lvar :@h [] [] abs ))) / ","(send\n  (send\n    (lvar :r) :-@) :-\n  (send\n    (lvar :w) :*\n    (lvar :(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) / ))) / ","(send\n  (send\n    (lvar :r) :-@) :-\n  (send\n    (lvar :@h [] [] - ) :*\n    (lvar :t))) / ","(send\n  (send\n    (lvar :r) :-@) :-\n  (send\n    (lvar :-0.4375 * * ) :*\n    (lvar :t))) / ","(send\n  (send\n    (lvar :r) :-@) :-\n  (send\n    (lvar :@h [] [] * ) :*\n    (lvar :t))) / ","(send\n  (send\n    (n - var :r) :-@) :-\n  (send\n    (n - var :w) :*\n    (n - var :t))) / ","(s -@ end\n  (s -@ end\n    (lvar :r) :-@) :-\n  (s -@ end\n    (lvar :w) :*\n    (lvar :t))) / ","(Math  sqrt end\n  (Math  sqrt end\n    (lvar :r) :-@) :-\n  (Math  sqrt end\n    (lvar :w) :*\n    (lvar :t))) / ","(p abs + + end\n  (p abs + + end\n    (lvar :r) :-@) :-\n  (p abs + + end\n    (lvar :w) :*\n    (lvar :t))) / ","(y - end\n  (y - end\n    (lvar :r) :-@) :-\n  (y - end\n    (lvar :w) :*\n    (lvar :t))) / ","(x - end\n  (x - end\n    (lvar :r) :-@) :-\n  (x - end\n    (lvar :w) :*\n    (lvar :t))) / ","((send\n  (lvar :y) :-\n  (lvar :x)) / end\n  ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n    (lvar :r) :-@) :-\n  ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n    (lvar :w) :*\n    (lvar :t))) / ","(@h [] [] abs + end\n  (@h [] [] abs + end\n    (lvar :r) :-@) :-\n  (@h [] [] abs + end\n    (lvar :w) :*\n    (lvar :t))) / ","(x abs + end\n  (x abs + end\n    (lvar :r) :-@) :-\n  (x abs + end\n    (lvar :w) :*\n    (lvar :t))) / ","(send\n  (send\n    (lva@h [] []  :@h [] [] ) :-@) :-\n  (send\n    (lva@h [] []  :w) :*\n    (lva@h [] []  :t))) / ","(send\n  (send\n    (lvax -  :x - ) :-@) :-\n  (send\n    (lvax -  :w) :*\n    (lvax -  :t))) / ","(send\n  (send\n    (lvaMath  sqrt  :Math  sqrt ) :-@) :-\n  (send\n    (lvaMath  sqrt  :w) :*\n    (lvaMath  sqrt  :t))) / ","(senn - d\n  (senn - d\n    (lvar :r) :-@) :-\n  (senn - d\n    (lvar :w) :*\n    (lvar :t))) / ","(send\n  (send\n    (lvar :@h [] [] ) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) / ","(send\n  (send\n    (lvar :p / ) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) / ","(send\n  (send\n    (lvar :p abs + + ) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) / ","(send\n  (send\n    (n - var :x) :*\n    (n - var :s)) :-\n  (send\n    (n - var :z) :*\n    (n - var :r))) / ","(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :r / ) :*\n    (lvar :r))) / ","(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :@h [] [] ) :*\n    (lvar :r))) / ","(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :@v [] [] ) :*\n    (lvar :r))) / ","(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :p - ) :*\n    (lvar :r))) / ","(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :p + ) :*\n    (lvar :r))) / ","(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :Math  sqrt ) :*\n    (lvar :r))) / ","(s -@ end\n  (s -@ end\n    (lvar :x) :*\n    (lvar :s -@ )) :-\n  (s -@ end\n    (lvar :z) :*\n    (lvar :r))) / ","(Math  sqrt end\n  (Math  sqrt end\n    (lvar :x) :*\n    (lvar :Math  sqrt )) :-\n  (Math  sqrt end\n    (lvar :z) :*\n    (lvar :r))) / ","(p abs + + end\n  (p abs + + end\n    (lvar :x) :*\n    (lvar :p abs + + )) :-\n  (p abs + + end\n    (lvar :z) :*\n    (lvar :r))) / ","(y - end\n  (y - end\n    (lvar :x) :*\n    (lvar :y - )) :-\n  (y - end\n    (lvar :z) :*\n    (lvar :r))) / ","(x - end\n  (x - end\n    (lvar :x) :*\n    (lvar :x - )) :-\n  (x - end\n    (lvar :z) :*\n    (lvar :r))) / ","((send\n  (lvar :y) :-\n  (lvar :x)) / end\n  ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n    (lvar :x) :*\n    (lvar :(send\n  (lvar :y) :-\n  (lvar :x)) / )) :-\n  ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n    (lvar :z) :*\n    (lvar :r))) / ","(@h [] [] abs + end\n  (@h [] [] abs + end\n    (lvar :x) :*\n    (lvar :@h [] [] abs + )) :-\n  (@h [] [] abs + end\n    (lvar :z) :*\n    (lvar :r))) / ","(x abs + end\n  (x abs + end\n    (lvar :x) :*\n    (lvar :x abs + )) :-\n  (x abs + end\n    (lvar :z) :*\n    (lvar :r))) / ","(send\n  (send\n    (lva@h [] []  :x) :*\n    (lva@h [] []  :s)) :-\n  (send\n    (lva@h [] []  :z) :*\n    (lva@h [] []  :@h [] [] ))) / ","(send\n  (send\n    (lvax -  :x) :*\n    (lvax -  :s)) :-\n  (send\n    (lvax -  :z) :*\n    (lvax -  :x - ))) / ","(send\n  (send\n    (lvaMath  sqrt  :x) :*\n    (lvaMath  sqrt  :s)) :-\n  (send\n    (lvaMath  sqrt  :z) :*\n    (lvaMath  sqrt  :Math  sqrt ))) / ","(senn - d\n  (senn - d\n    (lvar :x) :*\n    (lvar :s)) :-\n  (senn - d\n    (lvar :z) :*\n    (lvar :r))) / ","@h [] []  -@ / ","x -  -@ / ","Math  sqrt  -@ / ","@h [] [] -  != ","-0.4375 * *  != ","@h [] [] *  != ","(send\n  (lvar :k) :-\n  (in(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max  1)) down(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max o ","(send\n  (lvar :k) :-\n  (in@h [] [] abs  1)) down@h [] [] abs o ","(send\n  (lvar :k) :-\n  (in(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) /  1)) down(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) / o ","(send\n  (lvar :k) :-\n  (int 1)) do@h [] [] - nto ","(send\n  (lvar :k) :-\n  (int 1)) do-0.4375 * * nto ","(send\n  (lvar :k) :-\n  (int 1)) do@h [] [] * nto ","(send\n  (n - var :k) :-\n  (int 1)) downto ","(s -@ end\n  (lvar :k) :-\n  (int 1)) downto ","(Math  sqrt end\n  (lvar :k) :-\n  (int 1)) downto ","(p abs + + end\n  (lvar :k) :-\n  (int 1)) downto ","(y - end\n  (lvar :k) :-\n  (int 1)) downto ","(x - end\n  (lvar :k) :-\n  (int 1)) downto ","((send\n  (lvar :y) :-\n  (lvar :x)) / end\n  (lvar :k) :-\n  (int 1)) downto ","(@h [] [] abs + end\n  (lvar :k) :-\n  (int 1)) downto ","(x abs + end\n  (lvar :k) :-\n  (int 1)) downto ","(send\n  (lva@h [] []  :k) :-\n  (int 1)) downto ","(send\n  (lvax -  :k) :-\n  (int 1)) downto ","(send\n  (lvaMath  sqrt  :k) :-\n  (int 1)) downto ","(senn - d\n  (lvar :k) :-\n  (inn - t 1)) downn - to ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * +  == ","@e []  == ","@h [] []  == ","@h [] [] - - -  == ","z /  == ","p * +  == ","no@h [] [] m == ","nox - m == ","noMath  sqrt m == ","norn -  == ","norm +  == ","nn - orm == ","@d []  * ","x * +  * ","@h [] [] +  * ","(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / +  * ","x /  * ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) /  * ","@h [] []  * + ","p /  * + ","p abs + +  * + ","0 up(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max o ","0 up@h [] [] abs o ","0 up(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) / o ","0 u@d [] to ","0 ux * + to ","0 u@h [] [] + to ","0 u@h [] [] to ","0 u(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / + to ","0 ux / to ","0 u(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / to ","(n - var :n) min ","(lva@h [] []  :n) min ","(lvax -  :n) min ","(lvaMath  sqrt  :n) min ","(lvar :n) n - in ","(lvar :nn - ) minn -  ","x -  * ","k up(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max o ","k up@h [] [] abs o ","k up(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) / o ","k u@d [] to ","k ux * + to ","k u@h [] [] + to ","k u@h [] [] to ","k u(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / + to ","k ux / to ","k u(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / to ","x -  / ","Math  sqrt  / ","@d []  / ","x * +  / ","@h [] [] +  / ","(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / +  / ","x /  / ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) /  / ","n -  != ","s -@  -@ * ","Math  sqrt  -@ * ","p abs + +  -@ * ","y -  -@ * ","x -  -@ * ","(send\n  (lvar :y) :-\n  (lvar :x)) /  -@ * ","@h [] [] abs +  -@ * ","x abs +  -@ * ","s -@  != ","Math  sqrt  != ","p abs + +  != ","y -  != ","x -  != ","(send\n  (lvar :y) :-\n  (lvar :x)) /  != ","@h [] [] abs +  != ","x abs +  != ","@d []  < ","x * +  < ","@h [] [] +  < ","(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / +  < ","x /  < ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) /  < ","Ma(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max h  sqr(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max  ","Ma@h [] [] abs h  sqr@h [] [] abs  ","Ma(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) / h  sqr(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) /  ","Math  s(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * + rt ","Math  s@e [] rt ","Math  s@h [] [] rt ","Math  s@h [] [] - - - rt ","Math  sz / rt ","Math  sp * + rt ","Math  s -@ qrt ","Math  Math  sqrt qrt ","Math  p abs + + qrt ","Math  y - qrt ","Math  x - qrt ","Math  (send\n  (lvar :y) :-\n  (lvar :x)) / qrt ","Math  @h [] [] abs + qrt ","Math  x abs + qrt ","Math  sq@h [] [] t ","Math  sqx - t ","Math  sqMath  sqrt t ","@d []  * + + ","x * +  * + + ","@h [] [] +  * + + ","@h [] []  * + + ","(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / +  * + + ","x /  * + + ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) /  * + + ","@d []  * + ","x * +  * + ","@h [] [] +  * + ","(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / +  * + ","x /  * + ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) /  * + ","p /  == ","p abs + +  == ","@d []  abs + + ","x * +  abs + + ","@h [] [] +  abs + + ","@h [] []  abs + + ","(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / +  abs + + ","x /  abs + + ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) /  abs + + ","p abs -@  + + ","p abMath  sqrt  + + ","p abp abs + +  + + ","p aby -  + + ","p abx -  + + ","p ab(send\n  (lvar :y) :-\n  (lvar :x)) /  + + ","p ab@h [] [] abs +  + + ","p abx abs +  + + ","r abs -@  ","r abMath  sqrt  ","r abp abs + +  ","r aby -  ","r abx -  ","r ab(send\n  (lvar :y) :-\n  (lvar :x)) /  ","r ab@h [] [] abs +  ","r abx abs +  ","x -  abs ","@d []  abs + ","x * +  abs + ","@h [] [] +  abs + ","(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / +  abs + ","x /  abs + ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) /  abs + ","p abs -@  + ","p abMath  sqrt  + ","p abp abs + +  + ","p aby -  + ","p abx -  + ","p ab(send\n  (lvar :y) :-\n  (lvar :x)) /  + ","p ab@h [] [] abs +  + ","p abx abs +  + ","@d []  abs ","x * +  abs ","@h [] [] +  abs ","(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / +  abs ","x /  abs ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) /  abs ","p abs -@  ","p abMath  sqrt  ","p abp abs + +  ","p aby -  ","p abx -  ","p ab(send\n  (lvar :y) :-\n  (lvar :x)) /  ","p ab@h [] [] abs +  ","p abx abs +  ","m up(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max o ","m up@h [] [] abs o ","m up(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) / o ","m u@d [] to ","m ux * + to ","m u@h [] [] + to ","m u@h [] [] to ","m u(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / + to ","m ux / to ","m u(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / to ","n -  + ","(send\n  (lvar :m) :+\n  (in(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max  2)) up(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max o ","(send\n  (lvar :m) :+\n  (in@h [] [] abs  2)) up@h [] [] abs o ","(send\n  (lvar :m) :+\n  (in(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) /  2)) up(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) / o ","(send\n  (n - var :m) :+\n  (int 2)) upto ","(send\n  (lvar :m) :+\n  (int 2)) u@d [] to ","(send\n  (lvar :m) :+\n  (int 2)) ux * + to ","(send\n  (lvar :m) :+\n  (int 2)) u@h [] [] + to ","(send\n  (lvar :m) :+\n  (int 2)) u@h [] [] to ","(send\n  (lvar :m) :+\n  (int 2)) u(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / + to ","(send\n  (lvar :m) :+\n  (int 2)) ux / to ","(send\n  (lvar :m) :+\n  (int 2)) u(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / to ","(s -@ end\n  (lvar :m) :+\n  (int 2)) upto ","(Math  sqrt end\n  (lvar :m) :+\n  (int 2)) upto ","(p abs + + end\n  (lvar :m) :+\n  (int 2)) upto ","(y - end\n  (lvar :m) :+\n  (int 2)) upto ","(x - end\n  (lvar :m) :+\n  (int 2)) upto ","((send\n  (lvar :y) :-\n  (lvar :x)) / end\n  (lvar :m) :+\n  (int 2)) upto ","(@h [] [] abs + end\n  (lvar :m) :+\n  (int 2)) upto ","(x abs + end\n  (lvar :m) :+\n  (int 2)) upto ","(send\n  (lva@h [] []  :m) :+\n  (int 2)) upto ","(send\n  (lvax -  :m) :+\n  (int 2)) upto ","(send\n  (lvaMath  sqrt  :m) :+\n  (int 2)) upto ","(send\n  (lvar :n - ) :+\n  (int 2)) upto ","(senn - d\n  (lvar :m) :+\n  (inn - t 2)) upto ","@h [] [] abs -@  * < ","@h [] [] abMath  sqrt  * < ","@h [] [] abp abs + +  * < ","@h [] [] aby -  * < ","@h [] [] abx -  * < ","@h [] [] ab(send\n  (lvar :y) :-\n  (lvar :x)) /  * < ","@h [] [] ab@h [] [] abs +  * < ","@h [] [] abx abs +  * < ","@d []  abs * ","x * +  abs * ","@h [] [] +  abs * ","@h [] []  abs * ","(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / +  abs * ","x /  abs * ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) /  abs * ","p abs -@  * ","p abMath  sqrt  * ","p abp abs + +  * ","p aby -  * ","p abx -  * ","p ab(send\n  (lvar :y) :-\n  (lvar :x)) /  * ","p ab@h [] [] abs +  * ","p abx abs +  * ","@h [] [] abs -@  + + ","@h [] [] abMath  sqrt  + + ","@h [] [] abp abs + +  + + ","@h [] [] aby -  + + ","@h [] [] abx -  + + ","@h [] [] ab(send\n  (lvar :y) :-\n  (lvar :x)) /  + + ","@h [] [] ab@h [] [] abs +  + + ","@h [] [] abx abs +  + + ","@h [] [] abs -@  + ","@h [] [] abMath  sqrt  + ","@h [] [] abp abs + +  + ","@h [] [] aby -  + ","@h [] [] abx -  + ","@h [] [] ab(send\n  (lvar :y) :-\n  (lvar :x)) /  + ","@h [] [] ab@h [] [] abs +  + ","@h [] [] abx abs +  + ","n -  - ","@h [] [] abs -@  * ","@h [] [] abMath  sqrt  * ","@h [] [] abp abs + +  * ","@h [] [] aby -  * ","@h [] [] abx -  * ","@h [] [] ab(send\n  (lvar :y) :-\n  (lvar :x)) /  * ","@h [] [] ab@h [] [] abs +  * ","@h [] [] abx abs +  * ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * +  abs + ","@e []  abs + ","@h [] [] - - -  abs + ","z /  abs + ","p * +  abs + ","q abs -@  + ","q abMath  sqrt  + ","q abp abs + +  + ","q aby -  + ","q abx -  + ","q ab(send\n  (lvar :y) :-\n  (lvar :x)) /  + ","q ab@h [] [] abs +  + ","q abx abs +  + ","n -  == ","(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :@h [] [] - )) / + ","(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :-0.4375 * * )) / + ","(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :@h [] [] * )) / + ","(send\n  (send\n    (n - var :r) :*\n    (n - var :s)) :-\n  (n - var :w)) / + ","(s -@ end\n  (s -@ end\n    (lvar :r) :*\n    (lvar :s -@ )) :-\n  (lvar :w)) / + ","(Math  sqrt end\n  (Math  sqrt end\n    (lvar :r) :*\n    (lvar :Math  sqrt )) :-\n  (lvar :w)) / + ","(p abs + + end\n  (p abs + + end\n    (lvar :r) :*\n    (lvar :p abs + + )) :-\n  (lvar :w)) / + ","(y - end\n  (y - end\n    (lvar :r) :*\n    (lvar :y - )) :-\n  (lvar :w)) / + ","(x - end\n  (x - end\n    (lvar :r) :*\n    (lvar :x - )) :-\n  (lvar :w)) / + ","((send\n  (lvar :y) :-\n  (lvar :x)) / end\n  ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n    (lvar :r) :*\n    (lvar :(send\n  (lvar :y) :-\n  (lvar :x)) / )) :-\n  (lvar :w)) / + ","(@h [] [] abs + end\n  (@h [] [] abs + end\n    (lvar :r) :*\n    (lvar :@h [] [] abs + )) :-\n  (lvar :w)) / + ","(x abs + end\n  (x abs + end\n    (lvar :r) :*\n    (lvar :x abs + )) :-\n  (lvar :w)) / + ","(send\n  (send\n    (lva@h [] []  :@h [] [] ) :*\n    (lva@h [] []  :s)) :-\n  (lva@h [] []  :w)) / + ","(send\n  (send\n    (lvax -  :x - ) :*\n    (lvax -  :s)) :-\n  (lvax -  :w)) / + ","(send\n  (send\n    (lvaMath  sqrt  :Math  sqrt ) :*\n    (lvaMath  sqrt  :s)) :-\n  (lvaMath  sqrt  :w)) / + ","(senn - d\n  (senn - d\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / + ","(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :@h [] [] - )) / ","(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :-0.4375 * * )) / ","(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :@h [] [] * )) / ","(send\n  (send\n    (n - var :r) :*\n    (n - var :s)) :-\n  (n - var :w)) / ","(s -@ end\n  (s -@ end\n    (lvar :r) :*\n    (lvar :s -@ )) :-\n  (lvar :w)) / ","(Math  sqrt end\n  (Math  sqrt end\n    (lvar :r) :*\n    (lvar :Math  sqrt )) :-\n  (lvar :w)) / ","(p abs + + end\n  (p abs + + end\n    (lvar :r) :*\n    (lvar :p abs + + )) :-\n  (lvar :w)) / ","(y - end\n  (y - end\n    (lvar :r) :*\n    (lvar :y - )) :-\n  (lvar :w)) / ","(x - end\n  (x - end\n    (lvar :r) :*\n    (lvar :x - )) :-\n  (lvar :w)) / ","((send\n  (lvar :y) :-\n  (lvar :x)) / end\n  ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n    (lvar :r) :*\n    (lvar :(send\n  (lvar :y) :-\n  (lvar :x)) / )) :-\n  (lvar :w)) / ","(@h [] [] abs + end\n  (@h [] [] abs + end\n    (lvar :r) :*\n    (lvar :@h [] [] abs + )) :-\n  (lvar :w)) / ","(x abs + end\n  (x abs + end\n    (lvar :r) :*\n    (lvar :x abs + )) :-\n  (lvar :w)) / ","(send\n  (send\n    (lva@h [] []  :@h [] [] ) :*\n    (lva@h [] []  :s)) :-\n  (lva@h [] []  :w)) / ","(send\n  (send\n    (lvax -  :x - ) :*\n    (lvax -  :s)) :-\n  (lvax -  :w)) / ","(send\n  (send\n    (lvaMath  sqrt  :Math  sqrt ) :*\n    (lvaMath  sqrt  :s)) :-\n  (lvaMath  sqrt  :w)) / ","(senn - d\n  (senn - d\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / ","x -  * - ","Math  sqrt  * - ","@h [] []  - ","q /  - ","0.75 *  - ","p /  - ","p abs + +  - ","n -  >= ","i(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max er + ","i@h [] [] abs er + ","i(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) / er + ","ite@h [] []  + ","itex -  + ","iteMath  sqrt  + ","iter +  + ","@h [] [] -  / ","-0.4375 * *  / ","@h [] [] *  / ","(send\n  (lvar :@h [] [] ) :-\n  (lvar :x)) / + ","(send\n  (lvar :q / ) :-\n  (lvar :x)) / + ","(send\n  (lvar :0.75 * ) :-\n  (lvar :x)) / + ","(send\n  (lvar :y) :-\n  (lvar :@h [] [] )) / + ","(send\n  (lvar :y) :-\n  (lvar :p / )) / + ","(send\n  (lvar :y) :-\n  (lvar :p abs + + )) / + ","(send\n  (n - var :y) :-\n  (n - var :x)) / + ","(s -@ end\n  (lvar :y) :-\n  (lvar :x)) / + ","(Math  sqrt end\n  (lvar :y) :-\n  (lvar :x)) / + ","(p abs + + end\n  (lvar :y) :-\n  (lvar :x)) / + ","(y - end\n  (lvar :y) :-\n  (lvar :x)) / + ","(x - end\n  (lvar :y) :-\n  (lvar :x)) / + ","((send\n  (lvar :y) :-\n  (lvar :x)) / end\n  (lvar :y) :-\n  (lvar :x)) / + ","(@h [] [] abs + end\n  (lvar :y) :-\n  (lvar :x)) / + ","(x abs + end\n  (lvar :y) :-\n  (lvar :x)) / + ","(send\n  (lva@h [] []  :y) :-\n  (lva@h [] []  :x)) / + ","(send\n  (lvax -  :y) :-\n  (lvax -  :x)) / + ","(send\n  (lvaMath  sqrt  :y) :-\n  (lvaMath  sqrt  :x)) / + ","(senn - d\n  (lvar :y) :-\n  (lvar :x)) / + ","(send\n  (lvar :@h [] [] ) :-\n  (lvar :x)) / ","(send\n  (lvar :q / ) :-\n  (lvar :x)) / ","(send\n  (lvar :0.75 * ) :-\n  (lvar :x)) / ","(send\n  (lvar :y) :-\n  (lvar :@h [] [] )) / ","(send\n  (lvar :y) :-\n  (lvar :p / )) / ","(send\n  (lvar :y) :-\n  (lvar :p abs + + )) / ","(send\n  (n - var :y) :-\n  (n - var :x)) / ","(s -@ end\n  (lvar :y) :-\n  (lvar :x)) / ","(Math  sqrt end\n  (lvar :y) :-\n  (lvar :x)) / ","(p abs + + end\n  (lvar :y) :-\n  (lvar :x)) / ","(y - end\n  (lvar :y) :-\n  (lvar :x)) / ","(x - end\n  (lvar :y) :-\n  (lvar :x)) / ","((send\n  (lvar :y) :-\n  (lvar :x)) / end\n  (lvar :y) :-\n  (lvar :x)) / ","(@h [] [] abs + end\n  (lvar :y) :-\n  (lvar :x)) / ","(x abs + end\n  (lvar :y) :-\n  (lvar :x)) / ","(send\n  (lva@h [] []  :y) :-\n  (lva@h [] []  :x)) / ","(send\n  (lvax -  :y) :-\n  (lvax -  :x)) / ","(send\n  (lvaMath  sqrt  :y) :-\n  (lvaMath  sqrt  :x)) / ","(senn - d\n  (lvar :y) :-\n  (lvar :x)) / ","q /  < ","0.75 *  < ","s -@  > ","Math  sqrt  > ","p abs + +  > ","y -  > ","x -  > ","(send\n  (lvar :y) :-\n  (lvar :x)) /  > ","@h [] [] abs +  > ","x abs +  > ","s -@  + ","Math  sqrt  + ","p abs + +  + ","y -  + ","x -  + ","(send\n  (lvar :y) :-\n  (lvar :x)) /  + ","@h [] [] abs +  + ","x abs +  + ","i(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max er == ","i@h [] [] abs er == ","i(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) / er == ","ite@h [] []  == ","itex -  == ","iteMath  sqrt  == ","iter +  == ","n -  < ","r /  -@ ","@v [] []  -@ ","p -  -@ ","p +  -@ ","@h [] []  + ","p /  + ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * +  * - ","@e []  * - ","@h [] [] - - -  * - ","z /  * - ","p * +  * - ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * +  * + ","@e []  * + ","@h [] [] - - -  * + ","z /  * + ","p * +  * + ","(send\n  (lvar :n) :-\n  (in(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max  1)) up(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max o ","(send\n  (lvar :n) :-\n  (in@h [] [] abs  1)) up@h [] [] abs o ","(send\n  (lvar :n) :-\n  (in(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) /  1)) up(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) / o ","(send\n  (n - var :n) :-\n  (int 1)) upto ","(send\n  (lvar :n) :-\n  (int 1)) u@d [] to ","(send\n  (lvar :n) :-\n  (int 1)) ux * + to ","(send\n  (lvar :n) :-\n  (int 1)) u@h [] [] + to ","(send\n  (lvar :n) :-\n  (int 1)) u@h [] [] to ","(send\n  (lvar :n) :-\n  (int 1)) u(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / + to ","(send\n  (lvar :n) :-\n  (int 1)) ux / to ","(send\n  (lvar :n) :-\n  (int 1)) u(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / to ","(s -@ end\n  (lvar :n) :-\n  (int 1)) upto ","(Math  sqrt end\n  (lvar :n) :-\n  (int 1)) upto ","(p abs + + end\n  (lvar :n) :-\n  (int 1)) upto ","(y - end\n  (lvar :n) :-\n  (int 1)) upto ","(x - end\n  (lvar :n) :-\n  (int 1)) upto ","((send\n  (lvar :y) :-\n  (lvar :x)) / end\n  (lvar :n) :-\n  (int 1)) upto ","(@h [] [] abs + end\n  (lvar :n) :-\n  (int 1)) upto ","(x abs + end\n  (lvar :n) :-\n  (int 1)) upto ","(send\n  (lva@h [] []  :n) :-\n  (int 1)) upto ","(send\n  (lvax -  :n) :-\n  (int 1)) upto ","(send\n  (lvaMath  sqrt  :n) :-\n  (int 1)) upto ","(senn - d\n  (lvar :nn - ) :-\n  (inn - t 1)) upto ","r /  / ","@v [] []  / ","p -  / ","p +  / ","p /  / ","p abs + +  / ","p /  abs + ","p abs + +  abs + ","x abs -@  + ","x abMath  sqrt  + ","x abp abs + +  + ","x aby -  + ","x abx -  + ","x ab(send\n  (lvar :y) :-\n  (lvar :x)) /  + ","x ab@h [] [] abs +  + ","x abx abs +  + ","r /  != ","@h [] []  != ","@v [] []  != ","p -  != ","p +  != ","@d []  - ","x * +  - ","@h [] [] +  - ","(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / +  - ","x /  - ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) /  - ","@d []  + ","x * +  + ","@h [] [] +  + ","(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / +  + ","x /  + ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) /  + ","@d []  >= ","x * +  >= ","@h [] [] +  >= ","@h [] []  >= ","(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / +  >= ","x /  >= ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) /  >= ","(send\n  (send\n    (ivar :@d) :[]\n    (lvar :i)) :-\n  (lvar :p)) * +  >= ","@e []  >= ","@h [] [] - - -  >= ","z /  >= ","p * +  >= ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (in(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max  1))) :[]\n    (send\n      (lvar :n) :-\n      (in(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max  1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (in@h [] [] abs  1))) :[]\n    (send\n      (lvar :n) :-\n      (in@h [] [] abs  1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (in(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) /  1))) :[]\n    (send\n      (lvar :n) :-\n      (in(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) /  1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / ","(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (n - var :n) :-\n        (int 1))) :[]\n    (send\n      (n - var :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (n - var :n)) :[]\n    (n - var :n))) / ","(s -@ end\n  (s -@ end\n    (s -@ end\n      (ivar :@h) :[]\n      (s -@ end\n        (lvar :n) :-\n        (int 1))) :[]\n    (s -@ end\n      (lvar :n) :-\n      (int 1))) :-\n  (s -@ end\n    (s -@ end\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / ","(Math  sqrt end\n  (Math  sqrt end\n    (Math  sqrt end\n      (ivar :@h) :[]\n      (Math  sqrt end\n        (lvar :n) :-\n        (int 1))) :[]\n    (Math  sqrt end\n      (lvar :n) :-\n      (int 1))) :-\n  (Math  sqrt end\n    (Math  sqrt end\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / ","(p abs + + end\n  (p abs + + end\n    (p abs + + end\n      (ivar :@h) :[]\n      (p abs + + end\n        (lvar :n) :-\n        (int 1))) :[]\n    (p abs + + end\n      (lvar :n) :-\n      (int 1))) :-\n  (p abs + + end\n    (p abs + + end\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / ","(y - end\n  (y - end\n    (y - end\n      (ivar :@h) :[]\n      (y - end\n        (lvar :n) :-\n        (int 1))) :[]\n    (y - end\n      (lvar :n) :-\n      (int 1))) :-\n  (y - end\n    (y - end\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / ","(x - end\n  (x - end\n    (x - end\n      (ivar :@h) :[]\n      (x - end\n        (lvar :n) :-\n        (int 1))) :[]\n    (x - end\n      (lvar :n) :-\n      (int 1))) :-\n  (x - end\n    (x - end\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / ","((send\n  (lvar :y) :-\n  (lvar :x)) / end\n  ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n    ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n      (ivar :@h) :[]\n      ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n        (lvar :n) :-\n        (int 1))) :[]\n    ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n      (lvar :n) :-\n      (int 1))) :-\n  ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n    ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / ","(@h [] [] abs + end\n  (@h [] [] abs + end\n    (@h [] [] abs + end\n      (ivar :@h) :[]\n      (@h [] [] abs + end\n        (lvar :n) :-\n        (int 1))) :[]\n    (@h [] [] abs + end\n      (lvar :n) :-\n      (int 1))) :-\n  (@h [] [] abs + end\n    (@h [] [] abs + end\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / ","(x abs + end\n  (x abs + end\n    (x abs + end\n      (ivar :@h) :[]\n      (x abs + end\n        (lvar :n) :-\n        (int 1))) :[]\n    (x abs + end\n      (lvar :n) :-\n      (int 1))) :-\n  (x abs + end\n    (x abs + end\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / ","(send\n  (send\n    (send\n      (iva@h [] []  :@h) :[]\n      (send\n        (lva@h [] []  :n) :-\n        (int 1))) :[]\n    (send\n      (lva@h [] []  :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (iva@h [] []  :@h) :[]\n      (lva@h [] []  :n)) :[]\n    (lva@h [] []  :n))) / ","(send\n  (send\n    (send\n      (ivax -  :@h) :[]\n      (send\n        (lvax -  :n) :-\n        (int 1))) :[]\n    (send\n      (lvax -  :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivax -  :@h) :[]\n      (lvax -  :n)) :[]\n    (lvax -  :n))) / ","(send\n  (send\n    (send\n      (ivaMath  sqrt  :@h) :[]\n      (send\n        (lvaMath  sqrt  :n) :-\n        (int 1))) :[]\n    (send\n      (lvaMath  sqrt  :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivaMath  sqrt  :@h) :[]\n      (lvaMath  sqrt  :n)) :[]\n    (lvaMath  sqrt  :n))) / ","(senn - d\n  (senn - d\n    (senn - d\n      (ivar :@h) :[]\n      (senn - d\n        (lvar :nn - ) :-\n        (inn - t 1))) :[]\n    (senn - d\n      (lvar :nn - ) :-\n      (inn - t 1))) :-\n  (senn - d\n    (senn - d\n      (ivar :@h) :[]\n      (lvar :nn - )) :[]\n    (lvar :nn - ))) / ","@h [] [] abs -@  < ","@h [] [] abMath  sqrt  < ","@h [] [] abp abs + +  < ","@h [] [] aby -  < ","@h [] [] abx -  < ","@h [] [] ab(send\n  (lvar :y) :-\n  (lvar :x)) /  < ","@h [] [] ab@h [] [] abs +  < ","@h [] [] abx abs +  < ","s -@  == ","Math  sqrt  == ","y -  == ","x -  == ","(send\n  (lvar :y) :-\n  (lvar :x)) /  == ","@h [] [] abs +  == ","x abs +  == ","n -  > ","nn -  >= ","no@h [] [] m + ","nox - m + ","noMath  sqrt m + ","norn -  + ","norm +  + ","nn - orm + ","(send\n  (array\n    (send\n      (lvar :i) :-\n      (in(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max  1))\n    (in(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max  0)) :max) up(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max o ","(send\n  (array\n    (send\n      (lvar :i) :-\n      (in@h [] [] abs  1))\n    (in@h [] [] abs  0)) :max) up@h [] [] abs o ","(send\n  (array\n    (send\n      (lvar :i) :-\n      (in(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) /  1))\n    (in(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) /  0)) :max) up(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) / o ","(send\n  (arra@h [] [] \n    (send\n      (lvar :i) :-\n      (int 1))\n    (int 0)) :max) upto ","(send\n  (arraq / \n    (send\n      (lvar :i) :-\n      (int 1))\n    (int 0)) :max) upto ","(send\n  (arra0.75 * \n    (send\n      (lvar :i) :-\n      (int 1))\n    (int 0)) :max) upto ","(send\n  (array\n    (send\n      (lvar :i) :-\n      (int 1))\n    (int 0)) :ma@h [] [] ) upto ","(send\n  (array\n    (send\n      (lvar :i) :-\n      (int 1))\n    (int 0)) :map / ) upto ","(send\n  (array\n    (send\n      (lvar :i) :-\n      (int 1))\n    (int 0)) :map abs + + ) upto ","(send\n  (arra + y\n    (send\n      (lvar :i) :-\n      (int 1))\n    (int 0)) :max) upto ","(send\n  (array\n    (send\n      (n - var :i) :-\n      (int 1))\n    (int 0)) :max) upto ","(send\n  (array\n    (send\n      (lvar :i) :-\n      (int 1))\n    (int 0)) :max) u@d [] to ","(send\n  (array\n    (send\n      (lvar :i) :-\n      (int 1))\n    (int 0)) :max) ux * + to ","(send\n  (array\n    (send\n      (lvar :i) :-\n      (int 1))\n    (int 0)) :max) u@h [] [] + to ","(send\n  (array\n    (send\n      (lvar :i) :-\n      (int 1))\n    (int 0)) :max) u@h [] [] to ","(send\n  (array\n    (send\n      (lvar :i) :-\n      (int 1))\n    (int 0)) :max) u(send\n  (send\n    (lvar :r) :*\n    (lvar :s)) :-\n  (lvar :w)) / + to ","(send\n  (array\n    (send\n      (lvar :i) :-\n      (int 1))\n    (int 0)) :max) ux / to ","(send\n  (array\n    (send\n      (lvar :i) :-\n      (int 1))\n    (int 0)) :max) u(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (send\n        (lvar :n) :-\n        (int 1))) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :-\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :n)) :[]\n    (lvar :n))) / to ","(s -@ end\n  (array\n    (s -@ end\n      (lvar :i) :-\n      (int 1))\n    (int 0)) :max) upto ","(Math  sqrt end\n  (array\n    (Math  sqrt end\n      (lvar :i) :-\n      (int 1))\n    (int 0)) :max) upto ","(p abs + + end\n  (array\n    (p abs + + end\n      (lvar :i) :-\n      (int 1))\n    (int 0)) :max) upto ","(y - end\n  (array\n    (y - end\n      (lvar :i) :-\n      (int 1))\n    (int 0)) :max) upto ","(x - end\n  (array\n    (x - end\n      (lvar :i) :-\n      (int 1))\n    (int 0)) :max) upto ","((send\n  (lvar :y) :-\n  (lvar :x)) / end\n  (array\n    ((send\n  (lvar :y) :-\n  (lvar :x)) / end\n      (lvar :i) :-\n      (int 1))\n    (int 0)) :max) upto ","(@h [] [] abs + end\n  (array\n    (@h [] [] abs + end\n      (lvar :i) :-\n      (int 1))\n    (int 0)) :max) upto ","(x abs + end\n  (array\n    (x abs + end\n      (lvar :i) :-\n      (int 1))\n    (int 0)) :max) upto ","(send\n  (a@h [] [] @h [] [] ay\n    (send\n      (lva@h [] []  :i) :-\n      (int 1))\n    (int 0)) :max) upto ","(send\n  (ax - x - ay\n    (send\n      (lvax -  :i) :-\n      (int 1))\n    (int 0)) :max) upto ","(send\n  (aMath  sqrt Math  sqrt ay\n    (send\n      (lvaMath  sqrt  :i) :-\n      (int 1))\n    (int 0)) :max) upto ","(send\n  (array\n    (send\n      (lvar :i) :-\n      (int 1))\n    (int 0)) :n - ax) upto ","(senn - d\n  (array\n    (senn - d\n      (lvar :i) :-\n      (inn - t 1))\n    (inn - t 0)) :max) upto ","(send\n  (lvar :i) :-\n  (in(send\n  (send\n    (send\n      (ivar :@h) :[]\n      (lvar :i)) :[]\n    (send\n      (lvar :n) :-\n      (int 1))) :abs) max  1)) max ","(send\n  (lvar :i) :-\n  (in@h [] [] abs  1)) max ","(send\n  (lvar :i) :-\n  (in(send\n  (send\n    (lvar :x) :*\n    (lvar :s)) :-\n  (send\n    (lvar :z) :*\n    (lvar :r))) /  1)) max ","(send\n  (lvar :i) :-\n  (int 1)) ma@h [] []  ","(send\n  (lvar :i) :-\n  (int 1)) map /  ","(send\n  (lvar :i) :-\n  (int 1)) map abs + +  ","(send\n  (n - var :i) :-\n  (int 1)) max ","(s -@ end\n  (lvar :i) :-\n  (int 1)) max ","(Math  sqrt end\n  (lvar :i) :-\n  (int 1)) max ","(p abs + + end\n  (lvar :i) :-\n  (int 1)) max ","(y - end\n  (lvar :i) :-\n  (int 1)) max ","(x - end\n  (lvar :i) :-\n  (int 1)) max ","((send\n  (lvar :y) :-\n  (lvar :x)) / end\n  (lvar :i) :-\n  (int 1)) max ","(@h [] [] abs + end\n  (lvar :i) :-\n  (int 1)) max ","(x abs + end\n  (lvar :i) :-\n  (int 1)) max ","(send\n  (lva@h [] []  :i) :-\n  (int 1)) max ","(send\n  (lvax -  :i) :-\n  (int 1)) max ","(send\n  (lvaMath  sqrt  :i) :-\n  (int 1)) max ","(send\n  (lvar :i) :-\n  (int 1)) n - ax ","(senn - d\n  (lvar :i) :-\n  (inn - t 1)) max "]}," Matrix EigenvalueDecomposition reduce_to_hessenberg":{"type":"method","name":"reduce_to_hessenberg","children":[],"call":["g * ","@ort [] ","@v [] [] ","@v [] ","m upto ","(send\n  (lvar :g) :/\n  (send\n    (ivar :@ort) :[]\n    (lvar :m))) / ","@h [] [] ","m - ","@h [] ","g / ","@ort [] * ","@ort []= ","(send\n  (lvar :m) :+\n  (int 1)) upto ","m + ","@h [] [] != ","(send\n  (lvar :high) :-\n  (int 1)) downto ","low + ","high - ","@v [] []= ","i == ","@size times ","@h [] []= ","scale * ","f * ","f / ","high downto ","0 upto ","@size - ","@ort [] - ","g -@ ","@ort [] > ","Math  sqrt ","@h [] [] / ","scale != ","scale + ","@h [] [] abs ","(send\n  (lvar :low) :+\n  (int 1)) upto ","(send\n  (lvar :g) :/\n  (send\n    (ivar :@ort) :[]\n    (lvar :m))) /  * ","g -@  * ","Math  sqrt  * ","(send\n  (lvar :(send\n  (lvar :g) :/\n  (send\n    (ivar :@ort) :[]\n    (lvar :m))) / ) :/\n  (send\n    (ivar :@ort) :[]\n    (lvar :m))) / ","(send\n  (lvar :g -@ ) :/\n  (send\n    (ivar :@ort) :[]\n    (lvar :m))) / ","(send\n  (lvar :Math  sqrt ) :/\n  (send\n    (ivar :@ort) :[]\n    (lvar :m))) / ","(send\n  (lvar :g) :/\n  (send\n    (ivar :@ort) :[]\n    (lvar :m))) /  / ","g -@  / ","Math  sqrt  / ","(send\n  (lvar :hi(send\n  (lvar :g) :/\n  (send\n    (ivar :@ort) :[]\n    (lvar :m))) / h) :-\n  (int 1)) downto ","(send\n  (lvar :hig -@ h) :-\n  (int 1)) downto ","(send\n  (lvar :hiMath  sqrt h) :-\n  (int 1)) downto ","(send\n  (lvar :@size - ) :-\n  (int 1)) downto ","hi(send\n  (lvar :g) :/\n  (send\n    (ivar :@ort) :[]\n    (lvar :m))) / h - ","hig -@ h - ","hiMath  sqrt h - ","@size -  - ","scale +  * ","f /  * ","f /  / ","hi(send\n  (lvar :g) :/\n  (send\n    (ivar :@ort) :[]\n    (lvar :m))) / h downto ","hig -@ h downto ","hiMath  sqrt h downto ","@size -  downto ","(send\n  (lvar :g) :/\n  (send\n    (ivar :@ort) :[]\n    (lvar :m))) /  -@ ","g -@  -@ ","Math  sqrt  -@ ","scale +  != ","scale +  + "]}," Matrix EigenvalueDecomposition diagonalize":{"type":"method","name":"diagonalize","children":[],"call":["@v [] []= ","@v [] ","@v [] [] ","@size times ","@d []= ","@d [] ","k != ","@d [] < ","(send\n  (lvar :i) :+\n  (int 1)) upto ","@size - ","i + ","0 upto ","@e []= ","@d [] + ","c * ","s * ","s -@ * * * * / ","s -@ * * * * ","@e [] ","s -@ * * * ","s -@ * * ","s -@ * ","s -@ ","c * - ","s * + ","h + ","c * + ","p / ","@e [] / ","Math  hypot ","(send\n  (lvar :m) :-\n  (int 1)) downto ","m - ","l + ","(send\n  (lvar :l) :+\n  (int 2)) upto ","g - ","@e [] * ","p + ","r -@ ","p < ","(send\n  (send\n    (ivar :@d) :[]\n    (send\n      (lvar :l) :+\n      (int 1))) :-\n  (lvar :g)) / ","2.0 * ","@d [] - ","iter + ","@e [] abs > ","eps * ","@e [] abs ","m > ","@e [] abs <= ","m < ","(lvar :tst1) max ","@d [] abs + ","@d [] abs ","i - ","1 upto ","@@e [] / ize time@e [] /  ","(send\n  (lvar :i) :+\n  (int 1)) u@v [] [] to ","(send\n  (lvar :i) :+\n  (int 1)) u@d [] to ","(send\n  (lvar :i) :+\n  (int 1)) us -@ * * * * / to ","(send\n  (lvar :i) :+\n  (int 1)) uc * - to ","(send\n  (lvar :i) :+\n  (int 1)) u(send\n  (send\n    (ivar :@d) :[]\n    (send\n      (lvar :l) :+\n      (int 1))) :-\n  (lvar :g)) / to ","(@e [] / end\n  (lvar :i) :+\n  (int 1)) upto ","(send\n  (lvaMath  hypot  :i) :+\n  (int 1)) upto ","(send\n  (lvar -@  :i) :+\n  (int 1)) upto ","@@e [] / ize - ","0 u@v [] [] to ","0 u@d [] to ","0 us -@ * * * * / to ","0 uc * - to ","0 u(send\n  (send\n    (ivar :@d) :[]\n    (send\n      (lvar :l) :+\n      (int 1))) :-\n  (lvar :g)) / to ","p /  * ","@e [] /  * ","@e [] /  -@ * * * * / ","@e [] /  -@ * * * * ","@e [] /  -@ * * * ","@e [] /  -@ * * ","@e [] /  -@ * ","@e [] /  -@ ","p /  * - ","@e [] /  * + ","@v [] []  + ","c *  + ","g -  + ","p /  * + ","@v [] []  / ","@d []  / ","s -@ * * * * /  / ","c * -  / ","(send\n  (send\n    (ivar :@d) :[]\n    (send\n      (lvar :l) :+\n      (int 1))) :-\n  (lvar :g)) /  / ","Math  hy@v [] [] ot ","Math  hy@d [] ot ","Math  hys -@ * * * * / ot ","Math  hyc * - ot ","Math  hy(send\n  (send\n    (ivar :@d) :[]\n    (send\n      (lvar :l) :+\n      (int 1))) :-\n  (lvar :g)) / ot ","Mat@v [] []   @v [] [] ypot ","Matc *   c * ypot ","Matg -   g - ypot ","(@e [] / end\n  (lvar :m) :-\n  (int 1)) downto ","(send\n  (lvaMath  hypot  :m) :-\n  (int 1)) downto ","(send\n  (lvar -@  :m) :-\n  (int 1)) downto ","(send\n  (lvar :l) :+\n  (int 2)) u@v [] [] to ","(send\n  (lvar :l) :+\n  (int 2)) u@d [] to ","(send\n  (lvar :l) :+\n  (int 2)) us -@ * * * * / to ","(send\n  (lvar :l) :+\n  (int 2)) uc * - to ","(send\n  (lvar :l) :+\n  (int 2)) u(send\n  (send\n    (ivar :@d) :[]\n    (send\n      (lvar :l) :+\n      (int 1))) :-\n  (lvar :g)) / to ","(@e [] / end\n  (lvar :l) :+\n  (int 2)) upto ","(send\n  (lvaMath  hypot  :l) :+\n  (int 2)) upto ","(send\n  (lvar -@  :l) :+\n  (int 2)) upto ","c *  - ","@d []  - ","@d []  + ","s -@ * * * * /  + ","c * -  + ","(send\n  (send\n    (ivar :@d) :[]\n    (send\n      (lvar :l) :+\n      (int 1))) :-\n  (lvar :g)) /  + ","Math  hypot  -@ ","r -@  -@ ","@v [] []  < ","@d []  < ","s -@ * * * * /  < ","c * -  < ","(send\n  (send\n    (ivar :@d) :[]\n    (send\n      (lvar :l) :+\n      (int 1))) :-\n  (lvar :g)) /  < ","(@e [] / end\n  (@e [] / end\n    (ivar :@d) :[]\n    (@e [] / end\n      (lvar :l) :+\n      (int 1))) :-\n  (lvar :g)) / ","(send\n  (send\n    (ivaMath  hypot  :@d) :[]\n    (send\n      (lvaMath  hypot  :l) :+\n      (int 1))) :-\n  (lvaMath  hypot  :g)) / ","(send\n  (send\n    (ivar -@  :@d) :[]\n    (send\n      (lvar -@  :l) :+\n      (int 1))) :-\n  (lvar -@  :g)) / ","(send\n  (send\n    (ivar :@d) :[]\n    (send\n      (lvar :l) :+\n      (int 1))) :-\n  (lvar :c * )) / ","(send\n  (send\n    (ivar :@d) :[]\n    (send\n      (lvar :l) :+\n      (int 1))) :-\n  (lvar :@d [] )) / ","iteMath  hypot  + ","iter -@  + ","iter +  + ","@e [] ab@e [] /  > ","e@v [] [] s * ","e@d [] s * ","es -@ * * * * / s * ","ec * - s * ","e(send\n  (send\n    (ivar :@d) :[]\n    (send\n      (lvar :l) :+\n      (int 1))) :-\n  (lvar :g)) / s * ","ep@e [] /  * ","@e [] ab@e [] /  ","@e [] ab@e [] /  <= ","(lvar :t@e [] / t1) max ","(lvaMath  hypot  :tst1) max ","(lvar -@  :tst1) max ","(lvar :(lvar :tst1) max ) max ","@d [] ab@e [] /  + ","@d [] ab@e [] /  ","1 u@v [] [] to ","1 u@d [] to ","1 us -@ * * * * / to ","1 uc * - to ","1 u(send\n  (send\n    (ivar :@d) :[]\n    (send\n      (lvar :l) :+\n      (int 1))) :-\n  (lvar :g)) / to "]}," Matrix EigenvalueDecomposition tridiagonalize":{"type":"method","name":"tridiagonalize","children":[],"call":["@e []= ","@v [] []= ","@size - ","@v [] ","@d []= ","@v [] [] ","@size times ","i + ","0 upto ","g * ","@d [] ","@v [] [] * ","@v [] [] / ","h != ","@size - - ","i - ","f * + ","f * ","@e [] ","j upto ","i times ","hh * ","f / ","h + ","@e [] * ","(send\n  (lvar :j) :+\n  (int 1)) upto ","j + ","@e [] + ","f - ","scale * ","g -@ ","f > ","Math  sqrt ","@d [] * ","scale == ","scale + ","@d [] abs ","(send\n  (ivar :@size) :-\n  (int 1)) downto ","0 + ","@e []  * ","@e [] +  * ","g -@  * ","Math  sqrt  * ","@d []  != ","@d []  * + ","@d []  * ","@d [] @d []  * ","f /  * ","@d []  / ","@d []  + ","@d []  - ","scale +  * ","@e []  -@ ","@e [] +  -@ ","g -@  -@ ","Math  sqrt  -@ ","@d []  > ","Mat@d []   sqrt ","scale +  == ","scale +  + "]}," Matrix EigenvalueDecomposition cdiv":{"type":"method","name":"cdiv","children":[],"call":["(send\n  (send\n    (lvar :r) :*\n    (lvar :xi)) :-\n  (lvar :xr)) / ","r * - ","r * ","(send\n  (send\n    (lvar :r) :*\n    (lvar :xr)) :+\n  (lvar :xi)) / ","r * + ","yi + ","yr / ","(send\n  (lvar :xi) :-\n  (send\n    (lvar :r) :*\n    (lvar :xr))) / ","xi - ","(send\n  (lvar :xr) :+\n  (send\n    (lvar :r) :*\n    (lvar :xi))) / ","xr + ","yr + ","yi / ","yr abs > ","yi abs ","yr abs ","(senyi + \n  (senyi + \n    (lvar :r) :*\n    (lvar :xi)) :-\n  (lvar :xr)) / ","(senyr + \n  (senyr + \n    (lvar :r) :*\n    (lvar :xi)) :-\n  (lvar :xr)) / ","(send\n  (send\n    (lvayr /  :yr / ) :*\n    (lvayr /  :xi)) :-\n  (lvayr /  :xyr / )) / ","(send\n  (send\n    (lvayi /  :yi / ) :*\n    (lvayi /  :xi)) :-\n  (lvayi /  :xyi / )) / ","yr /  * - ","yi /  * - ","yr /  * ","yi /  * ","(senyi + \n  (senyi + \n    (lvar :r) :*\n    (lvar :xr)) :+\n  (lvar :xi)) / ","(senyr + \n  (senyr + \n    (lvar :r) :*\n    (lvar :xr)) :+\n  (lvar :xi)) / ","(send\n  (send\n    (lvayr /  :yr / ) :*\n    (lvayr /  :xyr / )) :+\n  (lvayr /  :xi)) / ","(send\n  (send\n    (lvayi /  :yi / ) :*\n    (lvayi /  :xyi / )) :+\n  (lvayi /  :xi)) / ","yr /  * + ","yi /  * + ","yyr /  / ","yyi /  / ","(senyi + \n  (lvar :xi) :-\n  (senyi + \n    (lvar :r) :*\n    (lvar :xr))) / ","(senyr + \n  (lvar :xi) :-\n  (senyr + \n    (lvar :r) :*\n    (lvar :xr))) / ","(send\n  (lvayr /  :xi) :-\n  (send\n    (lvayr /  :yr / ) :*\n    (lvayr /  :xyr / ))) / ","(send\n  (lvayi /  :xi) :-\n  (send\n    (lvayi /  :yi / ) :*\n    (lvayi /  :xyi / ))) / ","(senyi + \n  (lvar :xr) :+\n  (senyi + \n    (lvar :r) :*\n    (lvar :xi))) / ","(senyr + \n  (lvar :xr) :+\n  (senyr + \n    (lvar :r) :*\n    (lvar :xi))) / ","(send\n  (lvayr /  :xyr / ) :+\n  (send\n    (lvayr /  :yr / ) :*\n    (lvayr /  :xi))) / ","(send\n  (lvayi /  :xyi / ) :+\n  (send\n    (lvayi /  :yi / ) :*\n    (lvayi /  :xi))) / ","xyr /  + ","xyi /  + ","yyr /  + ","yyi /  + ","yyr /  abs > ","yyi /  abs > ","yyr /  abs ","yyi /  abs "]}," Matrix EigenvalueDecomposition build_eigenvectors":{"type":"method","name":"build_eigenvectors","children":[],"call":[" Complex ","@v [] [] -@ ","@v [] [] ","@v [] ","i - ","Array  new ","i + ","imag > ","imag == ","@e each_with_index map ","@e each_with_index "]}," Matrix EigenvalueDecomposition to_ary":{"type":"method","name":"to_ary","children":[],"call":[" v_inv "," d "," v "]}," Matrix EigenvalueDecomposition eigenvalue_matrix":{"type":"method","name":"eigenvalue_matrix","children":[],"call":["Matrix  diagonal "," eigenvalues "]}," Matrix EigenvalueDecomposition eigenvectors":{"type":"method","name":"eigenvectors","children":[],"call":["Vector  send "," build_eigenvectors map "," build_eigenvectors "]}," Matrix EigenvalueDecomposition eigenvalues":{"type":"method","name":"eigenvalues","children":[],"call":["values []= "," Complex ","values [] ","imag == ","@e each_with_index ","@d dup ","@d dup  []= ","@d dup  [] "]}," Matrix EigenvalueDecomposition eigenvector_matrix_inv":{"type":"method","name":"eigenvector_matrix_inv","children":[],"call":["r transpose inverse ","r transpose ","Matrix  send "," build_eigenvectors ","r transpose inverse  tr transpose inverse anspose inver transpose inverse se ","Matrix  send  tMatrix  send anspose inveMatrix  send se ","r transpose inverse  tr transpose inverse anspose ","Matrix  send  tMatrix  send anspose ","Matr transpose inverse ix  send ","MatMatrix  send ix  send "," build_eigenvector transpose inverse s "," build_eigenvectoMatrix  send s "]}," Matrix EigenvalueDecomposition eigenvector_matrix":{"type":"method","name":"eigenvector_matrix","children":[],"call":["Matrix  send "," build_eigenvectors transpose "," build_eigenvectors "]}," Matrix EigenvalueDecomposition initialize":{"type":"method","name":"initialize","children":[],"call":[" hessenberg_to_real_schur "," reduce_to_hessenberg ","Array  new ","a to_a "," diagonalize "," tridiagonalize ","a symmetric? ","a row_count "," raise ","a class ","a is_a? "]}," Matrix power_int":{"type":"method","name":"power_int","children":[],"call":["sqrt * "," power_int ","exp / "," * ","exp - ","exp odd? ","exp == "," power_int  * "]}," Matrix rotate_entries":{"type":"method","name":"rotate_entries","children":[],"call":[" raise ","rotation inspect "," new_matrix "," row_count ","@rows transpose reverse! ","@rows transpose "," column_count ","@rows map reverse! ","@rows map ","@rows transpose each "," dup ","rotation respond_to? "]}}