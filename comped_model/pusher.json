{" Pusher default_client":{"type":"method","name":"default_client","children":[],"call":["Pusher Client  new ","cli new ","cli from_env ","ENV  [] "]}," Pusher logger":{"type":"method","name":"logger","children":[],"call":["log level= ","Logger  new ","Logger  new  level= "]}," Pusher []":{"type":"method","name":"[]","children":[],"call":[" raise "," default_client [] "," default_client "]}," Pusher WebHook check_signature":{"type":"method","name":"check_signature","children":[],"call":["Pusher  logger warn ","Pusher  logger ","@signature == ","OpenSSL HMAC  hexdigest ","OpenSSL Digest SHA256  new ","HMAC SHA256  hexdigest ","OpenSSL HMAC  hexOpenSSL Digest SHA256  new  ","HMAC SHA256  hexOpenSSL Digest SHA256  new  "]}," Pusher WebHook data":{"type":"method","name":"data","children":[],"call":[" raise ","MultiJson  decode "]}," Pusher WebHook time":{"type":"method","name":"time","children":[],"call":["Time  at "," data [] to_f / "," data [] to_f "," data [] "," data "]}," Pusher WebHook events":{"type":"method","name":"events","children":[],"call":[" data [] "," data "]}," Pusher WebHook valid?":{"type":"method","name":"valid?","children":[],"call":["Pusher  logger warn "," key ","Pusher  logger "," check_signature ","token [] ","@key == ","extra_tokens each ","@client secret ","@client key ","extra_tokens kind_of? "]}," Pusher WebHook initialize":{"type":"method","name":"initialize","children":[],"call":["request [] ","request values_at ","request body rewind ","request body ","request body read ","request content_type ","request env [] ","request env ","request kind_of? ","request respond_to? "]}," Pusher Request symbolize_first_level":{"type":"method","name":"symbolize_first_level","children":[],"call":["result []= ","key to_sym ","hash inject "]}," Pusher Request ssl?":{"type":"method","name":"ssl?","children":[],"call":["@uri scheme == ","@uri scheme "]}," Pusher Request handle_response":{"type":"method","name":"handle_response","children":[],"call":[" raise "," symbolize_first_level ","MultiJson  decode ","@uri path ","body empty? "]}," Pusher Request send_async":{"type":"method","name":"send_async","children":[],"call":["deferrable fail ","Error  new ","Pusher  logger debug ","http inspect ","Pusher  logger ","http errback ","deferrable succeed "," handle_response ","http response chomp ","http response ","http response_header status ","http response_header ","http callback ","EventMachine HttpRequest  new post ","EventMachine HttpRequest  new ","EM DefaultDeferrable  new "," require "," raise ","EventMachine  reactor_running? ","df fail ","df succeed ","http_client get ","http_client post ","@client em_http_client ","http request_async ","@client sync_http_client ","http error ","EM DefaultDeferrable  new  fail ","EventMachine HttpRequest  new post  inspect ","@client sync_http_client  inspect ","EventMachine HttpRequest  new post  errback ","@client sync_http_client  errback ","EM DefaultDeferrable  new  succeed ","EventMachine HttpRequest  new post  response chomp ","@client sync_http_client  response chomp ","EventMachine HttpRequest  new post  response ","@client sync_http_client  response ","EventMachine HttpRequest  new post  response_header status ","@client sync_http_client  response_header status ","EventMachine HttpRequest  new post  response_header ","@client sync_http_client  response_header ","EventMachine HttpRequest  new post  callback ","@client sync_http_client  callback ","EventMachine HttpRequest  new post _client get ","@client sync_http_client _client get ","@client em_http_client  get ","EventMachine HttpRequest  new post _client post ","@client sync_http_client _client post ","@client em_http_client  post ","@client em_EventMachine HttpRequest  new post _client ","@client em_@client sync_http_client _client ","@client em_@client em_http_client  ","EventMachine HttpRequest  new post  request_async ","@client sync_http_client  request_async ","@client sync_EventMachine HttpRequest  new post _client ","@client sync_@client sync_http_client _client ","@client sync_@client em_http_client  ","EventMachine HttpRequest  new post  error ","@client sync_http_client  error "]}," Pusher Request send_sync":{"type":"method","name":"send_sync","children":[],"call":[" handle_response ","response code to_i ","response code ","response body chomp ","response body "," raise ","error original_error= ","Pusher HTTPError  new ","e class ","e message ","@http_sync get "," encode_query ","@http_sync post ","http verify_mode= "," ssl? ","http use_ssl= ","Net HTTP  new ","@uri port ","@uri host "," require ","http get ","http post ","@client net_http_client ","http request ","@client sync_http_client ","@params to_params ","@uri path ","(const\n  (const nil :Net) :HTTPS) ! "," handle_@http_sync get  "," handle_@http_sync post  "," handle_http get  "," handle_http post  "," handle_http request  ","@http_sync get  code to_i ","@http_sync post  code to_i ","http get  code to_i ","http post  code to_i ","http request  code to_i ","@http_sync get  code ","@http_sync post  code ","http get  code ","http post  code ","http request  code ","response response body chomp  chomp ","@http_sync get  body chomp ","@http_sync post  body chomp ","http get  body chomp ","http post  body chomp ","http request  body chomp ","response response body chomp  ","@http_sync get  body ","@http_sync post  body ","http get  body ","http post  body ","http request  body ","Pusher HTTPError  new  original_Pusher HTTPError  new = ","@Net HTTP  new _sync get ","@@client net_http_client _sync get ","@@client sync_http_client _sync get ","@Net HTTP  new _sync post ","@@client net_http_client _sync post ","@@client sync_http_client _sync post ","Net HTTP  new  verify_mode= ","@client net_http_client  verify_mode= ","@client sync_http_client  verify_mode= ","Net HTTP  new  use_ssl= ","@client net_http_client  use_ssl= ","@client sync_http_client  use_ssl= ","Net HTTP  new  get ","@client net_http_client  get ","@client sync_http_client  get ","Net HTTP  new  post ","@client net_http_client  post ","@client sync_http_client  post ","@client net_Net HTTP  new _client ","@client net_@client net_http_client _client ","@client net_@client sync_http_client _client ","Net HTTP  new  request ","@client net_http_client  request ","@client sync_http_client  request ","@client sync_Net HTTP  new _client ","@client sync_@client net_http_client _client ","@client sync_@client sync_http_client _client "]}," Pusher Request initialize":{"type":"method","name":"initialize","children":[],"call":["request signed_params ","request sign ","client authentication_token ","Signature Request  new ","uri path ","verb to_s upcase ","verb to_s ","params []= ","Digest MD5  hexdigest ","@head []= ","Pusher Signature Request  new ","params merge ","Pusher  authentication_token ","resource path "," body "," raise ","Pusher  logger error ","data inspect ","Pusher  logger "," class turn_into_json "," class ","Pusher JSON  generate ","MultiJson  encode ","@client authentication_token ","pusher-http-ruby  + ","Signature Request  new  signed_params ","Pusher Signature Request  new  signed_params ","Signature Request  new  sign ","Pusher Signature Request  new  sign "]}," Pusher Request QueryEncoder bytesize":{"type":"method","name":"bytesize","children":[],"call":["string size ","string bytesize "]}," Pusher Request QueryEncoder escape":{"type":"method","name":"escape","children":[],"call":["% + ","1 unpack join upcase ","1 unpack join ","1 unpack ","H2 * "," bytesize ","s to_s gsub ","s to_s ","EscapeUtils  escape_url "]}," Pusher Request QueryEncoder encode_param":{"type":"method","name":"encode_param","children":[],"call":[" escape + + "," escape "," escape + ","(send\n  (lvar :v) :map) join ","v map ","v is_a? "]}," Pusher Request QueryEncoder encode_query":{"type":"method","name":"encode_query","children":[],"call":["uri path ","encoded_query to_s empty? ","encoded_query to_s ","(send\n  (array\n    (lvar :encoded_query)\n    (send\n      (lvar :uri) :query)) :reject) join ","part empty? ","(lvar :encoded_query) reject ","uri query ","uri query to_s empty? ! ","uri query to_s empty? ","uri query to_s ","query to_s ","(send\n  (lvar :query) :map) join "," encode_param ","query map ","query kind_of? ","(send\n  (array\n    (lvar :encoded_query)\n    (send\n      (lvar :uri) :query)) :reject) join  to_s empty? ","query to_s  to_s empty? ","(send\n  (lvar :query) :map) join  to_s empty? ","(send\n  (array\n    (lvar :encoded_query)\n    (send\n      (lvar :uri) :query)) :reject) join  to_s ","query to_s  to_s ","(send\n  (lvar :query) :map) join  to_s ","(send\n  (array\n    (lvar :(send\n  (array\n    (lvar :encoded_query)\n    (send\n      (lvar :uri) :query)) :reject) join )\n    (send\n      (lvar :uri) :query)) :reject) join ","(send\n  (array\n    (lvar :query to_s )\n    (send\n      (lvar :uri) :query)) :reject) join ","(send\n  (array\n    (lvar :(send\n  (lvar :query) :map) join )\n    (send\n      (lvar :uri) :query)) :reject) join ","(lvar :(send\n  (array\n    (lvar :encoded_query)\n    (send\n      (lvar :uri) :query)) :reject) join ) reject ","(lvar :query to_s ) reject ","(lvar :(send\n  (lvar :query) :map) join ) reject "]}," Pusher Client configured?":{"type":"method","name":"configured?","children":[],"call":[" app_id "," secret "," key "," scheme "," host "]}," Pusher Client trigger":{"type":"method","name":"trigger","children":[],"call":["request send_sync ","Request  new ","MultiJson  encode ","options merge! "," raise ","Pusher  logger error ","data inspect ","Pusher  logger "," url "," post "," trigger_params ","Request  new  send_sync "]}," Pusher Client channel_info":{"type":"method","name":"channel_info","children":[],"call":["request send_sync ","Request  new "," url "," get ","Request  new  send_sync "]}," Pusher Client channels":{"type":"method","name":"channels","children":[],"call":["request send_sync ","Request  new "," url "," get ","Request  new  send_sync "]}," Pusher Client []":{"type":"method","name":"[]","children":[],"call":["Channel  new "," url ","@channels [] ","channel_name to_s "," raise "," configured? "]}," Pusher Client encrypted=":{"type":"method","name":"encrypted=","children":[],"call":[]}," Pusher Client url=":{"type":"method","name":"url=","children":[],"call":["uri port ","uri host ","uri password ","uri user ","uri path split last ","uri path split ","uri path ","uri scheme ","URI  parse ","URI  parse  port ","URI  parse  host ","URI  parse  password ","URI  parse  user ","URI  parse  path split last ","URI  parse  path split ","URI  parse  path ","URI  parse  scheme "]}," Pusher Client url":{"type":"method","name":"url","children":[],"call":["URI Generic  build "," raise "]}," Pusher Client authentication_token":{"type":"method","name":"authentication_token","children":[],"call":["Signature Token  new ","Pusher Signature Token  new "," raise "]}," Pusher Client initialize":{"type":"method","name":"initialize","children":[],"call":["options values_at ","(pair\n  (sym :scheme)\n  (str \"http\")) merge "," http_proxy= ","options [] ","merged_options values_at ","merged_options []= ","options has_key? ","default_options merge ","options fetch ","default_options []= ","Base64  decode64 ","Base64  strict_decode64 ","options [] empty? ","options [] nil? ","options [] == "," warn ","options key? ","(pair\n  (sym :scheme)\n  (str \"http\")) merge  values_at ","(pair\n  (sym :scheme)\n  (str \"http\")) merge  [] ","merged_(pair\n  (sym :scheme)\n  (str \"http\")) merge  values_at ","default_options merge  values_at ","merged_(pair\n  (sym :scheme)\n  (str \"http\")) merge  []= ","default_options merge  []= ","(pair\n  (sym :scheme)\n  (str \"http\")) merge  has_key? ","default_(pair\n  (sym :scheme)\n  (str \"http\")) merge  merge ","(pair\n  (sym :scheme)\n  (str \"http\")) merge  fetch ","default_(pair\n  (sym :scheme)\n  (str \"http\")) merge  []= ","(pair\n  (sym :scheme)\n  (str \"http\")) merge  [] empty? ","(pair\n  (sym :scheme)\n  (str \"http\")) merge  [] nil? ","(pair\n  (sym :scheme)\n  (str \"http\")) merge  [] == ","(pair\n  (sym :scheme)\n  (str \"http\")) merge  key? "]}," Pusher Channel construct_event_request":{"type":"method","name":"construct_event_request","children":[],"call":["Pusher Request  new ","@uri + "," raise ","Pusher  logger error ","data inspect ","Pusher  logger ","MultiJson  encode ","params []= "]}," Pusher Channel authenticate":{"type":"method","name":"authenticate","children":[],"call":["r []= "," authentication_string ","MultiJson  encode "," socket_auth ","Pusher JSON  generate ","  authentication_string entication_string ","  socket_auth entication_string "," socket_ authentication_string  "," socket_ socket_auth  "]}," Pusher Channel authentication_string":{"type":"method","name":"authentication_string","children":[],"call":["token key ","OpenSSL HMAC  hexdigest ","token secret ","OpenSSL Digest SHA256  new ","@client authentication_token ","Pusher  logger debug ","Pusher  logger ","(lvar :socket_id) compact map join ","(lvar :socket_id) compact map ","(lvar :socket_id) compact "," name "," raise ","custom_string kind_of? ","custom_string nil? ","socket_id empty? ","socket_id nil? "," validate_socket_id ","HMAC SHA256  hexdigest ","Pusher  authentication_token ","(send\n  (send\n    (array\n      (lvar :socket_id)\n      (send nil :name)\n      (lvar :custom_string)) :compact) :map) join ","e to_s ","@client authentication_token  key ","Pusher  authentication_token  key ","OpenSSL HMAC  hexOpenSSL Digest SHA256  new  ","@client authentication_token  secret ","Pusher  authentication_token  secret ","@client authentication_@client authentication_token  ","@client authentication_Pusher  authentication_token  ","HMAC SHA256  hexOpenSSL Digest SHA256  new  ","Pusher  authentication_@client authentication_token  ","Pusher  authentication_Pusher  authentication_token  "]}," Pusher Channel info":{"type":"method","name":"info","children":[],"call":["@client channel_info ","attributes join "," name ","@client get "]}," Pusher Channel trigger":{"type":"method","name":"trigger","children":[],"call":["Pusher  logger debug ","e backtrace join ","e backtrace ","Pusher  logger ","Pusher  logger error ","e class ","e message "," trigger! "," handle_error ","@http post ","JSON  generate "," class turn_into_json "," class ","@uri path "]}," Pusher Channel trigger!":{"type":"method","name":"trigger!","children":[],"call":["request send_sync "," construct_event_request ","@client trigger "," name ","params []= "," validate_socket_id "," raise ","response body chomp ","response body ","response code ","@http post ","@uri query ","@uri path ","@uri query= ","query_params to_params ","params merge ","request sign ","Pusher  authentication_token ","Authentication Request  new ","Digest MD5  hexdigest ","Pusher  logger error ","data inspect ","Pusher  logger "," class turn_into_json "," class "," handle_response ","response code to_i ","@http_sync post ","query to_params "," construct_request ","Net HTTP  new ","@uri port ","@uri host "," require ","request body ","request query to_params ","request query ","Pusher Request  new ","http verify_mode= "," ssl? ","http use_ssl= ","(const\n  (const nil :Net) :HTTPS) ! ","error original_error= ","Pusher HTTPError  new ","e class ","e message "," construct_event_request  send_sync ","Authentication Request  new  send_sync ","Pusher Request  new  send_sync "," construct_event_ construct_event_request  "," construct_event_Authentication Request  new  "," construct_event_Pusher Request  new  ","@http post  body chomp ","@http_sync post  body chomp ","@http post  body ","@http_sync post  body ","@http post  code ","@http_sync post  code ","@Net HTTP  new  post ","params merge  to_params "," construct_event_request  sign ","Authentication Request  new  sign ","Pusher Request  new  sign ","Pusher  logger Pusher HTTPError  new  "," handle_@http post  "," handle_@http_sync post  ","@http post  code to_i ","@http_sync post  code to_i ","@Net HTTP  new _sync post "," construct_ construct_event_request  "," construct_Authentication Request  new  "," construct_Pusher Request  new  "," construct_event_request  body ","Authentication Request  new  body ","Pusher Request  new  body "," construct_event_request  query to_params ","Authentication Request  new  query to_params ","Pusher Request  new  query to_params "," construct_event_request  query ","Authentication Request  new  query ","Pusher Request  new  query ","Net HTTP  new  verify_mode= ","Net HTTP  new  use_ssl= ","Pusher HTTPError  new  original_Pusher HTTPError  new = "]}," Pusher Channel trigger_async":{"type":"method","name":"trigger_async","children":[],"call":["request send_async "," construct_event_request ","@client trigger_async "," name ","params []= "," validate_socket_id ","deferrable fail ","Error  new ","Pusher  logger debug ","http inspect ","Pusher  logger ","http errback ","deferrable succeed "," handle_response ","http response chomp ","http response ","http response_header status ","http response_header ","http callback ","@http_async post ","EM DefaultDeferrable  new "," construct_request ","EventMachine HttpRequest  new "," require "," raise ","EventMachine  reactor_running? ","request body ","request query ","Pusher Request  new ","EventMachine HttpRequest  new post "," construct_event_request  send_async ","Pusher Request  new  send_async "," construct_event_ construct_event_request  "," construct_event_Pusher Request  new  ","EM DefaultDeferrable  new  fail ","@http_async post  inspect ","EventMachine HttpRequest  new post  inspect ","@http_async post  errback ","EventMachine HttpRequest  new post  errback ","EM DefaultDeferrable  new  succeed ","@http_async post  response chomp ","EventMachine HttpRequest  new post  response chomp ","@http_async post  response ","EventMachine HttpRequest  new post  response ","@http_async post  response_header status ","EventMachine HttpRequest  new post  response_header status ","@http_async post  response_header ","EventMachine HttpRequest  new post  response_header ","@http_async post  callback ","EventMachine HttpRequest  new post  callback ","@@http_async post _async post ","@EventMachine HttpRequest  new post _async post "," construct_ construct_event_request  "," construct_Pusher Request  new  "," construct_event_request  body ","Pusher Request  new  body "," construct_event_request  query ","Pusher Request  new  query "]}," Pusher Channel initialize":{"type":"method","name":"initialize","children":[],"call":["@uri path= ","@uri path + ","@uri path ","base_url dup "," raise ","name length > ","name length ","Pusher Channel INVALID_CHANNEL_REGEX  match ","RestClient Resource  new ","Pusher  port ","Pusher  host ","Net HTTP  new ","@uri port ","@uri host ","URI  parse ","URI HTTP  build ","base_url dup  path= ","URI  parse  path= ","URI HTTP  build  path= ","base_url dup  path + ","URI  parse  path + ","URI HTTP  build  path + ","base_url dup  path ","URI  parse  path ","URI HTTP  build  path ","base_url dup  port ","URI  parse  port ","URI HTTP  build  port ","base_url dup  host ","URI  parse  host ","URI HTTP  build  host "]}," Pusher Resource url":{"type":"method","name":"url","children":[],"call":["@client url "]}," Pusher Resource create_request":{"type":"method","name":"create_request","children":[],"call":["Request  new "," url "]}," Pusher Resource post_async":{"type":"method","name":"post_async","children":[],"call":[" create_request send_async "," create_request ","MultiJson  encode "]}," Pusher Resource post":{"type":"method","name":"post","children":[],"call":[" create_request send_sync "," create_request ","MultiJson  encode "]}," Pusher Resource get_async":{"type":"method","name":"get_async","children":[],"call":[" create_request send_async "," create_request "]}," Pusher Resource get":{"type":"method","name":"get","children":[],"call":[" create_request send_sync "," create_request "]}," Pusher Resource initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pusher QueryEncoder bytesize":{"type":"method","name":"bytesize","children":[],"call":["string size ","string bytesize "]}," Pusher QueryEncoder escape":{"type":"method","name":"escape","children":[],"call":["% + ","1 unpack join upcase ","1 unpack join ","1 unpack ","H2 * "," bytesize ","s to_s gsub ","s to_s ","EscapeUtils  escape_url "]}," Pusher QueryEncoder encode_param":{"type":"method","name":"encode_param","children":[],"call":[" escape + + "," escape "," escape + ","(send\n  (lvar :v) :map) join ","v map ","v is_a? "]}," Pusher QueryEncoder encode_query":{"type":"method","name":"encode_query","children":[],"call":["uri path ","encoded_query to_s empty? ","encoded_query to_s ","(send\n  (array\n    (lvar :encoded_query)\n    (send\n      (lvar :uri) :query)) :reject) join ","part empty? ","(lvar :encoded_query) reject ","uri query ","uri query to_s empty? ! ","uri query to_s empty? ","uri query to_s ","query to_s ","(send\n  (lvar :query) :map) join "," encode_param ","query map ","query kind_of? ","(send\n  (array\n    (lvar :encoded_query)\n    (send\n      (lvar :uri) :query)) :reject) join  to_s empty? ","query to_s  to_s empty? ","(send\n  (lvar :query) :map) join  to_s empty? ","(send\n  (array\n    (lvar :encoded_query)\n    (send\n      (lvar :uri) :query)) :reject) join  to_s ","query to_s  to_s ","(send\n  (lvar :query) :map) join  to_s ","(send\n  (array\n    (lvar :(send\n  (array\n    (lvar :encoded_query)\n    (send\n      (lvar :uri) :query)) :reject) join )\n    (send\n      (lvar :uri) :query)) :reject) join ","(send\n  (array\n    (lvar :query to_s )\n    (send\n      (lvar :uri) :query)) :reject) join ","(send\n  (array\n    (lvar :(send\n  (lvar :query) :map) join )\n    (send\n      (lvar :uri) :query)) :reject) join ","(lvar :(send\n  (array\n    (lvar :encoded_query)\n    (send\n      (lvar :uri) :query)) :reject) join ) reject ","(lvar :query to_s ) reject ","(lvar :(send\n  (lvar :query) :map) join ) reject "]}," Pusher Client trigger_params":{"type":"method","name":"trigger_params","children":[],"call":["params merge "," raise ","Pusher  logger error ","data inspect ","Pusher  logger ","MultiJson  encode ","channels kind_of? "," Array map "," Array ","channels length ","channels length > "," encode_data "," encrypt ","channels [] ","c match ","channels any? "," Array map  kind_of? "," Array map  length "," Array map  length > "," Array map  [] "," Array map  any? "]}," Pusher Client em_http_client":{"type":"method","name":"em_http_client","children":[],"call":["EventMachine HttpRequest  new ","connection_opts []= ","proxy_opts []= ","@proxy [] "," require "," raise ","EventMachine  reactor_running? "]}," Pusher Client net_http_client":{"type":"method","name":"net_http_client","children":[],"call":["http verify_mode= ","http use_ssl= "," encrypted? ","http_klass new ","Net HTTP  Proxy ","p [] "," require ","http_klass new  verify_mode= ","http_klass new  use_ssl= ","http_klass new _klass new ","Net HTTP  Proxy  new "]}," Pusher Client trigger_async":{"type":"method","name":"trigger_async","children":[],"call":[" post_async "," trigger_params "]}," Pusher Client channel":{"type":"method","name":"channel","children":[],"call":["Channel  new "," url "," raise "," configured? "]}," Pusher Client webhook":{"type":"method","name":"webhook","children":[],"call":["WebHook  new "]}," Pusher Client post_async":{"type":"method","name":"post_async","children":[],"call":["Resource  new post_async ","Resource  new "," resource post_async "," resource "]}," Pusher Client post":{"type":"method","name":"post","children":[],"call":["Resource  new post ","Resource  new "," resource post "," resource "]}," Pusher Client get_async":{"type":"method","name":"get_async","children":[],"call":["Resource  new get_async ","Resource  new "," resource get_async "," resource "]}," Pusher Client get":{"type":"method","name":"get","children":[],"call":["Resource  new get ","Resource  new "," resource get "," resource "]}," Pusher Client resource":{"type":"method","name":"resource","children":[],"call":["Resource  new "]}," Pusher Client encrypted?":{"type":"method","name":"encrypted?","children":[],"call":["@scheme == "]}," Pusher Client http_proxy=":{"type":"method","name":"http_proxy=","children":[],"call":["uri password ","uri user ","uri port ","uri host ","uri scheme ","URI  parse ","URI  parse  password ","URI  parse  user ","URI  parse  port ","URI  parse  host ","URI  parse  scheme "]}," Pusher Client sync_http_client":{"type":"method","name":"sync_http_client","children":[],"call":["c keep_alive_timeout= ","c receive_timeout= ","c send_timeout= ","c connect_timeout= ","HTTPClient  new tap ","HTTPClient  new "," require "]}," Pusher Client timeout=":{"type":"method","name":"timeout=","children":[],"call":[]}," Pusher Channel users":{"type":"method","name":"users","children":[],"call":["@client get [] ","@client get "," name ","@client channel_users [] ","@client channel_users "]}," Pusher Channel validate_socket_id":{"type":"method","name":"validate_socket_id","children":[],"call":[" raise ","socket_id inspect ","(str \"\\\\A\\\\d+\\\\.\\\\d+\\\\z\") match "]}," Pusher Client authenticate":{"type":"method","name":"authenticate","children":[],"call":["channel_instance authenticate "," channel ","r []= ","Base64  strict_encode64 ","channel_instance shared_secret "," encryption_master_key ","channel_name match "," channel  authenticate ","channel_instance authenticate  []= ","Base64  stchannel_instance authenticate ict_encode64 "," channel  shared_secret ","channel_instance shachannel_instance authenticate ed_secchannel_instance authenticate et "," encchannel_instance authenticate yption_mastechannel_instance authenticate _key "]}," Pusher Client channel_users":{"type":"method","name":"channel_users","children":[],"call":[" get "]}," Pusher Client cluster=":{"type":"method","name":"cluster=","children":[],"call":["cluster empty? ","cluster nil? "]}," Pusher ConfigurationError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pusher Client from_env":{"type":"method","name":"from_env","children":[],"call":[]}," Pusher Channel handle_error":{"type":"method","name":"handle_error","children":[],"call":[" puts ","e inspect "," logger error ","e backtrace join ","e backtrace "," logger ","Pusher  logger debug ","Pusher  logger ","Pusher  logger error ","e class ","e message "]}," Pusher Channel turn_into_json":{"type":"method","name":"turn_into_json","children":[],"call":[]}," Pusher ArgumentError message":{"type":"method","name":"message","children":[],"call":[]}," Pusher authentication_token":{"type":"method","name":"authentication_token","children":[],"call":["Authentication Token  new ","Signature Token  new "]}," Authentication Request validate_signature!":{"type":"method","name":"validate_signature!","children":[],"call":[" raise "," string_to_sign inspect "," string_to_sign ","@auth_hash [] == "," signature ","@auth_hash [] ","string inspect ","Base64  encode64 chomp ","Base64  encode64 ","HMAC SHA256  digest ","token secret ","  string_to_sign _to_sign inspect ","  string_to_sign _to_sign "," string_to_sign  inspect "]}," Authentication Request validate_timestamp!":{"type":"method","name":"validate_timestamp!","children":[],"call":[" raise ","Time  now utc strftime ","Time  now utc ","Time  now ","Time  at utc strftime ","Time  at utc ","Time  at ","timestamp to_i ","error >= ","(send\n  (send\n    (lvar :timestamp) :to_i) :-\n  (send\n    (send\n      (const nil :Time) :now) :to_i)) abs ","timestamp to_i - ","Time  now to_i ","@auth_hash [] ","grace nil? ","@auth_hash []  to_i ","(send\n  (send\n    (lvar :timestamp) :to_i) :-\n  (send\n    (send\n      (const nil :Time) :now) :to_i)) abs  >= ","(send\n  (send\n    (lvar :@auth_hash [] ) :to_i) :-\n  (send\n    (send\n      (const nil :Time) :now) :to_i)) abs ","@auth_hash []  to_i - "]}," Authentication Request validate_version!":{"type":"method","name":"validate_version!","children":[],"call":[" raise ","version == ","@auth_hash [] ","@auth_hash []  == "]}," Authentication Request parameter_string":{"type":"method","name":"parameter_string","children":[],"call":["(send\n  (send\n    (send\n      (lvar :hash) :keys) :sort) :map) join ","hash [] ","hash keys sort map ","hash keys sort ","hash keys ","hash delete ","hash []= ","k to_s downcase ","k to_s ","param_hash each ","@query_hash merge ","@query_hash merge  each "]}," Authentication Request string_to_sign":{"type":"method","name":"string_to_sign","children":[],"call":["(ivar :@method) join "," parameter_string "]}," Authentication Request signature":{"type":"method","name":"signature","children":[],"call":["HMAC SHA256  hexdigest "," string_to_sign ","token secret "]}," Authentication Request auth_hash":{"type":"method","name":"auth_hash","children":[],"call":[" raise ","@auth_hash [] "]}," Authentication Request authenticate":{"type":"method","name":"authenticate","children":[],"call":[" authenticate_by_token! "," raise ","token secret ","@auth_hash [] "]}," Authentication Request authenticate_by_token":{"type":"method","name":"authenticate_by_token","children":[],"call":[" authenticate_by_token! "]}," Authentication Request authenticate_by_token!":{"type":"method","name":"authenticate_by_token!","children":[],"call":[" validate_signature! "," validate_timestamp! "," validate_version! "]}," Authentication Request sign":{"type":"method","name":"sign","children":[],"call":["@auth_hash []= "," signature ","Time  now to_i ","Time  now ","token key ","Base64  encode64 chomp ","Base64  encode64 ","HMAC SHA256  digest "," string_to_sign ","token secret "]}," Authentication Request initialize":{"type":"method","name":"initialize","children":[],"call":["method upcase ","query_hash []= ","auth_hash []= ","k [] == ","k [] ","key to_s downcase ","key to_s ","query each "," raise ","query kind_of? ","path kind_of? ","key to_s downcase  [] == ","key to_s downcase  [] ","key to_s downcase ey to_s downcase ","key to_s downcase ey to_s ","query key to_s downcase ind_of? ","path key to_s downcase ind_of? "]}," Authentication Token sign":{"type":"method","name":"sign","children":[],"call":["request sign "]}," Authentication Token initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pusher Channel handle_response":{"type":"method","name":"handle_response","children":[],"call":[" raise "]}," Pusher Channel construct_request":{"type":"method","name":"construct_request","children":[],"call":["params merge ","request sign ","Pusher  authentication_token ","Authentication Request  new ","@uri path ","params []= ","Digest MD5  hexdigest "," raise ","Pusher  logger error ","data inspect ","Pusher  logger "," class turn_into_json "," class ","Authentication Request  new  sign "]}," Pusher Request turn_into_json":{"type":"method","name":"turn_into_json","children":[],"call":[]}," Pusher Channel socket_auth":{"type":"method","name":"socket_auth","children":[],"call":["token key ","HMAC SHA256  hexdigest ","token secret ","Pusher  authentication_token ","Pusher  logger debug ","Pusher  logger "," name "," raise ","socket_id empty? ","socket_id nil? ","(send\n  (send\n    (array\n      (lvar :socket_id)\n      (send nil :name)\n      (lvar :custom_string)) :compact) :map) join ","e to_s ","(lvar :socket_id) compact map ","(lvar :socket_id) compact ","custom_string kind_of? ","custom_string nil? ","Pusher  authentication_token  key ","Pusher  authentication_token  secret ","Pusher  authentication_Pusher  authentication_token  "]}," Pusher configured?":{"type":"method","name":"configured?","children":[],"call":[" app_id "," secret "," key "," port "," host "," scheme "]}," Pusher url=":{"type":"method","name":"url=","children":[],"call":[" port= ","uri port "," host= ","uri host "," secret= ","uri password "," key= ","uri user "," app_id= ","uri path split last ","uri path split ","uri path ","URI  parse ","URI  parse  port ","URI  parse  host ","URI  parse  password ","URI  parse  user ","URI  parse  path split last ","URI  parse  path split ","URI  parse  path "]}," Pusher url":{"type":"method","name":"url","children":[],"call":["URI HTTP  build "," app_id "," port "," host ","URI Generic  build "," scheme "]}," Pusher JSON generate":{"type":"method","name":"generate","children":[],"call":[]}," Pusher encrypted=":{"type":"method","name":"encrypted=","children":[],"call":["Pusher  port ","Pusher  scheme= "]}," Pusher Channel ssl?":{"type":"method","name":"ssl?","children":[],"call":["@uri scheme == ","@uri scheme "]}," Pusher Channel stats":{"type":"method","name":"stats","children":[],"call":["request send_sync ","Pusher Request  new ","@uri + ","Pusher Request  new  send_sync "]}," Pusher Client encode_data":{"type":"method","name":"encode_data","children":[],"call":["MultiJson  encode ","data is_a? "]}," Pusher Client trigger_batch_params":{"type":"method","name":"trigger_batch_params","children":[],"call":["e []= "," encode_data ","e [] ","event dup tap ","event dup ","events map "," encrypt ","e [] match "]}," Pusher Client trigger_batch_async":{"type":"method","name":"trigger_batch_async","children":[],"call":[" post_async "," trigger_batch_params ","events flatten "]}," Pusher Client trigger_batch":{"type":"method","name":"trigger_batch","children":[],"call":[" post "," trigger_batch_params ","events flatten "]}," Pusher NativeNotification Client deep_symbolize_keys!":{"type":"method","name":"deep_symbolize_keys!","children":[],"call":[" deep_symbolize_keys! ","hash [] ","hash [] kind_of? ","hash []= ","hash delete ","k to_sym ","k respond_to? ","hash keys each ","hash keys "]}," Pusher NativeNotification Client url":{"type":"method","name":"url","children":[],"call":["URI  parse "]}," Pusher NativeNotification Client payload":{"type":"method","name":"payload","children":[],"call":["MultiJson  encode "," deep_symbolize_keys! merge "," deep_symbolize_keys! "," raise ","interests length > ","interests length "," Array map "," Array ","data merge! "," validate_payload ","interests length == "," Array map  length > "," Array map  length "," deep_symbolize_keys! merge  merge! "," deep_symbolize_keys!  merge! "," Array map  length == "]}," Pusher NativeNotification Client notify":{"type":"method","name":"notify","children":[],"call":["Request  new send_sync ","Request  new "," payload "," url "]}," Pusher NativeNotification Client initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pusher Client notify":{"type":"method","name":"notify","children":[],"call":[" notification_client notify "," notification_client "]}," Pusher Client notification_client":{"type":"method","name":"notification_client","children":[],"call":["NativeNotification Client  new "]}," Pusher NativeNotification Client validate_payload":{"type":"method","name":"validate_payload","children":[],"call":[" raise ","WEBHOOK_LEVELS  include? ","webhook_level upcase ","payload has_key? ! ","payload has_key? ","payload [] ","webhook_url =~ ","URI  regexp ","notification_icon empty? ","notification_icon ! ","notification_title empty? ","notification_title ! ","notification values_at ","gcm_payload [] ","ttl to_i > ","ttl to_i ","ttl to_i < ","gcm_payload delete ","RESTRICTED_GCM_PAYLOAD_KEYS  each ","payload []  upcase ","payload []  =~ ","gcm_payload [] _icon empty? ","gcm_payload [] _icon ! ","gcm_payload [] _title empty? ","gcm_payload [] _title ! ","gcm_payload []  values_at ","payload []  [] ","gcm_payload []  to_i > ","gcm_payload []  to_i ","gcm_payload []  to_i < ","payload []  delete "]}," Pusher Client from_url":{"type":"method","name":"from_url","children":[],"call":[]}," Pusher Client encrypt":{"type":"method","name":"encrypt","children":[],"call":["MultiJson  encode ","Base64  encode64 ","secret_box encrypt ","RbNaCl Random  random_bytes ","secret_box nonce_bytes ","RbNaCl SecretBox  new ","RbNaCl Hash  sha256 ","channel + "," require "," raise "," require_rbnacl "," channel shared_secret "," channel ","Base64  strict_encode64 ","RbNaCl SecretBox  new  encrypt ","secret_box RbNaCl Random  random_bytes _bytes ","RbNaCl SecretBox  new  nonce_bytes "]}," Pusher Client encryption_master_key_base64=":{"type":"method","name":"encryption_master_key_base64=","children":[],"call":["Base64  decode64 ","Base64  strict_decode64 "]}," Pusher Client require_rbnacl":{"type":"method","name":"require_rbnacl","children":[],"call":[" raise ","$stderr puts "," require "]}," Pusher Channel shared_secret":{"type":"method","name":"shared_secret","children":[],"call":["digest digest ","digest << ","OpenSSL Digest SHA256  new ","@name + ","OpenSSL Digest SHA256  new  OpenSSL Digest SHA256  new  ","OpenSSL Digest SHA256  new  << "]}}