{" CoffeeScript Value hash":{"type":"method","name":"hash","children":[],"call":["@value hash "]}," CoffeeScript Value eql?":{"type":"method","name":"eql?","children":[],"call":["@value eql? "]}," CoffeeScript Value []":{"type":"method","name":"[]","children":[],"call":["@value [] "]}," CoffeeScript Value ==":{"type":"method","name":"==","children":[],"call":["@value == "]}," CoffeeScript Value inspect":{"type":"method","name":"inspect","children":[],"call":["@value inspect "]}," CoffeeScript Value to_sym":{"type":"method","name":"to_sym","children":[],"call":[" to_str to_sym "," to_str "]}," CoffeeScript Value to_str":{"type":"method","name":"to_str","children":[],"call":["@value to_s "]}," CoffeeScript Value initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CoffeeScript Scope free_variable":{"type":"method","name":"free_variable","children":[],"call":["@temp_variable dup ","@variables []= ","@temp_variable to_sym ","@temp_variable succ! "," check ","Value  new "]}," CoffeeScript Scope reset":{"type":"method","name":"reset","children":[],"call":["@variables []= ","name to_sym "]}," CoffeeScript Scope check":{"type":"method","name":"check","children":[],"call":["@parent find ","@variables [] ","name to_sym ","(and\n  (ivar :@parent)\n  (send\n    (ivar :@parent) :check\n    (lvar :name))) ! ! ","(and\n  (ivar :@parent)\n  (send\n    (ivar :@parent) :check\n    (lvar :name))) ! ","@parent check "]}," CoffeeScript Scope find":{"type":"method","name":"find","children":[],"call":["@variables []= ","name to_sym "," check "]}," CoffeeScript Scope initialize":{"type":"method","name":"initialize","children":[],"call":["@parent temp_variable ","@parent temp_variable dup "]}," CoffeeScript Parser _reduce_none":{"type":"method","name":"_reduce_none","children":[],"call":["val [] "]}," CoffeeScript ParseError message":{"type":"method","name":"message","children":[],"call":["@value to_s ","@token_id downcase ","@token_id != ","@value inspect ","@value line ","@value respond_to? ","(str \"INDENT\") include? ","@token_id to_s downcase ","@token_id to_s ","TOKEN_MAP  [] ","@value @value line  "]}," CoffeeScript ParseError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CoffeeScript IfNode compile_ternary":{"type":"method","name":"compile_ternary","children":[],"call":["@else_body compile ","@body compile ","@condition compile "]}," CoffeeScript IfNode compile_statement":{"type":"method","name":"compile_statement","children":[],"call":["if_part + ","Expressions  wrap compile ","Expressions  wrap ","@else_body compile ","o merge "," chain? ","@condition compile ","o [] ","cond_o delete ","o dup ","o []= ","o delete "," idt ","@comment compile + ","@comment compile "," compile_condition ","@else_Expressions  wrap compile  compile ","o dup  delete "]}," CoffeeScript IfNode compile":{"type":"method","name":"compile","children":[],"call":[" write "," compile_ternary "," compile_statement "," statement? "]}," CoffeeScript IfNode line_ending":{"type":"method","name":"line_ending","children":[],"call":[" statement? "]}," CoffeeScript IfNode custom_assign?":{"type":"method","name":"custom_assign?","children":[],"call":[" statement? "]}," CoffeeScript IfNode custom_return?":{"type":"method","name":"custom_return?","children":[],"call":[" statement? "]}," CoffeeScript IfNode statement?":{"type":"method","name":"statement?","children":[],"call":["(or\n  (or\n    (send\n      (ivar :@tags) :[]\n      (sym :statement))\n    (send\n      (ivar :@body) :statement?))\n  (begin\n    (and\n      (ivar :@else_body)\n      (send\n        (ivar :@else_body) :statement?)))) ! ! ","(or\n  (or\n    (send\n      (ivar :@tags) :[]\n      (sym :statement))\n    (send\n      (ivar :@body) :statement?))\n  (begin\n    (and\n      (ivar :@else_body)\n      (send\n        (ivar :@else_body) :statement?)))) ! ","@else_body statement? ","@body statement? ","@tags [] ","(or\n  (or\n    (or\n      (ivar :@comment)\n      (send\n        (ivar :@tags) :[]\n        (sym :statement)))\n    (send\n      (ivar :@body) :statement?))\n  (begin\n    (and\n      (ivar :@else_body)\n      (send\n        (ivar :@else_body) :statement?)))) ! ! ","(or\n  (or\n    (or\n      (ivar :@comment)\n      (send\n        (ivar :@tags) :[]\n        (sym :statement)))\n    (send\n      (ivar :@body) :statement?))\n  (begin\n    (and\n      (ivar :@else_body)\n      (send\n        (ivar :@else_body) :statement?)))) ! "]}," CoffeeScript IfNode chain?":{"type":"method","name":"chain?","children":[],"call":["@else_body is_a? "]}," CoffeeScript IfNode add_else":{"type":"method","name":"add_else","children":[],"call":["@else_body add_else "," chain? ","exprs unwrap "]}," CoffeeScript IfNode rewrite_condition":{"type":"method","name":"rewrite_condition","children":[],"call":["@else_body rewrite_condition "," chain? ","OpNode  new ","@condition map ","OpNode  new  map "]}," CoffeeScript IfNode <<":{"type":"method","name":"<<","children":[],"call":["@else_body << ","else_body unwrap "]}," CoffeeScript IfNode initialize":{"type":"method","name":"initialize","children":[],"call":["OpNode  new ","ParentheticalNode  new ","@tags [] ","else_body unwrap ","body unwrap ","@condition is_a? ","OpNode  new  is_a? "]}," CoffeeScript ParentheticalNode compile":{"type":"method","name":"compile","children":[],"call":[" write "," statement? ","o [] ","compiled [] ","compiled [] == ","@expressions compile "," raise ","compiled []  [] ","@expressions compile  [] ","compiled []  [] == ","@expressions compile  [] == "]}," CoffeeScript ParentheticalNode custom_return?":{"type":"method","name":"custom_return?","children":[],"call":["@expressions custom_return? "]}," CoffeeScript ParentheticalNode custom_assign?":{"type":"method","name":"custom_assign?","children":[],"call":["@expressions custom_assign? "]}," CoffeeScript ParentheticalNode statement?":{"type":"method","name":"statement?","children":[],"call":["@expressions statement? ","@expressions unwrap statement? ","@expressions unwrap "]}," CoffeeScript ParentheticalNode initialize":{"type":"method","name":"initialize","children":[],"call":["expressions unwrap "]}," CoffeeScript ThrowNode compile":{"type":"method","name":"compile","children":[],"call":[" write ","@expression compile "]}," CoffeeScript ThrowNode initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CoffeeScript TryNode compile":{"type":"method","name":"compile","children":[],"call":[" write ","@try compile ","@finally compile ","o merge ","@recovery compile ","o [] "]}," CoffeeScript TryNode line_ending":{"type":"method","name":"line_ending","children":[],"call":[]}," CoffeeScript TryNode initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CoffeeScript ForNode compile":{"type":"method","name":"compile","children":[],"call":[" write ","o [] ","body compile ","o merge ","o [] + ","IfNode  new ","CallNode  new ","ValueNode  new ","AccessorNode  new ","LiteralNode  new ","scope free_variable ","@source compile ","scope find ","o [] compile "," name ","@source is_a? ","body compile  compile ","IfNode  new  compile ","CallNode  new  compile ","o []  free_variable ","o []  find "]}," CoffeeScript ForNode line_ending":{"type":"method","name":"line_ending","children":[],"call":[]}," CoffeeScript ForNode initialize":{"type":"method","name":"initialize","children":[],"call":["source [] ","source [] ! ! ","source [] ! "]}," CoffeeScript WhileNode compile":{"type":"method","name":"compile","children":[],"call":[" write ","o [] ","@body compile ","o merge ","@condition compile ","o [] + ","o delete ","@@condition compile ition compile "]}," CoffeeScript WhileNode line_ending":{"type":"method","name":"line_ending","children":[],"call":[]}," CoffeeScript WhileNode initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CoffeeScript ArrayNode compile":{"type":"method","name":"compile","children":[],"call":[" write ","o [] ","objects include? ","(send\n  (ivar :@objects) :map) join ","obj compile + ","obj compile ","o merge ","o [] + ","obj == ","@objects last ","obj is_a? ","@objects map ","(send\n  (ivar :@objects) :map) join  include? ","(send\n  (ivar :@(send\n  (ivar :@objects) :map) join ) :map) join ","@(send\n  (ivar :@objects) :map) join  last ","@(send\n  (ivar :@objects) :map) join  map "]}," CoffeeScript ArrayNode initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CoffeeScript ObjectNode compile":{"type":"method","name":"compile","children":[],"call":[" write ","(send\n  (ivar :@properties) :map) join ","o [] + + ","o [] + ","prop compile ","o [] ","prop is_a? ","prop == ","@properties last ","@properties map "]}," CoffeeScript ObjectNode initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CoffeeScript CodeNode compile":{"type":"method","name":"compile","children":[],"call":[" write ","@params join ","@body compile ","o [] find ","id to_s ","o [] ","@params each ","o delete ","o []= ","Scope  new ","o [] parameter "]}," CoffeeScript CodeNode initialize":{"type":"method","name":"initialize","children":[],"call":["tag == "]}," CoffeeScript OpNode compile_unary":{"type":"method","name":"compile_unary","children":[],"call":["parts join ","parts reverse! ","@first compile ","@operator to_s ","@operator to_s == ","PREFIX_OPERATORS  include? ","@operator to_sym "]}," CoffeeScript OpNode compile_conditional":{"type":"method","name":"compile_conditional","children":[],"call":["@operator [] ","@second compile ","@first compile "]}," CoffeeScript OpNode compile":{"type":"method","name":"compile","children":[],"call":[" write ","@second compile ","@first compile "," compile_unary "," unary? "," compile_conditional ","CONDITIONALS  include? "]}," CoffeeScript OpNode unary?":{"type":"method","name":"unary?","children":[],"call":["@second nil? "]}," CoffeeScript OpNode initialize":{"type":"method","name":"initialize","children":[],"call":["CONVERSIONS  [] ","operator to_sym "]}," CoffeeScript AssignNode compile":{"type":"method","name":"compile","children":[],"call":[" write ","@value compile sub ","@value compile ","def_part + ","@value custom_assign? ","o [] ","@variable properties? ","o [] find ","@value custom_assign? ! ","@context == ","o merge ","name to_s ","@variable last to_s ","@variable last ","@variable respond_to? ","@variable compile ","name [] ","@variable to_s ","@value custom_return? ! ","@value custom_return? ","@value co merge mpile sub ","@value co merge mpile ","@value custo merge m_assign? ","o merge  [] ","@variable pro merge perties? ","o merge  [] find ","@value custo merge m_assign? ! ","@co merge ntext == ","o merge  merge ","name to merge _s ","@variable compile  to_s ","@variable to_s  to_s ","@variable last to merge _s ","@variable name to_s  to_s ","@variable @variable last to_s  to_s ","@variable name to_s  ","@variable @variable last to_s  ","@variable respo merge nd_to merge ? ","@variable co merge mpile ","@variable compile  [] ","@variable to_s  [] ","@variable to merge _s ","@value custo merge m_return? ! ","@value custo merge m_return? "]}," CoffeeScript AssignNode line_ending":{"type":"method","name":"line_ending","children":[],"call":["@value custom_assign? "]}," CoffeeScript AssignNode initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CoffeeScript SliceNode compile":{"type":"method","name":"compile","children":[],"call":[" write ","@to compile ","@from compile ","@range exclusive? ","@range to compile ","@range to ","@range from compile ","@range from ","@@range to compile  compile ","@@range from compile  compile ","@range @range to compile  compile ","@range @range to compile  ","@range @range from compile  compile ","@range @range from compile  "]}," CoffeeScript SliceNode initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CoffeeScript IndexNode compile":{"type":"method","name":"compile","children":[],"call":[" write ","@index compile "]}," CoffeeScript IndexNode initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CoffeeScript AccessorNode compile":{"type":"method","name":"compile","children":[],"call":[" write "]}," CoffeeScript AccessorNode initialize":{"type":"method","name":"initialize","children":[],"call":["tag == "]}," CoffeeScript ValueNode compile":{"type":"method","name":"compile","children":[],"call":[" write ","parts join ","parts last ","val to_s ","val compile ","val respond_to? ","(ivar :@literal) flatten map ","(ivar :@literal) flatten "]}," CoffeeScript ValueNode custom_return?":{"type":"method","name":"custom_return?","children":[],"call":[" properties? ! "," properties? ","@literal custom_return? ","@literal is_a? "]}," CoffeeScript ValueNode custom_assign?":{"type":"method","name":"custom_assign?","children":[],"call":[" properties? ! "," properties? ","@literal custom_assign? ","@literal is_a? "]}," CoffeeScript ValueNode statement?":{"type":"method","name":"statement?","children":[],"call":[" properties? ! "," properties? ","@literal statement? ","@literal is_a? ","@base statement? ","@base is_a? "]}," CoffeeScript ValueNode properties?":{"type":"method","name":"properties?","children":[],"call":["@properties empty? ! ","@properties empty? ","@base is_a? "]}," CoffeeScript ValueNode <<":{"type":"method","name":"<<","children":[],"call":["@properties << "]}," CoffeeScript ValueNode initialize":{"type":"method","name":"initialize","children":[],"call":["(lvar :properties) flatten "]}," CoffeeScript CallNode compile_super":{"type":"method","name":"compile_super","children":[],"call":["o [] sub ","o [] ","args empty? ","o [] function proto ","o [] function ","o [] function name "]}," CoffeeScript CallNode compile":{"type":"method","name":"compile","children":[],"call":[" write ","@variable compile "," compile_super "," super? ","(send\n  (ivar :@arguments) :map) join ","a compile ","o merge ","@arguments map "]}," CoffeeScript CallNode super?":{"type":"method","name":"super?","children":[],"call":["@variable == "]}," CoffeeScript CallNode new_instance":{"type":"method","name":"new_instance","children":[],"call":[]}," CoffeeScript CallNode initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CoffeeScript CommentNode compile":{"type":"method","name":"compile","children":[],"call":[" write ","@lines join ","o [] "]}," CoffeeScript CommentNode line_ending":{"type":"method","name":"line_ending","children":[],"call":[]}," CoffeeScript CommentNode initialize":{"type":"method","name":"initialize","children":[],"call":["lines value "]}," CoffeeScript ReturnNode compile":{"type":"method","name":"compile","children":[],"call":[" write "," indent ","@expression statement? ","@expression compile ","o merge ","@expression custom_return? "]}," CoffeeScript ReturnNode line_ending":{"type":"method","name":"line_ending","children":[],"call":["@expression custom_return? "]}," CoffeeScript ReturnNode initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CoffeeScript LiteralNode compile":{"type":"method","name":"compile","children":[],"call":[" write ","@value to_s "]}," CoffeeScript LiteralNode line_ending":{"type":"method","name":"line_ending","children":[],"call":["@value to_s [] == ","@value to_s [] ","@value to_s "]}," CoffeeScript LiteralNode statement?":{"type":"method","name":"statement?","children":[],"call":["STATEMENTS  include? ","@value to_s "]}," CoffeeScript LiteralNode initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CoffeeScript Expressions compile":{"type":"method","name":"compile","children":[],"call":[" write ","(send\n  (ivar :@expressions) :map) join ","node line_ending ","node compile ","o [] ","o delete ","AssignNode  new compile ","AssignNode  new ","ValueNode  new ","LiteralNode  new ","node custom_assign? ","node statement? ","node custom_return? "," last? ","@expressions map "," root_compile ","options [] ","declarations + ","compiled join ","scope declared_variables join ","scope declared_variables ","parent == ","scope any_declared? "," compile_root ","options []  declared_variables join ","options []  declared_variables ","options []  any_declared? "]}," CoffeeScript Expressions root_compile":{"type":"method","name":"root_compile","children":[],"call":["code gsub! "," compile ","Scope  new ","o [] ","o merge "," compile  gsub! "]}," CoffeeScript Expressions last?":{"type":"method","name":"last?","children":[],"call":["node == ","@expressions [] ","@expressions last is_a? ","@expressions last "]}," CoffeeScript Expressions unwrap":{"type":"method","name":"unwrap","children":[],"call":["@expressions first ","@expressions length == ","@expressions length "]}," CoffeeScript Expressions <<":{"type":"method","name":"<<","children":[],"call":["@expressions << "]}," CoffeeScript Expressions initialize":{"type":"method","name":"initialize","children":[],"call":["nodes flatten "]}," CoffeeScript Expressions wrap":{"type":"method","name":"wrap","children":[],"call":[]}," CoffeeScript Node custom_assign?":{"type":"method","name":"custom_assign?","children":[],"call":[]}," CoffeeScript Node custom_return?":{"type":"method","name":"custom_return?","children":[],"call":[]}," CoffeeScript Node statement?":{"type":"method","name":"statement?","children":[],"call":[]}," CoffeeScript Node line_ending":{"type":"method","name":"line_ending","children":[],"call":[]}," CoffeeScript Node unwrap":{"type":"method","name":"unwrap","children":[],"call":[]}," CoffeeScript Node compile":{"type":"method","name":"compile","children":[],"call":["o dup "," compile_node "," compile_closure ","@options [] ! ","@options [] ","top ! "," statement_only? ! "," statement_only? "," statement? ","@options delete "," is_a? ","o [] "," top_sensitive? ","(send nil :contains?) ! ","n statement_only? "," contains? "," is_a? ! ","o dup  [] ! ","o dup  [] ","@options delete  ! ","@options []  ! ","o dup  delete "," @options delete _sensitive? "," @options [] _sensitive? "]}," CoffeeScript Node write":{"type":"method","name":"write","children":[],"call":[" puts ","@options inspect "," class to_s "," class ","ENV  [] "]}," CoffeeScript Node custom_assign":{"type":"method","name":"custom_assign","children":[],"call":[]}," CoffeeScript Node custom_return":{"type":"method","name":"custom_return","children":[],"call":[]}," CoffeeScript Node statement":{"type":"method","name":"statement","children":[],"call":[]}," CoffeeScript Lexer remove_leading_newlines":{"type":"method","name":"remove_leading_newlines","children":[],"call":["@tokens pop "," last_value == "," last_value "]}," CoffeeScript Lexer skip_following_newlines":{"type":"method","name":"skip_following_newlines","children":[],"call":["newlines length ","@code [] [] ","@code [] ","@i + ","@code [] []  length "]}," CoffeeScript Lexer tag_parameters":{"type":"method","name":"tag_parameters","children":[],"call":["tok []= ","tok [] != ","tok [] ","tok [] == ","tok ! ","@tokens [] "," loop ","(str \".\") include? "," last_tag != "," last_tag ","@tokens []  []= ","@tokens []  [] != ","@tokens []  [] ","@tokens []  [] == ","@tokens []  ! ","@@tokens [] ens [] "]}," CoffeeScript Lexer last_value":{"type":"method","name":"last_value","children":[],"call":["@tokens last [] ","@tokens last "]}," CoffeeScript Lexer token":{"type":"method","name":"token","children":[],"call":["@tokens << ","Value  new "]}," CoffeeScript Lexer literal_token":{"type":"method","name":"literal_token","children":[],"call":["value length "," token "," remove_leading_newlines ","EXP_END  include? "," skip_following_newlines ","EXP_START  include? ","@chunk [] "," tag_parameters ","value match "," last_value == "," last_value ","ASSIGN  include? ","@tokens pop ","(str \"\\n\") include? ","value == ","CALLABLE  include? "," last_tag ","@spaced equal? ! ","@spaced equal? ","@chunk []  length ","@chunk []  match "," last_@chunk []  == "," last_@chunk []  ","@chunk []  == "]}," CoffeeScript Lexer whitespace_token":{"type":"method","name":"whitespace_token","children":[],"call":["whitespace length ","@chunk [] "," last_value ","@chunk []  length "]}," CoffeeScript Lexer comment_token":{"type":"method","name":"comment_token","children":[],"call":["comment length "," token ","comment gsub split ","comment gsub ","comment scan length ","comment scan ","@chunk [] ","@chunk []  length ","@chunk []  gsub split ","@chunk []  gsub ","@chunk []  scan length ","@chunk []  scan "]}," CoffeeScript Lexer regex_token":{"type":"method","name":"regex_token","children":[],"call":["regex length "," token ","@chunk [] ","NOT_REGEX  include? "," last_tag ","@chunk []  length "]}," CoffeeScript Lexer js_token":{"type":"method","name":"js_token","children":[],"call":["script length "," token ","script gsub ","@chunk [] ","@chunk []  length ","@chunk []  gsub "]}," CoffeeScript Lexer string_token":{"type":"method","name":"string_token","children":[],"call":["string length "," token ","string gsub ","@chunk [] ","string count ","@chunk []  length ","@chunk []  gsub ","@chunk []  count "]}," CoffeeScript Lexer number_token":{"type":"method","name":"number_token","children":[],"call":["number length "," token ","@chunk [] ","@chunk []  length "]}," CoffeeScript Lexer identifier_token":{"type":"method","name":"identifier_token","children":[],"call":["identifier length "," token ","@tokens [] []= ","@tokens [] "," last_value == "," last_value ","tag == ","identifier upcase to_sym ","identifier upcase ","KEYWORDS  include? ","@chunk [] ","(send\n  (send\n    (send\n      (ivar :@tokens) :[]\n      (int -2)) :[]\n    (int 1)) :==\n  (str \".\")) ! ","@tokens [] [] == ","@tokens [] [] ","(sym :OUTDENT) include? "," last_tag ","(and\n  (send\n    (ivar :@tokens) :[]\n    (int -2))\n  (send\n    (send\n      (send\n        (ivar :@tokens) :[]\n        (int -2)) :[]\n      (int 1)) :==\n    (str \".\"))) ! ","@tokens delete_at ","@chunk []  length ","identifier upcase to_sym  == ","@chunk []  upcase to_sym ","@chunk []  upcase "," last_identifier upcase to_sym  "]}," CoffeeScript Lexer extract_next_token":{"type":"method","name":"extract_next_token","children":[],"call":[" literal_token "," whitespace_token "," comment_token "," regex_token "," js_token "," string_token "," number_token "," identifier_token "," indent_token "," heredoc_token "]}," CoffeeScript Lexer tokenize":{"type":"method","name":"tokenize","children":[],"call":[" extract_next_token ","@code [] ","@i < ","@code length ","code chomp ","Rewriter  new rewrite ","Rewriter  new "," close_indentation "," puts ","@tokens inspect ","ENV  [] ","code chomp  [] ","code chomp  length "]}," CoffeeScript CommandLine parse_options":{"type":"method","name":"parse_options","children":[],"call":[" exit "," puts ","e message ","@option_parser parse! ","@option_parser banner= "," usage ","opts on_tail "," install_bundle ","ENV  []= ","opts on ","@options []= ","FileUtils  mkdir_p ","File  exists? ","OptionParser  new "]}," CoffeeScript CommandLine install_bundle":{"type":"method","name":"install_bundle","children":[],"call":["FileUtils  cp_r ","File  dirname + ","File  dirname ","File  expand_path "]}," CoffeeScript CommandLine path_for":{"type":"method","name":"path_for","children":[],"call":["File  join ","File  dirname ","@options [] ","File  basename + ","File  basename ","File  extname "]}," CoffeeScript CommandLine compile":{"type":"method","name":"compile","children":[],"call":[" exit ","@options [] ","STDERR  puts ","e message ","CoffeeScript  compile ","options []= "]}," CoffeeScript CommandLine tokens":{"type":"method","name":"tokens","children":[],"call":[" puts ","Lexer  new tokenize inspect ","Lexer  new tokenize ","Lexer  new "]}," CoffeeScript CommandLine eval_scriptlet":{"type":"method","name":"eval_scriptlet","children":[],"call":[" puts "," lint ","@options [] "," compile "," tokens ","STDIN  read ","@sources join ","STDIN  tty? "]}," CoffeeScript CommandLine lint":{"type":"method","name":"lint","children":[],"call":["stderr close ","stdout close "," puts ","errs empty? ","stderr read chomp ","stderr read ","stdout read tr ","stdout read ","stdin close ","stdin write ","Open3  popen3 ","stderr read chomp  empty? "]}," CoffeeScript CommandLine check_sources":{"type":"method","name":"check_sources","children":[],"call":[" exit ","STDERR  puts ","File  exists? ! ","File  exists? ","@sources detect "," usage ","@sources empty? "]}," CoffeeScript CommandLine watch_coffee_scripts":{"type":"method","name":"watch_coffee_scripts","children":[],"call":["watch_thread join ","watch_thread kill ","Signal  trap "," sleep "," compile_javascript ","@mtimes []= ","mtime > ","@mtimes [] ","File  stat mtime ","File  stat ","@sources each "," loop ","Thread  start ","@File  stat mtime s []= ","File  stat mtime  > ","@File  stat mtime s [] ","File  stat File  stat mtime  "]}," CoffeeScript CommandLine compile_javascript":{"type":"method","name":"compile_javascript","children":[],"call":["f write ","File  open "," path_for "," lint ","@options [] "," puts "," compile "," tokens ","File  read "]}," CoffeeScript CommandLine usage":{"type":"method","name":"usage","children":[],"call":[" exit "," puts "]}," CoffeeScript CommandLine initialize":{"type":"method","name":"initialize","children":[],"call":[" watch_coffee_scripts ","@options [] "," compile_javascript ","@sources each "," check_sources "," eval_scriptlet "," parse_options "," run_scripts "," launch_repl "]}," CoffeeScript compile":{"type":"method","name":"compile","children":[],"call":[" execute_coffee "," no_wrap_flag ","options key? ","options [] == ","options [] "," engine compile "," engine ","options []= ","script read ","script respond_to? ","Source  context call ","Source  context ","h []= ","k to_s ","options inject ","script read  read ","script read  respond_to? "]}," CoffeeScript ExtendsNode compile":{"type":"method","name":"compile","children":[],"call":["@super_object compile ","@sub_object compile ","(begin\n  (lvar :sub)) + + ","(begin\n  (lvar :sub)) + ","o [] "]}," CoffeeScript ExtendsNode initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CoffeeScript CommandLine run_scripts":{"type":"method","name":"run_scripts","children":[],"call":[" exit "," puts "," exec ","@sources join ","@options [] ","RUNNERS  [] ","@@sources join  join "]}," CoffeeScript CommandLine launch_repl":{"type":"method","name":"launch_repl","children":[],"call":[" exit "," puts "," exec ","@options [] ","RUNNERS  [] "]}," CoffeeScript Scope declared_variables":{"type":"method","name":"declared_variables","children":[],"call":["(send\n  (block\n    (send\n      (ivar :@variables) :select)\n    (args\n      (arg :k)\n      (arg :v))\n    (send\n      (lvar :v) :==\n      (sym :var))) :map) sort ","pair [] to_s ","pair [] ","(send\n  (ivar :@variables) :select) map ","v == ","@variables select "]}," CoffeeScript Scope any_declared?":{"type":"method","name":"any_declared?","children":[],"call":[" declared_variables empty? ! "," declared_variables empty? "," declared_variables "]}," CoffeeScript Scope parameter":{"type":"method","name":"parameter","children":[],"call":["@variables []= ","name to_sym "]}," CoffeeScript RangeNode compile":{"type":"method","name":"compile","children":[],"call":[" greater_operator "," less_operator ","@to compile ","@from compile "]}," CoffeeScript RangeNode greater_operator":{"type":"method","name":"greater_operator","children":[],"call":[]}," CoffeeScript RangeNode less_operator":{"type":"method","name":"less_operator","children":[],"call":[]}," CoffeeScript RangeNode exclusive?":{"type":"method","name":"exclusive?","children":[],"call":[]}," CoffeeScript RangeNode initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CoffeeScript Scope inspect":{"type":"method","name":"inspect","children":[],"call":["@variables inspect "," __id__ "]}," CoffeeScript Scope declarations?":{"type":"method","name":"declarations?","children":[],"call":["body == "," declared_variables empty? ! "," declared_variables empty? "," declared_variables "]}," CoffeeScript Rewriter rewrite_closing_parens":{"type":"method","name":"rewrite_closing_parens","children":[],"call":["@tokens insert ","Value  new ","token [] line ","token [] ","INVERSES  [] ","match [] ","mtag == "," puts ","stack_stats [] ","debt [] ","tag == ","stack pop ","@tokens delete_at ","debt [] > ","@tokens [] inspect ","@tokens [] ","EXPRESSION_TAIL  include? ","stack push ","EXPRESSION_START  include? "," scan_tokens ","@tokens inspect ","debt inspect ","stack inspect "," lambda ","Hash  new ","ENV  [] ","stack pop  [] ","match []  == "]}," CoffeeScript Rewriter ensure_balance":{"type":"method","name":"ensure_balance","children":[],"call":[" raise ","unclosed [] ","v > ","levels detect ","ParseError  new ","token [] ","levels [] < ","levels [] ","token [] == ","pairs each "," scan_tokens ","Hash  new ","Value  new ","lines [] ","lines []= ","token [] line "," puts ","@tokens inspect ","ENV  [] ","Hash  new  detect ","Hash  new  [] < ","Hash  new  [] "]}," CoffeeScript Rewriter add_implicit_indentation":{"type":"method","name":"add_implicit_indentation","children":[],"call":["@tokens delete_at ","token [] == ","token [] ","tok [] == ","tok [] ","@tokens insert ","Value  new ","parens == ","SINGLE_CLOSERS  include? ","tok ! ","@tokens [] "," loop ","i + ","token [] line ","(and\n  (send\n    (send\n      (lvar :token) :[]\n      (int 0)) :==\n    (sym :ELSE))\n  (send\n    (send\n      (lvar :post) :[]\n      (int 0)) :==\n    (sym :IF))) ! ","post [] == ","post [] ","post [] != ","SINGLE_LINERS  include? "," scan_tokens ","idx - ","@tokens [] [] == ","@tokens [] [] ","(and\n  (send\n    (lvar :starter) :==\n    (sym :ELSE))\n  (send\n    (send\n      (lvar :tok) :[]\n      (int 0)) :==\n    (sym :ELSE))) ! ","starter == ","@@tokens [] ens delete_at ","@tokens [] en [] == ","@tokens [] en [] ","@tokens []  [] == ","@tokens []  [] ","@@tokens [] ens insert ","@tokens []  ! ","@@tokens [] ens [] ","@tokens [] en [] line ","token [] token [] line  ","(and\n  (send\n    (send\n      (lvar :@tokens [] en) :[]\n      (int 0)) :==\n    (sym :ELSE))\n  (send\n    (send\n      (lvar :post) :[]\n      (int 0)) :==\n    (sym :IF))) ! "," scan_@tokens [] ens ","i +  - ","@@tokens [] ens [] [] == ","@@tokens [] ens [] [] ","(and\n  (send\n    (lvar :starter) :==\n    (sym :ELSE))\n  (send\n    (send\n      (lvar :@tokens [] ) :[]\n      (int 0)) :==\n    (sym :ELSE))) ! ","(and\n  (send\n    (lvar :token [] ) :==\n    (sym :ELSE))\n  (send\n    (send\n      (lvar :tok) :[]\n      (int 0)) :==\n    (sym :ELSE))) ! ","token []  == "]}," CoffeeScript Rewriter move_commas_outside_outdents":{"type":"method","name":"move_commas_outside_outdents","children":[],"call":["@tokens insert ","i - ","@tokens delete_at ","prev [] == ","prev [] ","token [] == ","token [] "," scan_tokens "]}," CoffeeScript Rewriter remove_mid_expression_newlines":{"type":"method","name":"remove_mid_expression_newlines","children":[],"call":["@tokens delete_at ","token [] == ","token [] ","EXPRESSION_CLOSE  include? ","post [] "," scan_tokens "]}," CoffeeScript Rewriter adjust_comments":{"type":"method","name":"adjust_comments","children":[],"call":["@tokens insert ","Value  new ","token [] line ","token [] ","(str \"\\n\") include? ! ","(str \"\\n\") include? ","prev [] ","@tokens delete_at ","i - ","i + ","before [] == ","after [] ","before [] ","after [] == ","@tokens [] ","token [] == "," scan_tokens ","@tokens []= ","(sym :INDENT) include? ","prev [] == "]}," CoffeeScript Rewriter scan_tokens":{"type":"method","name":"scan_tokens","children":[],"call":["@tokens [] ","i + ","i - "," loop "]}," CoffeeScript Rewriter rewrite":{"type":"method","name":"rewrite","children":[],"call":[" rewrite_closing_parens "," ensure_balance "," add_implicit_indentation "," move_commas_outside_outdents "," remove_mid_expression_newlines "," adjust_comments "," remove_leading_newlines "," add_implicit_parentheses "," close_open_calls_and_indexes "]}," CoffeeScript IfNode compile_node":{"type":"method","name":"compile_node","children":[],"call":[" write "," compile_ternary "," compile_statement "," statement? "]}," CoffeeScript IfNode force_statement":{"type":"method","name":"force_statement","children":[],"call":["@tags []= "]}," CoffeeScript ParentheticalNode compile_node":{"type":"method","name":"compile_node","children":[],"call":[" write ","compiled [] ","compiled [] == ","@expressions compile ","compiled []  [] ","@expressions compile  [] ","compiled []  [] == ","@expressions compile  [] == "]}," CoffeeScript ExistenceNode compile_node":{"type":"method","name":"compile_node","children":[],"call":[" write ","@expression compile ","ExistenceNode  compile_test "]}," CoffeeScript ExistenceNode initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CoffeeScript ThrowNode compile_node":{"type":"method","name":"compile_node","children":[],"call":[" write ","@expression compile ","o [] "," idt "]}," CoffeeScript TryNode compile_node":{"type":"method","name":"compile_node","children":[],"call":[" write ","@try compile ","@finally compile ","o merge ","@recovery compile ","o []= ","o [] "," idt "]}," CoffeeScript ForNode compile_node":{"type":"method","name":"compile_node","children":[],"call":[" write ","o [] ","body compile ","o merge ","Expressions  wrap ","IfNode  new ","o delete ","CallNode  new ","ValueNode  new ","AccessorNode  new ","LiteralNode  new ","AssignNode  new ","@body unwrap ","o [] + ","@source compile ","o [] + + ","@source compile_variables ","scope free_variable "," name ","scope find ","@source is_a? ","o [] ! ","set_result + + "," idt ","set_result + ","LiteralNode  wrap ","Value  new ","body unwrap ","source compile ","source compile_variables ","@source literal ","@source properties empty? ","@source properties ","@source literal is_a? ","@source base ","@source base is_a? ","o [] assign ","PushNode  wrap ","ClosureNode  wrap ","n is_a? "," contains? ","@step compile ","body compile  compile ","Expressions  wrap  compile ","IfNode  new  compile ","PushNode  wrap  compile ","ClosureNode  wrap  compile ","@body compile  unwrap ","@Expressions  wrap  unwrap ","@IfNode  new  unwrap ","@PushNode  wrap  unwrap ","@ClosureNode  wrap  unwrap ","@@source literal  compile ","@@source base  compile ","@@source literal  compile_variables ","@@source base  compile_variables ","o []  free_variable ","o []  find ","@@source literal  is_a? ","@@source base  is_a? "," idt  + + "," idt  + ","body compile  unwrap ","Expressions  wrap  unwrap ","IfNode  new  unwrap ","PushNode  wrap  unwrap ","ClosureNode  wrap  unwrap ","@source literal  compile ","@source base  compile ","@source literal  compile_variables ","@source base  compile_variables ","@@source literal  literal ","@@source base  literal ","@@source literal  properties empty? ","@@source base  properties empty? ","@@source literal  properties ","@@source base  properties ","@@source literal  literal is_a? ","@@source base  literal is_a? ","@@source literal  base ","@@source base  base ","@@source literal  base is_a? ","@@source base  base is_a? "]}," CoffeeScript WhileNode compile_node":{"type":"method","name":"compile_node","children":[],"call":[" write ","@body compile ","@condition compile ","o []= ","o [] ","o delete "," idt ","@body nil? ","PushNode  wrap ","o [] free_variable ","top ! ","returns ! ","PushNode  wrap  compile ","@@condition compile ition compile ","PushNode  wrap  nil? ","o delete  ! "]}," CoffeeScript ArrayNode compile_node":{"type":"method","name":"compile_node","children":[],"call":[" write ","objects include? ","(send\n  (ivar :@objects) :map) join ","obj == ","@objects last ","o [] ","obj is_a? ","obj compile ","@objects map "," idt ","o []= ","(send\n  (ivar :@objects) :map) join  include? ","(send\n  (ivar :@(send\n  (ivar :@objects) :map) join ) :map) join ","@(send\n  (ivar :@objects) :map) join  last ","@(send\n  (ivar :@objects) :map) join  map "]}," CoffeeScript ObjectNode compile_node":{"type":"method","name":"compile_node","children":[],"call":[" write ","(send\n  (ivar :@properties) :map) join ","prop compile ","o [] ","prop is_a? ","prop == ","@properties last ","joins [] ","@properties map ","joins []= ","p == ","non_comments last ","non_comments each ","p is_a? ! ","p is_a? ","@properties select ","Hash  new "," idt ","o []= ","(send\n  (ivar :@properties) :map) joins []  ","joins [] s [] ","Hash  new  [] ","joins [] s []= ","Hash  new  []= "," o []  "]}," CoffeeScript ArgSplatNode compile_node":{"type":"method","name":"compile_node","children":[],"call":[" write ","@value compile "]}," CoffeeScript ArgSplatNode initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CoffeeScript ParamSplatNode compile_node":{"type":"method","name":"compile_node","children":[],"call":[" write ","o [] find ","o [] "]}," CoffeeScript ParamSplatNode initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CoffeeScript CodeNode compile_node":{"type":"method","name":"compile_node","children":[],"call":[" write ","@params join ","@body compile_with_declarations ","o [] parameter ","id to_s ","o [] ","@params each ","@body unshift ","splat index= ","@params length ","@params pop ","@params last is_a? ","@params last ","o delete ","o []= ","Scope  new "," idt ","o [] free_variable ","o [] assign ","@bound ! ","@body empty? ","@params pop  index= "]}," CoffeeScript OpNode compile_node":{"type":"method","name":"compile_node","children":[],"call":[" write ","@second compile ","@first compile "," compile_unary "," unary? "," compile_conditional ","CONDITIONALS  include? ","@operator to_sym "," compile_existence ","@operator == "," compile_assignment ","ASSIGNMENT  include? "," compile_chain ","@first unwrap chainable? ","@first unwrap ","@first unwrap is_a? "," chainable? "]}," CoffeeScript AssignNode compile_splice":{"type":"method","name":"compile_splice","children":[],"call":[" write ","@value compile ","range to compile ","range to ","range from compile ","range from ","range exclusive? ","@variable properties last range ","@variable properties last ","@variable properties ","@variable compile ","o merge ","@variable properties last range  to compile ","@variable properties last range  to ","range range from compile  compile ","@variable properties last range  from compile ","range range from compile  ","@variable properties last range  from ","@variable properties last range  exclusive? ","@variable properties last @variable properties last range  ","@@variable compile iable properties last range ","@@variable compile iable properties last ","@@variable compile iable properties ","@@variable compile iable compile "]}," CoffeeScript AssignNode compile_node":{"type":"method","name":"compile_node","children":[],"call":[" write ","o [] ","@value compile ","o [] find ","@variable properties? ","@context == ","o []= ","last match ","@value is_a? ","o merge ","name [] ","@variable last to_s sub ","@variable last to_s ","@variable last ","@variable compile "," compile_splice ","@variable properties last is_a? ","@variable properties last ","@variable properties "," idt ","o delete ","@variable splice? "," compile_pattern_match ","@variable object? ","@variable array? "," value? "," statement? ","top ! ","@value proto= ","@value name= ","o merge  [] ","@value co merge mpile ","o merge  [] find ","@variable pro merge perties? ","@co merge ntext == ","o merge  []= ","@variable last to_s sub  match ","o merge  merge ","@variable compile  [] ","@variable last to merge _s sub ","@variable @variable last to_s sub  to_s sub ","@variable last to merge _s ","@variable @variable last to_s sub  to_s ","@variable @variable last to_s sub  ","@variable co merge mpile "," co merge mpile_splice ","@variable pro merge perties last is_a? ","@variable properties @variable last to_s sub  is_a? ","@variable pro merge perties last ","@variable properties @variable last to_s sub  ","@variable pro merge perties ","o merge  delete "," co merge mpile_pattern_match ","@variable o merge bject? ","to merge p ! ","o delete  ! ","@value pro merge to merge = ","@value name [] = ","@value @variable compile = "]}," CoffeeScript SliceNode compile_node":{"type":"method","name":"compile_node","children":[],"call":[" write ","@range exclusive? ","@range to compile ","@range to ","@range from compile ","@range from ","@range @range to compile  compile ","@range @range to compile  ","@range @range from compile  compile ","@range @range from compile  "]}," CoffeeScript RangeNode compile_node":{"type":"method","name":"compile_node","children":[],"call":[" write "," greater_operator "," less_operator ","step compile "," raise ","o delete "," compile_array ","o [] ","step compile  compile "]}," CoffeeScript RangeNode compile_variables":{"type":"method","name":"compile_variables","children":[],"call":[" write ","@to compile ","@from compile ","o [] free_variable ","o [] "," idt "," o []  "]}," CoffeeScript IndexNode compile_node":{"type":"method","name":"compile_node","children":[],"call":[" write ","@index compile "]}," CoffeeScript AccessorNode compile_node":{"type":"method","name":"compile_node","children":[],"call":[" write "]}," CoffeeScript ValueNode compile_node":{"type":"method","name":"compile_node","children":[],"call":[" write ","parts join ","parts [] join ","parts [] ","parts length > ","parts length ","parts last ","val to_s ","val compile ","val respond_to? ","(ivar :@literal) flatten map ","(ivar :@literal) flatten ","@properties [] ","o delete ","(ivar :@base) flatten map ","(ivar :@base) flatten ","parts join gsub ","parts << ","prop compile ","parts [] << ","parts []= ","temp to_s + ","temp to_s ","o [] free_variable ","o [] ","prop == ","props first ","@base is_a? ","prop soak ","prop is_a? ","props each ","baseline dup ","@base compile ","prop compile s join ","prop compile s [] join ","prop compile s [] ","prop compile s length > ","prop compile s length ","prop compile s last ","prop compile s join gsub ","prop compile s << ","prop compile s [] << ","prop compile s []= ","o [] free_variable  to_s + ","o [] free_variable  to_s ","@properties []  first ","@properties []  each ","temp to_s +  dup ","@base compile  dup "]}," CoffeeScript ExtendsNode compile_node":{"type":"method","name":"compile_node","children":[],"call":["(begin\n  (send\n    (lvar :o) :[]\n    (sym :indent))) + + ","(begin\n  (send\n    (lvar :o) :[]\n    (sym :indent))) + ","o [] ","@super_object compile ","@sub_object compile ","(begin\n  (send nil :idt)) + + + + ","(begin\n  (send nil :idt)) + + + "," idt ","(begin\n  (send nil :idt)) + + ","(begin\n  (send nil :idt)) + ","o [] free_variable "]}," CoffeeScript CallNode compile_splat":{"type":"method","name":"compile_splat","children":[],"call":["args join "," prefix ","arg equal? ","@arguments first ","arg is_a? ","arg compile ","@arguments map ","@variable source ","@variable compile "]}," CoffeeScript CallNode compile_node":{"type":"method","name":"compile_node","children":[],"call":[" write ","@variable compile "," prefix "," compile_super "," super? ","(send\n  (ivar :@arguments) :map) join ","a compile ","@arguments map "," compile_splat "," splat? ","@variable == ","a is_a? ","@arguments any? "]}," CoffeeScript CallNode <<":{"type":"method","name":"<<","children":[],"call":["@arguments << "]}," CoffeeScript CallNode splat?":{"type":"method","name":"splat?","children":[],"call":["a is_a? ","@arguments any? "]}," CoffeeScript CallNode prefix":{"type":"method","name":"prefix","children":[],"call":[]}," CoffeeScript CommentNode compile_node":{"type":"method","name":"compile_node","children":[],"call":[" write ","@lines join ","o [] "," idt "]}," CoffeeScript ReturnNode compile_node":{"type":"method","name":"compile_node","children":[],"call":[" write ","o [] ","@expression statement? ","@expression compile ","o merge "," idt "]}," CoffeeScript LiteralNode compile_node":{"type":"method","name":"compile_node","children":[],"call":[" write ","indent + + ","indent + ","@value to_s "," statement? ","o [] ","CONVERSIONS  [] "," idt ","@value to_s to_sym == ","@value to_s to_sym ","o []  + + "," idt  + + ","o []  + "," idt  + "]}," CoffeeScript Expressions compile_with_declarations":{"type":"method","name":"compile_with_declarations","children":[],"call":["decls + ","o [] declared_variables join ","o [] declared_variables ","o [] ","o [] declarations? "," compile_node "," idt "," write ","o [] compiled_declarations ","o [] compiled_assignments ","o [] assignments? ","o [] check ","n arguments? ","n is_a? "," contains? "]}," CoffeeScript Expressions compile_root":{"type":"method","name":"compile_root","children":[],"call":["o [] ","code gsub! "," compile_with_declarations "," compile_node ","o merge! ","Scope  new "," write "," compile_with_declarations  gsub! "," compile_node  gsub! "]}," CoffeeScript Expressions compile_node":{"type":"method","name":"compile_node","children":[],"call":[" write ","compiled join ","node compile ","o merge ","o [] ","node statement? ","node statement_only? ! ","node statement_only? "," last? ","o delete ","options dup ","@expressions map "," idt ","o [] free_variable ","o [] [] [] ","o [] [] ","(send\n  (ivar :@expressions) :map) join "," compile_expression ","coptions dup mpiled joptions dup in ","noptions dup de coptions dup mpile ","options dup  merge ","options dup  [] ","noptions dup de statement? ","noptions dup de statement_options dup nly? ! ","noptions dup de statement_options dup nly? ","options dup  delete ","options dup ptioptions dup ns dup ","@expressioptions dup ns map ","options dup  [] free_variable ","options dup  [] [] [] ","options dup  [] [] ","(send\n  (ivar :@expressioptions dup ns) :map) joptions dup in "," coptions dup mpile_expressioptions dup n "]}," CoffeeScript Expressions unshift":{"type":"method","name":"unshift","children":[],"call":["@expressions unshift "]}," CoffeeScript Node statement_only?":{"type":"method","name":"statement_only?","children":[],"call":[]}," CoffeeScript Node compile_closure":{"type":"method","name":"compile_closure","children":[],"call":[" compile_node ","o merge ","o [] ","o []= "," idt ","node is_a? "," contains? ","o [] ! ","ClosureNode  wrap compile ","ClosureNode  wrap "]}," CoffeeScript Node statement_only":{"type":"method","name":"statement_only","children":[],"call":[]}," CoffeeScript Lexer close_indentation":{"type":"method","name":"close_indentation","children":[],"call":[" outdent_token "]}," CoffeeScript Lexer last_tag":{"type":"method","name":"last_tag","children":[],"call":["@tokens last [] ","@tokens last "]}," CoffeeScript Lexer suppress_newlines":{"type":"method","name":"suppress_newlines","children":[],"call":["@tokens pop "," last_value == "," last_value "]}," CoffeeScript Lexer newline_token":{"type":"method","name":"newline_token","children":[],"call":[" token "," last_value == "," last_value "]}," CoffeeScript Lexer outdent_token":{"type":"method","name":"outdent_token","children":[],"call":[" token ","@indents pop ","@indents empty? ! ","@indents empty? ","move_out > "]}," CoffeeScript Lexer indent_token":{"type":"method","name":"indent_token","children":[],"call":[" outdent_token ","@indent - ","@indents << ","size - "," token ","size > "," newline_token ","size == ","indent scan last last length ","indent scan last last ","indent scan last ","indent scan "," suppress_newlines "," last_value != "," last_value "," last_value to_s match "," last_value to_s ","indent size ","indent scan size ","@chunk [] ","next_character == "," last_value match ! "," last_value match ","@tokens [] [] != ","@tokens [] [] ","@tokens [] ","@@chunk []  - ","@@chunk [] s << ","indent scan last last length  - ","indent scan last last length  > ","indent scan last last length  == ","@chunk []  scan last last length ","@chunk []  scan last last ","@chunk []  scan last ","@chunk []  scan ","indent indent scan last last length  ","@chunk []  size ","indent scan indent scan last last length  ","@chunk []  scan size ","@chunk []  == "]}," CoffeeScript IfNode add_comment":{"type":"method","name":"add_comment","children":[],"call":[]}," CoffeeScript RangeNode compile_array":{"type":"method","name":"compile_array","children":[],"call":["ParentheticalNode  new compile ","ParentheticalNode  new ","CallNode  new ","CodeNode  new ","Expressions  wrap ","ForNode  new ","Value  new ","ValueNode  new ","LiteralNode  wrap "]}," CoffeeScript LiteralNode wrap":{"type":"method","name":"wrap","children":[],"call":[]}," CoffeeScript Node idt":{"type":"method","name":"idt","children":[],"call":["@indent + ","TAB  * "]}," CoffeeScript Value compile":{"type":"method","name":"compile","children":[],"call":[" to_s "]}," CoffeeScript Expressions compile_expression":{"type":"method","name":"compile_expression","children":[],"call":["o [] "," idt ","node compile ","o [] free_variable "," constructor? ","o merge ","node statement? ","node statement_only? ! ","node statement_only? "," last? ","o delete ","o [] function name ","o [] function ","o [] function constructor? "]}," CoffeeScript Expressions constructor?":{"type":"method","name":"constructor?","children":[],"call":["o [] [] [] ","o [] [] ","o [] "]}," CoffeeScript AssignNode compile_pattern_match":{"type":"method","name":"compile_pattern_match","children":[],"call":[" write ","assigns join ","assigns << ","AssignNode  new compile ","AssignNode  new ","ValueNode  new ","access_class new ","Value  new ","i to_s ","@variable array? ","obj variable base ","obj variable ","obj value ","@variable object? ","@variable base objects each_with_index ","@variable base objects ","@variable base ","o merge! ","@value compile "," idt ","o [] free_variable ","o [] ","LiteralNode  wrap ","obj compile_value ","@variable base objects index ","obj is_a? ","obj ValueNode  new ue ","obj LiteralNode  wrap ue ","@ValueNode  new ue compile ","@LiteralNode  wrap ue compile ","obj compile_ValueNode  new ue ","obj compile_LiteralNode  wrap ue "]}," CoffeeScript AssignNode statement?":{"type":"method","name":"statement?","children":[],"call":["@variable object? ","@variable array? "," value? "]}," CoffeeScript ValueNode splice?":{"type":"method","name":"splice?","children":[],"call":["@properties last is_a? ","@properties last "," properties? "]}," CoffeeScript ValueNode object?":{"type":"method","name":"object?","children":[],"call":[" properties? ! "," properties? ","@base is_a? "]}," CoffeeScript ValueNode array?":{"type":"method","name":"array?","children":[],"call":[" properties? ! "," properties? ","@base is_a? "]}," CoffeeScript Lexer heredoc_token":{"type":"method","name":"heredoc_token","children":[],"call":["match [] length ","match [] ","match [] count "," token ","doc gsub! ","@chunk match ","doc scan min ","doc scan ","@chunk match  [] length ","@chunk match  [] ","@chunk match  [] count ","@chunk @chunk match  "]}," CoffeeScript Value match":{"type":"method","name":"match","children":[],"call":["@value match "]}," CoffeeScript Scope compiled_assignments":{"type":"method","name":"compiled_assignments","children":[],"call":["(send\n  (send nil :assigned_variables) :map) join "," assigned_variables map "," assigned_variables "]}," CoffeeScript Scope compiled_declarations":{"type":"method","name":"compiled_declarations","children":[],"call":[" declared_variables join "," declared_variables "]}," CoffeeScript Scope assigned_variables":{"type":"method","name":"assigned_variables","children":[],"call":["pair [] to_s ","pair [] ","(send\n  (ivar :@variables) :select) sort_by ","v is_a? ","@variables select "]}," CoffeeScript Scope assignments?":{"type":"method","name":"assignments?","children":[],"call":["body == "," assigned_variables empty? ! "," assigned_variables empty? "," assigned_variables "]}," CoffeeScript Scope assign":{"type":"method","name":"assign","children":[],"call":["@variables []= ","Value  new ","name to_sym ","@parent assign "]}," CoffeeScript Rewriter remove_leading_newlines":{"type":"method","name":"remove_leading_newlines","children":[],"call":["@tokens shift ","@tokens [] [] == ","@tokens [] [] ","@tokens [] "]}," CoffeeScript IfNode compile_condition":{"type":"method","name":"compile_condition","children":[],"call":["(send\n  (send\n    (array\n      (ivar :@condition)) :flatten) :map) join ","c compile ","(ivar :@condition) flatten map ","(ivar :@condition) flatten "]}," CoffeeScript ForNode top_sensitive?":{"type":"method","name":"top_sensitive?","children":[],"call":[]}," CoffeeScript WhileNode top_sensitive?":{"type":"method","name":"top_sensitive?","children":[],"call":[]}," CoffeeScript PushNode wrap":{"type":"method","name":"wrap","children":[],"call":[]}," CoffeeScript SplatNode compile_value":{"type":"method","name":"compile_value","children":[],"call":[]}," CoffeeScript SplatNode compile_arg":{"type":"method","name":"compile_arg","children":[],"call":["@name compile "]}," CoffeeScript SplatNode compile_param":{"type":"method","name":"compile_param","children":[],"call":["o [] find ","o [] "]}," CoffeeScript SplatNode compile_node":{"type":"method","name":"compile_node","children":[],"call":[" write "," compile_arg "," compile_param ","@name compile "]}," CoffeeScript SplatNode initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CoffeeScript CodeNode statement?":{"type":"method","name":"statement?","children":[],"call":[]}," CoffeeScript AssignNode value?":{"type":"method","name":"value?","children":[],"call":["@variable is_a? "]}," CoffeeScript Node top_sensitive?":{"type":"method","name":"top_sensitive?","children":[],"call":[]}," CoffeeScript Value contains?":{"type":"method","name":"contains?","children":[],"call":[]}," CoffeeScript Value statement_only?":{"type":"method","name":"statement_only?","children":[],"call":[]}," CoffeeScript Value children":{"type":"method","name":"children","children":[],"call":[]}," CoffeeScript ExistenceNode compile_test":{"type":"method","name":"compile_test","children":[],"call":[]}," CoffeeScript CodeNode constructor?":{"type":"method","name":"constructor?","children":[],"call":["@name [] [] ","@name [] "]}," CoffeeScript OpNode compile_existence":{"type":"method","name":"compile_existence","children":[],"call":["ExistenceNode  compile_test ","@second compile ","@first compile "]}," CoffeeScript OpNode compile_assignment":{"type":"method","name":"compile_assignment","children":[],"call":["ExistenceNode  compile_test ","@operator == ","@operator [] ","o [] find ","o [] ","@first unwrap is_a? ","@first unwrap ","@second compile ","@first compile "]}," CoffeeScript OpNode compile_chain":{"type":"method","name":"compile_chain","children":[],"call":["@second compile ","shared compile ","@first compile ","shared compile_reference ","@first second= ","shared is_a? ","@first unwrap second ","@first unwrap ","@first unwrap second  compile ","@first unwrap second  compile_reference ","@first unwrap second  is_a? "]}," CoffeeScript OpNode chainable?":{"type":"method","name":"chainable?","children":[],"call":["CHAINABLE  include? "," operator to_sym "," operator "]}," CoffeeScript ThisNode compile_node":{"type":"method","name":"compile_node","children":[],"call":[" write ","o [] "]}," CoffeeScript ValueNode unwrap":{"type":"method","name":"unwrap","children":[],"call":["@properties empty? "]}," CoffeeScript CallNode compile_reference":{"type":"method","name":"compile_reference","children":[],"call":["ParentheticalNode  new ","AssignNode  new ","o [] free_variable ","o [] "]}," CoffeeScript LiteralNode arguments?":{"type":"method","name":"arguments?","children":[],"call":["@value to_s == ","@value to_s "]}," CoffeeScript Expressions empty?":{"type":"method","name":"empty?","children":[],"call":["@expressions empty? "]}," CoffeeScript Node children":{"type":"method","name":"children","children":[],"call":[]}," CoffeeScript Node contains?":{"type":"method","name":"contains?","children":[],"call":["node contains? ","node is_a? "," children each "," children "]}," CoffeeScript Node top_sensitive":{"type":"method","name":"top_sensitive","children":[],"call":[]}," CoffeeScript Rewriter add_implicit_parentheses":{"type":"method","name":"add_implicit_parentheses","children":[],"call":["stack [] ","@tokens insert ","Value  new ","token [] line ","token [] ","IMPLICIT_CALL  include? ","IMPLICIT_FUNC  include? ","prev [] ","stack [] + ","stack []= ","stack last times ","stack last ","i + ","token [] == ","post nil? ","IMPLICIT_END  include? ","stack last > ","stack pop ","stack push "," scan_tokens ","stack stack pop  times ","stack stack pop  ","stack stack pop  > "]}," CoffeeScript Rewriter close_open_calls_and_indexes":{"type":"method","name":"close_open_calls_and_indexes","children":[],"call":["brackets [] ","token []= ","brackets pop ","brackets last == ","brackets last ","parens [] ","parens pop ","parens last == ","parens last ","brackets push ","parens push ","token [] "," scan_tokens "]}," CoffeeScript ClosureNode wrap":{"type":"method","name":"wrap","children":[],"call":[]}," CoffeeScript ThisNode initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CoffeeScript ValueNode arguments?":{"type":"method","name":"arguments?","children":[],"call":["@base to_s == ","@base to_s "]}," CoffeeScript coffee_bin=":{"type":"method","name":"coffee_bin=","children":[],"call":[]}," CoffeeScript coffee_bin":{"type":"method","name":"coffee_bin","children":[],"call":[" locate_coffee_bin "]}," CoffeeScript locate_coffee_bin":{"type":"method","name":"locate_coffee_bin","children":[],"call":[" raise ","out chomp ","$? success? "]}," CoffeeScript no_wrap_flag":{"type":"method","name":"no_wrap_flag","children":[],"call":["(begin\n  (send nil :coffee_bin)) lines grep any? ","(begin\n  (send nil :coffee_bin)) lines grep ","(begin\n  (send nil :coffee_bin)) lines "," coffee_bin "]}," CoffeeScript execute_coffee":{"type":"method","name":"execute_coffee","children":[],"call":["f read ","f close_write ","f << ","IO  popen ","script read ","script respond_to? "," coffee_bin ","script read  read ","script read  respond_to? "]}," CoffeeScript evaluate":{"type":"method","name":"evaluate","children":[],"call":[" execute_coffee ","args join "]}," CoffeeScript version":{"type":"method","name":"version","children":[],"call":["(begin\n  (send nil :coffee_bin)) [] "," coffee_bin ","Source  version "]}," CoffeeScript engine=":{"type":"method","name":"engine=","children":[],"call":[]}," CoffeeScript engine":{"type":"method","name":"engine","children":[],"call":[]}," CoffeeScript Engines V8 build_coffee_module":{"type":"method","name":"build_coffee_module","children":[],"call":["context [] ","context eval ","Source  contents "," V8 Context  new "," raise ","e message "," V8 Context  new  [] "," V8 Context  new  eval "]}," CoffeeScript Engines V8 coffee_module":{"type":"method","name":"coffee_module","children":[],"call":[" build_coffee_module "]}," CoffeeScript Engines V8 compile":{"type":"method","name":"compile","children":[],"call":[" coffee_module [] call ","options [] ","Source  bare_option "," coffee_module [] "," coffee_module "," raise ","e message "]}," CoffeeScript Engines V8 supported?":{"type":"method","name":"supported?","children":[],"call":[" require "]}," CoffeeScript Engines Node compile":{"type":"method","name":"compile","children":[],"call":["f close! ","out chomp ","$? success? ","f path ","f close ","f puts ","script to_json ","Source  contents ","Tempfile  open ","Source  bare_option ","options [] ","ExternalEngine  compile "," binary ","Tempfile  open  close! ","Tempfile  open  path ","Tempfile  open  close ","Tempfile  open  puts ","TempTempfile  open ile  open "]}," CoffeeScript Engines Node supported?":{"type":"method","name":"supported?","children":[],"call":["$? success? "," binary "]}," CoffeeScript Engines JavaScriptCore compile":{"type":"method","name":"compile","children":[],"call":["f close! ","out chomp ","$? success? ","f path ","f close ","f puts ","script to_json ","Source  path to_json ","Source  path ","Tempfile  open ","Source  bare_option ","options [] ","ExternalEngine  compile ","Tempfile  open  close! ","Tempfile  open  path ","Tempfile  open  close ","Tempfile  open  puts ","TempTempfile  open ile  open "]}," CoffeeScript Engines JavaScriptCore supported?":{"type":"method","name":"supported?","children":[],"call":["File  exist? "]}," CoffeeScript Source bare_option":{"type":"method","name":"bare_option","children":[],"call":[]}," CoffeeScript Source version":{"type":"method","name":"version","children":[],"call":[]}," CoffeeScript Source contents":{"type":"method","name":"contents","children":[],"call":[]}," CoffeeScript Source path=":{"type":"method","name":"path=","children":[],"call":[]}," CoffeeScript Source path":{"type":"method","name":"path","children":[],"call":[]}," CoffeeScript ExternalEngine compile_js":{"type":"method","name":"compile_js","children":[],"call":["script to_json ","Source  bare_option ","options [] "]}," CoffeeScript ExternalEngine execute":{"type":"method","name":"execute","children":[],"call":[" raise ","result [] ","status == ","out [] ","$? success? ","(begin\n  (lvar :command)) chomp ","(begin\n  (lvar :command)) chomp  [] "]}," CoffeeScript ExternalEngine compile":{"type":"method","name":"compile","children":[],"call":["f close! "," execute ","f path ","f close ","f puts "," compile_js ","Tempfile  open ","Tempfile  open  close! ","Tempfile  open  path ","Tempfile  open  close ","Tempfile  open  puts ","TempTempfile  open ile  open "]}," CoffeeScript Engines Node binary=":{"type":"method","name":"binary=","children":[],"call":["value to_s ","value nil? "]}," CoffeeScript Engines Node binary":{"type":"method","name":"binary","children":[],"call":["(str \"which nodejs node\") split first ","(str \"which nodejs node\") split ","(str \"sh -c \\\"which nodejs node\\\"\") split first ","(str \"sh -c \\\"which nodejs node\\\"\") split "]}," CoffeeScript Source context":{"type":"method","name":"context","children":[],"call":[]}}