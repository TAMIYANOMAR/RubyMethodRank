{" Uglifier load_file":{"type":"method","name":"load_file","children":[],"call":["cxt [] ","cxt load ","File  join ","File  dirname ","cxt []= ","@exports [] ","@exports []= ","File  basename + ","File  basename "," load_file "," lambda "]}," Uglifier initialize_v8":{"type":"method","name":"initialize_v8","children":[],"call":[" load_file ","cxt []= ","exports [] "," lambda "," puts "]}," Uglifier squeeze":{"type":"method","name":"squeeze","children":[],"call":["cxt [] call ","@options [] ","cxt [] ","@node [] call ","@node [] ","@options [] ! "]}," Uglifier mangle":{"type":"method","name":"mangle","children":[],"call":["cxt [] call ","@options [] ","cxt [] ","@node [] call ","@node [] "]}," Uglifier ast":{"type":"method","name":"ast","children":[],"call":[" squeeze "," mangle ","cxt [] call ","cxt [] "," squeeze_unsafe ","@node [] call ","@node [] "]}," Uglifier generate_code":{"type":"method","name":"generate_code","children":[],"call":["cxt [] call ","@options [] ","cxt [] ","@node [] call ","@node [] "]}," Uglifier compile":{"type":"method","name":"compile","children":[],"call":[" raise ","Error  new ","e message "," generate_code "," ast "," initialize_v8 ","V8 Context  new "," load_file ","cxt []= ","(send\n  (ivar :@options) :[]\n  (sym :copyright)) << "," copyright ","@options [] "," stringify ","@context exec ","js join ","js << "," gen_code_options to_json "," gen_code_options "," squeeze_options to_json "," squeeze_options "," mangle_options to_json "," mangle_options ","source to_json ","source to_s ","source read ","source respond_to? ","MultiJson  encode "," encode ","@options [] to_i ","@options [] ! ","MultiJson  dump "," json_encode "," really_compile "," run_uglifyjs ","compiled + ","Base64  strict_encode64 ","  stringify ingify ","source to_s  to_json ","source read  to_json ","source to_s  to_s ","source read  to_s ","source to_s  read ","source read  read ","source to_s  respond_to? ","source read  respond_to? ","Base64   stringify ict_encode64 "]}," Uglifier initialize":{"type":"method","name":"initialize","children":[],"call":["DEFAULTS  merge "," puts "," lambda ","process [] call ","$stderr puts ","process [] ","cxt require ","cxt require [] ","Node  new ","ExecJS  compile ","File  read ","File  read + ","File  open read + ","File  open read ","File  open "," raise ","ArgumentError  new ","(send\n  (send\n    (send\n      (lvar :options) :keys) :-\n    (send\n      (const nil :DEFAULTS) :keys)) :-\n  (array\n    (sym :comments)\n    (sym :squeeze))) [] each ","(send\n  (send\n    (send\n      (lvar :options) :keys) :-\n    (send\n      (const nil :DEFAULTS) :keys)) :-\n  (array\n    (sym :comments)\n    (sym :squeeze))) [] ","options keys - - ","options keys - ","DEFAULTS  keys ","options keys ","(send\n  (send\n    (send\n      (lvar :options) :keys) :-\n    (send\n      (const nil :DEFAULTS) :keys)) :-\n  (array\n    (sym :comments)\n    (sym :squeeze)\n    (sym :copyright))) [] each ","(send\n  (send\n    (send\n      (lvar :options) :keys) :-\n    (send\n      (const nil :DEFAULTS) :keys)) :-\n  (array\n    (sym :comments)\n    (sym :squeeze)\n    (sym :copyright))) [] ","File  open read + + "," uglifyjs_source ","(send\n  (send\n    (send\n      (lvar :options) :keys) :-\n    (send\n      (const nil :DEFAULTS) :keys)) :-\n  (const nil :LEGACY_OPTIONS)) [] each ","(send\n  (send\n    (send\n      (lvar :options) :keys) :-\n    (send\n      (const nil :DEFAULTS) :keys)) :-\n  (const nil :LEGACY_OPTIONS)) [] "," source_with ","@options [] "," harmony? ","(send\n  (send\n    (send\n      (lvar :options) :keys) :-\n    (send\n      (const nil :DEFAULTS) :keys)) :-\n  (const nil :EXTRA_OPTIONS)) [] each ","(send\n  (send\n    (send\n      (lvar :options) :keys) :-\n    (send\n      (const nil :DEFAULTS) :keys)) :-\n  (const nil :EXTRA_OPTIONS)) [] ","cxt require  [] call ","cxt require  [] "," uglifyjs_ source_with  ","  source_with _with ","DEFAULTS  merge  [] "]}," Uglifier squeeze_unsafe":{"type":"method","name":"squeeze_unsafe","children":[],"call":["cxt [] call ","cxt [] ","@options [] ","@node [] call ","@node [] "]}," Uglifier copyright":{"type":"method","name":"copyright","children":[],"call":["comments join ","tokens call ","comment [] ","comments << ","comment [] == ","prev == ","prev ! ","comment [] match ","@tokenizer call ","copyright + ","/* + + ","/* + ","// + + ","// + ","tokens call comments_before inject ","tokens call comments_before ","tokens call s join ","@tokenizer call  call ","tokens call  [] ","tokens call s << ","tokens call  [] == ","comment []  == ","comment []  ! ","tokens call  [] match ","tokens call tokens call s_before inject ","@tokenizer call  call comments_before inject ","tokens call tokens call s_before ","@tokenizer call  call comments_before "]}," Uglifier stringify":{"type":"method","name":"stringify","children":[],"call":["source to_s ","source read ","source respond_to? "]}," Uglifier Node require":{"type":"method","name":"require","children":[],"call":["@exports [] "," []= ","@exports []= "," [] "," load ","File  join ","File  basename + ","File  basename ","File  dirname "," require "," lambda "]}," Uglifier Node initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Uglifier Cli run!":{"type":"method","name":"run!","children":[],"call":[]}," Uglifier gen_code_options":{"type":"method","name":"gen_code_options","children":[],"call":["@options [] ","(pair\n  (sym :beautify)\n  (true)) merge ","options merge merge ","options merge "]}," Uglifier squeeze_options":{"type":"method","name":"squeeze_options","children":[],"call":["@options [] ! ","@options [] "]}," Uglifier mangle_options":{"type":"method","name":"mangle_options","children":[],"call":["@options [] ","MultiJson  encode ","@options [] == "," defines "," conditional_option ","DEFAULTS  [] ","DEFAULTS  [] merge ","@options fetch "," keep_fnames? "," mangle_properties_options "]}," Uglifier encode":{"type":"method","name":"encode","children":[],"call":["OkJson  strenc "]}," Uglifier json_encode":{"type":"method","name":"json_encode","children":[],"call":["MultiJson  encode ","MultiJson  dump ","JSON  dump "]}," Uglifier defines":{"type":"method","name":"defines","children":[],"call":["Hash  [] ","v to_s ","v == ","(true) include? ","v is_a? ","(or\n  (send\n    (ivar :@options) :[]\n    (sym :define))\n  (hash)) map ","@options [] "]}," Uglifier conditional_option":{"type":"method","name":"conditional_option","children":[],"call":["defaults merge ","value == ","value nil? ","defaults merge merge "]}," Uglifier encode_regexp":{"type":"method","name":"encode_regexp","children":[],"call":["regexp source ","regexp casefold? "]}," Uglifier parse_options":{"type":"method","name":"parse_options","children":[],"call":["@options [] ","@options [] [] ","@options [] respond_to? "," conditional_option merge "," parse_source_map_options "," conditional_option ","DEFAULTS  [] "]}," Uglifier source_map_options":{"type":"method","name":"source_map_options","children":[],"call":["@options [] ","options [] ","input_map [] ","options fetch "," conditional_option ","@ conditional_option  [] "," conditional_option  [] "," conditional_option  fetch "]}," Uglifier output_options":{"type":"method","name":"output_options","children":[],"call":["DEFAULTS  [] merge merge "," comment_options ","DEFAULTS  [] merge ","@options [] ","DEFAULTS  [] ","key == ","DEFAULTS  [] merge merge reject! ","@options [] ! ","DEFAULTS  [] merge merge reject ","(or\n  (send\n    (ivar :@options) :[]\n    (sym :output))\n  (hash)) has_key? "," screw_ie8? "," quote_style "," migrate_braces merge "," migrate_braces "]}," Uglifier comment_options":{"type":"method","name":"comment_options","children":[],"call":[" encode_regexp ","DEFAULTS  [] [] ","DEFAULTS  [] ","@options [] ","@options has_key? ","@options [] [] ","@options [] has_key? ","@options [] == "," comment_setting "]}," Uglifier compressor_options":{"type":"method","name":"compressor_options","children":[],"call":[" conditional_option ","@options [] ","DEFAULTS  [] "," screw_ie8? "," keep_fnames? ","(pair\n  (sym :keep_fnames)\n  (send nil :keep_fnames?\n    (sym :compress))) merge "," negate_iife_block "]}," Uglifier really_compile":{"type":"method","name":"really_compile","children":[],"call":["@context exec ","js % "," json_encode ","generate_map ! ! ","generate_map ! "," source_map_options "," parse_options "," mangle_options "," compressor_options "," output_options ","source to_s ","source read ","source respond_to? "," enclose_options "," source to_s _map_options "," source read _map_options ","source to_s  to_s ","source read  to_s ","source to_s  read ","source read  read ","source to_s  respond_to? ","source read  respond_to? "]}," Uglifier compile_with_map":{"type":"method","name":"compile_with_map","children":[],"call":[" really_compile "," run_uglifyjs "]}," Uglifier enclose_options":{"type":"method","name":"enclose_options","children":[],"call":["pair first + + ","pair last ","pair first + ","pair first ","@options [] map ","@options [] "]}," Uglifier screw_ie8?":{"type":"method","name":"screw_ie8?","children":[],"call":["DEFAULTS  [] ","@options [] ","(or\n  (send\n    (ivar :@options) :[]\n    (sym :output))\n  (hash)) has_key? ","@options fetch ","@options [] [] ! ","@options [] [] "]}," Uglifier comment_setting":{"type":"method","name":"comment_setting","children":[],"call":["DEFAULTS  [] [] ","DEFAULTS  [] ","@options [] == ","@options [] ","@options has_key? ","@options [] [] ","@options [] has_key? "]}," Uglifier read_source":{"type":"method","name":"read_source","children":[],"call":["source to_s ","source read ","source respond_to? "]}," Uglifier run_uglifyjs":{"type":"method","name":"run_uglifyjs","children":[],"call":["@context exec ","Uglifier JS  % "," json_encode "," enclose_options "," source_map_options "," parse_options "," mangle_options "," compressor_options "," output_options "," read_source ","@context call "," mangle_properties_options "," input_source_map "," parse_result "," ie8? "," context call "," context ","  read_source _map_options "," read_ read_source  "," input_ read_source _map "]}," Uglifier uglifyjs_source":{"type":"method","name":"uglifyjs_source","children":[],"call":["(send\n  (array\n    (const nil :ES5FallbackPath)\n    (const nil :SplitFallbackPath)\n    (const nil :SourcePath)) :map) join ","f read ","File  open ","(const nil :ES5FallbackPath) map ","(send\n  (array\n    (const nil :ES5FallbackPath)\n    (const nil :SplitFallbackPath)\n    (const nil :SourcePath)\n    (const nil :UglifyJSWrapperPath)) :map) join ","(send\n  (array\n    (const nil :ES5FallbackPath)\n    (const nil :SplitFallbackPath)\n    (const nil :SourceMapPath)\n    (const nil :SourcePath)\n    (const nil :UglifyJSWrapperPath)) :map) join "]}," Uglifier input_source_map":{"type":"method","name":"input_source_map","children":[],"call":[" sanitize_map_root ","Base64  strict_decode64 ","url split [] ","url split ","url start_with? "," extract_source_mapping_url ","@options fetch fetch ","@options fetch ","source_map_options fetch ","@options [] ","@options [] is_a? "," extract_source_mapping_url  split [] "," extract_source_mapping_url  split "," extract_source_mapping_url  start_with? "," extract_source_mapping_ extract_source_mapping_url  ","@options []  fetch "]}," Uglifier extract_source_mapping_url":{"type":"method","name":"extract_source_mapping_url","children":[],"call":["match [] ","regex match ","regex match  [] ","regex regex match  "]}," Uglifier sanitize_map_root":{"type":"method","name":"sanitize_map_root","children":[],"call":["map merge ","map [] == ","map [] "," sanitize_map_root ","JSON  load ","map is_a? ","map nil? ","JSON  parse "]}," Uglifier mangle_properties_options":{"type":"method","name":"mangle_properties_options","children":[],"call":["options merge "," encode_regexp ","options [] "," conditional_option ","@options fetch ","DEFAULTS  [] ","mangle_options [] ","@options [] ","@options has_key? "," conditional_option  merge "," conditional_option  [] ","@ conditional_option  fetch ","mangle_ conditional_option  [] ","@options fetch  [] ","@ conditional_option  [] ","@ conditional_option  has_key? "]}," Uglifier keep_fnames?":{"type":"method","name":"keep_fnames?","children":[],"call":["DEFAULTS  [] [] ","DEFAULTS  [] ","DEFAULTS  [] respond_to? ","@options [] [] ","@options [] ","@options [] respond_to? "]}," Uglifier negate_iife_block":{"type":"method","name":"negate_iife_block","children":[],"call":[" output_options [] "," output_options "]}," Uglifier source_with":{"type":"method","name":"source_with","children":[],"call":["(send\n  (array\n    (const nil :ES5FallbackPath)\n    (const nil :SplitFallbackPath)\n    (const nil :SourceMapPath)\n    (lvar :path)\n    (const nil :UglifyJSWrapperPath)) :map) join ","File  open ","(const nil :ES5FallbackPath) map "]}," Uglifier parse_source_map_options":{"type":"method","name":"parse_source_map_options","children":[],"call":["@options [] [] ","@options [] ","@options [] respond_to? "]}," Uglifier ie8?":{"type":"method","name":"ie8?","children":[],"call":["@options fetch ","DEFAULTS  [] "]}," Uglifier quote_style":{"type":"method","name":"quote_style","children":[],"call":[" conditional_option [] "," conditional_option ","DEFAULTS  [] ","@options [] "," conditional_ conditional_option []  [] "," conditional_ conditional_option []  ","@ conditional_option [] s [] "]}," Uglifier parse_result":{"type":"method","name":"parse_result","children":[],"call":["result [] + "," source_map_comments ","result [] "," raise "," error_message ","result has_key? "]}," Uglifier error_message":{"type":"method","name":"error_message","children":[],"call":["result [] [] + "," harmony? ! "," harmony? ","result [] [] start_with? ","result [] [] ","result [] ","err [] "," context_lines_message ","options [] "," harmony_error_message ","err [] to_s ","result []  [] "," harmony_result [] or_message ","result []  [] to_s "]}," Uglifier harmony?":{"type":"method","name":"harmony?","children":[],"call":["@options [] "]}," Uglifier source_map_comments":{"type":"method","name":"source_map_comments","children":[],"call":["\n//# sourceURL= + ","@options [] [] ","@options [] ","\n//# sourceMappingURL= + ","@options [] respond_to? "]}," Uglifier migrate_braces":{"type":"method","name":"migrate_braces","children":[],"call":["key == ","options merge delete_if ","options merge ","options [] "," harmony? "]}," Uglifier context_lines_message":{"type":"method","name":"context_lines_message","children":[],"call":[" format_lines join "," format_lines ","lines [] "," error_context_format_options ","(send\n  (lvar :line_number) :+\n  (send nil :error_context_lines)) min ","lines size ","line_number + "," error_context_lines ","(send\n  (lvar :line_index) :-\n  (send nil :error_context_lines)) max ","line_index - ","source split ","line_number - ","line_number nil? "," format_source split  join "," format_source split  ","source split  [] "," error_context_format_ error_context_format_options  ","(send\n  (lvar :line_number) :+\n  (send nil :error_lines [] )) min ","(send\n  (lvar :line_number) :+\n  (send nil :error_context_source split )) min ","source split  size "," error_lines []  "," error_context_source split  ","(send\n  (lvar :line_index) :-\n  (send nil :error_lines [] )) max ","(send\n  (lvar :line_index) :-\n  (send nil :error_context_source split )) max ","(send\n  (lvar :line_number - ) :-\n  (send nil :error_context_lines)) max ","line_number -  - "]}," Uglifier format_lines":{"type":"method","name":"format_lines","children":[],"call":["options [] % ","options [] + + ","options [] + ","options [] "," format_error_line ","options [] + == ","lines map with_index ","lines map "]}," Uglifier format_error_line":{"type":"method","name":"format_error_line","children":[],"call":["line [] ","options [] "," =>  rjust ","options [] + "]}," Uglifier error_context_format_options":{"type":"method","name":"error_context_format_options","children":[],"call":["line_width + ","high to_s size ","high to_s ","high to_s size  + "]}," Uglifier error_context_lines":{"type":"method","name":"error_context_lines","children":[],"call":["@options fetch to_i ","@options fetch ","DEFAULTS  [] "]}," Uglifier harmony_error_message":{"type":"method","name":"harmony_error_message","children":[],"call":["message start_with? "]}," Uglifier context":{"type":"method","name":"context","children":[],"call":["ExecJS  compile "," source_with "," harmony? ","  source_with _with "]}}