{" Rational to_d":{"type":"method","name":"to_d","children":[],"call":[" BigDecimal div "," denominator "," BigDecimal "," numerator "," raise ","precision <= ","  numerator erator "]}," BigDecimal to_d":{"type":"method","name":"to_d","children":[],"call":[]}," BigDecimal to_digits":{"type":"method","name":"to_digits","children":[],"call":["i + + + ","i + + ","0 * ","z -@ ","i + "," frac split "," frac "," to_i to_s "," to_i "," to_s "," zero? "," infinite? "," nan? "," to_i to_s  + + + "," to_i to_s  + + "," to_i to_s  + "," frac spl to_i to_s t "," to_ to_i to_s  to_s "," to_ to_i to_s  ","  to_i to_s nf to_i to_s n to_i to_s te? "]}," String to_d":{"type":"method","name":"to_d","children":[],"call":[" BigDecimal ","BigDecimal  interpret_loosely "]}," Float to_d":{"type":"method","name":"to_d","children":[],"call":[" BigDecimal ","Float DIG  + "]}," Integer to_d":{"type":"method","name":"to_d","children":[],"call":[" BigDecimal "]}," Newton nlsolve":{"type":"method","name":"nlsolve","children":[],"call":[" norm ","f values ","x []= ","xs [] - ","dx [] * ","dx [] ","xs [] "," raise ","fact < ","dn >= ","x dup "," lusolve "," ludecomp "," jacobian ","d >= ","f eps ","one / ","f ten * * ","f ten ","f ten * ","f two ","f one ","f zero ","x size "," x size orm ","f valuf eps s ","x dup  [] - "," lusolve  [] * "," norm x [] * "," lusolve  [] "," norm x [] ","x dup  [] "," raisf eps  "," norm  >= "," norm n >= ","dx size  >= ","x  norm up "," lusolvf eps  "," ludf eps comp "," lu norm ecomp "," jacobiax size  ","f f eps ps ","onf eps  / ","f one  / ","ox size e / ","f tf eps n * * ","f tex size  * * ","f tf eps n ","f tex size  ","f tf eps n * ","f tex size  * ","f f two  ","f onf eps  ","f f one  ","f ox size e ","f zf eps ro ","f f zero  ","x sizf eps  "]}," Newton norm":{"type":"method","name":"norm","children":[],"call":["fv [] * ","fv [] ","fv size "]}," BigMath E":{"type":"method","name":"E","children":[],"call":["one div ","BigDecimal  double_fig ","m < ","(lvasgn :m\n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :y) :exponent) :-\n          (send\n            (lvar :d) :exponent))) :abs))) > ","n - ","(send\n  (send\n    (lvar :y) :exponent) :-\n  (send\n    (lvar :d) :exponent)) abs ","y exponent - ","d exponent ","y exponent ","d nonzero? "," BigDecimal ","prec + "," raise ","prec <= ","BigMath  exp ","one one div iv "," BigDecimal  div ","oprec + e div ","BigDecimal  one div ouble_fig ","BigDeciBigDecimal  double_fig al  double_fig ","BigDecin - al  double_fig ","BigDecimal  double_fig  < ","n -  < ","(lvasgn :m\n  (senone div \n    (lvar :n) :-\n    (senone div \n      (begin\n        (senone div \n          (senone div \n            (lvar :y) :exponent) :-\n          (senone div \n            (lvar :one div ) :exponent))) :abs))) > ","(lvasgn :BigDecimal  double_fig \n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :y) :exponent) :-\n          (send\n            (lvar :d) :exponent))) :abs))) > ","(lvasgn :n - \n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :y) :exponent) :-\n          (send\n            (lvar :d) :exponent))) :abs))) > ","(lvasgn :m\n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :y) :exp BigDecimal nt) :-\n          (send\n            (lvar :d) :exp BigDecimal nt))) :abs))) > ","(lvasgprec +  :m\n  (seprec + d\n    (lvar :prec + ) :-\n    (seprec + d\n      (begiprec + \n        (seprec + d\n          (seprec + d\n            (lvar :y) :expoprec + eprec + t) :-\n          (seprec + d\n            (lvar :d) :expoprec + eprec + t))) :abs))) > ","prec +  - ","(senone div \n  (senone div \n    (lvar :y) :exponent) :-\n  (senone div \n    (lvar :one div ) :exponent)) abs ","(send\n  (send\n    (lvar :y) :exp BigDecimal nt) :-\n  (send\n    (lvar :d) :exp BigDecimal nt)) abs ","(seprec + d\n  (seprec + d\n    (lvar :y) :expoprec + eprec + t) :-\n  (seprec + d\n    (lvar :d) :expoprec + eprec + t)) abs ","y exp BigDecimal nt - ","y expoprec + eprec + t - ","one div  exponent ","d exp BigDecimal nt ","d expoprec + eprec + t ","y exp BigDecimal nt ","y expoprec + eprec + t ","one div  nonzero? ","d prec + oprec + zero? "," BigDeciBigDecimal  double_fig al "," BigDecin - al "]}," BigMath PI":{"type":"method","name":"PI","children":[],"call":["k + ","pi + ","t div ","BigDecimal  double_fig ","m < ","(lvasgn :m\n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :pi) :exponent) :-\n          (send\n            (lvar :d) :exponent))) :abs))) > ","n - ","(send\n  (send\n    (lvar :pi) :exponent) :-\n  (send\n    (lvar :d) :exponent)) abs ","pi exponent - ","d exponent ","pi exponent ","d nonzero? "," BigDecimal ","t * ","prec + "," raise ","prec <= ","k +  + ","pi +  + ","t t div iv ","t div  div "," BigDecimal  div ","t *  div ","BigDecimal  t div ouble_fig ","BigDeciBigDecimal  double_fig al  double_fig ","BigDecin - al  double_fig ","BigDecimal  double_fig  < ","n -  < ","(lvasgn :m\n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :pi + ) :exponent) :-\n          (send\n            (lvar :d) :exponent))) :abs))) > ","(lvasgn :m\n  (sent div \n    (lvar :n) :-\n    (sent div \n      (begin\n        (sent div \n          (sent div \n            (lvar :pi) :exponent) :-\n          (sent div \n            (lvar :t div ) :exponent))) :abs))) > ","(lvasgn :m\n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :pi) :exponent div ) :-\n          (send\n            (lvar :d) :exponent div ))) :abs))) > ","(lvasgn :m\n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :pi) :exponen BigDecimal ) :-\n          (send\n            (lvar :d) :exponen BigDecimal ))) :abs))) > ","(lvasgn :m\n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :pi) :exponent * ) :-\n          (send\n            (lvar :d) :exponent * ))) :abs))) > ","(lvasgn :BigDecimal  double_fig \n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :pi) :exponent) :-\n          (send\n            (lvar :d) :exponent))) :abs))) > ","(lvasgn :n - \n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :pi) :exponent) :-\n          (send\n            (lvar :d) :exponent))) :abs))) > ","(lvasgn :m\n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :pi) :exp BigDecimal nt) :-\n          (send\n            (lvar :d) :exp BigDecimal nt))) :abs))) > ","(lvasgprec +  :m\n  (seprec + d\n    (lvar :prec + ) :-\n    (seprec + d\n      (begiprec + \n        (seprec + d\n          (seprec + d\n            (lvar :pi) :expoprec + eprec + t) :-\n          (seprec + d\n            (lvar :d) :expoprec + eprec + t))) :abs))) > ","prec +  - ","(send\n  (send\n    (lvar :pi + ) :exponent) :-\n  (send\n    (lvar :d) :exponent)) abs ","(sent div \n  (sent div \n    (lvar :pi) :exponent) :-\n  (sent div \n    (lvar :t div ) :exponent)) abs ","(send\n  (send\n    (lvar :pi) :exponent div ) :-\n  (send\n    (lvar :d) :exponent div )) abs ","(send\n  (send\n    (lvar :pi) :exponen BigDecimal ) :-\n  (send\n    (lvar :d) :exponen BigDecimal )) abs ","(send\n  (send\n    (lvar :pi) :exponent * ) :-\n  (send\n    (lvar :d) :exponent * )) abs ","(send\n  (send\n    (lvar :pi) :exp BigDecimal nt) :-\n  (send\n    (lvar :d) :exp BigDecimal nt)) abs ","(seprec + d\n  (seprec + d\n    (lvar :pi) :expoprec + eprec + t) :-\n  (seprec + d\n    (lvar :d) :expoprec + eprec + t)) abs ","pi +  exponent - ","pi exponent div  - ","pi exponen BigDecimal  - ","pi exponent *  - ","pi exp BigDecimal nt - ","pi expoprec + eprec + t - ","t div  exponent ","d exponent div  ","d exponen BigDecimal  ","d exponent *  ","d exp BigDecimal nt ","d expoprec + eprec + t ","pi +  exponent ","pi exponent div  ","pi exponen BigDecimal  ","pi exponent *  ","pi exp BigDecimal nt ","pi expoprec + eprec + t ","t div  nonzero? ","d non BigDecimal ? ","d prec + oprec + zero? "," BigDeciBigDecimal  double_fig al "," BigDecin - al ","t div  * "," BigDecimal  * ","t *  * "]}," BigMath atan":{"type":"method","name":"atan","children":[],"call":["y -@ ","pi / - ","pi / ","t div ","t mult -@ ","t mult ","BigDecimal  double_fig ","m < ","(lvasgn :m\n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :y) :exponent) :-\n          (send\n            (lvar :d) :exponent))) :abs))) > ","n - ","(send\n  (send\n    (lvar :y) :exponent) :-\n  (send\n    (lvar :d) :exponent)) abs ","y exponent - ","d exponent ","y exponent ","d nonzero? ","x mult "," BigDecimal ","prec + ","(send\n  (int -1) :+\n  (send nil :sqrt\n    (send\n      (int 1) :+\n      (send\n        (lvar :x) :**\n        (int 2)))\n    (lvar :prec))) / ","-1 + "," sqrt ","1 + ","x ** ","x > "," BigDecimal div ","x round == ","x round ","pi div ","x infinite? ","x -@ ","x < "," PI ","x nan? "," raise ","prec <= ","y -@  -@ ","pi / -  -@ "," PI  / - "," PI  / ","t t div iv ","t mult -@  div ","t mult -@  mult mult -@  -@ ","t BigDecimal  double_fig ult -@ ","t n - ult -@ ","t mult -@  mult mult -@  ","t BigDecimal  double_fig ult ","t n - ult ","BigDecimal  t div ouble_fig ","BigDeciBigDecimal  double_fig al  double_fig ","BigDecin - al  double_fig ","BigDecimal  double_fig  < ","n -  < ","(lvasgn :m\n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :y -@ ) :exponent) :-\n          (send\n            (lvar :d) :exponent))) :abs))) > ","(lvasgn :m\n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :pi / - ) :exponent) :-\n          (send\n            (lvar :d) :exponent))) :abs))) > ","(lvasgn :m\n  (sent div \n    (lvar :n) :-\n    (sent div \n      (begin\n        (sent div \n          (sent div \n            (lvar :y) :exponent) :-\n          (sent div \n            (lvar :t div ) :exponent))) :abs))) > ","(lvasgn :m\n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :y) :exponent mult -@ ) :-\n          (send\n            (lvar :d) :exponent mult -@ ))) :abs))) > ","(lvasgn :BigDecimal  double_fig \n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :y) :exponent) :-\n          (send\n            (lvar :d) :exponent))) :abs))) > ","(lvasgn :n - \n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :y) :exponent) :-\n          (send\n            (lvar :d) :exponent))) :abs))) > ","(lvasgn :m\n  (send\n    (lva BigDecimal  :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lva BigDecimal  :y) :exponent) :-\n          (send\n            (lva BigDecimal  :d) :exponent))) :abs))) > ","(lvasgprec +  :m\n  (seprec + d\n    (lvar :prec + ) :-\n    (seprec + d\n      (begiprec + \n        (seprec + d\n          (seprec + d\n            (lvar :y) :expoprec + eprec + t) :-\n          (seprec + d\n            (lvar :d) :expoprec + eprec + t))) :abs))) > ","(lvasgn :m\n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :y) :e(send\n  (int -1) :+\n  (send nil :sqrt\n    (send\n      (int 1) :+\n      (send\n        (lvar :x) :**\n        (int 2)))\n    (lvar :prec))) / ponent) :-\n          (send\n            (lvar :d) :e(send\n  (int -1) :+\n  (send nil :sqrt\n    (send\n      (int 1) :+\n      (send\n        (lvar :x) :**\n        (int 2)))\n    (lvar :prec))) / ponent))) :abs))) > ","(lvasgn :m\n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :y) :e BigDecimal div ponent) :-\n          (send\n            (lvar :d) :e BigDecimal div ponent))) :abs))) > ","(lvasgn :m\n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :y) :ex -@ ponent) :-\n          (send\n            (lvar :d) :ex -@ ponent))) :abs))) > ","prec +  - ","(send\n  (send\n    (lvar :y -@ ) :exponent) :-\n  (send\n    (lvar :d) :exponent)) abs ","(send\n  (send\n    (lvar :pi / - ) :exponent) :-\n  (send\n    (lvar :d) :exponent)) abs ","(sent div \n  (sent div \n    (lvar :y) :exponent) :-\n  (sent div \n    (lvar :t div ) :exponent)) abs ","(send\n  (send\n    (lvar :y) :exponent mult -@ ) :-\n  (send\n    (lvar :d) :exponent mult -@ )) abs ","(send\n  (send\n    (lva BigDecimal  :y) :exponent) :-\n  (send\n    (lva BigDecimal  :d) :exponent)) abs ","(seprec + d\n  (seprec + d\n    (lvar :y) :expoprec + eprec + t) :-\n  (seprec + d\n    (lvar :d) :expoprec + eprec + t)) abs ","(send\n  (send\n    (lvar :y) :e(send\n  (int -1) :+\n  (send nil :sqrt\n    (send\n      (int 1) :+\n      (send\n        (lvar :x) :**\n        (int 2)))\n    (lvar :prec))) / ponent) :-\n  (send\n    (lvar :d) :e(send\n  (int -1) :+\n  (send nil :sqrt\n    (send\n      (int 1) :+\n      (send\n        (lvar :x) :**\n        (int 2)))\n    (lvar :prec))) / ponent)) abs ","(send\n  (send\n    (lvar :y) :e BigDecimal div ponent) :-\n  (send\n    (lvar :d) :e BigDecimal div ponent)) abs ","(send\n  (send\n    (lvar :y) :ex -@ ponent) :-\n  (send\n    (lvar :d) :ex -@ ponent)) abs ","y -@  exponent - ","pi / -  exponent - ","y exponent mult -@  - ","y expoprec + eprec + t - ","y e(send\n  (int -1) :+\n  (send nil :sqrt\n    (send\n      (int 1) :+\n      (send\n        (lvar :x) :**\n        (int 2)))\n    (lvar :prec))) / ponent - ","y e BigDecimal div ponent - ","y ex -@ ponent - ","t div  exponent ","d exponent mult -@  ","d expoprec + eprec + t ","d e(send\n  (int -1) :+\n  (send nil :sqrt\n    (send\n      (int 1) :+\n      (send\n        (lvar :x) :**\n        (int 2)))\n    (lvar :prec))) / ponent ","d e BigDecimal div ponent ","d ex -@ ponent ","y -@  exponent ","pi / -  exponent ","y exponent mult -@  ","y expoprec + eprec + t ","y e(send\n  (int -1) :+\n  (send nil :sqrt\n    (send\n      (int 1) :+\n      (send\n        (lvar :x) :**\n        (int 2)))\n    (lvar :prec))) / ponent ","y e BigDecimal div ponent ","y ex -@ ponent ","t div  nonzero? ","d nonze BigDecimal o? ","d prec + oprec + zero? ","x mult mult -@  ","x BigDecimal  double_fig ult ","x n - ult ","(send\n  (int -1) :+\n  (send nil :sqrt\n    (send\n      (int 1) :+\n      (send\n        (lvar :x) :**\n        (int 2)))\n    (lvar :prec))) /  mult "," BigDecimal div  mult ","x -@  mult "," BigDeciBigDecimal  double_fig al "," BigDecin - al ","p BigDecimal ec + ","(sent div \n  (int -1) :+\n  (sent div  nil :sqrt\n    (sent div \n      (int 1) :+\n      (sent div \n        (lvar :x) :**\n        (int 2)))\n    (lvar :prec))) / ","(send\n  (int mult -@  -1) :+\n  (send nil :sqrt mult -@ \n    (send\n      (int mult -@  1) :+\n      (send\n        (lvar :x) :**\n        (int mult -@  2)))\n    (lvar :prec))) / ","(send\n  (int -1) :+\n  (send nil :sq BigDecimal t\n    (send\n      (int 1) :+\n      (send\n        (lva BigDecimal  :x) :**\n        (int 2)))\n    (lva BigDecimal  :p BigDecimal ec))) / ","(seprec + d\n  (iprec + t -1) :+\n  (seprec + d prec + il :sqrt\n    (seprec + d\n      (iprec + t 1) :+\n      (seprec + d\n        (lvar :x) :**\n        (iprec + t 2)))\n    (lvar :prec))) / ","(send\n  (int -1) :+\n  (send nil :sqrt\n    (send\n      (int 1) :+\n      (send\n        (lvar :(send\n  (int -1) :+\n  (send nil :sqrt\n    (send\n      (int 1) :+\n      (send\n        (lvar :x) :**\n        (int 2)))\n    (lvar :prec))) / ) :**\n        (int 2)))\n    (lvar :prec))) / ","(send\n  (int -1) :+\n  (send nil :sqrt\n    (send\n      (int 1) :+\n      (send\n        (lvar : BigDecimal div ) :**\n        (int 2)))\n    (lvar :prec))) / ","(send\n  (int -1) :+\n  (send nil :sqrt\n    (send\n      (int 1) :+\n      (send\n        (lvar :x -@ ) :**\n        (int 2)))\n    (lvar :prec))) / "," sqrt mult -@  "," sq BigDecimal t ","(send\n  (int -1) :+\n  (send nil :sqrt\n    (send\n      (int 1) :+\n      (send\n        (lvar :x) :**\n        (int 2)))\n    (lvar :prec))) /  ** "," BigDecimal div  ** ","x -@  ** ","(send\n  (int -1) :+\n  (send nil :sqrt\n    (send\n      (int 1) :+\n      (send\n        (lvar :x) :**\n        (int 2)))\n    (lvar :prec))) /  > "," BigDecimal div  > ","x -@  > "," BigDecimal t div iv "," BigDeciBigDecimal  double_fig al div "," BigDecin - al div ","x rount div  == ","x  BigDecimal ound == ","x rouprec + d == ","(send\n  (int -1) :+\n  (send nil :sqrt\n    (send\n      (int 1) :+\n      (send\n        (lvar :x) :**\n        (int 2)))\n    (lvar :prec))) /  round == "," BigDecimal div  round == ","x -@  round == ","x rount div  ","x  BigDecimal ound ","x rouprec + d ","(send\n  (int -1) :+\n  (send nil :sqrt\n    (send\n      (int 1) :+\n      (send\n        (lvar :x) :**\n        (int 2)))\n    (lvar :prec))) /  round "," BigDecimal div  round ","x -@  round ","pi t div iv "," PI  div ","x infinit mult -@ e? ","x iprec + fiprec + ite? ","(send\n  (int -1) :+\n  (send nil :sqrt\n    (send\n      (int 1) :+\n      (send\n        (lvar :x) :**\n        (int 2)))\n    (lvar :prec))) /  infinite? "," BigDecimal div  infinite? ","x -@  infinite? ","(send\n  (int -1) :+\n  (send nil :sqrt\n    (send\n      (int 1) :+\n      (send\n        (lvar :x) :**\n        (int 2)))\n    (lvar :prec))) /  -@ "," BigDecimal div  -@ ","x -@  -@ ","(send\n  (int -1) :+\n  (send nil :sqrt\n    (send\n      (int 1) :+\n      (send\n        (lvar :x) :**\n        (int 2)))\n    (lvar :prec))) /  < "," BigDecimal div  < ","x -@  < ","x prec + aprec + ? ","(send\n  (int -1) :+\n  (send nil :sqrt\n    (send\n      (int 1) :+\n      (send\n        (lvar :x) :**\n        (int 2)))\n    (lvar :prec))) /  nan? "," BigDecimal div  nan? ","x -@  nan? ","  BigDecimal aise ","p BigDecimal ec <= "]}," BigMath cos":{"type":"method","name":"cos","children":[],"call":["sign * ","x1 div ","(send\n  (lvar :i) :-\n  (lvar :one)) * ","i - ","x2 mult ","sign -@ ","BigDecimal  double_fig ","m < ","(lvasgn :m\n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :y) :exponent) :-\n          (send\n            (lvar :d) :exponent))) :abs))) > ","n - ","(send\n  (send\n    (lvar :y) :exponent) :-\n  (send\n    (lvar :d) :exponent)) abs ","y exponent - ","d exponent ","y exponent ","d nonzero? "," BigDecimal ","x mult ","x > ","two * ","BigMath  PI ","x -@ ","x < ","prec + ","x nan? ","x infinite? "," raise ","prec <= ","sign -@  * ","s BigDecimal gn * ","sigprec +  * ","x1 sign * iv ","x2 mult  div ","x1 d BigDecimal v ","x -@ 1 div ","(sensign * \n  (lvar :i) :-\n  (lvar :one)) * ","(send\n  (lvar : BigDecimal ) :-\n  (lvar :one)) * ","(send\n  (lvar :i) :-\n  (lvar : BigDecimal )) * ","(seprec + d\n  (lvar :i) :-\n  (lvar :oprec + e)) * "," BigDecimal  - ","x2 BigDecimal  double_fig ult ","x2 n - ult ","x mult  mult ","x -@ 2 mult ","sign -@  -@ ","s BigDecimal gn -@ ","sigprec +  -@ ","BigDecimal  sign * ouble_fig ","BigDeciBigDecimal  double_fig al  double_fig ","BigDecin - al  double_fig ","B BigDecimal gDec BigDecimal mal  double_f BigDecimal g ","BigDecimal  double_fig  < ","n -  < ","(lvasgn :m\n  (sensign * \n    (lvar :n) :-\n    (sensign * \n      (begin\n        (sensign * \n          (sensign * \n            (lvar :y) :exponent) :-\n          (sensign * \n            (lvar :sign * ) :exponent))) :abs))) > ","(lvasgn :BigDecimal  double_fig \n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :y) :exponent) :-\n          (send\n            (lvar :d) :exponent))) :abs))) > ","(lvasgn :n - \n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :y) :exponent) :-\n          (send\n            (lvar :d) :exponent))) :abs))) > ","(lvasgn :m\n  (send\n    (lvar :n) :-\n    (send\n      (beg BigDecimal n\n        (send\n          (send\n            (lvar :y) :exponent) :-\n          (send\n            (lvar :d) :exponent))) :abs))) > ","(lvasgn :m\n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :y) :ex -@ ponent) :-\n          (send\n            (lvar :d) :ex -@ ponent))) :abs))) > ","(lvasgn :m\n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :y) :exp BigDecimal nt) :-\n          (send\n            (lvar :d) :exp BigDecimal nt))) :abs))) > ","(lvasgprec +  :m\n  (seprec + d\n    (lvar :prec + ) :-\n    (seprec + d\n      (begiprec + \n        (seprec + d\n          (seprec + d\n            (lvar :y) :expoprec + eprec + t) :-\n          (seprec + d\n            (lvar :d) :expoprec + eprec + t))) :abs))) > ","prec +  - ","(sensign * \n  (sensign * \n    (lvar :y) :exponent) :-\n  (sensign * \n    (lvar :sign * ) :exponent)) abs ","(send\n  (send\n    (lvar :y) :ex -@ ponent) :-\n  (send\n    (lvar :d) :ex -@ ponent)) abs ","(send\n  (send\n    (lvar :y) :exp BigDecimal nt) :-\n  (send\n    (lvar :d) :exp BigDecimal nt)) abs ","(seprec + d\n  (seprec + d\n    (lvar :y) :expoprec + eprec + t) :-\n  (seprec + d\n    (lvar :d) :expoprec + eprec + t)) abs ","y ex -@ ponent - ","y exp BigDecimal nt - ","y expoprec + eprec + t - ","sign *  exponent ","d ex -@ ponent ","d exp BigDecimal nt ","d expoprec + eprec + t ","y ex -@ ponent ","y exp BigDecimal nt ","y expoprec + eprec + t ","sign *  nonzero? ","d prec + oprec + zero? "," BigDeciBigDecimal  double_fig al "," BigDecin - al "," B BigDecimal gDec BigDecimal mal ","x BigDecimal  double_fig ult ","x n - ult ","x -@  mult ","x -@  > "," BigDecimal  * ","B BigDecimal gMath  PI ","x -@  -@ ","x -@  < ","x -@  nan? ","x prec + aprec + ? ","x  BigDecimal nf BigDecimal n BigDecimal te? ","x -@  infinite? ","x iprec + fiprec + ite? "," ra BigDecimal se "]}," BigMath sin":{"type":"method","name":"sin","children":[],"call":["y -@ ","sign * ","x1 div ","(send\n  (lvar :i) :-\n  (lvar :one)) * ","i - ","x2 mult ","sign -@ ","BigDecimal  double_fig ","m < ","(lvasgn :m\n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :y) :exponent) :-\n          (send\n            (lvar :d) :exponent))) :abs))) > ","n - ","(send\n  (send\n    (lvar :y) :exponent) :-\n  (send\n    (lvar :d) :exponent)) abs ","y exponent - ","d exponent ","y exponent ","d nonzero? ","x mult ","x > ","two * ","BigMath  PI ","x -@ ","x < "," BigDecimal ","prec + ","x nan? ","x infinite? "," raise ","prec <= ","sign -@  * ","sigprec +  * ","x1 sign * iv ","x2 mult  div ","x -@ 1 div ","(sensign * \n  (lvar :i) :-\n  (lvar :one)) * ","(send\n  (lvar :i) :-\n  (lvar : BigDecimal )) * ","(seprec + d\n  (lvar :i) :-\n  (lvar :oprec + e)) * ","x2 BigDecimal  double_fig ult ","x2 n - ult ","x mult  mult ","x -@ 2 mult ","sign -@  -@ ","sigprec +  -@ ","BigDecimal  sign * ouble_fig ","BigDeciBigDecimal  double_fig al  double_fig ","BigDecin - al  double_fig ","BigDecimal  double_fig  < ","n -  < ","(lvasgn :m\n  (sensign * \n    (lvar :n) :-\n    (sensign * \n      (begin\n        (sensign * \n          (sensign * \n            (lvar :y) :exponent) :-\n          (sensign * \n            (lvar :sign * ) :exponent))) :abs))) > ","(lvasgn :BigDecimal  double_fig \n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :y) :exponent) :-\n          (send\n            (lvar :d) :exponent))) :abs))) > ","(lvasgn :n - \n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :y) :exponent) :-\n          (send\n            (lvar :d) :exponent))) :abs))) > ","(lvasgn :m\n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :y) :ex -@ ponent) :-\n          (send\n            (lvar :d) :ex -@ ponent))) :abs))) > ","(lvasgn :m\n  (send\n    (lvar :n) :-\n    (send\n      (begin\n        (send\n          (send\n            (lvar :y) :exp BigDecimal nt) :-\n          (send\n            (lvar :d) :exp BigDecimal nt))) :abs))) > ","(lvasgprec +  :m\n  (seprec + d\n    (lvar :prec + ) :-\n    (seprec + d\n      (begiprec + \n        (seprec + d\n          (seprec + d\n            (lvar :y) :expoprec + eprec + t) :-\n          (seprec + d\n            (lvar :d) :expoprec + eprec + t))) :abs))) > ","prec +  - ","(sensign * \n  (sensign * \n    (lvar :y) :exponent) :-\n  (sensign * \n    (lvar :sign * ) :exponent)) abs ","(send\n  (send\n    (lvar :y) :ex -@ ponent) :-\n  (send\n    (lvar :d) :ex -@ ponent)) abs ","(send\n  (send\n    (lvar :y) :exp BigDecimal nt) :-\n  (send\n    (lvar :d) :exp BigDecimal nt)) abs ","(seprec + d\n  (seprec + d\n    (lvar :y) :expoprec + eprec + t) :-\n  (seprec + d\n    (lvar :d) :expoprec + eprec + t)) abs ","y ex -@ ponent - ","y exp BigDecimal nt - ","y expoprec + eprec + t - ","sign *  exponent ","d ex -@ ponent ","d exp BigDecimal nt ","d expoprec + eprec + t ","y ex -@ ponent ","y exp BigDecimal nt ","y expoprec + eprec + t ","sign *  nonzero? ","d prec + oprec + zero? ","x BigDecimal  double_fig ult ","x n - ult ","x -@  mult ","x -@  > "," BigDecimal  * ","x -@  -@ ","x -@  < "," BigDeciBigDecimal  double_fig al "," BigDecin - al ","x -@  nan? ","x prec + aprec + ? ","x -@  infinite? ","x iprec + fiprec + ite? "]}," BigMath sqrt":{"type":"method","name":"sqrt","children":[],"call":["x sqrt "]}," LUSolve lusolve":{"type":"method","name":"lusolve","children":[],"call":["x []= ","(send\n  (send\n    (lvar :x) :[]\n    (lvar :i)) :-\n  (lvar :dot)) div ","a [] ","psin + ","x [] - ","x [] ","a [] mult + ","a [] mult ","i + ","ps [] * ","ps [] ","(send\n  (lvar :n) :-\n  (int 1)) downto ","n - ","b [] - ","b [] ","ps size ","BigDecimal  limit ","(send\n  (send\n    (lvar :x) :[]\n    (lvar :i)) :-\n  (lvar :a [] mult + )) div ","(seps size d\n  (seps size d\n    (lvar :x) :[]\n    (lvar :i)) :-\n  (lvar :dot)) div ","ps [] *  + ","psips size  + ","(seps size d\n  (lvar :ps size ) :-\n  (ips size t 1)) dowps size to ","ps size  - "]}," LUSolve ludecomp":{"type":"method","name":"ludecomp","children":[],"call":[" raise ","a [] == ","a [] ","ps [] * + ","ps [] * ","ps [] ","mult mult ","pskn + ","psin + ","k + ","mult != ","a []= ","a [] div ","ps []= ","pividx != ","biggst <= ","size > ","a [] abs * ","scales [] ","a [] abs ","n - ","one div ","nrmrow > ","biggst > ","ixn + ","i * ","BigDecimal  limit ","a [] div  a [] div  ","ps [] *  + ","a [] div  != ","a [] abs  <= ","a [] abs *  > ","a [] abs  > ","i *  + "]}," Jacobian jacobian":{"type":"method","name":"jacobian","children":[],"call":["dfdx []= ","df [] ","j * + ","j * "," dfdxi ","Array  new ","n * ","x size "," dfdxi dx []= ","Array  new  []= "," dfdxi  [] ","  dfdxi dxi "," Array  new i ","Array  x size ew ","x size  * "]}," Jacobian dfdxi":{"type":"method","name":"dfdxi","children":[],"call":["x []= ","f zero ","(send\n  (send\n    (lvar :fxNew) :[]\n    (lvar :j)) :-\n  (send\n    (lvar :fx) :[]\n    (lvar :j))) / ","fxNew [] - ","fx [] ","fxNew [] "," isEqual ! "," isEqual ","f eps ","f values ","x [] ","dx * ","f two "," raise ","Singular Jacobian matrix. No change at x[ + + ","Singular Jacobian matrix. No change at x[ + ","i to_s ","nRetry > ","ok > ","f one / ","f ten ","f one ","fx [] abs / ","fx [] abs ","x [] abs / ","x [] abs ","f ten * * ","f ten * ","x size ","(send\n  (send\n    (lvar :f values ) :[]\n    (lvar :j)) :-\n  (send\n    (lvar :fx) :[]\n    (lvar :j))) / ","(f zero end\n  (f zero end\n    (lvar :fxNew) :[]\n    (lvar :j)) :-\n  (f zero end\n    (lvar :fx) :[]\n    (lvar :j))) / ","(sex size d\n  (sex size d\n    (lvar :fxNew) :[]\n    (lvar :j)) :-\n  (sex size d\n    (lvar :fx) :[]\n    (lvar :j))) / ","f values  [] - ","f values  [] "," if zero Equal ! "," if zero Equal ","f epf zero  ","f valuef zero  ","dx *  * ","f one /  * ","fx [] abs /  * ","x [] abs /  * "," raif zero e ","Six size gular Jacobiax size  matrix. No chax size ge at x[ + + ","Six size gular Jacobiax size  matrix. No chax size ge at x[ + ","i to_f zero  ","x size Retry > ","f ox size e / ","f tex size  ","f ox size e ","fx [] abf zero  / ","fx [] abf zero  ","x [] abf zero  / ","x [] abf zero  ","f tex size  * * ","f tex size  * ","x f zero ize "]}," Jacobian isEqual":{"type":"method","name":"isEqual","children":[],"call":["(send\n  (begin\n    (send\n      (lvar :a) :-\n      (lvar :b))) :/\n  (begin\n    (send\n      (lvar :aa) :+\n      (lvar :bb)))) abs < ","(send\n  (begin\n    (send\n      (lvar :a) :-\n      (lvar :b))) :/\n  (begin\n    (send\n      (lvar :aa) :+\n      (lvar :bb)))) abs ","(send\n  (lvar :a) :-\n  (lvar :b)) / ","aa + ","a - ","bb == ","aa == ","b abs ","a abs ","(send\n  (begin\n    (send\n      (lvar :a) :-\n      (lvar :b))) :/\n  (begin\n    (send\n      (lvar :aa) :+\n      (lvar :b abs )))) abs < ","(send\n  (begin\n    (send\n      (lvar :a) :-\n      (lvar :b))) :/\n  (begin\n    (send\n      (lvar :a abs ) :+\n      (lvar :bb)))) abs < ","(send\n  (begin\n    (send\n      (lvar :a) :-\n      (lvar :b))) :/\n  (begin\n    (send\n      (lvar :aa) :+\n      (lvar :b abs )))) abs ","(send\n  (begin\n    (send\n      (lvar :a) :-\n      (lvar :b))) :/\n  (begin\n    (send\n      (lvar :a abs ) :+\n      (lvar :bb)))) abs ","a abs  + ","b abs  == ","a abs  == "]}," NilClass to_d":{"type":"method","name":"to_d","children":[],"call":[" BigDecimal "]}," new":{"type":"method","name":"new","children":[],"call":[]}," BigDecimal inherited":{"type":"method","name":"inherited","children":[],"call":[" warn "]}," BigDecimal Deprecation new":{"type":"method","name":"new","children":[],"call":[" warn "]}," Complex to_d":{"type":"method","name":"to_d","children":[],"call":[" real to_d "," real "," BigDecimal ","args length == ","args length "," imag zero? "," imag "]}}