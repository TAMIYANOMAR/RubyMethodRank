{" String encode_entities":{"type":"method","name":"encode_entities","children":[],"call":["HTMLEntities  encode_entities "]}," String decode_entities":{"type":"method","name":"decode_entities","children":[],"call":["HTMLEntities  decode_entities "]}," HTMLEntities encode_extended":{"type":"method","name":"encode_extended","children":[],"call":[" __send__ ","encoders each "]}," HTMLEntities encode_hexadecimal":{"type":"method","name":"encode_hexadecimal","children":[],"call":["char unpack [] to_s ","char unpack [] ","char unpack "]}," HTMLEntities encode_decimal":{"type":"method","name":"encode_decimal","children":[],"call":["char unpack [] ","char unpack "]}," HTMLEntities encode_named":{"type":"method","name":"encode_named","children":[],"call":[" reverse_map [] "," reverse_map ","char unpack [] ","char unpack "," r reverse_map [] v reverse_map [] rs reverse_map [] _map [] "," r reverse_map [] v reverse_map [] rs reverse_map [] _map "]}," HTMLEntities reverse_map":{"type":"method","name":"reverse_map","children":[],"call":[" map invert "," map "," reverse_map_skipping_dups "]}," HTMLEntities named_entity_regexp":{"type":"method","name":"named_entity_regexp","children":[],"call":["max_length - ","min_length - ","(send\n  (send\n    (send nil :map) :keys) :map) max ","a length "," map keys map "," map keys "," map ","(send\n  (send\n    (send nil :map) :keys) :map) min ","@flavor to_s == ","@flavor to_s ","(send\n  (send\n    (send nil :map) :keys) :map) max  - ","(send\n  (send\n    (send nil :map) :keys) :map) min  - "]}," HTMLEntities extended_entity_regexp":{"type":"method","name":"extended_entity_regexp","children":[],"call":["Regexp  new ","@flavor == "," encoding_aware? "]}," HTMLEntities basic_entity_regexp":{"type":"method","name":"basic_entity_regexp","children":[],"call":[]}," HTMLEntities map":{"type":"method","name":"map","children":[],"call":["HTMLEntities MAPPINGS  [] "," require "]}," HTMLEntities encode":{"type":"method","name":"encode","children":[],"call":[" encode_extended ","string gsub! "," extended_entity_regexp ","extended_entity_encoders empty? ","extended_entity_encoders << ","instructions include? "," __send__ "," basic_entity_regexp "," raise ","unknown_instructions inspect ","(lvasgn :unknown_instructions\n  (send\n    (lvar :instructions) :-\n    (const nil :INSTRUCTIONS))) != ","instructions - ","instructions empty? ","source to_s dup ","source to_s ","memoized_extended_entity_encoders any? "," extended_entity_encoders "," basic_entity_encoder "," validate_instructions ","instructions << ","Encoder  new encode ","Encoder  new ","source to_s dup  gsub! ","instructions -  inspect ","(lvasgn :instructions - \n  (send\n    (lvar :instructions) :-\n    (const nil :INSTRUCTIONS))) != "," extended_entity_encoders  any? "]}," HTMLEntities decode":{"type":"method","name":"decode","children":[],"call":["(send\n  (nth-ref 2) :to_i\n  (int 16)) pack ","2 to_i ","(send\n  (nth-ref 1) :to_i) pack ","1 to_i ","(send\n  (send\n    (lvar :source) :to_s) :gsub\n  (send nil :named_entity_regexp)) gsub ","(lvar :cp) pack "," map [] "," map ","source to_s gsub "," named_entity_regexp ","source to_s ","Decoder  new decode ","Decoder  new ","(or-asgn\n  (ivasgn :@decoder)\n  (send\n    (const nil :Decoder) :new\n    (ivar :@flavor))) decode ","(lvar : map [] ) pack "]}," HTMLEntities initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","FLAVORS  include? ","flavor to_s downcase ","flavor to_s "]}," HTMLEntities xhtml1_entities":{"type":"method","name":"xhtml1_entities","children":[],"call":[" new "]}," HTMLEntities decode_entities":{"type":"method","name":"decode_entities","children":[],"call":[" xhtml1_entities decode "," xhtml1_entities "]}," HTMLEntities encode_entities":{"type":"method","name":"encode_entities","children":[],"call":[" xhtml1_entities encode "," xhtml1_entities "]}," HTMLEntities encoding_aware?":{"type":"method","name":"encoding_aware?","children":[],"call":["1.9 respond_to? "]}," HTMLEntities reverse_map_skipping_dups":{"type":"method","name":"reverse_map_skipping_dups","children":[],"call":["uniqmap invert "," map ","skips include? "," map reject ","HTMLEntities SKIP_DUP_ENCODINGS  [] "," map  invert ","HTMLEntities SKIP_DUP_ENCODINGS  []  include? "]}," HTMLEntities extended_entity_encoders":{"type":"method","name":"extended_entity_encoders","children":[],"call":["acc << ","instructions include? "]}," HTMLEntities basic_entity_encoder":{"type":"method","name":"basic_entity_encoder","children":[],"call":["instructions include? "]}," HTMLEntities validate_instructions":{"type":"method","name":"validate_instructions","children":[],"call":[" raise ","instructions include? ","unknown_instructions inspect ","unknown_instructions any? ","instructions - ","instructions -  inspect ","instructions -  any? "]}," HTMLEntities Encoder encoding_aware?":{"type":"method","name":"encoding_aware?","children":[],"call":["1.9 respond_to? "]}," HTMLEntities Encoder reverse_map":{"type":"method","name":"reverse_map","children":[],"call":["uniqmap invert ","skips include? ","map reject ","HTMLEntities MAPPINGS  [] ","HTMLEntities SKIP_DUP_ENCODINGS  [] ","uniqHTMLEntities MAPPINGS  []  invert ","HTMLEntities SKIP_DUP_ENCODINGS  []  include? ","HTMLEntities MAPPINGS  []  reject "]}," HTMLEntities Encoder encode_hexadecimal":{"type":"method","name":"encode_hexadecimal","children":[],"call":["char unpack [] to_s ","char unpack [] ","char unpack "]}," HTMLEntities Encoder encode_decimal":{"type":"method","name":"encode_decimal","children":[],"call":["char unpack [] ","char unpack "]}," HTMLEntities Encoder encode_named":{"type":"method","name":"encode_named","children":[],"call":[" reverse_map [] "," reverse_map ","char unpack [] ","char unpack "," r reverse_map [] v reverse_map [] rs reverse_map [] _map [] "," r reverse_map [] v reverse_map [] rs reverse_map [] _map "]}," HTMLEntities Encoder build_extended_entity_encoder":{"type":"method","name":"build_extended_entity_encoder","children":[],"call":[" instance_eval ","definition << ","(send\n  (array\n    (sym :named)\n    (sym :decimal)\n    (sym :hexadecimal)) :&\n  (lvar :instructions)) each ","(sym :named) & ","(send\n  (lvar :operations) :map) join ","operations map ","(send\n  (lvar :(sym :named) & ) :map) join ","(sym :named) &  map "]}," HTMLEntities Encoder build_basic_entity_encoder":{"type":"method","name":"build_basic_entity_encoder","children":[],"call":[" instance_eval ","instructions include? "]}," HTMLEntities Encoder validate_instructions":{"type":"method","name":"validate_instructions","children":[],"call":[" raise ","instructions include? ","unknown_instructions inspect ","unknown_instructions any? ","instructions - ","instructions -  inspect ","instructions -  any? "]}," HTMLEntities Encoder extended_entity_regexp":{"type":"method","name":"extended_entity_regexp","children":[],"call":["Regexp  new ","@flavor == "," encoding_aware? ","regexp_options << ","pattern << ","options << "]}," HTMLEntities Encoder basic_entity_regexp":{"type":"method","name":"basic_entity_regexp","children":[],"call":["@flavor match "]}," HTMLEntities Encoder encode":{"type":"method","name":"encode","children":[],"call":[" encode_extended ","string gsub! "," extended_entity_regexp "," encode_basic "," basic_entity_regexp ","source to_s dup ","source to_s ","(send\n  (send nil :prepare\n    (lvar :source)) :gsub\n  (send nil :basic_entity_regexp)) gsub "," prepare gsub "," prepare "," post_process "," minimize_encoding "," replace_extended "," replace_basic ","source to_s dup  gsub! "]}," HTMLEntities Encoder initialize":{"type":"method","name":"initialize","children":[],"call":[" build_extended_entity_encoder "," build_basic_entity_encoder "," validate_instructions ","instructions empty? "]}," HTMLEntities Decoder named_entity_regexp":{"type":"method","name":"named_entity_regexp","children":[],"call":["key_lengths max - ","key_lengths max ","key_lengths min - ","key_lengths min ","@flavor == ","k length ","@map keys map ","@map keys "]}," HTMLEntities Decoder decode":{"type":"method","name":"decode","children":[],"call":["(send\n  (nth-ref 2) :to_i\n  (int 16)) pack ","2 to_i ","(send\n  (nth-ref 1) :to_i) pack ","1 to_i ","(send\n  (send\n    (lvar :source) :to_s) :gsub\n  (send nil :named_entity_regexp)) gsub ","(lvar :cp) pack ","@map [] ","source to_s gsub "," named_entity_regexp ","source to_s ","(send\n  (send\n    (lvar :source) :to_s) :gsub\n  (ivar :@named_entity_regexp)) gsub ","(lvar :codepoint) pack ","(send\n  (nth-ref 3) :to_i\n  (int 16)) pack ","3 to_i ","(send\n  (nth-ref 2) :to_i\n  (int 10)) pack "," prepare gsub "," prepare ","(lvar :@map [] ) pack "]}," HTMLEntities Decoder initialize":{"type":"method","name":"initialize","children":[],"call":["HTMLEntities MAPPINGS  [] "," named_entity_regexp "," entity_regexp "]}," HTMLEntities Decoder entity_regexp":{"type":"method","name":"entity_regexp","children":[],"call":["key_lengths max - ","key_lengths max ","key_lengths min - ","key_lengths min ","@flavor == ","k length ","@map keys map ","@map keys "]}," HTMLEntities Encoder prepare":{"type":"method","name":"prepare","children":[],"call":["string to_s ","string to_s encode "]}," HTMLEntities Decoder prepare":{"type":"method","name":"prepare","children":[],"call":["string to_s ","string to_s encode "]}," HTMLEntities Encoder post_process":{"type":"method","name":"post_process","children":[],"call":["string encode ","string match ","string encoding != ","string encoding "]}," HTMLEntities Encoder replace_extended":{"type":"method","name":"replace_extended","children":[],"call":[" encode_extended ","string gsub "," extended_entity_regexp "]}," HTMLEntities Encoder replace_basic":{"type":"method","name":"replace_basic","children":[],"call":[" encode_basic ","string gsub "," basic_entity_regexp "]}," HTMLEntities Encoder contains_only_ascii?":{"type":"method","name":"contains_only_ascii?","children":[],"call":["string match "]}," HTMLEntities Encoder minimize_encoding":{"type":"method","name":"minimize_encoding","children":[],"call":["string encode "," contains_only_ascii? ","string encoding != ","string encoding "]}}