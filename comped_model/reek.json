{" Reek analyse":{"type":"method","name":"analyse","children":[],"call":[]}," Reek UncommunicativeName detailed_report":{"type":"method","name":"detailed_report","children":[],"call":[]}," Reek UncommunicativeName recognise?":{"type":"method","name":"recognise?","children":[],"call":["@symbol length < ","@symbol length ","(str \"^@\") === ","@symbol == ","symbol to_s ","UncommunicativeName  effective_length < ","UncommunicativeName  effective_length ","symbol to_s  length < ","symbol to_s  length ","symbol to_s  == "]}," Reek UncommunicativeName initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek LargeClass detailed_report":{"type":"method","name":"detailed_report","children":[],"call":[]}," Reek LargeClass recognise?":{"type":"method","name":"recognise?","children":[],"call":["num_methods > ","kl instance_methods length - ","kl superclass instance_methods length ","kl superclass instance_methods ","kl superclass ","kl instance_methods length ","kl instance_methods ","Object  const_get ","@num_methods > ","klass instance_methods length - ","klass superclass instance_methods length ","klass superclass instance_methods ","klass superclass ","klass instance_methods length ","klass instance_methods ","LargeClass  non_inherited_methods length ","LargeClass  non_inherited_methods ","kl instance_methods length -  > ","@kl instance_methods length -  > ","klass instance_methods length -  > ","LargeClass  non_inherited_methods length  > "]}," Reek UtilityFunction detailed_report":{"type":"method","name":"detailed_report","children":[],"call":[]}," Reek UtilityFunction recognise?":{"type":"method","name":"recognise?","children":[],"call":["calls [] == ","calls [] ","depends_on_self ! ","@num_stmts > "]}," Reek FeatureEnvy detailed_report":{"type":"method","name":"detailed_report","children":[],"call":["(send\n  (ivar :@receivers) :map) sort join ","(send\n  (ivar :@receivers) :map) sort ","Printer  print ","@receivers map ","(send\n  (send\n    (ivar :@refs) :max_keys) :map) sort join ","(send\n  (send\n    (ivar :@refs) :max_keys) :map) sort ","@refs max_keys map ","@refs max_keys ","(send\n  (ivar :@(send\n  (ivar :@receivers) :map) sort join s) :map) sort join ","(send\n  (ivar :@(send\n  (send\n    (ivar :@refs) :max_keys) :map) sort join s) :map) sort join ","(send\n  (ivar :@(send\n  (ivar :@receivers) :map) sort join s) :map) sort ","(send\n  (ivar :@(send\n  (send\n    (ivar :@refs) :max_keys) :map) sort join s) :map) sort ","@(send\n  (ivar :@receivers) :map) sort join s map ","@(send\n  (send\n    (ivar :@refs) :max_keys) :map) sort join s map "]}," Reek FeatureEnvy recognise?":{"type":"method","name":"recognise?","children":[],"call":["(send\n  (lvar :receivers) :map) sort join ","(send\n  (lvar :receivers) :map) sort ","Printer  print ","receivers map ","calls [] == ","calls [] ","calls keys select ","calls keys ","max > ","calls values max ","calls values ","calls empty? ","(send\n  (ivar :@receivers) :include?\n  (sym :self)) ! ","@receivers include? ","FeatureEnvy  max_keys ","refs self_is_max? ! ","refs self_is_max? ","calls values max  > ","calls values calls values max  ","(send\n  (ivar :(send\n  (lvar :receivers) :map) sort join s) :include?\n  (sym :self)) ! ","(send\n  (ivar :FeatureEnvy  max_keys ) :include?\n  (sym :self)) ! ","(send\n  (lvar :receivers) :map) sort join s include? ","FeatureEnvy  max_keys  include? ","FeatureEnvy  calls values max _keys ","refs self_is_calls values max ? ! ","refs self_is_calls values max ? "]}," Reek FeatureEnvy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek LongBlock detailed_report":{"type":"method","name":"detailed_report","children":[],"call":[]}," Reek LongBlock recognise?":{"type":"method","name":"recognise?","children":[],"call":[" count_statements > "," count_statements "]}," Reek LongBlock count_statements":{"type":"method","name":"count_statements","children":[],"call":["exp [] [] == ","exp [] [] ","exp [] ","Array  === ","exp length - ","exp length "]}," Reek LongMethod detailed_report":{"type":"method","name":"detailed_report","children":[],"call":[]}," Reek LongMethod recognise?":{"type":"method","name":"recognise?","children":[],"call":[" count_statements > "," count_statements ","num_stmts > "]}," Reek LongMethod count_statements":{"type":"method","name":"count_statements","children":[],"call":["exp [] [] == ","exp [] [] ","exp [] ","Array  === ","exp length - ","exp length "]}," Reek LongYieldList detailed_report":{"type":"method","name":"detailed_report","children":[],"call":[]}," Reek LongYieldList recognise?":{"type":"method","name":"recognise?","children":[],"call":["args length > ","args length ","Array  === ","@num_params > ","args length  > "]}," Reek LongParameterList detailed_report":{"type":"method","name":"detailed_report","children":[],"call":["@context to_s "]}," Reek LongParameterList recognise?":{"type":"method","name":"recognise?","children":[],"call":[" count_parameters > "," count_parameters ","@num_params > ","LongParameterList  count_parameters ","LongParameterList  count_parameters  > "]}," Reek LongParameterList count_parameters":{"type":"method","name":"count_parameters","children":[],"call":["exp [] [] == ","exp [] [] ","exp [] ","Array  === ","exp length - ","exp length "]}," Reek Smell report":{"type":"method","name":"report","children":[],"call":[" detailed_report "," name "]}," Reek Smell name":{"type":"method","name":"name","children":[],"call":[" class convert_camel_case "," class name split [] "," class name split "," class name "," class "]}," Reek Smell ==":{"type":"method","name":"==","children":[],"call":[" report == ","other report "," report "]}," Reek Smell check":{"type":"method","name":"check","children":[],"call":[]}," Reek Smell initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Smell convert_camel_case":{"type":"method","name":"convert_camel_case","children":[],"call":[]}," Reek Report to_s":{"type":"method","name":"to_s","children":[],"call":["(send\n  (ivar :@smells) :map) join ","smell report ","@smells map ","(send\n  (ivar :@report) :map) join ","@report map "]}," Reek Report []":{"type":"method","name":"[]","children":[],"call":["@smells [] ","@smells to_a [] ","@smells to_a ","@report to_a [] ","@report to_a "]}," Reek Report length":{"type":"method","name":"length","children":[],"call":["@smells length ","@report length "]}," Reek Report empty?":{"type":"method","name":"empty?","children":[],"call":["@smells empty? ","@report empty? "]}," Reek Report <<":{"type":"method","name":"<<","children":[],"call":["@smells << ","@report << "]}," Reek Report initialize":{"type":"method","name":"initialize","children":[],"call":["SortedSet  new ","ReportSection  new "," Array map "," Array "]}," Reek Printer process_call":{"type":"method","name":"process_call","children":[],"call":[" s ","exp [] ","exp length > ","exp length ","Printer  print ","(str \".\") + ","Printer  format_array_args ","meth to_s == ","meth to_s "]}," Reek Printer process_const":{"type":"method","name":"process_const","children":[],"call":[" s ","exp [] inspect ","exp [] ","Printer  print "]}," Reek Printer process_gvar":{"type":"method","name":"process_gvar","children":[],"call":[" s ","exp [] inspect ","exp [] ","exp [] to_s "]}," Reek Printer process_dvar":{"type":"method","name":"process_dvar","children":[],"call":[" s ","exp [] inspect ","exp [] ","Printer  print "]}," Reek Printer process_lvar":{"type":"method","name":"process_lvar","children":[],"call":[" s ","exp [] inspect ","exp [] ","exp [] to_s "]}," Reek Printer print":{"type":"method","name":"print","children":[],"call":[" process ","sexp inspect "," raise ","Array  === ","sexp to_s "]}," Reek Printer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek MethodChecker process_iasgn":{"type":"method","name":"process_iasgn","children":[],"call":[" s "," process ","exp [] ","@calls [] ","@instance_variables << "]}," Reek MethodChecker process_lasgn":{"type":"method","name":"process_lasgn","children":[],"call":[" s "," process ","exp [] ","@calls [] ","@lvars << ","@local_variables << "]}," Reek MethodChecker process_ivar":{"type":"method","name":"process_ivar","children":[],"call":[" s ","@calls [] ","UncommunicativeName  check ","exp [] ","@instance_variables << "]}," Reek MethodChecker process_vcall":{"type":"method","name":"process_vcall","children":[],"call":[" s ","@calls [] "]}," Reek MethodChecker process_cfunc":{"type":"method","name":"process_cfunc","children":[],"call":[" s ","@calls [] "]}," Reek MethodChecker process_fcall":{"type":"method","name":"process_fcall","children":[],"call":[" s "," process ","exp [] ","exp length > ","exp length ","@calls [] ","exp length >= ","@refs record_reference_to_self "]}," Reek MethodChecker process_call":{"type":"method","name":"process_call","children":[],"call":[" s "," process ","exp [] ","exp length > ","exp length ","@calls [] ","receiver == ","receiver [] != ","receiver [] ","receiver length == ","receiver length ","Array  === "," process_actual_parameters "," record_receiver ","@refs record_ref "," deal_with_receiver ","receiver []  == "," process  == ","receiver []  [] != "," process  [] != ","receiver []  [] "," process  [] ","receiver []  length == "," process  length == ","receiver []  length "," process  length "," record_receiver []  "," record_ process  "," deal_with_receiver []  "," deal_with_ process  "]}," Reek MethodChecker process_yield":{"type":"method","name":"process_yield","children":[],"call":[" s "," process ","exp [] ","LongYieldList  check ","Smells LongYieldList  check "]}," Reek MethodChecker process_block":{"type":"method","name":"process_block","children":[],"call":[" s "," process ","exp [] each ","exp [] ","LongBlock  check ","LongMethod  check "," count_statements ","MethodChecker  count_statements "]}," Reek MethodChecker process_iter":{"type":"method","name":"process_iter","children":[],"call":[" s "," process ","exp [] each ","exp [] ","NestedIterators  check "," cascade_iter ","Smells NestedIterators  check "]}," Reek MethodChecker process_attrset":{"type":"method","name":"process_attrset","children":[],"call":[" s ","@calls [] ","(str \"^@\") === ","exp [] to_s ","exp [] "]}," Reek MethodChecker process_args":{"type":"method","name":"process_args","children":[],"call":[" s ","UncommunicativeName  check ","exp each ","LongParameterList  check ","exp [] ","Smells LongParameterList  check "]}," Reek MethodChecker process_defn":{"type":"method","name":"process_defn","children":[],"call":[" s ","FeatureEnvy  check ","UtilityFunction  check ","UncommunicativeName  check ","@lvars each "," process ","exp [] ","LongMethod  check "," check_method_properties ","name to_s "]}," Reek MethodChecker initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new ","Hash  new ","ObjectRefs  new "]}," Reek ClassChecker process_defn":{"type":"method","name":"process_defn","children":[],"call":[" s ","bc process ","Reek MethodChecker  new ","Reek MethodChecker  new process ","Reek MethodChecker  new  process "]}," Reek ClassChecker process_class":{"type":"method","name":"process_class","children":[],"call":[" s "," process ","exp [] each ","exp [] ","superclass == ","LargeClass  check ","exp [] to_s ","Smells LargeClass  check ","exp []  == "]}," Reek ClassChecker initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Checker check_parse_tree":{"type":"method","name":"check_parse_tree","children":[],"call":[" process ","sexp each "]}," Reek Checker to_s":{"type":"method","name":"to_s","children":[],"call":[" description "]}," Reek Checker check_object":{"type":"method","name":"check_object","children":[],"call":[" check_parse_tree ","ParseTree  new parse_tree ","ParseTree  new "]}," Reek Checker check_source":{"type":"method","name":"check_source","children":[],"call":[" check_parse_tree ","ParseTree  new parse_tree_for_string ","ParseTree  new ","Checker  parse_tree_for "]}," Reek Checker report":{"type":"method","name":"report","children":[],"call":["@smells << "]}," Reek Checker initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek NestedIterators detailed_report":{"type":"method","name":"detailed_report","children":[],"call":[]}," Reek NestedIterators recognise?":{"type":"method","name":"recognise?","children":[],"call":[]}," Reek Smell eql?":{"type":"method","name":"eql?","children":[],"call":[" report eql? ","other report "," report "]}," Reek Smell <=>":{"type":"method","name":"<=>","children":[],"call":[" report <=> ","other report "," report ","Options  [] compare ","Options  [] "]}," Reek Smell hash":{"type":"method","name":"hash","children":[],"call":[" report hash "," report "]}," Reek Report include?":{"type":"method","name":"include?","children":[],"call":["@smells include? "]}," Reek Printer process_iter":{"type":"method","name":"process_iter","children":[],"call":[" s "]}," Reek MethodChecker count_statements":{"type":"method","name":"count_statements","children":[],"call":["exp [] [] == ","exp [] [] ","exp [] ","Array  === ","exp length - ","exp length "]}," Reek Smell to_s":{"type":"method","name":"to_s","children":[],"call":[" report "]}," Reek SortBySmell compare":{"type":"method","name":"compare","children":[],"call":["smell1 report <=> ","smell2 report ","smell1 report "]}," Reek SortByContext compare":{"type":"method","name":"compare","children":[],"call":["smell1 detailed_report <=> ","smell2 detailed_report ","smell1 detailed_report "]}," Reek Options parse":{"type":"method","name":"parse","children":[],"call":["@parser parse! ","ReekCommand  new "]}," Reek Options parse_args":{"type":"method","name":"parse_args","children":[],"call":[]}," Reek Options []":{"type":"method","name":"[]","children":[],"call":[]}," Reek Options default_options":{"type":"method","name":"default_options","children":[],"call":[]}," Reek FeatureEnvy max_keys":{"type":"method","name":"max_keys","children":[],"call":[]}," Reek Smell recognise?":{"type":"method","name":"recognise?","children":[],"call":["@context != "]}," Reek Options fatal_error":{"type":"method","name":"fatal_error","children":[],"call":[]}," Reek MethodChecker process_actual_parameters":{"type":"method","name":"process_actual_parameters","children":[],"call":["@calls [] ","param == ","param [] == ","param [] ","param length == ","param length ","Array  === ","exp [] each ","exp [] ","exp [] == "]}," Reek MethodChecker check_method_properties":{"type":"method","name":"check_method_properties","children":[],"call":["LongMethod  check ","FeatureEnvy  check ","UtilityFunction  check ","@calls [] "," is_override? ","UncommunicativeName  check ","@lvars each "," method_name == "," method_name ","smell examine ","SMELLS  [] each ","SMELLS  [] "]}," Reek MethodChecker is_override?":{"type":"method","name":"is_override?","children":[],"call":["klass superclass instance_methods include? ","@description to_s split [] ","@description to_s split ","@description to_s ","klass superclass instance_methods ","klass superclass ","Object  const_get ","MethodChecker  is_override? "," method_name ","Object  const_get  superclass instance_methods include? ","Object  const_get  superclass instance_methods ","Object  const_get  superclass "]}," Reek MethodChecker unpack_array":{"type":"method","name":"unpack_array","children":[],"call":[]}," Reek MethodChecker record_receiver":{"type":"method","name":"record_receiver","children":[],"call":["@calls [] ","MethodChecker  is_global_variable? ","MethodChecker  unpack_array "," process "]}," Reek MethodChecker is_global_variable?":{"type":"method","name":"is_global_variable?","children":[],"call":[]}," Reek FileChecker process_defn":{"type":"method","name":"process_defn","children":[],"call":[" s ","Reek MethodChecker  new process ","Reek MethodChecker  new "]}," Reek FileChecker process_class":{"type":"method","name":"process_class","children":[],"call":[" s ","Reek ClassChecker  new process ","Reek ClassChecker  new "]}," Reek FileChecker initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek UncommunicativeName effective_length":{"type":"method","name":"effective_length","children":[],"call":[]}," Reek LargeClass non_inherited_methods":{"type":"method","name":"non_inherited_methods","children":[],"call":[]}," Reek Printer process_colon2":{"type":"method","name":"process_colon2","children":[],"call":[" s ","Printer  print ","exp [] "]}," Reek Printer process_cvar":{"type":"method","name":"process_cvar","children":[],"call":[" s ","Printer  print ","exp [] "]}," Reek Printer process_fcall":{"type":"method","name":"process_fcall","children":[],"call":[" s ","Printer  print ","meth to_s ","exp [] "," process_vcall "]}," Reek Printer process_vcall":{"type":"method","name":"process_vcall","children":[],"call":[" s ","Printer  print ","meth to_s ","exp [] "]}," Reek Printer process_ivar":{"type":"method","name":"process_ivar","children":[],"call":[" s ","exp [] to_s ","exp [] "]}," Reek Printer process_xstr":{"type":"method","name":"process_xstr","children":[],"call":[" s ","exp [] "]}," Reek Printer process_str":{"type":"method","name":"process_str","children":[],"call":[" s ","exp [] inspect ","exp [] "]}," Reek Printer process_lit":{"type":"method","name":"process_lit","children":[],"call":[" s ","exp [] to_s ","exp [] "]}," Reek Printer process_array":{"type":"method","name":"process_array","children":[],"call":[" s ","Printer  print ","exp [] ","(send\n  (send\n    (lvar :exp) :[]\n    (irange\n      (int 1)\n      (int -1))) :map) join ","exp [] map "]}," Reek Printer process_default":{"type":"method","name":"process_default","children":[],"call":[" s ","exp inspect "]}," Reek ObjectRefs self_is_max?":{"type":"method","name":"self_is_max?","children":[],"call":["@refs [] == "," max_refs ","@refs [] "," max_keys length == "," max_keys length "," max_keys "]}," Reek ObjectRefs max_keys":{"type":"method","name":"max_keys","children":[],"call":["(send\n  (ivar :@refs) :reject) keys ","v != ","@refs reject "," max_refs ","val != ","  max_refs _refs "]}," Reek ObjectRefs max_refs":{"type":"method","name":"max_refs","children":[],"call":["@refs values max ","@refs values "]}," Reek ObjectRefs refs_to_self":{"type":"method","name":"refs_to_self","children":[],"call":["@refs [] "]}," Reek ObjectRefs record_ref":{"type":"method","name":"record_ref","children":[],"call":["@refs [] "," record_reference_to_self ","exp [] "]}," Reek ObjectRefs record_reference_to_self":{"type":"method","name":"record_reference_to_self","children":[],"call":[" record_ref "]}," Reek ObjectRefs initialize":{"type":"method","name":"initialize","children":[],"call":[" record_reference_to_self ","Hash  new "]}," Reek MethodChecker method_name":{"type":"method","name":"method_name","children":[],"call":["@description to_s split [] ","@description to_s split ","@description to_s "]}," Reek MethodChecker process_self":{"type":"method","name":"process_self","children":[],"call":[" s "]}," Reek MethodChecker process_gvar":{"type":"method","name":"process_gvar","children":[],"call":[" s "]}," Reek MethodChecker process_lvar":{"type":"method","name":"process_lvar","children":[],"call":[" s "]}," Reek MethodChecker process_lit":{"type":"method","name":"process_lit","children":[],"call":[" s ","val == ","exp [] ","exp []  == "]}," Reek Checker process_default":{"type":"method","name":"process_default","children":[],"call":[" s "," process ","Array  === ","exp [] each ","exp [] "]}," Reek Checker parse_tree_for":{"type":"method","name":"parse_tree_for","children":[],"call":[]}," Reek read":{"type":"method","name":"read","children":[],"call":[]}," Reek ControlCouple detailed_report":{"type":"method","name":"detailed_report","children":[],"call":["Printer  print "]}," Reek ControlCouple recognise?":{"type":"method","name":"recognise?","children":[],"call":["@args include? ","@couple [] ","cond [] == ","cond [] "]}," Reek ControlCouple initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek UtilityFunction initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek RakeTask source_file_list":{"type":"method","name":"source_file_list","children":[],"call":["FileList  [] ","ENV  [] "]}," Reek RakeTask sort_option":{"type":"method","name":"sort_option","children":[],"call":["ENV  [] "]}," Reek RakeTask ruby_options":{"type":"method","name":"ruby_options","children":[],"call":["@ruby_opts clone << ","@ruby_opts clone ","@libs join "]}," Reek RakeTask cmd_words":{"type":"method","name":"cmd_words","children":[],"call":["(send\n  (send\n    (self) :class) :ruby_exe) + + + + "," source_file_list collect "," source_file_list ","(send\n  (send\n    (self) :class) :ruby_exe) + + + "," sort_option ","(send\n  (send\n    (self) :class) :ruby_exe) + + "," class reek_script "," class ","(send\n  (send\n    (self) :class) :ruby_exe) + "," ruby_options "," class ruby_exe ","(send\n  (const nil :RakeTask) :ruby_exe) + + + + ","(send\n  (const nil :RakeTask) :ruby_exe) + + + ","(send\n  (const nil :RakeTask) :ruby_exe) + + ","RakeTask  reek_script ","(send\n  (const nil :RakeTask) :ruby_exe) + ","RakeTask  ruby_exe "]}," Reek RakeTask ruby_exe":{"type":"method","name":"ruby_exe","children":[],"call":[]}," Reek RakeTask reek_script":{"type":"method","name":"reek_script","children":[],"call":[]}," Reek RakeTask run_task":{"type":"method","name":"run_task","children":[],"call":[" raise "," fail_on_error "," system ! "," system "," puts "," cmd_words join "," cmd_words "," source_file_list empty? "," source_file_list ","  cmd_words join _words join ","  cmd_words join _words "]}," Reek RakeTask define":{"type":"method","name":"define","children":[],"call":[" run_task "," task "," name "," desc "," Rake  application last_comment "," Rake  application "]}," Reek RakeTask initialize":{"type":"method","name":"initialize","children":[],"call":[" define "," block_given? ","File  expand_path ","File  dirname + ","File  dirname "]}," Reek MethodChecker process_if":{"type":"method","name":"process_if","children":[],"call":[" s ","ControlCouple  check ","exp [] "," process ","Smells ControlCouple  check "," deal_with_conditional "]}," Reek get_source":{"type":"method","name":"get_source","children":[],"call":[]}," Reek Smells UtilityFunction detailed_report":{"type":"method","name":"detailed_report","children":[],"call":[]}," Reek Smells UtilityFunction examine":{"type":"method","name":"examine","children":[],"call":[]}," Reek Smells UncommunicativeName detailed_report":{"type":"method","name":"detailed_report","children":[],"call":[]}," Reek Smells UncommunicativeName initialize":{"type":"method","name":"initialize","children":[],"call":["config [] "]}," Reek Smells UncommunicativeName is_bad_name?":{"type":"method","name":"is_bad_name?","children":[],"call":["patt === ","@reject detect ","@accept include? ","var == ","name effective_name "," value detect "," value "," value include? ","name effective_name  == "]}," Reek Smells UncommunicativeName consider":{"type":"method","name":"consider","children":[],"call":[]}," Reek Smells UncommunicativeName examine":{"type":"method","name":"examine","children":[],"call":[]}," Reek Smells Smell to_s":{"type":"method","name":"to_s","children":[],"call":[" report "]}," Reek Smells Smell report":{"type":"method","name":"report","children":[],"call":[" detailed_report "," name "]}," Reek Smells Smell name":{"type":"method","name":"name","children":[],"call":["Smell  convert_camel_case "," class name split [] "," class name split "," class name "," class "]}," Reek Smells Smell <=>":{"type":"method","name":"<=>","children":[],"call":["Options  [] compare ","Options  [] "]}," Reek Smells Smell hash":{"type":"method","name":"hash","children":[],"call":[" report hash "," report "]}," Reek Smells Smell recognise?":{"type":"method","name":"recognise?","children":[],"call":["@context != "]}," Reek Smells Smell check":{"type":"method","name":"check","children":[],"call":[]}," Reek Smells Smell initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Smells Smell convert_camel_case":{"type":"method","name":"convert_camel_case","children":[],"call":[]}," Reek Smells NestedIterators detailed_report":{"type":"method","name":"detailed_report","children":[],"call":[]}," Reek Smells NestedIterators recognise?":{"type":"method","name":"recognise?","children":[],"call":[]}," Reek Smells LongYieldList detailed_report":{"type":"method","name":"detailed_report","children":[],"call":[]}," Reek Smells LongYieldList recognise?":{"type":"method","name":"recognise?","children":[],"call":["@num_params > ","Array  === ","args length ","args length  > "]}," Reek Smells LongParameterList detailed_report":{"type":"method","name":"detailed_report","children":[],"call":["@context to_s "]}," Reek Smells LongParameterList recognise?":{"type":"method","name":"recognise?","children":[],"call":["@num_params > ","LongParameterList  count_parameters ","LongParameterList  count_parameters  > "]}," Reek Smells LongParameterList count_parameters":{"type":"method","name":"count_parameters","children":[],"call":[]}," Reek Smells LongMethod detailed_report":{"type":"method","name":"detailed_report","children":[],"call":[]}," Reek Smells LongMethod initialize":{"type":"method","name":"initialize","children":[],"call":["config [] "]}," Reek Smells LongMethod examine":{"type":"method","name":"examine","children":[],"call":[]}," Reek Smells LargeClass detailed_report":{"type":"method","name":"detailed_report","children":[],"call":[]}," Reek Smells LargeClass recognise?":{"type":"method","name":"recognise?","children":[],"call":["@num_methods > ","LargeClass  non_inherited_methods length ","LargeClass  non_inherited_methods ","Object  const_get ","LargeClass  non_inherited_methods length  > "]}," Reek Smells LargeClass non_inherited_methods":{"type":"method","name":"non_inherited_methods","children":[],"call":[]}," Reek Smells FeatureEnvy detailed_report":{"type":"method","name":"detailed_report","children":[],"call":[]}," Reek Smells FeatureEnvy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Smells FeatureEnvy examine":{"type":"method","name":"examine","children":[],"call":[]}," Reek Smells Duplication detailed_report":{"type":"method","name":"detailed_report","children":[],"call":["Printer  print "]}," Reek Smells Duplication initialize":{"type":"method","name":"initialize","children":[],"call":["config [] "]}," Reek Smells Duplication look_for_duplicate_calls":{"type":"method","name":"look_for_duplicate_calls","children":[],"call":[]}," Reek Smells Duplication examine":{"type":"method","name":"examine","children":[],"call":[]}," Reek Smells ControlCouple detailed_report":{"type":"method","name":"detailed_report","children":[],"call":["Printer  print "]}," Reek Smells ControlCouple recognise?":{"type":"method","name":"recognise?","children":[],"call":["@args include? ","@couple [] ","cond [] == ","cond [] "]}," Reek Smells ControlCouple initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Printer format_array_args":{"type":"method","name":"format_array_args","children":[],"call":[]}," Reek Printer process_true":{"type":"method","name":"process_true","children":[],"call":[" s "]}," Reek Printer process_evstr":{"type":"method","name":"process_evstr","children":[],"call":[" s ","Printer  print ","exp [] "]}," Reek Printer process_dstr":{"type":"method","name":"process_dstr","children":[],"call":[" s ","\" + + ","\" + ","(send\n  (send\n    (lvar :exp) :[]\n    (irange\n      (int 1)\n      (int -1))) :map) join ","Printer  print ","exp [] map ","exp [] "]}," Reek Printer process_lasgn":{"type":"method","name":"process_lasgn","children":[],"call":[" s ","Printer  print ","exp [] "]}," Reek Printer process_nth_ref":{"type":"method","name":"process_nth_ref","children":[],"call":[" s ","exp [] "]}," Reek MethodChecker deal_with_receiver":{"type":"method","name":"deal_with_receiver","children":[],"call":[" process ","@refs record_ref ","meth != ","receiver [] == ","receiver [] "]}," Reek MethodChecker deal_with_conditional":{"type":"method","name":"deal_with_conditional","children":[],"call":[" process "]}," Reek MethodChecker cascade_iter":{"type":"method","name":"cascade_iter","children":[],"call":[" process ","exp [] each ","exp [] "]}," Reek MethodChecker description":{"type":"method","name":"description","children":[],"call":[]}," Reek Checker process_defn":{"type":"method","name":"process_defn","children":[],"call":[" s ","Reek MethodChecker  new process ","Reek MethodChecker  new "]}," Reek YieldCallContext initialize":{"type":"method","name":"initialize","children":[],"call":["args [] ","exp [] ","exp []  [] "]}," Reek StopContext outer_name":{"type":"method","name":"outer_name","children":[],"call":[]}," Reek StopContext record_local_variable":{"type":"method","name":"record_local_variable","children":[],"call":[]}," Reek StopContext record_instance_variable":{"type":"method","name":"record_instance_variable","children":[],"call":[]}," Reek StopContext record_parameter":{"type":"method","name":"record_parameter","children":[],"call":[]}," Reek StopContext record_method":{"type":"method","name":"record_method","children":[],"call":[]}," Reek StopContext record_call_to":{"type":"method","name":"record_call_to","children":[],"call":[]}," Reek StopContext record_depends_on_self":{"type":"method","name":"record_depends_on_self","children":[],"call":[]}," Reek StopContext refs":{"type":"method","name":"refs","children":[],"call":[]}," Reek StopContext num_statements":{"type":"method","name":"num_statements","children":[],"call":[]}," Reek StopContext is_overriding_method?":{"type":"method","name":"is_overriding_method?","children":[],"call":[]}," Reek StopContext inside_a_block?":{"type":"method","name":"inside_a_block?","children":[],"call":[]}," Reek StopContext has_parameter":{"type":"method","name":"has_parameter","children":[],"call":[]}," Reek StopContext find_module":{"type":"method","name":"find_module","children":[],"call":["@myself const_get ","@myself const_defined? ","name to_s "]}," Reek StopContext count_statements":{"type":"method","name":"count_statements","children":[],"call":[]}," Reek StopContext initialize":{"type":"method","name":"initialize","children":[],"call":["ObjectRefs  new "]}," Reek Source to_source":{"type":"method","name":"to_source","children":[],"call":[]}," Array to_source":{"type":"method","name":"to_source","children":[],"call":["Reek Source  from_pathlist "]}," String to_source":{"type":"method","name":"to_source","children":[],"call":["Reek Source  from_s "]}," File to_source":{"type":"method","name":"to_source","children":[],"call":["Reek Source  from_f "]}," Reek Spec reek_only_of":{"type":"method","name":"reek_only_of","children":[],"call":["ShouldReekOnlyOf  new "]}," Reek Spec ShouldReekOnlyOf failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@sniffer desc ","@examiner description "]}," Reek Spec ShouldReekOnlyOf failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@source report "," report ","@sniffer desc ","@examiner description ","Cli ReportFormatter  format_list ","(send\n  (ivar :@all_smells) :map) join ","smell report ","@all_smells map "]}," Reek Spec ShouldReekOnlyOf matches?":{"type":"method","name":"matches?","children":[],"call":["@source has_smell? ","@source report length == ","@source report length ","@source report ","actual to_source ","@sniffer smells_only_of? ","actual sniff "," matches_examiner? ","Examiner  new ","@sniffer has_smell? ","@sniffer num_smells == ","@sniffer num_smells ","Core Examiner  new "," configuration ","actual to_source  has_smell? ","actual to_source  report length == ","actual to_source  report length ","actual to_source  report ","actual sniff  smells_only_of? ","actual sniff  has_smell? ","actual sniff  num_smells == ","actual sniff  num_smells "]}," Reek Spec ShouldReekOnlyOf initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Spec reek_of":{"type":"method","name":"reek_of","children":[],"call":["ShouldReekOf  new "]}," Reek Spec ShouldReekOf failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@source report "," report ","@sniffer desc ","@examiner description "]}," Reek Spec ShouldReekOf failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@sniffer desc ","@examiner description "]}," Reek Spec ShouldReekOf matches?":{"type":"method","name":"matches?","children":[],"call":["@source has_smell? ","actual to_source ","@sniffer has_smell? ","actual sniff ","warning matches? ","@all_smells any? ","@examiner smells ","Examiner  new ","@examiner all_active_smells ","Core Examiner  new "," matching_smell_details? "," matching_smell_types? "," set_failure_messages "," examiner= "," configuration "," smell_details "," smell_category "," all_smells any? "," all_smells "," all_smells= "," examiner smells "," examiner ","UnsafeExaminer  new "," smell_type ","actual to_source  has_smell? ","actual sniff  has_smell? ","@examiner smells  any? ","@examiner all_active_smells  any? ","Examiner  new  smells ","Core Examiner  new  smells ","Examiner  new  all_active_smells ","Core Examiner  new  all_active_smells "]}," Reek Spec ShouldReekOf initialize":{"type":"method","name":"initialize","children":[],"call":[" normalize ","@configuration load_values "," smell_type ","configuration load_values ","smell_type to_s "]}," Reek Spec reek":{"type":"method","name":"reek","children":[],"call":["ShouldReek  new ","Dir  [] "]}," Reek Spec ShouldReek failure_message_for_should_not":{"type":"method","name":"failure_message_for_should_not","children":[],"call":["@source report "," report ","Cli ReportFormatter  format_list ","@examiner smells "," list_smells "]}," Reek Spec ShouldReek failure_message_for_should":{"type":"method","name":"failure_message_for_should","children":[],"call":["@sniffer desc ","@examiner description "]}," Reek Spec ShouldReek matches?":{"type":"method","name":"matches?","children":[],"call":["@source smelly? ","actual to_source ","@sniffer smelly? ","actual sniff ","@examiner smelly? ","Examiner  new ","Core Examiner  new "," examiner smelly? "," examiner "," examiner= "," configuration ","actual to_source  smelly? ","actual sniff  smelly? ","Examiner  new  smelly? ","Core Examiner  new  smelly? "]}," Reek SourceList report":{"type":"method","name":"report","children":[],"call":["(send\n  (block\n    (send\n      (ivar :@sources) :select)\n    (args\n      (arg :src))\n    (send\n      (lvar :src) :smelly?)) :map) join ","warnings to_s ","warnings length ","src report ","(send\n  (ivar :@sources) :select) map ","src smelly? ","@sources select ","ReportList  new ","src report  to_s ","src report  length "]}," Reek SourceList smelly?":{"type":"method","name":"smelly?","children":[],"call":["source smelly? ","@sources any? "]}," Reek SourceList initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Source to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Reek Source has_smell?":{"type":"method","name":"has_smell?","children":[],"call":["smell matches? "," report any? "," report "]}," Reek Source smelly?":{"type":"method","name":"smelly?","children":[],"call":[" report length > "," report length "," report "]}," Reek Source report":{"type":"method","name":"report","children":[],"call":["CodeParser  new check_source ","CodeParser  new ","SmellConfig  new load_local smell_listeners ","SmellConfig  new load_local ","SmellConfig  new ","Report  new ","parser process "," generate_syntax_tree ","@cf smell_listeners ","CodeParser  new  process "]}," Reek Source initialize":{"type":"method","name":"initialize","children":[],"call":["@cf load_local ","SmellConfig  new ","@cf load_local  load_local ","SmellConfig  new  load_local "]}," Reek Source from_pathlist":{"type":"method","name":"from_pathlist","children":[],"call":[]}," Reek Source from_path":{"type":"method","name":"from_path","children":[],"call":[]}," Reek Source from_f":{"type":"method","name":"from_f","children":[],"call":[]}," Reek Source from_s":{"type":"method","name":"from_s","children":[],"call":[]}," Reek Source from_io":{"type":"method","name":"from_io","children":[],"call":[]}," Reek Smells UtilityFunction examine_context":{"type":"method","name":"examine_context","children":[],"call":["report << ","SmellWarning  new ","method depends_on_instance? ","method num_statements == ","method num_statements ","method calls keys length == ","method calls keys length ","method calls keys ","method calls "," found ","method calls keys length <= "," value ","method_ctx exp line ","method_ctx exp ","method_ctx full_name "," num_helper_methods <= "," num_helper_methods "," depends_on_instance? ","method_ctx num_statements == ","method_ctx num_statements ","@smells_found << ","method_ctx depends_on_instance? ","method_ctx exp body ","method_ctx references_self? "," num_helper_methods zero? ","method_ctx exp singleton_method? ","method_ctx singleton_method? "," smell_warning ","ctx full_name ","ctx exp line ","ctx exp "," ignore_method? ","ctx references_self? ","ctx num_statements == ","ctx num_statements ","ctx singleton_method? ","@SmellWarning  new s_found << "," SmellWarning  new _warning "]}," Reek Smells UncommunicativeName consider_name":{"type":"method","name":"consider_name","children":[],"call":["report << ","SmellWarning  new "," is_bad_name? ","@accept include? ","context to_s ","context name "," found "," value include? "," value "," accept? "," is_bad_context name ? ","context context name  "]}," Reek Smells UncommunicativeName consider_variables":{"type":"method","name":"consider_variables","children":[],"call":["report << ","SmellWarning  new "," is_bad_name? ","context variable_names each ","context variable_names "," found "]}," Reek Smells UncommunicativeName examine_context":{"type":"method","name":"examine_context","children":[],"call":[" consider_variables "," consider_name "]}," Reek Smells UncommunicativeName contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek Smells UncommunicativeName default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek SmellConfig all_reekfiles":{"type":"method","name":"all_reekfiles","children":[],"call":[" all_reekfiles + ","Dir  [] "," all_reekfiles ","path == ","File  dirname ","File  exist? "]}," Reek SmellConfig load_local":{"type":"method","name":"load_local","children":[],"call":["@config value_merge! ","YAML  load_file "," all_reekfiles each "," all_reekfiles ","File  expand_path ","YAML  load_file push_keys ","File  expand_File  expand_path  "]}," Reek SmellConfig smell_listeners":{"type":"method","name":"smell_listeners","children":[],"call":["smell listen ","SMELL_CLASSES  each ","hash []= ","Hash  new "]}," Reek SmellConfig initialize":{"type":"method","name":"initialize","children":[],"call":["YAML  load_file ","File  join ","File  dirname "]}," Hash deep_copy":{"type":"method","name":"deep_copy","children":[],"call":["YAML  load ","YAML  dump "]}," Hash adopt":{"type":"method","name":"adopt","children":[],"call":[" deep_copy adopt! "," deep_copy "]}," Hash adopt!":{"type":"method","name":"adopt!","children":[],"call":[" []= "," [] "," has_key? ","Array  === ","other [] ","other keys each ","other keys "]}," Hash value_merge!":{"type":"method","name":"value_merge!","children":[],"call":[" [] adopt! ","other [] "," [] ","other keys each ","other keys "]}," Reek Smells SmellDetector smell_name":{"type":"method","name":"smell_name","children":[],"call":[" class name_words join "," class name_words "," class "]}," Reek Smells SmellDetector exception?":{"type":"method","name":"exception?","children":[],"call":["context matches? ","@exceptions length == ","@exceptions length ","@exceptions nil? "," value "]}," Reek Smells SmellDetector examine_context":{"type":"method","name":"examine_context","children":[],"call":[]}," Reek Smells SmellDetector examine":{"type":"method","name":"examine","children":[],"call":["report length > ","report length "," examine_context "," exception? ! "," exception? ","report size ","@smells_found length > ","@smells_found length ","@config enabled? ","@smells_found size "," config_for [] != "," config_for [] "," config_for "," enabled_for? "," smells_found ","@ examine_context ells_found length > ","@ examine_context ells_found length ","@ examine_context ells_found size ","  examine_context ells_found "]}," Reek Smells SmellDetector initialize":{"type":"method","name":"initialize","children":[],"call":["config [] ","Set  new ","SmellConfiguration  new ","Core SmellConfiguration  new "," class default_config merge "," class default_config "," class "," class default_config merge  [] "," class default_ class default_config merge  merge "," class default_ class default_config merge  "]}," Reek Smells SmellDetector listen":{"type":"method","name":"listen","children":[],"call":["detector listen_to "," create "," create  listen_to "]}," Reek Smells SmellDetector default_config":{"type":"method","name":"default_config","children":[],"call":["DEFAULT_EXCLUDE_SET  dup "]}," Reek Smells SmellDetector contexts":{"type":"method","name":"contexts","children":[],"call":[" class contexts "," class "]}," Reek Smells SmellDetector class_name":{"type":"method","name":"class_name","children":[],"call":[" name split [] "," name split "," name "]}," Class name_words":{"type":"method","name":"name_words","children":[],"call":["(send\n  (lvar :class_name) :gsub\n  (regexp\n    (str \"([a-z])([A-Z])\")\n    (regopt))) split ","class_name gsub "," name split [] "," name split "," name ","(send\n  (lvar : name split [] ) :gsub\n  (regexp\n    (str \"([a-z])([A-Z])\")\n    (regopt))) split "," name split []  gsub "]}," Reek Smells NestedIterators examine_context":{"type":"method","name":"examine_context","children":[],"call":["report << ","SmellWarning  new ","block nested_block? "," found ","iter [] line ","iter [] ","ctx full_name "," find_deepest_iterators map "," find_deepest_iterators "," value "," find_deepest_iterators each ","exp line ","depth > "," find_deepest_iterator "," smell_warning ","deepest_iterator exp line ","deepest_iterator exp "," max_nesting ","deepest_iterator depth "," configure_ignore_iterators "," find_ find_deepest_iterator s map "," find_ find_deepest_iterator s "," find_ find_deepest_iterator s each ","iter []  > ","deepest_iterator depth  > "," find_ find_deepest_iterator  "," SmellWarning  new _warning "," find_deepest_iterator  exp line "," find_deepest_iterator  exp ","deepest_iterator iter []  ","deepest_iterator deepest_iterator depth  "," find_deepest_iterator  depth "]}," Reek Smells NestedIterators contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek Smells LongYieldList initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Smells LongYieldList contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek Smells LongParameterList examine_context":{"type":"method","name":"examine_context","children":[],"call":["report << ","SmellWarning  new ","num_params <= ","ctx parameters length ","ctx parameters "," found "," value ","ctx exp line ","ctx exp ","ctx full_name ","ctx exp arg_names length ","ctx exp arg_names ","method_ctx parameters length ","method_ctx parameters ","count <= "," smell_warning ","exp line ","exp arg_names length ","exp arg_names ","ctx parameters length  <= ","ctx exp arg_names length  <= ","method_ctx parameters length  <= ","ctx ctx exp  line ","ctx ctx exp  ","ctx ctx exp  arg_names length ","ctx ctx exp  arg_names ","exp arg_names length  <= "," SmellWarning  new _warning ","ctx exp  line ","ctx exp  arg_names length ","ctx exp  arg_names "]}," Reek Smells LongParameterList initialize":{"type":"method","name":"initialize","children":[],"call":["config [] "]}," Reek Smells LongParameterList default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek Smells LongMethod examine_context":{"type":"method","name":"examine_context","children":[],"call":["report << ","SmellWarning  new ","num <= ","method num_statements "," found "," value ","ctx exp line ","ctx exp ","ctx full_name ","ctx num_statements ","method num_statements  <= ","ctx num_statements  <= ","method method num_statements _statements ","method ctx num_statements _statements ","ctx method num_statements _statements ","ctx ctx num_statements _statements "]}," Reek Smells LongMethod default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek Smells LargeClass examine_context":{"type":"method","name":"examine_context","children":[],"call":["report << ","SmellWarning  new ","num_methods <= ","klass num_methods "," check_num_ivars "," check_num_methods "," check_num_methods + "," value ","klass num_methods  <= ","klass klass num_methods  "," check_klass num_methods  "," check_klass num_methods  + "]}," Reek Smells LargeClass initialize":{"type":"method","name":"initialize","children":[],"call":["config [] "]}," Reek Smells LargeClass default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek Smells LargeClass contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek Smells FeatureEnvy examine_context":{"type":"method","name":"examine_context","children":[],"call":["report << ","SmellWarning  new ","SexpFormatter  format ","context envious_receivers each ","context envious_receivers "," found ","method_ctx exp line ","method_ctx exp ","method_ctx full_name ","ref format_ruby ","method_ctx envious_receivers map ","method_ctx envious_receivers ","@smells_found << ","Source SexpFormatter  format ","method_ctx envious_receivers each ","ref format ","ref to_s ","method_ctx references_self? ","refs size ","name to_s ","refs map "," smell_warning "," envious_receivers map "," envious_receivers ","ctx references_self? ","@SmellWarning  new s_found << "," SmellWarning  new _warning "]}," Reek Smells FeatureEnvy default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek Smells Duplication smelly_calls":{"type":"method","name":"smelly_calls","children":[],"call":["call_exp [] ","(send\n  (send\n    (lvar :method) :calls) :select) map ","key [] != ","key [] ","val > ","method calls select ","method calls "," value "]}," Reek Smells Duplication examine_context":{"type":"method","name":"examine_context","children":[],"call":["report << ","SmellWarning  new ","SexpFormatter  format "," smelly_calls each "," smelly_calls "," found ","call_data [] ","num == ","exp line ","copies map ","ctx full_name ","occurs == ","call_exp format_ruby ","copies length ","(send\n  (send nil :calls\n    (lvar :ctx)) :select) map "," allow_calls? ! "," allow_calls? ","copies length > "," calls select "," calls "," value ","Source SexpFormatter  format ","occurs <= "," calls each ","call_exp format "," SmellWarning  new y_calls each "," smelly_call_exp format_ruby s each "," smelly_Source SexpFormatter  format s each "," smelly_call_exp format s each "," SmellWarning  new y_calls "," smelly_call_exp format_ruby s "," smelly_Source SexpFormatter  format s "," smelly_call_exp format s ","call_exp format_ruby _data [] ","Source SexpFormatter  format _data [] ","call_exp format _data [] ","call_data []  == ","copies length  == ","call_exp format_ruby _exp format_ruby ","Source SexpFormatter  format _exp format_ruby ","call_exp format _exp format_ruby ","(send\n  (send nil :call_exp format_ruby s\n    (lvar :ctx)) :select) map ","(send\n  (send nil :Source SexpFormatter  format s\n    (lvar :ctx)) :select) map ","(send\n  (send nil :call_exp format s\n    (lvar :ctx)) :select) map "," allow_call_exp format_ruby s? ! "," allow_Source SexpFormatter  format s? ! "," allow_call_exp format s? ! "," allow_call_exp format_ruby s? "," allow_Source SexpFormatter  format s? "," allow_call_exp format s? "," call_exp format_ruby s select "," Source SexpFormatter  format s select "," call_exp format s select "," call_exp format_ruby s "," Source SexpFormatter  format s "," call_exp format s ","copies length  <= "," call_exp format_ruby s each "," Source SexpFormatter  format s each "," call_exp format s each ","call_exp format_ruby _exp format ","Source SexpFormatter  format _exp format ","call_exp format _exp format "]}," Reek Smells Duplication default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek Smells ControlCouple examine_context":{"type":"method","name":"examine_context","children":[],"call":["report << ","SmellWarning  new ","SexpFormatter  format ","cond if_expr ","cond tests_a_parameter? "," found ","ctx full_name ","exp line ","occurs map ","cond format_ruby "," control_parameters map "," control_parameters ","param to_s ","(sym :true) include? ","value [] ","ctx parameters default_assignments each ","ctx parameters default_assignments ","ctx parameters ","ctx if_expr ","ctx tests_a_parameter? ","Source SexpFormatter  format "," control_parameters each ","cond format ","cond tests_a_cond format_ruby eter? ","cond tests_a_Source SexpFormatter  format eter? ","cond tests_a_cond format eter? "," control_cond format_ruby eters map "," control_Source SexpFormatter  format eters map "," control_cond format eters map "," control_cond format_ruby eters "," control_Source SexpFormatter  format eters "," control_cond format eters ","cond format_ruby  to_s ","Source SexpFormatter  format  to_s ","cond format  to_s ","ctx cond format_ruby eters default_assignments each ","ctx Source SexpFormatter  format eters default_assignments each ","ctx cond format eters default_assignments each ","ctx cond format_ruby eters default_assignments ","ctx Source SexpFormatter  format eters default_assignments ","ctx cond format eters default_assignments ","ctx cond format_ruby eters ","ctx Source SexpFormatter  format eters ","ctx cond format eters ","ctx tests_a_cond format_ruby eter? ","ctx tests_a_Source SexpFormatter  format eter? ","ctx tests_a_cond format eter? "," control_cond format_ruby eters each "," control_Source SexpFormatter  format eters each "," control_cond format eters each "]}," Reek Smells ControlCouple default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek Smells ControlCouple contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek SmellWarning report":{"type":"method","name":"report","children":[],"call":["Options  [] gsub gsub gsub ","Options  [] gsub gsub ","@context to_s ","Options  [] gsub ","@smell smell_name ","Options  [] "," basic_report gsub "," basic_report ","format gsub gsub gsub gsub ","format gsub gsub gsub ","format gsub gsub ","format gsub ","@detector smell_name "," smell_name ","@status [] ","@smell [] ","@location [] "]}," Reek SmellWarning matches?":{"type":"method","name":"matches?","children":[],"call":["exp === ","patterns all? "," report ","smell_class to_s == ","@smell class class_name ","@smell class ","smell_class to_s "," contains_all? ","@detector class class_name ","@detector class ","@smell values include? ","klass to_s ","@smell values "," smell_classes include? "," smell_classes "," common_parameters_equal? "]}," Reek SmellWarning <=>":{"type":"method","name":"<=>","children":[],"call":[" report <=> ","other report "," report "," basic_report <=> ","other basic_report "," basic_report "," sort_key <=> ","other sort_key "," sort_key "," identifying_values <=> ","other identifying_values "," identifying_values "]}," Reek SmellWarning hash":{"type":"method","name":"hash","children":[],"call":[" report hash "," report "," basic_report hash "," basic_report "," sort_key hash "," sort_key "," identifying_values hash "," identifying_values "]}," Reek SmellWarning initialize":{"type":"method","name":"initialize","children":[],"call":["context to_s ","@smell merge! ","detector_class class name split [] ","detector_class class name split ","detector_class class name ","detector_class class ","masked ! ","SmellDescription  new "," parameters= ","options fetch "," message= "," lines= "," context= ","options fetch to_s "," smell_detector= "," freeze ","detector_class class name split []  merge! ","SmellDescription  new  merge! "]}," Reek SingletonMethodContext to_s":{"type":"method","name":"to_s","children":[],"call":["@outer outer_name "]}," Reek SingletonMethodContext outer_name":{"type":"method","name":"outer_name","children":[],"call":["@outer outer_name "]}," Reek SingletonMethodContext envious_receivers":{"type":"method","name":"envious_receivers","children":[],"call":[]}," Reek SingletonMethodContext initialize":{"type":"method","name":"initialize","children":[],"call":[" record_depends_on_self ","SexpFormatter  format ","exp [] ","Name  new "]}," Reek SexpFormatter format_all":{"type":"method","name":"format_all","children":[],"call":[]}," Reek SexpFormatter format":{"type":"method","name":"format","children":[],"call":[]}," Reek Report each":{"type":"method","name":"each","children":[],"call":["@report each "]}," Reek Options set_sort_option":{"type":"method","name":"set_sort_option","children":[],"call":[]}," Reek Options set_help_option":{"type":"method","name":"set_help_option","children":[],"call":[]}," Reek Options set_version_option":{"type":"method","name":"set_version_option","children":[],"call":[]}," Reek Options set_options":{"type":"method","name":"set_options","children":[],"call":["@@opts []= ","@parser on ","arg nil? ","@parser separator "," exit "," puts ","@parser program_name ","@parser banner= ","EXIT_STATUS  [] ","VersionCommand  new ","HelpCommand  new "," banner "]}," Reek Name to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Reek Name effective_name":{"type":"method","name":"effective_name","children":[],"call":["@name gsub "]}," Reek Name <=>":{"type":"method","name":"<=>","children":[],"call":["@name <=> ","other to_s "]}," Reek Name hash":{"type":"method","name":"hash","children":[],"call":["@name hash "]}," Reek Name initialize":{"type":"method","name":"initialize","children":[],"call":["sym to_s "]}," Reek Name resolve":{"type":"method","name":"resolve","children":[],"call":[]}," Reek ModuleContext variable_names":{"type":"method","name":"variable_names","children":[],"call":[]}," Reek ModuleContext outer_name":{"type":"method","name":"outer_name","children":[],"call":["@outer outer_name "]}," Reek ModuleContext find_module":{"type":"method","name":"find_module","children":[],"call":[" myself const_get "," myself "," myself const_defined? ","modname to_s ","@myself const_get ","@myself const_defined? ","@myself const_or_nil "]}," Reek ModuleContext myself":{"type":"method","name":"myself","children":[],"call":["@outer find_module "]}," Reek ModuleContext initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new "]}," Reek ModuleContext create":{"type":"method","name":"create","children":[],"call":[" new ","res [] ","Name  resolve ","exp [] ","Name  resolve  [] ","Name  Name  resolve olve "]}," Reek MethodContext variable_names":{"type":"method","name":"variable_names","children":[],"call":["@parameters + ","@parameters names + ","@parameters names ","@local_variables to_a "]}," Reek MethodContext envious_receivers":{"type":"method","name":"envious_receivers","children":[],"call":["@refs max_keys ","@refs self_is_max? "]}," Reek MethodContext to_s":{"type":"method","name":"to_s","children":[],"call":["@outer outer_name "]}," Reek MethodContext outer_name":{"type":"method","name":"outer_name","children":[],"call":["@outer outer_name "]}," Reek MethodContext record_parameter":{"type":"method","name":"record_parameter","children":[],"call":["@parameters << ","Name  new ","MethodContext  is_block_arg? "]}," Reek MethodContext is_block_arg?":{"type":"method","name":"is_block_arg?","children":[],"call":[]}," Reek MethodContext record_local_variable":{"type":"method","name":"record_local_variable","children":[],"call":["@local_variables << ","Name  new "]}," Reek MethodContext record_depends_on_self":{"type":"method","name":"record_depends_on_self","children":[],"call":[]}," Reek MethodContext record_call_to":{"type":"method","name":"record_call_to","children":[],"call":["@refs record_reference_to_self "," record_depends_on_self ","@refs record_ref ","meth == ","receiver [] ","receiver nil? ","exp [] ","@calls [] "," record_use_of_self "," check_for_attribute_declaration "," record_receiver "]}," Reek MethodContext has_parameter":{"type":"method","name":"has_parameter","children":[],"call":["@parameters include? ","sym to_s "]}," Reek MethodContext depends_on_instance?":{"type":"method","name":"depends_on_instance?","children":[],"call":[" is_overriding_method? "]}," Reek MethodContext count_statements":{"type":"method","name":"count_statements","children":[],"call":[]}," Reek MethodContext initialize":{"type":"method","name":"initialize","children":[],"call":["@outer record_method ","ObjectRefs  new ","Hash  new ","Name  new ","exp [] ","@parameters extend ","exp [] == ","exp []  extend "]}," Reek IfContext to_s":{"type":"method","name":"to_s","children":[],"call":["@outer to_s "]}," Reek IfContext outer_name":{"type":"method","name":"outer_name","children":[],"call":["@outer outer_name "]}," Reek IfContext tests_a_parameter?":{"type":"method","name":"tests_a_parameter?","children":[],"call":[" has_parameter ","@if_expr [] ","@if_expr [] == "]}," Reek IfContext initialize":{"type":"method","name":"initialize","children":[],"call":["exp [] "]}," Reek CodeParser check_parse_tree":{"type":"method","name":"check_parse_tree","children":[],"call":[" process ","sexp each "]}," Reek CodeParser pop":{"type":"method","name":"pop","children":[],"call":[" s ","@element outer ","@element outer  outer "]}," Reek CodeParser push":{"type":"method","name":"push","children":[],"call":[]}," Reek CodeParser check_smells":{"type":"method","name":"check_smells","children":[],"call":["smell examine ","@smells [] each ","@smells [] ","@sniffer examine "]}," Reek CodeParser handle_context":{"type":"method","name":"handle_context","children":[],"call":[" s "," check_smells "," process_default "," push ","klass new "]}," Reek CodeParser is_global_variable?":{"type":"method","name":"is_global_variable?","children":[],"call":[]}," Reek CodeParser is_expr?":{"type":"method","name":"is_expr?","children":[],"call":[]}," Reek CodeParser count_statements":{"type":"method","name":"count_statements","children":[],"call":[]}," Reek CodeParser process_self":{"type":"method","name":"process_self","children":[],"call":[" s ","@element record_depends_on_self ","@element record_use_of_self "]}," Reek CodeParser process_iasgn":{"type":"method","name":"process_iasgn","children":[],"call":[" process_default ","@element record_depends_on_self ","@element record_instance_variable ","exp [] "]}," Reek CodeParser process_lasgn":{"type":"method","name":"process_lasgn","children":[],"call":[" s "," process ","exp [] ","@element record_local_variable "," process_default "]}," Reek CodeParser process_ivar":{"type":"method","name":"process_ivar","children":[],"call":[" process_iasgn "]}," Reek CodeParser process_if":{"type":"method","name":"process_if","children":[],"call":[" handle_context ","@element count_statements "," count_clause ","exp [] ","@element record_conditional "]}," Reek CodeParser process_vcall":{"type":"method","name":"process_vcall","children":[],"call":[" s ","@element refs record_reference_to_self ","@element refs ","@element record_depends_on_self ","@element record_use_of_self "]}," Reek CodeParser process_cfunc":{"type":"method","name":"process_cfunc","children":[],"call":[" s ","@element record_depends_on_self "]}," Reek CodeParser process_fcall":{"type":"method","name":"process_fcall","children":[],"call":[" process_default ","@element refs record_reference_to_self ","@element refs ","@element record_depends_on_self ","@element record_use_of_self "]}," Reek CodeParser process_call":{"type":"method","name":"process_call","children":[],"call":[" process_default ","@element record_call_to ","@element check_for_attribute_declaration "]}," Reek CodeParser process_yield":{"type":"method","name":"process_yield","children":[],"call":[" handle_context ","exp [] "]}," Reek CodeParser process_block":{"type":"method","name":"process_block","children":[],"call":[" process_default ","@element count_statements ","CodeParser  count_statements "]}," Reek CodeParser process_dasgn_curr":{"type":"method","name":"process_dasgn_curr","children":[],"call":[" process_default ","@element record_parameter ","exp [] "]}," Reek CodeParser process_iter":{"type":"method","name":"process_iter","children":[],"call":[" handle_context ","exp [] "," process "," check_smells "," process_default "," push ","BlockContext  new "]}," Reek CodeParser process_lit":{"type":"method","name":"process_lit","children":[],"call":[" s ","@element record_depends_on_self ","val == ","exp [] ","exp []  == "]}," Reek CodeParser process_attrset":{"type":"method","name":"process_attrset","children":[],"call":[" s ","@element record_depends_on_self ","(str \"^@\") === ","exp [] to_s ","exp [] "]}," Reek CodeParser process_args":{"type":"method","name":"process_args","children":[],"call":[" s ","@element record_parameter ","exp [] each ","exp [] "]}," Reek CodeParser process_defs":{"type":"method","name":"process_defs","children":[],"call":[" handle_context ","exp [] "]}," Reek CodeParser process_defn":{"type":"method","name":"process_defn","children":[],"call":[" handle_context ","exp [] "]}," Reek CodeParser process_class":{"type":"method","name":"process_class","children":[],"call":[" s "," check_smells "," process_default ","@element is_struct? "," push ","ClassContext  create "," do_module_or_class "]}," Reek CodeParser process_module":{"type":"method","name":"process_module","children":[],"call":[" s "," check_smells "," process_default "," push ","ModuleContext  create "," do_module_or_class "]}," Reek CodeParser process_default":{"type":"method","name":"process_default","children":[],"call":[" s "," process ","Array  === ","exp [] each ","exp [] "]}," Reek CodeParser check_object":{"type":"method","name":"check_object","children":[],"call":[" check_parse_tree ","ParseTree  new parse_tree ","ParseTree  new "]}," Reek CodeParser check_source":{"type":"method","name":"check_source","children":[],"call":[" check_parse_tree ","CodeParser  parse_tree_for "]}," Reek CodeParser initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek CodeParser parse_tree_for":{"type":"method","name":"parse_tree_for","children":[],"call":[]}," Reek CodeContext to_s":{"type":"method","name":"to_s","children":[],"call":["@outer outer_name "]}," Reek CodeContext outer_name":{"type":"method","name":"outer_name","children":[],"call":[]}," Reek CodeContext num_methods":{"type":"method","name":"num_methods","children":[],"call":[]}," Reek CodeContext method_missing":{"type":"method","name":"method_missing","children":[],"call":["@outer send "]}," Reek CodeContext matches?":{"type":"method","name":"matches?","children":[],"call":["re === "," to_s ","strings any? ","@name to_s "," full_name ","@na@name to_s  to_s "," full_na@name to_s  "]}," Reek CodeContext initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek ClassContext variable_names":{"type":"method","name":"variable_names","children":[],"call":[]}," Reek ClassContext to_s":{"type":"method","name":"to_s","children":[],"call":["@outer outer_name "]}," Reek ClassContext outer_name":{"type":"method","name":"outer_name","children":[],"call":["@outer outer_name "]}," Reek ClassContext record_method":{"type":"method","name":"record_method","children":[],"call":["@parsed_methods << ","name to_s "]}," Reek ClassContext record_instance_variable":{"type":"method","name":"record_instance_variable","children":[],"call":["@instance_variables << ","Name  new "]}," Reek ClassContext num_methods":{"type":"method","name":"num_methods","children":[],"call":["meths length "," myself non_inherited_methods "," myself ","@parsed_methods length "," myself non_inherited_methods  length "]}," Reek ClassContext is_struct?":{"type":"method","name":"is_struct?","children":[],"call":["@superclass == "]}," Reek ClassContext is_overriding_method?":{"type":"method","name":"is_overriding_method?","children":[],"call":[" myself is_overriding_method? ","name to_s "," myself ","@myself is_overriding_method? "]}," Reek ClassContext find_module":{"type":"method","name":"find_module","children":[],"call":[" myself const_get "," myself "," myself const_defined? ","modname to_s ","@myself const_get ","@myself const_defined? ","@myself const_or_nil "]}," Reek ClassContext myself":{"type":"method","name":"myself","children":[],"call":["@outer find_module "]}," Reek ClassContext initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new ","exp [] "]}," Reek ClassContext create":{"type":"method","name":"create","children":[],"call":[]}," Class is_overriding_method?":{"type":"method","name":"is_overriding_method?","children":[],"call":[" superclass instance_methods include? "," superclass instance_methods "," superclass "," instance_methods include? "," instance_methods ","dads include? ","mine include? ","name to_sym "," superclass instance_methods  include? "," instance_methods  include? ","name to_name to_sym  "]}," Class non_inherited_methods":{"type":"method","name":"non_inherited_methods","children":[],"call":[" instance_methods + "," private_instance_methods "," instance_methods "]}," Reek BlockContext variable_names":{"type":"method","name":"variable_names","children":[],"call":["@parameters + ","@parameters names + ","@local_variables to_a ","@parameters names "]}," Reek BlockContext outer_name":{"type":"method","name":"outer_name","children":[],"call":["@outer outer_name "]}," Reek BlockContext record_parameter":{"type":"method","name":"record_parameter","children":[],"call":["@parameters << ","Name  new "]}," Reek BlockContext nested_block?":{"type":"method","name":"nested_block?","children":[],"call":["@outer inside_a_block? "]}," Reek BlockContext has_parameter":{"type":"method","name":"has_parameter","children":[],"call":["@outer has_parameter ","@parameters include? "]}," Reek BlockContext inside_a_block?":{"type":"method","name":"inside_a_block?","children":[],"call":[]}," Reek BlockContext initialize":{"type":"method","name":"initialize","children":[],"call":["Name  new ","Set  new ","@parameters extend ","exp [] ","exp []  extend "]}," Reek StopContext method_missing":{"type":"method","name":"method_missing","children":[],"call":[]}," Reek Source full_report":{"type":"method","name":"full_report","children":[],"call":[" report full_report "," report "]}," Reek Source generate_syntax_tree":{"type":"method","name":"generate_syntax_tree","children":[],"call":[" s ","RubyParser  new parse ","RubyParser  new "]}," Hash push_keys":{"type":"method","name":"push_keys","children":[],"call":["hash [] adopt! "," [] ","hash [] "," keys each "," keys "]}," Reek Smells LargeClass check_num_ivars":{"type":"method","name":"check_num_ivars","children":[],"call":["report << ","SmellWarning  new ","count <= ","klass variable_names length ","klass variable_names "," found "," value ","ctx exp line ","ctx exp ","ctx full_name ","(send\n  (send\n    (lvar :ctx) :local_nodes\n    (sym :iasgn)) :map) uniq length ","(send\n  (send\n    (lvar :ctx) :local_nodes\n    (sym :iasgn)) :map) uniq ","iasgn [] ","ctx local_nodes map ","ctx local_nodes ","(send\n  (send\n    (lvar :klass) :local_nodes\n    (sym :iasgn)) :map) uniq length ","(send\n  (send\n    (lvar :klass) :local_nodes\n    (sym :iasgn)) :map) uniq ","klass local_nodes map ","klass local_nodes ","klass variable_names length  <= ","(send\n  (send\n    (lvar :ctx) :local_nodes\n    (sym :iasgn)) :map) uniq length  <= ","(send\n  (send\n    (lvar :klass) :local_nodes\n    (sym :iasgn)) :map) uniq length  <= "]}," Reek Smells LargeClass check_num_methods":{"type":"method","name":"check_num_methods","children":[],"call":["report << ","SmellWarning  new ","count <= ","klass num_methods "," found "," value ","ctx exp line ","ctx exp ","ctx full_name ","actual <= ","ctx local_nodes length ","ctx local_nodes ","klass each length ","klass each ","klass local_nodes length ","klass local_nodes ","klass num_methods  <= ","ctx local_nodes length  <= ","klass each length  <= ","klass local_nodes length  <= "]}," Reek ReportList to_s":{"type":"method","name":"to_s","children":[],"call":["(send\n  (send nil :smelly_sources) :map) join ","src full_report "," smelly_sources map "," smelly_sources "]}," Reek ReportList smelly_sources":{"type":"method","name":"smelly_sources","children":[],"call":["src smelly? ","@sources select "]}," Reek ReportList length":{"type":"method","name":"length","children":[],"call":["sum + ","src report length ","src report ","@sources inject "]}," Reek ReportList empty?":{"type":"method","name":"empty?","children":[],"call":[" length == "," length "]}," Reek ReportList each":{"type":"method","name":"each","children":[],"call":["src report each ","src report ","@sources each "]}," Reek ReportList initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Report full_report":{"type":"method","name":"full_report","children":[],"call":[" to_s "," length ","(send\n  (ivar :@partials) :map) join ","rpt full_report ","@partials map "]}," Object to_source":{"type":"method","name":"to_source","children":[],"call":["Reek Source  from_object "]}," Reek ObjectSource generate_syntax_tree":{"type":"method","name":"generate_syntax_tree","children":[],"call":[" throw ","ArgumentError  new ","ObjectSource  unify ","ParseTree  new parse_tree ","ParseTree  new "," can_parse_objects? "]}," Reek ObjectSource can_parse_objects?":{"type":"method","name":"can_parse_objects?","children":[],"call":[" require ","Object  const_defined? "]}," Reek ObjectSource unify":{"type":"method","name":"unify","children":[],"call":[]}," Reek Source from_object":{"type":"method","name":"from_object","children":[],"call":[]}," Reek Name resolve_string":{"type":"method","name":"resolve_string","children":[],"call":[]}," Reek MethodContext record_instance_variable":{"type":"method","name":"record_instance_variable","children":[],"call":["@outer record_instance_variable "," record_use_of_self "]}," Reek MethodContext record_use_of_self":{"type":"method","name":"record_use_of_self","children":[],"call":["@refs record_reference_to_self "," record_depends_on_self "]}," Reek CodeParser process_op_asgn1":{"type":"method","name":"process_op_asgn1","children":[],"call":[" process_call "]}," Reek CodeParser process_attrasgn":{"type":"method","name":"process_attrasgn","children":[],"call":[" process_call "]}," Reek CodeParser process":{"type":"method","name":"process","children":[],"call":[" send "," respond_to? ","exp [] "]}," Reek BlockContext record_local_variable":{"type":"method","name":"record_local_variable","children":[],"call":["@local_variables << ","Name  new "]}," Reek ParameterSet include?":{"type":"method","name":"include?","children":[],"call":[" names include? "," names "]}," Reek ParameterSet names":{"type":"method","name":"names","children":[],"call":["Name  new ","lasgn [] ","arg [] map ","arg [] "," slice "," empty? "," slice  [] map "," slice  [] "]}," Reek SnifferSet sniff":{"type":"method","name":"sniff","children":[],"call":[]}," Reek SnifferSet smells_only_of?":{"type":"method","name":"smells_only_of?","children":[],"call":[" has_smell? "," num_smells == "," num_smells "]}," Reek SnifferSet num_smells":{"type":"method","name":"num_smells","children":[],"call":["sniffer num_smells ","@sniffers each ","@sniffers inject "]}," Reek SnifferSet has_smell?":{"type":"method","name":"has_smell?","children":[],"call":["sniffer has_smell? ","@sniffers any? "]}," Reek SnifferSet smelly?":{"type":"method","name":"smelly?","children":[],"call":["sniffer smelly? ","@sniffers any? "]}," Reek SnifferSet initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Sniffer smell_listeners":{"type":"method","name":"smell_listeners","children":[],"call":["stack listen_to ","@detectors each_value ","hash []= ","Hash  new "]}," Reek Sniffer sniffers":{"type":"method","name":"sniffers","children":[],"call":[]}," Reek Sniffer sniff":{"type":"method","name":"sniff","children":[],"call":[]}," Reek Sniffer smells_only_of?":{"type":"method","name":"smells_only_of?","children":[],"call":[" has_smell? "," num_smells == "," num_smells "]}," Reek Sniffer has_smell?":{"type":"method","name":"has_smell?","children":[],"call":["stack has_smell? ","@detectors [] ","Reek Smells  const_get "," check_for_smells ","@detectors []  has_smell? "]}," Reek Sniffer desc":{"type":"method","name":"desc","children":[],"call":["@source desc "]}," Reek Sniffer num_smells":{"type":"method","name":"num_smells","children":[],"call":["stack num_smells ","@detectors each_value "," check_for_smells "]}," Reek Sniffer smelly?":{"type":"method","name":"smelly?","children":[],"call":["stack smelly? ","@detectors each_value "," check_for_smells "]}," Reek Sniffer examine":{"type":"method","name":"examine","children":[],"call":["smell examine ","listeners each "," smell_listeners [] "," smell_listeners "," smell_listeners []  each "," smell_ smell_listeners []  [] "," smell_ smell_listeners []  "]}," Reek Sniffer report_on":{"type":"method","name":"report_on","children":[],"call":["stack report_on ","@detectors each_value "," check_for_smells "]}," Reek Sniffer configure":{"type":"method","name":"configure","children":[],"call":["@detectors [] push ","@detectors [] "]}," Reek Sniffer check_for_smells":{"type":"method","name":"check_for_smells","children":[],"call":["CodeParser  new process ","@source syntax_tree ","CodeParser  new "]}," Reek Sniffer initialize":{"type":"method","name":"initialize","children":[],"call":["src configure ","@detectors []= ","DetectorStack  new ","klass new ","Sniffer  smell_classes each ","Sniffer  smell_classes ","Hash  new ","Hash  new  []= "]}," Reek Sniffer smell_classes":{"type":"method","name":"smell_classes","children":[],"call":[]}," Reek Smells UtilityFunction initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Smells UtilityFunction default_config":{"type":"method","name":"default_config","children":[],"call":[" adopt "," merge "]}," Reek Smells SmellDetector value":{"type":"method","name":"value","children":[],"call":["@config value "," config_for [] "," config_for "," config value "," config "]}," Reek Smells SmellDetector smelly?":{"type":"method","name":"smelly?","children":[],"call":["@smells_found length > ","@smells_found length ","@masked ! "]}," Reek Smells SmellDetector num_smells":{"type":"method","name":"num_smells","children":[],"call":["@smells_found length "]}," Reek Smells SmellDetector report_on":{"type":"method","name":"report_on","children":[],"call":["smell report_on ","@smells_found each "," smells_found each "," smells_found "]}," Reek Smells SmellDetector has_smell?":{"type":"method","name":"has_smell?","children":[],"call":["warning contains_all? ","@smells_found each "]}," Reek Smells SmellDetector found":{"type":"method","name":"found","children":[],"call":["@smells_found << ","SmellWarning  new ","context exp line ","context exp ","context full_name "," class name split [] "," class name split "," class name "," class ","@SmellWarning  new s_found << "]}," Reek Smells SmellDetector supersede_with":{"type":"method","name":"supersede_with","children":[],"call":["clone configure_with "," copy "," copy  configure_with "]}," Reek Smells SmellDetector copy":{"type":"method","name":"copy","children":[],"call":[" class new ","@config hash deep_copy ","@config hash "," class ","@config deep_copy "]}," Reek Smells SmellDetector configure_with":{"type":"method","name":"configure_with","children":[],"call":["@config hash adopt! ","@config hash ","@config adopt! ","@config merge! "," config merge! "," config "]}," Reek Smells SmellDetector configure":{"type":"method","name":"configure","children":[],"call":[" configure_with ","config [] "," class name split [] "," class name split "," class name "," class "]}," Reek Smells SmellDetector enabled?":{"type":"method","name":"enabled?","children":[],"call":["@config enabled? "," config enabled? "," config "]}," Reek Smells SmellDetector listen_to":{"type":"method","name":"listen_to","children":[],"call":["hooks [] << ","hooks [] "," class contexts each "," class contexts "," class "]}," Reek Smells SmellDetector create":{"type":"method","name":"create","children":[],"call":[" new ","config [] "," class_name "]}," Reek Smells SimulatedPolymorphism examine_context":{"type":"method","name":"examine_context","children":[],"call":[" found ","SexpFormatter  format ","val > "," value ","counts each ","counts [] ","klass conditionals each ","klass conditionals ","Hash  new ","SmellWarning  new ","ctx full_name ","key format_ruby ","lines length ","(send\n  (send nil :conditional_counts\n    (lvar :ctx)) :select) map ","lines length > "," conditional_counts select "," conditional_counts "," conditional_counts each ","Source SexpFormatter  format ","occurs > ","key format ","Hash  new  each ","Hash  new  [] ","(send\n  (send nil :conditional_Hash  new \n    (lvar :ctx)) :select) map "," conditional_Hash  new  select "," conditional_Hash  new  "," conditional_Hash  new  each ","lines length  > "]}," Reek Smells SimulatedPolymorphism initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Smells SimulatedPolymorphism default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek Smells SimulatedPolymorphism contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek MethodGroup clumps":{"type":"method","name":"clumps","children":[],"call":["results []= ","(send\n  (lvar :methods) :length) max ","results [] ","methods length ","clump length >= ","clump length ","MethodGroup  intersection_of_parameters_of ","@klass parameterized_methods bounded_power_set each ","@klass parameterized_methods bounded_power_set ","@klass parameterized_methods ","Hash  new ","results [] uniq! ","results each_key "," collect_clumps_in ","@ctx parameterized_methods bounded_power_set each ","@ctx parameterized_methods bounded_power_set ","@ctx parameterized_methods ","methods length > ","results [] length ","@candidate_methods bounded_power_set each ","@candidate_methods bounded_power_set "," methods_containing_clump "," candidate_clumps map "," candidate_clumps ","Hash  new  []= ","Hash  new  [] ","MethodGroup  intersection_of_parameters_of  length >= ","MethodGroup  intersection_of_parameters_of  length ","Hash  new  [] uniq! ","Hash  new  each_key "," collect_MethodGroup  intersection_of_parameters_of s_in ","Hash  new  [] length "," methods_containing_MethodGroup  intersection_of_parameters_of  "," candidate_MethodGroup  intersection_of_parameters_of s map "," candidate_MethodGroup  intersection_of_parameters_of s "]}," Reek MethodGroup initialize":{"type":"method","name":"initialize","children":[],"call":[" delete_small_methods "," delete_infrequent_parameters ","CandidateMethod  new ","(send\n  (send\n    (lvar :ctx) :local_nodes\n    (sym :defn)) :select) map ","meth arg_names length >= ","meth arg_names length ","meth arg_names ","ctx local_nodes select ","ctx local_nodes "," prune_candidates ","ctx local_nodes map ","ctx node_instance_methods map ","ctx node_instance_methods "]}," Reek MethodGroup intersection_of_parameters_of":{"type":"method","name":"intersection_of_parameters_of","children":[],"call":[]}," Reek Smells DataClump print_clump":{"type":"method","name":"print_clump","children":[],"call":[]}," Reek Smells DataClump examine_context":{"type":"method","name":"examine_context","children":[],"call":[" found ","DataClump  print_clump ","MethodGroup  new clumps each ","MethodGroup  new clumps ","MethodGroup  new "," value ","SmellWarning  new ","meth name ","methods map ","methods length ","name to_s ","clump map ","meth line ","ctx full_name ","MethodGroup  new clumps map ","@smells_found << "," smell_warning ","DataClump  DataClump  print_clump  ","@SmellWarning  new s_found << "," SmellWarning  new _warning "]}," Reek Smells DataClump initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Smells DataClump default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek Smells DataClump contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek SmellWarning report_on":{"type":"method","name":"report_on","children":[],"call":["report << ","report record_masked_smell ","listener found_smell ","report found_smell ","report found_masked_smell ","@status [] "]}," Reek SmellWarning basic_report":{"type":"method","name":"basic_report","children":[],"call":["Options  [] gsub gsub gsub ","Options  [] gsub gsub ","@context to_s ","Options  [] gsub ","@detector smell_name ","Options  [] "]}," Reek SmellWarning contains_all?":{"type":"method","name":"contains_all?","children":[],"call":["exp === ","patterns all? "," report "," sort_key to_s "," sort_key ","pattern === ","patt === ","pattern =~ "]}," Reek Name inspect":{"type":"method","name":"inspect","children":[],"call":["@name inspect "]}," Reek Name eql?":{"type":"method","name":"eql?","children":[],"call":[" == "]}," Reek MethodParameters to_s":{"type":"method","name":"to_s","children":[],"call":["(send\n  (send nil :names) :map) join ","nm to_s "," names map "," names "]}," Reek MethodParameters include?":{"type":"method","name":"include?","children":[],"call":[" names include? "," names "]}," Reek MethodParameters length":{"type":"method","name":"length","children":[],"call":[" names length "," names "]}," Reek MethodParameters names":{"type":"method","name":"names","children":[],"call":["Name  new ","(send\n  (send\n    (self) :[]\n    (irange\n      (int 1)\n      (int -1))) :select) map ","MethodParameters  is_arg? "," [] select "," [] "," is_arg? "]}," Reek MethodParameters is_arg?":{"type":"method","name":"is_arg?","children":[],"call":["(send\n  (send\n    (lvar :param) :to_s) :=~\n  (regexp\n    (str \"^\\\\&\")\n    (regopt))) ! ","param to_s =~ ","param to_s "," is_assignment_block? "]}," Array intersection":{"type":"method","name":"intersection","children":[],"call":["elem & "," inject "]}," Array cross":{"type":"method","name":"cross","children":[],"call":["result << ","set + "," each "]}," Array bounded_power_set":{"type":"method","name":"bounded_power_set","children":[],"call":["ps length > ","ps length "," power_set select "," power_set "]}," Array power_set":{"type":"method","name":"power_set","children":[],"call":["cum cross "," inject "]}," Reek DetectorStack smelly?":{"type":"method","name":"smelly?","children":[],"call":["det smelly? ","@detectors each "]}," Reek DetectorStack has_smell?":{"type":"method","name":"has_smell?","children":[],"call":["det has_smell? ","@detectors each "]}," Reek DetectorStack num_smells":{"type":"method","name":"num_smells","children":[],"call":["det num_smells ","@detectors each ","detector num_smells ","@detectors inject "]}," Reek DetectorStack report_on":{"type":"method","name":"report_on","children":[],"call":["det report_on ","@detectors each "]}," Reek DetectorStack listen_to":{"type":"method","name":"listen_to","children":[],"call":["det listen_to ","@detectors each "]}," Reek DetectorStack push":{"type":"method","name":"push","children":[],"call":["@detectors << ","@detectors [] supersede_with ","@detectors [] "]}," Reek DetectorStack initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Overrides for_context":{"type":"method","name":"for_context","children":[],"call":["@hash [] ","contexts map ","context matches? ","@hash keys select ","@hash keys "," hash [] "," hash "," hash keys select "," hash keys "]}," Reek Overrides initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek SmellConfiguration value":{"type":"method","name":"value","children":[],"call":["@hash fetch ","conf [] ","conf has_key? "," overrides_for each "," overrides_for ","@options fetch "," options fetch "," options ","conf key? "]}," Reek SmellConfiguration overrides_for":{"type":"method","name":"overrides_for","children":[],"call":["Overrides  new for_context ","Overrides  new ","@hash fetch ","@options fetch "," options fetch "," options "]}," Reek SmellConfiguration enabled?":{"type":"method","name":"enabled?","children":[],"call":["@hash [] ","@options [] "," options [] "," options "]}," Reek SmellConfiguration initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Options initialize":{"type":"method","name":"initialize","children":[],"call":[" set_options ","OptionParser  new "]}," Reek CodeParser count_clause":{"type":"method","name":"count_clause","children":[],"call":["@element count_statements ","sexp has_type? ! ","sexp has_type? "]}," Reek CodeParser process_when":{"type":"method","name":"process_when","children":[],"call":[" process_default "," count_clause ","exp [] "]}," Reek CodeParser process_case":{"type":"method","name":"process_case","children":[],"call":["@element count_statements "," process_default ","@element record_conditional ","exp [] "]}," Reek CodeParser process_resbody":{"type":"method","name":"process_resbody","children":[],"call":[" process_when "]}," Reek CodeParser process_rescue":{"type":"method","name":"process_rescue","children":[],"call":[" process_case "," count_clause ","exp [] ","@element count_statements "," process_default "]}," Reek CodeParser process_for":{"type":"method","name":"process_for","children":[],"call":[" process_case "," count_clause ","exp [] ","@element count_statements "," process_default "]}," Reek CodeParser process_until":{"type":"method","name":"process_until","children":[],"call":["@element count_statements "," process_default "," count_clause ","exp [] "," process_case "]}," Reek CodeParser process_while":{"type":"method","name":"process_while","children":[],"call":[" process_until "]}," Reek CodeParser process_zsuper":{"type":"method","name":"process_zsuper","children":[],"call":["@element record_use_of_self "]}," Sexp has_type?":{"type":"method","name":"has_type?","children":[],"call":[" first == "," first "," is_language_node? "]}," Sexp is_language_node?":{"type":"method","name":"is_language_node?","children":[],"call":[" first class == "," first class "," first "]}," Sexp children":{"type":"method","name":"children","children":[],"call":["Sexp  === "," find_all "]}," Module const_or_nil":{"type":"method","name":"const_or_nil","children":[],"call":[" const_get "," const_defined? "]}," Reek ClassContext parameterized_methods":{"type":"method","name":"parameterized_methods","children":[],"call":["meth parameters length >= ","meth parameters length ","meth parameters "," parsed_methods select "," parsed_methods "]}," Reek ClassContext record_conditional":{"type":"method","name":"record_conditional","children":[],"call":["@conditionals << "]}," Reek ClassContext from_s":{"type":"method","name":"from_s","children":[],"call":[]}," Reek Spec ReekMatcher report":{"type":"method","name":"report","children":[],"call":["Report  new quiet_report ","Report  new ","@sniffer sniffers "," create_reporter report "," create_reporter "]}," Reek SourceFile all_config_files":{"type":"method","name":"all_config_files","children":[],"call":[" all_config_files + ","Dir  [] "," all_config_files ","path == ","File  dirname ","File  exist? "]}," Reek SourceFile configure":{"type":"method","name":"configure","children":[],"call":["ConfigFile  new configure ","ConfigFile  new "," all_config_files each "," all_config_files ","File  expand_path ","File  dirname ","@file path ","File  expand_File  expand_path  ","@file File  expand_path  "]}," Reek SourceFile initialize":{"type":"method","name":"initialize","children":[],"call":["@file path ","SourceFile  lines join ","SourceFile  lines "]}," Reek SourceFile lines":{"type":"method","name":"lines","children":[],"call":[]}," Reek Source syntax_tree":{"type":"method","name":"syntax_tree","children":[],"call":[" s ","RubyParser  new parse ","RubyParser  new ","TreeDresser  new dress ","TreeDresser  new ","$stderr puts ","error class name ","error class "," desc ","@parser parse ","@@err_io puts "]}," Reek Source configure":{"type":"method","name":"configure","children":[],"call":[]}," Reek Report quiet_report":{"type":"method","name":"quiet_report","children":[],"call":["(send\n  (ivar :@partials) :map) join ","rpt quiet_report ","@partials map "]}," Reek ReportSection masked_header":{"type":"method","name":"masked_header","children":[],"call":["num_masked_warnings == ","@all_warnings length - ","@warnings length ","@all_warnings length ","@cwarnings num_masked_items ","@all_warnings length -  == ","@cwarnings num_masked_items  == "]}," Reek ReportSection visible_header":{"type":"method","name":"visible_header","children":[],"call":["num_smells == ","@warnings length ","@cwarnings num_visible_items ","@warnings length  == ","@cwarnings num_visible_items  == "]}," Reek ReportSection should_report":{"type":"method","name":"should_report","children":[],"call":["@masked_warnings length > ","@masked_warnings length ","Options  [] ","@warnings length > ","@warnings length ","@cwarnings num_masked_items > ","@cwarnings num_masked_items ","@cwarnings num_visible_items > ","@cwarnings num_visible_items "]}," Reek ReportSection smell_list":{"type":"method","name":"smell_list","children":[],"call":["(send\n  (lvar :smells) :map) join ","smell report ","smells map ","Options  [] ","result join ","result << ","@cwarnings each_visible_item ","@cwarnings each_item "]}," Reek ReportSection header":{"type":"method","name":"header","children":[],"call":[" masked_header "," visible_header ","@all_warnings merge ","SortedSet  new ","SortedSet  new  merge "]}," Reek ReportSection quiet_report":{"type":"method","name":"quiet_report","children":[],"call":[" smell_list "," header "," should_report "]}," Reek ReportSection full_report":{"type":"method","name":"full_report","children":[],"call":[" smell_list "," should_report "," header "," quiet_report ","Options  [] "]}," Reek ReportSection num_masked_smells":{"type":"method","name":"num_masked_smells","children":[],"call":["@masked_warnings length ","@cwarnings num_masked_items "]}," Reek ReportSection record_masked_smell":{"type":"method","name":"record_masked_smell","children":[],"call":["@masked_warnings << "]}," Reek ReportSection <<":{"type":"method","name":"<<","children":[],"call":["@warnings << "]}," Reek ReportSection initialize":{"type":"method","name":"initialize","children":[],"call":["sniffer report_on ","sniffer desc ","SortedSet  new ","MaskingCollection  new "]}," Object to_reek_source":{"type":"method","name":"to_reek_source","children":[],"call":["ObjectSource  new "," to_s "]}," Reek ObjectSource syntax_tree":{"type":"method","name":"syntax_tree","children":[],"call":[" throw ","ArgumentError  new ","ObjectSource  unify ","ParseTree  new parse_tree ","ParseTree  new ","ObjectSource  can_parse_objects? "]}," Reek ObjectSource configure":{"type":"method","name":"configure","children":[],"call":["sniffer configure "]}," Array sniff":{"type":"method","name":"sniff","children":[],"call":["Reek SnifferSet  new ","File  new sniff ","File  new "," paths map "," paths "]}," Array paths":{"type":"method","name":"paths","children":[],"call":["(send\n  (self) :map) flatten sort ","(send\n  (self) :map) flatten ","Dir  [] paths ","Dir  [] "," test "," map "]}," String to_reek_source":{"type":"method","name":"to_reek_source","children":[],"call":["Reek Source  new ","Reek Source SourceCode  new "]}," IO to_reek_source":{"type":"method","name":"to_reek_source","children":[],"call":["Reek Source  new "," readlines join "," readlines ","Reek Source SourceCode  new "]}," File to_reek_source":{"type":"method","name":"to_reek_source","children":[],"call":["Reek SourceFile  new ","Reek Source SourceFile  new "," path "]}," Object sniff":{"type":"method","name":"sniff","children":[],"call":["Reek Sniffer  new "," to_reek_source "]}," Reek ConfigFile problem":{"type":"method","name":"problem","children":[],"call":[" raise ","File  basename "]}," Reek ConfigFile find_class":{"type":"method","name":"find_class","children":[],"call":[" problem ","Reek Smells  const_get "]}," Reek ConfigFile configure":{"type":"method","name":"configure","children":[],"call":["sniffer configure "," find_class ","@hash each "]}," Reek ConfigFile initialize":{"type":"method","name":"initialize","children":[],"call":[" problem ","Hash  === ","YAML  load_file "]}," Reek Application execute":{"type":"method","name":"execute","children":[],"call":["$stderr puts ","ex status "," reek ","EXIT_STATUS  [] ","cmd execute ","@options parse ","@options parse  execute "]}," Reek Application reek":{"type":"method","name":"reek","children":[],"call":["@sniffer smelly? "," puts ","Report  new full_report ","Report  new ","@sniffer sniffers "," examine_sources ","@options create_report report ","@options create_report ","EXIT_STATUS  [] "]}," Reek Application examine_sources":{"type":"method","name":"examine_sources","children":[],"call":["Reek Sniffer  new ","$stdin to_reek_source ","args sniff ","args length > ","args length ","Options  new parse ","Options  new ","@options parse ","Options  new parse  sniff ","@options parse  sniff ","Options  new parse  length > ","@options parse  length > ","Options  new parse  length ","@options parse  length "]}," Reek Application initialize":{"type":"method","name":"initialize","children":[],"call":["Options  new "]}," Reek Smells ClassVariable examine_context":{"type":"method","name":"examine_context","children":[],"call":[" found ","klass class_variables each ","klass class_variables ","SmellWarning  new ","attr_name to_s ","ctx full_name "," class_variables_in map "," class_variables_in ","ctx exp "," class_variables_in each ","cvar_name to_s ","variable to_s "," smell_warning ","attr_name to_s  to_s "," SmellWarning  new _warning "]}," Reek Smells ClassVariable contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek SmellWarning sort_key":{"type":"method","name":"sort_key","children":[],"call":["@detector smell_name ","@context to_s ","@smell [] ","@location [] "," smell_name "," smell_class "," message "," context "," smell_category "]}," Reek ModuleContext record_class_variable":{"type":"method","name":"record_class_variable","children":[],"call":["@class_variables << ","Name  new "]}," Reek ModuleContext from_s":{"type":"method","name":"from_s","children":[],"call":["CodeParser  new do_module_or_class ","source syntax_tree ","CodeParser  new ","Sniffer  new ","src to_reek_source ","src to_reek_source  syntax_tree ","src to_reek_src to_reek_source  "]}," Reek CodeParser process_cvdecl":{"type":"method","name":"process_cvdecl","children":[],"call":[" process_cvar "]}," Reek CodeParser process_cvasgn":{"type":"method","name":"process_cvasgn","children":[],"call":[" process_cvar "]}," Reek CodeParser process_cvar":{"type":"method","name":"process_cvar","children":[],"call":["@element record_class_variable ","exp [] "]}," Reek ClassContext record_class_variable":{"type":"method","name":"record_class_variable","children":[],"call":["@class_variables << ","Name  new "]}," Reek Spec ReekMatcher create_reporter":{"type":"method","name":"create_reporter","children":[],"call":["QuietReport  new "]}," Reek QuietReport report":{"type":"method","name":"report","children":[],"call":["(send\n  (ivar :@partials) :map) join ","rpt quiet_report ","@partials map ","section quiet_report "]}," Reek FullReport report":{"type":"method","name":"report","children":[],"call":["(send\n  (ivar :@partials) :map) join ","rpt full_report ","@partials map "]}," Reek Options create_report":{"type":"method","name":"create_report","children":[],"call":["FullReport  new ","QuietReport  new "]}," Reek Spec ShouldReekOnlyOf matches_examiner?":{"type":"method","name":"matches_examiner?","children":[],"call":["@warnings [] matches? ","@warnings [] ","@warnings length == ","@warnings length ","@examiner smells ","@all_smells [] matches? ","@all_smells [] ","@all_smells length == ","@all_smells length ","@examiner all_active_smells ","warning matches? ","@warnings all? ","@warnings empty? ","SmellMatcher  new matches? "," smell_category ","SmellMatcher  new "," warnings all? "," warnings "," warnings empty? "," warnings= ","examiner smells "," examiner= "," smell_type ","@examiner smells  [] matches? ","@examiner smells  [] ","@examiner smells  length == ","@examiner smells  length ","@examiner all_active_smells  [] matches? ","@examiner all_active_smells  [] ","@examiner all_active_smells  length == ","@examiner all_active_smells  length ","@examiner smells  all? ","@examiner smells  empty? "]}," Reek Spec ShouldReek initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Source TreeDresser extensions_for":{"type":"method","name":"extensions_for","children":[],"call":["node_type to_s capitalize ","node_type to_s "]}," Reek Source TreeDresser dress":{"type":"method","name":"dress","children":[],"call":[" dress ","Array  === ","sexp [] each ","sexp [] ","sexp extend ","SexpExtensions  const_get ","SexpExtensions  const_defined? "," extensions_for ","sexp sexp_type ","sexp each_sexp "," extend_sexp ","@klass_map klass_for new ","sexp loc ","@klass_map klass_for ","comment_map [] ","sexp children map ","sexp children ","sexp type ","sexp is_a? ","sexp sexp_sexp type  ","sexp sexp type  "]}," Reek Source SexpExtensions YieldNode arg_names":{"type":"method","name":"arg_names","children":[],"call":["arg [] "," args map "," args "]}," Reek Source SexpExtensions YieldNode args":{"type":"method","name":"args","children":[],"call":[" [] "]}," Reek Source SexpExtensions ClassNode superclass":{"type":"method","name":"superclass","children":[],"call":[" [] "]}," Reek Source SexpExtensions ModuleNode text_name":{"type":"method","name":"text_name","children":[],"call":["SexpNode  format "," name "]}," Reek Source SexpExtensions ModuleNode full_name":{"type":"method","name":"full_name","children":[],"call":[" text_name ","outer == "," name "]}," Reek Source SexpExtensions ModuleNode simple_name":{"type":"method","name":"simple_name","children":[],"call":["expr [] ","expr [] == ","Sexp  === "," name "," name simple_name "," name is_a? ","expr []  [] "," name  [] ","expr []  [] == "," name  [] == "]}," Reek Source SexpExtensions ModuleNode name":{"type":"method","name":"name","children":[],"call":[" [] "]}," Reek Source SexpExtensions LitNode value":{"type":"method","name":"value","children":[],"call":[" [] "]}," Reek Source SexpExtensions IterNode parameter_names":{"type":"method","name":"parameter_names","children":[],"call":["lasgn [] ","result [] [] map ","result [] [] ","result [] "," parameters "," parameters [] to_a "," parameters [] "," parameters  [] [] map "," parameters  [] [] "," parameters  [] "]}," Reek Source SexpExtensions IterNode parameters":{"type":"method","name":"parameters","children":[],"call":[" [] "]}," Reek Source SexpExtensions IterNode block":{"type":"method","name":"block","children":[],"call":[" [] "]}," Reek Source SexpExtensions IterNode args":{"type":"method","name":"args","children":[],"call":[" [] "]}," Reek Source SexpExtensions IterNode call":{"type":"method","name":"call","children":[],"call":[" [] "]}," Reek Source SexpExtensions IfNode condition":{"type":"method","name":"condition","children":[],"call":[" [] "]}," Reek Source SexpExtensions DefsNode full_name":{"type":"method","name":"full_name","children":[],"call":[" name ","SexpNode  format "," receiver ","outer == "," receiver format "]}," Reek Source SexpExtensions DefsNode body":{"type":"method","name":"body","children":[],"call":[" [] ","b extend "," [] tap "," [] extend "]}," Reek Source SexpExtensions DefsNode argslist":{"type":"method","name":"argslist","children":[],"call":[" [] "]}," Reek Source SexpExtensions DefsNode name":{"type":"method","name":"name","children":[],"call":[" [] "]}," Reek Source SexpExtensions DefsNode receiver":{"type":"method","name":"receiver","children":[],"call":[" [] "]}," Reek Source SexpExtensions DefnNode full_name":{"type":"method","name":"full_name","children":[],"call":[" name ","outer == "]}," Reek Source SexpExtensions DefnNode body":{"type":"method","name":"body","children":[],"call":[" [] ","b extend "," [] tap "," [] extend "]}," Reek Source SexpExtensions DefnNode argslist":{"type":"method","name":"argslist","children":[],"call":[" [] "]}," Reek Source SexpExtensions DefnNode name":{"type":"method","name":"name","children":[],"call":[" [] "]}," Reek Source SexpExtensions MethodNode parameter_names":{"type":"method","name":"parameter_names","children":[],"call":[" parameters [] "," parameters ","param [] ","Sexp  === "," argslist [] map "," argslist [] "," argslist "," parameters map "]}," Reek Source SexpExtensions MethodNode parameters":{"type":"method","name":"parameters","children":[],"call":["Sexp  === "," argslist reject "," argslist ","MethodParameter  new ","param [] ","param is_a? "," argslist [] map "," argslist [] "]}," Reek Source SexpExtensions MethodNode arg_names":{"type":"method","name":"arg_names","children":[],"call":["param to_s =~ ","param to_s ","Sexp  === "," argslist [] reject "," argslist [] "," argslist "," parameter_names reject "," parameter_names "," arguments map "," arguments "]}," Reek Source SexpExtensions CvarNode name":{"type":"method","name":"name","children":[],"call":[" [] "]}," Reek Source SexpExtensions CallNode arg_names":{"type":"method","name":"arg_names","children":[],"call":["arg [] "," args [] map "," args [] "," args "," args map "]}," Reek Source SexpExtensions CallNode args":{"type":"method","name":"args","children":[],"call":[" [] "]}," Reek Source SexpExtensions CallNode method_name":{"type":"method","name":"method_name","children":[],"call":[" [] "]}," Reek Source SexpExtensions CallNode receiver":{"type":"method","name":"receiver","children":[],"call":[" [] "]}," Reek Source SexpExtensions CaseNode condition":{"type":"method","name":"condition","children":[],"call":[" [] "]}," Reek Source SexpExtensions AttrasgnNode args":{"type":"method","name":"args","children":[],"call":[" [] "]}," Reek Source SexpNode deep_copy":{"type":"method","name":"deep_copy","children":[],"call":["Sexp  from_array ","YAML  load ","YAML  dump ","Sexp  new ","elem deep_copy ","Sexp  === "," map ","elem is_a? "]}," Reek Source SexpNode format_ruby":{"type":"method","name":"format_ruby","children":[],"call":["Ruby2Ruby  new process "," deep_copy ","Ruby2Ruby  new "," [] to_s "," [] ","Array  === ","SexpFormatter  format "]}," Reek Source SexpNode look_for":{"type":"method","name":"look_for","children":[],"call":["blk call "," first == "," first ","elem look_for ","ignoring include? ","elem first ","Sexp  === "," each "," each_sexp "," type == "," type ","elem type "]}," Reek Source SexpNode each_node":{"type":"method","name":"each_node","children":[],"call":["result << "," look_for "," block_given? "]}," Reek Source SexpNode has_type?":{"type":"method","name":"has_type?","children":[],"call":[" first == "," first "," is_language_node? "]}," Reek Source SexpNode is_language_node?":{"type":"method","name":"is_language_node?","children":[],"call":[" first class == "," first class "," first ","Symbol  === "]}," Reek Source SexpNode hash":{"type":"method","name":"hash","children":[],"call":[" inspect hash "," inspect "]}," Reek Source SexpNode format":{"type":"method","name":"format","children":[],"call":["Ruby2Ruby  new process "," deep_copy ","Ruby2Ruby  new "," [] to_s "," [] ","Array  === "]}," Reek Source SourceRepository each":{"type":"method","name":"each","children":[],"call":["@sources each "]}," Reek Source SourceRepository initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Source SourceRepository parse":{"type":"method","name":"parse","children":[],"call":[]}," Reek Source SourceLocator valid_paths":{"type":"method","name":"valid_paths","children":[],"call":["$stderr puts "," test "," all_ruby_source_files select "," all_ruby_source_files "]}," Reek Source SourceLocator all_ruby_source_files":{"type":"method","name":"all_ruby_source_files","children":[],"call":["(send\n  (lvar :paths) :map) flatten sort ","(send\n  (lvar :paths) :map) flatten "," all_ruby_source_files ","Dir  [] "," test ","paths map "]}," Reek Source SourceLocator all_sources":{"type":"method","name":"all_sources","children":[],"call":["File  new to_reek_source ","File  new "," valid_paths map "," valid_paths ","Source SourceCode  from "]}," Reek Source SourceLocator initialize":{"type":"method","name":"initialize","children":[],"call":["path chomp ","paths map ","pathname entries "," current_directory? ","(send\n  (lvar :paths) :map) flat_map ","Pathname  new "," configuration= "," paths= ","path entries ","paths flat_map ","Pathname  new  chomp ","Pathname  new s map ","Pathname  new name entries ","(send\n  (lvar :Pathname  new s) :map) flat_map "," Pathname  new s= ","Pathname  new  entries ","Pathname  new s flat_map "]}," Reek Source SourceFile all_config_files":{"type":"method","name":"all_config_files","children":[],"call":[" all_config_files + ","Dir  [] "," all_config_files ","path == ","File  dirname ","File  exist? "]}," Reek Source SourceFile configure":{"type":"method","name":"configure","children":[],"call":["ConfigFile  new configure ","ConfigFile  new "," all_config_files each "," all_config_files ","File  expand_path ","File  dirname ","File  expand_File  expand_path  "]}," Reek Source SourceFile initialize":{"type":"method","name":"initialize","children":[],"call":["IO  readlines join ","IO  readlines "]}," Reek Source SourceCode syntax_tree":{"type":"method","name":"syntax_tree","children":[],"call":["TreeDresser  new dress ","TreeDresser  new "," s ","@@err_io puts ","error class name ","error class "," desc ","@parser parse ","$stderr puts ","Parser Source Comment  associate ","AstNode  new ","@parser parse_with_comments ","buffer source= ","Parser Source Buffer  new ","Core TreeDresser  new dress ","Core TreeDresser  new "," description "," origin "," parser parse_with_comments "," source "," parser "," raise "," parse_if_needed "," parse_result first "," parse_result "," parse ","Parser Source Buffer  new  source= "]}," Reek Source SourceCode configure":{"type":"method","name":"configure","children":[],"call":[]}," Reek Source SourceCode initialize":{"type":"method","name":"initialize","children":[],"call":[" parse ","code force_encoding "]}," Reek Source SourceCode err_io=":{"type":"method","name":"err_io=","children":[],"call":[]}," Reek Source SexpFormatter format":{"type":"method","name":"format","children":[],"call":[]}," Reek Source ReferenceCollector num_refs_to_self":{"type":"method","name":"num_refs_to_self","children":[],"call":["call receiver ","@ast look_for ","(sym :self) each "]}," Reek Source ReferenceCollector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Source ConfigFile problem":{"type":"method","name":"problem","children":[],"call":["$stderr puts ","File  basename "," message "]}," Reek Source ConfigFile load":{"type":"method","name":"load","children":[],"call":[" problem ","err to_s ","@@bad_config_files << ","Hash  === ","YAML  load_file ","@@bad_config_files include? "," error ","e to_s ","File  size == ","File  size "," report_error ","error to_s "," report_problem ","result is_a? "]}," Reek Source ConfigFile find_class":{"type":"method","name":"find_class","children":[],"call":[" problem ","Reek Smells  const_get "," report_problem "]}," Reek Source ConfigFile configure":{"type":"method","name":"configure","children":[],"call":["sniffer configure "," find_class ","@hash each "]}," Reek Source ConfigFile initialize":{"type":"method","name":"initialize","children":[],"call":[" load "]}," Reek Source CodeComment add_to_config":{"type":"method","name":"add_to_config","children":[],"call":["@config merge! ","YAML  load ","(send\n  (lvar :smell) :gsub\n  (regexp\n    (str \"(?:^|_)(.)\")\n    (regopt))) + ","1 upcase ","smell gsub "," config merge! "," config "]}," Reek Source CodeComment is_descriptive?":{"type":"method","name":"is_descriptive?","children":[],"call":["@text split length >= ","@text split length ","@text split "]}," Reek Source CodeComment config":{"type":"method","name":"config","children":[],"call":["hash []= ","Hash  new "]}," Reek Source CodeComment initialize":{"type":"method","name":"initialize","children":[],"call":["(send\n  (lvar :text) :gsub\n  (const nil :CONFIG_REGEX)) gsub gsub strip ","(send\n  (lvar :text) :gsub\n  (const nil :CONFIG_REGEX)) gsub gsub ","(send\n  (lvar :text) :gsub\n  (const nil :CONFIG_REGEX)) gsub "," add_to_config ","text gsub ","hash []= ","Hash  new ","text gsub gsub strip ","text gsub gsub "]}," Reek Smells UtilityFunction num_helper_methods":{"type":"method","name":"num_helper_methods","children":[],"call":["method_ctx local_nodes length ","method_ctx local_nodes "]}," Reek Smells UtilityFunction depends_on_instance?":{"type":"method","name":"depends_on_instance?","children":[],"call":["Reek Source ReferenceCollector  new num_refs_to_self > ","Reek Source ReferenceCollector  new num_refs_to_self ","Reek Source ReferenceCollector  new "]}," Reek Smells UtilityFunction contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek Smells UncommunicativeVariableName variable_names":{"type":"method","name":"variable_names","children":[],"call":["result [] push ","asgn line ","result [] ","asgn [] ","assignment_nodes each ","hash []= ","Hash  new ","exp each_node ","exp first ","context each_node each ","context each_node ","context local_nodes each ","context local_nodes "," find_block_argument_variable_names "," find_assignment_variable_names ","name to_s ","result to_a sort_by ","result to_a ","exp each_node  each "]}," Reek Smells UncommunicativeVariableName is_bad_name?":{"type":"method","name":"is_bad_name?","children":[],"call":["patt === ","@reject_names detect ","@accept_names include? ","name to_s gsub ","name to_s "," value detect "," value "," value include? ","var == ","name to_s gsub  == "]}," Reek Smells UncommunicativeVariableName examine_context":{"type":"method","name":"examine_context","children":[],"call":["SmellWarning  new ","name to_s ","ctx full_name ","(send\n  (send nil :variable_names\n    (send\n      (lvar :ctx) :exp)) :select) map "," is_bad_name? "," variable_names select "," variable_names ","ctx exp "," value ","@smells_found << ","context full_name "," variable_names each ","context exp "," bad_name? "," accept_names= "," reject_names= "," smell_warning ","@SmellWarning  new s_found << "," SmellWarning  new _warning "]}," Reek Smells UncommunicativeVariableName initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Smells UncommunicativeVariableName contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek Smells UncommunicativeVariableName default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek Smells UncommunicativeParameterName is_bad_name?":{"type":"method","name":"is_bad_name?","children":[],"call":["patt === ","@reject_names detect ","@accept_names include? ","var == ","name to_s gsub ","name to_s "," value detect "," value "," value include? ","name to_s gsub  == "]}," Reek Smells UncommunicativeParameterName examine_context":{"type":"method","name":"examine_context","children":[],"call":["SmellWarning  new ","name to_s ","ctx exp line ","ctx exp ","ctx full_name ","(send\n  (send\n    (send\n      (lvar :ctx) :exp) :parameter_names) :select) map "," is_bad_name? ","ctx exp parameter_names select ","ctx exp parameter_names "," value ","@smells_found << ","context exp line ","context exp ","context full_name ","context exp parameter_names each ","context exp parameter_names ","context_expression line ","(send\n  (send\n    (lvar :context_expression) :parameter_names) :select) map ","ctx uses_param? ","context_expression parameter_names select ","context_expression parameter_names "," bad_name? "," accept_names= "," reject_names= "," smell_warning ","expression line ","(send\n  (send\n    (lvar :expression) :parameter_names) :select) map "," uncommunicative_parameter_name? "," sanitize ","expression parameter_names select ","expression parameter_names ","@SmellWarning  new s_found << ","ctx exp  line ","context_context exp  line ","(send\n  (send\n    (lvar :ctx exp ) :parameter_names) :select) map ","(send\n  (send\n    (lvar :context_context exp ) :parameter_names) :select) map ","ctx exp  parameter_names select ","context_context exp  parameter_names select ","ctx exp  parameter_names ","context_context exp  parameter_names "," SmellWarning  new _warning ","context exp  line ","(send\n  (send\n    (lvar :context exp ) :parameter_names) :select) map ","context exp  parameter_names select ","context exp  parameter_names "]}," Reek Smells UncommunicativeParameterName initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Smells UncommunicativeParameterName contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek Smells UncommunicativeParameterName default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek Smells UncommunicativeModuleName examine_context":{"type":"method","name":"examine_context","children":[],"call":["SmellWarning  new ","name to_s ","exp line ","patt === ","@reject_names detect ","@accept_names include? ","name to_s gsub ","exp simple_name ","ctx full_name ","ctx exp "," value ","@smells_found << ","module_ctx exp line ","module_ctx exp ","module_ctx full_name "," is_bad_name? "," accept? ","module_ctx name ","ctx exp line ","ctx exp simple_name ","name gsub ","exp simple_name to_s ","patt =~ ","@reject_names find ","reject_names find ","accept_names include? "," smell_warning "," acceptable_name? ","context exp ","context full_name ","exp simple_name  to_s ","module_ctx name  to_s ","ctx exp simple_name  to_s ","exp simple_name to_s  to_s ","ctx exp  line ","context exp  line ","@reject_exp simple_name s detect ","@reject_module_ctx name s detect ","@reject_ctx exp simple_name s detect ","@reject_exp simple_name to_s s detect "," value  detect ","@ value  detect ","@accept_exp simple_name s include? ","@accept_module_ctx name s include? ","@accept_ctx exp simple_name s include? ","@accept_exp simple_name to_s s include? "," value  include? ","@ value  include? ","exp simple_name  to_s gsub ","module_ctx name  to_s gsub ","ctx exp simple_name  to_s gsub ","exp simple_name to_s  to_s gsub ","exp simple_exp simple_name  ","exp simple_module_ctx name  ","exp simple_ctx exp simple_name  ","exp simple_exp simple_name to_s  ","ctx exp  simple_name ","context exp  simple_name ","ctx full_exp simple_name  ","ctx full_module_ctx name  ","ctx full_ctx exp simple_name  ","ctx full_exp simple_name to_s  ","ctx ctx full_name  ","ctx ctx exp  ","ctx context exp  ","@SmellWarning  new s_found << ","module_ctx ctx exp  line ","module_ctx context exp  line ","module_ctx ctx exp  ","module_ctx context exp  ","module_ctx full_exp simple_name  ","module_ctx full_module_ctx name  ","module_ctx full_ctx exp simple_name  ","module_ctx full_exp simple_name to_s  ","module_ctx ctx full_name  "," is_bad_exp simple_name ? "," is_bad_module_ctx name ? "," is_bad_ctx exp simple_name ? "," is_bad_exp simple_name to_s ? ","module_ctx exp simple_name  ","module_ctx module_ctx name  ","module_ctx ctx exp simple_name  ","module_ctx exp simple_name to_s  ","ctx ctx exp  line ","ctx context exp  line ","ctx exp simple_exp simple_name  ","ctx exp simple_module_ctx name  ","ctx exp simple_ctx exp simple_name  ","ctx exp simple_exp simple_name to_s  ","ctx ctx exp  simple_name ","ctx context exp  simple_name ","exp simple_name  gsub ","module_ctx name  gsub ","ctx exp simple_name  gsub ","exp simple_name to_s  gsub ","exp simple_exp simple_name  to_s ","exp simple_module_ctx name  to_s ","exp simple_ctx exp simple_name  to_s ","exp simple_exp simple_name to_s  to_s ","ctx exp  simple_name to_s ","context exp  simple_name to_s ","@reject_exp simple_name s find ","@reject_module_ctx name s find ","@reject_ctx exp simple_name s find ","@reject_exp simple_name to_s s find "," value  find ","@ value  find ","reject_exp simple_name s find ","reject_module_ctx name s find ","reject_ctx exp simple_name s find ","reject_exp simple_name to_s s find ","accept_exp simple_name s include? ","accept_module_ctx name s include? ","accept_ctx exp simple_name s include? ","accept_exp simple_name to_s s include? "," SmellWarning  new _warning "," acceptable_exp simple_name ? "," acceptable_module_ctx name ? "," acceptable_ctx exp simple_name ? "," acceptable_exp simple_name to_s ? ","context ctx exp  ","context context exp  ","context full_exp simple_name  ","context full_module_ctx name  ","context full_ctx exp simple_name  ","context full_exp simple_name to_s  ","context ctx full_name  "]}," Reek Smells UncommunicativeModuleName initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Smells UncommunicativeModuleName contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek Smells UncommunicativeModuleName default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek Smells UncommunicativeMethodName examine_context":{"type":"method","name":"examine_context","children":[],"call":["SmellWarning  new ","name to_s ","ctx exp line ","ctx exp ","ctx full_name ","patt === ","@reject_names detect ","@accept_names include? ","name to_s gsub ","ctx name "," value ","@smells_found << ","method_ctx exp line ","method_ctx exp ","method_ctx full_name "," is_bad_name? "," accept? ","method_ctx name ","name gsub ","ctx name to_s ","patt =~ ","@reject_names find ","reject_names find ","accept_names include? "," smell_warning ","context exp line ","context exp "," acceptable_name? ","context name to_s ","context name ","ctx name  to_s ","method_ctx name  to_s ","ctx name to_s  to_s ","context name to_s  to_s ","ctx full_ctx name  ","ctx full_method_ctx name  ","ctx full_ctx name to_s  ","ctx full_context name to_s  ","@reject_ctx name s detect ","@reject_method_ctx name s detect ","@reject_ctx name to_s s detect ","@reject_context name to_s s detect "," value  detect ","@ value  detect ","@accept_ctx name s include? ","@accept_method_ctx name s include? ","@accept_ctx name to_s s include? ","@accept_context name to_s s include? "," value  include? ","@ value  include? ","ctx name  to_s gsub ","method_ctx name  to_s gsub ","ctx name to_s  to_s gsub ","context name to_s  to_s gsub ","ctx ctx name  ","ctx method_ctx name  ","ctx ctx name to_s  ","ctx context name to_s  ","@SmellWarning  new s_found << ","method_ctx full_ctx name  ","method_ctx full_method_ctx name  ","method_ctx full_ctx name to_s  ","method_ctx full_context name to_s  "," is_bad_ctx name ? "," is_bad_method_ctx name ? "," is_bad_ctx name to_s ? "," is_bad_context name to_s ? ","method_ctx ctx name  ","method_ctx method_ctx name  ","method_ctx ctx name to_s  ","method_ctx context name to_s  ","ctx name  gsub ","method_ctx name  gsub ","ctx name to_s  gsub ","context name to_s  gsub ","ctx ctx name  to_s ","ctx method_ctx name  to_s ","ctx ctx name to_s  to_s ","ctx context name to_s  to_s ","@reject_ctx name s find ","@reject_method_ctx name s find ","@reject_ctx name to_s s find ","@reject_context name to_s s find "," value  find ","@ value  find ","reject_ctx name s find ","reject_method_ctx name s find ","reject_ctx name to_s s find ","reject_context name to_s s find ","accept_ctx name s include? ","accept_method_ctx name s include? ","accept_ctx name to_s s include? ","accept_context name to_s s include? "," SmellWarning  new _warning "," acceptable_ctx name ? "," acceptable_method_ctx name ? "," acceptable_ctx name to_s ? "," acceptable_context name to_s ? ","context ctx name  to_s ","context method_ctx name  to_s ","context ctx name to_s  to_s ","context context name to_s  to_s ","context ctx name  ","context method_ctx name  ","context ctx name to_s  ","context context name to_s  "]}," Reek Smells UncommunicativeMethodName initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Smells UncommunicativeMethodName contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek Smells UncommunicativeMethodName default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek Smells SmellDetector config_for":{"type":"method","name":"config_for","children":[],"call":["ctx config [] "," class name split [] "," class name split "," class name "," class ","ctx config ","ctx config_for "]}," Reek Smells SmellDetector register":{"type":"method","name":"register","children":[],"call":["hooks [] << ","hooks [] "," class contexts each "," class contexts "," class ","@config enabled? "," config enabled? "," config "]}," Reek Smells ExcludeInitialize initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Smells ExcludeInitialize default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek Smells SimulatedPolymorphism conditional_counts":{"type":"method","name":"conditional_counts","children":[],"call":["sexp local_nodes ","(sym :if) each ","result [] push ","condition line ","result [] ","condition == "," s ","condition nil? ","node condition "," proc ","hash []= ","Hash  new ","klass each ","klass local_nodes ","Hash  new  [] push ","node condition  line ","Hash  new  [] ","node condition  == ","node condition  nil? ","node node condition  "]}," Reek Smells NestedIterators find_iters":{"type":"method","name":"find_iters","children":[],"call":[" find_iters ","result << ","result length == ","result length ","depth + ","elem block ","(begin\n  (lvar :ignore)) === ","@ignore_iterators any? ","Source SexpFormatter  format ","elem call ","elem first ","Sexp  === ","exp each ","(send\n  (lvar :exp) :map) flatten compact ","(send\n  (lvar :exp) :map) flatten "," find_iters_for_iter_node ","exp map ","exp unnested_nodes flat_map ","exp unnested_nodes ","exp find_nodes flat_map ","exp find_nodes ","elem Source SexpFormatter  format  "]}," Reek Smells NestedIterators find_deepest_iterators":{"type":"method","name":"find_deepest_iterators","children":[],"call":["item [] > ","item [] ","result select "," find_iters ","ctx exp ","item [] >= ","method_ctx exp "]}," Reek Smells NestedIterators initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Smells NestedIterators default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek Smells LongYieldList examine_context":{"type":"method","name":"examine_context","children":[],"call":["SmellWarning  new ","yield_node line ","method_ctx full_name ","yield_node args length ","yield_node args ","(send\n  (send\n    (lvar :method_ctx) :local_nodes\n    (sym :yield)) :select) map ","yield_node args length > ","method_ctx local_nodes select ","method_ctx local_nodes "," value ","@smells_found << ","num_params <= ","method_ctx local_nodes each "," smell_warning ","(send\n  (send\n    (lvar :ctx) :local_nodes\n    (sym :yield)) :select) map ","ctx local_nodes select ","ctx local_nodes ","@SmellWarning  new s_found << ","yield_node args length  <= "," SmellWarning  new _warning "]}," Reek Smells LongYieldList default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek Smells IrresponsibleModule examine_context":{"type":"method","name":"examine_context","children":[],"call":["SmellWarning  new ","ctx exp text_name ","ctx exp ","ctx exp line ","ctx full_name ","comment is_descriptive? ","Source CodeComment  new ","ctx exp comments "," found "," class descriptive [] "," class descriptive "," class ","comment descriptive? ","Core CodeComment  new ","expression text_name ","expression line "," descriptive? ","ctx namespace_module? ","expression name "," smell_warning ","Source CodeComment  new  is_descriptive? ","Core CodeComment  new  is_descriptive? ","ctx exp Source CodeComment  new s ","ctx exp Core CodeComment  new s ","Source CodeComment  new  descriptive? ","Core CodeComment  new  descriptive? ","ctx exp  text_name ","ctx exp  line ","ctx exp  name "," SmellWarning  new _warning "]}," Reek Smells IrresponsibleModule contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek Smells Duplication allow_calls?":{"type":"method","name":"allow_calls?","children":[],"call":["(begin\n  (lvar :allow)) === ","@allow_calls any? "]}," Reek Smells Duplication calls":{"type":"method","name":"calls","children":[],"call":["result [] push ","result [] ","asgn_node args length < ","asgn_node args length ","asgn_node args ","method_ctx local_nodes ","call_node method_name == ","call_node method_name ","hash []= ","Hash  new ","asgn_node args nil? "]}," Reek CandidateMethod name":{"type":"method","name":"name","children":[],"call":["@defn name to_s ","@defn name "," defn name to_s "," defn name "," defn "]}," Reek CandidateMethod line":{"type":"method","name":"line","children":[],"call":["@defn line "," defn line "," defn "]}," Reek CandidateMethod delete":{"type":"method","name":"delete","children":[],"call":["@params delete "]}," Reek CandidateMethod arg_names":{"type":"method","name":"arg_names","children":[],"call":["@defn arg_names compact sort ","@defn arg_names compact ","@defn arg_names "," defn arg_names compact sort "," defn arg_names compact "," defn arg_names "," defn "]}," Reek CandidateMethod initialize":{"type":"method","name":"initialize","children":[],"call":["first to_s <=> ","second to_s ","first to_s ","defn_node arg_names clone sort ","defn_node arg_names clone ","defn_node arg_names ","a to_s <=> ","b to_s ","a to_s "]}," Reek MethodGroup delete_infrequent_parameters":{"type":"method","name":"delete_infrequent_parameters","children":[],"call":["meth delete ","occurs <= ","sum + ","cm arg_names include? ","cm arg_names ","@candidate_methods inject ","meth arg_names each ","meth arg_names ","@candidate_methods each "]}," Reek MethodGroup delete_small_methods":{"type":"method","name":"delete_small_methods","children":[],"call":["meth arg_names length >= ","meth arg_names length ","meth arg_names ","@candidate_methods select "]}," Reek MethodGroup collect_clumps_in":{"type":"method","name":"collect_clumps_in","children":[],"call":[" collect_clumps_in "," clumps_containing ","methods [] ","methods length <= ","methods length "]}," Reek MethodGroup clumps_containing":{"type":"method","name":"clumps_containing","children":[],"call":["(lvar :method) + ","results [] ","clump - == ","clump - ","other arg_names ","methods select ","clump length >= ","clump length ","(send\n  (lvar :method) :arg_names) intersection ","other_method arg_names ","method arg_names ","methods each ","method arg_names & ","(send\n  (lvar :method) :arg_names) intersection  - == ","method arg_names &  - == ","(send\n  (lvar :method) :arg_names) intersection  - ","method arg_names &  - ","(send\n  (lvar :method) :arg_names) intersection  length >= ","method arg_names &  length >= ","(send\n  (lvar :method) :arg_names) intersection  length ","method arg_names &  length "]}," Reek Smells ControlCouple control_parameters":{"type":"method","name":"control_parameters","children":[],"call":["result [] push ","result [] ","params include? ","cond [] ","cond [] == ","if_node [] ","method_ctx local_nodes ","params empty? ","hash []= ","Hash  new ","method_ctx exp parameter_names ","method_ctx exp ","method_ctx exp parameter_names  include? ","if_node []  [] ","if_node []  [] == ","method_ctx exp parameter_names  empty? "]}," Reek Smells ClassVariable class_variables_in":{"type":"method","name":"class_variables_in","children":[],"call":["ast each_node ","(sym :cvar) each ","result [] push ","cvar_node line ","result [] ","cvar_node name "," proc ","hash []= ","Hash  new ","mod each ","result << ","Set  new ","mod local_nodes ","ctx local_nodes ","exp each_node ","Set  new  [] push ","Set  new  [] ","Set  new  << "]}," Reek Smells BooleanParameter examine_context":{"type":"method","name":"examine_context","children":[],"call":["SmellWarning  new ","param to_s ","method_ctx exp line ","method_ctx exp ","method_ctx full_name ","(send\n  (send\n    (send\n      (lvar :method_ctx) :parameters) :default_assignments) :select) map ","(sym :true) include? ","value [] ","method_ctx parameters default_assignments select ","method_ctx parameters default_assignments ","method_ctx parameters ","@smells_found << ","method_ctx parameters default_assignments each ","parameter to_s ","(send\n  (send\n    (lvar :method_ctx) :default_assignments) :select) map ","method_ctx default_assignments select ","method_ctx default_assignments "," smell_warning ","ctx exp line ","ctx exp ","(send\n  (send\n    (lvar :ctx) :default_assignments) :select) map ","ctx default_assignments select ","ctx default_assignments ","value type ","@SmellWarning  new s_found << "," SmellWarning  new _warning "]}," Reek Smells Attribute attributes_in":{"type":"method","name":"attributes_in","children":[],"call":["result << ","call_node line ","call_node arg_names each ","call_node arg_names ","attr_defn_methods include? ","call_node method_name ","module_ctx local_nodes ","Set  new ","ATTRIBUTE_METHODS  include? ","mod local_nodes "," recorded_public_methods include? ","args [] "," recorded_public_methods ","@result select ","@result << ","@visiblity_tracker []= ","ATTR_DEFN_METHODS  include? "," track_visibility "," visibility_modifier? ","call_node name ","module_ctx exp ","module_ctx visibility == ","module_ctx visibility ","attributes select "," track_attributes ","Set  new  << ","module_ctx exp  line ","module_ctx exp  arg_names each ","module_ctx exp  arg_names ","module_ctx exp  method_name ","@Set  new  select ","@Set  new  << ","module_ctx exp  name ","Set  new  select "," track_Set  new  "]}," Reek Smells Attribute examine_context":{"type":"method","name":"examine_context","children":[],"call":["SmellWarning  new ","attr to_s ","ctx full_name "," attributes_in map "," attributes_in "," found ","mod attributes each ","mod attributes "," attributes_in each ","attribute to_s "," visiblity_mode= "," visiblity_tracker= "," smell_warning "," SmellWarning  new _warning "]}," Reek Smells Attribute initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new "]}," Reek Smells Attribute default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek Smells Attribute contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek SmellWarning eql?":{"type":"method","name":"eql?","children":[],"call":["(send\n  (self) :<=>\n  (lvar :other)) == "," <=> ","(send\n  (self) :<=>\n  (lvar :other)) zero? "]}," Reek SmellWarning is_active":{"type":"method","name":"is_active","children":[],"call":["@status [] "]}," Reek SmellWarning source":{"type":"method","name":"source","children":[],"call":["@location [] ","@location fetch "]}," Reek SmellWarning lines":{"type":"method","name":"lines","children":[],"call":["@location [] ","@location fetch "]}," Reek SmellWarning context":{"type":"method","name":"context","children":[],"call":["@location [] ","@location fetch "]}," Reek SmellWarning message":{"type":"method","name":"message","children":[],"call":["@smell [] ","@smell message "]}," Reek SmellWarning subclass":{"type":"method","name":"subclass","children":[],"call":["@smell [] ","@smell smell_subclass "]}," Reek SmellWarning smell_class":{"type":"method","name":"smell_class","children":[],"call":["@smell [] ","@smell smell_class "," smell_detector class "," smell_detector "]}," Reek Rake Task source_file_list":{"type":"method","name":"source_file_list","children":[],"call":["FileList  [] ","ENV  [] "]}," Reek Rake Task sort_option":{"type":"method","name":"sort_option","children":[],"call":["ENV  [] "]}," Reek Rake Task bundler?":{"type":"method","name":"bundler?","children":[],"call":["File  exist? "]}," Reek Rake Task ruby_options":{"type":"method","name":"ruby_options","children":[],"call":["@ruby_opts clone << ","@ruby_opts clone ","@libs join "," bundler? "]}," Reek Rake Task config_file_list":{"type":"method","name":"config_file_list","children":[],"call":["FileList  [] ","ENV  [] "]}," Reek Rake Task cmd_words":{"type":"method","name":"cmd_words","children":[],"call":["(send\n  (const nil :Task) :ruby_exe) + + + + + "," source_file_list collect "," source_file_list ","(send\n  (const nil :Task) :ruby_exe) + + + + ","(send\n  (send nil :config_file_list) :collect) flatten "," config_file_list collect "," config_file_list ","(send\n  (const nil :Task) :ruby_exe) + + + "," sort_option ","(send\n  (const nil :Task) :ruby_exe) + + ","Task  reek_script ","(send\n  (const nil :Task) :ruby_exe) + "," ruby_options ","Task  ruby_exe "," source_file_list map ","(send\n  (send nil :config_file_list) :map) flatten "," config_file_list map "," config_file "," config_option "]}," Reek Rake Task ruby_exe":{"type":"method","name":"ruby_exe","children":[],"call":[]}," Reek Rake Task reek_script":{"type":"method","name":"reek_script","children":[],"call":[]}," Reek Rake Task run_task":{"type":"method","name":"run_task","children":[],"call":[" raise "," fail_on_error "," system ! "," system "," puts "," cmd_words join "," cmd_words "," source_file_list empty? "," source_file_list "," abort "," sys_call_failed? "," command "," verbose ","  cmd_words join _words join ","  cmd_words join _words "]}," Reek Rake Task define":{"type":"method","name":"define","children":[],"call":[" run_task "," task "," name "," desc "," Rake  application last_comment "," Rake  application "]}," Reek Rake Task initialize":{"type":"method","name":"initialize","children":[],"call":[" define "," block_given? ","File  expand_path ","File  dirname + ","File  dirname ","Pathname  glob detect ","Pathname  glob "," define_task ","FileList  [] ","ENV  [] ","ENV  fetch "]}," Reek Examiner num_masked_smells":{"type":"method","name":"num_masked_smells","children":[],"call":["@warnings num_masked_items "]}," Reek Examiner num_active_smells":{"type":"method","name":"num_active_smells","children":[],"call":["@smells length ","@warnings num_visible_items "," smells length "," smells "]}," Reek Examiner all_smells":{"type":"method","name":"all_smells","children":[],"call":["@warnings all_items "]}," Reek Examiner all_active_smells":{"type":"method","name":"all_active_smells","children":[],"call":["@warnings all_active_items to_a ","@warnings all_active_items "]}," Reek Examiner smelly?":{"type":"method","name":"smelly?","children":[],"call":["@smells empty? ! ","@smells empty? "," all_active_smells empty? ! "," all_active_smells empty? "," all_active_smells "," smells empty? ! "," smells empty? "," smells "]}," Reek Examiner smells":{"type":"method","name":"smells","children":[],"call":["@collector warnings "," collector warnings "," collector "," run "," run sort uniq "," run sort "]}," Reek Examiner initialize":{"type":"method","name":"initialize","children":[],"call":["collector warnings ","Core Sniffer  new report_on ","Core Sniffer  new ","sources each ","Core WarningCollector  new ","sources description ","Source SourceRepository  parse ","sniffer report_on ","sniffers each ","Core MaskingCollection  new ","src desc ","source to_reek_source ","source desc ","Source SourceLocator  new all_sources map ","Source SourceLocator  new all_sources ","Source SourceLocator  new ","collector smells_in ","Core SmellRepository  new ","smell_names include? ","klass smell_class_name ","smell_classes select! ","smell_names any? ","Core SmellRepository  smell_classes ","smell_types_to_filter_by include? ","klass smell_type ","smell_types select! ","smell_types_to_filter_by any? ","Core SmellRepository  smell_types "," run "," eligible_smell_types ","@sources description ","CLI WarningCollector  new ","Source SourceCode  from ","Smells SmellRepository  new ","configuration directive_for "," description ","Smells SmellRepository  eligible_smell_types ","smell_repository_class new ","smell_repository_class eligible_smell_types ","detector_repository_class new ","detector_repository_class eligible_smell_types ","@source origin ","Core WarningCollector  new  warnings ","Source SourceRepository  parse  each ","Source SourceRepository  parse  description ","source to_reek_source  desc ","Source SourceLocator  new all_Source SourceRepository  parse  map ","Source SourceLocator  new all_Source SourceRepository  parse  ","Core WarningCollector  new  smells_in ","Core SmellRepository  smell_classes  select! ","Core SmellRepository  Core SmellRepository  smell_classes  ","Core SmellRepository  smell_types _to_filter_by include? ","Core SmellRepository  smell_types  select! ","Core SmellRepository  smell_types _to_filter_by any? ","Core SmellRepository  Core SmellRepository  smell_types  "," eligible_Core SmellRepository  smell_types  ","@Source SourceRepository  parse  description ","Source SourceCode  from s description ","Smells SmellRepository  eligible_Core SmellRepository  smell_types  ","smell_Core SmellRepository  new _class new ","smell_Core SmellRepository  new _class eligible_smell_types ","smell_repository_class eligible_Core SmellRepository  smell_types  ","detector_Core SmellRepository  new _class new ","detector_Core SmellRepository  new _class eligible_smell_types ","detector_repository_class eligible_Core SmellRepository  smell_types  ","Source SourceCode  from  origin "]}," Reek Core WarningCollector warnings":{"type":"method","name":"warnings","children":[],"call":["@warnings to_a sort ","@warnings to_a ","first_sig <=> ","second smell_class ","second message ","second context ","first smell_class ","first message ","first context "]}," Reek Core WarningCollector found_smell":{"type":"method","name":"found_smell","children":[],"call":["@warnings add "]}," Reek Core WarningCollector initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new "]}," Reek Core StopContext full_name":{"type":"method","name":"full_name","children":[],"call":[]}," Reek Core StopContext count_statements":{"type":"method","name":"count_statements","children":[],"call":[]}," Reek Core StopContext config":{"type":"method","name":"config","children":[],"call":[]}," Reek Core StopContext method_missing":{"type":"method","name":"method_missing","children":[],"call":[]}," Reek Core StopContext initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Core Sniffer examine":{"type":"method","name":"examine","children":[],"call":["@smell_repository examine ","smell examine ","listeners each "," smell_listeners [] "," smell_listeners ","detector examine "," smell_listeners [] each "," smell_listeners []  each "," smell_ smell_listeners []  [] "," smell_ smell_listeners []  "," smell_ smell_listeners []  [] each "]}," Reek Core Sniffer report_on":{"type":"method","name":"report_on","children":[],"call":["@smell_repository report_on ","CodeParser  new process ","@source syntax_tree ","CodeParser  new ","stack report_on ","@detectors each_value "," check_for_smells ","detector report_on "," syntax_tree ","TreeWalker  new process ","TreeWalker  new "]}," Reek Core Sniffer configure":{"type":"method","name":"configure","children":[],"call":["@smell_repository configure ","@detectors [] push ","@detectors [] ","@config_strategy configure ","@detectors [] configure_with "]}," Reek Core Sniffer initialize":{"type":"method","name":"initialize","children":[],"call":["src configure ","Reek Source ConfigFile  new configure ","Reek Source ConfigFile  new ","config_files each ","@detectors []= ","DetectorStack  new ","klass new ","src desc ","Sniffer  smell_classes each ","Sniffer  smell_classes ","Hash  new ","extra_config_files + ","@source relevant_config_files ","Configuration AppConfiguration  configure_smell_repository ","extra_config_files +  each ","Hash  new  []= ","extra_extra_config_files +  + ","@source relevant_extra_config_files +  "]}," Reek Core SmellRepository smell_listeners":{"type":"method","name":"smell_listeners","children":[],"call":["detector register ","@detectors each_value ","hash []= ","Hash  new "]}," Reek Core SmellRepository examine":{"type":"method","name":"examine","children":[],"call":["detector examine "," smell_listeners [] each "," smell_listeners [] "," smell_listeners "]}," Reek Core SmellRepository report_on":{"type":"method","name":"report_on","children":[],"call":["detector report_on ","@detectors each_value "]}," Reek Core SmellRepository configure":{"type":"method","name":"configure","children":[],"call":["@detectors [] configure_with ","@detectors [] ","detector configure_with "," raise ","@@detectors [] s [] configure_with ","@@detectors [] s [] ","@detectors []  configure_with "]}," Reek Core SmellRepository initialize":{"type":"method","name":"initialize","children":[],"call":["@detectors []= ","klass new ","SmellRepository  smell_classes each ","SmellRepository  smell_classes ","Hash  new ","smell_classes each ","smell_types each ","Configuration AppConfiguration  configure_smell_repository ","Hash  new  []= "]}," Reek Core SmellRepository smell_classes":{"type":"method","name":"smell_classes","children":[],"call":[]}," Reek Core Overrides for_context":{"type":"method","name":"for_context","children":[],"call":["@hash [] ","contexts map ","context matches? ","@hash keys select ","@hash keys "]}," Reek Core Overrides initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Core SmellConfiguration value":{"type":"method","name":"value","children":[],"call":["@options fetch ","conf [] ","conf has_key? "," overrides_for each "," overrides_for ","conf key? "]}," Reek Core SmellConfiguration overrides_for":{"type":"method","name":"overrides_for","children":[],"call":["Overrides  new for_context ","Overrides  new ","@options fetch "]}," Reek Core SmellConfiguration enabled?":{"type":"method","name":"enabled?","children":[],"call":["@options [] "]}," Reek Core SmellConfiguration adopt!":{"type":"method","name":"adopt!","children":[],"call":["@options adopt! "]}," Reek Core SmellConfiguration initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Core SingletonMethodContext envious_receivers":{"type":"method","name":"envious_receivers","children":[],"call":[]}," Reek Core SingletonMethodContext initialize":{"type":"method","name":"initialize","children":[],"call":[" record_depends_on_self ","Source SexpFormatter  format ","exp [] ","exp [] to_s "]}," Reek Core ObjectRefs self_is_max?":{"type":"method","name":"self_is_max?","children":[],"call":["@refs [] == "," max_refs ","@refs [] "," max_keys length == "," max_keys length "," max_keys "]}," Reek Core ObjectRefs max_keys":{"type":"method","name":"max_keys","children":[],"call":["val != ","@refs reject "," max_refs ","val == ","@refs select ","  max_refs _refs "]}," Reek Core ObjectRefs max_refs":{"type":"method","name":"max_refs","children":[],"call":["@refs values max ","@refs values "]}," Reek Core ObjectRefs references_to":{"type":"method","name":"references_to","children":[],"call":["@refs [] "]}," Reek Core ObjectRefs record_reference_to":{"type":"method","name":"record_reference_to","children":[],"call":["@refs [] "]}," Reek Core ObjectRefs initialize":{"type":"method","name":"initialize","children":[],"call":["Hash  new "]}," Reek Core ModuleContext initialize":{"type":"method","name":"initialize","children":[],"call":["Source SexpFormatter  format ","exp [] ","exp children first ","exp children ","Sexp SexpFormatter  format "]}," Reek Core MethodContext envious_receivers":{"type":"method","name":"envious_receivers","children":[],"call":["@refs max_keys ","@refs self_is_max? "]}," Reek Core MethodContext record_use_of_self":{"type":"method","name":"record_use_of_self","children":[],"call":["@refs record_reference_to ","@refs record_reference_to_self "," record_depends_on_self "]}," Reek Core MethodContext record_call_to":{"type":"method","name":"record_call_to","children":[],"call":["@refs record_reference_to ","meth == ","receiver [] ","exp [] "," record_receiver "," record_use_of_self ","@refs record_ref ","receiver updated ","receiver name "]}," Reek Core MethodContext count_statements":{"type":"method","name":"count_statements","children":[],"call":[]}," Reek Core MethodContext initialize":{"type":"method","name":"initialize","children":[],"call":["ObjectRefs  new ","@parameters extend ","exp [] ","exp [] == ","@outer record_method ","exp [] to_s ","exp parameters dup ","exp parameters ","exp []  extend ","exp parameters dup  extend "]}," Reek Core MethodParameters is_assignment_block?":{"type":"method","name":"is_assignment_block?","children":[],"call":["param [] == ","param [] ","Array  === "]}," Reek Core MethodParameters is_arg?":{"type":"method","name":"is_arg?","children":[],"call":["(send\n  (send\n    (lvar :param) :to_s) :=~\n  (regexp\n    (str \"^\\\\&\")\n    (regopt))) ! ","param to_s =~ ","param to_s "," is_assignment_block? "]}," Reek Core MethodParameters default_assignments":{"type":"method","name":"default_assignments","children":[],"call":["result << ","exp [] ","exp [] == ","assignments [] each ","assignments [] "," is_assignment_block? "," [] ","result []= ","Sexp  === "," [] each ","exp is_a? ","exp optional_argument? "," each "," []  [] each "," []  [] "]}," Reek Core CodeParser push":{"type":"method","name":"push","children":[],"call":[]}," Reek Core CodeParser check_smells":{"type":"method","name":"check_smells","children":[],"call":["@sniffer examine ","@smell_repository examine "]}," Reek Core CodeParser handle_context":{"type":"method","name":"handle_context","children":[],"call":[" check_smells "," process_default "," push ","klass new ","@element count_statements ","CodeParser  count_statements ","exp body "]}," Reek Core CodeParser count_statements":{"type":"method","name":"count_statements","children":[],"call":[]}," Reek Core CodeParser count_clause":{"type":"method","name":"count_clause","children":[],"call":["@element count_statements ","sexp has_type? ! ","sexp has_type? "]}," Reek Core CodeParser process_self":{"type":"method","name":"process_self","children":[],"call":["@element record_use_of_self "]}," Reek Core CodeParser process_iasgn":{"type":"method","name":"process_iasgn","children":[],"call":[" process_default ","@element record_use_of_self ","@element record_depends_on_self ","@element record_instance_variable ","exp [] "]}," Reek Core CodeParser process_ivar":{"type":"method","name":"process_ivar","children":[],"call":[" process_iasgn "," process_default ","@element record_use_of_self "]}," Reek Core CodeParser process_when":{"type":"method","name":"process_when","children":[],"call":[" process_default "," count_clause ","exp [] ","@element count_statements ","CodeParser  count_statements ","exp [] compact "," count_statement_list ","exp body "]}," Reek Core CodeParser process_case":{"type":"method","name":"process_case","children":[],"call":["@element count_statements "," process_default "," count_statement_list ","exp [] compact ","exp [] "," count_clause ","exp else_body "]}," Reek Core CodeParser process_resbody":{"type":"method","name":"process_resbody","children":[],"call":[" process_when "," process_default "," count_statement_list ","exp [] compact ","exp [] "]}," Reek Core CodeParser process_rescue":{"type":"method","name":"process_rescue","children":[],"call":[" process_case "," count_clause ","exp [] "," process_default ","@element count_statements "]}," Reek Core CodeParser process_for":{"type":"method","name":"process_for","children":[],"call":[" process_case "," count_clause ","exp [] "," process_default ","@element count_statements "]}," Reek Core CodeParser process_until":{"type":"method","name":"process_until","children":[],"call":[" process_case "," count_clause ","exp [] "]}," Reek Core CodeParser process_while":{"type":"method","name":"process_while","children":[],"call":[" process_until "," process_default ","@element count_statements "," count_clause ","exp [] "]}," Reek Core CodeParser process_if":{"type":"method","name":"process_if","children":[],"call":["@element count_statements "," process_default "," count_clause ","exp [] "]}," Reek Core CodeParser process_op_asgn1":{"type":"method","name":"process_op_asgn1","children":[],"call":[" process_call "]}," Reek Core CodeParser process_attrasgn":{"type":"method","name":"process_attrasgn","children":[],"call":[" process_call "]}," Reek Core CodeParser process_call":{"type":"method","name":"process_call","children":[],"call":[" process_default ","@element record_call_to "]}," Reek Core CodeParser process_block":{"type":"method","name":"process_block","children":[],"call":[" process_default ","@element count_statements ","CodeParser  count_statements ","exp [] "," count_statement_list "," count_clause ","exp block "]}," Reek Core CodeParser process_zsuper":{"type":"method","name":"process_zsuper","children":[],"call":["@element record_use_of_self "]}," Reek Core CodeParser process_args":{"type":"method","name":"process_args","children":[],"call":[]}," Reek Core CodeParser process_defs":{"type":"method","name":"process_defs","children":[],"call":[" handle_context ","exp [] "," process_default "," count_statement_list ","exp body "," inside_new_context "," count_clause "]}," Reek Core CodeParser process_defn":{"type":"method","name":"process_defn","children":[],"call":[" handle_context ","exp [] "," process_default "," count_statement_list ","exp body "," inside_new_context "]}," Reek Core CodeParser process_class":{"type":"method","name":"process_class","children":[],"call":[" process_module "," do_module_or_class "]}," Reek Core CodeParser process_module":{"type":"method","name":"process_module","children":[],"call":[" check_smells ","exp [] "," process_default ","exp superclass == ","exp superclass "," push ","ModuleContext  new ","Source SexpFormatter  format "," do_module_or_class "," inside_new_context "]}," Reek Core CodeParser process_default":{"type":"method","name":"process_default","children":[],"call":[" process ","Array  === ","exp each ","exp [] each ","exp [] ","sub is_a? ","exp children each ","exp children "]}," Reek Core CodeParser process":{"type":"method","name":"process","children":[],"call":[" send "," respond_to? ","exp [] ","exp type "]}," Reek Core CodeParser initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Core CodeContext local_config":{"type":"method","name":"local_config","children":[],"call":["@outer config deep_copy adopt! ","@outer config deep_copy ","@outer config ","Source CodeComment  new config ","Source CodeComment  new ","@exp comments ","Hash  new ","@exp nil? ","@outer Source CodeComment  new config  deep_copy adopt! ","@outer Source CodeComment  new config  deep_copy ","@outer Source CodeComment  new config  ","Source CodeComment  new Source CodeComment  new config  "]}," Reek Core CodeContext full_name":{"type":"method","name":"full_name","children":[],"call":[" exp full_name "," exp ","@outer full_name ","outer == ","@context full_name ","@@outer full_name  full_name ","@outer full_name  == ","@@context full_name  full_name "]}," Reek Core CodeContext num_methods":{"type":"method","name":"num_methods","children":[],"call":[]}," Reek Core CodeContext method_missing":{"type":"method","name":"method_missing","children":[],"call":["@outer send ","@context send "]}," Reek Core CodeContext matches?":{"type":"method","name":"matches?","children":[],"call":["(begin\n  (lvar :str)) === ","candidates any? "," full_name ","re === ","strings any? ","@name to_s ","(begin\n  (lvar :str)) =~ ","(begin\n  (lvar :candidate)) =~ ","Regexp  quote ","candidate is_a? ","Regexp  quote s any? "," full_na@name to_s  ","@na@name to_s  to_s ","(begin\n  (lvar :Regexp  quote )) =~ ","Regexp  quote  is_a? "]}," Reek Core CodeContext each_node":{"type":"method","name":"each_node","children":[],"call":["@exp each_node ","result << ","@exp look_for "," block_given? "]}," Reek Core CodeContext local_nodes":{"type":"method","name":"local_nodes","children":[],"call":[" each_node "]}," Reek Core CodeContext name":{"type":"method","name":"name","children":[],"call":["@exp name "]}," Reek Core CodeContext initialize":{"type":"method","name":"initialize","children":[],"call":[" local_config "]}," Reek Cli YamlCommand execute":{"type":"method","name":"execute","children":[],"call":["view report_smells ","view output ","smells to_yaml ","view report_success ","smells empty? ","examiner smells ","@examiners each ","examiner all_smells "]}," Reek Cli YamlCommand initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Cli YamlCommand create":{"type":"method","name":"create","children":[],"call":[]}," Reek Cli VersionCommand execute":{"type":"method","name":"execute","children":[],"call":["view report_success ","view output ","@parser program_name ","@options program_name "]}," Reek Cli VersionCommand initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Cli QuietReport report":{"type":"method","name":"report","children":[],"call":[" format_list "," header ","@smell_count > ","@reporter quiet_report ","examiner smelly? "]}," Reek Cli QuietReport initialize":{"type":"method","name":"initialize","children":[],"call":["examiner description ","@warnings length ","examiner smells ","ReportSection  new ","examiner smells  length "]}," Reek Cli VerboseReport report":{"type":"method","name":"report","children":[],"call":["result + "," format_list ","warning_count > "," header ","@examiner description ","warnings length ","@examiner smells ","@reporter verbose_report ","@report_formatter format_list ","examiner smells ","examiner smelly? ","@report_formatter header "," header  + ","@report_formatter header  + ","warnings length  > ","@examiner smells  length "]}," Reek Cli VerboseReport initialize":{"type":"method","name":"initialize","children":[],"call":["ReportSection  new "]}," Reek Cli ReportFormatter format_list":{"type":"method","name":"format_list","children":[],"call":["(send\n  (lvar :warnings) :map) join ","warning subclass ","warning message ","warning context ","warnings map ","warning smell_class "]}," Reek Cli ReportFormatter header":{"type":"method","name":"header","children":[],"call":["count == "]}," Reek Cli ReekCommand execute":{"type":"method","name":"execute","children":[],"call":["view report_success ","view report_smells ","view output ","rpt report ","examiner smelly? ","@report_class new ","Examiner  new ","@sources each ","@examiners each ","@reporter report ","view output_smells_total ","@sources count > ","@sources count ","total_smells_count > ","examiner smells_count ","@reporter show ","app update_status ","@reporter add_examiner ","app report_success ","app report_smells ","@reporter has_smells? "," reporter show "," reporter "," reporter smells? "," reporter add_examiner "," smell_names "," config_files ","@parser sources each ","@parser sources ","@options sources each ","@options sources ","@report_class new  report ","Examiner  new  smelly? ","@Examiner  new s each ","Examiner  new  smells_count ","@reporter add_Examiner  new  "," reporter add_Examiner  new  "]}," Reek Cli ReekCommand initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Cli ReekCommand create":{"type":"method","name":"create","children":[],"call":[]}," Reek Cli HelpCommand execute":{"type":"method","name":"execute","children":[],"call":["view report_success ","view output ","@parser to_s ","@parser help_text ","@options help_text "]}," Reek Cli HelpCommand initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Cli Options get_sources":{"type":"method","name":"get_sources","children":[],"call":["Source SourceLocator  new all_sources ","Source SourceLocator  new ","$stdin to_reek_source ","@argv empty? "]}," Reek Cli Options parse":{"type":"method","name":"parse","children":[],"call":["ReekCommand  create ","YamlCommand  create ","@command_class == "," get_sources ","VersionCommand  new ","@parser program_name ","HelpCommand  new ","@parser parse! ","@report_class new ","Rainbow  enabled= ","@command_class new ","@options colored ","@options argv= "," get_ get_sources  ","@@report_class new _class new "]}," Reek Cli Options set_options":{"type":"method","name":"set_options","children":[],"call":["@parser on ","@parser separator ","@config_files << ","@parser banner= "," banner ","@smells_to_detect << "]}," Reek Cli Options banner":{"type":"method","name":"banner","children":[],"call":["@parser program_name ","(str \"          Usage: \") gsub "]}," Reek Cli Options initialize":{"type":"method","name":"initialize","children":[],"call":[" set_options ","OptionParser  new "," set_up_parser ","OpenStruct  new "]}," Reek Cli Application report_smells":{"type":"method","name":"report_smells","children":[],"call":[]}," Reek Cli Application report_success":{"type":"method","name":"report_success","children":[],"call":[]}," Reek Cli Application output":{"type":"method","name":"output","children":[],"call":[" print "]}," Reek Cli Application execute":{"type":"method","name":"execute","children":[],"call":["$stderr puts ","cmd execute ","@options parse ","@command execute "," error_occured? ","@options parse  execute "]}," Reek Cli Application initialize":{"type":"method","name":"initialize","children":[],"call":["Options  new ","$stderr puts "," initialize_configuration ","@options parse ","ReekCommand  new ","OptionInterpreter  new ","options_parser parse ","Options  new  parse ","options_parser parse  parse "]}," Reek ModuleContext record_attribute":{"type":"method","name":"record_attribute","children":[],"call":["@attributes << ","Name  new "]}," Reek ModuleContext check_for_attribute_declaration":{"type":"method","name":"check_for_attribute_declaration","children":[],"call":[" record_attribute ","arg [] ","exp [] [] each ","exp [] [] ","exp [] ","(sym :attr) include? "]}," Reek MethodContext record_receiver":{"type":"method","name":"record_receiver","children":[],"call":[" record_use_of_self ","@refs record_ref ","meth == ","receiver [] ","exp [] "]}," Reek ClassContext record_attribute":{"type":"method","name":"record_attribute","children":[],"call":["@attributes << ","Name  new "]}," Reek ClassContext check_for_attribute_declaration":{"type":"method","name":"check_for_attribute_declaration","children":[],"call":[" record_attribute ","arg [] ","exp [] [] each ","exp [] [] ","exp [] ","(sym :attr) include? "]}," Reek TreeDresser dress":{"type":"method","name":"dress","children":[],"call":[" dress ","Array  === ","sexp [] each ","sexp [] ","sexp extend ","EXTENSIONS  [] ","EXTENSIONS  has_key? ","Reek SexpExtensions  const_get ","Reek SexpExtensions  const_defined? "," extensions_for ","sexp sexp_type ","@klass_map klass_for new ","sexp loc ","@klass_map klass_for ","comment_map [] ","sexp children map ","sexp children ","sexp type ","sexp is_a? "," klass_map klass_for new "," klass_map klass_for "," klass_map ","sexp sexp_sexp type  ","sexp sexp type  "]}," Reek CaseNode condition":{"type":"method","name":"condition","children":[],"call":[" [] "]}," Reek IfNode condition":{"type":"method","name":"condition","children":[],"call":[" [] "]}," Reek CvarNode name":{"type":"method","name":"name","children":[],"call":[" [] "]}," Reek SexpNode look_for":{"type":"method","name":"look_for","children":[],"call":["blk call "," first == "," first ","elem look_for ","ignoring include? ","elem first ","Sexp  === "," each "]}," Reek SexpNode has_type?":{"type":"method","name":"has_type?","children":[],"call":[" first == "," first "," is_language_node? "]}," Reek SexpNode is_language_node?":{"type":"method","name":"is_language_node?","children":[],"call":[" first class == "," first class "," first "]}," Reek SexpNode children":{"type":"method","name":"children","children":[],"call":["Sexp  === "," find_all "]}," Reek ModuleContext record_method":{"type":"method","name":"record_method","children":[],"call":["@parsed_methods << "]}," Reek ModuleContext parameterized_methods":{"type":"method","name":"parameterized_methods","children":[],"call":["meth parameters length >= ","meth parameters length ","meth parameters ","@parsed_methods select "]}," Reek SmellConfiguration deep_copy":{"type":"method","name":"deep_copy","children":[],"call":["@options deep_copy "]}," Reek SmellConfiguration adopt!":{"type":"method","name":"adopt!","children":[],"call":["@options adopt! "]}," Reek CodeParser do_module_or_class":{"type":"method","name":"do_module_or_class","children":[],"call":[" check_smells ","exp [] "," process_default ","@element is_struct? "," push ","context_class create "]}," Reek CodeContext each":{"type":"method","name":"each","children":[],"call":["result << ","@exp look_for "," block_given? "]}," Reek VariableContainer record_local_variable":{"type":"method","name":"record_local_variable","children":[],"call":["@local_variables << ","Name  new "]}," Reek VariableContainer initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new "]}," Reek VersionCommand execute":{"type":"method","name":"execute","children":[],"call":["view report_success ","view output "]}," Reek VersionCommand initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek TreeDresser extensions_for":{"type":"method","name":"extensions_for","children":[],"call":["node_type to_s capitalize ","node_type to_s "]}," Reek SexpExtensions IfNode condition":{"type":"method","name":"condition","children":[],"call":[" [] "]}," Reek SexpExtensions DefnNode parameters":{"type":"method","name":"parameters","children":[],"call":[" [] "]}," Reek SexpExtensions DefnNode method_name":{"type":"method","name":"method_name","children":[],"call":[" [] "]}," Reek SexpExtensions CvarNode name":{"type":"method","name":"name","children":[],"call":[" [] "]}," Reek SexpExtensions CallNode arg_names":{"type":"method","name":"arg_names","children":[],"call":["arg [] "," args [] map "," args [] "," args "]}," Reek SexpExtensions CallNode args":{"type":"method","name":"args","children":[],"call":[" [] "]}," Reek SexpExtensions CallNode method_name":{"type":"method","name":"method_name","children":[],"call":[" [] "]}," Reek SexpExtensions CallNode receiver":{"type":"method","name":"receiver","children":[],"call":[" [] "]}," Reek SexpExtensions CaseNode condition":{"type":"method","name":"condition","children":[],"call":[" [] "]}," Reek ReekCommand execute":{"type":"method","name":"execute","children":[],"call":["view report_success ","view report_smells ","@sniffer smelly? ","view output ","rpt report ","@report_class new ","@sniffer sniffers ","@report_class new  report "]}," Reek ReekCommand sniff_stdin":{"type":"method","name":"sniff_stdin","children":[],"call":["Reek Sniffer  new ","$stdin to_reek_source "]}," Reek ReekCommand initialize":{"type":"method","name":"initialize","children":[],"call":[" sniff_stdin ","sources sniff ","sources length > ","sources length "]}," Reek MethodParameters is_assignment_block?":{"type":"method","name":"is_assignment_block?","children":[],"call":["param [] == ","param [] ","Array  === "]}," Reek MethodParameters default_assignments":{"type":"method","name":"default_assignments","children":[],"call":["result []= ","exp [] ","exp [] == ","assignments [] each ","assignments [] "," is_assignment_block? "," [] "," []  [] each "," []  [] "]}," MaskingCollection each_visible_item":{"type":"method","name":"each_visible_item","children":[],"call":["@visible_items each "]}," MaskingCollection each_item":{"type":"method","name":"each_item","children":[],"call":["all each ","all merge ","SortedSet  new ","SortedSet  new  each ","SortedSet  new  merge "]}," MaskingCollection num_masked_items":{"type":"method","name":"num_masked_items","children":[],"call":["@masked_items length "]}," MaskingCollection num_visible_items":{"type":"method","name":"num_visible_items","children":[],"call":["@visible_items length "]}," MaskingCollection add_masked":{"type":"method","name":"add_masked","children":[],"call":["@masked_items add ","@visible_items include? "]}," MaskingCollection add":{"type":"method","name":"add","children":[],"call":["@masked_items delete ","@masked_items include? ","@visible_items add "]}," MaskingCollection initialize":{"type":"method","name":"initialize","children":[],"call":["SortedSet  new "]}," Reek HelpCommand execute":{"type":"method","name":"execute","children":[],"call":["view report_success ","view output ","@parser to_s "]}," Reek HelpCommand initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek CodeContext each_node":{"type":"method","name":"each_node","children":[],"call":["result << ","@exp look_for "," block_given? "]}," Reek CodeContext local_nodes":{"type":"method","name":"local_nodes","children":[],"call":[" each_node "]}," Reek VerboseReport report":{"type":"method","name":"report","children":[],"call":["(send\n  (ivar :@partials) :map) join ","section verbose_report ","@partials map "]}," Reek ReportSection verbose_report":{"type":"method","name":"verbose_report","children":[],"call":[" smell_list "," should_report "," header "]}," Reek ReportSection found_masked_smell":{"type":"method","name":"found_masked_smell","children":[],"call":["@cwarnings add_masked "]}," Reek ReportSection found_smell":{"type":"method","name":"found_smell","children":[],"call":["@cwarnings add "]}," Reek Options banner":{"type":"method","name":"banner","children":[],"call":["@parser program_name "]}," Reek Application report_smells":{"type":"method","name":"report_smells","children":[],"call":[]}," Reek Application report_success":{"type":"method","name":"report_success","children":[],"call":[]}," Reek Application output":{"type":"method","name":"output","children":[],"call":[" puts "]}," MaskingCollection found_masked_smell":{"type":"method","name":"found_masked_smell","children":[],"call":["@masked_items add ","@visible_items include? "]}," MaskingCollection found_smell":{"type":"method","name":"found_smell","children":[],"call":["@masked_items delete ","@masked_items include? ","@visible_items add "]}," Reek StopContext full_name":{"type":"method","name":"full_name","children":[],"call":[]}," Reek Smells UncommunicativeName accept?":{"type":"method","name":"accept?","children":[],"call":[" value include? ","context full_name "," value "]}," Reek SmellWarning smell_name":{"type":"method","name":"smell_name","children":[],"call":["(send\n  (ivar :@smell) :gsub\n  (regexp\n    (str \"([a-z])([A-Z])\")\n    (regopt))) split join ","(send\n  (ivar :@smell) :gsub\n  (regexp\n    (str \"([a-z])([A-Z])\")\n    (regopt))) split ","@smell gsub ","(send\n  (send\n    (ivar :@smell) :[]\n    (const nil :CLASS_KEY)) :gsub\n  (regexp\n    (str \"([a-z])([A-Z])\")\n    (regopt))) split join ","(send\n  (send\n    (ivar :@smell) :[]\n    (const nil :CLASS_KEY)) :gsub\n  (regexp\n    (str \"([a-z])([A-Z])\")\n    (regopt))) split ","@smell [] gsub ","@smell [] "]}," Reek SingletonMethodContext full_name":{"type":"method","name":"full_name","children":[],"call":["outer == ","@outer full_name ","@outer full_name  == ","@@outer full_name  full_name "]}," Reek CodeContext full_name":{"type":"method","name":"full_name","children":[],"call":["outer == ","@outer full_name ","@outer full_name  == ","@@outer full_name  full_name "]}," Reek Source err_io=":{"type":"method","name":"err_io=","children":[],"call":[]}," Reek Spec ShouldReek list_smells":{"type":"method","name":"list_smells","children":[],"call":["(send\n  (send\n    (lvar :examiner) :all_active_smells) :map) join ","smell report ","examiner all_active_smells map ","examiner all_active_smells ","(send\n  (send\n    (lvar :examiner) :smells) :map) join ","examiner smells map ","examiner smells "]}," Reek Source SexpExtensions DefsNode parameter_names":{"type":"method","name":"parameter_names","children":[],"call":[" parameters [] "," parameters "]}," Reek Source SexpExtensions DefsNode parameters":{"type":"method","name":"parameters","children":[],"call":["Sexp  === "," [] reject "," [] "]}," Reek Source SexpExtensions DefsNode method_name":{"type":"method","name":"method_name","children":[],"call":[" [] "]}," Reek Source SexpExtensions DefnNode parameter_names":{"type":"method","name":"parameter_names","children":[],"call":[" parameters [] "," parameters "]}," Reek Source SexpExtensions DefnNode parameters":{"type":"method","name":"parameters","children":[],"call":["Sexp  === "," [] reject "," [] "]}," Reek Source SexpExtensions DefnNode method_name":{"type":"method","name":"method_name","children":[],"call":[" [] "]}," Reek Smells UncommunicativeModuleName is_bad_name?":{"type":"method","name":"is_bad_name?","children":[],"call":["patt === "," value detect "," value "," value include? ","name to_s gsub ","name to_s "]}," Reek Smells UncommunicativeModuleName accept?":{"type":"method","name":"accept?","children":[],"call":[" value include? ","context full_name "," value "]}," Reek Smells UncommunicativeMethodName is_bad_name?":{"type":"method","name":"is_bad_name?","children":[],"call":["patt === "," value detect "," value "," value include? ","name to_s gsub ","name to_s "]}," Reek Smells UncommunicativeMethodName accept?":{"type":"method","name":"accept?","children":[],"call":[" value include? ","context full_name "," value "]}," Reek Smells SmellDetector smell_type":{"type":"method","name":"smell_type","children":[],"call":[" class name split [] "," class name split "," class name "," class "," default_smell_category "," class smell_type "," name split last "," name split "," name "]}," Reek Core Sniffer smell_listeners":{"type":"method","name":"smell_listeners","children":[],"call":["stack listen_to ","@detectors each_value ","hash []= ","Hash  new ","detector register "]}," Reek Core Sniffer check_for_smells":{"type":"method","name":"check_for_smells","children":[],"call":["CodeParser  new process ","@source syntax_tree ","CodeParser  new "]}," Reek Core Sniffer smell_classes":{"type":"method","name":"smell_classes","children":[],"call":[]}," Reek Core SmellConfiguration deep_copy":{"type":"method","name":"deep_copy","children":[],"call":["@options deep_copy "]}," Reek Core SingletonMethodContext full_name":{"type":"method","name":"full_name","children":[],"call":["outer == ","@outer full_name ","@outer full_name  == ","@@outer full_name  full_name "]}," Reek Core ObjectRefs refs_to_self":{"type":"method","name":"refs_to_self","children":[],"call":["@refs [] "]}," Reek Core ObjectRefs record_ref":{"type":"method","name":"record_ref","children":[],"call":["@refs [] "," record_reference_to_self ","exp [] "]}," Reek Core ObjectRefs record_reference_to_self":{"type":"method","name":"record_reference_to_self","children":[],"call":[" record_ref "]}," Reek Core ModuleContext record_method":{"type":"method","name":"record_method","children":[],"call":["@parsed_methods << "]}," Reek Core ModuleContext parameterized_methods":{"type":"method","name":"parameterized_methods","children":[],"call":["meth parameters length >= ","meth parameters length ","meth parameters ","@parsed_methods select "]}," Reek Core ModuleContext resolve_string":{"type":"method","name":"resolve_string","children":[],"call":[" resolve ","RubyParser  new parse ","RubyParser  new ","str to_s ","str =~ "]}," Reek Core ModuleContext resolve":{"type":"method","name":"resolve","children":[],"call":["name to_s ","StopContext  new ","ModuleContext  create ","exp [] to_s ","exp [] "," resolve [] "," resolve "," resolve_string ","exp to_s ","Array  === ","exp []  to_s "]}," Reek Core ModuleContext from_s":{"type":"method","name":"from_s","children":[],"call":["CodeParser  new do_module_or_class ","source syntax_tree ","CodeParser  new ","Sniffer  new ","src to_reek_source ","src to_reek_source  syntax_tree ","src to_reek_src to_reek_source  "]}," Reek Core ModuleContext create":{"type":"method","name":"create","children":[],"call":[" new ","res [] "," resolve ","exp [] ","Source SexpFormatter  format "," resolve  [] ","Source SexpFormatter  format  [] ","  resolve olve "," Source SexpFormatter  format olve "]}," Reek Core MethodContext record_receiver":{"type":"method","name":"record_receiver","children":[],"call":[" record_use_of_self ","@refs record_ref ","meth == ","receiver [] ","exp [] "]}," Reek Core MethodContext record_depends_on_self":{"type":"method","name":"record_depends_on_self","children":[],"call":[]}," Reek Core MethodContext record_instance_variable":{"type":"method","name":"record_instance_variable","children":[],"call":[" record_use_of_self "]}," Reek Core MethodContext depends_on_instance?":{"type":"method","name":"depends_on_instance?","children":[],"call":[]}," Reek Core MethodParameters include?":{"type":"method","name":"include?","children":[],"call":[" names include? "," names "]}," Reek Core MethodParameters length":{"type":"method","name":"length","children":[],"call":[" names length "," names "]}," Reek Core MethodParameters names":{"type":"method","name":"names","children":[],"call":["arg to_s ","(send\n  (send\n    (self) :[]\n    (irange\n      (int 1)\n      (int -1))) :select) map "," is_arg? "," [] select "," [] "]}," Reek Core MaskingCollection each_visible_item":{"type":"method","name":"each_visible_item","children":[],"call":["@visible_items each "]}," Reek Core MaskingCollection each_item":{"type":"method","name":"each_item","children":[],"call":["all each ","all merge ","SortedSet  new ","SortedSet  new  each ","SortedSet  new  merge "]}," Reek Core MaskingCollection num_masked_items":{"type":"method","name":"num_masked_items","children":[],"call":["@masked_items length "]}," Reek Core MaskingCollection num_visible_items":{"type":"method","name":"num_visible_items","children":[],"call":["@visible_items length "]}," Reek Core MaskingCollection found_masked_smell":{"type":"method","name":"found_masked_smell","children":[],"call":["@masked_items add ","@visible_items include? "]}," Reek Core MaskingCollection found_smell":{"type":"method","name":"found_smell","children":[],"call":["@masked_items delete ","@masked_items include? ","@visible_items add "]}," Reek Core MaskingCollection all_active_items":{"type":"method","name":"all_active_items","children":[],"call":[]}," Reek Core MaskingCollection all_items":{"type":"method","name":"all_items","children":[],"call":["all to_a ","all merge ","SortedSet  new ","SortedSet  new  to_a ","SortedSet  new  merge "]}," Reek Core MaskingCollection initialize":{"type":"method","name":"initialize","children":[],"call":["SortedSet  new "]}," Reek Core DetectorStack report_on":{"type":"method","name":"report_on","children":[],"call":["det report_on ","@detectors each "]}," Reek Core DetectorStack listen_to":{"type":"method","name":"listen_to","children":[],"call":["det listen_to ","@detectors each "]}," Reek Core DetectorStack push":{"type":"method","name":"push","children":[],"call":["@detectors << ","@detectors [] supersede_with ","@detectors [] "]}," Reek Core DetectorStack initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Core CodeParser process_lasgn":{"type":"method","name":"process_lasgn","children":[],"call":[" process_default ","@element record_local_variable ","exp [] "]}," Reek Core CodeParser process_iter":{"type":"method","name":"process_iter","children":[],"call":[" check_smells ","exp [] "," process_default "," push ","BlockContext  new "," process "," count_clause "]}," Reek Core CodeParser process_lit":{"type":"method","name":"process_lit","children":[],"call":["@element record_depends_on_self ","val == ","exp [] ","exp []  == "]}," Reek Core CodeParser do_module_or_class":{"type":"method","name":"do_module_or_class","children":[],"call":[" check_smells ","exp [] "," process_default ","@element is_struct? "," push ","context_class create "]}," Reek Core ClassContext is_struct?":{"type":"method","name":"is_struct?","children":[],"call":["@superclass == "," exp superclass == "," exp superclass "," exp "]}," Reek Core ClassContext initialize":{"type":"method","name":"initialize","children":[],"call":["exp [] "]}," Reek Core BlockContext initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Cli ReportSection masked_header":{"type":"method","name":"masked_header","children":[],"call":["num_masked_warnings == ","@examiner num_masked_smells ","@examiner num_masked_smells  == "]}," Reek Cli ReportSection visible_header":{"type":"method","name":"visible_header","children":[],"call":["num_smells == ","@examiner all_active_smells length ","@examiner all_active_smells ","@examiner smells length ","@examiner smells ","@examiner all_active_smells length  == ","@examiner smells length  == "]}," Reek Cli ReportSection should_report":{"type":"method","name":"should_report","children":[],"call":["@examiner num_masked_smells > ","@examiner num_masked_smells ","@examiner num_active_smells > ","@examiner num_active_smells ","@examiner num_smells > ","@examiner num_smells "]}," Reek Cli ReportSection smell_list":{"type":"method","name":"smell_list","children":[],"call":["result join ","smell report ","@examiner all_active_smells map ","@examiner all_active_smells ","@examiner all_smells map ","@examiner all_smells ","(send\n  (send\n    (ivar :@examiner) :smells) :map) join ","@examiner smells map ","@examiner smells "]}," Reek Cli ReportSection header":{"type":"method","name":"header","children":[],"call":[" masked_header "," visible_header ","@examiner description "]}," Reek Cli ReportSection quiet_report":{"type":"method","name":"quiet_report","children":[],"call":[" smell_list "," header "," should_report "]}," Reek Cli ReportSection verbose_report":{"type":"method","name":"verbose_report","children":[],"call":[" smell_list "," should_report "," header "]}," Reek Cli ReportSection initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Source SexpExtensions DefnNode arg_names":{"type":"method","name":"arg_names","children":[],"call":["param to_s =~ ","param to_s ","Sexp  === "," [] [] reject "," [] [] "," [] "]}," Reek Source SexpExtensions ClassNode full_name":{"type":"method","name":"full_name","children":[],"call":[" name ","outer == "]}," Reek Source SexpExtensions ClassNode name":{"type":"method","name":"name","children":[],"call":[" [] "]}," Reek MethodGroup prune_candidates":{"type":"method","name":"prune_candidates","children":[],"call":["meth arg_names length >= ","meth arg_names length ","meth arg_names ","@candidate_methods select ","meth delete ","count <= ","(send\n  (ivar :@candidate_methods) :select) length ","cm arg_names include? ","cm arg_names ","meth arg_names each ","@candidate_methods each ","(send\n  (ivar :@candidate_methods) :select) length  <= "]}," Reek Examiner num_smells":{"type":"method","name":"num_smells","children":[],"call":["@smells length "]}," Reek ActiveAndMaskedSmells smells_in":{"type":"method","name":"smells_in","children":[],"call":["Core MaskingCollection  new collect_from all_items ","Core MaskingCollection  new collect_from ","Core MaskingCollection  new "]}," Reek ActiveAndMaskedSmells configure":{"type":"method","name":"configure","children":[],"call":["detectors push "]}," Reek ActiveSmellsOnly smells_in":{"type":"method","name":"smells_in","children":[],"call":["Core MaskingCollection  new collect_from all_active_items to_a ","Core MaskingCollection  new collect_from all_active_items ","Core MaskingCollection  new collect_from ","Core MaskingCollection  new "]}," Reek ActiveSmellsOnly configure":{"type":"method","name":"configure","children":[],"call":["detectors adopt "]}," Reek Core MaskingCollection collect_from":{"type":"method","name":"collect_from","children":[],"call":["Core Sniffer  new report_on ","Core Sniffer  new ","sources each "]}," Reek Core DetectorStack adopt":{"type":"method","name":"adopt","children":[],"call":["@detectors [] configure_with ","@detectors [] "]}," Reek Smells UnusedParameters examine_context":{"type":"method","name":"examine_context","children":[],"call":["SmellWarning  new ","param to_s ","method_ctx exp line ","method_ctx exp ","method_ctx full_name ","(send\n  (lvar :params) :select) map ","method_ctx local_nodes include? ! ","method_ctx local_nodes include? ","Sexp  new ","param to_sym ","method_ctx local_nodes ","(str \"\") include? ! ","(str \"\") include? ","param to_s sub ","params select ","method_ctx exp arg_names "," smell_warning "," unused_params map "," unused_params "," zsuper? ","method_ctx unused_params map ","method_ctx unused_params ","method_ctx uses_super_with_implicit_arguments? ","param name to_s ","param name ","ctx exp line ","ctx exp ","ctx unused_params map ","ctx unused_params ","ctx uses_super_with_implicit_arguments? ","param to_s sub  to_s ","method_ctx full_param name to_s  ","(send\n  (lvar :param to_s sub s) :select) map ","param to_s sub  to_sym ","param to_s sub  to_s sub ","param to_s sub s select ","method_ctx exp arg_param name to_s s "," unused_param to_s sub s map "," unused_param to_s sub s ","method_ctx unused_param to_s sub s map ","method_ctx unused_param to_s sub s ","param to_s sub  name to_s ","param param name to_s  to_s ","param to_s sub  name ","param param name to_s  ","ctx unused_param to_s sub s map ","ctx unused_param to_s sub s "]}," Reek Smells UncommunicativeVariableName record_variable_name":{"type":"method","name":"record_variable_name","children":[],"call":["accumulator [] push ","exp line ","accumulator [] ","varname to_sym ","varname != ","symbol to_s sub ","symbol to_s ","varname == ","varname to_sym name to_sym ","symbol to_s sub  to_sym ","varname to_sym name != ","symbol to_s sub  != ","varname to_sym name == ","symbol to_s sub  == "]}," Reek Smells UncommunicativeVariableName recursively_record_variable_names":{"type":"method","name":"recursively_record_variable_names","children":[],"call":[" recursively_record_variable_names ","subexp first == ","subexp first "," record_variable_name ","subexp is_a? ","exp [] each ","exp [] ","subexp name ","subexp type ","exp children each ","exp children "]}," Reek Smells UncommunicativeVariableName find_block_argument_variable_names":{"type":"method","name":"find_block_argument_variable_names","children":[],"call":[" recursively_record_variable_names ","args_nodes each ","arg_search_exp each_node ","exp body ","exp first ","exp type ","arg_search_exp each_node  each "]}," Reek Smells UncommunicativeVariableName find_assignment_variable_names":{"type":"method","name":"find_assignment_variable_names","children":[],"call":["accumulator [] push ","asgn line ","accumulator [] ","asgn [] ","assignment_nodes each ","exp each_node ","exp first ","asgn children first ","asgn children ","exp type ","exp each_node  each "]}," Reek Smells IrresponsibleModule descriptive":{"type":"method","name":"descriptive","children":[],"call":[]}," Reek Smells NilCheck CaseNodeFinder nil_chk?":{"type":"method","name":"nil_chk?","children":[],"call":["when_node include? "]}," Reek Smells NilCheck CaseNodeFinder smelly":{"type":"method","name":"smelly","children":[],"call":[" nil_chk? ","@nodes select "]}," Reek Smells NilCheck CaseNodeFinder initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Smells NilCheck CallNodeFinder include_eq?":{"type":"method","name":"include_eq?","children":[],"call":["call include? ","(sym :==) any? "]}," Reek Smells NilCheck CallNodeFinder eq_nil_use?":{"type":"method","name":"eq_nil_use?","children":[],"call":["call include? "," include_eq? "]}," Reek Smells NilCheck CallNodeFinder nilQ_use?":{"type":"method","name":"nilQ_use?","children":[],"call":["call last == ","call last "]}," Reek Smells NilCheck CallNodeFinder nil_chk?":{"type":"method","name":"nil_chk?","children":[],"call":[" eq_nil_use? "," nilQ_use? "]}," Reek Smells NilCheck CallNodeFinder smelly":{"type":"method","name":"smelly","children":[],"call":[" nil_chk? ","@nodes select "]}," Reek Smells NilCheck CallNodeFinder initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Smells NilCheck NodeFinder initialize":{"type":"method","name":"initialize","children":[],"call":[" Array ","ctx local_nodes "]}," Reek Smells NilCheck examine_context":{"type":"method","name":"examine_context","children":[],"call":["SmellWarning  new ","node line ","ctx full_name ","smelly_nodes map ","smelly_calls + ","case_nodes smelly ","call_nodes smelly ","CaseNodeFinder  new ","CallNodeFinder  new "," Array ","call_nodes smelly + ","call_node_finder smelly_nodes + ","case_node_finder smelly_nodes ","call_node_finder smelly_nodes ","NodeFinder  new "," smell_warning ","smelly_calls +  map ","call_nodes smelly +  map ","call_node_finder smelly_nodes +  map ","call_nodes smelly  + ","CaseNodeFinder  new  smelly ","CallNodeFinder  new  smelly ","CallNodeFinder  new  smelly + ","call_node_finder smelly_calls +  + ","call_node_finder call_nodes smelly +  + ","call_node_finder call_node_finder smelly_nodes +  + ","NodeFinder  new  smelly_nodes + ","case_node_finder smelly_calls +  ","case_node_finder call_nodes smelly +  ","case_node_finder call_node_finder smelly_nodes +  ","NodeFinder  new  smelly_nodes ","call_node_finder smelly_calls +  ","call_node_finder call_nodes smelly +  ","call_node_finder call_node_finder smelly_nodes +  "]}," Reek Smells NilCheck initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Cli ShowLineReport format_list":{"type":"method","name":"format_list","children":[],"call":["(send\n  (lvar :warnings) :map) join ","warning subclass ","warning message ","warning context ","warning lines inspect ","warning lines ","warnings map "]}," Reek Smells UnusedParameters smell_warning":{"type":"method","name":"smell_warning","children":[],"call":["SmellWarning  new ","param to_s ","method_ctx exp line ","method_ctx exp ","method_ctx full_name ","param name to_s ","param name "]}," Reek Smells UnusedParameters zsuper?":{"type":"method","name":"zsuper?","children":[],"call":["method_ctx exp body find_node ","method_ctx exp body ","method_ctx exp ","method_ctx exp body has_nested_node? "]}," Reek Smells UnusedParameters anonymous_splat?":{"type":"method","name":"anonymous_splat?","children":[],"call":["param == "]}," Reek Smells UnusedParameters marked_unused?":{"type":"method","name":"marked_unused?","children":[],"call":["param start_with? "]}," Reek Smells UnusedParameters sanitized_param":{"type":"method","name":"sanitized_param","children":[],"call":["param to_s sub ","param to_s "]}," Reek Smells UnusedParameters params":{"type":"method","name":"params","children":[],"call":["method_ctx exp arg_names ","method_ctx exp "]}," Reek Smells UnusedParameters unused?":{"type":"method","name":"unused?","children":[],"call":["method_ctx local_nodes include? ! ","method_ctx local_nodes include? ","Sexp  new ","param to_sym ","method_ctx local_nodes "]}," Reek Smells UnusedParameters skip?":{"type":"method","name":"skip?","children":[],"call":[" marked_unused? "," anonymous_splat? "]}," Reek Smells UnusedParameters unused_params":{"type":"method","name":"unused_params","children":[],"call":[" unused? "," skip? "," sanitized_param "," params select "," params ","method_ctx uses_param? ! ","method_ctx uses_param? "," sanitized_ sanitized_param  ","  sanitized_param s select ","  sanitized_param s ","method_ctx uses_ sanitized_param ? ! ","method_ctx uses_ sanitized_param ? "]}," Reek Smells TooManyStatements examine_context":{"type":"method","name":"examine_context","children":[],"call":["SmellWarning  new ","ctx exp line ","ctx exp ","ctx full_name ","num <= ","ctx num_statements "," value ","count <= "," smell_warning ","ctx num_statements  <= ","ctx ctx num_statements _statements "," SmellWarning  new _warning "]}," Reek Smells TooManyStatements default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek Smells TooManyMethods check_num_methods":{"type":"method","name":"check_num_methods","children":[],"call":["SmellWarning  new ","ctx exp line ","ctx exp ","ctx full_name ","actual <= ","ctx local_nodes length ","ctx local_nodes ","ctx node_instance_methods length ","ctx node_instance_methods ","ctx local_nodes length  <= ","ctx node_instance_methods length  <= "]}," Reek Smells TooManyMethods examine_context":{"type":"method","name":"examine_context","children":[],"call":[" check_num_methods "," value ","SmellWarning  new ","ctx exp line ","ctx exp ","ctx full_name ","actual <= ","ctx node_instance_methods length ","ctx node_instance_methods "," smell_warning ","ctx node_instance_methods length  <= "]}," Reek Smells TooManyMethods default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek Smells TooManyMethods contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek Smells TooManyInstanceVariables check_num_ivars":{"type":"method","name":"check_num_ivars","children":[],"call":["SmellWarning  new ","ctx exp line ","ctx exp ","ctx full_name ","count <= ","(send\n  (send\n    (lvar :ctx) :local_nodes\n    (sym :iasgn)) :map) uniq length ","(send\n  (send\n    (lvar :ctx) :local_nodes\n    (sym :iasgn)) :map) uniq ","iasgn [] ","ctx local_nodes map ","ctx local_nodes ","(send\n  (send\n    (lvar :ctx) :local_nodes\n    (sym :ivasgn)) :map) uniq length ","(send\n  (send\n    (lvar :ctx) :local_nodes\n    (sym :ivasgn)) :map) uniq ","ivasgn [] ","(send\n  (send\n    (lvar :ctx) :local_nodes\n    (sym :iasgn)) :map) uniq length  <= ","(send\n  (send\n    (lvar :ctx) :local_nodes\n    (sym :ivasgn)) :map) uniq length  <= "]}," Reek Smells TooManyInstanceVariables examine_context":{"type":"method","name":"examine_context","children":[],"call":[" check_num_ivars "," value ","SmellWarning  new ","ctx exp line ","ctx exp ","ctx full_name ","count <= ","(send\n  (send\n    (lvar :ctx) :local_nodes\n    (sym :ivasgn)) :map) uniq length ","(send\n  (send\n    (lvar :ctx) :local_nodes\n    (sym :ivasgn)) :map) uniq ","ivasgn [] ","ctx local_nodes map ","ctx local_nodes "," smell_warning ","ivasgn children first ","ivasgn children ","(send\n  (send\n    (lvar :ctx) :local_nodes\n    (sym :ivasgn)) :map) uniq length  <= "]}," Reek Smells TooManyInstanceVariables default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek Smells TooManyInstanceVariables contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek Smells RepeatedConditional conditional_counts":{"type":"method","name":"conditional_counts","children":[],"call":["sexp local_nodes ","(sym :if) each ","result [] push ","condition line ","result [] ","condition == "," s ","condition nil? ","node condition "," proc ","hash []= ","Hash  new ","node condition  line ","node condition  == ","node condition  nil? ","node node condition  "]}," Reek Smells RepeatedConditional examine_context":{"type":"method","name":"examine_context","children":[],"call":["SmellWarning  new ","ctx full_name ","key format_ruby ","lines length ","(send\n  (send nil :conditional_counts\n    (lvar :ctx)) :select) map ","lines length > "," conditional_counts select "," conditional_counts "," value ","key format_to_ruby "," smell_warning "]}," Reek Smells RepeatedConditional default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek Smells RepeatedConditional contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek Smells NestedIterators ignored_iterator?":{"type":"method","name":"ignored_iterator?","children":[],"call":["(begin\n  (lvar :pattern)) === ","@ignore_iterators any? ","exp call method_name to_s ","exp call method_name ","exp call ","(begin\n  (lvar :pattern)) =~ ","exp without_block_arguments? ","exp call name "," ignore_iterators any? "," ignore_iterators ","exp call method_exp call method_name to_s  to_s ","exp call method_exp call method_name to_s  ","exp call exp call method_name to_s  "]}," Reek Smells NestedIterators find_iters_for_iter_node":{"type":"method","name":"find_iters_for_iter_node","children":[],"call":["result << "," find_iters + "," find_iters ","depth + ","exp block ","exp call "," ignored_iterator? "," find_iters +  << ","  ignored_iterator? _iterator? "]}," Reek Smells NestedIterators find_deepest_iterator":{"type":"method","name":"find_deepest_iterator","children":[],"call":["(send\n  (send nil :find_iters\n    (send\n      (lvar :ctx) :exp)\n    (int 1)) :sort_by) last ","item [] "," find_iters sort_by "," find_iters ","ctx exp "," value "," scout flatten sort last "," scout flatten sort "," scout flatten "," scout ","exp find_nodes "," ignore_iterators= ","(send\n  (send nil :find_iters\n    (send\n      (lvar :ctx) :ctx exp )\n    (int 1)) :sort_by) last ","ctx ctx exp  ","ctx exp  find_nodes "]}," Reek Smells DuplicateMethodCall allow_calls?":{"type":"method","name":"allow_calls?","children":[],"call":["(begin\n  (lvar :allow)) === ","@allow_calls any? "]}," Reek Smells DuplicateMethodCall calls":{"type":"method","name":"calls","children":[],"call":["call_exp format_ruby ","result to_a sort_by ","result to_a ","result [] push ","result [] ","asgn_node args nil? ","asgn_node args ","method_ctx local_nodes ","call_node args empty? ","call_node args ","call_node receiver nil? ","call_node receiver ","call_node method_name == ","call_node method_name ","hash []= ","Hash  new "]}," Reek Smells DuplicateMethodCall examine_context":{"type":"method","name":"examine_context","children":[],"call":["SmellWarning  new ","exp line ","copies map ","ctx full_name ","occurs == ","call_exp format_ruby ","copies length ","(send\n  (send nil :calls\n    (lvar :ctx)) :select) map "," allow_calls? ! "," allow_calls? ","copies length > "," calls select "," calls "," value ","found_call occurs ","found_call call ","found_call smell_message ","found_call lines ","CallCollector  new smelly_calls map ","CallCollector  new smelly_calls ","CallCollector  new ","collector smelly_calls map ","collector smelly_calls "," smell_warning ","copies length  == ","call_exp format_ruby _exp format_ruby ","(send\n  (send nil :call_exp format_ruby s\n    (lvar :ctx)) :select) map "," allow_call_exp format_ruby s? ! ","  value ? ! "," allow_call_exp format_ruby s? ","  value ? "," call_exp format_ruby s select "," call_exp format_ruby s ","found_call_exp format_ruby  occurs ","found_call copies length  ","found_call_exp format_ruby  call_exp format_ruby  ","found_call SmellWarning  new _message ","found_call_exp format_ruby  smell_message ","found_call_exp format_ruby  lines ","CallCollector  new SmellWarning  new y_calls map ","CallCollector  new smelly_call_exp format_ruby s map ","CallCollector  new SmellWarning  new y_calls ","CallCollector  new smelly_call_exp format_ruby s ","collector SmellWarning  new y_calls map ","collector smelly_call_exp format_ruby s map ","CallCollector  new  smelly_calls map ","collector SmellWarning  new y_calls ","collector smelly_call_exp format_ruby s ","CallCollector  new  smelly_calls "," SmellWarning  new _warning "]}," Reek Smells DuplicateMethodCall default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek Smells ControlParameter control_parameters":{"type":"method","name":"control_parameters","children":[],"call":["result [] push ","result [] ","params include? ","cond [] ","cond [] == ","if_node [] ","method_ctx local_nodes ","params empty? ","hash []= ","Hash  new ","method_ctx exp parameter_names ","method_ctx exp "," find_matchs each "," find_matchs "," used_outside_conditional? ","method_ctx exp parameter_names each ","method_ctx exp parameter_names  include? ","if_node []  [] ","if_node []  [] == ","method_ctx exp parameter_names  empty? "," used_outside_if_node [] itional? "]}," Reek Smells ControlParameter examine_context":{"type":"method","name":"examine_context","children":[],"call":["SmellWarning  new ","ctx full_name ","exp line ","occurs map ","cond format_ruby "," control_parameters map "," control_parameters ","lvars format_ruby ","control_parameter name ","control_parameter smell_message ","control_parameter lines ","ControlParameterCollector  new control_parameters map ","ControlParameterCollector  new control_parameters ","ControlParameterCollector  new ","control_parameter name to_s "," smell_warning ","ctx full_control_parameter name to_s  "," control_cond format_ruby eters map "," control_lvars format_ruby eters map "," control_cond format_ruby eters "," control_lvars format_ruby eters ","control_cond format_ruby eter name ","control_lvars format_ruby eter name ","control_parameter control_parameter name to_s  ","control_parameter SmellWarning  new _message ","control_cond format_ruby eter smell_message ","control_lvars format_ruby eter smell_message ","control_cond format_ruby eter lines ","control_lvars format_ruby eter lines ","ControlParameterCollector  new control_cond format_ruby eters map ","ControlParameterCollector  new control_lvars format_ruby eters map ","ControlParameterCollector  new control_cond format_ruby eters ","ControlParameterCollector  new control_lvars format_ruby eters ","control_cond format_ruby eter name to_s ","control_lvars format_ruby eter name to_s ","control_parameter control_parameter name to_s  to_s "," SmellWarning  new _warning "]}," Reek Examiner smells_count":{"type":"method","name":"smells_count","children":[],"call":["@smells length "," smells length "," smells "]}," Reek Cli WarningFormatterWithLineNumbers format":{"type":"method","name":"format","children":[],"call":[]}," Reek Cli SimpleWarningFormatter format":{"type":"method","name":"format","children":[],"call":[]}," Reek Cli Application output_smells_total":{"type":"method","name":"output_smells_total","children":[],"call":[" output ","total_smells_count == "]}," Reek Core SmellConfiguration merge!":{"type":"method","name":"merge!","children":[],"call":["@options merge! "]}," Reek Cli SingleLineWarningFormatter format":{"type":"method","name":"format","children":[],"call":[]}," Reek Source TreeDresser extension_map":{"type":"method","name":"extension_map","children":[],"call":["Hash  [] ","@extensions_module const_get ","const to_s sub downcase to_sym ","const to_s sub downcase ","const to_s sub ","const to_s ","@extensions_module constants map ","@extensions_module constants "]}," Reek Source TreeDresser extension_for":{"type":"method","name":"extension_for","children":[],"call":[" extension_map [] ","sexp sexp_type "," extension_map "]}," Reek Source TreeDresser extend_sexp":{"type":"method","name":"extend_sexp","children":[],"call":["sexp extend "," extension_for "]}," Reek Source TreeDresser initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Source SexpNode each_sexp":{"type":"method","name":"each_sexp","children":[],"call":["Sexp  === "," each ","elem is_a? "," children each "," children "]}," Reek Source SexpExtensions Colon2Node simple_name":{"type":"method","name":"simple_name","children":[],"call":[" name "," name simple_name "," name is_a? "]}," Reek Source SexpExtensions Colon2Node name":{"type":"method","name":"name","children":[],"call":[" [] "]}," Reek Source SexpExtensions LvarNode value":{"type":"method","name":"value","children":[],"call":[" [] "]}," Reek Source SexpExtensions OrNode condition":{"type":"method","name":"condition","children":[],"call":["b extend "," [] tap "," [] ","node extend "]}," Reek Source SexpExtensions AndNode condition":{"type":"method","name":"condition","children":[],"call":["b extend "," [] tap "," [] ","node extend "]}," Reek Source ConfigFile message":{"type":"method","name":"message","children":[],"call":["File  basename "]}," Reek Source ConfigFile error":{"type":"method","name":"error","children":[],"call":[" raise ","ConfigFileException  new "," message "]}," Reek Smells DuplicateMethodCall CallCollector allow_calls?":{"type":"method","name":"allow_calls?","children":[],"call":["(begin\n  (lvar :allow)) === ","@allow_calls any? ","(begin\n  (lvar :allow)) =~ "," allow_calls any? "," allow_calls "]}," Reek Smells DuplicateMethodCall CallCollector smelly_call?":{"type":"method","name":"smelly_call?","children":[],"call":[" allow_calls? ! "," allow_calls? ","found_call call ","found_call occurs > ","found_call occurs "," max_allowed_calls "]}," Reek Smells DuplicateMethodCall CallCollector collect_calls":{"type":"method","name":"collect_calls","children":[],"call":["result [] record ","result [] ","call_node args empty? ","call_node args ","call_node receiver ! ","call_node receiver ","call_node method_name == ","call_node method_name "," context local_nodes "," context "," context each_node "," simple_method_call? "," initializer_call? ","call_node object_creation_call? "]}," Reek Smells DuplicateMethodCall CallCollector collect_assignments":{"type":"method","name":"collect_assignments","children":[],"call":["result [] record ","result [] ","asgn_node args "," context local_nodes "," context "]}," Reek Smells DuplicateMethodCall CallCollector smelly_calls":{"type":"method","name":"smelly_calls","children":[],"call":[" smelly_call? "," calls select "," calls "]}," Reek Smells DuplicateMethodCall CallCollector calls":{"type":"method","name":"calls","children":[],"call":["found_call call ","result values sort_by ","result values "," collect_assignments "," collect_calls ","hash []= ","FoundCall  new ","Hash  new "]}," Reek Smells DuplicateMethodCall CallCollector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Smells DuplicateMethodCall FoundCall lines":{"type":"method","name":"lines","children":[],"call":["exp line ","@occurences map "," occurences map "," occurences "]}," Reek Smells DuplicateMethodCall FoundCall occurs":{"type":"method","name":"occurs","children":[],"call":["@occurences length "," occurences length "," occurences "]}," Reek Smells DuplicateMethodCall FoundCall call":{"type":"method","name":"call","children":[],"call":["@call_node format_ruby ","@call_node format_to_ruby "," call_node format_to_ruby "," call_node "]}," Reek Smells DuplicateMethodCall FoundCall smell_message":{"type":"method","name":"smell_message","children":[],"call":[" call "," occurs "," occurs == "]}," Reek Smells DuplicateMethodCall FoundCall record":{"type":"method","name":"record","children":[],"call":["@occurences push "," occurences push "," occurences "]}," Reek Smells DuplicateMethodCall FoundCall initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek MethodGroup methods_containing_clump":{"type":"method","name":"methods_containing_clump","children":[],"call":["clump & == ","clump & ","method arg_names ","@candidate_methods select "," candidate_methods select "," candidate_methods "]}," Reek MethodGroup common_argument_names_for":{"type":"method","name":"common_argument_names_for","children":[],"call":["methods collect inject ","methods collect ","methods map inject ","methods map "]}," Reek MethodGroup candidate_clumps":{"type":"method","name":"candidate_clumps","children":[],"call":["(send\n  (block\n    (send\n      (send\n        (ivar :@candidate_methods) :each_cons\n        (send\n          (ivar :@max_copies) :+\n          (int 1))) :map)\n    (args\n      (arg :methods))\n    (send nil :common_argument_names_for\n      (lvar :methods))) :select) uniq ","clump length >= ","clump length ","(send\n  (send\n    (ivar :@candidate_methods) :each_cons\n    (send\n      (ivar :@max_copies) :+\n      (int 1))) :map) select "," common_argument_names_for ","@candidate_methods each_cons map ","@candidate_methods each_cons ","@max_copies + ","(send\n  (block\n    (send\n      (send\n        (send nil :candidate_methods) :each_cons\n        (send\n          (send nil :max_copies) :+\n          (int 1))) :map)\n    (args\n      (arg :methods))\n    (send nil :common_argument_names_for\n      (lvar :methods))) :select) uniq "," min_clump_size ","(send\n  (send\n    (send nil :candidate_methods) :each_cons\n    (send\n      (send nil :max_copies) :+\n      (int 1))) :map) select "," candidate_methods each_cons map "," candidate_methods each_cons "," max_copies + "," max_copies "," candidate_methods "]}," Reek Smells ControlParameter used_besides_in_condition?":{"type":"method","name":"used_besides_in_condition?","children":[],"call":["times_total > ","inner [] == ","inner [] ","inner class == ","inner class ","node condition each ","node condition ","node condition [] == ","node condition [] ","node each_node "]}," Reek Smells ControlParameter find_matchs":{"type":"method","name":"find_matchs","children":[],"call":["matchs push ","inner value == ","inner value ","node each_node "," used_besides_in_condition? ","method_ctx local_nodes each ","method_ctx local_nodes ","(sym :if) each "]}," Reek Smells ControlParameter used_outside_conditional?":{"type":"method","name":"used_outside_conditional?","children":[],"call":["node value == ","node value ","method_ctx exp each_node ","method_ctx exp "]}," Reek Cli QuietReport gather_results":{"type":"method","name":"gather_results","children":[],"call":["result << "," summarize_single_examiner ","examiner smelly? ","@examiners each_with_object "]}," Reek Cli VerboseReport gather_results":{"type":"method","name":"gather_results","children":[],"call":["result << "," summarize_single_examiner ","@examiners each_with_object "]}," Reek Cli Report summarize_single_examiner":{"type":"method","name":"summarize_single_examiner","children":[],"call":["@report_formatter format_list ","examiner smells ","examiner smelly? ","@report_formatter header "]}," Reek Cli Report total_smell_count_message":{"type":"method","name":"total_smell_count_message","children":[],"call":["@total_smell_count == "," Rainbow red "," Rainbow "]}," Reek Cli Report display_total_smell_count":{"type":"method","name":"display_total_smell_count","children":[],"call":[" print "," total_smell_count_message ","@examiners size > ","@examiners size "]}," Reek Cli Report display_summary":{"type":"method","name":"display_summary","children":[],"call":[" print "," gather_results reject join "," gather_results reject "," gather_results "]}," Reek Cli Report sort_examiners":{"type":"method","name":"sort_examiners","children":[],"call":["b smells_count <=> ","a smells_count ","b smells_count ","@examiners sort! ","second smells_count <=> ","first smells_count ","second smells_count "]}," Reek Cli Report has_smells?":{"type":"method","name":"has_smells?","children":[],"call":["@total_smell_count > "]}," Reek Cli Report show":{"type":"method","name":"show","children":[],"call":[" display_total_smell_count "," display_summary "," sort_examiners "," print "," all_smells to_yaml "," all_smells "," all_smells size > "," all_smells size "]}," Reek Cli Report add_examiner":{"type":"method","name":"add_examiner","children":[],"call":["@examiners << ","examiner smells_count "]}," Reek Cli Report initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Cli Application update_status":{"type":"method","name":"update_status","children":[],"call":[" report_success "," report_smells ","reporter has_smells? "]}," Reek Source SexpExtensions MethodNode ends_with_bang?":{"type":"method","name":"ends_with_bang?","children":[],"call":[" name [] == "," name [] "," name "]}," Reek Source SexpExtensions MethodNode name_without_bang":{"type":"method","name":"name_without_bang","children":[],"call":[" name to_s chop "," name to_s "," name "]}," Reek Smells SmellDetector smell_class_name":{"type":"method","name":"smell_class_name","children":[],"call":[" name split [] "," name split "," name "]}," Reek Smells PrimaDonnaMethod examine_context":{"type":"method","name":"examine_context","children":[],"call":["(send\n  (send\n    (lvar :ctx) :node_instance_methods) :map) compact ","SmellWarning  new ","method_sexp name ","ctx exp line ","ctx exp ","ctx full_name ","sexp_item name to_s == ","method_sexp name_without_bang ","sexp_item name to_s ","sexp_item name ","ctx node_instance_methods detect ","ctx node_instance_methods ","method_sexp ends_with_bang? ","ctx node_instance_methods map ","ctx node_instance_methods find "," check_for_smells "]}," Reek Smells PrimaDonnaMethod contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek Core CodeContext node_instance_methods":{"type":"method","name":"node_instance_methods","children":[],"call":[" local_nodes "]}," Reek Source SexpNode has_nested_node?":{"type":"method","name":"has_nested_node?","children":[],"call":[" look_for "]}," Reek Source ConfigFile report_error":{"type":"method","name":"report_error","children":[],"call":[" raise ","ConfigFileException  new "," message "]}," Reek Source ConfigFile report_problem":{"type":"method","name":"report_problem","children":[],"call":["$stderr puts "," message "]}," Reek Smells ControlParameter ControlParameterCollector used_besides_in_condition?":{"type":"method","name":"used_besides_in_condition?","children":[],"call":["times_total > ","inner [] == ","inner [] ","inner class == ","inner class ","node condition count ","node condition ","node condition [] == ","node condition [] ","lvar value == ","lvar value ","node each_node "]}," Reek Smells ControlParameter ControlParameterCollector find_matches":{"type":"method","name":"find_matches","children":[],"call":["matches push ","inner value == ","inner value ","node each_node "," used_besides_in_condition? ","@context local_nodes each ","@context local_nodes ","(sym :if) each ","ControlParameterFinder  new find_matches ","ControlParameterFinder  new ","@context exp "," context exp "," context "]}," Reek Smells ControlParameter ControlParameterCollector used_outside_conditional?":{"type":"method","name":"used_outside_conditional?","children":[],"call":["node value == ","node value ","nodes any? ","@context exp each_node ","@context exp ","@context exp each_node  any? "]}," Reek Smells ControlParameter ControlParameterCollector potential_parameters":{"type":"method","name":"potential_parameters","children":[],"call":[" used_outside_conditional? ! "," used_outside_conditional? ","@context exp parameter_names select ","@context exp parameter_names ","@context exp "," context exp parameter_names "," context exp "," context "]}," Reek Smells ControlParameter ControlParameterCollector control_parameters":{"type":"method","name":"control_parameters","children":[],"call":["result values ","result [] record ","result [] ","matches any? "," find_matches "," potential_parameters each "," potential_parameters ","hash []= ","FoundControlParameter  new ","Hash  new ","(send\n  (send nil :potential_parameters) :map) select "," potential_parameters map "," find_matches  any? "," find_ find_matches  "]}," Reek Smells ControlParameter ControlParameterCollector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Smells ControlParameter FoundControlParameter name":{"type":"method","name":"name","children":[],"call":["@param to_s "," param to_s "," param "]}," Reek Smells ControlParameter FoundControlParameter lines":{"type":"method","name":"lines","children":[],"call":["@occurences map "," occurences map "," occurences "]}," Reek Smells ControlParameter FoundControlParameter smell_message":{"type":"method","name":"smell_message","children":[],"call":[" name "]}," Reek Smells ControlParameter FoundControlParameter record":{"type":"method","name":"record","children":[],"call":["@occurences concat "]}," Reek Smells ControlParameter FoundControlParameter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Core StopContext config_for":{"type":"method","name":"config_for","children":[],"call":[]}," Reek Core MethodContext uses_param?":{"type":"method","name":"uses_param?","children":[],"call":[" local_nodes include? ","Sexp  new ","param to_sym "," local_nodes ","node var_name == ","node var_name "," local_nodes find "]}," Reek Core CodeParser inside_new_context":{"type":"method","name":"inside_new_context","children":[],"call":[" check_smells ","exp [] "," push ","klass new ","exp type "]}," Reek Core CodeParser count_statement_list":{"type":"method","name":"count_statement_list","children":[],"call":["@element count_statements ","statement_list length "]}," Reek Core CodeContext outer_config_for":{"type":"method","name":"outer_config_for","children":[],"call":["@outer config_for "]}," Reek Core CodeContext config":{"type":"method","name":"config","children":[],"call":["Source CodeComment  new config ","Source CodeComment  new ","@exp comments ","Core CodeComment  new config ","Core CodeComment  new "]}," Reek Core CodeContext config_for":{"type":"method","name":"config_for","children":[],"call":[" outer_config_for merge "," config [] ","detector_class smell_class_name "," config "," outer_config_for ","detector_class smell_type "," context_config_for merge "," context_config_for "]}," Reek Cli Report all_smells":{"type":"method","name":"all_smells","children":[],"call":["(send\n  (ivar :@examiners) :each_with_object\n  (array)) flatten ","smells << ","examiner smells ","@examiners each_with_object "]}," Reek Spec ShouldReekOnlyOf failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":["@examiner description "," smell_category "," examiner description "," examiner "," smell_type "," examiner origin "]}," Reek Spec ShouldReekOnlyOf failure_message":{"type":"method","name":"failure_message","children":[],"call":["@examiner description ","Cli Report Formatter  format_list ","CLI Report Formatter  format_list ","Report Formatter  format_list "," smell_category "," examiner description "," examiner "," warnings "," smell_type "," examiner origin ","Report SimpleWarningFormatter  new format_list ","Report SimpleWarningFormatter  new "]}," Reek Spec ShouldReekOf failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":["@examiner description "," smell_category "," examiner description "," examiner "]}," Reek Spec ShouldReekOf failure_message":{"type":"method","name":"failure_message","children":[],"call":["@examiner description "," smell_category "," examiner description "," examiner "]}," Reek Spec ShouldReek failure_message_when_negated":{"type":"method","name":"failure_message_when_negated","children":[],"call":["Cli Report Formatter  format_list ","@examiner smells ","CLI Report Formatter  format_list ","Report Formatter  format_list "," examiner smells "," examiner ","Report SimpleWarningFormatter  new format_list ","Report SimpleWarningFormatter  new "]}," Reek Spec ShouldReek failure_message":{"type":"method","name":"failure_message","children":[],"call":["@examiner description "," examiner description "," examiner "]}," Reek Source SourceFile relevant_config_files":{"type":"method","name":"relevant_config_files","children":[],"call":[" all_config_files ","File  expand_path ","File  dirname ","File  expand_File  expand_path  "]}," Reek Source SourceCode relevant_config_files":{"type":"method","name":"relevant_config_files","children":[],"call":[]}," Reek Source SexpNode contains_nested_node?":{"type":"method","name":"contains_nested_node?","children":[],"call":[" look_for "]}," Reek Source SexpNode unnested_nodes":{"type":"method","name":"unnested_nodes","children":[],"call":["elem unnested_nodes "," each_sexp ","result << ","types include? "," first "]}," Reek Source SexpExtensions NilNode nil_node?":{"type":"method","name":"nil_node?","children":[],"call":[]}," Reek Source SexpExtensions IfNode body":{"type":"method","name":"body","children":[],"call":[" [] extend "," [] "]}," Reek Source SexpExtensions MethodNode arguments":{"type":"method","name":"arguments","children":[],"call":[" parameters reject "," parameters "]}," Reek Source SexpExtensions LvarNode var_name":{"type":"method","name":"var_name","children":[],"call":[" [] "]}," Reek Source SexpExtensions CallNode participants":{"type":"method","name":"participants","children":[],"call":["(send\n  (array\n    (send nil :receiver)) :+\n  (send nil :args)) compact ","(send nil :receiver) + "," args "," receiver "]}," Reek Source SexpExtensions WhenNode condition_list":{"type":"method","name":"condition_list","children":[],"call":[" [] [] "," [] "," children [] "," children "]}," Reek Source SexpExtensions CaseNode body":{"type":"method","name":"body","children":[],"call":[" [] extend "," [] "]}," Reek Source SexpExtensions OrNode body":{"type":"method","name":"body","children":[],"call":[" [] "]}," Reek Source SexpExtensions AndNode body":{"type":"method","name":"body","children":[],"call":[" [] "]}," Reek Source SexpExtensions MethodParameter plain_name":{"type":"method","name":"plain_name","children":[],"call":["@name to_s sub ","@name to_s "]}," Reek Source SexpExtensions MethodParameter marked_unused?":{"type":"method","name":"marked_unused?","children":[],"call":[" plain_name start_with? "," plain_name "]}," Reek Source SexpExtensions MethodParameter anonymous_splat?":{"type":"method","name":"anonymous_splat?","children":[],"call":["@name == "]}," Reek Source SexpExtensions MethodParameter block?":{"type":"method","name":"block?","children":[],"call":["@name to_s =~ ","@name to_s "]}," Reek Source SexpExtensions MethodParameter ==":{"type":"method","name":"==","children":[],"call":["@name == "]}," Reek Source SexpExtensions MethodParameter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Source CodeComment descriptive?":{"type":"method","name":"descriptive?","children":[],"call":["@text split length >= ","@text split length ","@text split "]}," Reek Smells UncommunicativeVariableName bad_name?":{"type":"method","name":"bad_name?","children":[],"call":["patt =~ ","@reject_names find ","@accept_names include? ","name to_s gsub ","name to_s "," reject_names find "," reject_names "," accept_names include? "," accept_names "]}," Reek Smells UncommunicativeParameterName bad_name?":{"type":"method","name":"bad_name?","children":[],"call":["patt =~ ","@reject_names find ","@accept_names include? ","var == ","name to_s gsub ","name to_s "," reject_names find "," reject_names "," accept_names include? "," accept_names ","sanitized_name match "," reject_patterns any? "," reject_patterns ","sanitized_name == "," sanitize ","name to_s gsub  == "," sanitize  match "," sanitize  == "]}," Reek Smells SmellDetector enabled_for?":{"type":"method","name":"enabled_for?","children":[],"call":[" config_for [] != "," config_for [] "," config_for "," enabled? "," config enabled? "," config "]}," Reek Smells NilCheck NilWhenNodeDetector detect":{"type":"method","name":"detect","children":[],"call":["node condition_list any? ","node condition_list ","it type == ","it type "]}," Reek Smells NilCheck NilCallNodeDetector comparison_methods":{"type":"method","name":"comparison_methods","children":[],"call":[]}," Reek Smells NilCheck NilCallNodeDetector involves_nil?":{"type":"method","name":"involves_nil?","children":[],"call":["call args any? ","call args ","call receiver nil_node? ","call receiver ","it type == ","it type ","call participants any? ","call participants "]}," Reek Smells NilCheck NilCallNodeDetector is_comparison_call?":{"type":"method","name":"is_comparison_call?","children":[],"call":[" comparison_methods include? ","call method_name "," comparison_methods "]}," Reek Smells NilCheck NilCallNodeDetector nil_comparison?":{"type":"method","name":"nil_comparison?","children":[],"call":[" involves_nil? "," is_comparison_call? "," comparison_call? "]}," Reek Smells NilCheck NilCallNodeDetector nil_query?":{"type":"method","name":"nil_query?","children":[],"call":["call method_name == ","call method_name ","call name == ","call name "]}," Reek Smells NilCheck NilCallNodeDetector detect":{"type":"method","name":"detect","children":[],"call":[" nil_comparison? "," nil_query? "]}," Reek Smells NilCheck NodeFinder smelly_nodes":{"type":"method","name":"smelly_nodes","children":[],"call":["@detector detect ","@nodes select "," detector detect "," detector "," nodes select "," nodes "]}," Reek Smells ControlParameter ControlParameterFinder uses_param_in_body?":{"type":"method","name":"uses_param_in_body?","children":[],"call":["lvar_node var_name == ","lvar_node var_name ","nodes any? ","@node body each_node ","@node body ","@node body_nodes "," param "," node body_nodes "," node ","@node body each_node  any? ","@node body_nodes  any? "," node body_nodes  any? ","@node body_@node body each_node  ","@node body_@node body_nodes  ","@node body_ node body_nodes  "," node body_@node body each_node  "," node body_@node body_nodes  "," node body_ node body_nodes  "]}," Reek Smells ControlParameter ControlParameterFinder call_involving_param?":{"type":"method","name":"call_involving_param?","children":[],"call":["it var_name == ","it var_name ","call_node participants any? ","call_node participants ","call_node each_node any? ","call_node each_node "," param "]}," Reek Smells ControlParameter ControlParameterFinder comparison_method_names":{"type":"method","name":"comparison_method_names","children":[],"call":[]}," Reek Smells ControlParameter ControlParameterFinder comparison_call?":{"type":"method","name":"comparison_call?","children":[],"call":[" comparison_method_names include? ","call_node method_name "," comparison_method_names ","call_node name "]}," Reek Smells ControlParameter ControlParameterFinder regular_call_involving_param?":{"type":"method","name":"regular_call_involving_param?","children":[],"call":[" comparison_call? ! "," comparison_call? "," call_involving_param? "]}," Reek Smells ControlParameter ControlParameterFinder uses_of_param_in_condition":{"type":"method","name":"uses_of_param_in_condition","children":[],"call":["inner var_name == ","inner var_name ","condition each_node select ","condition each_node ","@node condition "," condition each_node select "," condition each_node "," condition "," param ","@node condition  each_node select ","@node condition  each_node ","@node @node condition  "," @node condition  each_node select "," @node condition  each_node "," @node condition  "]}," Reek Smells ControlParameter ControlParameterFinder uses_param_in_call_in_condition?":{"type":"method","name":"uses_param_in_call_in_condition?","children":[],"call":[" regular_call_involving_param? ","condition each_node ","@node condition "," condition each_node "," condition ","@node condition  each_node ","@node @node condition  "," @node condition  each_node "," @node condition  "]}," Reek Smells ControlParameter ControlParameterFinder nested_finders":{"type":"method","name":"nested_finders","children":[],"call":[" class new "," class "," conditional_nodes flat_map "," conditional_nodes "," param "]}," Reek Smells ControlParameter ControlParameterFinder conditional_nodes":{"type":"method","name":"conditional_nodes","children":[],"call":["@node body unnested_nodes ","@node body ","@node body_nodes "," node body_nodes "," node "]}," Reek Smells ControlParameter ControlParameterFinder legitimite_uses?":{"type":"method","name":"legitimite_uses?","children":[],"call":[" nested_finders any? "," nested_finders "," uses_param_in_call_in_condition? "," uses_param_in_body? "]}," Reek Smells ControlParameter ControlParameterFinder find_matches":{"type":"method","name":"find_matches","children":[],"call":[" nested_finders flat_map + "," uses_of_param_in_condition "," nested_finders flat_map "," nested_finders "," legitimite_uses? "]}," Reek Smells ControlParameter ControlParameterFinder initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Smells ControlParameter FoundControlParameter smells?":{"type":"method","name":"smells?","children":[],"call":["@occurences any? "," occurences any? "," occurences "]}," Reek Core MethodContext uses_super_with_implicit_arguments?":{"type":"method","name":"uses_super_with_implicit_arguments?","children":[],"call":[" exp body contains_nested_node? "," exp body "," exp ","body contains_nested_node? "," exp  exp body  contains_nested_node? "," exp  exp body  "," exp body  contains_nested_node? "]}," Reek Core MethodContext unused_params":{"type":"method","name":"unused_params","children":[],"call":[" uses_param? ! "," uses_param? ","param plain_name ","param marked_unused? ","param anonymous_splat? "," exp arguments select "," exp arguments "," exp "]}," Reek Cli Report Strategy Normal gather_results":{"type":"method","name":"gather_results","children":[],"call":["(send\n  (send nil :examiners) :each_with_object\n  (array)) flatten ","smells << ","examiner smells "," examiners each_with_object "," examiners "]}," Reek Cli Report Strategy Quiet gather_results":{"type":"method","name":"gather_results","children":[],"call":["result << "," summarize_single_examiner ","examiner smelly? "," examiners each_with_object "," examiners "]}," Reek Cli Report Strategy Verbose gather_results":{"type":"method","name":"gather_results","children":[],"call":["result << "," summarize_single_examiner "," examiners each_with_object "," examiners "]}," Reek Cli Report Strategy Base summarize_single_examiner":{"type":"method","name":"summarize_single_examiner","children":[],"call":[" report_formatter format_list "," warning_formatter ","examiner smells "," report_formatter ","examiner smelly? "," report_formatter header "]}," Reek Cli Report Strategy Base initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Cli Report HtmlReport show":{"type":"method","name":"show","children":[],"call":[" print ","file puts ","ERB  new result "," binding ","ERB  new ","File  open ","File  read ","File  expand_path ","File  expand_File  expand_path  "]}," Reek Cli Report HtmlReport initialize":{"type":"method","name":"initialize","children":[],"call":["@options merge! "]}," Reek Cli Report YamlReport show":{"type":"method","name":"show","children":[],"call":[" print "," smells to_yaml "," smells "," smells map to_yaml "," smells map "]}," Reek Cli Report YamlReport initialize":{"type":"method","name":"initialize","children":[],"call":["options merge! "]}," Reek Cli Report TextReport total_smell_count_message":{"type":"method","name":"total_smell_count_message","children":[],"call":[" Rainbow color "," Rainbow ","@total_smell_count == "," smells? "]}," Reek Cli Report TextReport sort_examiners":{"type":"method","name":"sort_examiners","children":[],"call":["second smells_count <=> ","first smells_count ","second smells_count ","@examiners sort! ","@examiners sort_by! reverse! ","@examiners sort_by! "]}," Reek Cli Report TextReport display_total_smell_count":{"type":"method","name":"display_total_smell_count","children":[],"call":[" print "," total_smell_count_message ","@examiners size > ","@examiners size "]}," Reek Cli Report TextReport display_summary":{"type":"method","name":"display_summary","children":[],"call":[" print "," smells reject join "," smells reject "," smells "," puts "," smells reject each "]}," Reek Cli Report TextReport show":{"type":"method","name":"show","children":[],"call":[" display_total_smell_count "," display_summary "," sort_examiners "," smells? "]}," Reek Cli Report Base smells":{"type":"method","name":"smells","children":[],"call":["@strategy new gather_results ","@strategy new ","@examiners map flatten ","@examiners map "]}," Reek Cli Report Base smells?":{"type":"method","name":"smells?","children":[],"call":["@total_smell_count > "]}," Reek Cli Report Base add_examiner":{"type":"method","name":"add_examiner","children":[],"call":["@examiners << ","examiner smells_count "]}," Reek Cli Report Base initialize":{"type":"method","name":"initialize","children":[],"call":["options fetch ","SimpleWarningFormatter  new "]}," Reek Cli Report SingleLineWarningFormatter format":{"type":"method","name":"format","children":[],"call":[]}," Reek Cli Report WarningFormatterWithLineNumbers format":{"type":"method","name":"format","children":[],"call":[]}," Reek Cli Report SimpleWarningFormatter format":{"type":"method","name":"format","children":[],"call":[" base_format ","@location_formatter format "]}," Reek Cli Report UltraVerboseWarningFormattter class_name_to_param":{"type":"method","name":"class_name_to_param","children":[],"call":["name split join ","name split "]}," Reek Cli Report UltraVerboseWarningFormattter explanatory_link":{"type":"method","name":"explanatory_link","children":[],"call":[" class_name_to_param ","warning subclass ","warning smell_type "]}," Reek Cli Report UltraVerboseWarningFormattter format":{"type":"method","name":"format","children":[],"call":[" explanatory_link ","WarningFormatterWithLineNumbers  format "]}," Reek Cli Report Formatter header":{"type":"method","name":"header","children":[],"call":[]}," Reek Cli Report Formatter format_list":{"type":"method","name":"format_list","children":[],"call":["SimpleWarningFormatter  new "]}," Reek Cli ReekCommand config_files":{"type":"method","name":"config_files","children":[],"call":["@parser config_files "]}," Reek Cli ReekCommand smell_names":{"type":"method","name":"smell_names","children":[],"call":["@parser smells_to_detect ","@options smells_to_detect "]}," Reek Cli ReekCommand reporter":{"type":"method","name":"reporter","children":[],"call":["@parser reporter ","@options reporter "]}," Reek Cli Options help_text":{"type":"method","name":"help_text","children":[],"call":["@parser to_s "]}," Reek Cli Options program_name":{"type":"method","name":"program_name","children":[],"call":["@parser program_name "]}," Reek Cli Options sources":{"type":"method","name":"sources","children":[],"call":["Source SourceLocator  new all_sources ","Source SourceLocator  new ","$stdin to_reek_source ","@argv empty? "]}," Reek Cli Options reporter":{"type":"method","name":"reporter","children":[],"call":["@report_class new "]}," Reek Cli Command initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Source SexpNode look_for_alt":{"type":"method","name":"look_for_alt","children":[],"call":["elem look_for_alt "," each_sexp ","blk call ","target_types include? "," type ","ignoring include? "]}," Reek Source SexpNode find_nodes":{"type":"method","name":"find_nodes","children":[],"call":["result << "," look_for_alt "]}," Reek Source SexpExtensions ConstNode simple_name":{"type":"method","name":"simple_name","children":[],"call":[" children last "," children "]}," Reek Source SexpExtensions BlockNode parameter_names":{"type":"method","name":"parameter_names","children":[],"call":[" parameters [] to_a "," parameters [] "," parameters "]}," Reek Source SexpExtensions BlockNode parameters":{"type":"method","name":"parameters","children":[],"call":[" [] "]}," Reek Source SexpExtensions BlockNode block":{"type":"method","name":"block","children":[],"call":[" [] "]}," Reek Source SexpExtensions BlockNode args":{"type":"method","name":"args","children":[],"call":[" [] "]}," Reek Source SexpExtensions BlockNode call":{"type":"method","name":"call","children":[],"call":[" [] "]}," Reek Source SexpExtensions IfNode body_nodes":{"type":"method","name":"body_nodes","children":[],"call":["child find_nodes "," children [] compact flat_map "," children [] compact "," children [] "," children "]}," Reek Source SexpExtensions DefNode full_name":{"type":"method","name":"full_name","children":[],"call":[" name ","outer == "]}," Reek Source SexpExtensions DefNode body":{"type":"method","name":"body","children":[],"call":[" [] "]}," Reek Source SexpExtensions DefNode argslist":{"type":"method","name":"argslist","children":[],"call":[" [] "]}," Reek Source SexpExtensions DefNode name":{"type":"method","name":"name","children":[],"call":[" [] "]}," Reek Source SexpExtensions MethodNodeBase body_nodes":{"type":"method","name":"body_nodes","children":[],"call":[" body find_nodes "," body "]}," Reek Source SexpExtensions MethodNodeBase ends_with_bang?":{"type":"method","name":"ends_with_bang?","children":[],"call":[" name [] == "," name [] "," name "]}," Reek Source SexpExtensions MethodNodeBase name_without_bang":{"type":"method","name":"name_without_bang","children":[],"call":[" name to_s chop "," name to_s "," name "]}," Reek Source SexpExtensions MethodNodeBase parameter_names":{"type":"method","name":"parameter_names","children":[],"call":[" parameters map "," parameters "]}," Reek Source SexpExtensions MethodNodeBase parameters":{"type":"method","name":"parameters","children":[],"call":[" argslist children "," argslist "]}," Reek Source SexpExtensions MethodNodeBase arg_names":{"type":"method","name":"arg_names","children":[],"call":[" arguments map "," arguments "]}," Reek Source SexpExtensions MethodNodeBase arguments":{"type":"method","name":"arguments","children":[],"call":[" parameters reject "," parameters "]}," Reek Source SexpExtensions VariableBase name":{"type":"method","name":"name","children":[],"call":[" [] "]}," Reek Source SexpExtensions SendNode arg_names":{"type":"method","name":"arg_names","children":[],"call":["arg [] "," args map "," args "]}," Reek Source SexpExtensions SendNode participants":{"type":"method","name":"participants","children":[],"call":["(send\n  (array\n    (send nil :receiver)) :+\n  (send nil :args)) compact ","(send nil :receiver) + "," args "," receiver "]}," Reek Source SexpExtensions SendNode args":{"type":"method","name":"args","children":[],"call":[" [] "]}," Reek Source SexpExtensions SendNode method_name":{"type":"method","name":"method_name","children":[],"call":[" [] "]}," Reek Source SexpExtensions SendNode receiver":{"type":"method","name":"receiver","children":[],"call":[" [] "]}," Reek Source SexpExtensions WhenNode body":{"type":"method","name":"body","children":[],"call":[" children last "," children "]}," Reek Source SexpExtensions CaseNode else_body":{"type":"method","name":"else_body","children":[],"call":[" children last "," children "]}," Reek Source SexpExtensions CaseNode body_nodes":{"type":"method","name":"body_nodes","children":[],"call":["child find_nodes "," children [] compact flat_map "," children [] compact "," children [] "," children "]}," Reek Source SexpExtensions LogicOperatorBase body_nodes":{"type":"method","name":"body_nodes","children":[],"call":[" [] find_nodes "," [] "]}," Reek Source SexpExtensions LogicOperatorBase condition":{"type":"method","name":"condition","children":[],"call":[" [] "]}," Reek Source SexpExtensions KwrestargNode anonymous_splat?":{"type":"method","name":"anonymous_splat?","children":[],"call":[" name ! "," name "]}," Reek Source SexpExtensions RestargNode anonymous_splat?":{"type":"method","name":"anonymous_splat?","children":[],"call":[" name ! "," name "]}," Reek Source SexpExtensions BlockargNode block?":{"type":"method","name":"block?","children":[],"call":[]}," Reek Source SexpExtensions KwoptargNode optional_argument?":{"type":"method","name":"optional_argument?","children":[],"call":[]}," Reek Source SexpExtensions OptargNode optional_argument?":{"type":"method","name":"optional_argument?","children":[],"call":[]}," Reek Source SexpExtensions ArgNodeBase anonymous_splat?":{"type":"method","name":"anonymous_splat?","children":[],"call":[]}," Reek Source SexpExtensions ArgNodeBase optional_argument?":{"type":"method","name":"optional_argument?","children":[],"call":[]}," Reek Source SexpExtensions ArgNodeBase block?":{"type":"method","name":"block?","children":[],"call":[]}," Reek Source SexpExtensions ArgNodeBase plain_name":{"type":"method","name":"plain_name","children":[],"call":[" name to_s "," name "]}," Reek Source SexpExtensions ArgNodeBase marked_unused?":{"type":"method","name":"marked_unused?","children":[],"call":[" plain_name start_with? "," plain_name "]}," Reek Source SexpExtensions ArgNodeBase ==":{"type":"method","name":"==","children":[],"call":[" name == "," name "]}," Reek Source SexpExtensions ArgNodeBase name":{"type":"method","name":"name","children":[],"call":[" children first "," children "]}," Reek Source AstNodeClassMap extension_map":{"type":"method","name":"extension_map","children":[],"call":["Hash  [] ","SexpExtensions  const_get ","const to_s sub downcase to_sym ","const to_s sub downcase ","const to_s sub ","const to_s ","SexpExtensions  constants map ","SexpExtensions  constants "]}," Reek Source AstNodeClassMap klass_for":{"type":"method","name":"klass_for","children":[],"call":["klass send "," extension_map [] "," extension_map ","Class  new ","@klass_map [] ","Class  new  send ","@Class  new _map [] "]}," Reek Source AstNodeClassMap initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Source AstNode elements":{"type":"method","name":"elements","children":[],"call":[" children "," type "]}," Reek Source AstNode first":{"type":"method","name":"first","children":[],"call":[" type "]}," Reek Source AstNode line":{"type":"method","name":"line","children":[],"call":[" loc line "," loc "]}," Reek Source AstNode []":{"type":"method","name":"[]","children":[],"call":[" elements [] "," elements "]}," Reek Source AstNode comments":{"type":"method","name":"comments","children":[],"call":["@comments map join ","@comments map "]}," Reek Source AstNode initialize":{"type":"method","name":"initialize","children":[],"call":["options fetch "]}," Reek Smells ModuleInitialize examine_context":{"type":"method","name":"examine_context","children":[],"call":["SmellWarning  new ","module_ctx exp line ","module_ctx exp ","module_ctx full_name ","node name to_s == ","node name to_s ","node name ","module_ctx local_nodes "," smell_warning ","ctx exp line ","ctx exp ","ctx local_nodes "]}," Reek Smells ModuleInitialize contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek Smells ControlParameter ControlParameterFinder condition":{"type":"method","name":"condition","children":[],"call":["@node condition ","CONDITIONAL_NODE_TYPES  include? ","@node type "," node condition "," node "," node type "]}," Reek SmellWarning init_with":{"type":"method","name":"init_with","children":[],"call":["SmellDescription  new ","smell_attributes delete ","coder [] ","coder []  delete "]}," Reek SmellWarning smell_classes":{"type":"method","name":"smell_classes","children":[],"call":[" subclass "," smell_class "," smell_detector smell_type "," smell_detector "," smell_detector smell_category "]}," Reek SmellDescription encode_with":{"type":"method","name":"encode_with","children":[],"call":["coder []= ","@details each ","coder tag= "]}," Reek SmellDescription []":{"type":"method","name":"[]","children":[],"call":["@details [] "]}," Reek SmellDescription initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Core CodeParser process_begin":{"type":"method","name":"process_begin","children":[],"call":[" process_default ","@element count_statements "," count_statement_list ","exp children "]}," Reek Core CodeParser process_send":{"type":"method","name":"process_send","children":[],"call":[" process_default ","@element record_call_to "]}," Reek Core CodeParser process_def":{"type":"method","name":"process_def","children":[],"call":[" process_default "," count_clause ","exp body "," inside_new_context "]}," Reek Smells UtilityFunction smell_category":{"type":"method","name":"smell_category","children":[],"call":[]}," Reek Smells UnusedParameters smell_category":{"type":"method","name":"smell_category","children":[],"call":[]}," Reek Smells UncommunicativeVariableName smell_category":{"type":"method","name":"smell_category","children":[],"call":[]}," Reek Smells UncommunicativeParameterName smell_category":{"type":"method","name":"smell_category","children":[],"call":[]}," Reek Smells UncommunicativeModuleName smell_category":{"type":"method","name":"smell_category","children":[],"call":[]}," Reek Smells UncommunicativeMethodName smell_category":{"type":"method","name":"smell_category","children":[],"call":[]}," Reek Smells TooManyStatements smell_category":{"type":"method","name":"smell_category","children":[],"call":[]}," Reek Smells TooManyMethods smell_category":{"type":"method","name":"smell_category","children":[],"call":[]}," Reek Smells TooManyInstanceVariables smell_category":{"type":"method","name":"smell_category","children":[],"call":[]}," Reek Smells SmellDetector default_smell_category":{"type":"method","name":"default_smell_category","children":[],"call":[" name split [] "," name split "," name "]}," Reek Smells SmellDetector smell_category":{"type":"method","name":"smell_category","children":[],"call":[" default_smell_category "," class smell_category "," class "]}," Reek Smells RepeatedConditional smell_category":{"type":"method","name":"smell_category","children":[],"call":[]}," Reek Smells NilCheck NilCallNodeDetector comparison_call?":{"type":"method","name":"comparison_call?","children":[],"call":[" comparison_methods include? ","call method_name "," comparison_methods ","call name "]}," Reek Smells NilCheck smell_category":{"type":"method","name":"smell_category","children":[],"call":[]}," Reek Smells LongYieldList smell_category":{"type":"method","name":"smell_category","children":[],"call":[]}," Reek Smells FeatureEnvy smell_category":{"type":"method","name":"smell_category","children":[],"call":[]}," Reek Smells DuplicateMethodCall smell_category":{"type":"method","name":"smell_category","children":[],"call":[]}," Reek Smells ControlParameter smell_category":{"type":"method","name":"smell_category","children":[],"call":[]}," Reek Smells BooleanParameter smell_category":{"type":"method","name":"smell_category","children":[],"call":[]}," Reek SmellWarning encode_with":{"type":"method","name":"encode_with","children":[],"call":["coder []= ","key to_s "," parameters each "," parameters "," message "," lines "," context "," smell_detector source "," smell_detector "," smell_detector smell_type "," smell_detector smell_category ","coder tag= "]}," Reek Rake Task config_file":{"type":"method","name":"config_file","children":[],"call":["ENV  [] "]}," Reek Core Sniffer syntax_tree":{"type":"method","name":"syntax_tree","children":[],"call":["@source syntax_tree "]}," Reek Core SmellRepository smell_types":{"type":"method","name":"smell_types","children":[],"call":[]}," Reek Core ModuleContext node_instance_methods":{"type":"method","name":"node_instance_methods","children":[],"call":[" local_nodes "]}," Reek Configuration ConfigurationFileFinder detect_configuration_in_directory":{"type":"method","name":"detect_configuration_in_directory","children":[],"call":["Pathname  glob detect ","Pathname  glob ","directory join ","path to_s end_with? ","path to_s ","directory children select find ","directory children select ","directory children "]}," Reek Configuration ConfigurationFileFinder detect_or_traverse_up":{"type":"method","name":"detect_or_traverse_up","children":[],"call":[" detect_or_traverse_up ","directory parent ","directory root? ","file nil? "," detect_configuration_in_directory "," detect_configuration_in_directory  nil? "]}," Reek Configuration ConfigurationFileFinder configuration_in_home_directory":{"type":"method","name":"configuration_in_home_directory","children":[],"call":[" detect_configuration_in_directory ","Pathname  new ","Dir  home "]}," Reek Configuration ConfigurationFileFinder configuration_in_file_system":{"type":"method","name":"configuration_in_file_system","children":[],"call":[" detect_or_traverse_up ","Pathname  pwd "]}," Reek Configuration ConfigurationFileFinder configuration_by_cli":{"type":"method","name":"configuration_by_cli","children":[],"call":[" raise ","path_name exist? ","Pathname  new ","application options config_file ","application options ","options config_file ","Pathname  new  exist? "]}," Reek Configuration ConfigurationFileFinder find":{"type":"method","name":"find","children":[],"call":[" configuration_in_home_directory "," configuration_in_file_system "," configuration_by_cli "," find_by_dir "," find_by_cli ","Pathname  new ","Dir  home ","params fetch ","Pathname  pwd "," find_in_dir "]}," Reek Configuration AppConfiguration message":{"type":"method","name":"message","children":[],"call":["File  basename "]}," Reek Configuration AppConfiguration raise_error":{"type":"method","name":"raise_error","children":[],"call":[" raise "," message "]}," Reek Configuration AppConfiguration report_problem":{"type":"method","name":"report_problem","children":[],"call":["$stderr puts "," message "]}," Reek Configuration AppConfiguration load_smell_type":{"type":"method","name":"load_smell_type","children":[],"call":[" report_problem ","Reek Smells  const_get "]}," Reek Configuration AppConfiguration reset":{"type":"method","name":"reset","children":[],"call":["@configuration clear "]}," Reek Configuration AppConfiguration load_from_file":{"type":"method","name":"load_from_file","children":[],"call":[" raise_error ","@configuration is_a? ","error to_s ","YAML  load_file "," report_problem ","File  size == ","File  size "]}," Reek Configuration AppConfiguration configure_smell_repository":{"type":"method","name":"configure_smell_repository","children":[],"call":["smell_repository configure "," load_smell_type ","@configuration each "," initialize_with "," for_smell_types each "," for_smell_types "]}," Reek Configuration AppConfiguration initialize_with":{"type":"method","name":"initialize_with","children":[],"call":[" load_from_file ","ConfigurationFileFinder  find "]}," Reek Cli Application error_occured?":{"type":"method","name":"error_occured?","children":[],"call":["@status == "]}," Reek Cli Application initialize_configuration":{"type":"method","name":"initialize_configuration","children":[],"call":["Configuration AppConfiguration  initialize_with "]}," Reek Rake Task config_files":{"type":"method","name":"config_files","children":[],"call":[]}," Reek Rake Task config_files=":{"type":"method","name":"config_files=","children":[],"call":[]}," Reek Rake Task config_option":{"type":"method","name":"config_option","children":[],"call":[" config_file "]}," Reek CLI Input source_from_pipe":{"type":"method","name":"source_from_pipe","children":[],"call":["$stdin to_reek_source ","Source SourceCode  from "]}," Reek CLI Input sources_from_argv":{"type":"method","name":"sources_from_argv","children":[],"call":["Source SourceLocator  new all_sources ","Source SourceLocator  new ","Source SourceLocator  new sources "," argv "]}," Reek CLI Input working_directory_as_source":{"type":"method","name":"working_directory_as_source","children":[],"call":["Source SourceLocator  new all_sources ","Source SourceLocator  new ","Source SourceLocator  new sources "," configuration "]}," Reek CLI Input no_source_files_given?":{"type":"method","name":"no_source_files_given?","children":[],"call":["@argv empty? "," argv empty? "," argv "]}," Reek CLI Input input_was_piped?":{"type":"method","name":"input_was_piped?","children":[],"call":["$stdin tty? ! ","$stdin tty? "]}," Reek CLI Input sources":{"type":"method","name":"sources","children":[],"call":[" sources_from_argv "," working_directory_as_source "," no_source_files_given? "," source_from_pipe "," input_was_piped? "]}," Reek Source SexpExtensions ZsuperNode method_name":{"type":"method","name":"method_name","children":[],"call":[]}," Reek Spec ShouldReekOf normalize":{"type":"method","name":"normalize","children":[],"call":["smell_category_or_type to_s split [] ","smell_category_or_type to_s split ","smell_category_or_type to_s ","smell_type_or_class to_s ","smell_type_or_class smell_type "]}," Reek Smells SmellDetector descendants":{"type":"method","name":"descendants","children":[],"call":[" subclasses "]}," Reek Smells SmellDetector inherited":{"type":"method","name":"inherited","children":[],"call":["@subclasses << "," descendants << "," descendants "," subclasses << "," subclasses "]}," Reek SmellWarning common_parameters_equal?":{"type":"method","name":"common_parameters_equal?","children":[],"call":[" parameters values_at == ","other_parameters values "," parameters values_at ","other_parameters keys "," parameters "," raise "," parameters key? ","other_parameters keys each "]}," Reek SmellWarning yaml_hash":{"type":"method","name":"yaml_hash","children":[],"call":["result []= ","key to_s "," parameters each "," parameters "," message "," lines "," context "," smell_detector source "," smell_detector "," smell_detector smell_type "," smell_detector smell_category ","result merge! ","warning_formatter explanatory_link ","warning_formatter respond_to? "," to_hash merge "," explanatory_link "," to_hash "]}," Reek Rake Task reek_opts_as_arguments":{"type":"method","name":"reek_opts_as_arguments","children":[],"call":[" reek_opts split "," reek_opts "]}," Reek Rake Task config_file_as_argument":{"type":"method","name":"config_file_as_argument","children":[],"call":[" config_file "]}," Reek Rake Task sys_call_failed?":{"type":"method","name":"sys_call_failed?","children":[],"call":["$CHILD_STATUS success? ! ","$CHILD_STATUS success? "]}," Reek Rake Task reek_opts":{"type":"method","name":"reek_opts","children":[],"call":["ENV  [] "]}," Reek Rake Task source_files":{"type":"method","name":"source_files","children":[],"call":["FileList  [] ","ENV  [] "]}," Reek Rake Task command":{"type":"method","name":"command","children":[],"call":["(str \"reek\") compact reject ","(str \"reek\") compact "," source_files "," reek_opts_as_arguments "," config_file_as_argument "]}," Reek Rake Task define_task":{"type":"method","name":"define_task","children":[],"call":[" run_task "," task "," desc "," name "]}," Reek Cli Report TextReport heading_formatter":{"type":"method","name":"heading_formatter","children":[],"call":["@options fetch new ","@options fetch "]}," Reek Cli Report TextReport summarize_single_examiner":{"type":"method","name":"summarize_single_examiner","children":[],"call":["@report_formatter format_list ","examiner smells ","examiner smelly? "," heading_formatter header "," heading_formatter "]}," Reek Cli Report TextReport smells":{"type":"method","name":"smells","children":[],"call":["result << "," summarize_single_examiner ","@examiners each_with_object "]}," Reek Cli Report TextReport initialize":{"type":"method","name":"initialize","children":[],"call":["options fetch ","SimpleWarningFormatter  new "]}," Reek Cli Report SingleLineLocationFormatter format":{"type":"method","name":"format","children":[],"call":[]}," Reek Cli Report DefaultLocationFormatter format":{"type":"method","name":"format","children":[],"call":[]}," Reek Cli Report BlankLocationFormatter format":{"type":"method","name":"format","children":[],"call":[]}," Reek Cli Report HeadingFormatter Quiet show_header?":{"type":"method","name":"show_header?","children":[],"call":["examiner smelly? "]}," Reek Cli Report HeadingFormatter Verbose show_header?":{"type":"method","name":"show_header?","children":[],"call":[]}," Reek Cli Report HeadingFormatter Base header":{"type":"method","name":"header","children":[],"call":[" report_formatter header "," report_formatter "," show_header? "]}," Reek Cli Report HeadingFormatter Base initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Cli Report WikiLinkWarningFormatter class_name_to_param":{"type":"method","name":"class_name_to_param","children":[],"call":["name split join ","name split "]}," Reek Cli Report WikiLinkWarningFormatter explanatory_link":{"type":"method","name":"explanatory_link","children":[],"call":[" class_name_to_param ","warning smell_type "]}," Reek Cli Report WikiLinkWarningFormatter format":{"type":"method","name":"format","children":[],"call":[" explanatory_link "]}," Reek Cli Report SimpleWarningFormatter base_format":{"type":"method","name":"base_format","children":[],"call":["warning smell_type ","warning message ","warning context "]}," Reek Cli Report SimpleWarningFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Cli Options set_utility_options":{"type":"method","name":"set_utility_options","children":[],"call":[" exit "," puts ","@parser program_name ","@parser on_tail ","@parser separator "]}," Reek Cli Options set_up_sorting_option":{"type":"method","name":"set_up_sorting_option","children":[],"call":["@options sorting= ","@parser on "]}," Reek Cli Options set_up_location_formatting_options":{"type":"method","name":"set_up_location_formatting_options","children":[],"call":["@options location_format= ","@parser on "]}," Reek Cli Options set_up_verbosity_options":{"type":"method","name":"set_up_verbosity_options","children":[],"call":["@options show_links= ","@parser on ","@options show_empty= "]}," Reek Cli Options set_up_color_option":{"type":"method","name":"set_up_color_option","children":[],"call":["@options colored= ","@parser on "]}," Reek Cli Options set_report_formatting_options":{"type":"method","name":"set_report_formatting_options","children":[],"call":[" set_up_sorting_option "," set_up_location_formatting_options "," set_up_verbosity_options "," set_up_color_option ","@parser separator "]}," Reek Cli Options set_configuration_options":{"type":"method","name":"set_configuration_options","children":[],"call":["@options smells_to_detect << ","@options smells_to_detect ","@parser on ","@options config_file= ","@parser separator "]}," Reek Cli Options set_alternative_formatter_options":{"type":"method","name":"set_alternative_formatter_options","children":[],"call":["@options report_format= ","@parser on ","@parser separator "]}," Reek Cli Options set_banner":{"type":"method","name":"set_banner","children":[],"call":["@parser banner= ","(str \"          Usage: \") gsub ","@parser program_name ","@parser @parser program_name  "]}," Reek Cli Options set_up_parser":{"type":"method","name":"set_up_parser","children":[],"call":[" set_utility_options "," set_report_formatting_options "," set_alternative_formatter_options "," set_configuration_options "," set_banner "]}," Reek Cli OptionInterpreter sort_by_issue_count":{"type":"method","name":"sort_by_issue_count","children":[],"call":["@options sorting == ","@options sorting "]}," Reek Cli OptionInterpreter heading_formatter":{"type":"method","name":"heading_formatter","children":[],"call":["@options show_empty "]}," Reek Cli OptionInterpreter location_formatter":{"type":"method","name":"location_formatter","children":[],"call":["@options location_format "]}," Reek Cli OptionInterpreter warning_formatter":{"type":"method","name":"warning_formatter","children":[],"call":["klass new "," location_formatter ","@options show_links "]}," Reek Cli OptionInterpreter report_class":{"type":"method","name":"report_class","children":[],"call":["@options report_format "]}," Reek Cli OptionInterpreter reporter":{"type":"method","name":"reporter","children":[],"call":[" report_class new "," heading_formatter "," sort_by_issue_count "," warning_formatter "," report_class "]}," Reek Cli OptionInterpreter initialize":{"type":"method","name":"initialize","children":[],"call":["@options argv "]}," Reek Cli Input source_from_pipe":{"type":"method","name":"source_from_pipe","children":[],"call":["$stdin to_reek_source "]}," Reek Cli Input sources_from_argv":{"type":"method","name":"sources_from_argv","children":[],"call":["Source SourceLocator  new all_sources ","Source SourceLocator  new "]}," Reek Cli Input working_directory_as_source":{"type":"method","name":"working_directory_as_source","children":[],"call":["Source SourceLocator  new all_sources ","Source SourceLocator  new "]}," Reek Cli Input no_source_files_given?":{"type":"method","name":"no_source_files_given?","children":[],"call":["@argv empty? "]}," Reek Cli Input input_was_piped?":{"type":"method","name":"input_was_piped?","children":[],"call":["$stdin tty? ! ","$stdin tty? "]}," Reek Cli Input sources":{"type":"method","name":"sources","children":[],"call":[" sources_from_argv "," working_directory_as_source "," source_from_pipe "," input_was_piped? "," no_source_files_given? "]}," Reek Core TreeWalker push":{"type":"method","name":"push","children":[],"call":[]}," Reek Core TreeWalker check_smells":{"type":"method","name":"check_smells","children":[],"call":["@smell_repository examine "]}," Reek Core TreeWalker inside_new_context":{"type":"method","name":"inside_new_context","children":[],"call":[" check_smells ","exp type "," push ","klass new "]}," Reek Core TreeWalker count_statement_list":{"type":"method","name":"count_statement_list","children":[],"call":["@element count_statements ","statement_list length "]}," Reek Core TreeWalker count_clause":{"type":"method","name":"count_clause","children":[],"call":["@element count_statements "]}," Reek Core TreeWalker context_processor_exists?":{"type":"method","name":"context_processor_exists?","children":[],"call":[" respond_to? "]}," Reek Core TreeWalker process_when":{"type":"method","name":"process_when","children":[],"call":[" process_default "," count_clause ","exp body "]}," Reek Core TreeWalker process_case":{"type":"method","name":"process_case","children":[],"call":[" process_default ","@element count_statements "," count_clause ","exp else_body "]}," Reek Core TreeWalker process_resbody":{"type":"method","name":"process_resbody","children":[],"call":[" process_default "," count_statement_list ","exp [] compact ","exp [] "]}," Reek Core TreeWalker process_rescue":{"type":"method","name":"process_rescue","children":[],"call":[" process_default ","@element count_statements "," count_clause ","exp [] "]}," Reek Core TreeWalker process_for":{"type":"method","name":"process_for","children":[],"call":[" process_default ","@element count_statements "," count_clause ","exp [] "]}," Reek Core TreeWalker process_while":{"type":"method","name":"process_while","children":[],"call":[" process_default ","@element count_statements "," count_clause ","exp [] "]}," Reek Core TreeWalker process_if":{"type":"method","name":"process_if","children":[],"call":[" process_default ","@element count_statements "," count_clause ","exp [] "]}," Reek Core TreeWalker process_begin":{"type":"method","name":"process_begin","children":[],"call":[" process_default ","@element count_statements "," count_statement_list ","exp children "]}," Reek Core TreeWalker process_block":{"type":"method","name":"process_block","children":[],"call":[" process_default "," count_clause ","exp block "]}," Reek Core TreeWalker process_self":{"type":"method","name":"process_self","children":[],"call":["@element record_use_of_self "]}," Reek Core TreeWalker process_ivar":{"type":"method","name":"process_ivar","children":[],"call":[" process_default ","@element record_use_of_self "]}," Reek Core TreeWalker process_send":{"type":"method","name":"process_send","children":[],"call":[" process_default ","@element record_call_to "]}," Reek Core TreeWalker process_args":{"type":"method","name":"process_args","children":[],"call":[]}," Reek Core TreeWalker process_defs":{"type":"method","name":"process_defs","children":[],"call":[" process_default "," count_clause ","exp body "," inside_new_context "]}," Reek Core TreeWalker process_def":{"type":"method","name":"process_def","children":[],"call":[" process_default "," count_clause ","exp body "," inside_new_context "]}," Reek Core TreeWalker process_module":{"type":"method","name":"process_module","children":[],"call":[" process_default "," inside_new_context "]}," Reek Core TreeWalker process_default":{"type":"method","name":"process_default","children":[],"call":[" process ","child is_a? ","exp children each ","exp children "]}," Reek Core TreeWalker process":{"type":"method","name":"process","children":[],"call":[" process_default "," send "," context_processor_exists? ","exp type "]}," Reek Core TreeWalker initialize":{"type":"method","name":"initialize","children":[],"call":["StopContext  new "]}," Reek Core CodeContext context_config_for":{"type":"method","name":"context_config_for","children":[],"call":["@context config_for "]}," Reek Cli Report JsonReport show":{"type":"method","name":"show","children":[],"call":[" print "," JSON  generate "," smells map "," smells ","smell yaml_hash "]}," Reek Examiner eligible_smell_types":{"type":"method","name":"eligible_smell_types","children":[],"call":["Core SmellRepository  smell_types ","smell_types_to_filter_by include? ","klass smell_type ","Core SmellRepository  smell_types select ","smell_types_to_filter_by any? ","Smells SmellRepository  smell_types ","Smells SmellRepository  smell_types select ","filter_by_smells include? ","filter_by_smells any? "]}," Reek Examiner run":{"type":"method","name":"run","children":[],"call":["smell_repository report_on ","Core TreeWalker  new process ","Core TreeWalker  new ","source syntax_tree ","Core SmellRepository  new ","source desc ","@sources each ","TreeWalker  new process ","TreeWalker  new ","@source syntax_tree ","Smells SmellRepository  new "," description ","TreeWalker  new walk "," smell_repository report_on "," collector "," smell_repository "," smell_repository examine ","ContextBuilder  new context_tree each ","ContextBuilder  new context_tree ","ContextBuilder  new "," source syntax_tree "," source "," configuration "," smell_types "," configuration directive_for ","$stderr puts "," format ","exception inspect "," source origin "," examine "," origin "," examine_tree "," syntax_tree "," warn ","exception backtrace join ","exception backtrace ","exception message "," raise ","@error_handler handle ","SmellDetectors Syntax  smells_from_source "," source valid_syntax? "," wrap_exception "," report_syntax_errors "," wrap_exceptions ","Core SmellRepository  new  report_on ","Smells SmellRepository  new  report_on ","source source syntax_tree  ","source @source syntax_tree  ","source  source syntax_tree  ","@source source syntax_tree  ","@source @source syntax_tree  ","@source  source syntax_tree  "," Core SmellRepository  new  report_on "," Smells SmellRepository  new  report_on "," Core SmellRepository  new  "," Smells SmellRepository  new  "," Core SmellRepository  new  examine "," Smells SmellRepository  new  examine "," source source syntax_tree  "," source @source syntax_tree  "," source  source syntax_tree  "," source syntax_tree  "," @source syntax_tree  ","  source syntax_tree  "]}," Reek Source SexpExtensions SuperNode method_name":{"type":"method","name":"method_name","children":[],"call":[]}," Reek Source SourceCode from":{"type":"method","name":"from","children":[],"call":[]}," Reek Source SexpExtensions DefsNode depends_on_instance?":{"type":"method","name":"depends_on_instance?","children":[],"call":[]}," Reek Source SexpExtensions DefNode depends_on_instance?":{"type":"method","name":"depends_on_instance?","children":[],"call":["ReferenceCollector  new num_refs_to_self > ","ReferenceCollector  new num_refs_to_self ","ReferenceCollector  new "]}," Reek Source ASTNodeClassMap extension_map":{"type":"method","name":"extension_map","children":[],"call":["Hash  [] ","SexpExtensions  const_get ","const to_s sub downcase to_sym ","const to_s sub downcase ","const to_s sub ","const to_s ","SexpExtensions  constants map ","SexpExtensions  constants "]}," Reek Source ASTNodeClassMap klass_for":{"type":"method","name":"klass_for","children":[],"call":["klass send "," extension_map [] "," extension_map ","Class  new ","@klass_map [] ","Class  new  send ","@Class  new _map [] "]}," Reek Source ASTNodeClassMap initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Source ASTNode elements":{"type":"method","name":"elements","children":[],"call":[" children "," type "]}," Reek Source ASTNode first":{"type":"method","name":"first","children":[],"call":[" type "]}," Reek Source ASTNode line":{"type":"method","name":"line","children":[],"call":[" loc line "," loc "]}," Reek Source ASTNode []":{"type":"method","name":"[]","children":[],"call":[" elements [] "," elements "]}," Reek Source ASTNode comments":{"type":"method","name":"comments","children":[],"call":["@comments map join ","@comments map "]}," Reek Source ASTNode initialize":{"type":"method","name":"initialize","children":[],"call":["options fetch "]}," Reek Core MethodContext references_self?":{"type":"method","name":"references_self?","children":[],"call":[" exp depends_on_instance? "," exp "]}," Reek Configuration ConfigurationFileFinder find_by_dir":{"type":"method","name":"find_by_dir","children":[],"call":["file to_s end_with? ","file to_s ","files find ","dir children select sort ","dir children select ","dir children ","start ascend "," find_in_dir "," find_in_dir  to_s end_with? "," find_in_dir  to_s ","dir children select sort  find "," find_in_dir s find "]}," Reek Configuration ConfigurationFileFinder find_by_cli":{"type":"method","name":"find_by_cli","children":[],"call":["options config_file "]}," Reek CLI Report HTMLReport show":{"type":"method","name":"show","children":[],"call":[" print ","file puts ","ERB  new result "," binding ","ERB  new ","File  read ","File  open ","File  expand_path ","File  expand_File  expand_path  "]}," Reek CLI Report JSONReport show":{"type":"method","name":"show","children":[],"call":[" print "," JSON  generate ","smell yaml_hash "," smells map "," smells "]}," Reek CLI Report YAMLReport show":{"type":"method","name":"show","children":[],"call":[" print "," smells map to_yaml "," smells map "," smells "]}," Reek CLI Report TextReport heading_formatter":{"type":"method","name":"heading_formatter","children":[],"call":["@options fetch new ","@options fetch "]}," Reek CLI Report TextReport total_smell_count_message":{"type":"method","name":"total_smell_count_message","children":[],"call":[" Rainbow color "," Rainbow ","@total_smell_count == "," smells? "]}," Reek CLI Report TextReport sort_examiners":{"type":"method","name":"sort_examiners","children":[],"call":["@examiners sort_by! reverse! ","@examiners sort_by! "]}," Reek CLI Report TextReport summarize_single_examiner":{"type":"method","name":"summarize_single_examiner","children":[],"call":["@report_formatter format_list ","examiner smells ","examiner smelly? "," heading_formatter header "," heading_formatter "]}," Reek CLI Report TextReport display_total_smell_count":{"type":"method","name":"display_total_smell_count","children":[],"call":[" print "," total_smell_count_message ","@examiners size > ","@examiners size "]}," Reek CLI Report TextReport display_summary":{"type":"method","name":"display_summary","children":[],"call":[" puts "," smells reject each "," smells reject "," smells "]}," Reek CLI Report TextReport smells":{"type":"method","name":"smells","children":[],"call":["result << "," summarize_single_examiner ","@examiners each_with_object "]}," Reek CLI Report TextReport show":{"type":"method","name":"show","children":[],"call":[" display_total_smell_count "," display_summary "," sort_examiners "," smells? "]}," Reek CLI Report Base smells":{"type":"method","name":"smells","children":[],"call":["@examiners map flatten ","@examiners map "]}," Reek CLI Report Base smells?":{"type":"method","name":"smells?","children":[],"call":["@total_smell_count > "]}," Reek CLI Report Base add_examiner":{"type":"method","name":"add_examiner","children":[],"call":["@examiners << ","examiner smells_count "]}," Reek CLI Report Base initialize":{"type":"method","name":"initialize","children":[],"call":["options fetch ","SimpleWarningFormatter  new "]}," Reek CLI Report SingleLineLocationFormatter format":{"type":"method","name":"format","children":[],"call":[]}," Reek CLI Report DefaultLocationFormatter format":{"type":"method","name":"format","children":[],"call":[]}," Reek CLI Report BlankLocationFormatter format":{"type":"method","name":"format","children":[],"call":[]}," Reek CLI Report HeadingFormatter Quiet show_header?":{"type":"method","name":"show_header?","children":[],"call":["examiner smelly? "]}," Reek CLI Report HeadingFormatter Verbose show_header?":{"type":"method","name":"show_header?","children":[],"call":[]}," Reek CLI Report HeadingFormatter Base header":{"type":"method","name":"header","children":[],"call":[" report_formatter header "," report_formatter "," show_header? "]}," Reek CLI Report HeadingFormatter Base initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek CLI Report WikiLinkWarningFormatter class_name_to_param":{"type":"method","name":"class_name_to_param","children":[],"call":["name split join ","name split "]}," Reek CLI Report WikiLinkWarningFormatter explanatory_link":{"type":"method","name":"explanatory_link","children":[],"call":[" class_name_to_param ","warning smell_type "]}," Reek CLI Report WikiLinkWarningFormatter format":{"type":"method","name":"format","children":[],"call":[" explanatory_link "]}," Reek CLI Report SimpleWarningFormatter base_format":{"type":"method","name":"base_format","children":[],"call":["warning smell_type ","warning message ","warning context "]}," Reek CLI Report SimpleWarningFormatter format":{"type":"method","name":"format","children":[],"call":[" base_format ","@location_formatter format "]}," Reek CLI Report SimpleWarningFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek CLI Report Formatter header":{"type":"method","name":"header","children":[],"call":[]}," Reek CLI Report Formatter format_list":{"type":"method","name":"format_list","children":[],"call":["SimpleWarningFormatter  new "]}," Reek CLI ReekCommand smell_names":{"type":"method","name":"smell_names","children":[],"call":["@options smells_to_detect "," options smells_to_detect "," options "]}," Reek CLI ReekCommand reporter":{"type":"method","name":"reporter","children":[],"call":["@options reporter "," options reporter "," options "]}," Reek CLI ReekCommand execute":{"type":"method","name":"execute","children":[],"call":[" reporter show "," reporter ","app report_success ","app report_smells "," reporter smells? "," reporter add_examiner ","Examiner  new "," smell_names ","@options sources each ","@options sources ","Core Examiner  new ","app configuration "," options sources each "," options sources "," options "," result_code "]}," Reek CLI Options set_utility_options":{"type":"method","name":"set_utility_options","children":[],"call":[" exit "," puts ","@parser program_name ","@parser on_tail ","@parser separator "," parser program_name "," parser "," parser on_tail "," parser separator ","DocumentationLink  build ","DetectorRepository  available_detector_names "]}," Reek CLI Options set_up_sorting_option":{"type":"method","name":"set_up_sorting_option","children":[],"call":["@options sorting= ","@parser on "," sorting= "," parser on "," parser "," options sorting= "," options "]}," Reek CLI Options set_up_location_formatting_options":{"type":"method","name":"set_up_location_formatting_options","children":[],"call":["@options location_format= ","@parser on "," location_format= "," parser on "," parser "," options location_format= "," options "]}," Reek CLI Options set_up_verbosity_options":{"type":"method","name":"set_up_verbosity_options","children":[],"call":["@options show_links= ","@parser on ","@options show_empty= "," show_links= "," parser on "," parser "," show_empty= "," options show_links= "," options "," options show_empty= "," show_configuration_path= "]}," Reek CLI Options set_up_color_option":{"type":"method","name":"set_up_color_option","children":[],"call":["@options colored= ","@parser on "," colored= "," parser on "," parser "," options colored= "," options "]}," Reek CLI Options set_report_formatting_options":{"type":"method","name":"set_report_formatting_options","children":[],"call":[" set_up_sorting_option "," set_up_location_formatting_options "," set_up_verbosity_options "," set_up_color_option ","@parser separator "," parser separator "," parser "," set_up_progress_formatting_options "," set_up_force_exclusion_option "]}," Reek CLI Options set_configuration_options":{"type":"method","name":"set_configuration_options","children":[],"call":["@options smells_to_detect << ","@options smells_to_detect ","@parser on ","@options config_file= ","Pathname  new "," raise ","File  exist? ","@parser separator "," smells_to_detect << "," smells_to_detect "," parser on "," parser "," config_file= "," parser separator "," options smells_to_detect << "," options smells_to_detect "," options "," options config_file= ","DocumentationLink  build "," stdin_filename= "]}," Reek CLI Options set_alternative_formatter_options":{"type":"method","name":"set_alternative_formatter_options","children":[],"call":["@options report_format= ","@parser on ","@parser separator "," report_format= "," parser on "," parser "," parser separator "," options report_format= "," options "]}," Reek CLI Options set_banner":{"type":"method","name":"set_banner","children":[],"call":["@parser banner= ","(str \"          Usage: \") gsub ","@parser program_name "," parser banner= "," parser "," parser program_name ","@parser @parser program_name  ","@parser  parser program_name  "," parser @parser program_name  "," parser  parser program_name  "]}," Reek CLI Options set_up_parser":{"type":"method","name":"set_up_parser","children":[],"call":[" set_utility_options "," set_report_formatting_options "," set_alternative_formatter_options "," set_configuration_options "," set_banner "," set_exit_codes "," set_generate_todo_list_options "]}," Reek CLI Options parse":{"type":"method","name":"parse","children":[],"call":["Rainbow  enabled= ","@options colored ","@options argv= ","@parser parse! "," colored "," parser parse! "," argv "," parser "," options "," options colored "," options argv= "]}," Reek CLI Options initialize":{"type":"method","name":"initialize","children":[],"call":[" set_up_parser ","OpenStruct  new ","OptionParser  new "," color_support? "," tty_output? "]}," Reek CLI OptionInterpreter sort_by_issue_count":{"type":"method","name":"sort_by_issue_count","children":[],"call":["@options sorting == ","@options sorting "," options sorting == "," options sorting "," options "]}," Reek CLI OptionInterpreter heading_formatter":{"type":"method","name":"heading_formatter","children":[],"call":["@options show_empty ","Report  heading_formatter "," options show_empty "," options "]}," Reek CLI OptionInterpreter location_formatter":{"type":"method","name":"location_formatter","children":[],"call":["@options location_format ","Report  location_formatter "," options location_format "," options "]}," Reek CLI OptionInterpreter warning_formatter":{"type":"method","name":"warning_formatter","children":[],"call":["klass new "," location_formatter ","@options show_links "," warning_formatter_class new "," warning_formatter_class "]}," Reek CLI OptionInterpreter report_class":{"type":"method","name":"report_class","children":[],"call":["@options report_format ","Report  report_class "," options report_format "," options "]}," Reek CLI OptionInterpreter reporter":{"type":"method","name":"reporter","children":[],"call":[" report_class new "," heading_formatter "," sort_by_issue_count "," warning_formatter "," report_class "]}," Reek CLI OptionInterpreter initialize":{"type":"method","name":"initialize","children":[],"call":["@options argv ","options argv "]}," Reek CLI Command initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek CLI Application error_occured?":{"type":"method","name":"error_occured?","children":[],"call":["@status == "," status == "," status "]}," Reek CLI Application report_smells":{"type":"method","name":"report_smells","children":[],"call":[" status= "," options failure_exit_code "," options "]}," Reek CLI Application report_success":{"type":"method","name":"report_success","children":[],"call":[" status= "," options success_exit_code "," options "]}," Reek CLI Application output":{"type":"method","name":"output","children":[],"call":[" print "]}," Reek CLI Application initialize_configuration":{"type":"method","name":"initialize_configuration","children":[],"call":["Configuration AppConfiguration  initialize_with "]}," Reek CLI Application execute":{"type":"method","name":"execute","children":[],"call":["@command execute "," error_occured? "," status "," command execute "," command "," show_configuration_path "]}," Reek CLI Application initialize":{"type":"method","name":"initialize","children":[],"call":["$stderr puts "," initialize_configuration ","ReekCommand  new ","OptionInterpreter  new ","options_parser parse ","Options  new ","Configuration AppConfiguration  new "," options "," configure_app_configuration "," options config_file "," options success_exit_code "," configure_options "," command_class new "," command_class ","Configuration AppConfiguration  from_path ","options config_file "," sources "," configuration ","Options  new  parse ","options_parser parse _parser parse "," options_parser parse  "," options_parser parse  config_file "," options_parser parse  success_exit_code "," configure_options_parser parse  ","options_parser parse  config_file "]}," Reek Source SourceLocator find_sources":{"type":"method","name":"find_sources","children":[],"call":["(send\n  (lvar :paths) :map) flatten sort ","(send\n  (lvar :paths) :map) flatten ","$stderr puts ","pathname file? "," find_sources ","Dir  [] ","pathname directory? ","Pathname  new ","paths map ","Pathname  new  file? ","Pathname  new  directory? "]}," Reek Source SourceLocator sources":{"type":"method","name":"sources","children":[],"call":["Source SourceCode  from ","File  new "," find_sources map "," find_sources "," source_paths map "," source_paths "]}," Reek Smells SmellWarning wiki_link_hash":{"type":"method","name":"wiki_link_hash","children":[],"call":["warning_formatter explanatory_link "," smell_detector ","warning_formatter respond_to? "]}," Reek Smells SmellWarning core_yaml_hash":{"type":"method","name":"core_yaml_hash","children":[],"call":[" smell_detector source "," smell_detector "," smell_detector smell_type "," smell_detector smell_category "," message "," lines "," context "," source "," smell_type "," smell_category "]}," Reek Smells SmellWarning common_parameters_equal?":{"type":"method","name":"common_parameters_equal?","children":[],"call":[" parameters values_at == ","other_parameters values "," parameters values_at ","other_parameters keys "," parameters "," raise "," parameters key? ","other_parameters keys each ","other_keys each ","other_parameters keys  each "]}," Reek Smells SmellWarning sort_key":{"type":"method","name":"sort_key","children":[],"call":[" smell_category "," message "," context "," smell_type "]}," Reek Smells SmellWarning yaml_hash":{"type":"method","name":"yaml_hash","children":[],"call":[" core_yaml_hash merge merge "," wiki_link_hash "," core_yaml_hash merge "," core_yaml_hash ","Hash  [] ","key to_s "," parameters map "," parameters "]}," Reek Smells SmellWarning report_on":{"type":"method","name":"report_on","children":[],"call":["listener found_smell "]}," Reek Smells SmellWarning matches?":{"type":"method","name":"matches?","children":[],"call":[" common_parameters_equal? "," smell_classes include? ","klass to_s "," smell_classes "," matches_smell_details? "," matches_smell_type? "]}," Reek Smells SmellWarning eql?":{"type":"method","name":"eql?","children":[],"call":["(send\n  (self) :<=>\n  (lvar :other)) == "," <=> ","(send\n  (self) :<=>\n  (lvar :other)) zero? "]}," Reek Smells SmellWarning <=>":{"type":"method","name":"<=>","children":[],"call":[" sort_key <=> ","other sort_key "," sort_key "," identifying_values <=> ","other identifying_values "," identifying_values "]}," Reek Smells SmellWarning hash":{"type":"method","name":"hash","children":[],"call":[" sort_key hash "," sort_key "," identifying_values hash "," identifying_values "]}," Reek Smells SmellWarning smell_classes":{"type":"method","name":"smell_classes","children":[],"call":[" smell_detector smell_type "," smell_detector "," smell_detector smell_category "]}," Reek Smells SmellWarning initialize":{"type":"method","name":"initialize","children":[],"call":[" parameters= ","options fetch "," message= "," lines= "," context= ","options fetch to_s "," smell_detector= ","context to_s "," freeze "]}," Reek Smells PrimaDonnaMethod check_for_smells":{"type":"method","name":"check_for_smells","children":[],"call":["SmellWarning  new ","method_sexp name ","ctx exp line ","ctx exp ","ctx full_name ","sexp_item name to_s == ","method_sexp name_without_bang ","sexp_item name to_s ","sexp_item name ","ctx node_instance_methods find ","ctx node_instance_methods ","method_sexp ends_with_bang? "," smell_warning ","method_sexp method_sexp name  ","ctx full_method_sexp name  ","sexp_item method_sexp name  to_s == ","method_sexp method_sexp name _without_bang ","sexp_item method_sexp name  to_s ","sexp_item method_sexp name  "]}," Reek Smells DuplicateMethodCall CallCollector initializer_call?":{"type":"method","name":"initializer_call?","children":[],"call":["call_node method_name == ","call_node method_name "]}," Reek Smells DuplicateMethodCall CallCollector simple_method_call?":{"type":"method","name":"simple_method_call?","children":[],"call":["call_node args empty? ","call_node args ","call_node receiver ! ","call_node receiver "]}," Reek Smells Attribute recorded_public_methods":{"type":"method","name":"recorded_public_methods","children":[],"call":["visbility == ","@visiblity_tracker select "," visiblity_tracker select "," visiblity_tracker "]}," Reek Smells Attribute track_visibility":{"type":"method","name":"track_visibility","children":[],"call":["call_node method_name ","@visiblity_tracker []= ","call_node arg_names each ","call_node arg_names ","call_node arg_names any? "," visiblity_mode= "," visiblity_tracker []= "," visiblity_tracker "]}," Reek Smells Attribute visibility_modifier?":{"type":"method","name":"visibility_modifier?","children":[],"call":["VISIBILITY_MODIFIERS  include? ","call_node method_name "]}," Reek Sexp SexpNode each_sexp":{"type":"method","name":"each_sexp","children":[],"call":["elem is_a? "," children each "," children "]}," Reek Sexp SexpNode look_for_types":{"type":"method","name":"look_for_types","children":[],"call":["elem look_for_types "," each_sexp ","blk call ","target_types include? "," type ","ignoring include? "]}," Reek Sexp SexpNode look_for_type":{"type":"method","name":"look_for_type","children":[],"call":["blk call "," type == "," type ","elem look_for_type ","ignoring include? ","elem type "," each_sexp "]}," Reek Sexp SexpNode format_to_ruby":{"type":"method","name":"format_to_ruby","children":[],"call":["SexpFormatter  format "]}," Reek Sexp SexpNode contains_nested_node?":{"type":"method","name":"contains_nested_node?","children":[],"call":[" look_for_type "]}," Reek Sexp SexpNode find_nodes":{"type":"method","name":"find_nodes","children":[],"call":["result << "," look_for_types "]}," Reek Sexp SexpNode each_node":{"type":"method","name":"each_node","children":[],"call":["result << "," look_for_type "," block_given? "]}," Reek Sexp SexpFormatter format":{"type":"method","name":"format","children":[],"call":[]}," Reek Sexp SexpExtensions SuperNode method_name":{"type":"method","name":"method_name","children":[],"call":[]}," Reek Sexp SexpExtensions YieldNode arg_names":{"type":"method","name":"arg_names","children":[],"call":["arg [] "," args map "," args "]}," Reek Sexp SexpExtensions YieldNode args":{"type":"method","name":"args","children":[],"call":[" [] "]}," Reek Sexp SexpExtensions ClassNode superclass":{"type":"method","name":"superclass","children":[],"call":[" [] "]}," Reek Sexp SexpExtensions ModuleNode text_name":{"type":"method","name":"text_name","children":[],"call":["SexpFormatter  format "," name "]}," Reek Sexp SexpExtensions ModuleNode full_name":{"type":"method","name":"full_name","children":[],"call":[" text_name ","outer == "]}," Reek Sexp SexpExtensions ModuleNode simple_name":{"type":"method","name":"simple_name","children":[],"call":[" name "," name simple_name "," name is_a? "]}," Reek Sexp SexpExtensions ModuleNode name":{"type":"method","name":"name","children":[],"call":[" [] "]}," Reek Sexp SexpExtensions ConstNode simple_name":{"type":"method","name":"simple_name","children":[],"call":[" children last "," children "]}," Reek Sexp SexpExtensions LitNode value":{"type":"method","name":"value","children":[],"call":[" [] "]}," Reek Sexp SexpExtensions BlockNode parameter_names":{"type":"method","name":"parameter_names","children":[],"call":[" parameters [] to_a "," parameters [] "," parameters "]}," Reek Sexp SexpExtensions BlockNode parameters":{"type":"method","name":"parameters","children":[],"call":[" [] "]}," Reek Sexp SexpExtensions BlockNode block":{"type":"method","name":"block","children":[],"call":[" [] "]}," Reek Sexp SexpExtensions BlockNode args":{"type":"method","name":"args","children":[],"call":[" [] "]}," Reek Sexp SexpExtensions BlockNode call":{"type":"method","name":"call","children":[],"call":[" [] "]}," Reek Sexp SexpExtensions IfNode body_nodes":{"type":"method","name":"body_nodes","children":[],"call":["child find_nodes "," children [] compact flat_map "," children [] compact "," children [] "," children "]}," Reek Sexp SexpExtensions IfNode condition":{"type":"method","name":"condition","children":[],"call":[" [] "]}," Reek Sexp SexpExtensions DefsNode depends_on_instance?":{"type":"method","name":"depends_on_instance?","children":[],"call":[]}," Reek Sexp SexpExtensions DefsNode full_name":{"type":"method","name":"full_name","children":[],"call":[" name ","SexpFormatter  format "," receiver ","outer == "]}," Reek Sexp SexpExtensions DefsNode body":{"type":"method","name":"body","children":[],"call":[" [] "]}," Reek Sexp SexpExtensions DefsNode argslist":{"type":"method","name":"argslist","children":[],"call":[" [] "]}," Reek Sexp SexpExtensions DefsNode name":{"type":"method","name":"name","children":[],"call":[" [] "]}," Reek Sexp SexpExtensions DefsNode receiver":{"type":"method","name":"receiver","children":[],"call":[" [] "]}," Reek Sexp SexpExtensions DefNode depends_on_instance?":{"type":"method","name":"depends_on_instance?","children":[],"call":["Core ReferenceCollector  new num_refs_to_self > ","Core ReferenceCollector  new num_refs_to_self ","Core ReferenceCollector  new "]}," Reek Sexp SexpExtensions DefNode full_name":{"type":"method","name":"full_name","children":[],"call":[" name ","outer == "]}," Reek Sexp SexpExtensions DefNode body":{"type":"method","name":"body","children":[],"call":[" [] "]}," Reek Sexp SexpExtensions DefNode argslist":{"type":"method","name":"argslist","children":[],"call":[" [] "]}," Reek Sexp SexpExtensions DefNode name":{"type":"method","name":"name","children":[],"call":[" [] "]}," Reek Sexp SexpExtensions MethodNodeBase body_nodes":{"type":"method","name":"body_nodes","children":[],"call":[" body find_nodes "," body "]}," Reek Sexp SexpExtensions MethodNodeBase ends_with_bang?":{"type":"method","name":"ends_with_bang?","children":[],"call":[" name [] == "," name [] "," name "]}," Reek Sexp SexpExtensions MethodNodeBase name_without_bang":{"type":"method","name":"name_without_bang","children":[],"call":[" name to_s chop "," name to_s "," name "]}," Reek Sexp SexpExtensions MethodNodeBase parameter_names":{"type":"method","name":"parameter_names","children":[],"call":[" parameters map "," parameters "]}," Reek Sexp SexpExtensions MethodNodeBase parameters":{"type":"method","name":"parameters","children":[],"call":[" argslist children "," argslist "," argslist components "]}," Reek Sexp SexpExtensions MethodNodeBase arg_names":{"type":"method","name":"arg_names","children":[],"call":[" arguments map "," arguments "]}," Reek Sexp SexpExtensions MethodNodeBase arguments":{"type":"method","name":"arguments","children":[],"call":[" parameters reject "," parameters "]}," Reek Sexp SexpExtensions LvarNode var_name":{"type":"method","name":"var_name","children":[],"call":[" [] "]}," Reek Sexp SexpExtensions VariableBase name":{"type":"method","name":"name","children":[],"call":[" [] "]}," Reek Sexp SexpExtensions SendNode arg_names":{"type":"method","name":"arg_names","children":[],"call":["arg [] "," args map "," args "]}," Reek Sexp SexpExtensions SendNode participants":{"type":"method","name":"participants","children":[],"call":["(send\n  (array\n    (send nil :receiver)) :+\n  (send nil :args)) compact ","(send nil :receiver) + "," args "," receiver "]}," Reek Sexp SexpExtensions SendNode args":{"type":"method","name":"args","children":[],"call":[" [] "]}," Reek Sexp SexpExtensions SendNode method_name":{"type":"method","name":"method_name","children":[],"call":[" [] "]}," Reek Sexp SexpExtensions SendNode receiver":{"type":"method","name":"receiver","children":[],"call":[" [] "]}," Reek Sexp SexpExtensions WhenNode body":{"type":"method","name":"body","children":[],"call":[" children last "," children "]}," Reek Sexp SexpExtensions WhenNode condition_list":{"type":"method","name":"condition_list","children":[],"call":[" children [] "," children "]}," Reek Sexp SexpExtensions CaseNode else_body":{"type":"method","name":"else_body","children":[],"call":[" children last "," children "]}," Reek Sexp SexpExtensions CaseNode body_nodes":{"type":"method","name":"body_nodes","children":[],"call":["child find_nodes "," children [] compact flat_map "," children [] compact "," children [] "," children "]}," Reek Sexp SexpExtensions CaseNode condition":{"type":"method","name":"condition","children":[],"call":[" [] "]}," Reek Sexp SexpExtensions AttrasgnNode args":{"type":"method","name":"args","children":[],"call":[" [] "]}," Reek Sexp SexpExtensions LogicOperatorBase body_nodes":{"type":"method","name":"body_nodes","children":[],"call":[" [] find_nodes "," [] "]}," Reek Sexp SexpExtensions LogicOperatorBase condition":{"type":"method","name":"condition","children":[],"call":[" [] "]}," Reek Sexp SexpExtensions KwrestargNode anonymous_splat?":{"type":"method","name":"anonymous_splat?","children":[],"call":[" name ! "," name "]}," Reek Sexp SexpExtensions RestargNode anonymous_splat?":{"type":"method","name":"anonymous_splat?","children":[],"call":[" name ! "," name "]}," Reek Sexp SexpExtensions BlockargNode block?":{"type":"method","name":"block?","children":[],"call":[]}," Reek Sexp SexpExtensions KwoptargNode optional_argument?":{"type":"method","name":"optional_argument?","children":[],"call":[]}," Reek Sexp SexpExtensions OptargNode optional_argument?":{"type":"method","name":"optional_argument?","children":[],"call":[]}," Reek Sexp SexpExtensions ArgNodeBase anonymous_splat?":{"type":"method","name":"anonymous_splat?","children":[],"call":[]}," Reek Sexp SexpExtensions ArgNodeBase optional_argument?":{"type":"method","name":"optional_argument?","children":[],"call":[]}," Reek Sexp SexpExtensions ArgNodeBase block?":{"type":"method","name":"block?","children":[],"call":[]}," Reek Sexp SexpExtensions ArgNodeBase plain_name":{"type":"method","name":"plain_name","children":[],"call":[" name to_s "," name "]}," Reek Sexp SexpExtensions ArgNodeBase marked_unused?":{"type":"method","name":"marked_unused?","children":[],"call":[" plain_name start_with? "," plain_name "]}," Reek Sexp SexpExtensions ArgNodeBase ==":{"type":"method","name":"==","children":[],"call":[" name == "," name "]}," Reek Sexp SexpExtensions ArgNodeBase name":{"type":"method","name":"name","children":[],"call":[" children first "," children "]}," Reek Core TreeDresser dress":{"type":"method","name":"dress","children":[],"call":["@klass_map klass_for new ","sexp loc ","@klass_map klass_for ","comment_map [] "," dress ","sexp children map ","sexp children ","sexp type ","sexp is_a? ","sexp sexp type  "]}," Reek Core TreeDresser initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Core ReferenceCollector implicit_self_calls":{"type":"method","name":"implicit_self_calls","children":[],"call":["@ast each_node reject ","@ast each_node "]}," Reek Core ReferenceCollector explicit_self_calls":{"type":"method","name":"explicit_self_calls","children":[],"call":["@ast each_node ","(sym :self) flat_map "]}," Reek Core ReferenceCollector num_refs_to_self":{"type":"method","name":"num_refs_to_self","children":[],"call":["(send\n  (send nil :explicit_self_calls) :+\n  (send nil :implicit_self_calls)) size "," explicit_self_calls + "," implicit_self_calls "," explicit_self_calls "]}," Reek Core ReferenceCollector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Core Examiner eligible_smell_types":{"type":"method","name":"eligible_smell_types","children":[],"call":["Core SmellRepository  smell_types ","smell_types_to_filter_by include? ","klass smell_type ","Core SmellRepository  smell_types select ","smell_types_to_filter_by any? "]}," Reek Core Examiner run":{"type":"method","name":"run","children":[],"call":["smell_repository report_on ","Core TreeWalker  new process ","Core TreeWalker  new ","source syntax_tree ","Core SmellRepository  new ","source description ","@sources each ","Core SmellRepository  new  report_on ","source source syntax_tree  "]}," Reek Core Examiner smelly?":{"type":"method","name":"smelly?","children":[],"call":[" smells empty? ! "," smells empty? "," smells "]}," Reek Core Examiner smells_count":{"type":"method","name":"smells_count","children":[],"call":[" smells length "," smells "]}," Reek Core Examiner smells":{"type":"method","name":"smells","children":[],"call":["@collector warnings "]}," Reek Core Examiner initialize":{"type":"method","name":"initialize","children":[],"call":[" run "," eligible_smell_types ","Core WarningCollector  new ","@sources description ","Source SourceRepository  parse ","Source SourceRepository  parse  description "]}," Reek Core CodeComment add_to_config":{"type":"method","name":"add_to_config","children":[],"call":[" config merge! ","YAML  load ","(send\n  (lvar :smell) :gsub\n  (regexp\n    (str \"(?:^|_)(.)\")\n    (regopt))) + ","1 upcase ","smell gsub "," config "]}," Reek Core CodeComment descriptive?":{"type":"method","name":"descriptive?","children":[],"call":["@text split length >= ","@text split length ","@text split "]}," Reek Core CodeComment config":{"type":"method","name":"config","children":[],"call":["hash []= ","Hash  new "]}," Reek Core CodeComment initialize":{"type":"method","name":"initialize","children":[],"call":["(send\n  (lvar :text) :gsub\n  (const nil :CONFIG_REGEX)) gsub gsub strip ","(send\n  (lvar :text) :gsub\n  (const nil :CONFIG_REGEX)) gsub gsub ","(send\n  (lvar :text) :gsub\n  (const nil :CONFIG_REGEX)) gsub "," add_to_config ","text gsub "]}," Reek Core ASTNodeClassMap extension_map":{"type":"method","name":"extension_map","children":[],"call":["Hash  [] ","Sexp SexpExtensions  const_get ","const to_s sub downcase to_sym ","const to_s sub downcase ","const to_s sub ","const to_s ","Sexp SexpExtensions  constants map ","Sexp SexpExtensions  constants "]}," Reek Core ASTNodeClassMap klass_for":{"type":"method","name":"klass_for","children":[],"call":["klass send "," extension_map [] "," extension_map ","Class  new tap ","Class  new ","@klass_map [] ","  extension_map [] _map [] ","  extension_map [] _map "]}," Reek Core ASTNodeClassMap initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Core ASTNode elements":{"type":"method","name":"elements","children":[],"call":[" children "," type "]}," Reek Core ASTNode first":{"type":"method","name":"first","children":[],"call":[" type "]}," Reek Core ASTNode line":{"type":"method","name":"line","children":[],"call":[" loc line "," loc "]}," Reek Core ASTNode []":{"type":"method","name":"[]","children":[],"call":[" elements [] "," elements "]}," Reek Core ASTNode comments":{"type":"method","name":"comments","children":[],"call":["@comments map join ","@comments map "]}," Reek Core ASTNode initialize":{"type":"method","name":"initialize","children":[],"call":["options fetch "]}," Reek CLI Silencer silently":{"type":"method","name":"silently","children":[],"call":["StringIO  new "]}," Reek CLI Report XMLReport print_xml":{"type":"method","name":"print_xml","children":[],"call":[" puts ","formatter write ","REXML Formatters Default  new ","REXML Formatters Default  new  write "]}," Reek CLI Report XMLReport smell_to_xml":{"type":"method","name":"smell_to_xml","children":[],"call":["element add_attributes ","smell smell_type ","smell message ","smell lines first ","smell lines ","REXML Element  new tap ","REXML Element  new "]}," Reek CLI Report XMLReport smells_to_xml":{"type":"method","name":"smells_to_xml","children":[],"call":[" smell_to_xml ","smells each "]}," Reek CLI Report XMLReport file_to_xml":{"type":"method","name":"file_to_xml","children":[],"call":[" smells_to_xml ","element attributes []= ","File  realpath ","element attributes ","REXML Element  new tap ","REXML Element  new "]}," Reek CLI Report XMLReport document":{"type":"method","name":"document","children":[],"call":["doc << ","REXML XMLDecl  new ","REXML Document  new tap ","REXML Document  new "]}," Reek CLI Report XMLReport show":{"type":"method","name":"show","children":[],"call":[" print_xml ","checkstyle parent "," file_to_xml "," smells group_by each "," smells group_by "," smells ","REXML Element  new "," document ","REXML Element  new  parent "]}," Reek CLI Report XMLReport initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek CLI Options color_support?":{"type":"method","name":"color_support?","children":[],"call":["$stdout tty? "]}," Reek Sexp SexpExtensions NestedAssignables components":{"type":"method","name":"components","children":[],"call":[" children flat_map "," children "]}," Reek Sexp SexpExtensions ArgNodeBase components":{"type":"method","name":"components","children":[],"call":[]}," Reek TreeWalker push":{"type":"method","name":"push","children":[],"call":[" element= "," element "]}," Reek TreeWalker check_smells":{"type":"method","name":"check_smells","children":[],"call":["@smell_repository examine "]}," Reek TreeWalker inside_new_context":{"type":"method","name":"inside_new_context","children":[],"call":[" check_smells ","exp type "," push ","klass new ","@element append_child_context "," element append_child_context "," element "," new_context "]}," Reek TreeWalker count_statement_list":{"type":"method","name":"count_statement_list","children":[],"call":["@element count_statements ","statement_list length "," element count_statements "," element "]}," Reek TreeWalker count_clause":{"type":"method","name":"count_clause","children":[],"call":["@element count_statements "," element count_statements "," element "]}," Reek TreeWalker context_processor_exists?":{"type":"method","name":"context_processor_exists?","children":[],"call":[" respond_to? "," class private_method_defined? "," class "]}," Reek TreeWalker process_when":{"type":"method","name":"process_when","children":[],"call":[" process_default "," count_clause ","exp body "]}," Reek TreeWalker process_case":{"type":"method","name":"process_case","children":[],"call":[" process_default ","@element count_statements "," count_clause ","exp else_body "," element count_statements "," element "]}," Reek TreeWalker process_resbody":{"type":"method","name":"process_resbody","children":[],"call":[" process_default "," count_statement_list ","exp [] compact ","exp [] ","exp children [] compact ","exp children [] ","exp children "]}," Reek TreeWalker process_rescue":{"type":"method","name":"process_rescue","children":[],"call":[" process_default ","@element count_statements "," count_clause ","exp [] "," element count_statements "," element ","exp children first ","exp children "]}," Reek TreeWalker process_for":{"type":"method","name":"process_for","children":[],"call":[" process_default ","@element count_statements "," count_clause ","exp [] "," element count_statements "," element ","exp children [] ","exp children "]}," Reek TreeWalker process_while":{"type":"method","name":"process_while","children":[],"call":[" process_default ","@element count_statements "," count_clause ","exp [] "," element count_statements "," element ","exp children [] ","exp children "]}," Reek TreeWalker process_if":{"type":"method","name":"process_if","children":[],"call":[" process_default ","@element count_statements "," count_clause ","exp [] "," element count_statements "," element ","children [] ","exp children ","exp children  [] ","exp exp children  "]}," Reek TreeWalker process_begin":{"type":"method","name":"process_begin","children":[],"call":[" process_default ","@element count_statements "," count_statement_list ","exp children "," element count_statements "," element "]}," Reek TreeWalker process_block":{"type":"method","name":"process_block","children":[],"call":[" process_default "," count_clause ","exp block "]}," Reek TreeWalker process_self":{"type":"method","name":"process_self","children":[],"call":["@element record_use_of_self "," element record_use_of_self "," element "]}," Reek TreeWalker process_ivar":{"type":"method","name":"process_ivar","children":[],"call":[" process_default ","@element record_use_of_self "," element record_use_of_self "," element "]}," Reek TreeWalker process_send":{"type":"method","name":"process_send","children":[],"call":[" process_default ","@element record_call_to ","@element track_visibility ","exp arg_names ","exp method_name "," visibility_modifier? "," element record_call_to "," element "," element track_visibility "," new_context ","arg type == ","arg type ","exp args each ","exp args ","exp attribute_writer? ","exp visibility_modifier? "]}," Reek TreeWalker process_args":{"type":"method","name":"process_args","children":[],"call":[]}," Reek TreeWalker process_defs":{"type":"method","name":"process_defs","children":[],"call":[" process_default "," count_clause ","exp body "," inside_new_context "]}," Reek TreeWalker process_def":{"type":"method","name":"process_def","children":[],"call":[" process_default "," count_clause ","exp body "," inside_new_context "]}," Reek TreeWalker process_module":{"type":"method","name":"process_module","children":[],"call":[" process_default "," inside_new_context "]}," Reek TreeWalker process_default":{"type":"method","name":"process_default","children":[],"call":[" process ","child is_a? ","exp children each ","exp children "]}," Reek TreeWalker process":{"type":"method","name":"process","children":[],"call":[" process_default "," send "," context_processor_exists? ","exp type "," element "]}," Reek TreeWalker initialize":{"type":"method","name":"initialize","children":[],"call":["Context RootContext  new "]}," Reek TreeDresser initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Source SourceLocator print_no_such_file_error":{"type":"method","name":"print_no_such_file_error","children":[],"call":["$stderr puts "," warn "]}," Reek Source SourceLocator path_exists?":{"type":"method","name":"path_exists?","children":[],"call":["Pathname  new exist? ","Pathname  new "]}," Reek Source SourceLocator exclude_path?":{"type":"method","name":"exclude_path?","children":[],"call":["Configuration AppConfiguration  exclude_paths include? ","pathname to_s ","Configuration AppConfiguration  exclude_paths "]}," Reek Source SourceLocator source_paths":{"type":"method","name":"source_paths","children":[],"call":["relevant_paths flatten sort ","relevant_paths flatten ","relevant_paths << ","Find  prune "," exclude_path? ","pathname directory? ","Pathname  new ","Find  find "," print_no_such_file_error "," path_exists? ","@paths map "," hidden_directory? "," ruby_file? "," ignore_path? ","given_pathname find ","@pathnames each_with_object ","path directory? ","given_path find ","given_path exist? "," paths each_with_object "," paths "," ignore_file? ","relevant_paths concat "," source_files_from_path ","Pathname  new  directory? ","given_Pathname  new  find ","@Pathname  new s each_with_object "]}," Reek Smells SmellRepository smell_listeners":{"type":"method","name":"smell_listeners","children":[],"call":["detector register ","@detectors each_value ","hash []= ","Hash  new "," typed_detectors "," detectors each_value "," detectors "," typed_detectors= ","(send\n  (const nil :Hash) :new) tap "]}," Reek Smells SmellRepository examine":{"type":"method","name":"examine","children":[],"call":["detector examine "," smell_listeners [] each "," smell_listeners [] "," smell_listeners ","scope type ","detector run_for "," smell_detectors_for each "," smell_detectors_for ","context type "," smell_detectors_for flat_map "]}," Reek Smells SmellRepository report_on":{"type":"method","name":"report_on","children":[],"call":["detector report_on ","@detectors each_value "," detectors each_value "," detectors "," detectors each "]}," Reek Smells SmellRepository configure":{"type":"method","name":"configure","children":[],"call":["detector configure_with "," raise ","@detectors [] "," detectors [] "," detectors ","@detectors []  configure_with "," detectors []  configure_with ","@@detectors [] s [] ","@ detectors [] s [] "," @detectors [] s [] ","  detectors [] s [] "," @detectors [] s ","  detectors [] s "]}," Reek Smells SmellRepository initialize":{"type":"method","name":"initialize","children":[],"call":["Configuration AppConfiguration  configure_smell_repository ","@detectors []= ","klass new ","smell_types each "," configure ","configuration directive_for each ","configuration directive_for "," source_via "," smell_types= "," configuration= "," typed_detectors= "," source_via= "," configuration_for ","smell_types map "]}," Reek Smells SmellRepository smell_types":{"type":"method","name":"smell_types","children":[],"call":[]}," Reek Smells Overrides for_context":{"type":"method","name":"for_context","children":[],"call":["@hash [] ","contexts map ","context matches? ","@hash keys select ","@hash keys "," hash [] "," hash "," hash keys select "," hash keys "]}," Reek Smells Overrides initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Smells SmellConfiguration value":{"type":"method","name":"value","children":[],"call":["@options fetch ","conf [] ","conf key? "," overrides_for each "," overrides_for "," options fetch "," options "]}," Reek Smells SmellConfiguration overrides_for":{"type":"method","name":"overrides_for","children":[],"call":["Overrides  new for_context ","Overrides  new ","@options fetch "," options fetch "," options "]}," Reek Smells SmellConfiguration enabled?":{"type":"method","name":"enabled?","children":[],"call":["@options [] "," options [] "," options "]}," Reek Smells SmellConfiguration merge!":{"type":"method","name":"merge!","children":[],"call":["@options merge! "," options merge! "," options "]}," Reek Smells SmellConfiguration initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Smells IrresponsibleModule descriptive?":{"type":"method","name":"descriptive?","children":[],"call":["ctx descriptively_commented? "," descriptive [] ","ctx full_name "," descriptive "]}," Reek Report XMLReport print_xml":{"type":"method","name":"print_xml","children":[],"call":[" puts ","formatter write ","REXML Formatters Default  new ","REXML Formatters Default  new  write "]}," Reek Report XMLReport smell_to_xml":{"type":"method","name":"smell_to_xml","children":[],"call":["element add_attributes ","smell smell_type ","smell message ","smell lines first ","smell lines ","REXML Element  new tap ","REXML Element  new "]}," Reek Report XMLReport smells_to_xml":{"type":"method","name":"smells_to_xml","children":[],"call":[" smell_to_xml ","smells each "]}," Reek Report XMLReport file_to_xml":{"type":"method","name":"file_to_xml","children":[],"call":[" smells_to_xml ","element attributes []= ","File  realpath ","element attributes ","REXML Element  new tap ","REXML Element  new "]}," Reek Report XMLReport document":{"type":"method","name":"document","children":[],"call":["doc << ","REXML XMLDecl  new ","REXML Document  new tap ","REXML Document  new ","document << << "," checkstyle ","document << "]}," Reek Report XMLReport show":{"type":"method","name":"show","children":[],"call":[" print_xml ","checkstyle parent "," file_to_xml "," smells group_by each "," smells group_by "," smells ","REXML Element  new "," document ","$stdout puts "," document write ","REXML Element  new  parent "]}," Reek Report HTMLReport show":{"type":"method","name":"show","children":[],"call":[" print ","file puts ","ERB  new result "," binding ","ERB  new ","File  read ","File  open ","File  expand_path "," puts ","File  write ","template_path read ","Pathname  new "," __dir__ ","File  expand_File  expand_path  ","template_File  expand_path  read ","File  expand_path  read ","Pathname  new  read "]}," Reek Report JSONReport show":{"type":"method","name":"show","children":[],"call":[" print "," JSON  generate ","smell yaml_hash "," smells map "," smells ","out print "," warning_formatter format_hash "," warning_formatter "]}," Reek Report YAMLReport show":{"type":"method","name":"show","children":[],"call":[" print "," smells map to_yaml "," smells map "," smells ","out print ","(send\n  (send nil :smells) :map) to_yaml "," warning_formatter format_hash "," warning_formatter "]}," Reek Report TextReport heading_formatter":{"type":"method","name":"heading_formatter","children":[],"call":["@options fetch new ","@options fetch "," options fetch new "," report_formatter "," options fetch "," options "]}," Reek Report TextReport total_smell_count_message":{"type":"method","name":"total_smell_count_message","children":[],"call":[" Rainbow color "," Rainbow ","@total_smell_count == "," smells? "," total_smell_count == "," total_smell_count "]}," Reek Report TextReport sort_examiners":{"type":"method","name":"sort_examiners","children":[],"call":["@examiners sort_by! reverse! ","@examiners sort_by! "," examiners sort_by! reverse! "," examiners sort_by! "," examiners "," sort_by_issue_count "]}," Reek Report TextReport summarize_single_examiner":{"type":"method","name":"summarize_single_examiner","children":[],"call":["@report_formatter format_list ","examiner smells ","examiner smelly? "," heading_formatter header "," heading_formatter "," report_formatter format_list "," warning_formatter "," report_formatter "," warning_formatter format_list "]}," Reek Report TextReport display_total_smell_count":{"type":"method","name":"display_total_smell_count","children":[],"call":[" print "," total_smell_count_message ","@examiners size > ","@examiners size "," examiners size > "," examiners size "," examiners "]}," Reek Report TextReport display_summary":{"type":"method","name":"display_summary","children":[],"call":[" puts "," smell_summaries each "," smell_summaries "]}," Reek Report TextReport smell_summaries":{"type":"method","name":"smell_summaries","children":[],"call":["(send\n  (ivar :@examiners) :map) reject "," summarize_single_examiner ","@examiners map ","(send\n  (send nil :examiners) :map) reject "," examiners map "," examiners "]}," Reek Report TextReport show":{"type":"method","name":"show","children":[],"call":[" display_total_smell_count "," display_summary "," sort_examiners "," smells? "," print "," progress_formatter footer "," progress_formatter "]}," Reek Report Base smells":{"type":"method","name":"smells","children":[],"call":["@examiners map flatten ","@examiners map "," examiners map flatten "," examiners map "," examiners "]}," Reek Report Base smells?":{"type":"method","name":"smells?","children":[],"call":["@total_smell_count > "," total_smell_count > "," total_smell_count "]}," Reek Report Base show":{"type":"method","name":"show","children":[],"call":[" raise "]}," Reek Report Base add_examiner":{"type":"method","name":"add_examiner","children":[],"call":["@examiners << ","examiner smells_count "," examiners << "," examiners "," total_smell_count "]}," Reek Report Base initialize":{"type":"method","name":"initialize","children":[],"call":["options fetch ","SimpleWarningFormatter  new ","heading_formatter new "]}," Reek Report SingleLineLocationFormatter format":{"type":"method","name":"format","children":[],"call":["warning lines sort first ","warning lines sort ","warning lines ","warning source ","warning lines min "]}," Reek Report DefaultLocationFormatter format":{"type":"method","name":"format","children":[],"call":["warning lines sort inspect ","warning lines sort ","warning lines "]}," Reek Report BlankLocationFormatter format":{"type":"method","name":"format","children":[],"call":[]}," Reek Report HeadingFormatter Quiet show_header?":{"type":"method","name":"show_header?","children":[],"call":["examiner smelly? "]}," Reek Report HeadingFormatter Verbose show_header?":{"type":"method","name":"show_header?","children":[],"call":[]}," Reek Report HeadingFormatter Base header":{"type":"method","name":"header","children":[],"call":[" report_formatter header "," report_formatter "," show_header? "]}," Reek Report HeadingFormatter Base initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Report WikiLinkWarningFormatter class_name_to_param":{"type":"method","name":"class_name_to_param","children":[],"call":["name split join ","name split "]}," Reek Report WikiLinkWarningFormatter explanatory_link":{"type":"method","name":"explanatory_link","children":[],"call":[" class_name_to_param ","warning smell_type "]}," Reek Report WikiLinkWarningFormatter format":{"type":"method","name":"format","children":[],"call":[" explanatory_link "]}," Reek Report SimpleWarningFormatter base_format":{"type":"method","name":"base_format","children":[],"call":["warning smell_type ","warning message ","warning context "]}," Reek Report SimpleWarningFormatter format":{"type":"method","name":"format","children":[],"call":[" base_format ","@location_formatter format ","warning base_message "," location_formatter format "," location_formatter "]}," Reek Report SimpleWarningFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Report Formatter header":{"type":"method","name":"header","children":[],"call":[" Rainbow yellow "," Rainbow ","count == "," Rainbow cyan + "," Rainbow cyan ","examiner description ","examiner smells_count ","examiner smells_count  == ","examiner smells_examiner smells_count  "]}," Reek Report Formatter format_list":{"type":"method","name":"format_list","children":[],"call":["SimpleWarningFormatter  new ","(send\n  (lvar :warnings) :map) join ","formatter format ","warnings map "]}," Reek Examiner description":{"type":"method","name":"description","children":[],"call":["@source description "," source origin "," source "," source description "," origin "]}," Reek Context SingletonMethodContext envious_receivers":{"type":"method","name":"envious_receivers","children":[],"call":[]}," Reek Context RootContext full_name":{"type":"method","name":"full_name","children":[],"call":[]}," Reek Context RootContext count_statements":{"type":"method","name":"count_statements","children":[],"call":[]}," Reek Context RootContext config_for":{"type":"method","name":"config_for","children":[],"call":[]}," Reek Context RootContext method_missing":{"type":"method","name":"method_missing","children":[],"call":[]}," Reek Context RootContext initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Context ModuleContext descriptively_commented?":{"type":"method","name":"descriptively_commented?","children":[],"call":["CodeComment  new descriptive? ","CodeComment  new "," exp leading_comment "," exp "]}," Reek Context ModuleContext node_instance_methods":{"type":"method","name":"node_instance_methods","children":[],"call":[" local_nodes "," local_nodes to_a "]}," Reek Context ModuleContext initialize":{"type":"method","name":"initialize","children":[],"call":["AST SexpFormatter  format ","exp children first ","exp children ","VisibilityTracker  new "]}," Reek Context MethodContext uses_super_with_implicit_arguments?":{"type":"method","name":"uses_super_with_implicit_arguments?","children":[],"call":["body contains_nested_node? "," exp body "," exp "," exp body  contains_nested_node? "," exp  exp body  "]}," Reek Context MethodContext unused_params":{"type":"method","name":"unused_params","children":[],"call":[" uses_param? ! "," uses_param? ","param plain_name ","param marked_unused? ","param anonymous_splat? "," exp arguments select "," exp arguments "," exp "," exp arguments reject "]}," Reek Context MethodContext uses_param?":{"type":"method","name":"uses_param?","children":[],"call":["node var_name == ","param to_sym ","node var_name "," local_nodes find "," local_nodes ","(send\n  (send nil :local_nodes\n    (sym :lvar)) :+\n  (send nil :local_nodes\n    (sym :lvasgn))) find "," local_nodes + ","param name "]}," Reek Context MethodContext references_self?":{"type":"method","name":"references_self?","children":[],"call":[" exp depends_on_instance? "," exp "]}," Reek Context MethodContext envious_receivers":{"type":"method","name":"envious_receivers","children":[],"call":["@refs max_keys ","@refs self_is_max? ","@refs most_popular "," refs most_popular "," refs "," refs self_is_max? "]}," Reek Context MethodContext record_use_of_self":{"type":"method","name":"record_use_of_self","children":[],"call":["@refs record_reference_to "]}," Reek Context MethodContext record_call_to":{"type":"method","name":"record_call_to","children":[],"call":["@refs record_reference_to ","receiver name ","meth == ","receiver [] ","exp [] ","exp line "]}," Reek Context MethodContext count_statements":{"type":"method","name":"count_statements","children":[],"call":[]}," Reek Context MethodContext initialize":{"type":"method","name":"initialize","children":[],"call":["AST ObjectRefs  new ","@parameters extend ","exp parameters dup ","exp parameters ","exp parameters dup  extend "]}," Reek Context MethodParameters default_assignments":{"type":"method","name":"default_assignments","children":[],"call":["result << ","exp [] ","exp optional_argument? "," each "]}," Reek Context CodeContext context_config_for":{"type":"method","name":"context_config_for","children":[],"call":["@context config_for "," context config_for "," context "]}," Reek Context CodeContext config":{"type":"method","name":"config","children":[],"call":["CodeComment  new config ","CodeComment  new ","@exp full_comment "," exp full_comment "," exp "," full_comment "]}," Reek Context CodeContext config_for":{"type":"method","name":"config_for","children":[],"call":[" context_config_for merge "," config [] ","detector_class smell_type "," config "," context_config_for "," parent_config_for merge "," configuration_via_code_commment [] "," configuration_via_code_commment "," parent_config_for "]}," Reek Context CodeContext full_name":{"type":"method","name":"full_name","children":[],"call":[" exp full_name "," exp ","@context full_name "," parent full_name "," parent "," context full_name "," context ","@@context full_name  full_name "," @context full_name  full_name "," @context full_name  "]}," Reek Context CodeContext num_methods":{"type":"method","name":"num_methods","children":[],"call":[]}," Reek Context CodeContext method_missing":{"type":"method","name":"method_missing","children":[],"call":["@context send "]}," Reek Context CodeContext matches?":{"type":"method","name":"matches?","children":[],"call":["(begin\n  (lvar :candidate)) =~ ","Regexp  quote ","candidate is_a? ","candidates any? "," full_name ","(begin\n  (lvar :Regexp  quote )) =~ ","Regexp  quote  is_a? ","Regexp  quote s any? "]}," Reek Context CodeContext each_node":{"type":"method","name":"each_node","children":[],"call":["@exp each_node "," exp each_node "," exp "]}," Reek Context CodeContext local_nodes":{"type":"method","name":"local_nodes","children":[],"call":[" each_node "," exp each_node "," exp "]}," Reek Context CodeContext name":{"type":"method","name":"name","children":[],"call":["@exp name "," exp name "," exp "]}," Reek Context CodeContext initialize":{"type":"method","name":"initialize","children":[],"call":["AST ObjectRefs  new ","StatementCounter  new ","VisibilityTracker  new "]}," Reek Configuration AppConfiguration for_smell_types":{"type":"method","name":"for_smell_types","children":[],"call":["NON_SMELL_TYPE_KEYS  include? ","@configuration reject "]}," Reek Configuration AppConfiguration exclude_paths":{"type":"method","name":"exclude_paths","children":[],"call":["path chomp ","@configuration fetch map ","@configuration fetch "]}," Reek CodeComment add_to_config":{"type":"method","name":"add_to_config","children":[],"call":[" config merge! ","YAML  load ","(send\n  (lvar :smell) :gsub\n  (regexp\n    (str \"(?:^|_)(.)\")\n    (regopt))) + ","1 upcase ","smell gsub "," config ","smell + "]}," Reek CodeComment descriptive?":{"type":"method","name":"descriptive?","children":[],"call":["@text split length >= ","@text split length ","@text split "," sanitized_comment split length >= "," sanitized_comment split length "," sanitized_comment split "," sanitized_comment "," text split length >= "," text split length "," text split "," text "]}," Reek CodeComment config":{"type":"method","name":"config","children":[],"call":["hash []= ","Hash  new "]}," Reek CodeComment initialize":{"type":"method","name":"initialize","children":[],"call":["(send\n  (lvar :text) :gsub\n  (const nil :CONFIG_REGEX)) gsub gsub strip ","(send\n  (lvar :text) :gsub\n  (const nil :CONFIG_REGEX)) gsub gsub ","(send\n  (lvar :text) :gsub\n  (const nil :CONFIG_REGEX)) gsub "," add_to_config ","text gsub ","@config merge! ","YAML  load ","smell_type + ","@original_comment scan ","hash []= ","Hash  new "," raise ","Smells SmellDetector  valid_detector? ","CodeCommentValidator  new validate ","CodeCommentValidator  new "," original_comment ","YAML  safe_load "," escalate_legacy_separator ","validator parsed_options ","validator validate ","CodeCommentValidator  new  parsed_options ","CodeCommentValidator  new  validate "]}," Reek CLI WarningCollector warnings":{"type":"method","name":"warnings","children":[],"call":["@warnings to_a sort ","@warnings to_a "," warnings_set sort "," warnings_set "," warnings_set to_a sort "," warnings_set to_a "]}," Reek CLI WarningCollector found_smell":{"type":"method","name":"found_smell","children":[],"call":["@warnings add "," warnings_set add "," warnings_set "]}," Reek CLI WarningCollector initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new "]}," Reek AST SexpFormatter format":{"type":"method","name":"format","children":[],"call":[]}," Reek AST SexpExtensions SuperNode method_name":{"type":"method","name":"method_name","children":[],"call":[]}," Reek AST SexpExtensions YieldNode arg_names":{"type":"method","name":"arg_names","children":[],"call":["arg [] "," args map "," args "]}," Reek AST SexpExtensions YieldNode args":{"type":"method","name":"args","children":[],"call":[" [] "," children "]}," Reek AST SexpExtensions ClassNode superclass":{"type":"method","name":"superclass","children":[],"call":[" [] "," children [] "," children "]}," Reek AST SexpExtensions ModuleNode text_name":{"type":"method","name":"text_name","children":[],"call":["SexpFormatter  format "," name "]}," Reek AST SexpExtensions ModuleNode full_name":{"type":"method","name":"full_name","children":[],"call":[" text_name ","outer == "]}," Reek AST SexpExtensions ModuleNode simple_name":{"type":"method","name":"simple_name","children":[],"call":[" name "," name simple_name "," name is_a? "]}," Reek AST SexpExtensions ModuleNode name":{"type":"method","name":"name","children":[],"call":[" [] ","SexpFormatter  format "," children first "," children "]}," Reek AST SexpExtensions ConstNode simple_name":{"type":"method","name":"simple_name","children":[],"call":[" children last "," children "]}," Reek AST SexpExtensions LitNode value":{"type":"method","name":"value","children":[],"call":[" [] "," children first "," children "]}," Reek AST SexpExtensions BlockNode parameter_names":{"type":"method","name":"parameter_names","children":[],"call":[" parameters [] to_a "," parameters [] "," parameters "," parameters children "]}," Reek AST SexpExtensions BlockNode parameters":{"type":"method","name":"parameters","children":[],"call":[" [] "," children [] "," children "]}," Reek AST SexpExtensions BlockNode block":{"type":"method","name":"block","children":[],"call":[" [] "," children [] "," children "]}," Reek AST SexpExtensions BlockNode args":{"type":"method","name":"args","children":[],"call":[" [] "," children [] "," children "]}," Reek AST SexpExtensions BlockNode call":{"type":"method","name":"call","children":[],"call":[" [] "," children first "," children "]}," Reek AST SexpExtensions IfNode body_nodes":{"type":"method","name":"body_nodes","children":[],"call":["child find_nodes "," children [] compact flat_map "," children [] compact "," children [] "," children ","child each_node to_a ","child each_node ","ignoring include? ","child type ","ignoring | "]}," Reek AST SexpExtensions IfNode condition":{"type":"method","name":"condition","children":[],"call":[" [] "," children first "," children "]}," Reek AST SexpExtensions DefsNode depends_on_instance?":{"type":"method","name":"depends_on_instance?","children":[],"call":[]}," Reek AST SexpExtensions DefsNode full_name":{"type":"method","name":"full_name","children":[],"call":[" name ","SexpFormatter  format "," receiver ","outer == "," receiver name "]}," Reek AST SexpExtensions DefsNode body":{"type":"method","name":"body","children":[],"call":[" [] "," children [] "," children "]}," Reek AST SexpExtensions DefsNode argslist":{"type":"method","name":"argslist","children":[],"call":[" [] "," children [] "," children "]}," Reek AST SexpExtensions DefsNode name":{"type":"method","name":"name","children":[],"call":[" [] "," children [] "," children "]}," Reek AST SexpExtensions DefsNode receiver":{"type":"method","name":"receiver","children":[],"call":[" [] "," children first "," children "]}," Reek AST SexpExtensions DefNode singleton_method?":{"type":"method","name":"singleton_method?","children":[],"call":[" parent type == "," parent type "," parent "]}," Reek AST SexpExtensions DefNode depends_on_instance?":{"type":"method","name":"depends_on_instance?","children":[],"call":["ReferenceCollector  new num_refs_to_self > ","ReferenceCollector  new num_refs_to_self ","ReferenceCollector  new ","ReferenceCollector  new num_refs_to_self positive? "]}," Reek AST SexpExtensions DefNode full_name":{"type":"method","name":"full_name","children":[],"call":[" name ","outer == ","(lvar :outer) reject join ","(lvar :outer) reject "]}," Reek AST SexpExtensions DefNode body":{"type":"method","name":"body","children":[],"call":[" [] "," children [] "," children "]}," Reek AST SexpExtensions DefNode argslist":{"type":"method","name":"argslist","children":[],"call":[" [] "," children [] "," children "]}," Reek AST SexpExtensions DefNode name":{"type":"method","name":"name","children":[],"call":[" [] "," children first "," children "]}," Reek AST SexpExtensions MethodNodeBase body_nodes":{"type":"method","name":"body_nodes","children":[],"call":[" body find_nodes "," body "," body each_node ","ignoring | ","ignoring include? "," body type "]}," Reek AST SexpExtensions MethodNodeBase ends_with_bang?":{"type":"method","name":"ends_with_bang?","children":[],"call":[" name [] == "," name [] "," name "]}," Reek AST SexpExtensions MethodNodeBase name_without_bang":{"type":"method","name":"name_without_bang","children":[],"call":[" name to_s chop "," name to_s "," name "]}," Reek AST SexpExtensions MethodNodeBase parameter_names":{"type":"method","name":"parameter_names","children":[],"call":[" parameters map "," parameters "]}," Reek AST SexpExtensions MethodNodeBase parameters":{"type":"method","name":"parameters","children":[],"call":[" argslist components "," argslist "]}," Reek AST SexpExtensions MethodNodeBase arg_names":{"type":"method","name":"arg_names","children":[],"call":[" arguments map "," arguments "]}," Reek AST SexpExtensions MethodNodeBase arguments":{"type":"method","name":"arguments","children":[],"call":[" parameters reject "," parameters "]}," Reek AST SexpExtensions LvarNode var_name":{"type":"method","name":"var_name","children":[],"call":[" [] "]}," Reek AST SexpExtensions VariableBase name":{"type":"method","name":"name","children":[],"call":[" [] "," children first "," children "]}," Reek AST SexpExtensions SendNode arg_names":{"type":"method","name":"arg_names","children":[],"call":["arg [] "," args map "," args ","arg children first ","arg children "]}," Reek AST SexpExtensions SendNode participants":{"type":"method","name":"participants","children":[],"call":["(send\n  (array\n    (send nil :receiver)) :+\n  (send nil :args)) compact ","(send nil :receiver) + "," args "," receiver "]}," Reek AST SexpExtensions SendNode args":{"type":"method","name":"args","children":[],"call":[" [] "," children [] "," children "]}," Reek AST SexpExtensions SendNode method_name":{"type":"method","name":"method_name","children":[],"call":[" [] "," children [] "," children "]}," Reek AST SexpExtensions SendNode receiver":{"type":"method","name":"receiver","children":[],"call":[" [] "," children first "," children "]}," Reek AST SexpExtensions WhenNode body":{"type":"method","name":"body","children":[],"call":[" children last "," children "]}," Reek AST SexpExtensions WhenNode condition_list":{"type":"method","name":"condition_list","children":[],"call":[" children [] "," children "]}," Reek AST SexpExtensions CaseNode else_body":{"type":"method","name":"else_body","children":[],"call":[" children last "," children "]}," Reek AST SexpExtensions CaseNode body_nodes":{"type":"method","name":"body_nodes","children":[],"call":["child find_nodes "," children [] compact flat_map "," children [] compact "," children [] "," children ","child each_node to_a ","child each_node ","ignoring | "]}," Reek AST SexpExtensions CaseNode condition":{"type":"method","name":"condition","children":[],"call":[" [] "," children first "," children "]}," Reek AST SexpExtensions AttrasgnNode args":{"type":"method","name":"args","children":[],"call":[" [] "," children [] "," children "]}," Reek AST SexpExtensions LogicOperatorBase body_nodes":{"type":"method","name":"body_nodes","children":[],"call":[" [] find_nodes "," [] "," children [] find_nodes "," children [] "," children "," children [] each_node ","ignoring | "]}," Reek AST SexpExtensions LogicOperatorBase condition":{"type":"method","name":"condition","children":[],"call":[" [] "," children first "," children "]}," Reek AST SexpExtensions NestedAssignables components":{"type":"method","name":"components","children":[],"call":[" children flat_map "," children "]}," Reek AST SexpExtensions KwrestargNode anonymous_splat?":{"type":"method","name":"anonymous_splat?","children":[],"call":[" name ! "," name "]}," Reek AST SexpExtensions RestargNode anonymous_splat?":{"type":"method","name":"anonymous_splat?","children":[],"call":[" name ! "," name "]}," Reek AST SexpExtensions BlockargNode block?":{"type":"method","name":"block?","children":[],"call":[]}," Reek AST SexpExtensions KwoptargNode optional_argument?":{"type":"method","name":"optional_argument?","children":[],"call":[]}," Reek AST SexpExtensions OptargNode optional_argument?":{"type":"method","name":"optional_argument?","children":[],"call":[]}," Reek AST SexpExtensions ArgNodeBase components":{"type":"method","name":"components","children":[],"call":[]}," Reek AST SexpExtensions ArgNodeBase anonymous_splat?":{"type":"method","name":"anonymous_splat?","children":[],"call":[]}," Reek AST SexpExtensions ArgNodeBase optional_argument?":{"type":"method","name":"optional_argument?","children":[],"call":[]}," Reek AST SexpExtensions ArgNodeBase block?":{"type":"method","name":"block?","children":[],"call":[]}," Reek AST SexpExtensions ArgNodeBase plain_name":{"type":"method","name":"plain_name","children":[],"call":[" name to_s "," name "]}," Reek AST SexpExtensions ArgNodeBase marked_unused?":{"type":"method","name":"marked_unused?","children":[],"call":[" plain_name start_with? "," plain_name "]}," Reek AST SexpExtensions ArgNodeBase ==":{"type":"method","name":"==","children":[],"call":[" name == "," name "]}," Reek AST SexpExtensions ArgNodeBase name":{"type":"method","name":"name","children":[],"call":[" children first "," children "]}," Reek AST ReferenceCollector implicit_self_calls":{"type":"method","name":"implicit_self_calls","children":[],"call":["@ast each_node reject ","@ast each_node "," ast each_node reject "," ast each_node "," ast "]}," Reek AST ReferenceCollector explicit_self_calls":{"type":"method","name":"explicit_self_calls","children":[],"call":["@ast each_node ","(sym :self) flat_map "," ast each_node "," ast "]}," Reek AST ReferenceCollector num_refs_to_self":{"type":"method","name":"num_refs_to_self","children":[],"call":["(send\n  (send nil :explicit_self_calls) :+\n  (send nil :implicit_self_calls)) size "," explicit_self_calls + "," implicit_self_calls "," explicit_self_calls ","(send\n  (send\n    (send nil :explicit_self_calls) :to_a) :+\n  (send\n    (send nil :implicit_self_calls) :to_a)) size "," explicit_self_calls to_a + "," implicit_self_calls to_a "," explicit_self_calls to_a "]}," Reek AST ReferenceCollector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek AST ObjectRefs self_is_max?":{"type":"method","name":"self_is_max?","children":[],"call":["@refs [] == "," max_refs ","@refs [] "," max_keys length == "," max_keys length "," max_keys "," most_popular keys include? "," most_popular keys "," most_popular ","@refs empty? "," refs empty? "," refs "," most_popular key? "]}," Reek AST ObjectRefs max_keys":{"type":"method","name":"max_keys","children":[],"call":["val == ","@refs select "," max_refs ","  max_refs _refs "]}," Reek AST ObjectRefs max_refs":{"type":"method","name":"max_refs","children":[],"call":["@refs values max ","@refs values "]}," Reek AST ObjectRefs references_to":{"type":"method","name":"references_to","children":[],"call":["@refs [] "," refs [] "," refs "]}," Reek AST ObjectRefs record_reference_to":{"type":"method","name":"record_reference_to","children":[],"call":["@refs [] ","@refs [] << ","ObjectRef  new "," refs [] << "," refs [] "," refs "]}," Reek AST ObjectRefs initialize":{"type":"method","name":"initialize","children":[],"call":["Hash  new ","refs []= "]}," Reek AST Node elements":{"type":"method","name":"elements","children":[],"call":[" children "," type "]}," Reek AST Node each_sexp":{"type":"method","name":"each_sexp","children":[],"call":["elem is_a? "," children each "," children "]}," Reek AST Node look_for_types":{"type":"method","name":"look_for_types","children":[],"call":["elem look_for_types "," each_sexp ","blk call ","target_types include? "," type ","ignoring include? "]}," Reek AST Node look_for_type":{"type":"method","name":"look_for_type","children":[],"call":["blk call "," type == "," type ","elem look_for_type ","ignoring include? ","elem type "," each_sexp "]}," Reek AST Node format_to_ruby":{"type":"method","name":"format_to_ruby","children":[],"call":["SexpFormatter  format "," to_s ","(send\n  (lvar :lines) :first) join ","lines last ","lines first ","lines join ","lines length "," location expression source split map "," location expression source split "," location expression source "," location expression "," location ","(send\n  (lvar : location expression source split map ) :first) join "," location expression source split map  last "," location expression source split map  first "," location expression source split map  join "," location expression source split map  length "]}," Reek AST Node contains_nested_node?":{"type":"method","name":"contains_nested_node?","children":[],"call":[" look_for_type "," each_node any? "," each_node "]}," Reek AST Node find_nodes":{"type":"method","name":"find_nodes","children":[],"call":["result << "," look_for_types "]}," Reek AST Node each_node":{"type":"method","name":"each_node","children":[],"call":["result << "," look_for_type "," block_given? "," look_for "," Array "," enum_for "]}," Reek AST Node first":{"type":"method","name":"first","children":[],"call":[" type "]}," Reek AST Node line":{"type":"method","name":"line","children":[],"call":[" loc line "," loc "," loc nil? "]}," Reek AST Node []":{"type":"method","name":"[]","children":[],"call":[" elements [] "," elements "]}," Reek AST Node leading_comment":{"type":"method","name":"leading_comment","children":[],"call":["comment_lines map join ","comment_lines map ","comment location line < ","comment location line ","comment location ","@comments select "," location line "," location "," comments select "," comments ","comment_ location line s map join ","comment_ location line s map ","comment location  location line  < ","comment location  location line  "," location  location line  "]}," Reek AST Node full_comment":{"type":"method","name":"full_comment","children":[],"call":["@comments map join ","@comments map "," comments map join "," comments map "," comments "]}," Reek AST Node initialize":{"type":"method","name":"initialize","children":[],"call":["options fetch "]}," Reek AST ASTNodeClassMap extension_map":{"type":"method","name":"extension_map","children":[],"call":["Hash  [] ","SexpExtensions  const_get ","const to_s sub downcase to_sym ","const to_s sub downcase ","const to_s sub ","const to_s ","SexpExtensions  constants map ","SexpExtensions  constants ","assoc to_h "]}," Reek AST ASTNodeClassMap klass_for":{"type":"method","name":"klass_for","children":[],"call":["klass send "," extension_map [] "," extension_map ","Class  new tap ","Class  new ","@klass_map [] "," klass_map [] "," klass_map ","  extension_map [] _map [] ","  extension_map [] _map "]}," Reek AST ASTNodeClassMap initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Source SourceLocator hidden_directory?":{"type":"method","name":"hidden_directory?","children":[],"call":["pathname basename to_s start_with? ","pathname basename to_s ","pathname basename ","path basename to_s start_with? ","path basename to_s ","path basename "]}," Reek Source SourceLocator ruby_file?":{"type":"method","name":"ruby_file?","children":[],"call":["pathname to_s end_with? ","pathname to_s ","pathname extname == ","pathname extname ","path extname == ","path extname "]}," Reek Source SourceLocator ignore_path?":{"type":"method","name":"ignore_path?","children":[],"call":[" hidden_directory? "," path_excluded? "]}," Reek Source SourceLocator path_excluded?":{"type":"method","name":"path_excluded?","children":[],"call":["Configuration AppConfiguration  exclude_paths include? ","pathname to_s ","Configuration AppConfiguration  exclude_paths "," configuration exclude_paths include? "," configuration exclude_paths "," configuration "," configuration path_excluded? "]}," Reek Source SourceLocator current_directory?":{"type":"method","name":"current_directory?","children":[],"call":["(str \".\") include? ","pathname to_s ","(send\n  (const nil :Pathname) :new\n  (str \".\")) include? ","Pathname  new "]}," Reek Report warning_formatter_class":{"type":"method","name":"warning_formatter_class","children":[],"call":[" raise ","WARNING_FORMATTER_CLASSES  fetch "]}," Reek Report heading_formatter":{"type":"method","name":"heading_formatter","children":[],"call":[" raise ","HEADING_FORMATTERS  fetch "]}," Reek Report location_formatter":{"type":"method","name":"location_formatter","children":[],"call":[" raise ","LOCATION_FORMATTERS  fetch "]}," Reek Report report_class":{"type":"method","name":"report_class","children":[],"call":[" raise ","REPORT_CLASSES  fetch "]}," Reek Report HeadingFormatter Base show_header?":{"type":"method","name":"show_header?","children":[],"call":[" raise "]}," Reek Context ModuleContext namespace_module?":{"type":"method","name":"namespace_module?","children":[],"call":["contents find_nodes empty? ","contents find_nodes "," exp children last "," exp children "," exp "," exp type == "," exp type ","(sym :casgn) include? ","child type ","children all? ","children any? "," exp direct_children ","CONSTANT_SEXP_TYPES  include? "," exp children last  find_nodes empty? "," exp children last  find_nodes "," exp  exp direct_children  last "," exp  exp direct_children  "," exp direct_children  all? "," exp direct_children  any? "," exp direct_ exp direct_children  "]}," Reek CLI OptionInterpreter warning_formatter_class":{"type":"method","name":"warning_formatter_class","children":[],"call":["Report  warning_formatter_class ","@options show_links "," options show_links "," options "]}," Reek AST SexpExtensions SingletonMethod module_function_calls":{"type":"method","name":"module_function_calls","children":[],"call":["elem children [] == ","elem children [] ","elem children ","elem type == ","elem type ","elem is_a? ","parent children select ","parent children "]}," Reek AST SexpExtensions SingletonMethod singleton_method_via_class_self_notation?":{"type":"method","name":"singleton_method_via_class_self_notation?","children":[],"call":[" parent type == "," parent type "," parent "]}," Reek AST SexpExtensions SingletonMethod singleton_method_via_module_function?":{"type":"method","name":"singleton_method_via_module_function?","children":[],"call":["method_names include? "," name ","node children last ","node children ","method_name_nodes map ","module_function_call children [] ","module_function_call children "," module_function_calls any? "," module_function_calls "," parent ","module_function_call children []  map "]}," Reek AST SexpExtensions SingletonMethod singleton_method?":{"type":"method","name":"singleton_method?","children":[],"call":[" singleton_method_via_module_function? "," singleton_method_via_class_self_notation? "]}," Reek AST ObjectRefs most_popular":{"type":"method","name":"most_popular","children":[],"call":["refs size == ","refs size ","@refs select ","@refs values map max ","@refs values map ","@refs values "," refs select "," refs "," refs values map max "," refs values map "," refs values ","@refs values map @refs values map max  ","@refs values map  refs values map max  "," refs values map @refs values map max  "," refs values map  refs values map max  "]}," Reek TreeWalker visibility_modifier?":{"type":"method","name":"visibility_modifier?","children":[],"call":["VISIBILITY_MODIFIERS  include? ","call_node method_name "]}," Reek TreeWalker process_attrasgn":{"type":"method","name":"process_attrasgn","children":[],"call":[" process_default ","@element record_call_to "," element record_call_to "," element "]}," Reek TreeWalker process_casgn":{"type":"method","name":"process_casgn","children":[],"call":[" process_default "," process_module ","exp defines_module? "]}," Reek TreeWalker walk":{"type":"method","name":"walk","children":[],"call":["@smell_repository examine ","@result each "," process "," smell_repository examine "," smell_repository "," result each "," result "," context_tree each "," context_tree "]}," Reek Smells SmellRepository detectors":{"type":"method","name":"detectors","children":[],"call":["@detectors []= ","klass new "," source_via "," smell_types each "," smell_types ","(send\n  (send nil :smell_types) :map) reduce "," smell_types map "," source_configuration_for "]}," Reek Context RootContext type":{"type":"method","name":"type","children":[],"call":[]}," Reek Context MethodContext singleton_method?":{"type":"method","name":"singleton_method?","children":[],"call":[" visibility == "," visibility "," exp singleton_method? "," exp "]}," Reek Context MethodContext default_assignments":{"type":"method","name":"default_assignments","children":[],"call":[" exp parameters select map "," exp parameters select "," exp parameters "," exp "]}," Reek Context CodeContext tracked_visibility":{"type":"method","name":"tracked_visibility","children":[],"call":[]}," Reek Context CodeContext each":{"type":"method","name":"each","children":[],"call":["child each ","@children each "," children each "," children "," enum_for "," block_given? "]}," Reek Context CodeContext type":{"type":"method","name":"type","children":[],"call":["@exp type "," exp type "," exp "]}," Reek Context CodeContext track_visibility":{"type":"method","name":"track_visibility","children":[],"call":["child visibility= ","names include? ","child name ","@children each ","names any? "," tracked_visibility= "," children each "," children "," visibility_tracker track_visibility "," visibility_tracker "]}," Reek Context CodeContext record_use_of_self":{"type":"method","name":"record_use_of_self","children":[],"call":["@refs record_reference_to "," refs record_reference "," refs "," refs record_reference_to "]}," Reek Context CodeContext record_call_to":{"type":"method","name":"record_call_to","children":[],"call":["@refs record_reference_to ","exp line ","receiver name ","exp object_creation_call? ","receiver type ","exp receiver "," refs record_reference "," refs "," refs record_reference_to ","exp exp line  ","exp receiver  name ","receiver receiver type  ","exp receiver  type ","exp exp receiver  "]}," Reek Context CodeContext count_statements":{"type":"method","name":"count_statements","children":[],"call":[" num_statements "]}," Reek Context CodeContext append_child_context":{"type":"method","name":"append_child_context","children":[],"call":["@children << ","child visibility= "," tracked_visibility "," children << "," children "," visibility_tracker set_child_visibility "," visibility_tracker "]}," Reek Configuration ConfigurationFileFinder load_from_file":{"type":"method","name":"load_from_file","children":[],"call":[" raise ","configuration is_a? ","YAML  load_file ","ConfigurationConverter  new convert ","ConfigurationConverter  new ","SchemaValidator  new validate ","SchemaValidator  new "]}," Reek Configuration ConfigurationFileFinder find_and_load":{"type":"method","name":"find_and_load","children":[],"call":[" load_from_file "," find "]}," Reek Configuration AppConfiguration validate_directive":{"type":"method","name":"validate_directive","children":[],"call":[" abort "," error_message_for_file_given ","pathname directory? "," error_message_for_missing_directory ","pathname exist? "]}," Reek Configuration AppConfiguration error_message_for_file_given":{"type":"method","name":"error_message_for_file_given","children":[],"call":[]}," Reek Configuration AppConfiguration error_message_for_missing_directory":{"type":"method","name":"error_message_for_missing_directory","children":[],"call":[]}," Reek Configuration AppConfiguration error_message_for_invalid_smell_type":{"type":"method","name":"error_message_for_invalid_smell_type","children":[],"call":[]}," Reek Configuration AppConfiguration smell_type?":{"type":"method","name":"smell_type?","children":[],"call":["Reek Smells  const_get "]}," Reek Configuration AppConfiguration best_directory_match_for":{"type":"method","name":"best_directory_match_for","children":[],"call":["pathname to_s length ","pathname to_s ","(send\n  (send\n    (send nil :directory_directives) :keys) :select) max_by ","source_base_dir to_s =~ ","source_base_dir to_s "," directory_directives keys select "," directory_directives keys "," directory_directives "]}," Reek Configuration AppConfiguration handle_directory_directive":{"type":"method","name":"handle_directory_directive","children":[],"call":[" directory_directives []= ","hash []= ","Reek Smells  const_get "," abort "," error_message_for_invalid_smell_type "," smell_type? ","config each_with_object "," directory_directives "," validate_directive ","Pathname  new ","path chomp "]}," Reek Configuration AppConfiguration handle_default_directive":{"type":"method","name":"handle_default_directive","children":[],"call":[" default_directive []= "," default_directive ","Reek Smells  const_get "]}," Reek Configuration AppConfiguration handle_exclude_paths":{"type":"method","name":"handle_exclude_paths","children":[],"call":[" exclude_paths= "," raise ","pathname exist? ","Pathname  new ","path chomp ","paths map ","Pathname  new  exist? "]}," Reek Configuration AppConfiguration load":{"type":"method","name":"load","children":[],"call":[" handle_directory_directive "," handle_default_directive "," smell_type? "," handle_exclude_paths ","key == ","configuration_file each ","ConfigurationFileFinder  find_and_load ","ConfigurationFileFinder  find_and_load  each "]}," Reek Configuration AppConfiguration directory_directive_for_source":{"type":"method","name":"directory_directive_for_source","children":[],"call":[" directory_directives [] "," directory_directives "," best_directory_match_for ","Pathname  new dirname ","Pathname  new "]}," Reek Configuration AppConfiguration directive_for":{"type":"method","name":"directive_for","children":[],"call":[" default_directive "," directory_directive_for_source "," default_directive merge "," directory_directives directive_for "," directory_directives "]}," Reek Configuration AppConfiguration initialize":{"type":"method","name":"initialize","children":[],"call":[" load "," exclude_paths= "," default_directive= "," directory_directives= "," load_values "]}," Reek AST SexpExtensions CasgnNode value":{"type":"method","name":"value","children":[],"call":[" children last "," children "," children [] "]}," Reek AST SexpExtensions CasgnNode name":{"type":"method","name":"name","children":[],"call":["SexpFormatter  format "," children [] "," children "," children [] to_s "]}," Reek AST SexpExtensions CasgnNode defines_module?":{"type":"method","name":"defines_module?","children":[],"call":["MODULE_DEFINERS  include? ","call receiver simple_name ","call receiver ","call object_creation_call? "," value "," value call "," value type ","call module_creation_call? "," value nil? "," constant_definition "," constant_definition  receiver simple_name "," constant_definition  receiver "," constant_definition  object_creation_ constant_definition ? "," value  constant_definition  "," constant_definition  module_creation_ constant_definition ? "]}," Reek AST SexpExtensions ModuleNodeBase simple_name":{"type":"method","name":"simple_name","children":[],"call":[" name split last "," name split "," name "]}," Reek AST SexpExtensions ModuleNodeBase full_name":{"type":"method","name":"full_name","children":[],"call":[" name ","outer == ","(lvar :outer) reject join ","(lvar :outer) reject "]}," Reek AST SexpExtensions SendNode object_creation_call?":{"type":"method","name":"object_creation_call?","children":[],"call":[" method_name == "," method_name "," name == "," name "]}," Reek Spec SmellMatcher common_attributes_equal?":{"type":"method","name":"common_attributes_equal?","children":[],"call":[" smell_warning send == "," smell_warning send "," smell_warning ","attributes all? "]}," Reek Spec SmellMatcher common_parameters_equal?":{"type":"method","name":"common_parameters_equal?","children":[],"call":[" smell_warning parameters slice == "," smell_warning parameters slice ","other_parameters keys "," smell_warning parameters "," smell_warning "," smell_warning parameters values_at == ","other_parameters values "," smell_warning parameters values_at "]}," Reek Spec SmellMatcher check_attributes_comparability":{"type":"method","name":"check_attributes_comparability","children":[],"call":[" raise ","extra_keys first ","extra_keys empty? ","parameter_keys - "," smell_warning parameters keys "," smell_warning parameters "," smell_warning ","other_attributes keys - ","other_attributes keys ","parameter_keys -  first ","parameter_keys -  empty? ","other_attributes keys -  - "]}," Reek Spec SmellMatcher smell_classes":{"type":"method","name":"smell_classes","children":[],"call":[" smell_warning smell_type "," smell_warning "," smell_warning smell_category "]}," Reek Spec SmellMatcher matches_attributes?":{"type":"method","name":"matches_attributes?","children":[],"call":[" common_attributes_equal? "," common_parameters_equal? ","Hash  [] ","(send\n  (lvar :attributes) :partition) map ","COMPARABLE_ATTRIBUTES  include? ","attributes partition "," check_attributes_comparability "]}," Reek Spec SmellMatcher matches_smell_type?":{"type":"method","name":"matches_smell_type?","children":[],"call":[" smell_classes include? ","klass to_s "," smell_classes "," smell_warning smell_type == "," smell_warning smell_type "," smell_warning "]}," Reek Spec SmellMatcher matches?":{"type":"method","name":"matches?","children":[],"call":[" matches_attributes? "," matches_smell_type? "]}," Reek Spec SmellMatcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Spec ShouldReekOf origin":{"type":"method","name":"origin","children":[],"call":[" examiner description "," examiner "," examiner origin "]}," Reek Spec ShouldReekOf set_failure_messages_for_smell_details":{"type":"method","name":"set_failure_messages_for_smell_details","children":[],"call":[" failure_message_when_negated= "," smell_details "," smell_category "," origin "," failure_message= "," smell_type "," all_relevant_smell_details_formatted "," matching_smell_types count "," matching_smell_types "]}," Reek Spec ShouldReekOf set_failure_messages_for_smell_type":{"type":"method","name":"set_failure_messages_for_smell_type","children":[],"call":[" failure_message_when_negated= "," smell_category "," origin "," failure_message= "," smell_type "]}," Reek Spec ShouldReekOf matching_smell_details?":{"type":"method","name":"matching_smell_details?","children":[],"call":["warning matches_attributes? "," smell_details "," matching_smell_types any? "," matching_smell_types ","warning matches_smell_details? "]}," Reek Spec ShouldReekOf matching_smell_types?":{"type":"method","name":"matching_smell_types?","children":[],"call":[" matching_smell_types any? "," matching_smell_types "]}," Reek Spec ShouldReekOf smell_matchers":{"type":"method","name":"smell_matchers","children":[],"call":["SmellMatcher  new "," examiner smells map "," examiner smells "," examiner "]}," Reek Spec ShouldReekOf matching_smell_types":{"type":"method","name":"matching_smell_types","children":[],"call":["it matches_smell_type? "," smell_category "," smell_matchers select "," smell_matchers ","warning matches_smell_type? "," examiner smells select "," examiner smells "," examiner "," smell_type ","SmellMatcher  new "," examiner smells map "]}," Reek Spec ShouldReekOf set_failure_messages":{"type":"method","name":"set_failure_messages","children":[],"call":[" set_failure_messages_for_smell_details "," matching_smell_details? ! "," matching_smell_details? "," matching_smell_types? "," set_failure_messages_for_smell_type "]}," Reek Smells UtilityFunction ignore_method?":{"type":"method","name":"ignore_method?","children":[],"call":[" value ","method_ctx non_public_visibility? "]}," Reek Smells UtilityFunction inspect":{"type":"method","name":"inspect","children":[],"call":[" smell_warning ","ctx full_name ","ctx exp line ","ctx exp "," ignore_method? "," num_helper_methods zero? "," num_helper_methods ","ctx references_self? ","ctx module_function? ","ctx singleton_method? ","ctx num_statements == ","ctx num_statements ","ctx number_of_statements == ","ctx number_of_statements "]}," Reek Smells UnusedPrivateMethod ignore_method?":{"type":"method","name":"ignore_method?","children":[],"call":["method name [] ","method name ","ignore_methods any? "," value ","full_name [] ","method parent full_name ","method parent ","ignore_contexts any? "," value  any? "]}," Reek Smells UnusedPrivateMethod unused_private_methods":{"type":"method","name":"unused_private_methods","children":[],"call":["called_method_names include? ! ","called_method_names include? ","defined_method name ","defined_private_methods select ","ctx instance_method_calls map ","ctx instance_method_calls ","ctx defined_instance_methods ","ctx instance_method_calls map  include? ! ","ctx instance_method_calls map  include? ","ctx defined_instance_methods  select "]}," Reek Smells UnusedPrivateMethod hits":{"type":"method","name":"hits","children":[],"call":["(send\n  (send nil :unused_private_methods\n    (lvar :ctx)) :map) compact ","Hit  new "," ignore_method? "," unused_private_methods map "," unused_private_methods "]}," Reek Smells UnusedPrivateMethod inspect":{"type":"method","name":"inspect","children":[],"call":[" smell_warning ","hit line ","hit name "," hits map "," hits ","hit hit name  "]}," Reek Smells UnusedPrivateMethod contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek Smells UnusedPrivateMethod Hit initialize":{"type":"method","name":"initialize","children":[],"call":["context exp line ","context exp ","context name "]}," Reek Smells UnusedParameters inspect":{"type":"method","name":"inspect","children":[],"call":[" smell_warning ","ctx exp line ","ctx exp ","param name to_s ","param name ","ctx unused_params map ","ctx unused_params ","ctx uses_super_with_implicit_arguments? ","param param name to_s  to_s ","param param name to_s  "]}," Reek Smells UncommunicativeVariableName inspect":{"type":"method","name":"inspect","children":[],"call":[" smell_warning ","name to_s ","(send\n  (send nil :variable_names\n    (send\n      (lvar :ctx) :exp)) :select) map "," bad_name? "," variable_names select "," variable_names ","ctx exp "," accept_names= "," value "," reject_names= "]}," Reek Smells UncommunicativeParameterName sanitize":{"type":"method","name":"sanitize","children":[],"call":["name to_s gsub ","name to_s "]}," Reek Smells UncommunicativeParameterName accept_names":{"type":"method","name":"accept_names","children":[],"call":[" value "]}," Reek Smells UncommunicativeParameterName reject_patterns":{"type":"method","name":"reject_patterns","children":[],"call":[" value "," Array "]}," Reek Smells UncommunicativeParameterName acceptable_name?":{"type":"method","name":"acceptable_name?","children":[],"call":["name match "," reject_patterns none? "," reject_patterns ","name == "," accept_names any? "," accept_names "," accept_patterns any? "," accept_patterns "]}," Reek Smells UncommunicativeParameterName uncommunicative_parameter_name?":{"type":"method","name":"uncommunicative_parameter_name?","children":[],"call":["context uses_param? "," acceptable_name? ! "," acceptable_name? "]}," Reek Smells UncommunicativeParameterName inspect":{"type":"method","name":"inspect","children":[],"call":[" smell_warning ","name to_s ","expression line ","(send\n  (send\n    (lvar :expression) :parameter_names) :select) map "," uncommunicative_parameter_name? "," sanitize ","expression parameter_names select ","expression parameter_names ","context exp ","context exp  line ","(send\n  (send\n    (lvar :context exp ) :parameter_names) :select) map ","context exp  parameter_names select ","context exp  parameter_names "]}," Reek Smells UncommunicativeModuleName accept_names":{"type":"method","name":"accept_names","children":[],"call":[" value "]}," Reek Smells UncommunicativeModuleName reject_patterns":{"type":"method","name":"reject_patterns","children":[],"call":[" value "," Array "]}," Reek Smells UncommunicativeModuleName acceptable_name?":{"type":"method","name":"acceptable_name?","children":[],"call":["module_name match "," reject_patterns none? "," reject_patterns ","fully_qualified_name == "," accept_names any? "," accept_names ","fully_qualified_name match "," accept_patterns any? "," accept_patterns "]}," Reek Smells UncommunicativeModuleName inspect":{"type":"method","name":"inspect","children":[],"call":[" smell_warning ","exp line "," acceptable_name? ","exp simple_name ","context exp ","context full_name ","context exp  line ","context exp  simple_name ","context context exp  "]}," Reek Smells UncommunicativeMethodName accept_names":{"type":"method","name":"accept_names","children":[],"call":[" value "]}," Reek Smells UncommunicativeMethodName reject_patterns":{"type":"method","name":"reject_patterns","children":[],"call":[" value "," Array "]}," Reek Smells UncommunicativeMethodName acceptable_name?":{"type":"method","name":"acceptable_name?","children":[],"call":["name match "," reject_patterns none? "," reject_patterns ","name == "," accept_names any? "," accept_names "," accept_patterns any? "," accept_patterns "]}," Reek Smells UncommunicativeMethodName inspect":{"type":"method","name":"inspect","children":[],"call":[" smell_warning ","context exp line ","context exp "," acceptable_name? ","context name to_s ","context name "," acceptable_context name to_s ? ","context context name to_s  to_s ","context context name to_s  "]}," Reek Smells TooManyStatements inspect":{"type":"method","name":"inspect","children":[],"call":[" smell_warning ","ctx exp line ","ctx exp ","count <= ","ctx number_of_statements "," value ","ctx num_statements ","ctx number_of_statements  <= ","ctx num_statements  <= "]}," Reek Smells TooManyMethods inspect":{"type":"method","name":"inspect","children":[],"call":[" smell_warning ","ctx exp line ","ctx exp ","actual <= ","ctx node_instance_methods length ","ctx node_instance_methods "," value ","ctx node_instance_methods length  <= "]}," Reek Smells TooManyInstanceVariables inspect":{"type":"method","name":"inspect","children":[],"call":[" smell_warning ","ctx exp line ","ctx exp ","count <= ","(send\n  (send\n    (lvar :ctx) :local_nodes\n    (sym :ivasgn)) :map) uniq length ","(send\n  (send\n    (lvar :ctx) :local_nodes\n    (sym :ivasgn)) :map) uniq ","ivasgn children first ","ivasgn children ","ctx local_nodes map ","ctx local_nodes "," value ","(send\n  (send\n    (lvar :ctx) :local_nodes\n    (sym :ivasgn)) :map) uniq length  <= "]}," Reek Smells SmellWarning base_message":{"type":"method","name":"base_message","children":[],"call":[" message "," context "," smell_type "]}," Reek Smells SmellRepository enabled_detectors":{"type":"method","name":"enabled_detectors","children":[],"call":["detector config enabled? ","detector config "," detectors select "," detectors "]}," Reek Smells SmellRepository smell_detectors_for":{"type":"method","name":"smell_detectors_for","children":[],"call":["detector contexts include? ","detector contexts "," enabled_detectors select "," enabled_detectors "]}," Reek Smells SmellRepository configuration_for":{"type":"method","name":"configuration_for","children":[],"call":[" configuration fetch "," configuration "]}," Reek Smells SmellRepository eligible_smell_types":{"type":"method","name":"eligible_smell_types","children":[],"call":[]}," Reek Smells SmellDetector smell_warning":{"type":"method","name":"smell_warning","children":[],"call":["SmellWarning  new ","options fetch ","context full_name ","exp loc expression source_buffer name ","exp loc expression source_buffer ","exp loc expression ","exp loc ","context exp ","exp source ","options fetch  full_name ","context exp  loc context exp ression source_buffer name ","context exp  loc context exp ression source_buffer ","context exp  loc context exp ression ","context exp  loc ","context context exp  ","options fetch  exp ","context exp  source "]}," Reek Smells SmellDetector run_for":{"type":"method","name":"run_for","children":[],"call":[" smells_found= "," smells_found + "," inspect "," smells_found "," exception? "," enabled_for? "," sniff "]}," Reek Smells SmellConfiguration merge":{"type":"method","name":"merge","children":[],"call":[" options merge! "," options "]}," Reek Smells RepeatedConditional inspect":{"type":"method","name":"inspect","children":[],"call":[" smell_warning ","key format_to_ruby ","lines length ","(send\n  (send nil :conditional_counts\n    (lvar :ctx)) :select) map ","lines length > "," conditional_counts select "," conditional_counts "," value "]}," Reek Smells PrimaDonnaMethod inspect":{"type":"method","name":"inspect","children":[],"call":["(send\n  (send\n    (lvar :ctx) :node_instance_methods) :map) compact "," check_for_smells ","ctx node_instance_methods map ","ctx node_instance_methods "]}," Reek Smells NilCheck inspect":{"type":"method","name":"inspect","children":[],"call":[" smell_warning ","node line ","smelly_nodes map ","call_node_finder smelly_nodes + ","case_node_finder smelly_nodes ","call_node_finder smelly_nodes ","NodeFinder  new ","call_node_finder smelly_nodes +  map ","call_node_finder call_node_finder smelly_nodes +  + ","NodeFinder  new  smelly_nodes + ","case_node_finder call_node_finder smelly_nodes +  ","NodeFinder  new  smelly_nodes ","call_node_finder call_node_finder smelly_nodes +  "]}," Reek Smells NestedIterators max_nesting":{"type":"method","name":"max_nesting","children":[],"call":[" value "]}," Reek Smells NestedIterators increment_depth":{"type":"method","name":"increment_depth","children":[],"call":["depth + "," ignored_iterator? "]}," Reek Smells NestedIterators configure_ignore_iterators":{"type":"method","name":"configure_ignore_iterators","children":[],"call":[" ignore_iterators= "," value "]}," Reek Smells NestedIterators scout":{"type":"method","name":"scout","children":[],"call":[" scout + "," scout ","iterator call "," increment_depth ","iterator block ","iterators map ","Iterator  new ","iterators empty? ","exp find_nodes ","nested_iterators empty? ","exp find_nodes flat_map ","exp find_nodes  map ","exp find_nodes  empty? ","nested_exp find_nodes  empty? "," scout +  empty? "]}," Reek Smells NestedIterators inspect":{"type":"method","name":"inspect","children":[],"call":[" smell_warning ","ctx full_name ","deepest_iterator exp line ","deepest_iterator exp ","depth > "," max_nesting ","deepest_iterator depth "," find_deepest_iterator "," configure_ignore_iterators ","group map ","violations group_by map ","violations group_by "," find_violations "," find_deepest_iterator  exp line "," find_deepest_iterator  exp ","deepest_iterator depth  > ","deepest_iterator deepest_iterator depth  "," find_deepest_iterator  depth "," find_ find_deepest_iterator  "," find_violations  group_by map "," find_violations  group_by "," find_ find_violations  "]}," Reek Smells NestedIterators <=>":{"type":"method","name":"<=>","children":[],"call":[" depth <=> ","other depth "," depth "]}," Reek Smells ModuleInitialize inspect":{"type":"method","name":"inspect","children":[],"call":[" smell_warning ","ctx exp line ","ctx exp ","node name to_s == ","node name to_s ","node name ","ctx local_nodes "]}," Reek Smells LongYieldList inspect":{"type":"method","name":"inspect","children":[],"call":[" smell_warning ","yield_node line ","yield_node args length ","yield_node args ","(send\n  (send\n    (lvar :ctx) :local_nodes\n    (sym :yield)) :select) map ","yield_node args length > ","ctx local_nodes select ","ctx local_nodes "," value "]}," Reek Smells LongParameterList inspect":{"type":"method","name":"inspect","children":[],"call":[" smell_warning ","exp line ","count <= ","exp arg_names length ","exp arg_names ","ctx exp "," value ","ctx exp  line ","exp arg_names length  <= ","ctx exp  arg_names length ","ctx exp  arg_names ","ctx ctx exp  "]}," Reek Smells IrresponsibleModule inspect":{"type":"method","name":"inspect","children":[],"call":[" smell_warning ","expression name ","expression line ","ctx exp ","ctx namespace_module? "," descriptive? ","ctx exp  name ","ctx exp  line "]}," Reek Smells FeatureEnvy envious_receivers":{"type":"method","name":"envious_receivers","children":[],"call":["refs most_popular ","refs self_is_max? ","ctx refs ","ctx refs  most_popular ","ctx refs  self_is_max? ","ctx ctx refs  "]}," Reek Smells FeatureEnvy inspect":{"type":"method","name":"inspect","children":[],"call":[" smell_warning ","lines size ","name to_s "," envious_receivers map "," envious_receivers ","ctx references_self? ","refs size ","refs map "]}," Reek Smells DuplicateMethodCall inspect":{"type":"method","name":"inspect","children":[],"call":[" smell_warning ","found_call occurs ","found_call call ","found_call lines ","collector smelly_calls map ","collector smelly_calls ","CallCollector  new "," value ","CallCollector  new  smelly_calls map ","CallCollector  new  smelly_calls "]}," Reek Smells DataClump inspect":{"type":"method","name":"inspect","children":[],"call":[" smell_warning ","methods map ","clump map ","DataClump  print_clump ","methods length ","MethodGroup  new clumps map ","MethodGroup  new clumps ","MethodGroup  new "," value "]}," Reek Smells ControlParameter inspect":{"type":"method","name":"inspect","children":[],"call":[" smell_warning ","control_parameter lines ","control_parameter name to_s ","control_parameter name ","ControlParameterCollector  new control_parameters map ","ControlParameterCollector  new control_parameters ","ControlParameterCollector  new ","control_parameter control_parameter name to_s  to_s ","control_parameter control_parameter name to_s  "]}," Reek Smells ClassVariable inspect":{"type":"method","name":"inspect","children":[],"call":[" smell_warning ","variable to_s "," class_variables_in map "," class_variables_in ","ctx exp "]}," Reek Smells BooleanParameter inspect":{"type":"method","name":"inspect","children":[],"call":[" smell_warning ","parameter to_s ","ctx exp line ","ctx exp ","(send\n  (send\n    (lvar :ctx) :default_assignments) :select) map ","(sym :true) include? ","value type ","ctx default_assignments select ","ctx default_assignments "]}," Reek Smells Attribute inspect":{"type":"method","name":"inspect","children":[],"call":[" smell_warning ","attribute to_s "," attributes_in map "," attributes_in "]}," Reek Report XMLReport error":{"type":"method","name":"error","children":[],"call":["error add_attributes ","smell smell_type ","smell message ","REXML Element  new tap ","REXML Element  new "]}," Reek Report XMLReport file":{"type":"method","name":"file","children":[],"call":["file << "," error ","smell lines each ","smell lines ","smells each ","file add_attribute ","File  realpath ","REXML Element  new tap ","REXML Element  new "]}," Reek Report XMLReport checkstyle":{"type":"method","name":"checkstyle","children":[],"call":["checkstyle << "," file "," smells group_by each "," smells group_by "," smells ","REXML Element  new tap ","REXML Element  new "]}," Reek Report CodeClimateReport show":{"type":"method","name":"show","children":[],"call":["out print "," warning_formatter format_code_climate_hash "," warning_formatter "," smells map "," smells "," JSON  generate ","CodeClimateFormatter  new render ","CodeClimateFormatter  new "]}," Reek Report WikiLinkWarningFormatter format_hash":{"type":"method","name":"format_hash","children":[],"call":[" merge "," explanatory_link ","(lvar :warning) merge "]}," Reek Report SimpleWarningFormatter format_code_climate_hash":{"type":"method","name":"format_code_climate_hash","children":[],"call":["CodeClimateFormatter  new render ","CodeClimateFormatter  new ","CodeClimateFormatter  new to_hash "]}," Reek Report SimpleWarningFormatter format_hash":{"type":"method","name":"format_hash","children":[],"call":["warning yaml_hash "]}," Reek Report CodeClimateFormatter configuration":{"type":"method","name":"configuration","children":[],"call":["YAML  load_file ","File  expand_path ","CodeClimateConfiguration  load "]}," Reek Report CodeClimateFormatter content":{"type":"method","name":"content","children":[],"call":[" configuration [] fetch "," configuration [] "," warning smell_type "," warning "," configuration "]}," Reek Report CodeClimateFormatter remediation_points":{"type":"method","name":"remediation_points","children":[],"call":[" configuration [] fetch "," configuration [] "," warning smell_type "," warning "," configuration "]}," Reek Report CodeClimateFormatter location":{"type":"method","name":"location","children":[],"call":["CCEngine Location LineRange  new ","warning_lines last ","warning_lines first "," warning source "," warning "," warning lines "," warning lines  last "," warning lines  first "]}," Reek Report CodeClimateFormatter categories":{"type":"method","name":"categories","children":[],"call":[]}," Reek Report CodeClimateFormatter check_name":{"type":"method","name":"check_name","children":[],"call":["(send\n  (send nil :warning) :smell_category) join "," warning smell_type "," warning "," warning smell_category "]}," Reek Report CodeClimateFormatter description":{"type":"method","name":"description","children":[],"call":["(send\n  (send nil :warning) :context) join "," warning message "," warning "," warning context "]}," Reek Report CodeClimateFormatter render":{"type":"method","name":"render","children":[],"call":["CCEngine Issue  new render ","CCEngine Issue  new "," content "," remediation_points "," location "," categories "," description "," check_name "," fingerprint "]}," Reek Report CodeClimateFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Rake Task source_files=":{"type":"method","name":"source_files=","children":[],"call":["FileList  [] "," raise ","files is_a? "," no_string_given_for_file_list_warning "]}," Reek ContextBuilder register_attributes":{"type":"method","name":"register_attributes","children":[],"call":[" append_new_context ","exp args each ","exp args "," current_context attribute_context_class "," current_context ","exp attribute_writer? "]}," Reek ContextBuilder handle_send_for_methods":{"type":"method","name":"handle_send_for_methods","children":[],"call":[" current_context record_call_to "," current_context "," append_new_context ","exp name "]}," Reek ContextBuilder handle_send_for_modules":{"type":"method","name":"handle_send_for_modules","children":[],"call":[" register_attributes "," current_context track_singleton_visibility "," current_context "," current_context track_visibility ","exp arg_names ","exp name ","arg children first ","arg children ","exp args map ","exp args ","exp exp arg_names  "]}," Reek ContextBuilder append_new_context":{"type":"method","name":"append_new_context","children":[],"call":["new_context register_with_parent "," current_context ","klass new tap ","klass new "," element append_child_context "," element "]}," Reek ContextBuilder inside_new_context":{"type":"method","name":"inside_new_context","children":[],"call":[" current_context= "," current_context "," append_new_context "," element= "," element "," append_ append_new_context  "]}," Reek ContextBuilder decrease_statement_count":{"type":"method","name":"decrease_statement_count","children":[],"call":[" current_context statement_counter decrease_by "," current_context statement_counter "," current_context "," element statement_counter decrease_by "," element statement_counter "," element "]}," Reek ContextBuilder increase_statement_count_by":{"type":"method","name":"increase_statement_count_by","children":[],"call":[" current_context statement_counter increase_by "," current_context statement_counter "," current_context "," element statement_counter increase_by "," element statement_counter "," element "]}," Reek ContextBuilder context_processor_exists?":{"type":"method","name":"context_processor_exists?","children":[],"call":[" class private_method_defined? "," class "]}," Reek ContextBuilder process_when":{"type":"method","name":"process_when","children":[],"call":[" process "," increase_statement_count_by ","exp body "]}," Reek ContextBuilder process_case":{"type":"method","name":"process_case","children":[],"call":[" process "," decrease_statement_count "," increase_statement_count_by ","exp else_body "]}," Reek ContextBuilder process_resbody":{"type":"method","name":"process_resbody","children":[],"call":[" process "," increase_statement_count_by ","exp children [] compact ","exp children [] ","exp children "]}," Reek ContextBuilder process_rescue":{"type":"method","name":"process_rescue","children":[],"call":[" process "," decrease_statement_count "," increase_statement_count_by ","exp children first ","exp children "]}," Reek ContextBuilder process_for":{"type":"method","name":"process_for","children":[],"call":[" process "," decrease_statement_count "," increase_statement_count_by ","exp children [] ","exp children "]}," Reek ContextBuilder process_while":{"type":"method","name":"process_while","children":[],"call":[" process "," decrease_statement_count "," increase_statement_count_by ","exp children [] ","exp children "]}," Reek ContextBuilder process_if":{"type":"method","name":"process_if","children":[],"call":[" process "," decrease_statement_count "," increase_statement_count_by ","children [] ","exp children ","exp children  [] ","exp exp children  "]}," Reek ContextBuilder process_begin":{"type":"method","name":"process_begin","children":[],"call":[" process "," decrease_statement_count "," increase_statement_count_by ","exp children "]}," Reek ContextBuilder process_block":{"type":"method","name":"process_block","children":[],"call":[" process "," increase_statement_count_by ","exp block "," handle_refinement_block ","exp call name == ","exp call name ","exp call "]}," Reek ContextBuilder process_zsuper":{"type":"method","name":"process_zsuper","children":[],"call":[" current_context record_use_of_self "," current_context "," element record_use_of_self "," element "]}," Reek ContextBuilder process_self":{"type":"method","name":"process_self","children":[],"call":[" current_context record_use_of_self "," current_context "," element record_use_of_self "," element "]}," Reek ContextBuilder process_ivar":{"type":"method","name":"process_ivar","children":[],"call":[" process "," current_context record_use_of_self "," current_context "," element record_use_of_self "," element "]}," Reek ContextBuilder process_op_asgn":{"type":"method","name":"process_op_asgn","children":[],"call":[" process "," current_context record_call_to "," current_context "," element record_call_to "," element "]}," Reek ContextBuilder process_send":{"type":"method","name":"process_send","children":[],"call":[" process "," handle_send_for_methods "," handle_send_for_modules "," current_context "," element record_call_to "," element "," append_new_context ","exp args each ","exp args ","exp attribute_writer? "," element track_visibility ","exp arg_names ","exp visibility_modifier? ","exp method_name ","exp exp method_name  "]}," Reek ContextBuilder process_defs":{"type":"method","name":"process_defs","children":[],"call":[" process "," increase_statement_count_by ","exp body "," inside_new_context "]}," Reek ContextBuilder process_def":{"type":"method","name":"process_def","children":[],"call":[" process "," increase_statement_count_by ","exp body "," inside_new_context "," current_context method_context_class "," current_context "]}," Reek ContextBuilder process_casgn":{"type":"method","name":"process_casgn","children":[],"call":[" process "," process_module ","exp defines_module? "]}," Reek ContextBuilder process_sclass":{"type":"method","name":"process_sclass","children":[],"call":[" process "," inside_new_context "]}," Reek ContextBuilder process_module":{"type":"method","name":"process_module","children":[],"call":[" process "," inside_new_context "]}," Reek ContextBuilder process":{"type":"method","name":"process","children":[],"call":["exp children grep each "," method ","exp children grep ","exp children "," build "]}," Reek ContextBuilder build":{"type":"method","name":"build","children":[],"call":[" current_context "," process "," send "," context_processor_exists? ","exp type "," element "]}," Reek ContextBuilder initialize":{"type":"method","name":"initialize","children":[],"call":[" build "," exp ","Context RootContext  new "]}," Reek Context VisibilityTracker set_child_visibility":{"type":"method","name":"set_child_visibility","children":[],"call":["child apply_current_visibility "," tracked_visibility ","child visibility= "]}," Reek Context VisibilityTracker track_singleton_visibility":{"type":"method","name":"track_singleton_visibility","children":[],"call":[" track_visibility ","VISIBILITY_MAP  [] ","names empty? "," track_VISIBILITY_MAP  []  "]}," Reek Context VisibilityTracker track_visibility":{"type":"method","name":"track_visibility","children":[],"call":[" tracked_visibility= ","child visibility= ","names include? ","child name ","children each ","names any? ","VISIBILITY_MODIFIERS  include? "]}," Reek Context VisibilityTracker initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Context StatementCounter decrease_by":{"type":"method","name":"decrease_by","children":[],"call":[" value= "," value - "," value "]}," Reek Context StatementCounter increase_by":{"type":"method","name":"increase_by","children":[],"call":[" raise "," value= "," value + ","sexp length "," value "]}," Reek Context StatementCounter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Context SingletonMethodContext apply_current_visibility":{"type":"method","name":"apply_current_visibility","children":[],"call":[" defined_as_instance_method? "]}," Reek Context SingletonMethodContext defined_as_instance_method?":{"type":"method","name":"defined_as_instance_method?","children":[],"call":[" type == "," type "]}," Reek Context SingletonMethodContext module_function?":{"type":"method","name":"module_function?","children":[],"call":[]}," Reek Context SingletonMethodContext instance_method?":{"type":"method","name":"instance_method?","children":[],"call":[]}," Reek Context SingletonMethodContext singleton_method?":{"type":"method","name":"singleton_method?","children":[],"call":[]}," Reek Context SingletonAttributeContext instance_method?":{"type":"method","name":"instance_method?","children":[],"call":[]}," Reek Context SendContext initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Context RootContext method_context_class":{"type":"method","name":"method_context_class","children":[],"call":[]}," Reek Context ModuleContext singleton_method_children":{"type":"method","name":"singleton_method_children","children":[],"call":[" children select "," children "]}," Reek Context ModuleContext instance_method_children":{"type":"method","name":"instance_method_children","children":[],"call":[" children select "," children "]}," Reek Context ModuleContext track_singleton_visibility":{"type":"method","name":"track_singleton_visibility","children":[],"call":[" visibility_tracker track_singleton_visibility "," singleton_method_children "," visibility_tracker "]}," Reek Context ModuleContext track_visibility":{"type":"method","name":"track_visibility","children":[],"call":[" visibility_tracker track_visibility "," instance_method_children "," visibility_tracker "," visibility_tracker track_singleton_visibility "," singleton_method_children "]}," Reek Context ModuleContext instance_method_calls":{"type":"method","name":"instance_method_calls","children":[],"call":["context parent class == ","context parent class ","context parent "," each grep select "," each grep "," each ","context children grep ","context children "," instance_method_children flat_map "," instance_method_children "]}," Reek Context ModuleContext defined_instance_methods":{"type":"method","name":"defined_instance_methods","children":[],"call":["context visibility == ","context visibility ","context is_a? "," each select "," each "," instance_method_children select "," instance_method_children ","visibility == ","child visibility == ","child visibility "]}," Reek Context ModuleContext attribute_context_class":{"type":"method","name":"attribute_context_class","children":[],"call":[]}," Reek Context ModuleContext method_context_class":{"type":"method","name":"method_context_class","children":[],"call":[]}," Reek Context ModuleContext append_child_context":{"type":"method","name":"append_child_context","children":[],"call":[" visibility_tracker set_child_visibility "," visibility_tracker "," visibility_tracker apply_visibility "]}," Reek Context MethodContext non_public_visibility?":{"type":"method","name":"non_public_visibility?","children":[],"call":[" visibility != "," visibility "]}," Reek Context MethodContext module_function?":{"type":"method","name":"module_function?","children":[],"call":[" visibility == "," visibility "]}," Reek Context MethodContext apply_current_visibility":{"type":"method","name":"apply_current_visibility","children":[],"call":[" visibility= "]}," Reek Context MethodContext instance_method?":{"type":"method","name":"instance_method?","children":[],"call":[]}," Reek Context MethodContext method_context_class":{"type":"method","name":"method_context_class","children":[],"call":[" class "]}," Reek Context GhostContext statement_counter":{"type":"method","name":"statement_counter","children":[],"call":[" parent statement_counter "," parent "]}," Reek Context GhostContext record_use_of_self":{"type":"method","name":"record_use_of_self","children":[],"call":[" parent record_use_of_self "," parent "]}," Reek Context GhostContext track_singleton_visibility":{"type":"method","name":"track_singleton_visibility","children":[],"call":[]}," Reek Context GhostContext track_visibility":{"type":"method","name":"track_visibility","children":[],"call":[" visibility_tracker track_visibility "," children "," visibility_tracker "]}," Reek Context GhostContext attribute_context_class":{"type":"method","name":"attribute_context_class","children":[],"call":[]}," Reek Context GhostContext method_context_class":{"type":"method","name":"method_context_class","children":[],"call":[]}," Reek Context GhostContext append_child_context":{"type":"method","name":"append_child_context","children":[],"call":[" parent append_child_context "," parent "]}," Reek Context GhostContext register_with_parent":{"type":"method","name":"register_with_parent","children":[],"call":[]}," Reek Context CodeContext parent_config_for":{"type":"method","name":"parent_config_for","children":[],"call":[" parent config_for "," parent "]}," Reek Context CodeContext full_comment":{"type":"method","name":"full_comment","children":[],"call":[" exp full_comment "," exp "]}," Reek Context CodeContext configuration_via_code_commment":{"type":"method","name":"configuration_via_code_commment","children":[],"call":["CodeComment  new config ","CodeComment  new "," full_comment "," exp source "," exp "," exp line "]}," Reek Context CodeContext apply_current_visibility":{"type":"method","name":"apply_current_visibility","children":[],"call":[]}," Reek Context CodeContext instance_method?":{"type":"method","name":"instance_method?","children":[],"call":[]}," Reek Context CodeContext singleton_method?":{"type":"method","name":"singleton_method?","children":[],"call":[]}," Reek Context CodeContext number_of_statements":{"type":"method","name":"number_of_statements","children":[],"call":[" statement_counter value "," statement_counter "]}," Reek Context CodeContext register_with_parent":{"type":"method","name":"register_with_parent","children":[],"call":["parent append_child_context "]}," Reek Context AttributeContext apply_current_visibility":{"type":"method","name":"apply_current_visibility","children":[],"call":[" visibility= "]}," Reek Context AttributeContext instance_method?":{"type":"method","name":"instance_method?","children":[],"call":[]}," Reek Context AttributeContext full_comment":{"type":"method","name":"full_comment","children":[],"call":[" send_expression full_comment "," send_expression "]}," Reek Context AttributeContext initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Configuration ExcludedPaths add":{"type":"method","name":"add","children":[],"call":[" << "," with_valid_directory ","paths each "," Pathname ","(send\n  (lvar :paths) :flat_map) each ","Dir  [] ","paths flat_map "]}," Reek Configuration DirectoryDirectives error_message_for_invalid_smell_type":{"type":"method","name":"error_message_for_invalid_smell_type","children":[],"call":[]}," Reek Configuration DirectoryDirectives best_match_for":{"type":"method","name":"best_match_for","children":[],"call":["pathname to_s length ","pathname to_s ","(send\n  (send nil :keys) :select) max_by ","source_base_dir to_s match ","Regexp  escape ","source_base_dir to_s "," keys select "," keys "," glob_to_regexp "," match? ","pathname expand_path "]}," Reek Configuration DirectoryDirectives add":{"type":"method","name":"add","children":[],"call":[" []= ","hash []= "," key_to_smell_detector "," abort "," error_message_for_invalid_smell_type "," smell_type? ","config each_with_object "," with_valid_directory ","Reek Smells  const_get ","detector_config each_with_object ","directory_config each "]}," Reek Configuration DirectoryDirectives directive_for":{"type":"method","name":"directive_for","children":[],"call":[" [] "," best_match_for ","Pathname  new dirname ","Pathname  new "]}," Reek Configuration DefaultDirective add":{"type":"method","name":"add","children":[],"call":[" []= "," key_to_smell_detector ","Reek Smells  const_get ","(or\n  (send\n    (self) :[]\n    (lvar :detector))\n  (hash)) merge "," [] ","detectors_configuration each "," key_to_smell_ key_to_smell_detector  ","(or\n  (send\n    (self) :[]\n    (lvar : key_to_smell_detector ))\n  (hash)) merge "," key_to_smell_detector s_configuration each "]}," Reek Configuration ConfigurationValidator with_valid_directory":{"type":"method","name":"with_valid_directory","children":[],"call":[" block_given? "," abort "," error_message_for_file_given ","directory file? ","Pathname  new ","path to_s chomp ","path to_s "," validate_directory "," raise ","Pathname  new  file? "," validate_Pathname  new  "]}," Reek Configuration ConfigurationValidator error_message_for_file_given":{"type":"method","name":"error_message_for_file_given","children":[],"call":[]}," Reek Configuration ConfigurationValidator key_to_smell_detector":{"type":"method","name":"key_to_smell_detector","children":[],"call":["Reek Smells  const_get ","Reek SmellDetectors  const_get "]}," Reek Configuration ConfigurationValidator smell_type?":{"type":"method","name":"smell_type?","children":[],"call":["Reek Smells  const_defined? ","Reek Smells  const_get ","Reek SmellDetectors  const_defined? "]}," Reek Configuration ConfigurationFileFinder find_in_dir":{"type":"method","name":"find_in_dir","children":[],"call":["file to_s end_with? ","file to_s ","files find ","dir children select sort ","dir children select ","dir children ","found first "," escalate_too_many_configuration_files ","found size > ","found size ","(send\n  (send\n    (lvar :dir) :children) :select) sort ","item to_s end_with? ","item to_s ","item file? ","item basename to_s == ","item basename to_s ","item basename ","dir children detect ","file file? ","dir + ","dir +  to_s end_with? ","dir +  to_s ","dir children select sort  find ","dir + s find ","(send\n  (send\n    (lvar :dir) :children) :select) sort  first "," escalate_too_many_configuration_dir children select sort  "," escalate_too_many_configuration_dir + s ","(send\n  (send\n    (lvar :dir) :children) :select) sort  size > ","(send\n  (send\n    (lvar :dir) :children) :select) sort  size ","item dir + ? ","dir +  dir + ? "]}," Reek Configuration AppConfiguration load_values":{"type":"method","name":"load_values","children":[],"call":[" directory_directives add "," directory_directives "," default_directive add "," default_directive "," smell_type? "," excluded_paths add "," excluded_paths ","key == ","configuration_file each ","configuration_hash each ","values each "]}," Reek Configuration AppConfiguration find_and_load":{"type":"method","name":"find_and_load","children":[],"call":[" load_values ","ConfigurationFileFinder  find_and_load "," directory_directives add "," directory_directives "," default_directive add "," default_directive "," smell_type? "," excluded_paths add "," excluded_paths ","key == ","configuration_file each ","ConfigurationFileFinder  find_and_load  each "]}," Reek Configuration AppConfiguration excluded_paths":{"type":"method","name":"excluded_paths","children":[],"call":[" extend "]}," Reek Configuration AppConfiguration default_directive":{"type":"method","name":"default_directive","children":[],"call":[" extend "]}," Reek Configuration AppConfiguration directory_directives":{"type":"method","name":"directory_directives","children":[],"call":[" extend "]}," Reek Configuration AppConfiguration path_excluded?":{"type":"method","name":"path_excluded?","children":[],"call":[" excluded_paths include? "," excluded_paths "," excluded_paths map include? ","path expand_path "," excluded_paths map "]}," Reek Configuration AppConfiguration new":{"type":"method","name":"new","children":[],"call":[]}," Reek Configuration AppConfiguration default":{"type":"method","name":"default","children":[],"call":[]}," Reek Configuration AppConfiguration from_hash":{"type":"method","name":"from_hash","children":[],"call":[]}," Reek Configuration AppConfiguration from_map":{"type":"method","name":"from_map","children":[],"call":[]}," Reek Configuration AppConfiguration from_path":{"type":"method","name":"from_path","children":[],"call":[]}," Reek CodeComment sanitized_comment":{"type":"method","name":"sanitized_comment","children":[],"call":[" original_comment gsub gsub strip "," original_comment gsub gsub "," original_comment gsub "," original_comment "]}," Reek CLI Options set_exit_codes":{"type":"method","name":"set_exit_codes","children":[],"call":[" failure_exit_code= "," Integer "," parser on "," parser "," success_exit_code= "," parser separator "]}," Reek CLI Application configure_app_configuration":{"type":"method","name":"configure_app_configuration","children":[],"call":[" exit ","$stderr puts ","Configuration AppConfiguration  from_path "," warn "]}," Reek CLI Application configure_options":{"type":"method","name":"configure_options","children":[],"call":[" exit ","$stderr puts ","Options  new parse ","Options  new "," warn "]}," Reek AST SexpExtensions SymNode full_name":{"type":"method","name":"full_name","children":[],"call":[" name ","outer == "]}," Reek AST SexpExtensions SymNode name":{"type":"method","name":"name","children":[],"call":[" children first "," children "]}," Reek AST SexpExtensions SuperNode name":{"type":"method","name":"name","children":[],"call":[]}," Reek AST SexpExtensions SendNode attr_with_writable_flag?":{"type":"method","name":"attr_with_writable_flag?","children":[],"call":[" args last type == "," args last type "," args last "," args "," args any? "," name == "," name "," method_name == "," method_name "]}," Reek AST SexpExtensions SendNode attribute_writer?":{"type":"method","name":"attribute_writer?","children":[],"call":[" attr_with_writable_flag? ","ATTR_DEFN_METHODS  include? "," name "," method_name "]}," Reek AST SexpExtensions SendNode module_creation_receiver?":{"type":"method","name":"module_creation_receiver?","children":[],"call":["(sym :Class) include? "," receiver simple_name "," receiver "," receiver type == "," receiver type "]}," Reek AST SexpExtensions SendNode module_creation_call?":{"type":"method","name":"module_creation_call?","children":[],"call":[" module_creation_receiver? "," object_creation_call? "]}," Reek AST SexpExtensions SendNode name":{"type":"method","name":"name","children":[],"call":[" children [] "," children "]}," Reek AST SexpExtensions SelfNode name":{"type":"method","name":"name","children":[],"call":[]}," Reek AST SexpExtensions ModuleNodeBase name":{"type":"method","name":"name","children":[],"call":[" children first format_to_ruby "," children first "," children ","SexpFormatter  format "]}," Reek AST SexpExtensions ConstNode name":{"type":"method","name":"name","children":[],"call":[" simple_name to_s "," simple_name ","namespace format_to_ruby "," children first "," children "," namespace format_to_ruby "," namespace "," children first  format_to_ruby ","  children first  format_to_ruby ","  children first  "]}," Reek AST SexpExtensions BlockNode without_block_arguments?":{"type":"method","name":"without_block_arguments?","children":[],"call":[" args components empty? "," args components "," args "]}," Reek AST SexpExtensions BlockNode simple_name":{"type":"method","name":"simple_name","children":[],"call":[]}," Reek AST ObjectRefs record_reference":{"type":"method","name":"record_reference","children":[],"call":[" refs [] << "," refs [] "," refs "]}," Reek Smells UnusedPrivateMethod default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek CLI ReekCommand result_code":{"type":"method","name":"result_code","children":[],"call":[" options success_exit_code "," options "," options failure_exit_code "," reporter smells? "," reporter "]}," Reek CLI Options set_generate_todo_list_options":{"type":"method","name":"set_generate_todo_list_options","children":[],"call":[" generate_todo_list= "," parser on "," parser "," parser separator "]}," Reek CLI Command TodoListCommand groups_for":{"type":"method","name":"groups_for","children":[],"call":["Hash  [] ","smells_for_type map ","smells group_by map ","smells group_by ","todos inject ","smell_class todo_configuration_for "]}," Reek CLI Command TodoListCommand scan_for_smells":{"type":"method","name":"scan_for_smells","children":[],"call":["(send\n  (send nil :sources) :map) map flatten ","(send\n  (send nil :sources) :map) map ","Examiner  new ","app configuration "," smell_names "," sources map "," sources "," configuration "]}," Reek CLI Command TodoListCommand execute":{"type":"method","name":"execute","children":[],"call":[" options success_exit_code "," options "," puts ","File  write "," groups_for to_yaml "," groups_for ","smells empty? "," scan_for_smells "," groups to_yaml "," groups "," smells empty? "," smells ","(pair\n  (const\n    (const\n      (const nil :Configuration) :AppConfiguration) :DETECTORS_KEY)\n  (send nil :groups)) to_yaml "," write_to_file ","File  exist? "," scan_for_smells  empty? "," scan_for_ scan_for_smells  ","  scan_for_smells  empty? ","  scan_for_smells  "]}," Reek CLI Command ReportCommand reporter":{"type":"method","name":"reporter","children":[],"call":[" options reporter "," options "," report_class new "," heading_formatter "," sort_by_issue_count "," warning_formatter "," report_class "," progress_formatter new "," sources length "," sources "," progress_formatter "]}," Reek CLI Command ReportCommand result_code":{"type":"method","name":"result_code","children":[],"call":[" options success_exit_code "," options "," options failure_exit_code "," reporter smells? "," reporter "]}," Reek CLI Command ReportCommand populate_reporter_with_smells":{"type":"method","name":"populate_reporter_with_smells","children":[],"call":[" reporter add_examiner ","Examiner  new ","app configuration "," smell_names "," reporter "," sources each "," sources "," configuration ","LoggingErrorHandler  new "]}," Reek CLI Command ReportCommand execute":{"type":"method","name":"execute","children":[],"call":[" result_code "," reporter show "," reporter "," populate_reporter_with_smells "]}," Reek CLI Command BaseCommand sources":{"type":"method","name":"sources","children":[],"call":[" options sources "," options "]}," Reek CLI Command BaseCommand smell_names":{"type":"method","name":"smell_names","children":[],"call":[" options smells_to_detect "," options "]}," Reek CLI Command BaseCommand initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek CLI Application command_class":{"type":"method","name":"command_class","children":[],"call":[" options generate_todo_list "," options "]}," Reek TreeWalker result":{"type":"method","name":"result","children":[],"call":[" process "," exp "]}," Reek Smells SmellDetector subclasses":{"type":"method","name":"subclasses","children":[],"call":[]}," Reek Smells Attribute track_argument":{"type":"method","name":"track_argument","children":[],"call":[" visiblity_tracker []= "," visiblity_mode "," visiblity_tracker ","arg children first ","arg children ","@visiblity_tracker []= "]}," Reek Smells Attribute track_arguments":{"type":"method","name":"track_arguments","children":[],"call":[" track_argument ","(send\n  (lvar :args) :select) map ","arg type == ","arg type ","args select "]}," Reek Smells Attribute attr_with_writable_flag?":{"type":"method","name":"attr_with_writable_flag?","children":[],"call":["call_node args last type == ","call_node args last type ","call_node args last ","call_node args ","call_node method_name == ","call_node method_name "]}," Reek Smells Attribute attribute_writer?":{"type":"method","name":"attribute_writer?","children":[],"call":[" attr_with_writable_flag? ","ATTR_DEFN_METHODS  include? ","call_node method_name "]}," Reek Smells Attribute track_attributes":{"type":"method","name":"track_attributes","children":[],"call":[" track_visibility "," visibility_modifier? "," track_arguments ","call_node line ","call_node args "," attribute_writer? "]}," Reek TreeWalker new_context":{"type":"method","name":"new_context","children":[],"call":[" element append_child_context "," element ","klass new tap ","klass new "]}," Reek Configuration ConfigurationValidator validate_directory":{"type":"method","name":"validate_directory","children":[],"call":[" abort "," error_message_for_file_given ","pathname file? "," error_message_for_missing_directory ","pathname exist? "]}," Reek Configuration ConfigurationValidator error_message_for_missing_directory":{"type":"method","name":"error_message_for_missing_directory","children":[],"call":[]}," Reek AST SexpExtensions SendNode visibility_modifier?":{"type":"method","name":"visibility_modifier?","children":[],"call":["VISIBILITY_MODIFIERS  include? "," method_name "]}," Reek Rake Task no_string_given_for_file_list_warning":{"type":"method","name":"no_string_given_for_file_list_warning","children":[],"call":[]}," Reek Smells SmellRepository source_configuration_for":{"type":"method","name":"source_configuration_for","children":[],"call":[" configuration [] "," configuration "]}," Reek Context CodeContext non_public_visibility?":{"type":"method","name":"non_public_visibility?","children":[],"call":[" visibility != "," visibility "]}," Reek Smells SmellWarning matches_smell_details?":{"type":"method","name":"matches_smell_details?","children":[],"call":[" common_parameters_equal? "]}," Reek Smells SmellWarning matches_smell_type?":{"type":"method","name":"matches_smell_type?","children":[],"call":[" smell_classes include? ","klass to_s "," smell_classes "]}," Reek TreeWalker context_tree":{"type":"method","name":"context_tree","children":[],"call":[" process "," exp "]}," Reek Report CodeClimateFormatter to_hash":{"type":"method","name":"to_hash","children":[],"call":["CCEngine Issue  new to_hash ","CCEngine Issue  new "," location "," categories "," description "," check_name "]}," Reek Context VisibilityTracker tracked_visibility":{"type":"method","name":"tracked_visibility","children":[],"call":[]}," Reek Context VisibilityTracker non_public_visibility?":{"type":"method","name":"non_public_visibility?","children":[],"call":[" visibility != "," visibility "]}," Reek Smells UncommunicativeParameterName accept_patterns":{"type":"method","name":"accept_patterns","children":[],"call":[" Array "," value "]}," Reek Smells UncommunicativeModuleName accept_patterns":{"type":"method","name":"accept_patterns","children":[],"call":[" Array "," value "]}," Reek Smells UncommunicativeMethodName accept_patterns":{"type":"method","name":"accept_patterns","children":[],"call":[" Array "," value "]}," Reek CLI Application argv":{"type":"method","name":"argv","children":[],"call":[" options argv "," options "]}," Reek Spec ShouldReekOf with_config":{"type":"method","name":"with_config","children":[],"call":[" class new "," smell_details "," smell_type "," class ","new_configuration load_values ","Configuration AppConfiguration  default ","Configuration AppConfiguration  default  load_values "]}," Reek CLI Command ReportCommand sort_by_issue_count":{"type":"method","name":"sort_by_issue_count","children":[],"call":[" options sorting == "," options sorting "," options "]}," Reek CLI Command ReportCommand heading_formatter":{"type":"method","name":"heading_formatter","children":[],"call":["Report  heading_formatter "," options show_empty "," options "]}," Reek CLI Command ReportCommand location_formatter":{"type":"method","name":"location_formatter","children":[],"call":["Report  location_formatter "," options location_format "," options "]}," Reek CLI Command ReportCommand warning_formatter_class":{"type":"method","name":"warning_formatter_class","children":[],"call":["Report  warning_formatter_class "," options show_links "," options "]}," Reek CLI Command ReportCommand warning_formatter":{"type":"method","name":"warning_formatter","children":[],"call":[" warning_formatter_class new "," location_formatter "," warning_formatter_class "]}," Reek CLI Command ReportCommand report_class":{"type":"method","name":"report_class","children":[],"call":["Report  report_class "," options report_format "," options "]}," Reek CLI Application source_from_pipe":{"type":"method","name":"source_from_pipe","children":[],"call":["Source SourceCode  from "," options stdin_filename "," options "]}," Reek CLI Application sources_from_argv":{"type":"method","name":"sources_from_argv","children":[],"call":["Source SourceLocator  new sources ","Source SourceLocator  new "," argv "," configuration "," options "]}," Reek CLI Application working_directory_as_source":{"type":"method","name":"working_directory_as_source","children":[],"call":["Source SourceLocator  new sources ","Source SourceLocator  new "," configuration "," options "]}," Reek CLI Application no_source_files_given?":{"type":"method","name":"no_source_files_given?","children":[],"call":[" argv empty? "," argv "]}," Reek CLI Application input_was_piped?":{"type":"method","name":"input_was_piped?","children":[],"call":["$stdin tty? ! ","$stdin tty? "]}," Reek CLI Application sources":{"type":"method","name":"sources","children":[],"call":[" sources_from_argv "," working_directory_as_source "," source_from_pipe "," input_was_piped? "," no_source_files_given? "," disable_progress_output_unless_verbose "]}," Reek Smells SmellWarning smell_class":{"type":"method","name":"smell_class","children":[],"call":[" smell_detector class "," smell_detector "]}," Reek Smells SmellDetector todo_configuration_for":{"type":"method","name":"todo_configuration_for","children":[],"call":[]}," Reek Smells NestedIterators find_candidates":{"type":"method","name":"find_candidates","children":[],"call":[" scout ","ctx exp ","ctx ctx exp  "]}," Reek Smells NestedIterators find_violations":{"type":"method","name":"find_violations","children":[],"call":["it depth > ","it depth ","candidates select "," max_nesting "," find_candidates "," find_candidates  select "," find_ find_candidates  "]}," Reek Smells NestedIterators line":{"type":"method","name":"line","children":[],"call":[" exp line "," exp "]}," Reek AST SexpExtensions LambdaNode name":{"type":"method","name":"name","children":[],"call":[]}," Reek Smells SubclassedFromCoreClass build_smell_warning":{"type":"method","name":"build_smell_warning","children":[],"call":[" smell_warning ","ctx exp line ","ctx exp "]}," Reek Smells SubclassedFromCoreClass inspect_superclass":{"type":"method","name":"inspect_superclass","children":[],"call":[" build_smell_warning ","CORE_CLASSES  include? "]}," Reek Smells SubclassedFromCoreClass inspect":{"type":"method","name":"inspect","children":[],"call":[" inspect_superclass ","superclass name ","ctx exp superclass ","ctx exp "," inspect_ctx exp superclass  ","ctx exp superclass  name ","ctx exp ctx exp superclass  "]}," Reek Smells SubclassedFromCoreClass contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek AST SexpExtensions CasgnNode superclass":{"type":"method","name":"superclass","children":[],"call":[" constant_definition args first "," constant_definition args "," constant_definition "," constant_definition receiver name == "," constant_definition receiver name "," constant_definition receiver "," defines_module? "]}," Reek AST SexpExtensions CasgnNode constant_definition":{"type":"method","name":"constant_definition","children":[],"call":[" value "," value call "," value type ","call type == ","call type "," value  value call  "," value call  type == "," value call  type "]}," Reek AST SexpExtensions ConstNode namespace":{"type":"method","name":"namespace","children":[],"call":[" children first "," children "]}," Reek AST SexpExtensions LambdaNode module_creation_call?":{"type":"method","name":"module_creation_call?","children":[],"call":[]}," Reek Smells TooManyConstants build_smell_warning":{"type":"method","name":"build_smell_warning","children":[],"call":[" smell_warning ","ctx exp line ","ctx exp "]}," Reek Smells TooManyConstants inspect":{"type":"method","name":"inspect","children":[],"call":[" build_smell_warning ","count <= ","ctx each_node delete_if length ","ctx each_node delete_if ","ctx each_node "," value ","ctx each_node delete_if length  <= "]}," Reek Smells TooManyConstants default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek Smells TooManyConstants contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek AST Node length":{"type":"method","name":"length","children":[],"call":[]}," Reek Spec ShouldReekOf all_relevant_smell_details_formatted":{"type":"method","name":"all_relevant_smell_details_formatted","children":[],"call":["(send\n  (send\n    (send nil :matching_smell_types) :each_with_object\n    (array)) :with_index) join ","accumulator << ","warning_as_hash delete ","smell smell_warning to_hash ","smell smell_warning ","index + "," matching_smell_types each_with_object with_index "," matching_smell_types each_with_object "," matching_smell_types ","smell smell_warning to_hash  delete "]}," Reek Smells UtilityFunction sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","ctx exp line ","ctx exp "," ignore_method? "," num_helper_methods zero? "," num_helper_methods ","ctx references_self? ","ctx module_function? ","ctx singleton_method? "]}," Reek Smells UnusedPrivateMethod sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","hit line ","hit name "," hits map "," hits ","name to_s ","hit hit name  ","hit name  to_s "]}," Reek Smells UnusedParameters sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","ctx exp line ","ctx exp ","param name to_s ","param name ","ctx unused_params map ","ctx unused_params ","ctx uses_super_with_implicit_arguments? ","param param name to_s  to_s ","param param name to_s  "]}," Reek Smells UncommunicativeVariableName sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","name to_s ","(send\n  (send nil :variable_names\n    (send\n      (lvar :ctx) :exp)) :select) map "," bad_name? "," variable_names select "," variable_names ","ctx exp "," accept_names= "," value "," reject_names= "," uncommunicative_variable_name? "]}," Reek Smells UncommunicativeParameterName sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","name to_s ","expression line ","(send\n  (send\n    (lvar :expression) :parameter_names) :select) map "," uncommunicative_parameter_name? "," sanitize ","expression parameter_names select ","expression parameter_names ","context exp ","context exp  line ","(send\n  (send\n    (lvar :context exp ) :parameter_names) :select) map ","context exp  parameter_names select ","context exp  parameter_names "]}," Reek Smells UncommunicativeModuleName sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","exp line "," acceptable_name? ","exp simple_name ","context exp ","context full_name ","context exp  line ","context exp  simple_name ","context context exp  "]}," Reek Smells UncommunicativeMethodName sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","context exp line ","context exp "," acceptable_name? ","context name to_s ","context name "," acceptable_context name to_s ? ","context context name to_s  to_s ","context context name to_s  "]}," Reek Smells TooManyStatements sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","ctx exp line ","ctx exp ","count <= ","ctx number_of_statements "," value ","ctx number_of_statements  <= "]}," Reek Smells TooManyMethods sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","ctx exp line ","ctx exp ","actual <= ","ctx node_instance_methods length ","ctx node_instance_methods "," value ","ctx node_instance_methods length  <= "]}," Reek Smells TooManyInstanceVariables sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","ctx exp line ","ctx exp ","count <= ","(send\n  (send\n    (lvar :ctx) :local_nodes\n    (sym :ivasgn)) :map) uniq length ","(send\n  (send\n    (lvar :ctx) :local_nodes\n    (sym :ivasgn)) :map) uniq ","ivasgn children first ","ivasgn children ","ctx local_nodes map ","ctx local_nodes "," value ","variables uniq size ","variables uniq ","(send\n  (send\n    (lvar :ctx) :local_nodes\n    (sym :ivasgn)) :map) uniq length  <= ","variables uniq size  <= ","ctx local_nodes map  uniq size ","ctx local_nodes map  uniq "]}," Reek Smells TooManyConstants sniff":{"type":"method","name":"sniff","children":[],"call":[" build_smell_warning ","count <= ","ctx each_node delete_if length ","ctx each_node delete_if ","ctx each_node "," value ","ctx each_node delete_if length  <= "]}," Reek Smells SubclassedFromCoreClass sniff_superclass":{"type":"method","name":"sniff_superclass","children":[],"call":[" build_smell_warning ","CORE_CLASSES  include? "]}," Reek Smells SubclassedFromCoreClass sniff":{"type":"method","name":"sniff","children":[],"call":[" sniff_superclass ","superclass name ","ctx exp superclass ","ctx exp "," sniff_ctx exp superclass  ","ctx exp superclass  name ","ctx exp ctx exp superclass  "]}," Reek Smells SmellWarning base_hash":{"type":"method","name":"base_hash","children":[],"call":[" source "," smell_type "," message "," lines "," context "]}," Reek Smells SmellWarning to_hash":{"type":"method","name":"to_hash","children":[],"call":[" base_hash merge "," base_hash ","Hash  [] ","key to_s "," parameters map "," parameters "]}," Reek Smells RepeatedConditional sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","key format_to_ruby ","lines length ","(send\n  (send nil :conditional_counts\n    (lvar :ctx)) :select) map ","lines length > "," conditional_counts select "," conditional_counts "," value "]}," Reek Smells PrimaDonnaMethod sniff":{"type":"method","name":"sniff","children":[],"call":["(send\n  (send\n    (lvar :ctx) :node_instance_methods) :map) compact "," check_for_smells ","ctx node_instance_methods map ","ctx node_instance_methods "," smell_warning ","name to_s ","ctx exp line ","ctx exp ","method_sexp name ","(send\n  (send\n    (lvar :ctx) :node_instance_methods) :select) map "," prima_donna_method? ","ctx node_instance_methods select ","method_sexp name  to_s ","method_sexp method_sexp name  "]}," Reek Smells NilCheck sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","node line ","smelly_nodes map ","call_node_finder smelly_nodes + ","case_node_finder smelly_nodes ","call_node_finder smelly_nodes ","NodeFinder  new ","lines any? ","NodeDetector  new detect map ","NodeDetector  new detect ","NodeDetector  new ","call_node_finder smelly_nodes +  map ","call_node_finder call_node_finder smelly_nodes +  + ","NodeFinder  new  smelly_nodes + ","case_node_finder call_node_finder smelly_nodes +  ","NodeFinder  new  smelly_nodes ","call_node_finder call_node_finder smelly_nodes +  ","NodeDetector  new detect map  any? "]}," Reek Smells NestedIterators sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","group map ","violations group_by map ","violations group_by "," find_violations "," configure_ignore_iterators "," find_violations  group_by map "," find_violations  group_by "," find_ find_violations  "]}," Reek Smells ModuleInitialize sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","ctx exp line ","ctx exp ","node name to_s == ","node name to_s ","node name ","ctx local_nodes "]}," Reek Smells LongYieldList sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","yield_node line ","yield_node args length ","yield_node args ","(send\n  (send\n    (lvar :ctx) :local_nodes\n    (sym :yield)) :select) map ","yield_node args length > ","ctx local_nodes select ","ctx local_nodes "," value "]}," Reek Smells LongParameterList sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","exp line ","count <= ","exp arg_names length ","exp arg_names ","ctx exp "," value ","ctx exp  line ","exp arg_names length  <= ","ctx exp  arg_names length ","ctx exp  arg_names ","ctx ctx exp  "]}," Reek Smells IrresponsibleModule sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","expression line ","ctx exp ","ctx namespace_module? "," descriptive? ","ctx exp  line "]}," Reek Smells FeatureEnvy sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","name to_s "," envious_receivers map "," envious_receivers ","ctx references_self? "]}," Reek Smells DuplicateMethodCall sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","found_call occurs ","found_call call ","found_call lines ","collector smelly_calls map ","collector smelly_calls ","CallCollector  new "," value ","CallCollector  new  smelly_calls map ","CallCollector  new  smelly_calls "]}," Reek Smells DataClump sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","clump map ","DataClump  print_clump ","methods map ","methods length ","MethodGroup  new clumps map ","MethodGroup  new clumps ","MethodGroup  new "," value "]}," Reek Smells ControlParameter sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","control_parameter lines ","control_parameter name to_s ","control_parameter name ","ControlParameterCollector  new control_parameters map ","ControlParameterCollector  new control_parameters ","ControlParameterCollector  new "]}," Reek Smells ClassVariable sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","variable to_s "," class_variables_in map "," class_variables_in ","ctx exp "]}," Reek Smells BooleanParameter sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","parameter to_s ","ctx exp line ","ctx exp ","(send\n  (send\n    (lvar :ctx) :default_assignments) :select) map ","(sym :true) include? ","value type ","ctx default_assignments select ","ctx default_assignments "]}," Reek Smells Attribute sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning "," attributes_in map "," attributes_in "]}," Reek Examiner examine":{"type":"method","name":"examine","children":[],"call":[" smell_repository examine "," smell_repository ","ContextBuilder  new context_tree each ","ContextBuilder  new context_tree ","ContextBuilder  new "]}," Reek Smells NilCheck SafeNavigationNodeDetector detect":{"type":"method","name":"detect","children":[],"call":[]}," Reek Smells NilCheck NodeDetector detect":{"type":"method","name":"detect","children":[],"call":["finders flat_map ","NodeFinder  new "," ctx "]}," Reek Smells NilCheck NodeDetector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Smells ManualDispatch sniff":{"type":"method","name":"sniff","children":[],"call":["(send\n  (send\n    (lvar :ctx) :each_node\n    (sym :send)) :flat_map) compact "," smell_warning ","node line ","node name equal? ","node name ","ctx each_node flat_map ","ctx each_node "]}," Reek Smells InstanceVariableAssumption ignored_nodes":{"type":"method","name":"ignored_nodes","children":[],"call":[]}," Reek Smells InstanceVariableAssumption assumption_nodes":{"type":"method","name":"assumption_nodes","children":[],"call":[]}," Reek Smells InstanceVariableAssumption variables_from_context":{"type":"method","name":"variables_from_context","children":[],"call":["(send\n  (lvar :instance_methods) :map) flatten ","method find_nodes map ","method find_nodes "," ignored_nodes "," assumption_nodes ","instance_methods map "]}," Reek Smells InstanceVariableAssumption variables_from_initialize":{"type":"method","name":"variables_from_initialize","children":[],"call":["initialize_exp each_node map ","initialize_exp each_node ","method name == ","method name ","instance_methods detect "]}," Reek Smells InstanceVariableAssumption build_smell_warning":{"type":"method","name":"build_smell_warning","children":[],"call":[" smell_warning ","ctx exp line ","ctx exp ","assumption to_s "]}," Reek Smells InstanceVariableAssumption sniff":{"type":"method","name":"sniff","children":[],"call":[" build_smell_warning ","assumptions map ","(send\n  (send nil :variables_from_context\n    (lvar :method_expressions)) :-\n  (send nil :variables_from_initialize\n    (lvar :method_expressions))) uniq "," variables_from_context - "," variables_from_initialize "," variables_from_context ","ctx node_instance_methods ","(send\n  (send nil :variables_from_context\n    (lvar :method_expressions)) :-\n  (send nil :variables_from_initialize\n    (lvar :method_expressions))) uniq  map ","(send\n  (send nil :variables_from_context\n    (lvar :ctx node_instance_methods )) :-\n  (send nil :variables_from_initialize\n    (lvar :ctx node_instance_methods ))) uniq "]}," Reek Smells InstanceVariableAssumption contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek Spec ShouldReekOf UnsafeExaminer run":{"type":"method","name":"run","children":[],"call":[" examine_tree "]}," Reek Smells UncommunicativeVariableName acceptable_name?":{"type":"method","name":"acceptable_name?","children":[],"call":["name match "," Array none? "," Array "," reject_names "," Array any? "," accept_names "]}," Reek Smells UncommunicativeVariableName uncommunicative_variable_name?":{"type":"method","name":"uncommunicative_variable_name?","children":[],"call":[" acceptable_name? ! "," acceptable_name? ","name to_s gsub ","name to_s "]}," Reek Smells SmellWarning identifying_values":{"type":"method","name":"identifying_values","children":[],"call":[" lines "," message "," context "," smell_type "]}," Reek Examiner examine_tree":{"type":"method","name":"examine_tree","children":[],"call":[" smell_repository examine "," smell_repository ","ContextBuilder  new context_tree flat_map ","ContextBuilder  new context_tree ","ContextBuilder  new "," syntax_tree "," detector_repository examine "," detector_repository "," raise "," origin "]}," Reek Examiner syntax_tree":{"type":"method","name":"syntax_tree","children":[],"call":[" source syntax_tree "," source "]}," Reek Examiner origin":{"type":"method","name":"origin","children":[],"call":[" source origin "," source "]}," Reek Smells SmellDetector valid_detector?":{"type":"method","name":"valid_detector?","children":[],"call":["(send\n  (send nil :descendants) :map) include? ","descendant to_s split last ","descendant to_s split ","descendant to_s "," descendants map "," descendants "]}," Reek Smells PrimaDonnaMethod version_without_bang_exists?":{"type":"method","name":"version_without_bang_exists?","children":[],"call":["sexp_item name to_s == ","method_sexp name_without_bang ","sexp_item name to_s ","sexp_item name ","ctx node_instance_methods find ","ctx node_instance_methods "]}," Reek Smells PrimaDonnaMethod prima_donna_method?":{"type":"method","name":"prima_donna_method?","children":[],"call":[" version_without_bang_exists? ","method_sexp ends_with_bang? "]}," Reek BadDetectorInCommentError initialize":{"type":"method","name":"initialize","children":[],"call":[" format "]}," Reek AST Node source":{"type":"method","name":"source","children":[],"call":[" loc expression source_buffer name "," loc expression source_buffer "," loc expression "," loc "]}," Reek SmellDetectors UtilityFunction ignore_method?":{"type":"method","name":"ignore_method?","children":[],"call":[" value ","method_ctx non_public_visibility? "," context "," context non_public_visibility? "]}," Reek SmellDetectors UtilityFunction num_helper_methods":{"type":"method","name":"num_helper_methods","children":[],"call":["method_ctx local_nodes length ","method_ctx local_nodes "," context local_nodes length "," context local_nodes "," context "," context local_nodes to_a length "," context local_nodes to_a "]}," Reek SmellDetectors UtilityFunction sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","ctx exp line ","ctx exp "," ignore_method? "," num_helper_methods zero? "," num_helper_methods ","ctx references_self? ","ctx module_function? ","ctx singleton_method? "," source_line "," context "," context references_self? "," context module_function? "," context singleton_method? "]}," Reek SmellDetectors UtilityFunction contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek SmellDetectors UtilityFunction default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek SmellDetectors UnusedPrivateMethod ignore_method?":{"type":"method","name":"ignore_method?","children":[],"call":["full_name [] ","method name ","method parent full_name ","method parent ","ignore_contexts any? "," value "," context "," value  any? "]}," Reek SmellDetectors UnusedPrivateMethod unused_private_methods":{"type":"method","name":"unused_private_methods","children":[],"call":["called_method_names include? ! ","called_method_names include? ","defined_method name ","defined_private_methods select ","ctx instance_method_calls map ","ctx instance_method_calls ","ctx defined_instance_methods ","defined_private_methods reject "," context instance_method_calls map "," context instance_method_calls "," context "," context defined_instance_methods ","called_method_names concat "," context instance_method_names_via_to_call ","ctx instance_method_calls map  include? ! "," context instance_method_calls map  include? ! ","ctx instance_method_calls map  include? "," context instance_method_calls map  include? ","ctx defined_instance_methods  select "," context defined_instance_methods  select ","ctx defined_instance_methods  reject "," context defined_instance_methods  reject ","ctx instance_method_calls map  concat "," context instance_method_calls map  concat "]}," Reek SmellDetectors UnusedPrivateMethod hits":{"type":"method","name":"hits","children":[],"call":["(send\n  (send nil :unused_private_methods\n    (lvar :ctx)) :map) compact ","Hit  new "," ignore_method? "," unused_private_methods map "," unused_private_methods ","(send\n  (send nil :unused_private_methods) :map) compact "]}," Reek SmellDetectors UnusedPrivateMethod sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","name to_s ","hit line ","hit name "," hits map "," hits "," context ","hit name  to_s ","hit hit name  "]}," Reek SmellDetectors UnusedPrivateMethod contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek SmellDetectors UnusedPrivateMethod Hit initialize":{"type":"method","name":"initialize","children":[],"call":["context exp line ","context exp ","context name "]}," Reek SmellDetectors UnusedPrivateMethod default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek SmellDetectors UnusedParameters sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","ctx exp line ","ctx exp ","param name to_s ","param name ","ctx unused_params map ","ctx unused_params ","ctx uses_super_with_implicit_arguments? "," source_line "," context "," context unused_params map "," context unused_params "," context uses_super_with_implicit_arguments? ","param param name to_s  to_s ","param param name to_s  "]}," Reek SmellDetectors UncommunicativeVariableName record_variable_name":{"type":"method","name":"record_variable_name","children":[],"call":["accumulator [] push ","exp line ","accumulator [] ","varname to_sym ","varname == ","symbol to_s sub ","symbol to_s ","varname to_sym name to_sym ","symbol to_s sub  to_sym ","varname to_sym name == ","symbol to_s sub  == "]}," Reek SmellDetectors UncommunicativeVariableName recursively_record_variable_names":{"type":"method","name":"recursively_record_variable_names","children":[],"call":[" record_variable_name ","subexp name "," recursively_record_variable_names ","subexp type ","exp children each ","exp children "]}," Reek SmellDetectors UncommunicativeVariableName find_block_argument_variable_names":{"type":"method","name":"find_block_argument_variable_names","children":[],"call":[" recursively_record_variable_names ","args_nodes each ","arg_search_exp each_node ","exp body ","exp type "," expression body "," expression "," expression type ","arg_search_exp each_node  each "]}," Reek SmellDetectors UncommunicativeVariableName find_assignment_variable_names":{"type":"method","name":"find_assignment_variable_names","children":[],"call":["accumulator [] push ","asgn line ","accumulator [] ","asgn children first ","asgn children ","assignment_nodes each ","exp each_node ","exp type "," expression each_node "," expression "," expression type "," expression each_node to_a ","exp each_node  each "," expression each_node  each "," expression each_node to_a  each "]}," Reek SmellDetectors UncommunicativeVariableName variable_names":{"type":"method","name":"variable_names","children":[],"call":["name to_s ","result to_a sort_by ","result to_a "," find_block_argument_variable_names "," find_assignment_variable_names ","hash []= ","Hash  new "]}," Reek SmellDetectors UncommunicativeVariableName acceptable_name?":{"type":"method","name":"acceptable_name?","children":[],"call":["name match "," Array none? "," Array "," reject_names "," Array any? "," accept_names "]}," Reek SmellDetectors UncommunicativeVariableName uncommunicative_variable_name?":{"type":"method","name":"uncommunicative_variable_name?","children":[],"call":[" acceptable_name? ! "," acceptable_name? ","name to_s gsub ","name to_s "]}," Reek SmellDetectors UncommunicativeVariableName sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","name to_s ","(send\n  (send nil :variable_names\n    (send\n      (lvar :ctx) :exp)) :select) map "," uncommunicative_variable_name? "," variable_names select "," variable_names ","ctx exp "," accept_names= "," value "," reject_names= "," context ","(send\n  (send nil :variable_names) :select) map "]}," Reek SmellDetectors UncommunicativeVariableName contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek SmellDetectors UncommunicativeVariableName default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek SmellDetectors UncommunicativeParameterName sanitize":{"type":"method","name":"sanitize","children":[],"call":["name to_s gsub ","name to_s "]}," Reek SmellDetectors UncommunicativeParameterName accept_patterns":{"type":"method","name":"accept_patterns","children":[],"call":[" Array "," value "," context "]}," Reek SmellDetectors UncommunicativeParameterName reject_patterns":{"type":"method","name":"reject_patterns","children":[],"call":[" Array "," value "," context "]}," Reek SmellDetectors UncommunicativeParameterName acceptable_name?":{"type":"method","name":"acceptable_name?","children":[],"call":["name match "," reject_patterns none? "," reject_patterns "," accept_patterns any? "," accept_patterns ","parameter plain_name ","parameter plain_name  match ","parameter plain_parameter plain_name  "]}," Reek SmellDetectors UncommunicativeParameterName uncommunicative_parameter_name?":{"type":"method","name":"uncommunicative_parameter_name?","children":[],"call":["context uses_param? "," acceptable_name? ! "," acceptable_name? "]}," Reek SmellDetectors UncommunicativeParameterName sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","name to_s ","expression line ","(send\n  (send\n    (lvar :expression) :parameter_names) :select) map "," uncommunicative_parameter_name? "," sanitize ","expression parameter_names select ","expression parameter_names ","context exp ","params map map ","params map "," uncommunicative_parameter? ","expression parameters select ","expression parameters "," source_line "," context "," expression parameters select "," expression parameters "," expression ","context exp  line ","(send\n  (send\n    (lvar :context exp ) :parameter_names) :select) map ","context exp  parameter_names select ","context exp  parameter_names ","context exp  parameters select ","context exp  parameters "," context exp  parameters select "," context exp  parameters "," context exp  "]}," Reek SmellDetectors UncommunicativeParameterName default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek SmellDetectors UncommunicativeModuleName accept_patterns":{"type":"method","name":"accept_patterns","children":[],"call":[" Array "," value "," context "]}," Reek SmellDetectors UncommunicativeModuleName reject_patterns":{"type":"method","name":"reject_patterns","children":[],"call":[" Array "," value "," context "]}," Reek SmellDetectors UncommunicativeModuleName acceptable_name?":{"type":"method","name":"acceptable_name?","children":[],"call":["module_name match "," reject_patterns none? "," reject_patterns ","fully_qualified_name match "," accept_patterns any? "," accept_patterns "]}," Reek SmellDetectors UncommunicativeModuleName sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","exp line "," acceptable_name? ","exp simple_name ","context exp ","context full_name "," source_line "," context "," expression simple_name "," expression "," context full_name ","context exp  line ","context exp  simple_name ","context context exp  "," context exp ression simple_name "," context exp ression "]}," Reek SmellDetectors UncommunicativeModuleName contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek SmellDetectors UncommunicativeModuleName default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek SmellDetectors UncommunicativeMethodName accept_patterns":{"type":"method","name":"accept_patterns","children":[],"call":[" Array "," value "," context "]}," Reek SmellDetectors UncommunicativeMethodName reject_patterns":{"type":"method","name":"reject_patterns","children":[],"call":[" Array "," value "," context "]}," Reek SmellDetectors UncommunicativeMethodName acceptable_name?":{"type":"method","name":"acceptable_name?","children":[],"call":["name match "," reject_patterns none? "," reject_patterns "," accept_patterns any? "," accept_patterns "]}," Reek SmellDetectors UncommunicativeMethodName sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","context exp line ","context exp "," acceptable_name? ","context name to_s ","context name "," source_line "," context "," context name to_s "," context name "," acceptable_context name to_s ? "," acceptable_ context name to_s ? ","context context name to_s  to_s ","context  context name to_s  to_s ","context context name to_s  ","context  context name to_s  "," context context name to_s  to_s "," context  context name to_s  to_s "," context context name to_s  "," context  context name to_s  "]}," Reek SmellDetectors UncommunicativeMethodName default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek SmellDetectors TooManyStatements sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","ctx exp line ","ctx exp ","count <= ","ctx number_of_statements "," value "," source_line "," context "," max_allowed_statements "," context number_of_statements ","ctx number_of_statements  <= "," context number_of_statements  <= ","  value  "]}," Reek SmellDetectors TooManyStatements default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek SmellDetectors TooManyMethods sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","ctx exp line ","ctx exp ","actual <= ","ctx node_instance_methods length ","ctx node_instance_methods "," value "," source_line "," context "," max_allowed_methods "," context node_instance_methods length "," context node_instance_methods ","ctx node_instance_methods length  <= "," context node_instance_methods length  <= ","  value  "]}," Reek SmellDetectors TooManyMethods default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek SmellDetectors TooManyMethods contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek SmellDetectors TooManyInstanceVariables sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","ctx exp line ","ctx exp ","count <= ","variables uniq size ","variables uniq ","ctx local_nodes map ","ctx local_nodes "," value "," source_line "," context "," max_allowed_ivars "," context local_nodes map "," context local_nodes ","variables uniq size  <= ","ctx local_nodes map  uniq size "," context local_nodes map  uniq size ","ctx local_nodes map  uniq "," context local_nodes map  uniq ","  value  "]}," Reek SmellDetectors TooManyInstanceVariables default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek SmellDetectors TooManyInstanceVariables contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek SmellDetectors TooManyConstants build_smell_warning":{"type":"method","name":"build_smell_warning","children":[],"call":[" smell_warning ","ctx exp line ","ctx exp "," source_line "," context "]}," Reek SmellDetectors TooManyConstants sniff":{"type":"method","name":"sniff","children":[],"call":[" build_smell_warning ","count <= ","ctx each_node delete_if length ","ctx each_node delete_if ","ctx each_node "," value "," max_allowed_constants "," context each_node delete_if length "," context each_node delete_if "," context each_node "," context "," context local_nodes reject length "," context local_nodes reject "," context local_nodes ","it defines_module? ! ","it defines_module? "," context local_nodes count ","ctx each_node delete_if length  <= "," context each_node delete_if length  <= "," context local_nodes reject length  <= ","  value  "," context local_nodes ctx each_node delete_if length  "," context local_nodes  context each_node delete_if length  "," context local_nodes  context local_nodes reject length  "]}," Reek SmellDetectors TooManyConstants default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek SmellDetectors TooManyConstants contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek SmellDetectors SubclassedFromCoreClass build_smell_warning":{"type":"method","name":"build_smell_warning","children":[],"call":[" smell_warning ","ctx exp line ","ctx exp "," source_line "," context "]}," Reek SmellDetectors SubclassedFromCoreClass sniff_superclass":{"type":"method","name":"sniff_superclass","children":[],"call":[" build_smell_warning ","CORE_CLASSES  include? "]}," Reek SmellDetectors SubclassedFromCoreClass sniff":{"type":"method","name":"sniff","children":[],"call":[" sniff_superclass ","superclass name ","ctx exp superclass ","ctx exp "," expression superclass "," expression "," sniff_ctx exp superclass  "," sniff_ expression superclass  ","ctx exp superclass  name "," expression superclass  name ","ctx exp ctx exp superclass  ","ctx exp  expression superclass  "," expression ctx exp superclass  "," expression  expression superclass  "]}," Reek SmellDetectors SubclassedFromCoreClass contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek SmellDetectors SmellWarning base_hash":{"type":"method","name":"base_hash","children":[],"call":[" source "," smell_type "," message "," lines "," context "]}," Reek SmellDetectors SmellWarning identifying_values":{"type":"method","name":"identifying_values","children":[],"call":[" lines "," message "," context "," smell_type "]}," Reek SmellDetectors SmellWarning smell_class":{"type":"method","name":"smell_class","children":[],"call":[" smell_detector class "," smell_detector "]}," Reek SmellDetectors SmellWarning base_message":{"type":"method","name":"base_message","children":[],"call":[" message "," context "," smell_type "]}," Reek SmellDetectors SmellWarning to_hash":{"type":"method","name":"to_hash","children":[],"call":[" base_hash merge "," base_hash ","Hash  [] ","key to_s "," parameters map "," parameters "]}," Reek SmellDetectors SmellWarning eql?":{"type":"method","name":"eql?","children":[],"call":["(send\n  (self) :<=>\n  (lvar :other)) zero? "," <=> "]}," Reek SmellDetectors SmellWarning <=>":{"type":"method","name":"<=>","children":[],"call":[" identifying_values <=> ","other identifying_values "," identifying_values "]}," Reek SmellDetectors SmellWarning hash":{"type":"method","name":"hash","children":[],"call":[" identifying_values hash "," identifying_values "]}," Reek SmellDetectors SmellWarning initialize":{"type":"method","name":"initialize","children":[],"call":[" freeze ","context to_s "]}," Reek SmellDetectors Overrides for_context":{"type":"method","name":"for_context","children":[],"call":[" hash [] "," hash ","contexts map ","context matches? "," hash keys select "," hash keys "]}," Reek SmellDetectors Overrides initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek SmellDetectors SmellConfiguration value":{"type":"method","name":"value","children":[],"call":[" options fetch "," options ","conf [] ","conf key? "," overrides_for each "," overrides_for "]}," Reek SmellDetectors SmellConfiguration overrides_for":{"type":"method","name":"overrides_for","children":[],"call":["Overrides  new for_context ","Overrides  new "," options fetch "," options "]}," Reek SmellDetectors SmellConfiguration enabled?":{"type":"method","name":"enabled?","children":[],"call":[" options [] "," options "]}," Reek SmellDetectors SmellConfiguration merge":{"type":"method","name":"merge","children":[],"call":[" options merge! "," options "]}," Reek SmellDetectors SmellConfiguration initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek SmellDetectors RepeatedConditional conditional_counts":{"type":"method","name":"conditional_counts","children":[],"call":["sexp local_nodes ","(sym :if) each ","result [] push ","condition line ","result [] ","condition == ","node condition "," proc ","hash []= ","Hash  new "," context local_nodes "," context ","node condition  line ","node condition  == ","node node condition  "]}," Reek SmellDetectors RepeatedConditional sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","key format_to_ruby ","lines length ","(send\n  (send nil :conditional_counts\n    (lvar :ctx)) :select) map ","lines length > "," conditional_counts select "," conditional_counts "," value "," context ","(send\n  (send nil :conditional_counts) :select) map "," max_identical_ifs ","  value  "]}," Reek SmellDetectors RepeatedConditional default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek SmellDetectors RepeatedConditional contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek SmellDetectors PrimaDonnaMethod version_without_bang_exists?":{"type":"method","name":"version_without_bang_exists?","children":[],"call":["sexp_item name to_s == ","method_sexp name_without_bang ","sexp_item name to_s ","sexp_item name ","ctx node_instance_methods find ","ctx node_instance_methods "," context node_instance_methods find "," context node_instance_methods "," context "]}," Reek SmellDetectors PrimaDonnaMethod prima_donna_method?":{"type":"method","name":"prima_donna_method?","children":[],"call":[" version_without_bang_exists? ","method_sexp ends_with_bang? "," ignore_method? "]}," Reek SmellDetectors PrimaDonnaMethod sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","name to_s ","ctx exp line ","ctx exp ","method_sexp name ","(send\n  (send\n    (lvar :ctx) :node_instance_methods) :select) map "," prima_donna_method? ","ctx node_instance_methods select ","ctx node_instance_methods ","method_sexp line "," context ","(send\n  (send\n    (send nil :context) :node_instance_methods) :select) map "," context node_instance_methods select "," context node_instance_methods ","method_sexp name  to_s ","method_sexp method_sexp name  "]}," Reek SmellDetectors PrimaDonnaMethod contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek SmellDetectors NilCheck SafeNavigationNodeDetector detect":{"type":"method","name":"detect","children":[],"call":[]}," Reek SmellDetectors NilCheck NilWhenNodeDetector detect":{"type":"method","name":"detect","children":[],"call":["it type == ","it type ","node condition_list any? ","node condition_list "]}," Reek SmellDetectors NilCheck NilCallNodeDetector comparison_methods":{"type":"method","name":"comparison_methods","children":[],"call":[]}," Reek SmellDetectors NilCheck NilCallNodeDetector involves_nil?":{"type":"method","name":"involves_nil?","children":[],"call":["it type == ","it type ","call participants any? ","call participants "]}," Reek SmellDetectors NilCheck NilCallNodeDetector comparison_call?":{"type":"method","name":"comparison_call?","children":[],"call":[" comparison_methods include? ","call name "," comparison_methods "]}," Reek SmellDetectors NilCheck NilCallNodeDetector nil_comparison?":{"type":"method","name":"nil_comparison?","children":[],"call":[" involves_nil? "," comparison_call? "]}," Reek SmellDetectors NilCheck NilCallNodeDetector nil_query?":{"type":"method","name":"nil_query?","children":[],"call":["call name == ","call name "]}," Reek SmellDetectors NilCheck NilCallNodeDetector detect":{"type":"method","name":"detect","children":[],"call":[" nil_comparison? "," nil_query? "]}," Reek SmellDetectors NilCheck NodeFinder smelly_nodes":{"type":"method","name":"smelly_nodes","children":[],"call":[" detector detect "," detector "," nodes select "," nodes "]}," Reek SmellDetectors NilCheck NodeFinder initialize":{"type":"method","name":"initialize","children":[],"call":["ctx local_nodes "]}," Reek SmellDetectors NilCheck NodeDetector detect":{"type":"method","name":"detect","children":[],"call":["finders flat_map ","NodeFinder  new "," ctx "]}," Reek SmellDetectors NilCheck NodeDetector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek SmellDetectors NilCheck sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","lines any? ","NodeDetector  new detect map ","NodeDetector  new detect ","NodeDetector  new "," context "," detect_nodes map "," detect_nodes ","NodeDetector  new detect map  any? "," detect_nodes map  any? "]}," Reek SmellDetectors NestedIterators ignored_iterator?":{"type":"method","name":"ignored_iterator?","children":[],"call":["exp without_block_arguments? ","(begin\n  (lvar :pattern)) =~ ","exp call name ","exp call "," ignore_iterators any? "," ignore_iterators "]}," Reek SmellDetectors NestedIterators max_nesting":{"type":"method","name":"max_nesting","children":[],"call":[" value "]}," Reek SmellDetectors NestedIterators increment_depth":{"type":"method","name":"increment_depth","children":[],"call":["depth + "," ignored_iterator? "]}," Reek SmellDetectors NestedIterators configure_ignore_iterators":{"type":"method","name":"configure_ignore_iterators","children":[],"call":[" ignore_iterators= "," value "]}," Reek SmellDetectors NestedIterators scout":{"type":"method","name":"scout","children":[],"call":["Iterator  new ","nested_iterators empty? "," scout + "," scout ","iterator call ","iterator block "," increment_depth ","exp find_nodes flat_map ","exp find_nodes ","exp each_node flat_map ","exp each_node "," scout +  empty? "]}," Reek SmellDetectors NestedIterators find_candidates":{"type":"method","name":"find_candidates","children":[],"call":[" scout ","ctx exp "," expression ","ctx ctx exp  "," ctx exp ression "]}," Reek SmellDetectors NestedIterators find_violations":{"type":"method","name":"find_violations","children":[],"call":["it depth > ","it depth ","candidates select "," max_nesting "," find_candidates "," max_allowed_nesting "," find_candidates select "," find_candidates  select "," find_ find_candidates  ","  max_nesting  "," find_ find_candidates  select "]}," Reek SmellDetectors NestedIterators sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","group map ","violations group_by map ","violations group_by "," find_violations "," configure_ignore_iterators "," context "," find_violations group_by map "," find_violations group_by "," find_violations  group_by map "," find_violations  group_by "," find_ find_violations  "," find_ find_violations  group_by map "," find_ find_violations  group_by "]}," Reek SmellDetectors NestedIterators default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek SmellDetectors NestedIterators line":{"type":"method","name":"line","children":[],"call":[" exp line "," exp "]}," Reek SmellDetectors ModuleInitialize sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","ctx exp line ","ctx exp ","node name to_s == ","node name to_s ","node name ","ctx local_nodes ","node name == "," source_line "," context "," context local_nodes "," context defined_instance_methods each "," context defined_instance_methods "]}," Reek SmellDetectors ModuleInitialize contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek SmellDetectors ManualDispatch sniff":{"type":"method","name":"sniff","children":[],"call":["(send\n  (send\n    (lvar :ctx) :each_node\n    (sym :send)) :flat_map) compact "," smell_warning ","node line ","node name equal? ","node name ","ctx each_node flat_map ","ctx each_node ","smelly_nodes map ","smelly_nodes empty? ","node name == ","ctx each_node select "," context "," context each_node select "," context each_node "," context local_nodes select "," context local_nodes "]}," Reek SmellDetectors LongYieldList sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","yield_node line ","yield_node args length ","yield_node args ","(send\n  (send\n    (lvar :ctx) :local_nodes\n    (sym :yield)) :select) map ","yield_node args length > ","ctx local_nodes select ","ctx local_nodes "," value "," context ","(send\n  (send\n    (send nil :context) :local_nodes\n    (sym :yield)) :select) map "," max_allowed_params "," context local_nodes select "," context local_nodes ","  value  "]}," Reek SmellDetectors LongYieldList default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek SmellDetectors LongParameterList sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","exp line ","count <= ","exp arg_names length ","exp arg_names ","ctx exp "," value "," source_line "," context "," max_allowed_params "," expression arg_names length "," expression arg_names "," expression ","ctx exp  line ","exp arg_names length  <= "," expression arg_names length  <= ","ctx exp  arg_names length ","ctx exp  arg_names ","ctx ctx exp  ","  value  "," ctx exp ression arg_names length "," ctx exp ression arg_names "," ctx exp ression "]}," Reek SmellDetectors LongParameterList default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek SmellDetectors IrresponsibleModule descriptive?":{"type":"method","name":"descriptive?","children":[],"call":["ctx descriptively_commented? "," descriptive [] ","ctx full_name "," descriptive "]}," Reek SmellDetectors IrresponsibleModule descriptive":{"type":"method","name":"descriptive","children":[],"call":[]}," Reek SmellDetectors IrresponsibleModule sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","expression line ","ctx exp ","ctx namespace_module? "," descriptive? "," source_line "," context "," context namespace_module? "," descriptive_context? ","ctx exp  line "]}," Reek SmellDetectors IrresponsibleModule contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek SmellDetectors InstanceVariableAssumption ignored_nodes":{"type":"method","name":"ignored_nodes","children":[],"call":[]}," Reek SmellDetectors InstanceVariableAssumption assumption_nodes":{"type":"method","name":"assumption_nodes","children":[],"call":[]}," Reek SmellDetectors InstanceVariableAssumption variables_from_context":{"type":"method","name":"variables_from_context","children":[],"call":["(send\n  (lvar :instance_methods) :map) flatten ","method find_nodes map ","method find_nodes "," ignored_nodes "," assumption_nodes ","instance_methods map ","(send\n  (send nil :method_expressions) :map) flatten "," method_expressions map "," method_expressions ","method each_node map ","method each_node "]}," Reek SmellDetectors InstanceVariableAssumption variables_from_initialize":{"type":"method","name":"variables_from_initialize","children":[],"call":["initialize_exp each_node map ","initialize_exp each_node ","method name == ","method name ","instance_methods detect "," method_expressions detect "," method_expressions "]}," Reek SmellDetectors InstanceVariableAssumption build_smell_warning":{"type":"method","name":"build_smell_warning","children":[],"call":[" smell_warning ","assumption to_s ","ctx exp line ","ctx exp "," source_line "," context "]}," Reek SmellDetectors InstanceVariableAssumption sniff":{"type":"method","name":"sniff","children":[],"call":[" build_smell_warning ","assumptions map ","(send\n  (send nil :variables_from_context\n    (lvar :method_expressions)) :-\n  (send nil :variables_from_initialize\n    (lvar :method_expressions))) uniq "," variables_from_context - "," variables_from_initialize "," variables_from_context ","ctx node_instance_methods ","(send\n  (send nil :variables_from_context) :-\n  (send nil :variables_from_initialize)) uniq ","(send\n  (send nil :variables_from_context\n    (lvar :method_expressions)) :-\n  (send nil :variables_from_initialize\n    (lvar :method_expressions))) uniq  map ","(send\n  (send nil :variables_from_context) :-\n  (send nil :variables_from_initialize)) uniq  map ","(send\n  (send nil :variables_from_context\n    (lvar :ctx node_instance_methods )) :-\n  (send nil :variables_from_initialize\n    (lvar :ctx node_instance_methods ))) uniq "]}," Reek SmellDetectors InstanceVariableAssumption contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek SmellDetectors FeatureEnvy envious_receivers":{"type":"method","name":"envious_receivers","children":[],"call":["refs most_popular ","refs self_is_max? ","ctx refs "," refs most_popular "," refs "," refs self_is_max? ","ctx refs  most_popular ","ctx refs  self_is_max? ","ctx ctx refs  "," ctx refs  most_popular "," ctx refs  "," ctx refs  self_is_max? "]}," Reek SmellDetectors FeatureEnvy sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","name to_s "," envious_receivers map "," envious_receivers ","ctx references_self? "," context "," context references_self? "," context module_function? "," context singleton_method? "]}," Reek SmellDetectors DuplicateMethodCall CallCollector allow_calls?":{"type":"method","name":"allow_calls?","children":[],"call":["(begin\n  (lvar :allow)) =~ "," allow_calls any? "," allow_calls "]}," Reek SmellDetectors DuplicateMethodCall CallCollector simple_method_call?":{"type":"method","name":"simple_method_call?","children":[],"call":["call_node args empty? ","call_node args ","call_node receiver ! ","call_node receiver "]}," Reek SmellDetectors DuplicateMethodCall CallCollector smelly_call?":{"type":"method","name":"smelly_call?","children":[],"call":[" allow_calls? ! "," allow_calls? ","found_call call ","found_call occurs > "," max_allowed_calls ","found_call occurs "]}," Reek SmellDetectors DuplicateMethodCall CallCollector collect_calls":{"type":"method","name":"collect_calls","children":[],"call":["result [] record ","result [] "," context local_nodes "," context "," simple_method_call? ","call_node object_creation_call? "," context each_node "]}," Reek SmellDetectors DuplicateMethodCall CallCollector smelly_calls":{"type":"method","name":"smelly_calls","children":[],"call":[" smelly_call? "," calls select "," calls "]}," Reek SmellDetectors DuplicateMethodCall CallCollector calls":{"type":"method","name":"calls","children":[],"call":["result values sort_by ","result values "," collect_calls ","hash []= ","FoundCall  new ","Hash  new "]}," Reek SmellDetectors DuplicateMethodCall CallCollector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek SmellDetectors DuplicateMethodCall FoundCall lines":{"type":"method","name":"lines","children":[],"call":[" occurences map "," occurences "," occurrences map "," occurrences "]}," Reek SmellDetectors DuplicateMethodCall FoundCall occurs":{"type":"method","name":"occurs","children":[],"call":[" occurences length "," occurences "," occurrences length "," occurrences "]}," Reek SmellDetectors DuplicateMethodCall FoundCall call":{"type":"method","name":"call","children":[],"call":[" call_node format_to_ruby "," call_node "]}," Reek SmellDetectors DuplicateMethodCall FoundCall record":{"type":"method","name":"record","children":[],"call":[" occurences push "," occurences "," occurrences push "," occurrences "]}," Reek SmellDetectors DuplicateMethodCall FoundCall initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek SmellDetectors DuplicateMethodCall sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","found_call occurs ","found_call call ","found_call lines ","collector smelly_calls map ","collector smelly_calls ","CallCollector  new "," value "," context "," allow_calls "," max_allowed_calls ","found_call found_call occurs  ","found_found_call call  occurs ","found_found_call call  found_call call  ","found_found_call call  lines ","CallCollector  new  smelly_calls map ","collector smelly_found_call call s map ","CallCollector  new  smelly_calls ","collector smelly_found_call call s ","  value  "," allow_found_call call s "," max_allowed_found_call call s "]}," Reek SmellDetectors DuplicateMethodCall default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek SmellDetectors DetectorRepository enabled_detectors":{"type":"method","name":"enabled_detectors","children":[],"call":["detector config enabled? ","detector config "," detectors select "," detectors "]}," Reek SmellDetectors DetectorRepository smell_detectors_for":{"type":"method","name":"smell_detectors_for","children":[],"call":["detector contexts include? ","detector contexts "," enabled_detectors select "," enabled_detectors "]}," Reek SmellDetectors DetectorRepository configuration_for":{"type":"method","name":"configuration_for","children":[],"call":[" configuration fetch "," configuration "]}," Reek SmellDetectors DetectorRepository examine":{"type":"method","name":"examine","children":[],"call":["detector run_for "," smell_detectors_for flat_map "," smell_detectors_for ","context type "]}," Reek SmellDetectors DetectorRepository initialize":{"type":"method","name":"initialize","children":[],"call":["klass new "," configuration_for ","smell_types map "]}," Reek SmellDetectors DetectorRepository eligible_smell_types":{"type":"method","name":"eligible_smell_types","children":[],"call":[]}," Reek SmellDetectors DetectorRepository smell_types":{"type":"method","name":"smell_types","children":[],"call":[]}," Reek SmellDetectors DataClump print_clump":{"type":"method","name":"print_clump","children":[],"call":[]}," Reek SmellDetectors DataClump sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","clump map ","DataClump  print_clump ","methods map ","methods length ","MethodGroup  new clumps map ","MethodGroup  new clumps ","MethodGroup  new "," value "," context "," max_copies "," min_clump_size "," clumps map "," clumps ","  value  "]}," Reek SmellDetectors DataClump default_config":{"type":"method","name":"default_config","children":[],"call":[]}," Reek SmellDetectors DataClump contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek SmellDetectors ControlParameter ControlParameterCollector find_matches":{"type":"method","name":"find_matches","children":[],"call":["ControlParameterFinder  new find_matches ","ControlParameterFinder  new "," context exp "," context "]}," Reek SmellDetectors ControlParameter ControlParameterCollector potential_parameters":{"type":"method","name":"potential_parameters","children":[],"call":[" context exp parameter_names "," context exp "," context "]}," Reek SmellDetectors ControlParameter ControlParameterCollector control_parameters":{"type":"method","name":"control_parameters","children":[],"call":["(send\n  (send nil :potential_parameters) :map) select ","FoundControlParameter  new "," find_matches "," potential_parameters map "," potential_parameters "]}," Reek SmellDetectors ControlParameter ControlParameterCollector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek SmellDetectors ControlParameter ControlParameterFinder uses_param_in_body?":{"type":"method","name":"uses_param_in_body?","children":[],"call":["lvar_node var_name == "," param ","lvar_node var_name ","nodes any? "," node body_nodes "," node "," node body_nodes  any? "," node body_ node body_nodes  "]}," Reek SmellDetectors ControlParameter ControlParameterFinder call_involving_param?":{"type":"method","name":"call_involving_param?","children":[],"call":["it var_name == "," param ","it var_name ","call_node each_node any? ","call_node each_node "]}," Reek SmellDetectors ControlParameter ControlParameterFinder comparison_method_names":{"type":"method","name":"comparison_method_names","children":[],"call":[]}," Reek SmellDetectors ControlParameter ControlParameterFinder comparison_call?":{"type":"method","name":"comparison_call?","children":[],"call":[" comparison_method_names include? ","call_node name "," comparison_method_names "]}," Reek SmellDetectors ControlParameter ControlParameterFinder regular_call_involving_param?":{"type":"method","name":"regular_call_involving_param?","children":[],"call":[" comparison_call? ! "," comparison_call? "," call_involving_param? "]}," Reek SmellDetectors ControlParameter ControlParameterFinder condition":{"type":"method","name":"condition","children":[],"call":[" node condition "," node ","CONDITIONAL_NODE_TYPES  include? "," node type "]}," Reek SmellDetectors ControlParameter ControlParameterFinder uses_of_param_in_condition":{"type":"method","name":"uses_of_param_in_condition","children":[],"call":["inner var_name == "," param ","inner var_name "," condition each_node select "," condition each_node "," condition "]}," Reek SmellDetectors ControlParameter ControlParameterFinder uses_param_in_call_in_condition?":{"type":"method","name":"uses_param_in_call_in_condition?","children":[],"call":[" regular_call_involving_param? "," condition each_node "," condition "]}," Reek SmellDetectors ControlParameter ControlParameterFinder nested_finders":{"type":"method","name":"nested_finders","children":[],"call":[" class new "," param "," class "," conditional_nodes flat_map "," conditional_nodes "]}," Reek SmellDetectors ControlParameter ControlParameterFinder conditional_nodes":{"type":"method","name":"conditional_nodes","children":[],"call":[" node body_nodes "," node "]}," Reek SmellDetectors ControlParameter ControlParameterFinder legitimite_uses?":{"type":"method","name":"legitimite_uses?","children":[],"call":[" nested_finders any? "," nested_finders "," uses_param_in_call_in_condition? "," uses_param_in_body? "]}," Reek SmellDetectors ControlParameter ControlParameterFinder find_matches":{"type":"method","name":"find_matches","children":[],"call":[" nested_finders flat_map + "," uses_of_param_in_condition "," nested_finders flat_map "," nested_finders "," legitimite_uses? "]}," Reek SmellDetectors ControlParameter ControlParameterFinder initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek SmellDetectors ControlParameter FoundControlParameter name":{"type":"method","name":"name","children":[],"call":[" param to_s "," param "]}," Reek SmellDetectors ControlParameter FoundControlParameter lines":{"type":"method","name":"lines","children":[],"call":[" occurences map "," occurences "]}," Reek SmellDetectors ControlParameter FoundControlParameter smells?":{"type":"method","name":"smells?","children":[],"call":[" occurences any? "," occurences "]}," Reek SmellDetectors ControlParameter FoundControlParameter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek SmellDetectors ControlParameter sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","control_parameter lines ","control_parameter name to_s ","control_parameter name ","ControlParameterCollector  new control_parameters map ","ControlParameterCollector  new control_parameters ","ControlParameterCollector  new "," context "," control_parameters map "," control_parameters "]}," Reek SmellDetectors ClassVariable class_variables_in":{"type":"method","name":"class_variables_in","children":[],"call":["exp each_node ","(sym :cvar) each ","result [] push ","cvar_node line ","result [] ","cvar_node name "," proc ","hash []= ","Hash  new "]}," Reek SmellDetectors ClassVariable sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","variable to_s "," class_variables_in map "," class_variables_in ","ctx exp "," context "," class_variables_in_context map "," class_variables_in_context ","occurences map ","occurrences map "]}," Reek SmellDetectors ClassVariable contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek SmellDetectors BooleanParameter sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","parameter to_s ","ctx exp line ","ctx exp ","(send\n  (send\n    (lvar :ctx) :default_assignments) :select) map ","(sym :true) include? ","value type ","ctx default_assignments select ","ctx default_assignments "," source_line "," context ","(send\n  (send\n    (send nil :context) :default_assignments) :select) map "," context default_assignments select "," context default_assignments ","BOOLEAN_VALUES  include? "]}," Reek SmellDetectors BaseDetector valid_detector?":{"type":"method","name":"valid_detector?","children":[],"call":["(send\n  (send nil :descendants) :map) include? ","descendant to_s split last ","descendant to_s split ","descendant to_s "," descendants map "," descendants "]}," Reek SmellDetectors BaseDetector descendants":{"type":"method","name":"descendants","children":[],"call":[]}," Reek SmellDetectors BaseDetector inherited":{"type":"method","name":"inherited","children":[],"call":[" descendants << "," descendants "]}," Reek SmellDetectors BaseDetector default_config":{"type":"method","name":"default_config","children":[],"call":["DEFAULT_EXCLUDE_SET  dup "]}," Reek SmellDetectors BaseDetector contexts":{"type":"method","name":"contexts","children":[],"call":[" class contexts "," class "]}," Reek SmellDetectors BaseDetector smell_type":{"type":"method","name":"smell_type","children":[],"call":[" name split last "," name split "," name "," class smell_type "," class "]}," Reek SmellDetectors BaseDetector smell_warning":{"type":"method","name":"smell_warning","children":[],"call":["SmellWarning  new ","options fetch ","context full_name ","exp source ","context exp "," context full_name "," context "," expression source "," expression "," smell_type ","options fetch  full_name ","context exp  source ","context context exp  ","options fetch  exp "," options fetch  full_name "," options fetch  "," context exp ression source "," context exp ression "]}," Reek SmellDetectors BaseDetector config_for":{"type":"method","name":"config_for","children":[],"call":["ctx config_for "," class "]}," Reek SmellDetectors BaseDetector value":{"type":"method","name":"value","children":[],"call":[" config value "," config "," config_for [] "," config_for "]}," Reek SmellDetectors BaseDetector enabled_for?":{"type":"method","name":"enabled_for?","children":[],"call":[" config_for [] != "," config_for [] "," config_for "," config enabled? "," config "]}," Reek SmellDetectors BaseDetector todo_configuration_for":{"type":"method","name":"todo_configuration_for","children":[],"call":[]}," Reek SmellDetectors BaseDetector exception?":{"type":"method","name":"exception?","children":[],"call":["context matches? "," value "," context matches? "," context "]}," Reek SmellDetectors BaseDetector run_for":{"type":"method","name":"run_for","children":[],"call":[" sniff "," exception? "," enabled_for? "]}," Reek SmellDetectors BaseDetector initialize":{"type":"method","name":"initialize","children":[],"call":["SmellConfiguration  new "," class default_config merge "," class default_config "," class "]}," Reek SmellDetectors Attribute attributes_in":{"type":"method","name":"attributes_in","children":[],"call":["call_node line ","call_node name ","module_ctx exp ","module_ctx visibility == ","module_ctx visibility ","module_ctx exp  line ","module_ctx exp  name "]}," Reek SmellDetectors Attribute sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning "," attributes_in map "," attributes_in "," context "," attributes_in_context map "," attributes_in_context "]}," Reek SmellDetectors Attribute contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek SmellDetectors Attribute initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Report progress_formatter":{"type":"method","name":"progress_formatter","children":[],"call":[]}," Reek Report TextReport add_examiner":{"type":"method","name":"add_examiner","children":[],"call":[" print "," progress_formatter progress "," progress_formatter "]}," Reek Report TextReport initialize":{"type":"method","name":"initialize","children":[],"call":[" print "," progress_formatter header "," progress_formatter "]}," Reek Report Formatter WikiLinkWarningFormatter class_name_to_param":{"type":"method","name":"class_name_to_param","children":[],"call":["name split join ","name split "]}," Reek Report Formatter WikiLinkWarningFormatter explanatory_link":{"type":"method","name":"explanatory_link","children":[],"call":[" class_name_to_param ","warning smell_type "]}," Reek Report Formatter WikiLinkWarningFormatter format_hash":{"type":"method","name":"format_hash","children":[],"call":[" merge "," explanatory_link ","warning explanatory_link "]}," Reek Report Formatter WikiLinkWarningFormatter format":{"type":"method","name":"format","children":[],"call":[" explanatory_link ","warning explanatory_link "]}," Reek Report Formatter SimpleWarningFormatter format_code_climate_hash":{"type":"method","name":"format_code_climate_hash","children":[],"call":["CodeClimateFormatter  new render ","CodeClimateFormatter  new "]}," Reek Report Formatter SimpleWarningFormatter format_hash":{"type":"method","name":"format_hash","children":[],"call":["warning yaml_hash "]}," Reek Report Formatter SimpleWarningFormatter format":{"type":"method","name":"format","children":[],"call":["warning base_message "," location_formatter format "," location_formatter "]}," Reek Report Formatter SimpleWarningFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Report Formatter ProgressFormatter Quiet footer":{"type":"method","name":"footer","children":[],"call":[]}," Reek Report Formatter ProgressFormatter Quiet progress":{"type":"method","name":"progress","children":[],"call":[]}," Reek Report Formatter ProgressFormatter Quiet header":{"type":"method","name":"header","children":[],"call":[]}," Reek Report Formatter ProgressFormatter Dots display_smelly":{"type":"method","name":"display_smelly","children":[],"call":[" Rainbow color "," Rainbow "]}," Reek Report Formatter ProgressFormatter Dots display_clean":{"type":"method","name":"display_clean","children":[],"call":[" Rainbow color "," Rainbow "]}," Reek Report Formatter ProgressFormatter Dots footer":{"type":"method","name":"footer","children":[],"call":[]}," Reek Report Formatter ProgressFormatter Dots progress":{"type":"method","name":"progress","children":[],"call":[" display_clean "," display_smelly ","examiner smelly? "]}," Reek Report Formatter ProgressFormatter Dots header":{"type":"method","name":"header","children":[],"call":[" sources_count "]}," Reek Report Formatter ProgressFormatter Base footer":{"type":"method","name":"footer","children":[],"call":[" raise "]}," Reek Report Formatter ProgressFormatter Base progress":{"type":"method","name":"progress","children":[],"call":[" raise "]}," Reek Report Formatter ProgressFormatter Base header":{"type":"method","name":"header","children":[],"call":[" raise "]}," Reek Report Formatter ProgressFormatter Base initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Report Formatter SingleLineLocationFormatter format":{"type":"method","name":"format","children":[],"call":["warning lines sort first ","warning lines sort ","warning lines ","warning source "]}," Reek Report Formatter DefaultLocationFormatter format":{"type":"method","name":"format","children":[],"call":["warning lines sort inspect ","warning lines sort ","warning lines "]}," Reek Report Formatter BlankLocationFormatter format":{"type":"method","name":"format","children":[],"call":[]}," Reek Report Formatter QuietHeadingFormatter show_header?":{"type":"method","name":"show_header?","children":[],"call":["examiner smelly? "]}," Reek Report Formatter VerboseHeadingFormatter show_header?":{"type":"method","name":"show_header?","children":[],"call":[]}," Reek Report Formatter HeadingFormatterBase header":{"type":"method","name":"header","children":[],"call":[" report_formatter header "," report_formatter "," show_header? "]}," Reek Report Formatter HeadingFormatterBase show_header?":{"type":"method","name":"show_header?","children":[],"call":[" raise "]}," Reek Report Formatter HeadingFormatterBase initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Report CodeClimateFormatter fingerprint":{"type":"method","name":"fingerprint","children":[],"call":["CodeClimateFingerprint  new compute ","CodeClimateFingerprint  new "," warning "]}," Reek Report CodeClimateFingerprint warning_uniquely_identifiable?":{"type":"method","name":"warning_uniquely_identifiable?","children":[],"call":["(str \"ManualDispatch\") include? ! ","(str \"ManualDispatch\") include? "," warning smell_type "," warning "]}," Reek Report CodeClimateFingerprint parameters":{"type":"method","name":"parameters","children":[],"call":[" warning parameters except sort to_s "," warning parameters except sort "," warning parameters except "," warning parameters "," warning ","(send\n  (send\n    (send nil :warning) :parameters) :reject) sort to_s ","(send\n  (send\n    (send nil :warning) :parameters) :reject) sort ","NON_IDENTIFYING_PARAMETERS  include? "," warning parameters reject "]}," Reek Report CodeClimateFingerprint identifying_aspects":{"type":"method","name":"identifying_aspects","children":[],"call":["Digest MD5  new "]}," Reek Report CodeClimateFingerprint identify_warning":{"type":"method","name":"identify_warning","children":[],"call":[" identifying_aspects << "," parameters "," identifying_aspects "," warning context "," warning "," warning smell_type "," warning source "]}," Reek Report CodeClimateFingerprint compute":{"type":"method","name":"compute","children":[],"call":[" identifying_aspects hexdigest "," identifying_aspects "," identify_warning "," warning_uniquely_identifiable? "," identifying_aspects hexdigest freeze "]}," Reek Report CodeClimateFingerprint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Report BaseReport smells":{"type":"method","name":"smells","children":[],"call":[" examiners map flatten "," examiners map "," examiners "]}," Reek Report BaseReport smells?":{"type":"method","name":"smells?","children":[],"call":[" total_smell_count > "," total_smell_count "," total_smell_count positive? "]}," Reek Report BaseReport show":{"type":"method","name":"show","children":[],"call":[" raise "]}," Reek Report BaseReport add_examiner":{"type":"method","name":"add_examiner","children":[],"call":[" examiners << "," examiners ","examiner smells_count "," total_smell_count "]}," Reek Report BaseReport initialize":{"type":"method","name":"initialize","children":[],"call":["heading_formatter new "]}," Reek Errors GarbageDetectorConfigurationInCommentError initialize":{"type":"method","name":"initialize","children":[],"call":[" format "]}," Reek Errors BadDetectorInCommentError initialize":{"type":"method","name":"initialize","children":[],"call":[" format "]}," Reek CodeComment CodeCommentValidator escalate_bad_detector_configuration":{"type":"method","name":"escalate_bad_detector_configuration","children":[],"call":[" raise "," line "," source "," original_comment "," detector_name ","YAML  load "," options ","YAML  safe_load ","Errors GarbageDetectorConfigurationInCommentError  new "]}," Reek CodeComment CodeCommentValidator escalate_bad_detector":{"type":"method","name":"escalate_bad_detector","children":[],"call":[" raise "," line "," source "," original_comment "," detector_name ","SmellDetectors BaseDetector  valid_detector? ","Errors BadDetectorInCommentError  new "]}," Reek CodeComment CodeCommentValidator validate":{"type":"method","name":"validate","children":[],"call":[" escalate_bad_detector_configuration "," escalate_bad_detector "," escalate_unknown_configuration_key "]}," Reek CodeComment CodeCommentValidator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek CLI Options set_up_progress_formatting_options":{"type":"method","name":"set_up_progress_formatting_options","children":[],"call":[" progress_format= "," parser on "," parser "]}," Reek CLI Options tty_output?":{"type":"method","name":"tty_output?","children":[],"call":["$stdout tty? "]}," Reek CLI Command ReportCommand progress_formatter":{"type":"method","name":"progress_formatter","children":[],"call":["Report  progress_formatter "," options progress_format "," options "]}," Reek CLI Application disable_progress_output_unless_verbose":{"type":"method","name":"disable_progress_output_unless_verbose","children":[],"call":[" options progress_format= "," options "," options show_empty "]}," Reek SmellDetectors BaseDetector configuration_keys":{"type":"method","name":"configuration_keys","children":[],"call":["Set  new "," default_config keys map "," default_config keys "," default_config "]}," Reek SmellDetectors BaseDetector to_detector":{"type":"method","name":"to_detector","children":[],"call":["SmellDetectors  const_get "]}," Reek Report CodeClimateConfiguration load":{"type":"method","name":"load","children":[],"call":[]}," Reek Errors BadDetectorConfigurationKeyInCommentError initialize":{"type":"method","name":"initialize","children":[],"call":[" format "]}," Reek CodeComment CodeCommentValidator valid_detector_keys":{"type":"method","name":"valid_detector_keys","children":[],"call":[" detector_class configuration_keys "," detector_class "]}," Reek CodeComment CodeCommentValidator configuration_keys_difference":{"type":"method","name":"configuration_keys_difference","children":[],"call":["(send\n  (send\n    (send\n      (send nil :given_configuration_keys) :difference\n      (send nil :valid_detector_keys)) :to_a) :map) join "," given_configuration_keys difference to_a map "," given_configuration_keys difference to_a "," given_configuration_keys difference "," valid_detector_keys "," given_configuration_keys "]}," Reek CodeComment CodeCommentValidator given_configuration_keys":{"type":"method","name":"given_configuration_keys","children":[],"call":[" parsed_options keys map to_set "," parsed_options keys map "," parsed_options keys "," parsed_options "]}," Reek CodeComment CodeCommentValidator given_keys_legit?":{"type":"method","name":"given_keys_legit?","children":[],"call":[" given_configuration_keys subset? "," valid_detector_keys "," given_configuration_keys "]}," Reek CodeComment CodeCommentValidator escalate_unknown_configuration_key":{"type":"method","name":"escalate_unknown_configuration_key","children":[],"call":[" raise "," line "," source "," original_comment "," configuration_keys_difference "," detector_name "," given_keys_legit? ","SmellDetectors BaseDetector  to_detector ","Errors BadDetectorConfigurationKeyInCommentError  new "]}," Reek Configuration ConfigurationFileFinder escalate_too_many_configuration_files":{"type":"method","name":"escalate_too_many_configuration_files","children":[],"call":[" exit "," warn "," format ","(send\n  (lvar :found) :map) join ","file basename ","found map "]}," Reek SmellWarning base_hash":{"type":"method","name":"base_hash","children":[],"call":[" source "," smell_type "," message "," lines "," context "]}," Reek SmellWarning identifying_values":{"type":"method","name":"identifying_values","children":[],"call":[" lines "," message "," context "," smell_type "]}," Reek SmellWarning base_message":{"type":"method","name":"base_message","children":[],"call":[" message "," context "," smell_type "]}," Reek SmellWarning to_hash":{"type":"method","name":"to_hash","children":[],"call":[" base_hash merge "," base_hash ","Hash  [] ","key to_s "," parameters map "," parameters ","(send\n  (send nil :parameters) :map) to_h "," parameters transform_keys "]}," Reek SmellConfiguration merge":{"type":"method","name":"merge","children":[],"call":[" options merge! "," options "]}," Reek DetectorRepository enabled_detectors":{"type":"method","name":"enabled_detectors","children":[],"call":["detector config enabled? ","detector config "," detectors select "," detectors "]}," Reek DetectorRepository smell_detectors_for":{"type":"method","name":"smell_detectors_for","children":[],"call":["detector contexts include? ","detector contexts "," enabled_detectors select "," enabled_detectors "," smell_types select "," smell_types "]}," Reek DetectorRepository configuration_for":{"type":"method","name":"configuration_for","children":[],"call":[" configuration fetch "," configuration "]}," Reek DetectorRepository examine":{"type":"method","name":"examine","children":[],"call":["detector run_for "," smell_detectors_for flat_map "," smell_detectors_for ","context type ","detector run ","klass new "," configuration_for ","klass new  run_for "," smell_klass new s_for flat_map "," smell_klass new s_for ","klass new  run "]}," Reek DetectorRepository initialize":{"type":"method","name":"initialize","children":[],"call":["klass new "," configuration_for ","smell_types map "]}," Reek DetectorRepository eligible_smell_types":{"type":"method","name":"eligible_smell_types","children":[],"call":[]}," Reek DetectorRepository smell_types":{"type":"method","name":"smell_types","children":[],"call":[]}," Reek ContextBuilder process_super":{"type":"method","name":"process_super","children":[],"call":[" current_context record_use_of_self "," current_context "," process "]}," Reek SmellDetectors PrimaDonnaMethod ignore_method?":{"type":"method","name":"ignore_method?","children":[],"call":["ignore_method_names include? ","method_node name to_s ","method_node name "," value "," ignore_method_names include? "," ignore_method_names "," value  include? ","  value  include? ","  value  "]}," Reek LoggingErrorHandler handle":{"type":"method","name":"handle","children":[],"call":[" warn ","exception long_message ","exception message "]}," Reek Examiner NullHandler handle":{"type":"method","name":"handle","children":[],"call":[]}," Reek Errors IncomprehensibleSourceError initialize":{"type":"method","name":"initialize","children":[],"call":[" format ","original_exception backtrace join ","original_exception backtrace ","original_exception message ","original_exception  format  "]}," Reek Source SourceLocator ignore_file?":{"type":"method","name":"ignore_file?","children":[],"call":[" path_excluded? ","path ascend "," options force_exclusion? "," options "]}," Reek Errors ParseError initialize":{"type":"method","name":"initialize","children":[],"call":[" format ","original_exception message ","original_exception class name ","original_exception class ","original_exception  format  "]}," Reek CLI Options set_up_force_exclusion_option":{"type":"method","name":"set_up_force_exclusion_option","children":[],"call":[" force_exclusion= "," parser on "," parser "]}," Reek CLI Options force_exclusion?":{"type":"method","name":"force_exclusion?","children":[],"call":[]}," Reek Source SourceCode default_parser":{"type":"method","name":"default_parser","children":[],"call":["diagnostics ignore_warnings= ","diagnostics all_errors_are_fatal= ","parser diagnostics ","Parser Ruby24  new tap ","Parser Ruby24  new ","AST Builder  new ","diagnostics consumer= ","@diagnostics << "," lambda ","Parser Ruby25  new tap ","Parser Ruby25  new ","parser diagnostics  ignore_warnings= ","parser diagnostics  all_errors_are_fatal= ","parser parser diagnostics  ","parser diagnostics  consumer= ","@parser diagnostics  << "]}," Reek AST Builder string_value":{"type":"method","name":"string_value","children":[],"call":[" value "]}," Reek Source SourceCode parse":{"type":"method","name":"parse","children":[],"call":["TreeDresser  new dress ","TreeDresser  new ","Parser Source Comment  associate ","parser parse_with_comments ","buffer source= ","Parser Source Buffer  new "," origin "," raise ","source force_encoding "," parser diagnostics consumer result "," parser diagnostics consumer "," parser diagnostics "," parser "," parser parse_with_comments "," code ","AST Node  new ","Parser Source Buffer  new  source= "]}," Reek Source SourceCode valid_syntax?":{"type":"method","name":"valid_syntax?","children":[],"call":["(sym :error) include? ","diagnostic level ","@diagnostics none? "," diagnostics none? "," diagnostics "]}," Reek SmellDetectors Syntax smells_from_source":{"type":"method","name":"smells_from_source","children":[],"call":[" smell_warning ","diagnostic message ","diagnostic location line ","diagnostic location ","source diagnostics map ","source diagnostics ","DummyContext  new ","DummyExp  new ","source origin "]}," Reek SmellDetectors Syntax contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek AST SexpExtensions ModuleNodeBase direct_children":{"type":"method","name":"direct_children","children":[],"call":["contents statements "," children last "," children "," children last  statements "]}," Reek AST SexpExtensions ConstantDefiningNodeBase simple_name":{"type":"method","name":"simple_name","children":[],"call":[" name split last "," name split "," name "]}," Reek AST SexpExtensions ConstantDefiningNodeBase full_name":{"type":"method","name":"full_name","children":[],"call":["(lvar :outer) reject join ","(lvar :outer) reject "," name "]}," Reek AST SexpExtensions BeginNode statements":{"type":"method","name":"statements","children":[],"call":[" children "]}," Reek AST Node statements":{"type":"method","name":"statements","children":[],"call":[]}," Reek SmellDetectors UncommunicativeParameterName uncommunicative_parameter?":{"type":"method","name":"uncommunicative_parameter?","children":[],"call":["parameter marked_unused? ! ","parameter marked_unused? ","context uses_param? "," acceptable_name? ! "," acceptable_name? "," context uses_param? "," context ","parameter plain_name "]}," Reek SmellDetectors BaseDetector enabled?":{"type":"method","name":"enabled?","children":[],"call":[" config_for [] != "," config_for [] "," config_for "," context "," config enabled? "," config "]}," Reek SmellDetectors BaseDetector run":{"type":"method","name":"run","children":[],"call":[" sniff "," context "," exception? "," enabled? "]}," Reek Context MethodContext full_comment":{"type":"method","name":"full_comment","children":[],"call":[" parent_exp full_comment "," parent_exp ","own empty? "]}," Reek Source SourceCode parse_if_needed":{"type":"method","name":"parse_if_needed","children":[],"call":[" parse "]}," Reek Source SourceCode diagnostics":{"type":"method","name":"diagnostics","children":[],"call":[" parse_if_needed "," parse_result last "," parse_result "]}," Reek SmellDetectors UncommunicativeVariableName accept_names":{"type":"method","name":"accept_names","children":[],"call":[" value "," context "]}," Reek SmellDetectors UncommunicativeVariableName reject_names":{"type":"method","name":"reject_names","children":[],"call":[" value "," context "]}," Reek SmellDetectors TooManyStatements max_allowed_statements":{"type":"method","name":"max_allowed_statements","children":[],"call":[" value "," context "]}," Reek SmellDetectors TooManyMethods max_allowed_methods":{"type":"method","name":"max_allowed_methods","children":[],"call":[" value "," context "]}," Reek SmellDetectors TooManyInstanceVariables max_allowed_ivars":{"type":"method","name":"max_allowed_ivars","children":[],"call":[" value "," context "]}," Reek SmellDetectors TooManyConstants max_allowed_constants":{"type":"method","name":"max_allowed_constants","children":[],"call":[" value "," context "]}," Reek SmellDetectors RepeatedConditional max_identical_ifs":{"type":"method","name":"max_identical_ifs","children":[],"call":[" value "," context "]}," Reek SmellDetectors PrimaDonnaMethod ignore_method_names":{"type":"method","name":"ignore_method_names","children":[],"call":[" value "," context "]}," Reek SmellDetectors NilCheck detect_nodes":{"type":"method","name":"detect_nodes","children":[],"call":["finders flat_map ","NodeFinder  new "," context "]}," Reek SmellDetectors NestedIterators max_allowed_nesting":{"type":"method","name":"max_allowed_nesting","children":[],"call":[" value "," context "]}," Reek SmellDetectors NestedIterators ignore_iterators":{"type":"method","name":"ignore_iterators","children":[],"call":[" value "," context "]}," Reek SmellDetectors LongYieldList max_allowed_params":{"type":"method","name":"max_allowed_params","children":[],"call":[" value "," context "]}," Reek SmellDetectors LongParameterList max_allowed_params":{"type":"method","name":"max_allowed_params","children":[],"call":[" value "," context "]}," Reek SmellDetectors IrresponsibleModule descriptive_context?":{"type":"method","name":"descriptive_context?","children":[],"call":[" context descriptively_commented? "," context "]}," Reek SmellDetectors InstanceVariableAssumption method_expressions":{"type":"method","name":"method_expressions","children":[],"call":[" context node_instance_methods "," context "]}," Reek SmellDetectors FeatureEnvy refs":{"type":"method","name":"refs","children":[],"call":[" context refs "," context "]}," Reek SmellDetectors DuplicateMethodCall allow_calls":{"type":"method","name":"allow_calls","children":[],"call":[" value "," context "]}," Reek SmellDetectors DuplicateMethodCall max_allowed_calls":{"type":"method","name":"max_allowed_calls","children":[],"call":[" value "," context "]}," Reek SmellDetectors DataClump min_clump_size":{"type":"method","name":"min_clump_size","children":[],"call":[" value "," context "]}," Reek SmellDetectors DataClump max_copies":{"type":"method","name":"max_copies","children":[],"call":[" value "," context "]}," Reek SmellDetectors ClassVariable class_variables_in_context":{"type":"method","name":"class_variables_in_context","children":[],"call":[" expression each_node "," expression ","(sym :cvar) each ","result [] push ","cvar_node line ","result [] ","cvar_node name "," proc ","hash []= ","Hash  new "," context local_nodes group_by "," context local_nodes "," context "]}," Reek SmellDetectors BaseDetector source_line":{"type":"method","name":"source_line","children":[],"call":[" expression line "," expression "]}," Reek SmellDetectors BaseDetector expression":{"type":"method","name":"expression","children":[],"call":[" context exp "," context "]}," Reek SmellDetectors Attribute attributes_in_context":{"type":"method","name":"attributes_in_context","children":[],"call":["call_node line ","call_node name "," expression "," context visibility == "," context visibility "," context "," expression  line "," expression  name "]}," Reek Examiner wrap_exception":{"type":"method","name":"wrap_exception","children":[],"call":["Errors IncomprehensibleSourceError  new "," origin "]}," Reek Errors EncodingError initialize":{"type":"method","name":"initialize","children":[],"call":[" format ","original_exception backtrace join ","original_exception backtrace ","original_exception message ","original_exception  format  "]}," Reek Examiner report_syntax_errors":{"type":"method","name":"report_syntax_errors","children":[],"call":["SmellDetectors Syntax  smells_from_source "," source "]}," Reek Examiner wrap_exceptions":{"type":"method","name":"wrap_exceptions","children":[],"call":[" raise "," origin ","Errors IncomprehensibleSourceError  new ","Errors SyntaxError  new ","Errors EncodingError  new "]}," Reek Errors IncomprehensibleSourceError long_message":{"type":"method","name":"long_message","children":[],"call":[" format "," cause backtrace join "," cause backtrace "," cause "," cause inspect "," message "]}," Reek Errors EncodingError long_message":{"type":"method","name":"long_message","children":[],"call":[" format "," cause backtrace join "," cause backtrace "," cause "," cause inspect "," message "]}," Reek Errors BaseError long_message":{"type":"method","name":"long_message","children":[],"call":[" message "]}," Reek AST Node look_for_recurse":{"type":"method","name":"look_for_recurse","children":[],"call":["elem look_for_recurse "," each_sexp ","ignoring include? "," type ","target_types include? "]}," Reek AST Node look_for":{"type":"method","name":"look_for","children":[],"call":["elem look_for_recurse "," each_sexp ","ignoring include? "," type ","target_types include? "]}," Reek AST Node name":{"type":"method","name":"name","children":[],"call":[" to_s "]}," Reek Source SourceCode parse_result":{"type":"method","name":"parse_result","children":[],"call":[" parse "]}," Reek Source SourceCode DiagnosticsConsumer result":{"type":"method","name":"result","children":[],"call":[]}," Reek Source SourceCode DiagnosticsConsumer call":{"type":"method","name":"call","children":[],"call":["@diagnostics << "]}," Reek Source SourceCode DiagnosticsConsumer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek CLI Command TodoListCommand groups":{"type":"method","name":"groups","children":[],"call":["todos inject ","smell_class todo_configuration_for "," smells group_by map "," smells group_by "," smells ","todos compact inject ","todos compact "," grouped_smells [] ","smell_class smell_type "," grouped_smells ","DetectorRepository  smell_types map ","DetectorRepository  smell_types "]}," Reek CLI Command TodoListCommand smells":{"type":"method","name":"smells","children":[],"call":["(send\n  (send nil :sources) :map) map flatten ","(send\n  (send nil :sources) :map) map ","Examiner  new "," smell_names "," sources map "," sources "]}," Reek SmellWarning explanatory_link":{"type":"method","name":"explanatory_link","children":[],"call":["DocumentationLink  build "," smell_type "]}," Reek DocumentationLink name_to_param":{"type":"method","name":"name_to_param","children":[],"call":["name split join ","name split "]}," Reek DocumentationLink build":{"type":"method","name":"build","children":[],"call":["Kernel  format "," name_to_param "]}," Reek Source SourceCode code":{"type":"method","name":"code","children":[],"call":["(send nil :source) force_encoding "," source "," source readlines join "," source readlines "," source read "]}," Reek Source SourceCode origin":{"type":"method","name":"origin","children":[],"call":[" source to_s "," source "," source path "]}," Reek SmellDetectors MissingSafeMethod ignore_method_names":{"type":"method","name":"ignore_method_names","children":[],"call":[" value "," context "]}," Reek SmellDetectors MissingSafeMethod ignore_method?":{"type":"method","name":"ignore_method?","children":[],"call":[" ignore_method_names include? ","method_node name to_s ","method_node name "," ignore_method_names "]}," Reek SmellDetectors MissingSafeMethod version_without_bang_exists?":{"type":"method","name":"version_without_bang_exists?","children":[],"call":["sexp_item name to_s == ","method_sexp name_without_bang ","sexp_item name to_s ","sexp_item name "," context node_instance_methods find "," context node_instance_methods "," context "]}," Reek SmellDetectors MissingSafeMethod missing_safe_method?":{"type":"method","name":"missing_safe_method?","children":[],"call":[" version_without_bang_exists? "," ignore_method? ","method_sexp ends_with_bang? "]}," Reek SmellDetectors MissingSafeMethod sniff":{"type":"method","name":"sniff","children":[],"call":[" smell_warning ","name to_s ","method_sexp line ","method_sexp name ","(send\n  (send\n    (send nil :context) :node_instance_methods) :select) map "," missing_safe_method? "," context node_instance_methods select "," context node_instance_methods "," context ","method_sexp name  to_s ","method_sexp method_sexp name  "]}," Reek SmellDetectors MissingSafeMethod contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Reek SmellDetectors ControlParameter find_matches":{"type":"method","name":"find_matches","children":[],"call":["ControlParameterFinder  new find_matches ","ControlParameterFinder  new "," expression ","ControlParameterHelpers ControlParameterFinder  new find_matches ","ControlParameterHelpers ControlParameterFinder  new "]}," Reek SmellDetectors ControlParameter potential_parameters":{"type":"method","name":"potential_parameters","children":[],"call":[" expression parameter_names "," expression "]}," Reek SmellDetectors ControlParameter control_parameters":{"type":"method","name":"control_parameters","children":[],"call":["(send\n  (send nil :potential_parameters) :map) select ","FoundControlParameter  new "," find_matches "," potential_parameters map "," potential_parameters ","ControlParameterHelpers Candidate  new "]}," Reek Report SimpleWarningFormatter format_list":{"type":"method","name":"format_list","children":[],"call":["(send\n  (lvar :warnings) :map) join "," format ","warnings map "]}," Reek Report ProgressFormatter Quiet footer":{"type":"method","name":"footer","children":[],"call":[]}," Reek Report ProgressFormatter Quiet progress":{"type":"method","name":"progress","children":[],"call":[]}," Reek Report ProgressFormatter Quiet header":{"type":"method","name":"header","children":[],"call":[]}," Reek Report ProgressFormatter Dots display_smelly":{"type":"method","name":"display_smelly","children":[],"call":[" Rainbow color "," Rainbow "]}," Reek Report ProgressFormatter Dots display_clean":{"type":"method","name":"display_clean","children":[],"call":[" Rainbow color "," Rainbow "]}," Reek Report ProgressFormatter Dots footer":{"type":"method","name":"footer","children":[],"call":[]}," Reek Report ProgressFormatter Dots progress":{"type":"method","name":"progress","children":[],"call":[" display_clean "," display_smelly ","examiner smelly? "]}," Reek Report ProgressFormatter Dots header":{"type":"method","name":"header","children":[],"call":[" sources_count "]}," Reek Report ProgressFormatter Base footer":{"type":"method","name":"footer","children":[],"call":[" raise "]}," Reek Report ProgressFormatter Base progress":{"type":"method","name":"progress","children":[],"call":[" raise "]}," Reek Report ProgressFormatter Base header":{"type":"method","name":"header","children":[],"call":[" raise "]}," Reek Report ProgressFormatter Base initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Report QuietHeadingFormatter show_header?":{"type":"method","name":"show_header?","children":[],"call":["examiner smelly? "]}," Reek Report VerboseHeadingFormatter show_header?":{"type":"method","name":"show_header?","children":[],"call":[]}," Reek Report HeadingFormatterBase formatted_header":{"type":"method","name":"formatted_header","children":[],"call":[" Rainbow yellow "," Rainbow ","count == "," Rainbow cyan + "," Rainbow cyan ","examiner origin ","examiner smells_count ","examiner smells_count  == ","examiner smells_examiner smells_count  "]}," Reek Report HeadingFormatterBase header":{"type":"method","name":"header","children":[],"call":[" formatted_header "," show_header? "]}," Reek Report HeadingFormatterBase show_header?":{"type":"method","name":"show_header?","children":[],"call":[" raise "]}," Reek Report DocumentationLinkWarningFormatter format":{"type":"method","name":"format","children":[],"call":["warning explanatory_link "]}," Reek Errors SyntaxError long_message":{"type":"method","name":"long_message","children":[],"call":[" format "," cause backtrace join "," cause backtrace "," cause "," cause inspect "," message "]}," Reek Errors SyntaxError initialize":{"type":"method","name":"initialize","children":[],"call":[" format "]}," Reek DetectorRepository available_detector_names":{"type":"method","name":"available_detector_names","children":[],"call":[]}," Reek Configuration SchemaValidator error_message":{"type":"method","name":"error_message","children":[],"call":["errors join ","CLI Silencer  silently "]}," Reek Configuration SchemaValidator validate":{"type":"method","name":"validate","children":[],"call":[" raise "," error_message ","errors empty? ","errors ! ","@validator validate ","CLI Silencer  without_warnings "]}," Reek Configuration SchemaValidator initialize":{"type":"method","name":"initialize","children":[],"call":["Kwalify Validator  new ","Kwalify Yaml  load_file ","CLI Silencer  without_warnings "]}," Reek Configuration RakeTaskConverter convert":{"type":"method","name":"convert","children":[],"call":["configuration []= ","item inspect ","item is_a? ","configuration [] map ","configuration [] ","(send\n  (send\n    (lvar :configuration) :keys) :&\n  (const nil :REGEXABLE_ATTRIBUTES)) each ","configuration keys & ","configuration keys "]}," Reek Configuration ConfigurationConverter strings_to_regexes_for_directories":{"type":"method","name":"strings_to_regexes_for_directories","children":[],"call":["directories [] [] []= "," to_regex ","directories [] [] [] map ","directories [] [] [] ","directories [] [] ","directories [] "," convertible_attributes each "," convertible_attributes ","directories [] each ","directories keys each ","directories keys "," configuration [] tap "," configuration [] "," configuration ","directories each_key "]}," Reek Configuration ConfigurationConverter strings_to_regexes_for_detectors":{"type":"method","name":"strings_to_regexes_for_detectors","children":[],"call":["detectors [] []= "," to_regex ","detectors [] [] map ","detectors [] [] ","detectors [] "," convertible_attributes each "," convertible_attributes ","detectors keys each ","detectors keys "," configuration [] tap "," configuration [] "," configuration ","detectors each_key "]}," Reek Configuration ConfigurationConverter convertible_attributes":{"type":"method","name":"convertible_attributes","children":[],"call":["detector_configuration keys & ","detector_configuration keys "]}," Reek Configuration ConfigurationConverter to_regex":{"type":"method","name":"to_regex","children":[],"call":["Regexp  new ","value [] "," marked_as_regex? "]}," Reek Configuration ConfigurationConverter marked_as_regex?":{"type":"method","name":"marked_as_regex?","children":[],"call":["value end_with? ","value start_with? "]}," Reek Configuration ConfigurationConverter convert":{"type":"method","name":"convert","children":[],"call":[" configuration "," strings_to_regexes_for_directories "," strings_to_regexes_for_detectors "]}," Reek Configuration ConfigurationConverter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Configuration AppConfiguration from_default_path":{"type":"method","name":"from_default_path","children":[],"call":[]}," Reek CLI Silencer without_warnings":{"type":"method","name":"without_warnings","children":[],"call":[]}," Reek SmellDetectors ControlParameterHelpers ControlParameterFinder conditional_nodes":{"type":"method","name":"conditional_nodes","children":[],"call":[" node body_nodes "," node "]}," Reek SmellDetectors ControlParameterHelpers ControlParameterFinder uses_of_param_in_condition":{"type":"method","name":"uses_of_param_in_condition","children":[],"call":["inner var_name == "," parameter ","inner var_name ","condition each_node select ","condition each_node "," node condition "," node "," node condition  each_node select "," node condition  each_node "," node  node condition  "]}," Reek SmellDetectors ControlParameterHelpers ControlParameterFinder nested_finders":{"type":"method","name":"nested_finders","children":[],"call":[" class new "," parameter "," class "," conditional_nodes flat_map "," conditional_nodes "]}," Reek SmellDetectors ControlParameterHelpers ControlParameterFinder parameter_used_in_body?":{"type":"method","name":"parameter_used_in_body?","children":[],"call":["lvar_node var_name == "," parameter ","lvar_node var_name ","nodes any? "," node body_nodes "," node "," node body_nodes  any? "," node body_ node body_nodes  "]}," Reek SmellDetectors ControlParameterHelpers ControlParameterFinder legitimate_uses?":{"type":"method","name":"legitimate_uses?","children":[],"call":[" nested_finders any? "," nested_finders "," parameter_used_in_body? ","CallInConditionFinder  new uses_param_in_call_in_condition? ","CallInConditionFinder  new "," parameter "," node "]}," Reek SmellDetectors ControlParameterHelpers ControlParameterFinder find_matches":{"type":"method","name":"find_matches","children":[],"call":[" nested_finders flat_map + "," uses_of_param_in_condition "," nested_finders flat_map "," nested_finders "," legitimate_uses? "]}," Reek SmellDetectors ControlParameterHelpers ControlParameterFinder initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek SmellDetectors ControlParameterHelpers Candidate name":{"type":"method","name":"name","children":[],"call":[" parameter to_s "," parameter "]}," Reek SmellDetectors ControlParameterHelpers Candidate lines":{"type":"method","name":"lines","children":[],"call":[" occurences map "," occurences "," occurrences map "," occurrences "]}," Reek SmellDetectors ControlParameterHelpers Candidate smells?":{"type":"method","name":"smells?","children":[],"call":[" occurences any? "," occurences "," occurrences any? "," occurrences "]}," Reek SmellDetectors ControlParameterHelpers Candidate initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek SmellDetectors ControlParameterHelpers CallInConditionFinder comparison_call?":{"type":"method","name":"comparison_call?","children":[],"call":["COMPARISON_METHOD_NAMES  include? ","call_node name "]}," Reek SmellDetectors ControlParameterHelpers CallInConditionFinder call_involving_param?":{"type":"method","name":"call_involving_param?","children":[],"call":["it var_name == "," parameter ","it var_name ","call_node each_node any? ","call_node each_node "]}," Reek SmellDetectors ControlParameterHelpers CallInConditionFinder regular_call_involving_param?":{"type":"method","name":"regular_call_involving_param?","children":[],"call":[" comparison_call? ! "," comparison_call? "," call_involving_param? "]}," Reek SmellDetectors ControlParameterHelpers CallInConditionFinder uses_param_in_call_in_condition?":{"type":"method","name":"uses_param_in_call_in_condition?","children":[],"call":[" regular_call_involving_param? ","condition each_node "," node condition "," node "," node condition  each_node "," node  node condition  "]}," Reek SmellDetectors ControlParameterHelpers CallInConditionFinder initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Reek Context VisibilityTracker apply_visibility":{"type":"method","name":"apply_visibility","children":[],"call":["context apply_current_visibility "," tracked_visibility "]}," Reek CLI Command TodoListCommand write_to_file":{"type":"method","name":"write_to_file","children":[],"call":["configuration_file write ","(pair\n  (const nil :DETECTORS_KEY)\n  (send nil :groups)) to_yaml "," groups ","File  open "]}," Reek CLI Application path_relative_to_working_directory":{"type":"method","name":"path_relative_to_working_directory","children":[],"call":[" Pathname realpath relative_path_from ","Pathname  pwd "," Pathname realpath "," Pathname "]}," Reek CLI Application show_configuration_path":{"type":"method","name":"show_configuration_path","children":[],"call":[" puts "," path_relative_to_working_directory ","Configuration ConfigurationFileFinder  find "," options config_file "," options "," options show_configuration_path "," Configuration ConfigurationFileFinder  find _relative_to_working_directory "," options show_configuration_Configuration ConfigurationFileFinder  find  "]}," Reek AST Node condition":{"type":"method","name":"condition","children":[],"call":[]}," Reek Configuration DirectoryDirectives glob_to_regexp":{"type":"method","name":"glob_to_regexp","children":[],"call":["Regexp  new ","glob + ","glob gsub gsub gsub gsub gsub gsub ","glob gsub gsub gsub gsub gsub ","glob gsub gsub gsub gsub ","glob gsub gsub gsub ","glob gsub gsub ","glob gsub ","glob include? "]}," Reek CLI Command TodoListCommand grouped_smells":{"type":"method","name":"grouped_smells","children":[],"call":[" smells group_by "," smells "]}," Reek SmellDetectors DataClump clumps":{"type":"method","name":"clumps","children":[],"call":[" methods_containing_clump "," candidate_clumps map "," candidate_clumps "]}," Reek SmellDetectors DataClump methods_containing_clump":{"type":"method","name":"methods_containing_clump","children":[],"call":["clump & == ","clump & ","method arg_names "," candidate_methods select "," candidate_methods "]}," Reek SmellDetectors DataClump common_argument_names_for":{"type":"method","name":"common_argument_names_for","children":[],"call":["methods map inject compact sort ","methods map inject compact ","methods map inject ","methods map "]}," Reek SmellDetectors DataClump candidate_clumps":{"type":"method","name":"candidate_clumps","children":[],"call":["(send\n  (block\n    (send\n      (send\n        (send nil :candidate_methods) :each_cons\n        (send\n          (send nil :max_copies) :+\n          (int 1))) :map)\n    (args\n      (arg :methods))\n    (send nil :common_argument_names_for\n      (lvar :methods))) :select) uniq ","clump length >= "," min_clump_size ","clump length ","(send\n  (send\n    (send nil :candidate_methods) :each_cons\n    (send\n      (send nil :max_copies) :+\n      (int 1))) :map) select "," common_argument_names_for "," candidate_methods each_cons map "," candidate_methods each_cons "," max_copies + "," max_copies "," candidate_methods "]}," Reek SmellDetectors DataClump candidate_methods":{"type":"method","name":"candidate_methods","children":[],"call":[" context node_instance_methods "," context "]}," Reek Errors LegacyCommentSeparatorError initialize":{"type":"method","name":"initialize","children":[],"call":[" format "]}," Reek CodeComment CodeCommentValidator legacy_format?":{"type":"method","name":"legacy_format?","children":[],"call":[" separator start_with? "," separator "]}," Reek CodeComment CodeCommentValidator detector_class":{"type":"method","name":"detector_class","children":[],"call":[" raise ","Errors BadDetectorInCommentError  new "," line "," source "," original_comment "," detector_name ","SmellDetectors BaseDetector  to_detector "]}," Reek CodeComment CodeCommentValidator parsed_options":{"type":"method","name":"parsed_options","children":[],"call":[" raise ","Errors GarbageDetectorConfigurationInCommentError  new "," line "," source "," original_comment "," detector_name ","YAML  safe_load "," options ","Psych VERSION  < "]}," Reek CodeComment escalate_legacy_separator":{"type":"method","name":"escalate_legacy_separator","children":[],"call":[" raise ","Errors LegacyCommentSeparatorError  new "," line "," source "," original_comment ","separator start_with? "]}," Reek AST SexpExtensions Forward_ArgsNode anonymous_splat?":{"type":"method","name":"anonymous_splat?","children":[],"call":[]}," Reek Configuration DirectoryDirectives match?":{"type":"method","name":"match?","children":[],"call":["source_base_dir to_s match "," glob_to_regexp ","pathname to_s ","source_base_dir to_s "]}," Reek Source SourceLocator source_files_from_path":{"type":"method","name":"source_files_from_path","children":[],"call":["relevant_paths << "," ignore_file? "," ruby_file? ","Find  prune "," ignore_path? ","path directory? ","given_path find "]}," Reek ContextBuilder handle_refinement_block":{"type":"method","name":"handle_refinement_block","children":[],"call":[" process "," inside_new_context "]}," Reek Context RefinementContext full_name":{"type":"method","name":"full_name","children":[],"call":[" exp call args first name "," exp call args first "," exp call args "," exp call "," exp "]}," Reek AST SexpExtensions Forward_ArgNode anonymous_splat?":{"type":"method","name":"anonymous_splat?","children":[],"call":[]}," Reek Context SendContext method_name_called_to_call":{"type":"method","name":"method_name_called_to_call","children":[],"call":[" local_nodes map "," local_nodes ","@name == "]}," Reek Context ModuleContext instance_method_names_via_to_call":{"type":"method","name":"instance_method_names_via_to_call","children":[],"call":[" instance_method_calls flat_map compact "," instance_method_calls flat_map "," instance_method_calls "]}," Reek AST SexpExtensions KwnilargNode anonymous_splat?":{"type":"method","name":"anonymous_splat?","children":[],"call":[]}}