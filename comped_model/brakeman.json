{" Warning to_row":{"type":"method","name":"to_row","children":[],"call":["row []= "," method to_s "," method "," class to_s "," class "," controller to_s "," controller "," model to_s "," model "," view_name to_s "," view_name "," format_message "," warning_type to_s "," warning_type "," confidence ","@row []= "," model name to_s "," model name "," message ","TEXT_CONFIDENCE  [] "," cwe_id "]}," Warning format_message":{"type":"method","name":"format_message","children":[],"call":["message << "," format_code "," code "," line "," message ","@format_message << "," message dup "," message to_s dup "," message to_s "," message  << ","  message  ","@format_ message  << "," message dup  << "," message to_s dup  << ","  message  dup ","  message  to_s dup ","  message  to_s "]}," Warning format_code":{"type":"method","name":"format_code","children":[],"call":["OutputProcessor  new format gsub ","OutputProcessor  new format "," code ","OutputProcessor  new ","Brakeman OutputProcessor  new format gsub ","Brakeman OutputProcessor  new format ","Brakeman OutputProcessor  new "," format_ruby "]}," Warning view_name":{"type":"method","name":"view_name","children":[],"call":[" template [] "," template "," called_from "," called_from last "," template name "]}," Warning initialize":{"type":"method","name":"initialize","children":[],"call":[" controller "," template [] "," template "," model ","@code line ","@code respond_to? ","@line ! ","result [] ","result length == ","result length ","options [] "," instance_variable_set ","(sym :called_from) each ","result [] [] ","result [] [] == ","@user_input line ","@user_input respond_to? ","Brakeman  debug ","Brakeman WarningCodes  code ","@gem_info [] ","@gem_info is_a? ","@method to_s =~ ","@method to_s "," template render_path ","@user_input match ","@user_input type ","@user_input is_a? ","OPTIONS  each ","@user_input == "," confidence= ","Brakeman Messages Message  new ","options [] is_a? "," template file "," model file ","@code line  ! ","@user_input line  ! ","options []  [] ","options []  length == ","options []  length ","options []  [] [] ","options []  [] [] == ","@user_input match  line ","@user_input match  respond_to? ","@user_input match  match ","@user_input match  type ","@user_input match  is_a? ","@user_input match  == "]}," Util sexp?":{"type":"method","name":"sexp?","children":[],"call":["exp is_a? "]}," Util cookies?":{"type":"method","name":"cookies?","children":[],"call":["exp node_type == ","exp node_type ","exp is_a? "," cookies? ","exp [] ","exp [] == ","exp == "," call? ","ALL_COOKIES  include? ","child node_type == ","child node_type "," recurse_check? "]}," Util params?":{"type":"method","name":"params?","children":[],"call":["exp node_type == ","exp node_type ","exp is_a? "," params? ","exp [] ","exp [] == ","ALL_PARAMETERS  include? "," call? ","child node_type == ","child node_type "," recurse_check? "]}," Util integer?":{"type":"method","name":"integer?","children":[],"call":["exp [] is_a? ","exp [] ","exp node_type == ","exp node_type ","exp is_a? "]}," Util regexp?":{"type":"method","name":"regexp?","children":[],"call":["exp [] is_a? ","exp [] ","exp node_type == ","exp node_type ","exp is_a? "]}," Util call?":{"type":"method","name":"call?","children":[],"call":["exp node_type == ","exp node_type ","exp is_a? "]}," Util symbol?":{"type":"method","name":"symbol?","children":[],"call":["exp [] is_a? ","exp [] ","exp node_type == ","exp node_type ","exp is_a? "]}," Util string?":{"type":"method","name":"string?","children":[],"call":["exp node_type == ","exp node_type ","exp is_a? "]}," Util array?":{"type":"method","name":"array?","children":[],"call":["exp node_type == ","exp node_type ","exp is_a? "]}," Util hash?":{"type":"method","name":"hash?","children":[],"call":["exp node_type == ","exp node_type ","exp is_a? "]}," Util set_env_defaults":{"type":"method","name":"set_env_defaults","children":[],"call":["@env []= ","Sexp  new "]}," Util hash_insert":{"type":"method","name":"hash_insert","children":[],"call":["hash << << ","hash << ","hash []= ","index + ","index % == ","index % ","k == "," hash_iterate ","hash dup "]}," Util hash_iterate":{"type":"method","name":"hash_iterate","children":[],"call":["hash [] ","i + ","1 step ","hash length - ","hash length "," remove_kwsplat "," remove_kwsplat  [] "," remove_kwsplat  length - "," remove_kwsplat  length "]}," Util pluralize":{"type":"method","name":"pluralize","children":[],"call":["ActiveSupport Inflector  pluralize ","word + ","word end_with? "]}," Util underscore":{"type":"method","name":"underscore","children":[],"call":["camel_cased_word to_s gsub gsub gsub tr downcase ","camel_cased_word to_s gsub gsub gsub tr ","camel_cased_word to_s gsub gsub gsub ","camel_cased_word to_s gsub gsub ","camel_cased_word to_s gsub ","camel_cased_word to_s "]}," Util camelize":{"type":"method","name":"camelize","children":[],"call":["1 upcase ","(send\n  (send\n    (lvar :lower_case_and_underscored_word) :to_s) :gsub\n  (regexp\n    (str \"/(.?)\")\n    (regopt))) gsub ","lower_case_and_underscored_word to_s gsub ","lower_case_and_underscored_word to_s "]}," Tracker report":{"type":"method","name":"report","children":[],"call":["Report  new ","Brakeman Report  new "]}," Tracker check_initializers":{"type":"method","name":"check_initializers","children":[],"call":["finder matches ","finder process_source "," initializers each "," initializers ","FindCall  new ","Brakeman FindCall  new "," initializers sort each "," initializers sort ","FindCall  new  matches ","Brakeman FindCall  new  matches ","FindCall  new  process_source ","Brakeman FindCall  new  process_source "]}," Tracker find_model_find":{"type":"method","name":"find_model_find","children":[],"call":["finder matches ","finder process_source ","template [] "," each_template "," each_method ","FindModelCall  new ","FindModelCall  new  matches ","FindModelCall  new  process_source "]}," Tracker find_call":{"type":"method","name":"find_call","children":[],"call":["finder matches ","finder process_source ","template [] "," each_template "," each_method ","FindCall  new ","@call_index find_calls "," index_calls "," index_call_sites ","FindCall  new  matches ","FindCall  new  process_source "]}," Tracker each_template":{"type":"method","name":"each_template","children":[],"call":[" templates [] "," templates ","@rest each ","@processed each ","k to_s include? ","k to_s "," templates keys partition "," templates keys ","@processed nil? ","(send\n  (send\n    (send nil :templates) :keys) :sort_by) partition ","template to_s "," templates keys sort_by "]}," Tracker each_method":{"type":"method","name":"each_method","children":[],"call":["definition [] ","definition node_type == ","definition node_type ","info [] each ","info [] ","(sym :private) each ","set each ","(send\n  (self) :controllers) each "," models "," controllers ","src [] ","src node_type == ","src node_type ","classes each ","classes << "," libs ","@options [] ","collection each_method ","definition file ","definition src ","definition []  [] ","definition src  [] ","definition []  node_type == ","definition src  node_type == ","definition []  node_type ","definition src  node_type ","definition definition []  ","definition definition src  "]}," Tracker run_checks":{"type":"method","name":"run_checks","children":[],"call":["Checks  run_checks ","Brakeman Checks  run_checks ","@end_time - ","Time  now ","Time  now  - "]}," Tracker error":{"type":"method","name":"error","children":[],"call":["@errors << ","exception to_s gsub ","exception to_s ","backtrace is_a? ","exception backtrace ","Brakeman  debug "]}," Tracker initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new ","Time  now ","@models []= ","Brakeman Model  new ","Brakeman Config  new ","Brakeman Constants  new ","@app_tree file_path "]}," RailsXSSErubis add_postamble":{"type":"method","name":"add_postamble","children":[],"call":["src << "]}," RailsXSSErubis add_expr_escaped":{"type":"method","name":"add_expr_escaped","children":[],"call":["src << << << ","src << << "," escaped_expr ","src << ","code =~ "]}," RailsXSSErubis add_expr_literal":{"type":"method","name":"add_expr_literal","children":[],"call":["src << << << ","src << << ","src << ","code =~ "]}," RailsXSSErubis add_text":{"type":"method","name":"add_text","children":[],"call":["src << << << ","src << << "," escape_text ","src << ","lines last ","lines [] each ","lines [] ","lines each ","text match ","text split ","text include? ","text == ","text split  last ","text split  [] each ","text split  [] ","text split  each "]}," RailsXSSErubis add_preamble":{"type":"method","name":"add_preamble","children":[],"call":["src << "]}," Scanner process_models":{"type":"method","name":"process_models","children":[],"call":[" tracker error ","e backtrace ","e exception ","e message + ","e message "," tracker ","@processor process_model ","RubyParser  new parse ","File  read ","RubyParser  new ","Dir  glob sort each ","Dir  glob sort ","Dir  glob ","@app_path + "," parse_ruby ","$stderr print ","model_files each ","model_files length "," process_model ","@skip_files match ","model_files reject! ","Brakeman  debug "," report_progress ","@app_tree model_paths each ","@app_tree model_paths ","@app_tree model_paths length ","model [] "," track_progress ","@file_list [] ","Dir  glob sort  each ","Dir  glob sort  length ","Dir  glob sort  reject! "]}," Scanner template_path_to_name":{"type":"method","name":"template_path_to_name","children":[],"call":["names [] join to_sym ","names [] join ","names [] ","names index + ","names index ","names last gsub! ","names last ","path split ","path split  [] join to_sym ","path split  [] join ","path split  [] ","path split  index + ","path split  index ","path split  last gsub! ","path split  last "]}," Scanner process_templates":{"type":"method","name":"process_templates","children":[],"call":["@processor process_template_alias "," tracker templates [] "," tracker templates "," tracker "," tracker templates keys dup each "," tracker templates keys dup "," tracker templates keys "," tracker error ","e backtrace ","e exception ","e message + ","e message ","(dstr\n  (str \"While compiling HAML in \")\n  (begin\n    (lvar :f))) << ","@processor process_template ","RubyParser  new parse ","RubyParser  new ","Haml Engine  new precompiled ","Haml Engine  new "," tracker config [] ! ! "," tracker config [] ! "," tracker config [] "," tracker config ","File  read ","type == ","ERB  new src ","ERB  new ","ScannerErubis  new src ","ScannerErubis  new ","RailsXSSErubis  new src ","RailsXSSErubis  new "," template_path_to_name ","f match [] to_sym ","f match [] ","f match ","Dir  glob sort each ","Dir  glob sort ","Dir  glob ","$stdout sync= ","@app_path + ","ErubisEscape  new src ","ErubisEscape  new ","OPTIONS  [] ","src sub! "," parse_ruby ","Brakeman ScannerErubis  new src ","Brakeman ScannerErubis  new ","Brakeman ErubisEscape  new src ","Brakeman ErubisEscape  new ","Brakeman RailsXSSErubis  new src ","Brakeman RailsXSSErubis  new "," options [] "," options ","$stderr print "," warn "," tracker templates length ","template_files each ","template_files length "," process_template ","Brakeman  notify ","@skip_files match ","template_files reject! ","Brakeman  debug ","(send\n  (send\n    (send\n      (send\n        (send nil :tracker) :templates) :keys) :dup) :sort_by) each ","name to_s "," tracker templates keys dup sort_by "," report_progress ","@app_tree template_paths each ","@app_tree template_paths ","@app_tree template_paths length ","template [] "," track_progress ","t [] ","@file_list [] sort_by ","@file_list [] ","f match [] to_sym  == ","ERB  new Haml Engine  new precompiled  ","ERB  new ERB  new src  ","ERB  new ScannerErubis  new src  ","ERB  new RailsXSSErubis  new src  ","ERB  new ErubisEscape  new src  ","ERB  new Brakeman ScannerErubis  new src  ","ERB  new Brakeman ErubisEscape  new src  ","ERB  new Brakeman RailsXSSErubis  new src  ","ScannerErubis  new Haml Engine  new precompiled  ","ScannerErubis  new ERB  new src  ","ScannerErubis  new ScannerErubis  new src  ","ScannerErubis  new RailsXSSErubis  new src  ","ScannerErubis  new ErubisEscape  new src  ","ScannerErubis  new Brakeman ScannerErubis  new src  ","ScannerErubis  new Brakeman ErubisEscape  new src  ","ScannerErubis  new Brakeman RailsXSSErubis  new src  ","RailsXSSErubis  new Haml Engine  new precompiled  ","RailsXSSErubis  new ERB  new src  ","RailsXSSErubis  new ScannerErubis  new src  ","RailsXSSErubis  new RailsXSSErubis  new src  ","RailsXSSErubis  new ErubisEscape  new src  ","RailsXSSErubis  new Brakeman ScannerErubis  new src  ","RailsXSSErubis  new Brakeman ErubisEscape  new src  ","RailsXSSErubis  new Brakeman RailsXSSErubis  new src  "," template_path_to_ template_path_to_name  ","ErubisEscape  new Haml Engine  new precompiled  ","ErubisEscape  new ERB  new src  ","ErubisEscape  new ScannerErubis  new src  ","ErubisEscape  new RailsXSSErubis  new src  ","ErubisEscape  new ErubisEscape  new src  ","ErubisEscape  new Brakeman ScannerErubis  new src  ","ErubisEscape  new Brakeman ErubisEscape  new src  ","ErubisEscape  new Brakeman RailsXSSErubis  new src  ","Haml Engine  new precompiled  sub! ","ERB  new src  sub! ","ScannerErubis  new src  sub! ","RailsXSSErubis  new src  sub! ","ErubisEscape  new src  sub! ","Brakeman ScannerErubis  new src  sub! ","Brakeman ErubisEscape  new src  sub! ","Brakeman RailsXSSErubis  new src  sub! ","Brakeman ScannerErubis  new Haml Engine  new precompiled  ","Brakeman ScannerErubis  new ERB  new src  ","Brakeman ScannerErubis  new ScannerErubis  new src  ","Brakeman ScannerErubis  new RailsXSSErubis  new src  ","Brakeman ScannerErubis  new ErubisEscape  new src  ","Brakeman ScannerErubis  new Brakeman ScannerErubis  new src  ","Brakeman ScannerErubis  new Brakeman ErubisEscape  new src  ","Brakeman ScannerErubis  new Brakeman RailsXSSErubis  new src  ","Brakeman ErubisEscape  new Haml Engine  new precompiled  ","Brakeman ErubisEscape  new ERB  new src  ","Brakeman ErubisEscape  new ScannerErubis  new src  ","Brakeman ErubisEscape  new RailsXSSErubis  new src  ","Brakeman ErubisEscape  new ErubisEscape  new src  ","Brakeman ErubisEscape  new Brakeman ScannerErubis  new src  ","Brakeman ErubisEscape  new Brakeman ErubisEscape  new src  ","Brakeman ErubisEscape  new Brakeman RailsXSSErubis  new src  ","Brakeman RailsXSSErubis  new Haml Engine  new precompiled  ","Brakeman RailsXSSErubis  new ERB  new src  ","Brakeman RailsXSSErubis  new ScannerErubis  new src  ","Brakeman RailsXSSErubis  new RailsXSSErubis  new src  ","Brakeman RailsXSSErubis  new ErubisEscape  new src  ","Brakeman RailsXSSErubis  new Brakeman ScannerErubis  new src  ","Brakeman RailsXSSErubis  new Brakeman ErubisEscape  new src  ","Brakeman RailsXSSErubis  new Brakeman RailsXSSErubis  new src  ","Dir  glob sort  each ","Dir  glob sort  length ","Dir  glob sort  reject! "," template_path_to_name  to_s "]}," Scanner process_controllers":{"type":"method","name":"process_controllers","children":[],"call":["@processor process_controller_alias ","controller [] "," tracker controllers each "," tracker controllers "," tracker "," tracker error ","e backtrace ","e exception ","e message + ","e message ","@processor process_controller ","RubyParser  new parse ","File  read ","RubyParser  new ","Dir  glob sort each ","Dir  glob sort ","Dir  glob ","@app_path + "," parse_ruby ","$stderr print "," warn "," tracker controllers length "," options [] "," options ","controller_files each ","controller_files length * ","controller_files length "," process_controller ","Brakeman  notify ","Brakeman  debug "," tracker filter_cache clear "," tracker filter_cache ","@skip_files match ","controller_files reject! ","(send\n  (send\n    (send nil :tracker) :controllers) :sort_by) each ","name to_s "," tracker controllers sort_by "," report_progress ","@app_tree controller_paths each ","@app_tree controller_paths ","@app_tree controller_paths length ","controller path "," track_progress ","@file_list [] ","Dir  glob sort  each ","Dir  glob sort  length * ","Dir  glob sort  length ","Dir  glob sort  reject! "]}," Scanner process_routes":{"type":"method","name":"process_routes","children":[],"call":["@processor process_routes ","RubyParser  new parse ","File  read ","RubyParser  new ","File  exists? "," warn ","OPTIONS  []= "," tracker error ","e backtrace ","e exception ","e message + ","e message "," tracker "," options []= "," options "," parse_ruby ","Brakeman  notify ","@app_tree read ","@app_tree exists? "," parse_ruby_file ","@app_tree file_path "," parse_ruby_@app_tree file_path  ","@app_tree @app_tree file_path _path "]}," Scanner process_libs":{"type":"method","name":"process_libs","children":[],"call":[" tracker error ","e backtrace ","e exception ","e message + ","e message "," tracker ","@processor process_lib ","RubyParser  new parse ","File  read ","RubyParser  new ","Dir  glob sort each ","Dir  glob sort ","Dir  glob ","@path + "," warn ","OPTIONS  [] "," parse_ruby "," options [] "," options ","$stderr print ","lib_files each ","lib_files length "," process_lib ","Brakeman  debug ","Brakeman  notify ","@skip_files match ","lib_files reject! "," report_progress ","@app_tree lib_paths each ","@app_tree lib_paths ","@app_tree lib_paths length ","lib path "," track_progress ","@file_list [] ","Dir  glob sort  each ","Dir  glob sort  length ","Dir  glob sort  reject! "]}," Scanner process_initializers":{"type":"method","name":"process_initializers","children":[],"call":[" tracker error ","e backtrace ","e exception ","e message + ","e message "," tracker ","@processor process_initializer ","RubyParser  new parse ","File  read ","RubyParser  new ","Dir  glob sort each ","Dir  glob sort ","Dir  glob ","@path + "," parse_ruby "," process_initializer ","initializer_files each ","@skip_files match ","initializer_files reject! ","@app_tree initializer_paths each ","@app_tree initializer_paths ","Brakeman  debug ","init [] "," track_progress ","@file_list [] ","Dir  glob sort  each ","Dir  glob sort  reject! "]}," Scanner process_config":{"type":"method","name":"process_config","children":[],"call":[" warn "," tracker config []= "," tracker config "," tracker ","File  exists? ","@processor process_config ","RubyParser  new parse ","File  read ","RubyParser  new ","OPTIONS  [] ","File  read include? "," options [] "," options "," parse_ruby "," process_config_file ","Brakeman  notify ","@app_tree exists? "," tracker config escape_html= "," tracker config set_ruby_version ","@app_tree read ","@app_tree file_path read ","@app_tree file_path "," tracker config load_rails_defaults ","@app_tree file_path read [] "," tracker config set_ruby_@app_tree file_path read []  "]}," Scanner process":{"type":"method","name":"process","children":[],"call":[" tracker "," process_controllers "," warn "," process_models "," process_templates "," process_routes "," process_libs "," process_initializers "," process_config "," process_gems "," index_call_sites ","Brakeman  notify "," process_controller_data_flows "," process_template_data_flows "," parse_files "," guess_rails_version "," detect_file_types "]}," Scanner tracker":{"type":"method","name":"tracker","children":[],"call":["@processor tracked_events "]}," Scanner initialize":{"type":"method","name":"initialize","children":[],"call":["Processor  new ","path + ","File  join ","Brakeman Processor  new ","options [] ","Regexp  new ","(?: << << ","(?: << ","(send\n  (send\n    (lvar :options) :[]\n    (sym :skip_files)) :map) join ","Regexp  escape ","options [] map ","Brakeman  notify ","options []= ","@app_tree exists? "," abort ","@app_tree exists? ! ","@app_tree root ! ","@app_tree root ","Brakeman AppTree  from_options "," raise ","options [] ! ","(str \"Please supply the path to a Rails application (looking in \") << ","Brakeman AppTree  from_options  exists? ","Brakeman AppTree  from_options  exists? ! ","Brakeman AppTree  from_options  root ! ","Brakeman AppTree  from_options  root "]}," Report with_context":{"type":"method","name":"with_context","children":[],"call":["output << ","(send\n  (send\n    (lvar :context) :[]\n    (irange\n      (int 1)\n      (int -1))) :map) join ","CGI  escapeHTML ","code [] chomp ","code [] ","code [] == ","warning line ","warning line + ","warning line - ","alt ! ","context [] map ","context [] ","context length > ","context length ","context first [] chomp ","context first [] ","context first ","1 == ","warning line + == ","warning line - == ","context empty? ","(str \"<div class='warning_message' onClick=\\\"toggle('\") << << ","(str \"<div class='warning_message' onClick=\\\"toggle('\") << ","(str \"<span id='\") << ","message [] << ","message [] ","OPTIONS  [] ","message length > ","message length ","OPTIONS  [] > "," context_for ","full_message ! "," tracker options [] "," tracker options "," tracker "," tracker options [] > ","(str \"<div class='warning_message' onClick=\\\"toggle('\") << << << ","(or\n  (send\n    (lvar :warning) :file)\n  (str \"\")) gsub ","warning file "," html_message "," warning_file ","(str \"<div class='warning_message' onClick=\\\"toggle('\") << <<  << ","(str \"<div class='warning_message' onClick=\\\"toggle('\") << << <<  << ","(send\n  (send\n    (lvar : context_for ) :[]\n    (irange\n      (int 1)\n      (int -1))) :map) join ","alt !  ! "," context_for  [] map "," context_for  [] "," context_for  length > "," context_for  length "," context_for  first [] chomp "," context_for  first [] "," context_for  first "," context_for  empty? ","(str \"<div class='warning_message [] << ' onClick=\\\"toggle('\") << << ","(str \"<div class='warning_ html_message ' onClick=\\\"toggle('\") << << ","(str \"<div class='warning_message [] << ' onClick=\\\"toggle('\") << ","(str \"<div class='warning_ html_message ' onClick=\\\"toggle('\") << ","message [] <<  [] << "," html_message  [] << ","message [] <<  [] "," html_message  [] ","message [] <<  length > "," html_message  length > ","message [] <<  length "," html_message  length ","  context_for _for ","full_message [] <<  ! ","full_ html_message  ! "," html_message  ! ","(str \"<div class='warning_message [] << ' onClick=\\\"toggle('\") << << << ","(str \"<div class='warning_ html_message ' onClick=\\\"toggle('\") << << << "," html_message [] <<  "," html_ html_message  "]}," Report context_for":{"type":"method","name":"context_for","children":[],"call":["context << ","current_line >= ","current_line > ","line strip == ","line strip ","f each_line ","File  open ","start_line < ","warning line + ","warning line ","warning line - ","File  exist? "," file_for ","warning line -  < ","  file_for _for "]}," Report file_by_name":{"type":"method","name":"file_by_name","children":[],"call":[" file_for ","string_name split [] to_sym ","string_name split [] ","string_name split ","string_name include? "," tracker templates [] [] "," tracker templates [] "," tracker templates "," tracker "," underscore "," tracker models [] [] "," tracker models [] "," tracker models "," tracker controllers [] [] "," tracker controllers [] "," tracker controllers ","OPTIONS  [] "," camelize == "," camelize ","string_name =~ ","name to_sym ","name to_s "," tracker options [] "," tracker options ","string_string_name split [] to_sym  split [] to_sym ","string_name to_sym  split [] to_sym ","name to_s  split [] to_sym ","string_string_name split [] to_sym  split [] ","string_name to_sym  split [] ","name to_s  split [] ","string_string_name split [] to_sym  split ","string_name to_sym  split ","name to_s  split ","string_string_name split [] to_sym  include? ","string_name to_sym  include? ","name to_s  include? ","string_string_name split [] to_sym  =~ ","string_name to_sym  =~ ","name to_s  =~ ","string_name split [] to_sym  to_sym ","name to_sym  to_sym ","string_name split [] to_sym  to_s ","name to_sym  to_s "]}," Report file_for":{"type":"method","name":"file_for","children":[],"call":[" file_by_name ","warning class ","warning model ","warning template [] ","warning template ","warning controller ","warning warning_set ","File  expand_path ","OPTIONS  [] ","warning file "," tracker options [] "," tracker options "," tracker "]}," Report warnings_summary":{"type":"method","name":"warnings_summary","children":[],"call":["summary []= ","warning confidence == ","warning confidence ","summary [] ","warning warning_type to_s ","warning warning_type ","warnings each ","(send\n  (send nil :checks) :warnings) each "," checks template_warnings "," checks "," checks model_warnings "," checks controller_warnings "," checks warnings ","Hash  new ","warning confidence > "," tracker options [] "," tracker options "," tracker ","(send nil :all_warnings) each "," all_warnings ","Hash  new  []= ","Hash  new  [] "]}," Report csv_header":{"type":"method","name":"csv_header","children":[],"call":["BRAKEMAN REPORT\n\n << ","header to_csv ","header << "," checks checks_run sort join "," checks checks_run sort "," checks checks_run "," checks ","Time  now to_s ","Time  now ","File  expand_path ","OPTIONS  [] ","Ruport Data  Table "," rails_version "," tracker options [] "," tracker options "," tracker ","BRAKEMAN REPORT\n\n + ","CSV  generate_line ","Ruport Data  Table  to_csv ","CSV  generate_line  to_csv ","Ruport Data  Table  << ","CSV  generate_line  << "]}," Report text_header":{"type":"method","name":"text_header","children":[],"call":[" checks checks_run sort join "," checks checks_run sort "," checks checks_run "," checks ","Time  now ","File  expand_path ","OPTIONS  [] "," rails_version "," tracker options [] "," tracker options "," tracker "," tracker duration "," tracker start_time "]}," Report html_header":{"type":"method","name":"html_header","children":[],"call":[" checks checks_run sort join "," checks checks_run sort "," checks checks_run "," checks ","Time  now ","File  expand_path ","OPTIONS  [] "," raise ","File  read ","File  exist? "," rails_version "," tracker options [] "," tracker options "," tracker "," load_and_render_erb "," binding ","Brakeman Report Renderer  new render ","Brakeman Report Renderer  new "]}," Report to_pdf":{"type":"method","name":"to_pdf","children":[],"call":[" raise "]}," Report to_csv":{"type":"method","name":"to_csv","children":[],"call":["out << << ","out << ","res to_csv "," generate_template_warnings "," generate_model_warnings "," generate_controller_warnings ","out << << << "," generate_warnings "," generate_errors "," generate_templates to_csv "," generate_templates ","OPTIONS  [] "," generate_controllers to_csv "," generate_controllers "," csv_header << << << << << "," csv_header << << << << "," generate_warning_overview to_csv "," generate_warning_overview "," csv_header << << << "," csv_header << << "," generate_overview to_csv "," generate_overview "," csv_header << "," csv_header "," tracker options [] "," tracker options "," tracker ","output << << ","output << "," table_to_csv ","output << << << "," csv_header << << << << <<  << << "," csv_header << << << << <<  << "," generate_template_warnings  to_csv "," generate_model_warnings  to_csv "," generate_controller_warnings  to_csv "," generate_warnings  to_csv "," generate_errors  to_csv "," csv_header << << << << <<  << << << "," csv_header << << << << << put << << "," csv_header  << << "," csv_header << << << << << put << "," csv_header  << "," csv_header << << << << << put << << << "," csv_header  << << << "]}," Report to_s":{"type":"method","name":"to_s","children":[],"call":["out << << ","out << ","res to_s "," generate_template_warnings "," generate_model_warnings "," generate_controller_warnings ","out << << << "," generate_warnings "," generate_errors "," generate_templates to_s "," generate_templates ","OPTIONS  [] "," generate_controllers to_s "," generate_controllers "," text_header << << << << << "," text_header << << << << "," generate_warning_overview to_s "," generate_warning_overview "," text_header << << << "," text_header << << "," generate_overview to_s "," generate_overview "," text_header << "," text_header "," tracker options [] "," tracker options "," tracker "," truncate_table "," generate "," require_report "," text_header << << << << <<  << << "," text_header << << << << <<  << "," generate_template_warnings  to_s "," generate_model_warnings  to_s "," generate_controller_warnings  to_s "," generate_warnings  to_s "," generate_errors  to_s "," text_header << << << << <<  << << << "]}," Report to_html":{"type":"method","name":"to_html","children":[],"call":["out << ","res to_html "," generate_template_warnings "," generate_model_warnings "," generate_controller_warnings ","out << << "," generate_warnings "," generate_errors "," generate_templates to_html "," generate_templates ","OPTIONS  [] "," generate_controllers to_html "," generate_controllers "," html_header << << << << "," generate_warning_overview to_html "," generate_warning_overview "," html_header << << << "," html_header << << "," generate_overview to_html "," generate_overview "," html_header << "," html_header ","out << << << "," tracker options [] "," tracker options "," tracker "," generate_template_warnings to_s "," generate_model_warnings to_s "," generate_controller_warnings to_s "," generate_warnings to_s "," generate_errors to_s "," generate_templates to_s "," generate_controllers to_s "," generate_warning_overview to_s "," html_header << << << <<  << "," html_header << <<  << "," generate_template_warnings  to_html "," generate_model_warnings  to_html "," generate_controller_warnings  to_html "," generate_warnings  to_html "," generate_errors  to_html "," html_header << << << <<  << << "," html_header << <<  << << "," html_header << << << <<  << << << "," html_header << <<  << << << "]}," Report generate_templates":{"type":"method","name":"generate_templates","children":[],"call":["Ruport Data  Grouping ","table << ","out gsub gsub ","out gsub ","CGI  escapeHTML ","OPTIONS  [] == ","OPTIONS  [] ","out_processor format ","template [] each ","template [] ","template [] empty? "," tracker templates each "," tracker templates "," tracker ","Ruport Data  Table ","OutputProcessor  new "," tracker options [] == "," tracker options [] "," tracker options ","Brakeman OutputProcessor  new ","output << << ","output << ","table to_s ","t add_row ","Terminal Table  new ","template first to_s ","template first ","template_rows each "," load_and_render_erb "," binding ","name to_s ","template_rows sort_by ","template_rows [] << ","template_rows [] ","Brakeman Report Renderer  new render ","Brakeman Report Renderer  new ","Ruport Data  Table  << ","CGI  escapeHTML  gsub gsub ","out_processor format  gsub gsub ","CGI  escapeHTML  gsub ","out_processor format  gsub ","CGI  escapeHTML _processor format ","out_processor format _processor format ","OutputProcessor  new  format ","Brakeman OutputProcessor  new  format ","CGI  escapeHTML put << << ","out_processor format put << << ","CGI  escapeHTML put << ","out_processor format put << ","Ruport Data  Table  to_s "]}," Report generate_controllers":{"type":"method","name":"generate_controllers","children":[],"call":["table sort_rows_by ","table << ","c [] join ","c [] ","c [] to_s ","name to_s ","routes == ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort ","e to_s ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :[]\n        (sym :public)) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :routes) :[]\n    (send\n      (lvar :name) :to_sym))) to_a map ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :[]\n        (sym :public)) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :routes) :[]\n    (send\n      (lvar :name) :to_sym))) to_a ","Set  new & "," tracker routes [] ","name to_sym "," tracker routes "," tracker ","Set  new ","c [] keys "," tracker routes [] nil? ","(send\n  (send\n    (send\n      (lvar :c) :[]\n      (sym :public)) :keys) :map) sort join ","(send\n  (send\n    (send\n      (lvar :c) :[]\n      (sym :public)) :keys) :map) sort ","c [] keys map "," tracker routes [] == "," tracker controllers [] "," tracker controllers ","(send\n  (send\n    (send\n      (send nil :tracker) :controllers) :keys) :map) sort each ","(send\n  (send\n    (send\n      (send nil :tracker) :controllers) :keys) :map) sort ","k to_s "," tracker controllers keys map "," tracker controllers keys ","Ruport Data  Table ","t add_row ","row [] ","controller_rows each ","Terminal Table  new "," load_and_render_erb "," binding ","controller_rows sort_by ","controller_rows << "," render_array ","controller_rows collect ","Ruport Data  Table  sort_rows_by ","Ruport Data  Table  << "," tracker controllers []  [] join "," tracker controllers []  [] "," tracker controllers []  [] to_s ","name to_sym  to_s ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join  == ","(send\n  (send\n    (send\n      (lvar :c) :[]\n      (sym :public)) :keys) :map) sort join  == ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :(send\n  (send\n    (send\n      (lvar :c) :[]\n      (sym :public)) :keys) :map) sort join ) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ","(send\n  (send\n    (begin\n      (send\n        (send\n          ( tracker controllers [] onst nil :Set) :new\n          (send\n            (send\n              (lvar : tracker controllers [] ) :[]\n              (sym :publi tracker controllers [] )) :keys)) :&\n        (send\n          (send\n            (send nil :tra tracker controllers [] ker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name to_sym ) :to_sym)))) :to_a) :map) sort join ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :(send\n  (send\n    (send\n      (lvar :c) :[]\n      (sym :public)) :keys) :map) sort join ) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort ","(send\n  (send\n    (begin\n      (send\n        (send\n          ( tracker controllers [] onst nil :Set) :new\n          (send\n            (send\n              (lvar : tracker controllers [] ) :[]\n              (sym :publi tracker controllers [] )) :keys)) :&\n        (send\n          (send\n            (send nil :tra tracker controllers [] ker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name to_sym ) :to_sym)))) :to_a) :map) sort ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :[]\n        (sym :public)) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ) :[]\n    (send\n      (lvar :name) :to_sym))) to_a map ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :[]\n        (sym :public)) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :(send\n  (send\n    (send\n      (lvar :c) :[]\n      (sym :public)) :keys) :map) sort join ) :[]\n    (send\n      (lvar :name) :to_sym))) to_a map ","(send\n  (send\n    ( tracker controllers [] onst nil :Set) :new\n    (send\n      (send\n        (lvar : tracker controllers [] ) :[]\n        (sym :publi tracker controllers [] )) :keys)) :&\n  (send\n    (send\n      (send nil :tra tracker controllers [] ker) :routes) :[]\n    (send\n      (lvar :name) :to_sym))) to_a map ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :[]\n        (sym :public)) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :routes) :[]\n    (send\n      (lvar :name to_sym ) :to_sym))) to_a map ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :[]\n        (sym :public)) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ) :[]\n    (send\n      (lvar :name) :to_sym))) to_a ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :[]\n        (sym :public)) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :(send\n  (send\n    (send\n      (lvar :c) :[]\n      (sym :public)) :keys) :map) sort join ) :[]\n    (send\n      (lvar :name) :to_sym))) to_a ","(send\n  (send\n    ( tracker controllers [] onst nil :Set) :new\n    (send\n      (send\n        (lvar : tracker controllers [] ) :[]\n        (sym :publi tracker controllers [] )) :keys)) :&\n  (send\n    (send\n      (send nil :tra tracker controllers [] ker) :routes) :[]\n    (send\n      (lvar :name) :to_sym))) to_a ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :[]\n        (sym :public)) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :routes) :[]\n    (send\n      (lvar :name to_sym ) :to_sym))) to_a "," tracker (send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join  [] "," tracker (send\n  (send\n    (send\n      (lvar :c) :[]\n      (sym :public)) :keys) :map) sort join  [] "," tra tracker controllers [] ker routes [] ","name to_sym  to_sym "," tracker (send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join  "," tracker (send\n  (send\n    (send\n      (lvar :c) :[]\n      (sym :public)) :keys) :map) sort join  "," tra tracker controllers [] ker routes "," tra tracker controllers [] ker "," tracker controllers []  [] keys "," tracker (send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join  [] nil? "," tracker (send\n  (send\n    (send\n      (lvar :c) :[]\n      (sym :public)) :keys) :map) sort join  [] nil? "," tra tracker controllers [] ker routes [] nil? ","(send\n  (send\n    (send\n      (lvar : tracker controllers [] ) :[]\n      (sym :publi tracker controllers [] )) :keys) :map) sort join ","(send\n  (send\n    (send\n      (lvar : tracker controllers [] ) :[]\n      (sym :publi tracker controllers [] )) :keys) :map) sort "," tracker controllers []  [] keys map "," tracker (send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join  [] == "," tracker (send\n  (send\n    (send\n      (lvar :c) :[]\n      (sym :public)) :keys) :map) sort join  [] == "," tra tracker controllers [] ker routes [] == "," tra tracker controllers [] ker  tracker controllers [] ontrollers [] "," tra tracker controllers [] ker  tracker controllers [] ontrollers ","(send\n  (send\n    (send\n      (send nil :tra tracker controllers [] ker) : tracker controllers [] ontrollers) :keys) :map) sort ea tracker controllers [] h ","(send\n  (send\n    (send\n      (send nil :tra tracker controllers [] ker) : tracker controllers [] ontrollers) :keys) :map) sort "," tra tracker controllers [] ker  tracker controllers [] ontrollers keys map "," tra tracker controllers [] ker  tracker controllers [] ontrollers keys "," tracker controllers [] ontroller_rows ea tracker controllers [] h "," tracker controllers [] ontroller_rows sort_by "," tracker controllers [] ontroller_rows << "," tracker controllers [] ontroller_rows  tracker controllers [] olle tracker controllers [] t "]}," Report generate_controller_warnings":{"type":"method","name":"generate_controller_warnings","children":[],"call":["table to_group ","table sort_rows_by! ","table empty? ","table << ","w []= ","TEXT_CONFIDENCE  [] ","w [] "," with_context ","HTML_CONFIDENCE  [] ","OPTIONS  [] == ","OPTIONS  [] ","warning to_row ","warning confidence > ","warning confidence "," checks controller_warnings each "," checks controller_warnings "," checks ","Ruport Data  Table "," checks controller_warnings empty? "," tracker options [] == "," tracker options [] "," tracker options "," tracker ","t add_row ","warning [] ","warnings each ","Terminal Table  new "," load_and_render_erb "," binding ","row [] ","warnings sort_by ","warnings empty? ","warnings << "," text_message "," with_link "," render_array ","warnings collect ","Ruport Data  Table  to_group ","table sort_rowarning to_row s_by! ","Ruport Data  Table  sort_rows_by! ","Ruport Data  Table  empty? ","Ruport Data  Table  << ","warning to_row  []= ","warning to_row  [] "," warning to_row ith_context ","warning to_row arning to_rowarning to_row  ","warning to_row arning confidence > ","warning to_row arning confidence "," checks controller_warning to_row arnings each "," checks controller_warning to_row arnings "," checks controller_warning to_row arnings empty? ","t add_rowarning to_row  ","warning to_row arning [] ","warning to_row arnings each ","Terminal Table  newarning to_row  ","rowarning to_row  [] ","warning to_row arnings sort_by ","warning to_row arnings empty? ","warning to_row arnings << "," warning to_row ith_link ","warning to_row arnings collect "]}," Report generate_model_warnings":{"type":"method","name":"generate_model_warnings","children":[],"call":["table to_group ","table sort_rows_by! ","table empty? ","table << ","w []= ","TEXT_CONFIDENCE  [] ","w [] "," with_context ","HTML_CONFIDENCE  [] ","OPTIONS  [] == ","OPTIONS  [] ","warning to_row ","warning confidence > ","warning confidence "," checks model_warnings each "," checks model_warnings "," checks ","Ruport Data  Table "," checks model_warnings empty? "," tracker options [] == "," tracker options [] "," tracker options "," tracker ","t add_row ","warning [] ","warnings each ","Terminal Table  new "," load_and_render_erb "," binding ","row [] ","warnings sort_by ","warnings empty? ","warnings << "," text_message "," checks model_warnings any? "," with_link "," render_array ","warnings collect ","Ruport Data  Table  to_group ","table sort_rowarning to_row s_by! ","Ruport Data  Table  sort_rows_by! ","Ruport Data  Table  empty? ","Ruport Data  Table  << ","warning to_row  []= ","warning to_row  [] "," warning to_row ith_context ","warning to_row arning to_rowarning to_row  ","warning to_row arning confidence > ","warning to_row arning confidence "," checks model_warning to_row arnings each "," checks model_warning to_row arnings "," checks model_warning to_row arnings empty? ","t add_rowarning to_row  ","warning to_row arning [] ","warning to_row arnings each ","Terminal Table  newarning to_row  ","rowarning to_row  [] ","warning to_row arnings sort_by ","warning to_row arnings empty? ","warning to_row arnings << "," checks model_warning to_row arnings any? "," warning to_row ith_link ","warning to_row arnings collect "]}," Report generate_template_warnings":{"type":"method","name":"generate_template_warnings","children":[],"call":["table to_group ","table sort_rows_by! ","table empty? ","table << ","w []= ","TEXT_CONFIDENCE  [] ","w [] "," with_context ","HTML_CONFIDENCE  [] ","OPTIONS  [] == ","OPTIONS  [] ","warning to_row ","warning confidence > ","warning confidence "," checks template_warnings each "," checks template_warnings "," checks ","Ruport Data  Table "," checks template_warnings empty? "," tracker options [] == "," tracker options [] "," tracker options "," tracker ","t add_row ","warning [] ","warnings each ","Terminal Table  new "," load_and_render_erb "," binding ","row [] ","warnings sort_by ","warnings empty? ","warnings << "," text_message "," checks template_warnings any? "," with_link ","warning template [] ","warning template ","warning called_from "," render_array ","warnings collect ","Ruport Data  Table  to_group ","table sort_rowarning to_row s_by! ","Ruport Data  Table  sort_rows_by! ","Ruport Data  Table  empty? ","Ruport Data  Table  << ","warning to_row  []= ","warning to_row  [] "," warning to_row ith_context ","warning to_row arning to_rowarning to_row  ","warning to_row arning confidence > ","warning to_row arning confidence "," checks template_warning to_row arnings each "," checks template_warning to_row arnings "," checks template_warning to_row arnings empty? ","t add_rowarning to_row  ","warning to_row arning [] ","warning to_row arnings each ","Terminal Table  newarning to_row  ","rowarning to_row  [] ","warning to_row arnings sort_by ","warning to_row arnings empty? ","warning to_row arnings << "," checks template_warning to_row arnings any? "," warning to_row ith_link ","warning to_row arning template [] ","warning to_row arning template ","warning to_row arning called_from ","warning to_row arnings collect "]}," Report generate_warnings":{"type":"method","name":"generate_warnings","children":[],"call":["table << ","Ruport Data  Table ","table empty? ","table sort_rows_by! ","w []= ","TEXT_CONFIDENCE  [] ","w [] "," with_context ","HTML_CONFIDENCE  [] ","OPTIONS  [] == ","OPTIONS  [] ","warning to_row ","warning confidence > ","warning confidence "," checks warnings each "," checks warnings "," checks "," tracker options [] == "," tracker options [] "," tracker options "," tracker ","t add_row ","row [] ","warning_messages each ","Terminal Table  new ","warning_messages empty? "," load_and_render_erb "," binding ","warning_messages sort_by ","warning_messages << "," text_message "," with_link "," render_array ","warning_messages collect ","Ruport Data  Table  << ","Ruport Data  Table  empty? ","Ruport Data  Table  sort_rows_by! ","table sort_rowarning to_row s_by! ","warning to_row  []= ","warning to_row  [] "," warning to_row ith_context ","warning to_row arning to_rowarning to_row  ","warning to_row arning confidence > ","warning to_row arning confidence "," checks warning to_row arnings each "," checks warning to_row arnings ","t add_rowarning to_row  ","rowarning to_row  [] ","warning to_row arning_messages each ","Terminal Table  newarning to_row  ","warning to_row arning_messages empty? ","warning to_row arning_messages sort_by ","warning to_row arning_messages << "," warning to_row ith_link ","warning to_row arning_messages collect "]}," Report generate_errors":{"type":"method","name":"generate_errors","children":[],"call":["table << ","w [] [] ","w [] "," p ","OPTIONS  [] "," tracker errors each "," tracker errors "," tracker ","Ruport Data  Table "," tracker errors empty? ","w []= ","CGI  escapeHTML ","OPTIONS  [] == "," tracker options [] == "," tracker options [] "," tracker options ","Brakeman  debug ","w inspect ","t add_row ","error [] [] ","error [] ","Terminal Table  new "," load_and_render_erb "," binding "," tracker errors any? "," render_array "," tracker errors collect ","Ruport Data  Table  << "]}," Report generate_warning_overview":{"type":"method","name":"generate_warning_overview","children":[],"call":["table << "," warnings_summary [] "," warnings_summary ","types sort each ","types sort ","types delete "," warnings_summary keys ","Ruport Data  Table ","t add_row ","Terminal Table  new "," load_and_render_erb "," binding ","types empty? "," render_array ","types sort collect ","Ruport Data  Table  << "," warnings_summary keys  sort each "," warnings_summary keys  sort "," warnings_summary keys  delete "," warnings_summary keys  empty? "," warnings_summary keys  sort collect "]}," Report generate_overview":{"type":"method","name":"generate_overview","children":[],"call":["table << "," tracker errors length "," tracker errors "," tracker "," tracker models length - "," tracker models length "," tracker models "," tracker controllers length "," tracker controllers ","Ruport Data  Table ","summary [] ","OPTIONS  [] == ","OPTIONS  [] "," warnings_summary "," checks warnings length + + + "," checks template_warnings length "," checks template_warnings "," checks "," checks warnings length + + "," checks model_warnings length "," checks model_warnings "," checks warnings length + "," checks controller_warnings length "," checks controller_warnings "," checks warnings length "," checks warnings ","Set  new length ","Set  new ","v [] to_s [] ","v [] to_s ","v [] ","@tracker templates map ","@tracker templates "," tracker options [] == "," tracker options [] "," tracker options ","t add_row "," warnings_summary [] "," number_of_templates ","Terminal Table  new "," load_and_render_erb "," binding "," all_warnings length "," all_warnings ","Brakeman Report Renderer  new render ","Brakeman Report Renderer  new ","Ruport Data  Table  << "," warnings_summary  [] "," warnings_ warnings_summary  ","  checks warnings length + + + _summary ","  all_warnings length _summary "," checks  checks warnings length + + +  length + + + "," checks  all_warnings length  length + + + "," checks template_ checks warnings length + + +  length "," checks template_ all_warnings length  length "," checks template_ checks warnings length + + +  "," checks template_ all_warnings length  "," checks  checks warnings length + + +  length + + "," checks  all_warnings length  length + + "," checks model_ checks warnings length + + +  length "," checks model_ all_warnings length  length "," checks model_ checks warnings length + + +  "," checks model_ all_warnings length  "," checks  checks warnings length + + +  length + "," checks  all_warnings length  length + "," checks controller_ checks warnings length + + +  length "," checks controller_ all_warnings length  length "," checks controller_ checks warnings length + + +  "," checks controller_ all_warnings length  "," checks  checks warnings length + + +  length "," checks  all_warnings length  length "," checks  checks warnings length + + +  "," checks  all_warnings length  ","@tracker Set  new length  map ","@tracker Set  new length  "," warnings_ warnings_summary  [] ","  checks warnings length + + + _summary [] ","  all_warnings length _summary [] "," number_of_Set  new length  "," all_ checks warnings length + + +  length "," all_ all_warnings length  length "," all_ checks warnings length + + +  "," all_ all_warnings length  "]}," Report initialize":{"type":"method","name":"initialize","children":[],"call":["tracker checks ","tracker options [] ","tracker options ","tracker app_tree "]}," TemplateProcessor process_output":{"type":"method","name":"process_output","children":[],"call":["@current_template [] << ","@current_template [] "," process ","exp [] ","exp value ","exp value= ","exp original_line ","@current_template add_output "]}," TemplateProcessor process_lasgn":{"type":"method","name":"process_lasgn","children":[],"call":["exp []= "," process ","exp [] "," ignore ","exp [] node_type == ","exp [] node_type ","exp [] == ","exp rhs= ","exp rhs ","exp rhs node_type == ","exp rhs node_type ","exp lhs == ","exp lhs "]}," TemplateProcessor process":{"type":"method","name":"process","children":[],"call":[" raise ","except set_backtrace ","e backtrace ","e exception ","e message ","@current_template [] ","@current_template name ","e exception  set_backtrace ","e e exception ion "]}," TemplateProcessor initialize":{"type":"method","name":"initialize","children":[],"call":[" warn_on_default= ","tracker templates []= ","tracker templates ","(send\n  (send\n    (send\n      (lvar :template_name) :to_s) :+\n    (str \".\")) :+\n  (send\n    (lvar :called_from) :to_s)) to_sym ","template_name to_s + + ","called_from to_s ","template_name to_s + ","template_name to_s ","template_name to_s [] == ","template_name to_s [] ","Brakeman Template  new ","@current_template file ","(send\n  (send\n    (send\n      (lvar :(send\n  (send\n    (send\n      (lvar :template_name) :to_s) :+\n    (str \".\")) :+\n  (send\n    (lvar :called_from) :to_s)) to_sym ) :to_s) :+\n    (str \".\")) :+\n  (send\n    (lvar :called_from) :to_s)) to_sym ","(send\n  (send\n    (send\n      (lvar :template_name) :to_s) :+\n    (str \".\")) :+\n  (send\n    (lvar :called_from) :to_s)) to_sym  to_s + + ","(send\n  (send\n    (send\n      (lvar :template_name) :to_s) :+\n    (str \".\")) :+\n  (send\n    (lvar :called_from) :to_s)) to_sym  to_s + ","(send\n  (send\n    (send\n      (lvar :template_name) :to_s) :+\n    (str \".\")) :+\n  (send\n    (lvar :called_from) :to_s)) to_sym  to_s ","(send\n  (send\n    (send\n      (lvar :template_name) :to_s) :+\n    (str \".\")) :+\n  (send\n    (lvar :called_from) :to_s)) to_sym  to_s [] == ","(send\n  (send\n    (send\n      (lvar :template_name) :to_s) :+\n    (str \".\")) :+\n  (send\n    (lvar :called_from) :to_s)) to_sym  to_s [] ","Brakeman Template  new  file "]}," TemplateAliasProcessor get_model_target":{"type":"method","name":"get_model_target","children":[],"call":[" get_model_target ","models include? "," class_name ","Set  new ","@tracker models keys ","@tracker models ","exp [] to_s [] == ","exp [] to_s [] ","exp [] to_s ","exp [] ","exp [] == "," call? ","exp method to_s [] == ","exp method to_s [] ","exp method to_s ","exp method ","exp method == ","exp target ","COLLECTION_METHODS  include? "," get_model_exp []  "," get_model_exp target  ","Set  new  include? "," class_ class_name  ","@tracker Set  new  keys ","@tracker Set  new  ","exp exp []  ","exp exp target  "]}," TemplateAliasProcessor process_call_with_block":{"type":"method","name":"process_call_with_block","children":[],"call":[" process "," sexp? "," env []= ","Sexp  new ","args [] "," env ","args node_type == ","args node_type ","FORM_METHODS  include? ","model == ","target [] "," get_model_target ","method == ","exp [] ","call [] "," process_default "," node_type? ","args lhs ","target target ","exp block ","exp block_args ","call method ","call target "," call? ","exp block_call ","arg is_a? ","exp block_args first_param ","exp []  [] ","exp block_args  [] ","exp block_args first_param s [] ","exp []  node_type == ","exp block_args  node_type == ","exp block_args first_param s node_type == ","exp []  node_type ","exp block_args  node_type ","exp block_args first_param s node_type "," get_model_target  == ","call []  [] ","call target  [] ","texp block_args first_param et [] "," get_ get_model_target _target "," get_model_call []  "," get_model_call target  "," get_model_texp block_args first_param et ","call []  == ","call method  == ","exp block_call  [] ","exp []  lhs ","exp block_args  lhs ","exp block_args first_param s lhs ","call []  call []  ","call target  call target  ","texp block_args first_param et texp block_args first_param et ","exp exp []  ","exp exp block  ","exp exp [] _args ","exp exp block _args ","exp block_exp []  ","exp block_exp block_args  ","exp block_exp block_args first_param s ","call call []  ","call call method  ","exp []  method ","exp block_call  method ","call call target  ","exp []  target ","exp block_call  target ","call texp block_args first_param et "," exp [] ? "," exp block_call ? ","exp exp [] _call ","exp exp block _call ","exp block_exp block_call  ","exp block_args first_param  is_a? ","exp exp [] _args first_param ","exp exp block _args first_param ","exp block_exp []  first_param ","exp block_exp block_args  first_param ","exp block_exp block_args first_param s first_param "]}," TemplateAliasProcessor template_name":{"type":"method","name":"template_name","children":[],"call":["@template [] to_s match [] ","@template [] to_s match ","@template [] to_s ","@template [] ","name to_s include? ","name to_s ","@template [] to_s include? ","name to_s include? ! ","@template name to_s match [] ","@template name to_s match ","@template name to_s ","@template name ","@template name to_s include? "]}," TemplateAliasProcessor process_template":{"type":"method","name":"process_template","children":[],"call":["@template [] ","Brakeman  debug ","@called_from match ","Regexp  escape ","@called_from + ","@called_from grep empty? ","@called_from grep ","Brakeman RenderPath  new add_template_render ","Brakeman RenderPath  new ","@called_from dup add_template_render ","@called_from dup ","@called_from include_template? ","@template name "," relative_path ","@tracker templates [] ","@tracker templates ","@template file ","name to_s gsub ","name to_s ","@template name to_s gsub  ","@template  relative_path  ","name to_s gsub  to_s gsub ","name to_s gsub  to_s "]}," TemplateAliasProcessor initialize":{"type":"method","name":"initialize","children":[],"call":["template file "]}," RouteAliasProcessor get_keys":{"type":"method","name":"get_keys","children":[],"call":["keys << "," hash_iterate ","Sexp  new ","Sexp  new  << "]}," RouteAliasProcessor process_call":{"type":"method","name":"process_call","children":[],"call":["exp []= ","keys each_with_index ","exp clear "," get_keys ","exp [] ","exp [] == "," hash? "," process_default ","exp target ","exp method == ","exp method "," get_keys  each_with_index "," get_ get_keys  "]}," RoutesProcessor check_for_controller_name":{"type":"method","name":"check_for_controller_name","children":[],"call":["v [] ","k [] == ","k [] "," hash_iterate "," hash? ","args each "]}," RoutesProcessor current_controller=":{"type":"method","name":"current_controller=","children":[],"call":["Set  new ","@tracker routes [] ","@tracker routes ","(send\n  (send\n    (send nil :prefix) :+\n    (send nil :camelize\n      (lvar :name))) :+\n  (str \"Controller\")) to_sym "," prefix + + "," prefix + "," camelize "," prefix "]}," RoutesProcessor prefix":{"type":"method","name":"prefix","children":[],"call":["@prefix join << ","@prefix join ","@prefix length > ","@prefix length "]}," RoutesProcessor process_collection":{"type":"method","name":"process_collection","children":[],"call":["routes << ","action [] "," hash_iterate ","@tracker routes [] ","@tracker routes ","exp node_type == ","exp node_type ","@tracker routes []  << ","@tracker @tracker routes []  [] ","@tracker @tracker routes []  "]}," RoutesProcessor process_named_route":{"type":"method","name":"process_named_route","children":[],"call":[" process_connect "]}," RoutesProcessor process_namespace":{"type":"method","name":"process_namespace","children":[],"call":["@prefix pop "," process ","Sexp  new ","formal_args [] ","@prefix << "," camelize ","call [] [] [] ","call [] [] ","call [] ","exp [] ","exp [] [] [] [] ","exp [] [] [] ","exp [] [] ","exp []  [] ","exp []  [] [] [] ","exp []  [] [] "]}," RoutesProcessor process_with_options":{"type":"method","name":"process_with_options","children":[],"call":[" process ","exp [] "," current_controller= "," check_for_controller_name ","exp [] [] ","Sexp  new ","exp [] [] [] "]}," RoutesProcessor process_connect":{"type":"method","name":"process_connect","children":[],"call":["@tracker routes [] << ","exp [] [] [] to_sym ","exp [] [] [] ","exp [] [] ","i + ","exp [] ","@tracker routes [] ","@tracker routes ","e [] == ","e [] "," symbol? ","exp [] each_with_index ","@tracker routes [] == ","@tracker routes []= ","exp [] [] include? ","exp [] [] == "," string? "," current_controller= "," check_for_controller_name ","@tracker routes [] [] == ","@tracker routes [] [] ","@tracker routes [] is_a? ","exp line "," current_ check_for_controller_name = "," check_for_ check_for_controller_name _name "]}," RoutesProcessor add_resource_routes":{"type":"method","name":"add_resource_routes","children":[],"call":["@tracker routes [] merge ","@tracker routes [] ","@tracker routes "]}," RoutesProcessor process_resource":{"type":"method","name":"process_resource","children":[],"call":[" process_resource_options ","exp [] "," add_resource_routes "," current_controller= "," pluralize ","exp [] [] to_s ","exp [] [] ","argument node_type == ","argument node_type ","exp each "," check_for_controller_name ","s [] ","exp [] [] each "," sexp? "," current_ check_for_controller_name = "," check_for_ check_for_controller_name _name "]}," RoutesProcessor process_option_except":{"type":"method","name":"process_option_except","children":[],"call":["routes delete ","e [] ","exp [] each ","exp [] ","@tracker routes [] ","@tracker routes ","exp node_type == ","exp node_type ","@tracker routes []  delete ","@tracker @tracker routes []  [] ","@tracker @tracker routes []  "]}," RoutesProcessor process_option_only":{"type":"method","name":"process_option_only","children":[],"call":["routes << ","e [] ","exp [] each ","exp [] ","exp node_type == ","exp node_type ","routes delete ","(sym :index) each ","@tracker routes [] ","@tracker routes ","@tracker routes []  << ","@tracker routes []  delete ","@tracker @tracker routes []  [] ","@tracker @tracker routes []  "]}," RoutesProcessor process_resource_options":{"type":"method","name":"process_resource_options","children":[],"call":[" raise "," process_option_except "," process_option_only "," current_controller= "," process_resources ","value [] "," current_controller "," process_resource "," process_collection ","option [] "," hash_iterate ","exp node_type == ","exp node_type ","exp concat ","@with_options [] ","exp nil? ","exp concat  node_type == ","exp concat  node_type ","exp concat  concat ","exp concat  nil? "]}," RoutesProcessor add_resources_routes":{"type":"method","name":"add_resources_routes","children":[],"call":["@tracker routes [] merge ","@tracker routes [] ","@tracker routes "]}," RoutesProcessor process_resources":{"type":"method","name":"process_resources","children":[],"call":[" process_resource_options ","exp [] "," add_resources_routes "," current_controller= ","exp [] [] ","argument node_type == ","argument node_type "," sexp? ","exp each "," check_for_controller_name ","s [] ","exp [] [] each "," symbol? ","exp [] [] all? ","exp [] [] [] == ","exp [] [] [] "," current_ check_for_controller_name = "," check_for_ check_for_controller_name _name "]}," RoutesProcessor process_iter":{"type":"method","name":"process_iter","children":[],"call":[" process_with_options "," process_default ","exp [] "," process_resources ","exp [] [] [] ","exp [] [] "," process_namespace ","exp [] [] == "," nested "," map "," process_scope_block "," process_resources_block "," process_resource_block "]}," RoutesProcessor process_map":{"type":"method","name":"process_map","children":[],"call":[" process_named_route "," process_connect "," process_resources "," process_resource ","exp [] ","exp [] [] "]}," RoutesProcessor process_call":{"type":"method","name":"process_call","children":[],"call":[" process_default "," process_map ","target == "," nested "," map ","exp [] "," process_match "," process_verb "," process_root "," process_resource "," process_resources ","exp []  == "]}," RoutesProcessor process_routes":{"type":"method","name":"process_routes","children":[],"call":[" process ","RouteAliasProcessor  new process_safely ","RouteAliasProcessor  new ","exp dup "]}," RoutesProcessor initialize":{"type":"method","name":"initialize","children":[],"call":["Sexp  new "]}," ParamsProcessor process_if":{"type":"method","name":"process_if","children":[],"call":[" process_these ","exp [] "]}," ParamsProcessor actually_process_call":{"type":"method","name":"actually_process_call","children":[],"call":["exp == ","exp [] == ","exp [] "," process "]}," ParamsProcessor process_call":{"type":"method","name":"process_call","children":[],"call":["@result << "," actually_process_call "]}," ParamsProcessor process_these":{"type":"method","name":"process_these","children":[],"call":[" process ","e empty? ! ","e empty? "," sexp? ","exp each "]}," ParamsProcessor process_default":{"type":"method","name":"process_default","children":[],"call":[" process_these ","exp [] ","@result << ","@mark ! ","@watch_nodes include? ","exp node_type "]}," ParamsProcessor initialize":{"type":"method","name":"initialize","children":[],"call":["Sexp  new ","Set  new "," warn_on_default= "," default_method= "," require_empty= "," auto_shift_type= "," strict= ","Set  [] "]}," OutputProcessor process_render":{"type":"method","name":"process_render","children":[],"call":["exp clear ","exp [] ","exp []= "," process "," sexp? ","exp shift ","exp deep_clone ","exp deep_clone  clear ","exp deep_clone  [] ","exp deep_clone  []= "," sexp deep_clone ? ","exp deep_clone  shift ","exp deep_clone  deep_clone "]}," OutputProcessor process_const":{"type":"method","name":"process_const","children":[],"call":["exp clear ","exp [] == ","exp [] ","exp [] to_s "]}," OutputProcessor process_format_escaped":{"type":"method","name":"process_format_escaped","children":[],"call":["exp clear ","res == "," process ","exp [] ","exp [] node_type == ","exp [] node_type "," output_format "," process  == "]}," OutputProcessor process_format":{"type":"method","name":"process_format","children":[],"call":["exp clear ","res == "," process ","exp [] ","exp [] node_type == ","exp [] node_type "," output_format "," process  == "]}," OutputProcessor process_output":{"type":"method","name":"process_output","children":[],"call":["exp clear ","res == "," process ","exp [] ","exp [] node_type == ","exp [] node_type "," output_format "," process  == "]}," OutputProcessor process_call_with_block":{"type":"method","name":"process_call_with_block","children":[],"call":["exp clear "," process ","exp [] "," process_rlist "]}," OutputProcessor process_rlist":{"type":"method","name":"process_rlist","children":[],"call":["exp clear ","(send\n  (lvar :exp) :map) compact join ","(send\n  (lvar :exp) :map) compact ","res == "," process ","exp map "," process  == "]}," OutputProcessor process_dxstr":{"type":"method","name":"process_dxstr","children":[],"call":["out << ","exp clear ","(send\n  (lvar :exp) :map!) join "," process ","e [] "," string? ","e is_a? ","exp map! "]}," OutputProcessor process_string_eval":{"type":"method","name":"process_string_eval","children":[],"call":["exp clear "," process ","exp [] "]}," OutputProcessor process_string_interp":{"type":"method","name":"process_string_interp","children":[],"call":["exp clear ","out << ","res == "," process ","e is_a? ","exp each "," process  == "]}," OutputProcessor process_cookies":{"type":"method","name":"process_cookies","children":[],"call":["exp clear "]}," OutputProcessor process_session":{"type":"method","name":"process_session","children":[],"call":["exp clear "]}," OutputProcessor process_params":{"type":"method","name":"process_params","children":[],"call":["exp clear "]}," OutputProcessor process_ignore":{"type":"method","name":"process_ignore","children":[],"call":["exp clear "]}," OutputProcessor process_lvar":{"type":"method","name":"process_lvar","children":[],"call":["exp clear ","exp [] "]}," OutputProcessor process_call":{"type":"method","name":"process_call","children":[],"call":["exp clear "," raise ","Exception  new ","method == "," process ","exp [] ","exp [] is_a? ","exp []  == "]}," OutputProcessor process":{"type":"method","name":"process","children":[],"call":[" warn ","e backtrace join ","e backtrace ","OPTIONS  [] ","exp empty? ! ","exp empty? "," sexp? ","@tracker options [] ","@tracker options ","Brakeman  debug ","@user_input_block call ","@user_input == "]}," OutputProcessor format":{"type":"method","name":"format","children":[],"call":[" process ","exp deep_clone "]}," ModelProcessor process_defs":{"type":"method","name":"process_defs","children":[],"call":["@model [] []= ","@model [] ","@model nil? ","res line ","exp line ","Sexp  new "," process ","exp [] [] ","exp [] "," class_name ","exp [] node_type == ","exp [] node_type ","exp body value ","exp body ","exp method_name "," process_all! ","exp formal_args ","@current_module [] []= ","@current_module [] ","@current_class [] []= ","@current_class [] ","@current_module add_method ","@current_class add_method ","@current_class name ","@current_module name "," node_type? ","Sexp  new  line "," class_exp []  "," class_exp method_name  ","exp method_exp []  ","exp method_exp method_name  ","@current_class exp []  ","@current_class exp method_name  ","@current_module exp []  ","@current_module exp method_name  "]}," ModelProcessor process_defn":{"type":"method","name":"process_defn","children":[],"call":["list []= ","@model [] ","res line ","exp line ","Sexp  new "," process ","exp [] [] ","exp [] ","exp body value ","exp body ","exp method_name "," process_all! ","exp formal_args ","@current_module [] []= ","@current_module [] ","@current_class [] []= ","@current_class [] ","@current_module add_method ","@current_class add_method ","@model []  []= ","Sexp  new  line ","exp method_exp []  ","exp method_exp method_name  "]}," ModelProcessor process_call":{"type":"method","name":"process_call","children":[],"call":["call line ","exp line ","Sexp  new "," process "," ignore ","@model [] [] << ","@model [] [] ","@model [] ","@model [] concat ","e [] ","args [] map ","args [] ","@model [] << "," class_name ","args length == ","args length ","target nil? ","@current_method nil? ","exp [] "," sexp? ","exp arglist ","args map ","args first ","args empty? ","exp args ","exp method ","exp target ","@model [] [] concat ","ASSOCIATIONS  include? "," make_call "," process_all! ","exp arglist line ","args << ","e value "," node_type? ","exp each_arg ","first_arg nil? ","exp first_arg "," hash? ","@current_class [] [] << ","@current_class [] [] ","@current_class [] ","@current_class [] [] concat ","@current_class [] concat ","@current_class [] << ","@current_class add_option ","@current_class set_attr_protected ","@current_class set_attr_accessible ","@current_class add_include "," process_call_defn? "," add_enum_method ","Sexp  new  line "," make_call  line ","exp []  [] map ","exp args  [] map ","exp []  [] ","exp args  [] ","exp []  length == ","exp args  length == ","exp []  length ","exp args  length "," process  nil? ","exp []  nil? ","exp target  nil? ","@current_exp []  nil? ","@current_exp method  nil? ","exp []  map ","exp args  map ","exp []  first ","exp args  first ","exp []  empty? ","exp args  empty? ","exp exp []  ","exp exp args  ","exp exp method  ","exp  process  ","exp exp target  "," make_Sexp  new  "," make_ make_call  ","exp []  << ","exp args  << ","exp first_arg  nil? ","exp exp first_arg  "," process_Sexp  new _defn? "," process_ make_call _defn? "," add_enum_exp []  "," add_enum_exp method  "]}," ModelProcessor process_class":{"type":"method","name":"process_class","children":[],"call":[" process ","exp [] ","@tracker models []= ","@model [] ","@tracker models "," class_name "," ignore "," warn ","OPTIONS  [] ","@tracker options [] ","@tracker options ","Brakeman  debug ","exp body ","exp parent_name ","exp class_name ","exp body= "," process_all! ","@current_class [] []= ","@current_class [] ","@current_class [] << ","@current_class [] include? ","@tracker models [] ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","@current_module [] to_s + + ","name to_s ","@current_module [] to_s + ","@current_module [] to_s ","@current_module [] ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","outer_class [] to_s + + ","outer_class [] to_s + ","outer_class [] to_s ","outer_class [] ","Brakeman LibraryProcessor  new process_library ","Brakeman LibraryProcessor  new ","Brakeman Model  new ","@current_class add_file ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","@current_module name to_s + + ","@current_module name to_s + ","@current_module name to_s ","@current_module name ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","outer_class name to_s + + ","outer_class name to_s + ","outer_class name to_s ","outer_class name "," handle_class "," class_ class_name  "," class_(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," class_(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," class_(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," class_(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp  class_name _name ","exp parent_ class_name  ","exp parent_(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp parent_(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp parent_(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp parent_(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp class_ class_name  ","exp class_(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp class_(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp class_(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp class_(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@tracker models []  [] []= ","Brakeman Model  new  [] []= ","@tracker models []  [] ","Brakeman Model  new  [] ","@tracker models []  [] << ","Brakeman Model  new  [] << ","@tracker models []  [] include? ","Brakeman Model  new  [] include? ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym : class_name )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym "," class_name  to_s ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym : class_name )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","@tracker models []  add_file ","Brakeman Model  new  add_file ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) : class_name ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","@current_module  class_name  to_s + + ","@current_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_module  class_name  to_s + ","@current_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_module  class_name  to_s ","@current_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_module  class_name  ","@current_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) : class_name ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","outer_class  class_name  to_s + + ","outer_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_class  class_name  to_s + ","outer_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_class  class_name  to_s ","outer_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_class  class_name  ","outer_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","outer_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","outer_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","outer_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "]}," ModelProcessor process_model":{"type":"method","name":"process_model","children":[],"call":[" process "]}," ModelProcessor initialize":{"type":"method","name":"initialize","children":[],"call":[]}," LibraryProcessor process_defs":{"type":"method","name":"process_defs","children":[],"call":["@current_module [] []= ","exp [] ","@current_module [] ","@current_class [] []= ","@current_class [] ","exp []= ","@alias_processor process_safely ","SexpProcessor Environment  new "," process ","@alias_processor process ","exp method_name ","exp node_type= ","exp body= "," process_all! ","exp body ","@current_module add_method ","@current_class add_method ","@alias_processor process  [] ","@alias_processor process  []= ","S@alias_processor process Processor Environment  new ","@alias_processor process  method_name ","@alias_processor process  node_type= ","@alias_processor process  body= ","@alias_processor process  body "]}," LibraryProcessor process_defn":{"type":"method","name":"process_defn","children":[],"call":["@current_module [] []= ","exp [] ","@current_module [] ","@current_class [] []= ","@current_class [] ","exp []= ","@alias_processor process_safely ","SexpProcessor Environment  new "," process ","@alias_processor process ","exp method_name ","exp node_type= ","exp body= "," process_all! ","exp body ","@current_module add_method ","@current_class add_method "," node_type? ","@alias_processor only_ivars ","exp body_list ","exp method_name == ","@alias_processor process  [] ","@alias_processor process_safely  [] ","@alias_processor process  []= ","@alias_processor process_safely  []= ","S@alias_processor process Processor Environment  new ","S@alias_processor process_safely Processor Environment  new ","@alias_processor process  method_name ","@alias_processor process_safely  method_name ","@alias_processor process  node_type= ","@alias_processor process_safely  node_type= ","@alias_processor process  body= ","@alias_processor process_safely  body= ","@alias_processor process  body ","@alias_processor process_safely  body ","@alias_processor process  body_list ","@alias_processor process_safely  body_list ","@alias_processor process  method_name == ","@alias_processor process_safely  method_name == "]}," LibraryProcessor process_module":{"type":"method","name":"process_module","children":[],"call":["exp []= "," process ","exp [] ","@tracker libs []= ","@tracker libs ","@tracker libs [] ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","@current_class [] to_s + + ","name to_s ","@current_class [] to_s + ","@current_class [] to_s ","@current_class [] ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","outer_class [] to_s + + ","outer_class [] to_s + ","outer_class [] to_s ","outer_class [] "," class_name ","exp body= ","exp body ","exp module_name "," process_all! ","@current_module [] []= ","@current_module [] ","@current_module [] << ","@current_module [] include? ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","outer_module [] to_s + + ","outer_module [] to_s + ","outer_module [] to_s ","outer_module [] ","Brakeman Library  new ","@current_module add_file ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","@current_class name to_s + + ","@current_class name to_s + ","@current_class name to_s ","@current_class name ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","outer_module name to_s + + ","outer_module name to_s + ","outer_module name to_s ","outer_module name "," handle_module ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym : class_name )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s "," class_name  to_s ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym : class_name )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym "," class_(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," class_(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," class_ class_name  "," class_(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," class_(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," class_(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp module_(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp module_(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp module_ class_name  ","exp module_(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp module_(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp module_(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@tracker libs []  [] []= ","Brakeman Library  new  [] []= ","@tracker libs []  [] ","Brakeman Library  new  [] ","@tracker libs []  [] << ","Brakeman Library  new  [] << ","@tracker libs []  [] include? ","Brakeman Library  new  [] include? ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym : class_name )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","@tracker libs []  add_file ","Brakeman Library  new  add_file ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) : class_name ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_class  class_name  to_s + + ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_class  class_name  to_s + ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_class  class_name  to_s ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_class  class_name  ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) : class_name ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","outer_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_module  class_name  to_s + + ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_module  class_name  to_s + ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_module  class_name  to_s ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","outer_module  class_name  ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","outer_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "]}," LibraryProcessor process_class":{"type":"method","name":"process_class","children":[],"call":["exp []= "," process ","exp [] ","@tracker libs []= ","@tracker libs "," class_name ","@tracker libs [] ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","@current_module [] to_s + + ","name to_s ","@current_module [] to_s + ","@current_module [] to_s ","@current_module [] ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","outer_class [] to_s + + ","outer_class [] to_s + ","outer_class [] to_s ","outer_class [] ","Brakeman  debug ","exp body= ","exp body ","exp parent_name ","exp class_name "," process_all! ","@current_class [] []= ","@current_class [] ","@current_class [] << ","@current_class [] include? ","Brakeman Library  new ","@current_class add_file ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","@current_module name to_s + + ","@current_module name to_s + ","@current_module name to_s ","@current_module name ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","outer_class name to_s + + ","outer_class name to_s + ","outer_class name to_s ","outer_class name "," handle_class "," class_(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," class_(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," class_ class_name  "," class_(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," class_(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym : class_name )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s "," class_name  to_s ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym : class_name )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","exp parent_(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp parent_(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp parent_ class_name  ","exp parent_(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp parent_(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp  class_name _name ","exp class_(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp class_(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp class_ class_name  ","exp class_(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp class_(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@tracker libs []  [] []= ","Brakeman Library  new  [] []= ","@tracker libs []  [] ","Brakeman Library  new  [] ","@tracker libs []  [] << ","Brakeman Library  new  [] << ","@tracker libs []  [] include? ","Brakeman Library  new  [] include? ","@tracker libs []  add_file ","Brakeman Library  new  add_file ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) : class_name ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","@current_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_module  class_name  to_s + + ","@current_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_module  class_name  to_s + ","@current_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_module  class_name  to_s ","@current_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_module  class_name  ","@current_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) : class_name ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","outer_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_class  class_name  to_s + + ","outer_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_class  class_name  to_s + ","outer_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_class  class_name  to_s ","outer_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","outer_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","outer_class  class_name  ","outer_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","outer_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "]}," LibraryProcessor process_library":{"type":"method","name":"process_library","children":[],"call":[" process "]}," LibraryProcessor initialize":{"type":"method","name":"initialize","children":[],"call":["AliasProcessor  new ","Brakeman AliasProcessor  new "]}," RenderHelper get_options":{"type":"method","name":"get_options","children":[],"call":["options []= ","key [] "," symbol? "," hash_iterate "," hash? ","key value "]}," RenderHelper template_name":{"type":"method","name":"template_name","children":[],"call":[" raise "]}," RenderHelper process_template":{"type":"method","name":"process_template","children":[],"call":["@tracker processor process_template ","template [] ","@tracker processor ","TemplateAliasProcessor  new process_safely ","TemplateAliasProcessor  new ","template_env []= ","Sexp  new ","options [] [] to_sym ","options [] [] ","options [] "," symbol? "," string? ","template [] to_s match [] to_sym ","template [] to_s match [] ","template [] to_s match ","template [] to_s ","key [] "," hash_iterate "," hash? "," get_options ","@tracker template_cache << ","@tracker template_cache ","@tracker template_cache include? ","Digest SHA1  new update to_s to_sym ","Digest SHA1  new update to_s ","Digest SHA1  new update ","template_env instance_variable_get to_a sort to_s << ","template_env instance_variable_get to_a sort to_s ","template_env instance_variable_get to_a sort ","template_env instance_variable_get to_a ","template_env instance_variable_get ","Digest SHA1  new "," only_ivars "," warn ","OPTIONS  [] ","@tracker templates [] ","name to_sym ","@tracker templates ","name to_s gsub ","name to_s "," process_layout ","template [] to_s match ! ","options [] [] == "," sexp? "," process_template ","Brakeman TemplateAliasProcessor  new process_safely ","Brakeman TemplateAliasProcessor  new ","value original_line= ","value line ","value original_line ","template_env all each ","template_env all ","@tracker options [] ","@tracker options ","Brakeman  debug "," node_type? ","options [] value to_sym ","options [] value ","key value "," get_class_target ","name + ","src to_s ","template type ","template src ","template name to_s match [] to_sym ","template name to_s match [] ","template name to_s match ","template name to_s ","template name ","template name to_s match ! ","template file ","called_from last_template= ","@tracker processor process_@tracker templates []  ","@tracker templates []  [] "," only_ivars  []= ","@tracker templates [] _env []= "," get_options  [] [] to_sym "," get_options  [] [] "," get_options  [] ","@tracker templates []  [] to_s match [] to_sym ","@tracker templates []  [] to_s match [] ","@tracker templates []  [] to_s match ","@tracker templates []  [] to_s "," get_ get_options  ","@tracker @tracker templates [] _cache << ","@tracker @tracker templates [] _cache ","@tracker @tracker templates [] _cache include? ","template_env instance_options [] [] to_sym _get to_a sort to_s << ","template_env instance_template [] to_s match [] to_sym _get to_a sort to_s << ","template_env instance_options [] value to_sym _get to_a sort to_s << ","template_env instance_template name to_s match [] to_sym _get to_a sort to_s << "," only_ivars  instance_variable_get to_a sort to_s << ","@tracker templates [] _env instance_variable_get to_a sort to_s << ","template_env instance_options [] [] to_sym _get to_a sort to_s ","template_env instance_template [] to_s match [] to_sym _get to_a sort to_s ","template_env instance_options [] value to_sym _get to_a sort to_s ","template_env instance_template name to_s match [] to_sym _get to_a sort to_s "," only_ivars  instance_variable_get to_a sort to_s ","@tracker templates [] _env instance_variable_get to_a sort to_s ","template_env instance_options [] [] to_sym _get to_a sort ","template_env instance_template [] to_s match [] to_sym _get to_a sort ","template_env instance_options [] value to_sym _get to_a sort ","template_env instance_template name to_s match [] to_sym _get to_a sort "," only_ivars  instance_variable_get to_a sort ","@tracker templates [] _env instance_variable_get to_a sort ","template_env instance_options [] [] to_sym _get to_a ","template_env instance_template [] to_s match [] to_sym _get to_a ","template_env instance_options [] value to_sym _get to_a ","template_env instance_template name to_s match [] to_sym _get to_a "," only_ivars  instance_variable_get to_a ","@tracker templates [] _env instance_variable_get to_a ","template_env instance_options [] [] to_sym _get ","template_env instance_template [] to_s match [] to_sym _get ","template_env instance_options [] value to_sym _get ","template_env instance_template name to_s match [] to_sym _get "," only_ivars  instance_variable_get ","@tracker templates [] _env instance_variable_get ","@tracker @tracker templates [] s [] ","name to_s gsub  to_sym ","@tracker @tracker templates [] s ","name to_s gsub  to_s gsub ","name to_s gsub  to_s ","@tracker templates []  [] to_s match ! "," get_options  [] [] == "," process_@tracker templates []  "," only_ivars  all each ","@tracker templates [] _env all each "," only_ivars  all ","@tracker templates [] _env all ","@tracker  get_options  [] ","@tracker  get_options  "," get_options  [] value to_sym "," get_options  [] value ","name to_s gsub  + ","TemplateAliasProcessor  new process_safely  to_s ","Brakeman TemplateAliasProcessor  new process_safely  to_s ","@tracker templates []  type ","template TemplateAliasProcessor  new process_safely  ","template Brakeman TemplateAliasProcessor  new process_safely  ","@tracker templates []  src ","@tracker templates []  name to_s match [] to_sym ","template name to_s gsub  to_s match [] to_sym ","@tracker templates []  name to_s match [] ","template name to_s gsub  to_s match [] ","@tracker templates []  name to_s match ","template name to_s gsub  to_s match ","@tracker templates []  name to_s ","template name to_s gsub  to_s ","@tracker templates []  name ","template name to_s gsub  ","@tracker templates []  name to_s match ! ","template name to_s gsub  to_s match ! ","@tracker templates []  file ","called_from last_@tracker templates [] = "]}," RenderHelper process_action":{"type":"method","name":"process_action","children":[],"call":[" process_template "," template_name ","name is_a? "]}," RenderHelper process_partial":{"type":"method","name":"process_partial","children":[],"call":[" process_template "," template_name ","names join ","names []= ","_ + ","names [] ","name [] to_s split ","name [] to_s ","name [] ","(or\n  (send nil :string?\n    (lvar :name))\n  (send nil :symbol?\n    (lvar :name))) ! "," symbol? "," string? ","name == ","name value to_s split ","name value to_s ","name value ","name value == ","name [] to_s split  join ","name value to_s split  join ","name [] to_s split  []= ","name value to_s split  []= ","name [] to_s split  [] ","name value to_s split  [] "]}," RenderHelper process_render":{"type":"method","name":"process_render","children":[],"call":[" process_partial ","exp [] "," process_template "," template_name "," process_action ","exp [] [] "," process_default "," raise ","Brakeman  debug ","exp render_type ","exp line "]}," ProcessorHelper class_name":{"type":"method","name":"class_name","children":[],"call":[" raise "," process ","(str \"::\") to_sym ","exp [] ","(begin\n  (send nil :class_name\n    (send\n      (lvar :exp) :[]\n      (int 1)))) to_sym "," class_name ","exp node_type ","exp [] to_sym ","exp value ","exp value to_sym ","(begin\n  (send nil :class_name\n    (send\n      (lvar :exp) :lhs))) to_sym ","exp rhs ","exp lhs "]}," ProcessorHelper process_module":{"type":"method","name":"process_module","children":[],"call":[" process ","exp [] "," class_name to_s "," class_name ","exp body ","exp class_name "," process_all "," block_given? "]}," FindModelCall get_target":{"type":"method","name":"get_target","children":[],"call":[" process "," match "," get_target ","exp [] "," class_name ","exp node_type "," sexp? "," ma get_target ch "," ge get_target _ get_target arge get_target  ","exp node_ get_target ype "]}," FindModelCall initialize":{"type":"method","name":"initialize","children":[],"call":["OPTIONS  [] "]}," FindCall is_instance_of?":{"type":"method","name":"is_instance_of?","children":[],"call":["item [] == ","item [] ","item [] [] == ","item [] [] ","item [] node_type == ","item [] node_type "," sexp? "," call? ","item target == ","item target ","item method == ","item method ","item target value == ","item target value ","item target node_type == ","item target node_type "]}," FindCall match":{"type":"method","name":"match","children":[],"call":[" raise ","search_terms match ","item to_s "," match ","search_terms each ","item == ","search_terms empty? "," is_instance_of? "," sexp? ","search_terms == "]}," FindCall get_target":{"type":"method","name":"get_target","children":[],"call":[" class_name ","exp [] ","exp node_type "," sexp? ","exp value "]}," FindCall process_attrasgn":{"type":"method","name":"process_attrasgn","children":[],"call":[" process_call "]}," FindCall process_call":{"type":"method","name":"process_call","children":[],"call":["@calls << ","Sexp  new line ","exp line ","Sexp  new "," match "," process ","exp [] "," get_target ","exp [] [] == ","exp [] [] "," sexp? "," node_type? ","exp target "," process_all ","exp args ","exp method "," process_call_args "," call? "," get_ get_target  ","exp  get_target  ","exp exp []  ","exp exp method  "]}," FindCall process_rlist":{"type":"method","name":"process_rlist","children":[],"call":[" process ","exp [] each ","exp [] "," process_all "]}," FindCall process_selfdef":{"type":"method","name":"process_selfdef","children":[],"call":[" process ","exp [] "]}," FindCall process_methdef":{"type":"method","name":"process_methdef","children":[],"call":[" process ","exp [] ","exp body "," process_all "]}," FindCall process_source":{"type":"method","name":"process_source","children":[],"call":[" process "]}," FindCall matches":{"type":"method","name":"matches","children":[],"call":[]}," FindCall initialize":{"type":"method","name":"initialize","children":[],"call":[]}," HamlTemplateProcessor is_buffer_target?":{"type":"method","name":"is_buffer_target?","children":[],"call":["exp [] == ","exp [] ","exp node_type == ","exp node_type ","exp method == ","exp method ","exp target value == ","exp target value ","exp target "," node_type? "]}," HamlTemplateProcessor process_block":{"type":"method","name":"process_block","children":[],"call":["Sexp  new concat compact ","Sexp  new concat ","Sexp  new ","res empty? "," process ","exp map! ","exp [] ","exp [] each ","exp shift ","exp dup ","Sexp dup   new concat compact ","Sexp dup   new concat ","Sexp dup   new "," process  empty? ","exp dup  map! ","exp dup  [] ","exp dup  [] each ","exp dup  shift ","exp dup  dup "]}," HamlTemplateProcessor process_call":{"type":"method","name":"process_call","children":[],"call":["call line ","exp line ","Sexp  new "," process ","exp [] "," make_render ","exp []= ","method == ","target == ","s line ","@current_template [] << ","@current_template [] "," ignore ","out node_type == ","out node_type ","exp [] []= ","exp [] [] "," is_buffer_target? "," sexp? ","res line "," raise ","Exception  new ","4 == ","method to_s "," string? ","target [] == ","target [] "," make_render_in_view ","call original_line ","exp original_line ","exp arglist ","exp arglist= ","exp arglist []= ","exp arglist [] ","exp first_arg ","target method == ","target method "," call? ","exp method ","exp target "," make_call "," process_all! ","exp args ","exp first_arg= "," process_call_args ","call original_line= "," build_output_from_push_text ","exp target= ","@current_template add_output "," string_interp? "," normalize_output "," add_output "," get_pushed_value "," buffer_append? "," process_default ","Sexp  new  line "," make_call  line "," process_default  line ","S process_default   new "," proceSexp  new Sexp  new  "," process_default  [] "," process_default  []= ","exp []  == ","exp method  == ","texp [] [] et == ","texp first_arg et == "," process  == ","exp target  == ","exp [] []=  node_type == ","exp arglist []=  node_type == ","exp first_arg=  node_type == "," normalize_output  node_type == ","exp [] []=  node_type ","exp arglist []=  node_type ","exp first_arg=  node_type "," normalize_output  node_type "," process_default  [] []= "," process_default  [] [] "," iSexp  new _buffer_target? "," is_buffer_texp [] [] et? "," is_buffer_texp first_arg et? "," is_buffer_ process ? "," is_buffer_exp [] ? "," is_buffer_exp target ? "," Sexp  new exp? "," s process_default ? ","reSexp  new  line "," get_pushed_value  line "," raiSexp  new e ","method to_Sexp  new  ","exp []  to_s ","exp method  to_s "," Sexp  new tring? ","texp [] [] et [] == ","texp first_arg et [] == "," process  [] == ","exp []  [] == ","exp target  [] == ","texp [] [] et [] ","texp first_arg et [] "," process  [] ","exp []  [] ","exp target  [] ","Sexp  new  original_line "," make_call  original_line "," process_default  original_line ","exp argliSexp  new t ","exp exp [] [] list ","exp exp first_arg list "," process_default  arglist ","exp argliSexp  new t= ","exp exp [] [] list= ","exp exp first_arg list= "," process_default  arglist= ","exp argliSexp  new t []= ","exp exp [] [] list []= ","exp exp first_arg list []= "," process_default  arglist []= ","exp argliSexp  new t [] ","exp exp [] [] list [] ","exp exp first_arg list [] "," process_default  arglist [] ","exp firSexp  new t_arg ","exp first_exp [] []  ","exp first_exp first_arg  "," process_default  first_arg ","texp [] [] et method == ","texp first_arg et method == ","target exp []  == ","target exp method  == "," process  method == ","exp []  method == ","exp target  method == ","texp [] [] et method ","texp first_arg et method ","target exp []  ","target exp method  "," process  method ","exp []  method ","exp target  method "," Sexp  new ? ","  make_call ? ","exp exp []  ","exp exp method  "," process_default  method ","exp texp [] [] et ","exp texp first_arg et ","exp  process  ","exp exp target  "," process_default  target "," make_Sexp  new  "," make_ make_call  "," proceSexp  new Sexp  new _all! ","exp argSexp  new  ","exp exp [] [] s ","exp exp first_arg s "," process_default  args ","exp firSexp  new t_arg= ","exp first_exp [] [] = ","exp first_exp first_arg = "," process_default  first_arg= "," process_Sexp  new _args "," process_ make_call _args "," process_call_ process  "," proceSexp  new Sexp  new _call_argSexp  new  "," process_call_exp [] [] s "," process_call_exp first_arg s ","Sexp  new  original_line= "," make_call  original_line= "," build_output_from_puSexp  new h_text "," build_exp [] []= put_from_push_text "," build_exp arglist []= put_from_push_text "," build_exp first_arg= put_from_push_text "," build_ normalize_output put_from_push_text "," build_ normalize_output _from_push_text ","exp texp [] [] et= ","exp texp first_arg et= ","exp  process = ","exp exp [] = ","exp exp target = "," process_default  target= ","@current_template add_exp [] []= put ","@current_template add_exp arglist []= put ","@current_template add_exp first_arg= put ","@current_template add_ normalize_output put ","@current_template add_ normalize_output  "," Sexp  new tring_interp? "," normalize_exp [] []= put "," normalize_exp arglist []= put "," normalize_exp first_arg= put "," normalize_ normalize_output put "," normalize_ normalize_output  "," add_exp [] []= put "," add_exp arglist []= put "," add_exp first_arg= put "," add_ normalize_output put "," add_ normalize_output  "," get_puSexp  new hed_value "," proceSexp  new Sexp  new _default "]}," ErubisTemplateProcessor process_block":{"type":"method","name":"process_block","children":[],"call":["block line ","exp line ","Sexp  new concat compact ","Sexp  new concat ","Sexp  new ","res == "," ignore ","res empty? "," process ","exp map! ","exp shift ","exp dup ","Sexp  new concat compact  line ","exp dup  line ","Sexp dup   new concat compact ","Sexp dup   new concat ","Sexp dup   new "," process  == "," process  empty? ","exp dup  map! ","exp dup  shift ","exp dup  dup "]}," ErubisTemplateProcessor process_call":{"type":"method","name":"process_call","children":[],"call":["call line ","exp line ","Sexp  new ","exp []= "," process ","exp [] "," make_render ","method == ","target == "," abort "," ignore ","@current_template [] << ","@current_template [] ","s line ","args node_type == ","args node_type ","args [] ","args [] == ","exp [] []= ","exp [] [] ","target [] == ","target [] "," sexp? "," make_render_in_view ","call original_line ","exp original_line ","exp arglist= ","exp arglist ","target value == ","target value "," node_type? ","arg node_type == ","arg node_type ","arg target ","arg method == ","arg method ","exp first_arg ","exp method ","exp target "," make_call "," process_all! ","exp args ","call original_line= ","@current_template add_output ","exp target= "," call? "," normalize_output "," add_output "," add_escaped_output ","Sexp  new  line "," make_call  line "," proceSexp  new Sexp  new  ","exp []  == ","exp method  == "," process  == ","exp target  == ","targ target et == ","texp first_arg et == ","t normalize_output et == ","exp []=  node_type == ","args []  node_type == ","exp [] []=  node_type == ","exp arglist=  node_type == ","argSexp  new  node_type == ","arg target s node_type == ","exp first_arg s node_type == "," normalize_output s node_type == ","exp []=  node_type ","args []  node_type ","exp [] []=  node_type ","exp arglist=  node_type ","argSexp  new  node_type ","arg target s node_type ","exp first_arg s node_type "," normalize_output s node_type ","exp []=  [] ","args []  [] ","exp [] []=  [] ","exp arglist=  [] ","argSexp  new  [] ","arg target s [] ","exp first_arg s [] "," normalize_output s [] ","exp []=  [] == ","args []  [] == ","exp [] []=  [] == ","exp arglist=  [] == ","argSexp  new  [] == ","arg target s [] == ","exp first_arg s [] == "," normalize_output s [] == "," process  [] == ","exp []  [] == ","exp target  [] == ","targ target et [] == ","texp first_arg et [] == ","t normalize_output et [] == "," process  [] ","exp []  [] ","exp target  [] ","targ target et [] ","texp first_arg et [] ","t normalize_output et [] "," Sexp  new exp? ","Sexp  new  original_line "," make_call  original_line ","exp argliSexp  new t= ","exp arg target list= ","exp exp first_arg list= ","exp  normalize_output list= ","exp argliSexp  new t ","exp arg target list ","exp exp first_arg list ","exp  normalize_output list "," process  value == ","exp []  value == ","exp target  value == ","targ target et value == ","texp first_arg et value == ","t normalize_output et value == "," process  value ","exp []  value ","exp target  value ","targ target et value ","texp first_arg et value ","t normalize_output et value ","arg target  node_type == ","exp first_arg  node_type == "," normalize_output  node_type == ","arg target  node_type ","exp first_arg  node_type "," normalize_output  node_type ","arg  process  ","arg exp []  ","arg exp target  ","arg target  targ target et ","exp first_arg  texp first_arg et "," normalize_output  t normalize_output et ","arg exp []  == ","arg exp method  == ","arg target  method == ","exp first_arg  method == "," normalize_output  method == ","arg exp method  ","arg target  method ","exp first_arg  method "," normalize_output  method ","exp firSexp  new t_arg ","exp first_arg target  ","exp first_exp first_arg  ","exp first_ normalize_output  ","exp exp []  ","exp exp method  ","exp  process  ","exp exp target  ","exp targ target et ","exp texp first_arg et ","exp t normalize_output et "," make_Sexp  new  "," make_ make_call  "," proceSexp  new Sexp  new _all! ","exp exp []=  ","exp args []  ","exp exp [] []=  ","exp exp arglist=  ","exp argSexp  new  ","exp arg target s ","exp exp first_arg s ","exp  normalize_output s ","Sexp  new  original_line= "," make_call  original_line= ","exp  process = ","exp exp [] = ","exp exp target = ","exp targ target et= ","exp texp first_arg et= ","exp t normalize_output et= "," Sexp  new ? ","  make_call ? "," add_eSexp  new caped_output "]}," ErbTemplateProcessor process_block":{"type":"method","name":"process_block","children":[],"call":["block line ","exp line ","Sexp  new concat compact ","Sexp  new concat ","Sexp  new ","res [] == ","res [] ","res node_type == ","res node_type "," sexp? ","res == "," ignore ","res empty? "," process ","exp map! ","exp [] ","exp [] each ","exp shift "," node_type? ","res value == ","res value ","exp last ","exp dup ","Sexp  new concat compact  line ","exp dup  line ","Sexp dup   new concat compact ","Sexp dup   new concat ","Sexp dup   new "," process  [] == "," process  [] "," process  node_type == "," process  node_type "," sexp dup ? "," process  == "," process  empty? ","exp dup  map! ","exp dup  [] ","exp dup  [] each ","exp dup  shift "," process  value == "," process  value ","exp dup  last ","exp dup  dup "]}," ErbTemplateProcessor process_call":{"type":"method","name":"process_call","children":[],"call":["call line ","exp line ","Sexp  new ","exp []= "," process ","exp [] "," make_render ","method == ","target == "," abort "," ignore ","@current_template [] << ","@current_template [] ","s line ","args node_type == ","args node_type ","args [] ","args [] == "," raise ","Exception  new ","args length > ","args length ","target [] == ","target [] "," sexp? "," make_render_in_view ","call original_line ","exp original_line ","exp arglist= ","exp arglist ","arg node_type == ","arg node_type ","arg target ","arg method == ","arg method ","target value == ","target value "," node_type? ","exp method ","exp target "," make_call "," process_all! ","exp args ","exp first_arg ","exp second_arg ","call original_line= ","exp target= ","@current_template add_output "," call? "," normalize_output "," add_output ","Sexp  new  line "," make_call  line "," proceSexp  new Sexp  new  ","exp []  == ","exp method  == "," process  == ","exp target  == ","targ target et == ","targs [] et == ","texp first_arg et == ","t normalize_output et == ","exp []=  node_type == ","args []  node_type == ","exp arglist=  node_type == ","argSexp  new  node_type == ","arg target s node_type == ","args [] s node_type == ","exp first_arg s node_type == "," normalize_output s node_type == ","exp []=  node_type ","args []  node_type ","exp arglist=  node_type ","argSexp  new  node_type ","arg target s node_type ","args [] s node_type ","exp first_arg s node_type "," normalize_output s node_type ","exp []=  [] ","args []  [] ","exp arglist=  [] ","argSexp  new  [] ","arg target s [] ","args [] s [] ","exp first_arg s [] "," normalize_output s [] ","exp []=  [] == ","args []  [] == ","exp arglist=  [] == ","argSexp  new  [] == ","arg target s [] == ","args [] s [] == ","exp first_arg s [] == "," normalize_output s [] == "," raiSexp  new e ","exp []=  length > ","args []  length > ","exp arglist=  length > ","argSexp  new  length > ","arg target s length > ","args [] s length > ","exp first_arg s length > "," normalize_output s length > ","exp []=  length ","args []  length ","exp arglist=  length ","argSexp  new  length ","arg target s length ","args [] s length ","exp first_arg s length "," normalize_output s length "," process  [] == ","exp []  [] == ","exp target  [] == ","targ target et [] == ","targs [] et [] == ","texp first_arg et [] == ","t normalize_output et [] == "," process  [] ","exp []  [] ","exp target  [] ","targ target et [] ","targs [] et [] ","texp first_arg et [] ","t normalize_output et [] "," Sexp  new exp? ","Sexp  new  original_line "," make_call  original_line ","exp argliSexp  new t= ","exp arg target list= ","exp args [] list= ","exp exp first_arg list= ","exp  normalize_output list= ","exp argliSexp  new t ","exp arg target list ","exp args [] list ","exp exp first_arg list ","exp  normalize_output list ","arg target  node_type == ","exp first_arg  node_type == "," normalize_output  node_type == ","arg target  node_type ","exp first_arg  node_type "," normalize_output  node_type ","arg  process  ","arg exp []  ","arg exp target  ","arg target  targ target et ","args []  targs [] et ","exp first_arg  texp first_arg et "," normalize_output  t normalize_output et ","arg exp []  == ","arg exp method  == ","arg target  method == ","args []  method == ","exp first_arg  method == "," normalize_output  method == ","arg exp method  ","arg target  method ","args []  method ","exp first_arg  method "," normalize_output  method "," process  value == ","exp []  value == ","exp target  value == ","targ target et value == ","targs [] et value == ","texp first_arg et value == ","t normalize_output et value == "," process  value ","exp []  value ","exp target  value ","targ target et value ","targs [] et value ","texp first_arg et value ","t normalize_output et value ","exp exp []  ","exp exp method  ","exp  process  ","exp exp target  ","exp targ target et ","exp targs [] et ","exp texp first_arg et ","exp t normalize_output et "," make_Sexp  new  "," make_ make_call  "," proceSexp  new Sexp  new _all! ","exp exp []=  ","exp args []  ","exp exp arglist=  ","exp argSexp  new  ","exp arg target s ","exp args [] s ","exp exp first_arg s ","exp  normalize_output s ","exp firSexp  new t_arg ","exp first_arg target  ","exp first_args []  ","exp first_exp first_arg  ","exp first_ normalize_output  ","exp Sexp  new econd_arg ","exp second_arg target  ","exp second_args []  ","exp second_exp first_arg  ","exp second_ normalize_output  ","Sexp  new  original_line= "," make_call  original_line= ","exp  process = ","exp exp [] = ","exp exp target = ","exp targ target et= ","exp targs [] et= ","exp texp first_arg et= ","exp t normalize_output et= "," Sexp  new ? ","  make_call ? "]}," ControllerProcessor add_fake_filter":{"type":"method","name":"add_fake_filter","children":[],"call":[" process "," process_defn ","Sexp  new line ","exp line ","Sexp  new ","Sexp  new concat ","@controller [] ","exp [] ","exp [] [] ","exp [] node_type == ","exp [] node_type "," sexp? ","args insert ","(send\n  (str \"fake_filter\") :+\n  (send\n    (send\n      (send nil :rand) :to_s) :[]\n    (regexp\n      (str \"\\\\d+$\")\n      (regopt)))) to_sym ","fake_filter + "," rand to_s [] "," rand to_s "," rand "," node_type? ","exp block ","exp block [] ","exp block_args [] ","exp block_args ","exp block_call arglist ","exp block_call ","Sexp  new concat line ","exp block_args length > ","exp block_args length "," make_call ","Brakeman  debug ","@current_class [] ","@current_class name "," make_call line ","exp block sexp_body ","exp [] []  insert ","exp block_call arglist  insert ","exp block_exp [] []  [] ","exp block_exp block_call arglist  [] ","exp block_exp [] []  ","exp block_exp block_call arglist  ","exp block_exp [] []  length > ","exp block_exp block_call arglist  length > ","exp block_exp [] []  length ","exp block_exp block_call arglist  length ","exp block sexp_Sexp  new  ","exp block sexp_Sexp  new line  "]}," ControllerProcessor process_iter":{"type":"method","name":"process_iter","children":[],"call":[" add_fake_filter ","exp [] [] == ","exp [] [] ","exp [] ","exp block_call method == ","exp block_call method ","exp block_call ","block_call_name == "," call? ","@current_method nil? ","exp block_call method  == "]}," ControllerProcessor process_defs":{"type":"method","name":"process_defs","children":[],"call":["@controller [] []= ","@controller [] ","@controller nil? ","res line ","exp line ","Sexp  new "," process ","exp [] [] ","exp [] "," class_name ","exp [] node_type == ","exp [] node_type ","exp body block ","exp body ","exp method_name "," process_all! ","exp formal_args ","@current_module [] []= ","@current_module [] ","@current_class [] []= ","@current_class [] ","@current_module add_method ","@current_class add_method ","@current_class name ","@current_module name "," node_type? ","Sexp  new  line "," class_exp []  "," class_exp method_name  ","exp method_exp []  ","exp method_exp method_name  ","@current_class exp []  ","@current_class exp method_name  ","@current_module exp []  ","@current_module exp method_name  "]}," ControllerProcessor process_defn":{"type":"method","name":"process_defn","children":[],"call":["@controller [] []= ","@controller [] ","@controller nil? ","res line ","exp line ","Sexp  new "," process ","exp [] [] ","exp [] ","exp body block ","exp body ","exp method_name "," process_all! ","exp formal_args ","@current_module [] []= ","@current_module [] ","@current_class [] []= ","@current_class [] ","@current_module add_method ","@current_class add_method ","Sexp  new  line ","exp method_exp []  ","exp method_exp method_name  "]}," ControllerProcessor process_call":{"type":"method","name":"process_call","children":[],"call":["call line ","exp line ","Sexp  new "," process "," context [] != "," context [] "," context ","exp == "," make_render ","method == ","target == "," ignore ","@controller [] [] << ","args [] ","@controller [] [] ","@controller [] ","@controller [] << "," class_name ","@controller [] []= ","args length == ","args length ","target nil? ","@current_method nil? ","exp [] "," sexp? ","@controller []= ","args [] [] == ","args [] [] "," warn ","OPTIONS  [] ","Dir  glob empty? ","Dir  glob ","args [] [] to_s "," string? ","@tracker options [] ","@tracker options ","Brakeman  debug "," node_type? ","exp arglist ","args last ","args last value to_s ","args last value ","args first ","args empty? ","exp args ","exp method ","exp target "," make_call "," process_all! ","@app_tree layout_exists? ","last_arg value to_s ","last_arg value ","first_arg nil? ","exp last_arg ","exp first_arg ","@controller [] [] unshift ","@current_class [] [] << ","@current_class [] [] ","@current_class [] ","@current_class []= ","@current_class [] [] unshift ","@current_class [] << ","@current_class [] []= "," add_lambda_filter ","@current_class add_option ","@current_class layout= ","@current_class skip_filter ","@current_class prepend_before_filter ","@current_class add_before_filter ","@current_class add_include ","@current_class options []= ","@current_class options "," process_call_defn? "," process_concern ","Sexp  new  line "," make_call  line ","exp []  == ","exp method  == "," process  == ","exp target  == ","exp []  [] ","exp args  [] "," class_args [] [] to_s  "," class_args last value to_s  "," class_last_arg value to_s  ","exp []  length == ","exp args  length == ","exp []  length ","exp args  length "," process  nil? ","exp []  nil? ","exp target  nil? ","@current_exp []  nil? ","@current_exp method  nil? ","exp []  [] [] == ","exp args  [] [] == ","exp []  [] [] ","exp args  [] [] ","exp []  [] [] to_s ","exp args  [] [] to_s ","exp []  last ","exp args  last ","exp []  last value to_s ","exp args  last value to_s ","exp []  last value ","exp args  last value ","exp []  first ","exp args  first ","exp []  empty? ","exp args  empty? ","exp exp []  ","exp exp args  ","exp exp method  ","exp  process  ","exp exp target  "," make_Sexp  new  "," make_ make_call  ","exp last_arg  value to_s ","exp last_arg  value ","exp first_arg  nil? ","exp exp last_arg  ","exp exp first_arg  "," process_Sexp  new _defn? "," process_ make_call _defn? "," process_ class_name  "]}," ControllerProcessor process_class":{"type":"method","name":"process_class","children":[],"call":["exp []= "," process ","exp [] ","@tracker controllers []= ","@controller [] ","@tracker controllers "," class_name ","(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","@current_module + + ","name to_s ","@current_module + "," ignore "," warn ","OPTIONS  [] "," set_layout_name ","@tracker options [] ","@tracker options ","Brakeman  debug ","(send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","@current_module to_s + + ","@current_module to_s + ","@current_module to_s ","exp body= ","exp body ","exp parent_name ","exp class_name "," process_all! "," set_controller "," process_all ","@tracker libs []= ","name to_sym ","@tracker libs ","@tracker libs [] "," process_module ","name to_s end_with? ! ","name to_s end_with? ","Brakeman LibraryProcessor  new process_library ","Brakeman LibraryProcessor  new ","@controller [] to_s end_with? ","@controller [] to_s ","@current_class [] []= ","@current_class [] ","@current_class [] << ","@current_class [] include? ","@tracker controllers [] ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","@current_module [] to_s + + ","@current_module [] to_s + ","@current_module [] to_s ","@current_module [] ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","outer_class [] to_s + + ","outer_class [] to_s + ","outer_class [] to_s ","outer_class [] ","@current_class [] to_s end_with? ","@current_class [] to_s ","Brakeman Controller  new ","@current_class add_file ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","@current_module name to_s + + ","@current_module name to_s + ","@current_module name to_s ","@current_module name ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","outer_class name to_s + + ","outer_class name to_s + ","outer_class name to_s ","outer_class name ","@current_class name to_s end_with? ","@current_class name to_s ","@current_class name "," handle_class ","@tracker libs []  [] "," class_(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," class_ class_name  "," class_(send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," class_(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," class_(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," class_(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," class_(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s "," class_name  to_s ","(send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s "," set_layout_(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," set_layout_ class_name  "," set_layout_(send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," set_layout_(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," set_layout_(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," set_layout_(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," set_layout_(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","(send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","exp parent_(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp parent_ class_name  ","exp parent_(send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp parent_(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp parent_(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp parent_(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp parent_(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp  class_name _name ","exp class_(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp class_ class_name  ","exp class_(send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp class_(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp class_(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp class_(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp class_(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_sym "," class_name  to_sym ","(send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_sym ","(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s end_with? ! "," class_name  to_s end_with? ! ","(send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s end_with? ! ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s end_with? ! ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s end_with? ! ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s end_with? ! ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s end_with? ! ","(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s end_with? "," class_name  to_s end_with? ","(send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s end_with? ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s end_with? ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s end_with? ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s end_with? ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s end_with? ","@tracker libs []  [] to_s end_with? ","@tracker libs []  [] to_s ","@tracker controllers []  [] []= ","Brakeman Controller  new  [] []= ","@tracker controllers []  [] ","Brakeman Controller  new  [] ","@tracker controllers []  [] << ","Brakeman Controller  new  [] << ","@tracker controllers []  [] include? ","Brakeman Controller  new  [] include? ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym : class_name )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :(send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym : class_name )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :(send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","@tracker controllers []  [] to_s end_with? ","Brakeman Controller  new  [] to_s end_with? ","@tracker controllers []  [] to_s ","Brakeman Controller  new  [] to_s ","@tracker controllers []  add_file ","Brakeman Controller  new  add_file ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) : class_name ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :(send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","@current_module (send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_module  class_name  to_s + + ","@current_module (send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_module (send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_module  class_name  to_s + ","@current_module (send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_module (send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_module  class_name  to_s ","@current_module (send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_module (send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_module  class_name  ","@current_module (send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) : class_name ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :(send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","outer_class (send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_class  class_name  to_s + + ","outer_class (send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_class (send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_class  class_name  to_s + ","outer_class (send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_class (send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_class  class_name  to_s ","outer_class (send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_class (send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","outer_class  class_name  ","outer_class (send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","outer_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","outer_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","outer_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","outer_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_class (send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s end_with? ","@current_class  class_name  to_s end_with? ","@current_class (send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s end_with? ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s end_with? ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s end_with? ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s end_with? ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s end_with? ","@tracker controllers []  name to_s end_with? ","Brakeman Controller  new  name to_s end_with? ","@current_class (send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_class  class_name  to_s ","@current_class (send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@tracker controllers []  name to_s ","Brakeman Controller  new  name to_s ","@current_class (send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_class  class_name  ","@current_class (send\n  (send\n    (send\n      (ivar :@current_module) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@tracker controllers []  name ","Brakeman Controller  new  name "]}," ControllerProcessor process_controller":{"type":"method","name":"process_controller","children":[],"call":[" process "]}," ControllerProcessor initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new "]}," ControllerAliasProcessor find_method":{"type":"method","name":"find_method","children":[],"call":[" find_method ","controller [] ","controller [] each ","method nil? ","controller [] [] ","@tracker libs [] ","@tracker libs ","@tracker controllers [] ","@tracker controllers ","method_name to_sym "," sexp? ","@method_cache []= ","@method_cache [] ","method [] ","controller name ","controller parent ","controller includes each ","controller includes ","controller get_method "," find_ find_method  "," find_controller [] []  "," find_@method_cache []  "," find_controller get_method  ","@tracker controllers []  [] ","@tracker controllers []  [] each "," find_method  nil? ","controller [] []  nil? ","@method_cache []  nil? ","controller get_method  nil? ","@tracker controllers []  [] [] ","@tracker @tracker controllers [] s [] ","@tracker @tracker controllers [] s "," find_method _name to_sym ","controller [] [] _name to_sym ","@method_cache [] _name to_sym ","controller get_method _name to_sym ","method_name to_sym  to_sym ","@ find_method _cache []= ","@controller [] [] _cache []= ","@@method_cache [] _cache []= ","@controller get_method _cache []= ","@ find_method _cache [] ","@controller [] [] _cache [] ","@@method_cache [] _cache [] ","@controller get_method _cache [] "," find_method  [] ","controller [] []  [] ","@method_cache []  [] ","controller get_method  [] ","@tracker controllers []  name ","@tracker controllers []  parent ","@tracker controllers []  includes each ","@tracker controllers []  includes ","controller get_ find_method  ","controller get_controller [] []  ","controller get_@method_cache []  ","controller get_controller get_method  ","@tracker controllers []  get_method "]}," ControllerAliasProcessor before_filter_to_hash":{"type":"method","name":"before_filter_to_hash","children":[],"call":["filter []= "," warn ","OPTIONS  [] ","value [] ","v [] ","value [] map ","value node_type ","args [] [] ","args [] ","args [] [] [] ","args [] node_type == ","args [] node_type ","filter [] << ","a [] ","filter [] ","a node_type == ","a node_type ","args [] each "," process_default "," sexp? ","args each ","@tracker options [] ","@tracker options ","Brakeman  debug "," w process_default rn ","args [] []  [] ","v process_default lue [] ","args [] []  [] map ","v process_default lue [] m process_default p ","args [] []  node_type ","v process_default lue node_type "," process_default rgs [] [] "," process_default rgs [] "," process_default rgs [] [] [] "," process_default rgs [] node_type == "," process_default rgs [] node_type "," process_default  [] "," process_default  node_type == "," process_default  node_type "," process_default rgs [] e process_default ch "," process_def process_default ult "," process_default rgs e process_default ch ","@tracker args [] [] [] s [] ","@tr process_default cker options [] ","@tracker args [] [] [] s ","@tr process_default cker options ","Br process_default kem process_default n  debug "]}," ControllerAliasProcessor get_before_filters":{"type":"method","name":"get_before_filters","children":[],"call":["filters concat ","f [] ","f [] include? ! ","f [] include? ","f [] is_a? ","f [] == "," before_filter_to_hash ","filter_list each ","controller [] [] ","controller [] ","f [] != ","controller [] each ","controller []= ","filter_cache << ","controller [] [] each ","controller [] nil? ","filter args "," before_filter_to_hash ilters concat "," before_filter_to_hash  [] "," before_filter_to_hash  [] include? ! "," before_filter_to_hash  [] include? "," before_filter_to_hash  [] is_a? "," before_filter_to_hash  [] == "," be before_filter_to_hash ore_ before_filter_to_hash ilter_to_hash "," before_filter_to_hash ilter_list each ","controller [] []  each "," before_filter_to_hash  [] != "," before_filter_to_hash ilter_cache << "," before_filter_to_hash ilter args "]}," ControllerAliasProcessor before_filter_list":{"type":"method","name":"before_filter_list","children":[],"call":["@tracker controllers [] ","controller [] ","@tracker controllers "," get_before_filters + "," get_before_filters ","@tracker libs [] ","@tracker libs "," remove_skipped_filters ","controller before_filter_list ","@tracker @tracker controllers [] s [] ","@tracker controllers []  [] ","@tracker @tracker controllers [] s "," get_before_ get_before_filters +  + "," get_before_ get_before_filters +  "," remove_skipped_ get_before_filters +  ","@tracker controllers []  before_filter_list "]}," ControllerAliasProcessor route?":{"type":"method","name":"route?","children":[],"call":["routes include? ","routes == ","@tracker routes [] ","@tracker routes ","OPTIONS  [] ","@tracker options [] ","@tracker options ","@tracker routes []  include? ","@tracker routes []  == ","@tracker @tracker routes []  [] ","@tracker @tracker routes []  "]}," ControllerAliasProcessor template_name":{"type":"method","name":"template_name","children":[],"call":[" underscore ","controller + + ","name to_s ","controller + ","controller gsub! ","@current_class to_s gsub ","@current_class to_s ","name include? ","@current_class to_s gsub  + + ","name to_s  to_s ","@current_class to_s gsub  + ","@current_class to_s gsub  gsub! ","name to_s  include? "]}," ControllerAliasProcessor process_template":{"type":"method","name":"process_template","children":[],"call":["Brakeman RenderPath  new add_controller_render ","Brakeman RenderPath  new "," relative_path ","meth [] last line ","meth [] last ","meth [] ","controller get_method ","@tracker controllers [] ","@tracker controllers ","line nil? ","meth src last line ","meth src last ","meth src ","Brakeman RenderPath  new add_@tracker controllers [] _render ","controller get_method  [] last line ","controller get_method  [] last ","controller get_method  [] ","controller get_controller get_method od ","@tracker controllers []  get_method ","@tracker @tracker controllers [] s [] ","@tracker @tracker controllers [] s ","controller get_method  src last line ","controller get_method  src last ","controller get_method  src "]}," ControllerAliasProcessor process_default_render":{"type":"method","name":"process_default_render","children":[],"call":[" process_template "," template_name "," process_layout "]}," ControllerAliasProcessor process_before_filter":{"type":"method","name":"process_before_filter","children":[],"call":[" env []= "," env ","processor only_ivars all each ","processor only_ivars all ","processor only_ivars ","processor process_safely ","method [] ","AliasProcessor  new "," warn ","OPTIONS  [] ","method nil? "," find_method ","Brakeman AliasProcessor  new ","@tracker options [] ","@tracker options ","Brakeman  debug ","ivars each ","@tracker filter_cache []= ","filter [] ","@tracker filter_cache ","@tracker filter_cache [] ","filter nil? ","method body "," only_ivars ","method body_list ","filter owner ","filter src "," tracker find_method "," tracker ","AliasProcessor  new  only_ivars all each ","Brakeman AliasProcessor  new  only_ivars all each ","processor only_processor only_ivars all  all each ","processor only_@tracker filter_cache []  all each ","AliasProcessor  new  only_ivars all ","Brakeman AliasProcessor  new  only_ivars all ","processor only_processor only_ivars all  all ","processor only_@tracker filter_cache []  all ","AliasProcessor  new  only_ivars ","Brakeman AliasProcessor  new  only_ivars ","processor only_processor only_ivars all  ","processor only_@tracker filter_cache []  ","AliasProcessor  new  process_safely ","Brakeman AliasProcessor  new  process_safely "," find_method  [] ","filter []  [] ","filter src  [] "," find_method  nil? ","filter []  nil? ","filter src  nil? "," find_ find_method  "," find_filter []  "," find_filter src  ","processor only_ivars all  each ","@tracker filter_cache []  each ","@tracker  find_method _cache []= ","@tracker  tracker find_method _cache []= "," tracker find_method  [] ","@tracker  find_method _cache ","@tracker  tracker find_method _cache ","@tracker  find_method _cache [] ","@tracker  tracker find_method _cache [] "," tracker find_method  nil? "," find_method  body ","filter []  body ","filter src  body "," only_processor only_ivars all  "," only_@tracker filter_cache []  "," find_method  body_list ","filter []  body_list ","filter src  body_list "," find_method  owner "," tracker find_method  owner "," find_method  src "," tracker find_method  src "," tracker find_ find_method  "," tracker find_filter []  "," tracker find_filter src  "]}," ControllerAliasProcessor process_call_with_block":{"type":"method","name":"process_call_with_block","children":[],"call":["exp [] [] == ","exp [] [] ","exp [] "," process_default ","exp block_call method == ","exp block_call method ","exp block_call "," call? "]}," ControllerAliasProcessor process_call":{"type":"method","name":"process_call","children":[],"call":["exp [] == ","exp [] ","exp method == ","exp method "," call? "," get_call_value ","exp target node_type == ","exp target node_type ","exp target ","exp target nil? ","@tracker options [] ","@tracker options ","method == "," env []= ","Sexp  new ","exp first_arg "," env "," get_call_value  [] == "," get_call_value  [] "," get_call_value  method == ","exp exp method  == "," get_call_value  method ","exp exp method  "," get_call_value  target node_type == "," get_call_value  target node_type "," get_call_value  target "," get_call_value  target nil? ","exp method  == ","S get_call_value   new "," get_call_value  first_arg "]}," ControllerAliasProcessor process_methdef":{"type":"method","name":"process_methdef","children":[],"call":[" process_default_render ","@rendered ! "," process ","exp [] "," process_before_filter "," before_filter_list each "," before_filter_list "," env scope "," env "," route? "," set_env_defaults ","@only_method != ","@current_method nil? ","exp body ","exp method_name "," process_all ","Brakeman  debug "," meth_env ","exp []  nil? "]}," ControllerAliasProcessor process_class":{"type":"method","name":"process_class","children":[],"call":[" process_default ","(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (ivar :@current_class) :to_s)) to_sym ","@current_module + + ","@current_class to_s ","@current_module + "," class_name ","exp [] ","(dstr\n  (ivar :@current_module)\n  (str \"::\")\n  (ivar :@current_class)) to_sym ","exp class_name ","(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (ivar :(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (ivar :@current_class) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (ivar : class_name ) :to_s)) to_sym ","(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (ivar :(dstr\n  (ivar :@current_module)\n  (str \"::\")\n  (ivar :@current_class)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (ivar :@current_class) :to_s)) to_sym  to_s "," class_name  to_s ","(dstr\n  (ivar :@current_module)\n  (str \"::\")\n  (ivar :@current_class)) to_sym  to_s ","(dstr\n  (ivar :@current_module)\n  (str \"::\")\n  (ivar :(send\n  (send\n    (ivar :@current_module) :+\n    (str \"::\")) :+\n  (send\n    (ivar :@current_class) :to_s)) to_sym )) to_sym ","(dstr\n  (ivar :@current_module)\n  (str \"::\")\n  (ivar : class_name )) to_sym ","(dstr\n  (ivar :@current_module)\n  (str \"::\")\n  (ivar :(dstr\n  (ivar :@current_module)\n  (str \"::\")\n  (ivar :@current_class)) to_sym )) to_sym "]}," ControllerAliasProcessor initialize":{"type":"method","name":"initialize","children":[],"call":["tracker app_tree "]}," ConfigAliasProcessor process_iter":{"type":"method","name":"process_iter","children":[],"call":[" process_default ","exp [] []= ","exp [] ","method == ","target == "," sexp? ","exp [] [] ","exp block_args rhs= ","exp block_args ","exp block_call method ","exp block_call ","exp block_call target "," env []= ","Sexp  new ","exp block_args value "," env ","exp [] []  == ","exp block_call method  == ","exp block_call target  == ","exp block_call exp [] []  ","exp block_call exp block_call method  ","exp block_call exp block_call target  "]}," ConfigProcessor get_rails_config":{"type":"method","name":"get_rails_config","children":[],"call":[" raise "," get_rails_config << ","exp [] "," get_rails_config ","exp [] == "," call? ","exp [] to_s [] to_sym ","exp [] to_s [] ","exp [] to_s ","exp node_type == ","exp node_type "," sexp? "]}," ConfigProcessor include_rails_config?":{"type":"method","name":"include_rails_config?","children":[],"call":["target == "," include_rails_config? ","target [] == ","target [] "," call? ","exp [] ","exp []  == ","exp []  [] == ","exp []  [] "]}," ConfigProcessor process_cdecl":{"type":"method","name":"process_cdecl","children":[],"call":["@tracker config []= ","exp [] [] ","exp [] ","@tracker config ","exp [] == "]}," ConfigProcessor process_attrasgn":{"type":"method","name":"process_attrasgn","children":[],"call":["level []= ","exp [] [] ","exp [] ","options last ","level [] ","options [] each ","options [] ","@tracker config [] ","@tracker config "," get_rails_config "," include_rails_config? ","@tracker config [] []= ","exp [] length > ","exp [] length ","exp [] to_s [] to_sym ","exp [] to_s [] ","exp [] to_s ","exp [] == ","level []  []= ","@tracker config []  []= "," get_rails_config  last ","level []  [] ","@tracker config []  [] "," get_rails_config  [] each "," get_rails_config  [] "]}," ConfigProcessor process_call":{"type":"method","name":"process_call","children":[],"call":["@tracker config []= ","@tracker config "," warn ","exp [] [] [] == ","exp [] [] [] ","exp [] [] ","exp [] ","exp [] == "," process "," sexp? "]}," ConfigProcessor process_config":{"type":"method","name":"process_config","children":[],"call":[" process ","ConfigAliasProcessor  new process_safely ","ConfigAliasProcessor  new ","AliasProcessor  new process_safely ","AliasProcessor  new "]}," ConfigProcessor initialize":{"type":"method","name":"initialize","children":[],"call":["@tracker config [] ","@tracker config "]}," BaseProcessor find_render_type":{"type":"method","name":"find_render_type","children":[],"call":["args []= ","rest << << ","rest << ","key [] "," hash_iterate ","args [] "," hash? "," hash? ! ","Sexp  new ","args [] to_sym ","args [] is_a? "," symbol? "," string? ","args [] == ","args length == ","args length ","args [] nil? ","@tracker options [] ","@tracker options ","types_in_hash include? ","types_in_hash << ","Set  [] ","key value ","args last ","first_arg nil? ","first_arg to_sym ","first_arg is_a? ","first_arg == ","args first ","call last_arg ","call args [] ","call args ","call second_arg nil? ","call second_arg ","call first_arg "," make_inline_render "," hash_access ! "," hash_access ","type == ","Sexp  new line ","call line ","Sexp  new  << << ","Sexp  new line  << << ","Sexp  new  << ","Sexp  new line  << ","key [] s_in_hash include? ","key value s_in_hash include? ","Set  []  include? ","key [] s_in_hash << ","key value s_in_hash << ","Set  []  << ","key args []  ","key Sexp  new  ","key Sexp  new line  ","args first  nil? ","call first_arg  nil? ","args first  to_sym ","call first_arg  to_sym ","args first  is_a? ","call first_arg  is_a? ","args first  == ","call first_arg  == ","call call last_arg  ","call args first  ","call call first_arg  ","key []  == ","key value  == "]}," BaseProcessor make_render":{"type":"method","name":"make_render","children":[],"call":["result line ","exp line ","Sexp  new "," process "," find_render_type ","exp [] ","exp args ","Sexp  new  line "]}," BaseProcessor process_ignore":{"type":"method","name":"process_ignore","children":[],"call":[]}," BaseProcessor process_attrasgn":{"type":"method","name":"process_attrasgn","children":[],"call":["exp []= "," process ","exp [] ","exp dup ","exp arglist= ","exp arglist ","exp target= ","exp target ","exp dup  []= ","exp dup  [] ","exp dup  dup ","exp dup  arglist= ","exp dup  arglist ","exp dup  target= ","exp dup  target "]}," BaseProcessor process_iasgn":{"type":"method","name":"process_iasgn","children":[],"call":["exp []= "," process ","exp [] ","exp dup ","exp rhs= ","exp rhs ","exp dup  []= ","exp dup  [] ","exp dup  dup ","exp dup  rhs= ","exp dup  rhs "]}," BaseProcessor process_lasgn":{"type":"method","name":"process_lasgn","children":[],"call":["exp []= "," process ","exp [] ","exp dup ","exp rhs= ","exp rhs ","exp dup  []= ","exp dup  [] ","exp dup  dup ","exp dup  rhs= ","exp dup  rhs "]}," BaseProcessor process_arglist":{"type":"method","name":"process_arglist","children":[],"call":["exp unshift "," process ","exp map! ","exp shift ","exp dup ","exp dup  unshift ","exp dup  map! ","exp dup  shift ","exp dup  dup "]}," BaseProcessor process_hash":{"type":"method","name":"process_hash","children":[],"call":["exp unshift "," process "," sexp? ","exp map! ","exp shift ","exp dup ","exp dup  unshift "," sexp dup ? ","exp dup  map! ","exp dup  shift ","exp dup  dup "]}," BaseProcessor process_and":{"type":"method","name":"process_and","children":[],"call":["exp []= "," process ","exp [] ","exp dup ","exp dup  []= ","exp dup  [] ","exp dup  dup "]}," BaseProcessor process_or":{"type":"method","name":"process_or","children":[],"call":["exp []= "," process ","exp [] ","exp dup ","exp dup  []= ","exp dup  [] ","exp dup  dup "]}," BaseProcessor process_evstr":{"type":"method","name":"process_evstr","children":[],"call":["exp []= "," process ","exp [] ","exp dup ","exp dup  []= ","exp dup  [] ","exp dup  dup "]}," BaseProcessor process_block":{"type":"method","name":"process_block","children":[],"call":["exp unshift "," process ","exp map! ","exp shift ","exp dup ","exp dup  unshift ","exp dup  map! ","exp dup  shift ","exp dup  dup "]}," BaseProcessor process_dstr":{"type":"method","name":"process_dstr","children":[],"call":["exp unshift ","(send\n  (lvar :exp) :map!) compact! ","res empty? "," process ","e [] ","e [] is_a? ","e is_a? ","exp map! ","exp shift ","exp dup ","e value ","e value is_a? ","exp dup  unshift ","(send\n  (lvar :exp dup ) :map!) compact! "," process  empty? ","exp dup  map! ","exp dup  shift ","exp dup  dup "]}," BaseProcessor process_iter":{"type":"method","name":"process_iter","children":[],"call":["call line ","exp line ","Sexp  new compact ","Sexp  new ","exp [] ","block empty? "," process ","exp dup ","exp block_args ","exp block ","exp block_call ","Sexp  new compact  line "," process  line ","exp dup  line ","Sexp dup   new compact ","Sexp dup   new ","exp dup  [] "," process  empty? ","exp dup  dup ","exp  process _args ","exp dup  block_args ","exp  process  ","exp dup  block ","exp block_Sexp  new compact  ","exp block_ process  ","exp  process _call ","exp dup  block_call "]}," BaseProcessor process_if":{"type":"method","name":"process_if","children":[],"call":["exp []= "," process ","exp [] ","exp dup ","exp else_clause ","exp then_clause ","exp condition "," false? "," true? ","exp dup  []= ","exp dup  [] ","exp dup  dup ","exp dup  else_clause ","exp dup  then_clause ","exp dup  condition ","exp exp []=  "]}," BaseProcessor process_default":{"type":"method","name":"process_default","children":[],"call":["exp unshift ","exp []= "," process ","e empty? ! ","e empty? "," sexp? ","exp each_with_index ","exp shift ","exp dup ","exp dup  unshift ","exp dup  []= "," sexp dup ? ","exp dup  each_with_index ","exp dup  shift ","exp dup  dup "]}," BaseProcessor process_scope":{"type":"method","name":"process_scope","children":[],"call":["exp unshift ","(send\n  (lvar :exp) :map!) compact ","res empty? "," process ","exp map! ","exp shift ","exp dup ","exp dup  unshift ","(send\n  (lvar :exp dup ) :map!) compact "," process  empty? ","exp dup  map! ","exp dup  shift ","exp dup  dup "]}," BaseProcessor initialize":{"type":"method","name":"initialize","children":[],"call":["Sexp  new "," warn_on_default= "," default_method= "," require_empty= "," auto_shift_type= "," strict= ","tracker app_tree "]}," AliasProcessor set_line":{"type":"method","name":"set_line","children":[],"call":[" set_line ","exp each ","exp line "," sexp? ","exp original_line "]}," AliasProcessor only_ivars":{"type":"method","name":"only_ivars","children":[],"call":["res []= ","k node_type == ","k node_type "," env all each "," env all "," env ","SexpProcessor Environment  new ","v dup ","v nil? ! ","v nil? "," request_value? ","lenv all each ","lenv all ","SexpProcessor Environment  new  []= "]}," AliasProcessor join_strings":{"type":"method","name":"join_strings","children":[],"call":["result []= ","string1 [] + ","string2 [] ","string1 [] ","Sexp  new ","result [] length > ","result [] length ","result [] ","result value length > ","result value length ","result value ","result value= ","string1 value + ","string2 value ","string1 value ","Sexp  new  []= ","Sexp  new  [] length > ","Sexp  new  [] length ","Sexp  new  [] ","Sexp  new  value length > ","Sexp  new  value length ","Sexp  new  value ","Sexp  new  value= "]}," AliasProcessor join_arrays":{"type":"method","name":"join_arrays","children":[],"call":["result concat ","array2 [] ","array1 [] ","Sexp  new ","Sexp  new  concat "]}," AliasProcessor process_hash_access":{"type":"method","name":"process_hash_access","children":[],"call":["key == "," hash_iterate ","args [] ","args length == ","args length "," hash_access "]}," AliasProcessor process_array_access":{"type":"method","name":"process_array_access","children":[],"call":["target [] ","index + ","args [] [] ","args [] "," integer? ","args length == ","args length ","target [] [] ","args first value ","args first ","args [] []  + ","args first value  + "]}," AliasProcessor process_cdecl":{"type":"method","name":"process_cdecl","children":[],"call":[" env []= ","exp [] "," env ","Sexp  new ","exp [] is_a? ","exp []= "," process "," sexp? ","exp rhs ","exp lhs ","exp lhs is_a? ","exp rhs= "," get_rhs ","@tracker add_constant ","@current_module file ","@current_module is_a? ","@current_class file ","@current_class is_a? "," current_file_name "]}," AliasProcessor process_op_asgn2":{"type":"method","name":"process_op_asgn2","children":[],"call":[" env []= "," env "," env [] ","Sexp  new ","method to_s [] to_sym ","method to_s [] ","method to_s ","exp [] ","exp []= "," process "," process_default ","exp [] != ","exp []  to_s [] to_sym ","exp []  to_s [] ","exp []  to_s "]}," AliasProcessor process_op_asgn1":{"type":"method","name":"process_op_asgn1","children":[],"call":[" env []= "," env "," env [] ","Sexp  new ","exp []= "," process ","exp [] ","exp [] []= ","exp [] [] "," process_default ","exp [] != "," request_value? ","match combine "," s ","exp [] == ","target_var deep_clone "," s line ","exp line "," request_exp []= ? ","Sexp  new  combine ","exp []= _var deep_clone ","exp []  deep_clone "]}," AliasProcessor process_hash_merge":{"type":"method","name":"process_hash_merge","children":[],"call":[" hash_insert "," hash_iterate ","hash deep_clone "," hash deep_clone _insert "," hash deep_clone _iterate ","hash deep_clone  deep_clone "]}," AliasProcessor process_hash_merge!":{"type":"method","name":"process_hash_merge!","children":[],"call":[" env []= "," env ","Sexp  new "," hash_insert "," hash_iterate ","hash deep_clone "," hash deep_clone _insert "," hash deep_clone _iterate ","hash deep_clone  deep_clone "]}," AliasProcessor process_attrasgn":{"type":"method","name":"process_attrasgn","children":[],"call":[" raise "," env []= "," env ","Sexp  new ","method to_s [] to_sym ","method to_s [] ","method to_s ","exp [] []= "," process ","exp [] [] ","exp [] ","method to_s [] == "," hash_insert ","target deep_clone "," hash? ","method == ","exp []= "," env [] ","val != ","exp first_arg= ","args first ","exp second_arg= ","args second ","exp args ","exp method ","exp target= ","exp target ","exp second_arg ","exp first_arg "," set_value ","exp line "," get_rhs "," node_type? ","exp []  to_s [] to_sym ","exp method  to_s [] to_sym ","exp []  to_s [] ","exp method  to_s [] ","exp []  to_s ","exp method  to_s ","exp []  to_s [] == ","exp method  to_s [] == ","exp []=  deep_clone ","exp target=  deep_clone "," process  deep_clone ","exp []  == ","exp method  == "," env []  != ","exp args  first ","exp args  second ","exp exp args  ","exp exp []  ","exp exp method  ","exp exp []= = ","exp exp target= = ","exp  process = ","exp exp []=  ","exp exp target=  ","exp  process  "," set_exp [] []=  "," set_exp first_arg=  "," set_exp second_arg=  "," set_ get_rhs  "," set_ env [] ue "]}," AliasProcessor process_cvdecl":{"type":"method","name":"process_cvdecl","children":[],"call":[" env []= "," env ","exp []= "," process ","exp [] ","Sexp  new "," env [] ","val != ","exp rhs= ","exp rhs ","exp lhs "," set_value ","exp line "," get_rhs "," env []  != "," set_exp []=  "," set_exp rhs=  "," set_ get_rhs  "," set_ env [] ue "]}," AliasProcessor process_gasgn":{"type":"method","name":"process_gasgn","children":[],"call":[" env []= "," env ","exp []= "," process ","exp [] ","Sexp  new "," env [] ","val != ","exp rhs= ","exp rhs ","exp lhs "," set_value ","exp line ","value line= "," get_rhs "," env []  != "," set_exp []=  "," set_exp rhs=  "," set_ get_rhs  "," set_ env [] ue ","exp []=  line= ","exp rhs=  line= "," get_rhs  line= "," env [] ue line= "]}," AliasProcessor process_iasgn":{"type":"method","name":"process_iasgn","children":[],"call":[" env []= ","exp [] "," env ","Sexp  new line ","exp line ","Sexp  new ","exp []= "," process "," env [] ","val != ","exp rhs ","exp lhs ","exp rhs= "," set_value ","@meth_env []= "," env [] nil? "," self_assign? "," get_rhs "," env []  != "," set_ env [] ue ","  self_assign? ? "]}," AliasProcessor process_lasgn":{"type":"method","name":"process_lasgn","children":[],"call":[" env []= ","exp [] "," env ","Sexp  new line ","exp line ","Sexp  new ","exp []= "," process "," sexp? "," env [] ","val != ","val [] != ","val [] ","exp [] nil? ","exp rhs ","exp lhs ","exp rhs nil? ","exp rhs= ","val lhs == ","val lhs ","val rhs == ","val rhs "," node_type? "," set_value "," self_assign? "," get_rhs "," env []  != "," env []  [] != "," env []  [] "," env []  lhs == "," env []  lhs "," env []  rhs == "," env []  rhs "," set_ env [] ue ","  self_assign? ? "]}," AliasProcessor process_selfdef":{"type":"method","name":"process_selfdef","children":[],"call":[" process ","exp [] "," set_env_defaults "," env scope "," env ","exp body ","exp body= "," process_all! "]}," AliasProcessor process_methdef":{"type":"method","name":"process_methdef","children":[],"call":[" process ","exp [] "," set_env_defaults "," env scope "," env ","exp body ","exp body= "," process_all! "," meth_env "]}," AliasProcessor process_block":{"type":"method","name":"process_block","children":[],"call":[" process_default "," env scope "," env "]}," AliasProcessor process_scope":{"type":"method","name":"process_scope","children":[],"call":[" process ","exp [] "," env scope "," env ","exp block "]}," AliasProcessor process_call":{"type":"method","name":"process_call","children":[],"call":[" process_hash_merge ","args [] "," hash? "," env []= "," env "," process_hash_merge! "," process_hash_access "," process_array_access "," array? ","joined line ","exp line "," join_strings "," string? "," join_arrays ","exp [] "," call? "," process_default ","target nil? "," find_push_target ","target << ","target [] << ","args [] [] ","target [] ","Sexp  new ","target [] / "," number? ","target [] * ","target [] - ","target [] + ","target [] []= ","target [] [] [] + ","target [] [] [] ","target [] [] ","target [] == ","target value << ","first_arg value ","target value ","exp args ","target value / ","target value * ","target value - ","target first_arg= ","target first_arg value + ","target first_arg value ","target first_arg ","target method == ","target method ","target value + ","exp first_arg ","exp method ","exp target "," process_or_simple_operation ","(sym :+) include? "," node_type? "," collapse_send_call ","method == ","target last << ","target last ","target last is_a? ","target last value << ","target last value "," string_interp? ","Sexp  new concat ","first_arg [] "," node_type? ! ","@exp_context last ","first_arg nil? ","target == ","target_var deep_clone ","@tracker error ","Exception  new ","Brakeman OutputProcessor  new format ","Brakeman OutputProcessor  new "," require ","(ivar :@current_class) compact join ","(ivar :@current_class) compact ","first_arg line ","target value is_a? ! ","target value is_a? ","first_arg value == "," process_call_defn? "," sexp? ","exp == ","exp node_type= ","exp node_type == ","exp node_type "," process_bracket_call ","exp method == "," s line "," s "," process_array_join ","target length > ","target length "," new_string? "," math_op ","first_arg sexp_body "," process ","Sexp  new concat line ","Sexp  new line ","exp arglist= ","exp first_arg [] sexp_body ","exp first_arg [] ","exp second_arg nil? ","exp second_arg "," splat_array? "," hash_values_at "," hash_values ","return_value deep_clone ","klass get_simple_method_return_value "," tracker find_class "," class_name "," tracker ","res any? "," safe_literal "," all_literals? ","arg include? ","exp []  [] ","exp first_arg s [] "," join_strings  line "," join_arrays  line "," process_default  line ","Sexp  new  line ","Sexp  new concat  line ","target []  line "," s line  line "," process_array_join  line "," process_hash_access  line "," process_array_access  line "," math_op  line "," process  line ","Sexp  new concat line  line "," hash_values_at  line "," hash_values  line "," safe_literal  line "," process_default  [] ","Sexp  new  [] ","Sexp  new concat  [] ","target []  [] "," s line  [] "," process_array_join  [] "," process_hash_access  [] "," process_array_access  [] "," math_op  [] "," join_strings  [] "," join_arrays  [] "," process  [] ","Sexp  new concat line  [] "," hash_values_at  [] "," hash_values  [] "," safe_literal  [] "," process_hash_merge!  nil? ","exp []  nil? "," find_push_target  nil? ","exp target  nil? ","texp first_arg et nil? "," find_push_ process_hash_merge!  "," find_push_exp []  "," find_push_ find_push_target  "," find_push_exp target  "," find_push_texp first_arg et "," process_hash_merge!  << ","exp []  << "," find_push_target  << ","exp target  << ","texp first_arg et << "," process_hash_merge!  [] << ","exp []  [] << "," find_push_target  [] << ","exp target  [] << ","texp first_arg et [] << ","exp []  [] [] ","exp first_arg s [] [] "," process_hash_merge!  [] "," find_push_target  [] ","exp target  [] ","texp first_arg et [] ","S process_default   new ","SSexp  new   new ","SSexp  new concat   new ","Starget []   new ","S s line   new ","S process_array_join   new ","S process_hash_access   new ","S process_array_access   new ","S math_op   new ","S join_strings   new ","S join_arrays   new ","S process   new ","SSexp  new concat line   new ","S hash_values_at   new ","S hash_values   new ","S safe_literal   new "," process_hash_merge!  [] / ","exp []  [] / "," find_push_target  [] / ","exp target  [] / ","texp first_arg et [] / "," process_hash_merge!  [] * ","exp []  [] * "," find_push_target  [] * ","exp target  [] * ","texp first_arg et [] * "," process_hash_merge!  [] - ","exp []  [] - "," find_push_target  [] - ","exp target  [] - ","texp first_arg et [] - "," process_hash_merge!  [] + ","exp []  [] + "," find_push_target  [] + ","exp target  [] + ","texp first_arg et [] + "," process_hash_merge!  [] []= ","exp []  [] []= "," find_push_target  [] []= ","exp target  [] []= ","texp first_arg et [] []= "," process_hash_merge!  [] [] [] + ","exp []  [] [] [] + "," find_push_target  [] [] [] + ","exp target  [] [] [] + ","texp first_arg et [] [] [] + "," process_hash_merge!  [] [] [] ","exp []  [] [] [] "," find_push_target  [] [] [] ","exp target  [] [] [] ","texp first_arg et [] [] [] "," process_hash_merge!  [] [] "," find_push_target  [] [] ","exp target  [] [] ","texp first_arg et [] [] "," process_hash_merge!  [] == ","exp []  [] == "," find_push_target  [] == ","exp target  [] == ","texp first_arg et [] == "," process_hash_merge!  value << ","exp []  value << "," find_push_target  value << ","exp target  value << ","texp first_arg et value << ","exp first_arg  value ","first_exp first_arg  value "," process_hash_merge!  value ","exp []  value "," find_push_target  value ","exp target  value ","texp first_arg et value ","exp exp []  "," process_default  args ","Sexp  new  args ","Sexp  new concat  args ","target []  args "," s line  args "," process_array_join  args "," process_hash_access  args "," process_array_access  args "," math_op  args "," join_strings  args "," join_arrays  args "," process  args ","Sexp  new concat line  args "," hash_values_at  args "," hash_values  args "," safe_literal  args ","exp exp first_arg s "," process_hash_merge!  value / ","exp []  value / "," find_push_target  value / ","exp target  value / ","texp first_arg et value / "," process_hash_merge!  value * ","exp []  value * "," find_push_target  value * ","exp target  value * ","texp first_arg et value * "," process_hash_merge!  value - ","exp []  value - "," find_push_target  value - ","exp target  value - ","texp first_arg et value - "," process_hash_merge!  first_arg= ","exp []  first_arg= "," find_push_target  first_arg= ","exp target  first_arg= ","target exp first_arg = ","texp first_arg et first_exp first_arg = "," process_hash_merge!  first_arg value + ","exp []  first_arg value + "," find_push_target  first_arg value + ","exp target  first_arg value + ","target exp first_arg  value + ","texp first_arg et first_exp first_arg  value + "," process_hash_merge!  first_arg value ","exp []  first_arg value "," find_push_target  first_arg value ","exp target  first_arg value ","target exp first_arg  value ","texp first_arg et first_exp first_arg  value "," process_hash_merge!  first_arg ","exp []  first_arg "," find_push_target  first_arg ","exp target  first_arg ","target exp first_arg  ","texp first_arg et first_exp first_arg  "," process_hash_merge!  method == ","exp []  method == "," find_push_target  method == ","exp target  method == ","target exp []  == ","target exp method  == ","texp first_arg et method == "," process_hash_merge!  method ","exp []  method "," find_push_target  method ","exp target  method ","target exp []  ","target exp method  ","texp first_arg et method "," process_hash_merge!  value + ","exp []  value + "," find_push_target  value + ","exp target  value + ","texp first_arg et value + "," process_default  first_arg ","Sexp  new  first_arg ","Sexp  new concat  first_arg ","target []  first_arg "," s line  first_arg "," process_array_join  first_arg "," process_hash_access  first_arg "," process_array_access  first_arg "," math_op  first_arg "," join_strings  first_arg "," join_arrays  first_arg "," process  first_arg ","Sexp  new concat line  first_arg "," hash_values_at  first_arg "," hash_values  first_arg "," safe_literal  first_arg ","exp exp first_arg  ","exp first_exp first_arg  ","exp exp method  "," process_default  method ","Sexp  new  method ","Sexp  new concat  method ","target []  method "," s line  method "," process_array_join  method "," process_hash_access  method "," process_array_access  method "," math_op  method "," join_strings  method "," join_arrays  method "," process  method ","Sexp  new concat line  method "," hash_values_at  method "," hash_values  method "," safe_literal  method ","exp  process_hash_merge!  ","exp  find_push_target  ","exp exp target  "," process_default  target ","Sexp  new  target ","Sexp  new concat  target ","target []  target "," s line  target "," process_array_join  target "," process_hash_access  target "," process_array_access  target "," math_op  target "," join_strings  target "," join_arrays  target "," process  target ","Sexp  new concat line  target "," hash_values_at  target "," hash_values  target "," safe_literal  target ","exp texp first_arg et ","exp []  == ","exp method  == "," process_hash_merge!  last << ","exp []  last << "," find_push_target  last << ","exp target  last << ","texp first_arg et last << "," process_hash_merge!  last ","exp []  last "," find_push_target  last ","exp target  last ","texp first_arg et last "," process_hash_merge!  last is_a? ","exp []  last is_a? "," find_push_target  last is_a? ","exp target  last is_a? ","texp first_arg et last is_a? "," process_hash_merge!  last value << ","exp []  last value << "," find_push_target  last value << ","exp target  last value << ","texp first_arg et last value << "," process_hash_merge!  last value ","exp []  last value "," find_push_target  last value ","exp target  last value ","texp first_arg et last value ","S process_default   new concat ","SSexp  new   new concat ","SSexp  new concat   new concat ","Starget []   new concat ","S s line   new concat ","S process_array_join   new concat ","S process_hash_access   new concat ","S process_array_access   new concat ","S math_op   new concat ","S join_strings   new concat ","S join_arrays   new concat ","S process   new concat ","SSexp  new concat line   new concat ","S hash_values_at   new concat ","S hash_values   new concat ","S safe_literal   new concat ","exp first_arg  [] ","first_exp first_arg  [] ","@ process_default _context last ","@Sexp  new _context last ","@Sexp  new concat _context last ","@target [] _context last ","@ s line _context last ","@ process_array_join _context last ","@ process_hash_access _context last ","@ process_array_access _context last ","@ math_op _context last ","@ join_strings _context last ","@ join_arrays _context last ","@ process _context last ","@Sexp  new concat line _context last ","@ hash_values_at _context last ","@ hash_values _context last ","@ safe_literal _context last ","exp first_arg  nil? ","first_exp first_arg  nil? "," process_hash_merge!  == "," find_push_target  == ","exp target  == ","texp first_arg et == "," process_hash_merge! _var deep_clone ","exp [] _var deep_clone "," find_push_target _var deep_clone ","exp target _var deep_clone ","exp []  deep_clone ","exp target  deep_clone ","texp first_arg et_var deep_clone ","exp first_arg  line ","first_exp first_arg  line "," process_hash_merge!  value is_a? ! ","exp []  value is_a? ! "," find_push_target  value is_a? ! ","exp target  value is_a? ! ","texp first_arg et value is_a? ! "," process_hash_merge!  value is_a? ","exp []  value is_a? "," find_push_target  value is_a? ","exp target  value is_a? ","texp first_arg et value is_a? ","exp first_arg  value == ","first_exp first_arg  value == "," s process_default ? "," sSexp  new ? "," sSexp  new concat ? "," starget [] ? "," s s line ? "," s process_array_join ? "," s process_hash_access ? "," s process_array_access ? "," s math_op ? "," s join_strings ? "," s join_arrays ? "," s process ? "," sSexp  new concat line ? "," s hash_values_at ? "," s hash_values ? "," s safe_literal ? "," process_default  == ","Sexp  new  == ","Sexp  new concat  == ","target []  == "," s line  == "," process_array_join  == "," process_hash_access  == "," process_array_access  == "," math_op  == "," join_strings  == "," join_arrays  == "," process  == ","Sexp  new concat line  == "," hash_values_at  == "," hash_values  == "," safe_literal  == "," process_default  node_type= ","Sexp  new  node_type= ","Sexp  new concat  node_type= ","target []  node_type= "," s line  node_type= "," process_array_join  node_type= "," process_hash_access  node_type= "," process_array_access  node_type= "," math_op  node_type= "," join_strings  node_type= "," join_arrays  node_type= "," process  node_type= ","Sexp  new concat line  node_type= "," hash_values_at  node_type= "," hash_values  node_type= "," safe_literal  node_type= "," process_default  node_type == ","Sexp  new  node_type == ","Sexp  new concat  node_type == ","target []  node_type == "," s line  node_type == "," process_array_join  node_type == "," process_hash_access  node_type == "," process_array_access  node_type == "," math_op  node_type == "," join_strings  node_type == "," join_arrays  node_type == "," process  node_type == ","Sexp  new concat line  node_type == "," hash_values_at  node_type == "," hash_values  node_type == "," safe_literal  node_type == "," process_default  node_type ","Sexp  new  node_type ","Sexp  new concat  node_type ","target []  node_type "," s line  node_type "," process_array_join  node_type "," process_hash_access  node_type "," process_array_access  node_type "," math_op  node_type "," join_strings  node_type "," join_arrays  node_type "," process  node_type ","Sexp  new concat line  node_type "," hash_values_at  node_type "," hash_values  node_type "," safe_literal  node_type ","exp exp []  == ","exp exp method  == "," process_default  method == ","Sexp  new  method == ","Sexp  new concat  method == ","target []  method == "," s line  method == "," process_array_join  method == "," process_hash_access  method == "," process_array_access  method == "," math_op  method == "," join_strings  method == "," join_arrays  method == "," process  method == ","Sexp  new concat line  method == "," hash_values_at  method == "," hash_values  method == "," safe_literal  method == "," process_hash_merge!  length > ","exp []  length > "," find_push_target  length > ","exp target  length > ","texp first_arg et length > "," process_hash_merge!  length ","exp []  length "," find_push_target  length ","exp target  length ","texp first_arg et length ","first_arg s process_default _body ","first_arg sSexp  new _body ","first_arg sSexp  new concat _body ","first_arg starget [] _body ","first_arg s s line _body ","first_arg s process_array_join _body ","first_arg s process_hash_access _body ","first_arg s process_array_access _body ","first_arg s math_op _body ","first_arg s join_strings _body ","first_arg s join_arrays _body ","first_arg s process _body ","first_arg sSexp  new concat line _body ","first_arg s hash_values_at _body ","first_arg s hash_values _body ","first_arg s safe_literal _body ","exp first_arg  sexp_body ","first_exp first_arg  sexp_body ","S process_default   new concat line ","SSexp  new   new concat line ","SSexp  new concat   new concat line ","Starget []   new concat line ","S s line   new concat line ","S process_array_join   new concat line ","S process_hash_access   new concat line ","S process_array_access   new concat line ","S math_op   new concat line ","S join_strings   new concat line ","S join_arrays   new concat line ","S process   new concat line ","SSexp  new concat line   new concat line ","S hash_values_at   new concat line ","S hash_values   new concat line ","S safe_literal   new concat line ","S process_default   new line ","SSexp  new   new line ","SSexp  new concat   new line ","Starget []   new line ","S s line   new line ","S process_array_join   new line ","S process_hash_access   new line ","S process_array_access   new line ","S math_op   new line ","S join_strings   new line ","S join_arrays   new line ","S process   new line ","SSexp  new concat line   new line ","S hash_values_at   new line ","S hash_values   new line ","S safe_literal   new line "," process_default  arglist= ","Sexp  new  arglist= ","Sexp  new concat  arglist= ","target []  arglist= "," s line  arglist= "," process_array_join  arglist= "," process_hash_access  arglist= "," process_array_access  arglist= "," math_op  arglist= "," join_strings  arglist= "," join_arrays  arglist= "," process  arglist= ","Sexp  new concat line  arglist= "," hash_values_at  arglist= "," hash_values  arglist= "," safe_literal  arglist= ","exp exp first_arg list= "," process_default  first_arg [] s process_default _body ","Sexp  new  first_arg [] sSexp  new _body ","Sexp  new concat  first_arg [] sSexp  new concat _body ","target []  first_arg [] starget [] _body "," s line  first_arg [] s s line _body "," process_array_join  first_arg [] s process_array_join _body "," process_hash_access  first_arg [] s process_hash_access _body "," process_array_access  first_arg [] s process_array_access _body "," math_op  first_arg [] s math_op _body "," join_strings  first_arg [] s join_strings _body "," join_arrays  first_arg [] s join_arrays _body "," process  first_arg [] s process _body ","Sexp  new concat line  first_arg [] sSexp  new concat line _body "," hash_values_at  first_arg [] s hash_values_at _body "," hash_values  first_arg [] s hash_values _body "," safe_literal  first_arg [] s safe_literal _body ","exp exp first_arg  [] sexp_body ","exp first_exp first_arg  [] sexp_body "," process_default  first_arg [] ","Sexp  new  first_arg [] ","Sexp  new concat  first_arg [] ","target []  first_arg [] "," s line  first_arg [] "," process_array_join  first_arg [] "," process_hash_access  first_arg [] "," process_array_access  first_arg [] "," math_op  first_arg [] "," join_strings  first_arg [] "," join_arrays  first_arg [] "," process  first_arg [] ","Sexp  new concat line  first_arg [] "," hash_values_at  first_arg [] "," hash_values  first_arg [] "," safe_literal  first_arg [] ","exp exp first_arg  [] ","exp first_exp first_arg  [] "," process_default  second_arg nil? ","Sexp  new  second_arg nil? ","Sexp  new concat  second_arg nil? ","target []  second_arg nil? "," s line  second_arg nil? "," process_array_join  second_arg nil? "," process_hash_access  second_arg nil? "," process_array_access  second_arg nil? "," math_op  second_arg nil? "," join_strings  second_arg nil? "," join_arrays  second_arg nil? "," process  second_arg nil? ","Sexp  new concat line  second_arg nil? "," hash_values_at  second_arg nil? "," hash_values  second_arg nil? "," safe_literal  second_arg nil? ","exp second_exp first_arg  nil? "," process_default  second_arg ","Sexp  new  second_arg ","Sexp  new concat  second_arg ","target []  second_arg "," s line  second_arg "," process_array_join  second_arg "," process_hash_access  second_arg "," process_array_access  second_arg "," math_op  second_arg "," join_strings  second_arg "," join_arrays  second_arg "," process  second_arg ","Sexp  new concat line  second_arg "," hash_values_at  second_arg "," hash_values  second_arg "," safe_literal  second_arg ","exp second_exp first_arg  ","klass get_simple_method_return_value  deep_clone ","klass get_simple_exp [] _return_value ","klass get_simple_exp method _return_value ","klass get_simple_method_klass get_simple_method_return_value  "," tracker find_class  get_simple_method_return_value "," process_or_simple_operation  any? "," hash_values_at  any? ","exp first_arg  include? "]}," AliasProcessor process_default":{"type":"method","name":"process_default","children":[],"call":[" set_line ","exp line ","replacement deep_clone "," env [] "," env ","exp unshift ","@tracker error ","exp []= "," process ","e empty? ! ","e empty? "," sexp? ","exp each_with_index ","exp shift ","@exp_context pop "," duplicate? ! "," duplicate? ","i == ","@exp_context push ","exp map! "," replace "," raise "," env []  deep_clone "]}," AliasProcessor process_safely":{"type":"method","name":"process_safely","children":[],"call":[" process ","SexpProcessor Environment  new ","src deep_clone ","Marshal  load ","Marshal  dump "]}," AliasProcessor initialize":{"type":"method","name":"initialize","children":[],"call":[" set_env_defaults ","SexpProcessor Environment  new "," warn_on_default= "," default_method= "," require_empty= "," auto_shift_type= "," strict= ","Hash  new ","tracker options [] ","tracker options "]}," Processor process_lib":{"type":"method","name":"process_lib","children":[],"call":["LibraryProcessor  new process_library ","LibraryProcessor  new "]}," Processor process_initializer":{"type":"method","name":"process_initializer","children":[],"call":["@tracker initializers []= ","@tracker initializers ","AliasProcessor  new process ","AliasProcessor  new ","BaseProcessor  new process ","BaseProcessor  new ","Pathname  new basename to_s ","Pathname  new basename ","Pathname  new "]}," Processor process_template_alias":{"type":"method","name":"process_template_alias","children":[],"call":["TemplateAliasProcessor  new process_safely ","template [] ","TemplateAliasProcessor  new "]}," Processor process_template":{"type":"method","name":"process_template","children":[],"call":["@tracker templates [] []= ","@tracker templates [] ","@tracker templates ","(send\n  (send\n    (send\n      (lvar :name) :to_s) :+\n    (str \".\")) :+\n  (send\n    (lvar :called_from) :to_s)) to_sym ","name to_s + + ","called_from to_s ","name to_s + ","name to_s "," abort ","HamlTemplateProcessor  new process ","HamlTemplateProcessor  new ","ErbTemplateProcessor  new process ","ErbTemplateProcessor  new ","ErubisTemplateProcessor  new process ","ErubisTemplateProcessor  new ","(send\n  (send\n    (send\n      (lvar :(send\n  (send\n    (send\n      (lvar :name) :to_s) :+\n    (str \".\")) :+\n  (send\n    (lvar :called_from) :to_s)) to_sym ) :to_s) :+\n    (str \".\")) :+\n  (send\n    (lvar :called_from) :to_s)) to_sym ","(send\n  (send\n    (send\n      (lvar :name) :to_s) :+\n    (str \".\")) :+\n  (send\n    (lvar :called_from) :to_s)) to_sym  to_s + + ","(send\n  (send\n    (send\n      (lvar :name) :to_s) :+\n    (str \".\")) :+\n  (send\n    (lvar :called_from) :to_s)) to_sym  to_s + ","(send\n  (send\n    (send\n      (lvar :name) :to_s) :+\n    (str \".\")) :+\n  (send\n    (lvar :called_from) :to_s)) to_sym  to_s "]}," Processor process_model":{"type":"method","name":"process_model","children":[],"call":["AliasProcessor  new process ","AliasProcessor  new ","ModelProcessor  new process_model ","ModelProcessor  new "]}," Processor process_controller_alias":{"type":"method","name":"process_controller_alias","children":[],"call":["ControllerAliasProcessor  new process ","ControllerAliasProcessor  new "]}," Processor process_controller":{"type":"method","name":"process_controller","children":[],"call":["ControllerProcessor  new process_controller ","ControllerProcessor  new "]}," Processor process_routes":{"type":"method","name":"process_routes","children":[],"call":["RoutesProcessor  new process_routes ","RoutesProcessor  new "]}," Processor process_config":{"type":"method","name":"process_config","children":[],"call":["ConfigProcessor  new process_config ","ConfigProcessor  new "]}," Processor tracked_events":{"type":"method","name":"tracked_events","children":[],"call":[]}," Processor initialize":{"type":"method","name":"initialize","children":[],"call":["Tracker  new "]}," Checks run_checks":{"type":"method","name":"run_checks","children":[],"call":[]}," Checks add_warning":{"type":"method","name":"add_warning","children":[],"call":[" raise ","warning warning_set ","@model_warnings << ","@controller_warnings << ","@warnings << ","@template_warnings << ","warning confidence > ","warning confidence "]}," Checks initialize":{"type":"method","name":"initialize","children":[],"call":["Queue  new ","Brakeman  get_defaults [] ","Brakeman  get_defaults ","options [] "]}," Checks add":{"type":"method","name":"add","children":[],"call":[]}," CheckValidationRegex get_name":{"type":"method","name":"get_name","children":[],"call":["name [] "," sexp? ","validator [] ","name value ","validator []  [] ","validator []  value "]}," CheckValidationRegex check_regex":{"type":"method","name":"check_regex","children":[],"call":[" warn ","CONFIDENCE  [] ","value line ","value [] inspect ","value [] "," get_name ","regex =~ "," regexp? ","2 != ","1 != ","value value inspect ","value value ","regex inspect "," secure_regex? "," msg "," msg_code ","value [] inspect  =~ ","value value inspect  =~ ","value value  =~ "," value [] inspect p? "," value value inspect p? "," value value p? ","value [] inspect  inspect ","value value inspect  inspect ","value value  inspect "," secure_value [] inspect ? "," secure_value value inspect ? "," secure_value value ? "]}," CheckValidationRegex process_validator":{"type":"method","name":"process_validator","children":[],"call":[" check_regex ","key == "," hash_iterate ","validator [] "," hash_access ","validator last "]}," CheckValidationRegex run_check":{"type":"method","name":"run_check","children":[],"call":[" process_validator ","format_validations each ","model [] [] ","model [] "," tracker models each "," tracker models "," tracker "," active_record_models each "," active_record_models "," process_validates ","validates each "," process_validates_format_of ","model options [] ","model options ","model [] []  each ","model options []  each "," process_model [] []  "," process_model options []  "," process_model [] [] _format_of "," process_model options [] _format_of "]}," CheckSQL check_for_limit_or_offset_vulnerability":{"type":"method","name":"check_for_limit_or_offset_vulnerability","children":[],"call":["key [] == ","key [] "," symbol? "," hash_iterate "," hash? ! "," hash? ","@rails_version >= ","@rails_version nil? "," hash_access ","options [] "," rails_version >= "," rails_version "," rails_version nil? "]}," CheckSQL check_call":{"type":"method","name":"check_call","children":[],"call":[" check_call "," call? "," include_user_input? "," string? ","method == "," sexp? ","exp [] "," check_arguments ","method to_s match ","method to_s "," tracker options [] "," tracker options "," tracker ","target == "," check_for_string_building ","exp target ","exp []  == ","exp []  to_s match ","exp []  to_s ","exp exp []  "]}," CheckSQL check_arguments":{"type":"method","name":"check_arguments","children":[],"call":[" check_call "," check_arguments ","arg [] "," hash_iterate ","arg node_type "," sexp? ","arg any? "," check_string_interp "]}," CheckSQL process_result":{"type":"method","name":"process_result","children":[],"call":[" warn ","CONFIDENCE  [] "," include_user_input? ","args [] "," check_for_limit_or_offset_vulnerability "," add_result ","exp [] "," duplicate? ! "," duplicate? "," check_arguments ","args length > ","args length ","call [] to_s =~ ","call [] to_s ","call [] ","call [] == "," process ","call original_line ! ","call original_line ","result [] ","result [] != "," tracker options [] "," tracker options "," tracker ","input match ","Brakeman  debug "," check_lock_arguments "," unsafe_sql? "," check_joins_arguments "," check_order_arguments "," check_query_arguments "," check_find_arguments "," check_by_sql_arguments "," check_scope_arguments ","result [] original_line ","args first ","call arglist ","args last ","args second ","call args ","call method ","call last_arg ","call first_arg ","call length > ","call length ","call third_arg ","call second_arg "," check_update_all_arguments "," active_record_models include? ! "," active_record_models include? ","result [] [] "," active_record_models ","result [] nil? ","@expected_targets include? ! ","@expected_targets include? ","result [] first ","result [] target "," check_exists "," msg "," msg_code "," include_input match ? "," include_user_ include_user_input? ? "," process  [] ","call []  [] ","call args  [] "," process  length > ","call []  length > ","call args  length > "," process  length ","call []  length ","call args  length ","exp []  [] to_s =~ ","result []  [] to_s =~ ","exp []  [] to_s ","result []  [] to_s ","exp []  [] ","result []  [] ","exp []  [] == ","result []  [] == ","exp []  original_line ! ","result []  original_line ! ","exp []  original_line ","result []  original_line "," include_user_input?  match "," process  first ","call []  first ","call args  first ","exp []  arglist ","result []  arglist "," process  last ","call []  last ","call args  last "," process  second ","call []  second ","call args  second ","call  process  ","call call []  ","call call args  ","exp []  args ","result []  args ","exp []  method ","result []  method ","call call method  ","exp []  last_arg ","result []  last_arg ","exp []  first_arg ","result []  first_arg ","exp []  length > ","result []  length > ","exp []  length ","result []  length ","exp []  third_arg ","result []  third_arg ","exp []  second_arg ","result []  second_arg "]}," CheckSQL run_check":{"type":"method","name":"run_check","children":[],"call":[" process ","calls each ","calls concat "," tracker find_call "," tracker "," tracker find_model_find "," tracker models keys "," tracker models "," tracker config [] "," tracker config "," constantize_call? "," tracker find_model_find select "," process_result "," debug_info "," tracker find_call select "," tracker options [] "," tracker options "," find_scope_calls ","Brakeman  debug ","@sql_targets concat "," check_rails_version_for_cve_2012_2695 "," check_rails_version_for_cve_2012_2661 "," check_rails_version_for_cve_2012_2660 "," active_record_models keys "," active_record_models "," check_rails_version_for_cve_2013_0155 "," check_rails_version_for_cve_2012_5664 "," check_rails_versions_against_cve_issues "," connect_call? "," active_record_models keys + ","@connection_calls concat "," check_CVE_2014_0080 ","@sql_targets << << ","@sql_targets << "," version_between? "," tracker config rails_version nil? "," tracker config rails_version ","@sql_targets << << << ","@safe_input_attributes merge ","@sql_targets delete "," tracker find_model_find  each "," tracker find_call  each "," tracker find_model_find  concat "," tracker find_call  concat "," find_scope_ tracker find_model_find  "," find_scope_ tracker find_call  ","@connection_ tracker find_model_find  concat ","@connection_ tracker find_call  concat "]}," CheckSessionSettings run_check":{"type":"method","name":"run_check","children":[],"call":[" warn ","CONFIDENCE  [] ","value [] length < ","value [] length ","value [] "," string? ","key [] == ","key [] ","value node_type == ","value node_type "," sexp? "," symbol? "," hash_iterate "," hash? "," tracker config [] [] [] "," tracker config [] [] "," tracker config [] "," tracker config "," tracker "," process "," tracker initializers [] "," tracker initializers "," check_for_issues ","OPTIONS  [] "," tracker options [] "," tracker options "," ignored? ! "," ignored? ","(str \"session_store.rb\") each "," tracker app_path "," tracker config session_settings "," check_secrets_yaml ","@app_tree expand_path ","file basename ","(lvar :session_store) each ","@app_tree file_path ","(str \"@app_tree file_path .rb\") each "," tracker config session_ tracker config []  "," tracker config session_ tracker config session_settings  ","(lvar :@app_tree file_path ) each "]}," CheckSendFile run_check":{"type":"method","name":"run_check","children":[],"call":[" process_result ","methods each "," tracker find_call "," tracker "," debug_info ","Brakeman  debug "," tracker find_call  each "]}," CheckRender check_for_dynamic_path":{"type":"method","name":"check_for_dynamic_path","children":[],"call":[" warn ","warning []= ","exp line ","CONFIDENCE  [] "," include_user_input? "," add_result "," duplicate? ! "," duplicate? ","view node_type != ","view node_type "," sexp? ","exp [] ","result [] [] ","result [] ","result [] [] == ","result [] line ","message << "," node_type? "," has_immediate_user_input? ","input match ","input type "," friendly_type_of ","input type == "," string_interp? "," safe_param? "," original? "," msg "," msg_input "," renderable? "," include_user_ include_user_input? ? "," include_user_ has_immediate_user_input? ? ","exp []  node_type != ","result [] []  node_type != ","view node_ include_user_input?  != ","exp []  node_type ","result [] []  node_type ","view node_ include_user_input?  "," msg  << "," node_ include_user_input? ? "," has_immediate_user_ include_user_input? ? "," has_immediate_user_ has_immediate_user_input? ? "," include_user_input?  match "," has_immediate_user_input?  match ","input  include_user_input?  "," include_user_input?  type "," has_immediate_user_input?  type "," friendly_ include_user_input? _of ","input  include_user_input?  == "," include_user_input?  type == "," has_immediate_user_input?  type == "," msg_ include_user_input?  "," msg_ has_immediate_user_input?  "]}," CheckRender process_render":{"type":"method","name":"process_render","children":[],"call":[" check_for_dynamic_path ","exp [] ","result [] [] ","result [] ","result [] render_type "," node_type? "]}," CheckRender run_check":{"type":"method","name":"run_check","children":[],"call":[" process ","template [] "," tracker each_template "," tracker "," tracker each_method "," debug_info "," process_render "," tracker find_call each "," tracker find_call "," process_render_result "]}," CheckRedirect only_path?":{"type":"method","name":"only_path?","children":[],"call":[" only_path? ","arg [] == ","arg [] "," call? ","v [] == ","v [] ","v is_a? ","k [] == ","k [] "," symbol? "," hash_iterate "," hash? ","call [] each ","call [] "," check_url_for "," true? "," hash_access ","arg method == ","arg method ","call first_arg "," has_only_path? ","arg first_arg "," use_unsafe_hash_method? ","call first_arg  [] == ","call first_arg  [] ","call first_arg  method == ","call first_arg  method ","call first_call first_arg  ","call first_arg  first_call first_arg  "]}," CheckRedirect include_user_input?":{"type":"method","name":"include_user_input?","children":[],"call":["OPTIONS  [] "," cookies? "," params? ","arg [] to_s =~ ","arg [] to_s ","arg [] "," include_user_input? ","arg [] == ","ALL_PARAMETERS  include? "," call? ","call [] each ","call [] ","@tracker models include? ","@tracker models "," class_name ","call [] [] [] ","call [] [] ","call [] [] [] == "," tracker options [] "," tracker options "," tracker "," debug_info ","Brakeman  debug ","Match  new "," request_value? "," has_immediate_model? ","args each "," model_name? ","args [] [] ","args [] ","args [] [] to_s match ","args [] [] to_s ","@model_find_calls include? ","first_arg target ","first_arg method to_s match ","first_arg method to_s ","first_arg method ","call first_arg ","call args "," array? "," decorated_model? "," model_instance? ","arg method to_s =~ ","arg method to_s ","arg method ","arg method == ","arg target ","opt first_arg ","opt rhs ","opt lhs "," node_type? ","opt method == ","opt method ","opt method to_s =~ ","opt method to_s ","call first_arg  [] to_s =~ ","call first_arg  [] to_s ","call first_arg  [] ","call first_arg  [] == ","call []  each ","call args  each ","call first_arg s each ","call []  [] [] ","call args  [] [] ","call first_arg s [] [] ","call []  [] ","call args  [] ","call first_arg s [] ","call []  [] [] to_s match ","call args  [] [] to_s match ","call first_arg s [] [] to_s match ","call []  [] [] to_s ","call args  [] [] to_s ","call first_arg s [] [] to_s ","first_arg  class_name  ","call first_arg  target ","first_call first_arg  tcall first_arg et ","call first_arg  method to_s match ","first_call first_arg  method to_s match ","call first_arg  method to_s ","first_call first_arg  method to_s ","call first_arg  method ","first_call first_arg  method ","call call first_arg  ","call first_call first_arg  ","call call []  ","call call args  ","call call first_arg s ","call first_arg  method to_s =~ ","call first_arg  method == ","arg  class_name  ","call first_arg  tcall first_arg et ","opt call first_arg  ","opt first_call first_arg  "]}," CheckRedirect process_result":{"type":"method","name":"process_result","children":[],"call":[" warn ","call line ","CONFIDENCE  [] ","res == "," include_user_input? "," only_path? ! "," only_path? ","method == ","call [] ","exp [] ","result [] ","res match ","res type == ","res type "," add_result "," duplicate? ","call method "," explicit_host? ! "," explicit_host? ","call first_arg "," slice_call? ! "," slice_call? "," original? "," safe_permit? ! "," safe_permit? "," allow_other_host? ! "," allow_other_host? "," disallow_other_host? ! "," disallow_other_host? "," protected_by_raise? ! "," protected_by_raise? "," hash_access "," hash? ","call method == ","exp []  line ","result []  line "," include_user_input?  == ","call []  == ","call method  == ","exp []  [] ","result []  [] "," include_user_input? ult [] "," include_user_input?  match "," include_user_input?  type == "," include_user_input?  type "," add_ include_user_input? ult ","call call []  ","call call method  ","exp []  method ","result []  method ","exp []  first_arg ","result []  first_arg "," slice_exp [] ? ! "," slice_result [] ? ! "," slice_exp [] ? "," slice_result [] ? ","call call []  == ","call call method  == ","exp []  method == ","result []  method == "]}," CheckRedirect run_check":{"type":"method","name":"run_check","children":[],"call":[" process ","@tracker find_call each ","@tracker find_call "," process_result "," debug_info ","Brakeman  debug ","@model_find_calls merge "," tracker options [] "," tracker options "," tracker ","Set  [] "," version_between? ","@model_find_calls << ","Set  []  merge ","Set  []  << "]}," CheckModelAttributes run_check":{"type":"method","name":"run_check","children":[],"call":[" warn ","CONFIDENCE  [] ","names sort join ","names sort ","names empty? ! ","names empty? ","OPTIONS  [] ","names << ","name to_s "," parent? "," tracker ","model [] nil? ","model [] "," tracker models each "," tracker models "," mass_assign_disabled? "," tracker options [] "," tracker options ","model [] [] first line ","model [] [] first ","model [] [] "," tracker options [] ! ","model [] [] nil? "," check_models ","protected_names sort join ","protected_names sort ","protected_names empty? ","no_accessible_names sort join ","no_accessible_names sort ","no_accessible_names empty? ","protected_names << ","no_accessible_names << "," check_for_attr_protected_bypass ","model [] first ","model attr_protected first line ","model attr_protected first ","model attr_protected ","model file ","model attr_protected nil? ","model top_line "," msg "," msg_code ","Brakeman  notify "," tracker config has_gem? "," tracker config "]}," CheckMassAssignment check_call":{"type":"method","name":"check_call","children":[],"call":[" hash? ","args [] ","args length <= ","args length "," process ","call [] "," include_user_input? ! "," include_user_input? "," all_literals? ","args first ","args empty? "," process_all ","call args "," all_literal_args? ","first_arg nil? ","call first_arg "," process_call_args ","arg nil? ","call second_arg ","call method == ","call method "," process  [] "," process_all  [] ","call first_arg s [] ","call second_arg s [] "," process  length <= "," process_all  length <= ","call first_arg s length <= ","call second_arg s length <= "," process  length "," process_all  length ","call first_arg s length ","call second_arg s length "," process  first "," process_all  first ","call first_arg s first ","call second_arg s first "," process  empty? "," process_all  empty? ","call first_arg s empty? ","call second_arg s empty? ","call  process  ","call  process_all  ","call call first_arg s ","call call second_arg s "," all_literal_ process ? "," all_literal_ process_all ? "," all_literal_call first_arg s? "," all_literal_call second_arg s? ","call first_arg  nil? ","first_call first_arg  nil? ","first_call second_arg  nil? ","call call first_arg  ","call first_call first_arg  ","call first_call second_arg  "," process_call_ process  "," process_call_ process_all  "," process_call_call first_arg s "," process_call_call second_arg s ","call second_arg  nil? ","call second_call first_arg  ","call second_call second_arg  "]}," CheckMassAssignment process_result":{"type":"method","name":"process_result","children":[],"call":[" warn ","call line ","CONFIDENCE  [] "," include_user_input? ","call [] ","@results << ","@results include? ! ","@results include? "," check_call ","res [] "," hash? ! "," hash? ","call [] [] ","attr_protected ! "," tracker options [] "," tracker options "," tracker ","model [] [] ","model [] "," tracker models [] ","res [] first "," tracker models ","input match "," add_result "," duplicate? ! "," duplicate? ","call original_line ! ","call original_line ","call first_arg ","call arglist "," node_type? ! "," node_type? ","first_arg method == ","first_arg method "," call? ","model attr_protected "," original? ","res []  line "," include_input match ? "," include_user_ include_user_input? ? ","res []  [] ","  check_call _call "," check_res []  ","res []  [] [] "," tracker models []  [] [] "," tracker models []  [] "," tracker  tracker models [] s [] "," tracker  tracker models [] s "," include_user_input?  match ","res []  original_line ! ","res []  original_line ","res []  first_arg ","call call first_arg  ","res []  arglist ","call first_arg  method == ","call first_arg  method "," res [] ? "," tracker models []  attr_protected "]}," CheckMassAssignment run_check":{"type":"method","name":"run_check","children":[],"call":[" process ","calls each "," tracker find_call "," tracker ","Set  new ","models empty? ","models << ","m [] nil? ","m [] "," parent? "," tracker models each "," tracker models "," mass_assign_disabled? "," process_result "," debug_info ","models length ","Brakeman  debug "," unprotected_model? "," check_permit! "," check_mass_assignment "," check_permit_all_parameters "," tracker find_call  each "]}," CheckForgerySetting run_check":{"type":"method","name":"run_check","children":[],"call":[" warn ","CONFIDENCE  [] ","app_controller [] [] ! ","app_controller [] [] ","app_controller [] "," tracker config [] [] [] == ","Sexp  new "," tracker config [] [] [] "," tracker config [] [] "," tracker config [] "," tracker config "," tracker "," tracker controllers [] "," tracker controllers "," version_between? "," gemfile_or_environment ","app_controller [] first "," ancestor? ","args merge! ","forgery_opts first ","forgery_opts is_a? ","access_arg value == ","access_arg value "," hash_access ","forgery_opts first first_arg "," sexp? ","app_controller file ","app_controller options [] ","app_controller options "," rails_version ","app_controller protect_from_forgery? ! ","app_controller protect_from_forgery? "," tracker config allow_forgery_protection? ","app_controller ancestor? ","app_controller top_line "," symbol? "," csrf_warning "," cve_2011_0447 "," check_cve_2011_0447 ","controller options [] ","controller options ","controller file ","controller top_line ","controller protect_from_forgery? ! ","controller protect_from_forgery? ","(send\n  (send\n    (send nil :tracker) :controllers) :select) each ","controller parent == ","controller parent "," tracker controllers select "," tracker config default_protect_from_forgery? "," msg "," msg_code "," tracker controllers []  [] [] ! "," tracker controllers []  [] [] "," tracker controllers []  [] "," tracker controllers []  [] first ","app_controller [] []  first ","app_controller options []  first ","controller options []  first ","app_controller [] []  is_a? ","app_controller options []  is_a? ","controller options []  is_a? "," hash_access  value == "," hash_access  value ","app_controller [] []  first first_arg ","app_controller options []  first first_arg ","controller options []  first first_arg "," tracker controllers []  file "," tracker controllers []  options [] "," tracker controllers []  options "," tracker controllers []  protect_from_forgery? ! "," tracker controllers []  protect_from_forgery? "," tracker controllers []  ancestor? "," tracker controllers []  top_line "]}," CheckFileAccess process_result":{"type":"method","name":"process_result","children":[],"call":[" warn ","call line ","CONFIDENCE  [] ","message << ","check == "," add_result ","result [] "," duplicate? "," include_user_input? ","call [] [] ","call [] ","input match ","input type ","match match ","match type ","file_name [] == ","file_name [] "," call? "," tracker options [] "," tracker options "," tracker ","Match  new "," has_immediate_model? "," has_immediate_user_input? ","file_name method == ","file_name method ","call first_arg "," friendly_type_of capitalize "," friendly_type_of "," original? "," temp_file? ! "," temp_file? "," msg "," msg_input "," temp_file_method? ! "," temp_file_method? "," sanitized? "," called_on_tempfile? ","result []  line "," msg  << "," include_user_input?  == "," include_user_ include_user_input? ? ","result []  [] [] ","result []  [] "," include_user_input?  match ","input  include_user_input?  ","input Match  new  ","input  has_immediate_model?  ","input  has_immediate_user_input?  "," include_user_input?  type "," include_user_input?   include_user_input?  ","Match  new  Match  new  "," has_immediate_model?   has_immediate_model?  "," has_immediate_user_input?   has_immediate_user_input?  ","Match  new  type "," has_immediate_model?  type "," has_immediate_user_input?  type ","call [] []  [] == ","call first_arg  [] == ","call [] []  [] ","call first_arg  [] "," result [] ? "," has_immediate_user_ include_user_input? ? ","call [] []  method == ","call first_arg  method == ","call [] []  method ","call first_arg  method ","result []  first_arg "," msg_ include_user_input?  "," result [] ed_on_tempfile? "]}," CheckFileAccess run_check":{"type":"method","name":"run_check","children":[],"call":[" process_result ","methods each ","methods concat "," tracker find_call "," tracker "," debug_info ","Brakeman  debug "," tracker find_call  each "," tracker find_call  concat "]}," CheckExecute process_dxstr":{"type":"method","name":"process_dxstr","children":[],"call":[" warn ","warning []= ","exp line ","CONFIDENCE  [] "," include_user_input? "," add_result "," duplicate? "]}," CheckExecute check_for_backticks":{"type":"method","name":"check_for_backticks","children":[],"call":[" process ","template [] ","tracker each_template ","tracker each_method "," process_backticks ","tracker find_call each ","tracker find_call "]}," CheckExecute process_result":{"type":"method","name":"process_result","children":[],"call":[" warn ","call line ","CONFIDENCE  [] "," add_result ","exp [] "," duplicate? ! "," duplicate? "," include_interp? "," include_user_input? ","args [] ","call [] "," process ","result [] ","failure match ","call method ","failure type == ","failure type ","call first_arg ","call arglist "," dangerous_interp? "," array? "," original? "," dangerous_string_building? "," dash_c_shell_command? ","call second_arg ","first_arg [] "," array? ! ","args pop ","args length > ","args length "," hash? ","args last ","exp []  line ","result []  line "," process  [] ","call arglist  [] ","exp []  [] ","result []  [] ","exp []  method ","result []  method ","exp []  first_arg ","result []  first_arg ","call call first_arg  ","exp []  arglist ","result []  arglist ","exp []  second_arg ","result []  second_arg ","call first_arg  [] "," process  pop ","call arglist  pop "," process  length > ","call arglist  length > "," process  length ","call arglist  length "," process  last ","call arglist  last "]}," CheckExecute run_check":{"type":"method","name":"run_check","children":[],"call":[" process ","calls each "," tracker find_call "," tracker "," check_for_backticks "," process_result "," debug_info ","Brakeman  debug "," check_open_calls "," tracker find_call  each "," check_open_ tracker find_call  "]}," CheckEvaluation process_result":{"type":"method","name":"process_result","children":[],"call":[" warn ","CONFIDENCE  [] ","result [] "," include_user_input? ","result [] [] ","input match ","result [] arglist "," add_result ","result [] original_line "," duplicate? "," original? "," include_user_ include_user_input? ? "," include_user_input?  match "]}," CheckEvaluation run_check":{"type":"method","name":"run_check","children":[],"call":[" process_result ","calls each "," tracker templates "," tracker "," tracker find_call "," debug_info ","Brakeman  debug "," tracker find_call  each "]}," CheckDefaultRoutes run_check":{"type":"method","name":"run_check","children":[],"call":[" warn ","OPTIONS  [] ","CONFIDENCE  [] ","actions == "," tracker routes each "," tracker routes "," tracker "," tracker routes [] line "," tracker routes [] ","actions [] ","actions [] == ","actions is_a? "," tracker options [] "," tracker options "," debug_info ","Brakeman  debug "," check_for_cve_2014_0130 "," check_for_action_globs "," check_for_default_routes "]}," CheckCrossSiteScripting process_if":{"type":"method","name":"process_if","children":[],"call":[" process "," sexp? ","exp [] each ","exp [] ","exp else_clause ","exp then_clause "]}," CheckCrossSiteScripting process_format_escaped":{"type":"method","name":"process_format_escaped","children":[],"call":[]}," CheckCrossSiteScripting process_format":{"type":"method","name":"process_format","children":[],"call":[" process_default "]}," CheckCrossSiteScripting process_string_interp":{"type":"method","name":"process_string_interp","children":[],"call":[" process_default "]}," CheckCrossSiteScripting process_render":{"type":"method","name":"process_render","children":[],"call":[]}," CheckCrossSiteScripting process_cookies":{"type":"method","name":"process_cookies","children":[],"call":["Match  new "]}," CheckCrossSiteScripting process_params":{"type":"method","name":"process_params","children":[],"call":["Match  new "]}," CheckCrossSiteScripting actually_process_call":{"type":"method","name":"actually_process_call","children":[],"call":[" process "," params? ","ALL_PARAMETERS  include? "," model_name? ","exp [] [] ","exp [] "," sexp? ","exp []= ","method to_s [] == ","method to_s [] ","method to_s ","IGNORE_METHODS  include? ","target == ","method == ","IGNORE_MODEL_METHODS  include? ","@matched == ","method to_s =~ ","target nil? ","COOKIES  == "," cookies? ","@ignore_methods include? ","Match  new ","@matched type == ","@matched type ","target [] ","exp arglist ","exp method ","exp target ","@safe_input_attributes include? "," process_call_args "," ignore_call? ","exp []  to_s [] == ","exp method  to_s [] == ","exp []  to_s [] ","exp method  to_s [] ","exp []  to_s ","exp method  to_s "," process  == ","exp []  == ","exp target  == ","exp method  == ","Match  new  == ","exp []  to_s =~ ","exp method  to_s =~ "," process  nil? ","exp []  nil? ","exp target  nil? ","@ignore_exp [] s include? ","@ignore_exp method s include? ","Match  new  type == ","Match  new  type "," process  [] ","exp []  [] ","exp target  [] ","exp exp []  ","exp exp method  ","exp  process  ","exp exp target  "," process_call_exp []  "," process_call_exp arglist  "]}," CheckCrossSiteScripting process_call":{"type":"method","name":"process_call","children":[],"call":[" warn ","CONFIDENCE  [] ","exp line "," add_result "," duplicate? ! "," duplicate? ","@matched == ","OPTIONS  [] ! ","OPTIONS  [] "," actually_process_call ","KNOWN_DANGEROUS  include? ","exp [] ","exp [] nil? "," tracker options [] ! "," tracker options [] "," tracker options "," tracker ","@known_dangerous include? ","@matched match ","@matched type ","exp method == ","exp method "," friendly_type_of ","message << "," msg_plain "," msg "," msg_input "," msg  << "]}," CheckCrossSiteScripting process_output":{"type":"method","name":"process_output","children":[],"call":[" process ","exp [] ","exp [] dup ","exp value dup ","exp value "]}," CheckCrossSiteScripting run_check":{"type":"method","name":"run_check","children":[],"call":[" process "," warn ","code line "," find_chain ","CONFIDENCE  [] ","method to_s =~ ","method to_s ","MODEL_METHODS  include? "," add_result ","IGNORE_MODEL_METHODS  include? "," duplicate? ","match [] "," has_immediate_model? ","out [] ","OPTIONS  [] ! ","OPTIONS  [] ","match line "," has_immediate_user_input? ","template [] each ","template [] "," tracker each_template "," tracker "," tracker models keys "," tracker models ","IGNORE_METHODS  merge "," duplicate? ! ","CheckLinkTo  new run_check ","CheckLinkTo  new "," checks ","out [] == "," check_for_immediate_xss ","IGNORE_METHODS  << "," version_between? ","KNOWN_DANGEROUS  << "," warnings concat ","link_to_check warnings "," warnings ","link_to_check warnings empty? ","link_to_check run_check "," debug_info ","Brakeman CheckLinkTo  new "," tracker options [] "," tracker options ","@ignore_methods << ","@known_dangerous << ","Set  new ","Set  new merge ","Brakeman  debug "," tracker config [] ! "," tracker config [] "," tracker config ","Set  [] ","Set  [] merge ","json_escape_on ! "," true? ","result [] first_arg ","result [] ","matches detect "," tracker check_initializers ","initializers each ","result call first_arg ","result call ","@safe_input_attributes << "," tracker config [] [] [] "," tracker config [] [] "," setup ","template each_output "," find_chain  line ","match []  to_s =~ ","match []  to_s "," has_immediate_model?  [] "," has_immediate_model?  line ","CheckLinkTo  new  warnings ","Brakeman CheckLinkTo  new  warnings ","CheckLinkTo  new  warnings empty? ","Brakeman CheckLinkTo  new  warnings empty? ","CheckLinkTo  new  run_check ","Brakeman CheckLinkTo  new  run_check ","@ignore_match [] s << ","Set  new merge  << ","Set  [] merge  << ","Set  new  << ","Set  []  << "," true?  ! "," has_immediate_model? es detect "," tracker check_initializers  detect "," tracker check_ tracker check_initializers  "," tracker check_initializers  each "]}," BaseCheck include_target?":{"type":"method","name":"include_target?","children":[],"call":[" include_target? ","e == ","exp each "," call? "]}," BaseCheck find_chain":{"type":"method","name":"find_chain","children":[],"call":[" find_chain "," sexp? ","exp each "," include_target? ","exp == ","exp [] ","exp node_type ","exp value "]}," BaseCheck model_name?":{"type":"method","name":"model_name?","children":[],"call":["@models include? "," class_name "," sexp? ","exp is_a? ","@tracker models keys ","@tracker models ","exp method == ","exp method ","exp target nil? ","exp target "," call? "]}," BaseCheck has_immediate_model?":{"type":"method","name":"has_immediate_model?","children":[],"call":[" has_immediate_model? ","exp [] "," sexp? ","exp [] each ","exp [] node_type == ","exp [] node_type ","exp each ","exp node_type "," model_name? ","method to_s [] == ! ","method to_s [] == ","method to_s [] ","method to_s "," call? ","exp node_type == ","out nil? ","exp rhs ","exp lhs ","exp else_clause ","exp then_clause ","exp value ","exp value each_sexp ","exp value node_type == ","exp value node_type ","exp method ","exp target ","@safe_input_attributes include? "," always_safe_method? ","exp []  [] ","exp value  [] "," sexp [] ? "," sexp value ? ","exp []  [] each ","exp value  [] each ","exp []  [] node_type == ","exp value  [] node_type == ","exp []  [] node_type ","exp value  [] node_type ","exp []  each ","exp value  each ","exp []  node_type ","exp value  node_type ","exp []  to_s [] == ! ","exp method  to_s [] == ! ","exp []  to_s [] == ","exp method  to_s [] == ","exp []  to_s [] ","exp method  to_s [] ","exp []  to_s ","exp method  to_s ","exp []  node_type == ","exp value  node_type == ","exp []  rhs ","exp value  rhs ","exp []  lhs ","exp value  lhs ","exp []  else_clause ","exp value  else_clause ","exp []  then_clause ","exp value  then_clause ","exp []  value ","exp value  value ","exp []  value each_sexp []  ","exp value  value each_sexp value  ","exp []  value node_type == ","exp value  value node_type == ","exp []  value node_type ","exp value  value node_type ","exp exp []  ","exp exp method  ","exp []  method ","exp value  method ","exp exp target  ","exp []  target ","exp value  target "," always_safe_exp [] ? "," always_safe_exp method ? "]}," BaseCheck has_immediate_user_input?":{"type":"method","name":"has_immediate_user_input?","children":[],"call":[" has_immediate_user_input? ","exp [] "," sexp? ","exp [] each ","exp [] node_type == ","exp [] node_type ","exp each ","exp node_type ","exp [] == "," params? ","ALL_PARAMETERS  include? "," call? "," cookies? ","exp nil? "," request_env? ","Match  new ","exp rhs ","exp lhs ","exp else_clause ","exp then_clause ","exp value ","exp value each_sexp ","exp value node_type == ","exp value node_type ","exp target ","@safe_input_attributes include? ! ","@safe_input_attributes include? ","exp method "," always_safe_method? ! "," always_safe_method? ","exp [] each_sexp "," kwsplat? ","exp each_sexp "," request_headers? "]}," BaseCheck include_user_input?":{"type":"method","name":"include_user_input?","children":[],"call":[" process "]}," BaseCheck include_interp?":{"type":"method","name":"include_interp?","children":[],"call":[" process "]}," BaseCheck process_string_interp":{"type":"method","name":"process_string_interp","children":[],"call":["Match  new "," process_default "]}," BaseCheck process_ignore":{"type":"method","name":"process_ignore","children":[],"call":[]}," BaseCheck duplicate?":{"type":"method","name":"duplicate?","children":[],"call":["r [] == ","r [] ","OPTIONS  [] ","@results each ","location to_sym ","location [] ","location is_a? ","result [] ","@current_template [] ","result line "," tracker options [] "," tracker options "," tracker ","result [] [] "," raise ","result original_line "," sexp? ","result [] line ","result [] original_line ","result is_a? ","location name ","@current_template name "," get_location ","location to_sym  to_sym ","location []  to_sym ","location name  to_sym ","location to_sym  [] ","location []  [] ","location name  [] ","location to_sym  is_a? ","location []  is_a? ","location name  is_a? ","result result line  ","result original_result line  ","result [] result line  ","result [] original_result line  ","location to_sym  name ","location []  name ","location name  name "," get_location to_sym  "," get_location []  "," get_location name  "]}," BaseCheck mass_assign_disabled?":{"type":"method","name":"mass_assign_disabled?","children":[],"call":["result [] [] == ","Sexp  new ","result [] [] ","result [] ","matches each ","matches empty? ","tracker check_initializers "," tracker check_initializers "," tracker "," tracker config [] [] [] == "," tracker config [] [] [] "," tracker config [] [] "," tracker config [] "," tracker config "," version_between? "," node_type? ","arg nil? ","result [] [] [] ","result [] == ","@mass_assign_disabled nil? ","call first_arg == ","call first_arg "," call? ","result call ","@mass_assign_disabled ! ","call second_arg == ","call second_arg ","result call first_arg ","result result_class == ","result result_class ","result module == ","result module ","result call second_arg == ","result call second_arg ","result call first_arg == "," tracker check_initializers each "," tracker config [] [] ! "," tracker options [] "," tracker options "," tracker config has_gem? "," tracker config whitelist_attributes? "," tracker config has_gem? ! "," tracker find_call each "," tracker find_call ","tracker check_initializers  each "," tracker check_initializers  each ","tracker check_initializers  empty? "," tracker check_initializers  empty? ","result [] [] []  nil? ","result call first_arg  nil? ","call first_result [] [] []  == ","call first_result call first_arg  == ","result call  first_arg == ","result []  first_arg == ","call first_result [] [] []  ","call first_result call first_arg  ","result call  first_arg ","result []  first_arg "," result call ? "," result [] ? ","result result call  ","result result []  ","call second_result [] [] []  == ","call second_result call first_arg  == ","result call  second_arg == ","result []  second_arg == ","call second_result [] [] []  ","call second_result call first_arg  ","result call  second_arg ","result []  second_arg ","result call first_result [] [] []  ","result call first_result call first_arg  ","result result call  first_arg ","result result []  first_arg ","result call second_result [] [] []  == ","result call second_result call first_arg  == ","result result call  second_arg == ","result result []  second_arg == ","result call second_result [] [] []  ","result call second_result call first_arg  ","result result call  second_arg ","result result []  second_arg ","result call first_result [] [] []  == ","result call first_result call first_arg  == ","result result call  first_arg == ","result result []  first_arg == "," tracker find_result call  each "," tracker find_result []  each "," tracker find_result call  "," tracker find_result []  "]}," BaseCheck parent?":{"type":"method","name":"parent?","children":[],"call":[" parent? ","tracker models [] ","model [] ","tracker models ","model [] == ","model == "," tracker models [] "," tracker models "," tracker "]}," BaseCheck format_output":{"type":"method","name":"format_output","children":[],"call":["OutputProcessor  new format gsub ","OutputProcessor  new format ","OutputProcessor  new ","Brakeman OutputProcessor  new format gsub ","Brakeman OutputProcessor  new format ","Brakeman OutputProcessor  new "]}," BaseCheck warn":{"type":"method","name":"warn","children":[],"call":["@checks add_warning ","Warning  new ","options merge "," class to_s "," class ","@warnings << ","Brakeman Warning  new ","warning file= "," file_for "," relative_path ","options [] ","warning relative_path= ","warning file ","options []= ","@app_tree file_path ","@checks add_Brakeman Warning  new  ","@Brakeman Warning  new s << ","Brakeman Warning  new  file= ","Brakeman Warning  new  relative_path= ","Brakeman Warning  new  file "]}," BaseCheck process_cookies":{"type":"method","name":"process_cookies","children":[],"call":["Match  new "]}," BaseCheck process_params":{"type":"method","name":"process_params","children":[],"call":["Match  new "]}," BaseCheck process_call":{"type":"method","name":"process_call","children":[],"call":[" model_name? ","exp [] [] ","exp [] "," sexp? "," cookies? ","exp == ","exp [] == "," params? ","ALL_PARAMETERS  include? "," process "," request_env? ","Match  new ","target [] ","exp target "," process_all ","exp args ","@safe_input_attributes include? ","exp method "," process_call_args "," always_safe_method? ","@comparison_ops include? "," request_headers? ","exp target  [] ","exp exp target  "]}," BaseCheck process_default":{"type":"method","name":"process_default","children":[],"call":["exp unshift "," process "," sexp? ","exp each_with_index ","exp shift ","exp each "]}," BaseCheck add_result":{"type":"method","name":"add_result","children":[],"call":["@results << ","result line ","location to_sym ","location [] ","location is_a? ","result [] ","@current_template [] "," raise ","result original_line "," sexp? ","result [] line ","result [] original_line ","result is_a? ","result [] [] ","location name ","@current_template name "," get_location ","location to_sym  to_sym ","location []  to_sym ","location name  to_sym "," get_location  to_sym ","location to_sym  [] ","location []  [] ","location name  [] "," get_location  [] ","location to_sym  is_a? ","location []  is_a? ","location name  is_a? "," get_location  is_a? ","location to_sym  name ","location []  name ","location name  name "," get_location  name "," get_location to_sym  "," get_location []  "," get_location name  "," get_ get_location  "]}," BaseCheck initialize":{"type":"method","name":"initialize","children":[],"call":[" warn_on_default= "," default_method= "," require_empty= "," auto_shift_type= "," strict= ","tracker options [] ","tracker options ","Set  [] ","tracker app_tree "]}," OutputProcessor util_dthing":{"type":"method","name":"util_dthing","children":[],"call":["s join "," raise ","pt inspect ","s << << << ","s << << "," process ","s << "," dthing_escape ","pt last ","pt first ","exp shift ","exp empty? ","exp shift  inspect ","exp shift  last ","exp shift  first ","exp emexp shift y? "]}," Report to_tabs":{"type":"method","name":"to_tabs","children":[],"call":["(send\n  (array\n    (array\n      (sym :warnings)\n      (str \"General\"))\n    (array\n      (sym :controller_warnings)\n      (str \"Controller\"))\n    (array\n      (sym :model_warnings)\n      (str \"Model\"))\n    (array\n      (sym :template_warnings)\n      (str \"Template\"))) :map) join ","(send\n  (send\n    (send nil :checks) :send\n    (lvar :meth)) :map) join ","TEXT_CONFIDENCE  [] ","w confidence ","w message ","w warning_type ","w line "," file_for "," checks send map "," checks send "," checks ","(array\n  (sym :warnings)\n  (str \"General\")) map ","w format_message ","w warning_type gsub! ","w confidence > ","OPTIONS  [] "," tracker options [] "," tracker options "," tracker "," warning_file "]}," RenderHelper process_layout":{"type":"method","name":"process_layout","children":[],"call":[" process_template "," layout_name ","name nil? "," layout_ layout_name  "," layout_name  nil? "]}," HamlTemplateProcessor initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","OPTIONS  [] "," require ","lib [] ","name to_s =~ ","name to_s ","@tracker libs each ","@tracker libs ","@tracker options [] ","@tracker options "]}," ControllerProcessor set_layout_name":{"type":"method","name":"set_layout_name","children":[],"call":["@controller []= ","Dir  glob empty? ","Dir  glob ","OPTIONS  [] "," underscore ","@controller [] to_s split [] gsub ","@controller [] to_s split [] ","@controller [] to_s split ","@controller [] to_s ","@controller [] ","@tracker options [] ","@tracker options ","@app_tree layout_exists? ","@current_class []= ","@current_class [] to_s split [] gsub ","@current_class [] to_s split [] ","@current_class [] to_s split ","@current_class [] to_s ","@current_class [] ","@current_class layout= ","@current_class name to_s split [] gsub ","@current_class name to_s split [] ","@current_class name to_s split ","@current_class name to_s ","@current_class name ","@current_class layout ","@current_class  underscore  to_s split [] gsub ","@current_class  underscore  to_s split [] ","@current_class  underscore  to_s split ","@current_class  underscore  to_s ","@current_class  underscore  "]}," ControllerAliasProcessor layout_name":{"type":"method","name":"layout_name","children":[],"call":["app_controller [] ","@tracker controllers [] ","@tracker controllers ","controller [] == ","controller [] ","app_controller layout ","controller layout == ","controller layout ","@tracker controllers []  [] ","app_@tracker controllers []  [] ","@tracker @tracker controllers [] s [] ","@tracker @tracker controllers [] s ","@tracker controllers []  [] == ","@tracker controllers []  layout ","app_@tracker controllers []  layout ","@tracker controllers []  layout == "]}," CheckLinkTo actually_process_call":{"type":"method","name":"actually_process_call","children":[],"call":[" context == "," context "," model_name? "," process ","target dup "," sexp? ","exp [] ","exp target "," process  dup ","exp []  dup ","exp target  dup ","exp  process  ","exp exp []  ","exp exp target  "]}," CheckLinkTo process_call":{"type":"method","name":"process_call","children":[],"call":[" actually_process_call "]}," CheckLinkTo process_result":{"type":"method","name":"process_result","children":[],"call":[" warn ","CONFIDENCE  [] "," add_result "," duplicate? ! "," duplicate? ","@matched == ","OPTIONS  [] ! ","OPTIONS  [] ","method to_s =~ ","method to_s ","MODEL_METHODS  include? ","IGNORE_MODEL_METHODS  include? ","match [] "," has_immediate_model? "," has_immediate_user_input? "," process ","call [] [] ","call [] ","call [] [] nil? ","result []= ","result [] dup ","result [] "," tracker options [] ! "," tracker options [] "," tracker options "," tracker "," check_argument "," hash? ! "," hash? "," version_between? ","args first ","args second ","args first nil? ","call args ","first_arg nil? ","call second_arg ","call first_arg ","@ has_immediate_model? ed == ","match []  to_s =~ ","match []  to_s "," has_immediate_model?  [] ","result []=  [] [] ","result []  [] [] ","result []=  [] ","result []  [] ","result []=  [] [] nil? ","result []  [] [] nil? ","call args  first ","call args  second ","call args  first nil? ","result []=  args ","result []  args ","call call args  "," process  nil? ","call first_arg  nil? ","result []=  second_arg ","result []  second_arg ","call call second_arg  ","call  process  ","call call first_arg  ","result []=  first_arg ","result []  first_arg "]}," CheckLinkTo run_check":{"type":"method","name":"run_check","children":[],"call":[" process_result ","methods each ","OPTIONS  [] "," tracker models keys "," tracker models "," tracker "," tracker find_call "," tracker options [] "," tracker options ","Set  new merge ","Set  new "," tracker config [] ! "," tracker config [] "," tracker config "," version_between? ","Set  [] merge ","Set  [] "," tracker find_call each "," tracker config escape_html? ! "," tracker config escape_html? "," tracker find_call  each "]}," CheckNestedAttributes uses_nested_attributes?":{"type":"method","name":"uses_nested_attributes?","children":[],"call":["model [] [] ","model [] "," tracker models each "," tracker models "," tracker "," active_record_models each "," active_record_models ","model options [] ","model options "]}," CheckNestedAttributes run_check":{"type":"method","name":"run_check","children":[],"call":[" warn ","CONFIDENCE  [] ","message << ","version == "," uses_nested_attributes? "," tracker config [] "," tracker config "," tracker "," gemfile_or_environment "," rails_version "," msg_version "," msg "," msg_cve "," msg  << "," tracker config []  == "," rails_version  == "," rails_ tracker config []  "," rails_ rails_version  "," msg_ tracker config []  "," msg_ rails_version  "]}," CheckMailTo mail_to_javascript?":{"type":"method","name":"mail_to_javascript?","children":[],"call":["v [] == ","v [] "," symbol? "," hash_iterate "," hash? ","args each ","call [] ","result [] "," tracker find_call each "," tracker find_call "," tracker "," debug_info ","Brakeman  debug "," hash_access ","call args ","option value == ","option value ","result [] arglist each ","result [] arglist ","result [] each_arg ","call []  each ","call args  each ","result []  [] "," tracker find_result []  each "," tracker find_result []  ","call call []  ","call call args  ","result []  args "," hash_access  value == "," hash_access  value "]}," CheckMailTo run_check":{"type":"method","name":"run_check","children":[],"call":[" warn ","CONFIDENCE  [] ","message << "," version_between? "," mail_to_javascript? "," gemfile_or_environment "," msg_version "," msg "," msg_cve "," msg_code "," msg  << "]}," BaseCheck version_between?":{"type":"method","name":"version_between?","children":[],"call":["n > ","high_version [] ","n < ","low_version [] ","version each_with_index ","n to_i ","high_version split map! ","high_version split ","low_version split map! ","low_version split "," tracker config [] split map! "," tracker config [] split "," tracker config [] "," tracker config "," tracker ","v < ","v > ","high_version fetch ","low_version fetch ","current_version split map! ","current_version split "," rails_version "," tracker config version_between? "]}," CheckSQL constantize_call?":{"type":"method","name":"constantize_call?","children":[],"call":["result [] [] [] == ","result [] [] [] ","result [] [] ","result [] "," sexp? ","call [] [] == ","call [] [] ","call [] "," call? ","call target method == ","call target method ","call target ","result []  [] [] == ","result []  [] [] ","result []  [] "," result [] ? ","result []  target method == ","result []  target method ","result []  target "]}," RouteHelper add_resource_routes":{"type":"method","name":"add_resource_routes","children":[],"call":["@tracker routes [] merge ","@tracker routes [] ","@tracker routes ","existing_routes merge ","existing_routes first == ","existing_routes first ","existing_routes is_a? ","@tracker routes []  merge ","@tracker routes []  first == ","@tracker routes []  first ","@tracker routes []  is_a? "]}," RouteHelper add_resources_routes":{"type":"method","name":"add_resources_routes","children":[],"call":["@tracker routes [] merge ","@tracker routes [] ","@tracker routes ","existing_routes merge ","existing_routes first == ","existing_routes first ","existing_routes is_a? ","@tracker routes []  merge ","@tracker routes []  first == ","@tracker routes []  first ","@tracker routes []  is_a? "]}," RouteHelper current_controller=":{"type":"method","name":"current_controller=","children":[],"call":["Set  new ","@tracker routes [] ","@tracker routes ","(send\n  (send\n    (send nil :prefix) :+\n    (send nil :camelize\n      (lvar :name))) :+\n  (str \"Controller\")) to_sym "," prefix + + "," prefix + "," camelize "," prefix "]}," RouteHelper prefix":{"type":"method","name":"prefix","children":[],"call":["@prefix join << ","@prefix join ","@prefix length > ","@prefix length "]}," RoutesProcessor extract_action":{"type":"method","name":"extract_action","children":[],"call":["str split "]}," RoutesProcessor process_scope_block":{"type":"method","name":"process_scope_block","children":[],"call":[" process ","exp [] "]}," RoutesProcessor process_resource_block":{"type":"method","name":"process_resource_block","children":[],"call":[" process ","exp [] "," process_resource "]}," RoutesProcessor process_resources_block":{"type":"method","name":"process_resources_block","children":[],"call":[" process ","exp [] "," process_resources "]}," RoutesProcessor process_verb":{"type":"method","name":"process_verb","children":[],"call":["@tracker routes [] << ","action to_sym ","@tracker routes [] ","@tracker routes "," current_controller= "," extract_action ","v [] "," string? "," hash_iterate ","args [] "," hash? ","route [] to_sym ","route [] ","route length != ","route length ","args [] [] split ","args [] [] "," symbol? ","exp [] [] ","exp [] ","k [] == ","k [] ","@tracker args [] [] split s [] << ","@tracker args [] [] split s [] ","@tracker args [] [] split s ","exp [] []  [] ","args [] [] split  [] to_sym ","args [] [] split  [] ","args [] [] split  length != ","args [] [] split  length ","exp [] []  [] [] split ","exp [] []  [] [] "]}," RoutesProcessor process_match":{"type":"method","name":"process_match","children":[],"call":["@tracker routes [] << ","v [] to_sym ","v [] ","@tracker routes [] ","@tracker routes ","k [] == ","k [] "," symbol? ","action to_sym "," current_controller= "," extract_action "," string? "," hash_iterate ","args [] ","exp [] [] ","exp [] ","@tracker routes []= "," hash? ","matcher include? ","matcher == ","args [] [] ","exp [] []  [] ","args [] []  include? ","args [] []  == ","exp [] []  [] [] "]}," RoutesProcessor process_root":{"type":"method","name":"process_root","children":[],"call":["@tracker routes [] << ","action to_sym ","@tracker routes [] ","@tracker routes "," current_controller= "," extract_action ","v [] ","k [] == ","k [] "," symbol? "," hash_iterate ","args [] ","exp [] [] ","exp [] "," string? ","exp [] []  [] "]}," RailsXSSErubis add_stmt":{"type":"method","name":"add_stmt","children":[],"call":["src << << ","src << ","code =~ "]}," OutputProcessor process_escaped_output":{"type":"method","name":"process_escaped_output","children":[],"call":["exp clear ","res == "," process ","exp [] ","exp [] node_type == ","exp [] node_type "," output_format "," process  == "]}," ErubisTemplateProcessor process_attrasgn":{"type":"method","name":"process_attrasgn","children":[],"call":[" ignore ","@current_template [] << ","@current_template [] ","s line ","exp line ","Sexp  new ","args node_type == ","args node_type ","exp [] []= "," process ","exp [] [] ","exp [] ","exp [] == ","exp [] [] == ","exp [] node_type == ","exp [] node_type ","arg node_type == ","arg node_type ","exp first_arg= ","exp first_arg ","exp method == ","exp method ","exp target value == ","exp target value ","exp target ","exp target node_type == ","exp target node_type ","@current_template add_output "," safe_append_method? "," normalize_output "," append_method? "," add_escaped_output "," add_output ","Sexp  new  line ","argSexp  new  node_type == ","exp [] []=  node_type == ","exp first_arg= s node_type == "," normalize_output s node_type == ","argSexp  new  node_type ","exp [] []=  node_type ","exp first_arg= s node_type "," normalize_output s node_type "," proceSexp  new Sexp  new  ","exp first_arg=  node_type == "," normalize_output  node_type == ","exp first_arg=  node_type "," normalize_output  node_type ","exp firSexp  new t_arg= ","exp first_exp first_arg= = ","exp first_ normalize_output = ","exp firSexp  new t_arg ","exp first_exp first_arg=  ","exp first_ normalize_output  ","exp texp first_arg= et value == ","exp t normalize_output et value == ","exp texp first_arg= et value ","exp t normalize_output et value ","exp texp first_arg= et ","exp t normalize_output et ","exp texp first_arg= et node_type == ","exp t normalize_output et node_type == ","exp texp first_arg= et node_type ","exp t normalize_output et node_type "," Sexp  new afe_append_method? "," add_eSexp  new caped_output "]}," CheckCrossSiteScripting process_escaped_output":{"type":"method","name":"process_escaped_output","children":[],"call":[" process_output ","exp [] [] == ","exp [] [] ","exp [] ","exp [] node_type == ","exp [] node_type "," process ","exp [] [] [] "," raw_call? "," check_for_immediate_xss ","exp value first_arg ","exp value "," duplicate? ! "," duplicate? ","exp value target "," html_safe_call? "]}," Checks checks":{"type":"method","name":"checks","children":[],"call":[]}," CheckSessionSettings check_for_issues":{"type":"method","name":"check_for_issues","children":[],"call":[" warn ","key line ","CONFIDENCE  [] ","value [] length < ","value [] length ","value [] "," string? ","key [] == ","key [] ","value node_type == ","value node_type "," sexp? "," symbol? "," hash_iterate "," hash? ","value line "," hash_access "," false? ","value value length < ","value value length ","value value "," warn_about_secret_length "," warn_about_http_only "," warn_about_secret_token "," hash_access  [] length < "," hash_access  [] length "," hash_access  [] "," hash_access  node_type == "," hash_access  node_type "," hash_access  line "," hash_access   hash_access  length < "," hash_access   hash_access  length "," hash_access   hash_access  "]}," CheckSessionSettings process_call":{"type":"method","name":"process_call","children":[],"call":[" check_for_issues ","OPTIONS  [] ","exp [] [] ","exp [] ","exp [] == "," tracker options [] "," tracker options "," tracker ","exp args second ","exp args ","exp method == ","exp method ","exp target == ","exp target "," check_for_rails3_issues ","exp second_arg "," settings_target? "," tracker app_path ","@app_tree expand_path ","@app_tree file_path "]}," CheckSessionSettings process_attrasgn":{"type":"method","name":"process_attrasgn","children":[],"call":[" check_for_issues ","OPTIONS  [] ","exp [] [] ","exp [] ","exp [] == ","OPTIONS  [] ! "," tracker options [] "," tracker options "," tracker "," tracker options [] ! ","exp first_arg ","exp method == ","exp method ","exp target == ","exp target "," warn_about_secret_token "," string? "," settings_target? "," tracker app_path ","@app_tree expand_path ","exp line ","@app_tree file_path "]}," Report to_test":{"type":"method","name":"to_test","children":[],"call":["w file= "," file_for ","w context= "," context_for join "," context_for ","w code= ","w format_code ","w code ","w message= ","w format_message ","report [] each ","report [] ","report []= ","@checks send ","(sym :warnings) each "," tracker templates "," tracker "," tracker models "," tracker controllers "," tracker errors "," tracker config "]}," TemplateProcessor process_escaped_output":{"type":"method","name":"process_escaped_output","children":[],"call":[" process_output "]}," CheckCrossSiteScripting raw_call?":{"type":"method","name":"raw_call?","children":[],"call":["exp [] [] == ","exp [] [] ","exp [] ","exp [] node_type == ","exp [] node_type ","exp value method == ","exp value method ","exp value ","exp value node_type == ","exp value node_type "]}," CheckCrossSiteScripting check_for_immediate_xss":{"type":"method","name":"check_for_immediate_xss","children":[],"call":[" warn ","code line "," find_chain ","CONFIDENCE  [] ","method to_s =~ ","method to_s ","MODEL_METHODS  include? "," add_result ","IGNORE_MODEL_METHODS  include? "," duplicate? ","match [] "," has_immediate_model? ","OPTIONS  [] ! ","OPTIONS  [] ","match line "," duplicate? ! "," has_immediate_user_input? ","exp [] [] [] ","exp [] [] ","exp [] "," raw_call? ","exp [] == "," tracker options [] ! "," tracker options [] "," tracker options "," tracker ","input match ","input match line ","input type ","out method == ","out method "," node_type? ","exp value first_arg ","exp value ","exp node_type == ","exp node_type ","match method "," call? "," friendly_type_of ","match == "," likely_model_attribute? "," ignore_call? ","out target ","exp value target "," html_safe_call? "," msg "," msg_input "," find_chain  line ","match []  to_s =~ ","match method  to_s =~ ","match []  to_s ","match method  to_s "," has_immediate_model?  [] "," has_immediate_model?  line "," has_immediate_user_ has_immediate_user_input? ? ","input  has_immediate_model?  "," has_immediate_user_input?  match ","input  has_immediate_model?  line "," has_immediate_user_input?  match line "," has_immediate_user_input?  type ","out match []  == ","out match method  == ","exp [] [] []  method == ","exp []  method == ","exp value first_arg  method == ","exp value  method == ","exp value target  method == ","out match []  ","out match method  ","exp [] [] []  method ","exp []  method ","exp value first_arg  method ","exp value  method ","exp value target  method ","match match []  ","match match method  "," has_immediate_model?  method "," has_immediate_model?  == ","exp [] [] []  target ","exp []  target ","exp value first_arg  target ","exp value  target ","exp value target  target "," msg_ has_immediate_user_input?  "]}," Scanner process_gems":{"type":"method","name":"process_gems","children":[],"call":["@processor process_gems ","RubyParser  new parse ","File  read ","RubyParser  new ","File  exists? "," parse_ruby "," tracker error ","e backtrace ","e exception ","e message + ","e message "," tracker "," warn ","Brakeman  notify ","@app_tree read ","@app_tree exists? ","gem_files [] ","gem_files []= ","gem_files empty? ! ","gem_files empty? ","@app_tree gemspec "," parse_ruby_file ","file read ","@app_tree file_path ","gem_@app_tree file_path s [] ","gem_@app_tree file_path s []= ","gem_@app_tree file_path s empty? ! ","gem_@app_tree file_path s empty? "," parse_ruby_@app_tree file_path  ","@app_tree file_path  read ","@app_tree @app_tree file_path _path "]}," GemProcessor get_rails_version":{"type":"method","name":"get_rails_version","children":[],"call":["@tracker config []= ","@tracker config ","gem_lock =~ "," get_version "]}," GemProcessor process_call":{"type":"method","name":"process_call","children":[],"call":["@tracker config [] []= ","args [] [] ","args [] ","args [] [] to_sym ","@tracker config [] ","@tracker config "," sexp? ","exp [] [] ","exp [] ","exp [] == ","args first value to_sym ","args first value ","args first ","args second value ","args second "," string? ","exp args ","exp method == ","exp method ","exp target == ","exp target ","gem_name value to_sym ","gem_name value ","gem_version value ","exp second_arg ","exp first_arg ","exp line ","gem_version value to_s ","@tracker config add_gem ","@tracker config set_ruby_version ","version value ","exp second_arg value ","exp first_arg value ","exp last_arg value ","exp last_arg ","exp [] []  [] [] ","exp args  [] [] ","exp [] []  [] ","exp args  [] ","exp [] []  [] [] to_sym ","exp args  [] [] to_sym ","exp [] []  first value to_sym ","exp args  first value to_sym ","exp [] []  first value ","exp args  first value ","exp [] []  first ","exp args  first ","exp [] []  second value ","exp args  second value ","exp [] []  second ","exp args  second ","exp exp [] []  ","exp exp args  ","exp first_arg  value to_sym ","exp first_arg  value ","exp second_arg  value ","gem_gem_version value  value ","gem_exp first_arg  value ","exp second_arg  value to_s ","gem_gem_version value  value to_s ","gem_exp first_arg  value to_s ","@tracker config set_ruby_gem_version value  ","@tracker config set_ruby_exp first_arg  ","gem_version value  value "]}," GemProcessor process_gems":{"type":"method","name":"process_gems","children":[],"call":["@tracker config []= ","@tracker config ","@tracker config [] [] =~ ","@tracker config [] [] ","@tracker config [] "," get_rails_version "," process ","Brakeman  notify "," get_json_version ","@tracker options []= ","@tracker options ","@tracker options [] ! ","@tracker options [] ","@tracker config [] =~ "," get_i18n_version "," process_gem_lock ","@tracker config [] start_with? ","@tracker options [] nil? ","@tracker config [] [] [] =~ ","@tracker config [] [] [] ","@tracker config set_rails_version ","gem_files [] ","gem_files [] [] "]}," GemProcessor initialize":{"type":"method","name":"initialize","children":[],"call":["@tracker config [] ","@tracker config "]}," Processor process_gems":{"type":"method","name":"process_gems","children":[],"call":["GemProcessor  new process_gems ","GemProcessor  new "]}," CheckStripTags uses_strip_tags?":{"type":"method","name":"uses_strip_tags?","children":[],"call":[" tracker find_call empty? ! "," tracker find_call empty? "," tracker find_call "," tracker "," debug_info ","Brakeman  debug "]}," CheckStripTags run_check":{"type":"method","name":"run_check","children":[],"call":[" warn ","CONFIDENCE  [] "," tracker config [] =~ "," tracker config [] "," tracker config "," tracker "," uses_strip_tags? "," version_between? "," gemfile_or_environment "," cve_2012_3465 "," cve_2011_2931 "," cve_2015_7579 "]}," CheckResponseSplitting run_check":{"type":"method","name":"run_check","children":[],"call":[" warn ","CONFIDENCE  [] "," version_between? "," gemfile_or_environment "," msg "," msg_cve "]}," CheckQuoteTableName uses_quote_table_name?":{"type":"method","name":"uses_quote_table_name?","children":[],"call":[" tracker find_call empty? ! "," tracker find_call empty? "," tracker find_call "," tracker "," debug_info ","Brakeman  debug "]}," CheckQuoteTableName run_check":{"type":"method","name":"run_check","children":[],"call":[" warn "," tracker config [] =~ "," tracker config [] "," tracker config "," tracker ","CONFIDENCE  [] "," uses_quote_table_name? "," version_between? "," gemfile_or_environment "," rails_version =~ "," rails_version "," msg "," msg_cve "," msg_code "]}," CheckFilterSkipping uses_arbitrary_actions?":{"type":"method","name":"uses_arbitrary_actions?","children":[],"call":["actions == "," tracker routes each "," tracker routes "," tracker ","actions include? "]}," CheckFilterSkipping run_check":{"type":"method","name":"run_check","children":[],"call":[" warn ","CONFIDENCE  [] "," uses_arbitrary_actions? "," version_between? "," gemfile_or_environment "," msg "," msg_cve "]}," CheckEscapeFunction run_check":{"type":"method","name":"run_check","children":[],"call":[" warn ","CONFIDENCE  [] ","RUBY_VERSION  < "," version_between? "," gemfile_or_environment "," msg "," msg_cve "," msg_code "]}," RubyParser _reduce_none":{"type":"method","name":"_reduce_none","children":[],"call":["val [] "]}," RubyLexer yylex_string":{"type":"method","name":"yylex_string","children":[],"call":[" lex_state= "," lex_strterm= "," lineno= ","token == "," parse_string "," lex_strterm "," heredoc "," lex_strterm [] == "," lex_strterm [] "," parse_string  == "," heredoc  == "]}," RubyLexer process_token":{"type":"method","name":"process_token","children":[],"call":[" lex_state= "," parser env [] == "," parser env [] "," token to_sym "," token "," parser env "," parser ","last_state != "," yacc_value= "," lex_state == "," lex_state ","keyword id1 ","keyword id0 != ","keyword id0 ","state == ","state != "," cmdarg is_in_state "," cmdarg "," cond is_in_state "," cond "," command_start= ","keyword id0 == ","keyword name "," src lineno "," src ","keyword state ","RubyParser Keyword  keyword "," token =~ "," token << "," src matched "," src scan "," src unscan "," src peek != "," src peek ","command_state ! "," lex_ lex_state = ","last_ lex_state  != "," lex_state  != "," lex_ lex_state  == "," lex_ lex_state  ","RubyParser Keyword  keyword  id1 ","RubyParser Keyword  keyword  id0 != ","RubyParser Keyword  keyword  id0 "," lex_state  == "," cmdarg is_in_ lex_state  "," cond is_in_ lex_state  ","RubyParser Keyword  keyword  id0 == ","RubyParser Keyword  keyword  name ","keyword  lex_state  ","RubyParser Keyword  keyword  state ","RubyParser Keyword  RubyParser Keyword  keyword  ","command_ lex_state  ! "]}," RubyLexer yylex":{"type":"method","name":"yylex","children":[],"call":[" process_token "," token= ","src matched "," src scan "," src "," rb_compile_error ","src matched inspect ","src scan ","src eos? "," lineno= ","src beginning_of_line? ","src check "," lex_state= "," yacc_value= ","src [] to_i ","src [] ","last_state == ","src [] to_sym "," fix_arg_lex_state "," parse_quote ","src check ! "," lex_state is_argument "," lex_state "," lex_state == "," command_start= "," lex_strterm= "," arg_ambiguous "," warning ","c [] ord & ","c [] ord ","c [] ","src getch "," read_escape ","invalid character syntax; use ?\\ + ","(pair\n  (str \" \")\n  (str \"s\")) [] "," heredoc_identifier "," lex_state is_argument ! ","(sym :expr_end) include? ! ","(sym :expr_end) include? "," parse_number ","utype == ","sign == ","result == "," expr_beg_push ","src matched [] gsub gsub ","src matched [] gsub ","src matched [] "," lex_state != "," token "," token =~ "," unescape "," raise ","@comments << ","@comments clear ","TOKENS  [] ","(pair\n  (str \")\")\n  (sym :tRPAREN)) [] "," cmdarg lexpop "," cmdarg "," cond lexpop "," cond ","(sym :expr_beg) include? ","src matched gsub gsub ","src matched gsub ","src pos ","c == "," loop "," command_start "," yylex_string "," lex_strterm "," version == "," version "," prosrc getch ess_token "," pro read_escape ess_token "," prosrc matched ess_token "," process_ heredoc_identifier en "," process_ yacc_value= en ","  heredoc_identifier en= ","  yacc_value= en= ","srsrc getch  matsrc getch hed ","sr read_escape  mat read_escape hed ","srsrc matched  matsrc matched hed "," src  matched "," srsrc getch  ssrc getch an "," sr read_escape  s read_escape an "," srsrc matched  ssrc matched an ","  src  scan "," srsrc getch  "," sr read_escape  "," srsrc matched  ","  src  "," rb_src getch ompile_error "," rb_ read_escape ompile_error "," rb_src matched ompile_error ","srsrc getch  matsrc getch hed inspesrc getch t ","sr read_escape  mat read_escape hed inspe read_escape t ","srsrc matched  matsrc matched hed inspesrc matched t "," src  matched inspect ","srsrc getch  ssrc getch an ","sr read_escape  s read_escape an ","srsrc matched  ssrc matched an "," src  scan ","srsrc getch  eos? ","sr read_escape  eos? ","srsrc matched  eos? "," src  eos? ","srsrc getch  beginning_of_line? ","sr read_escape  beginning_of_line? ","srsrc matched  beginning_of_line? "," src  beginning_of_line? ","srsrc getch  src getch hesrc getch k ","sr read_escape   read_escape he read_escape k ","srsrc matched  src matched hesrc matched k "," src  check "," yasrc getch src getch _value= "," ya read_escape  read_escape _value= "," yasrc matched src matched _value= ","srsrc getch  [] to_i ","sr read_escape  [] to_i ","srsrc matched  [] to_i "," src  [] to_i ","srsrc getch  [] ","sr read_escape  [] ","srsrc matched  [] "," src  [] "," lex_state  == ","srsrc getch  [] to_sym ","sr read_escape  [] to_sym ","srsrc matched  [] to_sym "," src  [] to_sym ","srsrc getch  src getch hesrc getch k ! ","sr read_escape   read_escape he read_escape k ! ","srsrc matched  src matched hesrc matched k ! "," src  check ! "," src getch ommand_start= ","  read_escape ommand_start= "," src matched ommand_start= ","src getch  [] ord & "," read_escape  [] ord & ","src matched  [] ord & ","src getch  [] ord "," read_escape  [] ord ","src matched  [] ord ","src getch  [] "," read_escape  [] ","src matched  [] ","srsrc getch  getsrc getch h ","sr read_escape  get read_escape h ","srsrc matched  getsrc matched h "," src  getch "," read_essrc getch ape "," read_es read_escape ape "," read_essrc matched ape ","invalid src getch harasrc getch ter syntax; use ?\\ + ","invalid  read_escape hara read_escape ter syntax; use ?\\ + ","invalid src matched harasrc matched ter syntax; use ?\\ + "," heredosrc getch _identifier "," heredo read_escape _identifier "," heredosrc matched _identifier ","(sym :expr_end) insrc getch lude? ! ","(sym :expr_end) in read_escape lude? ! ","(sym :expr_end) insrc matched lude? ! ","(sym :expr_end) insrc getch lude? ","(sym :expr_end) in read_escape lude? ","(sym :expr_end) insrc matched lude? ","src matched  == ","(pair\n  (str \")\")\n  (sym :tRPAREN)) []  == ","srsrc getch  matsrc getch hed [] gsub gsub ","sr read_escape  mat read_escape hed [] gsub gsub ","srsrc matched  matsrc matched hed [] gsub gsub "," src  matched [] gsub gsub ","srsrc getch  matsrc getch hed [] gsub ","sr read_escape  mat read_escape hed [] gsub ","srsrc matched  matsrc matched hed [] gsub "," src  matched [] gsub ","srsrc getch  matsrc getch hed [] ","sr read_escape  mat read_escape hed [] ","srsrc matched  matsrc matched hed [] "," src  matched [] ","  heredoc_identifier en ","  yacc_value= en ","  heredoc_identifier en =~ ","  yacc_value= en =~ "," unessrc getch ape "," unes read_escape ape "," unessrc matched ape ","@src getch omments << ","@ read_escape omments << ","@src matched omments << ","@src getch omments src getch lear ","@ read_escape omments  read_escape lear ","@src matched omments src matched lear "," src getch mdarg lexpop ","  read_escape mdarg lexpop "," src matched mdarg lexpop "," src getch mdarg ","  read_escape mdarg "," src matched mdarg "," src getch ond lexpop ","  read_escape ond lexpop "," src matched ond lexpop "," src getch ond ","  read_escape ond "," src matched ond ","(sym :expr_beg) insrc getch lude? ","(sym :expr_beg) in read_escape lude? ","(sym :expr_beg) insrc matched lude? ","srsrc getch  matsrc getch hed gsub gsub ","sr read_escape  mat read_escape hed gsub gsub ","srsrc matched  matsrc matched hed gsub gsub "," src  matched gsub gsub ","srsrc getch  matsrc getch hed gsub ","sr read_escape  mat read_escape hed gsub ","srsrc matched  matsrc matched hed gsub "," src  matched gsub ","srsrc getch  pos ","sr read_escape  pos ","srsrc matched  pos "," src  pos ","src getch  == "," read_escape  == "," src getch ommand_start ","  read_escape ommand_start "," src matched ommand_start "]}," RubyLexer warning":{"type":"method","name":"warning","children":[],"call":[]}," RubyLexer unescape":{"type":"method","name":"unescape","children":[],"call":[" rb_compile_error ","(send\n  (send\n    (send\n      (nth-ref 2) :[]\n      (int 0)) :ord) :&\n  (int 159)) chr ","2 [] ord & ","2 [] ord ","2 [] ","(send\n  (send\n    (send\n      (nth-ref 1) :[]\n      (int 0)) :ord) :|\n  (int 128)) chr ","1 [] ord | ","1 [] ord ","1 [] ","1 to_i chr ","1 to_i ","$& to_i chr ","$& to_i ","(pair\n  (str \"a\")\n  (str \"\\a\")) [] ","127 chr "," (pair\n  (str \"a\")\n  (str \"\\a\")) [] b_compile_e(pair\n  (str \"a\")\n  (str \"\\a\")) [] (pair\n  (str \"a\")\n  (str \"\\a\")) [] o(pair\n  (str \"a\")\n  (str \"\\a\")) []  ","(send\n  (send\n    (send\n      (nth-(pair\n  (str \"a\")\n  (str \"\\a\")) [] ef 2) :[]\n      (int 0)) :o(pair\n  (str \"a\")\n  (str \"\\a\")) [] d) :&\n  (int 159)) ch(pair\n  (str \"a\")\n  (str \"\\a\")) []  ","2 [] o(pair\n  (str \"a\")\n  (str \"\\a\")) [] d & ","2 [] o(pair\n  (str \"a\")\n  (str \"\\a\")) [] d ","(send\n  (send\n    (send\n      (nth-(pair\n  (str \"a\")\n  (str \"\\a\")) [] ef 1) :[]\n      (int 0)) :o(pair\n  (str \"a\")\n  (str \"\\a\")) [] d) :|\n  (int 128)) ch(pair\n  (str \"a\")\n  (str \"\\a\")) []  ","1 [] o(pair\n  (str \"a\")\n  (str \"\\a\")) [] d | ","1 [] o(pair\n  (str \"a\")\n  (str \"\\a\")) [] d ","1 to_i ch(pair\n  (str \"a\")\n  (str \"\\a\")) []  ","$& to_i ch(pair\n  (str \"a\")\n  (str \"\\a\")) []  ","(pai(pair\n  (str \"a\")\n  (str \"\\a\")) [] \n  (st(pair\n  (str \"a\")\n  (str \"\\a\")) []  \"a\")\n  (st(pair\n  (str \"a\")\n  (str \"\\a\")) []  \"\\a\")) [] ","127 ch(pair\n  (str \"a\")\n  (str \"\\a\")) []  "]}," RubyLexer tokadd_string":{"type":"method","name":"tokadd_string","children":[],"call":[" src eos? "," src "," src matched "," string_buffer << "," string_buffer "," rb_compile_error ","c =~ "," src scan ","Regexp  escape ","paren != ","paren nil? "," read_escape "," tokadd_escape "," src check "," src pos "," nest "," nest == ","Regexp  new ","(send\n  (lvar :func) :&\n  (const nil :STR_FUNC_SYMBOL)) != ","func & ","(send\n  (lvar :func) :&\n  (const nil :STR_FUNC_REGEXP)) != ","(send\n  (lvar :func) :&\n  (const nil :STR_FUNC_EXPAND)) != ","(send\n  (lvar :func) :&\n  (const nil :STR_FUNC_ESCAPE)) != ","(send\n  (lvar :func) :&\n  (const nil :STR_FUNC_AWORDS)) != "," sr src matched  eos? "," sr read_escape  eos? "," sr src matched  "," sr read_escape  "," sr src matched  mat src matched hed "," sr read_escape  mat read_escape hed "," src maRegexp  escape ched "," sRegexp  escape ring_buffer << "," sRegexp  escape ring_buffer "," rb_ src matched ompile_error "," rb_ read_escape ompile_error "," src matched  =~ "," read_escape  =~ "," sr src matched  s src matched an "," sr read_escape  s read_escape an ","Regexp  es src matched ape ","Regexp  es read_escape ape ","RegeRegexp  escape p  escape ","Regexp  (send\n  (lvar :func) :&\n  (const nil :STR_FUNC_ESCAPE)) !=  "," read_es src matched ape "," read_es read_escape ape "," read_(send\n  (lvar :func) :&\n  (const nil :STR_FUNC_ESCAPE)) !=  "," tokadd_es src matched ape "," tokadd_es read_escape ape "," Regexp  escape okadd_escape "," tokadd_(send\n  (lvar :func) :&\n  (const nil :STR_FUNC_ESCAPE)) !=  "," sr src matched   src matched he src matched k "," sr read_escape   read_escape he read_escape k "," sr src matched  pos "," sr read_escape  pos "," nesRegexp  escape  "," nesRegexp  escape  == ","RegeRegexp  escape p  new ","(send\n  (lvar :fun src matched ) :&\n  ( src matched onst nil :STR_FUNC_SYMBOL)) != ","(send\n  (lvar :fun read_escape ) :&\n  ( read_escape onst nil :STR_FUNC_SYMBOL)) != ","(send\n  (lvar :func) :&\n  (consRegexp  escape  nil :STR_FUNC_SYMBOL)) != ","fun src matched  & ","fun read_escape  & ","(send\n  (lvar :fun src matched ) :&\n  ( src matched onst nil :STR_FUNC_REGEXP)) != ","(send\n  (lvar :fun read_escape ) :&\n  ( read_escape onst nil :STR_FUNC_REGEXP)) != ","(send\n  (lvar :func) :&\n  (consRegexp  escape  nil :STR_FUNC_REGEXP)) != ","(send\n  (lvar :fun src matched ) :&\n  ( src matched onst nil :STR_FUNC_EXPAND)) != ","(send\n  (lvar :fun read_escape ) :&\n  ( read_escape onst nil :STR_FUNC_EXPAND)) != ","(send\n  (lvar :func) :&\n  (consRegexp  escape  nil :STR_FUNC_EXPAND)) != ","(send\n  (lvar :fun src matched ) :&\n  ( src matched onst nil :STR_FUNC_ESCAPE)) != ","(send\n  (lvar :fun read_escape ) :&\n  ( read_escape onst nil :STR_FUNC_ESCAPE)) != ","(send\n  (lvar :func) :&\n  (consRegexp  escape  nil :STR_FUNC_ESCAPE)) != ","(send\n  (lvar :fun src matched ) :&\n  ( src matched onst nil :STR_FUNC_AWORDS)) != ","(send\n  (lvar :fun read_escape ) :&\n  ( read_escape onst nil :STR_FUNC_AWORDS)) != ","(send\n  (lvar :func) :&\n  (consRegexp  escape  nil :STR_FUNC_AWORDS)) != "]}," RubyLexer tokadd_escape":{"type":"method","name":"tokadd_escape","children":[],"call":[" rb_compile_error "," string_buffer << "," src matched "," src "," string_buffer "," src scan "," tokadd_escape "]}," RubyLexer src=":{"type":"method","name":"src=","children":[],"call":["RPStringScanner  new "," raise ","src inspect ","String  === "]}," RubyLexer reset":{"type":"method","name":"reset","children":[],"call":[" yacc_value= "," token= "," lex_strterm= "," command_start= "]}," RubyLexer regx_options":{"type":"method","name":"regx_options","children":[],"call":["good join "," rb_compile_error ","unknown regexp option%s - %s % ","bad join inspect ","bad join ","bad size > ","bad size ","bad empty? ","s =~ "," src matched split partition "," src matched split "," src matched "," src "," src scan "]}," RubyLexer read_escape":{"type":"method","name":"read_escape","children":[],"call":[" src getch "," src "," rb_compile_error "," src eos? "," src scan ","c []= ","(send\n  (send\n    (send\n      (lvar :c) :[]\n      (int 0)) :ord) :&\n  (int 159)) chr ","c [] ord & ","c [] ord ","c [] "," src [] ","127 chr "," read_escape "," src check ","(send\n  (send\n    (send\n      (lvar :c) :[]\n      (int 0)) :ord) :|\n  (int 128)) chr ","c [] ord | "," src [] to_i chr "," src [] to_i "," src matched to_i chr "," src matched to_i "," src matched "," sr src []  get src [] h "," sr read_escape  get read_escape h "," sr src []  "," sr read_escape  "," rb_ src [] ompile_error "," rb_ read_escape ompile_error "," sr src []  eos? "," sr read_escape  eos? "," sr src []  s src [] an "," sr read_escape  s read_escape an "," src []  []= "," read_escape  []= ","(send\n  (send\n    (send\n      (lvar : src [] ) :[]\n      (int 0)) :ord) :&\n  (int 159))  src [] hr ","(send\n  (send\n    (send\n      (lvar : read_escape ) :[]\n      (int 0)) :ord) :&\n  (int 159))  read_escape hr "," src []  [] ord & "," read_escape  [] ord & "," src []  [] ord "," read_escape  [] ord "," src []  [] "," read_escape  [] "," sr src []  [] "," sr read_escape  [] ","127  src [] hr ","127  read_escape hr "," read_es src [] ape "," read_es read_escape ape "," sr src []   src [] he src [] k "," sr read_escape   read_escape he read_escape k ","(send\n  (send\n    (send\n      (lvar : src [] ) :[]\n      (int 0)) :ord) :|\n  (int 128))  src [] hr ","(send\n  (send\n    (send\n      (lvar : read_escape ) :[]\n      (int 0)) :ord) :|\n  (int 128))  read_escape hr "," src []  [] ord | "," read_escape  [] ord | "," sr src []  [] to_i  src [] hr "," sr read_escape  [] to_i  read_escape hr "," sr src []  [] to_i "," sr read_escape  [] to_i "," sr src []  mat src [] hed to_i  src [] hr "," sr read_escape  mat read_escape hed to_i  read_escape hr "," sr src []  mat src [] hed to_i "," sr read_escape  mat read_escape hed to_i "," sr src []  mat src [] hed "," sr read_escape  mat read_escape hed "]}," RubyLexer rb_compile_error":{"type":"method","name":"rb_compile_error","children":[],"call":[" raise "," src rest [] inspect "," src rest [] "," src rest "," src "," lineno "]}," RubyLexer parse_string":{"type":"method","name":"parse_string","children":[],"call":[" yacc_value= "," string_buffer join "," string_buffer "," rb_compile_error "," tokadd_string == "," tokadd_string "," string_buffer << "," src scan "," src "," string_buffer= "," lineno= "," regx_options ","quote []= "," nest == "," nest ","(send\n  (lvar :func) :&\n  (const nil :STR_FUNC_EXPAND)) != ","func & ","(send\n  (lvar :func) :&\n  (const nil :STR_FUNC_REGEXP)) != ","(send\n  (lvar :func) :&\n  (const nil :STR_FUNC_AWORDS)) != ","Regexp  escape "]}," RubyLexer parse_quote":{"type":"method","name":"parse_quote","children":[],"call":[" lex_strterm= "," rb_compile_error ","token_type nil? "," lex_state= ","STR_SQUOTE  | "," src scan "," src ","STR_DQUOTE  | "," yacc_value= ","c + ","nnd nil? ","(pair\n  (str \"(\")\n  (str \")\")) [] ","beg == ","c == "," src eos? "," src getch "," src matched "," src matched_size == "," src matched_size ","(pair\n  (str \"(\")\n  (str \")\")) []  nil? "," src getc +  "," src matc + ed "," src matc + ed_size == "," src matc + ed_size "]}," RubyLexer parse_number":{"type":"method","name":"parse_number","children":[],"call":[" rb_compile_error "," int_with_base "," src scan "," src "," yacc_value= ","number to_f ","number =~ "," src matched "," lex_state= "," src matched  to_f "," src matched  =~ "]}," RubyLexer lineno":{"type":"method","name":"lineno","children":[],"call":[" src lineno "," src "]}," RubyLexer lex_state=":{"type":"method","name":"lex_state=","children":[],"call":[" raise ","Symbol  === "]}," RubyLexer int_with_base":{"type":"method","name":"int_with_base","children":[],"call":[" yacc_value= "," src matched to_i "," src matched "," src "," rb_compile_error "," src matched =~ "]}," RubyLexer initialize":{"type":"method","name":"initialize","children":[],"call":[" reset "," nest= "," cmdarg= ","RubyParser StackState  new "," cond= "," version= "]}," RubyLexer heredoc_identifier":{"type":"method","name":"heredoc_identifier","children":[],"call":[" yacc_value= ","term == "," lex_strterm= "," string_buffer join "," string_buffer "," src pos "," src "," src extra_lines_added "," src string []= "," src matched_size "," src string "," src string [] "," src check "," string_buffer << "," src [] "," src [] empty? "," src scan "," rb_compile_error "," string_buffer= "," src matched "," src []  == "," lex_str src [] = "," src extra_ src string [] s_added "," src extra_ src matched s_added "]}," RubyLexer heredoc":{"type":"method","name":"heredoc","children":[],"call":[" yacc_value= "," string_buffer join delete "," string_buffer join "," string_buffer "," lex_strterm= "," rb_compile_error "," src eos? "," src "," string_buffer << "," src scan "," src check "," src unread_many ","eos + ","c != ","c == "," tokadd_string "," src matched "," src pos "," string_buffer= "," src beginning_of_line? ","eos_re inspect ","(send\n  (lvar :func) :&\n  (const nil :STR_FUNC_EXPAND)) != ","func & ","(send\n  (lvar :func) :&\n  (const nil :STR_FUNC_INDENT)) != "," ya tokadd_string  tokadd_string _value= "," rb_ tokadd_string ompile_error "," sr tokadd_string  eos? "," sr tokadd_string  "," sr tokadd_string  s tokadd_string an "," sr tokadd_string   tokadd_string he tokadd_string k "," sr tokadd_string  unread_many "," tokadd_string  != "," tokadd_string  == "," sr tokadd_string  mat tokadd_string hed "," sr tokadd_string  pos "," sr tokadd_string  beginning_of_line? ","eos_re inspe tokadd_string t ","(send\n  (lvar :fun tokadd_string ) :&\n  ( tokadd_string onst nil :STR_FUNC_EXPAND)) != ","fun tokadd_string  & ","(send\n  (lvar :fun tokadd_string ) :&\n  ( tokadd_string onst nil :STR_FUNC_INDENT)) != "]}," RubyLexer fix_arg_lex_state":{"type":"method","name":"fix_arg_lex_state","children":[],"call":[" lex_state= "," lex_state == "," lex_state "]}," RubyLexer expr_beg_push":{"type":"method","name":"expr_beg_push","children":[],"call":[" yacc_value= "," lex_state= "," cmdarg push "," cmdarg "," cond push "," cond "]}," RubyLexer comments":{"type":"method","name":"comments","children":[],"call":["@comments clear ","@comments join ","@@comments join omments @comments join lear ","@@comments join omments join "]}," RubyLexer arg_ambiguous":{"type":"method","name":"arg_ambiguous","children":[],"call":[" warning "]}," RubyLexer advance":{"type":"method","name":"advance","children":[],"call":["RubyLexer EOF  != "," raise "," token= "," yylex ","RubyLexe yylex  EOF  != ","  yylex aise "]}," Report rails_version":{"type":"method","name":"rails_version","children":[],"call":["OPTIONS  [] "," tracker config [] "," tracker config "," tracker "," tracker options [] "," tracker options "]}," CheckWithoutProtection process_result":{"type":"method","name":"process_result","children":[],"call":[" warn ","call line ","CONFIDENCE  [] "," include_user_input? ","call [] ","@results << ","v [] == ","v [] ","k [] == ","k [] "," symbol? "," hash_iterate ","@results include? ! ","@results include? "," hash? ","call [] [] ","res [] ","input match "," add_result "," true? "," hash_access "," duplicate? ! "," duplicate? ","call original_line ! ","call original_line ","call arglist ","call args last ","call args ","call last_arg "," all_literals? ","res []  line "," include_input match ? "," include_user_ include_user_input? ? ","res []  [] ","res []  [] [] "," include_user_input?  match ","res []  original_line ! ","res []  original_line ","res []  arglist ","res []  args last ","res []  args ","call call [] []  ","call call args last  ","call call last_arg  ","res []  last_arg "]}," CheckWithoutProtection run_check":{"type":"method","name":"run_check","children":[],"call":[" process ","calls each "," tracker find_call "," tracker ","Set  new ","models empty? ","models << "," parent? "," tracker models each "," tracker models "," version_between? "," mass_assign_disabled? "," process_result "," debug_info ","Brakeman  debug "," ancestor? "," active_record_models keys "," active_record_models "," active_record_models empty? "," tracker find_call  each "]}," CheckBasicAuth get_password":{"type":"method","name":"get_password","children":[],"call":["k [] == ","k [] "," symbol? "," hash_iterate "," hash? ! "," hash? ","args nil? ","call [] [] ","call [] "," hash_access ","arg nil? ","call first_arg ","call [] []  nil? ","call first_arg s nil? ","call first_arg  nil? ","call first_call first_arg  "]}," CheckBasicAuth run_check":{"type":"method","name":"run_check","children":[],"call":[" warn ","call line "," string? "," get_password ","controller [] [] each ","controller [] [] ","controller [] ","Hash  [] each ","Hash  [] ","c [] [] ","c [] "," tracker controllers select "," tracker controllers "," tracker "," version_between? "," check_basic_auth_request "," check_basic_auth_filter "," get_ get_password word "]}," Brakeman scan":{"type":"method","name":"scan","children":[],"call":[]}," Brakeman dump_config":{"type":"method","name":"dump_config","children":[],"call":[]}," Brakeman list_checks":{"type":"method","name":"list_checks","children":[],"call":[]}," Brakeman get_output_format":{"type":"method","name":"get_output_format","children":[],"call":[]}," Brakeman get_defaults":{"type":"method","name":"get_defaults","children":[],"call":[]}," Brakeman load_options":{"type":"method","name":"load_options","children":[],"call":[]}," Brakeman set_options":{"type":"method","name":"set_options","children":[],"call":[]}," Brakeman run":{"type":"method","name":"run","children":[],"call":[]}," RubyParser _reduce_507":{"type":"method","name":"_reduce_507","children":[],"call":[]}," RubyParser _reduce_506":{"type":"method","name":"_reduce_506","children":[],"call":[]}," RubyParser _reduce_505":{"type":"method","name":"_reduce_505","children":[],"call":[" yyerrok "]}," RubyParser _reduce_502":{"type":"method","name":"_reduce_502","children":[],"call":[" yyerrok "]}," RubyParser _reduce_482":{"type":"method","name":"_reduce_482","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_481":{"type":"method","name":"_reduce_481","children":[],"call":[" s ","val [] ","val [] [] to_sym ","val [] [] "]}," RubyParser _reduce_480":{"type":"method","name":"_reduce_480","children":[],"call":["list push ","more empty? ","val [] [] ","val [] ","val [] dup ","val [] dup  push ","val [] []  empty? "]}," RubyParser _reduce_478":{"type":"method","name":"_reduce_478","children":[],"call":["val [] "," yyerror ","val [] inspect ","size % != ","size % ","val [] size ","val [] size  % != ","val [] size  % ","val [] val [] size  "]}," RubyParser _reduce_477":{"type":"method","name":"_reduce_477","children":[],"call":["val [] "]}," RubyParser _reduce_476":{"type":"method","name":"_reduce_476","children":[],"call":[" s "]}," RubyParser _reduce_475":{"type":"method","name":"_reduce_475","children":[],"call":[" yyerror ","result [] == ","result [] ","val [] ","val []  [] == ","val []  [] "]}," RubyParser _reduce_474":{"type":"method","name":"_reduce_474","children":[],"call":[" lexer lex_state= "," lexer "]}," RubyParser _reduce_472":{"type":"method","name":"_reduce_472","children":[],"call":[]}," RubyParser _reduce_471":{"type":"method","name":"_reduce_471","children":[],"call":["val [] "]}," RubyParser _reduce_470":{"type":"method","name":"_reduce_470","children":[],"call":[" s ","identifier to_sym "," env []= "," env ","val [] to_sym ","val [] ","val [] to_sym  to_sym "]}," RubyParser _reduce_467":{"type":"method","name":"_reduce_467","children":[],"call":[" env []= "," env "]}," RubyParser _reduce_466":{"type":"method","name":"_reduce_466","children":[],"call":[" assignable ","val [] to_sym ","val [] "]}," RubyParser _reduce_463":{"type":"method","name":"_reduce_463","children":[],"call":[" block_append ","val [] "]}," RubyParser _reduce_462":{"type":"method","name":"_reduce_462","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_461":{"type":"method","name":"_reduce_461","children":[],"call":[" assignable ","val [] "]}," RubyParser _reduce_460":{"type":"method","name":"_reduce_460","children":[],"call":["val [] ","val [] << ","val [] to_sym "]}," RubyParser _reduce_459":{"type":"method","name":"_reduce_459","children":[],"call":["result << ","val [] to_sym ","val [] "," s "," s  << "]}," RubyParser _reduce_458":{"type":"method","name":"_reduce_458","children":[],"call":["val [] "," env []= "," env ","val [] to_sym "]}," RubyParser _reduce_457":{"type":"method","name":"_reduce_457","children":[],"call":[" yyerror "]}," RubyParser _reduce_456":{"type":"method","name":"_reduce_456","children":[],"call":[" yyerror "]}," RubyParser _reduce_455":{"type":"method","name":"_reduce_455","children":[],"call":[" yyerror ","val [] "]}," RubyParser _reduce_454":{"type":"method","name":"_reduce_454","children":[],"call":[" args "]}," RubyParser _reduce_453":{"type":"method","name":"_reduce_453","children":[],"call":[" args ","val [] "]}," RubyParser _reduce_452":{"type":"method","name":"_reduce_452","children":[],"call":[" args ","val [] "]}," RubyParser _reduce_451":{"type":"method","name":"_reduce_451","children":[],"call":[" args ","val [] "]}," RubyParser _reduce_450":{"type":"method","name":"_reduce_450","children":[],"call":[" args ","val [] "]}," RubyParser _reduce_449":{"type":"method","name":"_reduce_449","children":[],"call":[" args ","val [] "]}," RubyParser _reduce_448":{"type":"method","name":"_reduce_448","children":[],"call":[" args ","val [] "]}," RubyParser _reduce_447":{"type":"method","name":"_reduce_447","children":[],"call":[" args ","val [] "]}," RubyParser _reduce_446":{"type":"method","name":"_reduce_446","children":[],"call":[" args ","val [] "]}," RubyParser _reduce_445":{"type":"method","name":"_reduce_445","children":[],"call":["val [] "]}," RubyParser _reduce_444":{"type":"method","name":"_reduce_444","children":[],"call":[" lexer command_start= "," lexer "," lexer lex_state= ","val [] "]}," RubyParser _reduce_443":{"type":"method","name":"_reduce_443","children":[],"call":[" yyerrok "]}," RubyParser _reduce_442":{"type":"method","name":"_reduce_442","children":[],"call":["val [] "]}," RubyParser _reduce_441":{"type":"method","name":"_reduce_441","children":[],"call":[" lexer lex_state= "," lexer "]}," RubyParser _reduce_440":{"type":"method","name":"_reduce_440","children":[],"call":[]}," RubyParser _reduce_439":{"type":"method","name":"_reduce_439","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_438":{"type":"method","name":"_reduce_438","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_437":{"type":"method","name":"_reduce_437","children":[],"call":[" assignable ","val [] "]}," RubyParser _reduce_436":{"type":"method","name":"_reduce_436","children":[],"call":[" gettable ","Sexp  === ","val [] "]}," RubyParser _reduce_435":{"type":"method","name":"_reduce_435","children":[],"call":[" s "," lexer src current_line "," lexer src "," lexer "]}," RubyParser _reduce_434":{"type":"method","name":"_reduce_434","children":[],"call":[" s "," file "]}," RubyParser _reduce_433":{"type":"method","name":"_reduce_433","children":[],"call":[" s "]}," RubyParser _reduce_432":{"type":"method","name":"_reduce_432","children":[],"call":[" s "]}," RubyParser _reduce_431":{"type":"method","name":"_reduce_431","children":[],"call":[" s "]}," RubyParser _reduce_430":{"type":"method","name":"_reduce_430","children":[],"call":[" s "]}," RubyParser _reduce_424":{"type":"method","name":"_reduce_424","children":[],"call":["val [] -@ ","val [] "]}," RubyParser _reduce_423":{"type":"method","name":"_reduce_423","children":[],"call":["val [] -@ ","val [] "]}," RubyParser _reduce_420":{"type":"method","name":"_reduce_420","children":[],"call":[" s ","result last intern ","result last ","result []= ","result [] "," yyerror ","result empty? ","result nil? ","val [] "," lexer lex_state= "," lexer "," s  last intern ","val []  last intern "," s  last ","val []  last "," s  []= ","val []  []= "," s  [] ","val []  [] "," s  empty? ","val []  empty? "," s  nil? ","val []  nil? "]}," RubyParser _reduce_415":{"type":"method","name":"_reduce_415","children":[],"call":["val [] to_sym ","val [] "]}," RubyParser _reduce_414":{"type":"method","name":"_reduce_414","children":[],"call":["val [] to_sym ","val [] "," lexer lex_state= "," lexer "]}," RubyParser _reduce_412":{"type":"method","name":"_reduce_412","children":[],"call":[" s ","val [] to_sym ","val [] "]}," RubyParser _reduce_411":{"type":"method","name":"_reduce_411","children":[],"call":[" s ","val [] to_sym ","val [] "]}," RubyParser _reduce_410":{"type":"method","name":"_reduce_410","children":[],"call":[" s ","val [] to_sym ","val [] "]}," RubyParser _reduce_409":{"type":"method","name":"_reduce_409","children":[],"call":[" raise ","val [] inspect ","val [] "," s ","val [] [] "," lexer cmdarg lexpop "," lexer cmdarg "," lexer "," lexer cond lexpop "," lexer cond "," lexer lex_strterm= "]}," RubyParser _reduce_408":{"type":"method","name":"_reduce_408","children":[],"call":[" lexer cmdarg push "," lexer cmdarg "," lexer "," lexer cond push "," lexer cond "," lexer lex_state= "," lexer lex_strterm= "," lexer lex_strterm "]}," RubyParser _reduce_407":{"type":"method","name":"_reduce_407","children":[],"call":[" s ","val [] "," lexer lex_strterm= "," lexer "]}," RubyParser _reduce_406":{"type":"method","name":"_reduce_406","children":[],"call":[" lexer lex_state= "," lexer "," lexer lex_strterm= "," lexer lex_strterm "]}," RubyParser _reduce_405":{"type":"method","name":"_reduce_405","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_404":{"type":"method","name":"_reduce_404","children":[],"call":[" literal_concat ","val [] "]}," RubyParser _reduce_403":{"type":"method","name":"_reduce_403","children":[],"call":[]}," RubyParser _reduce_402":{"type":"method","name":"_reduce_402","children":[],"call":[" literal_concat ","val [] "]}," RubyParser _reduce_401":{"type":"method","name":"_reduce_401","children":[],"call":[" s "]}," RubyParser _reduce_400":{"type":"method","name":"_reduce_400","children":[],"call":["val [] << "," s ","val [] "]}," RubyParser _reduce_399":{"type":"method","name":"_reduce_399","children":[],"call":[" s "]}," RubyParser _reduce_398":{"type":"method","name":"_reduce_398","children":[],"call":["val [] "]}," RubyParser _reduce_397":{"type":"method","name":"_reduce_397","children":[],"call":[" s "]}," RubyParser _reduce_396":{"type":"method","name":"_reduce_396","children":[],"call":[" literal_concat ","val [] "]}," RubyParser _reduce_394":{"type":"method","name":"_reduce_394","children":[],"call":["val [] << ","val [] "," s ","val [] [] == ","val [] [] "]}," RubyParser _reduce_393":{"type":"method","name":"_reduce_393","children":[],"call":[" s "]}," RubyParser _reduce_392":{"type":"method","name":"_reduce_392","children":[],"call":["val [] "]}," RubyParser _reduce_391":{"type":"method","name":"_reduce_391","children":[],"call":[" s "]}," RubyParser _reduce_390":{"type":"method","name":"_reduce_390","children":[],"call":[" new_regexp "]}," RubyParser _reduce_389":{"type":"method","name":"_reduce_389","children":[],"call":[" new_xstring ","val [] "]}," RubyParser _reduce_388":{"type":"method","name":"_reduce_388","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_387":{"type":"method","name":"_reduce_387","children":[],"call":["val [] "]}," RubyParser _reduce_386":{"type":"method","name":"_reduce_386","children":[],"call":[" literal_concat ","val [] "]}," RubyParser _reduce_384":{"type":"method","name":"_reduce_384","children":[],"call":["val [] ","val []= "," s ","val [] value ","val [] [] == ","val [] [] "]}," RubyParser _reduce_382":{"type":"method","name":"_reduce_382","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_381":{"type":"method","name":"_reduce_381","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_379":{"type":"method","name":"_reduce_379","children":[],"call":[" s ","val [] ","val [] != "]}," RubyParser _reduce_377":{"type":"method","name":"_reduce_377","children":[],"call":["val [] "]}," RubyParser _reduce_374":{"type":"method","name":"_reduce_374","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_373":{"type":"method","name":"_reduce_373","children":[],"call":[]}," RubyParser _reduce_372":{"type":"method","name":"_reduce_372","children":[],"call":["result << "," s ","klasses << "," node_assign ","val [] "," s  << "]}," RubyParser _reduce_369":{"type":"method","name":"_reduce_369","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_368":{"type":"method","name":"_reduce_368","children":[],"call":[" list_append "," s ","val [] "]}," RubyParser _reduce_366":{"type":"method","name":"_reduce_366","children":[],"call":["result << ","val [] ","result line= "," s "," s  << "," s  line= "]}," RubyParser _reduce_365":{"type":"method","name":"_reduce_365","children":[],"call":[" lexer lineno "," lexer "]}," RubyParser _reduce_364":{"type":"method","name":"_reduce_364","children":[],"call":["result line= ","val [] "," env unextend "," env "," new_iter "," new_iter  line= "]}," RubyParser _reduce_363":{"type":"method","name":"_reduce_363","children":[],"call":[" env dynamic keys "," env dynamic "," env "]}," RubyParser _reduce_362":{"type":"method","name":"_reduce_362","children":[],"call":[" lexer lineno "," lexer "," env extend "," env "]}," RubyParser _reduce_361":{"type":"method","name":"_reduce_361","children":[],"call":["result line= ","val [] "," env unextend "," env "," new_iter "," new_iter  line= "]}," RubyParser _reduce_360":{"type":"method","name":"_reduce_360","children":[],"call":[" env dynamic keys "," env dynamic "," env "]}," RubyParser _reduce_359":{"type":"method","name":"_reduce_359","children":[],"call":[" lexer lineno "," lexer "," env extend "," env "]}," RubyParser _reduce_358":{"type":"method","name":"_reduce_358","children":[],"call":[" s "]}," RubyParser _reduce_357":{"type":"method","name":"_reduce_357","children":[],"call":[" new_super ","val [] "]}," RubyParser _reduce_356":{"type":"method","name":"_reduce_356","children":[],"call":[" new_call ","val [] to_sym ","val [] "]}," RubyParser _reduce_355":{"type":"method","name":"_reduce_355","children":[],"call":[" new_call ","val [] ","val [] to_sym "]}," RubyParser _reduce_354":{"type":"method","name":"_reduce_354","children":[],"call":[" new_call ","val [] ","val [] to_sym "]}," RubyParser _reduce_353":{"type":"method","name":"_reduce_353","children":[],"call":[" new_call ","val [] ","val [] to_sym "]}," RubyParser _reduce_352":{"type":"method","name":"_reduce_352","children":[],"call":[" lexer lineno "," lexer "]}," RubyParser _reduce_351":{"type":"method","name":"_reduce_351","children":[],"call":[" new_call ","val [] "]}," RubyParser _reduce_350":{"type":"method","name":"_reduce_350","children":[],"call":[" new_call ","val [] "]}," RubyParser _reduce_349":{"type":"method","name":"_reduce_349","children":[],"call":["result insert ","val [] "," raise ","val [] [] == ","val [] [] ","val []  insert "]}," RubyParser _reduce_348":{"type":"method","name":"_reduce_348","children":[],"call":[" env unextend "," env ","result line= ","val [] "," new_iter "," new_iter  line= "]}," RubyParser _reduce_347":{"type":"method","name":"_reduce_347","children":[],"call":[" env dynamic keys "," env dynamic "," env "]}," RubyParser _reduce_346":{"type":"method","name":"_reduce_346","children":[],"call":[" lexer lineno "," lexer "," env extend "," env "]}," RubyParser _reduce_345":{"type":"method","name":"_reduce_345","children":[],"call":[" lexer command_start= "," lexer ","val [] "]}," RubyParser _reduce_344":{"type":"method","name":"_reduce_344","children":[],"call":[" lexer command_start= "," lexer "]}," RubyParser _reduce_343":{"type":"method","name":"_reduce_343","children":[],"call":[" lexer command_start= "," lexer "]}," RubyParser _reduce_341":{"type":"method","name":"_reduce_341","children":[],"call":["val [] delete_at ","val [] ","val [] [] nil? ","val [] [] "]}," RubyParser _reduce_339":{"type":"method","name":"_reduce_339","children":[],"call":["val [] "]}," RubyParser _reduce_337":{"type":"method","name":"_reduce_337","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_328":{"type":"method","name":"_reduce_328","children":[],"call":[" value_expr ","val [] "]}," RubyParser _reduce_327":{"type":"method","name":"_reduce_327","children":[],"call":[" s "]}," RubyParser _reduce_326":{"type":"method","name":"_reduce_326","children":[],"call":[" s "]}," RubyParser _reduce_325":{"type":"method","name":"_reduce_325","children":[],"call":[" s "]}," RubyParser _reduce_324":{"type":"method","name":"_reduce_324","children":[],"call":[" s "]}," RubyParser _reduce_323":{"type":"method","name":"_reduce_323","children":[],"call":[" in_single "," env unextend "," env "," new_defs "]}," RubyParser _reduce_322":{"type":"method","name":"_reduce_322","children":[],"call":[" lexer lex_state= "," lexer "," env extend "," env "," in_single "]}," RubyParser _reduce_321":{"type":"method","name":"_reduce_321","children":[],"call":[" lexer lex_state= "," lexer "," comments push "," lexer comments "," comments "]}," RubyParser _reduce_320":{"type":"method","name":"_reduce_320","children":[],"call":[" in_def= "," env unextend "," env "," new_defn "]}," RubyParser _reduce_319":{"type":"method","name":"_reduce_319","children":[],"call":[" lexer src beginning_of_line? "," lexer src "," lexer "," lexer lineno "," env extend "," env "," in_def= "," comments push "," lexer comments "," comments "]}," RubyParser _reduce_318":{"type":"method","name":"_reduce_318","children":[],"call":[" env unextend "," env "," new_module "]}," RubyParser _reduce_317":{"type":"method","name":"_reduce_317","children":[],"call":[" env extend "," env "," yyerror "," in_single > "," in_single "," in_def "," comments push "," lexer comments "," lexer "," comments "]}," RubyParser _reduce_316":{"type":"method","name":"_reduce_316","children":[],"call":[" lexer lineno "," lexer "]}," RubyParser _reduce_315":{"type":"method","name":"_reduce_315","children":[],"call":[" env unextend "," env "," new_sclass "]}," RubyParser _reduce_314":{"type":"method","name":"_reduce_314","children":[],"call":[" env extend "," env "," in_single= "," in_single "]}," RubyParser _reduce_313":{"type":"method","name":"_reduce_313","children":[],"call":[" in_def= "," in_def "]}," RubyParser _reduce_312":{"type":"method","name":"_reduce_312","children":[],"call":[" lexer lineno "," lexer "]}," RubyParser _reduce_311":{"type":"method","name":"_reduce_311","children":[],"call":[" env unextend "," env "," new_class "]}," RubyParser _reduce_310":{"type":"method","name":"_reduce_310","children":[],"call":[" env extend "," env "," yyerror "," in_single > "," in_single "," in_def "," comments push "," lexer comments "," lexer "," comments "]}," RubyParser _reduce_309":{"type":"method","name":"_reduce_309","children":[],"call":[" lexer lineno "," lexer "]}," RubyParser _reduce_308":{"type":"method","name":"_reduce_308","children":[],"call":[" new_for ","val [] "]}," RubyParser _reduce_307":{"type":"method","name":"_reduce_307","children":[],"call":[" lexer cond pop "," lexer cond "," lexer "]}," RubyParser _reduce_306":{"type":"method","name":"_reduce_306","children":[],"call":[" lexer cond push "," lexer cond "," lexer "]}," RubyParser _reduce_305":{"type":"method","name":"_reduce_305","children":[],"call":[" new_case ","val [] "]}," RubyParser _reduce_304":{"type":"method","name":"_reduce_304","children":[],"call":[" new_case ","val [] "]}," RubyParser _reduce_303":{"type":"method","name":"_reduce_303","children":[],"call":[" new_case ","val [] "]}," RubyParser _reduce_302":{"type":"method","name":"_reduce_302","children":[],"call":[" new_until ","val [] "]}," RubyParser _reduce_301":{"type":"method","name":"_reduce_301","children":[],"call":[" lexer cond pop "," lexer cond "," lexer "]}," RubyParser _reduce_300":{"type":"method","name":"_reduce_300","children":[],"call":[" lexer cond push "," lexer cond "," lexer "]}," RubyParser _reduce_299":{"type":"method","name":"_reduce_299","children":[],"call":[" new_while ","val [] "]}," RubyParser _reduce_298":{"type":"method","name":"_reduce_298","children":[],"call":[" lexer cond pop "," lexer cond "," lexer "]}," RubyParser _reduce_297":{"type":"method","name":"_reduce_297","children":[],"call":[" lexer cond push "," lexer cond "," lexer "]}," RubyParser _reduce_296":{"type":"method","name":"_reduce_296","children":[],"call":[" new_if ","val [] "]}," RubyParser _reduce_295":{"type":"method","name":"_reduce_295","children":[],"call":[" new_if ","val [] "]}," RubyParser _reduce_294":{"type":"method","name":"_reduce_294","children":[],"call":["iter insert ","val [] "]}," RubyParser _reduce_292":{"type":"method","name":"_reduce_292","children":[],"call":["call line= ","iter line ","iter insert "," new_call ","oper to_sym ","val [] "," new_call  line= "," new_ new_call  "]}," RubyParser _reduce_291":{"type":"method","name":"_reduce_291","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_290":{"type":"method","name":"_reduce_290","children":[],"call":[" new_yield "]}," RubyParser _reduce_289":{"type":"method","name":"_reduce_289","children":[],"call":[" new_yield "]}," RubyParser _reduce_288":{"type":"method","name":"_reduce_288","children":[],"call":[" new_yield ","val [] "]}," RubyParser _reduce_287":{"type":"method","name":"_reduce_287","children":[],"call":[" s "]}," RubyParser _reduce_286":{"type":"method","name":"_reduce_286","children":[],"call":[" s ","val [] values ","val [] "]}," RubyParser _reduce_285":{"type":"method","name":"_reduce_285","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_284":{"type":"method","name":"_reduce_284","children":[],"call":[" new_aref "]}," RubyParser _reduce_283":{"type":"method","name":"_reduce_283","children":[],"call":[" s ","val [] to_sym ","val [] "]}," RubyParser _reduce_282":{"type":"method","name":"_reduce_282","children":[],"call":[" s ","val [] to_sym ","val [] "]}," RubyParser _reduce_281":{"type":"method","name":"_reduce_281","children":[],"call":["result paren= "," s ","val [] "]}," RubyParser _reduce_280":{"type":"method","name":"_reduce_280","children":[],"call":["val [] "," warning "]}," RubyParser _reduce_279":{"type":"method","name":"_reduce_279","children":[],"call":[" lexer lex_state= "," lexer "]}," RubyParser _reduce_278":{"type":"method","name":"_reduce_278","children":[],"call":["result line= ","val [] "," s "," s  line= "]}," RubyParser _reduce_277":{"type":"method","name":"_reduce_277","children":[],"call":[" lexer lineno "," lexer "]}," RubyParser _reduce_276":{"type":"method","name":"_reduce_276","children":[],"call":[" new_call ","val [] to_sym ","val [] "]}," RubyParser _reduce_267":{"type":"method","name":"_reduce_267","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_266":{"type":"method","name":"_reduce_266","children":[],"call":[" arg_concat ","val [] "]}," RubyParser _reduce_265":{"type":"method","name":"_reduce_265","children":[],"call":["val [] << ","val [] "]}," RubyParser _reduce_264":{"type":"method","name":"_reduce_264","children":[],"call":[" list_append ","val [] "]}," RubyParser _reduce_263":{"type":"method","name":"_reduce_263","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_261":{"type":"method","name":"_reduce_261","children":[],"call":["val [] "]}," RubyParser _reduce_260":{"type":"method","name":"_reduce_260","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_259":{"type":"method","name":"_reduce_259","children":[],"call":["val [] "," warning "]}," RubyParser _reduce_258":{"type":"method","name":"_reduce_258","children":[],"call":[" lexer lex_state= "," lexer "]}," RubyParser _reduce_257":{"type":"method","name":"_reduce_257","children":[],"call":[" warning "]}," RubyParser _reduce_256":{"type":"method","name":"_reduce_256","children":[],"call":[" lexer lex_state= "," lexer "]}," RubyParser _reduce_254":{"type":"method","name":"_reduce_254","children":[],"call":["val [] "," lexer cmdarg stack replace "," lexer cmdarg stack "," lexer cmdarg "," lexer "]}," RubyParser _reduce_253":{"type":"method","name":"_reduce_253","children":[],"call":[" lexer cmdarg push "," lexer cmdarg "," lexer "," lexer cmdarg stack dup "," lexer cmdarg stack "]}," RubyParser _reduce_251":{"type":"method","name":"_reduce_251","children":[],"call":[" arg_blk_pass ","val [] "," s "]}," RubyParser _reduce_250":{"type":"method","name":"_reduce_250","children":[],"call":[" arg_blk_pass ","val [] "," arg_concat "," s add_all add "," s ","val [] values "," s add_all "]}," RubyParser _reduce_249":{"type":"method","name":"_reduce_249","children":[],"call":[" arg_blk_pass ","val [] "," arg_concat "," s add "," s ","val [] values "]}," RubyParser _reduce_248":{"type":"method","name":"_reduce_248","children":[],"call":[" arg_blk_pass ","val [] "," s add_all add "," s ","val [] values "," s add_all "]}," RubyParser _reduce_247":{"type":"method","name":"_reduce_247","children":[],"call":[" arg_blk_pass ","val [] "," s ","val [] values "]}," RubyParser _reduce_246":{"type":"method","name":"_reduce_246","children":[],"call":[" arg_blk_pass ","val [] "," s ","val [] values "]}," RubyParser _reduce_245":{"type":"method","name":"_reduce_245","children":[],"call":[" arg_blk_pass ","val [] "," s ","val [] values "]}," RubyParser _reduce_244":{"type":"method","name":"_reduce_244","children":[],"call":[" arg_blk_pass ","val [] "," arg_concat "," s ","val [] values "]}," RubyParser _reduce_243":{"type":"method","name":"_reduce_243","children":[],"call":[" arg_blk_pass ","val [] "," arg_concat "," s "]}," RubyParser _reduce_242":{"type":"method","name":"_reduce_242","children":[],"call":[" arg_blk_pass ","val [] "]}," RubyParser _reduce_241":{"type":"method","name":"_reduce_241","children":[],"call":[" arg_blk_pass ","val [] "," list_prepend "]}," RubyParser _reduce_239":{"type":"method","name":"_reduce_239","children":[],"call":[" arg_blk_pass ","val [] "," s "]}," RubyParser _reduce_238":{"type":"method","name":"_reduce_238","children":[],"call":[" arg_blk_pass ","val [] "," arg_concat ","val [] << "," s ","val [] values "]}," RubyParser _reduce_237":{"type":"method","name":"_reduce_237","children":[],"call":[" arg_blk_pass ","val [] ","val [] << "," s ","val [] values "]}," RubyParser _reduce_236":{"type":"method","name":"_reduce_236","children":[],"call":[" arg_blk_pass ","val [] "," arg_concat "," s ","val [] values "]}," RubyParser _reduce_235":{"type":"method","name":"_reduce_235","children":[],"call":[" arg_blk_pass ","val [] "," s ","val [] values "]}," RubyParser _reduce_234":{"type":"method","name":"_reduce_234","children":[],"call":[" arg_blk_pass ","val [] "," arg_concat "]}," RubyParser _reduce_233":{"type":"method","name":"_reduce_233","children":[],"call":[" arg_blk_pass ","val [] "]}," RubyParser _reduce_232":{"type":"method","name":"_reduce_232","children":[],"call":[" s ","val [] "," warning "]}," RubyParser _reduce_229":{"type":"method","name":"_reduce_229","children":[],"call":["val [] add ","val [] "," warning "]}," RubyParser _reduce_228":{"type":"method","name":"_reduce_228","children":[],"call":[" s ","val [] "," warning "]}," RubyParser _reduce_227":{"type":"method","name":"_reduce_227","children":[],"call":["val [] "]}," RubyParser _reduce_226":{"type":"method","name":"_reduce_226","children":[],"call":["val [] "]}," RubyParser _reduce_225":{"type":"method","name":"_reduce_225","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_224":{"type":"method","name":"_reduce_224","children":[],"call":[" s ","val [] values ","val [] "]}," RubyParser _reduce_223":{"type":"method","name":"_reduce_223","children":[],"call":[" arg_concat ","val [] "]}," RubyParser _reduce_222":{"type":"method","name":"_reduce_222","children":[],"call":["val [] "]}," RubyParser _reduce_221":{"type":"method","name":"_reduce_221","children":[],"call":[" s ","val [] "," warning "]}," RubyParser _reduce_219":{"type":"method","name":"_reduce_219","children":[],"call":[" value_expr ","val [] "]}," RubyParser _reduce_217":{"type":"method","name":"_reduce_217","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_216":{"type":"method","name":"_reduce_216","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_215":{"type":"method","name":"_reduce_215","children":[],"call":[" logop ","val [] "]}," RubyParser _reduce_214":{"type":"method","name":"_reduce_214","children":[],"call":[" logop ","val [] "]}," RubyParser _reduce_213":{"type":"method","name":"_reduce_213","children":[],"call":[" new_call "," s ","val [] ","val []= "," value_expr "]}," RubyParser _reduce_212":{"type":"method","name":"_reduce_212","children":[],"call":[" new_call "," s ","val [] ","val []= "," value_expr "]}," RubyParser _reduce_211":{"type":"method","name":"_reduce_211","children":[],"call":[" new_call "," s ","val [] ","val []= "," value_expr "]}," RubyParser _reduce_210":{"type":"method","name":"_reduce_210","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_209":{"type":"method","name":"_reduce_209","children":[],"call":[" s "," get_match_node ","val [] "]}," RubyParser _reduce_208":{"type":"method","name":"_reduce_208","children":[],"call":[" get_match_node ","val [] "]}," RubyParser _reduce_207":{"type":"method","name":"_reduce_207","children":[],"call":[" s "," new_call ","val [] ","val []= "," value_expr "]}," RubyParser _reduce_206":{"type":"method","name":"_reduce_206","children":[],"call":[" new_call "," s ","val [] "]}," RubyParser _reduce_205":{"type":"method","name":"_reduce_205","children":[],"call":[" new_call "," s ","val [] "]}," RubyParser _reduce_204":{"type":"method","name":"_reduce_204","children":[],"call":[" new_call "," s ","val [] "]}," RubyParser _reduce_203":{"type":"method","name":"_reduce_203","children":[],"call":[" new_call "," s ","val [] "]}," RubyParser _reduce_202":{"type":"method","name":"_reduce_202","children":[],"call":[" new_call "," s ","val [] "]}," RubyParser _reduce_201":{"type":"method","name":"_reduce_201","children":[],"call":[" new_call "," s ","val [] "]}," RubyParser _reduce_200":{"type":"method","name":"_reduce_200","children":[],"call":[" new_call "," s ","val [] "]}," RubyParser _reduce_199":{"type":"method","name":"_reduce_199","children":[],"call":[" new_call "," s ","val [] "]}," RubyParser _reduce_198":{"type":"method","name":"_reduce_198","children":[],"call":[" new_call "," s ","val [] "]}," RubyParser _reduce_197":{"type":"method","name":"_reduce_197","children":[],"call":[" new_call "," s ","val [] "]}," RubyParser _reduce_196":{"type":"method","name":"_reduce_196","children":[],"call":[" new_call "," s ","val [] "]}," RubyParser _reduce_195":{"type":"method","name":"_reduce_195","children":[],"call":[" new_call "," s ","val [] ","val [] [] == ","val [] [] "]}," RubyParser _reduce_194":{"type":"method","name":"_reduce_194","children":[],"call":[" new_call "," s ","val [] "]}," RubyParser _reduce_193":{"type":"method","name":"_reduce_193","children":[],"call":[" new_call "," s ","val [] "]}," RubyParser _reduce_192":{"type":"method","name":"_reduce_192","children":[],"call":[" new_call "," s ","val [] "]}," RubyParser _reduce_191":{"type":"method","name":"_reduce_191","children":[],"call":[" new_call "," s ","val [] "]}," RubyParser _reduce_190":{"type":"method","name":"_reduce_190","children":[],"call":[" new_call "," s ","val [] "]}," RubyParser _reduce_189":{"type":"method","name":"_reduce_189","children":[],"call":[" new_call "," s ","val [] "]}," RubyParser _reduce_188":{"type":"method","name":"_reduce_188","children":[],"call":[" new_call "," s ","val [] "]}," RubyParser _reduce_187":{"type":"method","name":"_reduce_187","children":[],"call":[" new_call "," s ","val [] "]}," RubyParser _reduce_186":{"type":"method","name":"_reduce_186","children":[],"call":[" s ","v2 last ","v1 last ","Fixnum  === ","v2 node_type == ","v2 node_type ","v1 node_type == ","v1 node_type ","val [] "]}," RubyParser _reduce_185":{"type":"method","name":"_reduce_185","children":[],"call":[" s ","v2 last ","v1 last ","Fixnum  === ","v2 node_type == ","v2 node_type ","v1 node_type == ","v1 node_type ","val [] "]}," RubyParser _reduce_184":{"type":"method","name":"_reduce_184","children":[],"call":[" backref_assign_error ","val [] "]}," RubyParser _reduce_183":{"type":"method","name":"_reduce_183","children":[],"call":[" yyerror "]}," RubyParser _reduce_182":{"type":"method","name":"_reduce_182","children":[],"call":[" yyerror "]}," RubyParser _reduce_181":{"type":"method","name":"_reduce_181","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_180":{"type":"method","name":"_reduce_180","children":[],"call":[" s ","val [] ","val [] to_sym "]}," RubyParser _reduce_179":{"type":"method","name":"_reduce_179","children":[],"call":[" s ","val [] ","val [] to_sym "]}," RubyParser _reduce_178":{"type":"method","name":"_reduce_178","children":[],"call":["val [] []= ","val [] "," s ","val [] to_sym "]}," RubyParser _reduce_177":{"type":"method","name":"_reduce_177","children":[],"call":[" new_op_asgn "]}," RubyParser _reduce_176":{"type":"method","name":"_reduce_176","children":[],"call":[" node_assign "," s ","val [] "]}," RubyParser _reduce_175":{"type":"method","name":"_reduce_175","children":[],"call":[" node_assign ","val [] "]}," RubyParser _reduce_107":{"type":"method","name":"_reduce_107","children":[],"call":[" new_undef ","val [] "]}," RubyParser _reduce_106":{"type":"method","name":"_reduce_106","children":[],"call":[" lexer lex_state= "," lexer "]}," RubyParser _reduce_105":{"type":"method","name":"_reduce_105","children":[],"call":[" new_undef ","val [] "]}," RubyParser _reduce_103":{"type":"method","name":"_reduce_103","children":[],"call":[" s ","val [] to_sym ","val [] "]}," RubyParser _reduce_100":{"type":"method","name":"_reduce_100","children":[],"call":["val [] "," lexer lex_state= "," lexer "]}," RubyParser _reduce_99":{"type":"method","name":"_reduce_99","children":[],"call":["val [] "," lexer lex_state= "," lexer "]}," RubyParser _reduce_95":{"type":"method","name":"_reduce_95","children":[],"call":[" s ","val [] to_sym ","val [] "]}," RubyParser _reduce_94":{"type":"method","name":"_reduce_94","children":[],"call":["val [] to_sym ","val [] "]}," RubyParser _reduce_93":{"type":"method","name":"_reduce_93","children":[],"call":[" s ","val [] to_sym ","val [] "]}," RubyParser _reduce_91":{"type":"method","name":"_reduce_91","children":[],"call":[" yyerror "]}," RubyParser _reduce_90":{"type":"method","name":"_reduce_90","children":[],"call":[" backref_assign_error ","val [] "]}," RubyParser _reduce_89":{"type":"method","name":"_reduce_89","children":[],"call":[" s ","val [] to_sym ","val [] "," yyerror "," in_single > "," in_single "," in_def "]}," RubyParser _reduce_88":{"type":"method","name":"_reduce_88","children":[],"call":[" s ","val [] to_sym ","val [] "," yyerror "," in_single > "," in_single "," in_def "]}," RubyParser _reduce_87":{"type":"method","name":"_reduce_87","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_86":{"type":"method","name":"_reduce_86","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_85":{"type":"method","name":"_reduce_85","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_84":{"type":"method","name":"_reduce_84","children":[],"call":[" aryset ","val [] "]}," RubyParser _reduce_83":{"type":"method","name":"_reduce_83","children":[],"call":[" assignable ","val [] "]}," RubyParser _reduce_82":{"type":"method","name":"_reduce_82","children":[],"call":[" backref_assign_error ","val [] "]}," RubyParser _reduce_81":{"type":"method","name":"_reduce_81","children":[],"call":[" s ","val [] to_sym ","val [] "," yyerror "," in_single > "," in_single "," in_def "]}," RubyParser _reduce_80":{"type":"method","name":"_reduce_80","children":[],"call":[" s ","val [] to_sym ","val [] "," yyerror "," in_single > "," in_single "," in_def "]}," RubyParser _reduce_79":{"type":"method","name":"_reduce_79","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_78":{"type":"method","name":"_reduce_78","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_77":{"type":"method","name":"_reduce_77","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_76":{"type":"method","name":"_reduce_76","children":[],"call":[" aryset ","val [] "]}," RubyParser _reduce_75":{"type":"method","name":"_reduce_75","children":[],"call":[" assignable ","val [] "]}," RubyParser _reduce_74":{"type":"method","name":"_reduce_74","children":[],"call":["val [] << ","val [] compact ","val [] "]}," RubyParser _reduce_73":{"type":"method","name":"_reduce_73","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_72":{"type":"method","name":"_reduce_72","children":[],"call":["val [] "]}," RubyParser _reduce_70":{"type":"method","name":"_reduce_70","children":[],"call":[" s "]}," RubyParser _reduce_69":{"type":"method","name":"_reduce_69","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_68":{"type":"method","name":"_reduce_68","children":[],"call":[" s ","val [] << ","val [] "]}," RubyParser _reduce_67":{"type":"method","name":"_reduce_67","children":[],"call":[" s ","val [] << ","val [] "]}," RubyParser _reduce_66":{"type":"method","name":"_reduce_66","children":[],"call":[" s ","val [] << ","val [] compact ","val [] "]}," RubyParser _reduce_65":{"type":"method","name":"_reduce_65","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_64":{"type":"method","name":"_reduce_64","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_62":{"type":"method","name":"_reduce_62","children":[],"call":["val [] "]}," RubyParser _reduce_60":{"type":"method","name":"_reduce_60","children":[],"call":[" new_yield ","val [] "]}," RubyParser _reduce_59":{"type":"method","name":"_reduce_59","children":[],"call":[" new_super ","val [] "]}," RubyParser _reduce_58":{"type":"method","name":"_reduce_58","children":[],"call":["val [] ","val [] << "," raise ","result [] == ","result [] "," new_call ","val [] to_sym ","val []  [] == "," new_call  [] == ","val []  [] "," new_call  [] "]}," RubyParser _reduce_57":{"type":"method","name":"_reduce_57","children":[],"call":[" new_call ","val [] ","val [] to_sym "]}," RubyParser _reduce_56":{"type":"method","name":"_reduce_56","children":[],"call":[" new_call ","val [] ","val [] to_sym "]}," RubyParser _reduce_55":{"type":"method","name":"_reduce_55","children":[],"call":[" new_call ","val [] ","val [] to_sym "]}," RubyParser _reduce_54":{"type":"method","name":"_reduce_54","children":[],"call":["result insert ","val [] "," raise ","result [] == ","result [] "," new_call ","val [] to_sym "," new_call  insert "," new_call  [] == "," new_call  [] "]}," RubyParser _reduce_53":{"type":"method","name":"_reduce_53","children":[],"call":[" new_call ","val [] ","val [] to_sym "]}," RubyParser _reduce_52":{"type":"method","name":"_reduce_52","children":[],"call":[" env unextend "," env "," new_iter ","val [] "]}," RubyParser _reduce_51":{"type":"method","name":"_reduce_51","children":[],"call":[" env dynamic keys "," env dynamic "," env "]}," RubyParser _reduce_50":{"type":"method","name":"_reduce_50","children":[],"call":[" lexer lineno "," lexer "," env extend "," env "]}," RubyParser _reduce_49":{"type":"method","name":"_reduce_49","children":[],"call":[" new_call ","val [] "]}," RubyParser _reduce_48":{"type":"method","name":"_reduce_48","children":[],"call":[" new_call ","val [] "]}," RubyParser _reduce_46":{"type":"method","name":"_reduce_46","children":[],"call":[" s line "," s "," ret_args ","val [] ","val [] last "," s val [] last  "]}," RubyParser _reduce_45":{"type":"method","name":"_reduce_45","children":[],"call":[" s line "," s "," ret_args ","val [] ","val [] last "," s val [] last  "]}," RubyParser _reduce_44":{"type":"method","name":"_reduce_44","children":[],"call":[" s line "," s "," ret_args ","val [] ","val [] last "," s val [] last  "]}," RubyParser _reduce_41":{"type":"method","name":"_reduce_41","children":[],"call":[" value_expr ","val [] "]}," RubyParser _reduce_39":{"type":"method","name":"_reduce_39","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_38":{"type":"method","name":"_reduce_38","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_37":{"type":"method","name":"_reduce_37","children":[],"call":[" logop ","val [] "]}," RubyParser _reduce_36":{"type":"method","name":"_reduce_36","children":[],"call":[" logop ","val [] "]}," RubyParser _reduce_33":{"type":"method","name":"_reduce_33","children":[],"call":[" new_masgn ","val [] "]}," RubyParser _reduce_32":{"type":"method","name":"_reduce_32","children":[],"call":[" new_masgn ","val [] "]}," RubyParser _reduce_31":{"type":"method","name":"_reduce_31","children":[],"call":[" node_assign "," s ","val [] "]}," RubyParser _reduce_30":{"type":"method","name":"_reduce_30","children":[],"call":[" backref_assign_error ","val [] "]}," RubyParser _reduce_29":{"type":"method","name":"_reduce_29","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_28":{"type":"method","name":"_reduce_28","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_27":{"type":"method","name":"_reduce_27","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_26":{"type":"method","name":"_reduce_26","children":[],"call":[" s ","val [] ","val [] to_sym "]}," RubyParser _reduce_25":{"type":"method","name":"_reduce_25","children":[],"call":[" new_op_asgn "]}," RubyParser _reduce_24":{"type":"method","name":"_reduce_24","children":[],"call":[" new_masgn ","val [] "]}," RubyParser _reduce_23":{"type":"method","name":"_reduce_23","children":[],"call":[" node_assign ","val [] "]}," RubyParser _reduce_22":{"type":"method","name":"_reduce_22","children":[],"call":[" new_iter ","val [] "," s "," yyerror "," in_single > "," in_single "," in_def "]}," RubyParser _reduce_21":{"type":"method","name":"_reduce_21","children":[],"call":[" new_iter ","val [] "," s "]}," RubyParser _reduce_20":{"type":"method","name":"_reduce_20","children":[],"call":[" env extend "," env "," yyerror "," in_single > "," in_single "," in_def "]}," RubyParser _reduce_19":{"type":"method","name":"_reduce_19","children":[],"call":[" s ","val [] "]}," RubyParser _reduce_18":{"type":"method","name":"_reduce_18","children":[],"call":[" new_until ","val [] "]}," RubyParser _reduce_17":{"type":"method","name":"_reduce_17","children":[],"call":[" new_while ","val [] "]}," RubyParser _reduce_16":{"type":"method","name":"_reduce_16","children":[],"call":[" new_if ","val [] "]}," RubyParser _reduce_15":{"type":"method","name":"_reduce_15","children":[],"call":[" new_if ","val [] "]}," RubyParser _reduce_14":{"type":"method","name":"_reduce_14","children":[],"call":["val [] "]}," RubyParser _reduce_13":{"type":"method","name":"_reduce_13","children":[],"call":[" yyerror "]}," RubyParser _reduce_12":{"type":"method","name":"_reduce_12","children":[],"call":[" s ","val [] ","val [] to_sym "]}," RubyParser _reduce_11":{"type":"method","name":"_reduce_11","children":[],"call":[" s ","val [] to_sym ","val [] "]}," RubyParser _reduce_10":{"type":"method","name":"_reduce_10","children":[],"call":[" s line ","val [] "," s "]}," RubyParser _reduce_9":{"type":"method","name":"_reduce_9","children":[],"call":[" lexer lineno "," lexer "," lexer lex_state= "]}," RubyParser _reduce_8":{"type":"method","name":"_reduce_8","children":[],"call":["val [] "]}," RubyParser _reduce_7":{"type":"method","name":"_reduce_7","children":[],"call":[" block_append ","val [] "]}," RubyParser _reduce_4":{"type":"method","name":"_reduce_4","children":[],"call":[" new_compstmt "]}," RubyParser _reduce_3":{"type":"method","name":"_reduce_3","children":[],"call":[" new_body "]}," RubyParser _reduce_2":{"type":"method","name":"_reduce_2","children":[],"call":["val [] "]}," RubyParser _reduce_1":{"type":"method","name":"_reduce_1","children":[],"call":[" lexer lex_state= "," lexer "]}," Checks run_checks_parallel":{"type":"method","name":"run_checks_parallel","children":[],"call":[]}," Checks run_checks_sequential":{"type":"method","name":"run_checks_sequential","children":[],"call":[]}," BaseCheck gemfile_or_environment":{"type":"method","name":"gemfile_or_environment","children":[],"call":["File  exist? ","File  expand_path ","OPTIONS  [] "," tracker options [] "," tracker options "," tracker ","@app_tree exists? "," tracker config [] [] "," tracker config [] "," tracker config "," tracker config get_gem ","@app_tree file_path ","gem_name to_sym "]}," Ruport CSV csv_writer":{"type":"method","name":"csv_writer","children":[],"call":["FCSV  instance "," options format_options "," options "," output "," options formatter "]}," ConfigProcessor process_class":{"type":"method","name":"process_class","children":[],"call":[" process ","exp [] "," sexp? ","exp [] == "]}," ConfigProcessor process_iter":{"type":"method","name":"process_iter","children":[],"call":[" process ","exp [] "," sexp? ","exp [] [] [] == ","exp [] [] [] ","exp [] [] "]}," CheckTranslateBug uses_translate?":{"type":"method","name":"uses_translate?","children":[],"call":[" tracker find_call empty? ! "," tracker find_call empty? "," tracker find_call "," tracker "," debug_info ","Brakeman  debug "," tracker find_call any? "]}," CheckTranslateBug run_check":{"type":"method","name":"run_check","children":[],"call":[" warn "," gemfile_or_environment ","version =~ "," tracker config [] "," tracker config "," tracker ","CONFIDENCE  [] "," uses_translate? "," version_between? ","OPTIONS  [] "," tracker options [] "," tracker options "," lts_version? "," rails_version =~ "," rails_version "," tracker config escape_html? "," msg "," msg_version "," msg_code "," tracker config []  =~ ","  tracker config [] _between? "," lts_ tracker config [] ? "," rails_ tracker config []  =~ "," rails_ tracker config []  "," msg_ tracker config []  "]}," Sexp to_sym":{"type":"method","name":"to_sym","children":[],"call":[" value to_sym "," value "]}," Sexp value":{"type":"method","name":"value","children":[],"call":[" last "," raise "," size > "," size "," caller [] "," caller "," [] "," inspect "]}," Sexp paren":{"type":"method","name":"paren","children":[],"call":[]}," Symbol is_argument":{"type":"method","name":"is_argument","children":[],"call":[" == "]}," RubyParser initialize":{"type":"method","name":"initialize","children":[],"call":[" warn "," caller first "," caller "]}," RubyParserStuff StackState push":{"type":"method","name":"push","children":[],"call":["@stack push "]}," RubyParserStuff StackState pop":{"type":"method","name":"pop","children":[],"call":["@stack push ","@stack size == ","@stack size ","@stack pop "]}," RubyParserStuff StackState lexpop":{"type":"method","name":"lexpop","children":[],"call":["@stack push ","@stack pop "," raise ","@stack size == ","@stack size ","@st@stack pop ck push ","@st@stack pop ck pop "," r@stack pop ise ","@st@stack pop ck size == ","@st@stack pop ck size "]}," RubyParserStuff StackState is_in_state":{"type":"method","name":"is_in_state","children":[],"call":["@stack last "]}," RubyParserStuff StackState inspect":{"type":"method","name":"inspect","children":[],"call":["@stack inspect "]}," RubyParserStuff StackState initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RubyParserStuff Environment used?":{"type":"method","name":"used?","children":[],"call":["u [] ","env merge ","@use [] reverse inject ","@use [] reverse ","@use [] ","@dyn index "]}," RubyParserStuff Environment use":{"type":"method","name":"use","children":[],"call":["@use [] []= ","@use [] ","env [] ","@env each_with_index "]}," RubyParserStuff Environment unextend":{"type":"method","name":"unextend","children":[],"call":[" raise ","@env empty? ","@use shift ","@env shift ","@dyn shift "]}," RubyParserStuff Environment reset":{"type":"method","name":"reset","children":[],"call":[" extend ","@use clear ","@env clear ","@dyn clear "]}," RubyParserStuff Environment initialize":{"type":"method","name":"initialize","children":[],"call":[" reset "]}," RubyParserStuff Environment extend":{"type":"method","name":"extend","children":[],"call":["@use unshift ","@env unshift ","@dyn unshift "]}," RubyParserStuff Environment dynamic?":{"type":"method","name":"dynamic?","children":[],"call":["@dyn [] != ","@dyn [] "]}," RubyParserStuff Environment dynamic":{"type":"method","name":"dynamic","children":[],"call":["env merge ","@env [] reverse inject ","@env [] reverse ","@env [] ","@dyn index "]}," RubyParserStuff Environment current":{"type":"method","name":"current","children":[],"call":["@env first "]}," RubyParserStuff Environment all":{"type":"method","name":"all","children":[],"call":["env merge ","@env [] reverse inject ","@env [] reverse ","@env [] ","@dyn index "]}," RubyParserStuff Environment []=":{"type":"method","name":"[]=","children":[],"call":[" current []= "," current "," raise ","v == "]}," RubyParserStuff Environment []":{"type":"method","name":"[]","children":[],"call":[" all [] "," all "]}," RubyParserStuff Keyword keyword":{"type":"method","name":"keyword","children":[],"call":[]}," RubyParserStuff Keyword KWtable initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RubyParserStuff yyerror":{"type":"method","name":"yyerror","children":[],"call":[]}," RubyParserStuff warning":{"type":"method","name":"warning","children":[],"call":[]}," RubyParserStuff void_stmts":{"type":"method","name":"void_stmts","children":[],"call":["node []= "," remove_begin ","node [] map ","node [] ","node [] == "]}," RubyParserStuff value_expr":{"type":"method","name":"value_expr","children":[],"call":["node []= "," value_expr ","node [] ","node [] == ","node line= ","oldnode line "," remove_begin "," remove_begin  []= "," remove_begin  [] "," remove_begin  [] == "," remove_begin  line= ","old remove_begin  line "]}," RubyParserStuff s":{"type":"method","name":"s","children":[],"call":["result file= "," file "," lexer lineno "," lexer ","result line "," lexer src ","Sexp  new ","Sexp  new  file= ","Sexp  new  line "]}," RubyParserStuff ret_args":{"type":"method","name":"ret_args","children":[],"call":["node []= ","node [] [] == ","node [] [] ","node [] ","node [] == "," s ","node paren ! ","node paren ","node last ","node size == ","node size "," raise "," s  []= ","node last  []= "," s  [] [] == ","node last  [] [] == "," s  [] [] ","node last  [] [] "," s  [] ","node last  [] "," s  [] == ","node last  [] == "," s  paren ! ","node last  paren ! "," s  paren ","node last  paren "," s  last ","node last  last "," s  size == ","node last  size == "," s  size ","node last  size "]}," RubyParserStuff reset":{"type":"method","name":"reset","children":[],"call":[" comments clear "," comments "," env reset "," env "," in_single= "," in_def= "," lexer reset "," lexer "]}," RubyParserStuff remove_begin":{"type":"method","name":"remove_begin","children":[],"call":["node line= ","oldnode line ","node [] ","node size == ","node size ","begin == ","node []  line= ","oldnode []  line ","node []  [] ","node []  size == ","node []  size "]}," RubyParserStuff process":{"type":"method","name":"process","children":[],"call":[" do_parse ","ENV  has_key? "," lexer src= ","str dup "," lexer "," file= "," raise ","str inspect ","String  === "]}," RubyParserStuff node_assign":{"type":"method","name":"node_assign","children":[],"call":[" raise ","lhs inspect ","lhs << ","lhs []= "," arg_add ","lhs pop ","Symbol  === ","lhs last ","lhs [] "," value_expr "]}," RubyParserStuff next_token":{"type":"method","name":"next_token","children":[],"call":[" lexer yacc_value "," lexer "," lexer token "," lexer advance "]}," RubyParserStuff new_yield":{"type":"method","name":"new_yield","children":[],"call":[" s ","args [] ","args first == ","args first ","args []= "," raise ","args node_type == ","args node_type "," s  [] "," s  first == "," s  first "," s  []= "," s  node_type == "," s  node_type "]}," RubyParserStuff new_xstring":{"type":"method","name":"new_xstring","children":[],"call":[" s ","str []= ","str [] "," s  []= "," s  [] "]}," RubyParserStuff new_while":{"type":"method","name":"new_while","children":[],"call":[" new_until_or_while "]}," RubyParserStuff new_until":{"type":"method","name":"new_until","children":[],"call":[" new_until_or_while "]}," RubyParserStuff new_until_or_while":{"type":"method","name":"new_until_or_while","children":[],"call":["result line= "," s ","expr last "," canonicalize_conditions ","expr first == ","expr first "," cond ","block last ","block [] == ","block [] ","(and\n  (lvar :block)\n  (send\n    (lvar :block) :line)) compact min ","(and\n  (lvar :block)\n  (send\n    (lvar :block) :line)) compact ","expr line ","block line ","type == "," s  line= ","result (and\n  (lvar :block)\n  (send\n    (lvar :block) :line)) compact min = "," cond  last "," cond  first == "," cond  first ","(and\n  (lvar :block)\n  (send\n    (lvar :block) :(and\n  (lvar :block)\n  (send\n    (lvar :block) :line)) compact min )) compact min ","(and\n  (lvar :block)\n  (send\n    (lvar :block) :(and\n  (lvar :block)\n  (send\n    (lvar :block) :line)) compact min )) compact "," cond  line ","expr (and\n  (lvar :block)\n  (send\n    (lvar :block) :line)) compact min  ","block (and\n  (lvar :block)\n  (send\n    (lvar :block) :line)) compact min  "]}," RubyParserStuff new_undef":{"type":"method","name":"new_undef","children":[],"call":[" s "," block_append "]}," RubyParserStuff new_super":{"type":"method","name":"new_super","children":[],"call":[" s ","args [] ","args node_type == ","args node_type "]}," RubyParserStuff new_sclass":{"type":"method","name":"new_sclass","children":[],"call":[" in_single= "," in_def= ","result line= ","val [] "," s "," s compact "," s  line= "]}," RubyParserStuff new_regexp":{"type":"method","name":"new_regexp","children":[],"call":["node << ","o != ","node []= ","options =~ "," s ","Regexp  new ","node [] ","c =~ "," raise ","(pair\n  (str \"x\")\n  (const\n    (const nil :Regexp) :EXTENDED)) [] ","options split uniq each ","options split uniq ","options split ","val [] "," s  << "," s  []= ","val []  =~ "," s  [] ","val []  split uniq each ","val []  split uniq ","val []  split ","(pair\n  (str \"x\")\n  (const\n    (const nil :Regexp) :EXTENDED)) [] al [] "]}," RubyParserStuff new_op_asgn":{"type":"method","name":"new_op_asgn","children":[],"call":["result line= ","lhs line ","lhs []= "," new_call "," s "," gettable ","lhs << "," remove_begin ","lhs value ","val [] ","val [] to_sym "]}," RubyParserStuff new_module":{"type":"method","name":"new_module","children":[],"call":["result comments= "," comments pop "," comments ","result line= "," s "," s compact ","val [] "," s  comments= "," s  line= "]}," RubyParserStuff new_masgn":{"type":"method","name":"new_masgn","children":[],"call":["lhs << ","lhs delete_at ","lhs [] nil? ","lhs [] "," s "," value_expr "]}," RubyParserStuff new_iter":{"type":"method","name":"new_iter","children":[],"call":["result << "," s "," s  << "]}," RubyParserStuff new_if":{"type":"method","name":"new_if","children":[],"call":[" s line "," s ","c last "," canonicalize_conditions ","c [] == ","c [] "," cond ","(send\n  (lvar :c) :line) compact min ","(send\n  (lvar :c) :line) compact ","f line ","t line ","c line "," s (send\n  (lvar :c) :line) compact min ine "," cond  last ","c (send\n  (lvar :c) :line) compact min ast ","  cond anoni cond alize_ cond onditions "," canonica(send\n  (lvar :c) :line) compact min ize_conditions "," cond  [] == "," cond  [] ","  cond ond ","(send\n  (lvar : cond ) :line)  cond ompa cond t min ","(send\n  ((send\n  (lvar :c) :line) compact min var :c) :(send\n  (lvar :c) :line) compact min ine) compact min ","(send\n  (lvar : cond ) :line)  cond ompa cond t ","(send\n  ((send\n  (lvar :c) :line) compact min var :c) :(send\n  (lvar :c) :line) compact min ine) compact ","f (send\n  (lvar :c) :line) compact min ine ","t (send\n  (lvar :c) :line) compact min ine "," cond  line ","c (send\n  (lvar :c) :line) compact min ine "]}," RubyParserStuff new_for":{"type":"method","name":"new_for","children":[],"call":["result << "," s line ","var line "," s "," s line  << "]}," RubyParserStuff new_defs":{"type":"method","name":"new_defs","children":[],"call":["result comments= "," comments pop "," comments ","result line= ","recv line "," s ","name to_sym ","body first == ","body first ","val [] "," s  comments= "," s  line= "," s  first == "," s  first "]}," RubyParserStuff new_defn":{"type":"method","name":"new_defn","children":[],"call":["result comments= "," comments pop "," comments ","result line= "," s ","name to_sym ","body first == ","body first ","val [] "," s  comments= "," s  line= "," s  first == "," s  first "]}," RubyParserStuff new_compstmt":{"type":"method","name":"new_compstmt","children":[],"call":[" remove_begin "," void_stmts ","val [] "]}," RubyParserStuff new_class":{"type":"method","name":"new_class","children":[],"call":["result comments= "," comments pop "," comments ","result line= "," s "," s compact ","val [] "," s  comments= "," s  line= "]}," RubyParserStuff new_case":{"type":"method","name":"new_case","children":[],"call":["result line= ","result << ","body == "," s ","body delete_at ","body node_type == ","body node_type ","(or\n  (lvar :expr)\n  (lvar :body)) line ","result (or\n  (lvar :expr)\n  (lvar :body)) line = "," s  line= "," s  << ","body delete_at  == ","body delete_at  delete_at ","body delete_at  node_type == ","body delete_at  node_type ","(or\n  (lvar :expr)\n  (lvar :body delete_at )) line ","(or\n  (lvar :expr)\n  (lvar :body)) (or\n  (lvar :expr)\n  (lvar :body)) line  "]}," RubyParserStuff new_call":{"type":"method","name":"new_call","children":[],"call":["result << "," s ","args first == ","args first ","args []= ","result line= ","recv line "," s  << "," s  first == "," s  first "," s  []= "," s  line= "]}," RubyParserStuff new_body":{"type":"method","name":"new_body","children":[],"call":[" s compact "," s ","val [] "," block_append "," warning ","val [] nil? ! ","val [] nil? ","result line= ","(or\n  (send\n    (lvar :val) :[]\n    (int 0))\n  (send\n    (lvar :val) :[]\n    (int 1))) line ","result << ","resbody resbody "," s compact  line= "," block_append  line= "," s  line= ","val []  line= "," s compact  << "," block_append  << "," s  << ","val []  << ","resbody resbody  resbody resbody  ","val []  val []  "]}," RubyParserStuff new_aref":{"type":"method","name":"new_aref","children":[],"call":[" new_call ","val [] ","val [] node_type == ","val [] node_type ","val [] []= ","val [] [] == ","val [] [] "," s "]}," RubyParserStuff logop":{"type":"method","name":"logop","children":[],"call":[" s ","node []= ","second paren ! ","second paren ","second [] == ","second [] ","node [] ","left paren ! ","left paren ","left [] == ","left [] "," value_expr ","node []  paren ! ","node []  paren ","node []  [] == ","node []  [] "," value_expr  paren ! "," value_expr  paren "," value_expr  [] == "," value_expr  [] "]}," RubyParserStuff literal_concat":{"type":"method","name":"literal_concat","children":[],"call":[" raise ","x inspect ","head push ","head []= ","head size == ","head size ","head [] << ","tail [] [] ","tail [] ","head [] ","tail [] [] == ","tail size > ","tail size ","htype == ","tail delete_at ","tail [] == "," s ","tail []= ","head [] + ","head << "," s  push "," s  []= "," s  size == "," s  size "," s  [] << "," s  [] "," s  [] + "," s  << "]}," RubyParserStuff list_prepend":{"type":"method","name":"list_prepend","children":[],"call":["list insert "," s ","list [] == ","list [] ","Sexp  === "," s  insert "," s  [] == "," s  [] "]}," RubyParserStuff list_append":{"type":"method","name":"list_append","children":[],"call":["list << "," s ","list first == ","list first ","Sexp  === "," s  << "," s  first == "," s  first "]}," RubyParserStuff initialize":{"type":"method","name":"initialize","children":[],"call":[" reset ","Environment  new "," lexer parser= "," lexer "," lexer= ","RubyLexer  new ","v to_i "," class name [] "," class name "," class ","En class name [] ironment  new "," class name []  to_i "]}," RubyParserStuff gettable":{"type":"method","name":"gettable","children":[],"call":[" raise ","id inspect "," s ","dvar == "," env [] "," env "," env dynamic? ","id to_s ","id to_sym ","String  === ","id to_sym  inspect ","id to_sym  to_s ","id to_sym  to_sym "]}," RubyParserStuff get_match_node":{"type":"method","name":"get_match_node","children":[],"call":[" s line ","lhs line "," s ","Regexp  === ","rhs last ","rhs [] ","lhs last ","lhs [] "]}," RubyParserStuff do_parse":{"type":"method","name":"do_parse","children":[],"call":[" _racc_do_parse_rb "," _racc_setup "]}," RubyParserStuff cond":{"type":"method","name":"cond","children":[],"call":[" s ","node [] "," env []= "," env ","node hash "," cond ","Regexp  === ","node last ","node first "," value_expr ","node nil? "," value_expr  [] "," value_expr  hash "," value_expr  last "," value_expr  first "," value_expr  nil? "]}," RubyParserStuff block_append":{"type":"method","name":"block_append","children":[],"call":["head << ","head line= "," s ","head node_type == ","head node_type "," remove_begin ","(send\n  (lvar :head) :line) compact min ","(send\n  (lvar :head) :line) compact ","tail line ","head line ","head [] ","head nil? ","tail nil? "," s  << "," remove_begin  << "," s  line= "," remove_begin  line= ","head (send\n  (lvar :head) :line) compact min = "," s  node_type == "," remove_begin  node_type == "," s  node_type "," remove_begin  node_type ","(send\n  (lvar : s ) :line) compact min ","(send\n  (lvar : remove_begin ) :line) compact min ","(send\n  (lvar :head) :(send\n  (lvar :head) :line) compact min ) compact min ","(send\n  (lvar : s ) :line) compact ","(send\n  (lvar : remove_begin ) :line) compact ","(send\n  (lvar :head) :(send\n  (lvar :head) :line) compact min ) compact ","tail (send\n  (lvar :head) :line) compact min  "," s  line "," remove_begin  line ","head (send\n  (lvar :head) :line) compact min  "," s  [] "," remove_begin  [] "," s  nil? "," remove_begin  nil? "]}," RubyParserStuff assignable":{"type":"method","name":"assignable","children":[],"call":["result << "," env [] "," env "," raise "," s "," env dynamic? ! "," env dynamic? "," env use "," env [] == "," env current [] == "," env current [] "," env current "," in_single > "," in_single "," in_def ","id to_s ","id to_s =~ ","id to_sym ","Sexp  === ","lhs to_sym ","id to_sym  to_s ","lhs to_sym  to_s ","id to_sym  to_s =~ ","lhs to_sym  to_s =~ ","id to_sym  to_sym ","lhs to_sym  to_sym "]}," RubyParserStuff aryset":{"type":"method","name":"aryset","children":[],"call":[" s ","index []= ","index [] == ","index [] "]}," RubyParserStuff args19":{"type":"method","name":"args19","children":[],"call":["result << "," raise ","vals inspect ","val inspect ","lasgn [] ","lasgn [] == ","val [] each ","val [] ","val last ","val first ","vals each "," s "," s  << "]}," RubyParserStuff args":{"type":"method","name":"args","children":[],"call":["result << ","post_arg [] each ","post_arg [] ","block_arg last ","lasgn [] "," raise ","lasgn inspect ","lasgn [] == ","optarg [] each ","optarg [] "," s "]}," RubyParserStuff arg_concat":{"type":"method","name":"arg_concat","children":[],"call":["node1 << "," s compact "," s "," raise "]}," RubyParserStuff arg_blk_pass":{"type":"method","name":"arg_blk_pass","children":[],"call":["node1 << "," s ","(sym :arglist) include? ","node1 first "," s  << "," s  first "]}," RubyParserStuff arg_add":{"type":"method","name":"arg_add","children":[],"call":[" s ","node1 << ","node1 [] == ","node1 [] ","node1 []= "]}," RPStringScanner scan":{"type":"method","name":"scan","children":[],"call":[" p "," caller first "," caller "," old_scan "," caller fir old_scan t "," old_ old_scan can "]}," RPStringScanner getch":{"type":"method","name":"getch","children":[],"call":[" p "," caller first "," caller "," old_getch ","  old_getch aller first ","  old_getch aller "," old_get old_getch h "]}," RPStringScanner unread_many":{"type":"method","name":"unread_many","children":[],"call":[" string []= "," pos "," string ","str count "," extra_lines_added "," warn ","(pair\n  (sym :unread_many)\n  (send\n    (send nil :caller) :[]\n    (int 0))) inspect "," caller [] "," caller ","ENV  [] "]}," RPStringScanner lineno":{"type":"method","name":"lineno","children":[],"call":[" string [] count + - "," extra_lines_added "," string [] count + "," string [] count "," string [] "," pos "," string "]}," RPStringScanner extra_lines_added=":{"type":"method","name":"extra_lines_added=","children":[],"call":[]}," RPStringScanner extra_lines_added":{"type":"method","name":"extra_lines_added","children":[],"call":[]}," RPStringScanner current_line":{"type":"method","name":"current_line","children":[],"call":[" string [] [] split size "," string [] [] split "," string [] [] "," string [] "," pos "," string "]}," Fixnum ord":{"type":"method","name":"ord","children":[],"call":[]}," Ruby19Parser _reduce_none":{"type":"method","name":"_reduce_none","children":[],"call":["val [] "]}," Ruby19Parser _reduce_522":{"type":"method","name":"_reduce_522","children":[],"call":[]}," Ruby19Parser _reduce_521":{"type":"method","name":"_reduce_521","children":[],"call":[]}," Ruby19Parser _reduce_520":{"type":"method","name":"_reduce_520","children":[],"call":[" yyerrok "]}," Ruby19Parser _reduce_517":{"type":"method","name":"_reduce_517","children":[],"call":[" yyerrok "]}," Ruby19Parser _reduce_497":{"type":"method","name":"_reduce_497","children":[],"call":[" s ","val [] ","val [] [] to_sym ","val [] [] "]}," Ruby19Parser _reduce_496":{"type":"method","name":"_reduce_496","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_495":{"type":"method","name":"_reduce_495","children":[],"call":["list push ","more empty? ","val [] [] ","val [] ","val [] dup ","val [] dup  push ","val [] []  empty? "]}," Ruby19Parser _reduce_493":{"type":"method","name":"_reduce_493","children":[],"call":["val [] "," yyerror ","val [] inspect ","size % != ","size % ","val [] size ","val [] size  % != ","val [] size  % ","val [] val [] size  "]}," Ruby19Parser _reduce_492":{"type":"method","name":"_reduce_492","children":[],"call":["val [] "]}," Ruby19Parser _reduce_491":{"type":"method","name":"_reduce_491","children":[],"call":[" s "]}," Ruby19Parser _reduce_490":{"type":"method","name":"_reduce_490","children":[],"call":[" yyerror ","result [] == ","result [] ","val [] ","val []  [] == ","val []  [] "]}," Ruby19Parser _reduce_489":{"type":"method","name":"_reduce_489","children":[],"call":[" lexer lex_state= "," lexer "]}," Ruby19Parser _reduce_487":{"type":"method","name":"_reduce_487","children":[],"call":[]}," Ruby19Parser _reduce_486":{"type":"method","name":"_reduce_486","children":[],"call":["val [] "]}," Ruby19Parser _reduce_485":{"type":"method","name":"_reduce_485","children":[],"call":[" s ","identifier to_sym "," env []= "," env ","val [] to_sym ","val [] ","val [] to_sym  to_sym "]}," Ruby19Parser _reduce_482":{"type":"method","name":"_reduce_482","children":[],"call":[" env []= "," env "]}," Ruby19Parser _reduce_481":{"type":"method","name":"_reduce_481","children":[],"call":[" assignable ","val [] to_sym ","val [] "]}," Ruby19Parser _reduce_478":{"type":"method","name":"_reduce_478","children":[],"call":[" block_append ","val [] "]}," Ruby19Parser _reduce_477":{"type":"method","name":"_reduce_477","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_476":{"type":"method","name":"_reduce_476","children":[],"call":[" assignable ","val [] "]}," Ruby19Parser _reduce_475":{"type":"method","name":"_reduce_475","children":[],"call":["val [] ","val [] << ","val [] to_sym "]}," Ruby19Parser _reduce_474":{"type":"method","name":"_reduce_474","children":[],"call":["result << ","val [] to_sym ","val [] "," s "," s  << "]}," Ruby19Parser _reduce_473":{"type":"method","name":"_reduce_473","children":[],"call":["val [] "," env []= "," env ","val [] to_sym "]}," Ruby19Parser _reduce_472":{"type":"method","name":"_reduce_472","children":[],"call":[" yyerror "]}," Ruby19Parser _reduce_471":{"type":"method","name":"_reduce_471","children":[],"call":[" yyerror "]}," Ruby19Parser _reduce_470":{"type":"method","name":"_reduce_470","children":[],"call":[" yyerror ","val [] "]}," Ruby19Parser _reduce_469":{"type":"method","name":"_reduce_469","children":[],"call":[" args19 "]}," Ruby19Parser _reduce_468":{"type":"method","name":"_reduce_468","children":[],"call":[" args19 "]}," Ruby19Parser _reduce_467":{"type":"method","name":"_reduce_467","children":[],"call":[" args19 "]}," Ruby19Parser _reduce_466":{"type":"method","name":"_reduce_466","children":[],"call":[" args19 "]}," Ruby19Parser _reduce_465":{"type":"method","name":"_reduce_465","children":[],"call":[" args19 "]}," Ruby19Parser _reduce_464":{"type":"method","name":"_reduce_464","children":[],"call":[" args19 "]}," Ruby19Parser _reduce_463":{"type":"method","name":"_reduce_463","children":[],"call":[" args19 "]}," Ruby19Parser _reduce_462":{"type":"method","name":"_reduce_462","children":[],"call":[" args19 "]}," Ruby19Parser _reduce_461":{"type":"method","name":"_reduce_461","children":[],"call":[" args19 "]}," Ruby19Parser _reduce_460":{"type":"method","name":"_reduce_460","children":[],"call":[" args19 "]}," Ruby19Parser _reduce_459":{"type":"method","name":"_reduce_459","children":[],"call":[" args19 "]}," Ruby19Parser _reduce_458":{"type":"method","name":"_reduce_458","children":[],"call":[" args19 "]}," Ruby19Parser _reduce_457":{"type":"method","name":"_reduce_457","children":[],"call":[" args19 "]}," Ruby19Parser _reduce_456":{"type":"method","name":"_reduce_456","children":[],"call":[" args19 "]}," Ruby19Parser _reduce_455":{"type":"method","name":"_reduce_455","children":[],"call":[" args19 "]}," Ruby19Parser _reduce_454":{"type":"method","name":"_reduce_454","children":[],"call":[" args19 "]}," Ruby19Parser _reduce_453":{"type":"method","name":"_reduce_453","children":[],"call":["val [] "]}," Ruby19Parser _reduce_452":{"type":"method","name":"_reduce_452","children":[],"call":[" lexer command_start= "," lexer "," lexer lex_state= ","val [] "]}," Ruby19Parser _reduce_451":{"type":"method","name":"_reduce_451","children":[],"call":[" yyerrok "]}," Ruby19Parser _reduce_450":{"type":"method","name":"_reduce_450","children":[],"call":["val [] "]}," Ruby19Parser _reduce_449":{"type":"method","name":"_reduce_449","children":[],"call":[" lexer lex_state= "," lexer "]}," Ruby19Parser _reduce_448":{"type":"method","name":"_reduce_448","children":[],"call":[]}," Ruby19Parser _reduce_447":{"type":"method","name":"_reduce_447","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_446":{"type":"method","name":"_reduce_446","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_445":{"type":"method","name":"_reduce_445","children":[],"call":[" assignable ","val [] "]}," Ruby19Parser _reduce_444":{"type":"method","name":"_reduce_444","children":[],"call":[" gettable ","Sexp  === ","val [] "]}," Ruby19Parser _reduce_443":{"type":"method","name":"_reduce_443","children":[],"call":[" s "," lexer src current_line "," lexer src "," lexer "]}," Ruby19Parser _reduce_442":{"type":"method","name":"_reduce_442","children":[],"call":[" s "," file "]}," Ruby19Parser _reduce_441":{"type":"method","name":"_reduce_441","children":[],"call":[" s "]}," Ruby19Parser _reduce_440":{"type":"method","name":"_reduce_440","children":[],"call":[" s "]}," Ruby19Parser _reduce_439":{"type":"method","name":"_reduce_439","children":[],"call":[" s "]}," Ruby19Parser _reduce_438":{"type":"method","name":"_reduce_438","children":[],"call":[" s "]}," Ruby19Parser _reduce_432":{"type":"method","name":"_reduce_432","children":[],"call":["val [] -@ ","val [] "]}," Ruby19Parser _reduce_431":{"type":"method","name":"_reduce_431","children":[],"call":["val [] -@ ","val [] "]}," Ruby19Parser _reduce_428":{"type":"method","name":"_reduce_428","children":[],"call":[" s ","result last intern ","result last ","result []= ","result [] "," yyerror ","result empty? ","result nil? ","val [] "," lexer lex_state= "," lexer "," s  last intern ","val []  last intern "," s  last ","val []  last "," s  []= ","val []  []= "," s  [] ","val []  [] "," s  empty? ","val []  empty? "," s  nil? ","val []  nil? "]}," Ruby19Parser _reduce_423":{"type":"method","name":"_reduce_423","children":[],"call":["val [] to_sym ","val [] "]}," Ruby19Parser _reduce_422":{"type":"method","name":"_reduce_422","children":[],"call":["val [] to_sym ","val [] "," lexer lex_state= "," lexer "]}," Ruby19Parser _reduce_420":{"type":"method","name":"_reduce_420","children":[],"call":[" s ","val [] to_sym ","val [] "]}," Ruby19Parser _reduce_419":{"type":"method","name":"_reduce_419","children":[],"call":[" s ","val [] to_sym ","val [] "]}," Ruby19Parser _reduce_418":{"type":"method","name":"_reduce_418","children":[],"call":[" s ","val [] to_sym ","val [] "]}," Ruby19Parser _reduce_417":{"type":"method","name":"_reduce_417","children":[],"call":[" raise ","val [] inspect ","val [] "," s ","val [] [] "," lexer cmdarg lexpop "," lexer cmdarg "," lexer "," lexer cond lexpop "," lexer cond "," lexer lex_strterm= "]}," Ruby19Parser _reduce_416":{"type":"method","name":"_reduce_416","children":[],"call":[" lexer cmdarg push "," lexer cmdarg "," lexer "," lexer cond push "," lexer cond "," lexer lex_state= "," lexer lex_strterm= "," lexer lex_strterm "]}," Ruby19Parser _reduce_415":{"type":"method","name":"_reduce_415","children":[],"call":[" s ","val [] "," lexer lex_strterm= "," lexer "]}," Ruby19Parser _reduce_414":{"type":"method","name":"_reduce_414","children":[],"call":[" lexer lex_state= "," lexer "," lexer lex_strterm= "," lexer lex_strterm "]}," Ruby19Parser _reduce_413":{"type":"method","name":"_reduce_413","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_412":{"type":"method","name":"_reduce_412","children":[],"call":[" literal_concat ","val [] "]}," Ruby19Parser _reduce_411":{"type":"method","name":"_reduce_411","children":[],"call":[]}," Ruby19Parser _reduce_410":{"type":"method","name":"_reduce_410","children":[],"call":[" literal_concat ","val [] "]}," Ruby19Parser _reduce_409":{"type":"method","name":"_reduce_409","children":[],"call":[" s "]}," Ruby19Parser _reduce_408":{"type":"method","name":"_reduce_408","children":[],"call":["val [] << "," s ","val [] "]}," Ruby19Parser _reduce_407":{"type":"method","name":"_reduce_407","children":[],"call":[" s "]}," Ruby19Parser _reduce_406":{"type":"method","name":"_reduce_406","children":[],"call":["val [] "]}," Ruby19Parser _reduce_405":{"type":"method","name":"_reduce_405","children":[],"call":[" s "]}," Ruby19Parser _reduce_404":{"type":"method","name":"_reduce_404","children":[],"call":[" literal_concat ","val [] "]}," Ruby19Parser _reduce_402":{"type":"method","name":"_reduce_402","children":[],"call":["val [] << ","val [] "," s ","val [] [] == ","val [] [] "]}," Ruby19Parser _reduce_401":{"type":"method","name":"_reduce_401","children":[],"call":[" s "]}," Ruby19Parser _reduce_400":{"type":"method","name":"_reduce_400","children":[],"call":["val [] "]}," Ruby19Parser _reduce_399":{"type":"method","name":"_reduce_399","children":[],"call":[" s "]}," Ruby19Parser _reduce_398":{"type":"method","name":"_reduce_398","children":[],"call":[" new_regexp "]}," Ruby19Parser _reduce_397":{"type":"method","name":"_reduce_397","children":[],"call":[" new_xstring ","val [] "]}," Ruby19Parser _reduce_396":{"type":"method","name":"_reduce_396","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_395":{"type":"method","name":"_reduce_395","children":[],"call":["val [] "]}," Ruby19Parser _reduce_394":{"type":"method","name":"_reduce_394","children":[],"call":[" literal_concat ","val [] "]}," Ruby19Parser _reduce_392":{"type":"method","name":"_reduce_392","children":[],"call":["val [] ","val []= "," s ","val [] value ","val [] [] == ","val [] [] "]}," Ruby19Parser _reduce_390":{"type":"method","name":"_reduce_390","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_389":{"type":"method","name":"_reduce_389","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_387":{"type":"method","name":"_reduce_387","children":[],"call":[" s ","val [] ","val [] != "]}," Ruby19Parser _reduce_385":{"type":"method","name":"_reduce_385","children":[],"call":["val [] "]}," Ruby19Parser _reduce_382":{"type":"method","name":"_reduce_382","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_381":{"type":"method","name":"_reduce_381","children":[],"call":[]}," Ruby19Parser _reduce_380":{"type":"method","name":"_reduce_380","children":[],"call":["result << "," s ","klasses << "," node_assign ","val [] "," s  << "]}," Ruby19Parser _reduce_377":{"type":"method","name":"_reduce_377","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_376":{"type":"method","name":"_reduce_376","children":[],"call":[" list_append "," s ","val [] "]}," Ruby19Parser _reduce_374":{"type":"method","name":"_reduce_374","children":[],"call":["result << ","val [] ","result line= "," s "," s  << "," s  line= "]}," Ruby19Parser _reduce_373":{"type":"method","name":"_reduce_373","children":[],"call":[" lexer lineno "," lexer "]}," Ruby19Parser _reduce_372":{"type":"method","name":"_reduce_372","children":[],"call":["result line= ","val [] "," env unextend "," env "," new_iter "," new_iter  line= "]}," Ruby19Parser _reduce_371":{"type":"method","name":"_reduce_371","children":[],"call":[" env dynamic keys "," env dynamic "," env "]}," Ruby19Parser _reduce_370":{"type":"method","name":"_reduce_370","children":[],"call":[" lexer lineno "," lexer "," env extend "," env "]}," Ruby19Parser _reduce_369":{"type":"method","name":"_reduce_369","children":[],"call":["result line= ","val [] "," env unextend "," env "," new_iter "," new_iter  line= "]}," Ruby19Parser _reduce_368":{"type":"method","name":"_reduce_368","children":[],"call":[" env dynamic keys "," env dynamic "," env "]}," Ruby19Parser _reduce_367":{"type":"method","name":"_reduce_367","children":[],"call":[" lexer lineno "," lexer "," env extend "," env "]}," Ruby19Parser _reduce_366":{"type":"method","name":"_reduce_366","children":[],"call":["val [] "]}," Ruby19Parser _reduce_365":{"type":"method","name":"_reduce_365","children":[],"call":["val [] "]}," Ruby19Parser _reduce_364":{"type":"method","name":"_reduce_364","children":[],"call":["val [] "]}," Ruby19Parser _reduce_363":{"type":"method","name":"_reduce_363","children":[],"call":["val [] "]}," Ruby19Parser _reduce_362":{"type":"method","name":"_reduce_362","children":[],"call":[" s ","val [] ","val [] [] map ","val [] [] ","val [] size "]}," Ruby19Parser _reduce_361":{"type":"method","name":"_reduce_361","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_360":{"type":"method","name":"_reduce_360","children":[],"call":[" s "]}," Ruby19Parser _reduce_359":{"type":"method","name":"_reduce_359","children":[],"call":[" new_super ","val [] "]}," Ruby19Parser _reduce_358":{"type":"method","name":"_reduce_358","children":[],"call":[" new_call ","val [] to_sym ","val [] "]}," Ruby19Parser _reduce_357":{"type":"method","name":"_reduce_357","children":[],"call":[" new_call ","val [] ","val [] to_sym "]}," Ruby19Parser _reduce_356":{"type":"method","name":"_reduce_356","children":[],"call":[" new_call ","val [] ","val [] to_sym "]}," Ruby19Parser _reduce_355":{"type":"method","name":"_reduce_355","children":[],"call":[" new_call ","val [] ","val [] to_sym "]}," Ruby19Parser _reduce_354":{"type":"method","name":"_reduce_354","children":[],"call":[" lexer lineno "," lexer "]}," Ruby19Parser _reduce_353":{"type":"method","name":"_reduce_353","children":[],"call":[" new_call ","val [] "]}," Ruby19Parser _reduce_352":{"type":"method","name":"_reduce_352","children":[],"call":[" new_call ","val [] "]}," Ruby19Parser _reduce_351":{"type":"method","name":"_reduce_351","children":[],"call":["result insert ","val [] "," raise ","val [] [] == ","val [] [] ","val []  insert "]}," Ruby19Parser _reduce_350":{"type":"method","name":"_reduce_350","children":[],"call":[" env unextend "," env ","result line= ","val [] "," new_iter "," new_iter  line= "]}," Ruby19Parser _reduce_349":{"type":"method","name":"_reduce_349","children":[],"call":[" env dynamic keys "," env dynamic "," env "]}," Ruby19Parser _reduce_348":{"type":"method","name":"_reduce_348","children":[],"call":[" lexer lineno "," lexer "," env extend "," env "]}," Ruby19Parser _reduce_347":{"type":"method","name":"_reduce_347","children":[],"call":[" lexer command_start= "," lexer ","val [] "]}," Ruby19Parser _reduce_346":{"type":"method","name":"_reduce_346","children":[],"call":[" lexer command_start= "," lexer "]}," Ruby19Parser _reduce_345":{"type":"method","name":"_reduce_345","children":[],"call":[" lexer command_start= "," lexer "]}," Ruby19Parser _reduce_343":{"type":"method","name":"_reduce_343","children":[],"call":["val [] delete_at ","val [] ","val [] [] nil? ","val [] [] "]}," Ruby19Parser _reduce_341":{"type":"method","name":"_reduce_341","children":[],"call":["val [] "]}," Ruby19Parser _reduce_339":{"type":"method","name":"_reduce_339","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_330":{"type":"method","name":"_reduce_330","children":[],"call":[" value_expr ","val [] "]}," Ruby19Parser _reduce_329":{"type":"method","name":"_reduce_329","children":[],"call":[" s "]}," Ruby19Parser _reduce_328":{"type":"method","name":"_reduce_328","children":[],"call":[" s "]}," Ruby19Parser _reduce_327":{"type":"method","name":"_reduce_327","children":[],"call":[" s "]}," Ruby19Parser _reduce_326":{"type":"method","name":"_reduce_326","children":[],"call":[" s "]}," Ruby19Parser _reduce_325":{"type":"method","name":"_reduce_325","children":[],"call":[" in_single "," env unextend "," env "," new_defs "]}," Ruby19Parser _reduce_324":{"type":"method","name":"_reduce_324","children":[],"call":[" lexer lex_state= "," lexer "," env extend "," env "," in_single "]}," Ruby19Parser _reduce_323":{"type":"method","name":"_reduce_323","children":[],"call":[" lexer lex_state= "," lexer "," comments push "," lexer comments "," comments "]}," Ruby19Parser _reduce_322":{"type":"method","name":"_reduce_322","children":[],"call":[" in_def= "," env unextend "," env "," new_defn "]}," Ruby19Parser _reduce_321":{"type":"method","name":"_reduce_321","children":[],"call":[" lexer src beginning_of_line? "," lexer src "," lexer "," lexer lineno "," env extend "," env "," in_def= "," comments push "," lexer comments "," comments "]}," Ruby19Parser _reduce_320":{"type":"method","name":"_reduce_320","children":[],"call":[" env unextend "," env "," new_module "]}," Ruby19Parser _reduce_319":{"type":"method","name":"_reduce_319","children":[],"call":[" env extend "," env "," yyerror "," in_single > "," in_single "," in_def "," comments push "," lexer comments "," lexer "," comments "]}," Ruby19Parser _reduce_318":{"type":"method","name":"_reduce_318","children":[],"call":[" lexer lineno "," lexer "]}," Ruby19Parser _reduce_317":{"type":"method","name":"_reduce_317","children":[],"call":[" env unextend "," env "," new_sclass "]}," Ruby19Parser _reduce_316":{"type":"method","name":"_reduce_316","children":[],"call":[" env extend "," env "," in_single= "," in_single "]}," Ruby19Parser _reduce_315":{"type":"method","name":"_reduce_315","children":[],"call":[" in_def= "," in_def "]}," Ruby19Parser _reduce_314":{"type":"method","name":"_reduce_314","children":[],"call":[" lexer lineno "," lexer "]}," Ruby19Parser _reduce_313":{"type":"method","name":"_reduce_313","children":[],"call":[" env unextend "," env "," new_class "]}," Ruby19Parser _reduce_312":{"type":"method","name":"_reduce_312","children":[],"call":[" env extend "," env "," yyerror "," in_single > "," in_single "," in_def "," comments push "," lexer comments "," lexer "," comments "]}," Ruby19Parser _reduce_311":{"type":"method","name":"_reduce_311","children":[],"call":[" lexer lineno "," lexer "]}," Ruby19Parser _reduce_310":{"type":"method","name":"_reduce_310","children":[],"call":[" new_for ","val [] "]}," Ruby19Parser _reduce_309":{"type":"method","name":"_reduce_309","children":[],"call":[" lexer cond pop "," lexer cond "," lexer "]}," Ruby19Parser _reduce_308":{"type":"method","name":"_reduce_308","children":[],"call":[" lexer cond push "," lexer cond "," lexer "]}," Ruby19Parser _reduce_307":{"type":"method","name":"_reduce_307","children":[],"call":[" new_case ","val [] "]}," Ruby19Parser _reduce_306":{"type":"method","name":"_reduce_306","children":[],"call":[" new_case ","val [] "]}," Ruby19Parser _reduce_305":{"type":"method","name":"_reduce_305","children":[],"call":[" new_case ","val [] "]}," Ruby19Parser _reduce_304":{"type":"method","name":"_reduce_304","children":[],"call":[" new_until ","val [] "]}," Ruby19Parser _reduce_303":{"type":"method","name":"_reduce_303","children":[],"call":[" lexer cond pop "," lexer cond "," lexer "]}," Ruby19Parser _reduce_302":{"type":"method","name":"_reduce_302","children":[],"call":[" lexer cond push "," lexer cond "," lexer "]}," Ruby19Parser _reduce_301":{"type":"method","name":"_reduce_301","children":[],"call":[" new_while ","val [] "]}," Ruby19Parser _reduce_300":{"type":"method","name":"_reduce_300","children":[],"call":[" lexer cond pop "," lexer cond "," lexer "]}," Ruby19Parser _reduce_299":{"type":"method","name":"_reduce_299","children":[],"call":[" lexer cond push "," lexer cond "," lexer "]}," Ruby19Parser _reduce_298":{"type":"method","name":"_reduce_298","children":[],"call":[" new_if ","val [] "]}," Ruby19Parser _reduce_297":{"type":"method","name":"_reduce_297","children":[],"call":[" new_if ","val [] "]}," Ruby19Parser _reduce_296":{"type":"method","name":"_reduce_296","children":[],"call":["val [] "]}," Ruby19Parser _reduce_295":{"type":"method","name":"_reduce_295","children":[],"call":["iter insert ","val [] "]}," Ruby19Parser _reduce_293":{"type":"method","name":"_reduce_293","children":[],"call":["call line= ","iter line ","iter insert "," new_call ","oper to_sym ","val [] "," new_call  line= "," new_ new_call  "]}," Ruby19Parser _reduce_292":{"type":"method","name":"_reduce_292","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_291":{"type":"method","name":"_reduce_291","children":[],"call":[" new_yield "]}," Ruby19Parser _reduce_290":{"type":"method","name":"_reduce_290","children":[],"call":[" new_yield "]}," Ruby19Parser _reduce_289":{"type":"method","name":"_reduce_289","children":[],"call":[" new_yield ","val [] "]}," Ruby19Parser _reduce_288":{"type":"method","name":"_reduce_288","children":[],"call":[" s "]}," Ruby19Parser _reduce_287":{"type":"method","name":"_reduce_287","children":[],"call":[" s ","val [] values ","val [] "]}," Ruby19Parser _reduce_286":{"type":"method","name":"_reduce_286","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_285":{"type":"method","name":"_reduce_285","children":[],"call":[" new_aref "]}," Ruby19Parser _reduce_284":{"type":"method","name":"_reduce_284","children":[],"call":[" s ","val [] to_sym ","val [] "]}," Ruby19Parser _reduce_283":{"type":"method","name":"_reduce_283","children":[],"call":[" s ","val [] to_sym ","val [] "]}," Ruby19Parser _reduce_282":{"type":"method","name":"_reduce_282","children":[],"call":["result paren= "," s ","val [] "]}," Ruby19Parser _reduce_281":{"type":"method","name":"_reduce_281","children":[],"call":["val [] "," warning "]}," Ruby19Parser _reduce_280":{"type":"method","name":"_reduce_280","children":[],"call":[" lexer lex_state= "," lexer "]}," Ruby19Parser _reduce_279":{"type":"method","name":"_reduce_279","children":[],"call":["result line= ","val [] "," s "," s  line= "]}," Ruby19Parser _reduce_278":{"type":"method","name":"_reduce_278","children":[],"call":[" lexer lineno "," lexer "]}," Ruby19Parser _reduce_277":{"type":"method","name":"_reduce_277","children":[],"call":[" new_call ","val [] to_sym ","val [] "]}," Ruby19Parser _reduce_268":{"type":"method","name":"_reduce_268","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_267":{"type":"method","name":"_reduce_267","children":[],"call":[" arg_concat ","val [] "]}," Ruby19Parser _reduce_266":{"type":"method","name":"_reduce_266","children":[],"call":["val [] << ","val [] "]}," Ruby19Parser _reduce_265":{"type":"method","name":"_reduce_265","children":[],"call":[" list_append ","val [] "]}," Ruby19Parser _reduce_264":{"type":"method","name":"_reduce_264","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_262":{"type":"method","name":"_reduce_262","children":[],"call":["val [] "]}," Ruby19Parser _reduce_261":{"type":"method","name":"_reduce_261","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_260":{"type":"method","name":"_reduce_260","children":[],"call":["val [] "," warning "]}," Ruby19Parser _reduce_259":{"type":"method","name":"_reduce_259","children":[],"call":[" lexer lex_state= "," lexer "]}," Ruby19Parser _reduce_258":{"type":"method","name":"_reduce_258","children":[],"call":[" warning "]}," Ruby19Parser _reduce_257":{"type":"method","name":"_reduce_257","children":[],"call":[" lexer lex_state= "," lexer "]}," Ruby19Parser _reduce_255":{"type":"method","name":"_reduce_255","children":[],"call":["val [] "," lexer cmdarg stack replace "," lexer cmdarg stack "," lexer cmdarg "," lexer "]}," Ruby19Parser _reduce_254":{"type":"method","name":"_reduce_254","children":[],"call":[" lexer cmdarg push "," lexer cmdarg "," lexer "," lexer cmdarg stack dup "," lexer cmdarg stack "]}," Ruby19Parser _reduce_252":{"type":"method","name":"_reduce_252","children":[],"call":[" arg_blk_pass ","val [] "," s "]}," Ruby19Parser _reduce_251":{"type":"method","name":"_reduce_251","children":[],"call":[" arg_blk_pass ","val [] "," arg_concat "," s add_all add "," s ","val [] values "," s add_all "]}," Ruby19Parser _reduce_250":{"type":"method","name":"_reduce_250","children":[],"call":[" arg_blk_pass ","val [] "," arg_concat "," s add "," s ","val [] values "]}," Ruby19Parser _reduce_249":{"type":"method","name":"_reduce_249","children":[],"call":[" arg_blk_pass ","val [] "," s add_all add "," s ","val [] values "," s add_all "]}," Ruby19Parser _reduce_248":{"type":"method","name":"_reduce_248","children":[],"call":[" arg_blk_pass ","val [] "," s ","val [] values "]}," Ruby19Parser _reduce_247":{"type":"method","name":"_reduce_247","children":[],"call":[" arg_blk_pass ","val [] "," s ","val [] values "]}," Ruby19Parser _reduce_246":{"type":"method","name":"_reduce_246","children":[],"call":[" arg_blk_pass ","val [] "," s ","val [] values "]}," Ruby19Parser _reduce_245":{"type":"method","name":"_reduce_245","children":[],"call":[" arg_blk_pass ","val [] "," arg_concat "," s ","val [] values "]}," Ruby19Parser _reduce_244":{"type":"method","name":"_reduce_244","children":[],"call":[" arg_blk_pass ","val [] "," arg_concat "," s "]}," Ruby19Parser _reduce_243":{"type":"method","name":"_reduce_243","children":[],"call":[" arg_blk_pass ","val [] "]}," Ruby19Parser _reduce_242":{"type":"method","name":"_reduce_242","children":[],"call":[" arg_blk_pass ","val [] "," list_prepend "]}," Ruby19Parser _reduce_240":{"type":"method","name":"_reduce_240","children":[],"call":[" arg_blk_pass ","val [] "," s "]}," Ruby19Parser _reduce_239":{"type":"method","name":"_reduce_239","children":[],"call":[" arg_blk_pass ","val [] "," arg_concat ","val [] << "," s ","val [] values "]}," Ruby19Parser _reduce_238":{"type":"method","name":"_reduce_238","children":[],"call":[" arg_blk_pass ","val [] ","val [] << "," s ","val [] values "]}," Ruby19Parser _reduce_237":{"type":"method","name":"_reduce_237","children":[],"call":[" arg_blk_pass ","val [] "," arg_concat "," s ","val [] values "]}," Ruby19Parser _reduce_236":{"type":"method","name":"_reduce_236","children":[],"call":[" arg_blk_pass ","val [] "," s ","val [] values "]}," Ruby19Parser _reduce_235":{"type":"method","name":"_reduce_235","children":[],"call":[" arg_blk_pass ","val [] ","result << ","val [] [] each ","val [] [] "," arg_concat "," arg_blk_pass  << "," arg_concat  << "]}," Ruby19Parser _reduce_234":{"type":"method","name":"_reduce_234","children":[],"call":[" arg_blk_pass ","val [] "," arg_concat "]}," Ruby19Parser _reduce_233":{"type":"method","name":"_reduce_233","children":[],"call":[" arg_blk_pass ","val [] "]}," Ruby19Parser _reduce_232":{"type":"method","name":"_reduce_232","children":[],"call":[" s ","val [] "," warning "]}," Ruby19Parser _reduce_229":{"type":"method","name":"_reduce_229","children":[],"call":["val [] add ","val [] "," warning "]}," Ruby19Parser _reduce_228":{"type":"method","name":"_reduce_228","children":[],"call":[" s ","val [] "," warning "]}," Ruby19Parser _reduce_227":{"type":"method","name":"_reduce_227","children":[],"call":["val [] "]}," Ruby19Parser _reduce_226":{"type":"method","name":"_reduce_226","children":[],"call":["val [] "]}," Ruby19Parser _reduce_225":{"type":"method","name":"_reduce_225","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_224":{"type":"method","name":"_reduce_224","children":[],"call":[" s ","val [] values ","val [] "]}," Ruby19Parser _reduce_223":{"type":"method","name":"_reduce_223","children":[],"call":[" arg_concat ","val [] "]}," Ruby19Parser _reduce_222":{"type":"method","name":"_reduce_222","children":[],"call":["val [] "]}," Ruby19Parser _reduce_221":{"type":"method","name":"_reduce_221","children":[],"call":[" s ","val [] "," warning "]}," Ruby19Parser _reduce_219":{"type":"method","name":"_reduce_219","children":[],"call":[" value_expr ","val [] "]}," Ruby19Parser _reduce_217":{"type":"method","name":"_reduce_217","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_216":{"type":"method","name":"_reduce_216","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_215":{"type":"method","name":"_reduce_215","children":[],"call":[" logop ","val [] "]}," Ruby19Parser _reduce_214":{"type":"method","name":"_reduce_214","children":[],"call":[" logop ","val [] "]}," Ruby19Parser _reduce_213":{"type":"method","name":"_reduce_213","children":[],"call":[" new_call "," s ","val [] ","val []= "," value_expr "]}," Ruby19Parser _reduce_212":{"type":"method","name":"_reduce_212","children":[],"call":[" new_call "," s ","val [] ","val []= "," value_expr "]}," Ruby19Parser _reduce_211":{"type":"method","name":"_reduce_211","children":[],"call":[" new_call "," s ","val [] ","val []= "," value_expr "]}," Ruby19Parser _reduce_210":{"type":"method","name":"_reduce_210","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_209":{"type":"method","name":"_reduce_209","children":[],"call":[" s "," get_match_node ","val [] "]}," Ruby19Parser _reduce_208":{"type":"method","name":"_reduce_208","children":[],"call":[" get_match_node ","val [] "]}," Ruby19Parser _reduce_207":{"type":"method","name":"_reduce_207","children":[],"call":[" new_call "," s ","val [] "]}," Ruby19Parser _reduce_206":{"type":"method","name":"_reduce_206","children":[],"call":[" new_call "," s ","val [] "]}," Ruby19Parser _reduce_205":{"type":"method","name":"_reduce_205","children":[],"call":[" new_call "," s ","val [] "]}," Ruby19Parser _reduce_204":{"type":"method","name":"_reduce_204","children":[],"call":[" new_call "," s ","val [] "]}," Ruby19Parser _reduce_203":{"type":"method","name":"_reduce_203","children":[],"call":[" new_call "," s ","val [] "]}," Ruby19Parser _reduce_202":{"type":"method","name":"_reduce_202","children":[],"call":[" new_call "," s ","val [] "]}," Ruby19Parser _reduce_201":{"type":"method","name":"_reduce_201","children":[],"call":[" new_call "," s ","val [] "]}," Ruby19Parser _reduce_200":{"type":"method","name":"_reduce_200","children":[],"call":[" new_call "," s ","val [] "]}," Ruby19Parser _reduce_199":{"type":"method","name":"_reduce_199","children":[],"call":[" new_call "," s ","val [] "]}," Ruby19Parser _reduce_198":{"type":"method","name":"_reduce_198","children":[],"call":[" new_call "," s ","val [] "]}," Ruby19Parser _reduce_197":{"type":"method","name":"_reduce_197","children":[],"call":[" new_call "," s ","val [] "]}," Ruby19Parser _reduce_196":{"type":"method","name":"_reduce_196","children":[],"call":[" new_call "," s ","val [] "]}," Ruby19Parser _reduce_195":{"type":"method","name":"_reduce_195","children":[],"call":[" new_call "," s ","val [] ","val [] [] == ","val [] [] "]}," Ruby19Parser _reduce_194":{"type":"method","name":"_reduce_194","children":[],"call":[" new_call "," s ","val [] "]}," Ruby19Parser _reduce_193":{"type":"method","name":"_reduce_193","children":[],"call":[" new_call "," s ","val [] "]}," Ruby19Parser _reduce_192":{"type":"method","name":"_reduce_192","children":[],"call":[" new_call "," s ","val [] "]}," Ruby19Parser _reduce_191":{"type":"method","name":"_reduce_191","children":[],"call":[" new_call "," s ","val [] "]}," Ruby19Parser _reduce_190":{"type":"method","name":"_reduce_190","children":[],"call":[" new_call "," s ","val [] "]}," Ruby19Parser _reduce_189":{"type":"method","name":"_reduce_189","children":[],"call":[" new_call "," s ","val [] "]}," Ruby19Parser _reduce_188":{"type":"method","name":"_reduce_188","children":[],"call":[" new_call "," s ","val [] "]}," Ruby19Parser _reduce_187":{"type":"method","name":"_reduce_187","children":[],"call":[" new_call "," s ","val [] "]}," Ruby19Parser _reduce_186":{"type":"method","name":"_reduce_186","children":[],"call":[" s ","v2 last ","v1 last ","Fixnum  === ","v2 node_type == ","v2 node_type ","v1 node_type == ","v1 node_type ","val [] "]}," Ruby19Parser _reduce_185":{"type":"method","name":"_reduce_185","children":[],"call":[" s ","v2 last ","v1 last ","Fixnum  === ","v2 node_type == ","v2 node_type ","v1 node_type == ","v1 node_type ","val [] "]}," Ruby19Parser _reduce_184":{"type":"method","name":"_reduce_184","children":[],"call":[" backref_assign_error ","val [] "]}," Ruby19Parser _reduce_183":{"type":"method","name":"_reduce_183","children":[],"call":[" yyerror "]}," Ruby19Parser _reduce_182":{"type":"method","name":"_reduce_182","children":[],"call":[" yyerror "]}," Ruby19Parser _reduce_181":{"type":"method","name":"_reduce_181","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_180":{"type":"method","name":"_reduce_180","children":[],"call":[" s ","val [] ","val [] to_sym "]}," Ruby19Parser _reduce_179":{"type":"method","name":"_reduce_179","children":[],"call":[" s ","val [] ","val [] to_sym "]}," Ruby19Parser _reduce_178":{"type":"method","name":"_reduce_178","children":[],"call":["val [] []= ","val [] "," s ","val [] to_sym "]}," Ruby19Parser _reduce_177":{"type":"method","name":"_reduce_177","children":[],"call":[" new_op_asgn "]}," Ruby19Parser _reduce_176":{"type":"method","name":"_reduce_176","children":[],"call":[" node_assign "," s ","val [] "]}," Ruby19Parser _reduce_175":{"type":"method","name":"_reduce_175","children":[],"call":[" node_assign ","val [] "]}," Ruby19Parser _reduce_107":{"type":"method","name":"_reduce_107","children":[],"call":[" new_undef ","val [] "]}," Ruby19Parser _reduce_106":{"type":"method","name":"_reduce_106","children":[],"call":[" lexer lex_state= "," lexer "]}," Ruby19Parser _reduce_105":{"type":"method","name":"_reduce_105","children":[],"call":[" new_undef ","val [] "]}," Ruby19Parser _reduce_103":{"type":"method","name":"_reduce_103","children":[],"call":[" s ","val [] to_sym ","val [] "]}," Ruby19Parser _reduce_100":{"type":"method","name":"_reduce_100","children":[],"call":["val [] "," lexer lex_state= "," lexer "]}," Ruby19Parser _reduce_99":{"type":"method","name":"_reduce_99","children":[],"call":["val [] "," lexer lex_state= "," lexer "]}," Ruby19Parser _reduce_95":{"type":"method","name":"_reduce_95","children":[],"call":[" s ","val [] to_sym ","val [] "]}," Ruby19Parser _reduce_94":{"type":"method","name":"_reduce_94","children":[],"call":["val [] to_sym ","val [] "]}," Ruby19Parser _reduce_93":{"type":"method","name":"_reduce_93","children":[],"call":[" s ","val [] to_sym ","val [] "]}," Ruby19Parser _reduce_91":{"type":"method","name":"_reduce_91","children":[],"call":[" yyerror "]}," Ruby19Parser _reduce_90":{"type":"method","name":"_reduce_90","children":[],"call":[" backref_assign_error ","val [] "]}," Ruby19Parser _reduce_89":{"type":"method","name":"_reduce_89","children":[],"call":[" s ","val [] to_sym ","val [] "," yyerror "," in_single > "," in_single "," in_def "]}," Ruby19Parser _reduce_88":{"type":"method","name":"_reduce_88","children":[],"call":[" s ","val [] to_sym ","val [] "," yyerror "," in_single > "," in_single "," in_def "]}," Ruby19Parser _reduce_87":{"type":"method","name":"_reduce_87","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_86":{"type":"method","name":"_reduce_86","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_85":{"type":"method","name":"_reduce_85","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_84":{"type":"method","name":"_reduce_84","children":[],"call":[" aryset ","val [] "]}," Ruby19Parser _reduce_83":{"type":"method","name":"_reduce_83","children":[],"call":[" assignable ","val [] "]}," Ruby19Parser _reduce_82":{"type":"method","name":"_reduce_82","children":[],"call":[" backref_assign_error ","val [] "]}," Ruby19Parser _reduce_81":{"type":"method","name":"_reduce_81","children":[],"call":[" s ","val [] to_sym ","val [] "," yyerror "," in_single > "," in_single "," in_def "]}," Ruby19Parser _reduce_80":{"type":"method","name":"_reduce_80","children":[],"call":[" s ","val [] to_sym ","val [] "," yyerror "," in_single > "," in_single "," in_def "]}," Ruby19Parser _reduce_79":{"type":"method","name":"_reduce_79","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_78":{"type":"method","name":"_reduce_78","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_77":{"type":"method","name":"_reduce_77","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_76":{"type":"method","name":"_reduce_76","children":[],"call":[" aryset ","val [] "]}," Ruby19Parser _reduce_75":{"type":"method","name":"_reduce_75","children":[],"call":[" assignable ","val [] "]}," Ruby19Parser _reduce_74":{"type":"method","name":"_reduce_74","children":[],"call":["val [] << ","val [] compact ","val [] "]}," Ruby19Parser _reduce_73":{"type":"method","name":"_reduce_73","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_72":{"type":"method","name":"_reduce_72","children":[],"call":["val [] "]}," Ruby19Parser _reduce_70":{"type":"method","name":"_reduce_70","children":[],"call":[" s "]}," Ruby19Parser _reduce_69":{"type":"method","name":"_reduce_69","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_68":{"type":"method","name":"_reduce_68","children":[],"call":[" s ","val [] << ","val [] "]}," Ruby19Parser _reduce_67":{"type":"method","name":"_reduce_67","children":[],"call":[" s ","val [] << ","val [] "]}," Ruby19Parser _reduce_66":{"type":"method","name":"_reduce_66","children":[],"call":[" s ","val [] << ","val [] compact ","val [] "]}," Ruby19Parser _reduce_65":{"type":"method","name":"_reduce_65","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_64":{"type":"method","name":"_reduce_64","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_62":{"type":"method","name":"_reduce_62","children":[],"call":["val [] "]}," Ruby19Parser _reduce_60":{"type":"method","name":"_reduce_60","children":[],"call":[" new_yield ","val [] "]}," Ruby19Parser _reduce_59":{"type":"method","name":"_reduce_59","children":[],"call":[" new_super ","val [] "]}," Ruby19Parser _reduce_58":{"type":"method","name":"_reduce_58","children":[],"call":["val [] ","val [] << "," raise ","result [] == ","result [] "," new_call ","val [] to_sym ","val []  [] == "," new_call  [] == ","val []  [] "," new_call  [] "]}," Ruby19Parser _reduce_57":{"type":"method","name":"_reduce_57","children":[],"call":[" new_call ","val [] ","val [] to_sym "]}," Ruby19Parser _reduce_56":{"type":"method","name":"_reduce_56","children":[],"call":[" new_call ","val [] ","val [] to_sym "]}," Ruby19Parser _reduce_55":{"type":"method","name":"_reduce_55","children":[],"call":[" new_call ","val [] ","val [] to_sym "]}," Ruby19Parser _reduce_54":{"type":"method","name":"_reduce_54","children":[],"call":["result insert ","val [] "," raise ","result [] == ","result [] "," new_call ","val [] to_sym "," new_call  insert "," new_call  [] == "," new_call  [] "]}," Ruby19Parser _reduce_53":{"type":"method","name":"_reduce_53","children":[],"call":[" new_call ","val [] ","val [] to_sym "]}," Ruby19Parser _reduce_52":{"type":"method","name":"_reduce_52","children":[],"call":[" env unextend "," env "," new_iter ","val [] "]}," Ruby19Parser _reduce_51":{"type":"method","name":"_reduce_51","children":[],"call":[" env dynamic keys "," env dynamic "," env "]}," Ruby19Parser _reduce_50":{"type":"method","name":"_reduce_50","children":[],"call":[" lexer lineno "," lexer "," env extend "," env "]}," Ruby19Parser _reduce_49":{"type":"method","name":"_reduce_49","children":[],"call":[" new_call ","val [] "]}," Ruby19Parser _reduce_48":{"type":"method","name":"_reduce_48","children":[],"call":[" new_call ","val [] "]}," Ruby19Parser _reduce_46":{"type":"method","name":"_reduce_46","children":[],"call":[" s line "," s "," ret_args ","val [] ","val [] last "," s val [] last  "]}," Ruby19Parser _reduce_45":{"type":"method","name":"_reduce_45","children":[],"call":[" s line "," s "," ret_args ","val [] ","val [] last "," s val [] last  "]}," Ruby19Parser _reduce_44":{"type":"method","name":"_reduce_44","children":[],"call":[" s line "," s "," ret_args ","val [] ","val [] last "," s val [] last  "]}," Ruby19Parser _reduce_41":{"type":"method","name":"_reduce_41","children":[],"call":[" value_expr ","val [] "]}," Ruby19Parser _reduce_39":{"type":"method","name":"_reduce_39","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_38":{"type":"method","name":"_reduce_38","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_37":{"type":"method","name":"_reduce_37","children":[],"call":[" logop ","val [] "]}," Ruby19Parser _reduce_36":{"type":"method","name":"_reduce_36","children":[],"call":[" logop ","val [] "]}," Ruby19Parser _reduce_33":{"type":"method","name":"_reduce_33","children":[],"call":[" new_masgn ","val [] "]}," Ruby19Parser _reduce_32":{"type":"method","name":"_reduce_32","children":[],"call":[" new_masgn ","val [] "]}," Ruby19Parser _reduce_31":{"type":"method","name":"_reduce_31","children":[],"call":[" node_assign "," s ","val [] "]}," Ruby19Parser _reduce_30":{"type":"method","name":"_reduce_30","children":[],"call":[" backref_assign_error ","val [] "]}," Ruby19Parser _reduce_29":{"type":"method","name":"_reduce_29","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_28":{"type":"method","name":"_reduce_28","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_27":{"type":"method","name":"_reduce_27","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_26":{"type":"method","name":"_reduce_26","children":[],"call":[" s ","val [] ","val [] to_sym "]}," Ruby19Parser _reduce_25":{"type":"method","name":"_reduce_25","children":[],"call":[" new_op_asgn "]}," Ruby19Parser _reduce_24":{"type":"method","name":"_reduce_24","children":[],"call":[" new_masgn ","val [] "]}," Ruby19Parser _reduce_23":{"type":"method","name":"_reduce_23","children":[],"call":[" node_assign ","val [] "]}," Ruby19Parser _reduce_22":{"type":"method","name":"_reduce_22","children":[],"call":[" new_iter ","val [] "," s "," yyerror "," in_single > "," in_single "," in_def "]}," Ruby19Parser _reduce_21":{"type":"method","name":"_reduce_21","children":[],"call":[" new_iter ","val [] "," s "]}," Ruby19Parser _reduce_20":{"type":"method","name":"_reduce_20","children":[],"call":[" env extend "," env "," yyerror "," in_single > "," in_single "," in_def "]}," Ruby19Parser _reduce_19":{"type":"method","name":"_reduce_19","children":[],"call":[" s ","val [] "]}," Ruby19Parser _reduce_18":{"type":"method","name":"_reduce_18","children":[],"call":[" new_until ","val [] "]}," Ruby19Parser _reduce_17":{"type":"method","name":"_reduce_17","children":[],"call":[" new_while ","val [] "]}," Ruby19Parser _reduce_16":{"type":"method","name":"_reduce_16","children":[],"call":[" new_if ","val [] "]}," Ruby19Parser _reduce_15":{"type":"method","name":"_reduce_15","children":[],"call":[" new_if ","val [] "]}," Ruby19Parser _reduce_14":{"type":"method","name":"_reduce_14","children":[],"call":["val [] "]}," Ruby19Parser _reduce_13":{"type":"method","name":"_reduce_13","children":[],"call":[" yyerror "]}," Ruby19Parser _reduce_12":{"type":"method","name":"_reduce_12","children":[],"call":[" s ","val [] ","val [] to_sym "]}," Ruby19Parser _reduce_11":{"type":"method","name":"_reduce_11","children":[],"call":[" s ","val [] to_sym ","val [] "]}," Ruby19Parser _reduce_10":{"type":"method","name":"_reduce_10","children":[],"call":[" s line ","val [] "," s "]}," Ruby19Parser _reduce_9":{"type":"method","name":"_reduce_9","children":[],"call":[" lexer lineno "," lexer "," lexer lex_state= "]}," Ruby19Parser _reduce_8":{"type":"method","name":"_reduce_8","children":[],"call":["val [] "]}," Ruby19Parser _reduce_7":{"type":"method","name":"_reduce_7","children":[],"call":[" block_append ","val [] "]}," Ruby19Parser _reduce_4":{"type":"method","name":"_reduce_4","children":[],"call":[" new_compstmt "]}," Ruby19Parser _reduce_3":{"type":"method","name":"_reduce_3","children":[],"call":[" new_body "]}," Ruby19Parser _reduce_2":{"type":"method","name":"_reduce_2","children":[],"call":["val [] "]}," Ruby19Parser _reduce_1":{"type":"method","name":"_reduce_1","children":[],"call":[" lexer lex_state= "," lexer "]}," Ruby18Parser _reduce_none":{"type":"method","name":"_reduce_none","children":[],"call":["val [] "]}," Ruby18Parser _reduce_506":{"type":"method","name":"_reduce_506","children":[],"call":[]}," Ruby18Parser _reduce_505":{"type":"method","name":"_reduce_505","children":[],"call":[]}," Ruby18Parser _reduce_504":{"type":"method","name":"_reduce_504","children":[],"call":[" yyerrok "]}," Ruby18Parser _reduce_501":{"type":"method","name":"_reduce_501","children":[],"call":[" yyerrok "]}," Ruby18Parser _reduce_481":{"type":"method","name":"_reduce_481","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_480":{"type":"method","name":"_reduce_480","children":[],"call":["list push ","more empty? ","val [] [] ","val [] ","val [] dup ","val [] dup  push ","val [] []  empty? "]}," Ruby18Parser _reduce_478":{"type":"method","name":"_reduce_478","children":[],"call":["val [] "," yyerror ","val [] inspect ","size % != ","size % ","val [] size ","val [] size  % != ","val [] size  % ","val [] val [] size  "]}," Ruby18Parser _reduce_477":{"type":"method","name":"_reduce_477","children":[],"call":["val [] "]}," Ruby18Parser _reduce_476":{"type":"method","name":"_reduce_476","children":[],"call":[" s "]}," Ruby18Parser _reduce_475":{"type":"method","name":"_reduce_475","children":[],"call":[" yyerror ","result [] == ","result [] ","val [] ","val []  [] == ","val []  [] "]}," Ruby18Parser _reduce_474":{"type":"method","name":"_reduce_474","children":[],"call":[" lexer lex_state= "," lexer "]}," Ruby18Parser _reduce_472":{"type":"method","name":"_reduce_472","children":[],"call":[]}," Ruby18Parser _reduce_471":{"type":"method","name":"_reduce_471","children":[],"call":["val [] "]}," Ruby18Parser _reduce_470":{"type":"method","name":"_reduce_470","children":[],"call":[" s ","identifier to_sym "," env []= "," env ","val [] to_sym ","val [] ","val [] to_sym  to_sym "]}," Ruby18Parser _reduce_467":{"type":"method","name":"_reduce_467","children":[],"call":[" env []= "," env "]}," Ruby18Parser _reduce_466":{"type":"method","name":"_reduce_466","children":[],"call":[" assignable ","val [] to_sym ","val [] "]}," Ruby18Parser _reduce_463":{"type":"method","name":"_reduce_463","children":[],"call":[" block_append ","val [] "]}," Ruby18Parser _reduce_462":{"type":"method","name":"_reduce_462","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_461":{"type":"method","name":"_reduce_461","children":[],"call":[" assignable ","val [] "]}," Ruby18Parser _reduce_460":{"type":"method","name":"_reduce_460","children":[],"call":["val [] ","val [] << ","val [] to_sym "]}," Ruby18Parser _reduce_459":{"type":"method","name":"_reduce_459","children":[],"call":["result << ","val [] to_sym ","val [] "," s "," s  << "]}," Ruby18Parser _reduce_458":{"type":"method","name":"_reduce_458","children":[],"call":["val [] "," env []= "," env ","val [] to_sym "]}," Ruby18Parser _reduce_457":{"type":"method","name":"_reduce_457","children":[],"call":[" yyerror "]}," Ruby18Parser _reduce_456":{"type":"method","name":"_reduce_456","children":[],"call":[" yyerror "]}," Ruby18Parser _reduce_455":{"type":"method","name":"_reduce_455","children":[],"call":[" yyerror ","val [] "]}," Ruby18Parser _reduce_454":{"type":"method","name":"_reduce_454","children":[],"call":[" args "]}," Ruby18Parser _reduce_453":{"type":"method","name":"_reduce_453","children":[],"call":[" args ","val [] "]}," Ruby18Parser _reduce_452":{"type":"method","name":"_reduce_452","children":[],"call":[" args ","val [] "]}," Ruby18Parser _reduce_451":{"type":"method","name":"_reduce_451","children":[],"call":[" args ","val [] "]}," Ruby18Parser _reduce_450":{"type":"method","name":"_reduce_450","children":[],"call":[" args ","val [] "]}," Ruby18Parser _reduce_449":{"type":"method","name":"_reduce_449","children":[],"call":[" args ","val [] "]}," Ruby18Parser _reduce_448":{"type":"method","name":"_reduce_448","children":[],"call":[" args ","val [] "]}," Ruby18Parser _reduce_447":{"type":"method","name":"_reduce_447","children":[],"call":[" args ","val [] "]}," Ruby18Parser _reduce_446":{"type":"method","name":"_reduce_446","children":[],"call":[" args ","val [] "]}," Ruby18Parser _reduce_445":{"type":"method","name":"_reduce_445","children":[],"call":["val [] "]}," Ruby18Parser _reduce_444":{"type":"method","name":"_reduce_444","children":[],"call":[" lexer command_start= "," lexer "," lexer lex_state= ","val [] "]}," Ruby18Parser _reduce_443":{"type":"method","name":"_reduce_443","children":[],"call":[" yyerrok "]}," Ruby18Parser _reduce_442":{"type":"method","name":"_reduce_442","children":[],"call":["val [] "]}," Ruby18Parser _reduce_441":{"type":"method","name":"_reduce_441","children":[],"call":[" lexer lex_state= "," lexer "]}," Ruby18Parser _reduce_440":{"type":"method","name":"_reduce_440","children":[],"call":[]}," Ruby18Parser _reduce_439":{"type":"method","name":"_reduce_439","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_438":{"type":"method","name":"_reduce_438","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_437":{"type":"method","name":"_reduce_437","children":[],"call":[" assignable ","val [] "]}," Ruby18Parser _reduce_436":{"type":"method","name":"_reduce_436","children":[],"call":[" gettable ","Sexp  === ","val [] "]}," Ruby18Parser _reduce_435":{"type":"method","name":"_reduce_435","children":[],"call":[" s "," lexer src current_line "," lexer src "," lexer "]}," Ruby18Parser _reduce_434":{"type":"method","name":"_reduce_434","children":[],"call":[" s "," file "]}," Ruby18Parser _reduce_433":{"type":"method","name":"_reduce_433","children":[],"call":[" s "]}," Ruby18Parser _reduce_432":{"type":"method","name":"_reduce_432","children":[],"call":[" s "]}," Ruby18Parser _reduce_431":{"type":"method","name":"_reduce_431","children":[],"call":[" s "]}," Ruby18Parser _reduce_430":{"type":"method","name":"_reduce_430","children":[],"call":[" s "]}," Ruby18Parser _reduce_424":{"type":"method","name":"_reduce_424","children":[],"call":["val [] -@ ","val [] "]}," Ruby18Parser _reduce_423":{"type":"method","name":"_reduce_423","children":[],"call":["val [] -@ ","val [] "]}," Ruby18Parser _reduce_420":{"type":"method","name":"_reduce_420","children":[],"call":[" s ","result last intern ","result last ","result []= ","result [] "," yyerror ","result empty? ","result nil? ","val [] "," lexer lex_state= "," lexer "," s  last intern ","val []  last intern "," s  last ","val []  last "," s  []= ","val []  []= "," s  [] ","val []  [] "," s  empty? ","val []  empty? "," s  nil? ","val []  nil? "]}," Ruby18Parser _reduce_415":{"type":"method","name":"_reduce_415","children":[],"call":["val [] to_sym ","val [] "]}," Ruby18Parser _reduce_414":{"type":"method","name":"_reduce_414","children":[],"call":["val [] to_sym ","val [] "," lexer lex_state= "," lexer "]}," Ruby18Parser _reduce_412":{"type":"method","name":"_reduce_412","children":[],"call":[" s ","val [] to_sym ","val [] "]}," Ruby18Parser _reduce_411":{"type":"method","name":"_reduce_411","children":[],"call":[" s ","val [] to_sym ","val [] "]}," Ruby18Parser _reduce_410":{"type":"method","name":"_reduce_410","children":[],"call":[" s ","val [] to_sym ","val [] "]}," Ruby18Parser _reduce_409":{"type":"method","name":"_reduce_409","children":[],"call":[" raise ","val [] inspect ","val [] "," s ","val [] [] "," lexer cmdarg lexpop "," lexer cmdarg "," lexer "," lexer cond lexpop "," lexer cond "," lexer lex_strterm= "]}," Ruby18Parser _reduce_408":{"type":"method","name":"_reduce_408","children":[],"call":[" lexer cmdarg push "," lexer cmdarg "," lexer "," lexer cond push "," lexer cond "," lexer lex_state= "," lexer lex_strterm= "," lexer lex_strterm "]}," Ruby18Parser _reduce_407":{"type":"method","name":"_reduce_407","children":[],"call":[" s ","val [] "," lexer lex_strterm= "," lexer "]}," Ruby18Parser _reduce_406":{"type":"method","name":"_reduce_406","children":[],"call":[" lexer lex_state= "," lexer "," lexer lex_strterm= "," lexer lex_strterm "]}," Ruby18Parser _reduce_405":{"type":"method","name":"_reduce_405","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_404":{"type":"method","name":"_reduce_404","children":[],"call":[" literal_concat ","val [] "]}," Ruby18Parser _reduce_403":{"type":"method","name":"_reduce_403","children":[],"call":[]}," Ruby18Parser _reduce_402":{"type":"method","name":"_reduce_402","children":[],"call":[" literal_concat ","val [] "]}," Ruby18Parser _reduce_401":{"type":"method","name":"_reduce_401","children":[],"call":[" s "]}," Ruby18Parser _reduce_400":{"type":"method","name":"_reduce_400","children":[],"call":["val [] << "," s ","val [] "]}," Ruby18Parser _reduce_399":{"type":"method","name":"_reduce_399","children":[],"call":[" s "]}," Ruby18Parser _reduce_398":{"type":"method","name":"_reduce_398","children":[],"call":["val [] "]}," Ruby18Parser _reduce_397":{"type":"method","name":"_reduce_397","children":[],"call":[" s "]}," Ruby18Parser _reduce_396":{"type":"method","name":"_reduce_396","children":[],"call":[" literal_concat ","val [] "]}," Ruby18Parser _reduce_394":{"type":"method","name":"_reduce_394","children":[],"call":["val [] << ","val [] "," s ","val [] [] == ","val [] [] "]}," Ruby18Parser _reduce_393":{"type":"method","name":"_reduce_393","children":[],"call":[" s "]}," Ruby18Parser _reduce_392":{"type":"method","name":"_reduce_392","children":[],"call":["val [] "]}," Ruby18Parser _reduce_391":{"type":"method","name":"_reduce_391","children":[],"call":[" s "]}," Ruby18Parser _reduce_390":{"type":"method","name":"_reduce_390","children":[],"call":[" new_regexp "]}," Ruby18Parser _reduce_389":{"type":"method","name":"_reduce_389","children":[],"call":[" new_xstring ","val [] "]}," Ruby18Parser _reduce_388":{"type":"method","name":"_reduce_388","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_387":{"type":"method","name":"_reduce_387","children":[],"call":["val [] "]}," Ruby18Parser _reduce_386":{"type":"method","name":"_reduce_386","children":[],"call":[" literal_concat ","val [] "]}," Ruby18Parser _reduce_384":{"type":"method","name":"_reduce_384","children":[],"call":["val [] ","val []= "," s ","val [] value ","val [] [] == ","val [] [] "]}," Ruby18Parser _reduce_382":{"type":"method","name":"_reduce_382","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_381":{"type":"method","name":"_reduce_381","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_379":{"type":"method","name":"_reduce_379","children":[],"call":[" s ","val [] ","val [] != "]}," Ruby18Parser _reduce_377":{"type":"method","name":"_reduce_377","children":[],"call":["val [] "]}," Ruby18Parser _reduce_374":{"type":"method","name":"_reduce_374","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_373":{"type":"method","name":"_reduce_373","children":[],"call":[]}," Ruby18Parser _reduce_372":{"type":"method","name":"_reduce_372","children":[],"call":["result << "," s ","klasses << "," node_assign ","val [] "," s  << "]}," Ruby18Parser _reduce_369":{"type":"method","name":"_reduce_369","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_368":{"type":"method","name":"_reduce_368","children":[],"call":[" list_append "," s ","val [] "]}," Ruby18Parser _reduce_366":{"type":"method","name":"_reduce_366","children":[],"call":["result << ","val [] ","result line= "," s "," s  << "," s  line= "]}," Ruby18Parser _reduce_365":{"type":"method","name":"_reduce_365","children":[],"call":[" lexer lineno "," lexer "]}," Ruby18Parser _reduce_364":{"type":"method","name":"_reduce_364","children":[],"call":["result line= ","val [] "," env unextend "," env "," new_iter "," new_iter  line= "]}," Ruby18Parser _reduce_363":{"type":"method","name":"_reduce_363","children":[],"call":[" env dynamic keys "," env dynamic "," env "]}," Ruby18Parser _reduce_362":{"type":"method","name":"_reduce_362","children":[],"call":[" lexer lineno "," lexer "," env extend "," env "]}," Ruby18Parser _reduce_361":{"type":"method","name":"_reduce_361","children":[],"call":["result line= ","val [] "," env unextend "," env "," new_iter "," new_iter  line= "]}," Ruby18Parser _reduce_360":{"type":"method","name":"_reduce_360","children":[],"call":[" env dynamic keys "," env dynamic "," env "]}," Ruby18Parser _reduce_359":{"type":"method","name":"_reduce_359","children":[],"call":[" lexer lineno "," lexer "," env extend "," env "]}," Ruby18Parser _reduce_358":{"type":"method","name":"_reduce_358","children":[],"call":[" s "]}," Ruby18Parser _reduce_357":{"type":"method","name":"_reduce_357","children":[],"call":[" new_super ","val [] "]}," Ruby18Parser _reduce_356":{"type":"method","name":"_reduce_356","children":[],"call":[" new_call ","val [] to_sym ","val [] "]}," Ruby18Parser _reduce_355":{"type":"method","name":"_reduce_355","children":[],"call":[" new_call ","val [] ","val [] to_sym "]}," Ruby18Parser _reduce_354":{"type":"method","name":"_reduce_354","children":[],"call":[" new_call ","val [] ","val [] to_sym "]}," Ruby18Parser _reduce_353":{"type":"method","name":"_reduce_353","children":[],"call":[" new_call ","val [] ","val [] to_sym "]}," Ruby18Parser _reduce_352":{"type":"method","name":"_reduce_352","children":[],"call":[" lexer lineno "," lexer "]}," Ruby18Parser _reduce_351":{"type":"method","name":"_reduce_351","children":[],"call":[" new_call ","val [] "]}," Ruby18Parser _reduce_350":{"type":"method","name":"_reduce_350","children":[],"call":[" new_call ","val [] "]}," Ruby18Parser _reduce_349":{"type":"method","name":"_reduce_349","children":[],"call":["result insert ","val [] "," raise ","val [] [] == ","val [] [] ","val []  insert "]}," Ruby18Parser _reduce_348":{"type":"method","name":"_reduce_348","children":[],"call":[" env unextend "," env ","result line= ","val [] "," new_iter "," new_iter  line= "]}," Ruby18Parser _reduce_347":{"type":"method","name":"_reduce_347","children":[],"call":[" env dynamic keys "," env dynamic "," env "]}," Ruby18Parser _reduce_346":{"type":"method","name":"_reduce_346","children":[],"call":[" lexer lineno "," lexer "," env extend "," env "]}," Ruby18Parser _reduce_345":{"type":"method","name":"_reduce_345","children":[],"call":[" lexer command_start= "," lexer ","val [] "]}," Ruby18Parser _reduce_344":{"type":"method","name":"_reduce_344","children":[],"call":[" lexer command_start= "," lexer "]}," Ruby18Parser _reduce_343":{"type":"method","name":"_reduce_343","children":[],"call":[" lexer command_start= "," lexer "]}," Ruby18Parser _reduce_341":{"type":"method","name":"_reduce_341","children":[],"call":["val [] delete_at ","val [] ","val [] [] nil? ","val [] [] "]}," Ruby18Parser _reduce_339":{"type":"method","name":"_reduce_339","children":[],"call":["val [] "]}," Ruby18Parser _reduce_337":{"type":"method","name":"_reduce_337","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_328":{"type":"method","name":"_reduce_328","children":[],"call":[" value_expr ","val [] "]}," Ruby18Parser _reduce_327":{"type":"method","name":"_reduce_327","children":[],"call":[" s "]}," Ruby18Parser _reduce_326":{"type":"method","name":"_reduce_326","children":[],"call":[" s "]}," Ruby18Parser _reduce_325":{"type":"method","name":"_reduce_325","children":[],"call":[" s "]}," Ruby18Parser _reduce_324":{"type":"method","name":"_reduce_324","children":[],"call":[" s "]}," Ruby18Parser _reduce_323":{"type":"method","name":"_reduce_323","children":[],"call":[" in_single "," env unextend "," env "," new_defs "]}," Ruby18Parser _reduce_322":{"type":"method","name":"_reduce_322","children":[],"call":[" lexer lex_state= "," lexer "," env extend "," env "," in_single "]}," Ruby18Parser _reduce_321":{"type":"method","name":"_reduce_321","children":[],"call":[" lexer lex_state= "," lexer "," comments push "," lexer comments "," comments "]}," Ruby18Parser _reduce_320":{"type":"method","name":"_reduce_320","children":[],"call":[" in_def= "," env unextend "," env "," new_defn "]}," Ruby18Parser _reduce_319":{"type":"method","name":"_reduce_319","children":[],"call":[" lexer src beginning_of_line? "," lexer src "," lexer "," lexer lineno "," env extend "," env "," in_def= "," comments push "," lexer comments "," comments "]}," Ruby18Parser _reduce_318":{"type":"method","name":"_reduce_318","children":[],"call":[" env unextend "," env "," new_module "]}," Ruby18Parser _reduce_317":{"type":"method","name":"_reduce_317","children":[],"call":[" env extend "," env "," yyerror "," in_single > "," in_single "," in_def "," comments push "," lexer comments "," lexer "," comments "]}," Ruby18Parser _reduce_316":{"type":"method","name":"_reduce_316","children":[],"call":[" lexer lineno "," lexer "]}," Ruby18Parser _reduce_315":{"type":"method","name":"_reduce_315","children":[],"call":[" env unextend "," env "," new_sclass "]}," Ruby18Parser _reduce_314":{"type":"method","name":"_reduce_314","children":[],"call":[" env extend "," env "," in_single= "," in_single "]}," Ruby18Parser _reduce_313":{"type":"method","name":"_reduce_313","children":[],"call":[" in_def= "," in_def "]}," Ruby18Parser _reduce_312":{"type":"method","name":"_reduce_312","children":[],"call":[" lexer lineno "," lexer "]}," Ruby18Parser _reduce_311":{"type":"method","name":"_reduce_311","children":[],"call":[" env unextend "," env "," new_class "]}," Ruby18Parser _reduce_310":{"type":"method","name":"_reduce_310","children":[],"call":[" env extend "," env "," yyerror "," in_single > "," in_single "," in_def "," comments push "," lexer comments "," lexer "," comments "]}," Ruby18Parser _reduce_309":{"type":"method","name":"_reduce_309","children":[],"call":[" lexer lineno "," lexer "]}," Ruby18Parser _reduce_308":{"type":"method","name":"_reduce_308","children":[],"call":[" new_for ","val [] "]}," Ruby18Parser _reduce_307":{"type":"method","name":"_reduce_307","children":[],"call":[" lexer cond pop "," lexer cond "," lexer "]}," Ruby18Parser _reduce_306":{"type":"method","name":"_reduce_306","children":[],"call":[" lexer cond push "," lexer cond "," lexer "]}," Ruby18Parser _reduce_305":{"type":"method","name":"_reduce_305","children":[],"call":[" new_case ","val [] "]}," Ruby18Parser _reduce_304":{"type":"method","name":"_reduce_304","children":[],"call":[" new_case ","val [] "]}," Ruby18Parser _reduce_303":{"type":"method","name":"_reduce_303","children":[],"call":[" new_case ","val [] "]}," Ruby18Parser _reduce_302":{"type":"method","name":"_reduce_302","children":[],"call":[" new_until ","val [] "]}," Ruby18Parser _reduce_301":{"type":"method","name":"_reduce_301","children":[],"call":[" lexer cond pop "," lexer cond "," lexer "]}," Ruby18Parser _reduce_300":{"type":"method","name":"_reduce_300","children":[],"call":[" lexer cond push "," lexer cond "," lexer "]}," Ruby18Parser _reduce_299":{"type":"method","name":"_reduce_299","children":[],"call":[" new_while ","val [] "]}," Ruby18Parser _reduce_298":{"type":"method","name":"_reduce_298","children":[],"call":[" lexer cond pop "," lexer cond "," lexer "]}," Ruby18Parser _reduce_297":{"type":"method","name":"_reduce_297","children":[],"call":[" lexer cond push "," lexer cond "," lexer "]}," Ruby18Parser _reduce_296":{"type":"method","name":"_reduce_296","children":[],"call":[" new_if ","val [] "]}," Ruby18Parser _reduce_295":{"type":"method","name":"_reduce_295","children":[],"call":[" new_if ","val [] "]}," Ruby18Parser _reduce_294":{"type":"method","name":"_reduce_294","children":[],"call":["iter insert ","val [] "]}," Ruby18Parser _reduce_292":{"type":"method","name":"_reduce_292","children":[],"call":["call line= ","iter line ","iter insert "," new_call ","oper to_sym ","val [] "," new_call  line= "," new_ new_call  "]}," Ruby18Parser _reduce_291":{"type":"method","name":"_reduce_291","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_290":{"type":"method","name":"_reduce_290","children":[],"call":[" new_yield "]}," Ruby18Parser _reduce_289":{"type":"method","name":"_reduce_289","children":[],"call":[" new_yield "]}," Ruby18Parser _reduce_288":{"type":"method","name":"_reduce_288","children":[],"call":[" new_yield ","val [] "]}," Ruby18Parser _reduce_287":{"type":"method","name":"_reduce_287","children":[],"call":[" s "]}," Ruby18Parser _reduce_286":{"type":"method","name":"_reduce_286","children":[],"call":[" s ","val [] values ","val [] "]}," Ruby18Parser _reduce_285":{"type":"method","name":"_reduce_285","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_284":{"type":"method","name":"_reduce_284","children":[],"call":[" new_aref "]}," Ruby18Parser _reduce_283":{"type":"method","name":"_reduce_283","children":[],"call":[" s ","val [] to_sym ","val [] "]}," Ruby18Parser _reduce_282":{"type":"method","name":"_reduce_282","children":[],"call":[" s ","val [] to_sym ","val [] "]}," Ruby18Parser _reduce_281":{"type":"method","name":"_reduce_281","children":[],"call":["result paren= "," s ","val [] "]}," Ruby18Parser _reduce_280":{"type":"method","name":"_reduce_280","children":[],"call":["val [] "," warning "]}," Ruby18Parser _reduce_279":{"type":"method","name":"_reduce_279","children":[],"call":[" lexer lex_state= "," lexer "]}," Ruby18Parser _reduce_278":{"type":"method","name":"_reduce_278","children":[],"call":["result line= ","val [] "," s "," s  line= "]}," Ruby18Parser _reduce_277":{"type":"method","name":"_reduce_277","children":[],"call":[" lexer lineno "," lexer "]}," Ruby18Parser _reduce_276":{"type":"method","name":"_reduce_276","children":[],"call":[" new_call ","val [] to_sym ","val [] "]}," Ruby18Parser _reduce_267":{"type":"method","name":"_reduce_267","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_266":{"type":"method","name":"_reduce_266","children":[],"call":[" arg_concat ","val [] "]}," Ruby18Parser _reduce_265":{"type":"method","name":"_reduce_265","children":[],"call":["val [] << ","val [] "]}," Ruby18Parser _reduce_264":{"type":"method","name":"_reduce_264","children":[],"call":[" list_append ","val [] "]}," Ruby18Parser _reduce_263":{"type":"method","name":"_reduce_263","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_261":{"type":"method","name":"_reduce_261","children":[],"call":["val [] "]}," Ruby18Parser _reduce_260":{"type":"method","name":"_reduce_260","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_259":{"type":"method","name":"_reduce_259","children":[],"call":["val [] "," warning "]}," Ruby18Parser _reduce_258":{"type":"method","name":"_reduce_258","children":[],"call":[" lexer lex_state= "," lexer "]}," Ruby18Parser _reduce_257":{"type":"method","name":"_reduce_257","children":[],"call":[" warning "]}," Ruby18Parser _reduce_256":{"type":"method","name":"_reduce_256","children":[],"call":[" lexer lex_state= "," lexer "]}," Ruby18Parser _reduce_254":{"type":"method","name":"_reduce_254","children":[],"call":["val [] "," lexer cmdarg stack replace "," lexer cmdarg stack "," lexer cmdarg "," lexer "]}," Ruby18Parser _reduce_253":{"type":"method","name":"_reduce_253","children":[],"call":[" lexer cmdarg push "," lexer cmdarg "," lexer "," lexer cmdarg stack dup "," lexer cmdarg stack "]}," Ruby18Parser _reduce_251":{"type":"method","name":"_reduce_251","children":[],"call":[" arg_blk_pass ","val [] "," s "]}," Ruby18Parser _reduce_250":{"type":"method","name":"_reduce_250","children":[],"call":[" arg_blk_pass ","val [] "," arg_concat "," s add_all add "," s ","val [] values "," s add_all "]}," Ruby18Parser _reduce_249":{"type":"method","name":"_reduce_249","children":[],"call":[" arg_blk_pass ","val [] "," arg_concat "," s add "," s ","val [] values "]}," Ruby18Parser _reduce_248":{"type":"method","name":"_reduce_248","children":[],"call":[" arg_blk_pass ","val [] "," s add_all add "," s ","val [] values "," s add_all "]}," Ruby18Parser _reduce_247":{"type":"method","name":"_reduce_247","children":[],"call":[" arg_blk_pass ","val [] "," s ","val [] values "]}," Ruby18Parser _reduce_246":{"type":"method","name":"_reduce_246","children":[],"call":[" arg_blk_pass ","val [] "," s ","val [] values "]}," Ruby18Parser _reduce_245":{"type":"method","name":"_reduce_245","children":[],"call":[" arg_blk_pass ","val [] "," s ","val [] values "]}," Ruby18Parser _reduce_244":{"type":"method","name":"_reduce_244","children":[],"call":[" arg_blk_pass ","val [] "," arg_concat "," s ","val [] values "]}," Ruby18Parser _reduce_243":{"type":"method","name":"_reduce_243","children":[],"call":[" arg_blk_pass ","val [] "," arg_concat "," s "]}," Ruby18Parser _reduce_242":{"type":"method","name":"_reduce_242","children":[],"call":[" arg_blk_pass ","val [] "]}," Ruby18Parser _reduce_241":{"type":"method","name":"_reduce_241","children":[],"call":[" arg_blk_pass ","val [] "," list_prepend "]}," Ruby18Parser _reduce_239":{"type":"method","name":"_reduce_239","children":[],"call":[" arg_blk_pass ","val [] "," s "]}," Ruby18Parser _reduce_238":{"type":"method","name":"_reduce_238","children":[],"call":[" arg_blk_pass ","val [] "," arg_concat ","val [] << "," s ","val [] values "]}," Ruby18Parser _reduce_237":{"type":"method","name":"_reduce_237","children":[],"call":[" arg_blk_pass ","val [] ","val [] << "," s ","val [] values "]}," Ruby18Parser _reduce_236":{"type":"method","name":"_reduce_236","children":[],"call":[" arg_blk_pass ","val [] "," arg_concat "," s ","val [] values "]}," Ruby18Parser _reduce_235":{"type":"method","name":"_reduce_235","children":[],"call":[" arg_blk_pass ","val [] "," s ","val [] values "]}," Ruby18Parser _reduce_234":{"type":"method","name":"_reduce_234","children":[],"call":[" arg_blk_pass ","val [] "," arg_concat "]}," Ruby18Parser _reduce_233":{"type":"method","name":"_reduce_233","children":[],"call":[" arg_blk_pass ","val [] "]}," Ruby18Parser _reduce_232":{"type":"method","name":"_reduce_232","children":[],"call":[" s ","val [] "," warning "]}," Ruby18Parser _reduce_229":{"type":"method","name":"_reduce_229","children":[],"call":["val [] add ","val [] "," warning "]}," Ruby18Parser _reduce_228":{"type":"method","name":"_reduce_228","children":[],"call":[" s ","val [] "," warning "]}," Ruby18Parser _reduce_227":{"type":"method","name":"_reduce_227","children":[],"call":["val [] "]}," Ruby18Parser _reduce_226":{"type":"method","name":"_reduce_226","children":[],"call":["val [] "]}," Ruby18Parser _reduce_225":{"type":"method","name":"_reduce_225","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_224":{"type":"method","name":"_reduce_224","children":[],"call":[" s ","val [] values ","val [] "]}," Ruby18Parser _reduce_223":{"type":"method","name":"_reduce_223","children":[],"call":[" arg_concat ","val [] "]}," Ruby18Parser _reduce_222":{"type":"method","name":"_reduce_222","children":[],"call":["val [] "]}," Ruby18Parser _reduce_221":{"type":"method","name":"_reduce_221","children":[],"call":[" s ","val [] "," warning "]}," Ruby18Parser _reduce_219":{"type":"method","name":"_reduce_219","children":[],"call":[" value_expr ","val [] "]}," Ruby18Parser _reduce_217":{"type":"method","name":"_reduce_217","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_216":{"type":"method","name":"_reduce_216","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_215":{"type":"method","name":"_reduce_215","children":[],"call":[" logop ","val [] "]}," Ruby18Parser _reduce_214":{"type":"method","name":"_reduce_214","children":[],"call":[" logop ","val [] "]}," Ruby18Parser _reduce_213":{"type":"method","name":"_reduce_213","children":[],"call":[" new_call "," s ","val [] ","val []= "," value_expr "]}," Ruby18Parser _reduce_212":{"type":"method","name":"_reduce_212","children":[],"call":[" new_call "," s ","val [] ","val []= "," value_expr "]}," Ruby18Parser _reduce_211":{"type":"method","name":"_reduce_211","children":[],"call":[" new_call "," s ","val [] ","val []= "," value_expr "]}," Ruby18Parser _reduce_210":{"type":"method","name":"_reduce_210","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_209":{"type":"method","name":"_reduce_209","children":[],"call":[" s "," get_match_node ","val [] "]}," Ruby18Parser _reduce_208":{"type":"method","name":"_reduce_208","children":[],"call":[" get_match_node ","val [] "]}," Ruby18Parser _reduce_207":{"type":"method","name":"_reduce_207","children":[],"call":[" s "," new_call ","val [] ","val []= "," value_expr "]}," Ruby18Parser _reduce_206":{"type":"method","name":"_reduce_206","children":[],"call":[" new_call "," s ","val [] "]}," Ruby18Parser _reduce_205":{"type":"method","name":"_reduce_205","children":[],"call":[" new_call "," s ","val [] "]}," Ruby18Parser _reduce_204":{"type":"method","name":"_reduce_204","children":[],"call":[" new_call "," s ","val [] "]}," Ruby18Parser _reduce_203":{"type":"method","name":"_reduce_203","children":[],"call":[" new_call "," s ","val [] "]}," Ruby18Parser _reduce_202":{"type":"method","name":"_reduce_202","children":[],"call":[" new_call "," s ","val [] "]}," Ruby18Parser _reduce_201":{"type":"method","name":"_reduce_201","children":[],"call":[" new_call "," s ","val [] "]}," Ruby18Parser _reduce_200":{"type":"method","name":"_reduce_200","children":[],"call":[" new_call "," s ","val [] "]}," Ruby18Parser _reduce_199":{"type":"method","name":"_reduce_199","children":[],"call":[" new_call "," s ","val [] "]}," Ruby18Parser _reduce_198":{"type":"method","name":"_reduce_198","children":[],"call":[" new_call "," s ","val [] "]}," Ruby18Parser _reduce_197":{"type":"method","name":"_reduce_197","children":[],"call":[" new_call "," s ","val [] "]}," Ruby18Parser _reduce_196":{"type":"method","name":"_reduce_196","children":[],"call":[" new_call "," s ","val [] "]}," Ruby18Parser _reduce_195":{"type":"method","name":"_reduce_195","children":[],"call":[" new_call "," s ","val [] ","val [] [] == ","val [] [] "]}," Ruby18Parser _reduce_194":{"type":"method","name":"_reduce_194","children":[],"call":[" new_call "," s ","val [] "]}," Ruby18Parser _reduce_193":{"type":"method","name":"_reduce_193","children":[],"call":[" new_call "," s ","val [] "]}," Ruby18Parser _reduce_192":{"type":"method","name":"_reduce_192","children":[],"call":[" new_call "," s ","val [] "]}," Ruby18Parser _reduce_191":{"type":"method","name":"_reduce_191","children":[],"call":[" new_call "," s ","val [] "]}," Ruby18Parser _reduce_190":{"type":"method","name":"_reduce_190","children":[],"call":[" new_call "," s ","val [] "]}," Ruby18Parser _reduce_189":{"type":"method","name":"_reduce_189","children":[],"call":[" new_call "," s ","val [] "]}," Ruby18Parser _reduce_188":{"type":"method","name":"_reduce_188","children":[],"call":[" new_call "," s ","val [] "]}," Ruby18Parser _reduce_187":{"type":"method","name":"_reduce_187","children":[],"call":[" new_call "," s ","val [] "]}," Ruby18Parser _reduce_186":{"type":"method","name":"_reduce_186","children":[],"call":[" s ","v2 last ","v1 last ","Fixnum  === ","v2 node_type == ","v2 node_type ","v1 node_type == ","v1 node_type ","val [] "]}," Ruby18Parser _reduce_185":{"type":"method","name":"_reduce_185","children":[],"call":[" s ","v2 last ","v1 last ","Fixnum  === ","v2 node_type == ","v2 node_type ","v1 node_type == ","v1 node_type ","val [] "]}," Ruby18Parser _reduce_184":{"type":"method","name":"_reduce_184","children":[],"call":[" backref_assign_error ","val [] "]}," Ruby18Parser _reduce_183":{"type":"method","name":"_reduce_183","children":[],"call":[" yyerror "]}," Ruby18Parser _reduce_182":{"type":"method","name":"_reduce_182","children":[],"call":[" yyerror "]}," Ruby18Parser _reduce_181":{"type":"method","name":"_reduce_181","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_180":{"type":"method","name":"_reduce_180","children":[],"call":[" s ","val [] ","val [] to_sym "]}," Ruby18Parser _reduce_179":{"type":"method","name":"_reduce_179","children":[],"call":[" s ","val [] ","val [] to_sym "]}," Ruby18Parser _reduce_178":{"type":"method","name":"_reduce_178","children":[],"call":["val [] []= ","val [] "," s ","val [] to_sym "]}," Ruby18Parser _reduce_177":{"type":"method","name":"_reduce_177","children":[],"call":[" new_op_asgn "]}," Ruby18Parser _reduce_176":{"type":"method","name":"_reduce_176","children":[],"call":[" node_assign "," s ","val [] "]}," Ruby18Parser _reduce_175":{"type":"method","name":"_reduce_175","children":[],"call":[" node_assign ","val [] "]}," Ruby18Parser _reduce_107":{"type":"method","name":"_reduce_107","children":[],"call":[" new_undef ","val [] "]}," Ruby18Parser _reduce_106":{"type":"method","name":"_reduce_106","children":[],"call":[" lexer lex_state= "," lexer "]}," Ruby18Parser _reduce_105":{"type":"method","name":"_reduce_105","children":[],"call":[" new_undef ","val [] "]}," Ruby18Parser _reduce_103":{"type":"method","name":"_reduce_103","children":[],"call":[" s ","val [] to_sym ","val [] "]}," Ruby18Parser _reduce_100":{"type":"method","name":"_reduce_100","children":[],"call":["val [] "," lexer lex_state= "," lexer "]}," Ruby18Parser _reduce_99":{"type":"method","name":"_reduce_99","children":[],"call":["val [] "," lexer lex_state= "," lexer "]}," Ruby18Parser _reduce_95":{"type":"method","name":"_reduce_95","children":[],"call":[" s ","val [] to_sym ","val [] "]}," Ruby18Parser _reduce_94":{"type":"method","name":"_reduce_94","children":[],"call":["val [] to_sym ","val [] "]}," Ruby18Parser _reduce_93":{"type":"method","name":"_reduce_93","children":[],"call":[" s ","val [] to_sym ","val [] "]}," Ruby18Parser _reduce_91":{"type":"method","name":"_reduce_91","children":[],"call":[" yyerror "]}," Ruby18Parser _reduce_90":{"type":"method","name":"_reduce_90","children":[],"call":[" backref_assign_error ","val [] "]}," Ruby18Parser _reduce_89":{"type":"method","name":"_reduce_89","children":[],"call":[" s ","val [] to_sym ","val [] "," yyerror "," in_single > "," in_single "," in_def "]}," Ruby18Parser _reduce_88":{"type":"method","name":"_reduce_88","children":[],"call":[" s ","val [] to_sym ","val [] "," yyerror "," in_single > "," in_single "," in_def "]}," Ruby18Parser _reduce_87":{"type":"method","name":"_reduce_87","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_86":{"type":"method","name":"_reduce_86","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_85":{"type":"method","name":"_reduce_85","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_84":{"type":"method","name":"_reduce_84","children":[],"call":[" aryset ","val [] "]}," Ruby18Parser _reduce_83":{"type":"method","name":"_reduce_83","children":[],"call":[" assignable ","val [] "]}," Ruby18Parser _reduce_82":{"type":"method","name":"_reduce_82","children":[],"call":[" backref_assign_error ","val [] "]}," Ruby18Parser _reduce_81":{"type":"method","name":"_reduce_81","children":[],"call":[" s ","val [] to_sym ","val [] "," yyerror "," in_single > "," in_single "," in_def "]}," Ruby18Parser _reduce_80":{"type":"method","name":"_reduce_80","children":[],"call":[" s ","val [] to_sym ","val [] "," yyerror "," in_single > "," in_single "," in_def "]}," Ruby18Parser _reduce_79":{"type":"method","name":"_reduce_79","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_78":{"type":"method","name":"_reduce_78","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_77":{"type":"method","name":"_reduce_77","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_76":{"type":"method","name":"_reduce_76","children":[],"call":[" aryset ","val [] "]}," Ruby18Parser _reduce_75":{"type":"method","name":"_reduce_75","children":[],"call":[" assignable ","val [] "]}," Ruby18Parser _reduce_74":{"type":"method","name":"_reduce_74","children":[],"call":["val [] << ","val [] compact ","val [] "]}," Ruby18Parser _reduce_73":{"type":"method","name":"_reduce_73","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_72":{"type":"method","name":"_reduce_72","children":[],"call":["val [] "]}," Ruby18Parser _reduce_70":{"type":"method","name":"_reduce_70","children":[],"call":[" s "]}," Ruby18Parser _reduce_69":{"type":"method","name":"_reduce_69","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_68":{"type":"method","name":"_reduce_68","children":[],"call":[" s ","val [] << ","val [] "]}," Ruby18Parser _reduce_67":{"type":"method","name":"_reduce_67","children":[],"call":[" s ","val [] << ","val [] "]}," Ruby18Parser _reduce_66":{"type":"method","name":"_reduce_66","children":[],"call":[" s ","val [] << ","val [] compact ","val [] "]}," Ruby18Parser _reduce_65":{"type":"method","name":"_reduce_65","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_64":{"type":"method","name":"_reduce_64","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_62":{"type":"method","name":"_reduce_62","children":[],"call":["val [] "]}," Ruby18Parser _reduce_60":{"type":"method","name":"_reduce_60","children":[],"call":[" new_yield ","val [] "]}," Ruby18Parser _reduce_59":{"type":"method","name":"_reduce_59","children":[],"call":[" new_super ","val [] "]}," Ruby18Parser _reduce_58":{"type":"method","name":"_reduce_58","children":[],"call":["val [] ","val [] << "," raise ","result [] == ","result [] "," new_call ","val [] to_sym ","val []  [] == "," new_call  [] == ","val []  [] "," new_call  [] "]}," Ruby18Parser _reduce_57":{"type":"method","name":"_reduce_57","children":[],"call":[" new_call ","val [] ","val [] to_sym "]}," Ruby18Parser _reduce_56":{"type":"method","name":"_reduce_56","children":[],"call":[" new_call ","val [] ","val [] to_sym "]}," Ruby18Parser _reduce_55":{"type":"method","name":"_reduce_55","children":[],"call":[" new_call ","val [] ","val [] to_sym "]}," Ruby18Parser _reduce_54":{"type":"method","name":"_reduce_54","children":[],"call":["result insert ","val [] "," raise ","result [] == ","result [] "," new_call ","val [] to_sym "," new_call  insert "," new_call  [] == "," new_call  [] "]}," Ruby18Parser _reduce_53":{"type":"method","name":"_reduce_53","children":[],"call":[" new_call ","val [] ","val [] to_sym "]}," Ruby18Parser _reduce_52":{"type":"method","name":"_reduce_52","children":[],"call":[" env unextend "," env "," new_iter ","val [] "]}," Ruby18Parser _reduce_51":{"type":"method","name":"_reduce_51","children":[],"call":[" env dynamic keys "," env dynamic "," env "]}," Ruby18Parser _reduce_50":{"type":"method","name":"_reduce_50","children":[],"call":[" lexer lineno "," lexer "," env extend "," env "]}," Ruby18Parser _reduce_49":{"type":"method","name":"_reduce_49","children":[],"call":[" new_call ","val [] "]}," Ruby18Parser _reduce_48":{"type":"method","name":"_reduce_48","children":[],"call":[" new_call ","val [] "]}," Ruby18Parser _reduce_46":{"type":"method","name":"_reduce_46","children":[],"call":[" s line "," s "," ret_args ","val [] ","val [] last "," s val [] last  "]}," Ruby18Parser _reduce_45":{"type":"method","name":"_reduce_45","children":[],"call":[" s line "," s "," ret_args ","val [] ","val [] last "," s val [] last  "]}," Ruby18Parser _reduce_44":{"type":"method","name":"_reduce_44","children":[],"call":[" s line "," s "," ret_args ","val [] ","val [] last "," s val [] last  "]}," Ruby18Parser _reduce_41":{"type":"method","name":"_reduce_41","children":[],"call":[" value_expr ","val [] "]}," Ruby18Parser _reduce_39":{"type":"method","name":"_reduce_39","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_38":{"type":"method","name":"_reduce_38","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_37":{"type":"method","name":"_reduce_37","children":[],"call":[" logop ","val [] "]}," Ruby18Parser _reduce_36":{"type":"method","name":"_reduce_36","children":[],"call":[" logop ","val [] "]}," Ruby18Parser _reduce_33":{"type":"method","name":"_reduce_33","children":[],"call":[" new_masgn ","val [] "]}," Ruby18Parser _reduce_32":{"type":"method","name":"_reduce_32","children":[],"call":[" new_masgn ","val [] "]}," Ruby18Parser _reduce_31":{"type":"method","name":"_reduce_31","children":[],"call":[" node_assign "," s ","val [] "]}," Ruby18Parser _reduce_30":{"type":"method","name":"_reduce_30","children":[],"call":[" backref_assign_error ","val [] "]}," Ruby18Parser _reduce_29":{"type":"method","name":"_reduce_29","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_28":{"type":"method","name":"_reduce_28","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_27":{"type":"method","name":"_reduce_27","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_26":{"type":"method","name":"_reduce_26","children":[],"call":[" s ","val [] ","val [] to_sym "]}," Ruby18Parser _reduce_25":{"type":"method","name":"_reduce_25","children":[],"call":[" new_op_asgn "]}," Ruby18Parser _reduce_24":{"type":"method","name":"_reduce_24","children":[],"call":[" new_masgn ","val [] "]}," Ruby18Parser _reduce_23":{"type":"method","name":"_reduce_23","children":[],"call":[" node_assign ","val [] "]}," Ruby18Parser _reduce_22":{"type":"method","name":"_reduce_22","children":[],"call":[" new_iter ","val [] "," s "," yyerror "," in_single > "," in_single "," in_def "]}," Ruby18Parser _reduce_21":{"type":"method","name":"_reduce_21","children":[],"call":[" new_iter ","val [] "," s "]}," Ruby18Parser _reduce_20":{"type":"method","name":"_reduce_20","children":[],"call":[" env extend "," env "," yyerror "," in_single > "," in_single "," in_def "]}," Ruby18Parser _reduce_19":{"type":"method","name":"_reduce_19","children":[],"call":[" s ","val [] "]}," Ruby18Parser _reduce_18":{"type":"method","name":"_reduce_18","children":[],"call":[" new_until ","val [] "]}," Ruby18Parser _reduce_17":{"type":"method","name":"_reduce_17","children":[],"call":[" new_while ","val [] "]}," Ruby18Parser _reduce_16":{"type":"method","name":"_reduce_16","children":[],"call":[" new_if ","val [] "]}," Ruby18Parser _reduce_15":{"type":"method","name":"_reduce_15","children":[],"call":[" new_if ","val [] "]}," Ruby18Parser _reduce_14":{"type":"method","name":"_reduce_14","children":[],"call":["val [] "]}," Ruby18Parser _reduce_13":{"type":"method","name":"_reduce_13","children":[],"call":[" yyerror "]}," Ruby18Parser _reduce_12":{"type":"method","name":"_reduce_12","children":[],"call":[" s ","val [] ","val [] to_sym "]}," Ruby18Parser _reduce_11":{"type":"method","name":"_reduce_11","children":[],"call":[" s ","val [] to_sym ","val [] "]}," Ruby18Parser _reduce_10":{"type":"method","name":"_reduce_10","children":[],"call":[" s line ","val [] "," s "]}," Ruby18Parser _reduce_9":{"type":"method","name":"_reduce_9","children":[],"call":[" lexer lineno "," lexer "," lexer lex_state= "]}," Ruby18Parser _reduce_8":{"type":"method","name":"_reduce_8","children":[],"call":["val [] "]}," Ruby18Parser _reduce_7":{"type":"method","name":"_reduce_7","children":[],"call":[" block_append ","val [] "]}," Ruby18Parser _reduce_4":{"type":"method","name":"_reduce_4","children":[],"call":[" new_compstmt "]}," Ruby18Parser _reduce_3":{"type":"method","name":"_reduce_3","children":[],"call":[" new_body "]}," Ruby18Parser _reduce_2":{"type":"method","name":"_reduce_2","children":[],"call":["val [] "]}," Ruby18Parser _reduce_1":{"type":"method","name":"_reduce_1","children":[],"call":[" lexer lex_state= "," lexer "]}," Sexp original_line":{"type":"method","name":"original_line","children":[],"call":[]}," Util false?":{"type":"method","name":"false?","children":[],"call":["exp node_type == ","exp node_type ","exp is_a? "]}," Util true?":{"type":"method","name":"true?","children":[],"call":["exp node_type == ","exp node_type ","exp is_a? "]}," Util result?":{"type":"method","name":"result?","children":[],"call":["exp node_type == ","exp node_type ","exp is_a? "]}," Tracker index_call_sites":{"type":"method","name":"index_call_sites","children":[],"call":["Brakeman CallIndex  new ","finder calls ","finder process_source ","template [] "," each_template "," each_method ","Brakeman FindAllCalls  new ","template file ","template src "," each_class ","finder process_all_source "," initializers each "," initializers ","Brakeman FindAllCalls  new  calls ","Brakeman FindAllCalls  new  process_source ","Brakeman FindAllCalls  new  process_all_source "]}," Scanner parse_ruby":{"type":"method","name":"parse_ruby","children":[],"call":["Ruby18Parser  new parse ","Ruby18Parser  new ","Ruby19Parser  new parse ","Ruby19Parser  new ","@ruby_parser new parse ","@ruby_parser new ","RubyParser  new parse ","RubyParser  new "]}," Scanner index_call_sites":{"type":"method","name":"index_call_sites","children":[],"call":[" tracker index_call_sites "," tracker "]}," RoutesProcessor new":{"type":"method","name":"new","children":[],"call":[]}," Rails3RoutesProcessor extract_action":{"type":"method","name":"extract_action","children":[],"call":["str split "]}," Rails3RoutesProcessor process_scope_block":{"type":"method","name":"process_scope_block","children":[],"call":[" process ","exp [] ","exp block "]}," Rails3RoutesProcessor process_resource_block":{"type":"method","name":"process_resource_block","children":[],"call":[" process ","exp [] "," process_resource "," in_controller_block ","exp block ","exp block_call "]}," Rails3RoutesProcessor process_resources_block":{"type":"method","name":"process_resources_block","children":[],"call":[" process ","exp [] "," process_resources "," in_controller_block ","exp block ","exp block_call "]}," Rails3RoutesProcessor process_resource":{"type":"method","name":"process_resource","children":[],"call":[" add_resource_routes "," current_controller= "," pluralize ","s [] to_s ","s [] "," symbol? ","exp [] [] each ","exp [] [] ","exp [] "," in_controller_block? ","s value to_s ","s value ","exp args each ","exp args ","exp each_arg "]}," Rails3RoutesProcessor process_resources":{"type":"method","name":"process_resources","children":[],"call":[" add_resources_routes "," current_controller= ","s [] ","exp [] [] each ","exp [] [] ","exp [] "," symbol? ","exp [] [] all? ","exp [] [] [] ","exp [] [] [] == "," in_controller_block? ","s value ","exp args each ","exp args ","exp args all? ","exp first_arg value ","exp first_arg ","exp args second node_type == ","exp args second node_type ","exp args second ","exp each_arg ","first_arg value ","second_arg node_type == ","second_arg node_type ","exp second_arg "," string? ","exp exp first_arg  value ","exp exp first_arg  ","exp first_arg  value ","exp second_arg  node_type == ","exp second_arg  node_type ","exp exp second_arg  "]}," Rails3RoutesProcessor process_verb":{"type":"method","name":"process_verb","children":[],"call":["@tracker routes [] << ","action to_sym ","@tracker routes [] ","@tracker routes "," current_controller= "," extract_action ","v [] "," string? "," hash_iterate ","args [] "," hash? ","route [] to_sym ","route [] ","route length != ","route length ","args [] [] split ","args [] [] ","k [] == ","k [] "," symbol? "," hash? ! ","exp [] [] ","exp [] "," in_controller_block? "," add_route "," add_route_from_string ","first_arg value split ","first_arg value ","k value == ","k value ","args second ","args first ","exp args ","exp second_arg ","exp first_arg ","@tracker routes []= "," action_route? ","first_arg value include? "," loose_action ","exp method "," hash_access ","@tracker args [] [] split s [] << ","@tracker first_arg value split s [] << ","@tracker args [] [] split s [] ","@tracker first_arg value split s [] ","@tracker args [] [] split s ","@tracker first_arg value split s ","exp [] []  [] ","exp args  [] ","args [] [] split  [] to_sym ","first_arg value split  [] to_sym ","args [] [] split  [] ","first_arg value split  [] ","args [] [] split  length != ","first_arg value split  length != ","args [] [] split  length ","first_arg value split  length ","exp [] []  [] [] split ","exp args  [] [] split ","exp [] []  [] [] ","exp args  [] [] "," add_args [] [] split  "," add_first_arg value split  "," add_args [] [] split _from_string "," add_first_arg value split _from_string ","args first  value split ","exp first_arg  value split ","args first  value ","exp first_arg  value ","exp [] []  second ","exp args  second ","exp [] []  first ","exp args  first ","exp exp [] []  ","exp exp args  ","exp exp second_arg  ","exp args first  ","exp exp first_arg  ","@tracker args [] [] split s []= ","@tracker first_arg value split s []= "," action_args [] [] split ? "," action_first_arg value split ? ","args first  value include? ","exp first_arg  value include? "]}," Rails3RoutesProcessor process_match":{"type":"method","name":"process_match","children":[],"call":["@tracker routes []= ","@tracker routes ","@tracker routes [] << ","v [] to_sym ","v [] ","@tracker routes [] ","k [] == ","k [] "," symbol? ","action to_sym "," current_controller= "," extract_action "," string? "," hash_iterate ","args [] "," hash? ","matcher include? ","matcher == ","args [] [] ","exp [] [] ","exp [] "," in_controller_block? "," add_route "," add_route_from_string ","matcher include? ! ","args [] nil? ","k value ","args last ","args first ","args first value ","exp args ","second_arg nil? ","first_arg value ","exp last_arg ","exp second_arg ","exp first_arg "," loose_action "," hash_access "," action_route? ","exp [] []  [] ","exp args  [] ","args [] []  include? ","args first value  include? ","first_arg value  include? ","args [] []  == ","args first value  == ","first_arg value  == ","exp [] []  [] [] ","exp args  [] [] ","args [] []  include? ! ","args first value  include? ! ","first_arg value  include? ! ","exp [] []  [] nil? ","exp args  [] nil? ","exp [] []  last ","exp args  last ","exp [] []  first ","exp args  first ","exp [] []  first value ","exp args  first value ","exp exp [] []  ","exp exp args  ","exp second_arg  nil? ","exp first_arg  value ","exp exp last_arg  ","exp exp second_arg  ","exp exp first_arg  "]}," Rails3RoutesProcessor process_root":{"type":"method","name":"process_root","children":[],"call":["@tracker routes [] << ","action to_sym ","@tracker routes [] ","@tracker routes "," current_controller= "," extract_action ","v [] "," string? ","k [] == ","k [] "," symbol? "," hash_iterate ","args [] ","exp [] [] ","exp [] "," v [] "," v ","value [] "," hash_access "," add_route_from_string ","args first ","exp args ","exp first_arg "," hash? ","exp [] []  [] ","exp args  [] "," hash_access  [] ","exp [] []  first ","exp args  first ","exp exp [] []  ","exp exp args  "]}," Rails3RoutesProcessor process_namespace":{"type":"method","name":"process_namespace","children":[],"call":["@prefix pop "," process ","@prefix << "," camelize ","exp [] ","exp [] [] [] [] ","exp [] [] [] ","exp [] [] ","exp block ","exp block_call first_arg value ","exp block_call first_arg ","exp block_call ","arg value "," string? "," symbol? ","exp exp []  ","exp exp block  ","exp exp [] _call first_arg value ","exp exp block _call first_arg value ","exp block_call first_exp block_call first_arg  value ","exp exp [] _call first_arg ","exp exp block _call first_arg ","exp block_call first_exp block_call first_arg  ","exp exp [] _call ","exp exp block _call ","exp block_call first_arg  value "]}," Rails3RoutesProcessor process_iter":{"type":"method","name":"process_iter","children":[],"call":[" process_scope_block "," process_resources_block "," process_resource_block "," process_namespace ","exp [] [] ","exp [] "," process_controller_block ","exp block_call method ","exp block_call "," process_default "]}," Rails3RoutesProcessor process_call":{"type":"method","name":"process_call","children":[],"call":[" process_match "," process_verb "," process_default "," process_root "," process_resource "," process_resources ","exp [] ","exp method "]}," Rails3RoutesProcessor process_routes":{"type":"method","name":"process_routes","children":[],"call":[" process ","exp dup ","Brakeman AliasProcessor  new process_safely ","Brakeman AliasProcessor  new "]}," Rails3RoutesProcessor initialize":{"type":"method","name":"initialize","children":[],"call":["Sexp  new "]}," Rails3ConfigProcessor get_rails_config":{"type":"method","name":"get_rails_config","children":[],"call":[" raise "," get_rails_config << ","exp [] "," get_rails_config ","exp [] == "," call? ","exp [] to_s [] to_sym ","exp [] to_s [] ","exp [] to_s ","exp node_type == ","exp node_type "," sexp? "," node_type? ","exp method ","exp target ","exp target == ","exp method to_s [] to_sym ","exp method to_s [] ","exp method to_s "]}," Rails3ConfigProcessor include_rails_config?":{"type":"method","name":"include_rails_config?","children":[],"call":["target == "," include_rails_config? ","target [] == ","target [] "," call? ","exp [] ","target target == ","target target ","exp target ","exp []  == ","exp target  == ","exp []  [] == ","exp target  [] == ","exp []  [] ","exp target  [] ","exp []  exp []  == ","exp target  exp target  == ","exp []  exp []  ","exp target  exp target  ","exp exp []  ","exp exp target  "]}," Rails3ConfigProcessor process_attrasgn":{"type":"method","name":"process_attrasgn","children":[],"call":["level []= ","exp [] [] ","exp [] ","options last ","level [] ","options [] each ","options [] ","@tracker config [] ","@tracker config "," get_rails_config "," include_rails_config? ","@tracker config [] []= ","exp [] length > ","exp [] length ","exp [] to_s [] to_sym ","exp [] to_s [] ","exp [] to_s ","exp [] == ","exp first_arg ","exp args ","exp args length > ","exp args length ","exp method to_s [] to_sym ","exp method to_s [] ","exp method to_s ","exp method ","exp target == ","exp target ","Brakeman  debug ","options map join ","options map ","option is_a? ! ","option is_a? ","@tracker config rails ","@tracker config rails []= ","@tracker config set_rails_config ","level []  []= ","@tracker config []  []= ","@tracker config rails  []= "," get_rails_config  last ","level [] s last ","level []  [] ","@tracker config []  [] ","@tracker config rails  [] "," get_rails_config  [] each ","level [] s [] each "," get_rails_config  [] ","level [] s [] "," get_rails_config  map join ","level [] s map join "," get_rails_config  map ","level [] s map ","level []  is_a? ! ","level []  is_a? "]}," Rails3ConfigProcessor process_class":{"type":"method","name":"process_class","children":[],"call":[" process ","exp [] "," sexp? ","exp [] == ","exp body ","exp class_name == ","exp class_name "," process_all "]}," Rails3ConfigProcessor process_iter":{"type":"method","name":"process_iter","children":[],"call":[" process ","exp [] "," sexp? ","exp [] [] [] == ","exp [] [] [] ","exp [] [] "," node_type? ","exp body ","exp block_call method == ","exp block_call method ","exp block_call ","exp block_call target "," process_all ","exp block ","call method == ","call method ","call target rhs == ","call target rhs ","call target ","exp block_exp block_call  method == ","exp block_exp block_call  method ","exp block_exp block_call  ","exp block_exp block_call  target ","exp block_call  method == ","exp block_call  method ","exp block_call  target rhs == ","exp block_call  target rhs ","exp block_call  target "]}," Rails3ConfigProcessor process_config":{"type":"method","name":"process_config","children":[],"call":[" process ","Brakeman AliasProcessor  new process_safely ","Brakeman AliasProcessor  new "]}," Rails3ConfigProcessor initialize":{"type":"method","name":"initialize","children":[],"call":["@tracker config [] ","@tracker config "]}," Rails2RoutesProcessor check_for_controller_name":{"type":"method","name":"check_for_controller_name","children":[],"call":["v [] ","k [] == ","k [] "," hash_iterate "," hash? ","args each ","value [] "," hash_access ","value value "," symbol? "," string? "," hash_access  [] "," hash_access   hash_access  "]}," Rails2RoutesProcessor process_collection":{"type":"method","name":"process_collection","children":[],"call":["routes << ","action [] "," hash_iterate ","@tracker routes [] ","@tracker routes ","exp node_type == ","exp node_type ","action value ","@tracker routes []  << ","@tracker @tracker routes []  [] ","@tracker @tracker routes []  "]}," Rails2RoutesProcessor process_named_route":{"type":"method","name":"process_named_route","children":[],"call":[" process_connect "]}," Rails2RoutesProcessor process_namespace":{"type":"method","name":"process_namespace","children":[],"call":["@prefix pop "," process ","Sexp  new ","formal_args [] ","@prefix << "," camelize ","call [] [] [] ","call [] [] ","call [] ","exp [] ","formal_args lhs ","call first_arg value ","call first_arg ","exp block ","exp block_args ","exp block_call ","formal_args value ","exp []  [] ","exp block_args  [] ","exp []  [] [] [] ","exp block_call  [] [] [] ","exp []  [] [] ","exp block_call  [] [] ","exp block_call  [] ","exp []  lhs ","exp block_args  lhs ","exp []  first_arg value ","exp block_call  first_arg value ","exp []  first_arg ","exp block_call  first_arg ","exp exp []  ","exp exp block  ","exp exp [] _args ","exp exp block _args ","exp exp [] _call ","exp exp block _call ","exp block_exp []  ","exp block_exp block_call  ","exp []  value ","exp block_args  value "]}," Rails2RoutesProcessor process_with_options":{"type":"method","name":"process_with_options","children":[],"call":[" process ","exp [] "," current_controller= "," check_for_controller_name ","exp [] [] ","Sexp  new ","exp [] [] [] ","exp block ","exp block_call args ","exp block_call ","exp block_args lhs ","exp block_args ","exp block_call args last ","exp block_args value ","exp block_call last_arg "]}," Rails2RoutesProcessor process_connect":{"type":"method","name":"process_connect","children":[],"call":["@tracker routes [] << ","exp [] [] [] to_sym ","exp [] [] [] ","exp [] [] ","i + ","exp [] ","@tracker routes [] ","@tracker routes ","e [] == ","e [] "," symbol? ","exp [] each_with_index ","@tracker routes [] [] == ","@tracker routes [] [] ","@tracker routes [] is_a? ","@tracker routes []= ","exp line ","exp [] [] include? ","exp [] [] == "," string? "," current_controller= "," check_for_controller_name ","exp last [] value to_sym ","exp last [] value ","exp last [] ","exp last ","e value == ","e value ","exp last each_with_index ","exp first value include? ","exp first value ","exp first ","exp first value == ","exp empty? ","action value to_sym ","action value "," node_type? "," current_ check_for_controller_name = "," check_for_ check_for_controller_name _name ","exp last []  value to_sym ","exp last []  value "]}," Rails2RoutesProcessor process_resource":{"type":"method","name":"process_resource","children":[],"call":[" process_resource_options ","exp [] "," add_resource_routes "," current_controller= "," pluralize ","exp [] [] to_s ","exp [] [] ","argument node_type == ","argument node_type "," sexp? ","exp each "," check_for_controller_name "," node_type? ","exp last ","exp first value to_s ","exp first value ","exp first "," current_ check_for_controller_name = "," check_for_ check_for_controller_name _name "]}," Rails2RoutesProcessor process_option_except":{"type":"method","name":"process_option_except","children":[],"call":["routes delete ","e [] ","exp [] each ","exp [] ","@tracker routes [] ","@tracker routes ","exp node_type == ","exp node_type ","e value ","@tracker routes []  delete ","@tracker @tracker routes []  [] ","@tracker @tracker routes []  "]}," Rails2RoutesProcessor process_option_only":{"type":"method","name":"process_option_only","children":[],"call":["routes << ","e [] ","exp [] each ","exp [] ","exp node_type == ","exp node_type ","routes delete ","(sym :index) each ","@tracker routes [] ","@tracker routes ","e value ","@tracker routes []  << ","@tracker routes []  delete ","@tracker @tracker routes []  [] ","@tracker @tracker routes []  "]}," Rails2RoutesProcessor process_resource_options":{"type":"method","name":"process_resource_options","children":[],"call":[" raise "," process_option_except "," process_option_only "," current_controller= "," process_resources ","value [] "," current_controller "," process_resource "," process_collection ","option [] "," hash_iterate ","exp node_type == ","exp node_type ","exp concat ","@with_options [] ","exp nil? ","Brakeman  notify ","exp concat  node_type == ","exp concat  node_type ","exp concat  concat ","exp concat  nil? "]}," Rails2RoutesProcessor process_resources":{"type":"method","name":"process_resources","children":[],"call":[" process_resource_options ","exp [] "," add_resources_routes "," current_controller= ","exp [] [] ","argument node_type == ","argument node_type "," sexp? ","exp each "," check_for_controller_name "," node_type? ","exp last ","exp first value ","exp first "," current_ check_for_controller_name = "," check_for_ check_for_controller_name _name "]}," Rails2RoutesProcessor process_iter":{"type":"method","name":"process_iter","children":[],"call":[" process_with_options "," process_default ","exp [] "," process_resources ","exp [] [] [] ","exp [] [] "," process_namespace ","exp [] [] == "," nested "," map ","exp block ","exp block_call args ","exp block_call ","exp block_call method ","target == ","exp block_call target ","exp block_call exp [] []  ","exp block_call exp block_call method  ","exp block_call target  == ","exp block_call exp block_call target  "]}," Rails2RoutesProcessor process_map":{"type":"method","name":"process_map","children":[],"call":[" process_named_route "," process_connect "," process_resources "," process_resource ","exp [] ","exp [] [] ","exp method ","exp args ","exp exp [] []  ","exp exp args  "]}," Rails2RoutesProcessor process_call":{"type":"method","name":"process_call","children":[],"call":[" process_default "," process_map ","target == "," nested "," map ","exp [] ","target nil? ! ","target nil? ","exp target ","exp []  == ","exp target  == ","exp []  nil? ! ","exp target  nil? ! ","exp []  nil? ","exp target  nil? ","exp exp []  ","exp exp target  "]}," Rails2RoutesProcessor process_routes":{"type":"method","name":"process_routes","children":[],"call":[" process ","Brakeman RouteAliasProcessor  new process_safely ","Brakeman RouteAliasProcessor  new "]}," Rails2RoutesProcessor initialize":{"type":"method","name":"initialize","children":[],"call":["Sexp  new "]}," Rails2ConfigProcessor get_rails_config":{"type":"method","name":"get_rails_config","children":[],"call":[" raise "," get_rails_config << ","exp [] "," get_rails_config ","exp [] == "," call? ","exp [] to_s [] to_sym ","exp [] to_s [] ","exp [] to_s ","exp node_type == ","exp node_type "," sexp? "," node_type? ","exp method ","exp target ","exp target == ","exp method to_s [] to_sym ","exp method to_s [] ","exp method to_s "]}," Rails2ConfigProcessor include_rails_config?":{"type":"method","name":"include_rails_config?","children":[],"call":["target == "," include_rails_config? ","target [] == ","target [] "," call? ","exp [] ","target target == ","target target ","exp target ","exp []  == ","exp target  == ","exp []  [] == ","exp target  [] == ","exp []  [] ","exp target  [] ","exp []  exp []  == ","exp target  exp target  == ","exp []  exp []  ","exp target  exp target  ","exp exp []  ","exp exp target  "]}," Rails2ConfigProcessor process_cdecl":{"type":"method","name":"process_cdecl","children":[],"call":["@tracker config []= ","exp [] [] ","exp [] ","@tracker config ","exp [] == ","exp rhs value ","exp rhs ","exp lhs == ","exp lhs ","@tracker config rails_version= ","@tracker config set_rails_version "]}," Rails2ConfigProcessor process_attrasgn":{"type":"method","name":"process_attrasgn","children":[],"call":["level []= ","exp [] [] ","exp [] ","options last ","level [] ","options [] each ","options [] ","@tracker config [] ","@tracker config "," get_rails_config "," include_rails_config? ","@tracker config [] []= ","exp [] length > ","exp [] length ","exp [] to_s [] to_sym ","exp [] to_s [] ","exp [] to_s ","exp [] == ","exp first_arg ","exp args ","exp args length > ","exp args length ","exp method to_s [] to_sym ","exp method to_s [] ","exp method to_s ","exp method ","exp target == ","exp target ","@tracker config rails ","@tracker config rails []= ","level []  []= ","@tracker config []  []= ","@tracker config rails  []= "," get_rails_config  last ","level []  [] ","@tracker config []  [] ","@tracker config rails  [] "," get_rails_config  [] each "," get_rails_config  [] "]}," Rails2ConfigProcessor process_call":{"type":"method","name":"process_call","children":[],"call":["@tracker config []= ","@tracker config "," warn ","exp [] [] [] == ","exp [] [] [] ","exp [] [] ","exp [] ","exp [] == "," process "," sexp? ","Brakeman  notify ","exp first_arg value == ","exp first_arg value ","exp first_arg ","exp method == ","exp method ","exp target ","@tracker config erubis= ","exp  process  ","exp exp []  ","exp exp target  "]}," Rails2ConfigProcessor process_config":{"type":"method","name":"process_config","children":[],"call":[" process ","Brakeman ConfigAliasProcessor  new process_safely ","Brakeman ConfigAliasProcessor  new "]}," Rails2ConfigProcessor initialize":{"type":"method","name":"initialize","children":[],"call":["@tracker config [] ","@tracker config "]}," FindAllCalls get_chain":{"type":"method","name":"get_chain","children":[],"call":[" get_target "," get_chain + ","call [] "," get_chain ","call node_type == ","call node_type "," sexp? "," node_type? ","call method ","call target ","call nil? "]}," FindAllCalls get_target":{"type":"method","name":"get_target","children":[],"call":[" class_name ","exp [] ","exp node_type "," sexp? ","exp value ","exp method ","t is_a? "," get_target ","exp target ","exp target nil? ","exp node_ get_target ype ","exp me get_target hod "," get_target  is_a? "," ge get_target _ get_target arge get_target  ","exp  get_target arge get_target  ","exp  get_target arge get_target  nil? "]}," FindAllCalls process_attrasgn":{"type":"method","name":"process_attrasgn","children":[],"call":[" process_call "]}," FindAllCalls process_call":{"type":"method","name":"process_call","children":[],"call":["@calls << ","call []= "," get_chain "," process ","exp [] "," call? "," get_target "," process_all ","exp args ","exp method ","exp target "," process_call_args "," make_location "," create_call_hash "," create_call_hash freeze "," get_ get_target  ","exp exp []  ","exp exp method  ","exp  get_target  "]}," FindAllCalls process_rlist":{"type":"method","name":"process_rlist","children":[],"call":[" process ","exp [] each ","exp [] "," process_all "]}," FindAllCalls process_selfdef":{"type":"method","name":"process_selfdef","children":[],"call":[" process ","exp [] ","exp body "," process_all "]}," FindAllCalls process_methdef":{"type":"method","name":"process_methdef","children":[],"call":[" process ","exp [] ","exp body "," process_all "]}," FindAllCalls process_source":{"type":"method","name":"process_source","children":[],"call":[" process ","opts [] "]}," FindAllCalls initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ConfigProcessor new":{"type":"method","name":"new","children":[],"call":[]}," AliasProcessor process_if":{"type":"method","name":"process_if","children":[],"call":[" process "," sexp? ","exps each ","exp [] "," false? "," true? ","@ignore_ifs ! ","@tracker options [] ","@tracker options "," process_default ","e node_type == ","e node_type ","exp then_clause ","exp condition ","exp else_clause ","@inside_if pop ","@inside_if << ","@ignore_ifs nil? "," merge_if_branch ","branch_scopes each ","branch_scopes << "," env current "," env ","exp []= "," process_if_branch ","2 + "," scope ","exps each_with_index "," env current []= ","condition target [] ","condition target "," env current [] ","condition first_arg "," array_include_all_literals? ","i == ","exp condition= "," node_type? "," early_return? "," safe_literal ","var line ","exps reverse! ","condition method == ","condition method "," call? "," hash_or_array_include_all_literals? "," equality_check? ","condition target == "," process_branch_with_value "," in_array_all_literals? ","exp []  each ","exp  process  ","exp exp condition=  ","exp condition target  ","@ignore_ifs !  pop ","@ignore_ifs !  << ","exp []  each_with_index "," process  target [] ","exp condition=  target [] ","condition target  target [] "," process  target ","exp condition=  target ","condition target  target "," process  first_arg ","exp condition=  first_arg ","condition target  first_arg ","exp  process = ","exp exp condition= = ","exp condition target = ","condition first_arg  line ","condition target  line ","exp []  reverse! "," process  method == ","exp condition=  method == ","condition target  method == "," process  method ","exp condition=  method ","condition target  method "," process  target == ","exp condition=  target == ","condition target  target == "," process_branch_with_condition first_arg  "," process_branch_with_ safe_literal  "]}," Brakeman Processor process_lib":{"type":"method","name":"process_lib","children":[],"call":["LibraryProcessor  new process_library ","LibraryProcessor  new "]}," Brakeman Processor process_initializer":{"type":"method","name":"process_initializer","children":[],"call":["@tracker initializers []= ","Pathname  new basename to_s ","Pathname  new basename ","Pathname  new ","@tracker initializers ","AliasProcessor  new process ","AliasProcessor  new ","BaseProcessor  new process ","BaseProcessor  new ","AliasProcessor  new process_safely ","BaseProcessor  new process_file "]}," Brakeman Processor process_template_alias":{"type":"method","name":"process_template_alias","children":[],"call":["TemplateAliasProcessor  new process_safely ","template [] ","TemplateAliasProcessor  new ","template src "]}," Brakeman Processor process_template":{"type":"method","name":"process_template","children":[],"call":["@tracker templates [] []= ","@tracker templates [] ","@tracker templates ","(send\n  (send\n    (send\n      (lvar :name) :to_s) :+\n    (str \".\")) :+\n  (send\n    (lvar :called_from) :to_s)) to_sym ","name to_s + + ","called_from to_s ","name to_s + ","name to_s "," abort ","ErubisTemplateProcessor  new process ","ErubisTemplateProcessor  new ","HamlTemplateProcessor  new process ","HamlTemplateProcessor  new ","ErbTemplateProcessor  new process ","ErbTemplateProcessor  new ","(dstr\n  (begin\n    (lvar :name))\n  (str \".\")\n  (begin\n    (lvar :called_from))) to_sym ","SlimTemplateProcessor  new process ","SlimTemplateProcessor  new ","@tracker templates [] type= ","@tracker templates [] src= ","(send\n  (send\n    (send\n      (lvar :(send\n  (send\n    (send\n      (lvar :name) :to_s) :+\n    (str \".\")) :+\n  (send\n    (lvar :called_from) :to_s)) to_sym ) :to_s) :+\n    (str \".\")) :+\n  (send\n    (lvar :called_from) :to_s)) to_sym ","(send\n  (send\n    (send\n      (lvar :(dstr\n  (begin\n    (lvar :name))\n  (str \".\")\n  (begin\n    (lvar :called_from))) to_sym ) :to_s) :+\n    (str \".\")) :+\n  (send\n    (lvar :called_from) :to_s)) to_sym ","(send\n  (send\n    (send\n      (lvar :name) :to_s) :+\n    (str \".\")) :+\n  (send\n    (lvar :called_from) :to_s)) to_sym  to_s + + ","(dstr\n  (begin\n    (lvar :name))\n  (str \".\")\n  (begin\n    (lvar :called_from))) to_sym  to_s + + ","(send\n  (send\n    (send\n      (lvar :name) :to_s) :+\n    (str \".\")) :+\n  (send\n    (lvar :called_from) :to_s)) to_sym  to_s + ","(dstr\n  (begin\n    (lvar :name))\n  (str \".\")\n  (begin\n    (lvar :called_from))) to_sym  to_s + ","(send\n  (send\n    (send\n      (lvar :name) :to_s) :+\n    (str \".\")) :+\n  (send\n    (lvar :called_from) :to_s)) to_sym  to_s ","(dstr\n  (begin\n    (lvar :name))\n  (str \".\")\n  (begin\n    (lvar :called_from))) to_sym  to_s ","(dstr\n  (begin\n    (lvar :(send\n  (send\n    (send\n      (lvar :name) :to_s) :+\n    (str \".\")) :+\n  (send\n    (lvar :called_from) :to_s)) to_sym ))\n  (str \".\")\n  (begin\n    (lvar :called_from))) to_sym ","(dstr\n  (begin\n    (lvar :(dstr\n  (begin\n    (lvar :name))\n  (str \".\")\n  (begin\n    (lvar :called_from))) to_sym ))\n  (str \".\")\n  (begin\n    (lvar :called_from))) to_sym "]}," Brakeman Processor process_model":{"type":"method","name":"process_model","children":[],"call":["AliasProcessor  new process ","AliasProcessor  new ","ModelProcessor  new process_model ","ModelProcessor  new ","AliasProcessor  new process_all "]}," Brakeman Processor process_controller_alias":{"type":"method","name":"process_controller_alias","children":[],"call":["ControllerAliasProcessor  new process ","ControllerAliasProcessor  new ","ControllerAliasProcessor  new process_controller "]}," Brakeman Processor process_controller":{"type":"method","name":"process_controller","children":[],"call":["ControllerProcessor  new process_controller ","ControllerProcessor  new ","LibraryProcessor  new process_library ","LibraryProcessor  new "," contains_class? "]}," Brakeman Processor process_routes":{"type":"method","name":"process_routes","children":[],"call":["RoutesProcessor  new process_routes ","RoutesProcessor  new "]}," Brakeman Processor process_gems":{"type":"method","name":"process_gems","children":[],"call":["GemProcessor  new process_gems ","GemProcessor  new "]}," Brakeman Processor process_config":{"type":"method","name":"process_config","children":[],"call":["ConfigProcessor  new process_config ","ConfigProcessor  new "]}," Brakeman Processor tracked_events":{"type":"method","name":"tracked_events","children":[],"call":[]}," Brakeman Processor initialize":{"type":"method","name":"initialize","children":[],"call":["Tracker  new "]}," Checks get_check_name":{"type":"method","name":"get_check_name","children":[],"call":[]}," Checks all_warnings":{"type":"method","name":"all_warnings","children":[],"call":["@warnings + + + ","@warnings + + ","@warnings + "]}," CheckSessionSettings initialize":{"type":"method","name":"initialize","children":[],"call":["Sexp  new "," tracker options [] "," tracker options "," tracker "]}," CheckRedirect check_url_for":{"type":"method","name":"check_url_for","children":[],"call":["v [] == ","v [] ","v is_a? ","k [] == ","k [] "," symbol? "," hash_iterate "," hash? ","call [] each ","call [] "," false? "," hash_access ","call first_arg ","call first_call first_arg  "]}," CheckMassAssignment all_literals?":{"type":"method","name":"all_literals?","children":[],"call":["LITERALS  include? ","arg node_type "," all_literals? ","arg node_type == "," sexp? ","args all? "]}," BaseCheck debug_info":{"type":"method","name":"debug_info","children":[],"call":["Kernel  warn "]}," CallIndex filter_by_chain":{"type":"method","name":"filter_by_chain","children":[],"call":["call [] first == ","call [] first ","call [] ","calls select ","call [] first to_s match ","call [] first to_s ","target is_a? ","targets include? ","Set  new ","call [] first match ","Set  new  include? "]}," CallIndex filter_nested":{"type":"method","name":"filter_nested","children":[],"call":[" filter "]}," CallIndex filter_by_target":{"type":"method","name":"filter_by_target","children":[],"call":[" filter "]}," CallIndex filter_by_method":{"type":"method","name":"filter_by_method","children":[],"call":[" filter "]}," CallIndex filter":{"type":"method","name":"filter","children":[],"call":["call [] == ","call [] ","calls select ","call [] to_s match ","call [] to_s ","value is_a? ","values include? ","Set  new ","call [] match ","Set  new  include? "]}," CallIndex calls_with_no_target":{"type":"method","name":"calls_with_no_target","children":[],"call":["@calls_by_target [] "]}," CallIndex calls_by_methods":{"type":"method","name":"calls_by_methods","children":[],"call":["calls concat ","@calls_by_method [] ","@calls_by_method key? ","methods each ","m to_sym ","methods map "]}," CallIndex calls_by_method":{"type":"method","name":"calls_by_method","children":[],"call":["@calls_by_method [] ","method to_sym ","methods first to_sym ","methods first "," calls_by_methods ","methods length > ","methods length ","methods empty? ","m match ","@methods select ","method is_a? "," calls_by_methods_regex "]}," CallIndex calls_by_targets":{"type":"method","name":"calls_by_targets","children":[],"call":["calls concat ","@calls_by_target [] ","@calls_by_target key? ","targets each "]}," CallIndex calls_by_target":{"type":"method","name":"calls_by_target","children":[],"call":["@calls_by_target [] "," calls_by_target [] ","targets first "," calls_by_target "," calls_by_targets ","targets length > ","targets length ","targets empty? ","t match ","@targets select ","target is_a? "," calls_by_targets_regex "]}," CallIndex find_chain":{"type":"method","name":"find_chain","children":[],"call":[" filter_by_chain ","calls nil? "," calls_by_method ","options [] "," filter_by_chain  nil? "," calls_by_method  nil? ","  filter_by_chain _by_method ","  calls_by_method _by_method "]}," CallIndex index_calls":{"type":"method","name":"index_calls","children":[],"call":["@calls_by_target [] << ","@calls_by_target [] ","call [] ","@calls_by_method [] << ","@calls_by_method [] ","@targets << ","call [] to_s ","@methods << ","calls each ","call [] is_a? ","call [] node_type ","call [] node_type == ","call [] is_a? ! ","target node_type ","target node_type == ","target is_a? ! ","target is_a? ","@calls_by_call []  [] << ","@calls_by_call []  [] ","@call [] s << ","call []  node_type ","call []  node_type == ","call []  is_a? ! ","call []  is_a? "]}," CallIndex find_calls":{"type":"method","name":"find_calls","children":[],"call":[" filter_nested ","calls nil? "," warn ","options inspect "," calls_by_method "," filter_by_target ","target ! ","options key? "," filter_by_method "," calls_by_target "," calls_by_targets "," calls_by_methods ","target length > ","method length ","target length ","method is_a? ","target is_a? "," find_chain ","options [] "," notify "," raise "," filter_options []  "," filter_nested  nil? "," calls_by_method  nil? "," filter_by_target  nil? "," filter_by_method  nil? "," calls_by_target  nil? "," calls_by_targets  nil? ","  filter_nested _by_method ","  calls_by_method _by_method ","  filter_by_target _by_method ","  filter_by_method _by_method ","  calls_by_target _by_method ","  calls_by_targets _by_method ","  filter_nested _by_target ","  calls_by_method _by_target ","  filter_by_target _by_target ","  filter_by_method _by_target ","  calls_by_target _by_target ","  calls_by_targets _by_target ","  filter_nested _by_targets ","  calls_by_method _by_targets ","  filter_by_target _by_targets ","  filter_by_method _by_targets ","  calls_by_target _by_targets ","  calls_by_targets _by_targets ","  filter_nested _by_methods ","  calls_by_method _by_methods ","  filter_by_target _by_methods ","  filter_by_method _by_methods ","  calls_by_target _by_methods ","  calls_by_targets _by_methods "]}," CallIndex initialize":{"type":"method","name":"initialize","children":[],"call":[" index_calls ","Set  new ","h []= ","Hash  new "]}," Sexp comments=":{"type":"method","name":"comments=","children":[],"call":[" old_comments_set "]}," Sexp paren=":{"type":"method","name":"paren=","children":[],"call":[]}," Sexp find_node":{"type":"method","name":"find_node","children":[],"call":[" old_find_node "]}," Sexp find_and_replace_all":{"type":"method","name":"find_and_replace_all","children":[],"call":[" old_fara "]}," Sexp compact":{"type":"method","name":"compact","children":[],"call":[" old_compact "]}," Sexp file=":{"type":"method","name":"file=","children":[],"call":[" old_file_set "]}," Sexp line=":{"type":"method","name":"line=","children":[],"call":[" old_line_set "]}," Sexp line":{"type":"method","name":"line","children":[],"call":[" old_line "]}," Sexp hash":{"type":"method","name":"hash","children":[],"call":[]}," Sexp initialize":{"type":"method","name":"initialize","children":[],"call":[" old_init "]}," Util number?":{"type":"method","name":"number?","children":[],"call":["exp [] is_a? ","exp [] ","exp node_type == ","exp node_type ","exp is_a? "]}," Scanner process_config_file":{"type":"method","name":"process_config_file","children":[],"call":[" tracker error ","e backtrace ","e exception ","e message + ","e message "," tracker "," warn ","@processor process_config "," parse_ruby ","File  read ","File  exists? ","Brakeman  notify ","@app_tree read ","@app_tree exists? "," parse_ruby_file ","path exists? ","@app_tree file_path ","@app_tree file_path  exists? ","@app_tree file_@app_tree file_path  "]}," TemplateAliasProcessor find_push_target":{"type":"method","name":"find_push_target","children":[],"call":["exp [] == ","exp [] ","exp node_type == ","exp node_type "," sexp? ","exp value == ","exp value ","exp method == ","exp method ","exp target method == ","exp target method ","exp target "," call? "]}," AliasProcessor find_push_target":{"type":"method","name":"find_push_target","children":[],"call":[" find_push_target ","exp [] ","exp [] == "," call? ","exp target ","exp method == ","exp method "]}," Brakeman rescan":{"type":"method","name":"rescan","children":[],"call":[]}," Brakeman install_rake_task":{"type":"method","name":"install_rake_task","children":[],"call":[]}," Warning eql?":{"type":"method","name":"eql?","children":[],"call":[" hash == ","other_warning hash "," hash "]}," Warning hash":{"type":"method","name":"hash","children":[],"call":[" format_message hash "," format_message "," to_s hash "," to_s "]}," Util context_for":{"type":"method","name":"context_for","children":[],"call":["context << ","current_line >= ","current_line > ","line strip == ","line strip ","f each_line ","File  open ","start_line < ","warning line + ","warning line ","warning line - ","File  exist? "," file_for ","@app_tree path_exists? ","warning line -  < ","  file_for _for "]}," Util file_by_name":{"type":"method","name":"file_by_name","children":[],"call":[" file_for ","string_name split [] to_sym ","string_name split [] ","string_name split ","string_name include? ","tracker templates [] [] ","tracker templates [] ","tracker templates "," underscore ","tracker models [] [] ","tracker models [] ","tracker models ","tracker controllers [] [] ","tracker controllers [] ","tracker controllers ","tracker options [] ","tracker options "," camelize == "," camelize ","string_name =~ ","name to_sym ","name to_s ","tracker models [] [] first ","tracker controllers [] [] first ","tracker app_path ","tracker templates [] file ","tracker models [] file ","tracker controllers [] file ","string_string_name split [] to_sym  split [] to_sym ","string_name to_sym  split [] to_sym ","name to_s  split [] to_sym ","string_string_name split [] to_sym  split [] ","string_name to_sym  split [] ","name to_s  split [] ","string_string_name split [] to_sym  split ","string_name to_sym  split ","name to_s  split ","string_string_name split [] to_sym  include? ","string_name to_sym  include? ","name to_s  include? ","string_string_name split [] to_sym  =~ ","string_name to_sym  =~ ","name to_s  =~ ","string_name split [] to_sym  to_sym ","name to_sym  to_sym ","string_name split [] to_sym  to_s ","name to_sym  to_s ","tracker app_ file_for  ","tracker app_tracker templates [] []  ","tracker app_tracker models [] []  ","tracker app_tracker controllers [] []  ","tracker app_tracker options []  ","tracker app_tracker models [] [] first  ","tracker app_tracker controllers [] [] first  ","tracker app_tracker app_path  ","tracker app_tracker templates [] file  ","tracker app_tracker models [] file  ","tracker app_tracker controllers [] file  "]}," Util file_for":{"type":"method","name":"file_for","children":[],"call":[" file_by_name ","warning class ","warning model ","warning template [] ","warning template ","warning controller ","warning warning_set ","File  expand_path ","tracker options [] ","tracker options ","warning file "," tracker ","tracker nil? ","warning template is_a? ","tracker app_path ","warning template name ","warning template file "]}," Tracker reset_routes":{"type":"method","name":"reset_routes","children":[],"call":[]}," Tracker reset_model":{"type":"method","name":"reset_model","children":[],"call":["@models delete ","model [] == ","model [] ","@models each ","model [] include? ","model files include? ","model files "]}," Tracker reset_template":{"type":"method","name":"reset_template","children":[],"call":["@templates delete ","name to_sym ","@template_cache clear ","name to_sym  to_sym "]}," Tracker reset_templates":{"type":"method","name":"reset_templates","children":[],"call":["@template_cache clear ","name to_s include? ","name to_s ","@templates delete_if ","options [] ","template [] rendered_from_controller? ","template [] ","template rendered_from_controller? "]}," Tracker reindex_call_sites":{"type":"method","name":"reindex_call_sites","children":[],"call":["@call_index index_calls ","finder calls ","finder process_source ","template [] "," each_template ","locations include? ","definition [] ","definition node_type == ","definition node_type ","info [] each ","info [] ","(sym :private) each ","set each ","method_sets each ","Brakeman FindAllCalls  new ","@call_index remove_indexes_by_class ","method_sets << "," controllers ","classes_to_reindex merge "," controllers keys "," models "," models keys ","Set  new ","@call_index remove_template_indexes "," index_call_sites ","locations length == ","locations length ","src [] ","src node_type == ","src node_type ","template file ","template src ","info each_method ","finder process_all_source "," initializers each "," initializers ","@call_index remove_indexes_by_file ","definition file ","definition src ","Brakeman FindAllCalls  new  calls ","Brakeman FindAllCalls  new  process_source ","Set  new  merge ","definition []  [] ","definition src  [] ","definition []  node_type == ","definition src  node_type == ","definition []  node_type ","definition src  node_type ","template definition []  ","template definition src  ","Brakeman FindAllCalls  new  process_all_source ","definition definition []  ","definition definition src  "]}," Scanner process_model":{"type":"method","name":"process_model","children":[],"call":[" tracker error ","e backtrace ","e exception ","e message + ","e message "," tracker ","@processor process_model "," parse_ruby ","File  read ","@app_tree read_path "]}," Scanner process_template":{"type":"method","name":"process_template","children":[],"call":[" tracker error ","e backtrace ","e exception ","e message + ","e message "," tracker ","(dstr\n  (str \"While compiling HAML in \")\n  (begin\n    (lvar :path))) << ","@processor process_template "," parse_ruby ","Haml Engine  new precompiled ","Haml Engine  new "," tracker config [] ! ! "," tracker config [] ! "," tracker config [] "," tracker config ","type == ","src sub! ","ERB  new src ","ERB  new ","Brakeman ScannerErubis  new src ","Brakeman ScannerErubis  new ","Brakeman ErubisEscape  new src ","Brakeman ErubisEscape  new ","Brakeman RailsXSSErubis  new src ","Brakeman RailsXSSErubis  new "," options [] "," options ","File  read "," template_path_to_name ","path match [] to_sym ","path match [] ","path match ","Brakeman Rails2XSSErubis  new src ","Brakeman Rails2XSSErubis  new ","Brakeman Rails3XSSErubis  new src ","Brakeman Rails3XSSErubis  new ","Brakeman Rails2XSSPluginErubis  new src ","Brakeman Rails2XSSPluginErubis  new ","Brakeman Rails3Erubis  new src ","Brakeman Rails3Erubis  new ","@app_tree read_path ","(send\n  (const\n    (const nil :Slim) :Template) :new\n  (hash\n    (pair\n      (sym :disable_capture)\n      (true))\n    (pair\n      (sym :generator)\n      (const\n        (const\n          (const nil :Temple) :Generators) :RailsOutputBuffer)))) precompiled_template ","Slim Template  new ","Brakeman  load_dependency "," require ","Brakeman  load_brakeman_dependency ","template path ","template type ","template ast ","template name ","path match [] to_sym  == ","Haml Engine  new precompiled  sub! ","ERB  new src  sub! ","Brakeman ScannerErubis  new src  sub! ","Brakeman ErubisEscape  new src  sub! ","Brakeman RailsXSSErubis  new src  sub! ","Brakeman Rails2XSSErubis  new src  sub! ","Brakeman Rails3XSSErubis  new src  sub! ","Brakeman Rails2XSSPluginErubis  new src  sub! ","Brakeman Rails3Erubis  new src  sub! ","(send\n  (const\n    (const nil :Slim) :Template) :new\n  (hash\n    (pair\n      (sym :disable_capture)\n      (true))\n    (pair\n      (sym :generator)\n      (const\n        (const\n          (const nil :Temple) :Generators) :RailsOutputBuffer)))) precompiled_template  sub! ","ERB  new Haml Engine  new precompiled  ","ERB  new ERB  new src  ","ERB  new Brakeman ScannerErubis  new src  ","ERB  new Brakeman ErubisEscape  new src  ","ERB  new Brakeman RailsXSSErubis  new src  ","ERB  new Brakeman Rails2XSSErubis  new src  ","ERB  new Brakeman Rails3XSSErubis  new src  ","ERB  new Brakeman Rails2XSSPluginErubis  new src  ","ERB  new Brakeman Rails3Erubis  new src  ","ERB  new (send\n  (const\n    (const nil :Slim) :Template) :new\n  (hash\n    (pair\n      (sym :disable_capture)\n      (true))\n    (pair\n      (sym :generator)\n      (const\n        (const\n          (const nil :Temple) :Generators) :RailsOutputBuffer)))) precompiled_template  ","Brakeman ScannerErubis  new Haml Engine  new precompiled  ","Brakeman ScannerErubis  new ERB  new src  ","Brakeman ScannerErubis  new Brakeman ScannerErubis  new src  ","Brakeman ScannerErubis  new Brakeman ErubisEscape  new src  ","Brakeman ScannerErubis  new Brakeman RailsXSSErubis  new src  ","Brakeman ScannerErubis  new Brakeman Rails2XSSErubis  new src  ","Brakeman ScannerErubis  new Brakeman Rails3XSSErubis  new src  ","Brakeman ScannerErubis  new Brakeman Rails2XSSPluginErubis  new src  ","Brakeman ScannerErubis  new Brakeman Rails3Erubis  new src  ","Brakeman ScannerErubis  new (send\n  (const\n    (const nil :Slim) :Template) :new\n  (hash\n    (pair\n      (sym :disable_capture)\n      (true))\n    (pair\n      (sym :generator)\n      (const\n        (const\n          (const nil :Temple) :Generators) :RailsOutputBuffer)))) precompiled_template  ","Brakeman ErubisEscape  new Haml Engine  new precompiled  ","Brakeman ErubisEscape  new ERB  new src  ","Brakeman ErubisEscape  new Brakeman ScannerErubis  new src  ","Brakeman ErubisEscape  new Brakeman ErubisEscape  new src  ","Brakeman ErubisEscape  new Brakeman RailsXSSErubis  new src  ","Brakeman ErubisEscape  new Brakeman Rails2XSSErubis  new src  ","Brakeman ErubisEscape  new Brakeman Rails3XSSErubis  new src  ","Brakeman ErubisEscape  new Brakeman Rails2XSSPluginErubis  new src  ","Brakeman ErubisEscape  new Brakeman Rails3Erubis  new src  ","Brakeman ErubisEscape  new (send\n  (const\n    (const nil :Slim) :Template) :new\n  (hash\n    (pair\n      (sym :disable_capture)\n      (true))\n    (pair\n      (sym :generator)\n      (const\n        (const\n          (const nil :Temple) :Generators) :RailsOutputBuffer)))) precompiled_template  ","Brakeman RailsXSSErubis  new Haml Engine  new precompiled  ","Brakeman RailsXSSErubis  new ERB  new src  ","Brakeman RailsXSSErubis  new Brakeman ScannerErubis  new src  ","Brakeman RailsXSSErubis  new Brakeman ErubisEscape  new src  ","Brakeman RailsXSSErubis  new Brakeman RailsXSSErubis  new src  ","Brakeman RailsXSSErubis  new Brakeman Rails2XSSErubis  new src  ","Brakeman RailsXSSErubis  new Brakeman Rails3XSSErubis  new src  ","Brakeman RailsXSSErubis  new Brakeman Rails2XSSPluginErubis  new src  ","Brakeman RailsXSSErubis  new Brakeman Rails3Erubis  new src  ","Brakeman RailsXSSErubis  new (send\n  (const\n    (const nil :Slim) :Template) :new\n  (hash\n    (pair\n      (sym :disable_capture)\n      (true))\n    (pair\n      (sym :generator)\n      (const\n        (const\n          (const nil :Temple) :Generators) :RailsOutputBuffer)))) precompiled_template  "," template_path_to_ template_path_to_name  ","Brakeman Rails2XSSErubis  new Haml Engine  new precompiled  ","Brakeman Rails2XSSErubis  new ERB  new src  ","Brakeman Rails2XSSErubis  new Brakeman ScannerErubis  new src  ","Brakeman Rails2XSSErubis  new Brakeman ErubisEscape  new src  ","Brakeman Rails2XSSErubis  new Brakeman RailsXSSErubis  new src  ","Brakeman Rails2XSSErubis  new Brakeman Rails2XSSErubis  new src  ","Brakeman Rails2XSSErubis  new Brakeman Rails3XSSErubis  new src  ","Brakeman Rails2XSSErubis  new Brakeman Rails2XSSPluginErubis  new src  ","Brakeman Rails2XSSErubis  new Brakeman Rails3Erubis  new src  ","Brakeman Rails2XSSErubis  new (send\n  (const\n    (const nil :Slim) :Template) :new\n  (hash\n    (pair\n      (sym :disable_capture)\n      (true))\n    (pair\n      (sym :generator)\n      (const\n        (const\n          (const nil :Temple) :Generators) :RailsOutputBuffer)))) precompiled_template  ","Brakeman Rails3XSSErubis  new Haml Engine  new precompiled  ","Brakeman Rails3XSSErubis  new ERB  new src  ","Brakeman Rails3XSSErubis  new Brakeman ScannerErubis  new src  ","Brakeman Rails3XSSErubis  new Brakeman ErubisEscape  new src  ","Brakeman Rails3XSSErubis  new Brakeman RailsXSSErubis  new src  ","Brakeman Rails3XSSErubis  new Brakeman Rails2XSSErubis  new src  ","Brakeman Rails3XSSErubis  new Brakeman Rails3XSSErubis  new src  ","Brakeman Rails3XSSErubis  new Brakeman Rails2XSSPluginErubis  new src  ","Brakeman Rails3XSSErubis  new Brakeman Rails3Erubis  new src  ","Brakeman Rails3XSSErubis  new (send\n  (const\n    (const nil :Slim) :Template) :new\n  (hash\n    (pair\n      (sym :disable_capture)\n      (true))\n    (pair\n      (sym :generator)\n      (const\n        (const\n          (const nil :Temple) :Generators) :RailsOutputBuffer)))) precompiled_template  ","Brakeman Rails2XSSPluginErubis  new Haml Engine  new precompiled  ","Brakeman Rails2XSSPluginErubis  new ERB  new src  ","Brakeman Rails2XSSPluginErubis  new Brakeman ScannerErubis  new src  ","Brakeman Rails2XSSPluginErubis  new Brakeman ErubisEscape  new src  ","Brakeman Rails2XSSPluginErubis  new Brakeman RailsXSSErubis  new src  ","Brakeman Rails2XSSPluginErubis  new Brakeman Rails2XSSErubis  new src  ","Brakeman Rails2XSSPluginErubis  new Brakeman Rails3XSSErubis  new src  ","Brakeman Rails2XSSPluginErubis  new Brakeman Rails2XSSPluginErubis  new src  ","Brakeman Rails2XSSPluginErubis  new Brakeman Rails3Erubis  new src  ","Brakeman Rails2XSSPluginErubis  new (send\n  (const\n    (const nil :Slim) :Template) :new\n  (hash\n    (pair\n      (sym :disable_capture)\n      (true))\n    (pair\n      (sym :generator)\n      (const\n        (const\n          (const nil :Temple) :Generators) :RailsOutputBuffer)))) precompiled_template  ","Brakeman Rails3Erubis  new Haml Engine  new precompiled  ","Brakeman Rails3Erubis  new ERB  new src  ","Brakeman Rails3Erubis  new Brakeman ScannerErubis  new src  ","Brakeman Rails3Erubis  new Brakeman ErubisEscape  new src  ","Brakeman Rails3Erubis  new Brakeman RailsXSSErubis  new src  ","Brakeman Rails3Erubis  new Brakeman Rails2XSSErubis  new src  ","Brakeman Rails3Erubis  new Brakeman Rails3XSSErubis  new src  ","Brakeman Rails3Erubis  new Brakeman Rails2XSSPluginErubis  new src  ","Brakeman Rails3Erubis  new Brakeman Rails3Erubis  new src  ","Brakeman Rails3Erubis  new (send\n  (const\n    (const nil :Slim) :Template) :new\n  (hash\n    (pair\n      (sym :disable_capture)\n      (true))\n    (pair\n      (sym :generator)\n      (const\n        (const\n          (const nil :Temple) :Generators) :RailsOutputBuffer)))) precompiled_template  ","template path match [] to_sym  ","template  template_path_to_name  "]}," Scanner process_controller":{"type":"method","name":"process_controller","children":[],"call":[" tracker error ","e backtrace ","e exception ","e message + ","e message "," tracker ","@processor process_controller "," parse_ruby ","File  read ","@app_tree read_path "," path ","astfile path ","astfile ast "]}," Scanner process_lib":{"type":"method","name":"process_lib","children":[],"call":[" tracker error ","e backtrace ","e exception ","e message + ","e message "," tracker ","@processor process_lib "," parse_ruby ","File  read ","@app_tree read_path ","lib path ","lib ast "]}," Scanner process_initializer":{"type":"method","name":"process_initializer","children":[],"call":[" tracker error ","e backtrace ","e exception ","e message + ","e message "," tracker ","@processor process_initializer "," parse_ruby ","File  read ","@app_tree read_path ","init ast ","init path "]}," RescanReport diff":{"type":"method","name":"diff","children":[],"call":["@new_results diff ","Brakeman Differ  new diff ","Brakeman Differ  new "," all_warnings "]}," RescanReport warnings_changed?":{"type":"method","name":"warnings_changed?","children":[],"call":["(and\n  (send\n    (send\n      (send nil :diff) :[]\n      (sym :new)) :empty?)\n  (send\n    (send\n      (send nil :diff) :[]\n      (sym :fixed)) :empty?)) ! "," diff [] empty? "," diff [] "," diff "]}," RescanReport new_warnings":{"type":"method","name":"new_warnings","children":[],"call":[" diff [] "," diff "]}," RescanReport fixed_warnings":{"type":"method","name":"fixed_warnings","children":[],"call":[" diff [] "," diff "]}," RescanReport all_warnings":{"type":"method","name":"all_warnings","children":[],"call":[" new_results all_warnings "," new_results ","@tracker filtered_warnings "]}," RescanReport any_warnings?":{"type":"method","name":"any_warnings?","children":[],"call":[" all_warnings empty? ! "," all_warnings empty? "," all_warnings "]}," RescanReport initialize":{"type":"method","name":"initialize","children":[],"call":["tracker checks "]}," Rescanner file_type":{"type":"method","name":"file_type","children":[],"call":[]}," Rescanner rescan_model":{"type":"method","name":"rescan_model","children":[],"call":["@reindex << ","@reindex << << "," process_controllers "," process_templates ","num_models != "," tracker models length "," tracker models "," tracker "," process_model ","File  exists? "," tracker reset_model ","@app_tree path_exists? "," process_controller_data_flows "," process_template_data_flows ","astfile ast ","astfile path "," parse_ruby_files each "," parse_ruby_files ","model [] ","model nil? ","model files "," tracker models length  != ","num_ tracker reset_model s != "," tracker  tracker reset_model s length "," tracker  tracker reset_model s "," process_ tracker reset_model  "," tracker reset_ tracker reset_model  "," tracker reset_model  [] "," tracker reset_model  nil? "," tracker reset_model  files "]}," Rescanner rescan_template":{"type":"method","name":"rescan_template","children":[],"call":[" rescan_template ","template [] "," tracker templates [] ","r [] "," tracker templates "," tracker ","r [] == ","@processor process_controller_alias ","controller [] ","@paths include? "," tracker controllers [] "," tracker controllers ","rescan each ","rescan << ","1 to_sym ","name match ","2 to_sym ","name to_s ","template [] nil? ","template [] == "," tracker templates each ","Set  new ","@processor process_template_alias "," process_template "," tracker reset_template "," template_path_to_name ","path match ","File  exist? ","from match ","template [] each ","name to_s match ","@app_tree path_exists? ","@reindex << ","controller [] each ","fp file_list [] first ","fp file_list [] ","fp file_list ","template_parser parse_template ","@app_tree read_path ","Brakeman TemplateParser  new ","Brakeman FileParser  new ","from [] ","template [] to_sym == ","template_name to_sym ","template [] to_sym ","template file ","controller name ","controller src each ","controller src ","template render_path each ","template render_path ","template name to_sym == ","template name to_sym ","template name ","template file nil? ","template file == ","path read ","path exists? ","path relative match ","path relative ","fp file_list first "," tracker add_errors ","fp errors "," tracker options [] "," tracker options "," tracker app_tree "," rescan_ tracker templates []  "," Set  new _template "," tracker templates []  [] "," tracker  tracker templates [] s [] "," tracker  tracker templates [] s ","@processor process_ tracker controllers [] _alias "," tracker controllers []  [] "," tracker  tracker controllers [] s [] "," tracker  tracker controllers [] s ","Set  new  each ","Set  new  << ","name to_s  match ","name to_s  to_s "," tracker templates []  [] nil? "," tracker templates []  [] == "," tracker  tracker templates [] s each ","@processor process_ tracker templates [] _alias "," process_ tracker templates []  "," tracker reset_ tracker templates []  ","  tracker templates [] _path_to_name "," template_path_to_name to_s  "," tracker templates []  [] each ","name to_s  to_s match "," tracker controllers []  [] each ","Brakeman FileParser  new  file_list [] first ","Brakeman FileParser  new  file_list [] ","Brakeman FileParser  new  file_list "," tracker templates [] _parser parse_ tracker templates []  ","Brakeman TemplateParser  new  parse_template "," tracker templates []  [] to_sym == "," tracker templates [] _name to_sym ","template_name to_s  to_sym "," template_path_to_name  to_sym "," tracker templates []  [] to_sym "," tracker templates []  file "," tracker controllers []  name ","controller name to_s  "," tracker controllers []  src each "," tracker controllers []  src "," tracker templates []  render_path each "," tracker templates []  render_path "," tracker templates []  name to_sym == ","template name to_s  to_sym == "," tracker templates []  name to_sym ","template name to_s  to_sym "," tracker templates []  name ","template name to_s  "," tracker templates []  file nil? "," tracker templates []  file == ","Brakeman FileParser  new  file_list first ","Brakeman FileParser  new  errors "]}," Rescanner rescan_controller":{"type":"method","name":"rescan_controller","children":[],"call":["@processor process_controller_alias ","controller [] "," tracker templates delete "," tracker templates "," tracker ","template_name to_s match ","template_name to_s "," tracker templates keys each "," tracker templates keys ","controller [] == "," tracker controllers each "," tracker controllers "," process_controller "," tracker reset_template ","template [] grep empty? ","template [] grep ","template [] "," tracker templates each ","@reindex << << ","@reindex << ","controller [] each_value ","controller [] include? "," parse_ruby_files each "," parse_ruby_files ","controller nil? "," tracker reset_controller ","template [] include_controller? ","controller name ","controller src each ","controller src ","template render_path include_controller? ","template render_path ","controller files include? ","controller files ","@processor process_ tracker reset_controller _alias "," tracker reset_controller  [] "," tracker reset_controller  [] == "," tracker  tracker reset_controller s each "," tracker  tracker reset_controller s "," process_ tracker reset_controller  "," tracker reset_controller  [] each_value "," tracker reset_controller  [] include? "," tracker reset_controller  nil? "," tracker reset_ tracker reset_controller  ","template [] include_ tracker reset_controller ? "," tracker reset_controller  name "," tracker reset_controller  src each "," tracker reset_controller  src ","template render_path include_ tracker reset_controller ? "," tracker reset_controller  files include? "," tracker reset_controller  files "]}," Rescanner rescan_file":{"type":"method","name":"rescan_file","children":[],"call":[" process_gems ","@reindex << << ","@reindex << "," process_controllers "," process_routes "," tracker reset_templates "," tracker "," tracker reset_routes "," process_initializer "," process_config "," process_library "," rescan_model "," rescan_template "," rescan_controller "," file_type "," process_lib "," tracker config []= "," tracker config "," tracker config [] "," tracker config [] [] "," rescan_deleted_file ","File  exist? "," rescan_lib ","@app_tree path_exists? "," rescan_routes "," rescan_initializer "," tracker config escape_html= "," tracker config escape_html? "," tracker config has_gem? ","path exists? "]}," Rescanner rescan":{"type":"method","name":"rescan","children":[],"call":[" tracker reindex_call_sites "," tracker ","@reindex empty? ! ","@reindex empty? "," rescan_file "," warn "," tracker options [] "," tracker options ","paths_by_type [] each ","paths_by_type [] ","SCAN_ORDER  each ","paths_by_type [] << ","type == "," file_type ","@paths each ","paths_by_type []= "," tracker template_cache clear "," tracker template_cache ","Brakeman  debug ","paths_by_ file_type  [] each ","paths_by_ file_type  [] ","paths_by_ file_type  [] << "," file_type  == "," file_ file_type  ","paths_by_ file_type  []= "]}," Rescanner recheck":{"type":"method","name":"recheck","children":[],"call":["Brakeman RescanReport  new "," tracker checks "," tracker "," tracker run_checks "," rescan ","@changes nil? "]}," Rescanner initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new "," tracker checks "," tracker ","File  expand_path "," tracker options [] "," tracker options ","changed_files map ","@app_tree expand_path "," tracker filtered_warnings "," tracker app_tree file_path "," tracker app_tree "]}," FindAllCalls process_dxstr":{"type":"method","name":"process_dxstr","children":[],"call":["@calls << ","call []= "," process ","exp [] "," sexp? ","exp last "," make_location "," add_simple_call "]}," FindAllCalls process_render":{"type":"method","name":"process_render","children":[],"call":["@calls << ","call []= "," process ","exp [] "," sexp? ","exp last "," make_location "," add_simple_call "," process_all "]}," Options get_options":{"type":"method","name":"get_options","children":[],"call":["parser parse ","parser parse! ","options []= ","opts on_tail ","opts on ","opts separator ","File  expand_path ","3 - ","level to_i ","limit to_i ","(send\n  (str \"to_\") :<<\n  (send\n    (lvar :type) :to_s)) to_sym ","to_ << ","type to_s ","type == ","options [] << ","options [] ","Set  new ","Check << ","s [] != ","s [] ","skip each ","options [] merge ","checks []= ","checks each_with_index ","e to_sym ","methods map ","option ! ","opts banner= ","OptionParser  new ","f to_sym ","files map ","options [] push ","options [] shift ","width to_i ","paths map ","separate ! "," create_option_parser ","parCheck << er parCheck << e "," create_option_parser  parse ","parCheck << er parCheck << e! "," create_option_parser  parse! ","optionCheck <<  []= ","optCheck <<  on_tail ","optCheck <<  on ","optCheck <<  Check << eparator ","(Check << end\n  (Check << tr \"to_\") :<<\n  (Check << end\n    (lvar :type) :to_Check << )) to_Check << ym ","type to_Check <<  ","optionCheck <<  [] << ","optionCheck <<  [] ","Check <<  [] != ","Check <<  [] ","Check << kip each ","optionCheck <<  [] merge ","checkCheck <<  []= ","checkCheck <<  each_with_index ","e to_Check << ym ","methodCheck <<  map ","optCheck <<  banner= ","OptionParCheck << er  new ","f to_Check << ym ","fileCheck <<  map ","optionCheck <<  [] puCheck << h ","optionCheck <<  [] Check << hift ","pathCheck <<  map ","Check << eparate ! "," create_option_parCheck << er "," create_option_ create_option_parser  "]}," Options parse!":{"type":"method","name":"parse!","children":[],"call":[" get_options "]}," Options parse":{"type":"method","name":"parse","children":[],"call":[" get_options "]}," Checks diff":{"type":"method","name":"diff","children":[],"call":["diff []= ","my_warnings - ","other_warnings - ","other_checks all_warnings "," all_warnings ","Brakeman Differ  new diff ","Brakeman Differ  new "," all_warnings  - ","other_checks all_warnings  - "]}," CheckSQL check_string_interp":{"type":"method","name":"check_string_interp","children":[],"call":["exp [] [] == ","exp [] [] ","exp [] ","exp [] [] nil? "," model_name? "," call? ","exp node_type == ","exp node_type "," sexp? ","arg each "," node_type? "," safe_value? ! "," safe_value? ","exp value "," unsafe_string_interp? "]}," CheckSQL find_scope_calls":{"type":"method","name":"find_scope_calls","children":[],"call":["scope_calls << ","Sexp  new line ","args line ","Sexp  new ","model [] [] each ","model [] [] ","model [] "," tracker models each "," tracker models "," tracker "," version_between? ","call [] ","second_arg node_type == ","second_arg node_type "," process_scope_with_block ","second_arg [] node_type == ","second_arg [] node_type ","second_arg [] ","args [] "," active_record_models each "," active_record_models ","call method "," node_type? ","second_arg block "," sexp? "," make_call line "," make_call "," scope_call_hash "," ar_scope_calls "," call? ","scope_Sexp  new line s << ","scope_ make_call line s << ","Sexp  new line  [] "," make_call line  [] ","args []  node_type == ","args []  node_type ","args []  [] node_type == ","args []  [] node_type ","args []  [] ","Sexp  new line  method "," make_call line  method ","args []  block "," make_Sexp  new line  line "," make_ make_call line  line "," make_Sexp  new line  "," make_ make_call line  "," scope_Sexp  new line _hash "," scope_ make_call line _hash "," ar_scope_Sexp  new line s "," ar_scope_ make_call line s "," Sexp  new line ? ","  make_call line ? "]}," CheckExecute process_backticks":{"type":"method","name":"process_backticks","children":[],"call":[" warn ","warning []= ","result [] [] ","result [] ","result [] [] == ","exp line ","CONFIDENCE  [] "," include_user_input? "," add_result "," duplicate? ","input match "," dangerous? "," original? ","result []  line "," include_input match ? "," include_user_ include_user_input? ? "," include_user_ dangerous? ? "," include_user_input?  match "," dangerous?  match "]}," CallIndex remove_indexes_by_class":{"type":"method","name":"remove_indexes_by_class","children":[],"call":["@targets delete ","name to_s ","calls empty? ","classes include? ","call [] [] ","call [] ","call [] [] == ","calls delete_if ","@calls_by_target each ","@methods delete ","@calls_by_method each ","calls_by each ","(ivar :@calls_by_method) each "]}," CallIndex remove_template_indexes":{"type":"method","name":"remove_template_indexes","children":[],"call":["@targets delete ","name to_s ","calls empty? ","call [] [] == ","call [] [] ","call [] ","calls delete_if ","@calls_by_target each ","@methods delete ","@calls_by_method each "," from_template ","calls_by each ","(ivar :@calls_by_method) each "]}," Brakeman debug":{"type":"method","name":"debug","children":[],"call":[]}," Brakeman notify":{"type":"method","name":"notify","children":[],"call":[]}," Warning to_s":{"type":"method","name":"to_s","children":[],"call":["output << "," format_code "," code "," file "," line "," message "," warning_type ","TEXT_CONFIDENCE  [] "," confidence "," file relative "]}," RescanReport to_s":{"type":"method","name":"to_s","children":[],"call":[" new_warnings length "," new_warnings "," fixed_warnings length "," fixed_warnings "," all_warnings length "," all_warnings ","out << ","table to_s ","table << ","warning to_row ","w []= ","Brakeman Report TEXT_CONFIDENCE  [] ","w [] ","w [] is_a? ","warning confidence > ","@tracker options [] ","@tracker options ","warning confidence ","(send\n  (lvar :warnings) :sort_by) each ","w confidence ","warnings sort_by ","Ruport Data  Table ","warnings length ","warning_type to_s titleize ","warning_type to_s ","warnings length > ","(pair\n  (sym :fixed)\n  (send nil :fixed_warnings)) each "," tap "," all_warnings - ","verbose ! "," existing_warnings "," truncate_table ","t << ","Terminal Table  new ","Brakeman  load_brakeman_dependency "," newarning to_row _warning to_row arnings length "," newarning to_row _warning to_row arnings "," fixed_warning to_row arnings length "," fixed_warning to_row arnings "," all_warning to_row arnings length "," all_warning to_row arnings ","Ruport Data  Table  to_s ","Ruport Data  Table  << ","warning to_row arning to_rowarning to_row  ","warning to_row  []= ","warning to_row  [] ","warning to_row  [] is_a? ","warning to_row arning confidence > ","warning to_row arning confidence ","(send\n  (lvar :warning to_row arnings) :sort_by) each ","warning to_row  confidence ","warning to_row arnings sort_by ","warning to_row arnings length ","warning to_row arning_type to_s titleize ","warning to_row arning_type to_s ","warning to_row arnings length > ","(pair\n  (sym :fixed)\n  (send nil :fixed_warning to_row arnings)) each "," all_warning to_row arnings - "," existing_warning to_row arnings ","  all_warnings -  "," truncate_Ruport Data  Table  ","Terminal Table  newarning to_row  "]}," RescanReport existing_warnings":{"type":"method","name":"existing_warnings","children":[],"call":[" new_warnings include? ! "," new_warnings include? "," new_warnings "," all_warnings select "," all_warnings "]}," Util request_env?":{"type":"method","name":"request_env?","children":[],"call":["exp [] == ","exp [] ","exp == "," call? "]}," AliasProcessor duplicate?":{"type":"method","name":"duplicate?","children":[],"call":["exp == ","@exp_context [] reverse_each ","@exp_context [] "]}," AliasProcessor process_svalue":{"type":"method","name":"process_svalue","children":[],"call":["exp [] ","exp value "]}," CheckSQL process_scope_with_block":{"type":"method","name":"process_scope_with_block","children":[],"call":[" process_result ","block [] ","block node_type == ","block node_type "," puts ","call inspect ","call [] to_s =~ ","call [] to_s ","call [] ","find_calls calls each ","find_calls calls ","find_calls process_source ","Brakeman FindAllCalls  new "," tracker ","args [] [] ","args [] ","@sql_targets include? ","block method ","block target "," call? ","model file ","model name ","args [] []  [] ","block target  [] ","args [] []  node_type == ","block target  node_type == ","args [] []  node_type ","block target  node_type ","Brakeman FindAllCalls  new  calls each ","Brakeman FindAllCalls  new  calls ","Brakeman FindAllCalls  new  process_source ","args [] []  method ","block target  method ","args [] []  target ","block target  target "]}," CheckModelAttributes check_models":{"type":"method","name":"check_models","children":[],"call":[" parent? ","model [] nil? ","model [] "," tracker models each "," tracker models "," tracker "," unprotected_model? ","model unprotected_model? "]}," BaseCheck description":{"type":"method","name":"description","children":[],"call":[]}," Warning to_json":{"type":"method","name":"to_json","children":[],"call":["JSON  dump "," to_hash "," require ","MultiJson  dump ","JSON  generate "]}," Warning to_hash":{"type":"method","name":"to_hash","children":[],"call":["TEXT_CONFIDENCE  [] "," confidence "," format_code "," file "," message "," warning_type "," method "," class "," controller "," model "," view_name "," format_user_input "," line "," link "," location "," called_from "," fingerprint "," check gsub "," check "," file relative "," file absolute "," message to_s "," called_from with_relative_paths ","absolute_paths ! "," confidence_name "," check_name "," cwe_id "]}," Util node_type?":{"type":"method","name":"node_type?","children":[],"call":["types include? ","exp node_type ","exp is_a? "]}," Rails2XSSErubis add_postamble":{"type":"method","name":"add_postamble","children":[],"call":[]}," Rails2XSSErubis add_expr_escaped":{"type":"method","name":"add_expr_escaped","children":[],"call":["src << << << ","src << << "," escaped_expr ","src << "]}," Rails2XSSErubis add_expr_literal":{"type":"method","name":"add_expr_literal","children":[],"call":["src << << << ","src << << ","src << ","code =~ "]}," Rails2XSSErubis add_text":{"type":"method","name":"add_text","children":[],"call":["src << << << ","src << << "," escape_text ","src << ","lines last ","lines [] each ","lines [] ","lines each ","text match ","text split ","text include? ","text == ","text empty? ","text split  last ","text split  [] each ","text split  [] ","text split  each "]}," Rails2XSSErubis add_preamble":{"type":"method","name":"add_preamble","children":[],"call":[]}," Rails3XSSErubis add_postamble":{"type":"method","name":"add_postamble","children":[],"call":[]}," Rails3XSSErubis add_expr_escaped":{"type":"method","name":"add_expr_escaped","children":[],"call":["src << << << ","src << << ","src << ","code =~ "]}," Rails3XSSErubis add_stmt":{"type":"method","name":"add_stmt","children":[],"call":["src << << ","src << ","code =~ "]}," Rails3XSSErubis add_expr_literal":{"type":"method","name":"add_expr_literal","children":[],"call":["src << << << ","src << << ","src << ","code =~ "]}," Rails3XSSErubis add_text":{"type":"method","name":"add_text","children":[],"call":["src << << << ","src << << "," escape_text ","src << ","lines last ","lines [] each ","lines [] ","lines each ","text match ","text split ","text include? ","text == ","text split  last ","text split  [] each ","text split  [] ","text split  each "]}," Rails3XSSErubis add_preamble":{"type":"method","name":"add_preamble","children":[],"call":[]}," Report to_json":{"type":"method","name":"to_json","children":[],"call":["(send\n  (send\n    (ivar :@checks) :all_warnings) :map) to_json ","w to_hash ","@checks all_warnings map ","@checks all_warnings "," require ","JSON  pretty_generate "," number_of_templates "," tracker models length - "," tracker models length "," tracker models "," tracker "," tracker controllers length "," tracker controllers "," checks checks_run sort "," checks checks_run "," checks ","Time  now "," all_warnings length "," all_warnings "," rails_version ","File  expand_path "," tracker options [] "," tracker options ","w [] ","(send\n  (send nil :all_warnings) :map) sort_by "," all_warnings map ","e [] [] ","e [] "," tracker errors map "," tracker errors ","hash []= "," warning_file ","MultiJson  dump ","Time  now to_s "," tracker duration "," tracker end_time to_s "," tracker end_time "," tracker start_time to_s "," tracker start_time "," generate "," require_report ","w to_w to_hash  ","w to_hash  []= "]}," CheckLinkToHref process_result":{"type":"method","name":"process_result","children":[],"call":[" warn ","CONFIDENCE  [] "," add_result "," duplicate? ! "," duplicate? ","@matched == "," tracker options [] ! "," tracker options [] "," tracker options "," tracker "," hash? "," has_immediate_model? "," has_immediate_user_input? ","url_arg [] chomp empty? ! ","url_arg [] chomp empty? ","url_arg [] chomp ","url_arg [] "," node_type? "," process ","call [] [] ","call [] ","result []= ","result [] dup ","result [] ","@matched match ","@matched type == ","@matched type ","input match ","input type ","call args second ","call args ","call second_arg "," array? "," friendly_type_of "," ignore_call? ","url_arg method ","url_arg target "," call? "," string_interp? "," model_find_call? "," call_on_params? ! "," call_on_params? ","url_arg first_arg ","url_arg method == "," ignore_interpolation? ! "," ignore_interpolation? "," ignore_model_call? "," check_argument? "," msg "," msg_code "," msg_input ","call first_arg "," has_immediate_user_ has_immediate_user_input? ? "," has_immediate_user_ has_immediate_model? ? "," process  [] chomp empty? ! ","url_arg first_arg  [] chomp empty? ! "," process  [] chomp empty? ","url_arg first_arg  [] chomp empty? "," process  [] chomp ","url_arg first_arg  [] chomp "," process  [] ","url_arg first_arg  [] ","result []=  [] [] ","result []  [] [] ","result []=  [] ","result []  [] "," has_immediate_user_input?  match "," has_immediate_model?  match "," has_immediate_user_input?  type "," has_immediate_model?  type ","result []=  args second ","result []  args second ","result []=  args ","result []  args ","result []=  second_arg ","result []  second_arg "," ignore_result []= ? "," ignore_result [] ? "," process  method ","url_arg first_arg  method "," process  target ","url_arg first_arg  target "," result []= ? "," result [] ? "," model_find_result []= ? "," model_find_result [] ? "," result []= _on_params? ! "," result [] _on_params? ! "," result []= _on_params? "," result [] _on_params? "," process  first_arg ","url_arg first_arg  first_arg "," process  method == ","url_arg first_arg  method == "," ignore_model_result []= ? "," ignore_model_result [] ? "," msg_ has_immediate_user_input?  "," msg_ has_immediate_model?  ","result []=  first_arg ","result []  first_arg "]}," CheckLinkToHref run_check":{"type":"method","name":"run_check","children":[],"call":[" process_result ","methods each "," tracker find_call "," tracker "," tracker options [] "," tracker options "," tracker models keys "," tracker models ","Set  new merge ","Set  new ","Set  [] merge ","Set  [] "," tracker find_call  each "]}," CheckSkipBeforeFilter skip_verify_except?":{"type":"method","name":"skip_verify_except?","children":[],"call":["k [] == ","k [] "," symbol? "," hash_iterate ","args last "," hash? ","args [] [] == ","args [] [] ","args [] ","filter [] "," call? "," hash_access ","args first value == ","args first value ","args first ","filter args ","first_arg value == ","first_arg value ","filter last_arg ","filter first_arg ","filter []  last ","filter args  last ","filter []  [] [] == ","filter args  [] [] == ","filter []  [] [] ","filter args  [] [] ","filter []  [] ","filter args  [] ","filter []  first value == ","filter args  first value == ","filter []  first value ","filter args  first value ","filter []  first ","filter args  first ","filter filter []  ","filter filter args  ","filter first_arg  value == ","filter first_arg  value ","filter filter last_arg  ","filter filter first_arg  "]}," CheckSkipBeforeFilter process_skip_filter":{"type":"method","name":"process_skip_filter","children":[],"call":[" warn ","CONFIDENCE  [] ","filter line ","controller [] "," skip_verify_except? "," skip_except_value ","controller [] first ","controller file ","controller name "," msg "," msg_code "]}," CheckSkipBeforeFilter run_check":{"type":"method","name":"run_check","children":[],"call":[" process_skip_filter ","filter_skips each ","controller [] [] ","controller [] "," tracker controllers each "," tracker controllers "," tracker ","(or\n  (send\n    (send\n      (lvar :controller) :[]\n      (sym :options)) :[]\n    (sym :skip_before_filter))\n  (array)) + ","controller [] values_at compact flatten ","controller [] values_at compact ","controller [] values_at ","controller skip_filters each ","controller skip_filters ","(or\n  (send\n    (send\n      (lvar :controller) :[]\n      (sym :options)) :[]\n    (sym :skip_before_filter))\n  (array)) +  each ","controller [] values_at compact flatten  each ","controller [] []  each "]}," CheckSelectVulnerability process_result":{"type":"method","name":"process_result","children":[],"call":[" warn ","result [] [] ","result [] ","CONFIDENCE  [] "," node_type? ","args [] "," add_result "," include_user_input? "," sexp? "," duplicate? ","result [] args [] ","result [] args ","result [] third_arg "," string_interp? ","result [] []  [] ","result [] result [] []  [] ","result [] result [] []  ","result [] result [] args []  ","result [] result [] third_arg  "]}," CheckSelectVulnerability run_check":{"type":"method","name":"run_check","children":[],"call":[" process_result ","calls each ","result [] [] == ","result [] [] ","result [] "," tracker find_call select "," tracker find_call "," tracker "," tracker config [] "," tracker config "," version_between? "," lts_version? "," rails_version "," msg "," msg_code "," msg_version "]}," CheckSafeBufferManipulation run_check":{"type":"method","name":"run_check","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] "," tracker config [] "," tracker config "," tracker "," version_between? "," rails_version "," msg "," msg_version "," msg_code "]}," BaseProcessor process_module":{"type":"method","name":"process_module","children":[],"call":[" process ","exp [] "," class_name "]}," BaseProcessor process_class":{"type":"method","name":"process_class","children":[],"call":[" process ","exp [] "," class_name "," process_all ","exp body "]}," CheckLinkTo check_argument":{"type":"method","name":"check_argument","children":[],"call":[" warn ","CONFIDENCE  [] "," add_result ","@matched == "," tracker options [] ! "," tracker options [] "," tracker options "," tracker ","method to_s =~ ","method to_s ","MODEL_METHODS  include? ","IGNORE_MODEL_METHODS  include? ","match [] "," has_immediate_model? "," has_immediate_user_input? "," process ","@matched match ","@matched type == ","@matched type ","input match ","input type ","match method "," check_matched ! "," check_matched "," check_method ! "," check_method "," check_user_input ! "," check_user_input ","@ has_immediate_model? ed == ","match []  to_s =~ ","match method  to_s =~ ","match []  to_s ","match method  to_s "," has_immediate_model?  [] "," has_immediate_user_ has_immediate_user_input? ? ","@ has_immediate_model? ed  has_immediate_model?  ","@ has_immediate_model? ed type == ","@ has_immediate_model? ed type ","input  has_immediate_model?  "," has_immediate_user_input?  match "," has_immediate_user_input?  type ","match match []  ","match match method  "," has_immediate_model?  method "," check_ has_immediate_model? ed ! "," check_ has_immediate_model? ed "," check_match []  ! "," check_match method  ! "," check_match []  "," check_match method  "," check_user_ has_immediate_user_input?  ! "," check_user_ has_immediate_user_input?  "]}," BaseCheck process_if":{"type":"method","name":"process_if","children":[],"call":[" process ","exp [] "," sexp? ","exp else_clause ","exp then_clause ","exp condition "]}," Brakeman get_output_formats":{"type":"method","name":"get_output_formats","children":[],"call":[]}," Util request_value?":{"type":"method","name":"request_value?","children":[],"call":[" request_env? "," cookies? "," params? "," request_headers? "]}," Util hash_access":{"type":"method","name":"hash_access","children":[],"call":["k == "," hash_iterate ","Sexp  new ","key is_a? ","hash [] ","index + ","index > ","hash find_index ","Sexp  new  is_a? ","hash find_index  + ","hash find_index  > ","hash find_hash find_index  "]}," ControllerAliasProcessor process_controller":{"type":"method","name":"process_controller","children":[],"call":[" process_default ","Brakeman  debug ","src node_type "," node_type? ! "," node_type? "," process_mixins ","@app_tree file_path "]}," BaseProcessor make_render_in_view":{"type":"method","name":"make_render_in_view","children":[],"call":[" make_render "]}," Rails3Erubis add_postamble":{"type":"method","name":"add_postamble","children":[],"call":["src << "," flush_newline_if_pending "]}," Rails3Erubis add_expr_escaped":{"type":"method","name":"add_expr_escaped","children":[],"call":["src << << << ","src << << ","src << ","code =~ "," flush_newline_if_pending "]}," Rails3Erubis add_stmt":{"type":"method","name":"add_stmt","children":[],"call":["src << << ","src << ","code =~ "," flush_newline_if_pending "]}," Rails3Erubis add_expr_literal":{"type":"method","name":"add_expr_literal","children":[],"call":["src << << << ","src << << ","src << ","code =~ "," flush_newline_if_pending "]}," Rails3Erubis add_text":{"type":"method","name":"add_text","children":[],"call":["src << << << ","src << << "," escape_text ","src << ","lines last ","lines [] each ","lines [] ","lines each ","text match ","text split ","text include? ","text == ","\n * ","@newline_pending > ","text empty? ","text split  last ","text split  [] each ","text split  [] ","text split  each "]}," Rails3Erubis add_preamble":{"type":"method","name":"add_preamble","children":[],"call":["src << "]}," Rails2XSSPluginErubis add_postamble":{"type":"method","name":"add_postamble","children":[],"call":[]}," Rails2XSSPluginErubis add_expr_escaped":{"type":"method","name":"add_expr_escaped","children":[],"call":["src << << << ","src << << "," escaped_expr ","src << "]}," Rails2XSSPluginErubis add_expr_literal":{"type":"method","name":"add_expr_literal","children":[],"call":["src << << << ","src << << ","src << ","code =~ "]}," Rails2XSSPluginErubis add_text":{"type":"method","name":"add_text","children":[],"call":["src << << << ","src << << "," escape_text ","src << ","lines last ","lines [] each ","lines [] ","lines each ","text match ","text split ","text include? ","text == ","text split  last ","text split  [] each ","text split  [] ","text split  each "]}," Rails2XSSPluginErubis add_preamble":{"type":"method","name":"add_preamble","children":[],"call":[]}," CheckSend process_result":{"type":"method","name":"process_result","children":[],"call":[" warn ","CONFIDENCE  [] ","result [] "," has_immediate_user_input? ","args [] "," process ","result [] [] ","input match ","args first ","result [] target "," process_all ","result [] args ","result [] first_arg "," process_call_args "," add_result ","result [] original_line "," duplicate? ","send_call first_arg ","send_call target "," get_send "," original? "," has_immediate_user_ has_immediate_user_input? ? "," process  [] "," process_all  [] "," has_immediate_user_input?  match "," process  first "," process_all  first ","result []  process  ","result []  process_all  "," process_call_ process  "," process_call_ process_all  "," get_send  first_arg ","send_call  process  "," get_send  target "]}," CheckSend run_check":{"type":"method","name":"run_check","children":[],"call":[" process_result ","calls each "," tracker find_call "," tracker ","Brakeman  debug "," tracker find_call  each "]}," Brakeman compare":{"type":"method","name":"compare","children":[],"call":[]}," Warning format_user_input":{"type":"method","name":"format_user_input","children":[],"call":["Brakeman OutputProcessor  new format gsub ","Brakeman OutputProcessor  new format "," user_input ","Brakeman OutputProcessor  new "," format_ruby "]}," Util table_to_csv":{"type":"method","name":"table_to_csv","children":[],"call":["output << ","CSV  generate_line ","cell to_s strip ","cell to_s ","row cells map ","row cells ","table rows each ","table rows ","table headings cells map ","table headings cells ","table headings ","Brakeman  load_dependency ","Brakeman  load_brakeman_dependency ","headings cells map ","headings cells ","headings first ","headings is_a? ","CSV  generate_line  << ","table headings first  cells map ","table table headings  cells map ","table headings first  cells ","table table headings  cells ","table headings first  ","table table headings  ","headings first  cells map ","table headings  cells map ","headings first  cells ","table headings  cells ","headings first  first ","table headings  first ","headings first  is_a? ","table headings  is_a? "]}," Util truncate_table":{"type":"method","name":"truncate_table","children":[],"call":["(send\n  (lvar :lines) :map) join ","line [] + ","line [] ","@terminal_width - ","line chomp length > ","line chomp length ","line chomp ","lines map ","str lines "," HighLine SystemExtensions  terminal_size [] "," HighLine SystemExtensions  terminal_size ","$stdin tty? "," HighLine  new terminal_size [] "," HighLine  new terminal_size "," HighLine  new ","Brakeman  load_dependency ","Brakeman  load_brakeman_dependency ","@tracker options [] ","@tracker options ","(send\n  (lvar :str lines ) :map) join ","str lines  map ","str str lines  "]}," Rescanner remove_deleted_file":{"type":"method","name":"remove_deleted_file","children":[],"call":["data [] == ","data [] "," tracker send delete_if "," tracker send "," tracker ","(sym :controllers) each "," tracker templates delete_if "," tracker templates ","data [] include? ","data file == ","data file ","data files include? ","data files "]}," Rescanner rescan_deleted_initializer":{"type":"method","name":"rescan_deleted_initializer","children":[],"call":[" tracker initializers delete ","Pathname  new basename to_s ","Pathname  new basename ","Pathname  new "," tracker initializers "," tracker "]}," Rescanner rescan_deleted_lib":{"type":"method","name":"rescan_deleted_lib","children":[],"call":["lib [] == ","lib [] "," tracker libs delete_if "," tracker libs "," tracker "," rescan_mixin ","lib [] include? ","lib files include? ","lib files "]}," Rescanner rescan_deleted_template":{"type":"method","name":"rescan_deleted_template","children":[],"call":["name match ","name to_s ","template [] nil? ","template [] ","template [] == "," tracker templates delete_if "," tracker templates "," tracker "," tracker reset_template "," template_path_to_name ","path match ","template [] to_sym == ","template_name to_sym ","template [] to_sym ","template name to_sym == ","template name to_sym ","template name ","template file == ","template file ","path relative match ","path relative ","name to_s  match ","name to_s  to_s "," template_path_to_name to_s  ","template_name to_s  to_sym "," template_path_to_name  to_sym ","template name to_s  to_sym == ","template name to_s  to_sym ","template name to_s  "]}," Rescanner rescan_deleted_controller":{"type":"method","name":"rescan_deleted_controller","children":[],"call":[" tracker templates delete "," tracker templates "," tracker ","template_name to_s match ","template_name to_s "," tracker templates keys each "," tracker templates keys ","controller [] == ","controller [] "," tracker controllers delete_if "," tracker controllers "," tracker reset_template "," tracker reset_controller "]}," Rescanner rescan_deleted_file":{"type":"method","name":"rescan_deleted_file","children":[],"call":["Brakeman  notify "," remove_deleted_file "," rescan_deleted_initializer "," rescan_deleted_lib "," rescan_model "," rescan_deleted_template "," rescan_deleted_controller "," rescan_controller "]}," Report load_and_render_erb":{"type":"method","name":"load_and_render_erb","children":[],"call":["template result ","ERB  new ","File  read ","File  expand_path ","File  dirname ","ERB  new  result "]}," Report number_of_templates":{"type":"method","name":"number_of_templates","children":[],"call":["Set  new length ","Set  new ","v [] to_s [] ","v [] to_s ","v [] ","tracker templates map ","tracker templates "]}," Report all_warnings":{"type":"method","name":"all_warnings","children":[],"call":["@checks all_warnings "]}," Report html_message":{"type":"method","name":"html_message","children":[],"call":["message gsub! ","warning format_user_input ","warning user_input ","CGI  escapeHTML ","CGI  escapeHTML  gsub! ","warning format_warning format_user_input  ","warning format_CGI  escapeHTML  ","warning warning format_user_input  ","warning CGI  escapeHTML  "]}," Report text_message":{"type":"method","name":"text_message","children":[],"call":["message gsub ","warning format_user_input ","warning user_input ","warning format_warning format_user_input  ","warning warning format_user_input  "]}," Differ eql_except_line_number":{"type":"method","name":"eql_except_line_number","children":[],"call":["new_warning [] != ","fixed_warning [] ","new_warning [] ","(send\n  (send\n    (lvar :new_warning) :keys) :reject) each ","k == ","new_warning keys reject ","new_warning keys ","fixed_warning to_hash ","new_warning to_hash ","new_warning is_a? ","new_warning [] == ","OLD_WARNING_KEYS  each ","new_warning to_hash  [] != ","fixed_warning to_hash  [] ","new_warning to_hash  [] ","(send\n  (send\n    (lvar :new_warning to_hash ) :keys) :reject) each ","new_warning to_hash  keys reject ","new_warning to_hash  keys ","fixed_warning to_hash  to_hash ","new_warning to_hash  to_hash ","new_warning to_hash  is_a? ","new_warning to_hash  [] == "]}," Differ second_pass":{"type":"method","name":"second_pass","children":[],"call":["warnings [] delete_at ","warnings [] ","new_warning_id - "," eql_except_line_number ","warnings [] each_with_index ","warnings [] dup each_with_index ","warnings [] dup ","shared_fingerprints include? "," fingerprint ","warnings [] delete_if ","shared_fingerprints empty? ","new_fingerprints intersection ","Set  new ","warnings [] map "," method ","new_fingerprints intersection  include? ","new_fingerprints intersection  empty? ","Set  new  intersection "]}," Differ diff":{"type":"method","name":"diff","children":[],"call":[" second_pass ","warnings []= ","@old_warnings - ","@new_warnings - ","@new_warnings empty? "]}," Differ initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Util contains_class?":{"type":"method","name":"contains_class?","children":[],"call":["current [] concat ","current [] "," sexp? "," node_type? ","todo shift ","todo empty? ","current sexp_body concat ","current sexp_body ","todo shift  [] concat ","todo shift  [] ","current [] concat  shift ","current sexp_body concat  shift ","current [] concat  empty? ","current sexp_body concat  empty? ","todo shift  sexp_body concat ","todo shift  sexp_body "]}," ControllerAliasProcessor process_mixins":{"type":"method","name":"process_mixins","children":[],"call":[" process ","processor process ","processor process_defn "," node_type? ","mixin [] [] ","mixin [] ","Brakeman ControllerProcessor  new ","methods each ","n to_sym ","(send\n  (send\n    (send\n      (lvar :mixin) :[]\n      (sym :public)) :keys) :map) sort map ","(send\n  (send\n    (send\n      (lvar :mixin) :[]\n      (sym :public)) :keys) :map) sort ","n to_s ","mixin [] keys map ","mixin [] keys ","@tracker libs [] ","@tracker libs ","controller [] each ","controller [] ","@tracker controllers [] ","@tracker controllers ","mixin [] [] deep_clone ","mixin [] [] [] deep_clone ","mixin [] [] [] ","mixin file ","mixin get_method [] deep_clone ","mixin get_method [] ","mixin get_method ","(send\n  (send\n    (send\n      (lvar :mixin) :methods_public) :keys) :map) sort map ","(send\n  (send\n    (send\n      (lvar :mixin) :methods_public) :keys) :map) sort ","mixin methods_public keys map ","mixin methods_public keys ","mixin methods_public ","controller includes each ","controller includes ","mixin get_method src deep_clone ","mixin get_method src ","Brakeman ControllerProcessor  new  process ","Brakeman ControllerProcessor  new  process_defn ","@tracker libs []  [] [] ","@tracker libs []  [] ","processor process s each ","processor process_defn s each ","mixin [] [] s each ","mixin [] [] deep_clone s each ","mixin [] [] [] deep_clone s each ","mixin get_method [] deep_clone s each ","mixin get_method src deep_clone s each ","(send\n  (send\n    (send\n      (lvar :@tracker libs [] ) :[]\n      (sym :public)) :keys) :map) sort map ","(send\n  (send\n    (send\n      (lvar :@tracker libs [] ) :[]\n      (sym :public)) :keys) :map) sort ","@tracker libs []  [] keys map ","@tracker libs []  [] keys ","@tracker controllers []  [] each ","@tracker controllers []  [] ","@tracker @tracker controllers [] s [] ","@tracker @tracker controllers [] s ","@tracker libs []  [] [] deep_clone ","@tracker libs []  [] [] [] deep_clone ","@tracker libs []  [] [] [] ","@tracker libs []  file ","mixin get_processor process  [] deep_clone ","mixin get_processor process_defn  [] deep_clone ","mixin get_mixin [] []  [] deep_clone ","mixin get_mixin [] [] deep_clone  [] deep_clone ","mixin get_mixin [] [] [] deep_clone  [] deep_clone ","mixin get_mixin get_method [] deep_clone  [] deep_clone ","mixin get_mixin get_method src deep_clone  [] deep_clone ","@tracker libs []  get_method [] deep_clone ","mixin get_processor process  [] ","mixin get_processor process_defn  [] ","mixin get_mixin [] []  [] ","mixin get_mixin [] [] deep_clone  [] ","mixin get_mixin [] [] [] deep_clone  [] ","mixin get_mixin get_method [] deep_clone  [] ","mixin get_mixin get_method src deep_clone  [] ","@tracker libs []  get_method [] ","mixin get_processor process  ","mixin get_processor process_defn  ","mixin get_mixin [] []  ","mixin get_mixin [] [] deep_clone  ","mixin get_mixin [] [] [] deep_clone  ","mixin get_mixin get_method [] deep_clone  ","mixin get_mixin get_method src deep_clone  ","@tracker libs []  get_method ","(send\n  (send\n    (send\n      (lvar :mixin) :processor process s_public) :keys) :map) sort map ","(send\n  (send\n    (send\n      (lvar :mixin) :processor process_defn s_public) :keys) :map) sort map ","(send\n  (send\n    (send\n      (lvar :mixin) :mixin [] [] s_public) :keys) :map) sort map ","(send\n  (send\n    (send\n      (lvar :mixin) :mixin [] [] deep_clone s_public) :keys) :map) sort map ","(send\n  (send\n    (send\n      (lvar :mixin) :mixin [] [] [] deep_clone s_public) :keys) :map) sort map ","(send\n  (send\n    (send\n      (lvar :mixin) :mixin get_method [] deep_clone s_public) :keys) :map) sort map ","(send\n  (send\n    (send\n      (lvar :mixin) :mixin get_method src deep_clone s_public) :keys) :map) sort map ","(send\n  (send\n    (send\n      (lvar :@tracker libs [] ) :methods_public) :keys) :map) sort map ","(send\n  (send\n    (send\n      (lvar :mixin) :processor process s_public) :keys) :map) sort ","(send\n  (send\n    (send\n      (lvar :mixin) :processor process_defn s_public) :keys) :map) sort ","(send\n  (send\n    (send\n      (lvar :mixin) :mixin [] [] s_public) :keys) :map) sort ","(send\n  (send\n    (send\n      (lvar :mixin) :mixin [] [] deep_clone s_public) :keys) :map) sort ","(send\n  (send\n    (send\n      (lvar :mixin) :mixin [] [] [] deep_clone s_public) :keys) :map) sort ","(send\n  (send\n    (send\n      (lvar :mixin) :mixin get_method [] deep_clone s_public) :keys) :map) sort ","(send\n  (send\n    (send\n      (lvar :mixin) :mixin get_method src deep_clone s_public) :keys) :map) sort ","(send\n  (send\n    (send\n      (lvar :@tracker libs [] ) :methods_public) :keys) :map) sort ","mixin processor process s_public keys map ","mixin processor process_defn s_public keys map ","mixin mixin [] [] s_public keys map ","mixin mixin [] [] deep_clone s_public keys map ","mixin mixin [] [] [] deep_clone s_public keys map ","mixin mixin get_method [] deep_clone s_public keys map ","mixin mixin get_method src deep_clone s_public keys map ","@tracker libs []  methods_public keys map ","mixin processor process s_public keys ","mixin processor process_defn s_public keys ","mixin mixin [] [] s_public keys ","mixin mixin [] [] deep_clone s_public keys ","mixin mixin [] [] [] deep_clone s_public keys ","mixin mixin get_method [] deep_clone s_public keys ","mixin mixin get_method src deep_clone s_public keys ","@tracker libs []  methods_public keys ","mixin processor process s_public ","mixin processor process_defn s_public ","mixin mixin [] [] s_public ","mixin mixin [] [] deep_clone s_public ","mixin mixin [] [] [] deep_clone s_public ","mixin mixin get_method [] deep_clone s_public ","mixin mixin get_method src deep_clone s_public ","@tracker libs []  methods_public ","@tracker controllers []  includes each ","@tracker controllers []  includes ","mixin get_processor process  src deep_clone ","mixin get_processor process_defn  src deep_clone ","mixin get_mixin [] []  src deep_clone ","mixin get_mixin [] [] deep_clone  src deep_clone ","mixin get_mixin [] [] [] deep_clone  src deep_clone ","mixin get_mixin get_method [] deep_clone  src deep_clone ","mixin get_mixin get_method src deep_clone  src deep_clone ","@tracker libs []  get_method src deep_clone ","mixin get_processor process  src ","mixin get_processor process_defn  src ","mixin get_mixin [] []  src ","mixin get_mixin [] [] deep_clone  src ","mixin get_mixin [] [] [] deep_clone  src ","mixin get_mixin get_method [] deep_clone  src ","mixin get_mixin get_method src deep_clone  src ","@tracker libs []  get_method src "]}," CheckSQL safe_value?":{"type":"method","name":"safe_value?","children":[],"call":[" safe_value? ","exp [] ","IGNORE_METHODS_IN_SQL  include? ","exp node_type "," sexp? ","exp rhs ","exp lhs ","exp last ","exp else_clause ","exp then_clause ","exp method ","exp method to_s end_with? ","exp method to_s "," quote_call? ","exp target ","exp method == "," arel? "," unsafe_string_interp? ! "," unsafe_string_interp? "," number_target? "," ignore_call? "]}," CheckSQL check_for_string_building":{"type":"method","name":"check_for_string_building","children":[],"call":[" unsafe_sql? "," call? ","STRING_METHODS  include? "," string? ","args [] ","exp [] ","args first ","exp args ","exp method ","exp target ","exp first_arg "," check_string_arg "," node_type? "," check_for_string_building "," check_interp_target_or_arg "," check_str_target_or_arg ","exp []  [] ","exp args  [] ","exp first_arg s [] ","exp []  first ","exp args  first ","exp first_arg s first ","exp exp []  ","exp exp args  ","exp exp first_arg s ","exp exp method  ","exp exp target  ","exp texp first_arg et ","exp first_exp first_arg  "," check_string_exp first_arg  "," check_interp_exp [] _or_arg "," check_interp_exp target _or_arg "," check_interp_texp first_arg et_or_exp first_arg  "," check_str_exp [] _or_arg "," check_str_exp target _or_arg "," check_str_texp first_arg et_or_exp first_arg  "]}," CheckSQL check_hash_values":{"type":"method","name":"check_hash_values","children":[],"call":[" unsafe_sql? "," check_lock_arguments "," check_joins_arguments "," check_order_arguments "," check_query_arguments ","key [] "," symbol? "," hash_iterate ","key value "]}," CheckSQL find_dangerous_value":{"type":"method","name":"find_dangerous_value","children":[],"call":[" has_immediate_model? "," has_immediate_user_input? "," unsafe_sql? ","exp [] "," check_call ","IGNORE_METHODS_IN_SQL  include? "," check_hash_values "," check_string_interp ","exp node_type ","exp last ","exp rhs ","exp lhs ","exp method ","exp else_clause ","exp then_clause "," find_dangerous_value ","exp target ","exp method == ","TO_STRING_METHODS  include? ","ignore_hash ! "," kwsplat? "]}," CheckSQL unsafe_sql?":{"type":"method","name":"unsafe_sql?","children":[],"call":[" safe_value? "," find_dangerous_value "," sexp? "," find_ find_dangerous_value  "]}," CheckSQL check_hash_keys":{"type":"method","name":"check_hash_keys","children":[],"call":[" unsafe_sql? "," symbol? "," hash_iterate "]}," CheckSQL check_lock_arguments":{"type":"method","name":"check_lock_arguments","children":[],"call":[" unsafe_sql? "," node_type? ! "," node_type? "," sexp? "]}," CheckSQL check_joins_arguments":{"type":"method","name":"check_joins_arguments","children":[],"call":[" unsafe_sql? "," check_joins_arguments ","arg each "," array? "," node_type? ! "," node_type? "," sexp? ","  check_joins_arguments _sql? "]}," CheckSQL check_by_sql_arguments":{"type":"method","name":"check_by_sql_arguments","children":[],"call":[" unsafe_sql? ","arg [] "," array? "," sexp? "]}," CheckSQL check_order_arguments":{"type":"method","name":"check_order_arguments","children":[],"call":[" unsafe_sql? ","args each "," node_type? "," sexp? "," check_update_all_arguments "]}," CheckSQL check_query_arguments":{"type":"method","name":"check_query_arguments","children":[],"call":[" unsafe_sql? "," node_type? "," check_hash_keys "," hash? "," request_value? ","arg [] "," string_interp ","arg length > ","arg length "," sexp? "," check_string_interp "," string_interp? ","arg method == ","arg method "," params? ","arg target "," call? ","(sym :permit) include? "," kwsplat? ! "," kwsplat? ","arg []  [] ","arg []  length > ","arg []  length ","arg []  method == ","arg []  method ","arg []  targ [] et "]}," CheckSQL check_scope_arguments":{"type":"method","name":"check_scope_arguments","children":[],"call":[" unsafe_sql? ","args [] ","args [] [] "," node_type? ","scope_arg block ","call second_arg ","call second_arg  block "]}," CheckSQL check_find_arguments":{"type":"method","name":"check_find_arguments","children":[],"call":[" unsafe_sql? "," node_type? "," sexp? ! "," sexp? "]}," BaseCheck parent_classes_protected?":{"type":"method","name":"parent_classes_protected?","children":[],"call":[" parent_classes_protected? "," tracker models [] ","model [] "," tracker models "," tracker ","model [] include? ","seen [] ! ","seen [] ","seen []= ","  tracker models [] _classes_protected? "]}," BaseCheck unprotected_model?":{"type":"method","name":"unprotected_model?","children":[],"call":[" ancestor? "," parent_classes_protected? ! "," parent_classes_protected? ","model [] nil? ","model [] "]}," BaseCheck ancestor?":{"type":"method","name":"ancestor?","children":[],"call":[" ancestor? "," tracker models [] ","model [] "," tracker models "," tracker ","model [] == ","model == ","seen [] ","seen []= "]}," CheckSQL check_rails_version_for_cve_2012_2695":{"type":"method","name":"check_rails_version_for_cve_2012_2695","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] "," version_between? "," cve_warning_for "]}," CheckSQL check_rails_version_for_cve_2012_2661":{"type":"method","name":"check_rails_version_for_cve_2012_2661","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] "," version_between? "," cve_warning_for "]}," CheckSQL check_rails_version_for_cve_2012_2660":{"type":"method","name":"check_rails_version_for_cve_2012_2660","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] "," version_between? "," cve_warning_for "]}," Object deep_clone":{"type":"method","name":"deep_clone","children":[],"call":["Marshal  load ","Marshal  dump "]}," SexpProcessor Environment scope":{"type":"method","name":"scope","children":[],"call":[" raise ","@env empty? ","@env shift ","@env unshift "]}," SexpProcessor Environment []=":{"type":"method","name":"[]=","children":[],"call":["hash []= ","@env first ","closure has_key? ","@env find "]}," SexpProcessor Environment []":{"type":"method","name":"[]","children":[],"call":["hash [] ","closure has_key? ","@env find "]}," SexpProcessor Environment depth":{"type":"method","name":"depth","children":[],"call":["@env length "]}," SexpProcessor Environment all":{"type":"method","name":"all","children":[],"call":["env merge ","@env reverse inject ","@env reverse "]}," SexpProcessor Environment initialize":{"type":"method","name":"initialize","children":[],"call":["@env unshift "]}," SexpProcessor in_context":{"type":"method","name":"in_context","children":[],"call":[" context shift "," context "," context unshift "]}," SexpProcessor scope":{"type":"method","name":"scope","children":[],"call":[" env scope "," env "]}," SexpProcessor process_dummy":{"type":"method","name":"process_dummy","children":[],"call":["result << "," process ","exp shift ","exp empty? ","@expected new "]}," SexpProcessor error_handler":{"type":"method","name":"error_handler","children":[],"call":[" raise "," warn "," caller inspect "," caller ","exp inspect ","err class "]}," SexpProcessor process":{"type":"method","name":"process","children":[],"call":[" raise ","result inspect ","result class ","@expected === "," process_default "," send "," error_handler ","@processors [] "," in_context ","exp first inspect ","exp first ","Symbol  === ","exp nil? ","exp inspect "," process_default  inspect "," send  inspect "," process_default  class "," send  class "]}," SexpProcessor initialize":{"type":"method","name":"initialize","children":[],"call":["@processors []= ","name to_sym ","name [] to_sym ","name [] ","name to_s start_with? ","name to_s "," public_methods each "," public_methods ","@processors empty? "," class processors "," class "," class processors  []= "," class processors  empty? "]}," Warning link":{"type":"method","name":"link","children":[],"call":[" warning_type to_s downcase gsub + "," warning_type to_s downcase gsub "," warning_type to_s downcase "," warning_type to_s "," warning_type ","@link_path start_with? "]}," Report with_link":{"type":"method","name":"with_link","children":[],"call":["warning link "]}," RouteHelper add_route":{"type":"method","name":"add_route","children":[],"call":["routes << ","routes != ","@tracker routes [] ","@tracker routes "," current_controller= ","route to_sym ","route [] "," node_type? ","route value ","route is_a? ","routes include? ! ","routes include? ","route include? ","controller nil? ","@tracker routes []  << ","route to_sym s << ","route [] s << ","route value s << ","@tracker routes []  != ","route to_sym s != ","route [] s != ","route value s != ","@tracker @tracker routes []  [] ","@tracker route to_sym s [] ","@tracker route [] s [] ","@tracker route value s [] ","@tracker @tracker routes []  ","@tracker route to_sym s ","@tracker route [] s ","@tracker route value s ","route to_sym  to_sym ","route []  to_sym ","route value  to_sym ","route to_sym  [] ","route []  [] ","route value  [] ","route to_sym  value ","route []  value ","route value  value ","route to_sym  is_a? ","route []  is_a? ","route value  is_a? ","@tracker routes []  include? ! ","route to_sym s include? ! ","route [] s include? ! ","route value s include? ! ","@tracker routes []  include? ","route to_sym s include? ","route [] s include? ","route value s include? ","route to_sym  include? ","route []  include? ","route value  include? "]}," Rails3RoutesProcessor in_controller_block":{"type":"method","name":"in_controller_block","children":[],"call":[]}," Rails3RoutesProcessor in_controller_block?":{"type":"method","name":"in_controller_block?","children":[],"call":[]}," Rails3RoutesProcessor process_controller_block":{"type":"method","name":"process_controller_block","children":[],"call":[" process ","exp [] "," in_controller_block "," current_controller= ","args [] [] ","args [] ","exp [] [] ","exp block_call first_arg value ","exp block_call first_arg ","exp block_call "," symbol? "," string? ","exp [] []  [] [] ","exp [] []  [] "]}," Rails3RoutesProcessor add_route_from_string":{"type":"method","name":"add_route_from_string","children":[],"call":[" add_route "," in_controller_block? "," extract_action ","value [] "," string? ","value []  [] "]}," CheckDigestDoS with_http_digest?":{"type":"method","name":"with_http_digest?","children":[],"call":[" tracker find_call empty? ! "," tracker find_call empty? "," tracker find_call "," tracker "]}," CheckDigestDoS run_check":{"type":"method","name":"run_check","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] "," with_http_digest? ","message << "," version_between? "," msg_version "," msg "," msg_cve "," msg  << "]}," BaseCheck active_record_models":{"type":"method","name":"active_record_models","children":[],"call":["@active_record_models []= "," ancestor? "," tracker models each "," tracker models "," tracker ","model ancestor? "]}," CheckStripTags cve_2012_3465":{"type":"method","name":"cve_2012_3465","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] "," tracker config [] "," tracker config "," tracker "," version_between? "," rails_version "," tracker config escape_html? ","message << "," msg_version "," msg "," msg_cve "," msg_code "," msg  << "]}," CheckStripTags cve_2011_2931":{"type":"method","name":"cve_2011_2931","children":[],"call":[" warn ","CONFIDENCE  [] "," gemfile_or_environment "," tracker config [] =~ "," tracker config [] "," tracker config "," tracker "," version_between? "," rails_version =~ "," rails_version "," msg "," msg_cve "," msg_code "]}," CheckSingleQuotes process_call":{"type":"method","name":"process_call","children":[],"call":[" process ","exp [] ","exp [] == ","exp target ","exp method == ","exp method ","exp target == "]}," CheckSingleQuotes process_defn":{"type":"method","name":"process_defn","children":[],"call":[" process ","exp [] ","exp [] == ","exp body ","exp method_name == ","exp method_name "," process_all "]}," CheckSingleQuotes process_module":{"type":"method","name":"process_module","children":[],"call":[" process ","exp [] ","exp [] == ","exp body ","exp module_name == ","exp module_name "," process_all "]}," CheckSingleQuotes process_class":{"type":"method","name":"process_class","children":[],"call":[" process ","exp [] ","exp [] == ","exp body ","exp class_name == ","exp class_name "," process_all "]}," CheckSingleQuotes uses_rack_escape?":{"type":"method","name":"uses_rack_escape?","children":[],"call":[" process ","@tracker initializers each ","@tracker initializers "]}," CheckSingleQuotes run_check":{"type":"method","name":"run_check","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] "," tracker config [] "," tracker config "," tracker "," version_between? "," uses_rack_escape? "," rails_version ","message << "," msg_version "," msg "," msg_cve "," msg  << "]}," CheckSingleQuotes initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CheckSelectTag process_result":{"type":"method","name":"process_result","children":[],"call":[" warn ","input match ","CONFIDENCE  [] "," include_user_input? "," sexp? ","@ignore_methods include? ","prompt_option [] "," call? "," hash_access "," hash? ","result [] [] [] ","result [] [] ","result [] "," add_result "," duplicate? ","prompt_option method ","result [] arglist last ","result [] arglist ","result [] last_arg "," original? "," include_user_input?  match "," include_user_ include_user_input? ? "," hash_access  [] "," hash_access  method ","result [] result [] [] []  ","result [] result [] arglist last  ","result [] result [] last_arg  "]}," CheckSelectTag run_check":{"type":"method","name":"run_check","children":[],"call":[" process_result ","calls each ","result [] [] == ","result [] [] ","result [] "," tracker find_call select "," tracker find_call "," tracker "," tracker config [] "," tracker config ","Set  [] merge "," tracker options [] "," tracker options ","Set  [] "," version_between? "," rails_version "," msg "," msg_cve "," msg_code "," msg_version "]}," Sexp parent_name":{"type":"method","name":"parent_name","children":[],"call":[" [] "," expect "]}," Sexp class_name":{"type":"method","name":"class_name","children":[],"call":[" [] "," expect "]}," Sexp render_type":{"type":"method","name":"render_type","children":[],"call":[" [] "," expect "]}," Sexp body":{"type":"method","name":"body","children":[],"call":[" [] "," node_type "," expect "," sexp_body "]}," Sexp body=":{"type":"method","name":"body=","children":[],"call":[" []= "," node_type "," expect ","exp each "," slice! ","exp [] ","exp first == ","exp first ","exp sexp_body "," exp [] ect "," exp sexp_body ect ","exp []  each ","exp sexp_body  each ","exp []  [] ","exp sexp_body  [] ","exp []  first == ","exp sexp_body  first == ","exp []  first ","exp sexp_body  first ","exp []  sexp [] _body ","exp sexp_body  sexp sexp_body _body "]}," Sexp method_name":{"type":"method","name":"method_name","children":[],"call":[" [] "," node_type "," expect "]}," Sexp rhs=":{"type":"method","name":"rhs=","children":[],"call":[" []= "," expect "," node_type == "," node_type "]}," Sexp rhs":{"type":"method","name":"rhs","children":[],"call":[" [] "," expect "," node_type == "," node_type "," [] == "]}," Sexp lhs=":{"type":"method","name":"lhs=","children":[],"call":[" []= "," expect "]}," Sexp lhs":{"type":"method","name":"lhs","children":[],"call":[" [] "," expect "]}," Sexp block_args":{"type":"method","name":"block_args","children":[],"call":[" [] "," expect ","Sexp  new "," [] == "]}," Sexp block":{"type":"method","name":"block","children":[],"call":[" [] "," node_type "," expect "," find_node ","delete nil? "]}," Sexp block_call":{"type":"method","name":"block_call","children":[],"call":[" [] "," expect "," s line "," line "," s "," [] node_type == "," [] node_type "]}," Sexp else_clause":{"type":"method","name":"else_clause","children":[],"call":[" [] "," expect "]}," Sexp then_clause":{"type":"method","name":"then_clause","children":[],"call":[" [] "," expect "]}," Sexp condition":{"type":"method","name":"condition","children":[],"call":[" [] "," expect "]}," Sexp second_arg=":{"type":"method","name":"second_arg=","children":[],"call":[" [] []= "," [] "," expect "," []= "]}," Sexp second_arg":{"type":"method","name":"second_arg","children":[],"call":[" [] [] "," [] "," expect "]}," Sexp first_arg=":{"type":"method","name":"first_arg=","children":[],"call":[" [] []= "," [] "," expect "," []= "]}," Sexp first_arg":{"type":"method","name":"first_arg","children":[],"call":[" [] [] "," [] "," expect "]}," Sexp args":{"type":"method","name":"args","children":[],"call":[" [] [] "," [] "," expect "," node_type ","Sexp  new "," sexp_body "]}," Sexp arglist":{"type":"method","name":"arglist","children":[],"call":[" [] "," expect ","Sexp  new ","Sexp  new concat "," node_type "," [] unshift "," sexp_body unshift "," sexp_body "]}," Sexp arglist=":{"type":"method","name":"arglist=","children":[],"call":[" []= "," expect ","start_index + ","exp each_with_index ","exp [] ","exp node_type == ","exp node_type ","exp is_a? ","exp sexp_body "," exp [] ect "," exp sexp_body ect ","exp []  each_with_index ","exp sexp_body  each_with_index ","exp []  [] ","exp sexp_body  [] ","exp []  node_type == ","exp sexp_body  node_type == ","exp []  node_type ","exp sexp_body  node_type ","exp []  is_a? ","exp sexp_body  is_a? ","exp []  sexp [] _body ","exp sexp_body  sexp sexp_body _body "]}," Sexp method":{"type":"method","name":"method","children":[],"call":[" [] "," expect "," node_type "," last "]}," Sexp target=":{"type":"method","name":"target=","children":[],"call":[" []= "," expect "]}," Sexp target":{"type":"method","name":"target","children":[],"call":[" [] "," expect "]}," Sexp expect":{"type":"method","name":"expect","children":[],"call":[" raise "," caller [] "," caller "," inspect ","types join ","types include? "," node_type "]}," Sexp each_sexp":{"type":"method","name":"each_sexp","children":[],"call":["Sexp  === "," each "]}," Sexp resbody":{"type":"method","name":"resbody","children":[],"call":[" find_node "]}," Sexp node_type=":{"type":"method","name":"node_type=","children":[],"call":[" []= "]}," Sexp second":{"type":"method","name":"second","children":[],"call":[" [] "]}," Sexp method_missing":{"type":"method","name":"method_missing","children":[],"call":[" raise ","NoMethodError  new "," find_node ","name == "]}," Report warning_file":{"type":"method","name":"warning_file","children":[],"call":["warning file ","Pathname  new relative_path_from to_s ","Pathname  new relative_path_from ","Pathname  new "," tracker options [] "," tracker options "," tracker ","@tracker options [] ","@tracker options ","warning file nil? "," relative_path "]}," ProcessorHelper process_all":{"type":"method","name":"process_all","children":[],"call":[" process ","exp each_sexp "]}," CheckContentTag raw?":{"type":"method","name":"raw?","children":[],"call":["exp method == ","exp method "," call? "]}," CheckContentTag process_call":{"type":"method","name":"process_call","children":[],"call":[" actually_process_call "]}," CheckContentTag check_argument":{"type":"method","name":"check_argument","children":[],"call":[" warn ","CONFIDENCE  [] ","@matched match "," add_result ","message << "," tracker options [] "," tracker options "," tracker ","@matched type ","method to_s =~ ","method to_s ","MODEL_METHODS  include? ","IGNORE_MODEL_METHODS  include? ","match [] "," has_immediate_model? "," tracker options [] ! ","input match ","input type "," has_immediate_user_input? "," process ","exp first_arg ","exp method == ","exp method "," call? "," friendly_type_of ","@matched type == "," likely_model_attribute? ","match method "," raw? "," msg "," msg_code "," msg_input ","@ has_immediate_model? ed  has_immediate_model?  "," msg  << ","@ has_immediate_model? ed type ","match []  to_s =~ ","match []  to_s "," has_immediate_model?  [] ","input  has_immediate_model?  "," has_immediate_user_input?  match "," has_immediate_user_input?  type "," has_immediate_user_ has_immediate_user_input? ? ","exp first_ process  ","exp match []  == ","exp match []  ","@ has_immediate_model? ed type == ","match match []  "," has_immediate_model?  method "," msg_ has_immediate_user_input?  "]}," CheckContentTag process_result":{"type":"method","name":"process_result","children":[],"call":[" check_argument "," hash_iterate "," hash? ! "," hash? "," request_value? "," false? ","@matched ! "," request_value? ! "," raw? ! "," raw? "," tracker options [] "," tracker options "," tracker ","args [] ","call arglist ","result []= ","result [] dup ","result [] "," duplicate? "," cve_2016_6316? ","result [] [] "," version_between? ","call arglist  [] ","result []=  arglist ","result []  arglist "]}," CheckContentTag run_check":{"type":"method","name":"run_check","children":[],"call":[" process_result ","methods each ","Brakeman  debug "," tracker options [] "," tracker options "," tracker "," tracker models keys "," tracker models "," tracker find_call ","Set  [] merge ","Set  [] "," check_cve_2016_6316 ","@content_tags each "," tracker find_call  each "]}," Sexp iasgn":{"type":"method","name":"iasgn","children":[],"call":[" find_node "]}," Sexp lasgn":{"type":"method","name":"lasgn","children":[],"call":[" find_node "]}," Tracker reset_controller":{"type":"method","name":"reset_controller","children":[],"call":["@call_index remove_indexes_by_class ","@call_index remove_template_indexes "," reset_template ","template [] grep empty? ! ","template [] grep empty? ","template [] grep ","template [] ","@templates each ","controller [] == ","controller [] ","@controllers delete_if ","@controllers delete ","controller [] include? ","@controllers each ","template [] include_controller? ","template render_path include_controller? ","template render_path ","controller files include? ","controller files "]}," Rescanner rescan_mixin":{"type":"method","name":"rescan_mixin","children":[],"call":[" rescan_file ","template [] "," tracker reset_template "," tracker ","to_rescan each ","to_rescan << ","original [] "," tracker templates [] ","1 to_sym "," tracker templates ","name to_s match ","name to_s ","template [] grep empty? ","template [] grep "," tracker templates each ","controller [] ","@paths include? ","controller [] include? ","lib [] "," tracker controllers each "," tracker controllers ","method_names join ","method_names << ","lib [] each ","(sym :public) each ","(send\n  (lvar :method_names) :map) join ","Regexp  escape ","n to_s ","method_names map "," tracker reset_controller ","controller [] each ","template [] include_any_method? ","original file ","template render_path include_any_method? ","template render_path ","controller files each ","controller files ","controller includes include? ","lib name ","controller includes ","lib each_method "," tracker templates []  [] "," tracker templates []  file "]}," Rescanner rescan_lib":{"type":"method","name":"rescan_lib","children":[],"call":[" rescan_mixin ","library [] == ","library [] "," tracker libs each "," tracker libs "," tracker "," process_lib ","File  exists? ","@app_tree path_exists? ","library [] include? "," parse_ruby_files each "," parse_ruby_files ","lib [] ","lib nil? "," tracker reset_lib ","library files include? ","library files ","lib files "," tracker reset_lib rary [] == "," tracker reset_lib rary [] "," tracker  tracker reset_lib s each "," tracker  tracker reset_lib s "," process_ tracker reset_lib  "," tracker reset_lib rary [] include? "," tracker reset_lib  [] "," tracker reset_lib  nil? "," tracker reset_ tracker reset_lib  "," tracker reset_lib rary files include? "," tracker reset_lib rary files "," tracker reset_lib  files "]}," RenderHelper get_class_target":{"type":"method","name":"get_class_target","children":[],"call":[" class_name "," get_class_target ","sexp target "," call? ","klass is_a? "," class_name  is_a? "]}," CallIndex from_template":{"type":"method","name":"from_template","children":[],"call":["call [] [] == ","call [] [] ","call [] ","template_name nil? "]}," Symbol to_json":{"type":"method","name":"to_json","children":[],"call":[" to_s inspect "," to_s "]}," CheckRedirect association?":{"type":"method","name":"association?","children":[],"call":["arg value == ","arg value "," symbol? ","args each ","model [] each ","model [] "," tracker models [] "," class_name "," tracker models "," tracker "," model_name? "," association? ","model_name target "," call? ","model association? "," tracker models []  [] each "," tracker models []  [] "," tracker  tracker models [] s [] "," tracker  tracker models [] s ","  tracker models [] _name? "," tracker models [] _name target "," tracker models []  association? "]}," CheckRedirect decorated_model?":{"type":"method","name":"decorated_model?","children":[],"call":["exp method == ","exp method ","exp target value to_s match ","exp target value to_s ","exp target value ","exp target "," node_type? "," call? "," tracker config [] [] "," tracker config [] "," tracker config "," tracker "," decorated_model? ","exp rhs ","exp lhs "," tracker config has_gem? "]}," CheckRedirect model_instance?":{"type":"method","name":"model_instance?","children":[],"call":[" association? ","exp method ","exp target ","exp method to_s match ","exp method to_s ","@model_find_calls include? "," model_name? "," call? "," model_instance? ","exp rhs ","exp lhs "," node_type? "," friendly_model? "," model_target? "]}," Sexp result_class":{"type":"method","name":"result_class","children":[],"call":[" [] "," expect "]}," Sexp module":{"type":"method","name":"module","children":[],"call":[" [] "," expect "]}," Sexp call":{"type":"method","name":"call","children":[],"call":[" last "," expect "]}," Sexp body_list":{"type":"method","name":"body_list","children":[],"call":[" body unshift "," body "]}," Sexp formal_args":{"type":"method","name":"formal_args","children":[],"call":[" [] "," node_type "," expect "]}," Sexp first_param":{"type":"method","name":"first_param","children":[],"call":[" [] "," expect "]}," Sexp last_arg":{"type":"method","name":"last_arg","children":[],"call":[" [] "," expect "]}," Sexp third_arg=":{"type":"method","name":"third_arg=","children":[],"call":[" []= "," expect "]}," Sexp third_arg":{"type":"method","name":"third_arg","children":[],"call":[" [] "," expect "]}," Sexp each_arg!":{"type":"method","name":"each_arg!","children":[],"call":[" each_arg "]}," Sexp each_arg":{"type":"method","name":"each_arg","children":[],"call":[" []= "," [] ","range each "," length "," node_type "," expect "]}," Sexp set_args":{"type":"method","name":"set_args","children":[],"call":[" arglist= "]}," Sexp value=":{"type":"method","name":"value=","children":[],"call":[" []= "," raise "," caller [] "," caller "," size > "," size "," inspect "]}," Brakeman config_file":{"type":"method","name":"config_file","children":[],"call":[]}," Warning format_ruby":{"type":"method","name":"format_ruby","children":[],"call":["formatted gsub! ","Brakeman OutputProcessor  new format ","Brakeman OutputProcessor  new ","Brakeman OutputProcessor  new format  gsub! "]}," Util make_call":{"type":"method","name":"make_call","children":[],"call":["call concat ","args first ","args first node_type is_a? ","args first node_type ","args first [] "," node_type? ","args first empty? ","args empty? ","Sexp  new ","args first sexp_body ","Sexp  new  concat "]}," Scanner report_progress":{"type":"method","name":"report_progress","children":[],"call":["$stderr print ","@options [] "]}," ProcessorHelper process_call_args":{"type":"method","name":"process_call_args","children":[],"call":[" process "," sexp? ","exp each_arg "]}," ProcessorHelper process_all!":{"type":"method","name":"process_all!","children":[],"call":[" process "," sexp? ","exp map! "]}," FindReturnValue make_return_value":{"type":"method","name":"make_return_value","children":[],"call":[" make_or ","@return_values reduce ","@return_values first ","@return_values length == ","@return_values length ","Sexp  new ","@return_values empty? ","@return_values uniq! ","@return_values compact! "]}," FindReturnValue make_or":{"type":"method","name":"make_or","children":[],"call":["Sexp  new ","lhs == "]}," FindReturnValue last_value":{"type":"method","name":"last_value","children":[],"call":["exp original_line ","exp line ","exp value ","exp rhs ","value original_line ","value rhs line ","value rhs "," make_or "," last_value ","else_clause nil? ","then_clause nil? ","exp else_clause ","exp then_clause ","exp last ","exp node_type ","exp original_line= ","value original_line= ","values first ","values inject ","values length > ","values length "," node_type? ","v nil? ","values reject! ","values << "," sexp? ","e last ","exp each_sexp ","exp  make_or  "," make_or  original_line "," make_or  rhs line "," make_or  rhs "," last_ make_or  ","exp else_clause  nil? ","exp then_clause  nil? ","exp exp else_clause  ","exp exp then_clause  "," make_or  original_line= "," make_or s first "," make_or s inject "," make_or s length > "," make_or s length "," make_or s reject! "," make_or s << "]}," FindReturnValue find_explicit_return_values":{"type":"method","name":"find_explicit_return_values","children":[],"call":["current [] concat ","current [] "," sexp? ","@return_values << ","current value ","current value nil? "," node_type? ","todo shift ","todo empty? "," last_value ","todo shift  [] concat ","todo shift  [] ","todo shift  value ","todo shift  value nil? ","current [] concat  shift ","current [] concat  empty? "]}," FindReturnValue process_method":{"type":"method","name":"process_method","children":[],"call":["Brakeman  debug ","exp inspect ","@return_values << "," last_value ","body empty? ","exp body "," node_type? "," find_explicit_return_values ","Brakeman AliasProcessor  new process_safely ","Brakeman AliasProcessor  new ","Brakeman AliasProcessor  new process_safely  inspect ","exp body  empty? ","exp exp body  ","Brakeman AliasProcessor  new process_safely  body "," find_Brakeman AliasProcessor  new process_safely licit_return_values "]}," FindReturnValue get_return_value":{"type":"method","name":"get_return_value","children":[],"call":["value original_line ","exp line "," make_return_value "," process_method ","value original_line= "," make_return_value  original_line "," make_return_ make_return_value  "," make_return_value  original_line= "]}," FindReturnValue uses_ivars?":{"type":"method","name":"uses_ivars?","children":[],"call":[]}," FindReturnValue initialize":{"type":"method","name":"initialize","children":[],"call":[]}," FindReturnValue return_value":{"type":"method","name":"return_value","children":[],"call":[]}," BaseProcessor ignore":{"type":"method","name":"ignore","children":[],"call":[]}," AliasProcessor find_method":{"type":"method","name":"find_method","children":[],"call":[]}," AliasProcessor assign_args":{"type":"method","name":"assign_args","children":[],"call":["meth_env []= ","args [] ","index - ","Sexp  new "," sexp? ","arg is_a? ","index == ","formal_args each_with_index ","method_exp formal_args ","method_exp formal_args  each_with_index ","method_exp method_exp formal_args  "]}," AliasProcessor process_helper_method":{"type":"method","name":"process_helper_method","children":[],"call":["@helper_method_info []= ","frv uses_ivars? ","@helper_method_cache []= ","method_exp method_name ","args length == ","args length ","frv uses_ivars? ! ","ivars []= "," env []= "," env "," only_ivars all each "," only_ivars all "," only_ivars ","frv get_return_value ","method_exp body_list ","Brakeman FindReturnValue  new ","values [] ","values [] each ","@helper_method_cache [] ","Digest SHA1  new update to_s to_sym ","Digest SHA1  new update to_s ","Digest SHA1  new update ","meth_values << ","method_name to_s ","Digest SHA1  new ","meth_values to_s ","meth_values sort! ","meth_env instance_variable_get to_a ","meth_env instance_variable_get "," assign_args "," only_request_vars ","info [] ","@helper_method_info [] ","Brakeman  debug ","@helper_method_@helper_method_info []  []= ","Brakeman FindReturnValue  new  uses_ivars? ","method_exp method_exp method_name  ","Brakeman FindReturnValue  new  uses_ivars? ! ","frv get_return_frv get_return_value  ","Brakeman FindReturnValue  new  get_return_value ","frv get_return_value s [] ","@helper_method_cache []  [] ","frv get_return_value s [] each ","@helper_method_cache []  [] each ","meth_frv get_return_value s << ","meth_@helper_method_cache []  << ","meth_values to_s  << ","meth_env instance_variable_get to_a  << ","method_exp method_name  to_s ","meth_frv get_return_value s to_s ","meth_@helper_method_cache []  to_s ","meth_values to_s  to_s ","meth_env instance_variable_get to_a  to_s ","meth_frv get_return_value s sort! ","meth_@helper_method_cache []  sort! ","meth_values to_s  sort! ","meth_env instance_variable_get to_a  sort! "," only_request_vars  instance_variable_get to_a "," only_ivars  instance_variable_get to_a "," only_request_vars  instance_variable_get "," only_ivars  instance_variable_get ","@helper_method_info []  [] ","@helper_method_@helper_method_info []  [] "]}," AliasProcessor get_call_value":{"type":"method","name":"get_call_value","children":[],"call":[" raise ","value line ","call line "," process_helper_method ","call args "," sexp? ","found_method [] "," find_method ","call method ","found_method src "," tracker find_method "," tracker "," process_helper_method  line "," process_found_method [] _method "," process_found_method src _method "," find_method  [] "," tracker find_method  [] "," find_method  src "," tracker find_method  src "]}," AliasProcessor only_request_vars":{"type":"method","name":"only_request_vars","children":[],"call":["res []= ","v dup ","v nil? ! ","v nil? "," request_value? "," env all each "," env all "," env ","SexpProcessor Environment  new ","SexpProcessor Environment  new  []= "]}," CheckValidationRegex process_validates":{"type":"method","name":"process_validates","children":[],"call":[" check_regex "," hash_access "," hash? ","validator last "]}," CheckValidationRegex process_validates_format_of":{"type":"method","name":"process_validates_format_of","children":[],"call":[" check_regex "," hash_access ","validator last "]}," CheckSessionSettings warn_about_secure_only":{"type":"method","name":"warn_about_secure_only","children":[],"call":[" warn ","value line ","CONFIDENCE  [] "]}," CheckSessionSettings warn_about_secret_length":{"type":"method","name":"warn_about_secret_length","children":[],"call":[" warn ","value line ","CONFIDENCE  [] "]}," CheckSessionSettings warn_about_http_only":{"type":"method","name":"warn_about_http_only","children":[],"call":[" warn ","value line ","CONFIDENCE  [] "]}," CheckSessionSettings check_for_rails3_issues":{"type":"method","name":"check_for_rails3_issues","children":[],"call":[" warn_about_secure_only "," false? "," hash_access "," warn_about_http_only "," hash? ","value line "," hash_access  line "]}," CheckSessionSettings settings_target?":{"type":"method","name":"settings_target?","children":[],"call":["exp target rhs == ","exp target rhs ","exp target "," node_type? ","exp method == ","exp method "," call? "]}," CheckMassAssignment literal?":{"type":"method","name":"literal?","children":[],"call":["LITERALS  include? ","exp node_type "," all_literal_args? ","exp node_type == "," sexp? "]}," CheckMassAssignment all_literal_args?":{"type":"method","name":"all_literal_args?","children":[],"call":[" literal? ","exp all? ","exp each_arg "," call? "]}," Brakeman AppTree reject_skipped_files":{"type":"method","name":"reject_skipped_files","children":[],"call":["@skip_files match ","paths reject! ","paths reject ","File  join ","absolute_path relative_path_from to_s ","absolute_path relative_path_from ","Pathname  new "," match_path ","Pathname  new  relative_path_from to_s ","Pathname  new  relative_path_from "]}," Brakeman AppTree find_paths":{"type":"method","name":"find_paths","children":[],"call":[" reject_skipped_files ","Dir  glob sort tap ","Dir  glob sort ","Dir  glob ","@root + "," select_files "," glob_files sort "," glob_files "]}," Brakeman AppTree lib_paths":{"type":"method","name":"lib_paths","children":[],"call":[" find_paths ","path include? "," find_paths reject ","(send\n  (send nil :find_paths\n    (str \"lib\")) :reject) + "," find_additional_lib_paths ","(send\n  (send nil :find_paths\n    (str \"lib\")) :reject) + + "," find_helper_paths ","(send\n  (send nil :find_paths\n    (str \"lib\")) :reject) + + + "," find_job_paths ","path relative include? ","path relative "]}," Brakeman AppTree layout_exists?":{"type":"method","name":"layout_exists?","children":[],"call":["Dir  glob empty? ! ","Dir  glob empty? ","Dir  glob "," root_search_pattern "]}," Brakeman AppTree template_paths":{"type":"method","name":"template_paths","children":[],"call":[" find_paths "," find_paths + ","File  basename count > ","File  basename count ","File  basename "," find_paths reject "]}," Brakeman AppTree model_paths":{"type":"method","name":"model_paths","children":[],"call":[" find_paths "," prioritize_concerns "]}," Brakeman AppTree controller_paths":{"type":"method","name":"controller_paths","children":[],"call":[" find_paths "," prioritize_concerns "]}," Brakeman AppTree initializer_paths":{"type":"method","name":"initializer_paths","children":[],"call":[" find_paths "," prioritize_concerns "]}," Brakeman AppTree path_exists?":{"type":"method","name":"path_exists?","children":[],"call":["File  exists? ","File  exist? "]}," Brakeman AppTree exists?":{"type":"method","name":"exists?","children":[],"call":["File  exists? ","File  join ","File  exist? ","path exists? ","path is_a? "]}," Brakeman AppTree read_path":{"type":"method","name":"read_path","children":[],"call":["File  read "]}," Brakeman AppTree read":{"type":"method","name":"read","children":[],"call":["File  read ","File  join "]}," Brakeman AppTree expand_path":{"type":"method","name":"expand_path","children":[],"call":["File  expand_path "]}," Brakeman AppTree initialize":{"type":"method","name":"initialize","children":[],"call":["init_options [] ","Pathname  new ","@engine_paths - ","path start_with? ","@engine_paths select "]}," Brakeman AppTree from_options":{"type":"method","name":"from_options","children":[],"call":[]}," CheckYAMLParsing disabled_xml_dangerous_types?":{"type":"method","name":"disabled_xml_dangerous_types?","children":[],"call":["arg value == ","arg value "," string? ","result call first_arg ","result call ","matches each "," tracker check_initializers "," tracker "," version_between? ","result [] first_arg ","result [] "," tracker find_call ","result call first_arg  value == ","result [] first_arg  value == ","result call first_arg  value ","result [] first_arg  value ","result call first_result call first_arg  ","result call first_result [] first_arg  "," tracker check_initializers  each "," tracker find_call  each ","result [] first_result call first_arg  ","result [] first_result [] first_arg  "]}," CheckYAMLParsing enabled_yaml_parser?":{"type":"method","name":"enabled_yaml_parser?","children":[],"call":["result call second_arg value == ","result call second_arg value ","result call second_arg ","result call "," symbol? ","result call first_arg == ","result call first_arg ","matches each "," s "," tracker check_initializers "," tracker ","result [] second_arg value == ","result [] second_arg value ","result [] second_arg ","result [] ","result [] first_arg == ","result [] first_arg "," tracker find_call "," tracker check_initializers  each "," tracker find_call  each "]}," CheckYAMLParsing disabled_xml_parser?":{"type":"method","name":"disabled_xml_parser?","children":[],"call":["result call first_arg == ","result call first_arg ","result call ","matches each "," s ","matches empty? "," tracker check_initializers "," tracker "," version_between? ","result [] first_arg == ","result [] first_arg ","result [] "," tracker find_call "," tracker check_initializers  each "," tracker find_call  each "," tracker check_initializers  empty? "," tracker find_call  empty? "]}," CheckYAMLParsing run_check":{"type":"method","name":"run_check","children":[],"call":[" warn ","CONFIDENCE  [] "," enabled_yaml_parser? "," version_between? "," gemfile_or_environment "," tracker config [] "," tracker config "," tracker "," disabled_xml_dangerous_types? "," disabled_xml_parser? "," rails_version "," msg "," msg_version "]}," CheckYAMLLoad check_yaml_load":{"type":"method","name":"check_yaml_load","children":[],"call":[" warn ","input match ","input type ","CONFIDENCE  [] "," include_user_input? "," has_immediate_user_input? ","result [] first_arg ","result [] "," add_result "," duplicate? ","result [] method "," include_user_input?  match "," has_immediate_user_input?  match "," include_user_input?  type "," has_immediate_user_input?  type "," include_user_ include_user_input? ? "," include_user_ has_immediate_user_input? ? "," has_immediate_user_ include_user_input? ? "," has_immediate_user_ has_immediate_user_input? ? ","result [] first_result [] first_arg  ","result [] result [] method  "]}," CheckYAMLLoad run_check":{"type":"method","name":"run_check","children":[],"call":[" check_yaml_load "," tracker find_call each "," tracker find_call "," tracker "]}," CheckSQL check_rails_version_for_cve_2013_0155":{"type":"method","name":"check_rails_version_for_cve_2013_0155","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] "," version_between? "," cve_warning_for "]}," CheckSQL check_rails_version_for_cve_2012_5664":{"type":"method","name":"check_rails_version_for_cve_2012_5664","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] "," version_between? "," cve_warning_for "]}," CheckSessionSettings warn_about_secret_token":{"type":"method","name":"warn_about_secret_token","children":[],"call":[" warn ","value line ","CONFIDENCE  [] "]}," MultiJson load":{"type":"method","name":"load","children":[],"call":[]}," MultiJson dump":{"type":"method","name":"dump","children":[],"call":[]}," GemProcessor get_json_version":{"type":"method","name":"get_json_version","children":[],"call":["@tracker config [] []= "," get_version ","@tracker config [] ","@tracker config "]}," GemProcessor get_version":{"type":"method","name":"get_version","children":[],"call":["match [] ","gem_lock match ","gem_lock =~ ","gem_lock match  [] ","gem_lock gem_lock match  "]}," CheckSQL check_update_all_arguments":{"type":"method","name":"check_update_all_arguments","children":[],"call":[" unsafe_sql? ","args each "]}," CheckModelSerialize check_for_serialize":{"type":"method","name":"check_for_serialize","children":[],"call":[" warn "," tracker config [] "," tracker config "," tracker ","model [] ","CONFIDENCE  [] ","attrs empty? ","safe_attrs include? ","attrs delete_if ","safe_attrs << "," symbol? ","arglist each ","protected_attrs each ","Set  new ","model [] [] ","unsafe_attrs include? ! ","unsafe_attrs include? ","attr value ","attrs << ","serialized_attrs each ","model [] first ","model file "," rails_version ","model name ","model attr_protected ","model attr_accessible ","model options [] ","model options ","model top_line "," msg "," msg_version ","Set  new  empty? ","Set  new  include? ","safe_Set  new  include? ","Set  new  delete_if ","Set  new  << ","safe_Set  new  << ","model [] []  each ","model attr_protected  each ","protected_Set  new  each ","unSet  new  include? ! ","model []  include? ! ","model attr_accessible  include? ! ","unsafe_Set  new  include? ! ","unSet  new  include? ","model []  include? ","model attr_accessible  include? ","unsafe_Set  new  include? ","serialized_Set  new  each ","model options []  each "]}," CheckModelSerialize run_check":{"type":"method","name":"run_check","children":[],"call":[" check_for_serialize "," tracker models each "," tracker models "," tracker "," version_between? "]}," CheckModelAttributes check_for_attr_protected_bypass":{"type":"method","name":"check_for_attr_protected_bypass","children":[],"call":["CONFIDENCE  [] "," tracker config [] "," tracker config "," tracker "," version_between? "," rails_version "," msg "," msg_code "," msg_version "]}," CheckJSONParsing uses_json_parse?":{"type":"method","name":"uses_json_parse?","children":[],"call":[" tracker find_call empty? ! "," tracker find_call empty? "," tracker find_call "," tracker ","@uses_json_parse nil? "]}," CheckJSONParsing check_json_version":{"type":"method","name":"check_json_version","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] "," uses_json_parse? ","confidence == ","message << ","version >= ","version < "," msg_version "," msg ","CONFIDENCE  []  == "," msg  << "]}," CheckJSONParsing check_cve_2013_0269":{"type":"method","name":"check_cve_2013_0269","children":[],"call":[" check_json_version "," tracker config [] [] "," tracker config [] "," tracker config "," tracker ","(sym :json) each ","gem_hash [] "," tracker config get_gem "," tracker config [] []  [] "," tracker config get_gem  [] "]}," CheckJSONParsing uses_gem_backend?":{"type":"method","name":"uses_gem_backend?","children":[],"call":["result call first_arg == ","result call first_arg ","result call ","matches each "," s ","matches empty? "," tracker check_initializers "," tracker ","result [] first_arg == ","result [] first_arg ","result [] "," tracker find_call "," tracker check_initializers  each "," tracker find_call  each "," tracker check_initializers  empty? "," tracker find_call  empty? "]}," CheckJSONParsing uses_yajl?":{"type":"method","name":"uses_yajl?","children":[],"call":[" tracker config [] [] "," tracker config [] "," tracker config "," tracker "," tracker config has_gem? "]}," CheckJSONParsing check_cve_2013_0333":{"type":"method","name":"check_cve_2013_0333","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] "," tracker config [] "," tracker config "," tracker "," version_between? "," uses_gem_backend? "," uses_yajl? "," rails_version "," msg "," msg_version "]}," CheckJSONParsing run_check":{"type":"method","name":"run_check","children":[],"call":[" check_cve_2013_0269 "," check_cve_2013_0333 "]}," WarningCodes code":{"type":"method","name":"code","children":[],"call":[]}," Warning location":{"type":"method","name":"location","children":[],"call":[" method "," class "," controller "," model "," view_name "," model name "]}," Warning fingerprint":{"type":"method","name":"fingerprint","children":[],"call":["Digest SHA2  new update to_s ","Digest SHA2  new update "," confidence ","Digest SHA2  new ","@code inspect "," sprintf ","(send\n  (lvar :loc) :sort_by) to_s ","k to_s ","loc sort_by "," location ","(send\n  (lvar :loc) :sort_by) inspect "," file relative "," file ","(send\n  (lvar : location ) :sort_by) to_s "," location  sort_by ","  location ation ","(send\n  (lvar : location ) :sort_by) inspect "]}," Util relative_path":{"type":"method","name":"relative_path","children":[],"call":["Pathname  new relative_path_from to_s ","Pathname  new relative_path_from ","Pathname  new ","@tracker options [] ","@tracker options ","file start_with? ","file empty? ! ","file empty? ","@tracker app_path ","pname relative_path_from to_s ","pname relative_path_from ","pname absolute? ","Pathname  new  relative_path_from to_s ","Pathname  new  relative_path_from ","Pathname  new  absolute? "]}," SlimTemplateProcessor process_render":{"type":"method","name":"process_render","children":[],"call":[]}," SlimTemplateProcessor render?":{"type":"method","name":"render?","children":[],"call":["exp method == ","exp method ","exp target nil? ","exp target "," call? "]}," SlimTemplateProcessor is_escaped?":{"type":"method","name":"is_escaped?","children":[],"call":["exp method == ","exp method ","exp target == ","exp target "," call? "]}," SlimTemplateProcessor process_interp_output":{"type":"method","name":"process_interp_output","children":[],"call":[" make_output "," make_escaped_output "," is_escaped? "," node_type? "," make_render_in_view "," render? "," ignore ","exp == "," process_interp_output ","exp else_clause ","exp then_clause "," sexp? "," add_output "," add_escaped_output "]}," SlimTemplateProcessor process_inside_interp":{"type":"method","name":"process_inside_interp","children":[],"call":["e value= "," process_interp_output ","e value "," node_type? ","exp map! "]}," SlimTemplateProcessor make_escaped_output":{"type":"method","name":"make_escaped_output","children":[],"call":["@current_template [] << ","@current_template [] ","s line ","exp line ","Sexp  new ","exp first_arg ","@current_template add_output ","Sexp  new  line ","exp firSexp  new t_arg "]}," SlimTemplateProcessor make_output":{"type":"method","name":"make_output","children":[],"call":["@current_template [] << ","@current_template [] ","s line ","exp line ","Sexp  new ","@current_template add_output ","Sexp  new  line "]}," SlimTemplateProcessor process_call":{"type":"method","name":"process_call","children":[],"call":["call line ","exp line ","call original_line ","exp original_line "," make_call "," process_all! ","exp args "," make_render_in_view ","exp arglist= "," process ","exp arglist ","method == ","target == "," make_escaped_output ","exp first_arg "," is_escaped? "," make_output "," ignore "," node_type? "," process_inside_interp "," render? "," string? ","arg target ","arg method == ","arg method "," call? ","exp method ","exp target ","call original_line= "," string_interp? "," normalize_output "," add_escaped_output "," add_output ","arg == "," internal_variable? ","arg first_arg "," make_call  line "," make_call  original_line "," make_ make_call  ","exp arg target s ","exp exp first_arg s ","exp  normalize_output s ","exp arg target list= ","exp exp first_arg list= ","exp  normalize_output list= ","exp arg target list ","exp exp first_arg list ","exp  normalize_output list ","exp method  == ","targ target et == ","texp first_arg et == ","t normalize_output et == ","exp target  == ","exp first_arg target  ","exp first_exp first_arg  ","exp first_ normalize_output  ","arg target  targ target et ","exp first_arg  texp first_arg et "," normalize_output  t normalize_output et ","arg exp target  ","arg target  method == ","exp first_arg  method == "," normalize_output  method == ","arg exp method  == ","arg target  method ","exp first_arg  method "," normalize_output  method ","arg exp method  ","  make_call ? ","exp exp method  ","exp targ target et ","exp texp first_arg et ","exp t normalize_output et ","exp exp target  "," make_call  original_line= ","arg target  == ","exp first_arg  == "," normalize_output  == ","arg target  first_arg target  ","exp first_arg  first_exp first_arg  "," normalize_output  first_ normalize_output  "]}," AliasProcessor process_or_target":{"type":"method","name":"process_or_target","children":[],"call":[" process ","copy target= "," number? "," string? "]}," AliasProcessor process_or_simple_operation":{"type":"method","name":"process_or_simple_operation","children":[],"call":["exp target ","exp target rhs= ","exp target lhs= "," same_value? "," process_or_target ","exp dup ","target rhs ","target lhs "," number? "," string? ","exp first_arg ","exp exp target  ","exp texp first_arg et ","exp target  process_or_target = ","exp exp target  rhs= ","exp texp first_arg et rhs= ","exp exp target  lhs= ","exp texp first_arg et lhs= "," process_or_exp target  "," process_or_texp first_arg et ","target  process_or_target  ","exp target  rhs ","texp first_arg et rhs ","exp target  lhs ","texp first_arg et lhs ","exp first_exp first_arg  "]}," AliasProcessor set_value":{"type":"method","name":"set_value","children":[],"call":["current_if << "," env []= "," env ","current_val rhs= "," node_type? ","current_if include? ","Sexp  new line ","var line ","Sexp  new "," same_value? "," env [] "," branch_value? ","@inside_if last "," env current []= "," env current ","@inside_if ! "," value_from_if ","@branch_env []= ","@branch_env [] "," env current [] ","@meth_env []= "," env [] nil? "," value_from_case ","@inside_if last  << "," env []  rhs= ","@inside_if last  include? "," same_ value_from_if ? "," same_ value_from_case ? "," branch_ value_from_if ? "," branch_ value_from_case ? ","  value_from_if _from_if ","  value_from_case _from_if ","  value_from_if _from_case ","  value_from_case _from_case "]}," AliasProcessor same_value?":{"type":"method","name":"same_value?","children":[],"call":["lhs lhs == ","lhs lhs ","lhs rhs == ","lhs rhs "," node_type? ","lhs == "]}," AliasProcessor branch_value?":{"type":"method","name":"branch_value?","children":[],"call":["(or\n  (send\n    (ivar :@inside_if) :empty?)\n  (send\n    (send\n      (ivar :@inside_if) :last) :include?\n    (lvar :exp))) ! ","@inside_if last include? ","@inside_if last ","@inside_if empty? "]}," CheckUnsafeReflection check_unsafe_reflection":{"type":"method","name":"check_unsafe_reflection","children":[],"call":[" warn ","input match ","input type ","CONFIDENCE  [] "," include_user_input? "," has_immediate_user_input? ","call first_arg ","call target ","call method ","result [] "," add_result "," duplicate? "," friendly_type_of ","result [] original_line "," original? "," msg "," msg_input "," msg_code "," include_user_input?  match "," has_immediate_user_input?  match "," include_user_input?  type "," has_immediate_user_input?  type "," include_user_ include_user_input? ? "," include_user_ has_immediate_user_input? ? "," has_immediate_user_ include_user_input? ? "," has_immediate_user_ has_immediate_user_input? ? ","call first_call first_arg  ","call first_call target  ","result []  first_arg ","call tcall first_arg et ","call tcall target et ","result []  target ","call call method  ","result []  method "," msg_ include_user_input?  "," msg_ has_immediate_user_input?  "]}," CheckUnsafeReflection run_check":{"type":"method","name":"run_check","children":[],"call":[" check_unsafe_reflection "," tracker find_call each "," tracker find_call "," tracker "]}," CheckSkipBeforeFilter skip_except_value":{"type":"method","name":"skip_except_value","children":[],"call":["first_arg value "," hash_access "," hash? "," symbol? ","filter last_arg ","filter first_arg "," call? ","filter first_arg  value ","filter filter last_arg  ","filter filter first_arg  "]}," Sexp deep_clone":{"type":"method","name":"deep_clone","children":[],"call":["s line "," line ","s original_line "," original_line ","s << ","e deep_clone ","e is_a? "," each ","Sexp  new ","s original_line= ","Sexp  new  line ","Sexp  new  original_line ","Sexp  new  << ","e iSexp  new _a? ","Sexp  new  original_line= "]}," CheckSymbolDoS run_check":{"type":"method","name":"run_check","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] "," tracker config [] "," tracker config "," tracker "," active_record_models empty? "," active_record_models "," version_between? "," check_unsafe_symbol_creation "," tracker find_call each "," tracker find_call "," active_record_models any? "," rails_version > "," rails_version "," rails_version >= "," tracker config ruby_version >= "," tracker config ruby_version "]}," CheckSanitizeMethods check_for_cve":{"type":"method","name":"check_for_cve","children":[],"call":[" warn ","CONFIDENCE  [] "," include_user_input? ","result [] "," tracker config [] "," tracker config "," tracker "," tracker find_call each "," tracker find_call "," add_result "," duplicate? "," rails_version "," msg "," msg_version "," msg_code "]}," CheckSanitizeMethods check_cve_2013_1857":{"type":"method","name":"check_cve_2013_1857","children":[],"call":[" check_for_cve "]}," CheckSanitizeMethods check_cve_2013_1855":{"type":"method","name":"check_cve_2013_1855","children":[],"call":[" check_for_cve "]}," CheckSanitizeMethods run_check":{"type":"method","name":"run_check","children":[],"call":[" check_cve_2013_1857 "," check_cve_2013_1855 "," version_between? "," warn_sanitizer_cve "," tracker config gem_version "," tracker config "," tracker "," tracker config has_gem? "," check_cve_2018_8048 "," check_rails_html_sanitizer "]}," CheckJRubyXML run_check":{"type":"method","name":"run_check","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] "," tracker config [] "," tracker config "," tracker ","arg value == ","arg value "," string? ","result call first_arg ","result call "," tracker check_initializers each "," tracker check_initializers "," version_between? ","RUBY_PLATFORM  == "," rails_version "," msg "," msg_version ","result [] first_arg ","result [] "," tracker find_call each "," tracker find_call ","result call first_arg  value == ","result [] first_arg  value == ","result call first_arg  value ","result [] first_arg  value ","result call first_result call first_arg  ","result call first_result [] first_arg  ","result [] first_result call first_arg  ","result [] first_result [] first_arg  "]}," Sexp <<":{"type":"method","name":"<<","children":[],"call":[" old_push "]}," Util block?":{"type":"method","name":"block?","children":[],"call":["exp node_type == ","exp node_type ","exp is_a? "]}," Report render_array":{"type":"method","name":"render_array","children":[],"call":["t add_row ","value_array each ","Terminal Table  new ","Brakeman Report Renderer  new render ","Brakeman Report Renderer  new ","value_array empty? "]}," Report Renderer render":{"type":"method","name":"render","children":[],"call":["ERB  new result "," binding ","ERB  new "," template "]}," Report Renderer initialize":{"type":"method","name":"initialize","children":[],"call":["File  read ","File  expand_path ","File  dirname ","singleton send ","hash [] each ","hash [] "]}," FindAllCalls process_dsym":{"type":"method","name":"process_dsym","children":[],"call":["@calls << ","call []= "," process "," sexp? ","exp each "," make_location "," add_simple_call "]}," AliasProcessor value_from_if":{"type":"method","name":"value_from_if","children":[],"call":["Sexp  new line ","exp line ","Sexp  new ","exp else_clause ","exp then_clause "," false? "," true? ","exp condition ","exp then_clause nil? ","exp else_clause nil? "," block? ","exp then_clause combine ","exp exp condition  "]}," AliasProcessor merge_if_branch":{"type":"method","name":"merge_if_branch","children":[],"call":[" env []= "," env ","Sexp  new line ","k line ","Sexp  new "," same_value? "," env [] ","branch_env each ","current_val combine "," too_deep? ","v nil? "," env []  combine "]}," AliasProcessor process_if_branch":{"type":"method","name":"process_if_branch","children":[],"call":[" process "," process_default "," block? "," sexp? "]}," AliasProcessor process_call_with_block":{"type":"method","name":"process_call_with_block","children":[],"call":["exp []= "," process "," process_all! "," block? ","exp block "," raise ","e inspect "," env current []= "," env current "," env ","Sexp  new ","e is_a? ","e [] each ","e [] "," node_type? ","e rhs ","e lhs ","exp block_args each ","exp block_args "," env scope ","exp block_call "," exp block ? ","exp exp block  ","exp exp block _args each ","exp exp block _args ","exp exp block _call "]}," CheckSymbolDoS check_unsafe_symbol_creation":{"type":"method","name":"check_unsafe_symbol_creation","children":[],"call":[" warn ","input match ","input type ","CONFIDENCE  [] ","(send\n  (lvar :args) :map) compact first ","(send\n  (lvar :args) :map) compact "," include_user_input? ","args map "," has_immediate_user_input? "," sexp? ","call select ","call target ","result [] == ","result [] "," friendly_type_of "," add_result ","result [] original_line "," duplicate? "," safe_parameter? "," original? "," msg "," msg_input "," symbolizing_attributes? ","(send\n  (lvar :args) :map) compact first  match ","(send\n  (lvar :args) :map) compact first  type "," include_user_(send\n  (lvar :args) :map) compact first ? "," has_immediate_user_(send\n  (lvar :args) :map) compact first ? ","result []  select ","result []  target "," msg_(send\n  (lvar :args) :map) compact first  "]}," CheckSessionSettings ignored?":{"type":"method","name":"ignored?","children":[],"call":["input include? ","@app_tree read ","@app_tree exists? ","(str \".\") each ","ignore_file read ","@app_tree file_path ","@app_tree read  include? ","ignore_file read  include? ","@app_tree file_path  read "]}," CheckLinkTo warn_xss":{"type":"method","name":"warn_xss","children":[],"call":[" warn "," add_result "]}," CheckLinkTo check_matched":{"type":"method","name":"check_matched","children":[],"call":[" warn_xss ","CONFIDENCE  [] ","@matched match ","matched type == ","matched type "," tracker options [] ! "," tracker options [] "," tracker options "," tracker "," friendly_type_of "," msg "," msg_code "," msg_input "]}," CheckLinkTo check_method":{"type":"method","name":"check_method","children":[],"call":[" warn_xss ","CONFIDENCE  [] ","method to_s =~ ","method to_s ","MODEL_METHODS  include? ","IGNORE_MODEL_METHODS  include? ","match method "," has_immediate_model? "," tracker options [] "," tracker options "," tracker "," likely_model_attribute? "," msg "," msg_code ","match method  to_s =~ ","match method  to_s ","match match method  "," has_immediate_model?  method "]}," CheckLinkTo check_user_input":{"type":"method","name":"check_user_input","children":[],"call":[" warn_xss ","CONFIDENCE  [] ","input match ","input type "," has_immediate_user_input? "," friendly_type_of "," msg "," msg_code "," msg_input "," has_immediate_user_input?  match "," has_immediate_user_input?  type "," has_immediate_user_ has_immediate_user_input? ? "," msg_ has_immediate_user_input?  "]}," Brakeman write_report_to_formats":{"type":"method","name":"write_report_to_formats","children":[],"call":[]}," Brakeman write_report_to_files":{"type":"method","name":"write_report_to_files","children":[],"call":[]}," Brakeman get_formats_from_output_files":{"type":"method","name":"get_formats_from_output_files","children":[],"call":[]}," Brakeman get_formats_from_output_format":{"type":"method","name":"get_formats_from_output_format","children":[],"call":[]}," Brakeman default_options":{"type":"method","name":"default_options","children":[],"call":[]}," Report format":{"type":"method","name":"format","children":[],"call":[" to_s "," to_test "," to_tabs "," to_json "," to_csv "," to_pdf "," to_html "," generate "," raise ","VALID_FORMATS  inspect "," require_report "," to_markdown "," to_plain "," to_table "," to_sarif "]}," OutputProcessor process_defn":{"type":"method","name":"process_defn","children":[],"call":["(str \"def \") gsub ","body join ","body << "," indent ","body empty? "," process ","exp shift ","exp empty? ","exp == "," s ","args == ","exp deep_clone ","body join  join ","body join  << ","body join  empty? ","exp deep_clone  shift ","exp deep_clone  empty? ","exp deep_clone  == "," process  == ","exp deep_clone  deep_clone "]}," FindAllCalls make_location":{"type":"method","name":"make_location","children":[],"call":["@cache []= ","@cache [] "]}," ControllerProcessor set_controller":{"type":"method","name":"set_controller","children":[],"call":[]}," CheckSQL cve_warning_for":{"type":"method","name":"cve_warning_for","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] "," tracker config [] "," tracker config "," tracker ","cve tr to_sym ","cve tr "," upgrade_version? ","  upgrade_version? ? "]}," CheckSQL upgrade_version?":{"type":"method","name":"upgrade_version?","children":[],"call":[" version_between? ","versions each "]}," CheckDeserialize check_deserialize":{"type":"method","name":"check_deserialize","children":[],"call":[" warn ","input match "," friendly_type_of ","CONFIDENCE  [] "," include_user_input? "," has_immediate_user_input? ","result [] method ","result [] ","result [] first_arg "," add_result "," duplicate? "," original? "," msg "," msg_input "," msg_code "," include_user_input?  match "," has_immediate_user_input?  match "," include_user_ include_user_input? ? "," include_user_ has_immediate_user_input? ? "," has_immediate_user_ include_user_input? ? "," has_immediate_user_ has_immediate_user_input? ? ","result [] result [] method  "," msg_ include_user_input?  "," msg_ has_immediate_user_input?  "]}," CheckDeserialize check_methods":{"type":"method","name":"check_methods","children":[],"call":[" check_deserialize "," tracker find_call each "," tracker find_call "," tracker "]}," CheckDeserialize check_marshal":{"type":"method","name":"check_marshal","children":[],"call":[" check_methods "]}," CheckDeserialize check_csv":{"type":"method","name":"check_csv","children":[],"call":[" check_methods "]}," CheckDeserialize check_yaml":{"type":"method","name":"check_yaml","children":[],"call":[" check_methods "," check_deserialize "," true? "," hash_access "," hash? ","call second_arg ","result [] "," tracker find_call each "," tracker find_call "," tracker "," uses_safe_yaml? ","result []  second_arg "," tracker find_result []  each "," tracker find_result []  "]}," CheckDeserialize run_check":{"type":"method","name":"run_check","children":[],"call":[" check_marshal "," check_csv "," check_yaml "," check_oj "]}," BaseCheck friendly_type_of":{"type":"method","name":"friendly_type_of","children":[],"call":["input_type type ","input_type is_a? ","input_type type  type ","input_type type  is_a? "]}," BaseCheck inherited":{"type":"method","name":"inherited","children":[],"call":["subclass name= ","subclass to_s match [] ","subclass to_s match ","subclass to_s "]}," Brakeman AppTree select_only_files":{"type":"method","name":"select_only_files","children":[],"call":["@only_files match ","paths select ","File  join ","absolute_path relative_path_from to_s ","absolute_path relative_path_from ","Pathname  new "," match_path ","Pathname  new  relative_path_from to_s ","Pathname  new  relative_path_from "]}," Brakeman AppTree select_files":{"type":"method","name":"select_files","children":[],"call":[" reject_skipped_files "," select_only_files "," convert_to_file_paths "," reject_global_excludes "," convert_to_file_ select_only_files  "," convert_to_file_ reject_skipped_files  "," convert_to_file_ convert_to_file_paths  "]}," Sexp combine":{"type":"method","name":"combine","children":[],"call":["combined or_depth= ","(send\n  (self) :or_depth) compact reduce + ","(send\n  (self) :or_depth) compact reduce ","(send\n  (self) :or_depth) compact ","exp or_depth "," or_depth ","Sexp  new line ","Sexp  new ","Sexp  new line  or_depth= "]}," Brakeman filter_warnings":{"type":"method","name":"filter_warnings","children":[],"call":[]}," Brakeman load_dependency":{"type":"method","name":"load_dependency","children":[],"call":[]}," Tracker warnings":{"type":"method","name":"warnings","children":[],"call":[" checks all_warnings "," checks "]}," Report generate":{"type":"method","name":"generate","children":[],"call":["reporter new generate_report ","reporter new "]}," Report require_report":{"type":"method","name":"require_report","children":[],"call":[" require "]}," Report method_missing":{"type":"method","name":"method_missing","children":[],"call":[" format ","VALID_FORMATS  include? "]}," Tabs generate_report":{"type":"method","name":"generate_report","children":[],"call":["(send\n  (array\n    (array\n      (sym :warnings)\n      (str \"General\"))\n    (array\n      (sym :controller_warnings)\n      (str \"Controller\"))\n    (array\n      (sym :model_warnings)\n      (str \"Model\"))\n    (array\n      (sym :template_warnings)\n      (str \"Template\"))) :map) join ","(send\n  (send\n    (send nil :checks) :send\n    (lvar :meth)) :map) join ","TEXT_CONFIDENCE  [] ","w confidence ","w format_message ","w warning_type "," warning_file ","w warning_type gsub! ","w line "," checks send map "," checks send "," checks ","(array\n  (sym :warnings)\n  (str \"General\")) map ","(send\n  (array\n    (array\n      (sym :generic_warnings)\n      (str \"General\"))\n    (array\n      (sym :controller_warnings)\n      (str \"Controller\"))\n    (array\n      (sym :model_warnings)\n      (str \"Model\"))\n    (array\n      (sym :template_warnings)\n      (str \"Template\"))) :map) join ","(send\n  (send\n    (self) :send\n    (lvar :meth)) :map) join "," send map "," send ","(array\n  (sym :generic_warnings)\n  (str \"General\")) map ","w file absolute ","w file ","w confidence_name "]}," Table text_header":{"type":"method","name":"text_header","children":[],"call":[" checks checks_run sort join "," checks checks_run sort "," checks checks_run "," checks "," tracker duration "," tracker "," tracker start_time "," rails_version ","File  expand_path "," tracker options [] "," tracker options "," tracker app_path "]}," Table render_array":{"type":"method","name":"render_array","children":[],"call":["t add_row ","value_array each ","Terminal Table  new ","value_array empty? ","@table new "]}," Table generate_templates":{"type":"method","name":"generate_templates","children":[],"call":["output << << ","output << ","table to_s ","t add_row ","template [] each ","template [] ","Terminal Table  new ","template first to_s ","template first ","template_rows each ","name to_s ","template_rows sort_by ","template_rows [] << ","out gsub gsub ","out gsub ","template_rows [] ","out_processor format ","template [] empty? "," tracker templates each "," tracker templates "," tracker ","Brakeman OutputProcessor  new ","template each_output ","@table new ","out_processor format put << << ","out_processor format put << ","out_processor format  gsub gsub ","out_processor format  gsub ","out_processor format _processor format ","Brakeman OutputProcessor  new  format ","template each_out_processor format put "]}," Table generate_overview":{"type":"method","name":"generate_overview","children":[],"call":["t add_row "," ignored_warnings length "," ignored_warnings "," ignored_warnings empty? "," warnings_summary [] "," warnings_summary "," tracker errors length "," tracker errors "," tracker "," number_of_templates "," tracker models length - "," tracker models length "," tracker models "," tracker controllers length "," tracker controllers ","Terminal Table  new "," all_warnings length "," all_warnings ","@table new "]}," Table generate_report":{"type":"method","name":"generate_report","children":[],"call":["out << ","out << << "," truncate_table ","res to_s "," generate_template_warnings "," generate_model_warnings "," generate_controller_warnings "," generate_warnings "," generate_errors ","out << << << "," generate_templates to_s "," generate_templates "," tracker options [] "," tracker options "," tracker "," generate_controllers to_s "," generate_controllers "," text_header << << << << << "," text_header << << << << "," generate_warning_overview to_s "," generate_warning_overview "," text_header << << << "," text_header << << "," generate_overview to_s "," generate_overview "," text_header << "," text_header "," output_table "," generate_obsolete ","summary_option == ","out << << << << << << ","out << << << << << ","out << << << << "," text_header << << << << <<  << "," text_header << << << << <<  << << "," generate_template_warnings  to_s "," generate_model_warnings  to_s "," generate_controller_warnings  to_s "," generate_warnings  to_s "," generate_errors  to_s "," text_header << << << << <<  << << << ","  text_header << << << << << put_table "," tracker options []  == "," text_header << << << << <<  << << << << << << "," text_header << << << << <<  << << << << << "," text_header << << << << <<  << << << << "]}," JSON convert_to_hashes":{"type":"method","name":"convert_to_hashes","children":[],"call":["w [] ","(send\n  (lvar :warnings) :map) sort_by ","hash []= "," warning_file ","w to_hash ","warnings map "," convert_render_path ","hash [] ","w to_hash  []= ","w to_w to_hash  ","w to_hash  [] "]}," JSON generate_report":{"type":"method","name":"generate_report","children":[],"call":["MultiJson  dump "," number_of_templates "," tracker models length - "," tracker models length "," tracker models "," tracker "," tracker controllers length "," tracker controllers "," checks checks_run sort "," checks checks_run "," checks "," tracker duration "," tracker end_time to_s "," tracker end_time "," tracker start_time to_s "," tracker start_time "," all_warnings length "," all_warnings "," rails_version ","File  expand_path "," tracker options [] "," tracker options "," convert_to_hashes "," ignored_warnings ","e [] [] ","e [] "," tracker errors map "," tracker errors "," tracker app_path ","JSON  pretty_generate "," tracker unused_fingerprints "," all_ convert_to_hashes  length "," all_ convert_to_hashes  ","  convert_to_hashes _warnings "," ignored_ convert_to_hashes  "," tracker  tracker options []  "]}," HTML html_message":{"type":"method","name":"html_message","children":[],"call":["message gsub! ","CGI  escapeHTML ","warning format_user_input ","warning user_input ","URI  escape "," github_url ","warning line ","warning file ","(str \"<span id='\") << ","warning code mass > ","warning code mass ","warning code ","CGI  escapeHTML gsub gsub ","CGI  escapeHTML gsub ","warning format_with_user_input ","message << ","message to_html ","CGI  escapeHTML  gsub! ","message to_html  gsub! ","warning format_CGI  escapeHTML  ","warning CGI  escapeHTML  ","  github_url  ","warning format_with_CGI  escapeHTML  ","CGI  escapeHTML  << ","message to_html  << ","CGI  escapeHTML  to_html ","message to_html  to_html "]}," HTML with_context":{"type":"method","name":"with_context","children":[],"call":["output << ","(send\n  (send\n    (lvar :context) :[]\n    (irange\n      (int 1)\n      (int -1))) :map) join ","CGI  escapeHTML ","code [] chomp ","code [] ","code [] == ","warning line ","warning line + ","warning line - ","alt ! ","context [] map ","context [] ","context length > ","context length ","context first [] chomp ","context first [] ","context first ","1 == ","warning line + == ","warning line - == ","context empty? ","(str \"<div class='warning_message' onClick=\\\"toggle('\") << << << "," warning_file ","(str \"<div class='warning_message' onClick=\\\"toggle('\") << << ","(str \"<div class='warning_message' onClick=\\\"toggle('\") << ","(str \"<span id='\") << ","full_message ! "," html_message ","message [] << ","message [] "," tracker options [] "," tracker options "," tracker ","message length > ","message length "," tracker options [] > "," context_for ","(str \"<div class='warning_message' onClick=\\\"toggle('\") << << <<  << ","(send\n  (send\n    (lvar : context_for ) :[]\n    (irange\n      (int 1)\n      (int -1))) :map) join ","alt !  ! "," context_for  [] map "," context_for  [] "," context_for  length > "," context_for  length "," context_for  first [] chomp "," context_for  first [] "," context_for  first "," context_for  empty? ","(str \"<div class='warning_ html_message ' onClick=\\\"toggle('\") << << << ","(str \"<div class='warning_message [] << ' onClick=\\\"toggle('\") << << << ","(str \"<div class='warning_ html_message ' onClick=\\\"toggle('\") << << ","(str \"<div class='warning_message [] << ' onClick=\\\"toggle('\") << << ","(str \"<div class='warning_ html_message ' onClick=\\\"toggle('\") << ","(str \"<div class='warning_message [] << ' onClick=\\\"toggle('\") << ","full_ html_message  ! ","full_message [] <<  ! "," html_message  ! "," html_ html_message  "," html_message [] <<  "," html_message  [] << ","message [] <<  [] << "," html_message  [] ","message [] <<  [] "," html_message  length > ","message [] <<  length > "," html_message  length ","message [] <<  length ","  context_for _for "]}," HTML html_header":{"type":"method","name":"html_header","children":[],"call":["Brakeman Report Renderer  new render ","Brakeman Report Renderer  new "," rails_version "," checks "," tracker "," raise "," tracker options [] "," tracker options ","File  read ","File  exist? "]}," HTML convert_ignored_warning":{"type":"method","name":"convert_ignored_warning","children":[],"call":["warning []= ","CGI  escapeHTML ","@ignore_filter note_for ","original relative_path "," convert_warning ","original file relative ","original file "," convert_warning  []= "," convert_ convert_warning  "]}," HTML convert_template_warning":{"type":"method","name":"convert_template_warning","children":[],"call":["warning []= ","original template [] ","original template ","original called_from "," with_link ","warning [] "," with_context ","HTML_CONFIDENCE  [] ","original template name "," convert_warning "," convert_warning  []= "," convert_warning  [] "," convert_ convert_warning  "]}," HTML with_link":{"type":"method","name":"with_link","children":[],"call":["warning link "]}," HTML convert_warning":{"type":"method","name":"convert_warning","children":[],"call":["warning []= "," with_link ","warning [] "," with_context ","HTML_CONFIDENCE  [] ","original confidence "]}," HTML render_array":{"type":"method","name":"render_array","children":[],"call":["Brakeman Report Renderer  new render ","Brakeman Report Renderer  new ","value_array empty? "]}," HTML generate_templates":{"type":"method","name":"generate_templates","children":[],"call":["Brakeman Report Renderer  new render ","Brakeman Report Renderer  new ","name to_s ","template_rows sort_by ","template_rows [] << ","out gsub gsub ","out gsub ","template_rows [] ","CGI  escapeHTML ","out_processor format ","template [] each ","template [] ","template [] empty? "," tracker templates each "," tracker templates "," tracker ","Brakeman OutputProcessor  new ","template each_output ","CGI  escapeHTML  gsub gsub ","CGI  escapeHTML  gsub ","CGI  escapeHTML _processor format ","Brakeman OutputProcessor  new  format ","template each_CGI  escapeHTML put "]}," HTML generate_overview":{"type":"method","name":"generate_overview","children":[],"call":["Brakeman Report Renderer  new render ","Brakeman Report Renderer  new "," ignored_warnings length "," ignored_warnings "," number_of_templates "," warnings_summary "," all_warnings length "," all_warnings "," tracker "]}," HTML generate_report":{"type":"method","name":"generate_report","children":[],"call":["out << "," generate_ignored_warnings to_s "," generate_ignored_warnings "," generate_template_warnings to_s "," generate_template_warnings "," generate_model_warnings to_s "," generate_model_warnings "," generate_controller_warnings to_s "," generate_controller_warnings "," generate_warnings to_s "," generate_warnings "," generate_errors to_s "," generate_errors "," generate_templates to_s "," generate_templates "," tracker options [] "," tracker options "," tracker "," generate_controllers to_s "," generate_controllers "," html_header << << "," generate_warning_overview to_s "," generate_warning_overview "," html_header << "," generate_overview "," html_header "," html_header << <<  << "]}," HTML initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Hash generate_report":{"type":"method","name":"generate_report","children":[],"call":["report []= "," tracker config "," tracker ","w context= "," context_for join "," context_for ","w message= ","w format_message ","report [] each ","report [] "," send ","(sym :generic_warnings) each "," tracker templates "," tracker models "," tracker controllers "," tracker errors "," tracker checks checks_run "," tracker checks "]}," CSV csv_header":{"type":"method","name":"csv_header","children":[],"call":["BRAKEMAN REPORT\n\n + ","header << ","CSV  generate_line "," rails_version "," checks checks_run sort join "," checks checks_run sort "," checks checks_run "," checks ","Time  now to_s ","Time  now ","File  expand_path "," tracker options [] "," tracker options "," tracker "," tracker app_path ","CSV  generate_line  << "]}," CSV generate_report":{"type":"method","name":"generate_report","children":[],"call":["output << << ","output << "," table_to_csv "," generate_template_warnings "," generate_model_warnings "," generate_controller_warnings ","output << << << "," generate_warnings "," generate_errors "," generate_templates "," tracker options [] "," tracker options "," tracker "," generate_controllers "," generate_warning_overview "," generate_overview "," csv_header ","table to_csv ","CSV Table  new "," generate_row ","(send\n  (send\n    (send nil :tracker) :filtered_warnings) :sort_by) map ","w fingerprint ","w line ","w file ","w warning_type ","w confidence "," tracker filtered_warnings sort_by "," tracker filtered_warnings "," csv_header  << << "," csv_header  << "," CSV Table  new _to_csv "," csv_header  << << << ","CSV Table  new  to_csv "]}," Base text_message":{"type":"method","name":"text_message","children":[],"call":["message gsub ","warning format_user_input ","warning user_input ","warning format_warning format_user_input  ","warning warning format_user_input  "]}," Base rails_version":{"type":"method","name":"rails_version","children":[],"call":[" tracker options [] "," tracker options "," tracker "," tracker config [] "," tracker config "," tracker config rails_version "]}," Base warning_file":{"type":"method","name":"warning_file","children":[],"call":[" relative_path ","warning file ","warning file nil? ","warning file relative ","warning file absolute "," absolute_paths? "]}," Base number_of_templates":{"type":"method","name":"number_of_templates","children":[],"call":["Set  new length ","Set  new ","v [] to_s [] ","v [] to_s ","v [] ","tracker templates map ","tracker templates ","v name to_s [] ","v name to_s ","v name "]}," Base ignored_warnings":{"type":"method","name":"ignored_warnings","children":[],"call":["@ignore_filter ignored_warnings "]}," Base controller_warnings":{"type":"method","name":"controller_warnings","children":[],"call":[" filter_warnings "," tracker checks controller_warnings "," tracker checks "," tracker "]}," Base model_warnings":{"type":"method","name":"model_warnings","children":[],"call":[" filter_warnings "," tracker checks model_warnings "," tracker checks "," tracker "]}," Base template_warnings":{"type":"method","name":"template_warnings","children":[],"call":[" filter_warnings "," tracker checks template_warnings "," tracker checks "," tracker "]}," Base generic_warnings":{"type":"method","name":"generic_warnings","children":[],"call":[" filter_warnings "," tracker checks warnings "," tracker checks "," tracker "]}," Base filter_warnings":{"type":"method","name":"filter_warnings","children":[],"call":["@ignore_filter ignored? ","warnings reject "]}," Base all_warnings":{"type":"method","name":"all_warnings","children":[],"call":[" tracker checks all_warnings "," tracker checks "," tracker ","@ignore_filter shown_warnings "]}," Base warnings_summary":{"type":"method","name":"warnings_summary","children":[],"call":["summary []= ","warning confidence == ","warning confidence ","summary [] ","warning warning_type to_s ","warning warning_type ","warnings each ","(send nil :all_warnings) each "," all_warnings ","Hash  new ","Hash  new  []= ","Hash  new  [] "]}," Base sort":{"type":"method","name":"sort","children":[],"call":["row values_at << ","row values_at ","rows sort_by "]}," Base convert_ignored_warning":{"type":"method","name":"convert_ignored_warning","children":[],"call":[" convert_warning "]}," Base convert_controller_warning":{"type":"method","name":"convert_controller_warning","children":[],"call":[" convert_warning "]}," Base convert_model_warning":{"type":"method","name":"convert_model_warning","children":[],"call":[" convert_warning "]}," Base convert_template_warning":{"type":"method","name":"convert_template_warning","children":[],"call":[" convert_warning "]}," Base convert_warning":{"type":"method","name":"convert_warning","children":[],"call":["warning []= "," text_message ","warning [] ","TEXT_CONFIDENCE  [] "]}," Base convert_to_rows":{"type":"method","name":"convert_to_rows","children":[],"call":[" convert_ignored_warning "," convert_controller_warning "," convert_model_warning "," convert_template_warning "," convert_warning ","warning to_row ","warnings map "," convert_ignored_warning to_row arning "," convert_controller_warning to_row arning "," convert_model_warning to_row arning "," convert_template_warning to_row arning "," convert_warning to_row arning ","warning to_row arning to_rowarning to_row  ","warning to_row arnings map "]}," Base render_warnings":{"type":"method","name":"render_warnings","children":[],"call":[" render_array ","row values_at ","rows collect "," sort "," convert_to_rows ","warnings empty? "," sort  collect "," convert_to_ sort  "]}," Base generate_ignored_warnings":{"type":"method","name":"generate_ignored_warnings","children":[],"call":[" render_warnings "," ignored_warnings "]}," Base generate_controller_warnings":{"type":"method","name":"generate_controller_warnings","children":[],"call":[" render_warnings "," controller_warnings "]}," Base generate_model_warnings":{"type":"method","name":"generate_model_warnings","children":[],"call":[" render_warnings "," model_warnings "]}," Base generate_template_warnings":{"type":"method","name":"generate_template_warnings","children":[],"call":[" render_warnings "," template_warnings "]}," Base generate_warnings":{"type":"method","name":"generate_warnings","children":[],"call":[" render_warnings "," generic_warnings "]}," Base generate_errors":{"type":"method","name":"generate_errors","children":[],"call":[" render_array "," tracker ","error [] [] ","error [] "," tracker errors collect "," tracker errors "]}," Base generate_controllers":{"type":"method","name":"generate_controllers","children":[],"call":[" render_array ","row values_at ","controller_rows collect ","controller_rows << ","c [] join ","c [] ","c [] to_s ","name to_s ","routes == ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort ","e to_s ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :[]\n        (sym :public)) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :routes) :[]\n    (send\n      (lvar :name) :to_sym))) to_a map ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :[]\n        (sym :public)) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :routes) :[]\n    (send\n      (lvar :name) :to_sym))) to_a ","Set  new & "," tracker routes [] ","name to_sym "," tracker routes "," tracker ","Set  new ","c [] keys "," tracker routes [] nil? ","(send\n  (send\n    (send\n      (lvar :c) :[]\n      (sym :public)) :keys) :map) sort join ","(send\n  (send\n    (send\n      (lvar :c) :[]\n      (sym :public)) :keys) :map) sort ","c [] keys map "," tracker routes [] == "," tracker controllers [] "," tracker controllers ","(send\n  (send\n    (send\n      (send nil :tracker) :controllers) :keys) :map) sort each ","(send\n  (send\n    (send\n      (send nil :tracker) :controllers) :keys) :map) sort ","k to_s "," tracker controllers keys map "," tracker controllers keys "," tracker routes [] include? "," tracker routes include? ","c includes join ","c includes ","c parent to_s ","c parent ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :methods_public) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :routes) :[]\n    (send\n      (lvar :name) :to_sym))) to_a map ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :methods_public) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :routes) :[]\n    (send\n      (lvar :name) :to_sym))) to_a ","c methods_public keys ","c methods_public ","(send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort join ","(send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort ","c methods_public keys map "," tracker controllers [] ontroller_rows  tracker controllers [] olle tracker controllers [] t "," tracker controllers [] ontroller_rows << "," tracker controllers []  [] join "," tracker controllers []  [] "," tracker controllers []  [] to_s ","name to_sym  to_s ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join  == ","(send\n  (send\n    (send\n      (lvar :c) :[]\n      (sym :public)) :keys) :map) sort join  == ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join  == ","(send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort join  == ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :(send\n  (send\n    (send\n      (lvar :c) :[]\n      (sym :public)) :keys) :map) sort join ) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :(send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort join ) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ","(send\n  (send\n    (begin\n      (send\n        (send\n          ( tracker controllers [] onst nil :Set) :new\n          (send\n            (send\n              (lvar : tracker controllers [] ) :[]\n              (sym :publi tracker controllers [] )) :keys)) :&\n        (send\n          (send\n            (send nil :tra tracker controllers [] ker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name to_sym ) :to_sym)))) :to_a) :map) sort join ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :(send\n  (send\n    (send\n      (lvar :c) :[]\n      (sym :public)) :keys) :map) sort join ) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :(send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort join ) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort ","(send\n  (send\n    (begin\n      (send\n        (send\n          ( tracker controllers [] onst nil :Set) :new\n          (send\n            (send\n              (lvar : tracker controllers [] ) :[]\n              (sym :publi tracker controllers [] )) :keys)) :&\n        (send\n          (send\n            (send nil :tra tracker controllers [] ker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name to_sym ) :to_sym)))) :to_a) :map) sort ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :[]\n        (sym :public)) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ) :[]\n    (send\n      (lvar :name) :to_sym))) to_a map ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :[]\n        (sym :public)) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :(send\n  (send\n    (send\n      (lvar :c) :[]\n      (sym :public)) :keys) :map) sort join ) :[]\n    (send\n      (lvar :name) :to_sym))) to_a map ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :[]\n        (sym :public)) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ) :[]\n    (send\n      (lvar :name) :to_sym))) to_a map ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :[]\n        (sym :public)) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :(send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort join ) :[]\n    (send\n      (lvar :name) :to_sym))) to_a map ","(send\n  (send\n    ( tracker controllers [] onst nil :Set) :new\n    (send\n      (send\n        (lvar : tracker controllers [] ) :[]\n        (sym :publi tracker controllers [] )) :keys)) :&\n  (send\n    (send\n      (send nil :tra tracker controllers [] ker) :routes) :[]\n    (send\n      (lvar :name) :to_sym))) to_a map ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :[]\n        (sym :public)) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :routes) :[]\n    (send\n      (lvar :name to_sym ) :to_sym))) to_a map ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :[]\n        (sym :public)) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ) :[]\n    (send\n      (lvar :name) :to_sym))) to_a ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :[]\n        (sym :public)) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :(send\n  (send\n    (send\n      (lvar :c) :[]\n      (sym :public)) :keys) :map) sort join ) :[]\n    (send\n      (lvar :name) :to_sym))) to_a ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :[]\n        (sym :public)) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ) :[]\n    (send\n      (lvar :name) :to_sym))) to_a ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :[]\n        (sym :public)) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :(send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort join ) :[]\n    (send\n      (lvar :name) :to_sym))) to_a ","(send\n  (send\n    ( tracker controllers [] onst nil :Set) :new\n    (send\n      (send\n        (lvar : tracker controllers [] ) :[]\n        (sym :publi tracker controllers [] )) :keys)) :&\n  (send\n    (send\n      (send nil :tra tracker controllers [] ker) :routes) :[]\n    (send\n      (lvar :name) :to_sym))) to_a ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :[]\n        (sym :public)) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :routes) :[]\n    (send\n      (lvar :name to_sym ) :to_sym))) to_a "," tracker (send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join  [] "," tracker (send\n  (send\n    (send\n      (lvar :c) :[]\n      (sym :public)) :keys) :map) sort join  [] "," tracker (send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join  [] "," tracker (send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort join  [] "," tra tracker controllers [] ker routes [] ","name to_sym  to_sym "," tracker (send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join  "," tracker (send\n  (send\n    (send\n      (lvar :c) :[]\n      (sym :public)) :keys) :map) sort join  "," tracker (send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join  "," tracker (send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort join  "," tra tracker controllers [] ker routes "," tra tracker controllers [] ker "," tracker controllers []  [] keys "," tracker (send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join  [] nil? "," tracker (send\n  (send\n    (send\n      (lvar :c) :[]\n      (sym :public)) :keys) :map) sort join  [] nil? "," tracker (send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join  [] nil? "," tracker (send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort join  [] nil? "," tra tracker controllers [] ker routes [] nil? ","(send\n  (send\n    (send\n      (lvar : tracker controllers [] ) :[]\n      (sym :publi tracker controllers [] )) :keys) :map) sort join ","(send\n  (send\n    (send\n      (lvar : tracker controllers [] ) :[]\n      (sym :publi tracker controllers [] )) :keys) :map) sort "," tracker controllers []  [] keys map "," tracker (send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join  [] == "," tracker (send\n  (send\n    (send\n      (lvar :c) :[]\n      (sym :public)) :keys) :map) sort join  [] == "," tracker (send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join  [] == "," tracker (send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort join  [] == "," tra tracker controllers [] ker routes [] == "," tra tracker controllers [] ker  tracker controllers [] ontrollers [] "," tra tracker controllers [] ker  tracker controllers [] ontrollers ","(send\n  (send\n    (send\n      (send nil :tra tracker controllers [] ker) : tracker controllers [] ontrollers) :keys) :map) sort ea tracker controllers [] h ","(send\n  (send\n    (send\n      (send nil :tra tracker controllers [] ker) : tracker controllers [] ontrollers) :keys) :map) sort "," tra tracker controllers [] ker  tracker controllers [] ontrollers keys map "," tra tracker controllers [] ker  tracker controllers [] ontrollers keys "," tracker (send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join  [] include? "," tracker (send\n  (send\n    (send\n      (lvar :c) :[]\n      (sym :public)) :keys) :map) sort join  [] include? "," tracker (send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join  [] include? "," tracker (send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort join  [] include? "," tra tracker controllers [] ker routes [] in tracker controllers [] lude? "," tracker (send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join  include? "," tracker (send\n  (send\n    (send\n      (lvar :c) :[]\n      (sym :public)) :keys) :map) sort join  include? "," tracker (send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join  include? "," tracker (send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort join  include? "," tra tracker controllers [] ker routes in tracker controllers [] lude? "," tracker controllers []  in tracker controllers [] ludes join "," tracker controllers []  in tracker controllers [] ludes "," tracker controllers []  parent to_s "," tracker controllers []  parent ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :(send\n  (send\n    (send\n      (lvar :c) :[]\n      (sym :public)) :keys) :map) sort join ) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :(send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort join ) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ","(send\n  (send\n    (begin\n      (send\n        (send\n          ( tracker controllers [] onst nil :Set) :new\n          (send\n            (send\n              (lvar : tracker controllers [] ) :methods_publi tracker controllers [] ) :keys)) :&\n        (send\n          (send\n            (send nil :tra tracker controllers [] ker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name to_sym ) :to_sym)))) :to_a) :map) sort join ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :(send\n  (send\n    (send\n      (lvar :c) :[]\n      (sym :public)) :keys) :map) sort join ) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :(send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort join ) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort ","(send\n  (send\n    (begin\n      (send\n        (send\n          ( tracker controllers [] onst nil :Set) :new\n          (send\n            (send\n              (lvar : tracker controllers [] ) :methods_publi tracker controllers [] ) :keys)) :&\n        (send\n          (send\n            (send nil :tra tracker controllers [] ker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name to_sym ) :to_sym)))) :to_a) :map) sort ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :methods_public) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ) :[]\n    (send\n      (lvar :name) :to_sym))) to_a map ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :methods_public) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :(send\n  (send\n    (send\n      (lvar :c) :[]\n      (sym :public)) :keys) :map) sort join ) :[]\n    (send\n      (lvar :name) :to_sym))) to_a map ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :methods_public) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ) :[]\n    (send\n      (lvar :name) :to_sym))) to_a map ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :methods_public) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :(send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort join ) :[]\n    (send\n      (lvar :name) :to_sym))) to_a map ","(send\n  (send\n    ( tracker controllers [] onst nil :Set) :new\n    (send\n      (send\n        (lvar : tracker controllers [] ) :methods_publi tracker controllers [] ) :keys)) :&\n  (send\n    (send\n      (send nil :tra tracker controllers [] ker) :routes) :[]\n    (send\n      (lvar :name) :to_sym))) to_a map ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :methods_public) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :routes) :[]\n    (send\n      (lvar :name to_sym ) :to_sym))) to_a map ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :methods_public) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :[]\n              (sym :public)) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ) :[]\n    (send\n      (lvar :name) :to_sym))) to_a ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :methods_public) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :(send\n  (send\n    (send\n      (lvar :c) :[]\n      (sym :public)) :keys) :map) sort join ) :[]\n    (send\n      (lvar :name) :to_sym))) to_a ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :methods_public) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ) :[]\n    (send\n      (lvar :name) :to_sym))) to_a ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :methods_public) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :(send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort join ) :[]\n    (send\n      (lvar :name) :to_sym))) to_a ","(send\n  (send\n    ( tracker controllers [] onst nil :Set) :new\n    (send\n      (send\n        (lvar : tracker controllers [] ) :methods_publi tracker controllers [] ) :keys)) :&\n  (send\n    (send\n      (send nil :tra tracker controllers [] ker) :routes) :[]\n    (send\n      (lvar :name) :to_sym))) to_a ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :methods_public) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :routes) :[]\n    (send\n      (lvar :name to_sym ) :to_sym))) to_a "," tracker controllers []  methods_publi tracker controllers []  keys "," tracker controllers []  methods_publi tracker controllers []  ","(send\n  (send\n    (send\n      (lvar : tracker controllers [] ) :methods_publi tracker controllers [] ) :keys) :map) sort join ","(send\n  (send\n    (send\n      (lvar : tracker controllers [] ) :methods_publi tracker controllers [] ) :keys) :map) sort "," tracker controllers []  methods_publi tracker controllers []  keys map "]}," Base generate_warning_overview":{"type":"method","name":"generate_warning_overview","children":[],"call":[" render_array "," warnings_summary "," warnings_summary [] ","types sort collect ","types sort ","types delete "," warnings_summary keys "," warnings_summary keys  sort collect "," warnings_summary keys  sort "," warnings_summary keys  delete "]}," Base initialize":{"type":"method","name":"initialize","children":[],"call":["tracker options [] ","tracker options ","tracker ignored_filter ","tracker checks ","tracker app_tree "]}," Brakeman InteractiveIgnorer yes_or_no":{"type":"method","name":"yes_or_no","children":[],"call":["answer match ","q in= ","HighLine  new ask ","HighLine  new "]}," Brakeman InteractiveIgnorer say":{"type":"method","name":"say","children":[],"call":["HighLine  new say ","HighLine  new ","HighLine  new color ","text to_s ","text to_s  to_s "]}," Brakeman InteractiveIgnorer show_note":{"type":"method","name":"show_note","children":[],"call":[" say "," label ","@ignore_config note_for ","@ignore_config @ignore_config note_for _for "]}," Brakeman InteractiveIgnorer show_confidence":{"type":"method","name":"show_confidence","children":[],"call":[" say ","warning confidence "," label "]}," Brakeman InteractiveIgnorer label":{"type":"method","name":"label","children":[],"call":[" say "]}," Brakeman InteractiveIgnorer summarize_changes":{"type":"method","name":"summarize_changes","children":[],"call":[" say ","@ignore_config shown_warnings length ","@ignore_config shown_warnings ","@ignore_config ignored_warnings length ","@ignore_config ignored_warnings ","- * "]}," Brakeman InteractiveIgnorer skip_ignored?":{"type":"method","name":"skip_ignored?","children":[],"call":[" already_ignored? "]}," Brakeman InteractiveIgnorer already_ignored?":{"type":"method","name":"already_ignored?","children":[],"call":["@ignore_config ignored? "]}," Brakeman InteractiveIgnorer pretty_display":{"type":"method","name":"pretty_display","children":[],"call":[" say "," show_note "," already_ignored? ","warning line "," label ","warning relative_path ","warning format_code ","warning code ","warning message ","warning warning_type "," show_confidence ","- * ","20 - ","progress length ","@current_index + ","warning file relative ","warning file "]}," Brakeman InteractiveIgnorer quit":{"type":"method","name":"quit","children":[],"call":["@ignore_config filter_ignored ","@ignore_config read_from_file "," reset_config "]}," Brakeman InteractiveIgnorer ignore_rest":{"type":"method","name":"ignore_rest","children":[],"call":[" ignore "]}," Brakeman InteractiveIgnorer skip_rest":{"type":"method","name":"skip_rest","children":[],"call":[]}," Brakeman InteractiveIgnorer unignore":{"type":"method","name":"unignore","children":[],"call":["@ignore_config unignore "]}," Brakeman InteractiveIgnorer ignore_and_note":{"type":"method","name":"ignore_and_note","children":[],"call":["@ignore_config add_note ","@ignore_config ignore ","HighLine  new ask ","HighLine  new ","@ignore_config add_HighLine  new ask  "]}," Brakeman InteractiveIgnorer ignore":{"type":"method","name":"ignore","children":[],"call":["@ignore_config ignore "]}," Brakeman InteractiveIgnorer warning_action":{"type":"method","name":"warning_action","children":[],"call":[" raise "," ask_about "," quit "," skip_rest "," ignore_rest "," unignore "," ignore_and_note "," ignore "]}," Brakeman InteractiveIgnorer ask_about":{"type":"method","name":"ask_about","children":[],"call":[" warning_action "," warning_menu "," pretty_display "]}," Brakeman InteractiveIgnorer process_warnings":{"type":"method","name":"process_warnings","children":[],"call":[" ask_about "," ignore "," skip_ignored? ","@new_warnings each ","@new_warnings each_with_index ","@new_warnings length "]}," Brakeman InteractiveIgnorer reset_config":{"type":"method","name":"reset_config","children":[],"call":["Brakeman IgnoreConfig  new ","@ignore_config file ","Brakeman IgnoreConfig  new  file "]}," Brakeman InteractiveIgnorer start_over":{"type":"method","name":"start_over","children":[],"call":[" reset_config "]}," Brakeman InteractiveIgnorer save":{"type":"method","name":"save","children":[],"call":["@ignore_config save_with_old ","@ignore_config file= ","q default= ","@ignore_config file ","@ignore_config file empty? ! ","@ignore_config file empty? ","HighLine  new ask ","HighLine  new "]}," Brakeman InteractiveIgnorer final_menu":{"type":"method","name":"final_menu","children":[],"call":[" quit ","m choice "," start_over "," save ","HighLine  new choose ","HighLine  new "," summarize_changes "]}," Brakeman InteractiveIgnorer warning_menu":{"type":"method","name":"warning_menu","children":[],"call":[" say ","m choice ","m select_by= ","m list_option= ","m layout= ","m prompt= ","HighLine  new choose ","HighLine  new "," show_help "]}," Brakeman InteractiveIgnorer initial_menu":{"type":"method","name":"initial_menu","children":[],"call":["@ignore_config filter_ignored ","m choice "," process_warnings ","HighLine  new choose ","HighLine  new "," prune_obsolete "," pre_show_help "]}," Brakeman InteractiveIgnorer file_menu":{"type":"method","name":"file_menu","children":[],"call":[" yes_or_no ","@ignore_config read_from_file ","File  exist? ","@ignore_config file ","@ignore_config file= ","q default= ","@ignore_config file empty? ! ","@ignore_config file empty? ","HighLine  new ask ","HighLine  new "," loop "]}," Brakeman InteractiveIgnorer start":{"type":"method","name":"start","children":[],"call":[" start "," final_menu ","@ignore_config filter_ignored "," initial_menu "," file_menu "," penultimate_menu "]}," Brakeman InteractiveIgnorer initialize":{"type":"method","name":"initialize","children":[],"call":["Brakeman IgnoreConfig  new "]}," Brakeman IgnoreConfig save_with_old":{"type":"method","name":"save_with_old","children":[],"call":[" save_to_file ","warnings << ","w fingerprint == ","w fingerprint ","@ignored_warnings find ","w [] ","@already_ignored each ","@ignored_warnings dup ","ignored_warning fingerprint == ","ignored_warning fingerprint ","@ignored_warnings dup  << ","w w []  == ","w w []  ","@ignored_@ignored_warnings dup  find ","@ignored_@ignored_warnings dup  dup ","ignored_warning w []  == ","ignored_warning w []  "]}," Brakeman IgnoreConfig save_to_file":{"type":"method","name":"save_to_file","children":[],"call":["f puts ","MultiJson  dump ","File  open ","Time  now to_s ","Time  now ","w []= ","@notes [] ","w [] ","w_hash []= ","w relative_path ","w to_hash ","w is_a? ","warnings map ","JSON  pretty_generate ","(send\n  (lvar :warnings) :map) sort_by ","file absolute ","Time  now to_hash  to_s ","Time  now to_hash  ","w to_hash  []= ","w to_hash  [] ","w to_hash _hash []= ","w to_hash  relative_path ","w to_hash  to_hash ","w to_hash  is_a? ","w to_hash arnings map ","(send\n  (lvar :w to_hash arnings) :map) sort_by "]}," Brakeman IgnoreConfig read_from_file":{"type":"method","name":"read_from_file","children":[],"call":["@notes []= ","w [] ","@ignored_fingerprints << ","@already_ignored each ","Brakeman  notify ","MultiJson  load [] ","MultiJson  load ","File  read ","File  exist? ","JSON  parse [] ","JSON  parse "," raise ","e class ","file relative ","file absolute ","MultiJson  load []  each ","JSON  parse []  each "]}," Brakeman IgnoreConfig note_for":{"type":"method","name":"note_for","children":[],"call":["w [] ","fingerprint == ","@already_ignored each ","warning [] ","warning fingerprint ","warning is_a? ","warning []  == ","warning fingerprint  == ","warning warning []  ","warning warning fingerprint  "]}," Brakeman IgnoreConfig add_note":{"type":"method","name":"add_note","children":[],"call":["@notes []= ","warning fingerprint "]}," Brakeman IgnoreConfig ignore":{"type":"method","name":"ignore","children":[],"call":["@ignored_fingerprints << ","warning fingerprint "," ignored? "]}," Brakeman IgnoreConfig ignored?":{"type":"method","name":"ignored?","children":[],"call":["@ignored_fingerprints include? ","warning fingerprint ","@used_fingerprints << "]}," Brakeman IgnoreConfig unignore":{"type":"method","name":"unignore","children":[],"call":["w [] == ","warning fingerprint ","w [] ","@already_ignored reject! ","@ignored_fingerprints delete "]}," Brakeman IgnoreConfig filter_ignored":{"type":"method","name":"filter_ignored","children":[],"call":["@shown_warnings << ","@ignored_warnings << "," ignored? ","@new_warnings each ","Set  new "]}," Brakeman IgnoreConfig initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new "]}," FindAllCalls create_call_hash":{"type":"method","name":"create_call_hash","children":[],"call":[" make_location "," get_chain "," process_call_args ","exp method "," process "," call? "," get_target ","exp target "," node_type? ","call_hash []= ","exp exp method  "," get_ get_target  ","exp  get_target  "]}," FindAllCalls process_call_with_block":{"type":"method","name":"process_call_with_block","children":[],"call":[" process ","exp block ","@calls << ","call_hash []= ","exp block_args "," create_call_hash ","call node_type == ","call node_type ","exp block_call ","@exp block_call s << "," create_call_hash  []= ","exp block_call _hash []= "," create_ create_call_hash  "," create_exp block_call _hash ","exp block_call  node_type == ","exp block_call  node_type ","exp block_exp block_call  "]}," AliasProcessor too_deep?":{"type":"method","name":"too_deep?","children":[],"call":["exp or_depth >= ","exp or_depth "," node_type? ","@or_depth_limit >= "]}," CheckSQL check_rails_versions_against_cve_issues":{"type":"method","name":"check_rails_versions_against_cve_issues","children":[],"call":[" cve_warning_for ","cve_issue [] ","(hash\n  (pair\n    (sym :cve)\n    (str \"CVE-2012-2660\"))\n  (pair\n    (sym :versions)\n    (array\n      (array\n        (str \"2.0.0\")\n        (str \"2.3.14\")\n        (str \"2.3.17\"))\n      (array\n        (str \"3.0.0\")\n        (str \"3.0.12\")\n        (str \"3.0.13\"))\n      (array\n        (str \"3.1.0\")\n        (str \"3.1.4\")\n        (str \"3.1.5\"))\n      (array\n        (str \"3.2.0\")\n        (str \"3.2.3\")\n        (str \"3.2.4\"))))\n  (pair\n    (sym :url)\n    (str \"https://groups.google.com/d/topic/rubyonrails-security/8SA-M3as7A8/discussion\"))) each ","issues each ","issues << "," lts_version? "]}," CheckSQL scope_call_hash":{"type":"method","name":"scope_call_hash","children":[],"call":["model file ","model name "]}," CheckSQL ar_scope_calls":{"type":"method","name":"ar_scope_calls","children":[],"call":["return_array << ","model_args each ","model [] [] ","model [] "," active_record_models each "," active_record_models ","model options [] ","model options ","model [] []  each ","model options []  each "]}," CheckModelAttrAccessible check_models":{"type":"method","name":"check_models","children":[],"call":["model [] nil? ! ","model [] nil? ","model [] "," tracker models each "," tracker models "," tracker ","model attr_accessible nil? ! ","model attr_accessible nil? ","model attr_accessible "]}," CheckModelAttrAccessible run_check":{"type":"method","name":"run_check","children":[],"call":[" warn ","model [] ","susp_attr == ","susp_attr =~ ","attribute to_s ","susp_attr is_a? ","SUSP_ATTRS  each ","accessible_attrs each "," check_models "," role_limited? ","model [] each ","Sexp  new ","model [] first ","model file ","model attr_accessible each ","model attr_accessible ","model []  each "]}," CheckCrossSiteScripting boolean_method?":{"type":"method","name":"boolean_method?","children":[],"call":["method to_s end_with? ","method to_s "]}," CheckCrossSiteScripting safe_input_attribute?":{"type":"method","name":"safe_input_attribute?","children":[],"call":["@safe_input_attributes include? "," always_safe_method? "]}," CheckCrossSiteScripting form_builder_method?":{"type":"method","name":"form_builder_method?","children":[],"call":["@ignore_methods include? ","target == "]}," CheckCrossSiteScripting xml_escaped?":{"type":"method","name":"xml_escaped?","children":[],"call":["target == ","method == "]}," CheckCrossSiteScripting haml_escaped?":{"type":"method","name":"haml_escaped?","children":[],"call":["target == ","method == "]}," CheckCrossSiteScripting cgi_escaped?":{"type":"method","name":"cgi_escaped?","children":[],"call":["target == ","method == "]}," CheckCrossSiteScripting ignored_method?":{"type":"method","name":"ignored_method?","children":[],"call":["method to_s =~ ","method to_s ","@ignore_methods include? ","target nil? "]}," CheckCrossSiteScripting ignored_model_method?":{"type":"method","name":"ignored_model_method?","children":[],"call":["IGNORE_MODEL_METHODS  include? ","@matched type == ","@matched type "," model_name? "]}," CheckCrossSiteScripting ignore_call?":{"type":"method","name":"ignore_call?","children":[],"call":[" xml_escaped? "," cgi_escaped? "," boolean_method? "," haml_escaped? "," form_builder_method? "," ignored_model_method? "," safe_input_attribute? "," ignored_method? "]}," CheckBasicAuth process_call":{"type":"method","name":"process_call","children":[],"call":[" string? ","exp first_arg ","exp method == ","exp method ","target value == ","target value "," node_type? ","exp target ","exp target  value == ","exp target  value ","exp exp target  "]}," CheckBasicAuth include_password_literal?":{"type":"method","name":"include_password_literal?","children":[],"call":[" process ","result [] ","result [] last ","result [] nil? "]}," CheckBasicAuth check_basic_auth_request":{"type":"method","name":"check_basic_auth_request","children":[],"call":[" warn "," include_password_literal? "," tracker find_call each "," tracker find_call "," tracker "]}," CheckBasicAuth check_basic_auth_filter":{"type":"method","name":"check_basic_auth_filter","children":[],"call":[" warn ","controller [] "," string? "," get_password ","controller [] [] each ","controller [] [] ","Hash  [] each ","Hash  [] ","c [] [] ","c [] "," tracker controllers select "," tracker controllers "," tracker ","controller [] first ","controller file ","controller options [] each ","controller options [] ","controller options ","c options [] ","c options "," get_ get_password word "]}," Brakeman load_brakeman_dependency":{"type":"method","name":"load_brakeman_dependency","children":[],"call":[]}," Tracker filtered_warnings":{"type":"method","name":"filtered_warnings","children":[],"call":[" warnings "," ignored_filter ignored? "," ignored_filter "," warnings reject "]}," CheckModelAttrAccessible role_limited?":{"type":"method","name":"role_limited?","children":[],"call":["role_accessible include? ","role_accessible nil? ","model [] [] ","model [] ","model role_accessible ","model [] []  include? ","model role_accessible  include? ","model [] []  nil? ","model role_accessible  nil? ","model model [] []  ","model model role_accessible  "]}," CheckCrossSiteScripting likely_model_attribute?":{"type":"method","name":"likely_model_attribute?","children":[],"call":[" likely_model_attribute? ","exp target ","method to_s start_with? ","method to_s ","MODEL_METHODS  include? ","exp method "," call? ","exp method  to_s start_with? ","exp method  to_s ","exp exp method  "]}," CheckRedirect friendly_model?":{"type":"method","name":"friendly_model?","children":[],"call":["exp method == ","exp method "," model_name? ","exp target "," call? "]}," CheckExecute dangerous_interp?":{"type":"method","name":"dangerous_interp?","children":[],"call":["Match  new "," dangerous? ","interp each_sexp ","match match "," include_interp? ","match match  each_sexp "," include_interp?   include_interp?  "," include_match match ? "]}," CheckExecute dangerous?":{"type":"method","name":"dangerous?","children":[],"call":[" dangerous? "," node_type? ","e target ","e method == ","e method "," call? ","SAFE_VALUES  include? ","exp each_sexp ","e values [] ","e values "," shell_escape? ","e sexp_body sexp_body ","e sexp_body "," temp_file_path? "," dange target rous? "," node target _type target ? ","e target  targe target t ","e target  me target thod == ","e target  me target thod ","SAFE_VALUES  include target ? ","e target xp e target ach_se target xp ","e target  value target s [] ","e target  value target s "," she target ll_e target scape target ? ","e target  se target xp_body se target xp_body ","e target  se target xp_body "," te target mp_file target _path? "]}," CheckDetailedExceptions safe?":{"type":"method","name":"safe?","children":[],"call":["body == "," false? "]}," CheckDetailedExceptions check_detailed_exceptions":{"type":"method","name":"check_detailed_exceptions","children":[],"call":[" warn ","controller [] ","CONFIDENCE  [] "," true? "," safe? ! "," safe? ","name == ","method body last ","method body ","controller [] each "," tracker controllers each "," tracker controllers "," tracker ","definition [] ","src body last ","src body ","controller methods_public each ","controller methods_public ","method_name == "," msg "," msg_code ","definition src ","method method body last  last ","method src body last  last ","method method body last  ","method src body last  ","src method body last  last ","src src body last  last ","definition []  body last ","definition src  body last ","src method body last  ","src src body last  ","definition []  body ","definition src  body ","definition definition []  ","definition definition src  "]}," CheckDetailedExceptions check_local_request_config":{"type":"method","name":"check_local_request_config","children":[],"call":[" warn ","CONFIDENCE  [] "," true? "," tracker config [] [] "," tracker config [] "," tracker config "," tracker "," tracker config rails [] "," tracker config rails "]}," CheckDetailedExceptions run_check":{"type":"method","name":"run_check","children":[],"call":[" check_detailed_exceptions "," check_local_request_config "]}," Sexp method=":{"type":"method","name":"method=","children":[],"call":[" []= "," expect "]}," GemProcessor get_i18n_version":{"type":"method","name":"get_i18n_version","children":[],"call":["@tracker config [] []= "," get_version ","@tracker config [] ","@tracker config "]}," AliasProcessor collapse_send_call":{"type":"method","name":"collapse_send_call","children":[],"call":["exp arglist= ","args [] ","args length > ","args length ","exp pop ","exp args ","exp method= ","first_arg value to_sym ","first_arg value "," string? "," symbol? ","first_arg [] "," node_type? ","args sexp_body ","exp args  [] ","exp args  length > ","exp args  length ","exp exp args  ","first_arg []  value to_sym ","first_arg []  value ","first_arg []  [] ","exp args  sexp_body "]}," AliasProcessor meth_env":{"type":"method","name":"meth_env","children":[],"call":[" env current "," env "," set_env_defaults "," env scope "]}," CheckSimpleFormat warn_on_simple_format":{"type":"method","name":"warn_on_simple_format","children":[],"call":[" warn ","match match "," gemfile_or_environment ","CONFIDENCE  [] ","@tracker config [] ","@tracker config "," add_result "," duplicate? "," rails_version "," original? "," msg "," msg_version "," msg_code "]}," CheckSimpleFormat process_call":{"type":"method","name":"process_call","children":[],"call":[" actually_process_call "]}," CheckSimpleFormat check_simple_format_usage":{"type":"method","name":"check_simple_format_usage","children":[],"call":[" warn_on_simple_format "," process_call ","result [] "," tracker find_call each "," tracker find_call "," tracker "]}," CheckSimpleFormat generic_warning":{"type":"method","name":"generic_warning","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] "," tracker config [] "," tracker config "," tracker "," rails_version "," msg "," msg_version "," msg_cve "," msg_code "]}," CheckSimpleFormat run_check":{"type":"method","name":"run_check","children":[],"call":[" generic_warning "," check_simple_format_usage ","Set  [] "," version_between? "]}," CheckNumberToCurrency warn_on_number_to_currency":{"type":"method","name":"warn_on_number_to_currency","children":[],"call":[" warn ","CONFIDENCE  [] ","@tracker config [] ","@tracker config "]}," CheckNumberToCurrency check_number_to_currency_usage":{"type":"method","name":"check_number_to_currency_usage","children":[],"call":[" warn_on_number_to_currency ","match match ","match is_a? "," has_immediate_model? "," has_immediate_user_input? ","result [] second_arg ","result [] "," tracker find_call each "," tracker find_call "," tracker ","match match  match match  ","match match  is_a? ","result [] second_result [] second_arg  "]}," CheckNumberToCurrency generic_warning":{"type":"method","name":"generic_warning","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] ","message << "," version_between? "," tracker config [] "," tracker config "," tracker "," rails_version "," msg_version "," msg "," msg_cve "," msg  << "]}," CheckNumberToCurrency run_check":{"type":"method","name":"run_check","children":[],"call":[" generic_warning "," check_number_to_currency_usage "," version_between? "," lts_version? "," check_number_helper_usage "]}," CheckMassAssignment warn_on_permit!":{"type":"method","name":"warn_on_permit!","children":[],"call":[" warn ","CONFIDENCE  [] "," subsequent_mass_assignment? "," add_result ","result [] original_line ","result [] "," duplicate? "," original? "," msg "," msg_code "]}," CheckMassAssignment subsequent_mass_assignment?":{"type":"method","name":"subsequent_mass_assignment?","children":[],"call":["call [] line >= ","call [] line ","call [] "," params? ","call [] first_arg ","call [] == "," find_mass_assign_calls any? "," find_mass_assign_calls ","result [] line ","result [] ","call [] result [] line  >= ","call [] result [] line  ","result [] result [] line  "]}," CheckMassAssignment check_permit!":{"type":"method","name":"check_permit!","children":[],"call":[" warn_on_permit! "," params? ","result [] "," tracker find_call each "," tracker find_call "," tracker ","result [] target ","result [] include? ! ","result [] include? "," calls_slice? "," inside_safe_method? "]}," CheckMassAssignment check_mass_assignment":{"type":"method","name":"check_mass_assignment","children":[],"call":[" process_result "," find_mass_assign_calls each "," find_mass_assign_calls ","Brakeman  debug "," mass_assign_disabled? "]}," CheckMassAssignment find_mass_assign_calls":{"type":"method","name":"find_mass_assign_calls","children":[],"call":[" tracker find_call "," tracker ","Brakeman  debug ","models length ","models empty? ","models << "," unprotected_model? "," tracker models each "," tracker models ","m unprotected_model? "," p ","m is_a? "]}," CheckI18nXSS has_workaround?":{"type":"method","name":"has_workaround?","children":[],"call":["match last first_arg == "," s ","match last first_arg ","match last "," tracker check_initializers any? "," tracker check_initializers "," tracker ","match [] first_arg == ","match [] first_arg ","match [] "," tracker find_call any? "," tracker find_call "]}," CheckI18nXSS version_before":{"type":"method","name":"version_before","children":[],"call":["gv > ","gv < ","gem_version split map zip each ","gem_version split map zip ","target split map ","target split ","gem_version split map ","gem_version split "]}," CheckI18nXSS run_check":{"type":"method","name":"run_check","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] ","message << "," version_before "," version_between? "," tracker config [] [] "," tracker config [] "," tracker config "," tracker "," has_workaround? ! "," has_workaround? "," tracker config [] [] [] "," tracker config gem_version "," rails_version "," msg_version "," msg "," msg_cve "," msg  << "]}," CheckHeaderDoS has_workaround?":{"type":"method","name":"has_workaround?","children":[],"call":[" tracker check_initializers any? "," tracker check_initializers "," tracker "," tracker find_call any? "," tracker find_call "]}," CheckHeaderDoS run_check":{"type":"method","name":"run_check","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] ","message << "," version_between? "," tracker config [] "," tracker config "," tracker "," has_workaround? ! "," has_workaround? "," rails_version "," msg_version "," msg "," msg_cve "," msg  << "]}," GemProcessor set_gem_version":{"type":"method","name":"set_gem_version","children":[],"call":["@tracker config [] []= ","1 to_sym ","@tracker config [] ","@tracker config ","line =~ "]}," GemProcessor process_gem_lock":{"type":"method","name":"process_gem_lock","children":[],"call":[" set_gem_version ","gem_lock each_line "," set_gem_version_and_file ","@gem_files [] [] each_line ","@gem_files [] [] ","@gem_files [] "," set_gem_version_and_@gem_files [] []  ","@gem_@gem_files [] [] s [] [] each_line ","@gem_@gem_files [] [] s [] [] ","@gem_@gem_files [] [] s [] "]}," CheckSSLVerify process_result":{"type":"method","name":"process_result","children":[],"call":[" warn ","CONFIDENCE  [] "," add_result ","result [] last_arg == ","result [] last_arg ","result [] "," duplicate? "]}," CheckSSLVerify check_open_ssl_verify_none":{"type":"method","name":"check_open_ssl_verify_none","children":[],"call":[" process_result "," tracker find_call each "," tracker find_call "," tracker "," process_verify_mode_result "]}," CheckSSLVerify run_check":{"type":"method","name":"run_check","children":[],"call":[" check_open_ssl_verify_none "," check_http_start "]}," CheckSQL connect_call?":{"type":"method","name":"connect_call?","children":[],"call":[" active_record_models include? "," active_record_models ","klass == "," node_type? ","target == ","target nil? "," class_name ","target target ","target method == ","target method "," call? ","call target ","result [] "," class_name  == ","target target  == ","call target  == ","target target  nil? ","call target  nil? ","target target  target target  ","call target  call target  ","target target  method == ","call target  method == ","target target  method ","call target  method "," result [] ? ","call target target  ","call call target  ","result []  target "]}," CheckSQL quote_call?":{"type":"method","name":"quote_call?","children":[],"call":["exp method == ","exp method ","exp target nil? ","exp target ","QUOTE_METHODS  include? ","exp target method == ","exp target method "," call? "]}," CheckSQL string_building?":{"type":"method","name":"string_building?","children":[],"call":[" string_building? ","exp first_arg ","exp target "," node_type? ","STRING_METHODS  include? ","exp method "," call? "]}," CheckSQL check_string_arg":{"type":"method","name":"check_string_arg","children":[],"call":[" check_string_arg ","exp target ","exp method == ","exp method "," call? "," check_string_interp "," node_type? "," check_for_string_building "," string_building? "," safe_value? "," string_interp? "]}," CheckSQL unsafe_string_interp?":{"type":"method","name":"unsafe_string_interp?","children":[],"call":[" check_for_string_building "," string_building? "," safe_value? "," check_string_interp "," unsafe_string_interp? ","value rhs ","value lhs ","value node_type ","value target ","value method == ","value method "," call? "," sexp? ! "," sexp? ","exp value "," node_type? "," safe_literal_target? ","TO_STRING_METHODS  include? "," safe_exp value ? ","exp value  rhs ","exp value  lhs ","exp value  node_type ","exp value  target ","exp value  method == ","exp value  method ","exp exp value  "]}," BaseCheck lts_version?":{"type":"method","name":"lts_version?","children":[],"call":[" version_between? "," tracker config [] [] "," tracker config [] "," tracker config "," tracker "," tracker config [] [] [] "," tracker config gem_version "," tracker config has_gem? "]}," CheckSQL check_CVE_2014_0080":{"type":"method","name":"check_CVE_2014_0080","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] "," tracker config [] "," tracker config "," tracker ","@tracker config [] include? ","@tracker config [] ","@tracker config "," version_between? "]}," CheckRenderDoS warn_about_text_render":{"type":"method","name":"warn_about_text_render","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] "," tracker config [] "," tracker config "," tracker "," rails_version "," msg "," msg_version "," msg_cve "]}," CheckRenderDoS text_render?":{"type":"method","name":"text_render?","children":[],"call":["result [] render_type == ","result [] render_type ","result [] "," node_type? "]}," CheckRenderDoS run_check":{"type":"method","name":"run_check","children":[],"call":[" warn_about_text_render "," text_render? "," tracker find_call each "," tracker find_call "," tracker "," version_between? "]}," CheckNumberToCurrency warn_on_number_helper":{"type":"method","name":"warn_on_number_helper","children":[],"call":[" warn ","CONFIDENCE  [] ","@tracker config [] ","@tracker config ","result [] method ","result [] "," rails_version "," msg "," msg_version "," msg_code "]}," CheckNumberToCurrency check_helper_option":{"type":"method","name":"check_helper_option","children":[],"call":[" warn_on_number_helper ","match match ","match is_a? "," has_immediate_model? "," has_immediate_user_input? ","match match  match match  ","match match  is_a? "]}," CheckNumberToCurrency check_number_helper_usage":{"type":"method","name":"check_number_helper_usage","children":[],"call":[" check_helper_option "," hash_iterate "," hash? "," check_helper_option ! ","result [] second_arg ","result [] "," tracker find_call each "," tracker find_call "," tracker ","result [] second_result [] second_arg  "]}," HamlTemplateProcessor get_pushed_value":{"type":"method","name":"get_pushed_value","children":[],"call":["@current_template [] << ","@current_template [] ","s line ","exp line ","Sexp  new ","exp first_arg ","exp method == ","exp method ","exp target == ","exp target "," call? "," get_pushed_value ","exp map! ","exp node_type= ","exp node_type "," sexp? ","@current_template add_output "," add_output "," add_escaped_output ","clauses first "," s ","clauses length > ","clauses length ","(send nil :get_pushed_value\n  (send\n    (lvar :exp) :then_clause)) compact ","exp else_clause ","exp then_clause "," make_render_in_view ","exp arglist= "," process ","exp arglist ","exp target nil? "," ignore "," hamlout_attributes? "," raw? "," fix_textareas? "," find_and_preserve? "," haml_helpers? "," s line ","(send nil :get_pushed_value\n  (send\n    (lvar :exp) :then_clause)\n  (lvar :default)) compact "," build_output_from_push_text ","ESCAPE_METHODS  include? "," haml_attribute_builder? ","Sexp  new  line ","exp firSexp  new t_arg "," get_puSexp  new hed_value "," Sexp  new exp? "," add_eSexp  new caped_output ","clauSexp  new eSexp  new  firSexp  new t ","(send nil :get_pushed_value\n  (send\n    (lvar :exp) :then_clause)) compact  first ","(send nil :get_pushed_value\n  (send\n    (lvar :exp) :then_clause)\n  (lvar :default)) compact  first "," Sexp  new  ","clauSexp  new eSexp  new  length > ","(send nil :get_pushed_value\n  (send\n    (lvar :exp) :then_clause)) compact  length > ","(send nil :get_pushed_value\n  (send\n    (lvar :exp) :then_clause)\n  (lvar :default)) compact  length > ","clauSexp  new eSexp  new  length ","(send nil :get_pushed_value\n  (send\n    (lvar :exp) :then_clause)) compact  length ","(send nil :get_pushed_value\n  (send\n    (lvar :exp) :then_clause)\n  (lvar :default)) compact  length ","(Sexp  new end nil :get_puSexp  new hed_value\n  (Sexp  new end\n    (lvar :exp) :then_clauSexp  new e)) compact ","exp elSexp  new e_clauSexp  new e ","exp then_clauSexp  new e ","exp argliSexp  new t= "," proceSexp  new Sexp  new  ","exp argliSexp  new t "," hamlout_attributeSexp  new ? "," fix_textareaSexp  new ? "," find_and_preSexp  new erve? "," haml_helperSexp  new ? "," Sexp  new  line ","(Sexp  new end nil :get_puSexp  new hed_value\n  (Sexp  new end\n    (lvar :exp) :then_clauSexp  new e)\n  (lvar :default)) compact "," build_output_from_puSexp  new h_text "]}," HamlTemplateProcessor build_output_from_push_text":{"type":"method","name":"build_output_from_push_text","children":[],"call":[" get_pushed_value ","e value "," node_type? "," sexp? ","exp map! "," string_interp? ","e [] "," ge value t_pushe value d_value value  ","e value  value value  "," node value _type value ? "," se value xp? ","e value xp map! "," string_inte value rp? ","e value  [] "]}," Brakeman get_github_url":{"type":"method","name":"get_github_url","children":[],"call":[]}," Util github_url":{"type":"method","name":"github_url","children":[],"call":["url << "," relative_path ","file start_with? ","file empty? ! ","file empty? ","@tracker options [] ","@tracker options "]}," Report to_markdown":{"type":"method","name":"to_markdown","children":[],"call":[" generate "," require_report "]}," Markdown markdown_message":{"type":"method","name":"markdown_message","children":[],"call":["message gsub ","code gsub gsub ","code gsub ","warning format_code ","warning code ","message gsub! "," github_url ","warning line ","warning file ","message << ","warning format_code gsub gsub ","warning format_code gsub ","message to_s ","message to_s  gsub ","warning format_code  gsub gsub ","warning format_code gsub gsub  gsub gsub ","warning format_code  gsub ","warning format_code gsub gsub  gsub ","warning format_warning format_code  ","warning format_warning format_code gsub gsub  ","warning warning format_code  ","warning warning format_code gsub gsub  ","message to_s  gsub! ","  github_url  ","message to_s  << ","warning format_warning format_code  gsub gsub ","warning format_warning format_code gsub gsub  gsub gsub ","warning format_warning format_code  gsub ","warning format_warning format_code gsub gsub  gsub ","message to_s  to_s "]}," Markdown convert_warning":{"type":"method","name":"convert_warning","children":[],"call":["warning []= ","original link ","warning [] "," markdown_message ","TEXT_CONFIDENCE  [] "]}," Markdown render_array":{"type":"method","name":"render_array","children":[],"call":["t add_row ","value_array each ","MarkdownTable  new ","value_array empty? "]}," Markdown generate_templates":{"type":"method","name":"generate_templates","children":[],"call":["output << << ","output << ","table to_s ","t add_row ","template [] each ","template [] ","MarkdownTable  new ","template first to_s ","template first ","template_rows each ","name to_s ","template_rows sort_by ","template_rows [] << ","out gsub gsub ","out gsub ","template_rows [] ","out_processor format ","template [] empty? "," tracker templates each "," tracker templates "," tracker ","Brakeman OutputProcessor  new ","template each_output ","out_processor format put << << ","out_processor format put << ","out_processor format  gsub gsub ","out_processor format  gsub ","out_processor format _processor format ","Brakeman OutputProcessor  new  format ","template each_out_processor format put "]}," Markdown generate_overview":{"type":"method","name":"generate_overview","children":[],"call":["t add_row "," ignored_warnings length "," ignored_warnings "," ignored_warnings empty? "," warnings_summary [] "," warnings_summary "," tracker errors length "," tracker errors "," tracker "," number_of_templates "," tracker models length - "," tracker models length "," tracker models "," tracker controllers length "," tracker controllers ","MarkdownTable  new "," all_warnings length "," all_warnings "]}," Markdown generate_checks":{"type":"method","name":"generate_checks","children":[],"call":["t add_row "," checks checks_run sort join "," checks checks_run sort "," checks checks_run "," checks ","MarkdownTable  new "]}," Markdown generate_metadata":{"type":"method","name":"generate_metadata","children":[],"call":["t add_row "," tracker duration "," tracker "," tracker start_time "," rails_version ","File  expand_path "," tracker options [] "," tracker options ","MarkdownTable  new "," tracker app_path "]}," Markdown generate_report":{"type":"method","name":"generate_report","children":[],"call":["out << << << ","out << << ","res to_s ","out << "," generate_template_warnings "," generate_model_warnings "," generate_controller_warnings "," generate_warnings "," generate_errors "," generate_templates to_s "," generate_templates "," tracker options [] "," tracker options "," tracker ","out << << << << "," generate_controllers to_s "," generate_controllers ","# BRAKEMAN REPORT\n\n << << << << << << << << << ","# BRAKEMAN REPORT\n\n << << << << << << << << "," generate_warning_overview to_s "," generate_warning_overview ","# BRAKEMAN REPORT\n\n << << << << << << << ","# BRAKEMAN REPORT\n\n << << << << << << "," generate_overview to_s "," generate_overview ","# BRAKEMAN REPORT\n\n << << << << << ","# BRAKEMAN REPORT\n\n << << << << ","# BRAKEMAN REPORT\n\n << << << "," generate_checks to_s "," generate_checks ","# BRAKEMAN REPORT\n\n << << ","# BRAKEMAN REPORT\n\n << "," generate_metadata to_s "," generate_metadata "," output_table ","# BRAKEMAN REPORT\n\n << << << << << << << << <<  << << << ","# BRAKEMAN REPORT\n\n << << << << << << << << <<  << << "," generate_template_warnings  to_s "," generate_model_warnings  to_s "," generate_controller_warnings  to_s "," generate_warnings  to_s "," generate_errors  to_s ","# BRAKEMAN REPORT\n\n << << << << << << << << <<  << ","# BRAKEMAN REPORT\n\n << << << << << << << << <<  << << << << "," # BRAKEMAN REPORT\n\n << << << << << << << << << put_table "]}," Markdown MarkdownTable render":{"type":"method","name":"render","children":[],"call":[" split [] join "," split [] "," split "]}," Markdown MarkdownTable initialize":{"type":"method","name":"initialize","children":[],"call":["options [] merge! ","options [] "]}," FindAllCalls process_dregx":{"type":"method","name":"process_dregx","children":[],"call":["@calls << "," make_location "," process "," sexp? ","exp each "," add_simple_call "]}," CheckSQLCVEs check_cve_2014_0080":{"type":"method","name":"check_cve_2014_0080","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] "," tracker config [] "," tracker config "," tracker ","@tracker config [] include? ","@tracker config [] ","@tracker config "," version_between? "," rails_version ","@tracker config has_gem? "," msg "," msg_version "," msg_cve "]}," CheckSQLCVEs upgrade_version?":{"type":"method","name":"upgrade_version?","children":[],"call":[" version_between? ","versions each "]}," CheckSQLCVEs cve_warning_for":{"type":"method","name":"cve_warning_for","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] "," tracker config [] "," tracker config "," tracker ","cve tr to_sym ","cve tr "," upgrade_version? "," rails_version "," msg "," msg_version "," msg_cve ","  upgrade_version? ? "]}," CheckSQLCVEs check_rails_versions_against_cve_issues":{"type":"method","name":"check_rails_versions_against_cve_issues","children":[],"call":[" cve_warning_for ","cve_issue [] ","issues each ","issues << "," lts_version? ","issues << << "," tracker config [] [] "," tracker config [] "," tracker config "," tracker "," tracker config has_gem? "]}," CheckSQLCVEs run_check":{"type":"method","name":"run_check","children":[],"call":[" check_cve_2014_0080 "," check_rails_versions_against_cve_issues "]}," CheckRegexDoS process_call":{"type":"method","name":"process_call","children":[],"call":["escape_methods include? ","exp method ","ESCAPES  [] ","exp target ","ESCAPES  []  include? "]}," CheckRegexDoS process_result":{"type":"method","name":"process_result","children":[],"call":[" warn ","match match "," friendly_type_of capitalize "," friendly_type_of ","CONFIDENCE  [] "," include_user_input? ","Match  new "," has_immediate_model? "," has_immediate_user_input? "," sexp? ","components any? ","call [] ","result [] "," add_result "," duplicate? ","result [] original_line "," original? "," msg "," msg_input ","call sexp_body "," include_user_input?   include_user_input?  ","Match  new  Match  new  "," has_immediate_model?   has_immediate_model?  "," has_immediate_user_input?   has_immediate_user_input?  ","call []  any? ","call sexp_body  any? ","result []  [] ","result []  sexp_body "]}," CheckRegexDoS run_check":{"type":"method","name":"run_check","children":[],"call":[" process_result ","calls each ","Brakeman  debug "," tracker find_call "," tracker "," tracker find_call  each "]}," CheckRedirect explicit_host?":{"type":"method","name":"explicit_host?","children":[],"call":[" has_immediate_user_input? ! "," has_immediate_user_input? "," hash_access "," hash? ","call first_arg "," explicit_host? "," call? ","arg target "," sexp? ","call first_call first_arg  ","call first_arg  tcall first_arg et ","arg arg target  "]}," Util template_path_to_name":{"type":"method","name":"template_path_to_name","children":[],"call":["names [] join to_sym ","names [] join ","names [] ","names index + ","names index ","names last gsub! ","names last ","path split ","path relative split ","path relative ","(send\n  (lvar :names) :include?\n  (str \"views\")) join to_sym ","(send\n  (lvar :names) :include?\n  (str \"views\")) join ","names include? ","path split  [] join to_sym ","path relative split  [] join to_sym ","path split  [] join ","path relative split  [] join ","path split  [] ","path relative split  [] ","path split  index + ","path relative split  index + ","path split  index ","path relative split  index ","path split  last gsub! ","path relative split  last gsub! ","path split  last ","path relative split  last ","(send\n  (lvar :path split ) :include?\n  (str \"views\")) join to_sym ","(send\n  (lvar :path relative split ) :include?\n  (str \"views\")) join to_sym ","(send\n  (lvar :path split ) :include?\n  (str \"views\")) join ","(send\n  (lvar :path relative split ) :include?\n  (str \"views\")) join ","path split  include? ","path relative split  include? "]}," Tracker reset_lib":{"type":"method","name":"reset_lib","children":[],"call":["@libs delete ","lib [] include? ","lib [] ","@libs each ","lib files include? ","lib files "]}," Scanner track_progress":{"type":"method","name":"track_progress","children":[],"call":[" report_progress ","list each ","list length "]}," Scanner process_template_data_flows":{"type":"method","name":"process_template_data_flows","children":[],"call":["@processor process_template_alias ","Brakeman  debug "," track_progress ","name to_s "," tracker templates sort_by "," tracker templates "," tracker "]}," Scanner process_controller_data_flows":{"type":"method","name":"process_controller_data_flows","children":[],"call":[" tracker filter_cache clear "," tracker filter_cache "," tracker ","@processor process_controller_alias ","controller [] each_value ","controller [] ","Brakeman  debug "," track_progress ","name to_s "," tracker controllers sort_by "," tracker controllers ","controller src each ","controller src "]}," Scanner parse_files":{"type":"method","name":"parse_files","children":[],"call":["fp file_list ","template_parser parse_template ","fp read_files ","@app_tree template_paths ","Brakeman TemplateParser  new "," tracker ","fp parse_files ","files each ","files []= ","@app_tree lib_paths "," options [] "," options ","@app_tree model_paths ","@app_tree controller_paths ","@app_tree initializer_paths ","Brakeman FileParser  new "," tracker add_errors ","fp errors "," tracker app_tree ruby_file_paths "," tracker app_tree "," tracker options [] "," tracker options ","Brakeman FileParser  new  file_list ","Brakeman TemplateParser  new  parse_template ","Brakeman FileParser  new  read_files ","Brakeman FileParser  new  parse_files ","Brakeman FileParser  new  errors "]}," Rescanner parse_ruby_files":{"type":"method","name":"parse_ruby_files","children":[],"call":["file_parser file_list [] ","file_parser file_list ","file_parser parse_files ","Brakeman FileParser  new "," tracker ","@app_tree path_exists? ","list select "," tracker add_errors ","file_parser errors "," tracker options [] "," tracker options "," tracker app_tree ","Brakeman FileParser  new  file_list [] ","Brakeman FileParser  new  file_list ","Brakeman FileParser  new  parse_files ","Brakeman FileParser  new  errors "]}," Rescanner rescan_initializer":{"type":"method","name":"rescan_initializer","children":[],"call":[" process_initializer "," parse_ruby_files each "," parse_ruby_files ","@reindex << "," tracker reset_initializer "," tracker "]}," Rescanner rescan_routes":{"type":"method","name":"rescan_routes","children":[],"call":["@reindex << << ","@reindex << "," process_controller_data_flows "," process_routes "," tracker reset_templates "," tracker "," tracker reset_routes "]}," ModelProcessor process_module":{"type":"method","name":"process_module","children":[],"call":["exp body= "," process_all! ","exp body ","@tracker libs []= ","@tracker libs ","@current_module [] []= ","@current_module [] ","@current_module [] << ","@current_module [] include? ","@tracker libs [] ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","@current_class [] to_s + + ","name to_s ","@current_class [] to_s + ","@current_class [] to_s ","@current_class [] ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","outer_module [] to_s + + ","outer_module [] to_s + ","outer_module [] to_s ","outer_module [] "," class_name ","exp class_name ","Brakeman Model  new ","@current_module add_file ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","@current_class name to_s + + ","@current_class name to_s + ","@current_class name to_s ","@current_class name ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","outer_module name to_s + + ","outer_module name to_s + ","outer_module name to_s ","outer_module name "," handle_module ","@tracker libs []  [] []= ","Brakeman Model  new  [] []= ","@tracker libs []  [] ","Brakeman Model  new  [] ","@tracker libs []  [] << ","Brakeman Model  new  [] << ","@tracker libs []  [] include? ","Brakeman Model  new  [] include? ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym : class_name )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s "," class_name  to_s ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym : class_name )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym "," class_(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," class_(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," class_ class_name  "," class_(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," class_(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp class_(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp class_(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp class_ class_name  ","exp class_(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp class_(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@tracker libs []  add_file ","Brakeman Model  new  add_file ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) : class_name ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_class  class_name  to_s + + ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_class  class_name  to_s + ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_class  class_name  to_s ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_class  class_name  ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) : class_name ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","outer_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_module  class_name  to_s + + ","outer_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_module  class_name  to_s + ","outer_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_module  class_name  to_s ","outer_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","outer_module  class_name  ","outer_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "]}," Rails3RoutesProcessor loose_action":{"type":"method","name":"loose_action","children":[],"call":["@tracker routes []= ","@tracker routes "," current_controller= ","controller_name value "]}," Rails3RoutesProcessor action_route?":{"type":"method","name":"action_route?","children":[],"call":["arg include? ","arg is_a? ","arg value "," string? ","arg value  include? ","arg value  is_a? ","arg value  value "]}," ControllerProcessor process_module":{"type":"method","name":"process_module","children":[],"call":["exp body= "," process_all! ","exp body ","@tracker libs []= ","@tracker libs ","@current_module [] []= ","@current_module [] ","@current_module [] << ","@current_module [] include? ","@tracker libs [] ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","@current_class [] to_s + + ","name to_s ","@current_class [] to_s + ","@current_class [] to_s ","@current_class [] ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","outer_module [] to_s + + ","outer_module [] to_s + ","outer_module [] to_s ","outer_module [] "," class_name ","exp module_name ","Brakeman Controller  new ","@current_module add_file ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","@current_class name to_s + + ","@current_class name to_s + ","@current_class name to_s ","@current_class name ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","outer_module name to_s + + ","outer_module name to_s + ","outer_module name to_s ","outer_module name "," handle_module ","@tracker libs []  [] []= ","Brakeman Controller  new  [] []= ","@tracker libs []  [] ","Brakeman Controller  new  [] ","@tracker libs []  [] << ","Brakeman Controller  new  [] << ","@tracker libs []  [] include? ","Brakeman Controller  new  [] include? ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym : class_name )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s "," class_name  to_s ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym : class_name )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym )) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym "," class_(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," class_(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," class_ class_name  "," class_(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," class_(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp module_(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp module_(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp module_ class_name  ","exp module_(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp module_(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@tracker libs []  add_file ","Brakeman Controller  new  add_file ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) : class_name ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_class  class_name  to_s + + ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_class  class_name  to_s + ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_class  class_name  to_s ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_class  class_name  ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) : class_name ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","outer_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_module  class_name  to_s + + ","outer_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_module  class_name  to_s + ","outer_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_module  class_name  to_s ","outer_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :[]\n        (sym :name)) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","outer_module  class_name  ","outer_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "]}," AliasProcessor self_assign?":{"type":"method","name":"self_assign?","children":[],"call":["value target value == ","value target value ","value target "," node_type? ","value method == ","value method "," call? "," self_assign_target? "," self_assign_var? "]}," Brakeman TemplateParser parse_slim":{"type":"method","name":"parse_slim","children":[],"call":["(send\n  (const\n    (const nil :Slim) :Template) :new\n  (hash\n    (pair\n      (sym :disable_capture)\n      (true))\n    (pair\n      (sym :generator)\n      (const\n        (const\n          (const nil :Temple) :Generators) :RailsOutputBuffer)))) precompiled_template ","Slim Template  new ","Brakeman  load_brakeman_dependency ","(send\n  (const\n    (const nil :Slim) :Template) :new\n  (lvar :path)\n  (hash\n    (pair\n      (sym :disable_capture)\n      (true))\n    (pair\n      (sym :generator)\n      (const\n        (const\n          (const nil :Temple) :Generators) :RailsOutputBuffer)))) precompiled_template "," require_relative "," load_slim_smart? ","@slim_smart nil? "]}," Brakeman TemplateParser parse_haml":{"type":"method","name":"parse_haml","children":[],"call":["Haml Engine  new precompiled ","Haml Engine  new "," tracker config [] ! ! "," tracker config [] ! "," tracker config [] "," tracker config "," tracker ","Brakeman  load_brakeman_dependency ","Haml Engine  new precompiled gsub "," tracker config escape_html? "," tracker error ","(dstr\n  (str \"While compiling HAML in \")\n  (begin\n    (lvar :path))) << ","e backtrace "," tracker config escape_filter_interpolations? "," require_relative "]}," Brakeman TemplateParser erubis?":{"type":"method","name":"erubis?","children":[],"call":[" tracker config [] "," tracker config "," tracker "," tracker config erubis? "," tracker config escape_html? "]}," Brakeman TemplateParser parse_erb":{"type":"method","name":"parse_erb","children":[],"call":["src sub! ","ERB  new src ","ERB  new "," require ","Brakeman ScannerErubis  new src ","Brakeman ScannerErubis  new "," tracker config [] "," tracker config "," tracker ","Brakeman Rails2XSSPluginErubis  new src ","Brakeman Rails2XSSPluginErubis  new ","Brakeman Rails3Erubis  new src ","Brakeman Rails3Erubis  new "," tracker options [] "," tracker options "," tracker config erubis? "," tracker config escape_html? ","ERB  instance_method parameters assoc ","ERB  instance_method parameters ","ERB  instance_method ","ERB  new src  sub! ","ERB  new ERB  new src  ","Brakeman ScannerErubis  new ERB  new src  ","Brakeman Rails2XSSPluginErubis  new ERB  new src  ","Brakeman Rails3Erubis  new ERB  new src  "]}," Brakeman TemplateParser parse_template":{"type":"method","name":"parse_template","children":[],"call":[" tracker error ","e backtrace ","e exception ","e message + ","e message "," tracker ","(dstr\n  (str \"While compiling HAML in \")\n  (begin\n    (lvar :path))) << ","@file_parser file_list [] << ","TemplateFile  new ","@file_parser file_list [] ","@file_parser file_list ","@file_parser parse_ruby "," parse_slim "," parse_haml "," parse_erb "," erubis? "," template_path_to_name ","type == ","path match [] to_sym ","path match [] ","path match ","Brakeman  debug ","path relative match [] to_sym ","path relative match [] ","path relative match ","path relative ","@file_parser file_list << "," template_path_to_ template_path_to_name  ","path match [] to_sym  == ","path relative match [] to_sym  == "]}," Brakeman TemplateParser initialize":{"type":"method","name":"initialize","children":[],"call":["@file_parser file_list [] ","@file_parser file_list "]}," Brakeman FileParser read_path":{"type":"method","name":"read_path","children":[],"call":["@app_tree read_path "]}," Brakeman FileParser parse_ruby":{"type":"method","name":"parse_ruby","children":[],"call":["@tracker error ","e backtrace ","e exception ","e message + ","e message ","RubyParser  new parse ","RubyParser  new ","Brakeman  debug "," caller ","Exception  new ","path relative ","path is_a? "," parse_ruby ","RubyParser  latest ","parser class == ","parser class ","parser parse "," error "," raise ","path relative  relative ","path relative  is_a? "]}," Brakeman FileParser read_files":{"type":"method","name":"read_files","children":[],"call":["@file_list [] << ","@file_list [] "," read_path ","list each ","file read ","@app_tree file_path ","@file_list << ","@errors << ","@@app_tree file_path _list [] << ","@@app_tree file_path _list [] ","@app_tree file_path  read ","@app_tree @app_tree file_path _path ","@@app_tree file_path _list << "]}," Brakeman FileParser parse_files":{"type":"method","name":"parse_files","children":[],"call":["ASTFile  new "," parse_ruby "," read_files ","path relative "," errors concat "," errors ","result is_a? ","(send\n  (const nil :Parallel) :map\n  (lvar :list)) compact partition ","(send\n  (const nil :Parallel) :map\n  (lvar :list)) compact ","file_path relative ","file_path read ","@app_tree file_path ","Parallel  map ","(send\n  (const nil :Parallel) :map\n  (lvar :list)\n  (lvar :parallel_options)) compact partition ","(send\n  (const nil :Parallel) :map\n  (lvar :list)\n  (lvar :parallel_options)) compact ","@app_tree file_path  relative ","@app_tree file_path  read ","@app_tree @app_tree file_path  "]}," Brakeman FileParser initialize":{"type":"method","name":"initialize","children":[],"call":["@tracker app_tree ","@tracker options [] ","@tracker options "]}," CheckRender process_render_result":{"type":"method","name":"process_render_result","children":[],"call":[" check_for_dynamic_path ","result [] render_type ","result [] "," node_type? "," check_for_rce "]}," CheckRedirect model_target?":{"type":"method","name":"model_target?","children":[],"call":[" model_target? ","exp target "," friendly_model? "," model_name? "," call? "]}," CheckDefaultRoutes allow_all_actions?":{"type":"method","name":"allow_all_actions?","children":[],"call":[" tracker routes [] "," tracker routes "," tracker "]}," CheckDefaultRoutes check_for_cve_2014_0130":{"type":"method","name":"check_for_cve_2014_0130","children":[],"call":[" warn "," tracker options [] "," tracker options "," tracker "," tracker config [] "," tracker config ","CONFIDENCE  [] "," allow_all_actions? "," version_between? "," lts_version? "," tracker app_path "," rails_version "," msg "," msg_version "]}," CheckDefaultRoutes check_for_action_globs":{"type":"method","name":"check_for_action_globs","children":[],"call":[" warn "," tracker options [] "," tracker options "," tracker ","CONFIDENCE  [] ","actions [] ","actions [] [] ","actions [] is_a? ","actions [] == ","actions is_a? "," tracker routes each "," tracker routes ","Brakeman  debug "," allow_all_actions? "," tracker app_path "," msg "," msg_code "]}," CheckDefaultRoutes check_for_default_routes":{"type":"method","name":"check_for_default_routes","children":[],"call":[" warn "," tracker options [] "," tracker options "," tracker ","CONFIDENCE  [] "," tracker routes [] line "," tracker routes [] "," tracker routes "," allow_all_actions? "," tracker app_path "," msg "," msg_file "]}," Brakeman add_external_checks":{"type":"method","name":"add_external_checks","children":[],"call":[]}," Tracker app_path":{"type":"method","name":"app_path","children":[],"call":["File  expand_path ","@options [] "]}," Scanner guess_rails_version":{"type":"method","name":"guess_rails_version","children":[],"call":["Brakeman  notify "," tracker options []= "," tracker options "," tracker ","@app_tree exists? ! ","@app_tree exists? "," tracker options [] "]}," Checks initialize_checks":{"type":"method","name":"initialize_checks","children":[],"call":[]}," CheckSymbolDoS safe_parameter?":{"type":"method","name":"safe_parameter?","children":[],"call":["(sym :controller) include? ","input first_arg value ","input first_arg "," symbol? ","input method == ","input method "," call? "," params? "," safe_parameter? ","input target "," node_type? "]}," CheckSQL check_interp_target_or_arg":{"type":"method","name":"check_interp_target_or_arg","children":[],"call":[" check_string_arg "," node_type? "," string_interp? "]}," CheckSQL check_str_target_or_arg":{"type":"method","name":"check_str_target_or_arg","children":[],"call":[" check_string_arg "," string? "]}," CheckSend get_send":{"type":"method","name":"get_send","children":[],"call":[" get_send ","exp target ","@send_methods include? ","exp method "," call? "]}," CheckCreateWith generic_warning":{"type":"method","name":"generic_warning","children":[],"call":[" warn ","CONFIDENCE  [] "," gemfile_or_environment "]}," CheckCreateWith danger_level":{"type":"method","name":"danger_level","children":[],"call":["CONFIDENCE  [] "," include_user_input? "," has_immediate_user_input? "," hash? "," request_value? ","exp method == ","exp method "," call? "," sexp? "]}," CheckCreateWith process_result":{"type":"method","name":"process_result","children":[],"call":[" warn "," danger_level ","result [] first_arg ","result [] "," add_result "," duplicate? "," original? ","result [] first_result [] first_arg  "]}," CheckCreateWith run_check":{"type":"method","name":"run_check","children":[],"call":[" generic_warning "," process_result "," tracker find_call each "," tracker find_call "," tracker "," version_between? "," msg "," msg_version "," msg_code "]}," Checks checks_to_run":{"type":"method","name":"checks_to_run","children":[],"call":[]}," Checks optional_checks":{"type":"method","name":"optional_checks","children":[],"call":[]}," Checks add_optional":{"type":"method","name":"add_optional","children":[],"call":[]}," CheckUnscopedFind process_result":{"type":"method","name":"process_result","children":[],"call":[" warn ","input match ","CONFIDENCE  [] ","result [] "," add_result ","inputs compact first ","inputs compact "," include_user_input? ","result [] args map ","result [] args ","result [] original_line "," duplicate? "," msg "," msg_code ","inputs compact first  match ","inputs compact first s compact first ","inputs compact first s compact "," include_user_inputs compact first ? "]}," CheckUnscopedFind run_check":{"type":"method","name":"run_check","children":[],"call":[" process_result ","calls each "," tracker find_call "," tracker "," active_record_models [] [] [] "," active_record_models [] [] "," active_record_models [] "," active_record_models "," active_record_models keys select "," active_record_models keys ","Brakeman  debug "," active_record_models [] associations [] "," active_record_models [] associations "," optional_belongs_to? ! "," optional_belongs_to? "," hash_access "," hash? ","result [] first_arg ","result [] "," tracker find_call each "," tracker find_call  each "," optional_ active_record_models [] associations [] ? ! "," optional_ active_record_models [] associations [] ? ","result [] first_result [] first_arg  "]}," ProcessorHelper process_class":{"type":"method","name":"process_class","children":[],"call":[" process_all ","exp body "," class_name ","exp [] "]}," BasicProcessor process_default":{"type":"method","name":"process_default","children":[],"call":[" process_all "]}," BasicProcessor initialize":{"type":"method","name":"initialize","children":[],"call":[]}," GemProcessor set_gem_version_and_file":{"type":"method","name":"set_gem_version_and_file","children":[],"call":["@tracker config [] []= ","1 to_sym ","@tracker config [] ","@tracker config ","line =~ ","@tracker config add_gem ","@tracker config set_ruby_version "]}," ControllerAliasProcessor get_skipped_filters":{"type":"method","name":"get_skipped_filters","children":[],"call":["filters concat ","f [] ","f [] include? ! ","f [] include? ","f [] is_a? ","f [] != ","f [] == ","controller [] each ","controller [] ","controller []= "," before_filter_to_hash ","filter args ","controller [] [] map ","controller [] [] ","controller [] nil? "]}," ControllerAliasProcessor remove_skipped_filters":{"type":"method","name":"remove_skipped_filters","children":[],"call":["@tracker libs [] ","controller [] ","@tracker libs ","@tracker controllers [] ","@tracker controllers ","filters - "," get_skipped_filters ","@tracker controllers []  [] ","@tracker @tracker controllers [] s [] ","@tracker @tracker controllers [] s ","filters -  - "," get_skipped_filters -  "]}," AliasProcessor top_target":{"type":"method","name":"top_target","children":[],"call":[" top_target ","exp block_call "," node_type? ","exp target "," call? "]}," AliasProcessor self_assign_target?":{"type":"method","name":"self_assign_target?","children":[],"call":["var == ","target value "," node_type? "," top_target ","target value  value "," top_target  value "," top_target value  "," top_ top_target  "]}," AliasProcessor self_assign_var?":{"type":"method","name":"self_assign_var?","children":[],"call":["value target value == ","value target value ","value target "," node_type? ","value method == ","value method "," call? "]}," AliasProcessor process_masgn":{"type":"method","name":"process_masgn","children":[],"call":[" process ","assign rhs= ","var dup ","vals [] ","vars each_with_index ","vals shift ","vars shift ","exp [] dup ","exp [] "," process_default ","exp [] length == ","exp [] length "," array? "," process_masgn ","m []= "," s "," node_type? ","exp []= ","exp [] [] "," sexp? ","var dup  rhs= ","vals [] s [] ","exp [] dup  [] ","exp [] dup  each_with_index ","vals [] s shift ","exp [] dup  shift "," process_var dup asgn ","var dup  []= "]}," CheckSymbolDoSCVE run_check":{"type":"method","name":"run_check","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] "," tracker config [] "," tracker config "," tracker "," active_record_models any? "," active_record_models "," version_between? "," rails_version "," msg "," msg_version "]}," CheckRenderInline check_render":{"type":"method","name":"check_render","children":[],"call":[" warn ","CONFIDENCE  [] "," has_immediate_model? ","input match "," friendly_type_of "," has_immediate_user_input? ","call [] ","call render_type == ","call render_type "," node_type? ","result [] "," add_result "," duplicate? "," content_type_set? "," original? "," msg "," msg_input "," has_immediate_model?  match "," has_immediate_user_input?  match "," has_immediate_user_ has_immediate_model? ? "," has_immediate_user_ has_immediate_user_input? ? ","result []  [] ","result []  render_type == ","result []  render_type "," msg_ has_immediate_model?  "," msg_ has_immediate_user_input?  "]}," CheckRenderInline run_check":{"type":"method","name":"run_check","children":[],"call":[" check_render "," tracker find_call each "," tracker find_call "," tracker "," setup "]}," CheckFileDisclosure serves_static_assets?":{"type":"method","name":"serves_static_assets?","children":[],"call":[" true? "," tracker config [] [] "," tracker config [] "," tracker config "," tracker "," tracker config rails [] "," tracker config rails "]}," CheckFileDisclosure run_check":{"type":"method","name":"run_check","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] "," tracker config [] "," tracker config "," tracker "," serves_static_assets? "," version_between? "," rails_version "," msg "," msg_version "]}," CheckCrossSiteScripting setup":{"type":"method","name":"setup","children":[],"call":["Brakeman  debug ","@safe_input_attributes << ","@known_dangerous << "," version_between? ","json_escape_on ! "," true? "," tracker config [] [] [] "," tracker config [] [] "," tracker config [] "," tracker config "," tracker ","result call first_arg ","result call ","initializers each "," tracker check_initializers ","@ignore_methods << ","Set  [] "," tracker options [] "," tracker options "," tracker models keys "," tracker models ","Set  [] merge "," tracker config escape_html_entities_in_json? "," tracker config gem_version "," tracker config has_gem? "," tracker config gem_version == ","result [] first_arg ","result [] "," tracker find_call ","Set  []  << "," true?  ! "," tracker check_initializers  each "," tracker find_call  each "," tracker check_ tracker check_initializers  "," tracker check_ tracker find_call  ","Set  [] merge  << "]}," Brakeman AppTree find_additional_lib_paths":{"type":"method","name":"find_additional_lib_paths","children":[],"call":["(send\n  (ivar :@additional_libs_path) :collect) flatten "," find_paths ","@additional_libs_path collect "]}," Brakeman RenderPath initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["original path dup ","original path "]}," Brakeman RenderPath to_json":{"type":"method","name":"to_json","children":[],"call":["MultiJson  dump "," to_a ","JSON  generate "," require "]}," Brakeman RenderPath to_sym":{"type":"method","name":"to_sym","children":[],"call":[" to_s to_sym "," to_s "]}," Brakeman RenderPath to_s":{"type":"method","name":"to_s","children":[],"call":[" to_a to_s "," to_a "]}," Brakeman RenderPath last":{"type":"method","name":"last","children":[],"call":[" to_a last "," to_a "]}," Brakeman RenderPath to_a":{"type":"method","name":"to_a","children":[],"call":["loc [] ","@path map "]}," Brakeman RenderPath length":{"type":"method","name":"length","children":[],"call":["@path length "]}," Brakeman RenderPath join":{"type":"method","name":"join","children":[],"call":[" to_a join "," to_a "]}," Brakeman RenderPath each":{"type":"method","name":"each","children":[],"call":["@path each "]}," Brakeman RenderPath rendered_from_controller?":{"type":"method","name":"rendered_from_controller?","children":[],"call":["loc [] == ","loc [] ","@path any? "]}," Brakeman RenderPath include_any_method?":{"type":"method","name":"include_any_method?","children":[],"call":["names include? ","loc [] ","loc [] == ","@path any? ","method_names map ","method_names map  include? ","method_method_names map  map "]}," Brakeman RenderPath include_controller?":{"type":"method","name":"include_controller?","children":[],"call":["loc [] == ","loc [] ","@path any? ","klass to_sym ","klass to_sym  to_sym "]}," Brakeman RenderPath include_template?":{"type":"method","name":"include_template?","children":[],"call":["loc [] == ","loc [] ","@path any? ","name to_sym ","name to_sym  to_sym "]}," Brakeman RenderPath add_template_render":{"type":"method","name":"add_template_render","children":[],"call":["@path << ","template_name to_sym "]}," Brakeman RenderPath add_controller_render":{"type":"method","name":"add_controller_render","children":[],"call":["@path << ","method_name to_sym ","controller_name to_sym "]}," Brakeman RenderPath initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CheckCrossSiteScripting process_case":{"type":"method","name":"process_case","children":[],"call":[" process ","exp [] ","current < ","exp length "]}," SexpProcessor processors":{"type":"method","name":"processors","children":[],"call":[]}," ControllerProcessor add_lambda_filter":{"type":"method","name":"add_lambda_filter","children":[],"call":[" add_fake_filter ","result << ","lambda_node [] "," sexp? "," s ","lambda_node [] last "," node_type? ","Sexp  new line ","e line ","Sexp  new ","e delete_at ","exp dup "," add_fakexp dup _filtexp dup r ","Sexp  new line  << ","rexp dup sult << ","e delete_at  [] ","lambda_nodexp dup  [] "," sexp dup xp? ","e delete_at  [] last ","lambda_nodexp dup  [] last "," nodexp dup _typexp dup ? ","Sexp dup xp  nexp dup w linexp dup  ","exp dup  linexp dup  ","Sexp dup xp  nexp dup w ","exp dup  dexp dup lexp dup texp dup _at ","exp dup xp dup "]}," AliasProcessor array_include_all_literals?":{"type":"method","name":"array_include_all_literals?","children":[],"call":[" node_type? ","e is_a? ","exp target all? ","exp target ","exp target length > ","exp target length ","exp method == ","exp method "," call? "," dir_glob? "," all_literals? "]}," CheckSQL arel?":{"type":"method","name":"arel?","children":[],"call":[" arel? ","exp target ","AREL_METHODS  include? ","exp method "," call? "]}," CheckExecute dangerous_open_arg?":{"type":"method","name":"dangerous_open_arg?","children":[],"call":[" has_immediate_user_input? ","exp [] "," node_type? ","exp [] == "," string_interp? "]}," CheckExecute check_open_calls":{"type":"method","name":"check_open_calls","children":[],"call":[" warn ","CONFIDENCE  [] ","match match "," dangerous_open_arg? ","result [] first_arg ","result [] "," tracker find_call each "," tracker find_call "," tracker "," msg "," msg_code "," dangerous_open_arg?   dangerous_open_arg?  "]}," CheckXMLDoS has_workaround?":{"type":"method","name":"has_workaround?","children":[],"call":["value == ","arg value "," string? ","match call first_arg ","match call "," tracker check_initializers any? "," tracker check_initializers "," tracker ","match [] first_arg ","match [] "," tracker find_call any? "," tracker find_call ","arg value  == ","arg arg value  ","match call first_arg  value ","match [] first_arg  value ","match call first_match call first_arg  ","match call first_match [] first_arg  ","match [] first_match call first_arg  ","match [] first_match [] first_arg  "]}," CheckXMLDoS run_check":{"type":"method","name":"run_check","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] "," tracker config [] "," tracker config "," tracker "," has_workaround? "," version_between? "," tracker options [] "," tracker options ","version nil? "," rails_version "," msg "," msg_version "," msg_cve ","  tracker config [] _between? ","  rails_version _between? "," tracker config []  nil? "," rails_version  nil? "," rails_ tracker config []  "," rails_ rails_version  "," msg_ tracker config []  "," msg_ rails_version  "]}," CheckJSONEncoding has_workaround?":{"type":"method","name":"has_workaround?","children":[],"call":["initializer == "," tracker initializers any? "," tracker initializers "," tracker "," s "]}," CheckJSONEncoding run_check":{"type":"method","name":"run_check","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] "," tracker find_call any? "," tracker find_call "," tracker ","message << "," version_between? "," tracker config [] "," tracker config "," has_workaround? ! "," has_workaround? "," rails_version "," msg_version "," msg "," msg_cve "," msg  << "]}," Util rails_version":{"type":"method","name":"rails_version","children":[],"call":["@tracker config rails_version ","@tracker config "]}," Util string_interp?":{"type":"method","name":"string_interp?","children":[],"call":["exp node_type == ","exp node_type ","exp is_a? "]}," Brakeman Template rendered_from_controller?":{"type":"method","name":"rendered_from_controller?","children":[],"call":["@render_path rendered_from_controller? "]}," Brakeman Template each_output":{"type":"method","name":"each_output","children":[],"call":["@outputs each "]}," Brakeman Template add_output":{"type":"method","name":"add_output","children":[],"call":["@outputs << "]}," Brakeman Template initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Brakeman Model add_option":{"type":"method","name":"add_option","children":[],"call":["exp arglist line ","exp line ","exp arglist ","@associations [] concat ","exp args ","@associations [] ","ASSOCIATIONS  include? "]}," Brakeman Model initialize":{"type":"method","name":"initialize","children":[],"call":["tracker models "," initialize_model "]}," Brakeman ModelMethods attr_protected":{"type":"method","name":"attr_protected","children":[],"call":["@options [] "]}," Brakeman ModelMethods set_attr_protected":{"type":"method","name":"set_attr_protected","children":[],"call":[" add_option "]}," Brakeman ModelMethods set_attr_accessible":{"type":"method","name":"set_attr_accessible","children":[],"call":["@attr_accessible concat ","@role_accessible concat "," hash? ","args << ","e value "," node_type? ","exp each_arg "]}," Brakeman ModelMethods parent_classes_protected?":{"type":"method","name":"parent_classes_protected?","children":[],"call":["parent parent_classes_protected? ","seen [] ! ","seen [] "," parent "," tracker models [] "," tracker models "," tracker "," includes include? "," includes ","seen []= "," name "," tracker models []   tracker models [] _classes_protected? ","  tracker models []  "]}," Brakeman ModelMethods unprotected_model?":{"type":"method","name":"unprotected_model?","children":[],"call":[" ancestor? "," parent_classes_protected? ! "," parent_classes_protected? ","@attr_accessible nil? "]}," Brakeman ModelMethods association?":{"type":"method","name":"association?","children":[],"call":["arg value == ","arg value "," symbol? ","args each ","@associations each "]}," Brakeman ModelMethods initialize_model":{"type":"method","name":"initialize_model","children":[],"call":[]}," Brakeman Library initialize":{"type":"method","name":"initialize","children":[],"call":["tracker libs "," initialize_model "," initialize_controller "]}," Brakeman Controller initialize":{"type":"method","name":"initialize","children":[],"call":["tracker controllers "," initialize_controller "]}," Brakeman ControllerMethods before_filter_to_hash":{"type":"method","name":"before_filter_to_hash","children":[],"call":["filter []= ","Brakeman  debug ","value [] ","v [] ","value [] map ","value node_type ","args [] [] ","args [] ","args [] [] [] ","args [] node_type == ","args [] node_type ","filter [] << ","a [] ","filter [] ","a node_type == ","a node_type ","args [] each ","processor process_default "," sexp? ","args each ","value sexp_body map ","value sexp_body ","Brprocessor process_default kemprocessor process_default n  debug ","args [] []  [] ","vprocessor process_default lue [] ","args [] []  [] map ","vprocessor process_default lue [] mprocessor process_default p ","args [] []  node_type ","vprocessor process_default lue node_type ","processor process_default rgs [] [] ","processor process_default rgs [] ","processor process_default rgs [] [] [] ","processor process_default rgs [] node_type == ","processor process_default rgs [] node_type ","processor process_default  [] ","processor process_default  node_type == ","processor process_default  node_type ","processor process_default rgs [] eprocessor process_default ch ","processor process_defprocessor process_default ult ","processor process_default rgs eprocessor process_default ch ","args [] []  sexp_body map ","vprocessor process_default lue sexp_body mprocessor process_default p ","args [] []  sexp_body ","vprocessor process_default lue sexp_body "]}," Brakeman ControllerMethods get_before_filters":{"type":"method","name":"get_before_filters","children":[],"call":["filters concat ","f [] ","f [] include? ! ","f [] include? ","f [] is_a? ","f [] != ","f [] == ","@before_filter_cache each ","@before_filter_cache << "," before_filter_to_hash ","filter args "," before_filters each "," before_filters ","@before_filter_cache nil? "," filter_includes_method? "]}," Brakeman ControllerMethods remove_skipped_filters":{"type":"method","name":"remove_skipped_filters","children":[],"call":[" tracker libs [] ","controller parent "," tracker libs "," tracker "," tracker controllers [] "," tracker controllers ","filters - ","controller get_skipped_filters ","filters -  - ","controller get_skipped_filters -  "]}," Brakeman ControllerMethods get_skipped_filters":{"type":"method","name":"get_skipped_filters","children":[],"call":["filters concat ","f [] ","f [] include? ! ","f [] include? ","f [] is_a? ","f [] != ","f [] == ","@skip_filter_cache each "," before_filter_to_hash ","filter args "," skip_filters map "," skip_filters ","@skip_filter_cache nil? "," filter_includes_method? "]}," Brakeman ControllerMethods before_filter_list":{"type":"method","name":"before_filter_list","children":[],"call":[" remove_skipped_filters "," tracker libs [] ","controller parent "," tracker libs "," tracker "," tracker controllers [] "," tracker controllers ","controller get_before_filters + ","controller get_before_filters "," remove_skipped_controller get_before_filters +  ","controller get_before_controller get_before_filters +  + ","controller get_before_controller get_before_filters +  "]}," Brakeman ControllerMethods skip_filters":{"type":"method","name":"skip_filters","children":[],"call":["@options [] "]}," Brakeman ControllerMethods skip_filter":{"type":"method","name":"skip_filter","children":[],"call":["@options [] << ","@options [] "]}," Brakeman ControllerMethods before_filters":{"type":"method","name":"before_filters","children":[],"call":["@options [] "]}," Brakeman ControllerMethods prepend_before_filter":{"type":"method","name":"prepend_before_filter","children":[],"call":["@options [] unshift ","@options [] "]}," Brakeman ControllerMethods add_before_filter":{"type":"method","name":"add_before_filter","children":[],"call":["@options [] << ","@options [] "]}," Brakeman ControllerMethods protect_from_forgery?":{"type":"method","name":"protect_from_forgery?","children":[],"call":["@options [] "]}," Brakeman ControllerMethods initialize_controller":{"type":"method","name":"initialize_controller","children":[],"call":["@options []= "]}," Brakeman Config session_settings":{"type":"method","name":"session_settings","children":[],"call":["@rails [] [] ","@rails [] ","@rails dig "]}," Brakeman Config set_rails_version":{"type":"method","name":"set_rails_version","children":[],"call":["Brakeman  notify "," get_gem "," tracker options []= "," tracker options "," tracker ","@rails_version start_with? "," tracker options [] nil? "," tracker options [] ","version match "," gem_version "," extract_version "," check_haml_version ","@rails_ extract_version  start_with? "," extract_version  match "," gem_ extract_version  "," extract_ extract_version  "," check_haml_ extract_version  "]}," Brakeman Config get_gem":{"type":"method","name":"get_gem","children":[],"call":["@gems [] ","name to_sym "]}," Brakeman Config has_gem?":{"type":"method","name":"has_gem?","children":[],"call":["@gems [] ! ! ","@gems [] ! ","@gems [] ","name to_sym "]}," Brakeman Config add_gem":{"type":"method","name":"add_gem","children":[],"call":["@gems []= ","name to_sym ","name to_sym  to_sym "]}," Brakeman Config gem_version":{"type":"method","name":"gem_version","children":[],"call":["@gems [] [] ","@gems [] "," extract_version ","@gems dig ","name to_sym "]}," Brakeman Config whitelist_attributes?":{"type":"method","name":"whitelist_attributes?","children":[],"call":["@rails [] [] == ","Sexp  new ","@rails [] [] ","@rails [] ","@rails dig == ","@rails dig "]}," Brakeman Config escape_html_entities_in_json?":{"type":"method","name":"escape_html_entities_in_json?","children":[],"call":[" true? ","@rails [] [] ","@rails [] ","@rails dig "]}," Brakeman Config escape_html?":{"type":"method","name":"escape_html?","children":[],"call":[]}," Brakeman Config erubis?":{"type":"method","name":"erubis?","children":[],"call":[]}," Brakeman Config allow_forgery_protection?":{"type":"method","name":"allow_forgery_protection?","children":[],"call":["@rails [] [] == ","Sexp  new ","@rails [] [] ","@rails [] "]}," Brakeman Config initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Brakeman Collection methods_public":{"type":"method","name":"methods_public","children":[],"call":["@methods [] "]}," Brakeman Collection file":{"type":"method","name":"file","children":[],"call":["@files first "]}," Brakeman Collection get_method":{"type":"method","name":"get_method","children":[],"call":["n == "," each_method "," raise ","type inspect "," get_instance_method "," get_class_method "]}," Brakeman Collection each_method":{"type":"method","name":"each_method","children":[],"call":["meths each ","@methods each "]}," Brakeman Collection add_method":{"type":"method","name":"add_method","children":[],"call":["@methods [] []= ","@methods [] ","src [] ","src node_type == ","src node_type ","@class_methods []= ","Brakeman MethodInfo  new "," add_simple_method_maybe "]}," Brakeman Collection add_option":{"type":"method","name":"add_option","children":[],"call":["@options [] << ","@options [] "]}," Brakeman Collection add_include":{"type":"method","name":"add_include","children":[],"call":["@includes << "," ancestor? "]}," Brakeman Collection add_file":{"type":"method","name":"add_file","children":[],"call":["@src []= ","@files << ","@files include? "]}," Brakeman Collection ancestor?":{"type":"method","name":"ancestor?","children":[],"call":["parent_model ancestor? "," collection [] "," parent "," collection ","seen [] "," parent == ","seen []= "," name "," name == "," collection []  ancestor? "]}," Brakeman Collection initialize":{"type":"method","name":"initialize","children":[],"call":[" add_file "]}," TemplateAliasProcessor process_iter":{"type":"method","name":"process_iter","children":[],"call":[" process "," sexp? "," env []= ","Sexp  new "," env ","arg is_a? ","FORM_METHODS  include? ","model == ","target target "," get_model_target ","method == ","exp block ","exp block_args first_param ","exp block_args ","call method ","call target "," call? ","exp block_call "," process_default ","exp block_args first_param  is_a? "," get_model_target  == ","texp block_args first_param et texp block_args first_param et ","call target  call target  "," get_ get_model_target _target "," get_model_texp block_args first_param et "," get_model_call target  ","call method  == ","exp exp block  ","exp exp block _args first_param ","exp block_exp block_args first_param s first_param ","exp exp block _args ","exp block_exp block_args first_param s ","call call method  ","exp block_call  method ","call texp block_args first_param et ","call call target  ","exp block_call  target "," exp block_call ? ","exp exp block _call ","exp block_exp block_call  "]}," OutputProcessor process_iter":{"type":"method","name":"process_iter","children":[],"call":["exp clear "," process_rlist ","exp [] "," process ","exp sexp_body "]}," FindCall process_defn":{"type":"method","name":"process_defn","children":[],"call":[" process_all ","exp body "]}," FindAllCalls process_iter":{"type":"method","name":"process_iter","children":[],"call":[" process ","exp block ","@calls << ","call_hash []= ","exp block_args "," create_call_hash ","call node_type == ","call node_type ","exp block_call ","call_hash freeze ","@exp block_call s << "," create_call_hash  []= ","exp block_call _hash []= "," create_ create_call_hash  "," create_exp block_call _hash ","exp block_call  node_type == ","exp block_call  node_type ","exp block_exp block_call  "," create_call_hash  freeze ","exp block_call _hash freeze "]}," FindAllCalls process_defs":{"type":"method","name":"process_defs","children":[],"call":[" process_all ","exp body "]}," FindAllCalls process_defn":{"type":"method","name":"process_defn","children":[],"call":[" process_all ","exp body ","exp method_name ","@current_method nil? ","exp method_name  nil? "]}," ControllerAliasProcessor process_iter":{"type":"method","name":"process_iter","children":[],"call":["exp block_call method == ","exp block_call method ","exp block_call "," call? "]}," ControllerAliasProcessor process_defn":{"type":"method","name":"process_defn","children":[],"call":[" process_default_render ","@rendered ! "," process_all ","exp body "," process_before_filter "," before_filter_list each "," before_filter_list "," meth_env "," route? ","@only_method != ","@current_method nil? ","Brakeman  debug ","exp method_name "]}," AliasProcessor process_defs":{"type":"method","name":"process_defs","children":[],"call":["exp body= "," process_all! ","exp body "," set_env_defaults "," env scope "," env "]}," AliasProcessor process_defn":{"type":"method","name":"process_defn","children":[],"call":["exp body= "," process_all! ","exp body "," meth_env "]}," AliasProcessor process_iter":{"type":"method","name":"process_iter","children":[],"call":["exp []= "," process "," process_all! "," block? ","exp block "," raise ","e inspect "," env current []= "," env current "," env ","Sexp  new ","e is_a? ","e [] each ","e [] "," node_type? ","e lhs ","exp block_args each ","exp block_args "," env scope ","@exp_context pop ","exp block_call ","@exp_context push ","exp block_call target [] ","exp block_call target "," array_detect_all_literals? ","exp [] ","e nil? ","block_args each "," safe_literal ","exp line ","block_args last ","block_args last is_a? ","block_args length == ","block_args length "," all_literals? ","call target ","(sym :each) include? ","call method "," call? "," temp_file_new "," temp_file_open? "," exp block ? ","exp exp block  ","exp exp block _args each ","exp exp block_args  each ","exp exp block _args ","exp exp block_args  ","exp exp block _call ","exp block_exp block_call  ","exp exp block _call target [] ","exp block_exp block_call  target [] ","exp exp block _call target ","exp block_exp block_call  target ","exp block _args each ","exp block_args  each ","exp block _args last ","exp block_args  last ","exp block _args last is_a? ","exp block_args  last is_a? ","exp block _args length == ","exp block_args  length == ","exp block _args length ","exp block_args  length ","exp block_call  target ","exp block_call  method "," exp block_call ? "]}," CheckSSLVerify warn_about_ssl_verification_bypass":{"type":"method","name":"warn_about_ssl_verification_bypass","children":[],"call":[" warn ","CONFIDENCE  [] "," add_result "," duplicate? "," original? "]}," CheckSSLVerify process_http_start_result":{"type":"method","name":"process_http_start_result","children":[],"call":[" warn_about_ssl_verification_bypass "," hash_access == "," hash_access "," hash? ","result [] last_arg ","result [] ","result [] last_result [] last_arg  "]}," CheckSSLVerify check_http_start":{"type":"method","name":"check_http_start","children":[],"call":[" process_http_start_result "," tracker find_call each "," tracker find_call "," tracker "]}," CheckSSLVerify process_verify_mode_result":{"type":"method","name":"process_verify_mode_result","children":[],"call":[" warn_about_ssl_verification_bypass ","result [] last_arg == ","result [] last_arg ","result [] "]}," CheckLinkToHref ignored_method?":{"type":"method","name":"ignored_method?","children":[],"call":["method to_s =~ ","method to_s ","target nil? ","@ignore_methods include? "]}," CheckCrossSiteScripting html_safe_call?":{"type":"method","name":"html_safe_call?","children":[],"call":["exp value method == ","exp value method ","exp value ","exp value node_type == ","exp value node_type "," call? "]}," CheckCrossSiteScripting process_dstr":{"type":"method","name":"process_dstr","children":[],"call":[" process_default "]}," BaseCheck process_dstr":{"type":"method","name":"process_dstr","children":[],"call":[" process_default ","Match  new "," array_interp? "]}," Util class_name":{"type":"method","name":"class_name","children":[],"call":["(str \"::\") to_sym ","exp value ","(begin\n  (send nil :class_name\n    (send\n      (lvar :exp) :lhs))) to_sym ","exp rhs "," class_name ","exp lhs ","exp value to_sym ","exp node_type "]}," AliasProcessor get_rhs":{"type":"method","name":"get_rhs","children":[],"call":[" get_rhs ","exp rhs "," node_type? "]}," CheckWeakHash process_lvar":{"type":"method","name":"process_lvar","children":[],"call":["exp value == ","exp value "]}," CheckWeakHash process_ivar":{"type":"method","name":"process_ivar","children":[],"call":["exp value == ","exp value "]}," CheckWeakHash process_call":{"type":"method","name":"process_call","children":[],"call":[" process_default ","exp method == ","exp method "]}," CheckWeakHash hashing_password?":{"type":"method","name":"hashing_password?","children":[],"call":[" process ","call each_arg "]}," CheckWeakHash user_input_as_arg?":{"type":"method","name":"user_input_as_arg?","children":[],"call":[" include_user_input? ","call each_arg "," include_user_ include_user_input? ? "]}," CheckWeakHash process_openssl_result":{"type":"method","name":"process_openssl_result","children":[],"call":[" warn ","CONFIDENCE  [] ","alg == ","arg value upcase ","arg value "," string? ","result [] first_arg ","result [] "," add_result "," duplicate? "," original? "," msg "," msg_lit ","arg value upcase  == ","result [] first_arg  value upcase ","result [] first_arg  value ","result [] first_result [] first_arg  "]}," CheckWeakHash process_hmac_result":{"type":"method","name":"process_hmac_result","children":[],"call":[" warn ","CONFIDENCE  [] ","call third_arg last ","call third_arg ","result [] "," add_result "," duplicate? "," original? ","message << << "," msg_lit ","message << "," msg ","result []  third_arg last ","result []  third_arg "," msg  << << "," msg  << "]}," CheckWeakHash process_hash_result":{"type":"method","name":"process_hash_result","children":[],"call":[" warn ","call target last ","call target ","CONFIDENCE  [] "," hashing_password? ","input match "," user_input_as_arg? ","DIGEST_CALLS  include? ","call method ","result [] "," add_result "," duplicate? "," original? ","message << << "," msg_lit ","message << "," msg ","result []  target last ","result []  target "," hashing_password?  match ","input match  match "," user_input_as_arg?  match "," user_ hashing_password? _as_arg? "," user_input match _as_arg? "," user_ user_input_as_arg? _as_arg? ","result []  method "," msg  << << "," msg  << "]}," CheckWeakHash run_check":{"type":"method","name":"run_check","children":[],"call":[" process_openssl_result "," tracker find_call each "," tracker find_call "," tracker "," process_hmac_result "," process_hash_result "]}," CheckSessionManipulation process_result":{"type":"method","name":"process_result","children":[],"call":[" warn ","input match ","result [] "," friendly_type_of capitalize "," friendly_type_of ","CONFIDENCE  [] "," params? "," has_immediate_user_input? ","result [] first_arg "," add_result ","result [] original_line "," duplicate? "," original? "," msg "," msg_input "," has_immediate_user_input?  match "," has_immediate_user_ has_immediate_user_input? ? "," msg_ has_immediate_user_input?  "]}," CheckSessionManipulation run_check":{"type":"method","name":"run_check","children":[],"call":[" process_result "," tracker find_call each "," tracker find_call "," tracker "]}," CheckLinkToHref decorated_model?":{"type":"method","name":"decorated_model?","children":[],"call":["method == "," tracker config has_gem? "," tracker config "," tracker "]}," CheckLinkToHref ignore_call?":{"type":"method","name":"ignore_call?","children":[],"call":[" decorated_model? "]}," CallIndex calls_by_methods_regex":{"type":"method","name":"calls_by_methods_regex","children":[],"call":["calls concat ","key to_s match ","key to_s ","@calls_by_method each ","key match "]}," Sexp inspect":{"type":"method","name":"inspect","children":[],"call":["(send\n  (self) :map) join ","x inspect ","x is_a? "," map ","seen << "," object_id ","seen include? "]}," Brakeman Collection top_line":{"type":"method","name":"top_line","children":[],"call":["source line "," sexp? ","@src each_value ","@src [] line ","@src [] "," file "]}," LibraryProcessor process_call":{"type":"method","name":"process_call","children":[],"call":[" process_default "," process_call_defn? ","(or\n  (ivar :@current_class)\n  (ivar :@current_module)) add_include "," class_name ","exp first_arg ","exp method ","exp target nil? ","exp target ","@current_method nil? "]}," ProcessorHelper process_call_defn?":{"type":"method","name":"process_call_defn?","children":[],"call":[" process ","exp first_arg ","exp method ","(sym :private) include? "," node_type? ","exp target nil? ","exp target "," call? "]}," CheckRenderInline content_type_set?":{"type":"method","name":"content_type_set?","children":[],"call":["CONTENT_TYPES  include? ! ","CONTENT_TYPES  include? ","content_type value "," string? "," hash_access "," hash? "," hash_access  value "]}," CheckLinkToHref model_find_call?":{"type":"method","name":"model_find_call?","children":[],"call":["exp method to_s =~ ","exp method to_s ","exp method ","MODEL_METHODS  include? "," call? "]}," CodeClimate local_content_for":{"type":"method","name":"local_content_for","children":[],"call":["File  read ","File  exist? ","File  join ","link split last ","link split "]}," CodeClimate content_for":{"type":"method","name":"content_for","children":[],"call":[" local_content_for ","@contents [] ","link nil? "]}," CodeClimate name_for":{"type":"method","name":"name_for","children":[],"call":["@warning_codes [] to_s ","@warning_codes [] ","Brakeman WarningCodes Codes  invert "]}," CodeClimate remediation_points_for":{"type":"method","name":"remediation_points_for","children":[],"call":["@remediation_points fetch "," name_for ","YAML  load_file "]}," CodeClimate severity_level_for":{"type":"method","name":"severity_level_for","children":[],"call":["confidence == "]}," CodeClimate issue_json":{"type":"method","name":"issue_json","children":[],"call":["(pair\n  (sym :type)\n  (str \"Issue\")) to_json "," content_for ","warning link ","warning warning_code ","warning line ","warning relative_path "," remediation_points_for "," severity_level_for ","warning confidence ","warning message "," name_for ","warning fingerprint "," file_path "]}," CodeClimate generate_report":{"type":"method","name":"generate_report","children":[],"call":["(send\n  (send nil :all_warnings) :map) join "," issue_json "," all_warnings map "," all_warnings "]}," AliasProcessor replace":{"type":"method","name":"replace","children":[],"call":[" replace ","int + ","replacement deep_clone ","exp line "," duplicate? ! "," duplicate? "," env [] "," env ","int > "," tracker constant_lookup "," tracker "," env []  deep_clone "," tracker constant_lookup  deep_clone "]}," CheckWithoutProtection all_literals?":{"type":"method","name":"all_literals?","children":[],"call":[" node_type? "," hash_iterate "," hash? ","call each_arg "]}," CheckSessionSettings check_secrets_yaml":{"type":"method","name":"check_secrets_yaml","children":[],"call":[" warn_about_secret_token ","@app_tree expand_path ","(send\n  (send\n    (lvar :yaml) :lines) :find_index) + ","l include? ","yaml lines find_index ","yaml lines ","secret include? ","secrets [] [] ","secrets [] ","SafeYAML  load "," require ","@app_tree read ","@app_tree exists? "," ignored? ! "," ignored? ","Brakeman  debug ","e inspect ","Brakeman  notify "," class ","@app_tree file_path ","secrets_file read ","secrets_file exists? "," warn_about_secrets [] [] _token ","(send\n  (send\n    (lvar :yaml) :(send\n  (send\n    (lvar :yaml) :lines) :find_index) + s) :find_index) + ","(send\n  (send\n    (lvar :@app_tree read ) :lines) :find_index) + ","(send\n  (send\n    (lvar :secrets_file read ) :lines) :find_index) + ","yaml (send\n  (send\n    (lvar :yaml) :lines) :find_index) + s find_index ","@app_tree read  lines find_index ","secrets_file read  lines find_index ","yaml (send\n  (send\n    (lvar :yaml) :lines) :find_index) + s ","@app_tree read  lines ","secrets_file read  lines ","secrets [] []  include? ","secrets [] [] s [] [] ","SafeYAML  load  [] [] ","secrets [] [] s [] ","SafeYAML  load  [] ","secrets [] [] s_file read ","SafeYAML  load _file read ","@app_tree file_path  read ","secrets [] [] s_file exists? ","SafeYAML  load _file exists? ","@app_tree file_path  exists? "]}," CheckNumberToCurrency initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CheckMassAssignment initialize":{"type":"method","name":"initialize","children":[],"call":[]}," AliasProcessor array_detect_all_literals?":{"type":"method","name":"array_detect_all_literals?","children":[],"call":[" node_type? ","e is_a? ","exp target all? ","exp target ","exp first_arg nil? ","exp first_arg ","exp target length > ","exp target length ","(sym :detect) include? ","exp method "," call? "," dir_glob? "," all_literals? "]}," CheckStripTags cve_2015_7579":{"type":"method","name":"cve_2015_7579","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] "," uses_strip_tags? "," tracker config gem_version == "," tracker config gem_version "," tracker config "," tracker "," msg "," msg_version "]}," CheckSanitizeMethods warn_sanitizer_cve":{"type":"method","name":"warn_sanitizer_cve","children":[],"call":[" warn "," gemfile_or_environment ","cve tr to_sym ","cve tr ","CONFIDENCE  [] "," tracker find_call any? "," tracker find_call "," tracker "," tracker config gem_version "," tracker config "," msg "," msg_version "," msg_cve "]}," CheckRouteDoS controller_wildcards?":{"type":"method","name":"controller_wildcards?","children":[],"call":["actions value include? ","actions value "," string? ","name == "," tracker routes each "," tracker routes "," tracker "]}," CheckRouteDoS run_check":{"type":"method","name":"run_check","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] "," rails_version "," controller_wildcards? "," version_between? "," msg "," msg_version "," msg_cve "," msg_code "]}," CheckRender check_for_rce":{"type":"method","name":"check_for_rce","children":[],"call":[" warn ","CONFIDENCE  [] "," rails_version "," add_result "," params? "," duplicate? ! "," duplicate? "," sexp? ","result [] [] ","result [] "," version_between? "," safe_param? "," msg "," msg_cve "," msg_version "," msg_code "]}," CheckNestedAttributesBypass workaround?":{"type":"method","name":"workaround?","children":[],"call":[" tracker check_initializers any? "," tracker check_initializers "," tracker "," tracker find_call any? "," tracker find_call "]}," CheckNestedAttributesBypass reject_if?":{"type":"method","name":"reject_if?","children":[],"call":[" hash_access "," hash? "]}," CheckNestedAttributesBypass allow_destroy?":{"type":"method","name":"allow_destroy?","children":[],"call":[" false? "," hash_access "," hash? "]}," CheckNestedAttributesBypass warn_about_nested_attributes":{"type":"method","name":"warn_about_nested_attributes","children":[],"call":[" warn ","CONFIDENCE  [] ","args line ","model file "," rails_version "," msg "," msg_cve "," msg_code "," msg_version "]}," CheckNestedAttributesBypass check_nested_attributes":{"type":"method","name":"check_nested_attributes","children":[],"call":[" warn_about_nested_attributes "," reject_if? ","args any? "," allow_destroy? ","opts each ","model options [] ","model options "," active_record_models each "," active_record_models ","model options []  each "]}," CheckNestedAttributesBypass run_check":{"type":"method","name":"run_check","children":[],"call":[" check_nested_attributes "," workaround? "," version_between? "]}," CheckMimeTypeDoS has_workaround?":{"type":"method","name":"has_workaround?","children":[],"call":["arg value == ","arg value "," symbol? ","match call first_arg ","match call "," tracker check_initializers any? "," tracker check_initializers "," tracker ","match [] first_arg ","match [] "," tracker find_call any? "," tracker find_call ","match call first_arg  value == ","match [] first_arg  value == ","match call first_arg  value ","match [] first_arg  value ","match call first_match call first_arg  ","match call first_match [] first_arg  ","match [] first_match call first_arg  ","match [] first_match [] first_arg  "]}," CheckMimeTypeDoS run_check":{"type":"method","name":"run_check","children":[],"call":[" warn "," gemfile_or_environment ","CONFIDENCE  [] "," rails_version "," has_workaround? "," version_between? "," msg "," msg_version "," msg_cve "]}," CheckDynamicFinders potentially_dangerous?":{"type":"method","name":"potentially_dangerous?","children":[],"call":["method_name match "]}," CheckDynamicFinders safe_call?":{"type":"method","name":"safe_call?","children":[],"call":["meth == ","arg method "," call? ","arg method  == ","arg arg method od "]}," CheckDynamicFinders process_result":{"type":"method","name":"process_result","children":[],"call":[" warn ","CONFIDENCE  [] "," safe_call? ! "," safe_call? "," params? ","call each_arg "," potentially_dangerous? ","call method ","result [] "," add_result ","result [] original_line "," duplicate? "," original? "," safe_result [] ? ! "," safe_result [] ? ","result []  each_arg ","result []  method "]}," CheckDynamicFinders run_check":{"type":"method","name":"run_check","children":[],"call":[" process_result "," tracker find_call each "," tracker find_call "," tracker "," version_between? "," tracker config has_gem? "," tracker config "]}," CheckBasicAuthTimingAttack check_basic_auth_call":{"type":"method","name":"check_basic_auth_call","children":[],"call":[" warn ","CONFIDENCE  [] "," rails_version "," tracker find_call each "," tracker find_call "," tracker "," msg "," msg_version "]}," CheckBasicAuthTimingAttack check_basic_auth_filter":{"type":"method","name":"check_basic_auth_filter","children":[],"call":[" warn ","controller file ","CONFIDENCE  [] "," rails_version ","controller options [] each ","controller options [] ","controller options ","Hash  [] each ","Hash  [] ","c options [] ","c options "," tracker controllers select "," tracker controllers "," tracker "]}," CheckBasicAuthTimingAttack run_check":{"type":"method","name":"run_check","children":[],"call":[" check_basic_auth_call "," check_basic_auth_filter "," version_between? "]}," BaseCheck always_safe_method?":{"type":"method","name":"always_safe_method?","children":[],"call":["@comparison_ops include? ","@safe_input_attributes include? "]}," Brakeman AppTree regex_for_paths":{"type":"method","name":"regex_for_paths","children":[],"call":[]}," Tracker each_class":{"type":"method","name":"each_class","children":[],"call":["collection src each ","collection src ","set each ","classes each ","classes << "," libs ","@options [] "," models "," controllers "]}," BasicProcessor process_safe_attrasgn":{"type":"method","name":"process_safe_attrasgn","children":[],"call":[" process_default "," process_attrasgn "," respond_to? "]}," BasicProcessor process_safe_call":{"type":"method","name":"process_safe_call","children":[],"call":[" process_default "," process_call "," respond_to? "]}," BaseProcessor process_safe_call":{"type":"method","name":"process_safe_call","children":[],"call":[" process_default "," process_call "," respond_to? "]}," Checks run_a_check":{"type":"method","name":"run_a_check","children":[],"call":[]}," Checks filter_checks":{"type":"method","name":"filter_checks","children":[],"call":[]}," Checks actually_run_checks":{"type":"method","name":"actually_run_checks","children":[],"call":[]}," CheckRender safe_param?":{"type":"method","name":"safe_param?","children":[],"call":["(sym :controller) include? ","arg value "," symbol? ","exp first_arg ","exp method == ","exp method "," call? "," params? "," boolean_method? ","method_name == ","exp first_arg  value ","exp first_exp first_arg  ","exp method  == "]}," Sexp condition=":{"type":"method","name":"condition=","children":[],"call":[" []= "," expect "]}," Util constant?":{"type":"method","name":"constant?","children":[],"call":[" node_type? "]}," Tracker constant_lookup":{"type":"method","name":"constant_lookup","children":[],"call":["@constants get_literal ","@options [] ","@constants get_simple_value "]}," Tracker add_constant":{"type":"method","name":"add_constant","children":[],"call":["@constants add ","@options [] "]}," Brakeman Constants get_constant_name":{"type":"method","name":"get_constant_name","children":[],"call":[]}," Brakeman Constants constant_as_array":{"type":"method","name":"constant_as_array","children":[],"call":[]}," Brakeman Constants each":{"type":"method","name":"each","children":[],"call":["@constants each ","values each "]}," Brakeman Constants get_literal":{"type":"method","name":"get_literal","children":[],"call":["(sym :lit) include? ","x node_type "," [] "," literal? "," []  node_type "]}," Brakeman Constants add":{"type":"method","name":"add","children":[],"call":["@constants << ","Constant  new ","existing add_value "," find_constant ","@constants [] << ","@constants [] ","Constants  get_constant_base_name ","value target ","value method == ","value method "," call? "," find_constant  add_value ","existing add_value target  ","Constants  get_constant_Constants  get_constant_base_name  ","value target  target ","value target  method == ","value target  method "]}," Brakeman Constants find_constant":{"type":"method","name":"find_constant","children":[],"call":["c match? ","@constants find ","Constants  constant_as_array ","@constants [] find ","@constants [] ","n is_a? "," constant? ","name_array all? ","@constants key? ","Constants  get_constant_base_name ","Constants  constant_as_array _array all? ","Constants  constant_as_array  all? ","Constants  get_constant_base_Constants  constant_as_array  ","Constants  get_constant_Constants  get_constant_base_name  "]}," Brakeman Constants []":{"type":"method","name":"[]","children":[],"call":["match value "," find_constant "," constant? "," find_constant  value "]}," Brakeman Constants initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","Hash  new "]}," Brakeman Constant add_value":{"type":"method","name":"add_value","children":[],"call":["@values << ","@values include? "]}," Brakeman Constant value":{"type":"method","name":"value","children":[],"call":["Sexp  new ","@values reverse reduce ","@values reverse "]}," Brakeman Constant match?":{"type":"method","name":"match?","children":[],"call":["a [] == ","a [] ","@name reverse zip reduce ","@name reverse zip ","name reverse ","@name reverse ","@name_array reverse zip reduce ","@name_array reverse zip ","@name_array reverse ","name == ","name class == ","name class ","name value == ","name value ","name is_a? ","name node_type == ","name node_type "]}," Brakeman Constant set_name":{"type":"method","name":"set_name","children":[],"call":["Constants  constant_as_array "]}," Brakeman Constant line":{"type":"method","name":"line","children":[],"call":["@values first line ","@values first ","@values first is_a? ","@value line ","@value is_a? "]}," Brakeman Constant initialize":{"type":"method","name":"initialize","children":[],"call":["@context [] "," set_name ","@context []= ","@context [] name ","@context [] is_a? "]}," BasicProcessor process_if":{"type":"method","name":"process_if","children":[],"call":[" process ","(send\n  (lvar :exp) :then_clause) compact map ","(send\n  (lvar :exp) :then_clause) compact ","exp else_clause ","exp then_clause "," false? "," true? ","exp condition ","exp exp condition  "]}," BaseProcessor process_cdecl":{"type":"method","name":"process_cdecl","children":[],"call":["@tracker add_constant ","exp rhs ","exp lhs ","@current_module file ","@current_module is_a? ","@current_class file ","@current_class is_a? "," current_file_name "," current_file "]}," BaseProcessor process_file":{"type":"method","name":"process_file","children":[],"call":[" process "]}," CheckSecrets looks_like_secret?":{"type":"method","name":"looks_like_secret?","children":[],"call":["name match "]}," CheckSecrets check_constants":{"type":"method","name":"check_constants","children":[],"call":[" warn ","constant line ","constant file ","CONFIDENCE  [] ","@warned << ","@warned include? ","value line "," looks_like_secret? ","value value empty? ! ","value value empty? ","value value "," string? ","constant value ","constant name last ","constant name ","@tracker constants each ","@tracker constants ","Set  new ","constant name_array last ","constant name_array "," msg "," msg_code ","Set  new  << ","Set  new  include? ","constant value  line ","constant value  constant value  empty? ! ","constant value  constant value  empty? ","constant value  constant value  ","constant constant value  ","constant constant name last  last ","constant constant name_array last  last ","constant constant name last  ","constant constant name_array last  ","constant constant name last _array last ","constant constant name_array last _array last ","constant constant name last _array ","constant constant name_array last _array "]}," CheckSecrets run_check":{"type":"method","name":"run_check","children":[],"call":[" check_constants "]}," CheckRedirect slice_call?":{"type":"method","name":"slice_call?","children":[],"call":["exp method == ","exp method "," call? "]}," TemplateProcessor normalize_output":{"type":"method","name":"normalize_output","children":[],"call":["branches first ","Sexp  new ","branches length == ","branches length "," s ","branches empty? ","(send\n  (lvar :arg) :then_clause) compact ","arg else_clause ","arg then_clause "," node_type? ","arg target ","(sym :to_s) include? ","arg method "," call? ","Sexp  new line ","arg line "," s line ","(send\n  (lvar :arg) :then_clause) compact  first ","(send\n  (lvar :arg) :then_clause) compact  length == ","(send\n  (lvar :arg) :then_clause) compact  length ","(send\n  (lvar :arg) :then_clause) compact  empty? "]}," ErubisTemplateProcessor safe_append_method?":{"type":"method","name":"safe_append_method?","children":[],"call":["method == "]}," ErubisTemplateProcessor append_method?":{"type":"method","name":"append_method?","children":[],"call":[" safe_append_method? ","method == "]}," Rails3Erubis flush_newline_if_pending":{"type":"method","name":"flush_newline_if_pending","children":[],"call":["src << ","\n * ","@newline_pending > "]}," Rails3Erubis add_expr":{"type":"method","name":"add_expr","children":[],"call":[" add_expr_escaped "]}," CheckValidationRegex secure_regex?":{"type":"method","name":"secure_regex?","children":[],"call":["regex_pattern =~ ","regex source ","Regexp EXTENDED  == ","regex options & ","regex options "]}," Brakeman Constants get_constant_base_name":{"type":"method","name":"get_constant_base_name","children":[],"call":[]}," Brakeman Constants literal?":{"type":"method","name":"literal?","children":[],"call":["LITERALS  include? ","exp node_type ","exp is_a? "]}," Brakeman Constants size":{"type":"method","name":"size","children":[],"call":["@constants length "]}," TemplateProcessor add_output":{"type":"method","name":"add_output","children":[],"call":["@current_template add_output ","s line ","output line ","Sexp  new ","Sexp  new line "," add_output ","output rhs ","output lhs "," node_type? ","Sexp  new  line ","output rhSexp  new  ","output lhSexp  new  "]}," TemplateProcessor add_escaped_output":{"type":"method","name":"add_escaped_output","children":[],"call":[" add_output "]}," ModuleHelper process_defn":{"type":"method","name":"process_defn","children":[],"call":["@current_module add_method ","@current_class add_method ","res line ","exp line ","Sexp  new "," process_all! ","exp body ","exp formal_args ","exp method_name ","Sexp  new  line ","exp method_exp method_name  "]}," ModuleHelper process_defs":{"type":"method","name":"process_defs","children":[],"call":["@current_module add_method ","@current_class add_method ","res line ","exp line ","Sexp  new "," process_all! ","exp body ","exp formal_args "," class_name ","exp [] ","@current_module name ","@current_class name "," node_type? ","exp method_name ","Sexp  new  line "," class_exp method_name  ","@current_module exp method_name  ","@current_class exp method_name  ","exp method_exp method_name  "]}," ModuleHelper handle_class":{"type":"method","name":"handle_class","children":[],"call":[" block_given? ","exp body= "," process_all! ","exp body ","collection []= ","tracker_class new ","@current_class add_file ","collection [] ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","@current_module name to_s + + ","name to_s ","@current_module name to_s + ","@current_module name to_s ","@current_module name ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","outer_class name to_s + + ","outer_class name to_s + ","outer_class name to_s ","outer_class name "," class_name ","exp parent_name ","exp class_name ","tracker_class new  add_file ","collection []  add_file ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) : class_name ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","@current_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_module  class_name  to_s + + ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s "," class_name  to_s ","@current_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_module  class_name  to_s + ","@current_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_module  class_name  to_s ","@current_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_module  class_name  ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) : class_name ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","outer_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_class  class_name  to_s + + ","outer_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_class  class_name  to_s + ","outer_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_class  class_name  to_s ","outer_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","outer_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","outer_class  class_name  "," class_(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," class_(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," class_ class_name  ","exp parent_(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp parent_(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp parent_ class_name  ","exp  class_name _name ","exp class_(send\n  (send\n    (send\n      (send\n        (ivar :@current_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp class_(send\n  (send\n    (send\n      (send\n        (lvar :outer_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp class_ class_name  "]}," ModuleHelper handle_module":{"type":"method","name":"handle_module","children":[],"call":["exp body= "," process_all! ","exp body ","@tracker libs []= ","@tracker libs ","tracker_class new ","@current_module add_file ","@tracker libs [] ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","@current_class name to_s + + ","name to_s ","@current_class name to_s + ","@current_class name to_s ","@current_class name ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ","outer_module name to_s + + ","outer_module name to_s + ","outer_module name to_s ","outer_module name "," class_name ","exp module_name ","tracker_class new  add_file ","@tracker libs []  add_file ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) : class_name ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","@current_class  class_name  to_s + + ","(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s "," class_name  to_s ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","@current_class  class_name  to_s + ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","@current_class  class_name  to_s ","@current_class (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_class (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","@current_class  class_name  ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym ) :to_s)) to_sym ","(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) : class_name ) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar : class_name ) :to_s)) to_sym ","outer_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + + ","outer_module  class_name  to_s + + ","outer_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s + ","outer_module  class_name  to_s + ","outer_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  to_s ","outer_module  class_name  to_s ","outer_module (send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","outer_module (send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","outer_module  class_name  "," class_(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," class_(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  "," class_ class_name  ","exp module_(send\n  (send\n    (send\n      (send\n        (ivar :@current_class) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp module_(send\n  (send\n    (send\n      (send\n        (lvar :outer_module) :name) :to_s) :+\n    (str \"::\")) :+\n  (send\n    (lvar :name) :to_s)) to_sym  ","exp module_ class_name  "]}," FindAllCalls add_simple_call":{"type":"method","name":"add_simple_call","children":[],"call":["@calls << "," make_location ","(pair\n  (sym :target)\n  (nil)) freeze "]}," BaseProcessor make_inline_render":{"type":"method","name":"make_inline_render","children":[],"call":[" s ","@tracker processor process_template_alias ","@tracker templates [] ","@tracker templates ","@tracker processor ","@tracker processor process_template ","ast deep_clone ","value line ","Brakeman TemplateParser  parse_inline_erb ","value value ","(ivar :@current_method) to_sym ","class_or_module name ","class_or_module nil? "," require "," s line ","ast deep_clone  deep_clone ","class_or_module name  name ","class_or_module name  nil? "]}," Brakeman TemplateParser parse_inline_erb":{"type":"method","name":"parse_inline_erb","children":[],"call":[]}," CheckLinkToHref call_on_params?":{"type":"method","name":"call_on_params?","children":[],"call":["exp method != ","exp method "," params? ","exp target "," call? "]}," BaseCheck original?":{"type":"method","name":"original?","children":[],"call":[" add_result "," duplicate? ","result [] original_line ","result [] "]}," BaseCheck boolean_method?":{"type":"method","name":"boolean_method?","children":[],"call":["method [] == ","method [] "]}," Brakeman AppTree find_helper_paths":{"type":"method","name":"find_helper_paths","children":[],"call":[" find_paths "]}," Brakeman ControllerMethods filter_includes_method?":{"type":"method","name":"filter_includes_method?","children":[],"call":["filter_rule [] include? ! ","filter_rule [] include? ","filter_rule [] ","filter_rule [] is_a? ","filter_rule [] != ","filter_rule [] == "]}," Table output_table":{"type":"method","name":"output_table","children":[],"call":["output << "," truncate_table ","result to_s "]}," Table initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Markdown output_table":{"type":"method","name":"output_table","children":[],"call":["output << ","result to_s "]}," Markdown initialize":{"type":"method","name":"initialize","children":[],"call":[]}," OutputProcessor output_format":{"type":"method","name":"output_format","children":[],"call":["exp clear ","res == "," process ","exp [] ","exp [] node_type == ","exp [] node_type "," process  == "]}," ProcessorHelper current_file_name":{"type":"method","name":"current_file_name","children":[],"call":["@current_module file ","@current_module is_a? ","@current_class file ","@current_class is_a? "]}," CheckForgerySetting cve_2011_0447":{"type":"method","name":"cve_2011_0447","children":[],"call":[" csrf_warning "," gemfile_or_environment "," rails_version "]}," CheckForgerySetting csrf_warning":{"type":"method","name":"csrf_warning","children":[],"call":[" warn ","(pair\n  (sym :controller)\n  (sym :ApplicationController)) merge "," tracker controllers [] file "," tracker controllers [] "," tracker controllers "," tracker ","CONFIDENCE  [] "]}," CheckContentTag cve_2016_6316?":{"type":"method","name":"cve_2016_6316?","children":[],"call":[" version_between? "]}," CheckContentTag check_cve_2016_6316":{"type":"method","name":"check_cve_2016_6316","children":[],"call":[" warn "," gemfile_or_environment "," rails_version "," tracker options [] "," tracker options "," tracker "," version nil? "," version "," version_between? ","CONFIDENCE  [] ","@content_tags any? "," cve_2016_6316? "," msg "," msg_version "," msg_cve "," msg_code "]}," Brakeman AppTree match_path":{"type":"method","name":"match_path","children":[],"call":["files match ","File  join ","absolute_path relative_path_from to_s ","absolute_path relative_path_from ","Pathname  new ","Pathname  new  relative_path_from to_s ","Pathname  new  relative_path_from "]}," Warning format_with_user_input":{"type":"method","name":"format_with_user_input","children":[],"call":[" format_code ","formatted gsub! ","Brakeman OutputProcessor  new format "," user_input "," code ","Brakeman OutputProcessor  new ","Brakeman OutputProcessor  new format  gsub! "]}," Tracker unused_fingerprints":{"type":"method","name":"unused_fingerprints","children":[],"call":[" ignored_filter obsolete_fingerprints "," ignored_filter "]}," Report to_plain":{"type":"method","name":"to_plain","children":[],"call":[" generate "," require_report "]}," Text render_array":{"type":"method","name":"render_array","children":[],"call":[" double_space "," label ","values map ","c << ","includes empty? ","parent empty? "]}," Text header":{"type":"method","name":"header","children":[],"call":["HighLine  new color ","HighLine  new "]}," Text label":{"type":"method","name":"label","children":[],"call":["HighLine  new color ","HighLine  new "]}," Text confidence":{"type":"method","name":"confidence","children":[],"call":["HighLine  new color ","HighLine  new "]}," Text format_code":{"type":"method","name":"format_code","children":[],"call":["w format_code ","HighLine  new color ","HighLine  new ","w format_with_user_input ","w user_input "]}," Text double_space":{"type":"method","name":"double_space","children":[],"call":[" header ","(send\n  (lvar :values) :map) join ","v join ","values map ","(send\n  (lvar :(send\n  (lvar :values) :map) join ) :map) join ","(send\n  (lvar :values) :map) join  map "]}," Text output_warning":{"type":"method","name":"output_warning","children":[],"call":["out << "," label ","w line "," warning_file "," format_code ","w code ","w message ","w warning_type to_s ","w warning_type "," confidence ","w confidence ","w check gsub ","w check ","(send\n  (lvar :text_format) :map) compact "," format_line ","text_format map "," tracker options [] "," tracker options "," tracker "]}," Text generate_templates":{"type":"method","name":"generate_templates","children":[],"call":[" double_space ","(send\n  (block\n    (send\n      (lvar :template_rows) :sort_by)\n    (args\n      (arg :name)\n      (arg :value))\n    (send\n      (lvar :name) :to_s)) :map) compact ","(send\n  (send\n    (const nil :HighLine) :new) :color\n  (send\n    (send\n      (send\n        (lvar :template) :first) :to_s) :<<\n    (str \"\\n\"))\n  (sym :cyan)) + ","template [] ","HighLine  new color ","template first to_s << ","template first to_s ","template first ","HighLine  new ","(send\n  (lvar :template_rows) :sort_by) map ","name to_s ","template_rows sort_by ","template_rows [] << ","out gsub gsub ","out gsub ","template_rows [] ","out_processor format ","template each_output "," tracker templates each "," tracker templates "," tracker ","Brakeman OutputProcessor  new ","(send\n  (send\n    (const nil :HighLine) :new) :color\n  (dstr\n    (begin\n      (send\n        (lvar :template) :first))\n    (str \"\\n\"))\n  (sym :cyan)) + ","out_processor format  gsub gsub ","out_processor format  gsub ","out_processor format _processor format ","Brakeman OutputProcessor  new  format ","template each_out_processor format put "]}," Text generate_obsolete":{"type":"method","name":"generate_obsolete","children":[],"call":["(send nil :header\n  (str \"Obsolete Ignore Entries\")) + "," tracker unused_fingerprints "," tracker "," header "," tracker unused_fingerprints empty? "]}," Text generate_errors":{"type":"method","name":"generate_errors","children":[],"call":[" double_space "," label ","e [] ","e [] [] ","e [] join "," tracker errors map "," tracker errors "," tracker "," tracker options [] "," tracker options "," tracker errors empty? "]}," Text generate_warnings":{"type":"method","name":"generate_warnings","children":[],"call":[" double_space "," output_warning ","(send\n  (send\n    (send nil :tracker) :filtered_warnings) :sort_by) map ","w fingerprint ","w warning_type ","w confidence "," tracker filtered_warnings sort_by "," tracker filtered_warnings "," tracker ","HighLine  color "," tracker filtered_warnings empty? ","w line ","w file "]}," Text generate_warning_overview":{"type":"method","name":"generate_warning_overview","children":[],"call":["(send\n  (block\n    (send\n      (lvar :warning_types) :sort_by)\n    (args\n      (arg :t)\n      (arg :c))\n    (lvar :t)) :map) unshift "," header "," label ","(send\n  (lvar :warning_types) :sort_by) map ","warning_types sort_by ","warning_types delete "," warnings_summary ","(send\n  (block\n    (send\n      (lvar : warnings_summary ) :sort_by)\n    (args\n      (arg :t)\n      (arg :c))\n    (lvar :t)) :map) unshift ","(send\n  (lvar : warnings_summary ) :sort_by) map "," warnings_summary  sort_by "," warnings_summary  delete "]}," Text generate_overview":{"type":"method","name":"generate_overview","children":[],"call":["overview << "," label "," ignored_warnings length "," ignored_warnings "," ignored_warnings empty? "," all_warnings length "," all_warnings "," tracker errors length "," tracker errors "," tracker "," number_of_templates "," tracker models length - "," tracker models length "," tracker models "," tracker controllers length "," tracker controllers "," header "]}," Text generate_header":{"type":"method","name":"generate_header","children":[],"call":[" label "," checks checks_run sort join "," checks checks_run sort "," checks checks_run "," checks "," tracker duration "," tracker "," tracker start_time "," rails_version "," tracker app_path "," header "]}," Text add_chunk":{"type":"method","name":"add_chunk","children":[],"call":["out << << ","out << ","chunk join ","chunk is_a? ","chunk empty? ! ","chunk empty? ","chunk join  join ","chunk join  is_a? ","chunk join  empty? ! ","chunk join  empty? "]}," Text generate_report":{"type":"method","name":"generate_report","children":[],"call":[" add_chunk "," generate_warnings "," generate_errors "," generate_obsolete "," generate_templates "," tracker options [] "," tracker options "," tracker "," generate_controllers "," generate_warning_overview "," generate_overview "," generate_header ","HighLine  use_color= "," tracker options [] ! ! "," tracker options [] ! ","summary_option == "," tracker options []  == "]}," Base generate_obsolete":{"type":"method","name":"generate_obsolete","children":[],"call":[" render_array "," tracker "," tracker unused_fingerprints collect "," tracker unused_fingerprints "]}," Brakeman InteractiveIgnorer prune_obsolete":{"type":"method","name":"prune_obsolete","children":[],"call":[" say ","obsolete length > ","obsolete length ","@ignore_config prune_obsolete ","@ignore_config obsolete_fingerprints ","@ignore_config filter_ignored ","@ignore_config obsolete_fingerprints  length > ","@ignore_config obsolete_fingerprints  length ","@ignore_config prune_@ignore_config obsolete_fingerprints  ","@ignore_config @ignore_config obsolete_fingerprints _fingerprints "]}," Brakeman InteractiveIgnorer penultimate_menu":{"type":"method","name":"penultimate_menu","children":[],"call":["@ignore_config prune_obsolete "," yes_or_no "," say ","obsolete each ","obsolete length ","obsolete length > ","obsolete any? ","@ignore_config obsolete_fingerprints ","@ignore_config prune_@ignore_config obsolete_fingerprints  ","@ignore_config obsolete_fingerprints  each ","@ignore_config obsolete_fingerprints  length ","@ignore_config obsolete_fingerprints  length > ","@ignore_config obsolete_fingerprints  any? ","@ignore_config @ignore_config obsolete_fingerprints _fingerprints "]}," Brakeman IgnoreConfig prune_obsolete":{"type":"method","name":"prune_obsolete","children":[],"call":["obsolete include? ","w [] ","@already_ignored reject! "," obsolete_fingerprints to_set "," obsolete_fingerprints "," obsolete_fingerprints to_set  include? ","  obsolete_fingerprints to_set _fingerprints to_set ","  obsolete_fingerprints to_set _fingerprints "]}," Brakeman IgnoreConfig obsolete_fingerprints":{"type":"method","name":"obsolete_fingerprints","children":[],"call":["(send\n  (ivar :@ignored_fingerprints) :-\n  (ivar :@used_fingerprints)) to_a ","@ignored_fingerprints - "]}," SlimTemplateProcessor internal_variable?":{"type":"method","name":"internal_variable?","children":[],"call":["exp value =~ ","exp value "," node_type? "]}," SlimTemplateProcessor add_escaped_output":{"type":"method","name":"add_escaped_output","children":[],"call":[" internal_variable? "," string? "," normalize_output "]}," Brakeman Config set_ruby_version":{"type":"method","name":"set_ruby_version","children":[],"call":[" ruby_version= ","version =~ ","version is_a? "," extract_version "," add_gem "]}," Brakeman InteractiveIgnorer show_help":{"type":"method","name":"show_help","children":[],"call":[" say "]}," Brakeman InteractiveIgnorer pre_show_help":{"type":"method","name":"pre_show_help","children":[],"call":[" show_help "," say ","- * "]}," CheckLinkToHref ignore_interpolation?":{"type":"method","name":"ignore_interpolation?","children":[],"call":["suspect == ","first_interp [] deep_each ","first_interp [] ","arg find_nodes first ","arg find_nodes ","arg [] chomp empty? ","arg [] chomp ","arg [] "," string_interp? ","arg find_nodes first  [] deep_each ","arg find_nodes first  [] "]}," CheckForgerySetting check_cve_2011_0447":{"type":"method","name":"check_cve_2011_0447","children":[],"call":[" csrf_warning "," gemfile_or_environment "," rails_version "," version_between? "," msg "," msg_version "," msg_cve "]}," Brakeman AppTree root_search_pattern":{"type":"method","name":"root_search_pattern","children":[],"call":["(send\n  (lvar :rel) :+\n  (array\n    (str \"\"))) join ","rel + ","(send\n  (array\n    (ivar :@root)) :+\n  (lvar :abs)) join ","(ivar :@root) + ","path gsub ","@relative_engine_paths to_a map ","@relative_engine_paths to_a ","@absolute_engine_paths to_a map ","@absolute_engine_paths to_a "]}," Brakeman AppTree glob_files":{"type":"method","name":"glob_files","children":[],"call":["Dir  glob "," root_search_pattern "]}," Brakeman check_for_missing_checks":{"type":"method","name":"check_for_missing_checks","children":[],"call":[]}," Brakeman ensure_latest":{"type":"method","name":"ensure_latest","children":[],"call":[]}," Tracker find_class":{"type":"method","name":"find_class","children":[],"call":["collection [] ","(ivar :@controllers) each ","collection [] ollecollection [] tion [] ","(ivar :@collection [] ontrollers) eacollection [] h "]}," LibraryProcessor process_iter":{"type":"method","name":"process_iter","children":[],"call":["(or\n  (ivar :@current_module)\n  (ivar :@current_class)) options []= ","res block ","(or\n  (ivar :@current_module)\n  (ivar :@current_class)) options ","exp block_call method == ","exp block_call method ","exp block_call "," call? "," node_type? "," process_default "," process_default  block "]}," ControllerProcessor process_concern":{"type":"method","name":"process_concern","children":[],"call":[" process ","mod options [] deep_clone ","mod options [] ","mod options ","@tracker find_class ","@concerns << ","@concerns include? ! ","@concerns include? ","@tracker find_class  options [] deep_clone ","@tracker find_class  options [] ","@tracker find_class  options "]}," Checks missing_checks":{"type":"method","name":"missing_checks","children":[],"call":[]}," Brakeman AppTree prioritize_concerns":{"type":"method","name":"prioritize_concerns","children":[],"call":["(send\n  (lvar :paths) :partition) flatten ","path include? ","paths partition ","path relative include? ","path relative "]}," AliasProcessor raise?":{"type":"method","name":"raise?","children":[],"call":["exp method == ","exp method "," call? "]}," AliasProcessor value_from_case":{"type":"method","name":"value_from_case","children":[],"call":["c combine "," raise? "," value_from_if "," node_type? ","c nil? ","result reduce ","result << ","exp last ","e last ","exp each "]}," AliasProcessor process_case":{"type":"method","name":"process_case","children":[],"call":[" merge_if_branch ","branch_scopes each ","branch_scopes << "," env current "," env "," process_default ","exp [] "," scope "," sexp? ","exp last ","@branch_env []= ","e [] [] ","e [] "," simple_when? "," node_type? ","exp each_sexp ","exp [] deep_clone ","exp []= "," process ","@tracker options [] ","@tracker options ","@ignore_ifs nil? "," safe_literal ","e line + ","e line "," all_literals_when? "," env current  []= "]}," AliasProcessor simple_when?":{"type":"method","name":"simple_when?","children":[],"call":[" node_type? ","e is_a? ","exp [] all? ","exp [] ","exp [] length == ","exp [] length "," node_type? ! ","exp [] [] "]}," Rails3Erubis convert_input":{"type":"method","name":"convert_input","children":[],"call":["input gsub ","input gsub  gsub "]}," CheckSQL check_exists":{"type":"method","name":"check_exists","children":[],"call":[" check_find_arguments ","arg method == ","arg method "," call? "]}," Brakeman Constants find_all":{"type":"method","name":"find_all","children":[],"call":["@constants [] ","Constants  get_constant_base_name ","Constants  get_constant_Constants  get_constant_base_name  "]}," AliasProcessor process_bracket_call":{"type":"method","name":"process_bracket_call","children":[],"call":["exp target= "," process_default ","exp target ","v deep_clone ","exp line "," process_array_access ","exp args "," array? ","COOKIES_SEXP  deep_clone ","exp target line ","SESSION_SEXP  deep_clone ","PARAMS_SEXP  deep_clone ","t node_type "," hash_access ","exp first_arg "," hash? ","r != "," replace ","e target= ","exp deep_clone ","t != "," process ","exp target deep_clone ","exp arglist= ","exp arglist "," process_hash_access ","exp ta replace get= ","exp deep_clone xp targexp deep_clone t= ","exp  process arge process = "," p replace ocess_default "," procexp deep_clone ss_dexp deep_clone fault "," process_defaul process  ","exp ta replace get ","exp deep_clone xp targexp deep_clone t ","exp  process arge process  "," process_array_access  deep_clone "," hash_access  deep_clone "," process_hash_access  deep_clone ","v dexp deep_clone exp deep_clone p_clonexp deep_clone  ","exp deep_clone xp linexp deep_clone  "," p replace ocess_a replace  replace ay_access "," procexp deep_clone ss_array_accexp deep_clone ss ","exp a replace gs ","exp deep_clone xp args "," a replace  replace ay? ","COOKIES_SEXP  dexp deep_clone exp deep_clone p_clonexp deep_clone  ","exp ta replace get line ","exp deep_clone xp targexp deep_clone t linexp deep_clone  ","exp  process arge process  line ","SESSION_SEXP  dexp deep_clone exp deep_clone p_clonexp deep_clone  ","PARAMS_SEXP  dexp deep_clone exp deep_clone p_clonexp deep_clone  ","t nodexp deep_clone _typexp deep_clone  "," process  node_ process ype "," hash_accexp deep_clone ss ","exp fi replace st_a replace g ","exp deep_clone xp first_arg ","exp firs process _arg "," replace  != ","  replace eplace "," rexp deep_clone placexp deep_clone  ","e ta replace get= ","exp deep_clone  targexp deep_clone t= ","e  process arge process = ","exp deep_clone xp dexp deep_clone exp deep_clone p_clonexp deep_clone  "," process  != "," p replace ocess "," procexp deep_clone ss ","exp ta replace get deep_clone ","exp deep_clone xp targexp deep_clone t dexp deep_clone exp deep_clone p_clonexp deep_clone  ","exp  process arge process  deep_clone ","exp a replace glist= ","exp deep_clone xp arglist= ","exp arglis process = ","exp a replace glist ","exp deep_clone xp arglist ","exp arglis process  "," p replace ocess_hash_access "," procexp deep_clone ss_hash_accexp deep_clone ss "]}," CheckRedirect has_only_path?":{"type":"method","name":"has_only_path?","children":[],"call":[" true? "," hash_access "]}," CheckRedirect call_has_param":{"type":"method","name":"call_has_param","children":[],"call":["method == "," node_type? ","target target ","target method ","arg target "," call? ","target method  == ","arg target  arg target  ","target target method  ","arg target  method ","arg arg target  "]}," CheckRedirect use_unsafe_hash_method?":{"type":"method","name":"use_unsafe_hash_method?","children":[],"call":[" call_has_param "]}," Brakeman quiet=":{"type":"method","name":"quiet=","children":[],"call":[]}," Brakeman debug=":{"type":"method","name":"debug=","children":[],"call":[]}," AliasProcessor early_return?":{"type":"method","name":"early_return?","children":[],"call":[" node_type? ","exp last ","(sym :fail) include? ","exp method "," call? "]}," Options create_option_parser":{"type":"method","name":"create_option_parser","children":[],"call":["options []= ","opts on_tail ","opts on ","opts separator ","File  expand_path ","3 - ","level to_i ","separate ! ","options [] push ","options [] ","width to_i ","limit to_i ","(send\n  (str \"to_\") :<<\n  (send\n    (lvar :type) :to_s)) to_sym ","to_ << ","type to_s ","type == ","options [] merge ","paths map ","Set  new ","options [] << ","Check << ","s [] != ","s [] ","skip each ","checks []= ","checks each_with_index ","e to_sym ","methods map ","option ! ","opts banner= ","OptionParser  new "," raise ","invalid_options inspect ","invalid_options empty? ","options [] - ","options [] == ","format map ","check start_with? ","checks map! ","optionCheck <<  []= ","optCheck <<  on_tail ","optCheck <<  on ","optCheck <<  Check << eparator ","Check << eparate ! ","optionCheck <<  [] puCheck << h ","optionCheck <<  [] ","(Check << end\n  (Check << tr \"to_\") :<<\n  (Check << end\n    (lvar :type) :to_Check << )) to_Check << ym ","type to_Check <<  ","optionCheck <<  [] merge ","pathCheck <<  map ","optionCheck <<  [] << ","Check <<  [] != ","Check <<  [] ","Check << kip each ","checkCheck <<  []= ","checkCheck <<  each_with_index ","e to_Check << ym ","methodCheck <<  map ","optCheck <<  banner= ","OptionParCheck << er  new "," raiCheck << e ","invalid_optionCheck <<  inCheck << pect ","invalid_optionCheck <<  empty? ","optionCheck <<  [] - ","optionCheck <<  [] == ","check Check << tart_with? ","checkCheck <<  map! "]}," Brakeman Commandline set_options":{"type":"method","name":"set_options","children":[],"call":["options []= ","options [] nil? ","options [] "]}," Brakeman Commandline set_interrupt_handler":{"type":"method","name":"set_interrupt_handler","children":[],"call":[" exit! "," warn "," caller ","options [] "," trap "]}," Brakeman Commandline run_report":{"type":"method","name":"run_report","children":[],"call":[" quit ","e message "," regular_report "," compare_results ","options [] "]}," Brakeman Commandline run_brakeman":{"type":"method","name":"run_brakeman","children":[],"call":["Brakeman  run ","options merge ","options [] "]}," Brakeman Commandline regular_report":{"type":"method","name":"regular_report","children":[],"call":[" quit ","tracker errors any? ","tracker errors ","options [] ","tracker filtered_warnings empty? ! ","tracker filtered_warnings empty? ","tracker filtered_warnings "," run_brakeman ","tracker options [] ","tracker options "," warn ","fingerprints each ","fingerprints empty? ","Brakeman  ignore_file_entries_with_empty_notes ","tracker ignored_filter "," run_brakeman  errors any? "," run_brakeman  errors "," run_brakeman  filtered_warnings empty? ! "," run_brakeman  filtered_warnings empty? "," run_brakeman  filtered_warnings "," run_brakeman  options [] "," run_brakeman  options ","Brakeman  ignore_file_entries_with_empty_notes  each ","Brakeman  ignore_file_entries_with_empty_notes  empty? "," run_brakeman  ignored_filter "]}," Brakeman Commandline quit":{"type":"method","name":"quit","children":[],"call":[" exit "," warn "]}," Brakeman Commandline parse_options":{"type":"method","name":"parse_options","children":[],"call":["argv [] "," quit ","$stderr puts ","e message ","Brakeman Options  parse! ","options []= "," warn ","options [] "]}," Brakeman Commandline early_exit_options":{"type":"method","name":"early_exit_options","children":[],"call":[" quit "," puts "," require ","options [] ","Brakeman Options  create_option_parser ","Brakeman  dump_config ","Brakeman  list_checks "]}," Brakeman Commandline compare_results":{"type":"method","name":"compare_results","children":[],"call":[" quit ","vulns [] count > ","vulns [] count ","vulns [] ","options [] "," puts ","JSON  pretty_generate ","Brakeman  notify ","f puts ","File  open ","Brakeman  compare ","options merge "," require ","Brakeman  compare  [] count > ","Brakeman  compare  [] count ","Brakeman  compare  [] "]}," Brakeman Commandline check_latest":{"type":"method","name":"check_latest","children":[],"call":[" quit ","Brakeman  ensure_latest "]}," Brakeman Commandline run":{"type":"method","name":"run","children":[],"call":[" run_report "," check_latest ","options [] "," set_options "," early_exit_options "," set_interrupt_handler "]}," Brakeman Commandline start":{"type":"method","name":"start","children":[],"call":[" run "," parse_options "]}," Brakeman page_output":{"type":"method","name":"page_output","children":[],"call":[]}," Warning confidence=":{"type":"method","name":"confidence=","children":[],"call":[" raise ","TEXT_CONFIDENCE  [] ","CONFIDENCE  [] "]}," Report to_text":{"type":"method","name":"to_text","children":[],"call":[" generate "," require_report "]}," Report to_table":{"type":"method","name":"to_table","children":[],"call":[" generate "," require_report "]}," CheckLinkToHref ignore_model_call?":{"type":"method","name":"ignore_model_call?","children":[],"call":[" ignore_interpolation? ","IGNORE_MODEL_METHODS  include? "," ignore_call? ","method to_s =~ ","method to_s "," model_find_call? ","exp method ","exp target "," call? ","exp method  to_s =~ ","exp method  to_s ","exp exp method  ","exp exp target  "]}," CheckLinkToHref check_argument?":{"type":"method","name":"check_argument?","children":[],"call":[" cgi_escaped? ","method == ","url_arg method ","url_arg target "," call? ","CHECK_INSIDE_METHODS  include? ","url_arg method  == ","url_arg url_arg method  ","url_arg url_arg target  "]}," Sexp call_chain":{"type":"method","name":"call_chain","children":[],"call":["chain reverse! ","call target ","chain << ","call method ","CALLS  include? ","call first ","call class == ","call class "," expect ","call target  target ","call target  method ","call target  first ","call target  class == ","call target  class "]}," Brakeman Config version_between?":{"type":"method","name":"version_between?","children":[],"call":["v < ","high_version fetch ","v > ","version each_with_index ","low_version fetch ","high_version split map! ","high_version split ","low_version split map! ","low_version split ","current_version split map! ","current_version split "," rails_version ","current between? ","Gem Version  new "," lower? "," higher? "," convert_version_number ","high_version split map!  fetch ","high_current_version split map!  fetch ","Gem Version  new _version fetch ","current_version split map!  each_with_index ","low_version split map!  fetch ","low_current_version split map!  fetch ","high_version split map!  split map! ","high_current_version split map!  split map! ","Gem Version  new _version split map! ","high_version split map!  split ","high_current_version split map!  split ","Gem Version  new _version split ","low_version split map!  split map! ","low_current_version split map!  split map! ","low_version split map!  split ","low_current_version split map!  split ","current_current_version split map!  split map! ","current_current_version split map!  split "," rails_current_version split map!  ","Gem Version  new  between? "," Gem Version  new er? "," convert_current_version split map! _number "]}," Brakeman Config default_protect_from_forgery?":{"type":"method","name":"default_protect_from_forgery?","children":[],"call":["@rails [] [] == ","Sexp  new ","@rails [] [] ","@rails [] "," version_between? ","@rails dig == ","@rails dig "]}," CodeClimate file_path":{"type":"method","name":"file_path","children":[],"call":["fp to_s ","Pathname  new + ","Pathname  new "," tracker options [] "," tracker options "," tracker ","warning relative_path ","warning file ","(send\n  (send\n    (const nil :Pathname) :new\n    (send\n      (send\n        (send nil :tracker) :options) :[]\n      (sym :path_prefix))) :+\n  (send\n    (const nil :Pathname) :new\n    (send\n      (send\n        (lvar :warning) :file) :relative))) to_s ","warning file relative ","Pathname  new +  to_s ","Pathname  new  to_s "]}," Brakeman Pager set_color":{"type":"method","name":"set_color","children":[],"call":["@tracker options []= ","@tracker options "," less_options include? "," less_options ","@tracker options [] == ","@tracker options [] "]}," Brakeman Pager less_options":{"type":"method","name":"less_options","children":[],"call":["@less_options << ","less_help include? ","(str \"-R \") each "," system "]}," Brakeman Pager less_available?":{"type":"method","name":"less_available?","children":[],"call":[" system ","@less_available nil? "," system  nil? "]}," Brakeman Pager in_ci?":{"type":"method","name":"in_ci?","children":[],"call":["ci downcase == ","ci downcase ","ci is_a? ","ENV  [] ","ENV  []  downcase == ","ENV  []  downcase ","ENV  []  is_a? "]}," Brakeman Pager page_via_less":{"type":"method","name":"page_via_less","children":[],"call":[" no_pager "," warn ","Process  waitpid2 ","write_io close ","write_io write ","write_io pid "," open "," less_options join "," less_options ","Process  waitwrite_io pid 2 "," open  close "," open  write ","write_io write_io pid  "," open  pid "]}," Brakeman Pager page_via_highline":{"type":"method","name":"page_via_highline","children":[],"call":["h say ","h page_at= "," HighLine  new ","Brakeman  load_brakeman_dependency "," HighLine  new  say "," HighLine  new  page_at= "," Hig HighLine  new Line  new "]}," Brakeman Pager no_pager":{"type":"method","name":"no_pager","children":[],"call":["@output puts "]}," Brakeman Pager page_output":{"type":"method","name":"page_output","children":[],"call":[" no_pager "," page_via_highline "," page_via_less "," less_available? "]}," Brakeman Pager page_report":{"type":"method","name":"page_report","children":[],"call":[" page_output "," no_pager "," in_ci? ","report format "," set_color ","@pager == "]}," Brakeman Pager initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Brakeman Codeclimate EngineConfiguration stripped_include_path":{"type":"method","name":"stripped_include_path","children":[],"call":["path =~ ","subprefixes any? ","path sub ","path start_with? "]}," Brakeman Codeclimate EngineConfiguration path_subprefixes":{"type":"method","name":"path_subprefixes","children":[],"call":["memo << ","File  join ","memo last ","memo any? ","Pathname  new each_filename inject ","Pathname  new each_filename ","Pathname  new "]}," Brakeman Codeclimate EngineConfiguration stripped_include_paths":{"type":"method","name":"stripped_include_paths","children":[],"call":["(send\n  (send\n    (send nil :engine_config) :[]\n    (str \"include_paths\")) :map) compact "," stripped_include_path "," engine_config [] map "," engine_config [] "," engine_config "," path_subprefixes "," path_ path_subprefixes  "]}," Brakeman Codeclimate EngineConfiguration active_include_paths":{"type":"method","name":"active_include_paths","children":[],"call":[" engine_config [] compact "," engine_config [] "," engine_config "," stripped_include_paths "," brakeman_configuration [] "," brakeman_configuration "]}," Brakeman Codeclimate EngineConfiguration brakeman_configuration":{"type":"method","name":"brakeman_configuration","children":[],"call":[" engine_config [] "," engine_config "]}," Brakeman Codeclimate EngineConfiguration configured_options":{"type":"method","name":"configured_options","children":[],"call":["@configured_options []= ","path to_s ","Pathname  new + "," brakeman_configuration [] "," brakeman_configuration ","Pathname  new ","Dir  pwd "," active_include_paths "," brakeman_configuration [] to_s downcase == "," brakeman_configuration [] to_s downcase "," brakeman_configuration [] to_s ","Pathname  new +  to_s "," active_include_Pathname  new + s "]}," Brakeman Codeclimate EngineConfiguration default_options":{"type":"method","name":"default_options","children":[],"call":["@default_options []= "," system ","Dir  pwd "]}," Brakeman Codeclimate EngineConfiguration options":{"type":"method","name":"options","children":[],"call":[" default_options merge "," configured_options "," default_options "]}," Brakeman Codeclimate EngineConfiguration initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CheckRedirect safe_permit?":{"type":"method","name":"safe_permit?","children":[],"call":["DANGEROUS_KEYS  include? ","opt value "," symbol? ","exp each_arg ","exp method == ","exp method "," params? ","exp target "," call? "]}," CheckPermitAttributes warn_on_permit_key":{"type":"method","name":"warn_on_permit_key","children":[],"call":[" warn ","SUSPICIOUS_KEYS  [] ","key value "]}," CheckPermitAttributes check_permit":{"type":"method","name":"check_permit","children":[],"call":[" warn_on_permit_key ","arg value match ","arg value ","SUSPICIOUS_KEYS  key? "," symbol? ","call each_arg ","result [] "," original? ","result []  each_arg "]}," CheckPermitAttributes run_check":{"type":"method","name":"run_check","children":[],"call":[" check_permit "," tracker find_call each "," tracker find_call "," tracker "]}," CheckFileAccess temp_file?":{"type":"method","name":"temp_file?","children":[],"call":["exp method == ","exp method "," params? ","exp target ","exp call_chain include? ","exp call_chain "," call? "]}," CheckDivideByZero check_division":{"type":"method","name":"check_division","children":[],"call":[" warn ","numerator value is_a? ","numerator value "," number? ","call target ","denominator value == ","denominator value ","call first_arg ","result [] "," original? ","call target  value is_a? ","call target  value ","result []  target ","call first_arg  value == ","call first_arg  value ","result []  first_arg "]}," CheckDivideByZero run_check":{"type":"method","name":"run_check","children":[],"call":[" check_division "," tracker find_call each "," tracker find_call "," tracker "]}," Brakeman ignore_file_entries_with_empty_notes":{"type":"method","name":"ignore_file_entries_with_empty_notes","children":[],"call":[]}," Warning relative_path":{"type":"method","name":"relative_path","children":[],"call":[" file relative "," file "]}," Util safe_literal_target?":{"type":"method","name":"safe_literal_target?","children":[],"call":[" safe_literal? "," safe_literal_target? ","exp target "," call? "]}," Util safe_literal?":{"type":"method","name":"safe_literal?","children":[],"call":["exp == "]}," Util safe_literal":{"type":"method","name":"safe_literal","children":[],"call":[" s line "," s "]}," Util dir_glob?":{"type":"method","name":"dir_glob?","children":[],"call":[" dir_glob? ","exp target ","exp method == ","exp method ","exp target == "," call? ","exp block_call "," node_type? ","exp block_call  target ","exp block_call  method == ","exp block_call  method ","exp block_call  target == ","exp block_call  block_call "]}," Util literal?":{"type":"method","name":"literal?","children":[],"call":["LITERALS  include? ","exp node_type ","exp is_a? "]}," Util kwsplat?":{"type":"method","name":"kwsplat?","children":[],"call":["exp [] node_type == ","exp [] node_type ","exp [] ","exp [] is_a? ","exp node_type == ","exp node_type ","exp is_a? "]}," Util remove_kwsplat":{"type":"method","name":"remove_kwsplat","children":[],"call":[" node_type? ","exp reject ","exp any? "]}," Tracker reset_initializer":{"type":"method","name":"reset_initializer","children":[],"call":["@call_index remove_indexes_by_file ","path relative include? ","path relative ","@initializers delete_if "]}," Brakeman Constants get_simple_value":{"type":"method","name":"get_simple_value","children":[],"call":[" dir_glob? "," literal? "," [] "]}," Brakeman Config extract_version":{"type":"method","name":"extract_version","children":[],"call":["version [] ","version is_a? "]}," Brakeman Config rails_version":{"type":"method","name":"rails_version","children":[],"call":[]}," Brakeman Config escape_filter_interpolations?":{"type":"method","name":"escape_filter_interpolations?","children":[],"call":[" version_between? "," gem_version "," has_gem? "]}," Scanner parse_ruby_file":{"type":"method","name":"parse_ruby_file","children":[],"call":["fp parse_ruby ","file read ","Brakeman FileParser  new "," tracker ","@app_tree read "," tracker options [] "," tracker options "," tracker app_tree "," tracker error ","Brakeman FileParser  new  parse_ruby "]}," Report to_sarif":{"type":"method","name":"to_sarif","children":[],"call":[" generate "," require_report "]}," Text format_line":{"type":"method","name":"format_line","children":[],"call":[" label ","w called_from join ","w called_from ","w warning_code ","w fingerprint ","w link ","w line "," warning_file "," format_code ","w code ","w message ","w check gsub ","w check ","w warning_type to_s ","w warning_type "," confidence ","w confidence ","w check_name ","w cwe_id join ","w cwe_id "]}," Text generate_controllers":{"type":"method","name":"generate_controllers","children":[],"call":[" double_space ","controller insert "," label ","ci [] ","ci [] empty? ! ","ci [] empty? "," controller_information map "," controller_information "]}," Table truncate_table":{"type":"method","name":"truncate_table","children":[],"call":["(send\n  (lvar :lines) :map) join ","line [] + ","line [] ","@terminal_width - ","line chomp length > ","line chomp length ","line chomp ","lines map ","str lines "," HighLine  default_instance terminal terminal_size [] "," HighLine  default_instance terminal terminal_size "," HighLine  default_instance terminal "," HighLine  default_instance ","Brakeman  load_brakeman_dependency ","$stdin tty? ","@tracker options [] ","@tracker options ","(send\n  (lvar :str lines ) :map) join ","str lines  map ","str str lines  "]}," Table text_message":{"type":"method","name":"text_message","children":[],"call":["message << ","warning format_code ","warning format_with_user_input ","warning user_input ","warning code ","warning line ","message to_s ","message to_s  << ","warning format_warning format_code  ","warning warning format_code  ","message to_s  to_s "]}," Table convert_warning":{"type":"method","name":"convert_warning","children":[],"call":["warning []= "," text_message ","warning [] "]}," Table sort":{"type":"method","name":"sort","children":[],"call":["row values_at << ","row values_at ","rows sort_by "]}," Table convert_template_warning":{"type":"method","name":"convert_template_warning","children":[],"call":[" convert_warning "]}," Table convert_ignored_warning":{"type":"method","name":"convert_ignored_warning","children":[],"call":[" convert_warning "]}," Table convert_to_rows":{"type":"method","name":"convert_to_rows","children":[],"call":[" convert_warning "," convert_template_warning "," convert_ignored_warning ","warning to_row ","warnings map "," convert_warning to_row arning "," convert_template_warning to_row arning "," convert_ignored_warning to_row arning ","warning to_row arning to_rowarning to_row  ","warning to_row arnings map "]}," Table render_warnings":{"type":"method","name":"render_warnings","children":[],"call":[" render_array ","row values_at ","rows collect "," sort "," convert_to_rows ","warnings empty? "," sort  collect "," convert_to_ sort  "]}," Table generate_ignored_warnings":{"type":"method","name":"generate_ignored_warnings","children":[],"call":[" render_warnings "," ignored_warnings "]}," Table generate_controller_warnings":{"type":"method","name":"generate_controller_warnings","children":[],"call":[" render_warnings "," controller_warnings "]}," Table generate_model_warnings":{"type":"method","name":"generate_model_warnings","children":[],"call":[" render_warnings "," model_warnings "]}," Table generate_template_warnings":{"type":"method","name":"generate_template_warnings","children":[],"call":[" render_warnings "," template_warnings "]}," Table generate_warnings":{"type":"method","name":"generate_warnings","children":[],"call":[" render_warnings "," generic_warnings "]}," Table generate_obsolete":{"type":"method","name":"generate_obsolete","children":[],"call":[" render_array "," tracker "," tracker unused_fingerprints collect "," tracker unused_fingerprints "]}," Table generate_errors":{"type":"method","name":"generate_errors","children":[],"call":[" render_array "," tracker ","error [] [] ","error [] "," tracker errors collect "," tracker errors "]}," Table generate_controllers":{"type":"method","name":"generate_controllers","children":[],"call":[" render_array ","row values_at ","controller_rows collect "," controller_information "," controller_information  collect "]}," Table generate_warning_overview":{"type":"method","name":"generate_warning_overview","children":[],"call":[" render_array "," warnings_summary "," warnings_summary [] ","types sort collect ","types sort ","types delete "," warnings_summary keys "," warnings_summary keys  sort collect "," warnings_summary keys  sort "," warnings_summary keys  delete "]}," SARIF infer_level":{"type":"method","name":"infer_level","children":[],"call":["@@levels_from_confidence [] ","warning confidence ","Hash  new update ","Hash  new "]}," SARIF render_message":{"type":"method","name":"render_message","children":[],"call":["message end_with? ","message nil? "]}," SARIF render_id":{"type":"method","name":"render_id","children":[],"call":["%04d % ","warning warning_code "]}," SARIF unique_warnings_by_warning_code":{"type":"method","name":"unique_warnings_by_warning_code","children":[],"call":["w warning_code "," all_warnings uniq "," all_warnings "," tracker checks all_warnings uniq "," tracker checks all_warnings "," tracker checks "," tracker "]}," SARIF check_descriptions":{"type":"method","name":"check_descriptions","children":[],"call":["(send\n  (send\n    (const\n      (const nil :Brakeman) :Checks) :checks) :map) to_h ","check description ","check name gsub ","check name ","Brakeman Checks  checks map ","Brakeman Checks  checks "]}," SARIF results":{"type":"method","name":"results","children":[],"call":["warning line ","warning line is_a? ","warning file relative ","warning file ","r [] == ","r [] "," rules index "," rules "," render_message ","warning message to_s ","warning message "," infer_level "," render_id "," all_warnings map "," all_warnings ","result []= ","@ignore_filter file relative ","@ignore_filter file ","@ignore_filter note_for ","@ignore_filter ignored? "," tracker checks all_warnings map "," tracker checks all_warnings "," tracker checks "," tracker ","Brakeman FilePath  from_app_tree relative ","Brakeman FilePath  from_app_tree "]}," SARIF rules":{"type":"method","name":"rules","children":[],"call":["warning link ","warning warning_type "," render_message "," check_descriptions [] "," check_descriptions ","warning check gsub ","warning check "," render_id "," unique_warnings_by_warning_code map "," unique_warnings_by_warning_code ","warning check_name ","  render_message s [] ","  render_message s ","warning warning check gsub  ","warning warning check_name  "]}," SARIF runs":{"type":"method","name":"runs","children":[],"call":[" results "," rules "]}," SARIF generate_report":{"type":"method","name":"generate_report","children":[],"call":["JSON  pretty_generate "," runs "]}," JUnit generate_report":{"type":"method","name":"generate_report","children":[],"call":["io string ","doc write ","doc add ","test_suite add_element ","failure add_text ","warning to_s ","failure add_attribute ","warning format_code ","TEXT_CONFIDENCE  [] ","warning confidence ","warning line "," warning_file ","warning fingerprint ","warning warning_type ","warning message ","test_case add_element ","test_case add_attribute ","warning check ","warnings each ","test_suite add_attribute ","warnings length "," checks checks_run length "," checks checks_run "," checks ","hostname == "," tracker start_time strftime "," tracker start_time "," tracker ","file relative ","test_suites add_element ","(send\n  (block\n    (send\n      (send nil :all_warnings) :map)\n    (args\n      (arg :warning))\n    (array\n      (send\n        (lvar :warning) :file)\n      (array\n        (lvar :warning)))) :reduce\n  (hash)) each ","entries []= ","entries [] concat ","entries [] ","(send\n  (send nil :all_warnings) :map) reduce ","warning file "," all_warnings map "," all_warnings ","(str \"hostname\") strip ","warning add_text ","w to_s ","warning add_attribute ","w format_code ","w confidence ","w fingerprint ","w line ","w warning_type ","w message ","ignored add_element "," ignored_warnings each "," ignored_warnings ","obsolete add_element "," tracker unused_fingerprints each "," tracker unused_fingerprints ","backtrace add_text ","error add_element ","e [] each ","e [] ","error add_attribute ","errors add_element "," tracker errors each "," tracker errors ","properties add_element "," number_of_templates "," tracker models length - "," tracker models length "," tracker models "," tracker controllers length "," tracker controllers "," checks checks_run join "," tracker duration "," tracker end_time iso8601 "," tracker end_time "," tracker start_time iso8601 "," all_warnings length "," rails_version "," tracker app_path ","test_suites add_attribute ","REXML Element  new ","REXML XMLDecl  new ","REXML Document  new ","StringIO  new ","warning confidence_name ","w confidence_name ","StringIO  new  string ","REXML Document  new  write ","REXML Document  new  add ","test_suites add_element  add_element ","test_case add_element  add_text ","ignored add_element  to_s ","test_case add_element  add_attribute ","ignored add_element  format_code ","ignored add_element  confidence ","ignored add_element  line "," ignored add_element _file ","ignored add_element  fingerprint ","ignored add_element  ignored add_element _type ","ignored add_element  message ","test_suite add_element  add_element ","test_suite add_element  add_attribute ","ignored add_element  check ","ignored add_element s each ","test_suites add_element  add_attribute ","ignored add_element s length ","(str \"hostname\") strip  == ","test_suites add_element s add_element ","REXML Element  new  add_element ","(send\n  (block\n    (send\n      (send nil :all_ignored add_element s) :map)\n    (args\n      (arg :ignored add_element ))\n    (array\n      (send\n        (lvar :ignored add_element ) :file)\n      (array\n        (lvar :ignored add_element )))) :reduce\n  (hash)) each ","(send\n  (send nil :all_ignored add_element s) :map) reduce ","ignored add_element  file "," all_ignored add_element s map "," all_ignored add_element s ","(str \"(str \"hostname\") strip \") strip ","ignored add_element  add_text ","ignored add_element  add_attribute ","w ignored add_element _type "," ignored_ignored add_element s each "," test_suites add_element _warnings each "," ignored_ignored add_element s "," test_suites add_element _warnings ","error add_element  add_text ","errors add_element  add_element ","errors add_element  add_attribute ","errors add_element s add_element "," tracker errors add_element s each "," tracker test_suites add_element  each "," tracker errors add_element s "," tracker test_suites add_element  "," tracker duratStringIO  new n "," all_ignored add_element s length "," rails_versStringIO  new n ","test_suites add_element s add_attribute ","REXML Element  new  add_attribute ","ignored add_element  confidence_name "]}," CSV table_to_csv":{"type":"method","name":"table_to_csv","children":[],"call":["output << ","CSV  generate_line ","cell to_s strip ","cell to_s ","row cells map ","row cells ","table rows each ","table rows ","headings cells map ","headings cells ","headings first ","headings is_a? ","table headings ","Brakeman  load_brakeman_dependency ","CSV  generate_line  << ","headings first  cells map ","table headings  cells map ","headings first  cells ","table headings  cells ","headings first  first ","table headings  first ","headings first  is_a? ","table headings  is_a? ","table headings first  ","table table headings  "]}," Base github_url":{"type":"method","name":"github_url","children":[],"call":["url << ","file relative ","@tracker options [] ","@tracker options "]}," Base context_for":{"type":"method","name":"context_for","children":[],"call":["context << ","current_line >= ","current_line > ","line strip == ","line strip ","f each_line ","File  open ","start_line < ","warning line + ","warning line ","warning line - ","file exists? ","warning file ","warning line -  < ","warning file  exists? ","warning warning file  "]}," Base absolute_paths?":{"type":"method","name":"absolute_paths?","children":[],"call":["@tracker options [] ","@tracker options "]}," Base controller_information":{"type":"method","name":"controller_information","children":[],"call":["controller_rows << ","c includes join ","c includes ","c parent to_s ","c parent ","name to_s ","routes == ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort ","e to_s ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :methods_public) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :routes) :[]\n    (send\n      (lvar :name) :to_sym))) to_a map ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :methods_public) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :routes) :[]\n    (send\n      (lvar :name) :to_sym))) to_a ","Set  new & "," tracker routes [] ","name to_sym "," tracker routes "," tracker ","Set  new ","c methods_public keys ","c methods_public "," tracker routes [] nil? ","(send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort join ","(send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort ","c methods_public keys map "," tracker routes [] include? "," tracker routes include? "," tracker controllers [] "," tracker controllers ","(send\n  (send\n    (send\n      (send nil :tracker) :controllers) :keys) :map) sort each ","(send\n  (send\n    (send\n      (send nil :tracker) :controllers) :keys) :map) sort ","k to_s "," tracker controllers keys map "," tracker controllers keys "," tracker controllers [] ontroller_rows << "," tracker controllers []  in tracker controllers [] ludes join "," tracker controllers []  in tracker controllers [] ludes "," tracker controllers []  parent to_s "," tracker controllers []  parent ","name to_sym  to_s ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join  == ","(send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort join  == ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :(send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort join ) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ","(send\n  (send\n    (begin\n      (send\n        (send\n          ( tracker controllers [] onst nil :Set) :new\n          (send\n            (send\n              (lvar : tracker controllers [] ) :methods_publi tracker controllers [] ) :keys)) :&\n        (send\n          (send\n            (send nil :tra tracker controllers [] ker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name to_sym ) :to_sym)))) :to_a) :map) sort join ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :(send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort join ) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort ","(send\n  (send\n    (begin\n      (send\n        (send\n          ( tracker controllers [] onst nil :Set) :new\n          (send\n            (send\n              (lvar : tracker controllers [] ) :methods_publi tracker controllers [] ) :keys)) :&\n        (send\n          (send\n            (send nil :tra tracker controllers [] ker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort ","(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name to_sym ) :to_sym)))) :to_a) :map) sort ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :methods_public) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ) :[]\n    (send\n      (lvar :name) :to_sym))) to_a map ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :methods_public) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :(send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort join ) :[]\n    (send\n      (lvar :name) :to_sym))) to_a map ","(send\n  (send\n    ( tracker controllers [] onst nil :Set) :new\n    (send\n      (send\n        (lvar : tracker controllers [] ) :methods_publi tracker controllers [] ) :keys)) :&\n  (send\n    (send\n      (send nil :tra tracker controllers [] ker) :routes) :[]\n    (send\n      (lvar :name) :to_sym))) to_a map ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :methods_public) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :routes) :[]\n    (send\n      (lvar :name to_sym ) :to_sym))) to_a map ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :methods_public) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :(send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join ) :[]\n    (send\n      (lvar :name) :to_sym))) to_a ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :methods_public) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :(send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort join ) :[]\n    (send\n      (lvar :name) :to_sym))) to_a ","(send\n  (send\n    ( tracker controllers [] onst nil :Set) :new\n    (send\n      (send\n        (lvar : tracker controllers [] ) :methods_publi tracker controllers [] ) :keys)) :&\n  (send\n    (send\n      (send nil :tra tracker controllers [] ker) :routes) :[]\n    (send\n      (lvar :name) :to_sym))) to_a ","(send\n  (send\n    (const nil :Set) :new\n    (send\n      (send\n        (lvar :c) :methods_public) :keys)) :&\n  (send\n    (send\n      (send nil :tracker) :routes) :[]\n    (send\n      (lvar :name to_sym ) :to_sym))) to_a "," tracker (send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join  [] "," tracker (send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort join  [] "," tra tracker controllers [] ker routes [] ","name to_sym  to_sym "," tracker (send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join  "," tracker (send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort join  "," tra tracker controllers [] ker routes "," tra tracker controllers [] ker "," tracker controllers []  methods_publi tracker controllers []  keys "," tracker controllers []  methods_publi tracker controllers []  "," tracker (send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join  [] nil? "," tracker (send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort join  [] nil? "," tra tracker controllers [] ker routes [] nil? ","(send\n  (send\n    (send\n      (lvar : tracker controllers [] ) :methods_publi tracker controllers [] ) :keys) :map) sort join ","(send\n  (send\n    (send\n      (lvar : tracker controllers [] ) :methods_publi tracker controllers [] ) :keys) :map) sort "," tracker controllers []  methods_publi tracker controllers []  keys map "," tracker (send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join  [] include? "," tracker (send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort join  [] include? "," tra tracker controllers [] ker routes [] in tracker controllers [] lude? "," tracker (send\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Set) :new\n          (send\n            (send\n              (lvar :c) :methods_public) :keys)) :&\n        (send\n          (send\n            (send nil :tracker) :routes) :[]\n          (send\n            (lvar :name) :to_sym)))) :to_a) :map) sort join  include? "," tracker (send\n  (send\n    (send\n      (lvar :c) :methods_public) :keys) :map) sort join  include? "," tra tracker controllers [] ker routes in tracker controllers [] lude? "," tra tracker controllers [] ker  tracker controllers [] ontrollers [] "," tra tracker controllers [] ker  tracker controllers [] ontrollers ","(send\n  (send\n    (send\n      (send nil :tra tracker controllers [] ker) : tracker controllers [] ontrollers) :keys) :map) sort ea tracker controllers [] h ","(send\n  (send\n    (send\n      (send nil :tra tracker controllers [] ker) : tracker controllers [] ontrollers) :keys) :map) sort "," tra tracker controllers [] ker  tracker controllers [] ontrollers keys map "," tra tracker controllers [] ker  tracker controllers [] ontrollers keys "]}," Brakeman IgnoreConfig already_ignored_entries_with_empty_notes":{"type":"method","name":"already_ignored_entries_with_empty_notes","children":[],"call":["i [] strip empty? ","i [] strip ","i [] ","@already_ignored select "]}," TemplateAliasProcessor haml_capture?":{"type":"method","name":"haml_capture?","children":[],"call":["HAML_CAPTURE  include? ","exp block_call method ","exp block_call "," call? "," node_type? "]}," TemplateAliasProcessor process_lasgn":{"type":"method","name":"process_lasgn","children":[],"call":["new_exp rhs= ","exp rhs block_call ","exp rhs ","exp dup "," node_type? ","exp rhs= "," process "," haml_capture? ","exp lhs == ","exp lhs ","exp dup  rhs= "]}," SlimTemplateProcessor embedded_filter?":{"type":"method","name":"embedded_filter?","children":[],"call":["arg target == ","arg target ","arg method == ","arg method "," call? "]}," SlimTemplateProcessor normalize_output":{"type":"method","name":"normalize_output","children":[],"call":["arg first_arg "," embedded_filter? "]}," OutputProcessor initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Brakeman RenderPath with_relative_paths":{"type":"method","name":"with_relative_paths","children":[],"call":["r [] []= ","r [] [] relative ","r [] [] ","r [] ","r []= ","r [] dup ","r [] relative ","loc dup ","@path map ","loc dup  [] []= ","loc dup  [] [] loc dup elative ","loc dup  [] [] ","loc dup  [] ","loc dup  []= ","loc dup  [] dup ","loc dup  [] loc dup elative "]}," Brakeman RenderPath map":{"type":"method","name":"map","children":[],"call":["@path map "]}," Brakeman RenderPath last_template=":{"type":"method","name":"last_template=","children":[],"call":["Brakeman  debug ","@path last []= ","template file ","template name ","@path last "]}," Rails4ConfigProcessor process_iter":{"type":"method","name":"process_iter","children":[],"call":[" process ","exp block "," sexp? ","exp block_call == ","exp block_call "]}," ProcessorHelper current_file":{"type":"method","name":"current_file","children":[],"call":["@current_module file ","@current_module is_a? ","@current_class file ","@current_class is_a? "]}," FindAllCalls process_all_source":{"type":"method","name":"process_all_source","children":[],"call":[" process_source "]}," Brakeman CallConversionHelper process_hash_access":{"type":"method","name":"process_hash_access","children":[],"call":[" safe_literal ","hash line "," all_literals? "," hash_access "]}," Brakeman CallConversionHelper process_array_access":{"type":"method","name":"process_array_access","children":[],"call":["array [] [] ","array [] ","args first value ","args first "," integer? ","args length == ","args length "," safe_literal ","array line "," all_literals? "]}," Brakeman CallConversionHelper math_op":{"type":"method","name":"math_op","children":[],"call":[" safe_literal ","lhs line "," safe_literal? ","lhs first_arg= ","Sexp  new line ","lhs first_arg line ","lhs first_arg ","Sexp  new ","lhs first_arg value + ","rhs value ","lhs first_arg value "," number? ","lhs method == ","lhs method "," call? ","lhs value send ","lhs value ","lhs value is_a? ! ","lhs value is_a? ","rhs value == ","op == ","lhs first_arg lhs value send  + ","rhs lhs value send  ","lhs first_arg lhs value send  ","lhs lhs value send  send ","lhs lhs value send  ","lhs lhs value send  is_a? ! ","lhs lhs value send  is_a? ","rhs lhs value send  == "]}," Brakeman CallConversionHelper join_strings":{"type":"method","name":"join_strings","children":[],"call":["Brakeman  debug ","e inspect "," safe_literal ","lhs line "," safe_literal? ","lhs first_arg= "," join_strings ","lhs first_arg "," string? ","lhs method == ","lhs method "," call? ","result value= ","lhs value + ","rhs value ","lhs value ","Sexp  new line ","Sexp  new ","lhs value length + > ","lhs value length + ","rhs value length ","lhs value length ","result value length > ","result value length ","result value ","Sexp  new line  value= ","Sexp  new line  value length > ","Sexp  new line  value length ","Sexp  new line  value "]}," Brakeman CallConversionHelper join_arrays":{"type":"method","name":"join_arrays","children":[],"call":["result concat ","rhs [] ","lhs [] ","result line ","rhs line ","lhs line ","Sexp  new "," array? ","Sexp  new line ","Sexp  new  concat ","Sexp  new line  concat ","Sexp  new  line ","Sexp  new line  line "]}," Brakeman CallConversionHelper all_literals?":{"type":"method","name":"all_literals?","children":[],"call":[" node_type? ","e is_a? ","exp all? ","exp length > ","exp length "]}," HamlTemplateProcessor raw?":{"type":"method","name":"raw?","children":[],"call":["exp method == ","exp method "," call? "]}," HamlTemplateProcessor fix_textareas?":{"type":"method","name":"fix_textareas?","children":[],"call":["exp method == ","exp method ","exp target == ","exp target "," call? "]}," HamlTemplateProcessor hamlout_attributes?":{"type":"method","name":"hamlout_attributes?","children":[],"call":["exp method == ","exp method ","exp target == ","exp target "," call? "]}," HamlTemplateProcessor haml_helpers?":{"type":"method","name":"haml_helpers?","children":[],"call":["exp == "]}," HamlTemplateProcessor find_and_preserve?":{"type":"method","name":"find_and_preserve?","children":[],"call":["exp first_arg ","PRESERVE_METHODS  include? ","exp method "," call? "]}," HamlTemplateProcessor buffer_append?":{"type":"method","name":"buffer_append?","children":[],"call":["exp method == ","exp method ","exp target == ","exp target "," call? "]}," GemProcessor process_iter":{"type":"method","name":"process_iter","children":[],"call":[" process_default "," process ","exp block "," sexp? ","exp block_call method == ","exp block_call method ","exp block_call ","exp block_call target == ","exp block_call target "]}," AliasProcessor new_string?":{"type":"method","name":"new_string?","children":[],"call":["exp == "]}," AliasProcessor process_hash":{"type":"method","name":"process_hash","children":[],"call":[" process_hash_merge! ","e value ","kwsplats each ","Sexp  new concat line ","exp line ","Sexp  new concat ","Sexp  new "," node_type? ","exp partition ","exp any? "," process_default ","Sexp  from_array line ","Sexp  from_array ","new_hash concat << << ","new_hash concat << ","new_hash concat "," s line ","key line "," s ","key value ","new_hash << << ","var_value deep_clone ","new_hash << "," env [] "," env "," symbol? ","value nil? "," hash_iterate ","e nil? ","S process_hash_merge!   new concat line ","SSexp  new concat line   new concat line ","S process_default   new concat line "," process_hash_merge!  line ","Sexp  new concat line  line "," process_default  line ","S process_hash_merge!   new concat ","SSexp  new concat line   new concat ","S process_default   new concat ","S process_hash_merge!   new ","SSexp  new concat line   new ","S process_default   new "," process_hash_merge!  partition ","Sexp  new concat line  partition "," process_default  partition "," process_hash_merge!  any? ","Sexp  new concat line  any? "," process_default  any? ","S process_hash_merge!   from_array line ","SSexp  new concat line   from_array line ","S process_default   from_array line ","S process_hash_merge!   from_array ","SSexp  new concat line   from_array ","S process_default   from_array "," env []  deep_clone "]}," AliasProcessor join_item":{"type":"method","name":"join_item","children":[],"call":[" s ","item value "," number? "," symbol? "," string? ","item is_a? "," s line ","item line ","item nil? "]}," AliasProcessor process_array_join":{"type":"method","name":"process_array_join","children":[],"call":["memo << "," s "," node_type? ","memo last ","e value= ","e value "," string? ","result reduce ","result unshift ","e is_a? ","result reject! ","combined_first << ","result each ","result << "," join_item ","array last ","array [] each ","array [] ","join_str value "," s line ","e line ","array line ","string []= ","string last is_a? ","string last ","string length == ","string length ","array length > ","array length ","array length == "," s  reduce "," s line  reduce "," s  unshift "," s line  unshift "," s  reject! "," s line  reject! "," s  each "," s line  each "," s  << "," s line  << "]}," Slim Embedded CoffeeEngine tilt_render":{"type":"method","name":"tilt_render","children":[],"call":[" class ","text inspect "]}," Slim Embedded SassEngine tilt_render":{"type":"method","name":"tilt_render","children":[],"call":[" class ","text inspect "]}," Slim Embedded TiltEngine on_slim_embedded":{"type":"method","name":"on_slim_embedded","children":[],"call":[" collect_newlines "," tilt_render "," collect_text ","tilt_options [] "," options [] ","engine to_sym "," options "," raise ","Tilt  [] "]}," Brakeman FakeHamlFilter compile":{"type":"method","name":"compile","children":[],"call":[" push_script ","(str \"find_and_preserve(\") rstrip ","filter inspect ","\n + ","text sub ","(send\n  (str \"\\\\\") :*\n  (begin\n    (send\n      (lvar :escapes) :-\n      (int 1)))) + ","\\ * ","escapes - ","escapes % == ","escapes % ","1 size "," unescape_interpolation gsub "," unescape_interpolation ","compiler instance_eval ","\n +  sub ","(send\n  (str \"\\\\\") :*\n  (begin\n    (send\n      (lvar :1 size ) :-\n      (int 1)))) + ","1 size  - ","1 size  % == ","1 size  % "]}," Version to_html":{"type":"method","name":"to_html","children":[],"call":["CGI  escapeHTML "," to_s "]}," Version to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Version initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Plain to_html":{"type":"method","name":"to_html","children":[],"call":["CGI  escapeHTML "]}," Plain to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Plain initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Literal to_html":{"type":"method","name":"to_html","children":[],"call":[]}," Literal to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Literal initialize":{"type":"method","name":"initialize","children":[],"call":["value to_s "]}," Input to_html":{"type":"method","name":"to_html","children":[],"call":[" to_s "]}," Input to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Input friendly_type_of":{"type":"method","name":"friendly_type_of","children":[],"call":["input_type type ","input_type is_a? ","input_type type  type ","input_type type  is_a? "]}," Input initialize":{"type":"method","name":"initialize","children":[],"call":[" friendly_type_of "]}," FileName to_html":{"type":"method","name":"to_html","children":[],"call":["CGI  escapeHTML "]}," FileName to_s":{"type":"method","name":"to_s","children":[],"call":[]}," FileName initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CVE to_html":{"type":"method","name":"to_html","children":[],"call":[]}," CVE to_s":{"type":"method","name":"to_s","children":[],"call":[]}," CVE initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Code to_html":{"type":"method","name":"to_html","children":[],"call":["CGI  escapeHTML "]}," Code to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Code initialize":{"type":"method","name":"initialize","children":[],"call":["code to_s "]}," Message to_html":{"type":"method","name":"to_html","children":[],"call":["output []= ","output [] capitalize ","output [] ","@parts first ","@parts map join ","@parts map "," require ","@parts map join  []= ","@parts map join  [] capitalize ","@parts map join  [] "]}," Message to_s":{"type":"method","name":"to_s","children":[],"call":["output []= ","output [] capitalize ","output [] ","@parts first ","@parts map join ","@parts map ","@parts map join  []= ","@parts map join  [] capitalize ","@parts map join  [] "]}," Message <<":{"type":"method","name":"<<","children":[],"call":["@parts << ","Brakeman Messages Plain  new ","msg is_a? "]}," Message initialize":{"type":"method","name":"initialize","children":[],"call":["Brakeman Messages Plain  new ","a to_s ","args map "]}," Brakeman Messages msg_version":{"type":"method","name":"msg_version","children":[],"call":["Version  new "]}," Brakeman Messages msg_plain":{"type":"method","name":"msg_plain","children":[],"call":["Plain  new "]}," Brakeman Messages msg_lit":{"type":"method","name":"msg_lit","children":[],"call":["Literal  new "]}," Brakeman Messages msg_input":{"type":"method","name":"msg_input","children":[],"call":["Input  new "]}," Brakeman Messages msg_file":{"type":"method","name":"msg_file","children":[],"call":["Messages FileName  new "]}," Brakeman Messages msg_cve":{"type":"method","name":"msg_cve","children":[],"call":["CVE  new "]}," Brakeman Messages msg_code":{"type":"method","name":"msg_code","children":[],"call":["Code  new "]}," Brakeman Messages msg":{"type":"method","name":"msg","children":[],"call":["Message  new ","Plain  new ","a is_a? ","args map "]}," Brakeman FilePath eql?":{"type":"method","name":"eql?","children":[],"call":["@relative == ","rhs relative ","@absolute == ","rhs absolute "]}," Brakeman FilePath hash":{"type":"method","name":"hash","children":[],"call":["(ivar :@absolute) hash "]}," Brakeman FilePath to_s":{"type":"method","name":"to_s","children":[],"call":[" to_str "]}," Brakeman FilePath to_str":{"type":"method","name":"to_str","children":[],"call":[" absolute "]}," Brakeman FilePath ==":{"type":"method","name":"==","children":[],"call":[" absolute == ","rhs absolute "," absolute ","rhs is_a? "]}," Brakeman FilePath <=>":{"type":"method","name":"<=>","children":[],"call":[" relative <=> ","rhs relative "," relative "," raise ","rhs is_a? "]}," Brakeman FilePath exists?":{"type":"method","name":"exists?","children":[],"call":["File  exist? "," absolute "]}," Brakeman FilePath read":{"type":"method","name":"read","children":[],"call":["File  read "," absolute "]}," Brakeman FilePath basename":{"type":"method","name":"basename","children":[],"call":["File  basename "," relative "]}," Brakeman FilePath initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Brakeman FilePath from_app_tree":{"type":"method","name":"from_app_tree","children":[],"call":[]}," Differ fingerprint":{"type":"method","name":"fingerprint","children":[],"call":["warning [] ","warning fingerprint ","warning is_a? "]}," CheckUnscopedFind optional_belongs_to?":{"type":"method","name":"optional_belongs_to?","children":[],"call":[" true? "," hash_access "," hash? ","exp each ","exp is_a? "]}," CheckTemplateInjection process_result":{"type":"method","name":"process_result","children":[],"call":[" warn "," msg "," msg_code "," msg_input "," include_user_input? ","result [] arglist ","result [] "," original? "," msg_ include_user_input?  "," include_user_ include_user_input? ? "]}," CheckTemplateInjection run_check":{"type":"method","name":"run_check","children":[],"call":[" process_result ","erb_calls each ","Brakeman  debug "," tracker find_call "," tracker "," tracker find_call  each "]}," CheckSymbolDoS symbolizing_attributes?":{"type":"method","name":"symbolizing_attributes?","children":[],"call":["input match method == ","input match method ","input match "," call? ","input type == ","input type "]}," CheckSprocketsPathTraversal has_workaround?":{"type":"method","name":"has_workaround?","children":[],"call":[" false? "," tracker config rails [] [] "," tracker config rails [] "," tracker config rails "," tracker config "," tracker "]}," CheckSprocketsPathTraversal run_check":{"type":"method","name":"run_check","children":[],"call":[" warn "," gemfile_or_environment "," msg "," msg_version "," msg_cve "," version_between? "," has_workaround? "," tracker config gem_version "," tracker config "," tracker "]}," CheckSimpleFormat initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CheckSanitizeMethods loofah_vulnerable_cve_2018_8048?":{"type":"method","name":"loofah_vulnerable_cve_2018_8048?","children":[],"call":["loofah_version < "," tracker config gem_version "," tracker config "," tracker "," version_between? "," tracker config gem_version  < "]}," CheckSanitizeMethods check_cve_2018_8048":{"type":"method","name":"check_cve_2018_8048","children":[],"call":[" warn "," gemfile_or_environment "," tracker find_call any? "," tracker find_call "," tracker "," msg "," msg_version "," tracker config gem_version "," tracker config "," loofah_vulnerable_cve_2018_8048? "]}," CheckSanitizeMethods check_rails_html_sanitizer":{"type":"method","name":"check_rails_html_sanitizer","children":[],"call":[" warn_sanitizer_cve "," version_between? "," tracker config gem_version "," tracker config "," tracker "]}," CheckReverseTabnabbing process_result":{"type":"method","name":"process_result","children":[],"call":[" warn "," msg "," msg_code ","rel_opt include? ^ ","rel_opt include? ","rel value "," string? "," hash_access ","target_url method match ","target_url method "," call? ! "," call? ","result [] second_arg ","result [] ","result [] first_arg ","target value == ","target value "," symbol? "," hash? ","result [] last_arg "," original? ","rel value  include? ^ "," hash_access _opt include? ^ ","rel value  include? "," hash_access _opt include? "," hash_access  value ","result [] second_arg  method match ","result [] first_arg  method match "," hash_access _url method match ","result [] second_arg  method ","result [] first_arg  method "," hash_access _url method "," hash_access  value == "]}," CheckReverseTabnabbing run_check":{"type":"method","name":"run_check","children":[],"call":[" process_result ","calls each "," tracker find_call "," tracker "," tracker find_call  each "]}," CheckPageCachingCVE uses_caches_page?":{"type":"method","name":"uses_caches_page?","children":[],"call":["controller options has_key? ","controller options "," tracker controllers any? "," tracker controllers "," tracker "]}," CheckPageCachingCVE run_check":{"type":"method","name":"run_check","children":[],"call":[" warn "," gemfile_or_environment "," uses_caches_page? "," msg "," msg_version "," msg_cve "," version_between? "," tracker config gem_version ","gem_name to_sym "," tracker config "," tracker "," tracker config  tracker config gem_version  "]}," CheckMassAssignment check_permit_all_parameters":{"type":"method","name":"check_permit_all_parameters","children":[],"call":[" warn "," msg "," msg_code "," true? ","call first_arg ","result [] "," tracker find_call each "," tracker find_call "," tracker ","result []  first_arg "," tracker find_result []  each "," tracker find_result []  "]}," CheckMassAssignment calls_slice?":{"type":"method","name":"calls_slice?","children":[],"call":["result [] [] include? ","result [] [] ","result [] ","result [] include? "]}," CheckMassAssignment inside_safe_method?":{"type":"method","name":"inside_safe_method?","children":[],"call":["parent_call method match ","parent_call method "," call? ","result dig ","result dig  method match ","result dig  method "]}," CheckJSONParsing initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CheckJSONEntityEscape check_manual_disable":{"type":"method","name":"check_manual_disable","children":[],"call":[" warn "," msg "," false? ","result [] first_arg ","result [] "," tracker find_call each "," tracker find_call "," tracker "]}," CheckJSONEntityEscape check_config_setting":{"type":"method","name":"check_config_setting","children":[],"call":[" warn "," msg "," false? "," tracker config rails dig "," tracker config rails "," tracker config "," tracker "]}," CheckJSONEntityEscape run_check":{"type":"method","name":"run_check","children":[],"call":[" check_manual_disable "," check_config_setting "]}," CheckForceSSL run_check":{"type":"method","name":"run_check","children":[],"call":[" warn "," msg "," msg_code ","force_ssl line "," sexp? ","force_ssl nil? "," false? "," tracker config rails [] "," tracker config rails "," tracker config "," tracker "," tracker config rails_version < "," tracker config rails_version "," tracker config rails_version nil? "," tracker config rails empty? ","force_ssl force_ssl line  "," tracker config rails []  line "," tracker config rails []  nil? "]}," CheckFileAccess temp_file_method?":{"type":"method","name":"temp_file_method?","children":[],"call":["exp method == ","exp method "," params? ","exp target ","exp call_chain include? ","exp call_chain "," call? "]}," CheckFileAccess sanitized?":{"type":"method","name":"sanitized?","children":[],"call":[" class_name == "," class_name ","file target target ","file target "," call? "]}," CheckFileAccess called_on_tempfile?":{"type":"method","name":"called_on_tempfile?","children":[],"call":["file_name target == "," s ","file_name target "," call? "]}," CheckExecute shell_escape?":{"type":"method","name":"shell_escape?","children":[],"call":["SHELL_ESCAPE_MIXIN_METHODS  include? ","exp method ","SHELL_ESCAPE_MODULE_METHODS  include? ","exp target == ","exp target "," call? ","exp method == ","SHELL_ESCAPES  include? "]}," CheckExecute dangerous_string_building?":{"type":"method","name":"dangerous_string_building?","children":[],"call":["Match  new "," dangerous? "," string_building? "]}," CheckExecute include_interp?":{"type":"method","name":"include_interp?","children":[],"call":[" process "]}," CheckExecute include_user_input?":{"type":"method","name":"include_user_input?","children":[],"call":[" shell_escape? "," include_user_input? ","exp each_sexp "," node_type? "]}," CheckExecute dash_c_shell_command?":{"type":"method","name":"dash_c_shell_command?","children":[],"call":["second_arg value == ","second_arg value "," string? ","KNOWN_SHELL_COMMANDS  include? ","first_arg value "]}," CheckDeserialize uses_safe_yaml?":{"type":"method","name":"uses_safe_yaml?","children":[],"call":[" tracker config has_gem? "," tracker config "," tracker "]}," CheckDeserialize oj_safe_mode?":{"type":"method","name":"oj_safe_mode?","children":[],"call":["mode != "," symbol? "," hash_access "," hash? "," hash_access  != "]}," CheckDeserialize oj_safe_default?":{"type":"method","name":"oj_safe_default?","children":[],"call":[" oj_safe_mode? ","result [] first_arg ","result [] "," tracker find_call first "," tracker find_call "," tracker "," tracker find_call any? ","result call first_arg ","result call "," tracker check_initializers first "," tracker check_initializers "," tracker check_initializers any? "," tracker find_call first  [] first_arg "," tracker check_initializers first  [] first_arg "," tracker find_call first  [] "," tracker check_initializers first  [] "," tracker find_call first  call first_arg "," tracker check_initializers first  call first_arg "," tracker find_call first  call "," tracker check_initializers first  call "]}," CheckDeserialize check_oj":{"type":"method","name":"check_oj","children":[],"call":[" check_deserialize ","safe_default ! ","mode value == ","mode value "," symbol? "," hash_access "," hash? ","call second_arg ","result [] "," tracker find_call each "," tracker find_call "," tracker "," oj_safe_default? "," check_methods "," oj_safe_default?  ! "," hash_access  value == "," hash_access  value ","result []  second_arg "," tracker find_result []  each "," tracker find_result []  "," oj_ oj_safe_default? ? "]}," CheckDefaultRoutes initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CheckCSRFTokenForgeryCVE run_check":{"type":"method","name":"run_check","children":[],"call":[" warn "," gemfile_or_environment "," msg "," msg_version "," rails_version "," version_between? "]}," CheckCrossSiteScripting initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CheckCookieSerialization run_check":{"type":"method","name":"run_check","children":[],"call":[" warn "," msg "," msg_code ","setting value inspect ","setting value ","(sym :marshal) include? "," symbol? ","result [] first_arg ","result [] "," tracker find_call each "," tracker find_call "," tracker ","setting value == ","result [] first_arg  value inspect ","result [] first_arg  value ","result [] first_arg  value == "]}," BaseCheck string_building?":{"type":"method","name":"string_building?","children":[],"call":[" string_building? ","exp first_arg ","exp target "," node_type? ","STRING_METHODS  include? ","exp method "," call? "]}," BaseCheck get_location":{"type":"method","name":"get_location","children":[],"call":["location to_sym ","location name ","location is_a? ","location [] ","result [] [] to_s ","result [] [] ","result [] ","@current_template name "," raise ","result line ","result original_line "," sexp? ","result [] line ","result [] original_line ","result is_a? ","location to_sym  to_sym ","location name  to_sym ","location []  to_sym ","location to_sym  name ","location name  name ","location []  name ","location to_sym  is_a? ","location name  is_a? ","location []  is_a? ","location to_sym  [] ","location name  [] ","location []  [] "]}," BaseCheck array_interp?":{"type":"method","name":"array_interp?","children":[],"call":["exp length == ","exp length ","exp [] == "," freeze ","exp [] "," string_interp? "]}," BaseCheck process_array":{"type":"method","name":"process_array","children":[],"call":[" process_default "]}," CallIndex calls_by_targets_regex":{"type":"method","name":"calls_by_targets_regex","children":[],"call":["calls concat ","key match ","@calls_by_target each "]}," CallIndex remove_indexes_by_file":{"type":"method","name":"remove_indexes_by_file","children":[],"call":["call [] [] == ","call [] [] ","call [] ","calls delete_if ","calls_by each ","(ivar :@calls_by_method) each "]}," Brakeman AppTree convert_to_file_paths":{"type":"method","name":"convert_to_file_paths","children":[],"call":[" file_path ","paths map "]}," Brakeman AppTree find_job_paths":{"type":"method","name":"find_job_paths","children":[],"call":[" find_paths "]}," Brakeman AppTree gemspec":{"type":"method","name":"gemspec","children":[],"call":[" file_path ","File  basename ","gemspecs first ","gemspecs empty? ","gemspecs length > ","gemspecs length ","Dir  glob ","File  join ","@gemspec nil? ","Dir  glob  first ","Dir  glob  empty? ","Dir  glob  length > ","Dir  glob  length "," file_path  nil? ","File  basename  nil? "]}," Brakeman AppTree relative_path":{"type":"method","name":"relative_path","children":[],"call":["pname relative_path_from to_s ","pname relative_path_from ","Pathname  new "," root ","pname absolute? ","path empty? ! ","path empty? ","Pathname  new  relative_path_from to_s ","Pathname  new  relative_path_from ","Pathname  new  absolute? "]}," Brakeman AppTree file_path":{"type":"method","name":"file_path","children":[],"call":["Brakeman FilePath  from_app_tree "]}," JSON convert_render_path":{"type":"method","name":"convert_render_path","children":[],"call":["r [] []= "," relative_path ","r [] [] ","r [] ","r []= ","r [] dup ","r dup ","render_path map ","@tracker options [] ! ","@tracker options [] ","@tracker options ","r dup  [] []= "," r dup elative_path ","r dup  [] [] ","r dup  [] ","r dup  []= ","r dup  [] dup ","r dup  dup ","r dup ender dup _path map ","@tr dup acker dup  options [] ! ","@tr dup acker dup  options [] ","@tr dup acker dup  options "]}," Brakeman Config higher?":{"type":"method","name":"higher?","children":[],"call":["lhs > ","lhs class == ","rhs class ","lhs class "]}," Brakeman Config lower?":{"type":"method","name":"lower?","children":[],"call":["lhs < ","lhs class == ","rhs class ","lhs class "]}," Brakeman Config convert_version_number":{"type":"method","name":"convert_version_number","children":[],"call":["value to_i ","value match "]}," Brakeman Config supported_haml_version?":{"type":"method","name":"supported_haml_version?","children":[],"call":["requirement satisfied_by? ","Gem Version  new ","(str \"5.99.99\") none? ","Gem Requirement  new "," gem_version ","Gem Requirement  new  satisfied_by? "]}," Brakeman Config check_haml_version":{"type":"method","name":"check_haml_version","children":[],"call":["Brakeman  notify "," supported_haml_version? "]}," Warning confidence_name":{"type":"method","name":"confidence_name","children":[],"call":["TEXT_CONFIDENCE  [] "," confidence "]}," Warning check_name":{"type":"method","name":"check_name","children":[],"call":[" check sub "," check "]}," Tracker add_errors":{"type":"method","name":"add_errors","children":[],"call":[" error ","exceptions each "]}," Brakeman Config load_rails_defaults":{"type":"method","name":"load_rails_defaults","children":[],"call":[" set_rails_config ","Sexp  new ","version >= "," tracker config rails [] value "," tracker config rails [] "," tracker config rails "," tracker config "," tracker "," number? "," s ","Brakeman  debug ","version match? "," tracker config rails [] value to_s "," node_type? "," tracker config rails [] value  >= "," tracker config rails [] value to_s  >= "," tracker config rails [] value  match? "," tracker config rails [] value to_s  match? "]}," Brakeman Config set_rails_config":{"type":"method","name":"set_rails_config","children":[],"call":["config []= ","path last ","Brakeman  debug ","path map join ","path map ","option is_a? ! ","option is_a? ","config [] ","path [] each ","path [] "," rails ","config [] nil? "," rails  []= ","config []  is_a? ! ","config []  is_a? "," rails  [] "," rails  [] nil? "]}," Scanner detect_file_types":{"type":"method","name":"detect_file_types","children":[],"call":["@file_list [] << ","@file_list [] "," raise ","type to_s ","@file_list [] nil? ","type == ","detector detect_type ","file is_a? ","@parsed_files each ","Brakeman FileTypeDetector  new ","detector detect_type  to_s ","detector detect_type  == ","detector detect_detector detect_type  ","Brakeman FileTypeDetector  new  detect_type "]}," Report to_sonar":{"type":"method","name":"to_sonar","children":[],"call":[" generate "," require_report "]}," Sonar severity_level_for":{"type":"method","name":"severity_level_for","children":[],"call":["confidence == "]}," Sonar issue_json":{"type":"method","name":"issue_json","children":[],"call":["(send\n  (int 4) :-\n  (send\n    (lvar :warning) :confidence)) * ","4 - ","warning confidence ","warning line ","warning file relative ","warning file ","warning message "," severity_level_for ","warning warning_code "]}," Sonar generate_report":{"type":"method","name":"generate_report","children":[],"call":["JSON  pretty_generate "," issue_json "," all_warnings map "," all_warnings "]}," CSV warning_row":{"type":"method","name":"warning_row","children":[],"call":["warning link ","warning fingerprint ","warning warning_code ","warning check_name ","warning format_user_input ","warning user_input ","warning format_code ","warning code ","warning message ","warning line "," warning_file ","warning warning_type ","warning confidence_name ","warning cwe_id first ","warning cwe_id "]}," CSV generate_row":{"type":"method","name":"generate_row","children":[],"call":["CSV Row  new "," warning_row "]}," Rails3ConfigProcessor process_call":{"type":"method","name":"process_call","children":[],"call":["@tracker config rails []= ","exp first_arg ","exp method ","@tracker config rails ","@tracker config ","exp target == ","exp target "]}," Brakeman FileTypeDetector reset":{"type":"method","name":"reset","children":[],"call":[]}," Brakeman FileTypeDetector guess_from_path":{"type":"method","name":"guess_from_path","children":[],"call":["path match? ","path include? "]}," Brakeman FileTypeDetector process_class":{"type":"method","name":"process_class","children":[],"call":["MODEL_CLASSES  include? ","name match "," class_name ","exp parent_name ","exp class_name "," class_name  match "," class_ class_name  ","exp  class_name _name ","exp parent_ class_name  ","exp class_ class_name  "]}," Brakeman FileTypeDetector detect_type":{"type":"method","name":"detect_type","children":[],"call":[" guess_from_path ","file path relative ","file path ","@file_type nil? "," process ","file ast "," reset "," guess_from_path  nil? "]}," Brakeman FileTypeDetector initialize":{"type":"method","name":"initialize","children":[],"call":[" reset "]}," AliasProcessor temp_file_new":{"type":"method","name":"temp_file_new","children":[],"call":[" s line "," s "]}," AliasProcessor temp_file_open?":{"type":"method","name":"temp_file_open?","children":[],"call":["exp method == ","exp method ","exp target == ","exp target "," call? "]}," Brakeman FileParser error":{"type":"method","name":"error","children":[],"call":["@errors << "]}," CheckVerbConfusion warn_about_result":{"type":"method","name":"warn_about_result","children":[],"call":[" warn ","result [] "," msg "," msg_code "," original? "]}," CheckVerbConfusion process_if":{"type":"method","name":"process_if","children":[],"call":[" warn_about_result "," node_type? ","exp else_clause ","exp condition == ","exp condition "]}," CheckVerbConfusion process_result":{"type":"method","name":"process_result","children":[],"call":[" process ","method [] ","Brakeman  debug ","result [] [] ","result [] ","method nil? ","klass get_method ","klass nil? "," tracker find_class "," tracker ","method src ","klass get_method  [] ","klass get_method  nil? ","klass get_klass get_method  "," tracker find_class  get_method "," tracker find_class  nil? ","klass get_method  src "]}," CheckVerbConfusion run_check":{"type":"method","name":"run_check","children":[],"call":[" process_result ","calls each "," tracker find_call "," tracker "," tracker find_call  each "]}," CheckUnsafeReflectionMethods warn_unsafe_reflection":{"type":"method","name":"warn_unsafe_reflection","children":[],"call":[" warn "," msg "," msg_input "," msg_code ","input type == ","input type ","result [] method ","result [] "," original? ","result [] result [] method  "]}," CheckUnsafeReflectionMethods check_to_proc":{"type":"method","name":"check_to_proc","children":[],"call":[" warn_unsafe_reflection "," include_user_input? ","result [] target ","result [] "," tracker find_call each "," tracker find_call "," tracker "," include_ include_user_input? ? ","result [] result [] target  "]}," CheckUnsafeReflectionMethods check_tap":{"type":"method","name":"check_tap","children":[],"call":[" warn_unsafe_reflection "," include_user_input? ","argument value "," node_type? ","result [] first_arg ","result [] "," tracker find_call each "," tracker find_call "," tracker "," include_ include_user_input? ? ","argument value  value ","result [] first_arg  value "]}," CheckUnsafeReflectionMethods check_method":{"type":"method","name":"check_method","children":[],"call":[" warn_unsafe_reflection "," include_user_input? ","result [] first_arg ","result [] "," tracker find_call each "," tracker find_call "," tracker "," include_ include_user_input? ? "]}," CheckUnsafeReflectionMethods run_check":{"type":"method","name":"run_check","children":[],"call":[" check_to_proc "," check_tap "," check_method "]}," BaseCheck temp_file_path?":{"type":"method","name":"temp_file_path?","children":[],"call":["exp == "]}," Brakeman AppTree reject_global_excludes":{"type":"method","name":"reject_global_excludes","children":[],"call":["relative_path include? ","EXCLUDED_PATHS  any? ","path relative ","paths reject "," in_add_libs_paths? ! "," in_add_libs_paths? "," in_engine_paths? ! "," in_engine_paths? ","path relative  include? "]}," Brakeman AppTree ruby_file_paths":{"type":"method","name":"ruby_file_paths","children":[],"call":[" find_paths uniq "," find_paths "]}," AliasProcessor splat_array?":{"type":"method","name":"splat_array?","children":[],"call":[" node_type? ","exp [] "]}," Brakeman TemplateParser load_slim_smart?":{"type":"method","name":"load_slim_smart?","children":[],"call":["gemfile_contents include? "," tracker app_tree file_path read "," tracker app_tree file_path "," tracker app_tree "," tracker "," tracker app_tree exists? ","@slim_smart ! ","@slim_smart nil? "," tracker app_tree file_path read  include? "]}," Util hash_values":{"type":"method","name":"hash_values","children":[],"call":["Sexp  new concat line ","hash line ","Sexp  new concat ","Sexp  new ","hash each_sexp each_slice map ","hash each_sexp each_slice ","hash each_sexp "]}," Tracker find_method":{"type":"method","name":"find_method","children":[],"call":["@method_cache []= "," find_method ","klass parent ","klass includes each ","klass includes ","klass get_method ","@method_cache [] "," find_class ","method_name is_a? ","@ find_method _cache []= ","@klass get_method _cache []= ","@@method_cache [] _cache []= "," find_ find_method  "," find_klass get_method  "," find_@method_cache []  "," find_class  parent "," find_class  includes each "," find_class  includes ","klass get_ find_method  ","klass get_klass get_method  ","klass get_@method_cache []  "," find_class  get_method ","@ find_method _cache [] ","@klass get_method _cache [] ","@@method_cache [] _cache [] "," find_method _name is_a? ","klass get_method _name is_a? ","@method_cache [] _name is_a? "]}," Brakeman MethodInfo []":{"type":"method","name":"[]","children":[],"call":[" send "]}," Brakeman MethodInfo initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","src node_type "]}," Brakeman Collection get_class_method":{"type":"method","name":"get_class_method","children":[],"call":["@class_methods [] "]}," Brakeman Collection get_instance_method":{"type":"method","name":"get_instance_method","children":[],"call":["meths [] ","@methods each "]}," Github clean_message":{"type":"method","name":"clean_message","children":[],"call":["msg gsub squeeze ","msg gsub "]}," Github errors":{"type":"method","name":"errors","children":[],"call":[" clean_message ","error [] ","error [] message split map [] ","error [] message split map ","error [] message split ","error [] message ","error [] is_a? "," tracker errors map "," tracker errors "," tracker "]}," Github warnings":{"type":"method","name":"warnings","children":[],"call":["warning message ","warning line "," warning_file "," all_warnings map "," all_warnings "]}," Github generate_report":{"type":"method","name":"generate_report","children":[],"call":[" errors concat join "," errors concat "," warnings "," errors "]}," Brakeman CallConversionHelper hash_values_at":{"type":"method","name":"hash_values_at","children":[],"call":["Sexp  new concat line ","hash line ","Sexp  new concat ","Sexp  new "," process_hash_access ","keys map "]}," CheckSQL number_target?":{"type":"method","name":"number_target?","children":[],"call":[" number_target? ","exp target "," call? "," number? "]}," Sexp method_length":{"type":"method","name":"method_length","children":[],"call":[" length - "," length "," node_type "," expect "]}," Util all_literals?":{"type":"method","name":"all_literals?","children":[],"call":[" node_type? ","e is_a? ","exp all? ","exp length > ","exp length "]}," Util simple_literal?":{"type":"method","name":"simple_literal?","children":[],"call":["SIMPLE_LITERALS  include? ","exp node_type ","exp is_a? "]}," Util recurse_check?":{"type":"method","name":"recurse_check?","children":[],"call":[" recurse_check? ","exp [] ","exp [] == "," call? ","exp is_a? "]}," Brakeman MethodInfo first_body":{"type":"method","name":"first_body","children":[],"call":[" src [] "," src "]}," Brakeman MethodInfo return_value":{"type":"method","name":"return_value","children":[],"call":[" very_simple_method? "]}," Brakeman MethodInfo very_simple_method?":{"type":"method","name":"very_simple_method?","children":[],"call":[" all_literals? "," hash? "," array? "," simple_literal? "," first_body "," src method_length == "," src method_length "," src "," src formal_args length == "," src formal_args length "," src formal_args ","@simple_method == ","@simple_method nil? "]}," Brakeman Collection add_simple_method":{"type":"method","name":"add_simple_method","children":[],"call":[" raise "," src node_type "," src ","@simple_methods [] []= ","@simple_methods [] ","meth_info src node_type ","meth_info src ","meth_info return_value ","meth_info name ","meth_info return_meth_info return_value  ","meth_info meth_info name  "]}," Brakeman Collection add_simple_method_maybe":{"type":"method","name":"add_simple_method_maybe","children":[],"call":[" add_simple_method ","meth_info very_simple_method? "]}," Brakeman Collection get_simple_method_return_value":{"type":"method","name":"get_simple_method_return_value","children":[],"call":["@simple_methods [] [] ","@simple_methods [] "]}," ModelProcessor add_enum_method":{"type":"method","name":"add_enum_method","children":[],"call":["@current_class add_method "," s "," safe_literal ","enum_values << "," s line ","enums each_sexp with_index ","enums each_sexp "," array? "," hash? ","call line "," pluralize to_sym "," pluralize ","enum_name to_s ","arg [] ","arg [] value ","call first_arg "," symbol? "," s line  << ","arg []  each_sexp with_index ","arg []  each_sexp ","arg [] value  to_s ","call first_arg  [] ","call first_arg  [] value ","call first_call first_arg  "]}," AliasProcessor hash_include_all_literals?":{"type":"method","name":"hash_include_all_literals?","children":[],"call":[" all_literals? ","exp target ","exp method == ","exp method "," call? "]}," AliasProcessor hash_or_array_include_all_literals?":{"type":"method","name":"hash_or_array_include_all_literals?","children":[],"call":[" array_include_all_literals? "," hash_include_all_literals? ","target node_type ","exp target "," sexp? "," call? ","exp target  node_type ","exp exp target  "]}," CheckSQL date_target?":{"type":"method","name":"date_target?","children":[],"call":[" date_target? ","exp target "," call? ","exp target == "]}," CheckSQL ignore_call?":{"type":"method","name":"ignore_call?","children":[],"call":[" date_target? "," number_target? ","exp method to_s end_with? ","exp method to_s ","exp method "," arel? "," quote_call? "," ignore_methods_in_sql include? "," ignore_methods_in_sql "," call? "," locale_call? "]}," CheckSQL ignore_methods_in_sql":{"type":"method","name":"ignore_methods_in_sql","children":[],"call":["IGNORE_METHODS_IN_SQL  + "," tracker options [] "," tracker options "," tracker "]}," CheckRender known_renderable_class?":{"type":"method","name":"known_renderable_class?","children":[],"call":["klass ancestor? ","klass nil? "," tracker find_class "," tracker "," tracker find_class  ancestor? "," tracker find_class  nil? "]}," CheckRender renderable?":{"type":"method","name":"renderable?","children":[],"call":[" tracker find_method "," tracker "," known_renderable_class? "," class_name ","exp target "," constant? "," call? "]}," HamlTemplateProcessor haml_attribute_builder?":{"type":"method","name":"haml_attribute_builder?","children":[],"call":["exp method == ","exp method ","exp target == ","exp target "," call? "]}," EOLCheck warn_about_unsupported_version":{"type":"method","name":"warn_about_unsupported_version","children":[],"call":[" warn "," gemfile_or_environment "," msg "," msg_version ","library capitalize "]}," EOLCheck warn_about_soon_unsupported_version":{"type":"method","name":"warn_about_soon_unsupported_version","children":[],"call":[" warn "," gemfile_or_environment "," msg "," msg_version ","library capitalize "]}," EOLCheck check_eol_version":{"type":"method","name":"check_eol_version","children":[],"call":[" warn_about_soon_unsupported_version ","(send\n  (send\n    (const nil :Date) :today) :+\n  (int 60)) >= ","Date  today + ","Date  today ","(send\n  (send\n    (const nil :Date) :today) :+\n  (int 30)) >= "," warn_about_unsupported_version ","Date  today >= "," version_between? ","eol_dates each "," raise "," tracker config ruby_version "," tracker config "," tracker "," tracker config rails_version "]}," CheckEOLRuby run_check":{"type":"method","name":"run_check","children":[],"call":[" check_eol_version "," tracker config ruby_version "," tracker config "," tracker "]}," CheckEOLRails run_check":{"type":"method","name":"run_check","children":[],"call":[" check_eol_version "," tracker config rails_version "," tracker config "," tracker "]}," BaseCheck locale_call?":{"type":"method","name":"locale_call?","children":[],"call":[" locale_call? ","exp target ","exp method == ","exp method ","exp target == "," call? "]}," AliasProcessor equality_check?":{"type":"method","name":"equality_check?","children":[],"call":["exp method == ","exp method "," call? "]}," CheckSanitizeConfigCve has_tag?":{"type":"method","name":"has_tag?","children":[],"call":["e value == ","e value "," symbol? "," string? ","exp each_sexp ","tag to_sym "]}," CheckSanitizeConfigCve include_both_tags?":{"type":"method","name":"include_both_tags?","children":[],"call":[" has_tag? "," sexp? "]}," CheckSanitizeConfigCve check_result":{"type":"method","name":"check_result","children":[],"call":[" cve_warning "," include_both_tags? "]}," CheckSanitizeConfigCve check_tags_option":{"type":"method","name":"check_tags_option","children":[],"call":[" check_result "," hash_access ","result [] last_arg ","result [] "]}," CheckSanitizeConfigCve check_safe_list_allowed_tags":{"type":"method","name":"check_safe_list_allowed_tags","children":[],"call":[" check_result ","result [] first_arg ","result [] "," tracker find_call each "," tracker find_call "," tracker "]}," CheckSanitizeConfigCve check_sanitize_calls":{"type":"method","name":"check_sanitize_calls","children":[],"call":[" check_tags_option "," tracker find_call each "," tracker find_call "," tracker "]}," CheckSanitizeConfigCve check_config":{"type":"method","name":"check_config","children":[],"call":[" cve_warning "," include_both_tags? "," tracker config rails dig "," tracker config rails "," tracker config "," tracker "]}," CheckSanitizeConfigCve cve_warning":{"type":"method","name":"cve_warning","children":[],"call":[" warn "," gemfile_or_environment ","message << "," msg "," msg_cve "," msg_code "," msg_version "," original? ! "," original? "," msg  << "]}," CheckSanitizeConfigCve run_check":{"type":"method","name":"run_check","children":[],"call":[" cve_warning "," check_safe_list_allowed_tags "," check_sanitize_calls "," check_config "," version_between? "," tracker config gem_version "," tracker config "," tracker "]}," Brakeman AppTree in_add_libs_paths?":{"type":"method","name":"in_add_libs_paths?","children":[],"call":["path absolute include? ","path absolute ","@additional_libs_path any? "]}," Brakeman AppTree in_engine_paths?":{"type":"method","name":"in_engine_paths?","children":[],"call":["path absolute include? ","path absolute ","@engine_paths any? "]}," AliasProcessor all_literals_when?":{"type":"method","name":"all_literals_when?","children":[],"call":[" all_literals? ","exp [] [] [] ","exp [] [] ","exp [] "," splat_array? "," array? "]}," CheckWeakRSAKey check_padding":{"type":"method","name":"check_padding","children":[],"call":[" warn ","padding_arg value downcase! ","padding_arg value ","padding_arg deep_clone ","padding_arg line "," string? "," original? ","padding_arg deep_clone  value downcase! ","padding_arg deep_clone  value ","padding_arg deep_clone  deep_clone ","padding_arg deep_clone  line "]}," CheckWeakRSAKey check_key_size":{"type":"method","name":"check_key_size","children":[],"call":[" warn "," msg "," msg_code ","key_size to_s ","key_size < ","key_size_arg value "," original? "," number? ","key_size_arg value  to_s ","key_size_arg value  < ","key_size_arg value _arg value "]}," CheckWeakRSAKey check_rsa_operations":{"type":"method","name":"check_rsa_operations","children":[],"call":[" check_padding "," hash_access "," s "," hash? ","call last_arg ","result [] "," tracker find_call each "," tracker find_call "," tracker ","result [] second_arg ","result []  last_arg "," tracker find_result []  each "," tracker find_result []  "]}," CheckWeakRSAKey check_rsa_key_creation":{"type":"method","name":"check_rsa_key_creation","children":[],"call":[" check_key_size "," hash_access "," s ","key_type value upcase == ","key_type value upcase ","key_type value "," string? "," hash? ","call second_arg ","call first_arg ","result [] "," tracker find_call each "," tracker find_call "," tracker ","result [] first_arg ","call first_arg  value upcase == ","call first_arg  value upcase ","call first_arg  value ","result []  second_arg ","result []  first_arg "," tracker find_result []  each "," tracker find_result []  "]}," CheckWeakRSAKey run_check":{"type":"method","name":"run_check","children":[],"call":[" check_rsa_operations "," check_rsa_key_creation "]}," CheckPathname check_result":{"type":"method","name":"check_result","children":[],"call":[" warn "," has_immediate_user_input? ","result [] each_arg ","result [] "," original? "]}," CheckPathname check_pathname_join":{"type":"method","name":"check_pathname_join","children":[],"call":[" check_result "," tracker find_call each "," tracker find_call "," tracker "]}," CheckPathname check_rails_root_join":{"type":"method","name":"check_rails_root_join","children":[],"call":[" check_result "," tracker find_call each "," tracker find_call "," tracker "]}," CheckPathname run_check":{"type":"method","name":"run_check","children":[],"call":[" check_pathname_join "," check_rails_root_join "]}," Util request_headers?":{"type":"method","name":"request_headers?","children":[],"call":["exp first_arg value start_with? ","HTTP_ freeze ","exp first_arg value ","exp first_arg "," string? ","exp method == ","exp method ","exp [] == ","exp [] "," sexp? "]}," AliasProcessor process_branch_with_value":{"type":"method","name":"process_branch_with_value","children":[],"call":[" env current []= "," env current "," env "," process_if_branch "," env current [] "]}," AliasProcessor in_array_all_literals?":{"type":"method","name":"in_array_all_literals?","children":[],"call":[" all_literals? ","exp first_arg ","exp method == ","exp method "," call? "]}," CheckRedirect disallow_other_host?":{"type":"method","name":"disallow_other_host?","children":[],"call":[" false? "," hash_access "," hash? ","call last_arg "]}," CheckRedirect allow_other_host?":{"type":"method","name":"allow_other_host?","children":[],"call":[" true? "," hash_access "," hash? ","call last_arg "]}," CheckRedirect raise_on_redirects?":{"type":"method","name":"raise_on_redirects?","children":[],"call":[" true? "," tracker config rails dig "," tracker config rails "," tracker config "," tracker "]}," CheckRedirect protected_by_raise?":{"type":"method","name":"protected_by_raise?","children":[],"call":[" allow_other_host? ! "," allow_other_host? "," raise_on_redirects? "]}}